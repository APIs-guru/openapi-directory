# coding: utf-8

"""
    Cloud Storage JSON API

    Stores and retrieves potentially large, immutable data objects.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.bucket_iam_configuration import BucketIamConfiguration

class TestBucketIamConfiguration(unittest.TestCase):
    """BucketIamConfiguration unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> BucketIamConfiguration:
        """Test BucketIamConfiguration
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `BucketIamConfiguration`
        """
        model = BucketIamConfiguration()
        if include_optional:
            return BucketIamConfiguration(
                bucket_policy_only = openapi_client.models.bucket_iam_configuration_bucket_policy_only.Bucket_iamConfiguration_bucketPolicyOnly(
                    enabled = True, 
                    locked_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), ),
                public_access_prevention = '',
                uniform_bucket_level_access = openapi_client.models.bucket_iam_configuration_uniform_bucket_level_access.Bucket_iamConfiguration_uniformBucketLevelAccess(
                    enabled = True, 
                    locked_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), )
            )
        else:
            return BucketIamConfiguration(
        )
        """

    def testBucketIamConfiguration(self):
        """Test BucketIamConfiguration"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

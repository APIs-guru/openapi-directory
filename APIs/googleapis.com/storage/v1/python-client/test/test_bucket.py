# coding: utf-8

"""
    Cloud Storage JSON API

    Stores and retrieves potentially large, immutable data objects.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.bucket import Bucket

class TestBucket(unittest.TestCase):
    """Bucket unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> Bucket:
        """Test Bucket
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `Bucket`
        """
        model = Bucket()
        if include_optional:
            return Bucket(
                acl = [
                    openapi_client.models.bucket_access_control.BucketAccessControl(
                        bucket = '', 
                        domain = '', 
                        email = '', 
                        entity = '', 
                        entity_id = '', 
                        etag = '', 
                        id = '', 
                        kind = 'storage#bucketAccessControl', 
                        project_team = openapi_client.models.bucket_access_control_project_team.BucketAccessControl_projectTeam(
                            project_number = '', 
                            team = '', ), 
                        role = '', 
                        self_link = '', )
                    ],
                autoclass = openapi_client.models.bucket_autoclass.Bucket_autoclass(
                    enabled = True, 
                    terminal_storage_class = '', 
                    terminal_storage_class_update_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    toggle_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), ),
                billing = openapi_client.models.bucket_billing.Bucket_billing(
                    requester_pays = True, ),
                cors = [
                    openapi_client.models.bucket_cors_inner.Bucket_cors_inner(
                        max_age_seconds = 56, 
                        method = [
                            ''
                            ], 
                        origin = [
                            ''
                            ], 
                        response_header = [
                            ''
                            ], )
                    ],
                custom_placement_config = openapi_client.models.bucket_custom_placement_config.Bucket_customPlacementConfig(
                    data_locations = [
                        ''
                        ], ),
                default_event_based_hold = True,
                default_object_acl = [
                    openapi_client.models.object_access_control.ObjectAccessControl(
                        bucket = '', 
                        domain = '', 
                        email = '', 
                        entity = '', 
                        entity_id = '', 
                        etag = '', 
                        generation = '', 
                        id = '', 
                        kind = 'storage#objectAccessControl', 
                        object = '', 
                        project_team = openapi_client.models.bucket_access_control_project_team.BucketAccessControl_projectTeam(
                            project_number = '', 
                            team = '', ), 
                        role = '', 
                        self_link = '', )
                    ],
                encryption = openapi_client.models.bucket_encryption.Bucket_encryption(
                    default_kms_key_name = '', ),
                etag = '',
                hierarchical_namespace = openapi_client.models.bucket_hierarchical_namespace.Bucket_hierarchicalNamespace(
                    enabled = True, ),
                iam_configuration = openapi_client.models.bucket_iam_configuration.Bucket_iamConfiguration(
                    bucket_policy_only = openapi_client.models.bucket_iam_configuration_bucket_policy_only.Bucket_iamConfiguration_bucketPolicyOnly(
                        enabled = True, 
                        locked_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), ), 
                    public_access_prevention = '', 
                    uniform_bucket_level_access = openapi_client.models.bucket_iam_configuration_uniform_bucket_level_access.Bucket_iamConfiguration_uniformBucketLevelAccess(
                        enabled = True, 
                        locked_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), ), ),
                id = '',
                kind = 'storage#bucket',
                labels = {
                    'key' : ''
                    },
                lifecycle = openapi_client.models.bucket_lifecycle.Bucket_lifecycle(
                    rule = [
                        openapi_client.models.bucket_lifecycle_rule_inner.Bucket_lifecycle_rule_inner(
                            action = openapi_client.models.bucket_lifecycle_rule_inner_action.Bucket_lifecycle_rule_inner_action(
                                storage_class = '', 
                                type = '', ), 
                            condition = openapi_client.models.bucket_lifecycle_rule_inner_condition.Bucket_lifecycle_rule_inner_condition(
                                age = 56, 
                                created_before = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(), 
                                custom_time_before = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(), 
                                days_since_custom_time = 56, 
                                days_since_noncurrent_time = 56, 
                                is_live = True, 
                                matches_pattern = '', 
                                matches_prefix = [
                                    ''
                                    ], 
                                matches_storage_class = [
                                    ''
                                    ], 
                                matches_suffix = [
                                    ''
                                    ], 
                                noncurrent_time_before = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(), 
                                num_newer_versions = 56, ), )
                        ], ),
                location = '',
                location_type = '',
                logging = openapi_client.models.bucket_logging.Bucket_logging(
                    log_bucket = '', 
                    log_object_prefix = '', ),
                metageneration = '',
                name = '',
                object_retention = openapi_client.models.bucket_object_retention.Bucket_objectRetention(
                    mode = '', ),
                owner = openapi_client.models.bucket_owner.Bucket_owner(
                    entity = '', 
                    entity_id = '', ),
                project_number = '',
                retention_policy = openapi_client.models.bucket_retention_policy.Bucket_retentionPolicy(
                    effective_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    is_locked = True, 
                    retention_period = '', ),
                rpo = '',
                satisfies_pzs = True,
                self_link = '',
                soft_delete_policy = openapi_client.models.bucket_soft_delete_policy.Bucket_softDeletePolicy(
                    effective_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    retention_duration_seconds = '', ),
                storage_class = '',
                time_created = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                updated = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                versioning = openapi_client.models.bucket_versioning.Bucket_versioning(
                    enabled = True, ),
                website = openapi_client.models.bucket_website.Bucket_website(
                    main_page_suffix = '', 
                    not_found_page = '', )
            )
        else:
            return Bucket(
        )
        """

    def testBucket(self):
        """Test Bucket"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

# coding: utf-8

"""
    Cloud Storage JSON API

    Stores and retrieves potentially large, immutable data objects.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.object import Object

class TestObject(unittest.TestCase):
    """Object unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> Object:
        """Test Object
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `Object`
        """
        model = Object()
        if include_optional:
            return Object(
                acl = [
                    openapi_client.models.object_access_control.ObjectAccessControl(
                        bucket = '', 
                        domain = '', 
                        email = '', 
                        entity = '', 
                        entity_id = '', 
                        etag = '', 
                        generation = '', 
                        id = '', 
                        kind = 'storage#objectAccessControl', 
                        object = '', 
                        project_team = openapi_client.models.bucket_access_control_project_team.BucketAccessControl_projectTeam(
                            project_number = '', 
                            team = '', ), 
                        role = '', 
                        self_link = '', )
                    ],
                bucket = '',
                cache_control = '',
                component_count = 56,
                content_disposition = '',
                content_encoding = '',
                content_language = '',
                content_type = '',
                crc32c = '',
                custom_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                customer_encryption = openapi_client.models.object_customer_encryption.Object_customerEncryption(
                    encryption_algorithm = '', 
                    key_sha256 = '', ),
                etag = '',
                event_based_hold = True,
                generation = '',
                hard_delete_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                id = '',
                kind = 'storage#object',
                kms_key_name = '',
                md5_hash = '',
                media_link = '',
                metadata = {
                    'key' : ''
                    },
                metageneration = '',
                name = '',
                owner = openapi_client.models.object_owner.Object_owner(
                    entity = '', 
                    entity_id = '', ),
                retention = openapi_client.models.object_retention.Object_retention(
                    mode = '', 
                    retain_until_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), ),
                retention_expiration_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                self_link = '',
                size = '',
                soft_delete_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                storage_class = '',
                temporary_hold = True,
                time_created = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                time_deleted = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                time_storage_class_updated = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                updated = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f')
            )
        else:
            return Object(
        )
        """

    def testObject(self):
        """Test Object"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

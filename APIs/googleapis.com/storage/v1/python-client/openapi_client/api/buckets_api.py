# coding: utf-8

"""
    Cloud Storage JSON API

    Stores and retrieves potentially large, immutable data objects.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from pydantic import Field, StrictBool, StrictStr, field_validator
from typing import List, Optional
from typing_extensions import Annotated
from openapi_client.models.bucket import Bucket
from openapi_client.models.buckets import Buckets
from openapi_client.models.policy import Policy
from openapi_client.models.test_iam_permissions_response import TestIamPermissionsResponse

from openapi_client.api_client import ApiClient, RequestSerialized
from openapi_client.api_response import ApiResponse
from openapi_client.rest import RESTResponseType


class BucketsApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def storage_buckets_delete(
        self,
        bucket: Annotated[StrictStr, Field(description="Name of a bucket.")],
        alt: Annotated[Optional[StrictStr], Field(description="Data format for the response.")] = None,
        fields: Annotated[Optional[StrictStr], Field(description="Selector specifying which fields to include in a partial response.")] = None,
        key: Annotated[Optional[StrictStr], Field(description="API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.")] = None,
        oauth_token: Annotated[Optional[StrictStr], Field(description="OAuth 2.0 token for the current user.")] = None,
        pretty_print: Annotated[Optional[StrictBool], Field(description="Returns response with indentations and line breaks.")] = None,
        quota_user: Annotated[Optional[StrictStr], Field(description="An opaque string that represents a user for quota purposes. Must not exceed 40 characters.")] = None,
        upload_type: Annotated[Optional[StrictStr], Field(description="Upload protocol for media (e.g. \"media\", \"multipart\", \"resumable\").")] = None,
        user_ip: Annotated[Optional[StrictStr], Field(description="Deprecated. Please use quotaUser instead.")] = None,
        if_metageneration_match: Annotated[Optional[StrictStr], Field(description="If set, only deletes the bucket if its metageneration matches this value.")] = None,
        if_metageneration_not_match: Annotated[Optional[StrictStr], Field(description="If set, only deletes the bucket if its metageneration does not match this value.")] = None,
        user_project: Annotated[Optional[StrictStr], Field(description="The project to be billed for this request. Required for Requester Pays buckets.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """storage_buckets_delete

        Permanently deletes an empty bucket.

        :param bucket: Name of a bucket. (required)
        :type bucket: str
        :param alt: Data format for the response.
        :type alt: str
        :param fields: Selector specifying which fields to include in a partial response.
        :type fields: str
        :param key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
        :type key: str
        :param oauth_token: OAuth 2.0 token for the current user.
        :type oauth_token: str
        :param pretty_print: Returns response with indentations and line breaks.
        :type pretty_print: bool
        :param quota_user: An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
        :type quota_user: str
        :param upload_type: Upload protocol for media (e.g. \"media\", \"multipart\", \"resumable\").
        :type upload_type: str
        :param user_ip: Deprecated. Please use quotaUser instead.
        :type user_ip: str
        :param if_metageneration_match: If set, only deletes the bucket if its metageneration matches this value.
        :type if_metageneration_match: str
        :param if_metageneration_not_match: If set, only deletes the bucket if its metageneration does not match this value.
        :type if_metageneration_not_match: str
        :param user_project: The project to be billed for this request. Required for Requester Pays buckets.
        :type user_project: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._storage_buckets_delete_serialize(
            bucket=bucket,
            alt=alt,
            fields=fields,
            key=key,
            oauth_token=oauth_token,
            pretty_print=pretty_print,
            quota_user=quota_user,
            upload_type=upload_type,
            user_ip=user_ip,
            if_metageneration_match=if_metageneration_match,
            if_metageneration_not_match=if_metageneration_not_match,
            user_project=user_project,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def storage_buckets_delete_with_http_info(
        self,
        bucket: Annotated[StrictStr, Field(description="Name of a bucket.")],
        alt: Annotated[Optional[StrictStr], Field(description="Data format for the response.")] = None,
        fields: Annotated[Optional[StrictStr], Field(description="Selector specifying which fields to include in a partial response.")] = None,
        key: Annotated[Optional[StrictStr], Field(description="API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.")] = None,
        oauth_token: Annotated[Optional[StrictStr], Field(description="OAuth 2.0 token for the current user.")] = None,
        pretty_print: Annotated[Optional[StrictBool], Field(description="Returns response with indentations and line breaks.")] = None,
        quota_user: Annotated[Optional[StrictStr], Field(description="An opaque string that represents a user for quota purposes. Must not exceed 40 characters.")] = None,
        upload_type: Annotated[Optional[StrictStr], Field(description="Upload protocol for media (e.g. \"media\", \"multipart\", \"resumable\").")] = None,
        user_ip: Annotated[Optional[StrictStr], Field(description="Deprecated. Please use quotaUser instead.")] = None,
        if_metageneration_match: Annotated[Optional[StrictStr], Field(description="If set, only deletes the bucket if its metageneration matches this value.")] = None,
        if_metageneration_not_match: Annotated[Optional[StrictStr], Field(description="If set, only deletes the bucket if its metageneration does not match this value.")] = None,
        user_project: Annotated[Optional[StrictStr], Field(description="The project to be billed for this request. Required for Requester Pays buckets.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """storage_buckets_delete

        Permanently deletes an empty bucket.

        :param bucket: Name of a bucket. (required)
        :type bucket: str
        :param alt: Data format for the response.
        :type alt: str
        :param fields: Selector specifying which fields to include in a partial response.
        :type fields: str
        :param key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
        :type key: str
        :param oauth_token: OAuth 2.0 token for the current user.
        :type oauth_token: str
        :param pretty_print: Returns response with indentations and line breaks.
        :type pretty_print: bool
        :param quota_user: An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
        :type quota_user: str
        :param upload_type: Upload protocol for media (e.g. \"media\", \"multipart\", \"resumable\").
        :type upload_type: str
        :param user_ip: Deprecated. Please use quotaUser instead.
        :type user_ip: str
        :param if_metageneration_match: If set, only deletes the bucket if its metageneration matches this value.
        :type if_metageneration_match: str
        :param if_metageneration_not_match: If set, only deletes the bucket if its metageneration does not match this value.
        :type if_metageneration_not_match: str
        :param user_project: The project to be billed for this request. Required for Requester Pays buckets.
        :type user_project: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._storage_buckets_delete_serialize(
            bucket=bucket,
            alt=alt,
            fields=fields,
            key=key,
            oauth_token=oauth_token,
            pretty_print=pretty_print,
            quota_user=quota_user,
            upload_type=upload_type,
            user_ip=user_ip,
            if_metageneration_match=if_metageneration_match,
            if_metageneration_not_match=if_metageneration_not_match,
            user_project=user_project,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def storage_buckets_delete_without_preload_content(
        self,
        bucket: Annotated[StrictStr, Field(description="Name of a bucket.")],
        alt: Annotated[Optional[StrictStr], Field(description="Data format for the response.")] = None,
        fields: Annotated[Optional[StrictStr], Field(description="Selector specifying which fields to include in a partial response.")] = None,
        key: Annotated[Optional[StrictStr], Field(description="API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.")] = None,
        oauth_token: Annotated[Optional[StrictStr], Field(description="OAuth 2.0 token for the current user.")] = None,
        pretty_print: Annotated[Optional[StrictBool], Field(description="Returns response with indentations and line breaks.")] = None,
        quota_user: Annotated[Optional[StrictStr], Field(description="An opaque string that represents a user for quota purposes. Must not exceed 40 characters.")] = None,
        upload_type: Annotated[Optional[StrictStr], Field(description="Upload protocol for media (e.g. \"media\", \"multipart\", \"resumable\").")] = None,
        user_ip: Annotated[Optional[StrictStr], Field(description="Deprecated. Please use quotaUser instead.")] = None,
        if_metageneration_match: Annotated[Optional[StrictStr], Field(description="If set, only deletes the bucket if its metageneration matches this value.")] = None,
        if_metageneration_not_match: Annotated[Optional[StrictStr], Field(description="If set, only deletes the bucket if its metageneration does not match this value.")] = None,
        user_project: Annotated[Optional[StrictStr], Field(description="The project to be billed for this request. Required for Requester Pays buckets.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """storage_buckets_delete

        Permanently deletes an empty bucket.

        :param bucket: Name of a bucket. (required)
        :type bucket: str
        :param alt: Data format for the response.
        :type alt: str
        :param fields: Selector specifying which fields to include in a partial response.
        :type fields: str
        :param key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
        :type key: str
        :param oauth_token: OAuth 2.0 token for the current user.
        :type oauth_token: str
        :param pretty_print: Returns response with indentations and line breaks.
        :type pretty_print: bool
        :param quota_user: An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
        :type quota_user: str
        :param upload_type: Upload protocol for media (e.g. \"media\", \"multipart\", \"resumable\").
        :type upload_type: str
        :param user_ip: Deprecated. Please use quotaUser instead.
        :type user_ip: str
        :param if_metageneration_match: If set, only deletes the bucket if its metageneration matches this value.
        :type if_metageneration_match: str
        :param if_metageneration_not_match: If set, only deletes the bucket if its metageneration does not match this value.
        :type if_metageneration_not_match: str
        :param user_project: The project to be billed for this request. Required for Requester Pays buckets.
        :type user_project: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._storage_buckets_delete_serialize(
            bucket=bucket,
            alt=alt,
            fields=fields,
            key=key,
            oauth_token=oauth_token,
            pretty_print=pretty_print,
            quota_user=quota_user,
            upload_type=upload_type,
            user_ip=user_ip,
            if_metageneration_match=if_metageneration_match,
            if_metageneration_not_match=if_metageneration_not_match,
            user_project=user_project,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _storage_buckets_delete_serialize(
        self,
        bucket,
        alt,
        fields,
        key,
        oauth_token,
        pretty_print,
        quota_user,
        upload_type,
        user_ip,
        if_metageneration_match,
        if_metageneration_not_match,
        user_project,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if bucket is not None:
            _path_params['bucket'] = bucket
        # process the query parameters
        if alt is not None:
            
            _query_params.append(('alt', alt))
            
        if fields is not None:
            
            _query_params.append(('fields', fields))
            
        if key is not None:
            
            _query_params.append(('key', key))
            
        if oauth_token is not None:
            
            _query_params.append(('oauth_token', oauth_token))
            
        if pretty_print is not None:
            
            _query_params.append(('prettyPrint', pretty_print))
            
        if quota_user is not None:
            
            _query_params.append(('quotaUser', quota_user))
            
        if upload_type is not None:
            
            _query_params.append(('uploadType', upload_type))
            
        if user_ip is not None:
            
            _query_params.append(('userIp', user_ip))
            
        if if_metageneration_match is not None:
            
            _query_params.append(('ifMetagenerationMatch', if_metageneration_match))
            
        if if_metageneration_not_match is not None:
            
            _query_params.append(('ifMetagenerationNotMatch', if_metageneration_not_match))
            
        if user_project is not None:
            
            _query_params.append(('userProject', user_project))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter




        # authentication setting
        _auth_settings: List[str] = [
            'Oauth2c', 
            'Oauth2'
        ]

        return self.api_client.param_serialize(
            method='DELETE',
            resource_path='/b/{bucket}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def storage_buckets_get(
        self,
        bucket: Annotated[StrictStr, Field(description="Name of a bucket.")],
        alt: Annotated[Optional[StrictStr], Field(description="Data format for the response.")] = None,
        fields: Annotated[Optional[StrictStr], Field(description="Selector specifying which fields to include in a partial response.")] = None,
        key: Annotated[Optional[StrictStr], Field(description="API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.")] = None,
        oauth_token: Annotated[Optional[StrictStr], Field(description="OAuth 2.0 token for the current user.")] = None,
        pretty_print: Annotated[Optional[StrictBool], Field(description="Returns response with indentations and line breaks.")] = None,
        quota_user: Annotated[Optional[StrictStr], Field(description="An opaque string that represents a user for quota purposes. Must not exceed 40 characters.")] = None,
        upload_type: Annotated[Optional[StrictStr], Field(description="Upload protocol for media (e.g. \"media\", \"multipart\", \"resumable\").")] = None,
        user_ip: Annotated[Optional[StrictStr], Field(description="Deprecated. Please use quotaUser instead.")] = None,
        if_metageneration_match: Annotated[Optional[StrictStr], Field(description="Makes the return of the bucket metadata conditional on whether the bucket's current metageneration matches the given value.")] = None,
        if_metageneration_not_match: Annotated[Optional[StrictStr], Field(description="Makes the return of the bucket metadata conditional on whether the bucket's current metageneration does not match the given value.")] = None,
        projection: Annotated[Optional[StrictStr], Field(description="Set of properties to return. Defaults to noAcl.")] = None,
        user_project: Annotated[Optional[StrictStr], Field(description="The project to be billed for this request. Required for Requester Pays buckets.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> Bucket:
        """storage_buckets_get

        Returns metadata for the specified bucket.

        :param bucket: Name of a bucket. (required)
        :type bucket: str
        :param alt: Data format for the response.
        :type alt: str
        :param fields: Selector specifying which fields to include in a partial response.
        :type fields: str
        :param key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
        :type key: str
        :param oauth_token: OAuth 2.0 token for the current user.
        :type oauth_token: str
        :param pretty_print: Returns response with indentations and line breaks.
        :type pretty_print: bool
        :param quota_user: An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
        :type quota_user: str
        :param upload_type: Upload protocol for media (e.g. \"media\", \"multipart\", \"resumable\").
        :type upload_type: str
        :param user_ip: Deprecated. Please use quotaUser instead.
        :type user_ip: str
        :param if_metageneration_match: Makes the return of the bucket metadata conditional on whether the bucket's current metageneration matches the given value.
        :type if_metageneration_match: str
        :param if_metageneration_not_match: Makes the return of the bucket metadata conditional on whether the bucket's current metageneration does not match the given value.
        :type if_metageneration_not_match: str
        :param projection: Set of properties to return. Defaults to noAcl.
        :type projection: str
        :param user_project: The project to be billed for this request. Required for Requester Pays buckets.
        :type user_project: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._storage_buckets_get_serialize(
            bucket=bucket,
            alt=alt,
            fields=fields,
            key=key,
            oauth_token=oauth_token,
            pretty_print=pretty_print,
            quota_user=quota_user,
            upload_type=upload_type,
            user_ip=user_ip,
            if_metageneration_match=if_metageneration_match,
            if_metageneration_not_match=if_metageneration_not_match,
            projection=projection,
            user_project=user_project,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Bucket",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def storage_buckets_get_with_http_info(
        self,
        bucket: Annotated[StrictStr, Field(description="Name of a bucket.")],
        alt: Annotated[Optional[StrictStr], Field(description="Data format for the response.")] = None,
        fields: Annotated[Optional[StrictStr], Field(description="Selector specifying which fields to include in a partial response.")] = None,
        key: Annotated[Optional[StrictStr], Field(description="API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.")] = None,
        oauth_token: Annotated[Optional[StrictStr], Field(description="OAuth 2.0 token for the current user.")] = None,
        pretty_print: Annotated[Optional[StrictBool], Field(description="Returns response with indentations and line breaks.")] = None,
        quota_user: Annotated[Optional[StrictStr], Field(description="An opaque string that represents a user for quota purposes. Must not exceed 40 characters.")] = None,
        upload_type: Annotated[Optional[StrictStr], Field(description="Upload protocol for media (e.g. \"media\", \"multipart\", \"resumable\").")] = None,
        user_ip: Annotated[Optional[StrictStr], Field(description="Deprecated. Please use quotaUser instead.")] = None,
        if_metageneration_match: Annotated[Optional[StrictStr], Field(description="Makes the return of the bucket metadata conditional on whether the bucket's current metageneration matches the given value.")] = None,
        if_metageneration_not_match: Annotated[Optional[StrictStr], Field(description="Makes the return of the bucket metadata conditional on whether the bucket's current metageneration does not match the given value.")] = None,
        projection: Annotated[Optional[StrictStr], Field(description="Set of properties to return. Defaults to noAcl.")] = None,
        user_project: Annotated[Optional[StrictStr], Field(description="The project to be billed for this request. Required for Requester Pays buckets.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[Bucket]:
        """storage_buckets_get

        Returns metadata for the specified bucket.

        :param bucket: Name of a bucket. (required)
        :type bucket: str
        :param alt: Data format for the response.
        :type alt: str
        :param fields: Selector specifying which fields to include in a partial response.
        :type fields: str
        :param key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
        :type key: str
        :param oauth_token: OAuth 2.0 token for the current user.
        :type oauth_token: str
        :param pretty_print: Returns response with indentations and line breaks.
        :type pretty_print: bool
        :param quota_user: An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
        :type quota_user: str
        :param upload_type: Upload protocol for media (e.g. \"media\", \"multipart\", \"resumable\").
        :type upload_type: str
        :param user_ip: Deprecated. Please use quotaUser instead.
        :type user_ip: str
        :param if_metageneration_match: Makes the return of the bucket metadata conditional on whether the bucket's current metageneration matches the given value.
        :type if_metageneration_match: str
        :param if_metageneration_not_match: Makes the return of the bucket metadata conditional on whether the bucket's current metageneration does not match the given value.
        :type if_metageneration_not_match: str
        :param projection: Set of properties to return. Defaults to noAcl.
        :type projection: str
        :param user_project: The project to be billed for this request. Required for Requester Pays buckets.
        :type user_project: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._storage_buckets_get_serialize(
            bucket=bucket,
            alt=alt,
            fields=fields,
            key=key,
            oauth_token=oauth_token,
            pretty_print=pretty_print,
            quota_user=quota_user,
            upload_type=upload_type,
            user_ip=user_ip,
            if_metageneration_match=if_metageneration_match,
            if_metageneration_not_match=if_metageneration_not_match,
            projection=projection,
            user_project=user_project,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Bucket",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def storage_buckets_get_without_preload_content(
        self,
        bucket: Annotated[StrictStr, Field(description="Name of a bucket.")],
        alt: Annotated[Optional[StrictStr], Field(description="Data format for the response.")] = None,
        fields: Annotated[Optional[StrictStr], Field(description="Selector specifying which fields to include in a partial response.")] = None,
        key: Annotated[Optional[StrictStr], Field(description="API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.")] = None,
        oauth_token: Annotated[Optional[StrictStr], Field(description="OAuth 2.0 token for the current user.")] = None,
        pretty_print: Annotated[Optional[StrictBool], Field(description="Returns response with indentations and line breaks.")] = None,
        quota_user: Annotated[Optional[StrictStr], Field(description="An opaque string that represents a user for quota purposes. Must not exceed 40 characters.")] = None,
        upload_type: Annotated[Optional[StrictStr], Field(description="Upload protocol for media (e.g. \"media\", \"multipart\", \"resumable\").")] = None,
        user_ip: Annotated[Optional[StrictStr], Field(description="Deprecated. Please use quotaUser instead.")] = None,
        if_metageneration_match: Annotated[Optional[StrictStr], Field(description="Makes the return of the bucket metadata conditional on whether the bucket's current metageneration matches the given value.")] = None,
        if_metageneration_not_match: Annotated[Optional[StrictStr], Field(description="Makes the return of the bucket metadata conditional on whether the bucket's current metageneration does not match the given value.")] = None,
        projection: Annotated[Optional[StrictStr], Field(description="Set of properties to return. Defaults to noAcl.")] = None,
        user_project: Annotated[Optional[StrictStr], Field(description="The project to be billed for this request. Required for Requester Pays buckets.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """storage_buckets_get

        Returns metadata for the specified bucket.

        :param bucket: Name of a bucket. (required)
        :type bucket: str
        :param alt: Data format for the response.
        :type alt: str
        :param fields: Selector specifying which fields to include in a partial response.
        :type fields: str
        :param key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
        :type key: str
        :param oauth_token: OAuth 2.0 token for the current user.
        :type oauth_token: str
        :param pretty_print: Returns response with indentations and line breaks.
        :type pretty_print: bool
        :param quota_user: An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
        :type quota_user: str
        :param upload_type: Upload protocol for media (e.g. \"media\", \"multipart\", \"resumable\").
        :type upload_type: str
        :param user_ip: Deprecated. Please use quotaUser instead.
        :type user_ip: str
        :param if_metageneration_match: Makes the return of the bucket metadata conditional on whether the bucket's current metageneration matches the given value.
        :type if_metageneration_match: str
        :param if_metageneration_not_match: Makes the return of the bucket metadata conditional on whether the bucket's current metageneration does not match the given value.
        :type if_metageneration_not_match: str
        :param projection: Set of properties to return. Defaults to noAcl.
        :type projection: str
        :param user_project: The project to be billed for this request. Required for Requester Pays buckets.
        :type user_project: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._storage_buckets_get_serialize(
            bucket=bucket,
            alt=alt,
            fields=fields,
            key=key,
            oauth_token=oauth_token,
            pretty_print=pretty_print,
            quota_user=quota_user,
            upload_type=upload_type,
            user_ip=user_ip,
            if_metageneration_match=if_metageneration_match,
            if_metageneration_not_match=if_metageneration_not_match,
            projection=projection,
            user_project=user_project,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Bucket",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _storage_buckets_get_serialize(
        self,
        bucket,
        alt,
        fields,
        key,
        oauth_token,
        pretty_print,
        quota_user,
        upload_type,
        user_ip,
        if_metageneration_match,
        if_metageneration_not_match,
        projection,
        user_project,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if bucket is not None:
            _path_params['bucket'] = bucket
        # process the query parameters
        if alt is not None:
            
            _query_params.append(('alt', alt))
            
        if fields is not None:
            
            _query_params.append(('fields', fields))
            
        if key is not None:
            
            _query_params.append(('key', key))
            
        if oauth_token is not None:
            
            _query_params.append(('oauth_token', oauth_token))
            
        if pretty_print is not None:
            
            _query_params.append(('prettyPrint', pretty_print))
            
        if quota_user is not None:
            
            _query_params.append(('quotaUser', quota_user))
            
        if upload_type is not None:
            
            _query_params.append(('uploadType', upload_type))
            
        if user_ip is not None:
            
            _query_params.append(('userIp', user_ip))
            
        if if_metageneration_match is not None:
            
            _query_params.append(('ifMetagenerationMatch', if_metageneration_match))
            
        if if_metageneration_not_match is not None:
            
            _query_params.append(('ifMetagenerationNotMatch', if_metageneration_not_match))
            
        if projection is not None:
            
            _query_params.append(('projection', projection))
            
        if user_project is not None:
            
            _query_params.append(('userProject', user_project))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'Oauth2c', 
            'Oauth2'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/b/{bucket}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def storage_buckets_get_iam_policy(
        self,
        bucket: Annotated[StrictStr, Field(description="Name of a bucket.")],
        alt: Annotated[Optional[StrictStr], Field(description="Data format for the response.")] = None,
        fields: Annotated[Optional[StrictStr], Field(description="Selector specifying which fields to include in a partial response.")] = None,
        key: Annotated[Optional[StrictStr], Field(description="API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.")] = None,
        oauth_token: Annotated[Optional[StrictStr], Field(description="OAuth 2.0 token for the current user.")] = None,
        pretty_print: Annotated[Optional[StrictBool], Field(description="Returns response with indentations and line breaks.")] = None,
        quota_user: Annotated[Optional[StrictStr], Field(description="An opaque string that represents a user for quota purposes. Must not exceed 40 characters.")] = None,
        upload_type: Annotated[Optional[StrictStr], Field(description="Upload protocol for media (e.g. \"media\", \"multipart\", \"resumable\").")] = None,
        user_ip: Annotated[Optional[StrictStr], Field(description="Deprecated. Please use quotaUser instead.")] = None,
        options_requested_policy_version: Annotated[Optional[Annotated[int, Field(strict=True, ge=1)]], Field(description="The IAM policy format version to be returned. If the optionsRequestedPolicyVersion is for an older version that doesn't support part of the requested IAM policy, the request fails.")] = None,
        user_project: Annotated[Optional[StrictStr], Field(description="The project to be billed for this request. Required for Requester Pays buckets.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> Policy:
        """storage_buckets_get_iam_policy

        Returns an IAM policy for the specified bucket.

        :param bucket: Name of a bucket. (required)
        :type bucket: str
        :param alt: Data format for the response.
        :type alt: str
        :param fields: Selector specifying which fields to include in a partial response.
        :type fields: str
        :param key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
        :type key: str
        :param oauth_token: OAuth 2.0 token for the current user.
        :type oauth_token: str
        :param pretty_print: Returns response with indentations and line breaks.
        :type pretty_print: bool
        :param quota_user: An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
        :type quota_user: str
        :param upload_type: Upload protocol for media (e.g. \"media\", \"multipart\", \"resumable\").
        :type upload_type: str
        :param user_ip: Deprecated. Please use quotaUser instead.
        :type user_ip: str
        :param options_requested_policy_version: The IAM policy format version to be returned. If the optionsRequestedPolicyVersion is for an older version that doesn't support part of the requested IAM policy, the request fails.
        :type options_requested_policy_version: int
        :param user_project: The project to be billed for this request. Required for Requester Pays buckets.
        :type user_project: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._storage_buckets_get_iam_policy_serialize(
            bucket=bucket,
            alt=alt,
            fields=fields,
            key=key,
            oauth_token=oauth_token,
            pretty_print=pretty_print,
            quota_user=quota_user,
            upload_type=upload_type,
            user_ip=user_ip,
            options_requested_policy_version=options_requested_policy_version,
            user_project=user_project,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Policy",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def storage_buckets_get_iam_policy_with_http_info(
        self,
        bucket: Annotated[StrictStr, Field(description="Name of a bucket.")],
        alt: Annotated[Optional[StrictStr], Field(description="Data format for the response.")] = None,
        fields: Annotated[Optional[StrictStr], Field(description="Selector specifying which fields to include in a partial response.")] = None,
        key: Annotated[Optional[StrictStr], Field(description="API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.")] = None,
        oauth_token: Annotated[Optional[StrictStr], Field(description="OAuth 2.0 token for the current user.")] = None,
        pretty_print: Annotated[Optional[StrictBool], Field(description="Returns response with indentations and line breaks.")] = None,
        quota_user: Annotated[Optional[StrictStr], Field(description="An opaque string that represents a user for quota purposes. Must not exceed 40 characters.")] = None,
        upload_type: Annotated[Optional[StrictStr], Field(description="Upload protocol for media (e.g. \"media\", \"multipart\", \"resumable\").")] = None,
        user_ip: Annotated[Optional[StrictStr], Field(description="Deprecated. Please use quotaUser instead.")] = None,
        options_requested_policy_version: Annotated[Optional[Annotated[int, Field(strict=True, ge=1)]], Field(description="The IAM policy format version to be returned. If the optionsRequestedPolicyVersion is for an older version that doesn't support part of the requested IAM policy, the request fails.")] = None,
        user_project: Annotated[Optional[StrictStr], Field(description="The project to be billed for this request. Required for Requester Pays buckets.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[Policy]:
        """storage_buckets_get_iam_policy

        Returns an IAM policy for the specified bucket.

        :param bucket: Name of a bucket. (required)
        :type bucket: str
        :param alt: Data format for the response.
        :type alt: str
        :param fields: Selector specifying which fields to include in a partial response.
        :type fields: str
        :param key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
        :type key: str
        :param oauth_token: OAuth 2.0 token for the current user.
        :type oauth_token: str
        :param pretty_print: Returns response with indentations and line breaks.
        :type pretty_print: bool
        :param quota_user: An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
        :type quota_user: str
        :param upload_type: Upload protocol for media (e.g. \"media\", \"multipart\", \"resumable\").
        :type upload_type: str
        :param user_ip: Deprecated. Please use quotaUser instead.
        :type user_ip: str
        :param options_requested_policy_version: The IAM policy format version to be returned. If the optionsRequestedPolicyVersion is for an older version that doesn't support part of the requested IAM policy, the request fails.
        :type options_requested_policy_version: int
        :param user_project: The project to be billed for this request. Required for Requester Pays buckets.
        :type user_project: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._storage_buckets_get_iam_policy_serialize(
            bucket=bucket,
            alt=alt,
            fields=fields,
            key=key,
            oauth_token=oauth_token,
            pretty_print=pretty_print,
            quota_user=quota_user,
            upload_type=upload_type,
            user_ip=user_ip,
            options_requested_policy_version=options_requested_policy_version,
            user_project=user_project,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Policy",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def storage_buckets_get_iam_policy_without_preload_content(
        self,
        bucket: Annotated[StrictStr, Field(description="Name of a bucket.")],
        alt: Annotated[Optional[StrictStr], Field(description="Data format for the response.")] = None,
        fields: Annotated[Optional[StrictStr], Field(description="Selector specifying which fields to include in a partial response.")] = None,
        key: Annotated[Optional[StrictStr], Field(description="API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.")] = None,
        oauth_token: Annotated[Optional[StrictStr], Field(description="OAuth 2.0 token for the current user.")] = None,
        pretty_print: Annotated[Optional[StrictBool], Field(description="Returns response with indentations and line breaks.")] = None,
        quota_user: Annotated[Optional[StrictStr], Field(description="An opaque string that represents a user for quota purposes. Must not exceed 40 characters.")] = None,
        upload_type: Annotated[Optional[StrictStr], Field(description="Upload protocol for media (e.g. \"media\", \"multipart\", \"resumable\").")] = None,
        user_ip: Annotated[Optional[StrictStr], Field(description="Deprecated. Please use quotaUser instead.")] = None,
        options_requested_policy_version: Annotated[Optional[Annotated[int, Field(strict=True, ge=1)]], Field(description="The IAM policy format version to be returned. If the optionsRequestedPolicyVersion is for an older version that doesn't support part of the requested IAM policy, the request fails.")] = None,
        user_project: Annotated[Optional[StrictStr], Field(description="The project to be billed for this request. Required for Requester Pays buckets.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """storage_buckets_get_iam_policy

        Returns an IAM policy for the specified bucket.

        :param bucket: Name of a bucket. (required)
        :type bucket: str
        :param alt: Data format for the response.
        :type alt: str
        :param fields: Selector specifying which fields to include in a partial response.
        :type fields: str
        :param key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
        :type key: str
        :param oauth_token: OAuth 2.0 token for the current user.
        :type oauth_token: str
        :param pretty_print: Returns response with indentations and line breaks.
        :type pretty_print: bool
        :param quota_user: An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
        :type quota_user: str
        :param upload_type: Upload protocol for media (e.g. \"media\", \"multipart\", \"resumable\").
        :type upload_type: str
        :param user_ip: Deprecated. Please use quotaUser instead.
        :type user_ip: str
        :param options_requested_policy_version: The IAM policy format version to be returned. If the optionsRequestedPolicyVersion is for an older version that doesn't support part of the requested IAM policy, the request fails.
        :type options_requested_policy_version: int
        :param user_project: The project to be billed for this request. Required for Requester Pays buckets.
        :type user_project: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._storage_buckets_get_iam_policy_serialize(
            bucket=bucket,
            alt=alt,
            fields=fields,
            key=key,
            oauth_token=oauth_token,
            pretty_print=pretty_print,
            quota_user=quota_user,
            upload_type=upload_type,
            user_ip=user_ip,
            options_requested_policy_version=options_requested_policy_version,
            user_project=user_project,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Policy",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _storage_buckets_get_iam_policy_serialize(
        self,
        bucket,
        alt,
        fields,
        key,
        oauth_token,
        pretty_print,
        quota_user,
        upload_type,
        user_ip,
        options_requested_policy_version,
        user_project,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if bucket is not None:
            _path_params['bucket'] = bucket
        # process the query parameters
        if alt is not None:
            
            _query_params.append(('alt', alt))
            
        if fields is not None:
            
            _query_params.append(('fields', fields))
            
        if key is not None:
            
            _query_params.append(('key', key))
            
        if oauth_token is not None:
            
            _query_params.append(('oauth_token', oauth_token))
            
        if pretty_print is not None:
            
            _query_params.append(('prettyPrint', pretty_print))
            
        if quota_user is not None:
            
            _query_params.append(('quotaUser', quota_user))
            
        if upload_type is not None:
            
            _query_params.append(('uploadType', upload_type))
            
        if user_ip is not None:
            
            _query_params.append(('userIp', user_ip))
            
        if options_requested_policy_version is not None:
            
            _query_params.append(('optionsRequestedPolicyVersion', options_requested_policy_version))
            
        if user_project is not None:
            
            _query_params.append(('userProject', user_project))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'Oauth2c', 
            'Oauth2'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/b/{bucket}/iam',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def storage_buckets_insert(
        self,
        project: Annotated[StrictStr, Field(description="A valid API project identifier.")],
        alt: Annotated[Optional[StrictStr], Field(description="Data format for the response.")] = None,
        fields: Annotated[Optional[StrictStr], Field(description="Selector specifying which fields to include in a partial response.")] = None,
        key: Annotated[Optional[StrictStr], Field(description="API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.")] = None,
        oauth_token: Annotated[Optional[StrictStr], Field(description="OAuth 2.0 token for the current user.")] = None,
        pretty_print: Annotated[Optional[StrictBool], Field(description="Returns response with indentations and line breaks.")] = None,
        quota_user: Annotated[Optional[StrictStr], Field(description="An opaque string that represents a user for quota purposes. Must not exceed 40 characters.")] = None,
        upload_type: Annotated[Optional[StrictStr], Field(description="Upload protocol for media (e.g. \"media\", \"multipart\", \"resumable\").")] = None,
        user_ip: Annotated[Optional[StrictStr], Field(description="Deprecated. Please use quotaUser instead.")] = None,
        enable_object_retention: Annotated[Optional[StrictBool], Field(description="When set to true, object retention is enabled for this bucket.")] = None,
        predefined_acl: Annotated[Optional[StrictStr], Field(description="Apply a predefined set of access controls to this bucket.")] = None,
        predefined_default_object_acl: Annotated[Optional[StrictStr], Field(description="Apply a predefined set of default object access controls to this bucket.")] = None,
        projection: Annotated[Optional[StrictStr], Field(description="Set of properties to return. Defaults to noAcl, unless the bucket resource specifies acl or defaultObjectAcl properties, when it defaults to full.")] = None,
        user_project: Annotated[Optional[StrictStr], Field(description="The project to be billed for this request.")] = None,
        bucket: Optional[Bucket] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> Bucket:
        """storage_buckets_insert

        Creates a new bucket.

        :param project: A valid API project identifier. (required)
        :type project: str
        :param alt: Data format for the response.
        :type alt: str
        :param fields: Selector specifying which fields to include in a partial response.
        :type fields: str
        :param key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
        :type key: str
        :param oauth_token: OAuth 2.0 token for the current user.
        :type oauth_token: str
        :param pretty_print: Returns response with indentations and line breaks.
        :type pretty_print: bool
        :param quota_user: An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
        :type quota_user: str
        :param upload_type: Upload protocol for media (e.g. \"media\", \"multipart\", \"resumable\").
        :type upload_type: str
        :param user_ip: Deprecated. Please use quotaUser instead.
        :type user_ip: str
        :param enable_object_retention: When set to true, object retention is enabled for this bucket.
        :type enable_object_retention: bool
        :param predefined_acl: Apply a predefined set of access controls to this bucket.
        :type predefined_acl: str
        :param predefined_default_object_acl: Apply a predefined set of default object access controls to this bucket.
        :type predefined_default_object_acl: str
        :param projection: Set of properties to return. Defaults to noAcl, unless the bucket resource specifies acl or defaultObjectAcl properties, when it defaults to full.
        :type projection: str
        :param user_project: The project to be billed for this request.
        :type user_project: str
        :param bucket:
        :type bucket: Bucket
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._storage_buckets_insert_serialize(
            project=project,
            alt=alt,
            fields=fields,
            key=key,
            oauth_token=oauth_token,
            pretty_print=pretty_print,
            quota_user=quota_user,
            upload_type=upload_type,
            user_ip=user_ip,
            enable_object_retention=enable_object_retention,
            predefined_acl=predefined_acl,
            predefined_default_object_acl=predefined_default_object_acl,
            projection=projection,
            user_project=user_project,
            bucket=bucket,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Bucket",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def storage_buckets_insert_with_http_info(
        self,
        project: Annotated[StrictStr, Field(description="A valid API project identifier.")],
        alt: Annotated[Optional[StrictStr], Field(description="Data format for the response.")] = None,
        fields: Annotated[Optional[StrictStr], Field(description="Selector specifying which fields to include in a partial response.")] = None,
        key: Annotated[Optional[StrictStr], Field(description="API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.")] = None,
        oauth_token: Annotated[Optional[StrictStr], Field(description="OAuth 2.0 token for the current user.")] = None,
        pretty_print: Annotated[Optional[StrictBool], Field(description="Returns response with indentations and line breaks.")] = None,
        quota_user: Annotated[Optional[StrictStr], Field(description="An opaque string that represents a user for quota purposes. Must not exceed 40 characters.")] = None,
        upload_type: Annotated[Optional[StrictStr], Field(description="Upload protocol for media (e.g. \"media\", \"multipart\", \"resumable\").")] = None,
        user_ip: Annotated[Optional[StrictStr], Field(description="Deprecated. Please use quotaUser instead.")] = None,
        enable_object_retention: Annotated[Optional[StrictBool], Field(description="When set to true, object retention is enabled for this bucket.")] = None,
        predefined_acl: Annotated[Optional[StrictStr], Field(description="Apply a predefined set of access controls to this bucket.")] = None,
        predefined_default_object_acl: Annotated[Optional[StrictStr], Field(description="Apply a predefined set of default object access controls to this bucket.")] = None,
        projection: Annotated[Optional[StrictStr], Field(description="Set of properties to return. Defaults to noAcl, unless the bucket resource specifies acl or defaultObjectAcl properties, when it defaults to full.")] = None,
        user_project: Annotated[Optional[StrictStr], Field(description="The project to be billed for this request.")] = None,
        bucket: Optional[Bucket] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[Bucket]:
        """storage_buckets_insert

        Creates a new bucket.

        :param project: A valid API project identifier. (required)
        :type project: str
        :param alt: Data format for the response.
        :type alt: str
        :param fields: Selector specifying which fields to include in a partial response.
        :type fields: str
        :param key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
        :type key: str
        :param oauth_token: OAuth 2.0 token for the current user.
        :type oauth_token: str
        :param pretty_print: Returns response with indentations and line breaks.
        :type pretty_print: bool
        :param quota_user: An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
        :type quota_user: str
        :param upload_type: Upload protocol for media (e.g. \"media\", \"multipart\", \"resumable\").
        :type upload_type: str
        :param user_ip: Deprecated. Please use quotaUser instead.
        :type user_ip: str
        :param enable_object_retention: When set to true, object retention is enabled for this bucket.
        :type enable_object_retention: bool
        :param predefined_acl: Apply a predefined set of access controls to this bucket.
        :type predefined_acl: str
        :param predefined_default_object_acl: Apply a predefined set of default object access controls to this bucket.
        :type predefined_default_object_acl: str
        :param projection: Set of properties to return. Defaults to noAcl, unless the bucket resource specifies acl or defaultObjectAcl properties, when it defaults to full.
        :type projection: str
        :param user_project: The project to be billed for this request.
        :type user_project: str
        :param bucket:
        :type bucket: Bucket
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._storage_buckets_insert_serialize(
            project=project,
            alt=alt,
            fields=fields,
            key=key,
            oauth_token=oauth_token,
            pretty_print=pretty_print,
            quota_user=quota_user,
            upload_type=upload_type,
            user_ip=user_ip,
            enable_object_retention=enable_object_retention,
            predefined_acl=predefined_acl,
            predefined_default_object_acl=predefined_default_object_acl,
            projection=projection,
            user_project=user_project,
            bucket=bucket,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Bucket",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def storage_buckets_insert_without_preload_content(
        self,
        project: Annotated[StrictStr, Field(description="A valid API project identifier.")],
        alt: Annotated[Optional[StrictStr], Field(description="Data format for the response.")] = None,
        fields: Annotated[Optional[StrictStr], Field(description="Selector specifying which fields to include in a partial response.")] = None,
        key: Annotated[Optional[StrictStr], Field(description="API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.")] = None,
        oauth_token: Annotated[Optional[StrictStr], Field(description="OAuth 2.0 token for the current user.")] = None,
        pretty_print: Annotated[Optional[StrictBool], Field(description="Returns response with indentations and line breaks.")] = None,
        quota_user: Annotated[Optional[StrictStr], Field(description="An opaque string that represents a user for quota purposes. Must not exceed 40 characters.")] = None,
        upload_type: Annotated[Optional[StrictStr], Field(description="Upload protocol for media (e.g. \"media\", \"multipart\", \"resumable\").")] = None,
        user_ip: Annotated[Optional[StrictStr], Field(description="Deprecated. Please use quotaUser instead.")] = None,
        enable_object_retention: Annotated[Optional[StrictBool], Field(description="When set to true, object retention is enabled for this bucket.")] = None,
        predefined_acl: Annotated[Optional[StrictStr], Field(description="Apply a predefined set of access controls to this bucket.")] = None,
        predefined_default_object_acl: Annotated[Optional[StrictStr], Field(description="Apply a predefined set of default object access controls to this bucket.")] = None,
        projection: Annotated[Optional[StrictStr], Field(description="Set of properties to return. Defaults to noAcl, unless the bucket resource specifies acl or defaultObjectAcl properties, when it defaults to full.")] = None,
        user_project: Annotated[Optional[StrictStr], Field(description="The project to be billed for this request.")] = None,
        bucket: Optional[Bucket] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """storage_buckets_insert

        Creates a new bucket.

        :param project: A valid API project identifier. (required)
        :type project: str
        :param alt: Data format for the response.
        :type alt: str
        :param fields: Selector specifying which fields to include in a partial response.
        :type fields: str
        :param key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
        :type key: str
        :param oauth_token: OAuth 2.0 token for the current user.
        :type oauth_token: str
        :param pretty_print: Returns response with indentations and line breaks.
        :type pretty_print: bool
        :param quota_user: An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
        :type quota_user: str
        :param upload_type: Upload protocol for media (e.g. \"media\", \"multipart\", \"resumable\").
        :type upload_type: str
        :param user_ip: Deprecated. Please use quotaUser instead.
        :type user_ip: str
        :param enable_object_retention: When set to true, object retention is enabled for this bucket.
        :type enable_object_retention: bool
        :param predefined_acl: Apply a predefined set of access controls to this bucket.
        :type predefined_acl: str
        :param predefined_default_object_acl: Apply a predefined set of default object access controls to this bucket.
        :type predefined_default_object_acl: str
        :param projection: Set of properties to return. Defaults to noAcl, unless the bucket resource specifies acl or defaultObjectAcl properties, when it defaults to full.
        :type projection: str
        :param user_project: The project to be billed for this request.
        :type user_project: str
        :param bucket:
        :type bucket: Bucket
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._storage_buckets_insert_serialize(
            project=project,
            alt=alt,
            fields=fields,
            key=key,
            oauth_token=oauth_token,
            pretty_print=pretty_print,
            quota_user=quota_user,
            upload_type=upload_type,
            user_ip=user_ip,
            enable_object_retention=enable_object_retention,
            predefined_acl=predefined_acl,
            predefined_default_object_acl=predefined_default_object_acl,
            projection=projection,
            user_project=user_project,
            bucket=bucket,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Bucket",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _storage_buckets_insert_serialize(
        self,
        project,
        alt,
        fields,
        key,
        oauth_token,
        pretty_print,
        quota_user,
        upload_type,
        user_ip,
        enable_object_retention,
        predefined_acl,
        predefined_default_object_acl,
        projection,
        user_project,
        bucket,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if alt is not None:
            
            _query_params.append(('alt', alt))
            
        if fields is not None:
            
            _query_params.append(('fields', fields))
            
        if key is not None:
            
            _query_params.append(('key', key))
            
        if oauth_token is not None:
            
            _query_params.append(('oauth_token', oauth_token))
            
        if pretty_print is not None:
            
            _query_params.append(('prettyPrint', pretty_print))
            
        if quota_user is not None:
            
            _query_params.append(('quotaUser', quota_user))
            
        if upload_type is not None:
            
            _query_params.append(('uploadType', upload_type))
            
        if user_ip is not None:
            
            _query_params.append(('userIp', user_ip))
            
        if project is not None:
            
            _query_params.append(('project', project))
            
        if enable_object_retention is not None:
            
            _query_params.append(('enableObjectRetention', enable_object_retention))
            
        if predefined_acl is not None:
            
            _query_params.append(('predefinedAcl', predefined_acl))
            
        if predefined_default_object_acl is not None:
            
            _query_params.append(('predefinedDefaultObjectAcl', predefined_default_object_acl))
            
        if projection is not None:
            
            _query_params.append(('projection', projection))
            
        if user_project is not None:
            
            _query_params.append(('userProject', user_project))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if bucket is not None:
            _body_params = bucket


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'Oauth2c', 
            'Oauth2'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/b',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def storage_buckets_list(
        self,
        project: Annotated[StrictStr, Field(description="A valid API project identifier.")],
        alt: Annotated[Optional[StrictStr], Field(description="Data format for the response.")] = None,
        fields: Annotated[Optional[StrictStr], Field(description="Selector specifying which fields to include in a partial response.")] = None,
        key: Annotated[Optional[StrictStr], Field(description="API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.")] = None,
        oauth_token: Annotated[Optional[StrictStr], Field(description="OAuth 2.0 token for the current user.")] = None,
        pretty_print: Annotated[Optional[StrictBool], Field(description="Returns response with indentations and line breaks.")] = None,
        quota_user: Annotated[Optional[StrictStr], Field(description="An opaque string that represents a user for quota purposes. Must not exceed 40 characters.")] = None,
        upload_type: Annotated[Optional[StrictStr], Field(description="Upload protocol for media (e.g. \"media\", \"multipart\", \"resumable\").")] = None,
        user_ip: Annotated[Optional[StrictStr], Field(description="Deprecated. Please use quotaUser instead.")] = None,
        max_results: Annotated[Optional[Annotated[int, Field(strict=True, ge=0)]], Field(description="Maximum number of buckets to return in a single response. The service will use this parameter or 1,000 items, whichever is smaller.")] = None,
        page_token: Annotated[Optional[StrictStr], Field(description="A previously-returned page token representing part of the larger set of results to view.")] = None,
        prefix: Annotated[Optional[StrictStr], Field(description="Filter results to buckets whose names begin with this prefix.")] = None,
        projection: Annotated[Optional[StrictStr], Field(description="Set of properties to return. Defaults to noAcl.")] = None,
        user_project: Annotated[Optional[StrictStr], Field(description="The project to be billed for this request.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> Buckets:
        """storage_buckets_list

        Retrieves a list of buckets for a given project.

        :param project: A valid API project identifier. (required)
        :type project: str
        :param alt: Data format for the response.
        :type alt: str
        :param fields: Selector specifying which fields to include in a partial response.
        :type fields: str
        :param key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
        :type key: str
        :param oauth_token: OAuth 2.0 token for the current user.
        :type oauth_token: str
        :param pretty_print: Returns response with indentations and line breaks.
        :type pretty_print: bool
        :param quota_user: An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
        :type quota_user: str
        :param upload_type: Upload protocol for media (e.g. \"media\", \"multipart\", \"resumable\").
        :type upload_type: str
        :param user_ip: Deprecated. Please use quotaUser instead.
        :type user_ip: str
        :param max_results: Maximum number of buckets to return in a single response. The service will use this parameter or 1,000 items, whichever is smaller.
        :type max_results: int
        :param page_token: A previously-returned page token representing part of the larger set of results to view.
        :type page_token: str
        :param prefix: Filter results to buckets whose names begin with this prefix.
        :type prefix: str
        :param projection: Set of properties to return. Defaults to noAcl.
        :type projection: str
        :param user_project: The project to be billed for this request.
        :type user_project: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._storage_buckets_list_serialize(
            project=project,
            alt=alt,
            fields=fields,
            key=key,
            oauth_token=oauth_token,
            pretty_print=pretty_print,
            quota_user=quota_user,
            upload_type=upload_type,
            user_ip=user_ip,
            max_results=max_results,
            page_token=page_token,
            prefix=prefix,
            projection=projection,
            user_project=user_project,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Buckets",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def storage_buckets_list_with_http_info(
        self,
        project: Annotated[StrictStr, Field(description="A valid API project identifier.")],
        alt: Annotated[Optional[StrictStr], Field(description="Data format for the response.")] = None,
        fields: Annotated[Optional[StrictStr], Field(description="Selector specifying which fields to include in a partial response.")] = None,
        key: Annotated[Optional[StrictStr], Field(description="API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.")] = None,
        oauth_token: Annotated[Optional[StrictStr], Field(description="OAuth 2.0 token for the current user.")] = None,
        pretty_print: Annotated[Optional[StrictBool], Field(description="Returns response with indentations and line breaks.")] = None,
        quota_user: Annotated[Optional[StrictStr], Field(description="An opaque string that represents a user for quota purposes. Must not exceed 40 characters.")] = None,
        upload_type: Annotated[Optional[StrictStr], Field(description="Upload protocol for media (e.g. \"media\", \"multipart\", \"resumable\").")] = None,
        user_ip: Annotated[Optional[StrictStr], Field(description="Deprecated. Please use quotaUser instead.")] = None,
        max_results: Annotated[Optional[Annotated[int, Field(strict=True, ge=0)]], Field(description="Maximum number of buckets to return in a single response. The service will use this parameter or 1,000 items, whichever is smaller.")] = None,
        page_token: Annotated[Optional[StrictStr], Field(description="A previously-returned page token representing part of the larger set of results to view.")] = None,
        prefix: Annotated[Optional[StrictStr], Field(description="Filter results to buckets whose names begin with this prefix.")] = None,
        projection: Annotated[Optional[StrictStr], Field(description="Set of properties to return. Defaults to noAcl.")] = None,
        user_project: Annotated[Optional[StrictStr], Field(description="The project to be billed for this request.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[Buckets]:
        """storage_buckets_list

        Retrieves a list of buckets for a given project.

        :param project: A valid API project identifier. (required)
        :type project: str
        :param alt: Data format for the response.
        :type alt: str
        :param fields: Selector specifying which fields to include in a partial response.
        :type fields: str
        :param key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
        :type key: str
        :param oauth_token: OAuth 2.0 token for the current user.
        :type oauth_token: str
        :param pretty_print: Returns response with indentations and line breaks.
        :type pretty_print: bool
        :param quota_user: An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
        :type quota_user: str
        :param upload_type: Upload protocol for media (e.g. \"media\", \"multipart\", \"resumable\").
        :type upload_type: str
        :param user_ip: Deprecated. Please use quotaUser instead.
        :type user_ip: str
        :param max_results: Maximum number of buckets to return in a single response. The service will use this parameter or 1,000 items, whichever is smaller.
        :type max_results: int
        :param page_token: A previously-returned page token representing part of the larger set of results to view.
        :type page_token: str
        :param prefix: Filter results to buckets whose names begin with this prefix.
        :type prefix: str
        :param projection: Set of properties to return. Defaults to noAcl.
        :type projection: str
        :param user_project: The project to be billed for this request.
        :type user_project: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._storage_buckets_list_serialize(
            project=project,
            alt=alt,
            fields=fields,
            key=key,
            oauth_token=oauth_token,
            pretty_print=pretty_print,
            quota_user=quota_user,
            upload_type=upload_type,
            user_ip=user_ip,
            max_results=max_results,
            page_token=page_token,
            prefix=prefix,
            projection=projection,
            user_project=user_project,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Buckets",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def storage_buckets_list_without_preload_content(
        self,
        project: Annotated[StrictStr, Field(description="A valid API project identifier.")],
        alt: Annotated[Optional[StrictStr], Field(description="Data format for the response.")] = None,
        fields: Annotated[Optional[StrictStr], Field(description="Selector specifying which fields to include in a partial response.")] = None,
        key: Annotated[Optional[StrictStr], Field(description="API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.")] = None,
        oauth_token: Annotated[Optional[StrictStr], Field(description="OAuth 2.0 token for the current user.")] = None,
        pretty_print: Annotated[Optional[StrictBool], Field(description="Returns response with indentations and line breaks.")] = None,
        quota_user: Annotated[Optional[StrictStr], Field(description="An opaque string that represents a user for quota purposes. Must not exceed 40 characters.")] = None,
        upload_type: Annotated[Optional[StrictStr], Field(description="Upload protocol for media (e.g. \"media\", \"multipart\", \"resumable\").")] = None,
        user_ip: Annotated[Optional[StrictStr], Field(description="Deprecated. Please use quotaUser instead.")] = None,
        max_results: Annotated[Optional[Annotated[int, Field(strict=True, ge=0)]], Field(description="Maximum number of buckets to return in a single response. The service will use this parameter or 1,000 items, whichever is smaller.")] = None,
        page_token: Annotated[Optional[StrictStr], Field(description="A previously-returned page token representing part of the larger set of results to view.")] = None,
        prefix: Annotated[Optional[StrictStr], Field(description="Filter results to buckets whose names begin with this prefix.")] = None,
        projection: Annotated[Optional[StrictStr], Field(description="Set of properties to return. Defaults to noAcl.")] = None,
        user_project: Annotated[Optional[StrictStr], Field(description="The project to be billed for this request.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """storage_buckets_list

        Retrieves a list of buckets for a given project.

        :param project: A valid API project identifier. (required)
        :type project: str
        :param alt: Data format for the response.
        :type alt: str
        :param fields: Selector specifying which fields to include in a partial response.
        :type fields: str
        :param key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
        :type key: str
        :param oauth_token: OAuth 2.0 token for the current user.
        :type oauth_token: str
        :param pretty_print: Returns response with indentations and line breaks.
        :type pretty_print: bool
        :param quota_user: An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
        :type quota_user: str
        :param upload_type: Upload protocol for media (e.g. \"media\", \"multipart\", \"resumable\").
        :type upload_type: str
        :param user_ip: Deprecated. Please use quotaUser instead.
        :type user_ip: str
        :param max_results: Maximum number of buckets to return in a single response. The service will use this parameter or 1,000 items, whichever is smaller.
        :type max_results: int
        :param page_token: A previously-returned page token representing part of the larger set of results to view.
        :type page_token: str
        :param prefix: Filter results to buckets whose names begin with this prefix.
        :type prefix: str
        :param projection: Set of properties to return. Defaults to noAcl.
        :type projection: str
        :param user_project: The project to be billed for this request.
        :type user_project: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._storage_buckets_list_serialize(
            project=project,
            alt=alt,
            fields=fields,
            key=key,
            oauth_token=oauth_token,
            pretty_print=pretty_print,
            quota_user=quota_user,
            upload_type=upload_type,
            user_ip=user_ip,
            max_results=max_results,
            page_token=page_token,
            prefix=prefix,
            projection=projection,
            user_project=user_project,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Buckets",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _storage_buckets_list_serialize(
        self,
        project,
        alt,
        fields,
        key,
        oauth_token,
        pretty_print,
        quota_user,
        upload_type,
        user_ip,
        max_results,
        page_token,
        prefix,
        projection,
        user_project,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if alt is not None:
            
            _query_params.append(('alt', alt))
            
        if fields is not None:
            
            _query_params.append(('fields', fields))
            
        if key is not None:
            
            _query_params.append(('key', key))
            
        if oauth_token is not None:
            
            _query_params.append(('oauth_token', oauth_token))
            
        if pretty_print is not None:
            
            _query_params.append(('prettyPrint', pretty_print))
            
        if quota_user is not None:
            
            _query_params.append(('quotaUser', quota_user))
            
        if upload_type is not None:
            
            _query_params.append(('uploadType', upload_type))
            
        if user_ip is not None:
            
            _query_params.append(('userIp', user_ip))
            
        if project is not None:
            
            _query_params.append(('project', project))
            
        if max_results is not None:
            
            _query_params.append(('maxResults', max_results))
            
        if page_token is not None:
            
            _query_params.append(('pageToken', page_token))
            
        if prefix is not None:
            
            _query_params.append(('prefix', prefix))
            
        if projection is not None:
            
            _query_params.append(('projection', projection))
            
        if user_project is not None:
            
            _query_params.append(('userProject', user_project))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'Oauth2c', 
            'Oauth2'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/b',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def storage_buckets_lock_retention_policy(
        self,
        bucket: Annotated[StrictStr, Field(description="Name of a bucket.")],
        if_metageneration_match: Annotated[StrictStr, Field(description="Makes the operation conditional on whether bucket's current metageneration matches the given value.")],
        alt: Annotated[Optional[StrictStr], Field(description="Data format for the response.")] = None,
        fields: Annotated[Optional[StrictStr], Field(description="Selector specifying which fields to include in a partial response.")] = None,
        key: Annotated[Optional[StrictStr], Field(description="API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.")] = None,
        oauth_token: Annotated[Optional[StrictStr], Field(description="OAuth 2.0 token for the current user.")] = None,
        pretty_print: Annotated[Optional[StrictBool], Field(description="Returns response with indentations and line breaks.")] = None,
        quota_user: Annotated[Optional[StrictStr], Field(description="An opaque string that represents a user for quota purposes. Must not exceed 40 characters.")] = None,
        upload_type: Annotated[Optional[StrictStr], Field(description="Upload protocol for media (e.g. \"media\", \"multipart\", \"resumable\").")] = None,
        user_ip: Annotated[Optional[StrictStr], Field(description="Deprecated. Please use quotaUser instead.")] = None,
        user_project: Annotated[Optional[StrictStr], Field(description="The project to be billed for this request. Required for Requester Pays buckets.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> Bucket:
        """storage_buckets_lock_retention_policy

        Locks retention policy on a bucket.

        :param bucket: Name of a bucket. (required)
        :type bucket: str
        :param if_metageneration_match: Makes the operation conditional on whether bucket's current metageneration matches the given value. (required)
        :type if_metageneration_match: str
        :param alt: Data format for the response.
        :type alt: str
        :param fields: Selector specifying which fields to include in a partial response.
        :type fields: str
        :param key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
        :type key: str
        :param oauth_token: OAuth 2.0 token for the current user.
        :type oauth_token: str
        :param pretty_print: Returns response with indentations and line breaks.
        :type pretty_print: bool
        :param quota_user: An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
        :type quota_user: str
        :param upload_type: Upload protocol for media (e.g. \"media\", \"multipart\", \"resumable\").
        :type upload_type: str
        :param user_ip: Deprecated. Please use quotaUser instead.
        :type user_ip: str
        :param user_project: The project to be billed for this request. Required for Requester Pays buckets.
        :type user_project: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._storage_buckets_lock_retention_policy_serialize(
            bucket=bucket,
            if_metageneration_match=if_metageneration_match,
            alt=alt,
            fields=fields,
            key=key,
            oauth_token=oauth_token,
            pretty_print=pretty_print,
            quota_user=quota_user,
            upload_type=upload_type,
            user_ip=user_ip,
            user_project=user_project,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Bucket",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def storage_buckets_lock_retention_policy_with_http_info(
        self,
        bucket: Annotated[StrictStr, Field(description="Name of a bucket.")],
        if_metageneration_match: Annotated[StrictStr, Field(description="Makes the operation conditional on whether bucket's current metageneration matches the given value.")],
        alt: Annotated[Optional[StrictStr], Field(description="Data format for the response.")] = None,
        fields: Annotated[Optional[StrictStr], Field(description="Selector specifying which fields to include in a partial response.")] = None,
        key: Annotated[Optional[StrictStr], Field(description="API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.")] = None,
        oauth_token: Annotated[Optional[StrictStr], Field(description="OAuth 2.0 token for the current user.")] = None,
        pretty_print: Annotated[Optional[StrictBool], Field(description="Returns response with indentations and line breaks.")] = None,
        quota_user: Annotated[Optional[StrictStr], Field(description="An opaque string that represents a user for quota purposes. Must not exceed 40 characters.")] = None,
        upload_type: Annotated[Optional[StrictStr], Field(description="Upload protocol for media (e.g. \"media\", \"multipart\", \"resumable\").")] = None,
        user_ip: Annotated[Optional[StrictStr], Field(description="Deprecated. Please use quotaUser instead.")] = None,
        user_project: Annotated[Optional[StrictStr], Field(description="The project to be billed for this request. Required for Requester Pays buckets.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[Bucket]:
        """storage_buckets_lock_retention_policy

        Locks retention policy on a bucket.

        :param bucket: Name of a bucket. (required)
        :type bucket: str
        :param if_metageneration_match: Makes the operation conditional on whether bucket's current metageneration matches the given value. (required)
        :type if_metageneration_match: str
        :param alt: Data format for the response.
        :type alt: str
        :param fields: Selector specifying which fields to include in a partial response.
        :type fields: str
        :param key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
        :type key: str
        :param oauth_token: OAuth 2.0 token for the current user.
        :type oauth_token: str
        :param pretty_print: Returns response with indentations and line breaks.
        :type pretty_print: bool
        :param quota_user: An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
        :type quota_user: str
        :param upload_type: Upload protocol for media (e.g. \"media\", \"multipart\", \"resumable\").
        :type upload_type: str
        :param user_ip: Deprecated. Please use quotaUser instead.
        :type user_ip: str
        :param user_project: The project to be billed for this request. Required for Requester Pays buckets.
        :type user_project: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._storage_buckets_lock_retention_policy_serialize(
            bucket=bucket,
            if_metageneration_match=if_metageneration_match,
            alt=alt,
            fields=fields,
            key=key,
            oauth_token=oauth_token,
            pretty_print=pretty_print,
            quota_user=quota_user,
            upload_type=upload_type,
            user_ip=user_ip,
            user_project=user_project,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Bucket",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def storage_buckets_lock_retention_policy_without_preload_content(
        self,
        bucket: Annotated[StrictStr, Field(description="Name of a bucket.")],
        if_metageneration_match: Annotated[StrictStr, Field(description="Makes the operation conditional on whether bucket's current metageneration matches the given value.")],
        alt: Annotated[Optional[StrictStr], Field(description="Data format for the response.")] = None,
        fields: Annotated[Optional[StrictStr], Field(description="Selector specifying which fields to include in a partial response.")] = None,
        key: Annotated[Optional[StrictStr], Field(description="API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.")] = None,
        oauth_token: Annotated[Optional[StrictStr], Field(description="OAuth 2.0 token for the current user.")] = None,
        pretty_print: Annotated[Optional[StrictBool], Field(description="Returns response with indentations and line breaks.")] = None,
        quota_user: Annotated[Optional[StrictStr], Field(description="An opaque string that represents a user for quota purposes. Must not exceed 40 characters.")] = None,
        upload_type: Annotated[Optional[StrictStr], Field(description="Upload protocol for media (e.g. \"media\", \"multipart\", \"resumable\").")] = None,
        user_ip: Annotated[Optional[StrictStr], Field(description="Deprecated. Please use quotaUser instead.")] = None,
        user_project: Annotated[Optional[StrictStr], Field(description="The project to be billed for this request. Required for Requester Pays buckets.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """storage_buckets_lock_retention_policy

        Locks retention policy on a bucket.

        :param bucket: Name of a bucket. (required)
        :type bucket: str
        :param if_metageneration_match: Makes the operation conditional on whether bucket's current metageneration matches the given value. (required)
        :type if_metageneration_match: str
        :param alt: Data format for the response.
        :type alt: str
        :param fields: Selector specifying which fields to include in a partial response.
        :type fields: str
        :param key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
        :type key: str
        :param oauth_token: OAuth 2.0 token for the current user.
        :type oauth_token: str
        :param pretty_print: Returns response with indentations and line breaks.
        :type pretty_print: bool
        :param quota_user: An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
        :type quota_user: str
        :param upload_type: Upload protocol for media (e.g. \"media\", \"multipart\", \"resumable\").
        :type upload_type: str
        :param user_ip: Deprecated. Please use quotaUser instead.
        :type user_ip: str
        :param user_project: The project to be billed for this request. Required for Requester Pays buckets.
        :type user_project: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._storage_buckets_lock_retention_policy_serialize(
            bucket=bucket,
            if_metageneration_match=if_metageneration_match,
            alt=alt,
            fields=fields,
            key=key,
            oauth_token=oauth_token,
            pretty_print=pretty_print,
            quota_user=quota_user,
            upload_type=upload_type,
            user_ip=user_ip,
            user_project=user_project,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Bucket",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _storage_buckets_lock_retention_policy_serialize(
        self,
        bucket,
        if_metageneration_match,
        alt,
        fields,
        key,
        oauth_token,
        pretty_print,
        quota_user,
        upload_type,
        user_ip,
        user_project,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if bucket is not None:
            _path_params['bucket'] = bucket
        # process the query parameters
        if alt is not None:
            
            _query_params.append(('alt', alt))
            
        if fields is not None:
            
            _query_params.append(('fields', fields))
            
        if key is not None:
            
            _query_params.append(('key', key))
            
        if oauth_token is not None:
            
            _query_params.append(('oauth_token', oauth_token))
            
        if pretty_print is not None:
            
            _query_params.append(('prettyPrint', pretty_print))
            
        if quota_user is not None:
            
            _query_params.append(('quotaUser', quota_user))
            
        if upload_type is not None:
            
            _query_params.append(('uploadType', upload_type))
            
        if user_ip is not None:
            
            _query_params.append(('userIp', user_ip))
            
        if if_metageneration_match is not None:
            
            _query_params.append(('ifMetagenerationMatch', if_metageneration_match))
            
        if user_project is not None:
            
            _query_params.append(('userProject', user_project))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'Oauth2c', 
            'Oauth2'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/b/{bucket}/lockRetentionPolicy',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def storage_buckets_patch(
        self,
        bucket: Annotated[StrictStr, Field(description="Name of a bucket.")],
        alt: Annotated[Optional[StrictStr], Field(description="Data format for the response.")] = None,
        fields: Annotated[Optional[StrictStr], Field(description="Selector specifying which fields to include in a partial response.")] = None,
        key: Annotated[Optional[StrictStr], Field(description="API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.")] = None,
        oauth_token: Annotated[Optional[StrictStr], Field(description="OAuth 2.0 token for the current user.")] = None,
        pretty_print: Annotated[Optional[StrictBool], Field(description="Returns response with indentations and line breaks.")] = None,
        quota_user: Annotated[Optional[StrictStr], Field(description="An opaque string that represents a user for quota purposes. Must not exceed 40 characters.")] = None,
        upload_type: Annotated[Optional[StrictStr], Field(description="Upload protocol for media (e.g. \"media\", \"multipart\", \"resumable\").")] = None,
        user_ip: Annotated[Optional[StrictStr], Field(description="Deprecated. Please use quotaUser instead.")] = None,
        if_metageneration_match: Annotated[Optional[StrictStr], Field(description="Makes the return of the bucket metadata conditional on whether the bucket's current metageneration matches the given value.")] = None,
        if_metageneration_not_match: Annotated[Optional[StrictStr], Field(description="Makes the return of the bucket metadata conditional on whether the bucket's current metageneration does not match the given value.")] = None,
        predefined_acl: Annotated[Optional[StrictStr], Field(description="Apply a predefined set of access controls to this bucket.")] = None,
        predefined_default_object_acl: Annotated[Optional[StrictStr], Field(description="Apply a predefined set of default object access controls to this bucket.")] = None,
        projection: Annotated[Optional[StrictStr], Field(description="Set of properties to return. Defaults to full.")] = None,
        user_project: Annotated[Optional[StrictStr], Field(description="The project to be billed for this request. Required for Requester Pays buckets.")] = None,
        bucket2: Optional[Bucket] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> Bucket:
        """storage_buckets_patch

        Patches a bucket. Changes to the bucket will be readable immediately after writing, but configuration changes may take time to propagate.

        :param bucket: Name of a bucket. (required)
        :type bucket: str
        :param alt: Data format for the response.
        :type alt: str
        :param fields: Selector specifying which fields to include in a partial response.
        :type fields: str
        :param key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
        :type key: str
        :param oauth_token: OAuth 2.0 token for the current user.
        :type oauth_token: str
        :param pretty_print: Returns response with indentations and line breaks.
        :type pretty_print: bool
        :param quota_user: An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
        :type quota_user: str
        :param upload_type: Upload protocol for media (e.g. \"media\", \"multipart\", \"resumable\").
        :type upload_type: str
        :param user_ip: Deprecated. Please use quotaUser instead.
        :type user_ip: str
        :param if_metageneration_match: Makes the return of the bucket metadata conditional on whether the bucket's current metageneration matches the given value.
        :type if_metageneration_match: str
        :param if_metageneration_not_match: Makes the return of the bucket metadata conditional on whether the bucket's current metageneration does not match the given value.
        :type if_metageneration_not_match: str
        :param predefined_acl: Apply a predefined set of access controls to this bucket.
        :type predefined_acl: str
        :param predefined_default_object_acl: Apply a predefined set of default object access controls to this bucket.
        :type predefined_default_object_acl: str
        :param projection: Set of properties to return. Defaults to full.
        :type projection: str
        :param user_project: The project to be billed for this request. Required for Requester Pays buckets.
        :type user_project: str
        :param bucket2:
        :type bucket2: Bucket
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._storage_buckets_patch_serialize(
            bucket=bucket,
            alt=alt,
            fields=fields,
            key=key,
            oauth_token=oauth_token,
            pretty_print=pretty_print,
            quota_user=quota_user,
            upload_type=upload_type,
            user_ip=user_ip,
            if_metageneration_match=if_metageneration_match,
            if_metageneration_not_match=if_metageneration_not_match,
            predefined_acl=predefined_acl,
            predefined_default_object_acl=predefined_default_object_acl,
            projection=projection,
            user_project=user_project,
            bucket2=bucket2,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Bucket",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def storage_buckets_patch_with_http_info(
        self,
        bucket: Annotated[StrictStr, Field(description="Name of a bucket.")],
        alt: Annotated[Optional[StrictStr], Field(description="Data format for the response.")] = None,
        fields: Annotated[Optional[StrictStr], Field(description="Selector specifying which fields to include in a partial response.")] = None,
        key: Annotated[Optional[StrictStr], Field(description="API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.")] = None,
        oauth_token: Annotated[Optional[StrictStr], Field(description="OAuth 2.0 token for the current user.")] = None,
        pretty_print: Annotated[Optional[StrictBool], Field(description="Returns response with indentations and line breaks.")] = None,
        quota_user: Annotated[Optional[StrictStr], Field(description="An opaque string that represents a user for quota purposes. Must not exceed 40 characters.")] = None,
        upload_type: Annotated[Optional[StrictStr], Field(description="Upload protocol for media (e.g. \"media\", \"multipart\", \"resumable\").")] = None,
        user_ip: Annotated[Optional[StrictStr], Field(description="Deprecated. Please use quotaUser instead.")] = None,
        if_metageneration_match: Annotated[Optional[StrictStr], Field(description="Makes the return of the bucket metadata conditional on whether the bucket's current metageneration matches the given value.")] = None,
        if_metageneration_not_match: Annotated[Optional[StrictStr], Field(description="Makes the return of the bucket metadata conditional on whether the bucket's current metageneration does not match the given value.")] = None,
        predefined_acl: Annotated[Optional[StrictStr], Field(description="Apply a predefined set of access controls to this bucket.")] = None,
        predefined_default_object_acl: Annotated[Optional[StrictStr], Field(description="Apply a predefined set of default object access controls to this bucket.")] = None,
        projection: Annotated[Optional[StrictStr], Field(description="Set of properties to return. Defaults to full.")] = None,
        user_project: Annotated[Optional[StrictStr], Field(description="The project to be billed for this request. Required for Requester Pays buckets.")] = None,
        bucket2: Optional[Bucket] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[Bucket]:
        """storage_buckets_patch

        Patches a bucket. Changes to the bucket will be readable immediately after writing, but configuration changes may take time to propagate.

        :param bucket: Name of a bucket. (required)
        :type bucket: str
        :param alt: Data format for the response.
        :type alt: str
        :param fields: Selector specifying which fields to include in a partial response.
        :type fields: str
        :param key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
        :type key: str
        :param oauth_token: OAuth 2.0 token for the current user.
        :type oauth_token: str
        :param pretty_print: Returns response with indentations and line breaks.
        :type pretty_print: bool
        :param quota_user: An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
        :type quota_user: str
        :param upload_type: Upload protocol for media (e.g. \"media\", \"multipart\", \"resumable\").
        :type upload_type: str
        :param user_ip: Deprecated. Please use quotaUser instead.
        :type user_ip: str
        :param if_metageneration_match: Makes the return of the bucket metadata conditional on whether the bucket's current metageneration matches the given value.
        :type if_metageneration_match: str
        :param if_metageneration_not_match: Makes the return of the bucket metadata conditional on whether the bucket's current metageneration does not match the given value.
        :type if_metageneration_not_match: str
        :param predefined_acl: Apply a predefined set of access controls to this bucket.
        :type predefined_acl: str
        :param predefined_default_object_acl: Apply a predefined set of default object access controls to this bucket.
        :type predefined_default_object_acl: str
        :param projection: Set of properties to return. Defaults to full.
        :type projection: str
        :param user_project: The project to be billed for this request. Required for Requester Pays buckets.
        :type user_project: str
        :param bucket2:
        :type bucket2: Bucket
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._storage_buckets_patch_serialize(
            bucket=bucket,
            alt=alt,
            fields=fields,
            key=key,
            oauth_token=oauth_token,
            pretty_print=pretty_print,
            quota_user=quota_user,
            upload_type=upload_type,
            user_ip=user_ip,
            if_metageneration_match=if_metageneration_match,
            if_metageneration_not_match=if_metageneration_not_match,
            predefined_acl=predefined_acl,
            predefined_default_object_acl=predefined_default_object_acl,
            projection=projection,
            user_project=user_project,
            bucket2=bucket2,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Bucket",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def storage_buckets_patch_without_preload_content(
        self,
        bucket: Annotated[StrictStr, Field(description="Name of a bucket.")],
        alt: Annotated[Optional[StrictStr], Field(description="Data format for the response.")] = None,
        fields: Annotated[Optional[StrictStr], Field(description="Selector specifying which fields to include in a partial response.")] = None,
        key: Annotated[Optional[StrictStr], Field(description="API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.")] = None,
        oauth_token: Annotated[Optional[StrictStr], Field(description="OAuth 2.0 token for the current user.")] = None,
        pretty_print: Annotated[Optional[StrictBool], Field(description="Returns response with indentations and line breaks.")] = None,
        quota_user: Annotated[Optional[StrictStr], Field(description="An opaque string that represents a user for quota purposes. Must not exceed 40 characters.")] = None,
        upload_type: Annotated[Optional[StrictStr], Field(description="Upload protocol for media (e.g. \"media\", \"multipart\", \"resumable\").")] = None,
        user_ip: Annotated[Optional[StrictStr], Field(description="Deprecated. Please use quotaUser instead.")] = None,
        if_metageneration_match: Annotated[Optional[StrictStr], Field(description="Makes the return of the bucket metadata conditional on whether the bucket's current metageneration matches the given value.")] = None,
        if_metageneration_not_match: Annotated[Optional[StrictStr], Field(description="Makes the return of the bucket metadata conditional on whether the bucket's current metageneration does not match the given value.")] = None,
        predefined_acl: Annotated[Optional[StrictStr], Field(description="Apply a predefined set of access controls to this bucket.")] = None,
        predefined_default_object_acl: Annotated[Optional[StrictStr], Field(description="Apply a predefined set of default object access controls to this bucket.")] = None,
        projection: Annotated[Optional[StrictStr], Field(description="Set of properties to return. Defaults to full.")] = None,
        user_project: Annotated[Optional[StrictStr], Field(description="The project to be billed for this request. Required for Requester Pays buckets.")] = None,
        bucket2: Optional[Bucket] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """storage_buckets_patch

        Patches a bucket. Changes to the bucket will be readable immediately after writing, but configuration changes may take time to propagate.

        :param bucket: Name of a bucket. (required)
        :type bucket: str
        :param alt: Data format for the response.
        :type alt: str
        :param fields: Selector specifying which fields to include in a partial response.
        :type fields: str
        :param key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
        :type key: str
        :param oauth_token: OAuth 2.0 token for the current user.
        :type oauth_token: str
        :param pretty_print: Returns response with indentations and line breaks.
        :type pretty_print: bool
        :param quota_user: An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
        :type quota_user: str
        :param upload_type: Upload protocol for media (e.g. \"media\", \"multipart\", \"resumable\").
        :type upload_type: str
        :param user_ip: Deprecated. Please use quotaUser instead.
        :type user_ip: str
        :param if_metageneration_match: Makes the return of the bucket metadata conditional on whether the bucket's current metageneration matches the given value.
        :type if_metageneration_match: str
        :param if_metageneration_not_match: Makes the return of the bucket metadata conditional on whether the bucket's current metageneration does not match the given value.
        :type if_metageneration_not_match: str
        :param predefined_acl: Apply a predefined set of access controls to this bucket.
        :type predefined_acl: str
        :param predefined_default_object_acl: Apply a predefined set of default object access controls to this bucket.
        :type predefined_default_object_acl: str
        :param projection: Set of properties to return. Defaults to full.
        :type projection: str
        :param user_project: The project to be billed for this request. Required for Requester Pays buckets.
        :type user_project: str
        :param bucket2:
        :type bucket2: Bucket
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._storage_buckets_patch_serialize(
            bucket=bucket,
            alt=alt,
            fields=fields,
            key=key,
            oauth_token=oauth_token,
            pretty_print=pretty_print,
            quota_user=quota_user,
            upload_type=upload_type,
            user_ip=user_ip,
            if_metageneration_match=if_metageneration_match,
            if_metageneration_not_match=if_metageneration_not_match,
            predefined_acl=predefined_acl,
            predefined_default_object_acl=predefined_default_object_acl,
            projection=projection,
            user_project=user_project,
            bucket2=bucket2,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Bucket",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _storage_buckets_patch_serialize(
        self,
        bucket,
        alt,
        fields,
        key,
        oauth_token,
        pretty_print,
        quota_user,
        upload_type,
        user_ip,
        if_metageneration_match,
        if_metageneration_not_match,
        predefined_acl,
        predefined_default_object_acl,
        projection,
        user_project,
        bucket2,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if bucket is not None:
            _path_params['bucket'] = bucket
        # process the query parameters
        if alt is not None:
            
            _query_params.append(('alt', alt))
            
        if fields is not None:
            
            _query_params.append(('fields', fields))
            
        if key is not None:
            
            _query_params.append(('key', key))
            
        if oauth_token is not None:
            
            _query_params.append(('oauth_token', oauth_token))
            
        if pretty_print is not None:
            
            _query_params.append(('prettyPrint', pretty_print))
            
        if quota_user is not None:
            
            _query_params.append(('quotaUser', quota_user))
            
        if upload_type is not None:
            
            _query_params.append(('uploadType', upload_type))
            
        if user_ip is not None:
            
            _query_params.append(('userIp', user_ip))
            
        if if_metageneration_match is not None:
            
            _query_params.append(('ifMetagenerationMatch', if_metageneration_match))
            
        if if_metageneration_not_match is not None:
            
            _query_params.append(('ifMetagenerationNotMatch', if_metageneration_not_match))
            
        if predefined_acl is not None:
            
            _query_params.append(('predefinedAcl', predefined_acl))
            
        if predefined_default_object_acl is not None:
            
            _query_params.append(('predefinedDefaultObjectAcl', predefined_default_object_acl))
            
        if projection is not None:
            
            _query_params.append(('projection', projection))
            
        if user_project is not None:
            
            _query_params.append(('userProject', user_project))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if bucket2 is not None:
            _body_params = bucket2


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'Oauth2c', 
            'Oauth2'
        ]

        return self.api_client.param_serialize(
            method='PATCH',
            resource_path='/b/{bucket}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def storage_buckets_set_iam_policy(
        self,
        bucket: Annotated[StrictStr, Field(description="Name of a bucket.")],
        alt: Annotated[Optional[StrictStr], Field(description="Data format for the response.")] = None,
        fields: Annotated[Optional[StrictStr], Field(description="Selector specifying which fields to include in a partial response.")] = None,
        key: Annotated[Optional[StrictStr], Field(description="API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.")] = None,
        oauth_token: Annotated[Optional[StrictStr], Field(description="OAuth 2.0 token for the current user.")] = None,
        pretty_print: Annotated[Optional[StrictBool], Field(description="Returns response with indentations and line breaks.")] = None,
        quota_user: Annotated[Optional[StrictStr], Field(description="An opaque string that represents a user for quota purposes. Must not exceed 40 characters.")] = None,
        upload_type: Annotated[Optional[StrictStr], Field(description="Upload protocol for media (e.g. \"media\", \"multipart\", \"resumable\").")] = None,
        user_ip: Annotated[Optional[StrictStr], Field(description="Deprecated. Please use quotaUser instead.")] = None,
        user_project: Annotated[Optional[StrictStr], Field(description="The project to be billed for this request. Required for Requester Pays buckets.")] = None,
        policy: Optional[Policy] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> Policy:
        """storage_buckets_set_iam_policy

        Updates an IAM policy for the specified bucket.

        :param bucket: Name of a bucket. (required)
        :type bucket: str
        :param alt: Data format for the response.
        :type alt: str
        :param fields: Selector specifying which fields to include in a partial response.
        :type fields: str
        :param key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
        :type key: str
        :param oauth_token: OAuth 2.0 token for the current user.
        :type oauth_token: str
        :param pretty_print: Returns response with indentations and line breaks.
        :type pretty_print: bool
        :param quota_user: An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
        :type quota_user: str
        :param upload_type: Upload protocol for media (e.g. \"media\", \"multipart\", \"resumable\").
        :type upload_type: str
        :param user_ip: Deprecated. Please use quotaUser instead.
        :type user_ip: str
        :param user_project: The project to be billed for this request. Required for Requester Pays buckets.
        :type user_project: str
        :param policy:
        :type policy: Policy
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._storage_buckets_set_iam_policy_serialize(
            bucket=bucket,
            alt=alt,
            fields=fields,
            key=key,
            oauth_token=oauth_token,
            pretty_print=pretty_print,
            quota_user=quota_user,
            upload_type=upload_type,
            user_ip=user_ip,
            user_project=user_project,
            policy=policy,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Policy",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def storage_buckets_set_iam_policy_with_http_info(
        self,
        bucket: Annotated[StrictStr, Field(description="Name of a bucket.")],
        alt: Annotated[Optional[StrictStr], Field(description="Data format for the response.")] = None,
        fields: Annotated[Optional[StrictStr], Field(description="Selector specifying which fields to include in a partial response.")] = None,
        key: Annotated[Optional[StrictStr], Field(description="API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.")] = None,
        oauth_token: Annotated[Optional[StrictStr], Field(description="OAuth 2.0 token for the current user.")] = None,
        pretty_print: Annotated[Optional[StrictBool], Field(description="Returns response with indentations and line breaks.")] = None,
        quota_user: Annotated[Optional[StrictStr], Field(description="An opaque string that represents a user for quota purposes. Must not exceed 40 characters.")] = None,
        upload_type: Annotated[Optional[StrictStr], Field(description="Upload protocol for media (e.g. \"media\", \"multipart\", \"resumable\").")] = None,
        user_ip: Annotated[Optional[StrictStr], Field(description="Deprecated. Please use quotaUser instead.")] = None,
        user_project: Annotated[Optional[StrictStr], Field(description="The project to be billed for this request. Required for Requester Pays buckets.")] = None,
        policy: Optional[Policy] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[Policy]:
        """storage_buckets_set_iam_policy

        Updates an IAM policy for the specified bucket.

        :param bucket: Name of a bucket. (required)
        :type bucket: str
        :param alt: Data format for the response.
        :type alt: str
        :param fields: Selector specifying which fields to include in a partial response.
        :type fields: str
        :param key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
        :type key: str
        :param oauth_token: OAuth 2.0 token for the current user.
        :type oauth_token: str
        :param pretty_print: Returns response with indentations and line breaks.
        :type pretty_print: bool
        :param quota_user: An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
        :type quota_user: str
        :param upload_type: Upload protocol for media (e.g. \"media\", \"multipart\", \"resumable\").
        :type upload_type: str
        :param user_ip: Deprecated. Please use quotaUser instead.
        :type user_ip: str
        :param user_project: The project to be billed for this request. Required for Requester Pays buckets.
        :type user_project: str
        :param policy:
        :type policy: Policy
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._storage_buckets_set_iam_policy_serialize(
            bucket=bucket,
            alt=alt,
            fields=fields,
            key=key,
            oauth_token=oauth_token,
            pretty_print=pretty_print,
            quota_user=quota_user,
            upload_type=upload_type,
            user_ip=user_ip,
            user_project=user_project,
            policy=policy,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Policy",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def storage_buckets_set_iam_policy_without_preload_content(
        self,
        bucket: Annotated[StrictStr, Field(description="Name of a bucket.")],
        alt: Annotated[Optional[StrictStr], Field(description="Data format for the response.")] = None,
        fields: Annotated[Optional[StrictStr], Field(description="Selector specifying which fields to include in a partial response.")] = None,
        key: Annotated[Optional[StrictStr], Field(description="API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.")] = None,
        oauth_token: Annotated[Optional[StrictStr], Field(description="OAuth 2.0 token for the current user.")] = None,
        pretty_print: Annotated[Optional[StrictBool], Field(description="Returns response with indentations and line breaks.")] = None,
        quota_user: Annotated[Optional[StrictStr], Field(description="An opaque string that represents a user for quota purposes. Must not exceed 40 characters.")] = None,
        upload_type: Annotated[Optional[StrictStr], Field(description="Upload protocol for media (e.g. \"media\", \"multipart\", \"resumable\").")] = None,
        user_ip: Annotated[Optional[StrictStr], Field(description="Deprecated. Please use quotaUser instead.")] = None,
        user_project: Annotated[Optional[StrictStr], Field(description="The project to be billed for this request. Required for Requester Pays buckets.")] = None,
        policy: Optional[Policy] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """storage_buckets_set_iam_policy

        Updates an IAM policy for the specified bucket.

        :param bucket: Name of a bucket. (required)
        :type bucket: str
        :param alt: Data format for the response.
        :type alt: str
        :param fields: Selector specifying which fields to include in a partial response.
        :type fields: str
        :param key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
        :type key: str
        :param oauth_token: OAuth 2.0 token for the current user.
        :type oauth_token: str
        :param pretty_print: Returns response with indentations and line breaks.
        :type pretty_print: bool
        :param quota_user: An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
        :type quota_user: str
        :param upload_type: Upload protocol for media (e.g. \"media\", \"multipart\", \"resumable\").
        :type upload_type: str
        :param user_ip: Deprecated. Please use quotaUser instead.
        :type user_ip: str
        :param user_project: The project to be billed for this request. Required for Requester Pays buckets.
        :type user_project: str
        :param policy:
        :type policy: Policy
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._storage_buckets_set_iam_policy_serialize(
            bucket=bucket,
            alt=alt,
            fields=fields,
            key=key,
            oauth_token=oauth_token,
            pretty_print=pretty_print,
            quota_user=quota_user,
            upload_type=upload_type,
            user_ip=user_ip,
            user_project=user_project,
            policy=policy,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Policy",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _storage_buckets_set_iam_policy_serialize(
        self,
        bucket,
        alt,
        fields,
        key,
        oauth_token,
        pretty_print,
        quota_user,
        upload_type,
        user_ip,
        user_project,
        policy,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if bucket is not None:
            _path_params['bucket'] = bucket
        # process the query parameters
        if alt is not None:
            
            _query_params.append(('alt', alt))
            
        if fields is not None:
            
            _query_params.append(('fields', fields))
            
        if key is not None:
            
            _query_params.append(('key', key))
            
        if oauth_token is not None:
            
            _query_params.append(('oauth_token', oauth_token))
            
        if pretty_print is not None:
            
            _query_params.append(('prettyPrint', pretty_print))
            
        if quota_user is not None:
            
            _query_params.append(('quotaUser', quota_user))
            
        if upload_type is not None:
            
            _query_params.append(('uploadType', upload_type))
            
        if user_ip is not None:
            
            _query_params.append(('userIp', user_ip))
            
        if user_project is not None:
            
            _query_params.append(('userProject', user_project))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if policy is not None:
            _body_params = policy


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'Oauth2c', 
            'Oauth2'
        ]

        return self.api_client.param_serialize(
            method='PUT',
            resource_path='/b/{bucket}/iam',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def storage_buckets_test_iam_permissions(
        self,
        bucket: Annotated[StrictStr, Field(description="Name of a bucket.")],
        permissions: Annotated[List[StrictStr], Field(description="Permissions to test.")],
        alt: Annotated[Optional[StrictStr], Field(description="Data format for the response.")] = None,
        fields: Annotated[Optional[StrictStr], Field(description="Selector specifying which fields to include in a partial response.")] = None,
        key: Annotated[Optional[StrictStr], Field(description="API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.")] = None,
        oauth_token: Annotated[Optional[StrictStr], Field(description="OAuth 2.0 token for the current user.")] = None,
        pretty_print: Annotated[Optional[StrictBool], Field(description="Returns response with indentations and line breaks.")] = None,
        quota_user: Annotated[Optional[StrictStr], Field(description="An opaque string that represents a user for quota purposes. Must not exceed 40 characters.")] = None,
        upload_type: Annotated[Optional[StrictStr], Field(description="Upload protocol for media (e.g. \"media\", \"multipart\", \"resumable\").")] = None,
        user_ip: Annotated[Optional[StrictStr], Field(description="Deprecated. Please use quotaUser instead.")] = None,
        user_project: Annotated[Optional[StrictStr], Field(description="The project to be billed for this request. Required for Requester Pays buckets.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> TestIamPermissionsResponse:
        """storage_buckets_test_iam_permissions

        Tests a set of permissions on the given bucket to see which, if any, are held by the caller.

        :param bucket: Name of a bucket. (required)
        :type bucket: str
        :param permissions: Permissions to test. (required)
        :type permissions: List[str]
        :param alt: Data format for the response.
        :type alt: str
        :param fields: Selector specifying which fields to include in a partial response.
        :type fields: str
        :param key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
        :type key: str
        :param oauth_token: OAuth 2.0 token for the current user.
        :type oauth_token: str
        :param pretty_print: Returns response with indentations and line breaks.
        :type pretty_print: bool
        :param quota_user: An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
        :type quota_user: str
        :param upload_type: Upload protocol for media (e.g. \"media\", \"multipart\", \"resumable\").
        :type upload_type: str
        :param user_ip: Deprecated. Please use quotaUser instead.
        :type user_ip: str
        :param user_project: The project to be billed for this request. Required for Requester Pays buckets.
        :type user_project: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._storage_buckets_test_iam_permissions_serialize(
            bucket=bucket,
            permissions=permissions,
            alt=alt,
            fields=fields,
            key=key,
            oauth_token=oauth_token,
            pretty_print=pretty_print,
            quota_user=quota_user,
            upload_type=upload_type,
            user_ip=user_ip,
            user_project=user_project,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "TestIamPermissionsResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def storage_buckets_test_iam_permissions_with_http_info(
        self,
        bucket: Annotated[StrictStr, Field(description="Name of a bucket.")],
        permissions: Annotated[List[StrictStr], Field(description="Permissions to test.")],
        alt: Annotated[Optional[StrictStr], Field(description="Data format for the response.")] = None,
        fields: Annotated[Optional[StrictStr], Field(description="Selector specifying which fields to include in a partial response.")] = None,
        key: Annotated[Optional[StrictStr], Field(description="API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.")] = None,
        oauth_token: Annotated[Optional[StrictStr], Field(description="OAuth 2.0 token for the current user.")] = None,
        pretty_print: Annotated[Optional[StrictBool], Field(description="Returns response with indentations and line breaks.")] = None,
        quota_user: Annotated[Optional[StrictStr], Field(description="An opaque string that represents a user for quota purposes. Must not exceed 40 characters.")] = None,
        upload_type: Annotated[Optional[StrictStr], Field(description="Upload protocol for media (e.g. \"media\", \"multipart\", \"resumable\").")] = None,
        user_ip: Annotated[Optional[StrictStr], Field(description="Deprecated. Please use quotaUser instead.")] = None,
        user_project: Annotated[Optional[StrictStr], Field(description="The project to be billed for this request. Required for Requester Pays buckets.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[TestIamPermissionsResponse]:
        """storage_buckets_test_iam_permissions

        Tests a set of permissions on the given bucket to see which, if any, are held by the caller.

        :param bucket: Name of a bucket. (required)
        :type bucket: str
        :param permissions: Permissions to test. (required)
        :type permissions: List[str]
        :param alt: Data format for the response.
        :type alt: str
        :param fields: Selector specifying which fields to include in a partial response.
        :type fields: str
        :param key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
        :type key: str
        :param oauth_token: OAuth 2.0 token for the current user.
        :type oauth_token: str
        :param pretty_print: Returns response with indentations and line breaks.
        :type pretty_print: bool
        :param quota_user: An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
        :type quota_user: str
        :param upload_type: Upload protocol for media (e.g. \"media\", \"multipart\", \"resumable\").
        :type upload_type: str
        :param user_ip: Deprecated. Please use quotaUser instead.
        :type user_ip: str
        :param user_project: The project to be billed for this request. Required for Requester Pays buckets.
        :type user_project: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._storage_buckets_test_iam_permissions_serialize(
            bucket=bucket,
            permissions=permissions,
            alt=alt,
            fields=fields,
            key=key,
            oauth_token=oauth_token,
            pretty_print=pretty_print,
            quota_user=quota_user,
            upload_type=upload_type,
            user_ip=user_ip,
            user_project=user_project,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "TestIamPermissionsResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def storage_buckets_test_iam_permissions_without_preload_content(
        self,
        bucket: Annotated[StrictStr, Field(description="Name of a bucket.")],
        permissions: Annotated[List[StrictStr], Field(description="Permissions to test.")],
        alt: Annotated[Optional[StrictStr], Field(description="Data format for the response.")] = None,
        fields: Annotated[Optional[StrictStr], Field(description="Selector specifying which fields to include in a partial response.")] = None,
        key: Annotated[Optional[StrictStr], Field(description="API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.")] = None,
        oauth_token: Annotated[Optional[StrictStr], Field(description="OAuth 2.0 token for the current user.")] = None,
        pretty_print: Annotated[Optional[StrictBool], Field(description="Returns response with indentations and line breaks.")] = None,
        quota_user: Annotated[Optional[StrictStr], Field(description="An opaque string that represents a user for quota purposes. Must not exceed 40 characters.")] = None,
        upload_type: Annotated[Optional[StrictStr], Field(description="Upload protocol for media (e.g. \"media\", \"multipart\", \"resumable\").")] = None,
        user_ip: Annotated[Optional[StrictStr], Field(description="Deprecated. Please use quotaUser instead.")] = None,
        user_project: Annotated[Optional[StrictStr], Field(description="The project to be billed for this request. Required for Requester Pays buckets.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """storage_buckets_test_iam_permissions

        Tests a set of permissions on the given bucket to see which, if any, are held by the caller.

        :param bucket: Name of a bucket. (required)
        :type bucket: str
        :param permissions: Permissions to test. (required)
        :type permissions: List[str]
        :param alt: Data format for the response.
        :type alt: str
        :param fields: Selector specifying which fields to include in a partial response.
        :type fields: str
        :param key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
        :type key: str
        :param oauth_token: OAuth 2.0 token for the current user.
        :type oauth_token: str
        :param pretty_print: Returns response with indentations and line breaks.
        :type pretty_print: bool
        :param quota_user: An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
        :type quota_user: str
        :param upload_type: Upload protocol for media (e.g. \"media\", \"multipart\", \"resumable\").
        :type upload_type: str
        :param user_ip: Deprecated. Please use quotaUser instead.
        :type user_ip: str
        :param user_project: The project to be billed for this request. Required for Requester Pays buckets.
        :type user_project: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._storage_buckets_test_iam_permissions_serialize(
            bucket=bucket,
            permissions=permissions,
            alt=alt,
            fields=fields,
            key=key,
            oauth_token=oauth_token,
            pretty_print=pretty_print,
            quota_user=quota_user,
            upload_type=upload_type,
            user_ip=user_ip,
            user_project=user_project,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "TestIamPermissionsResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _storage_buckets_test_iam_permissions_serialize(
        self,
        bucket,
        permissions,
        alt,
        fields,
        key,
        oauth_token,
        pretty_print,
        quota_user,
        upload_type,
        user_ip,
        user_project,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'permissions': 'multi',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if bucket is not None:
            _path_params['bucket'] = bucket
        # process the query parameters
        if alt is not None:
            
            _query_params.append(('alt', alt))
            
        if fields is not None:
            
            _query_params.append(('fields', fields))
            
        if key is not None:
            
            _query_params.append(('key', key))
            
        if oauth_token is not None:
            
            _query_params.append(('oauth_token', oauth_token))
            
        if pretty_print is not None:
            
            _query_params.append(('prettyPrint', pretty_print))
            
        if quota_user is not None:
            
            _query_params.append(('quotaUser', quota_user))
            
        if upload_type is not None:
            
            _query_params.append(('uploadType', upload_type))
            
        if user_ip is not None:
            
            _query_params.append(('userIp', user_ip))
            
        if permissions is not None:
            
            _query_params.append(('permissions', permissions))
            
        if user_project is not None:
            
            _query_params.append(('userProject', user_project))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'Oauth2c', 
            'Oauth2'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/b/{bucket}/iam/testPermissions',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def storage_buckets_update(
        self,
        bucket: Annotated[StrictStr, Field(description="Name of a bucket.")],
        alt: Annotated[Optional[StrictStr], Field(description="Data format for the response.")] = None,
        fields: Annotated[Optional[StrictStr], Field(description="Selector specifying which fields to include in a partial response.")] = None,
        key: Annotated[Optional[StrictStr], Field(description="API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.")] = None,
        oauth_token: Annotated[Optional[StrictStr], Field(description="OAuth 2.0 token for the current user.")] = None,
        pretty_print: Annotated[Optional[StrictBool], Field(description="Returns response with indentations and line breaks.")] = None,
        quota_user: Annotated[Optional[StrictStr], Field(description="An opaque string that represents a user for quota purposes. Must not exceed 40 characters.")] = None,
        upload_type: Annotated[Optional[StrictStr], Field(description="Upload protocol for media (e.g. \"media\", \"multipart\", \"resumable\").")] = None,
        user_ip: Annotated[Optional[StrictStr], Field(description="Deprecated. Please use quotaUser instead.")] = None,
        if_metageneration_match: Annotated[Optional[StrictStr], Field(description="Makes the return of the bucket metadata conditional on whether the bucket's current metageneration matches the given value.")] = None,
        if_metageneration_not_match: Annotated[Optional[StrictStr], Field(description="Makes the return of the bucket metadata conditional on whether the bucket's current metageneration does not match the given value.")] = None,
        predefined_acl: Annotated[Optional[StrictStr], Field(description="Apply a predefined set of access controls to this bucket.")] = None,
        predefined_default_object_acl: Annotated[Optional[StrictStr], Field(description="Apply a predefined set of default object access controls to this bucket.")] = None,
        projection: Annotated[Optional[StrictStr], Field(description="Set of properties to return. Defaults to full.")] = None,
        user_project: Annotated[Optional[StrictStr], Field(description="The project to be billed for this request. Required for Requester Pays buckets.")] = None,
        bucket2: Optional[Bucket] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> Bucket:
        """storage_buckets_update

        Updates a bucket. Changes to the bucket will be readable immediately after writing, but configuration changes may take time to propagate.

        :param bucket: Name of a bucket. (required)
        :type bucket: str
        :param alt: Data format for the response.
        :type alt: str
        :param fields: Selector specifying which fields to include in a partial response.
        :type fields: str
        :param key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
        :type key: str
        :param oauth_token: OAuth 2.0 token for the current user.
        :type oauth_token: str
        :param pretty_print: Returns response with indentations and line breaks.
        :type pretty_print: bool
        :param quota_user: An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
        :type quota_user: str
        :param upload_type: Upload protocol for media (e.g. \"media\", \"multipart\", \"resumable\").
        :type upload_type: str
        :param user_ip: Deprecated. Please use quotaUser instead.
        :type user_ip: str
        :param if_metageneration_match: Makes the return of the bucket metadata conditional on whether the bucket's current metageneration matches the given value.
        :type if_metageneration_match: str
        :param if_metageneration_not_match: Makes the return of the bucket metadata conditional on whether the bucket's current metageneration does not match the given value.
        :type if_metageneration_not_match: str
        :param predefined_acl: Apply a predefined set of access controls to this bucket.
        :type predefined_acl: str
        :param predefined_default_object_acl: Apply a predefined set of default object access controls to this bucket.
        :type predefined_default_object_acl: str
        :param projection: Set of properties to return. Defaults to full.
        :type projection: str
        :param user_project: The project to be billed for this request. Required for Requester Pays buckets.
        :type user_project: str
        :param bucket2:
        :type bucket2: Bucket
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._storage_buckets_update_serialize(
            bucket=bucket,
            alt=alt,
            fields=fields,
            key=key,
            oauth_token=oauth_token,
            pretty_print=pretty_print,
            quota_user=quota_user,
            upload_type=upload_type,
            user_ip=user_ip,
            if_metageneration_match=if_metageneration_match,
            if_metageneration_not_match=if_metageneration_not_match,
            predefined_acl=predefined_acl,
            predefined_default_object_acl=predefined_default_object_acl,
            projection=projection,
            user_project=user_project,
            bucket2=bucket2,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Bucket",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def storage_buckets_update_with_http_info(
        self,
        bucket: Annotated[StrictStr, Field(description="Name of a bucket.")],
        alt: Annotated[Optional[StrictStr], Field(description="Data format for the response.")] = None,
        fields: Annotated[Optional[StrictStr], Field(description="Selector specifying which fields to include in a partial response.")] = None,
        key: Annotated[Optional[StrictStr], Field(description="API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.")] = None,
        oauth_token: Annotated[Optional[StrictStr], Field(description="OAuth 2.0 token for the current user.")] = None,
        pretty_print: Annotated[Optional[StrictBool], Field(description="Returns response with indentations and line breaks.")] = None,
        quota_user: Annotated[Optional[StrictStr], Field(description="An opaque string that represents a user for quota purposes. Must not exceed 40 characters.")] = None,
        upload_type: Annotated[Optional[StrictStr], Field(description="Upload protocol for media (e.g. \"media\", \"multipart\", \"resumable\").")] = None,
        user_ip: Annotated[Optional[StrictStr], Field(description="Deprecated. Please use quotaUser instead.")] = None,
        if_metageneration_match: Annotated[Optional[StrictStr], Field(description="Makes the return of the bucket metadata conditional on whether the bucket's current metageneration matches the given value.")] = None,
        if_metageneration_not_match: Annotated[Optional[StrictStr], Field(description="Makes the return of the bucket metadata conditional on whether the bucket's current metageneration does not match the given value.")] = None,
        predefined_acl: Annotated[Optional[StrictStr], Field(description="Apply a predefined set of access controls to this bucket.")] = None,
        predefined_default_object_acl: Annotated[Optional[StrictStr], Field(description="Apply a predefined set of default object access controls to this bucket.")] = None,
        projection: Annotated[Optional[StrictStr], Field(description="Set of properties to return. Defaults to full.")] = None,
        user_project: Annotated[Optional[StrictStr], Field(description="The project to be billed for this request. Required for Requester Pays buckets.")] = None,
        bucket2: Optional[Bucket] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[Bucket]:
        """storage_buckets_update

        Updates a bucket. Changes to the bucket will be readable immediately after writing, but configuration changes may take time to propagate.

        :param bucket: Name of a bucket. (required)
        :type bucket: str
        :param alt: Data format for the response.
        :type alt: str
        :param fields: Selector specifying which fields to include in a partial response.
        :type fields: str
        :param key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
        :type key: str
        :param oauth_token: OAuth 2.0 token for the current user.
        :type oauth_token: str
        :param pretty_print: Returns response with indentations and line breaks.
        :type pretty_print: bool
        :param quota_user: An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
        :type quota_user: str
        :param upload_type: Upload protocol for media (e.g. \"media\", \"multipart\", \"resumable\").
        :type upload_type: str
        :param user_ip: Deprecated. Please use quotaUser instead.
        :type user_ip: str
        :param if_metageneration_match: Makes the return of the bucket metadata conditional on whether the bucket's current metageneration matches the given value.
        :type if_metageneration_match: str
        :param if_metageneration_not_match: Makes the return of the bucket metadata conditional on whether the bucket's current metageneration does not match the given value.
        :type if_metageneration_not_match: str
        :param predefined_acl: Apply a predefined set of access controls to this bucket.
        :type predefined_acl: str
        :param predefined_default_object_acl: Apply a predefined set of default object access controls to this bucket.
        :type predefined_default_object_acl: str
        :param projection: Set of properties to return. Defaults to full.
        :type projection: str
        :param user_project: The project to be billed for this request. Required for Requester Pays buckets.
        :type user_project: str
        :param bucket2:
        :type bucket2: Bucket
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._storage_buckets_update_serialize(
            bucket=bucket,
            alt=alt,
            fields=fields,
            key=key,
            oauth_token=oauth_token,
            pretty_print=pretty_print,
            quota_user=quota_user,
            upload_type=upload_type,
            user_ip=user_ip,
            if_metageneration_match=if_metageneration_match,
            if_metageneration_not_match=if_metageneration_not_match,
            predefined_acl=predefined_acl,
            predefined_default_object_acl=predefined_default_object_acl,
            projection=projection,
            user_project=user_project,
            bucket2=bucket2,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Bucket",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def storage_buckets_update_without_preload_content(
        self,
        bucket: Annotated[StrictStr, Field(description="Name of a bucket.")],
        alt: Annotated[Optional[StrictStr], Field(description="Data format for the response.")] = None,
        fields: Annotated[Optional[StrictStr], Field(description="Selector specifying which fields to include in a partial response.")] = None,
        key: Annotated[Optional[StrictStr], Field(description="API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.")] = None,
        oauth_token: Annotated[Optional[StrictStr], Field(description="OAuth 2.0 token for the current user.")] = None,
        pretty_print: Annotated[Optional[StrictBool], Field(description="Returns response with indentations and line breaks.")] = None,
        quota_user: Annotated[Optional[StrictStr], Field(description="An opaque string that represents a user for quota purposes. Must not exceed 40 characters.")] = None,
        upload_type: Annotated[Optional[StrictStr], Field(description="Upload protocol for media (e.g. \"media\", \"multipart\", \"resumable\").")] = None,
        user_ip: Annotated[Optional[StrictStr], Field(description="Deprecated. Please use quotaUser instead.")] = None,
        if_metageneration_match: Annotated[Optional[StrictStr], Field(description="Makes the return of the bucket metadata conditional on whether the bucket's current metageneration matches the given value.")] = None,
        if_metageneration_not_match: Annotated[Optional[StrictStr], Field(description="Makes the return of the bucket metadata conditional on whether the bucket's current metageneration does not match the given value.")] = None,
        predefined_acl: Annotated[Optional[StrictStr], Field(description="Apply a predefined set of access controls to this bucket.")] = None,
        predefined_default_object_acl: Annotated[Optional[StrictStr], Field(description="Apply a predefined set of default object access controls to this bucket.")] = None,
        projection: Annotated[Optional[StrictStr], Field(description="Set of properties to return. Defaults to full.")] = None,
        user_project: Annotated[Optional[StrictStr], Field(description="The project to be billed for this request. Required for Requester Pays buckets.")] = None,
        bucket2: Optional[Bucket] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """storage_buckets_update

        Updates a bucket. Changes to the bucket will be readable immediately after writing, but configuration changes may take time to propagate.

        :param bucket: Name of a bucket. (required)
        :type bucket: str
        :param alt: Data format for the response.
        :type alt: str
        :param fields: Selector specifying which fields to include in a partial response.
        :type fields: str
        :param key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
        :type key: str
        :param oauth_token: OAuth 2.0 token for the current user.
        :type oauth_token: str
        :param pretty_print: Returns response with indentations and line breaks.
        :type pretty_print: bool
        :param quota_user: An opaque string that represents a user for quota purposes. Must not exceed 40 characters.
        :type quota_user: str
        :param upload_type: Upload protocol for media (e.g. \"media\", \"multipart\", \"resumable\").
        :type upload_type: str
        :param user_ip: Deprecated. Please use quotaUser instead.
        :type user_ip: str
        :param if_metageneration_match: Makes the return of the bucket metadata conditional on whether the bucket's current metageneration matches the given value.
        :type if_metageneration_match: str
        :param if_metageneration_not_match: Makes the return of the bucket metadata conditional on whether the bucket's current metageneration does not match the given value.
        :type if_metageneration_not_match: str
        :param predefined_acl: Apply a predefined set of access controls to this bucket.
        :type predefined_acl: str
        :param predefined_default_object_acl: Apply a predefined set of default object access controls to this bucket.
        :type predefined_default_object_acl: str
        :param projection: Set of properties to return. Defaults to full.
        :type projection: str
        :param user_project: The project to be billed for this request. Required for Requester Pays buckets.
        :type user_project: str
        :param bucket2:
        :type bucket2: Bucket
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._storage_buckets_update_serialize(
            bucket=bucket,
            alt=alt,
            fields=fields,
            key=key,
            oauth_token=oauth_token,
            pretty_print=pretty_print,
            quota_user=quota_user,
            upload_type=upload_type,
            user_ip=user_ip,
            if_metageneration_match=if_metageneration_match,
            if_metageneration_not_match=if_metageneration_not_match,
            predefined_acl=predefined_acl,
            predefined_default_object_acl=predefined_default_object_acl,
            projection=projection,
            user_project=user_project,
            bucket2=bucket2,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Bucket",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _storage_buckets_update_serialize(
        self,
        bucket,
        alt,
        fields,
        key,
        oauth_token,
        pretty_print,
        quota_user,
        upload_type,
        user_ip,
        if_metageneration_match,
        if_metageneration_not_match,
        predefined_acl,
        predefined_default_object_acl,
        projection,
        user_project,
        bucket2,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if bucket is not None:
            _path_params['bucket'] = bucket
        # process the query parameters
        if alt is not None:
            
            _query_params.append(('alt', alt))
            
        if fields is not None:
            
            _query_params.append(('fields', fields))
            
        if key is not None:
            
            _query_params.append(('key', key))
            
        if oauth_token is not None:
            
            _query_params.append(('oauth_token', oauth_token))
            
        if pretty_print is not None:
            
            _query_params.append(('prettyPrint', pretty_print))
            
        if quota_user is not None:
            
            _query_params.append(('quotaUser', quota_user))
            
        if upload_type is not None:
            
            _query_params.append(('uploadType', upload_type))
            
        if user_ip is not None:
            
            _query_params.append(('userIp', user_ip))
            
        if if_metageneration_match is not None:
            
            _query_params.append(('ifMetagenerationMatch', if_metageneration_match))
            
        if if_metageneration_not_match is not None:
            
            _query_params.append(('ifMetagenerationNotMatch', if_metageneration_not_match))
            
        if predefined_acl is not None:
            
            _query_params.append(('predefinedAcl', predefined_acl))
            
        if predefined_default_object_acl is not None:
            
            _query_params.append(('predefinedDefaultObjectAcl', predefined_default_object_acl))
            
        if projection is not None:
            
            _query_params.append(('projection', projection))
            
        if user_project is not None:
            
            _query_params.append(('userProject', user_project))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if bucket2 is not None:
            _body_params = bucket2


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'Oauth2c', 
            'Oauth2'
        ]

        return self.api_client.param_serialize(
            method='PUT',
            resource_path='/b/{bucket}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )



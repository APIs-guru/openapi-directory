# coding: utf-8

"""
    Cloud Storage JSON API

    Stores and retrieves potentially large, immutable data objects.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class BucketLifecycleRuleInnerCondition(BaseModel):
    """
    The condition(s) under which the action will be taken.
    """ # noqa: E501
    age: Optional[StrictInt] = Field(default=None, description="Age of an object (in days). This condition is satisfied when an object reaches the specified age.")
    created_before: Optional[date] = Field(default=None, description="A date in RFC 3339 format with only the date part (for instance, \"2013-01-15\"). This condition is satisfied when an object is created before midnight of the specified date in UTC.", alias="createdBefore")
    custom_time_before: Optional[date] = Field(default=None, description="A date in RFC 3339 format with only the date part (for instance, \"2013-01-15\"). This condition is satisfied when the custom time on an object is before this date in UTC.", alias="customTimeBefore")
    days_since_custom_time: Optional[StrictInt] = Field(default=None, description="Number of days elapsed since the user-specified timestamp set on an object. The condition is satisfied if the days elapsed is at least this number. If no custom timestamp is specified on an object, the condition does not apply.", alias="daysSinceCustomTime")
    days_since_noncurrent_time: Optional[StrictInt] = Field(default=None, description="Number of days elapsed since the noncurrent timestamp of an object. The condition is satisfied if the days elapsed is at least this number. This condition is relevant only for versioned objects. The value of the field must be a nonnegative integer. If it's zero, the object version will become eligible for Lifecycle action as soon as it becomes noncurrent.", alias="daysSinceNoncurrentTime")
    is_live: Optional[StrictBool] = Field(default=None, description="Relevant only for versioned objects. If the value is true, this condition matches live objects; if the value is false, it matches archived objects.", alias="isLive")
    matches_pattern: Optional[StrictStr] = Field(default=None, description="A regular expression that satisfies the RE2 syntax. This condition is satisfied when the name of the object matches the RE2 pattern. Note: This feature is currently in the \"Early Access\" launch stage and is only available to a whitelisted set of users; that means that this feature may be changed in backward-incompatible ways and that it is not guaranteed to be released.", alias="matchesPattern")
    matches_prefix: Optional[List[StrictStr]] = Field(default=None, description="List of object name prefixes. This condition will be satisfied when at least one of the prefixes exactly matches the beginning of the object name.", alias="matchesPrefix")
    matches_storage_class: Optional[List[StrictStr]] = Field(default=None, description="Objects having any of the storage classes specified by this condition will be matched. Values include MULTI_REGIONAL, REGIONAL, NEARLINE, COLDLINE, ARCHIVE, STANDARD, and DURABLE_REDUCED_AVAILABILITY.", alias="matchesStorageClass")
    matches_suffix: Optional[List[StrictStr]] = Field(default=None, description="List of object name suffixes. This condition will be satisfied when at least one of the suffixes exactly matches the end of the object name.", alias="matchesSuffix")
    noncurrent_time_before: Optional[date] = Field(default=None, description="A date in RFC 3339 format with only the date part (for instance, \"2013-01-15\"). This condition is satisfied when the noncurrent time on an object is before this date in UTC. This condition is relevant only for versioned objects.", alias="noncurrentTimeBefore")
    num_newer_versions: Optional[StrictInt] = Field(default=None, description="Relevant only for versioned objects. If the value is N, this condition is satisfied when there are at least N versions (including the live version) newer than this version of the object.", alias="numNewerVersions")
    __properties: ClassVar[List[str]] = ["age", "createdBefore", "customTimeBefore", "daysSinceCustomTime", "daysSinceNoncurrentTime", "isLive", "matchesPattern", "matchesPrefix", "matchesStorageClass", "matchesSuffix", "noncurrentTimeBefore", "numNewerVersions"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of BucketLifecycleRuleInnerCondition from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of BucketLifecycleRuleInnerCondition from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "age": obj.get("age"),
            "createdBefore": obj.get("createdBefore"),
            "customTimeBefore": obj.get("customTimeBefore"),
            "daysSinceCustomTime": obj.get("daysSinceCustomTime"),
            "daysSinceNoncurrentTime": obj.get("daysSinceNoncurrentTime"),
            "isLive": obj.get("isLive"),
            "matchesPattern": obj.get("matchesPattern"),
            "matchesPrefix": obj.get("matchesPrefix"),
            "matchesStorageClass": obj.get("matchesStorageClass"),
            "matchesSuffix": obj.get("matchesSuffix"),
            "noncurrentTimeBefore": obj.get("noncurrentTimeBefore"),
            "numNewerVersions": obj.get("numNewerVersions")
        })
        return _obj



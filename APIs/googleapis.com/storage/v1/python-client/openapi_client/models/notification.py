# coding: utf-8

"""
    Cloud Storage JSON API

    Stores and retrieves potentially large, immutable data objects.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class Notification(BaseModel):
    """
    A subscription to receive Google PubSub notifications.
    """ # noqa: E501
    custom_attributes: Optional[Dict[str, StrictStr]] = Field(default=None, description="An optional list of additional attributes to attach to each Cloud PubSub message published for this notification subscription.")
    etag: Optional[StrictStr] = Field(default=None, description="HTTP 1.1 Entity tag for this subscription notification.")
    event_types: Optional[List[StrictStr]] = Field(default=None, description="If present, only send notifications about listed event types. If empty, sent notifications for all event types.")
    id: Optional[StrictStr] = Field(default=None, description="The ID of the notification.")
    kind: Optional[StrictStr] = Field(default='storage#notification', description="The kind of item this is. For notifications, this is always storage#notification.")
    object_name_prefix: Optional[StrictStr] = Field(default=None, description="If present, only apply this notification configuration to object names that begin with this prefix.")
    payload_format: Optional[StrictStr] = Field(default='JSON_API_V1', description="The desired content of the Payload.")
    self_link: Optional[StrictStr] = Field(default=None, description="The canonical URL of this notification.", alias="selfLink")
    topic: Optional[StrictStr] = Field(default=None, description="The Cloud PubSub topic to which this subscription publishes. Formatted as: '//pubsub.googleapis.com/projects/{project-identifier}/topics/{my-topic}'")
    __properties: ClassVar[List[str]] = ["custom_attributes", "etag", "event_types", "id", "kind", "object_name_prefix", "payload_format", "selfLink", "topic"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Notification from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Notification from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "custom_attributes": obj.get("custom_attributes"),
            "etag": obj.get("etag"),
            "event_types": obj.get("event_types"),
            "id": obj.get("id"),
            "kind": obj.get("kind") if obj.get("kind") is not None else 'storage#notification',
            "object_name_prefix": obj.get("object_name_prefix"),
            "payload_format": obj.get("payload_format") if obj.get("payload_format") is not None else 'JSON_API_V1',
            "selfLink": obj.get("selfLink"),
            "topic": obj.get("topic")
        })
        return _obj



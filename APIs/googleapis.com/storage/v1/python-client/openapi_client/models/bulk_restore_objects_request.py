# coding: utf-8

"""
    Cloud Storage JSON API

    Stores and retrieves potentially large, immutable data objects.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class BulkRestoreObjectsRequest(BaseModel):
    """
    A bulk restore objects request.
    """ # noqa: E501
    allow_overwrite: Optional[StrictBool] = Field(default=None, description="If false (default), the restore will not overwrite live objects with the same name at the destination. This means some deleted objects may be skipped. If true, live objects will be overwritten resulting in a noncurrent object (if versioning is enabled). If versioning is not enabled, overwriting the object will result in a soft-deleted object. In either case, if a noncurrent object already exists with the same name, a live version can be written without issue.", alias="allowOverwrite")
    copy_source_acl: Optional[StrictBool] = Field(default=None, description="If true, copies the source object's ACL; otherwise, uses the bucket's default object ACL. The default is false.", alias="copySourceAcl")
    match_globs: Optional[List[StrictStr]] = Field(default=None, description="Restores only the objects matching any of the specified glob(s). If this parameter is not specified, all objects will be restored within the specified time range.", alias="matchGlobs")
    soft_deleted_after_time: Optional[datetime] = Field(default=None, description="Restores only the objects that were soft-deleted after this time.", alias="softDeletedAfterTime")
    soft_deleted_before_time: Optional[datetime] = Field(default=None, description="Restores only the objects that were soft-deleted before this time.", alias="softDeletedBeforeTime")
    __properties: ClassVar[List[str]] = ["allowOverwrite", "copySourceAcl", "matchGlobs", "softDeletedAfterTime", "softDeletedBeforeTime"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of BulkRestoreObjectsRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of BulkRestoreObjectsRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "allowOverwrite": obj.get("allowOverwrite"),
            "copySourceAcl": obj.get("copySourceAcl"),
            "matchGlobs": obj.get("matchGlobs"),
            "softDeletedAfterTime": obj.get("softDeletedAfterTime"),
            "softDeletedBeforeTime": obj.get("softDeletedBeforeTime")
        })
        return _obj



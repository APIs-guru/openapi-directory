# coding: utf-8

"""
    Cloud Storage JSON API

    Stores and retrieves potentially large, immutable data objects.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.bucket_access_control_project_team import BucketAccessControlProjectTeam
from typing import Optional, Set
from typing_extensions import Self

class ObjectAccessControl(BaseModel):
    """
    An access-control entry.
    """ # noqa: E501
    bucket: Optional[StrictStr] = Field(default=None, description="The name of the bucket.")
    domain: Optional[StrictStr] = Field(default=None, description="The domain associated with the entity, if any.")
    email: Optional[StrictStr] = Field(default=None, description="The email address associated with the entity, if any.")
    entity: Optional[StrictStr] = Field(default=None, description="The entity holding the permission, in one of the following forms:  - user-userId  - user-email  - group-groupId  - group-email  - domain-domain  - project-team-projectId  - allUsers  - allAuthenticatedUsers Examples:  - The user liz@example.com would be user-liz@example.com.  - The group example@googlegroups.com would be group-example@googlegroups.com.  - To refer to all members of the Google Apps for Business domain example.com, the entity would be domain-example.com.")
    entity_id: Optional[StrictStr] = Field(default=None, description="The ID for the entity, if any.", alias="entityId")
    etag: Optional[StrictStr] = Field(default=None, description="HTTP 1.1 Entity tag for the access-control entry.")
    generation: Optional[StrictStr] = Field(default=None, description="The content generation of the object, if applied to an object.")
    id: Optional[StrictStr] = Field(default=None, description="The ID of the access-control entry.")
    kind: Optional[StrictStr] = Field(default='storage#objectAccessControl', description="The kind of item this is. For object access control entries, this is always storage#objectAccessControl.")
    object: Optional[StrictStr] = Field(default=None, description="The name of the object, if applied to an object.")
    project_team: Optional[BucketAccessControlProjectTeam] = Field(default=None, alias="projectTeam")
    role: Optional[StrictStr] = Field(default=None, description="The access permission for the entity.")
    self_link: Optional[StrictStr] = Field(default=None, description="The link to this access-control entry.", alias="selfLink")
    __properties: ClassVar[List[str]] = ["bucket", "domain", "email", "entity", "entityId", "etag", "generation", "id", "kind", "object", "projectTeam", "role", "selfLink"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ObjectAccessControl from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of project_team
        if self.project_team:
            _dict['projectTeam'] = self.project_team.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ObjectAccessControl from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "bucket": obj.get("bucket"),
            "domain": obj.get("domain"),
            "email": obj.get("email"),
            "entity": obj.get("entity"),
            "entityId": obj.get("entityId"),
            "etag": obj.get("etag"),
            "generation": obj.get("generation"),
            "id": obj.get("id"),
            "kind": obj.get("kind") if obj.get("kind") is not None else 'storage#objectAccessControl',
            "object": obj.get("object"),
            "projectTeam": BucketAccessControlProjectTeam.from_dict(obj["projectTeam"]) if obj.get("projectTeam") is not None else None,
            "role": obj.get("role"),
            "selfLink": obj.get("selfLink")
        })
        return _obj



# coding: utf-8

"""
    Cloud Storage JSON API

    Stores and retrieves potentially large, immutable data objects.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.folder_pending_rename_info import FolderPendingRenameInfo
from typing import Optional, Set
from typing_extensions import Self

class Folder(BaseModel):
    """
    A folder. Only available in buckets with hierarchical namespace enabled.
    """ # noqa: E501
    bucket: Optional[StrictStr] = Field(default=None, description="The name of the bucket containing this folder.")
    create_time: Optional[datetime] = Field(default=None, description="The creation time of the folder in RFC 3339 format.", alias="createTime")
    id: Optional[StrictStr] = Field(default=None, description="The ID of the folder, including the bucket name, folder name.")
    kind: Optional[StrictStr] = Field(default='storage#folder', description="The kind of item this is. For folders, this is always storage#folder.")
    metageneration: Optional[StrictStr] = Field(default=None, description="The version of the metadata for this folder. Used for preconditions and for detecting changes in metadata.")
    name: Optional[StrictStr] = Field(default=None, description="The name of the folder. Required if not specified by URL parameter.")
    pending_rename_info: Optional[FolderPendingRenameInfo] = Field(default=None, alias="pendingRenameInfo")
    self_link: Optional[StrictStr] = Field(default=None, description="The link to this folder.", alias="selfLink")
    update_time: Optional[datetime] = Field(default=None, description="The modification time of the folder metadata in RFC 3339 format.", alias="updateTime")
    __properties: ClassVar[List[str]] = ["bucket", "createTime", "id", "kind", "metageneration", "name", "pendingRenameInfo", "selfLink", "updateTime"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Folder from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of pending_rename_info
        if self.pending_rename_info:
            _dict['pendingRenameInfo'] = self.pending_rename_info.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Folder from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "bucket": obj.get("bucket"),
            "createTime": obj.get("createTime"),
            "id": obj.get("id"),
            "kind": obj.get("kind") if obj.get("kind") is not None else 'storage#folder',
            "metageneration": obj.get("metageneration"),
            "name": obj.get("name"),
            "pendingRenameInfo": FolderPendingRenameInfo.from_dict(obj["pendingRenameInfo"]) if obj.get("pendingRenameInfo") is not None else None,
            "selfLink": obj.get("selfLink"),
            "updateTime": obj.get("updateTime")
        })
        return _obj



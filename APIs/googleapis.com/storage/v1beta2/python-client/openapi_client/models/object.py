# coding: utf-8

"""
    Cloud Storage JSON API

    Lets you store and retrieve potentially-large, immutable data objects.

    The version of the OpenAPI document: v1beta2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.object_access_control import ObjectAccessControl
from openapi_client.models.object_owner import ObjectOwner
from typing import Optional, Set
from typing_extensions import Self

class Object(BaseModel):
    """
    An object.
    """ # noqa: E501
    acl: Optional[List[ObjectAccessControl]] = Field(default=None, description="Access controls on the object.")
    bucket: Optional[StrictStr] = Field(default=None, description="The bucket containing this object.")
    cache_control: Optional[StrictStr] = Field(default=None, description="Cache-Control directive for the object data.", alias="cacheControl")
    component_count: Optional[StrictInt] = Field(default=None, description="Number of underlying components that make up this object. Components are accumulated by compose operations and are limited to a count of 32.", alias="componentCount")
    content_disposition: Optional[StrictStr] = Field(default=None, description="Content-Disposition of the object data.", alias="contentDisposition")
    content_encoding: Optional[StrictStr] = Field(default=None, description="Content-Encoding of the object data.", alias="contentEncoding")
    content_language: Optional[StrictStr] = Field(default=None, description="Content-Language of the object data.", alias="contentLanguage")
    content_type: Optional[StrictStr] = Field(default=None, description="Content-Type of the object data.", alias="contentType")
    crc32c: Optional[StrictStr] = Field(default=None, description="CRC32c checksum, as described in RFC 4960, Appendix B; encoded using base64.")
    etag: Optional[StrictStr] = Field(default=None, description="HTTP 1.1 Entity tag for the object.")
    generation: Optional[StrictStr] = Field(default=None, description="The content generation of this object. Used for object versioning.")
    id: Optional[StrictStr] = Field(default=None, description="The ID of the object.")
    kind: Optional[StrictStr] = Field(default='storage#object', description="The kind of item this is. For objects, this is always storage#object.")
    md5_hash: Optional[StrictStr] = Field(default=None, description="MD5 hash of the data; encoded using base64.", alias="md5Hash")
    media_link: Optional[StrictStr] = Field(default=None, description="Media download link.", alias="mediaLink")
    metadata: Optional[Dict[str, StrictStr]] = Field(default=None, description="User-provided metadata, in key/value pairs.")
    metageneration: Optional[StrictStr] = Field(default=None, description="The generation of the metadata for this object at this generation. Used for metadata versioning. Has no meaning outside of the context of this generation.")
    name: Optional[StrictStr] = Field(default=None, description="The name of this object. Required if not specified by URL parameter.")
    owner: Optional[ObjectOwner] = None
    self_link: Optional[StrictStr] = Field(default=None, description="The link to this object.", alias="selfLink")
    size: Optional[StrictStr] = Field(default=None, description="Content-Length of the data in bytes.")
    storage_class: Optional[StrictStr] = Field(default=None, description="Storage class of the object.", alias="storageClass")
    time_deleted: Optional[datetime] = Field(default=None, description="Deletion time of the object in RFC 3339 format. Will be returned if and only if this version of the object has been deleted.", alias="timeDeleted")
    updated: Optional[datetime] = Field(default=None, description="Modification time of the object metadata in RFC 3339 format.")
    __properties: ClassVar[List[str]] = ["acl", "bucket", "cacheControl", "componentCount", "contentDisposition", "contentEncoding", "contentLanguage", "contentType", "crc32c", "etag", "generation", "id", "kind", "md5Hash", "mediaLink", "metadata", "metageneration", "name", "owner", "selfLink", "size", "storageClass", "timeDeleted", "updated"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Object from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in acl (list)
        _items = []
        if self.acl:
            for _item_acl in self.acl:
                if _item_acl:
                    _items.append(_item_acl.to_dict())
            _dict['acl'] = _items
        # override the default output from pydantic by calling `to_dict()` of owner
        if self.owner:
            _dict['owner'] = self.owner.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Object from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "acl": [ObjectAccessControl.from_dict(_item) for _item in obj["acl"]] if obj.get("acl") is not None else None,
            "bucket": obj.get("bucket"),
            "cacheControl": obj.get("cacheControl"),
            "componentCount": obj.get("componentCount"),
            "contentDisposition": obj.get("contentDisposition"),
            "contentEncoding": obj.get("contentEncoding"),
            "contentLanguage": obj.get("contentLanguage"),
            "contentType": obj.get("contentType"),
            "crc32c": obj.get("crc32c"),
            "etag": obj.get("etag"),
            "generation": obj.get("generation"),
            "id": obj.get("id"),
            "kind": obj.get("kind") if obj.get("kind") is not None else 'storage#object',
            "md5Hash": obj.get("md5Hash"),
            "mediaLink": obj.get("mediaLink"),
            "metadata": obj.get("metadata"),
            "metageneration": obj.get("metageneration"),
            "name": obj.get("name"),
            "owner": ObjectOwner.from_dict(obj["owner"]) if obj.get("owner") is not None else None,
            "selfLink": obj.get("selfLink"),
            "size": obj.get("size"),
            "storageClass": obj.get("storageClass"),
            "timeDeleted": obj.get("timeDeleted"),
            "updated": obj.get("updated")
        })
        return _obj



# coding: utf-8

"""
    Cloud Billing Budget API

    The Cloud Billing Budget API stores Cloud Billing budgets, which define a budget plan and the rules to execute as spend is tracked against that plan.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_cloud_billing_budgets_v1_budget_amount import GoogleCloudBillingBudgetsV1BudgetAmount
from openapi_client.models.google_cloud_billing_budgets_v1_filter import GoogleCloudBillingBudgetsV1Filter
from openapi_client.models.google_cloud_billing_budgets_v1_notifications_rule import GoogleCloudBillingBudgetsV1NotificationsRule
from openapi_client.models.google_cloud_billing_budgets_v1_threshold_rule import GoogleCloudBillingBudgetsV1ThresholdRule
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudBillingBudgetsV1Budget(BaseModel):
    """
    A budget is a plan that describes what you expect to spend on Cloud projects, plus the rules to execute as spend is tracked against that plan, (for example, send an alert when 90% of the target spend is met). The budget time period is configurable, with options such as month (default), quarter, year, or custom time period.
    """ # noqa: E501
    amount: Optional[GoogleCloudBillingBudgetsV1BudgetAmount] = None
    budget_filter: Optional[GoogleCloudBillingBudgetsV1Filter] = Field(default=None, alias="budgetFilter")
    display_name: Optional[StrictStr] = Field(default=None, description="User data for display name in UI. The name must be less than or equal to 60 characters.", alias="displayName")
    etag: Optional[StrictStr] = Field(default=None, description="Optional. Etag to validate that the object is unchanged for a read-modify-write operation. An empty etag causes an update to overwrite other changes.")
    name: Optional[StrictStr] = Field(default=None, description="Output only. Resource name of the budget. The resource name implies the scope of a budget. Values are of the form `billingAccounts/{billingAccountId}/budgets/{budgetId}`.")
    notifications_rule: Optional[GoogleCloudBillingBudgetsV1NotificationsRule] = Field(default=None, alias="notificationsRule")
    ownership_scope: Optional[StrictStr] = Field(default=None, alias="ownershipScope")
    threshold_rules: Optional[List[GoogleCloudBillingBudgetsV1ThresholdRule]] = Field(default=None, description="Optional. Rules that trigger alerts (notifications of thresholds being crossed) when spend exceeds the specified percentages of the budget. Optional for `pubsubTopic` notifications. Required if using email notifications.", alias="thresholdRules")
    __properties: ClassVar[List[str]] = ["amount", "budgetFilter", "displayName", "etag", "name", "notificationsRule", "ownershipScope", "thresholdRules"]

    @field_validator('ownership_scope')
    def ownership_scope_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['OWNERSHIP_SCOPE_UNSPECIFIED', 'ALL_USERS', 'BILLING_ACCOUNT']):
            raise ValueError("must be one of enum values ('OWNERSHIP_SCOPE_UNSPECIFIED', 'ALL_USERS', 'BILLING_ACCOUNT')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudBillingBudgetsV1Budget from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "name",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of amount
        if self.amount:
            _dict['amount'] = self.amount.to_dict()
        # override the default output from pydantic by calling `to_dict()` of budget_filter
        if self.budget_filter:
            _dict['budgetFilter'] = self.budget_filter.to_dict()
        # override the default output from pydantic by calling `to_dict()` of notifications_rule
        if self.notifications_rule:
            _dict['notificationsRule'] = self.notifications_rule.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in threshold_rules (list)
        _items = []
        if self.threshold_rules:
            for _item_threshold_rules in self.threshold_rules:
                if _item_threshold_rules:
                    _items.append(_item_threshold_rules.to_dict())
            _dict['thresholdRules'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudBillingBudgetsV1Budget from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "amount": GoogleCloudBillingBudgetsV1BudgetAmount.from_dict(obj["amount"]) if obj.get("amount") is not None else None,
            "budgetFilter": GoogleCloudBillingBudgetsV1Filter.from_dict(obj["budgetFilter"]) if obj.get("budgetFilter") is not None else None,
            "displayName": obj.get("displayName"),
            "etag": obj.get("etag"),
            "name": obj.get("name"),
            "notificationsRule": GoogleCloudBillingBudgetsV1NotificationsRule.from_dict(obj["notificationsRule"]) if obj.get("notificationsRule") is not None else None,
            "ownershipScope": obj.get("ownershipScope"),
            "thresholdRules": [GoogleCloudBillingBudgetsV1ThresholdRule.from_dict(_item) for _item in obj["thresholdRules"]] if obj.get("thresholdRules") is not None else None
        })
        return _obj



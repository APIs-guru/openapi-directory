# coding: utf-8

"""
    Cloud Billing Budget API

    The Cloud Billing Budget API stores Cloud Billing budgets, which define a budget plan and the rules to execute as spend is tracked against that plan.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_cloud_billing_budgets_v1_budget import GoogleCloudBillingBudgetsV1Budget
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudBillingBudgetsV1ListBudgetsResponse(BaseModel):
    """
    Response for ListBudgets
    """ # noqa: E501
    budgets: Optional[List[GoogleCloudBillingBudgetsV1Budget]] = Field(default=None, description="List of the budgets owned by the requested billing account.")
    next_page_token: Optional[StrictStr] = Field(default=None, description="If not empty, indicates that there may be more budgets that match the request; this value should be passed in a new `ListBudgetsRequest`.", alias="nextPageToken")
    __properties: ClassVar[List[str]] = ["budgets", "nextPageToken"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudBillingBudgetsV1ListBudgetsResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in budgets (list)
        _items = []
        if self.budgets:
            for _item_budgets in self.budgets:
                if _item_budgets:
                    _items.append(_item_budgets.to_dict())
            _dict['budgets'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudBillingBudgetsV1ListBudgetsResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "budgets": [GoogleCloudBillingBudgetsV1Budget.from_dict(_item) for _item in obj["budgets"]] if obj.get("budgets") is not None else None,
            "nextPageToken": obj.get("nextPageToken")
        })
        return _obj



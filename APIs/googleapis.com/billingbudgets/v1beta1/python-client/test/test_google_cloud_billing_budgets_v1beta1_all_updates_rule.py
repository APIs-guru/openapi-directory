# coding: utf-8

"""
    Cloud Billing Budget API

    The Cloud Billing Budget API stores Cloud Billing budgets, which define a budget plan and the rules to execute as spend is tracked against that plan.

    The version of the OpenAPI document: v1beta1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.google_cloud_billing_budgets_v1beta1_all_updates_rule import GoogleCloudBillingBudgetsV1beta1AllUpdatesRule

class TestGoogleCloudBillingBudgetsV1beta1AllUpdatesRule(unittest.TestCase):
    """GoogleCloudBillingBudgetsV1beta1AllUpdatesRule unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> GoogleCloudBillingBudgetsV1beta1AllUpdatesRule:
        """Test GoogleCloudBillingBudgetsV1beta1AllUpdatesRule
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `GoogleCloudBillingBudgetsV1beta1AllUpdatesRule`
        """
        model = GoogleCloudBillingBudgetsV1beta1AllUpdatesRule()
        if include_optional:
            return GoogleCloudBillingBudgetsV1beta1AllUpdatesRule(
                disable_default_iam_recipients = True,
                enable_project_level_recipients = True,
                monitoring_notification_channels = [
                    ''
                    ],
                pubsub_topic = '',
                schema_version = ''
            )
        else:
            return GoogleCloudBillingBudgetsV1beta1AllUpdatesRule(
        )
        """

    def testGoogleCloudBillingBudgetsV1beta1AllUpdatesRule(self):
        """Test GoogleCloudBillingBudgetsV1beta1AllUpdatesRule"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

# coding: utf-8

"""
    Cloud Billing Budget API

    The Cloud Billing Budget API stores Cloud Billing budgets, which define a budget plan and the rules to execute as spend is tracked against that plan.

    The version of the OpenAPI document: v1beta1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.google_cloud_billing_budgets_v1beta1_filter import GoogleCloudBillingBudgetsV1beta1Filter

class TestGoogleCloudBillingBudgetsV1beta1Filter(unittest.TestCase):
    """GoogleCloudBillingBudgetsV1beta1Filter unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> GoogleCloudBillingBudgetsV1beta1Filter:
        """Test GoogleCloudBillingBudgetsV1beta1Filter
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `GoogleCloudBillingBudgetsV1beta1Filter`
        """
        model = GoogleCloudBillingBudgetsV1beta1Filter()
        if include_optional:
            return GoogleCloudBillingBudgetsV1beta1Filter(
                calendar_period = 'CALENDAR_PERIOD_UNSPECIFIED',
                credit_types = [
                    ''
                    ],
                credit_types_treatment = 'CREDIT_TYPES_TREATMENT_UNSPECIFIED',
                custom_period = openapi_client.models.google_cloud_billing_budgets_v1beta1_custom_period.GoogleCloudBillingBudgetsV1beta1CustomPeriod(
                    end_date = openapi_client.models.google_type_date.GoogleTypeDate(
                        day = 56, 
                        month = 56, 
                        year = 56, ), 
                    start_date = openapi_client.models.google_type_date.GoogleTypeDate(
                        day = 56, 
                        month = 56, 
                        year = 56, ), ),
                labels = {
                    'key' : [
                        null
                        ]
                    },
                projects = [
                    ''
                    ],
                resource_ancestors = [
                    ''
                    ],
                services = [
                    ''
                    ],
                subaccounts = [
                    ''
                    ]
            )
        else:
            return GoogleCloudBillingBudgetsV1beta1Filter(
        )
        """

    def testGoogleCloudBillingBudgetsV1beta1Filter(self):
        """Test GoogleCloudBillingBudgetsV1beta1Filter"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

# coding: utf-8

"""
    Identity and Access Management (IAM) API

    Manages identity and access control for Google Cloud Platform resources, including the creation of service accounts, which you can use to authenticate to Google and make API calls. 

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class Permission(BaseModel):
    """
    A permission which can be included by a role.
    """ # noqa: E501
    api_disabled: Optional[StrictBool] = Field(default=None, description="The service API associated with the permission is not enabled.", alias="apiDisabled")
    custom_roles_support_level: Optional[StrictStr] = Field(default=None, description="The current custom role support level.", alias="customRolesSupportLevel")
    description: Optional[StrictStr] = Field(default=None, description="A brief description of what this Permission is used for. This permission can ONLY be used in predefined roles.")
    name: Optional[StrictStr] = Field(default=None, description="The name of this Permission.")
    only_in_predefined_roles: Optional[StrictBool] = Field(default=None, alias="onlyInPredefinedRoles")
    primary_permission: Optional[StrictStr] = Field(default=None, description="The preferred name for this permission. If present, then this permission is an alias of, and equivalent to, the listed primary_permission.", alias="primaryPermission")
    stage: Optional[StrictStr] = Field(default=None, description="The current launch stage of the permission.")
    title: Optional[StrictStr] = Field(default=None, description="The title of this Permission.")
    __properties: ClassVar[List[str]] = ["apiDisabled", "customRolesSupportLevel", "description", "name", "onlyInPredefinedRoles", "primaryPermission", "stage", "title"]

    @field_validator('custom_roles_support_level')
    def custom_roles_support_level_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['SUPPORTED', 'TESTING', 'NOT_SUPPORTED']):
            raise ValueError("must be one of enum values ('SUPPORTED', 'TESTING', 'NOT_SUPPORTED')")
        return value

    @field_validator('stage')
    def stage_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['ALPHA', 'BETA', 'GA', 'DEPRECATED']):
            raise ValueError("must be one of enum values ('ALPHA', 'BETA', 'GA', 'DEPRECATED')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Permission from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Permission from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "apiDisabled": obj.get("apiDisabled"),
            "customRolesSupportLevel": obj.get("customRolesSupportLevel"),
            "description": obj.get("description"),
            "name": obj.get("name"),
            "onlyInPredefinedRoles": obj.get("onlyInPredefinedRoles"),
            "primaryPermission": obj.get("primaryPermission"),
            "stage": obj.get("stage"),
            "title": obj.get("title")
        })
        return _obj



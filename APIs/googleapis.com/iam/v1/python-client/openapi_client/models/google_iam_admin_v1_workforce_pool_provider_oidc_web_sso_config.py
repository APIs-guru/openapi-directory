# coding: utf-8

"""
    Identity and Access Management (IAM) API

    Manages identity and access control for Google Cloud Platform resources, including the creation of service accounts, which you can use to authenticate to Google and make API calls. 

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class GoogleIamAdminV1WorkforcePoolProviderOidcWebSsoConfig(BaseModel):
    """
    Configuration for web single sign-on for the OIDC provider.
    """ # noqa: E501
    additional_scopes: Optional[List[StrictStr]] = Field(default=None, description="Additional scopes to request for in the OIDC authentication request on top of scopes requested by default. By default, the `openid`, `profile` and `email` scopes that are supported by the identity provider are requested. Each additional scope may be at most 256 characters. A maximum of 10 additional scopes may be configured.", alias="additionalScopes")
    assertion_claims_behavior: Optional[StrictStr] = Field(default=None, description="Required. The behavior for how OIDC Claims are included in the `assertion` object used for attribute mapping and attribute condition.", alias="assertionClaimsBehavior")
    response_type: Optional[StrictStr] = Field(default=None, description="Required. The Response Type to request for in the OIDC Authorization Request for web sign-in. The `CODE` Response Type is recommended to avoid the Implicit Flow, for security reasons.", alias="responseType")
    __properties: ClassVar[List[str]] = ["additionalScopes", "assertionClaimsBehavior", "responseType"]

    @field_validator('assertion_claims_behavior')
    def assertion_claims_behavior_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['ASSERTION_CLAIMS_BEHAVIOR_UNSPECIFIED', 'MERGE_USER_INFO_OVER_ID_TOKEN_CLAIMS', 'ONLY_ID_TOKEN_CLAIMS']):
            raise ValueError("must be one of enum values ('ASSERTION_CLAIMS_BEHAVIOR_UNSPECIFIED', 'MERGE_USER_INFO_OVER_ID_TOKEN_CLAIMS', 'ONLY_ID_TOKEN_CLAIMS')")
        return value

    @field_validator('response_type')
    def response_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['RESPONSE_TYPE_UNSPECIFIED', 'CODE', 'ID_TOKEN']):
            raise ValueError("must be one of enum values ('RESPONSE_TYPE_UNSPECIFIED', 'CODE', 'ID_TOKEN')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleIamAdminV1WorkforcePoolProviderOidcWebSsoConfig from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleIamAdminV1WorkforcePoolProviderOidcWebSsoConfig from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "additionalScopes": obj.get("additionalScopes"),
            "assertionClaimsBehavior": obj.get("assertionClaimsBehavior"),
            "responseType": obj.get("responseType")
        })
        return _obj



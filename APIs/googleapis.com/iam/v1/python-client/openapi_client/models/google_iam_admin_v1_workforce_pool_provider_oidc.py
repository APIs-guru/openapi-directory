# coding: utf-8

"""
    Identity and Access Management (IAM) API

    Manages identity and access control for Google Cloud Platform resources, including the creation of service accounts, which you can use to authenticate to Google and make API calls. 

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_iam_admin_v1_workforce_pool_provider_oidc_client_secret import GoogleIamAdminV1WorkforcePoolProviderOidcClientSecret
from openapi_client.models.google_iam_admin_v1_workforce_pool_provider_oidc_web_sso_config import GoogleIamAdminV1WorkforcePoolProviderOidcWebSsoConfig
from typing import Optional, Set
from typing_extensions import Self

class GoogleIamAdminV1WorkforcePoolProviderOidc(BaseModel):
    """
    Represents an OpenId Connect 1.0 identity provider.
    """ # noqa: E501
    client_id: Optional[StrictStr] = Field(default=None, description="Required. The client ID. Must match the audience claim of the JWT issued by the identity provider.", alias="clientId")
    client_secret: Optional[GoogleIamAdminV1WorkforcePoolProviderOidcClientSecret] = Field(default=None, alias="clientSecret")
    issuer_uri: Optional[StrictStr] = Field(default=None, description="Required. The OIDC issuer URI. Must be a valid URI using the 'https' scheme.", alias="issuerUri")
    jwks_json: Optional[StrictStr] = Field(default=None, description="OIDC JWKs in JSON String format. For details on the definition of a JWK, see https://tools.ietf.org/html/rfc7517. If not set, the `jwks_uri` from the discovery document(fetched from the .well-known path of the `issuer_uri`) will be used. Currently, RSA and EC asymmetric keys are supported. The JWK must use following format and include only the following fields: { \"keys\": [ { \"kty\": \"RSA/EC\", \"alg\": \"\", \"use\": \"sig\", \"kid\": \"\", \"n\": \"\", \"e\": \"\", \"x\": \"\", \"y\": \"\", \"crv\": \"\" } ] }", alias="jwksJson")
    web_sso_config: Optional[GoogleIamAdminV1WorkforcePoolProviderOidcWebSsoConfig] = Field(default=None, alias="webSsoConfig")
    __properties: ClassVar[List[str]] = ["clientId", "clientSecret", "issuerUri", "jwksJson", "webSsoConfig"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleIamAdminV1WorkforcePoolProviderOidc from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of client_secret
        if self.client_secret:
            _dict['clientSecret'] = self.client_secret.to_dict()
        # override the default output from pydantic by calling `to_dict()` of web_sso_config
        if self.web_sso_config:
            _dict['webSsoConfig'] = self.web_sso_config.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleIamAdminV1WorkforcePoolProviderOidc from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "clientId": obj.get("clientId"),
            "clientSecret": GoogleIamAdminV1WorkforcePoolProviderOidcClientSecret.from_dict(obj["clientSecret"]) if obj.get("clientSecret") is not None else None,
            "issuerUri": obj.get("issuerUri"),
            "jwksJson": obj.get("jwksJson"),
            "webSsoConfig": GoogleIamAdminV1WorkforcePoolProviderOidcWebSsoConfig.from_dict(obj["webSsoConfig"]) if obj.get("webSsoConfig") is not None else None
        })
        return _obj



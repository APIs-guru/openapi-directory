# coding: utf-8

"""
    Identity and Access Management (IAM) API

    Manages identity and access control for Google Cloud Platform resources, including the creation of service accounts, which you can use to authenticate to Google and make API calls. 

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictBytes, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class Role(BaseModel):
    """
    A role in the Identity and Access Management API.
    """ # noqa: E501
    deleted: Optional[StrictBool] = Field(default=None, description="The current deleted state of the role. This field is read only. It will be ignored in calls to CreateRole and UpdateRole.")
    description: Optional[StrictStr] = Field(default=None, description="Optional. A human-readable description for the role.")
    etag: Optional[Union[StrictBytes, StrictStr]] = Field(default=None, description="Used to perform a consistent read-modify-write.")
    included_permissions: Optional[List[StrictStr]] = Field(default=None, description="The names of the permissions this role grants when bound in an IAM policy.", alias="includedPermissions")
    name: Optional[StrictStr] = Field(default=None, description="The name of the role. When `Role` is used in `CreateRole`, the role name must not be set. When `Role` is used in output and other input such as `UpdateRole`, the role name is the complete path. For example, `roles/logging.viewer` for predefined roles, `organizations/{ORGANIZATION_ID}/roles/my-role` for organization-level custom roles, and `projects/{PROJECT_ID}/roles/my-role` for project-level custom roles.")
    stage: Optional[StrictStr] = Field(default=None, description="The current launch stage of the role. If the `ALPHA` launch stage has been selected for a role, the `stage` field will not be included in the returned definition for the role.")
    title: Optional[StrictStr] = Field(default=None, description="Optional. A human-readable title for the role. Typically this is limited to 100 UTF-8 bytes.")
    __properties: ClassVar[List[str]] = ["deleted", "description", "etag", "includedPermissions", "name", "stage", "title"]

    @field_validator('stage')
    def stage_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['ALPHA', 'BETA', 'GA', 'DEPRECATED', 'DISABLED', 'EAP']):
            raise ValueError("must be one of enum values ('ALPHA', 'BETA', 'GA', 'DEPRECATED', 'DISABLED', 'EAP')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Role from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Role from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "deleted": obj.get("deleted"),
            "description": obj.get("description"),
            "etag": obj.get("etag"),
            "includedPermissions": obj.get("includedPermissions"),
            "name": obj.get("name"),
            "stage": obj.get("stage"),
            "title": obj.get("title")
        })
        return _obj



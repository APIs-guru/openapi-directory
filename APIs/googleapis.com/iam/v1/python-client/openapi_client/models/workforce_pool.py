# coding: utf-8

"""
    Identity and Access Management (IAM) API

    Manages identity and access control for Google Cloud Platform resources, including the creation of service accounts, which you can use to authenticate to Google and make API calls. 

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.access_restrictions import AccessRestrictions
from typing import Optional, Set
from typing_extensions import Self

class WorkforcePool(BaseModel):
    """
    Represents a collection of external workforces. Provides namespaces for federated users that can be referenced in IAM policies.
    """ # noqa: E501
    access_restrictions: Optional[AccessRestrictions] = Field(default=None, alias="accessRestrictions")
    description: Optional[StrictStr] = Field(default=None, description="A user-specified description of the pool. Cannot exceed 256 characters.")
    disabled: Optional[StrictBool] = Field(default=None, description="Disables the workforce pool. You cannot use a disabled pool to exchange tokens, or use existing tokens to access resources. If the pool is re-enabled, existing tokens grant access again.")
    display_name: Optional[StrictStr] = Field(default=None, description="A user-specified display name of the pool in Google Cloud Console. Cannot exceed 32 characters.", alias="displayName")
    expire_time: Optional[StrictStr] = Field(default=None, description="Output only. Time after which the workforce pool will be permanently purged and cannot be recovered.", alias="expireTime")
    name: Optional[StrictStr] = Field(default=None, description="Output only. The resource name of the pool. Format: `locations/{location}/workforcePools/{workforce_pool_id}`")
    parent: Optional[StrictStr] = Field(default=None, description="Immutable. The resource name of the parent. Format: `organizations/{org-id}`.")
    session_duration: Optional[StrictStr] = Field(default=None, description="Duration that the Google Cloud access tokens, console sign-in sessions, and `gcloud` sign-in sessions from this pool are valid. Must be greater than 15 minutes (900s) and less than 12 hours (43200s). If `session_duration` is not configured, minted credentials have a default duration of one hour (3600s). For SAML providers, the lifetime of the token is the minimum of the `session_duration` and the `SessionNotOnOrAfter` claim in the SAML assertion.", alias="sessionDuration")
    state: Optional[StrictStr] = Field(default=None, description="Output only. The state of the pool.")
    __properties: ClassVar[List[str]] = ["accessRestrictions", "description", "disabled", "displayName", "expireTime", "name", "parent", "sessionDuration", "state"]

    @field_validator('state')
    def state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['STATE_UNSPECIFIED', 'ACTIVE', 'DELETED']):
            raise ValueError("must be one of enum values ('STATE_UNSPECIFIED', 'ACTIVE', 'DELETED')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of WorkforcePool from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "expire_time",
            "name",
            "state",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of access_restrictions
        if self.access_restrictions:
            _dict['accessRestrictions'] = self.access_restrictions.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of WorkforcePool from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "accessRestrictions": AccessRestrictions.from_dict(obj["accessRestrictions"]) if obj.get("accessRestrictions") is not None else None,
            "description": obj.get("description"),
            "disabled": obj.get("disabled"),
            "displayName": obj.get("displayName"),
            "expireTime": obj.get("expireTime"),
            "name": obj.get("name"),
            "parent": obj.get("parent"),
            "sessionDuration": obj.get("sessionDuration"),
            "state": obj.get("state")
        })
        return _obj



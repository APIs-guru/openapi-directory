# coding: utf-8

"""
    Identity and Access Management (IAM) API

    Manages identity and access control for Google Cloud Platform resources, including the creation of service accounts, which you can use to authenticate to Google and make API calls. 

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class LintResult(BaseModel):
    """
    Structured response of a single validation unit.
    """ # noqa: E501
    debug_message: Optional[StrictStr] = Field(default=None, description="Human readable debug message associated with the issue.", alias="debugMessage")
    field_name: Optional[StrictStr] = Field(default=None, description="The name of the field for which this lint result is about. For nested messages `field_name` consists of names of the embedded fields separated by period character. The top-level qualifier is the input object to lint in the request. For example, the `field_name` value `condition.expression` identifies a lint result for the `expression` field of the provided condition.", alias="fieldName")
    level: Optional[StrictStr] = Field(default=None, description="The validation unit level.")
    location_offset: Optional[StrictInt] = Field(default=None, description="0-based character position of problematic construct within the object identified by `field_name`. Currently, this is populated only for condition expression.", alias="locationOffset")
    severity: Optional[StrictStr] = Field(default=None, description="The validation unit severity.")
    validation_unit_name: Optional[StrictStr] = Field(default=None, description="The validation unit name, for instance \"lintValidationUnits/ConditionComplexityCheck\".", alias="validationUnitName")
    __properties: ClassVar[List[str]] = ["debugMessage", "fieldName", "level", "locationOffset", "severity", "validationUnitName"]

    @field_validator('level')
    def level_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['LEVEL_UNSPECIFIED', 'CONDITION']):
            raise ValueError("must be one of enum values ('LEVEL_UNSPECIFIED', 'CONDITION')")
        return value

    @field_validator('severity')
    def severity_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['SEVERITY_UNSPECIFIED', 'ERROR', 'WARNING', 'NOTICE', 'INFO', 'DEPRECATED']):
            raise ValueError("must be one of enum values ('SEVERITY_UNSPECIFIED', 'ERROR', 'WARNING', 'NOTICE', 'INFO', 'DEPRECATED')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of LintResult from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of LintResult from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "debugMessage": obj.get("debugMessage"),
            "fieldName": obj.get("fieldName"),
            "level": obj.get("level"),
            "locationOffset": obj.get("locationOffset"),
            "severity": obj.get("severity"),
            "validationUnitName": obj.get("validationUnitName")
        })
        return _obj



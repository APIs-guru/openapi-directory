# coding: utf-8

"""
    Identity and Access Management (IAM) API

    Manages identity and access control for Google Cloud Platform resources, including the creation of service accounts, which you can use to authenticate to Google and make API calls. 

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class KeyData(BaseModel):
    """
    Represents a public key data along with its format.
    """ # noqa: E501
    format: Optional[StrictStr] = Field(default=None, description="Output only. The format of the key.")
    key: Optional[StrictStr] = Field(default=None, description="Output only. The key data. The format of the key is represented by the format field.")
    key_spec: Optional[StrictStr] = Field(default=None, description="Required. The specifications for the key.", alias="keySpec")
    not_after_time: Optional[StrictStr] = Field(default=None, description="Output only. Latest timestamp when this key is valid. Attempts to use this key after this time will fail. Only present if the key data represents a X.509 certificate.", alias="notAfterTime")
    not_before_time: Optional[StrictStr] = Field(default=None, description="Output only. Earliest timestamp when this key is valid. Attempts to use this key before this time will fail. Only present if the key data represents a X.509 certificate.", alias="notBeforeTime")
    __properties: ClassVar[List[str]] = ["format", "key", "keySpec", "notAfterTime", "notBeforeTime"]

    @field_validator('format')
    def format_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['KEY_FORMAT_UNSPECIFIED', 'RSA_X509_PEM']):
            raise ValueError("must be one of enum values ('KEY_FORMAT_UNSPECIFIED', 'RSA_X509_PEM')")
        return value

    @field_validator('key_spec')
    def key_spec_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['KEY_SPEC_UNSPECIFIED', 'RSA_2048', 'RSA_3072', 'RSA_4096']):
            raise ValueError("must be one of enum values ('KEY_SPEC_UNSPECIFIED', 'RSA_2048', 'RSA_3072', 'RSA_4096')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of KeyData from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "format",
            "key",
            "not_after_time",
            "not_before_time",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of KeyData from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "format": obj.get("format"),
            "key": obj.get("key"),
            "keySpec": obj.get("keySpec"),
            "notAfterTime": obj.get("notAfterTime"),
            "notBeforeTime": obj.get("notBeforeTime")
        })
        return _obj



# coding: utf-8

"""
    Identity and Access Management (IAM) API

    Manages identity and access control for Google Cloud Platform resources, including the creation of service accounts, which you can use to authenticate to Google and make API calls. 

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_type_expr import GoogleTypeExpr
from typing import Optional, Set
from typing_extensions import Self

class GoogleIamV1BindingDelta(BaseModel):
    """
    One delta entry for Binding. Each individual change (only one member in each entry) to a binding will be a separate entry.
    """ # noqa: E501
    action: Optional[StrictStr] = Field(default=None, description="The action that was performed on a Binding. Required")
    condition: Optional[GoogleTypeExpr] = None
    member: Optional[StrictStr] = Field(default=None, description="A single identity requesting access for a Google Cloud resource. Follows the same format of Binding.members. Required")
    role: Optional[StrictStr] = Field(default=None, description="Role that is assigned to `members`. For example, `roles/viewer`, `roles/editor`, or `roles/owner`. Required")
    __properties: ClassVar[List[str]] = ["action", "condition", "member", "role"]

    @field_validator('action')
    def action_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['ACTION_UNSPECIFIED', 'ADD', 'REMOVE']):
            raise ValueError("must be one of enum values ('ACTION_UNSPECIFIED', 'ADD', 'REMOVE')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleIamV1BindingDelta from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of condition
        if self.condition:
            _dict['condition'] = self.condition.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleIamV1BindingDelta from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "action": obj.get("action"),
            "condition": GoogleTypeExpr.from_dict(obj["condition"]) if obj.get("condition") is not None else None,
            "member": obj.get("member"),
            "role": obj.get("role")
        })
        return _obj



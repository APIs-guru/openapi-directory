# coding: utf-8

"""
    Identity and Access Management (IAM) API

    Manages identity and access control for Google Cloud Platform resources, including the creation of service accounts, which you can use to authenticate to Google and make API calls. 

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_iam_v2_policy_rule import GoogleIamV2PolicyRule
from typing import Optional, Set
from typing_extensions import Self

class GoogleIamV2Policy(BaseModel):
    """
    Data for an IAM policy.
    """ # noqa: E501
    annotations: Optional[Dict[str, StrictStr]] = Field(default=None, description="A key-value map to store arbitrary metadata for the `Policy`. Keys can be up to 63 characters. Values can be up to 255 characters.")
    create_time: Optional[StrictStr] = Field(default=None, description="Output only. The time when the `Policy` was created.", alias="createTime")
    delete_time: Optional[StrictStr] = Field(default=None, description="Output only. The time when the `Policy` was deleted. Empty if the policy is not deleted.", alias="deleteTime")
    display_name: Optional[StrictStr] = Field(default=None, description="A user-specified description of the `Policy`. This value can be up to 63 characters.", alias="displayName")
    etag: Optional[StrictStr] = Field(default=None, description="An opaque tag that identifies the current version of the `Policy`. IAM uses this value to help manage concurrent updates, so they do not cause one update to be overwritten by another. If this field is present in a CreatePolicyRequest, the value is ignored.")
    kind: Optional[StrictStr] = Field(default=None, description="Output only. The kind of the `Policy`. Always contains the value `DenyPolicy`.")
    name: Optional[StrictStr] = Field(default=None, description="Immutable. The resource name of the `Policy`, which must be unique. Format: `policies/{attachment_point}/denypolicies/{policy_id}` The attachment point is identified by its URL-encoded full resource name, which means that the forward-slash character, `/`, must be written as `%2F`. For example, `policies/cloudresourcemanager.googleapis.com%2Fprojects%2Fmy-project/denypolicies/my-deny-policy`. For organizations and folders, use the numeric ID in the full resource name. For projects, requests can use the alphanumeric or the numeric ID. Responses always contain the numeric ID.")
    rules: Optional[List[GoogleIamV2PolicyRule]] = Field(default=None, description="A list of rules that specify the behavior of the `Policy`. All of the rules should be of the `kind` specified in the `Policy`.")
    uid: Optional[StrictStr] = Field(default=None, description="Immutable. The globally unique ID of the `Policy`. Assigned automatically when the `Policy` is created.")
    update_time: Optional[StrictStr] = Field(default=None, description="Output only. The time when the `Policy` was last updated.", alias="updateTime")
    __properties: ClassVar[List[str]] = ["annotations", "createTime", "deleteTime", "displayName", "etag", "kind", "name", "rules", "uid", "updateTime"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleIamV2Policy from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "create_time",
            "delete_time",
            "kind",
            "update_time",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in rules (list)
        _items = []
        if self.rules:
            for _item_rules in self.rules:
                if _item_rules:
                    _items.append(_item_rules.to_dict())
            _dict['rules'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleIamV2Policy from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "annotations": obj.get("annotations"),
            "createTime": obj.get("createTime"),
            "deleteTime": obj.get("deleteTime"),
            "displayName": obj.get("displayName"),
            "etag": obj.get("etag"),
            "kind": obj.get("kind"),
            "name": obj.get("name"),
            "rules": [GoogleIamV2PolicyRule.from_dict(_item) for _item in obj["rules"]] if obj.get("rules") is not None else None,
            "uid": obj.get("uid"),
            "updateTime": obj.get("updateTime")
        })
        return _obj



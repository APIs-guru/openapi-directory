# coding: utf-8

"""
    Network Management API

    The Network Management API provides a collection of network performance monitoring and diagnostic capabilities.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class NatInfo(BaseModel):
    """
    For display only. Metadata associated with NAT.
    """ # noqa: E501
    nat_gateway_name: Optional[StrictStr] = Field(default=None, description="The name of Cloud NAT Gateway. Only valid when type is CLOUD_NAT.", alias="natGatewayName")
    network_uri: Optional[StrictStr] = Field(default=None, description="URI of the network where NAT translation takes place.", alias="networkUri")
    new_destination_ip: Optional[StrictStr] = Field(default=None, description="Destination IP address after NAT translation.", alias="newDestinationIp")
    new_destination_port: Optional[StrictInt] = Field(default=None, description="Destination port after NAT translation. Only valid when protocol is TCP or UDP.", alias="newDestinationPort")
    new_source_ip: Optional[StrictStr] = Field(default=None, description="Source IP address after NAT translation.", alias="newSourceIp")
    new_source_port: Optional[StrictInt] = Field(default=None, description="Source port after NAT translation. Only valid when protocol is TCP or UDP.", alias="newSourcePort")
    old_destination_ip: Optional[StrictStr] = Field(default=None, description="Destination IP address before NAT translation.", alias="oldDestinationIp")
    old_destination_port: Optional[StrictInt] = Field(default=None, description="Destination port before NAT translation. Only valid when protocol is TCP or UDP.", alias="oldDestinationPort")
    old_source_ip: Optional[StrictStr] = Field(default=None, description="Source IP address before NAT translation.", alias="oldSourceIp")
    old_source_port: Optional[StrictInt] = Field(default=None, description="Source port before NAT translation. Only valid when protocol is TCP or UDP.", alias="oldSourcePort")
    protocol: Optional[StrictStr] = Field(default=None, description="IP protocol in string format, for example: \"TCP\", \"UDP\", \"ICMP\".")
    router_uri: Optional[StrictStr] = Field(default=None, description="Uri of the Cloud Router. Only valid when type is CLOUD_NAT.", alias="routerUri")
    type: Optional[StrictStr] = Field(default=None, description="Type of NAT.")
    __properties: ClassVar[List[str]] = ["natGatewayName", "networkUri", "newDestinationIp", "newDestinationPort", "newSourceIp", "newSourcePort", "oldDestinationIp", "oldDestinationPort", "oldSourceIp", "oldSourcePort", "protocol", "routerUri", "type"]

    @field_validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['TYPE_UNSPECIFIED', 'INTERNAL_TO_EXTERNAL', 'EXTERNAL_TO_INTERNAL', 'CLOUD_NAT', 'PRIVATE_SERVICE_CONNECT']):
            raise ValueError("must be one of enum values ('TYPE_UNSPECIFIED', 'INTERNAL_TO_EXTERNAL', 'EXTERNAL_TO_INTERNAL', 'CLOUD_NAT', 'PRIVATE_SERVICE_CONNECT')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of NatInfo from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of NatInfo from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "natGatewayName": obj.get("natGatewayName"),
            "networkUri": obj.get("networkUri"),
            "newDestinationIp": obj.get("newDestinationIp"),
            "newDestinationPort": obj.get("newDestinationPort"),
            "newSourceIp": obj.get("newSourceIp"),
            "newSourcePort": obj.get("newSourcePort"),
            "oldDestinationIp": obj.get("oldDestinationIp"),
            "oldDestinationPort": obj.get("oldDestinationPort"),
            "oldSourceIp": obj.get("oldSourceIp"),
            "oldSourcePort": obj.get("oldSourcePort"),
            "protocol": obj.get("protocol"),
            "routerUri": obj.get("routerUri"),
            "type": obj.get("type")
        })
        return _obj



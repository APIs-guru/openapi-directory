# coding: utf-8

"""
    Network Management API

    The Network Management API provides a collection of network performance monitoring and diagnostic capabilities.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class LoadBalancerBackendInfo(BaseModel):
    """
    For display only. Metadata associated with the load balancer backend.
    """ # noqa: E501
    backend_bucket_uri: Optional[StrictStr] = Field(default=None, description="URI of the backend bucket this backend targets (if applicable).", alias="backendBucketUri")
    backend_service_uri: Optional[StrictStr] = Field(default=None, description="URI of the backend service this backend belongs to (if applicable).", alias="backendServiceUri")
    health_check_firewalls_config_state: Optional[StrictStr] = Field(default=None, description="Output only. Health check firewalls configuration state for the backend. This is a result of the static firewall analysis (verifying that health check traffic from required IP ranges to the backend is allowed or not). The backend might still be unhealthy even if these firewalls are configured. Please refer to the documentation for more information: https://cloud.google.com/load-balancing/docs/firewall-rules", alias="healthCheckFirewallsConfigState")
    health_check_uri: Optional[StrictStr] = Field(default=None, description="URI of the health check attached to this backend (if applicable).", alias="healthCheckUri")
    instance_group_uri: Optional[StrictStr] = Field(default=None, description="URI of the instance group this backend belongs to (if applicable).", alias="instanceGroupUri")
    instance_uri: Optional[StrictStr] = Field(default=None, description="URI of the backend instance (if applicable). Populated for instance group backends, and zonal NEG backends.", alias="instanceUri")
    name: Optional[StrictStr] = Field(default=None, description="Display name of the backend. For example, it might be an instance name for the instance group backends, or an IP address and port for zonal network endpoint group backends.")
    network_endpoint_group_uri: Optional[StrictStr] = Field(default=None, description="URI of the network endpoint group this backend belongs to (if applicable).", alias="networkEndpointGroupUri")
    psc_google_api_target: Optional[StrictStr] = Field(default=None, description="PSC Google API target this PSC NEG backend targets (if applicable).", alias="pscGoogleApiTarget")
    psc_service_attachment_uri: Optional[StrictStr] = Field(default=None, description="URI of the PSC service attachment this PSC NEG backend targets (if applicable).", alias="pscServiceAttachmentUri")
    __properties: ClassVar[List[str]] = ["backendBucketUri", "backendServiceUri", "healthCheckFirewallsConfigState", "healthCheckUri", "instanceGroupUri", "instanceUri", "name", "networkEndpointGroupUri", "pscGoogleApiTarget", "pscServiceAttachmentUri"]

    @field_validator('health_check_firewalls_config_state')
    def health_check_firewalls_config_state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['HEALTH_CHECK_FIREWALLS_CONFIG_STATE_UNSPECIFIED', 'FIREWALLS_CONFIGURED', 'FIREWALLS_PARTIALLY_CONFIGURED', 'FIREWALLS_NOT_CONFIGURED', 'FIREWALLS_UNSUPPORTED']):
            raise ValueError("must be one of enum values ('HEALTH_CHECK_FIREWALLS_CONFIG_STATE_UNSPECIFIED', 'FIREWALLS_CONFIGURED', 'FIREWALLS_PARTIALLY_CONFIGURED', 'FIREWALLS_NOT_CONFIGURED', 'FIREWALLS_UNSUPPORTED')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of LoadBalancerBackendInfo from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "health_check_firewalls_config_state",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of LoadBalancerBackendInfo from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "backendBucketUri": obj.get("backendBucketUri"),
            "backendServiceUri": obj.get("backendServiceUri"),
            "healthCheckFirewallsConfigState": obj.get("healthCheckFirewallsConfigState"),
            "healthCheckUri": obj.get("healthCheckUri"),
            "instanceGroupUri": obj.get("instanceGroupUri"),
            "instanceUri": obj.get("instanceUri"),
            "name": obj.get("name"),
            "networkEndpointGroupUri": obj.get("networkEndpointGroupUri"),
            "pscGoogleApiTarget": obj.get("pscGoogleApiTarget"),
            "pscServiceAttachmentUri": obj.get("pscServiceAttachmentUri")
        })
        return _obj



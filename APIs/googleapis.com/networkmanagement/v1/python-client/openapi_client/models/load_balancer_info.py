# coding: utf-8

"""
    Network Management API

    The Network Management API provides a collection of network performance monitoring and diagnostic capabilities.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.load_balancer_backend import LoadBalancerBackend
from typing import Optional, Set
from typing_extensions import Self

class LoadBalancerInfo(BaseModel):
    """
    For display only. Metadata associated with a load balancer.
    """ # noqa: E501
    backend_type: Optional[StrictStr] = Field(default=None, description="Type of load balancer's backend configuration.", alias="backendType")
    backend_uri: Optional[StrictStr] = Field(default=None, description="Backend configuration URI.", alias="backendUri")
    backends: Optional[List[LoadBalancerBackend]] = Field(default=None, description="Information for the loadbalancer backends.")
    health_check_uri: Optional[StrictStr] = Field(default=None, description="URI of the health check for the load balancer. Deprecated and no longer populated as different load balancer backends might have different health checks.", alias="healthCheckUri")
    load_balancer_type: Optional[StrictStr] = Field(default=None, description="Type of the load balancer.", alias="loadBalancerType")
    __properties: ClassVar[List[str]] = ["backendType", "backendUri", "backends", "healthCheckUri", "loadBalancerType"]

    @field_validator('backend_type')
    def backend_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['BACKEND_TYPE_UNSPECIFIED', 'BACKEND_SERVICE', 'TARGET_POOL', 'TARGET_INSTANCE']):
            raise ValueError("must be one of enum values ('BACKEND_TYPE_UNSPECIFIED', 'BACKEND_SERVICE', 'TARGET_POOL', 'TARGET_INSTANCE')")
        return value

    @field_validator('load_balancer_type')
    def load_balancer_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['LOAD_BALANCER_TYPE_UNSPECIFIED', 'INTERNAL_TCP_UDP', 'NETWORK_TCP_UDP', 'HTTP_PROXY', 'TCP_PROXY', 'SSL_PROXY']):
            raise ValueError("must be one of enum values ('LOAD_BALANCER_TYPE_UNSPECIFIED', 'INTERNAL_TCP_UDP', 'NETWORK_TCP_UDP', 'HTTP_PROXY', 'TCP_PROXY', 'SSL_PROXY')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of LoadBalancerInfo from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in backends (list)
        _items = []
        if self.backends:
            for _item_backends in self.backends:
                if _item_backends:
                    _items.append(_item_backends.to_dict())
            _dict['backends'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of LoadBalancerInfo from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "backendType": obj.get("backendType"),
            "backendUri": obj.get("backendUri"),
            "backends": [LoadBalancerBackend.from_dict(_item) for _item in obj["backends"]] if obj.get("backends") is not None else None,
            "healthCheckUri": obj.get("healthCheckUri"),
            "loadBalancerType": obj.get("loadBalancerType")
        })
        return _obj



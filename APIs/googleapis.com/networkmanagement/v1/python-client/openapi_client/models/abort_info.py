# coding: utf-8

"""
    Network Management API

    The Network Management API provides a collection of network performance monitoring and diagnostic capabilities.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class AbortInfo(BaseModel):
    """
    Details of the final state \"abort\" and associated resource.
    """ # noqa: E501
    cause: Optional[StrictStr] = Field(default=None, description="Causes that the analysis is aborted.")
    ip_address: Optional[StrictStr] = Field(default=None, description="IP address that caused the abort.", alias="ipAddress")
    projects_missing_permission: Optional[List[StrictStr]] = Field(default=None, description="List of project IDs the user specified in the request but lacks access to. In this case, analysis is aborted with the PERMISSION_DENIED cause.", alias="projectsMissingPermission")
    resource_uri: Optional[StrictStr] = Field(default=None, description="URI of the resource that caused the abort.", alias="resourceUri")
    __properties: ClassVar[List[str]] = ["cause", "ipAddress", "projectsMissingPermission", "resourceUri"]

    @field_validator('cause')
    def cause_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['CAUSE_UNSPECIFIED', 'UNKNOWN_NETWORK', 'UNKNOWN_PROJECT', 'NO_EXTERNAL_IP', 'UNINTENDED_DESTINATION', 'SOURCE_ENDPOINT_NOT_FOUND', 'MISMATCHED_SOURCE_NETWORK', 'DESTINATION_ENDPOINT_NOT_FOUND', 'MISMATCHED_DESTINATION_NETWORK', 'UNKNOWN_IP', 'SOURCE_IP_ADDRESS_NOT_IN_SOURCE_NETWORK', 'PERMISSION_DENIED', 'PERMISSION_DENIED_NO_CLOUD_NAT_CONFIGS', 'PERMISSION_DENIED_NO_NEG_ENDPOINT_CONFIGS', 'NO_SOURCE_LOCATION', 'INVALID_ARGUMENT', 'TRACE_TOO_LONG', 'INTERNAL_ERROR', 'UNSUPPORTED', 'MISMATCHED_IP_VERSION', 'GKE_KONNECTIVITY_PROXY_UNSUPPORTED', 'RESOURCE_CONFIG_NOT_FOUND', 'VM_INSTANCE_CONFIG_NOT_FOUND', 'NETWORK_CONFIG_NOT_FOUND', 'FIREWALL_CONFIG_NOT_FOUND', 'ROUTE_CONFIG_NOT_FOUND', 'GOOGLE_MANAGED_SERVICE_AMBIGUOUS_PSC_ENDPOINT', 'SOURCE_PSC_CLOUD_SQL_UNSUPPORTED', 'SOURCE_FORWARDING_RULE_UNSUPPORTED', 'NON_ROUTABLE_IP_ADDRESS']):
            raise ValueError("must be one of enum values ('CAUSE_UNSPECIFIED', 'UNKNOWN_NETWORK', 'UNKNOWN_PROJECT', 'NO_EXTERNAL_IP', 'UNINTENDED_DESTINATION', 'SOURCE_ENDPOINT_NOT_FOUND', 'MISMATCHED_SOURCE_NETWORK', 'DESTINATION_ENDPOINT_NOT_FOUND', 'MISMATCHED_DESTINATION_NETWORK', 'UNKNOWN_IP', 'SOURCE_IP_ADDRESS_NOT_IN_SOURCE_NETWORK', 'PERMISSION_DENIED', 'PERMISSION_DENIED_NO_CLOUD_NAT_CONFIGS', 'PERMISSION_DENIED_NO_NEG_ENDPOINT_CONFIGS', 'NO_SOURCE_LOCATION', 'INVALID_ARGUMENT', 'TRACE_TOO_LONG', 'INTERNAL_ERROR', 'UNSUPPORTED', 'MISMATCHED_IP_VERSION', 'GKE_KONNECTIVITY_PROXY_UNSUPPORTED', 'RESOURCE_CONFIG_NOT_FOUND', 'VM_INSTANCE_CONFIG_NOT_FOUND', 'NETWORK_CONFIG_NOT_FOUND', 'FIREWALL_CONFIG_NOT_FOUND', 'ROUTE_CONFIG_NOT_FOUND', 'GOOGLE_MANAGED_SERVICE_AMBIGUOUS_PSC_ENDPOINT', 'SOURCE_PSC_CLOUD_SQL_UNSUPPORTED', 'SOURCE_FORWARDING_RULE_UNSUPPORTED', 'NON_ROUTABLE_IP_ADDRESS')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AbortInfo from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AbortInfo from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "cause": obj.get("cause"),
            "ipAddress": obj.get("ipAddress"),
            "projectsMissingPermission": obj.get("projectsMissingPermission"),
            "resourceUri": obj.get("resourceUri")
        })
        return _obj



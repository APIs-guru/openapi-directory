# coding: utf-8

"""
    Network Management API

    The Network Management API provides a collection of network performance monitoring and diagnostic capabilities.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.endpoint import Endpoint
from openapi_client.models.probing_details import ProbingDetails
from openapi_client.models.reachability_details import ReachabilityDetails
from typing import Optional, Set
from typing_extensions import Self

class ConnectivityTest(BaseModel):
    """
    A Connectivity Test for a network reachability analysis.
    """ # noqa: E501
    create_time: Optional[StrictStr] = Field(default=None, description="Output only. The time the test was created.", alias="createTime")
    description: Optional[StrictStr] = Field(default=None, description="The user-supplied description of the Connectivity Test. Maximum of 512 characters.")
    destination: Optional[Endpoint] = None
    display_name: Optional[StrictStr] = Field(default=None, description="Output only. The display name of a Connectivity Test.", alias="displayName")
    labels: Optional[Dict[str, StrictStr]] = Field(default=None, description="Resource labels to represent user-provided metadata.")
    name: Optional[StrictStr] = Field(default=None, description="Required. Unique name of the resource using the form: `projects/{project_id}/locations/global/connectivityTests/{test_id}`")
    probing_details: Optional[ProbingDetails] = Field(default=None, alias="probingDetails")
    protocol: Optional[StrictStr] = Field(default=None, description="IP Protocol of the test. When not provided, \"TCP\" is assumed.")
    reachability_details: Optional[ReachabilityDetails] = Field(default=None, alias="reachabilityDetails")
    related_projects: Optional[List[StrictStr]] = Field(default=None, description="Other projects that may be relevant for reachability analysis. This is applicable to scenarios where a test can cross project boundaries.", alias="relatedProjects")
    source: Optional[Endpoint] = None
    update_time: Optional[StrictStr] = Field(default=None, description="Output only. The time the test's configuration was updated.", alias="updateTime")
    __properties: ClassVar[List[str]] = ["createTime", "description", "destination", "displayName", "labels", "name", "probingDetails", "protocol", "reachabilityDetails", "relatedProjects", "source", "updateTime"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ConnectivityTest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "create_time",
            "display_name",
            "update_time",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of destination
        if self.destination:
            _dict['destination'] = self.destination.to_dict()
        # override the default output from pydantic by calling `to_dict()` of probing_details
        if self.probing_details:
            _dict['probingDetails'] = self.probing_details.to_dict()
        # override the default output from pydantic by calling `to_dict()` of reachability_details
        if self.reachability_details:
            _dict['reachabilityDetails'] = self.reachability_details.to_dict()
        # override the default output from pydantic by calling `to_dict()` of source
        if self.source:
            _dict['source'] = self.source.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ConnectivityTest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "createTime": obj.get("createTime"),
            "description": obj.get("description"),
            "destination": Endpoint.from_dict(obj["destination"]) if obj.get("destination") is not None else None,
            "displayName": obj.get("displayName"),
            "labels": obj.get("labels"),
            "name": obj.get("name"),
            "probingDetails": ProbingDetails.from_dict(obj["probingDetails"]) if obj.get("probingDetails") is not None else None,
            "protocol": obj.get("protocol"),
            "reachabilityDetails": ReachabilityDetails.from_dict(obj["reachabilityDetails"]) if obj.get("reachabilityDetails") is not None else None,
            "relatedProjects": obj.get("relatedProjects"),
            "source": Endpoint.from_dict(obj["source"]) if obj.get("source") is not None else None,
            "updateTime": obj.get("updateTime")
        })
        return _obj



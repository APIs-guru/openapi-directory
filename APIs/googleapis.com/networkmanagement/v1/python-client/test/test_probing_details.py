# coding: utf-8

"""
    Network Management API

    The Network Management API provides a collection of network performance monitoring and diagnostic capabilities.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.probing_details import ProbingDetails

class TestProbingDetails(unittest.TestCase):
    """ProbingDetails unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> ProbingDetails:
        """Test ProbingDetails
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `ProbingDetails`
        """
        model = ProbingDetails()
        if include_optional:
            return ProbingDetails(
                abort_cause = 'PROBING_ABORT_CAUSE_UNSPECIFIED',
                destination_egress_location = openapi_client.models.edge_location.EdgeLocation(
                    metropolitan_area = '', ),
                endpoint_info = openapi_client.models.endpoint_info.EndpointInfo(
                    destination_ip = '', 
                    destination_network_uri = '', 
                    destination_port = 56, 
                    protocol = '', 
                    source_agent_uri = '', 
                    source_ip = '', 
                    source_network_uri = '', 
                    source_port = 56, ),
                error = openapi_client.models.status.Status(
                    code = 56, 
                    details = [
                        {
                            'key' : null
                            }
                        ], 
                    message = '', ),
                probing_latency = openapi_client.models.latency_distribution.LatencyDistribution(
                    latency_percentiles = [
                        openapi_client.models.latency_percentile.LatencyPercentile(
                            latency_micros = '', 
                            percent = 56, )
                        ], ),
                result = 'PROBING_RESULT_UNSPECIFIED',
                sent_probe_count = 56,
                successful_probe_count = 56,
                verify_time = ''
            )
        else:
            return ProbingDetails(
        )
        """

    def testProbingDetails(self):
        """Test ProbingDetails"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

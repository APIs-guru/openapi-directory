# coding: utf-8

"""
    Network Management API

    The Network Management API provides a collection of network performance monitoring and diagnostic capabilities.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.connectivity_test import ConnectivityTest

class TestConnectivityTest(unittest.TestCase):
    """ConnectivityTest unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> ConnectivityTest:
        """Test ConnectivityTest
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `ConnectivityTest`
        """
        model = ConnectivityTest()
        if include_optional:
            return ConnectivityTest(
                create_time = '',
                description = '',
                destination = openapi_client.models.endpoint.Endpoint(
                    app_engine_version = openapi_client.models.app_engine_version_endpoint.AppEngineVersionEndpoint(
                        uri = '', ), 
                    cloud_function = openapi_client.models.cloud_function_endpoint.CloudFunctionEndpoint(
                        uri = '', ), 
                    cloud_run_revision = openapi_client.models.cloud_run_revision_endpoint.CloudRunRevisionEndpoint(
                        uri = '', ), 
                    cloud_sql_instance = '', 
                    forwarding_rule = '', 
                    forwarding_rule_target = 'FORWARDING_RULE_TARGET_UNSPECIFIED', 
                    gke_master_cluster = '', 
                    instance = '', 
                    ip_address = '', 
                    load_balancer_id = '', 
                    load_balancer_type = 'LOAD_BALANCER_TYPE_UNSPECIFIED', 
                    network = '', 
                    network_type = 'NETWORK_TYPE_UNSPECIFIED', 
                    port = 56, 
                    project_id = '', ),
                display_name = '',
                labels = {
                    'key' : ''
                    },
                name = '',
                probing_details = openapi_client.models.probing_details.ProbingDetails(
                    abort_cause = 'PROBING_ABORT_CAUSE_UNSPECIFIED', 
                    destination_egress_location = openapi_client.models.edge_location.EdgeLocation(
                        metropolitan_area = '', ), 
                    endpoint_info = openapi_client.models.endpoint_info.EndpointInfo(
                        destination_ip = '', 
                        destination_network_uri = '', 
                        destination_port = 56, 
                        protocol = '', 
                        source_agent_uri = '', 
                        source_ip = '', 
                        source_network_uri = '', 
                        source_port = 56, ), 
                    error = openapi_client.models.status.Status(
                        code = 56, 
                        details = [
                            {
                                'key' : null
                                }
                            ], 
                        message = '', ), 
                    probing_latency = openapi_client.models.latency_distribution.LatencyDistribution(
                        latency_percentiles = [
                            openapi_client.models.latency_percentile.LatencyPercentile(
                                latency_micros = '', 
                                percent = 56, )
                            ], ), 
                    result = 'PROBING_RESULT_UNSPECIFIED', 
                    sent_probe_count = 56, 
                    successful_probe_count = 56, 
                    verify_time = '', ),
                protocol = '',
                reachability_details = openapi_client.models.reachability_details.ReachabilityDetails(
                    error = openapi_client.models.status.Status(
                        code = 56, 
                        details = [
                            {
                                'key' : null
                                }
                            ], 
                        message = '', ), 
                    result = 'RESULT_UNSPECIFIED', 
                    traces = [
                        openapi_client.models.trace.Trace(
                            endpoint_info = openapi_client.models.endpoint_info.EndpointInfo(
                                destination_ip = '', 
                                destination_network_uri = '', 
                                destination_port = 56, 
                                protocol = '', 
                                source_agent_uri = '', 
                                source_ip = '', 
                                source_network_uri = '', 
                                source_port = 56, ), 
                            forward_trace_id = 56, 
                            steps = [
                                openapi_client.models.step.Step(
                                    abort = openapi_client.models.abort_info.AbortInfo(
                                        cause = 'CAUSE_UNSPECIFIED', 
                                        ip_address = '', 
                                        projects_missing_permission = [
                                            ''
                                            ], 
                                        resource_uri = '', ), 
                                    app_engine_version = openapi_client.models.app_engine_version_info.AppEngineVersionInfo(
                                        display_name = '', 
                                        environment = '', 
                                        runtime = '', 
                                        uri = '', ), 
                                    causes_drop = True, 
                                    cloud_function = openapi_client.models.cloud_function_info.CloudFunctionInfo(
                                        display_name = '', 
                                        location = '', 
                                        uri = '', 
                                        version_id = '', ), 
                                    cloud_run_revision = openapi_client.models.cloud_run_revision_info.CloudRunRevisionInfo(
                                        display_name = '', 
                                        location = '', 
                                        service_uri = '', 
                                        uri = '', ), 
                                    cloud_sql_instance = openapi_client.models.cloud_sql_instance_info.CloudSQLInstanceInfo(
                                        display_name = '', 
                                        external_ip = '', 
                                        internal_ip = '', 
                                        network_uri = '', 
                                        region = '', 
                                        uri = '', ), 
                                    deliver = openapi_client.models.deliver_info.DeliverInfo(
                                        ip_address = '', 
                                        resource_uri = '', 
                                        target = 'TARGET_UNSPECIFIED', ), 
                                    description = '', 
                                    drop = openapi_client.models.drop_info.DropInfo(
                                        cause = 'CAUSE_UNSPECIFIED', 
                                        destination_ip = '', 
                                        region = '', 
                                        resource_uri = '', 
                                        source_ip = '', ), 
                                    endpoint = openapi_client.models.endpoint_info.EndpointInfo(
                                        destination_ip = '', 
                                        destination_network_uri = '', 
                                        destination_port = 56, 
                                        protocol = '', 
                                        source_agent_uri = '', 
                                        source_ip = '', 
                                        source_network_uri = '', 
                                        source_port = 56, ), 
                                    firewall = openapi_client.models.firewall_info.FirewallInfo(
                                        action = '', 
                                        direction = '', 
                                        display_name = '', 
                                        firewall_rule_type = 'FIREWALL_RULE_TYPE_UNSPECIFIED', 
                                        network_uri = '', 
                                        policy = '', 
                                        priority = 56, 
                                        target_service_accounts = [
                                            ''
                                            ], 
                                        target_tags = [
                                            ''
                                            ], 
                                        uri = '', ), 
                                    forward = openapi_client.models.forward_info.ForwardInfo(
                                        ip_address = '', 
                                        resource_uri = '', 
                                        target = 'TARGET_UNSPECIFIED', ), 
                                    forwarding_rule = openapi_client.models.forwarding_rule_info.ForwardingRuleInfo(
                                        display_name = '', 
                                        matched_port_range = '', 
                                        matched_protocol = '', 
                                        network_uri = '', 
                                        target = '', 
                                        uri = '', 
                                        vip = '', ), 
                                    gke_master = openapi_client.models.gke_master_info.GKEMasterInfo(
                                        cluster_network_uri = '', 
                                        cluster_uri = '', 
                                        external_ip = '', 
                                        internal_ip = '', ), 
                                    google_service = openapi_client.models.google_service_info.GoogleServiceInfo(
                                        google_service_type = 'GOOGLE_SERVICE_TYPE_UNSPECIFIED', 
                                        source_ip = '', ), 
                                    instance = openapi_client.models.instance_info.InstanceInfo(
                                        display_name = '', 
                                        external_ip = '', 
                                        interface = '', 
                                        internal_ip = '', 
                                        network_tags = [
                                            ''
                                            ], 
                                        network_uri = '', 
                                        service_account = '', 
                                        uri = '', ), 
                                    load_balancer = openapi_client.models.load_balancer_info.LoadBalancerInfo(
                                        backend_type = 'BACKEND_TYPE_UNSPECIFIED', 
                                        backend_uri = '', 
                                        backends = [
                                            openapi_client.models.load_balancer_backend.LoadBalancerBackend(
                                                display_name = '', 
                                                health_check_allowing_firewall_rules = [
                                                    ''
                                                    ], 
                                                health_check_blocking_firewall_rules = [
                                                    ''
                                                    ], 
                                                health_check_firewall_state = 'HEALTH_CHECK_FIREWALL_STATE_UNSPECIFIED', 
                                                uri = '', )
                                            ], 
                                        health_check_uri = '', 
                                        load_balancer_type = 'LOAD_BALANCER_TYPE_UNSPECIFIED', ), 
                                    load_balancer_backend_info = openapi_client.models.load_balancer_backend_info.LoadBalancerBackendInfo(
                                        backend_bucket_uri = '', 
                                        backend_service_uri = '', 
                                        health_check_firewalls_config_state = 'HEALTH_CHECK_FIREWALLS_CONFIG_STATE_UNSPECIFIED', 
                                        health_check_uri = '', 
                                        instance_group_uri = '', 
                                        instance_uri = '', 
                                        name = '', 
                                        network_endpoint_group_uri = '', 
                                        psc_google_api_target = '', 
                                        psc_service_attachment_uri = '', ), 
                                    nat = openapi_client.models.nat_info.NatInfo(
                                        nat_gateway_name = '', 
                                        network_uri = '', 
                                        new_destination_ip = '', 
                                        new_destination_port = 56, 
                                        new_source_ip = '', 
                                        new_source_port = 56, 
                                        old_destination_ip = '', 
                                        old_destination_port = 56, 
                                        old_source_ip = '', 
                                        old_source_port = 56, 
                                        protocol = '', 
                                        router_uri = '', 
                                        type = 'TYPE_UNSPECIFIED', ), 
                                    network = openapi_client.models.network_info.NetworkInfo(
                                        display_name = '', 
                                        matched_ip_range = '', 
                                        uri = '', ), 
                                    project_id = '', 
                                    proxy_connection = openapi_client.models.proxy_connection_info.ProxyConnectionInfo(
                                        network_uri = '', 
                                        new_destination_ip = '', 
                                        new_destination_port = 56, 
                                        new_source_ip = '', 
                                        new_source_port = 56, 
                                        old_destination_ip = '', 
                                        old_destination_port = 56, 
                                        old_source_ip = '', 
                                        old_source_port = 56, 
                                        protocol = '', 
                                        subnet_uri = '', ), 
                                    route = openapi_client.models.route_info.RouteInfo(
                                        dest_ip_range = '', 
                                        dest_port_ranges = [
                                            ''
                                            ], 
                                        display_name = '', 
                                        instance_tags = [
                                            ''
                                            ], 
                                        ncc_hub_uri = '', 
                                        ncc_spoke_uri = '', 
                                        network_uri = '', 
                                        next_hop = '', 
                                        next_hop_type = 'NEXT_HOP_TYPE_UNSPECIFIED', 
                                        priority = 56, 
                                        protocols = [
                                            ''
                                            ], 
                                        route_scope = 'ROUTE_SCOPE_UNSPECIFIED', 
                                        route_type = 'ROUTE_TYPE_UNSPECIFIED', 
                                        src_ip_range = '', 
                                        src_port_ranges = [
                                            ''
                                            ], 
                                        uri = '', ), 
                                    state = 'STATE_UNSPECIFIED', 
                                    storage_bucket = openapi_client.models.storage_bucket_info.StorageBucketInfo(
                                        bucket = '', ), 
                                    vpc_connector = openapi_client.models.vpc_connector_info.VpcConnectorInfo(
                                        display_name = '', 
                                        location = '', 
                                        uri = '', ), 
                                    vpn_gateway = openapi_client.models.vpn_gateway_info.VpnGatewayInfo(
                                        display_name = '', 
                                        ip_address = '', 
                                        network_uri = '', 
                                        region = '', 
                                        uri = '', 
                                        vpn_tunnel_uri = '', ), 
                                    vpn_tunnel = openapi_client.models.vpn_tunnel_info.VpnTunnelInfo(
                                        display_name = '', 
                                        network_uri = '', 
                                        region = '', 
                                        remote_gateway = '', 
                                        remote_gateway_ip = '', 
                                        routing_type = 'ROUTING_TYPE_UNSPECIFIED', 
                                        source_gateway = '', 
                                        source_gateway_ip = '', 
                                        uri = '', ), )
                                ], )
                        ], 
                    verify_time = '', ),
                related_projects = [
                    ''
                    ],
                source = openapi_client.models.endpoint.Endpoint(
                    app_engine_version = openapi_client.models.app_engine_version_endpoint.AppEngineVersionEndpoint(
                        uri = '', ), 
                    cloud_function = openapi_client.models.cloud_function_endpoint.CloudFunctionEndpoint(
                        uri = '', ), 
                    cloud_run_revision = openapi_client.models.cloud_run_revision_endpoint.CloudRunRevisionEndpoint(
                        uri = '', ), 
                    cloud_sql_instance = '', 
                    forwarding_rule = '', 
                    forwarding_rule_target = 'FORWARDING_RULE_TARGET_UNSPECIFIED', 
                    gke_master_cluster = '', 
                    instance = '', 
                    ip_address = '', 
                    load_balancer_id = '', 
                    load_balancer_type = 'LOAD_BALANCER_TYPE_UNSPECIFIED', 
                    network = '', 
                    network_type = 'NETWORK_TYPE_UNSPECIFIED', 
                    port = 56, 
                    project_id = '', ),
                update_time = ''
            )
        else:
            return ConnectivityTest(
        )
        """

    def testConnectivityTest(self):
        """Test ConnectivityTest"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

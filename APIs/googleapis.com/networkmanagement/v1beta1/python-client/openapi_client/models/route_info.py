# coding: utf-8

"""
    Network Management API

    The Network Management API provides a collection of network performance monitoring and diagnostic capabilities.

    The version of the OpenAPI document: v1beta1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class RouteInfo(BaseModel):
    """
    For display only. Metadata associated with a Compute Engine route.
    """ # noqa: E501
    dest_ip_range: Optional[StrictStr] = Field(default=None, description="Destination IP range of the route.", alias="destIpRange")
    dest_port_ranges: Optional[List[StrictStr]] = Field(default=None, description="Destination port ranges of the route. Policy based routes only.", alias="destPortRanges")
    display_name: Optional[StrictStr] = Field(default=None, description="Name of a route.", alias="displayName")
    instance_tags: Optional[List[StrictStr]] = Field(default=None, description="Instance tags of the route.", alias="instanceTags")
    ncc_hub_uri: Optional[StrictStr] = Field(default=None, description="URI of a NCC Hub. NCC_HUB routes only.", alias="nccHubUri")
    ncc_spoke_uri: Optional[StrictStr] = Field(default=None, description="URI of a NCC Spoke. NCC_HUB routes only.", alias="nccSpokeUri")
    network_uri: Optional[StrictStr] = Field(default=None, description="URI of a Compute Engine network. NETWORK routes only.", alias="networkUri")
    next_hop: Optional[StrictStr] = Field(default=None, description="Next hop of the route.", alias="nextHop")
    next_hop_type: Optional[StrictStr] = Field(default=None, description="Type of next hop.", alias="nextHopType")
    priority: Optional[StrictInt] = Field(default=None, description="Priority of the route.")
    protocols: Optional[List[StrictStr]] = Field(default=None, description="Protocols of the route. Policy based routes only.")
    route_scope: Optional[StrictStr] = Field(default=None, description="Indicates where route is applicable.", alias="routeScope")
    route_type: Optional[StrictStr] = Field(default=None, description="Type of route.", alias="routeType")
    src_ip_range: Optional[StrictStr] = Field(default=None, description="Source IP address range of the route. Policy based routes only.", alias="srcIpRange")
    src_port_ranges: Optional[List[StrictStr]] = Field(default=None, description="Source port ranges of the route. Policy based routes only.", alias="srcPortRanges")
    uri: Optional[StrictStr] = Field(default=None, description="URI of a route. Dynamic, peering static and peering dynamic routes do not have an URI. Advertised route from Google Cloud VPC to on-premises network also does not have an URI.")
    __properties: ClassVar[List[str]] = ["destIpRange", "destPortRanges", "displayName", "instanceTags", "nccHubUri", "nccSpokeUri", "networkUri", "nextHop", "nextHopType", "priority", "protocols", "routeScope", "routeType", "srcIpRange", "srcPortRanges", "uri"]

    @field_validator('next_hop_type')
    def next_hop_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['NEXT_HOP_TYPE_UNSPECIFIED', 'NEXT_HOP_IP', 'NEXT_HOP_INSTANCE', 'NEXT_HOP_NETWORK', 'NEXT_HOP_PEERING', 'NEXT_HOP_INTERCONNECT', 'NEXT_HOP_VPN_TUNNEL', 'NEXT_HOP_VPN_GATEWAY', 'NEXT_HOP_INTERNET_GATEWAY', 'NEXT_HOP_BLACKHOLE', 'NEXT_HOP_ILB', 'NEXT_HOP_ROUTER_APPLIANCE', 'NEXT_HOP_NCC_HUB']):
            raise ValueError("must be one of enum values ('NEXT_HOP_TYPE_UNSPECIFIED', 'NEXT_HOP_IP', 'NEXT_HOP_INSTANCE', 'NEXT_HOP_NETWORK', 'NEXT_HOP_PEERING', 'NEXT_HOP_INTERCONNECT', 'NEXT_HOP_VPN_TUNNEL', 'NEXT_HOP_VPN_GATEWAY', 'NEXT_HOP_INTERNET_GATEWAY', 'NEXT_HOP_BLACKHOLE', 'NEXT_HOP_ILB', 'NEXT_HOP_ROUTER_APPLIANCE', 'NEXT_HOP_NCC_HUB')")
        return value

    @field_validator('route_scope')
    def route_scope_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['ROUTE_SCOPE_UNSPECIFIED', 'NETWORK', 'NCC_HUB']):
            raise ValueError("must be one of enum values ('ROUTE_SCOPE_UNSPECIFIED', 'NETWORK', 'NCC_HUB')")
        return value

    @field_validator('route_type')
    def route_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['ROUTE_TYPE_UNSPECIFIED', 'SUBNET', 'STATIC', 'DYNAMIC', 'PEERING_SUBNET', 'PEERING_STATIC', 'PEERING_DYNAMIC', 'POLICY_BASED']):
            raise ValueError("must be one of enum values ('ROUTE_TYPE_UNSPECIFIED', 'SUBNET', 'STATIC', 'DYNAMIC', 'PEERING_SUBNET', 'PEERING_STATIC', 'PEERING_DYNAMIC', 'POLICY_BASED')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of RouteInfo from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of RouteInfo from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "destIpRange": obj.get("destIpRange"),
            "destPortRanges": obj.get("destPortRanges"),
            "displayName": obj.get("displayName"),
            "instanceTags": obj.get("instanceTags"),
            "nccHubUri": obj.get("nccHubUri"),
            "nccSpokeUri": obj.get("nccSpokeUri"),
            "networkUri": obj.get("networkUri"),
            "nextHop": obj.get("nextHop"),
            "nextHopType": obj.get("nextHopType"),
            "priority": obj.get("priority"),
            "protocols": obj.get("protocols"),
            "routeScope": obj.get("routeScope"),
            "routeType": obj.get("routeType"),
            "srcIpRange": obj.get("srcIpRange"),
            "srcPortRanges": obj.get("srcPortRanges"),
            "uri": obj.get("uri")
        })
        return _obj



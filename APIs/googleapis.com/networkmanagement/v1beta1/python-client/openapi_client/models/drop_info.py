# coding: utf-8

"""
    Network Management API

    The Network Management API provides a collection of network performance monitoring and diagnostic capabilities.

    The version of the OpenAPI document: v1beta1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class DropInfo(BaseModel):
    """
    Details of the final state \"drop\" and associated resource.
    """ # noqa: E501
    cause: Optional[StrictStr] = Field(default=None, description="Cause that the packet is dropped.")
    destination_ip: Optional[StrictStr] = Field(default=None, description="Destination IP address of the dropped packet (if relevant).", alias="destinationIp")
    region: Optional[StrictStr] = Field(default=None, description="Region of the dropped packet (if relevant).")
    resource_uri: Optional[StrictStr] = Field(default=None, description="URI of the resource that caused the drop.", alias="resourceUri")
    source_ip: Optional[StrictStr] = Field(default=None, description="Source IP address of the dropped packet (if relevant).", alias="sourceIp")
    __properties: ClassVar[List[str]] = ["cause", "destinationIp", "region", "resourceUri", "sourceIp"]

    @field_validator('cause')
    def cause_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['CAUSE_UNSPECIFIED', 'UNKNOWN_EXTERNAL_ADDRESS', 'FOREIGN_IP_DISALLOWED', 'FIREWALL_RULE', 'NO_ROUTE', 'ROUTE_BLACKHOLE', 'ROUTE_WRONG_NETWORK', 'ROUTE_NEXT_HOP_IP_ADDRESS_NOT_RESOLVED', 'ROUTE_NEXT_HOP_RESOURCE_NOT_FOUND', 'ROUTE_NEXT_HOP_INSTANCE_WRONG_NETWORK', 'ROUTE_NEXT_HOP_INSTANCE_NON_PRIMARY_IP', 'ROUTE_NEXT_HOP_FORWARDING_RULE_IP_MISMATCH', 'ROUTE_NEXT_HOP_VPN_TUNNEL_NOT_ESTABLISHED', 'ROUTE_NEXT_HOP_FORWARDING_RULE_TYPE_INVALID', 'NO_ROUTE_FROM_INTERNET_TO_PRIVATE_IPV6_ADDRESS', 'VPN_TUNNEL_LOCAL_SELECTOR_MISMATCH', 'VPN_TUNNEL_REMOTE_SELECTOR_MISMATCH', 'PRIVATE_TRAFFIC_TO_INTERNET', 'PRIVATE_GOOGLE_ACCESS_DISALLOWED', 'PRIVATE_GOOGLE_ACCESS_VIA_VPN_TUNNEL_UNSUPPORTED', 'NO_EXTERNAL_ADDRESS', 'UNKNOWN_INTERNAL_ADDRESS', 'FORWARDING_RULE_MISMATCH', 'FORWARDING_RULE_NO_INSTANCES', 'FIREWALL_BLOCKING_LOAD_BALANCER_BACKEND_HEALTH_CHECK', 'INSTANCE_NOT_RUNNING', 'GKE_CLUSTER_NOT_RUNNING', 'CLOUD_SQL_INSTANCE_NOT_RUNNING', 'TRAFFIC_TYPE_BLOCKED', 'GKE_MASTER_UNAUTHORIZED_ACCESS', 'CLOUD_SQL_INSTANCE_UNAUTHORIZED_ACCESS', 'DROPPED_INSIDE_GKE_SERVICE', 'DROPPED_INSIDE_CLOUD_SQL_SERVICE', 'GOOGLE_MANAGED_SERVICE_NO_PEERING', 'GOOGLE_MANAGED_SERVICE_NO_PSC_ENDPOINT', 'GKE_PSC_ENDPOINT_MISSING', 'CLOUD_SQL_INSTANCE_NO_IP_ADDRESS', 'GKE_CONTROL_PLANE_REGION_MISMATCH', 'PUBLIC_GKE_CONTROL_PLANE_TO_PRIVATE_DESTINATION', 'GKE_CONTROL_PLANE_NO_ROUTE', 'CLOUD_SQL_INSTANCE_NOT_CONFIGURED_FOR_EXTERNAL_TRAFFIC', 'PUBLIC_CLOUD_SQL_INSTANCE_TO_PRIVATE_DESTINATION', 'CLOUD_SQL_INSTANCE_NO_ROUTE', 'CLOUD_FUNCTION_NOT_ACTIVE', 'VPC_CONNECTOR_NOT_SET', 'VPC_CONNECTOR_NOT_RUNNING', 'FORWARDING_RULE_REGION_MISMATCH', 'PSC_CONNECTION_NOT_ACCEPTED', 'PSC_ENDPOINT_ACCESSED_FROM_PEERED_NETWORK', 'PSC_NEG_PRODUCER_ENDPOINT_NO_GLOBAL_ACCESS', 'PSC_NEG_PRODUCER_FORWARDING_RULE_MULTIPLE_PORTS', 'NO_NAT_SUBNETS_FOR_PSC_SERVICE_ATTACHMENT', 'HYBRID_NEG_NON_DYNAMIC_ROUTE_MATCHED', 'HYBRID_NEG_NON_LOCAL_DYNAMIC_ROUTE_MATCHED', 'CLOUD_RUN_REVISION_NOT_READY', 'DROPPED_INSIDE_PSC_SERVICE_PRODUCER', 'LOAD_BALANCER_HAS_NO_PROXY_SUBNET', 'CLOUD_NAT_NO_ADDRESSES']):
            raise ValueError("must be one of enum values ('CAUSE_UNSPECIFIED', 'UNKNOWN_EXTERNAL_ADDRESS', 'FOREIGN_IP_DISALLOWED', 'FIREWALL_RULE', 'NO_ROUTE', 'ROUTE_BLACKHOLE', 'ROUTE_WRONG_NETWORK', 'ROUTE_NEXT_HOP_IP_ADDRESS_NOT_RESOLVED', 'ROUTE_NEXT_HOP_RESOURCE_NOT_FOUND', 'ROUTE_NEXT_HOP_INSTANCE_WRONG_NETWORK', 'ROUTE_NEXT_HOP_INSTANCE_NON_PRIMARY_IP', 'ROUTE_NEXT_HOP_FORWARDING_RULE_IP_MISMATCH', 'ROUTE_NEXT_HOP_VPN_TUNNEL_NOT_ESTABLISHED', 'ROUTE_NEXT_HOP_FORWARDING_RULE_TYPE_INVALID', 'NO_ROUTE_FROM_INTERNET_TO_PRIVATE_IPV6_ADDRESS', 'VPN_TUNNEL_LOCAL_SELECTOR_MISMATCH', 'VPN_TUNNEL_REMOTE_SELECTOR_MISMATCH', 'PRIVATE_TRAFFIC_TO_INTERNET', 'PRIVATE_GOOGLE_ACCESS_DISALLOWED', 'PRIVATE_GOOGLE_ACCESS_VIA_VPN_TUNNEL_UNSUPPORTED', 'NO_EXTERNAL_ADDRESS', 'UNKNOWN_INTERNAL_ADDRESS', 'FORWARDING_RULE_MISMATCH', 'FORWARDING_RULE_NO_INSTANCES', 'FIREWALL_BLOCKING_LOAD_BALANCER_BACKEND_HEALTH_CHECK', 'INSTANCE_NOT_RUNNING', 'GKE_CLUSTER_NOT_RUNNING', 'CLOUD_SQL_INSTANCE_NOT_RUNNING', 'TRAFFIC_TYPE_BLOCKED', 'GKE_MASTER_UNAUTHORIZED_ACCESS', 'CLOUD_SQL_INSTANCE_UNAUTHORIZED_ACCESS', 'DROPPED_INSIDE_GKE_SERVICE', 'DROPPED_INSIDE_CLOUD_SQL_SERVICE', 'GOOGLE_MANAGED_SERVICE_NO_PEERING', 'GOOGLE_MANAGED_SERVICE_NO_PSC_ENDPOINT', 'GKE_PSC_ENDPOINT_MISSING', 'CLOUD_SQL_INSTANCE_NO_IP_ADDRESS', 'GKE_CONTROL_PLANE_REGION_MISMATCH', 'PUBLIC_GKE_CONTROL_PLANE_TO_PRIVATE_DESTINATION', 'GKE_CONTROL_PLANE_NO_ROUTE', 'CLOUD_SQL_INSTANCE_NOT_CONFIGURED_FOR_EXTERNAL_TRAFFIC', 'PUBLIC_CLOUD_SQL_INSTANCE_TO_PRIVATE_DESTINATION', 'CLOUD_SQL_INSTANCE_NO_ROUTE', 'CLOUD_FUNCTION_NOT_ACTIVE', 'VPC_CONNECTOR_NOT_SET', 'VPC_CONNECTOR_NOT_RUNNING', 'FORWARDING_RULE_REGION_MISMATCH', 'PSC_CONNECTION_NOT_ACCEPTED', 'PSC_ENDPOINT_ACCESSED_FROM_PEERED_NETWORK', 'PSC_NEG_PRODUCER_ENDPOINT_NO_GLOBAL_ACCESS', 'PSC_NEG_PRODUCER_FORWARDING_RULE_MULTIPLE_PORTS', 'NO_NAT_SUBNETS_FOR_PSC_SERVICE_ATTACHMENT', 'HYBRID_NEG_NON_DYNAMIC_ROUTE_MATCHED', 'HYBRID_NEG_NON_LOCAL_DYNAMIC_ROUTE_MATCHED', 'CLOUD_RUN_REVISION_NOT_READY', 'DROPPED_INSIDE_PSC_SERVICE_PRODUCER', 'LOAD_BALANCER_HAS_NO_PROXY_SUBNET', 'CLOUD_NAT_NO_ADDRESSES')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DropInfo from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DropInfo from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "cause": obj.get("cause"),
            "destinationIp": obj.get("destinationIp"),
            "region": obj.get("region"),
            "resourceUri": obj.get("resourceUri"),
            "sourceIp": obj.get("sourceIp")
        })
        return _obj



# coding: utf-8

"""
    Network Management API

    The Network Management API provides a collection of network performance monitoring and diagnostic capabilities.

    The version of the OpenAPI document: v1beta1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class DeliverInfo(BaseModel):
    """
    Details of the final state \"deliver\" and associated resource.
    """ # noqa: E501
    ip_address: Optional[StrictStr] = Field(default=None, description="IP address of the target (if applicable).", alias="ipAddress")
    resource_uri: Optional[StrictStr] = Field(default=None, description="URI of the resource that the packet is delivered to.", alias="resourceUri")
    target: Optional[StrictStr] = Field(default=None, description="Target type where the packet is delivered to.")
    __properties: ClassVar[List[str]] = ["ipAddress", "resourceUri", "target"]

    @field_validator('target')
    def target_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['TARGET_UNSPECIFIED', 'INSTANCE', 'INTERNET', 'GOOGLE_API', 'GKE_MASTER', 'CLOUD_SQL_INSTANCE', 'PSC_PUBLISHED_SERVICE', 'PSC_GOOGLE_API', 'PSC_VPC_SC', 'SERVERLESS_NEG', 'STORAGE_BUCKET', 'PRIVATE_NETWORK', 'CLOUD_FUNCTION', 'APP_ENGINE_VERSION', 'CLOUD_RUN_REVISION']):
            raise ValueError("must be one of enum values ('TARGET_UNSPECIFIED', 'INSTANCE', 'INTERNET', 'GOOGLE_API', 'GKE_MASTER', 'CLOUD_SQL_INSTANCE', 'PSC_PUBLISHED_SERVICE', 'PSC_GOOGLE_API', 'PSC_VPC_SC', 'SERVERLESS_NEG', 'STORAGE_BUCKET', 'PRIVATE_NETWORK', 'CLOUD_FUNCTION', 'APP_ENGINE_VERSION', 'CLOUD_RUN_REVISION')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DeliverInfo from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DeliverInfo from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "ipAddress": obj.get("ipAddress"),
            "resourceUri": obj.get("resourceUri"),
            "target": obj.get("target")
        })
        return _obj



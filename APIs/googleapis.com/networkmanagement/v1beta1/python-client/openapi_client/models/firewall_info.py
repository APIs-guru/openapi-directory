# coding: utf-8

"""
    Network Management API

    The Network Management API provides a collection of network performance monitoring and diagnostic capabilities.

    The version of the OpenAPI document: v1beta1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class FirewallInfo(BaseModel):
    """
    For display only. Metadata associated with a VPC firewall rule, an implied VPC firewall rule, or a hierarchical firewall policy rule.
    """ # noqa: E501
    action: Optional[StrictStr] = Field(default=None, description="Possible values: ALLOW, DENY, APPLY_SECURITY_PROFILE_GROUP")
    direction: Optional[StrictStr] = Field(default=None, description="Possible values: INGRESS, EGRESS")
    display_name: Optional[StrictStr] = Field(default=None, description="The display name of the VPC firewall rule. This field is not applicable to hierarchical firewall policy rules.", alias="displayName")
    firewall_rule_type: Optional[StrictStr] = Field(default=None, description="The firewall rule's type.", alias="firewallRuleType")
    network_uri: Optional[StrictStr] = Field(default=None, description="The URI of the VPC network that the firewall rule is associated with. This field is not applicable to hierarchical firewall policy rules.", alias="networkUri")
    policy: Optional[StrictStr] = Field(default=None, description="The hierarchical firewall policy that this rule is associated with. This field is not applicable to VPC firewall rules.")
    priority: Optional[StrictInt] = Field(default=None, description="The priority of the firewall rule.")
    target_service_accounts: Optional[List[StrictStr]] = Field(default=None, description="The target service accounts specified by the firewall rule.", alias="targetServiceAccounts")
    target_tags: Optional[List[StrictStr]] = Field(default=None, description="The target tags defined by the VPC firewall rule. This field is not applicable to hierarchical firewall policy rules.", alias="targetTags")
    uri: Optional[StrictStr] = Field(default=None, description="The URI of the VPC firewall rule. This field is not applicable to implied firewall rules or hierarchical firewall policy rules.")
    __properties: ClassVar[List[str]] = ["action", "direction", "displayName", "firewallRuleType", "networkUri", "policy", "priority", "targetServiceAccounts", "targetTags", "uri"]

    @field_validator('firewall_rule_type')
    def firewall_rule_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['FIREWALL_RULE_TYPE_UNSPECIFIED', 'HIERARCHICAL_FIREWALL_POLICY_RULE', 'VPC_FIREWALL_RULE', 'IMPLIED_VPC_FIREWALL_RULE', 'SERVERLESS_VPC_ACCESS_MANAGED_FIREWALL_RULE', 'NETWORK_FIREWALL_POLICY_RULE', 'NETWORK_REGIONAL_FIREWALL_POLICY_RULE', 'UNSUPPORTED_FIREWALL_POLICY_RULE', 'TRACKING_STATE']):
            raise ValueError("must be one of enum values ('FIREWALL_RULE_TYPE_UNSPECIFIED', 'HIERARCHICAL_FIREWALL_POLICY_RULE', 'VPC_FIREWALL_RULE', 'IMPLIED_VPC_FIREWALL_RULE', 'SERVERLESS_VPC_ACCESS_MANAGED_FIREWALL_RULE', 'NETWORK_FIREWALL_POLICY_RULE', 'NETWORK_REGIONAL_FIREWALL_POLICY_RULE', 'UNSUPPORTED_FIREWALL_POLICY_RULE', 'TRACKING_STATE')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of FirewallInfo from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of FirewallInfo from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "action": obj.get("action"),
            "direction": obj.get("direction"),
            "displayName": obj.get("displayName"),
            "firewallRuleType": obj.get("firewallRuleType"),
            "networkUri": obj.get("networkUri"),
            "policy": obj.get("policy"),
            "priority": obj.get("priority"),
            "targetServiceAccounts": obj.get("targetServiceAccounts"),
            "targetTags": obj.get("targetTags"),
            "uri": obj.get("uri")
        })
        return _obj



# coding: utf-8

"""
    Network Management API

    The Network Management API provides a collection of network performance monitoring and diagnostic capabilities.

    The version of the OpenAPI document: v1beta1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.edge_location import EdgeLocation
from openapi_client.models.endpoint_info import EndpointInfo
from openapi_client.models.latency_distribution import LatencyDistribution
from openapi_client.models.status import Status
from typing import Optional, Set
from typing_extensions import Self

class ProbingDetails(BaseModel):
    """
    Results of active probing from the last run of the test.
    """ # noqa: E501
    abort_cause: Optional[StrictStr] = Field(default=None, description="The reason probing was aborted.", alias="abortCause")
    destination_egress_location: Optional[EdgeLocation] = Field(default=None, alias="destinationEgressLocation")
    endpoint_info: Optional[EndpointInfo] = Field(default=None, alias="endpointInfo")
    error: Optional[Status] = None
    probing_latency: Optional[LatencyDistribution] = Field(default=None, alias="probingLatency")
    result: Optional[StrictStr] = Field(default=None, description="The overall result of active probing.")
    sent_probe_count: Optional[StrictInt] = Field(default=None, description="Number of probes sent.", alias="sentProbeCount")
    successful_probe_count: Optional[StrictInt] = Field(default=None, description="Number of probes that reached the destination.", alias="successfulProbeCount")
    verify_time: Optional[StrictStr] = Field(default=None, description="The time that reachability was assessed through active probing.", alias="verifyTime")
    __properties: ClassVar[List[str]] = ["abortCause", "destinationEgressLocation", "endpointInfo", "error", "probingLatency", "result", "sentProbeCount", "successfulProbeCount", "verifyTime"]

    @field_validator('abort_cause')
    def abort_cause_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['PROBING_ABORT_CAUSE_UNSPECIFIED', 'PERMISSION_DENIED', 'NO_SOURCE_LOCATION']):
            raise ValueError("must be one of enum values ('PROBING_ABORT_CAUSE_UNSPECIFIED', 'PERMISSION_DENIED', 'NO_SOURCE_LOCATION')")
        return value

    @field_validator('result')
    def result_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['PROBING_RESULT_UNSPECIFIED', 'REACHABLE', 'UNREACHABLE', 'REACHABILITY_INCONSISTENT', 'UNDETERMINED']):
            raise ValueError("must be one of enum values ('PROBING_RESULT_UNSPECIFIED', 'REACHABLE', 'UNREACHABLE', 'REACHABILITY_INCONSISTENT', 'UNDETERMINED')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ProbingDetails from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of destination_egress_location
        if self.destination_egress_location:
            _dict['destinationEgressLocation'] = self.destination_egress_location.to_dict()
        # override the default output from pydantic by calling `to_dict()` of endpoint_info
        if self.endpoint_info:
            _dict['endpointInfo'] = self.endpoint_info.to_dict()
        # override the default output from pydantic by calling `to_dict()` of error
        if self.error:
            _dict['error'] = self.error.to_dict()
        # override the default output from pydantic by calling `to_dict()` of probing_latency
        if self.probing_latency:
            _dict['probingLatency'] = self.probing_latency.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ProbingDetails from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "abortCause": obj.get("abortCause"),
            "destinationEgressLocation": EdgeLocation.from_dict(obj["destinationEgressLocation"]) if obj.get("destinationEgressLocation") is not None else None,
            "endpointInfo": EndpointInfo.from_dict(obj["endpointInfo"]) if obj.get("endpointInfo") is not None else None,
            "error": Status.from_dict(obj["error"]) if obj.get("error") is not None else None,
            "probingLatency": LatencyDistribution.from_dict(obj["probingLatency"]) if obj.get("probingLatency") is not None else None,
            "result": obj.get("result"),
            "sentProbeCount": obj.get("sentProbeCount"),
            "successfulProbeCount": obj.get("successfulProbeCount"),
            "verifyTime": obj.get("verifyTime")
        })
        return _obj



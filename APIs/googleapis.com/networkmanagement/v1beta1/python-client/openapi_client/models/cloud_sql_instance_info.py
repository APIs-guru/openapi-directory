# coding: utf-8

"""
    Network Management API

    The Network Management API provides a collection of network performance monitoring and diagnostic capabilities.

    The version of the OpenAPI document: v1beta1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class CloudSQLInstanceInfo(BaseModel):
    """
    For display only. Metadata associated with a Cloud SQL instance.
    """ # noqa: E501
    display_name: Optional[StrictStr] = Field(default=None, description="Name of a Cloud SQL instance.", alias="displayName")
    external_ip: Optional[StrictStr] = Field(default=None, description="External IP address of a Cloud SQL instance.", alias="externalIp")
    internal_ip: Optional[StrictStr] = Field(default=None, description="Internal IP address of a Cloud SQL instance.", alias="internalIp")
    network_uri: Optional[StrictStr] = Field(default=None, description="URI of a Cloud SQL instance network or empty string if the instance does not have one.", alias="networkUri")
    region: Optional[StrictStr] = Field(default=None, description="Region in which the Cloud SQL instance is running.")
    uri: Optional[StrictStr] = Field(default=None, description="URI of a Cloud SQL instance.")
    __properties: ClassVar[List[str]] = ["displayName", "externalIp", "internalIp", "networkUri", "region", "uri"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CloudSQLInstanceInfo from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CloudSQLInstanceInfo from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "displayName": obj.get("displayName"),
            "externalIp": obj.get("externalIp"),
            "internalIp": obj.get("internalIp"),
            "networkUri": obj.get("networkUri"),
            "region": obj.get("region"),
            "uri": obj.get("uri")
        })
        return _obj



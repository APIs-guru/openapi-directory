# coding: utf-8

"""
    Perspective Comment Analyzer API

    The Perspective Comment Analyzer API provides information about the potential impact of a comment on a conversation (e.g. it can provide a score for the \"toxicity\" of a comment). Users can leverage the \"SuggestCommentScore\" method to submit corrections to improve Perspective over time. Users can set the \"doNotStore\" flag to ensure that all submitted comments are automatically deleted after scores are returned.

    The version of the OpenAPI document: v1alpha1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.context import Context

class TestContext(unittest.TestCase):
    """Context unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> Context:
        """Test Context
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `Context`
        """
        model = Context()
        if include_optional:
            return Context(
                article_and_parent_comment = openapi_client.models.article_and_parent_comment.ArticleAndParentComment(
                    article = openapi_client.models.text_entry.TextEntry(
                        text = '', 
                        type = 'TEXT_TYPE_UNSPECIFIED', ), 
                    parent_comment = openapi_client.models.text_entry.TextEntry(
                        text = '', 
                        type = 'TEXT_TYPE_UNSPECIFIED', ), ),
                entries = [
                    openapi_client.models.text_entry.TextEntry(
                        text = '', 
                        type = 'TEXT_TYPE_UNSPECIFIED', )
                    ]
            )
        else:
            return Context(
        )
        """

    def testContext(self):
        """Test Context"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

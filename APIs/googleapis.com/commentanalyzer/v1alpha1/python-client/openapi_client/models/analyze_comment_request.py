# coding: utf-8

"""
    Perspective Comment Analyzer API

    The Perspective Comment Analyzer API provides information about the potential impact of a comment on a conversation (e.g. it can provide a score for the \"toxicity\" of a comment). Users can leverage the \"SuggestCommentScore\" method to submit corrections to improve Perspective over time. Users can set the \"doNotStore\" flag to ensure that all submitted comments are automatically deleted after scores are returned.

    The version of the OpenAPI document: v1alpha1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.attribute_parameters import AttributeParameters
from openapi_client.models.context import Context
from openapi_client.models.text_entry import TextEntry
from typing import Optional, Set
from typing_extensions import Self

class AnalyzeCommentRequest(BaseModel):
    """
    The comment analysis request message. Next ID: 11
    """ # noqa: E501
    client_token: Optional[StrictStr] = Field(default=None, description="Opaque token that is echoed from the request to the response.", alias="clientToken")
    comment: Optional[TextEntry] = None
    community_id: Optional[StrictStr] = Field(default=None, description="Optional identifier associating this AnalyzeCommentRequest with a particular client's community. Different communities may have different norms and rules. Specifying this value enables us to explore building community-specific models for clients.", alias="communityId")
    context: Optional[Context] = None
    do_not_store: Optional[StrictBool] = Field(default=None, description="Do not store the comment or context sent in this request. By default, the service may store comments/context for debugging purposes.", alias="doNotStore")
    drop_unsupported_attributes: Optional[StrictBool] = Field(default=None, description="If specified, any requested attribute that is requested but not supported for the language detected will be dropped from the returned scores instead of returning an error.", alias="dropUnsupportedAttributes")
    languages: Optional[List[StrictStr]] = Field(default=None, description="The language(s) of the comment and context. If none are specified, we attempt to automatically detect the language. Specifying multiple languages means the text contains multiple lanugages. Both ISO and BCP-47 language codes are accepted. The server returns an error if no language was specified and language detection fails. The server also returns an error if the languages (either specified by the caller, or auto-detected) are not *all* supported by the service.")
    requested_attributes: Optional[Dict[str, AttributeParameters]] = Field(default=None, description="Specification of requested attributes. The AttributeParameters serve as configuration for each associated attribute. The map keys are attribute names. The available attributes may be different on each RFE installation, and can be seen by calling ListAttributes (see above). For the prod installation, known as Perspective API, see https://developers.perspectiveapi.com/s/about-the-api-model-cards.", alias="requestedAttributes")
    session_id: Optional[StrictStr] = Field(default=None, description="Session ID. Used to join related RPCs into a single session. For example, an interactive tool that calls both the AnalyzeComment and SuggestCommentScore RPCs should set all invocations of both RPCs to the same Session ID, typically a random 64-bit integer.", alias="sessionId")
    span_annotations: Optional[StrictBool] = Field(default=None, description="An advisory parameter that will return span annotations if the model is capable of providing scores with sub-comment resolution. This will likely increase the size of the returned message.", alias="spanAnnotations")
    __properties: ClassVar[List[str]] = ["clientToken", "comment", "communityId", "context", "doNotStore", "dropUnsupportedAttributes", "languages", "requestedAttributes", "sessionId", "spanAnnotations"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AnalyzeCommentRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of comment
        if self.comment:
            _dict['comment'] = self.comment.to_dict()
        # override the default output from pydantic by calling `to_dict()` of context
        if self.context:
            _dict['context'] = self.context.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each value in requested_attributes (dict)
        _field_dict = {}
        if self.requested_attributes:
            for _key_requested_attributes in self.requested_attributes:
                if self.requested_attributes[_key_requested_attributes]:
                    _field_dict[_key_requested_attributes] = self.requested_attributes[_key_requested_attributes].to_dict()
            _dict['requestedAttributes'] = _field_dict
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AnalyzeCommentRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "clientToken": obj.get("clientToken"),
            "comment": TextEntry.from_dict(obj["comment"]) if obj.get("comment") is not None else None,
            "communityId": obj.get("communityId"),
            "context": Context.from_dict(obj["context"]) if obj.get("context") is not None else None,
            "doNotStore": obj.get("doNotStore"),
            "dropUnsupportedAttributes": obj.get("dropUnsupportedAttributes"),
            "languages": obj.get("languages"),
            "requestedAttributes": dict(
                (_k, AttributeParameters.from_dict(_v))
                for _k, _v in obj["requestedAttributes"].items()
            )
            if obj.get("requestedAttributes") is not None
            else None,
            "sessionId": obj.get("sessionId"),
            "spanAnnotations": obj.get("spanAnnotations")
        })
        return _obj



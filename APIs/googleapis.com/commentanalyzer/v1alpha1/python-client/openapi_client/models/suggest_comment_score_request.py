# coding: utf-8

"""
    Perspective Comment Analyzer API

    The Perspective Comment Analyzer API provides information about the potential impact of a comment on a conversation (e.g. it can provide a score for the \"toxicity\" of a comment). Users can leverage the \"SuggestCommentScore\" method to submit corrections to improve Perspective over time. Users can set the \"doNotStore\" flag to ensure that all submitted comments are automatically deleted after scores are returned.

    The version of the OpenAPI document: v1alpha1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.attribute_scores import AttributeScores
from openapi_client.models.context import Context
from openapi_client.models.text_entry import TextEntry
from typing import Optional, Set
from typing_extensions import Self

class SuggestCommentScoreRequest(BaseModel):
    """
    The comment score suggestion request message.
    """ # noqa: E501
    attribute_scores: Optional[Dict[str, AttributeScores]] = Field(default=None, description="Attribute scores for the comment. The map keys are attribute names, same as the requested_attribute field in AnalyzeCommentRequest (for example \"ATTACK_ON_AUTHOR\", \"INFLAMMATORY\", etc.). This field has the same type as the `attribute_scores` field in AnalyzeCommentResponse. To specify an overall attribute score for the entire comment as a whole, use the `summary_score` field of the mapped AttributeScores object. To specify scores on specific subparts of the comment, use the `span_scores` field. All SpanScore objects must have begin and end fields set. All Score objects must be explicitly set (for binary classification, use the score values 0 and 1). If Score objects don't include a ScoreType, `PROBABILITY` is assumed. `attribute_scores` must not be empty. The mapped AttributeScores objects also must not be empty. An `INVALID_ARGUMENT` error is returned for all malformed requests.", alias="attributeScores")
    client_token: Optional[StrictStr] = Field(default=None, description="Opaque token that is echoed from the request to the response.", alias="clientToken")
    comment: Optional[TextEntry] = None
    community_id: Optional[StrictStr] = Field(default=None, description="Optional identifier associating this comment score suggestion with a particular sub-community. Different communities may have different norms and rules. Specifying this value enables training community-specific models.", alias="communityId")
    context: Optional[Context] = None
    languages: Optional[List[StrictStr]] = Field(default=None, description="The language(s) of the comment and context. If none are specified, we attempt to automatically detect the language. Both ISO and BCP-47 language codes are accepted.")
    session_id: Optional[StrictStr] = Field(default=None, description="Session ID. Used to join related RPCs into a single session. For example, an interactive tool that calls both the AnalyzeComment and SuggestCommentScore RPCs should set all invocations of both RPCs to the same Session ID, typically a random 64-bit integer.", alias="sessionId")
    __properties: ClassVar[List[str]] = ["attributeScores", "clientToken", "comment", "communityId", "context", "languages", "sessionId"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SuggestCommentScoreRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each value in attribute_scores (dict)
        _field_dict = {}
        if self.attribute_scores:
            for _key_attribute_scores in self.attribute_scores:
                if self.attribute_scores[_key_attribute_scores]:
                    _field_dict[_key_attribute_scores] = self.attribute_scores[_key_attribute_scores].to_dict()
            _dict['attributeScores'] = _field_dict
        # override the default output from pydantic by calling `to_dict()` of comment
        if self.comment:
            _dict['comment'] = self.comment.to_dict()
        # override the default output from pydantic by calling `to_dict()` of context
        if self.context:
            _dict['context'] = self.context.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SuggestCommentScoreRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "attributeScores": dict(
                (_k, AttributeScores.from_dict(_v))
                for _k, _v in obj["attributeScores"].items()
            )
            if obj.get("attributeScores") is not None
            else None,
            "clientToken": obj.get("clientToken"),
            "comment": TextEntry.from_dict(obj["comment"]) if obj.get("comment") is not None else None,
            "communityId": obj.get("communityId"),
            "context": Context.from_dict(obj["context"]) if obj.get("context") is not None else None,
            "languages": obj.get("languages"),
            "sessionId": obj.get("sessionId")
        })
        return _obj



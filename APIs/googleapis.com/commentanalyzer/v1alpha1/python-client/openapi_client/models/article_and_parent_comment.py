# coding: utf-8

"""
    Perspective Comment Analyzer API

    The Perspective Comment Analyzer API provides information about the potential impact of a comment on a conversation (e.g. it can provide a score for the \"toxicity\" of a comment). Users can leverage the \"SuggestCommentScore\" method to submit corrections to improve Perspective over time. Users can set the \"doNotStore\" flag to ensure that all submitted comments are automatically deleted after scores are returned.

    The version of the OpenAPI document: v1alpha1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.text_entry import TextEntry
from typing import Optional, Set
from typing_extensions import Self

class ArticleAndParentComment(BaseModel):
    """
    A type of context specific to a comment left on a single-threaded comment message board, where comments are either a top level comment or the child of a top level comment.
    """ # noqa: E501
    article: Optional[TextEntry] = None
    parent_comment: Optional[TextEntry] = Field(default=None, alias="parentComment")
    __properties: ClassVar[List[str]] = ["article", "parentComment"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ArticleAndParentComment from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of article
        if self.article:
            _dict['article'] = self.article.to_dict()
        # override the default output from pydantic by calling `to_dict()` of parent_comment
        if self.parent_comment:
            _dict['parentComment'] = self.parent_comment.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ArticleAndParentComment from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "article": TextEntry.from_dict(obj["article"]) if obj.get("article") is not None else None,
            "parentComment": TextEntry.from_dict(obj["parentComment"]) if obj.get("parentComment") is not None else None
        })
        return _obj



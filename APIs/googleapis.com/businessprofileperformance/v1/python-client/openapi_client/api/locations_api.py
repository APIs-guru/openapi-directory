# coding: utf-8

"""
    Business Profile Performance API

    The Business Profile Performance API allows merchants to fetch performance reports about their business profile on Google. Note - If you have a quota of 0 after enabling the API, please request for GBP API access.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from pydantic import Field, StrictBool, StrictInt, StrictStr, field_validator
from typing import List, Optional
from typing_extensions import Annotated
from openapi_client.models.fetch_multi_daily_metrics_time_series_response import FetchMultiDailyMetricsTimeSeriesResponse
from openapi_client.models.get_daily_metrics_time_series_response import GetDailyMetricsTimeSeriesResponse
from openapi_client.models.list_search_keyword_impressions_monthly_response import ListSearchKeywordImpressionsMonthlyResponse

from openapi_client.api_client import ApiClient, RequestSerialized
from openapi_client.api_response import ApiResponse
from openapi_client.rest import RESTResponseType


class LocationsApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def businessprofileperformance_locations_fetch_multi_daily_metrics_time_series(
        self,
        location: Annotated[StrictStr, Field(description="Required. The location for which the time series should be fetched. Format: locations/{location_id} where location_id is an unobfuscated listing id.")],
        xgafv: Annotated[Optional[StrictStr], Field(description="V1 error format.")] = None,
        access_token: Annotated[Optional[StrictStr], Field(description="OAuth access token.")] = None,
        alt: Annotated[Optional[StrictStr], Field(description="Data format for response.")] = None,
        param_callback: Annotated[Optional[StrictStr], Field(description="JSONP")] = None,
        fields: Annotated[Optional[StrictStr], Field(description="Selector specifying which fields to include in a partial response.")] = None,
        key: Annotated[Optional[StrictStr], Field(description="API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.")] = None,
        oauth_token: Annotated[Optional[StrictStr], Field(description="OAuth 2.0 token for the current user.")] = None,
        pretty_print: Annotated[Optional[StrictBool], Field(description="Returns response with indentations and line breaks.")] = None,
        quota_user: Annotated[Optional[StrictStr], Field(description="Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.")] = None,
        upload_protocol: Annotated[Optional[StrictStr], Field(description="Upload protocol for media (e.g. \"raw\", \"multipart\").")] = None,
        upload_type: Annotated[Optional[StrictStr], Field(description="Legacy upload protocol for media (e.g. \"media\", \"multipart\").")] = None,
        daily_metrics: Annotated[Optional[List[StrictStr]], Field(description="Required. The metrics to retrieve time series for.")] = None,
        daily_range_end_date_day: Annotated[Optional[StrictInt], Field(description="Day of a month. Must be from 1 to 31 and valid for the year and month, or 0 to specify a year by itself or a year and month where the day isn't significant.")] = None,
        daily_range_end_date_month: Annotated[Optional[StrictInt], Field(description="Month of a year. Must be from 1 to 12, or 0 to specify a year without a month and day.")] = None,
        daily_range_end_date_year: Annotated[Optional[StrictInt], Field(description="Year of the date. Must be from 1 to 9999, or 0 to specify a date without a year.")] = None,
        daily_range_start_date_day: Annotated[Optional[StrictInt], Field(description="Day of a month. Must be from 1 to 31 and valid for the year and month, or 0 to specify a year by itself or a year and month where the day isn't significant.")] = None,
        daily_range_start_date_month: Annotated[Optional[StrictInt], Field(description="Month of a year. Must be from 1 to 12, or 0 to specify a year without a month and day.")] = None,
        daily_range_start_date_year: Annotated[Optional[StrictInt], Field(description="Year of the date. Must be from 1 to 9999, or 0 to specify a date without a year.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> FetchMultiDailyMetricsTimeSeriesResponse:
        """businessprofileperformance_locations_fetch_multi_daily_metrics_time_series

         Returns the values for each date from a given time range and optionally the sub entity type, where applicable, that are associated with the specific daily metrics. Example request: `GET https://businessprofileperformance.googleapis.com/v1/locations/12345:fetchMultiDailyMetricsTimeSeries?dailyMetrics=WEBSITE_CLICKS&dailyMetrics=CALL_CLICKS&daily_range.start_date.year=2022&daily_range.start_date.month=1&daily_range.start_date.day=1&daily_range.end_date.year=2022&daily_range.end_date.month=3&daily_range.end_date.day=31`

        :param location: Required. The location for which the time series should be fetched. Format: locations/{location_id} where location_id is an unobfuscated listing id. (required)
        :type location: str
        :param xgafv: V1 error format.
        :type xgafv: str
        :param access_token: OAuth access token.
        :type access_token: str
        :param alt: Data format for response.
        :type alt: str
        :param param_callback: JSONP
        :type param_callback: str
        :param fields: Selector specifying which fields to include in a partial response.
        :type fields: str
        :param key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
        :type key: str
        :param oauth_token: OAuth 2.0 token for the current user.
        :type oauth_token: str
        :param pretty_print: Returns response with indentations and line breaks.
        :type pretty_print: bool
        :param quota_user: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
        :type quota_user: str
        :param upload_protocol: Upload protocol for media (e.g. \"raw\", \"multipart\").
        :type upload_protocol: str
        :param upload_type: Legacy upload protocol for media (e.g. \"media\", \"multipart\").
        :type upload_type: str
        :param daily_metrics: Required. The metrics to retrieve time series for.
        :type daily_metrics: List[str]
        :param daily_range_end_date_day: Day of a month. Must be from 1 to 31 and valid for the year and month, or 0 to specify a year by itself or a year and month where the day isn't significant.
        :type daily_range_end_date_day: int
        :param daily_range_end_date_month: Month of a year. Must be from 1 to 12, or 0 to specify a year without a month and day.
        :type daily_range_end_date_month: int
        :param daily_range_end_date_year: Year of the date. Must be from 1 to 9999, or 0 to specify a date without a year.
        :type daily_range_end_date_year: int
        :param daily_range_start_date_day: Day of a month. Must be from 1 to 31 and valid for the year and month, or 0 to specify a year by itself or a year and month where the day isn't significant.
        :type daily_range_start_date_day: int
        :param daily_range_start_date_month: Month of a year. Must be from 1 to 12, or 0 to specify a year without a month and day.
        :type daily_range_start_date_month: int
        :param daily_range_start_date_year: Year of the date. Must be from 1 to 9999, or 0 to specify a date without a year.
        :type daily_range_start_date_year: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._businessprofileperformance_locations_fetch_multi_daily_metrics_time_series_serialize(
            location=location,
            xgafv=xgafv,
            access_token=access_token,
            alt=alt,
            param_callback=param_callback,
            fields=fields,
            key=key,
            oauth_token=oauth_token,
            pretty_print=pretty_print,
            quota_user=quota_user,
            upload_protocol=upload_protocol,
            upload_type=upload_type,
            daily_metrics=daily_metrics,
            daily_range_end_date_day=daily_range_end_date_day,
            daily_range_end_date_month=daily_range_end_date_month,
            daily_range_end_date_year=daily_range_end_date_year,
            daily_range_start_date_day=daily_range_start_date_day,
            daily_range_start_date_month=daily_range_start_date_month,
            daily_range_start_date_year=daily_range_start_date_year,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "FetchMultiDailyMetricsTimeSeriesResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def businessprofileperformance_locations_fetch_multi_daily_metrics_time_series_with_http_info(
        self,
        location: Annotated[StrictStr, Field(description="Required. The location for which the time series should be fetched. Format: locations/{location_id} where location_id is an unobfuscated listing id.")],
        xgafv: Annotated[Optional[StrictStr], Field(description="V1 error format.")] = None,
        access_token: Annotated[Optional[StrictStr], Field(description="OAuth access token.")] = None,
        alt: Annotated[Optional[StrictStr], Field(description="Data format for response.")] = None,
        param_callback: Annotated[Optional[StrictStr], Field(description="JSONP")] = None,
        fields: Annotated[Optional[StrictStr], Field(description="Selector specifying which fields to include in a partial response.")] = None,
        key: Annotated[Optional[StrictStr], Field(description="API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.")] = None,
        oauth_token: Annotated[Optional[StrictStr], Field(description="OAuth 2.0 token for the current user.")] = None,
        pretty_print: Annotated[Optional[StrictBool], Field(description="Returns response with indentations and line breaks.")] = None,
        quota_user: Annotated[Optional[StrictStr], Field(description="Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.")] = None,
        upload_protocol: Annotated[Optional[StrictStr], Field(description="Upload protocol for media (e.g. \"raw\", \"multipart\").")] = None,
        upload_type: Annotated[Optional[StrictStr], Field(description="Legacy upload protocol for media (e.g. \"media\", \"multipart\").")] = None,
        daily_metrics: Annotated[Optional[List[StrictStr]], Field(description="Required. The metrics to retrieve time series for.")] = None,
        daily_range_end_date_day: Annotated[Optional[StrictInt], Field(description="Day of a month. Must be from 1 to 31 and valid for the year and month, or 0 to specify a year by itself or a year and month where the day isn't significant.")] = None,
        daily_range_end_date_month: Annotated[Optional[StrictInt], Field(description="Month of a year. Must be from 1 to 12, or 0 to specify a year without a month and day.")] = None,
        daily_range_end_date_year: Annotated[Optional[StrictInt], Field(description="Year of the date. Must be from 1 to 9999, or 0 to specify a date without a year.")] = None,
        daily_range_start_date_day: Annotated[Optional[StrictInt], Field(description="Day of a month. Must be from 1 to 31 and valid for the year and month, or 0 to specify a year by itself or a year and month where the day isn't significant.")] = None,
        daily_range_start_date_month: Annotated[Optional[StrictInt], Field(description="Month of a year. Must be from 1 to 12, or 0 to specify a year without a month and day.")] = None,
        daily_range_start_date_year: Annotated[Optional[StrictInt], Field(description="Year of the date. Must be from 1 to 9999, or 0 to specify a date without a year.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[FetchMultiDailyMetricsTimeSeriesResponse]:
        """businessprofileperformance_locations_fetch_multi_daily_metrics_time_series

         Returns the values for each date from a given time range and optionally the sub entity type, where applicable, that are associated with the specific daily metrics. Example request: `GET https://businessprofileperformance.googleapis.com/v1/locations/12345:fetchMultiDailyMetricsTimeSeries?dailyMetrics=WEBSITE_CLICKS&dailyMetrics=CALL_CLICKS&daily_range.start_date.year=2022&daily_range.start_date.month=1&daily_range.start_date.day=1&daily_range.end_date.year=2022&daily_range.end_date.month=3&daily_range.end_date.day=31`

        :param location: Required. The location for which the time series should be fetched. Format: locations/{location_id} where location_id is an unobfuscated listing id. (required)
        :type location: str
        :param xgafv: V1 error format.
        :type xgafv: str
        :param access_token: OAuth access token.
        :type access_token: str
        :param alt: Data format for response.
        :type alt: str
        :param param_callback: JSONP
        :type param_callback: str
        :param fields: Selector specifying which fields to include in a partial response.
        :type fields: str
        :param key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
        :type key: str
        :param oauth_token: OAuth 2.0 token for the current user.
        :type oauth_token: str
        :param pretty_print: Returns response with indentations and line breaks.
        :type pretty_print: bool
        :param quota_user: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
        :type quota_user: str
        :param upload_protocol: Upload protocol for media (e.g. \"raw\", \"multipart\").
        :type upload_protocol: str
        :param upload_type: Legacy upload protocol for media (e.g. \"media\", \"multipart\").
        :type upload_type: str
        :param daily_metrics: Required. The metrics to retrieve time series for.
        :type daily_metrics: List[str]
        :param daily_range_end_date_day: Day of a month. Must be from 1 to 31 and valid for the year and month, or 0 to specify a year by itself or a year and month where the day isn't significant.
        :type daily_range_end_date_day: int
        :param daily_range_end_date_month: Month of a year. Must be from 1 to 12, or 0 to specify a year without a month and day.
        :type daily_range_end_date_month: int
        :param daily_range_end_date_year: Year of the date. Must be from 1 to 9999, or 0 to specify a date without a year.
        :type daily_range_end_date_year: int
        :param daily_range_start_date_day: Day of a month. Must be from 1 to 31 and valid for the year and month, or 0 to specify a year by itself or a year and month where the day isn't significant.
        :type daily_range_start_date_day: int
        :param daily_range_start_date_month: Month of a year. Must be from 1 to 12, or 0 to specify a year without a month and day.
        :type daily_range_start_date_month: int
        :param daily_range_start_date_year: Year of the date. Must be from 1 to 9999, or 0 to specify a date without a year.
        :type daily_range_start_date_year: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._businessprofileperformance_locations_fetch_multi_daily_metrics_time_series_serialize(
            location=location,
            xgafv=xgafv,
            access_token=access_token,
            alt=alt,
            param_callback=param_callback,
            fields=fields,
            key=key,
            oauth_token=oauth_token,
            pretty_print=pretty_print,
            quota_user=quota_user,
            upload_protocol=upload_protocol,
            upload_type=upload_type,
            daily_metrics=daily_metrics,
            daily_range_end_date_day=daily_range_end_date_day,
            daily_range_end_date_month=daily_range_end_date_month,
            daily_range_end_date_year=daily_range_end_date_year,
            daily_range_start_date_day=daily_range_start_date_day,
            daily_range_start_date_month=daily_range_start_date_month,
            daily_range_start_date_year=daily_range_start_date_year,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "FetchMultiDailyMetricsTimeSeriesResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def businessprofileperformance_locations_fetch_multi_daily_metrics_time_series_without_preload_content(
        self,
        location: Annotated[StrictStr, Field(description="Required. The location for which the time series should be fetched. Format: locations/{location_id} where location_id is an unobfuscated listing id.")],
        xgafv: Annotated[Optional[StrictStr], Field(description="V1 error format.")] = None,
        access_token: Annotated[Optional[StrictStr], Field(description="OAuth access token.")] = None,
        alt: Annotated[Optional[StrictStr], Field(description="Data format for response.")] = None,
        param_callback: Annotated[Optional[StrictStr], Field(description="JSONP")] = None,
        fields: Annotated[Optional[StrictStr], Field(description="Selector specifying which fields to include in a partial response.")] = None,
        key: Annotated[Optional[StrictStr], Field(description="API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.")] = None,
        oauth_token: Annotated[Optional[StrictStr], Field(description="OAuth 2.0 token for the current user.")] = None,
        pretty_print: Annotated[Optional[StrictBool], Field(description="Returns response with indentations and line breaks.")] = None,
        quota_user: Annotated[Optional[StrictStr], Field(description="Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.")] = None,
        upload_protocol: Annotated[Optional[StrictStr], Field(description="Upload protocol for media (e.g. \"raw\", \"multipart\").")] = None,
        upload_type: Annotated[Optional[StrictStr], Field(description="Legacy upload protocol for media (e.g. \"media\", \"multipart\").")] = None,
        daily_metrics: Annotated[Optional[List[StrictStr]], Field(description="Required. The metrics to retrieve time series for.")] = None,
        daily_range_end_date_day: Annotated[Optional[StrictInt], Field(description="Day of a month. Must be from 1 to 31 and valid for the year and month, or 0 to specify a year by itself or a year and month where the day isn't significant.")] = None,
        daily_range_end_date_month: Annotated[Optional[StrictInt], Field(description="Month of a year. Must be from 1 to 12, or 0 to specify a year without a month and day.")] = None,
        daily_range_end_date_year: Annotated[Optional[StrictInt], Field(description="Year of the date. Must be from 1 to 9999, or 0 to specify a date without a year.")] = None,
        daily_range_start_date_day: Annotated[Optional[StrictInt], Field(description="Day of a month. Must be from 1 to 31 and valid for the year and month, or 0 to specify a year by itself or a year and month where the day isn't significant.")] = None,
        daily_range_start_date_month: Annotated[Optional[StrictInt], Field(description="Month of a year. Must be from 1 to 12, or 0 to specify a year without a month and day.")] = None,
        daily_range_start_date_year: Annotated[Optional[StrictInt], Field(description="Year of the date. Must be from 1 to 9999, or 0 to specify a date without a year.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """businessprofileperformance_locations_fetch_multi_daily_metrics_time_series

         Returns the values for each date from a given time range and optionally the sub entity type, where applicable, that are associated with the specific daily metrics. Example request: `GET https://businessprofileperformance.googleapis.com/v1/locations/12345:fetchMultiDailyMetricsTimeSeries?dailyMetrics=WEBSITE_CLICKS&dailyMetrics=CALL_CLICKS&daily_range.start_date.year=2022&daily_range.start_date.month=1&daily_range.start_date.day=1&daily_range.end_date.year=2022&daily_range.end_date.month=3&daily_range.end_date.day=31`

        :param location: Required. The location for which the time series should be fetched. Format: locations/{location_id} where location_id is an unobfuscated listing id. (required)
        :type location: str
        :param xgafv: V1 error format.
        :type xgafv: str
        :param access_token: OAuth access token.
        :type access_token: str
        :param alt: Data format for response.
        :type alt: str
        :param param_callback: JSONP
        :type param_callback: str
        :param fields: Selector specifying which fields to include in a partial response.
        :type fields: str
        :param key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
        :type key: str
        :param oauth_token: OAuth 2.0 token for the current user.
        :type oauth_token: str
        :param pretty_print: Returns response with indentations and line breaks.
        :type pretty_print: bool
        :param quota_user: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
        :type quota_user: str
        :param upload_protocol: Upload protocol for media (e.g. \"raw\", \"multipart\").
        :type upload_protocol: str
        :param upload_type: Legacy upload protocol for media (e.g. \"media\", \"multipart\").
        :type upload_type: str
        :param daily_metrics: Required. The metrics to retrieve time series for.
        :type daily_metrics: List[str]
        :param daily_range_end_date_day: Day of a month. Must be from 1 to 31 and valid for the year and month, or 0 to specify a year by itself or a year and month where the day isn't significant.
        :type daily_range_end_date_day: int
        :param daily_range_end_date_month: Month of a year. Must be from 1 to 12, or 0 to specify a year without a month and day.
        :type daily_range_end_date_month: int
        :param daily_range_end_date_year: Year of the date. Must be from 1 to 9999, or 0 to specify a date without a year.
        :type daily_range_end_date_year: int
        :param daily_range_start_date_day: Day of a month. Must be from 1 to 31 and valid for the year and month, or 0 to specify a year by itself or a year and month where the day isn't significant.
        :type daily_range_start_date_day: int
        :param daily_range_start_date_month: Month of a year. Must be from 1 to 12, or 0 to specify a year without a month and day.
        :type daily_range_start_date_month: int
        :param daily_range_start_date_year: Year of the date. Must be from 1 to 9999, or 0 to specify a date without a year.
        :type daily_range_start_date_year: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._businessprofileperformance_locations_fetch_multi_daily_metrics_time_series_serialize(
            location=location,
            xgafv=xgafv,
            access_token=access_token,
            alt=alt,
            param_callback=param_callback,
            fields=fields,
            key=key,
            oauth_token=oauth_token,
            pretty_print=pretty_print,
            quota_user=quota_user,
            upload_protocol=upload_protocol,
            upload_type=upload_type,
            daily_metrics=daily_metrics,
            daily_range_end_date_day=daily_range_end_date_day,
            daily_range_end_date_month=daily_range_end_date_month,
            daily_range_end_date_year=daily_range_end_date_year,
            daily_range_start_date_day=daily_range_start_date_day,
            daily_range_start_date_month=daily_range_start_date_month,
            daily_range_start_date_year=daily_range_start_date_year,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "FetchMultiDailyMetricsTimeSeriesResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _businessprofileperformance_locations_fetch_multi_daily_metrics_time_series_serialize(
        self,
        location,
        xgafv,
        access_token,
        alt,
        param_callback,
        fields,
        key,
        oauth_token,
        pretty_print,
        quota_user,
        upload_protocol,
        upload_type,
        daily_metrics,
        daily_range_end_date_day,
        daily_range_end_date_month,
        daily_range_end_date_year,
        daily_range_start_date_day,
        daily_range_start_date_month,
        daily_range_start_date_year,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'dailyMetrics': 'multi',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if location is not None:
            _path_params['location'] = location
        # process the query parameters
        if xgafv is not None:
            
            _query_params.append(('$.xgafv', xgafv))
            
        if access_token is not None:
            
            _query_params.append(('access_token', access_token))
            
        if alt is not None:
            
            _query_params.append(('alt', alt))
            
        if param_callback is not None:
            
            _query_params.append(('callback', param_callback))
            
        if fields is not None:
            
            _query_params.append(('fields', fields))
            
        if key is not None:
            
            _query_params.append(('key', key))
            
        if oauth_token is not None:
            
            _query_params.append(('oauth_token', oauth_token))
            
        if pretty_print is not None:
            
            _query_params.append(('prettyPrint', pretty_print))
            
        if quota_user is not None:
            
            _query_params.append(('quotaUser', quota_user))
            
        if upload_protocol is not None:
            
            _query_params.append(('upload_protocol', upload_protocol))
            
        if upload_type is not None:
            
            _query_params.append(('uploadType', upload_type))
            
        if daily_metrics is not None:
            
            _query_params.append(('dailyMetrics', daily_metrics))
            
        if daily_range_end_date_day is not None:
            
            _query_params.append(('dailyRange.endDate.day', daily_range_end_date_day))
            
        if daily_range_end_date_month is not None:
            
            _query_params.append(('dailyRange.endDate.month', daily_range_end_date_month))
            
        if daily_range_end_date_year is not None:
            
            _query_params.append(('dailyRange.endDate.year', daily_range_end_date_year))
            
        if daily_range_start_date_day is not None:
            
            _query_params.append(('dailyRange.startDate.day', daily_range_start_date_day))
            
        if daily_range_start_date_month is not None:
            
            _query_params.append(('dailyRange.startDate.month', daily_range_start_date_month))
            
        if daily_range_start_date_year is not None:
            
            _query_params.append(('dailyRange.startDate.year', daily_range_start_date_year))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/v1/{location}:fetchMultiDailyMetricsTimeSeries',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def businessprofileperformance_locations_get_daily_metrics_time_series(
        self,
        name: Annotated[StrictStr, Field(description="Required. The location for which the time series should be fetched. Format: locations/{location_id} where location_id is an unobfuscated listing id.")],
        xgafv: Annotated[Optional[StrictStr], Field(description="V1 error format.")] = None,
        access_token: Annotated[Optional[StrictStr], Field(description="OAuth access token.")] = None,
        alt: Annotated[Optional[StrictStr], Field(description="Data format for response.")] = None,
        param_callback: Annotated[Optional[StrictStr], Field(description="JSONP")] = None,
        fields: Annotated[Optional[StrictStr], Field(description="Selector specifying which fields to include in a partial response.")] = None,
        key: Annotated[Optional[StrictStr], Field(description="API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.")] = None,
        oauth_token: Annotated[Optional[StrictStr], Field(description="OAuth 2.0 token for the current user.")] = None,
        pretty_print: Annotated[Optional[StrictBool], Field(description="Returns response with indentations and line breaks.")] = None,
        quota_user: Annotated[Optional[StrictStr], Field(description="Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.")] = None,
        upload_protocol: Annotated[Optional[StrictStr], Field(description="Upload protocol for media (e.g. \"raw\", \"multipart\").")] = None,
        upload_type: Annotated[Optional[StrictStr], Field(description="Legacy upload protocol for media (e.g. \"media\", \"multipart\").")] = None,
        daily_metric: Annotated[Optional[StrictStr], Field(description="Required. The metric to retrieve time series.")] = None,
        daily_range_end_date_day: Annotated[Optional[StrictInt], Field(description="Day of a month. Must be from 1 to 31 and valid for the year and month, or 0 to specify a year by itself or a year and month where the day isn't significant.")] = None,
        daily_range_end_date_month: Annotated[Optional[StrictInt], Field(description="Month of a year. Must be from 1 to 12, or 0 to specify a year without a month and day.")] = None,
        daily_range_end_date_year: Annotated[Optional[StrictInt], Field(description="Year of the date. Must be from 1 to 9999, or 0 to specify a date without a year.")] = None,
        daily_range_start_date_day: Annotated[Optional[StrictInt], Field(description="Day of a month. Must be from 1 to 31 and valid for the year and month, or 0 to specify a year by itself or a year and month where the day isn't significant.")] = None,
        daily_range_start_date_month: Annotated[Optional[StrictInt], Field(description="Month of a year. Must be from 1 to 12, or 0 to specify a year without a month and day.")] = None,
        daily_range_start_date_year: Annotated[Optional[StrictInt], Field(description="Year of the date. Must be from 1 to 9999, or 0 to specify a date without a year.")] = None,
        daily_sub_entity_type_day_of_week: Annotated[Optional[StrictStr], Field(description="Represents the day of the week. Eg: MONDAY. Currently supported DailyMetrics = NONE.")] = None,
        daily_sub_entity_type_time_of_day_hours: Annotated[Optional[StrictInt], Field(description="Hours of day in 24 hour format. Should be from 0 to 23. An API may choose to allow the value \"24:00:00\" for scenarios like business closing time.")] = None,
        daily_sub_entity_type_time_of_day_minutes: Annotated[Optional[StrictInt], Field(description="Minutes of hour of day. Must be from 0 to 59.")] = None,
        daily_sub_entity_type_time_of_day_nanos: Annotated[Optional[StrictInt], Field(description="Fractions of seconds in nanoseconds. Must be from 0 to 999,999,999.")] = None,
        daily_sub_entity_type_time_of_day_seconds: Annotated[Optional[StrictInt], Field(description="Seconds of minutes of the time. Must normally be from 0 to 59. An API may allow the value 60 if it allows leap-seconds.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> GetDailyMetricsTimeSeriesResponse:
        """businessprofileperformance_locations_get_daily_metrics_time_series

         Returns the values for each date from a given time range that are associated with the specific daily metric. Example request: `GET https://businessprofileperformance.googleapis.com/v1/locations/12345:getDailyMetricsTimeSeries?dailyMetric=WEBSITE_CLICKS&daily_range.start_date.year=2022&daily_range.start_date.month=1&daily_range.start_date.day=1&daily_range.end_date.year=2022&daily_range.end_date.month=3&daily_range.end_date.day=31`

        :param name: Required. The location for which the time series should be fetched. Format: locations/{location_id} where location_id is an unobfuscated listing id. (required)
        :type name: str
        :param xgafv: V1 error format.
        :type xgafv: str
        :param access_token: OAuth access token.
        :type access_token: str
        :param alt: Data format for response.
        :type alt: str
        :param param_callback: JSONP
        :type param_callback: str
        :param fields: Selector specifying which fields to include in a partial response.
        :type fields: str
        :param key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
        :type key: str
        :param oauth_token: OAuth 2.0 token for the current user.
        :type oauth_token: str
        :param pretty_print: Returns response with indentations and line breaks.
        :type pretty_print: bool
        :param quota_user: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
        :type quota_user: str
        :param upload_protocol: Upload protocol for media (e.g. \"raw\", \"multipart\").
        :type upload_protocol: str
        :param upload_type: Legacy upload protocol for media (e.g. \"media\", \"multipart\").
        :type upload_type: str
        :param daily_metric: Required. The metric to retrieve time series.
        :type daily_metric: str
        :param daily_range_end_date_day: Day of a month. Must be from 1 to 31 and valid for the year and month, or 0 to specify a year by itself or a year and month where the day isn't significant.
        :type daily_range_end_date_day: int
        :param daily_range_end_date_month: Month of a year. Must be from 1 to 12, or 0 to specify a year without a month and day.
        :type daily_range_end_date_month: int
        :param daily_range_end_date_year: Year of the date. Must be from 1 to 9999, or 0 to specify a date without a year.
        :type daily_range_end_date_year: int
        :param daily_range_start_date_day: Day of a month. Must be from 1 to 31 and valid for the year and month, or 0 to specify a year by itself or a year and month where the day isn't significant.
        :type daily_range_start_date_day: int
        :param daily_range_start_date_month: Month of a year. Must be from 1 to 12, or 0 to specify a year without a month and day.
        :type daily_range_start_date_month: int
        :param daily_range_start_date_year: Year of the date. Must be from 1 to 9999, or 0 to specify a date without a year.
        :type daily_range_start_date_year: int
        :param daily_sub_entity_type_day_of_week: Represents the day of the week. Eg: MONDAY. Currently supported DailyMetrics = NONE.
        :type daily_sub_entity_type_day_of_week: str
        :param daily_sub_entity_type_time_of_day_hours: Hours of day in 24 hour format. Should be from 0 to 23. An API may choose to allow the value \"24:00:00\" for scenarios like business closing time.
        :type daily_sub_entity_type_time_of_day_hours: int
        :param daily_sub_entity_type_time_of_day_minutes: Minutes of hour of day. Must be from 0 to 59.
        :type daily_sub_entity_type_time_of_day_minutes: int
        :param daily_sub_entity_type_time_of_day_nanos: Fractions of seconds in nanoseconds. Must be from 0 to 999,999,999.
        :type daily_sub_entity_type_time_of_day_nanos: int
        :param daily_sub_entity_type_time_of_day_seconds: Seconds of minutes of the time. Must normally be from 0 to 59. An API may allow the value 60 if it allows leap-seconds.
        :type daily_sub_entity_type_time_of_day_seconds: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._businessprofileperformance_locations_get_daily_metrics_time_series_serialize(
            name=name,
            xgafv=xgafv,
            access_token=access_token,
            alt=alt,
            param_callback=param_callback,
            fields=fields,
            key=key,
            oauth_token=oauth_token,
            pretty_print=pretty_print,
            quota_user=quota_user,
            upload_protocol=upload_protocol,
            upload_type=upload_type,
            daily_metric=daily_metric,
            daily_range_end_date_day=daily_range_end_date_day,
            daily_range_end_date_month=daily_range_end_date_month,
            daily_range_end_date_year=daily_range_end_date_year,
            daily_range_start_date_day=daily_range_start_date_day,
            daily_range_start_date_month=daily_range_start_date_month,
            daily_range_start_date_year=daily_range_start_date_year,
            daily_sub_entity_type_day_of_week=daily_sub_entity_type_day_of_week,
            daily_sub_entity_type_time_of_day_hours=daily_sub_entity_type_time_of_day_hours,
            daily_sub_entity_type_time_of_day_minutes=daily_sub_entity_type_time_of_day_minutes,
            daily_sub_entity_type_time_of_day_nanos=daily_sub_entity_type_time_of_day_nanos,
            daily_sub_entity_type_time_of_day_seconds=daily_sub_entity_type_time_of_day_seconds,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetDailyMetricsTimeSeriesResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def businessprofileperformance_locations_get_daily_metrics_time_series_with_http_info(
        self,
        name: Annotated[StrictStr, Field(description="Required. The location for which the time series should be fetched. Format: locations/{location_id} where location_id is an unobfuscated listing id.")],
        xgafv: Annotated[Optional[StrictStr], Field(description="V1 error format.")] = None,
        access_token: Annotated[Optional[StrictStr], Field(description="OAuth access token.")] = None,
        alt: Annotated[Optional[StrictStr], Field(description="Data format for response.")] = None,
        param_callback: Annotated[Optional[StrictStr], Field(description="JSONP")] = None,
        fields: Annotated[Optional[StrictStr], Field(description="Selector specifying which fields to include in a partial response.")] = None,
        key: Annotated[Optional[StrictStr], Field(description="API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.")] = None,
        oauth_token: Annotated[Optional[StrictStr], Field(description="OAuth 2.0 token for the current user.")] = None,
        pretty_print: Annotated[Optional[StrictBool], Field(description="Returns response with indentations and line breaks.")] = None,
        quota_user: Annotated[Optional[StrictStr], Field(description="Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.")] = None,
        upload_protocol: Annotated[Optional[StrictStr], Field(description="Upload protocol for media (e.g. \"raw\", \"multipart\").")] = None,
        upload_type: Annotated[Optional[StrictStr], Field(description="Legacy upload protocol for media (e.g. \"media\", \"multipart\").")] = None,
        daily_metric: Annotated[Optional[StrictStr], Field(description="Required. The metric to retrieve time series.")] = None,
        daily_range_end_date_day: Annotated[Optional[StrictInt], Field(description="Day of a month. Must be from 1 to 31 and valid for the year and month, or 0 to specify a year by itself or a year and month where the day isn't significant.")] = None,
        daily_range_end_date_month: Annotated[Optional[StrictInt], Field(description="Month of a year. Must be from 1 to 12, or 0 to specify a year without a month and day.")] = None,
        daily_range_end_date_year: Annotated[Optional[StrictInt], Field(description="Year of the date. Must be from 1 to 9999, or 0 to specify a date without a year.")] = None,
        daily_range_start_date_day: Annotated[Optional[StrictInt], Field(description="Day of a month. Must be from 1 to 31 and valid for the year and month, or 0 to specify a year by itself or a year and month where the day isn't significant.")] = None,
        daily_range_start_date_month: Annotated[Optional[StrictInt], Field(description="Month of a year. Must be from 1 to 12, or 0 to specify a year without a month and day.")] = None,
        daily_range_start_date_year: Annotated[Optional[StrictInt], Field(description="Year of the date. Must be from 1 to 9999, or 0 to specify a date without a year.")] = None,
        daily_sub_entity_type_day_of_week: Annotated[Optional[StrictStr], Field(description="Represents the day of the week. Eg: MONDAY. Currently supported DailyMetrics = NONE.")] = None,
        daily_sub_entity_type_time_of_day_hours: Annotated[Optional[StrictInt], Field(description="Hours of day in 24 hour format. Should be from 0 to 23. An API may choose to allow the value \"24:00:00\" for scenarios like business closing time.")] = None,
        daily_sub_entity_type_time_of_day_minutes: Annotated[Optional[StrictInt], Field(description="Minutes of hour of day. Must be from 0 to 59.")] = None,
        daily_sub_entity_type_time_of_day_nanos: Annotated[Optional[StrictInt], Field(description="Fractions of seconds in nanoseconds. Must be from 0 to 999,999,999.")] = None,
        daily_sub_entity_type_time_of_day_seconds: Annotated[Optional[StrictInt], Field(description="Seconds of minutes of the time. Must normally be from 0 to 59. An API may allow the value 60 if it allows leap-seconds.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[GetDailyMetricsTimeSeriesResponse]:
        """businessprofileperformance_locations_get_daily_metrics_time_series

         Returns the values for each date from a given time range that are associated with the specific daily metric. Example request: `GET https://businessprofileperformance.googleapis.com/v1/locations/12345:getDailyMetricsTimeSeries?dailyMetric=WEBSITE_CLICKS&daily_range.start_date.year=2022&daily_range.start_date.month=1&daily_range.start_date.day=1&daily_range.end_date.year=2022&daily_range.end_date.month=3&daily_range.end_date.day=31`

        :param name: Required. The location for which the time series should be fetched. Format: locations/{location_id} where location_id is an unobfuscated listing id. (required)
        :type name: str
        :param xgafv: V1 error format.
        :type xgafv: str
        :param access_token: OAuth access token.
        :type access_token: str
        :param alt: Data format for response.
        :type alt: str
        :param param_callback: JSONP
        :type param_callback: str
        :param fields: Selector specifying which fields to include in a partial response.
        :type fields: str
        :param key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
        :type key: str
        :param oauth_token: OAuth 2.0 token for the current user.
        :type oauth_token: str
        :param pretty_print: Returns response with indentations and line breaks.
        :type pretty_print: bool
        :param quota_user: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
        :type quota_user: str
        :param upload_protocol: Upload protocol for media (e.g. \"raw\", \"multipart\").
        :type upload_protocol: str
        :param upload_type: Legacy upload protocol for media (e.g. \"media\", \"multipart\").
        :type upload_type: str
        :param daily_metric: Required. The metric to retrieve time series.
        :type daily_metric: str
        :param daily_range_end_date_day: Day of a month. Must be from 1 to 31 and valid for the year and month, or 0 to specify a year by itself or a year and month where the day isn't significant.
        :type daily_range_end_date_day: int
        :param daily_range_end_date_month: Month of a year. Must be from 1 to 12, or 0 to specify a year without a month and day.
        :type daily_range_end_date_month: int
        :param daily_range_end_date_year: Year of the date. Must be from 1 to 9999, or 0 to specify a date without a year.
        :type daily_range_end_date_year: int
        :param daily_range_start_date_day: Day of a month. Must be from 1 to 31 and valid for the year and month, or 0 to specify a year by itself or a year and month where the day isn't significant.
        :type daily_range_start_date_day: int
        :param daily_range_start_date_month: Month of a year. Must be from 1 to 12, or 0 to specify a year without a month and day.
        :type daily_range_start_date_month: int
        :param daily_range_start_date_year: Year of the date. Must be from 1 to 9999, or 0 to specify a date without a year.
        :type daily_range_start_date_year: int
        :param daily_sub_entity_type_day_of_week: Represents the day of the week. Eg: MONDAY. Currently supported DailyMetrics = NONE.
        :type daily_sub_entity_type_day_of_week: str
        :param daily_sub_entity_type_time_of_day_hours: Hours of day in 24 hour format. Should be from 0 to 23. An API may choose to allow the value \"24:00:00\" for scenarios like business closing time.
        :type daily_sub_entity_type_time_of_day_hours: int
        :param daily_sub_entity_type_time_of_day_minutes: Minutes of hour of day. Must be from 0 to 59.
        :type daily_sub_entity_type_time_of_day_minutes: int
        :param daily_sub_entity_type_time_of_day_nanos: Fractions of seconds in nanoseconds. Must be from 0 to 999,999,999.
        :type daily_sub_entity_type_time_of_day_nanos: int
        :param daily_sub_entity_type_time_of_day_seconds: Seconds of minutes of the time. Must normally be from 0 to 59. An API may allow the value 60 if it allows leap-seconds.
        :type daily_sub_entity_type_time_of_day_seconds: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._businessprofileperformance_locations_get_daily_metrics_time_series_serialize(
            name=name,
            xgafv=xgafv,
            access_token=access_token,
            alt=alt,
            param_callback=param_callback,
            fields=fields,
            key=key,
            oauth_token=oauth_token,
            pretty_print=pretty_print,
            quota_user=quota_user,
            upload_protocol=upload_protocol,
            upload_type=upload_type,
            daily_metric=daily_metric,
            daily_range_end_date_day=daily_range_end_date_day,
            daily_range_end_date_month=daily_range_end_date_month,
            daily_range_end_date_year=daily_range_end_date_year,
            daily_range_start_date_day=daily_range_start_date_day,
            daily_range_start_date_month=daily_range_start_date_month,
            daily_range_start_date_year=daily_range_start_date_year,
            daily_sub_entity_type_day_of_week=daily_sub_entity_type_day_of_week,
            daily_sub_entity_type_time_of_day_hours=daily_sub_entity_type_time_of_day_hours,
            daily_sub_entity_type_time_of_day_minutes=daily_sub_entity_type_time_of_day_minutes,
            daily_sub_entity_type_time_of_day_nanos=daily_sub_entity_type_time_of_day_nanos,
            daily_sub_entity_type_time_of_day_seconds=daily_sub_entity_type_time_of_day_seconds,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetDailyMetricsTimeSeriesResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def businessprofileperformance_locations_get_daily_metrics_time_series_without_preload_content(
        self,
        name: Annotated[StrictStr, Field(description="Required. The location for which the time series should be fetched. Format: locations/{location_id} where location_id is an unobfuscated listing id.")],
        xgafv: Annotated[Optional[StrictStr], Field(description="V1 error format.")] = None,
        access_token: Annotated[Optional[StrictStr], Field(description="OAuth access token.")] = None,
        alt: Annotated[Optional[StrictStr], Field(description="Data format for response.")] = None,
        param_callback: Annotated[Optional[StrictStr], Field(description="JSONP")] = None,
        fields: Annotated[Optional[StrictStr], Field(description="Selector specifying which fields to include in a partial response.")] = None,
        key: Annotated[Optional[StrictStr], Field(description="API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.")] = None,
        oauth_token: Annotated[Optional[StrictStr], Field(description="OAuth 2.0 token for the current user.")] = None,
        pretty_print: Annotated[Optional[StrictBool], Field(description="Returns response with indentations and line breaks.")] = None,
        quota_user: Annotated[Optional[StrictStr], Field(description="Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.")] = None,
        upload_protocol: Annotated[Optional[StrictStr], Field(description="Upload protocol for media (e.g. \"raw\", \"multipart\").")] = None,
        upload_type: Annotated[Optional[StrictStr], Field(description="Legacy upload protocol for media (e.g. \"media\", \"multipart\").")] = None,
        daily_metric: Annotated[Optional[StrictStr], Field(description="Required. The metric to retrieve time series.")] = None,
        daily_range_end_date_day: Annotated[Optional[StrictInt], Field(description="Day of a month. Must be from 1 to 31 and valid for the year and month, or 0 to specify a year by itself or a year and month where the day isn't significant.")] = None,
        daily_range_end_date_month: Annotated[Optional[StrictInt], Field(description="Month of a year. Must be from 1 to 12, or 0 to specify a year without a month and day.")] = None,
        daily_range_end_date_year: Annotated[Optional[StrictInt], Field(description="Year of the date. Must be from 1 to 9999, or 0 to specify a date without a year.")] = None,
        daily_range_start_date_day: Annotated[Optional[StrictInt], Field(description="Day of a month. Must be from 1 to 31 and valid for the year and month, or 0 to specify a year by itself or a year and month where the day isn't significant.")] = None,
        daily_range_start_date_month: Annotated[Optional[StrictInt], Field(description="Month of a year. Must be from 1 to 12, or 0 to specify a year without a month and day.")] = None,
        daily_range_start_date_year: Annotated[Optional[StrictInt], Field(description="Year of the date. Must be from 1 to 9999, or 0 to specify a date without a year.")] = None,
        daily_sub_entity_type_day_of_week: Annotated[Optional[StrictStr], Field(description="Represents the day of the week. Eg: MONDAY. Currently supported DailyMetrics = NONE.")] = None,
        daily_sub_entity_type_time_of_day_hours: Annotated[Optional[StrictInt], Field(description="Hours of day in 24 hour format. Should be from 0 to 23. An API may choose to allow the value \"24:00:00\" for scenarios like business closing time.")] = None,
        daily_sub_entity_type_time_of_day_minutes: Annotated[Optional[StrictInt], Field(description="Minutes of hour of day. Must be from 0 to 59.")] = None,
        daily_sub_entity_type_time_of_day_nanos: Annotated[Optional[StrictInt], Field(description="Fractions of seconds in nanoseconds. Must be from 0 to 999,999,999.")] = None,
        daily_sub_entity_type_time_of_day_seconds: Annotated[Optional[StrictInt], Field(description="Seconds of minutes of the time. Must normally be from 0 to 59. An API may allow the value 60 if it allows leap-seconds.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """businessprofileperformance_locations_get_daily_metrics_time_series

         Returns the values for each date from a given time range that are associated with the specific daily metric. Example request: `GET https://businessprofileperformance.googleapis.com/v1/locations/12345:getDailyMetricsTimeSeries?dailyMetric=WEBSITE_CLICKS&daily_range.start_date.year=2022&daily_range.start_date.month=1&daily_range.start_date.day=1&daily_range.end_date.year=2022&daily_range.end_date.month=3&daily_range.end_date.day=31`

        :param name: Required. The location for which the time series should be fetched. Format: locations/{location_id} where location_id is an unobfuscated listing id. (required)
        :type name: str
        :param xgafv: V1 error format.
        :type xgafv: str
        :param access_token: OAuth access token.
        :type access_token: str
        :param alt: Data format for response.
        :type alt: str
        :param param_callback: JSONP
        :type param_callback: str
        :param fields: Selector specifying which fields to include in a partial response.
        :type fields: str
        :param key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
        :type key: str
        :param oauth_token: OAuth 2.0 token for the current user.
        :type oauth_token: str
        :param pretty_print: Returns response with indentations and line breaks.
        :type pretty_print: bool
        :param quota_user: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
        :type quota_user: str
        :param upload_protocol: Upload protocol for media (e.g. \"raw\", \"multipart\").
        :type upload_protocol: str
        :param upload_type: Legacy upload protocol for media (e.g. \"media\", \"multipart\").
        :type upload_type: str
        :param daily_metric: Required. The metric to retrieve time series.
        :type daily_metric: str
        :param daily_range_end_date_day: Day of a month. Must be from 1 to 31 and valid for the year and month, or 0 to specify a year by itself or a year and month where the day isn't significant.
        :type daily_range_end_date_day: int
        :param daily_range_end_date_month: Month of a year. Must be from 1 to 12, or 0 to specify a year without a month and day.
        :type daily_range_end_date_month: int
        :param daily_range_end_date_year: Year of the date. Must be from 1 to 9999, or 0 to specify a date without a year.
        :type daily_range_end_date_year: int
        :param daily_range_start_date_day: Day of a month. Must be from 1 to 31 and valid for the year and month, or 0 to specify a year by itself or a year and month where the day isn't significant.
        :type daily_range_start_date_day: int
        :param daily_range_start_date_month: Month of a year. Must be from 1 to 12, or 0 to specify a year without a month and day.
        :type daily_range_start_date_month: int
        :param daily_range_start_date_year: Year of the date. Must be from 1 to 9999, or 0 to specify a date without a year.
        :type daily_range_start_date_year: int
        :param daily_sub_entity_type_day_of_week: Represents the day of the week. Eg: MONDAY. Currently supported DailyMetrics = NONE.
        :type daily_sub_entity_type_day_of_week: str
        :param daily_sub_entity_type_time_of_day_hours: Hours of day in 24 hour format. Should be from 0 to 23. An API may choose to allow the value \"24:00:00\" for scenarios like business closing time.
        :type daily_sub_entity_type_time_of_day_hours: int
        :param daily_sub_entity_type_time_of_day_minutes: Minutes of hour of day. Must be from 0 to 59.
        :type daily_sub_entity_type_time_of_day_minutes: int
        :param daily_sub_entity_type_time_of_day_nanos: Fractions of seconds in nanoseconds. Must be from 0 to 999,999,999.
        :type daily_sub_entity_type_time_of_day_nanos: int
        :param daily_sub_entity_type_time_of_day_seconds: Seconds of minutes of the time. Must normally be from 0 to 59. An API may allow the value 60 if it allows leap-seconds.
        :type daily_sub_entity_type_time_of_day_seconds: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._businessprofileperformance_locations_get_daily_metrics_time_series_serialize(
            name=name,
            xgafv=xgafv,
            access_token=access_token,
            alt=alt,
            param_callback=param_callback,
            fields=fields,
            key=key,
            oauth_token=oauth_token,
            pretty_print=pretty_print,
            quota_user=quota_user,
            upload_protocol=upload_protocol,
            upload_type=upload_type,
            daily_metric=daily_metric,
            daily_range_end_date_day=daily_range_end_date_day,
            daily_range_end_date_month=daily_range_end_date_month,
            daily_range_end_date_year=daily_range_end_date_year,
            daily_range_start_date_day=daily_range_start_date_day,
            daily_range_start_date_month=daily_range_start_date_month,
            daily_range_start_date_year=daily_range_start_date_year,
            daily_sub_entity_type_day_of_week=daily_sub_entity_type_day_of_week,
            daily_sub_entity_type_time_of_day_hours=daily_sub_entity_type_time_of_day_hours,
            daily_sub_entity_type_time_of_day_minutes=daily_sub_entity_type_time_of_day_minutes,
            daily_sub_entity_type_time_of_day_nanos=daily_sub_entity_type_time_of_day_nanos,
            daily_sub_entity_type_time_of_day_seconds=daily_sub_entity_type_time_of_day_seconds,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GetDailyMetricsTimeSeriesResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _businessprofileperformance_locations_get_daily_metrics_time_series_serialize(
        self,
        name,
        xgafv,
        access_token,
        alt,
        param_callback,
        fields,
        key,
        oauth_token,
        pretty_print,
        quota_user,
        upload_protocol,
        upload_type,
        daily_metric,
        daily_range_end_date_day,
        daily_range_end_date_month,
        daily_range_end_date_year,
        daily_range_start_date_day,
        daily_range_start_date_month,
        daily_range_start_date_year,
        daily_sub_entity_type_day_of_week,
        daily_sub_entity_type_time_of_day_hours,
        daily_sub_entity_type_time_of_day_minutes,
        daily_sub_entity_type_time_of_day_nanos,
        daily_sub_entity_type_time_of_day_seconds,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if name is not None:
            _path_params['name'] = name
        # process the query parameters
        if xgafv is not None:
            
            _query_params.append(('$.xgafv', xgafv))
            
        if access_token is not None:
            
            _query_params.append(('access_token', access_token))
            
        if alt is not None:
            
            _query_params.append(('alt', alt))
            
        if param_callback is not None:
            
            _query_params.append(('callback', param_callback))
            
        if fields is not None:
            
            _query_params.append(('fields', fields))
            
        if key is not None:
            
            _query_params.append(('key', key))
            
        if oauth_token is not None:
            
            _query_params.append(('oauth_token', oauth_token))
            
        if pretty_print is not None:
            
            _query_params.append(('prettyPrint', pretty_print))
            
        if quota_user is not None:
            
            _query_params.append(('quotaUser', quota_user))
            
        if upload_protocol is not None:
            
            _query_params.append(('upload_protocol', upload_protocol))
            
        if upload_type is not None:
            
            _query_params.append(('uploadType', upload_type))
            
        if daily_metric is not None:
            
            _query_params.append(('dailyMetric', daily_metric))
            
        if daily_range_end_date_day is not None:
            
            _query_params.append(('dailyRange.endDate.day', daily_range_end_date_day))
            
        if daily_range_end_date_month is not None:
            
            _query_params.append(('dailyRange.endDate.month', daily_range_end_date_month))
            
        if daily_range_end_date_year is not None:
            
            _query_params.append(('dailyRange.endDate.year', daily_range_end_date_year))
            
        if daily_range_start_date_day is not None:
            
            _query_params.append(('dailyRange.startDate.day', daily_range_start_date_day))
            
        if daily_range_start_date_month is not None:
            
            _query_params.append(('dailyRange.startDate.month', daily_range_start_date_month))
            
        if daily_range_start_date_year is not None:
            
            _query_params.append(('dailyRange.startDate.year', daily_range_start_date_year))
            
        if daily_sub_entity_type_day_of_week is not None:
            
            _query_params.append(('dailySubEntityType.dayOfWeek', daily_sub_entity_type_day_of_week))
            
        if daily_sub_entity_type_time_of_day_hours is not None:
            
            _query_params.append(('dailySubEntityType.timeOfDay.hours', daily_sub_entity_type_time_of_day_hours))
            
        if daily_sub_entity_type_time_of_day_minutes is not None:
            
            _query_params.append(('dailySubEntityType.timeOfDay.minutes', daily_sub_entity_type_time_of_day_minutes))
            
        if daily_sub_entity_type_time_of_day_nanos is not None:
            
            _query_params.append(('dailySubEntityType.timeOfDay.nanos', daily_sub_entity_type_time_of_day_nanos))
            
        if daily_sub_entity_type_time_of_day_seconds is not None:
            
            _query_params.append(('dailySubEntityType.timeOfDay.seconds', daily_sub_entity_type_time_of_day_seconds))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/v1/{name}:getDailyMetricsTimeSeries',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def businessprofileperformance_locations_searchkeywords_impressions_monthly_list(
        self,
        parent: Annotated[StrictStr, Field(description="Required. The location for which the time series should be fetched. Format: locations/{location_id} where location_id is an unobfuscated listing id.")],
        xgafv: Annotated[Optional[StrictStr], Field(description="V1 error format.")] = None,
        access_token: Annotated[Optional[StrictStr], Field(description="OAuth access token.")] = None,
        alt: Annotated[Optional[StrictStr], Field(description="Data format for response.")] = None,
        param_callback: Annotated[Optional[StrictStr], Field(description="JSONP")] = None,
        fields: Annotated[Optional[StrictStr], Field(description="Selector specifying which fields to include in a partial response.")] = None,
        key: Annotated[Optional[StrictStr], Field(description="API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.")] = None,
        oauth_token: Annotated[Optional[StrictStr], Field(description="OAuth 2.0 token for the current user.")] = None,
        pretty_print: Annotated[Optional[StrictBool], Field(description="Returns response with indentations and line breaks.")] = None,
        quota_user: Annotated[Optional[StrictStr], Field(description="Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.")] = None,
        upload_protocol: Annotated[Optional[StrictStr], Field(description="Upload protocol for media (e.g. \"raw\", \"multipart\").")] = None,
        upload_type: Annotated[Optional[StrictStr], Field(description="Legacy upload protocol for media (e.g. \"media\", \"multipart\").")] = None,
        monthly_range_end_month_day: Annotated[Optional[StrictInt], Field(description="Day of a month. Must be from 1 to 31 and valid for the year and month, or 0 to specify a year by itself or a year and month where the day isn't significant.")] = None,
        monthly_range_end_month_month: Annotated[Optional[StrictInt], Field(description="Month of a year. Must be from 1 to 12, or 0 to specify a year without a month and day.")] = None,
        monthly_range_end_month_year: Annotated[Optional[StrictInt], Field(description="Year of the date. Must be from 1 to 9999, or 0 to specify a date without a year.")] = None,
        monthly_range_start_month_day: Annotated[Optional[StrictInt], Field(description="Day of a month. Must be from 1 to 31 and valid for the year and month, or 0 to specify a year by itself or a year and month where the day isn't significant.")] = None,
        monthly_range_start_month_month: Annotated[Optional[StrictInt], Field(description="Month of a year. Must be from 1 to 12, or 0 to specify a year without a month and day.")] = None,
        monthly_range_start_month_year: Annotated[Optional[StrictInt], Field(description="Year of the date. Must be from 1 to 9999, or 0 to specify a date without a year.")] = None,
        page_size: Annotated[Optional[StrictInt], Field(description="Optional. The number of results requested. The default page size is 100. Page size can be set to a maximum of 100.")] = None,
        page_token: Annotated[Optional[StrictStr], Field(description="Optional. A token indicating the next paginated result to be returned.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ListSearchKeywordImpressionsMonthlyResponse:
        """businessprofileperformance_locations_searchkeywords_impressions_monthly_list

        Returns the search keywords used to find a business in search or maps. Each search keyword is accompanied by impressions which are aggregated on a monthly basis. Example request: `GET https://businessprofileperformance.googleapis.com/v1/locations/12345/searchkeywords/impressions/monthly?monthly_range.start_month.year=2022&monthly_range.start_month.month=1&monthly_range.end_month.year=2022&monthly_range.end_month.month=3`

        :param parent: Required. The location for which the time series should be fetched. Format: locations/{location_id} where location_id is an unobfuscated listing id. (required)
        :type parent: str
        :param xgafv: V1 error format.
        :type xgafv: str
        :param access_token: OAuth access token.
        :type access_token: str
        :param alt: Data format for response.
        :type alt: str
        :param param_callback: JSONP
        :type param_callback: str
        :param fields: Selector specifying which fields to include in a partial response.
        :type fields: str
        :param key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
        :type key: str
        :param oauth_token: OAuth 2.0 token for the current user.
        :type oauth_token: str
        :param pretty_print: Returns response with indentations and line breaks.
        :type pretty_print: bool
        :param quota_user: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
        :type quota_user: str
        :param upload_protocol: Upload protocol for media (e.g. \"raw\", \"multipart\").
        :type upload_protocol: str
        :param upload_type: Legacy upload protocol for media (e.g. \"media\", \"multipart\").
        :type upload_type: str
        :param monthly_range_end_month_day: Day of a month. Must be from 1 to 31 and valid for the year and month, or 0 to specify a year by itself or a year and month where the day isn't significant.
        :type monthly_range_end_month_day: int
        :param monthly_range_end_month_month: Month of a year. Must be from 1 to 12, or 0 to specify a year without a month and day.
        :type monthly_range_end_month_month: int
        :param monthly_range_end_month_year: Year of the date. Must be from 1 to 9999, or 0 to specify a date without a year.
        :type monthly_range_end_month_year: int
        :param monthly_range_start_month_day: Day of a month. Must be from 1 to 31 and valid for the year and month, or 0 to specify a year by itself or a year and month where the day isn't significant.
        :type monthly_range_start_month_day: int
        :param monthly_range_start_month_month: Month of a year. Must be from 1 to 12, or 0 to specify a year without a month and day.
        :type monthly_range_start_month_month: int
        :param monthly_range_start_month_year: Year of the date. Must be from 1 to 9999, or 0 to specify a date without a year.
        :type monthly_range_start_month_year: int
        :param page_size: Optional. The number of results requested. The default page size is 100. Page size can be set to a maximum of 100.
        :type page_size: int
        :param page_token: Optional. A token indicating the next paginated result to be returned.
        :type page_token: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._businessprofileperformance_locations_searchkeywords_impressions_monthly_list_serialize(
            parent=parent,
            xgafv=xgafv,
            access_token=access_token,
            alt=alt,
            param_callback=param_callback,
            fields=fields,
            key=key,
            oauth_token=oauth_token,
            pretty_print=pretty_print,
            quota_user=quota_user,
            upload_protocol=upload_protocol,
            upload_type=upload_type,
            monthly_range_end_month_day=monthly_range_end_month_day,
            monthly_range_end_month_month=monthly_range_end_month_month,
            monthly_range_end_month_year=monthly_range_end_month_year,
            monthly_range_start_month_day=monthly_range_start_month_day,
            monthly_range_start_month_month=monthly_range_start_month_month,
            monthly_range_start_month_year=monthly_range_start_month_year,
            page_size=page_size,
            page_token=page_token,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ListSearchKeywordImpressionsMonthlyResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def businessprofileperformance_locations_searchkeywords_impressions_monthly_list_with_http_info(
        self,
        parent: Annotated[StrictStr, Field(description="Required. The location for which the time series should be fetched. Format: locations/{location_id} where location_id is an unobfuscated listing id.")],
        xgafv: Annotated[Optional[StrictStr], Field(description="V1 error format.")] = None,
        access_token: Annotated[Optional[StrictStr], Field(description="OAuth access token.")] = None,
        alt: Annotated[Optional[StrictStr], Field(description="Data format for response.")] = None,
        param_callback: Annotated[Optional[StrictStr], Field(description="JSONP")] = None,
        fields: Annotated[Optional[StrictStr], Field(description="Selector specifying which fields to include in a partial response.")] = None,
        key: Annotated[Optional[StrictStr], Field(description="API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.")] = None,
        oauth_token: Annotated[Optional[StrictStr], Field(description="OAuth 2.0 token for the current user.")] = None,
        pretty_print: Annotated[Optional[StrictBool], Field(description="Returns response with indentations and line breaks.")] = None,
        quota_user: Annotated[Optional[StrictStr], Field(description="Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.")] = None,
        upload_protocol: Annotated[Optional[StrictStr], Field(description="Upload protocol for media (e.g. \"raw\", \"multipart\").")] = None,
        upload_type: Annotated[Optional[StrictStr], Field(description="Legacy upload protocol for media (e.g. \"media\", \"multipart\").")] = None,
        monthly_range_end_month_day: Annotated[Optional[StrictInt], Field(description="Day of a month. Must be from 1 to 31 and valid for the year and month, or 0 to specify a year by itself or a year and month where the day isn't significant.")] = None,
        monthly_range_end_month_month: Annotated[Optional[StrictInt], Field(description="Month of a year. Must be from 1 to 12, or 0 to specify a year without a month and day.")] = None,
        monthly_range_end_month_year: Annotated[Optional[StrictInt], Field(description="Year of the date. Must be from 1 to 9999, or 0 to specify a date without a year.")] = None,
        monthly_range_start_month_day: Annotated[Optional[StrictInt], Field(description="Day of a month. Must be from 1 to 31 and valid for the year and month, or 0 to specify a year by itself or a year and month where the day isn't significant.")] = None,
        monthly_range_start_month_month: Annotated[Optional[StrictInt], Field(description="Month of a year. Must be from 1 to 12, or 0 to specify a year without a month and day.")] = None,
        monthly_range_start_month_year: Annotated[Optional[StrictInt], Field(description="Year of the date. Must be from 1 to 9999, or 0 to specify a date without a year.")] = None,
        page_size: Annotated[Optional[StrictInt], Field(description="Optional. The number of results requested. The default page size is 100. Page size can be set to a maximum of 100.")] = None,
        page_token: Annotated[Optional[StrictStr], Field(description="Optional. A token indicating the next paginated result to be returned.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[ListSearchKeywordImpressionsMonthlyResponse]:
        """businessprofileperformance_locations_searchkeywords_impressions_monthly_list

        Returns the search keywords used to find a business in search or maps. Each search keyword is accompanied by impressions which are aggregated on a monthly basis. Example request: `GET https://businessprofileperformance.googleapis.com/v1/locations/12345/searchkeywords/impressions/monthly?monthly_range.start_month.year=2022&monthly_range.start_month.month=1&monthly_range.end_month.year=2022&monthly_range.end_month.month=3`

        :param parent: Required. The location for which the time series should be fetched. Format: locations/{location_id} where location_id is an unobfuscated listing id. (required)
        :type parent: str
        :param xgafv: V1 error format.
        :type xgafv: str
        :param access_token: OAuth access token.
        :type access_token: str
        :param alt: Data format for response.
        :type alt: str
        :param param_callback: JSONP
        :type param_callback: str
        :param fields: Selector specifying which fields to include in a partial response.
        :type fields: str
        :param key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
        :type key: str
        :param oauth_token: OAuth 2.0 token for the current user.
        :type oauth_token: str
        :param pretty_print: Returns response with indentations and line breaks.
        :type pretty_print: bool
        :param quota_user: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
        :type quota_user: str
        :param upload_protocol: Upload protocol for media (e.g. \"raw\", \"multipart\").
        :type upload_protocol: str
        :param upload_type: Legacy upload protocol for media (e.g. \"media\", \"multipart\").
        :type upload_type: str
        :param monthly_range_end_month_day: Day of a month. Must be from 1 to 31 and valid for the year and month, or 0 to specify a year by itself or a year and month where the day isn't significant.
        :type monthly_range_end_month_day: int
        :param monthly_range_end_month_month: Month of a year. Must be from 1 to 12, or 0 to specify a year without a month and day.
        :type monthly_range_end_month_month: int
        :param monthly_range_end_month_year: Year of the date. Must be from 1 to 9999, or 0 to specify a date without a year.
        :type monthly_range_end_month_year: int
        :param monthly_range_start_month_day: Day of a month. Must be from 1 to 31 and valid for the year and month, or 0 to specify a year by itself or a year and month where the day isn't significant.
        :type monthly_range_start_month_day: int
        :param monthly_range_start_month_month: Month of a year. Must be from 1 to 12, or 0 to specify a year without a month and day.
        :type monthly_range_start_month_month: int
        :param monthly_range_start_month_year: Year of the date. Must be from 1 to 9999, or 0 to specify a date without a year.
        :type monthly_range_start_month_year: int
        :param page_size: Optional. The number of results requested. The default page size is 100. Page size can be set to a maximum of 100.
        :type page_size: int
        :param page_token: Optional. A token indicating the next paginated result to be returned.
        :type page_token: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._businessprofileperformance_locations_searchkeywords_impressions_monthly_list_serialize(
            parent=parent,
            xgafv=xgafv,
            access_token=access_token,
            alt=alt,
            param_callback=param_callback,
            fields=fields,
            key=key,
            oauth_token=oauth_token,
            pretty_print=pretty_print,
            quota_user=quota_user,
            upload_protocol=upload_protocol,
            upload_type=upload_type,
            monthly_range_end_month_day=monthly_range_end_month_day,
            monthly_range_end_month_month=monthly_range_end_month_month,
            monthly_range_end_month_year=monthly_range_end_month_year,
            monthly_range_start_month_day=monthly_range_start_month_day,
            monthly_range_start_month_month=monthly_range_start_month_month,
            monthly_range_start_month_year=monthly_range_start_month_year,
            page_size=page_size,
            page_token=page_token,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ListSearchKeywordImpressionsMonthlyResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def businessprofileperformance_locations_searchkeywords_impressions_monthly_list_without_preload_content(
        self,
        parent: Annotated[StrictStr, Field(description="Required. The location for which the time series should be fetched. Format: locations/{location_id} where location_id is an unobfuscated listing id.")],
        xgafv: Annotated[Optional[StrictStr], Field(description="V1 error format.")] = None,
        access_token: Annotated[Optional[StrictStr], Field(description="OAuth access token.")] = None,
        alt: Annotated[Optional[StrictStr], Field(description="Data format for response.")] = None,
        param_callback: Annotated[Optional[StrictStr], Field(description="JSONP")] = None,
        fields: Annotated[Optional[StrictStr], Field(description="Selector specifying which fields to include in a partial response.")] = None,
        key: Annotated[Optional[StrictStr], Field(description="API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.")] = None,
        oauth_token: Annotated[Optional[StrictStr], Field(description="OAuth 2.0 token for the current user.")] = None,
        pretty_print: Annotated[Optional[StrictBool], Field(description="Returns response with indentations and line breaks.")] = None,
        quota_user: Annotated[Optional[StrictStr], Field(description="Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.")] = None,
        upload_protocol: Annotated[Optional[StrictStr], Field(description="Upload protocol for media (e.g. \"raw\", \"multipart\").")] = None,
        upload_type: Annotated[Optional[StrictStr], Field(description="Legacy upload protocol for media (e.g. \"media\", \"multipart\").")] = None,
        monthly_range_end_month_day: Annotated[Optional[StrictInt], Field(description="Day of a month. Must be from 1 to 31 and valid for the year and month, or 0 to specify a year by itself or a year and month where the day isn't significant.")] = None,
        monthly_range_end_month_month: Annotated[Optional[StrictInt], Field(description="Month of a year. Must be from 1 to 12, or 0 to specify a year without a month and day.")] = None,
        monthly_range_end_month_year: Annotated[Optional[StrictInt], Field(description="Year of the date. Must be from 1 to 9999, or 0 to specify a date without a year.")] = None,
        monthly_range_start_month_day: Annotated[Optional[StrictInt], Field(description="Day of a month. Must be from 1 to 31 and valid for the year and month, or 0 to specify a year by itself or a year and month where the day isn't significant.")] = None,
        monthly_range_start_month_month: Annotated[Optional[StrictInt], Field(description="Month of a year. Must be from 1 to 12, or 0 to specify a year without a month and day.")] = None,
        monthly_range_start_month_year: Annotated[Optional[StrictInt], Field(description="Year of the date. Must be from 1 to 9999, or 0 to specify a date without a year.")] = None,
        page_size: Annotated[Optional[StrictInt], Field(description="Optional. The number of results requested. The default page size is 100. Page size can be set to a maximum of 100.")] = None,
        page_token: Annotated[Optional[StrictStr], Field(description="Optional. A token indicating the next paginated result to be returned.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """businessprofileperformance_locations_searchkeywords_impressions_monthly_list

        Returns the search keywords used to find a business in search or maps. Each search keyword is accompanied by impressions which are aggregated on a monthly basis. Example request: `GET https://businessprofileperformance.googleapis.com/v1/locations/12345/searchkeywords/impressions/monthly?monthly_range.start_month.year=2022&monthly_range.start_month.month=1&monthly_range.end_month.year=2022&monthly_range.end_month.month=3`

        :param parent: Required. The location for which the time series should be fetched. Format: locations/{location_id} where location_id is an unobfuscated listing id. (required)
        :type parent: str
        :param xgafv: V1 error format.
        :type xgafv: str
        :param access_token: OAuth access token.
        :type access_token: str
        :param alt: Data format for response.
        :type alt: str
        :param param_callback: JSONP
        :type param_callback: str
        :param fields: Selector specifying which fields to include in a partial response.
        :type fields: str
        :param key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
        :type key: str
        :param oauth_token: OAuth 2.0 token for the current user.
        :type oauth_token: str
        :param pretty_print: Returns response with indentations and line breaks.
        :type pretty_print: bool
        :param quota_user: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
        :type quota_user: str
        :param upload_protocol: Upload protocol for media (e.g. \"raw\", \"multipart\").
        :type upload_protocol: str
        :param upload_type: Legacy upload protocol for media (e.g. \"media\", \"multipart\").
        :type upload_type: str
        :param monthly_range_end_month_day: Day of a month. Must be from 1 to 31 and valid for the year and month, or 0 to specify a year by itself or a year and month where the day isn't significant.
        :type monthly_range_end_month_day: int
        :param monthly_range_end_month_month: Month of a year. Must be from 1 to 12, or 0 to specify a year without a month and day.
        :type monthly_range_end_month_month: int
        :param monthly_range_end_month_year: Year of the date. Must be from 1 to 9999, or 0 to specify a date without a year.
        :type monthly_range_end_month_year: int
        :param monthly_range_start_month_day: Day of a month. Must be from 1 to 31 and valid for the year and month, or 0 to specify a year by itself or a year and month where the day isn't significant.
        :type monthly_range_start_month_day: int
        :param monthly_range_start_month_month: Month of a year. Must be from 1 to 12, or 0 to specify a year without a month and day.
        :type monthly_range_start_month_month: int
        :param monthly_range_start_month_year: Year of the date. Must be from 1 to 9999, or 0 to specify a date without a year.
        :type monthly_range_start_month_year: int
        :param page_size: Optional. The number of results requested. The default page size is 100. Page size can be set to a maximum of 100.
        :type page_size: int
        :param page_token: Optional. A token indicating the next paginated result to be returned.
        :type page_token: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._businessprofileperformance_locations_searchkeywords_impressions_monthly_list_serialize(
            parent=parent,
            xgafv=xgafv,
            access_token=access_token,
            alt=alt,
            param_callback=param_callback,
            fields=fields,
            key=key,
            oauth_token=oauth_token,
            pretty_print=pretty_print,
            quota_user=quota_user,
            upload_protocol=upload_protocol,
            upload_type=upload_type,
            monthly_range_end_month_day=monthly_range_end_month_day,
            monthly_range_end_month_month=monthly_range_end_month_month,
            monthly_range_end_month_year=monthly_range_end_month_year,
            monthly_range_start_month_day=monthly_range_start_month_day,
            monthly_range_start_month_month=monthly_range_start_month_month,
            monthly_range_start_month_year=monthly_range_start_month_year,
            page_size=page_size,
            page_token=page_token,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ListSearchKeywordImpressionsMonthlyResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _businessprofileperformance_locations_searchkeywords_impressions_monthly_list_serialize(
        self,
        parent,
        xgafv,
        access_token,
        alt,
        param_callback,
        fields,
        key,
        oauth_token,
        pretty_print,
        quota_user,
        upload_protocol,
        upload_type,
        monthly_range_end_month_day,
        monthly_range_end_month_month,
        monthly_range_end_month_year,
        monthly_range_start_month_day,
        monthly_range_start_month_month,
        monthly_range_start_month_year,
        page_size,
        page_token,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if parent is not None:
            _path_params['parent'] = parent
        # process the query parameters
        if xgafv is not None:
            
            _query_params.append(('$.xgafv', xgafv))
            
        if access_token is not None:
            
            _query_params.append(('access_token', access_token))
            
        if alt is not None:
            
            _query_params.append(('alt', alt))
            
        if param_callback is not None:
            
            _query_params.append(('callback', param_callback))
            
        if fields is not None:
            
            _query_params.append(('fields', fields))
            
        if key is not None:
            
            _query_params.append(('key', key))
            
        if oauth_token is not None:
            
            _query_params.append(('oauth_token', oauth_token))
            
        if pretty_print is not None:
            
            _query_params.append(('prettyPrint', pretty_print))
            
        if quota_user is not None:
            
            _query_params.append(('quotaUser', quota_user))
            
        if upload_protocol is not None:
            
            _query_params.append(('upload_protocol', upload_protocol))
            
        if upload_type is not None:
            
            _query_params.append(('uploadType', upload_type))
            
        if monthly_range_end_month_day is not None:
            
            _query_params.append(('monthlyRange.endMonth.day', monthly_range_end_month_day))
            
        if monthly_range_end_month_month is not None:
            
            _query_params.append(('monthlyRange.endMonth.month', monthly_range_end_month_month))
            
        if monthly_range_end_month_year is not None:
            
            _query_params.append(('monthlyRange.endMonth.year', monthly_range_end_month_year))
            
        if monthly_range_start_month_day is not None:
            
            _query_params.append(('monthlyRange.startMonth.day', monthly_range_start_month_day))
            
        if monthly_range_start_month_month is not None:
            
            _query_params.append(('monthlyRange.startMonth.month', monthly_range_start_month_month))
            
        if monthly_range_start_month_year is not None:
            
            _query_params.append(('monthlyRange.startMonth.year', monthly_range_start_month_year))
            
        if page_size is not None:
            
            _query_params.append(('pageSize', page_size))
            
        if page_token is not None:
            
            _query_params.append(('pageToken', page_token))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/v1/{parent}/searchkeywords/impressions/monthly',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )



# coding: utf-8

"""
    Business Profile Performance API

    The Business Profile Performance API allows merchants to fetch performance reports about their business profile on Google. Note - If you have a quota of 0 after enabling the API, please request for GBP API access.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBytes, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from openapi_client.models.search_keyword_count import SearchKeywordCount
from typing import Optional, Set
from typing_extensions import Self

class ListSearchKeywordImpressionsMonthlyResponse(BaseModel):
    """
    Represents the response for ListSearchKeywordImpressionsMonthly.
    """ # noqa: E501
    next_page_token: Optional[Union[StrictBytes, StrictStr]] = Field(default=None, description="A token indicating the last paginated result returned. This can be used by succeeding requests to get the next \"page\" of keywords. It will only be present when there are more results to be returned.", alias="nextPageToken")
    search_keywords_counts: Optional[List[SearchKeywordCount]] = Field(default=None, description="Search terms which have been used to find a business.", alias="searchKeywordsCounts")
    __properties: ClassVar[List[str]] = ["nextPageToken", "searchKeywordsCounts"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ListSearchKeywordImpressionsMonthlyResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in search_keywords_counts (list)
        _items = []
        if self.search_keywords_counts:
            for _item_search_keywords_counts in self.search_keywords_counts:
                if _item_search_keywords_counts:
                    _items.append(_item_search_keywords_counts.to_dict())
            _dict['searchKeywordsCounts'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ListSearchKeywordImpressionsMonthlyResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "nextPageToken": obj.get("nextPageToken"),
            "searchKeywordsCounts": [SearchKeywordCount.from_dict(_item) for _item in obj["searchKeywordsCounts"]] if obj.get("searchKeywordsCounts") is not None else None
        })
        return _obj



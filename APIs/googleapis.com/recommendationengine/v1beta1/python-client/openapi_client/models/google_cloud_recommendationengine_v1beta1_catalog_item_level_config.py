# coding: utf-8

"""
    Recommendations AI (Beta)

    Note that we now highly recommend new customers to use Retail API, which incorporates the GA version of the Recommendations AI funtionalities. To enable Retail API, please visit https://console.cloud.google.com/apis/library/retail.googleapis.com. The Recommendations AI service enables customers to build end-to-end personalized recommendation systems without requiring a high level of expertise in machine learning, recommendation system, or Google Cloud.

    The version of the OpenAPI document: v1beta1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudRecommendationengineV1beta1CatalogItemLevelConfig(BaseModel):
    """
    Configures the catalog level that users send events to, and the level at which predictions are made.
    """ # noqa: E501
    event_item_level: Optional[StrictStr] = Field(default=None, description="Optional. Level of the catalog at which events are uploaded. See https://cloud.google.com/recommendations-ai/docs/catalog#catalog-levels for more details.", alias="eventItemLevel")
    predict_item_level: Optional[StrictStr] = Field(default=None, description="Optional. Level of the catalog at which predictions are made. See https://cloud.google.com/recommendations-ai/docs/catalog#catalog-levels for more details.", alias="predictItemLevel")
    __properties: ClassVar[List[str]] = ["eventItemLevel", "predictItemLevel"]

    @field_validator('event_item_level')
    def event_item_level_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['CATALOG_ITEM_LEVEL_UNSPECIFIED', 'VARIANT', 'MASTER']):
            raise ValueError("must be one of enum values ('CATALOG_ITEM_LEVEL_UNSPECIFIED', 'VARIANT', 'MASTER')")
        return value

    @field_validator('predict_item_level')
    def predict_item_level_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['CATALOG_ITEM_LEVEL_UNSPECIFIED', 'VARIANT', 'MASTER']):
            raise ValueError("must be one of enum values ('CATALOG_ITEM_LEVEL_UNSPECIFIED', 'VARIANT', 'MASTER')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudRecommendationengineV1beta1CatalogItemLevelConfig from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudRecommendationengineV1beta1CatalogItemLevelConfig from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "eventItemLevel": obj.get("eventItemLevel"),
            "predictItemLevel": obj.get("predictItemLevel")
        })
        return _obj



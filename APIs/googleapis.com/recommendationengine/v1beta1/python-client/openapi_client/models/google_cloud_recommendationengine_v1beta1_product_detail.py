# coding: utf-8

"""
    Recommendations AI (Beta)

    Note that we now highly recommend new customers to use Retail API, which incorporates the GA version of the Recommendations AI funtionalities. To enable Retail API, please visit https://console.cloud.google.com/apis/library/retail.googleapis.com. The Recommendations AI service enables customers to build end-to-end personalized recommendation systems without requiring a high level of expertise in machine learning, recommendation system, or Google Cloud.

    The version of the OpenAPI document: v1beta1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from openapi_client.models.google_cloud_recommendationengine_v1beta1_feature_map import GoogleCloudRecommendationengineV1beta1FeatureMap
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudRecommendationengineV1beta1ProductDetail(BaseModel):
    """
    Detailed product information associated with a user event.
    """ # noqa: E501
    available_quantity: Optional[StrictInt] = Field(default=None, description="Optional. Quantity of the products in stock when a user event happens. Optional. If provided, this overrides the available quantity in Catalog for this event. and can only be set if `stock_status` is set to `IN_STOCK`. Note that if an item is out of stock, you must set the `stock_state` field to be `OUT_OF_STOCK`. Leaving this field unspecified / as zero is not sufficient to mark the item out of stock.", alias="availableQuantity")
    currency_code: Optional[StrictStr] = Field(default=None, description="Optional. Currency code for price/costs. Use three-character ISO-4217 code. Required only if originalPrice or displayPrice is set.", alias="currencyCode")
    display_price: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Optional. Display price of the product (e.g. discounted price). If provided, this will override the display price in Catalog for this product.", alias="displayPrice")
    id: Optional[StrictStr] = Field(default=None, description="Required. Catalog item ID. UTF-8 encoded string with a length limit of 128 characters.")
    item_attributes: Optional[GoogleCloudRecommendationengineV1beta1FeatureMap] = Field(default=None, alias="itemAttributes")
    original_price: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Optional. Original price of the product. If provided, this will override the original price in Catalog for this product.", alias="originalPrice")
    quantity: Optional[StrictInt] = Field(default=None, description="Optional. Quantity of the product associated with the user event. For example, this field will be 2 if two products are added to the shopping cart for `add-to-cart` event. Required for `add-to-cart`, `add-to-list`, `remove-from-cart`, `checkout-start`, `purchase-complete`, `refund` event types.")
    stock_state: Optional[StrictStr] = Field(default=None, description="Optional. Item stock state. If provided, this overrides the stock state in Catalog for items in this event.", alias="stockState")
    __properties: ClassVar[List[str]] = ["availableQuantity", "currencyCode", "displayPrice", "id", "itemAttributes", "originalPrice", "quantity", "stockState"]

    @field_validator('stock_state')
    def stock_state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['STOCK_STATE_UNSPECIFIED', 'IN_STOCK', 'OUT_OF_STOCK', 'PREORDER', 'BACKORDER']):
            raise ValueError("must be one of enum values ('STOCK_STATE_UNSPECIFIED', 'IN_STOCK', 'OUT_OF_STOCK', 'PREORDER', 'BACKORDER')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudRecommendationengineV1beta1ProductDetail from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of item_attributes
        if self.item_attributes:
            _dict['itemAttributes'] = self.item_attributes.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudRecommendationengineV1beta1ProductDetail from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "availableQuantity": obj.get("availableQuantity"),
            "currencyCode": obj.get("currencyCode"),
            "displayPrice": obj.get("displayPrice"),
            "id": obj.get("id"),
            "itemAttributes": GoogleCloudRecommendationengineV1beta1FeatureMap.from_dict(obj["itemAttributes"]) if obj.get("itemAttributes") is not None else None,
            "originalPrice": obj.get("originalPrice"),
            "quantity": obj.get("quantity"),
            "stockState": obj.get("stockState")
        })
        return _obj



# coding: utf-8

"""
    Recommendations AI (Beta)

    Note that we now highly recommend new customers to use Retail API, which incorporates the GA version of the Recommendations AI funtionalities. To enable Retail API, please visit https://console.cloud.google.com/apis/library/retail.googleapis.com. The Recommendations AI service enables customers to build end-to-end personalized recommendation systems without requiring a high level of expertise in machine learning, recommendation system, or Google Cloud.

    The version of the OpenAPI document: v1beta1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_cloud_recommendationengine_v1beta1_feature_map_float_list import GoogleCloudRecommendationengineV1beta1FeatureMapFloatList
from openapi_client.models.google_cloud_recommendationengine_v1beta1_feature_map_string_list import GoogleCloudRecommendationengineV1beta1FeatureMapStringList
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudRecommendationengineV1beta1FeatureMap(BaseModel):
    """
    FeatureMap represents extra features that customers want to include in the recommendation model for catalogs/user events as categorical/numerical features.
    """ # noqa: E501
    categorical_features: Optional[Dict[str, GoogleCloudRecommendationengineV1beta1FeatureMapStringList]] = Field(default=None, description="Categorical features that can take on one of a limited number of possible values. Some examples would be the brand/maker of a product, or country of a customer. Feature names and values must be UTF-8 encoded strings. For example: `{ \"colors\": {\"value\": [\"yellow\", \"green\"]}, \"sizes\": {\"value\":[\"S\", \"M\"]}`", alias="categoricalFeatures")
    numerical_features: Optional[Dict[str, GoogleCloudRecommendationengineV1beta1FeatureMapFloatList]] = Field(default=None, description="Numerical features. Some examples would be the height/weight of a product, or age of a customer. Feature names must be UTF-8 encoded strings. For example: `{ \"lengths_cm\": {\"value\":[2.3, 15.4]}, \"heights_cm\": {\"value\":[8.1, 6.4]} }`", alias="numericalFeatures")
    __properties: ClassVar[List[str]] = ["categoricalFeatures", "numericalFeatures"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudRecommendationengineV1beta1FeatureMap from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each value in categorical_features (dict)
        _field_dict = {}
        if self.categorical_features:
            for _key_categorical_features in self.categorical_features:
                if self.categorical_features[_key_categorical_features]:
                    _field_dict[_key_categorical_features] = self.categorical_features[_key_categorical_features].to_dict()
            _dict['categoricalFeatures'] = _field_dict
        # override the default output from pydantic by calling `to_dict()` of each value in numerical_features (dict)
        _field_dict = {}
        if self.numerical_features:
            for _key_numerical_features in self.numerical_features:
                if self.numerical_features[_key_numerical_features]:
                    _field_dict[_key_numerical_features] = self.numerical_features[_key_numerical_features].to_dict()
            _dict['numericalFeatures'] = _field_dict
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudRecommendationengineV1beta1FeatureMap from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "categoricalFeatures": dict(
                (_k, GoogleCloudRecommendationengineV1beta1FeatureMapStringList.from_dict(_v))
                for _k, _v in obj["categoricalFeatures"].items()
            )
            if obj.get("categoricalFeatures") is not None
            else None,
            "numericalFeatures": dict(
                (_k, GoogleCloudRecommendationengineV1beta1FeatureMapFloatList.from_dict(_v))
                for _k, _v in obj["numericalFeatures"].items()
            )
            if obj.get("numericalFeatures") is not None
            else None
        })
        return _obj



# coding: utf-8

"""
    Recommendations AI (Beta)

    Note that we now highly recommend new customers to use Retail API, which incorporates the GA version of the Recommendations AI funtionalities. To enable Retail API, please visit https://console.cloud.google.com/apis/library/retail.googleapis.com. The Recommendations AI service enables customers to build end-to-end personalized recommendation systems without requiring a high level of expertise in machine learning, recommendation system, or Google Cloud.

    The version of the OpenAPI document: v1beta1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_cloud_recommendationengine_v1beta1_catalog_item_category_hierarchy import GoogleCloudRecommendationengineV1beta1CatalogItemCategoryHierarchy
from openapi_client.models.google_cloud_recommendationengine_v1beta1_feature_map import GoogleCloudRecommendationengineV1beta1FeatureMap
from openapi_client.models.google_cloud_recommendationengine_v1beta1_product_catalog_item import GoogleCloudRecommendationengineV1beta1ProductCatalogItem
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudRecommendationengineV1beta1CatalogItem(BaseModel):
    """
    CatalogItem captures all metadata information of items to be recommended.
    """ # noqa: E501
    category_hierarchies: Optional[List[GoogleCloudRecommendationengineV1beta1CatalogItemCategoryHierarchy]] = Field(default=None, description="Required. Catalog item categories. This field is repeated for supporting one catalog item belonging to several parallel category hierarchies. For example, if a shoes product belongs to both [\"Shoes & Accessories\" -> \"Shoes\"] and [\"Sports & Fitness\" -> \"Athletic Clothing\" -> \"Shoes\"], it could be represented as: \"categoryHierarchies\": [ { \"categories\": [\"Shoes & Accessories\", \"Shoes\"]}, { \"categories\": [\"Sports & Fitness\", \"Athletic Clothing\", \"Shoes\"] } ]", alias="categoryHierarchies")
    description: Optional[StrictStr] = Field(default=None, description="Optional. Catalog item description. UTF-8 encoded string with a length limit of 5 KiB.")
    id: Optional[StrictStr] = Field(default=None, description="Required. Catalog item identifier. UTF-8 encoded string with a length limit of 128 bytes. This id must be unique among all catalog items within the same catalog. It should also be used when logging user events in order for the user events to be joined with the Catalog.")
    item_attributes: Optional[GoogleCloudRecommendationengineV1beta1FeatureMap] = Field(default=None, alias="itemAttributes")
    item_group_id: Optional[StrictStr] = Field(default=None, description="Optional. Variant group identifier for prediction results. UTF-8 encoded string with a length limit of 128 bytes. This field must be enabled before it can be used. [Learn more](/recommendations-ai/docs/catalog#item-group-id).", alias="itemGroupId")
    language_code: Optional[StrictStr] = Field(default=None, description="Optional. Deprecated. The model automatically detects the text language. Your catalog can include text in different languages, but duplicating catalog items to provide text in multiple languages can result in degraded model performance.", alias="languageCode")
    product_metadata: Optional[GoogleCloudRecommendationengineV1beta1ProductCatalogItem] = Field(default=None, alias="productMetadata")
    tags: Optional[List[StrictStr]] = Field(default=None, description="Optional. Filtering tags associated with the catalog item. Each tag should be a UTF-8 encoded string with a length limit of 1 KiB. This tag can be used for filtering recommendation results by passing the tag as part of the predict request filter.")
    title: Optional[StrictStr] = Field(default=None, description="Required. Catalog item title. UTF-8 encoded string with a length limit of 1 KiB.")
    __properties: ClassVar[List[str]] = ["categoryHierarchies", "description", "id", "itemAttributes", "itemGroupId", "languageCode", "productMetadata", "tags", "title"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudRecommendationengineV1beta1CatalogItem from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in category_hierarchies (list)
        _items = []
        if self.category_hierarchies:
            for _item_category_hierarchies in self.category_hierarchies:
                if _item_category_hierarchies:
                    _items.append(_item_category_hierarchies.to_dict())
            _dict['categoryHierarchies'] = _items
        # override the default output from pydantic by calling `to_dict()` of item_attributes
        if self.item_attributes:
            _dict['itemAttributes'] = self.item_attributes.to_dict()
        # override the default output from pydantic by calling `to_dict()` of product_metadata
        if self.product_metadata:
            _dict['productMetadata'] = self.product_metadata.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudRecommendationengineV1beta1CatalogItem from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "categoryHierarchies": [GoogleCloudRecommendationengineV1beta1CatalogItemCategoryHierarchy.from_dict(_item) for _item in obj["categoryHierarchies"]] if obj.get("categoryHierarchies") is not None else None,
            "description": obj.get("description"),
            "id": obj.get("id"),
            "itemAttributes": GoogleCloudRecommendationengineV1beta1FeatureMap.from_dict(obj["itemAttributes"]) if obj.get("itemAttributes") is not None else None,
            "itemGroupId": obj.get("itemGroupId"),
            "languageCode": obj.get("languageCode"),
            "productMetadata": GoogleCloudRecommendationengineV1beta1ProductCatalogItem.from_dict(obj["productMetadata"]) if obj.get("productMetadata") is not None else None,
            "tags": obj.get("tags"),
            "title": obj.get("title")
        })
        return _obj



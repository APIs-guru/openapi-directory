# coding: utf-8

"""
    Recommendations AI (Beta)

    Note that we now highly recommend new customers to use Retail API, which incorporates the GA version of the Recommendations AI funtionalities. To enable Retail API, please visit https://console.cloud.google.com/apis/library/retail.googleapis.com. The Recommendations AI service enables customers to build end-to-end personalized recommendation systems without requiring a high level of expertise in machine learning, recommendation system, or Google Cloud.

    The version of the OpenAPI document: v1beta1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_cloud_recommendationengine_v1beta1_import_errors_config import GoogleCloudRecommendationengineV1beta1ImportErrorsConfig
from openapi_client.models.google_cloud_recommendationengine_v1beta1_input_config import GoogleCloudRecommendationengineV1beta1InputConfig
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudRecommendationengineV1beta1ImportCatalogItemsRequest(BaseModel):
    """
    Request message for Import methods.
    """ # noqa: E501
    errors_config: Optional[GoogleCloudRecommendationengineV1beta1ImportErrorsConfig] = Field(default=None, alias="errorsConfig")
    input_config: Optional[GoogleCloudRecommendationengineV1beta1InputConfig] = Field(default=None, alias="inputConfig")
    request_id: Optional[StrictStr] = Field(default=None, description="Optional. Unique identifier provided by client, within the ancestor dataset scope. Ensures idempotency and used for request deduplication. Server-generated if unspecified. Up to 128 characters long. This is returned as google.longrunning.Operation.name in the response.", alias="requestId")
    update_mask: Optional[StrictStr] = Field(default=None, description="Optional. Indicates which fields in the provided imported 'items' to update. If not set, will by default update all fields.", alias="updateMask")
    __properties: ClassVar[List[str]] = ["errorsConfig", "inputConfig", "requestId", "updateMask"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudRecommendationengineV1beta1ImportCatalogItemsRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of errors_config
        if self.errors_config:
            _dict['errorsConfig'] = self.errors_config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of input_config
        if self.input_config:
            _dict['inputConfig'] = self.input_config.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudRecommendationengineV1beta1ImportCatalogItemsRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "errorsConfig": GoogleCloudRecommendationengineV1beta1ImportErrorsConfig.from_dict(obj["errorsConfig"]) if obj.get("errorsConfig") is not None else None,
            "inputConfig": GoogleCloudRecommendationengineV1beta1InputConfig.from_dict(obj["inputConfig"]) if obj.get("inputConfig") is not None else None,
            "requestId": obj.get("requestId"),
            "updateMask": obj.get("updateMask")
        })
        return _obj



# coding: utf-8

"""
    Recommendations AI (Beta)

    Note that we now highly recommend new customers to use Retail API, which incorporates the GA version of the Recommendations AI funtionalities. To enable Retail API, please visit https://console.cloud.google.com/apis/library/retail.googleapis.com. The Recommendations AI service enables customers to build end-to-end personalized recommendation systems without requiring a high level of expertise in machine learning, recommendation system, or Google Cloud.

    The version of the OpenAPI document: v1beta1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_cloud_recommendationengine_v1beta1_predict_response_prediction_result import GoogleCloudRecommendationengineV1beta1PredictResponsePredictionResult
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudRecommendationengineV1beta1PredictResponse(BaseModel):
    """
    Response message for predict method.
    """ # noqa: E501
    dry_run: Optional[StrictBool] = Field(default=None, description="True if the dryRun property was set in the request.", alias="dryRun")
    items_missing_in_catalog: Optional[List[StrictStr]] = Field(default=None, description="IDs of items in the request that were missing from the catalog.", alias="itemsMissingInCatalog")
    metadata: Optional[Dict[str, Any]] = Field(default=None, description="Additional domain specific prediction response metadata.")
    next_page_token: Optional[StrictStr] = Field(default=None, description="If empty, the list is complete. If nonempty, the token to pass to the next request's PredictRequest.page_token.", alias="nextPageToken")
    recommendation_token: Optional[StrictStr] = Field(default=None, description="A unique recommendation token. This should be included in the user event logs resulting from this recommendation, which enables accurate attribution of recommendation model performance.", alias="recommendationToken")
    results: Optional[List[GoogleCloudRecommendationengineV1beta1PredictResponsePredictionResult]] = Field(default=None, description="A list of recommended items. The order represents the ranking (from the most relevant item to the least).")
    __properties: ClassVar[List[str]] = ["dryRun", "itemsMissingInCatalog", "metadata", "nextPageToken", "recommendationToken", "results"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudRecommendationengineV1beta1PredictResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in results (list)
        _items = []
        if self.results:
            for _item_results in self.results:
                if _item_results:
                    _items.append(_item_results.to_dict())
            _dict['results'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudRecommendationengineV1beta1PredictResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "dryRun": obj.get("dryRun"),
            "itemsMissingInCatalog": obj.get("itemsMissingInCatalog"),
            "metadata": obj.get("metadata"),
            "nextPageToken": obj.get("nextPageToken"),
            "recommendationToken": obj.get("recommendationToken"),
            "results": [GoogleCloudRecommendationengineV1beta1PredictResponsePredictionResult.from_dict(_item) for _item in obj["results"]] if obj.get("results") is not None else None
        })
        return _obj



# coding: utf-8

"""
    Recommendations AI (Beta)

    Note that we now highly recommend new customers to use Retail API, which incorporates the GA version of the Recommendations AI funtionalities. To enable Retail API, please visit https://console.cloud.google.com/apis/library/retail.googleapis.com. The Recommendations AI service enables customers to build end-to-end personalized recommendation systems without requiring a high level of expertise in machine learning, recommendation system, or Google Cloud.

    The version of the OpenAPI document: v1beta1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_cloud_recommendationengine_v1beta1_catalog_item_category_hierarchy import GoogleCloudRecommendationengineV1beta1CatalogItemCategoryHierarchy
from openapi_client.models.google_cloud_recommendationengine_v1beta1_product_detail import GoogleCloudRecommendationengineV1beta1ProductDetail
from openapi_client.models.google_cloud_recommendationengine_v1beta1_purchase_transaction import GoogleCloudRecommendationengineV1beta1PurchaseTransaction
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudRecommendationengineV1beta1ProductEventDetail(BaseModel):
    """
    ProductEventDetail captures user event information specific to retail products.
    """ # noqa: E501
    cart_id: Optional[StrictStr] = Field(default=None, description="Optional. The id or name of the associated shopping cart. This id is used to associate multiple items added or present in the cart before purchase. This can only be set for `add-to-cart`, `remove-from-cart`, `checkout-start`, `purchase-complete`, or `shopping-cart-page-view` events.", alias="cartId")
    list_id: Optional[StrictStr] = Field(default=None, description="Required for `add-to-list` and `remove-from-list` events. The id or name of the list that the item is being added to or removed from. Other event types should not set this field.", alias="listId")
    page_categories: Optional[List[GoogleCloudRecommendationengineV1beta1CatalogItemCategoryHierarchy]] = Field(default=None, description="Required for `category-page-view` events. At least one of search_query or page_categories is required for `search` events. Other event types should not set this field. The categories associated with a category page. Category pages include special pages such as sales or promotions. For instance, a special sale page may have the category hierarchy: categories : [\"Sales\", \"2017 Black Friday Deals\"].", alias="pageCategories")
    product_details: Optional[List[GoogleCloudRecommendationengineV1beta1ProductDetail]] = Field(default=None, description="The main product details related to the event. This field is required for the following event types: * `add-to-cart` * `add-to-list` * `checkout-start` * `detail-page-view` * `purchase-complete` * `refund` * `remove-from-cart` * `remove-from-list` This field is optional for the following event types: * `page-visit` * `shopping-cart-page-view` - note that 'product_details' should be set for this unless the shopping cart is empty. * `search` (highly encouraged) In a `search` event, this field represents the products returned to the end user on the current page (the end user may have not finished broswing the whole page yet). When a new page is returned to the end user, after pagination/filtering/ordering even for the same query, a new SEARCH event with different product_details is desired. The end user may have not finished broswing the whole page yet. This field is not allowed for the following event types: * `category-page-view` * `home-page-view`", alias="productDetails")
    purchase_transaction: Optional[GoogleCloudRecommendationengineV1beta1PurchaseTransaction] = Field(default=None, alias="purchaseTransaction")
    search_query: Optional[StrictStr] = Field(default=None, description="At least one of search_query or page_categories is required for `search` events. Other event types should not set this field. The user's search query as UTF-8 encoded text with a length limit of 5 KiB.", alias="searchQuery")
    __properties: ClassVar[List[str]] = ["cartId", "listId", "pageCategories", "productDetails", "purchaseTransaction", "searchQuery"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudRecommendationengineV1beta1ProductEventDetail from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in page_categories (list)
        _items = []
        if self.page_categories:
            for _item_page_categories in self.page_categories:
                if _item_page_categories:
                    _items.append(_item_page_categories.to_dict())
            _dict['pageCategories'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in product_details (list)
        _items = []
        if self.product_details:
            for _item_product_details in self.product_details:
                if _item_product_details:
                    _items.append(_item_product_details.to_dict())
            _dict['productDetails'] = _items
        # override the default output from pydantic by calling `to_dict()` of purchase_transaction
        if self.purchase_transaction:
            _dict['purchaseTransaction'] = self.purchase_transaction.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudRecommendationengineV1beta1ProductEventDetail from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "cartId": obj.get("cartId"),
            "listId": obj.get("listId"),
            "pageCategories": [GoogleCloudRecommendationengineV1beta1CatalogItemCategoryHierarchy.from_dict(_item) for _item in obj["pageCategories"]] if obj.get("pageCategories") is not None else None,
            "productDetails": [GoogleCloudRecommendationengineV1beta1ProductDetail.from_dict(_item) for _item in obj["productDetails"]] if obj.get("productDetails") is not None else None,
            "purchaseTransaction": GoogleCloudRecommendationengineV1beta1PurchaseTransaction.from_dict(obj["purchaseTransaction"]) if obj.get("purchaseTransaction") is not None else None,
            "searchQuery": obj.get("searchQuery")
        })
        return _obj



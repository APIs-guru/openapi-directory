# coding: utf-8

"""
    Recommendations AI (Beta)

    Note that we now highly recommend new customers to use Retail API, which incorporates the GA version of the Recommendations AI funtionalities. To enable Retail API, please visit https://console.cloud.google.com/apis/library/retail.googleapis.com. The Recommendations AI service enables customers to build end-to-end personalized recommendation systems without requiring a high level of expertise in machine learning, recommendation system, or Google Cloud.

    The version of the OpenAPI document: v1beta1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_cloud_recommendationengine_v1beta1_event_detail import GoogleCloudRecommendationengineV1beta1EventDetail
from openapi_client.models.google_cloud_recommendationengine_v1beta1_product_event_detail import GoogleCloudRecommendationengineV1beta1ProductEventDetail
from openapi_client.models.google_cloud_recommendationengine_v1beta1_user_info import GoogleCloudRecommendationengineV1beta1UserInfo
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudRecommendationengineV1beta1UserEvent(BaseModel):
    """
    UserEvent captures all metadata information recommendation engine needs to know about how end users interact with customers' website.
    """ # noqa: E501
    event_detail: Optional[GoogleCloudRecommendationengineV1beta1EventDetail] = Field(default=None, alias="eventDetail")
    event_source: Optional[StrictStr] = Field(default=None, description="Optional. This field should *not* be set when using JavaScript pixel or the Recommendations AI Tag. Defaults to `EVENT_SOURCE_UNSPECIFIED`.", alias="eventSource")
    event_time: Optional[StrictStr] = Field(default=None, description="Optional. Only required for ImportUserEvents method. Timestamp of user event created.", alias="eventTime")
    event_type: Optional[StrictStr] = Field(default=None, description="Required. User event type. Allowed values are: * `add-to-cart` Products being added to cart. * `add-to-list` Items being added to a list (shopping list, favorites etc). * `category-page-view` Special pages such as sale or promotion pages viewed. * `checkout-start` User starting a checkout process. * `detail-page-view` Products detail page viewed. * `home-page-view` Homepage viewed. * `page-visit` Generic page visits not included in the event types above. * `purchase-complete` User finishing a purchase. * `refund` Purchased items being refunded or returned. * `remove-from-cart` Products being removed from cart. * `remove-from-list` Items being removed from a list. * `search` Product search. * `shopping-cart-page-view` User viewing a shopping cart. * `impression` List of items displayed. Used by Google Tag Manager.", alias="eventType")
    product_event_detail: Optional[GoogleCloudRecommendationengineV1beta1ProductEventDetail] = Field(default=None, alias="productEventDetail")
    user_info: Optional[GoogleCloudRecommendationengineV1beta1UserInfo] = Field(default=None, alias="userInfo")
    __properties: ClassVar[List[str]] = ["eventDetail", "eventSource", "eventTime", "eventType", "productEventDetail", "userInfo"]

    @field_validator('event_source')
    def event_source_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['EVENT_SOURCE_UNSPECIFIED', 'AUTOML', 'ECOMMERCE', 'BATCH_UPLOAD']):
            raise ValueError("must be one of enum values ('EVENT_SOURCE_UNSPECIFIED', 'AUTOML', 'ECOMMERCE', 'BATCH_UPLOAD')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudRecommendationengineV1beta1UserEvent from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of event_detail
        if self.event_detail:
            _dict['eventDetail'] = self.event_detail.to_dict()
        # override the default output from pydantic by calling `to_dict()` of product_event_detail
        if self.product_event_detail:
            _dict['productEventDetail'] = self.product_event_detail.to_dict()
        # override the default output from pydantic by calling `to_dict()` of user_info
        if self.user_info:
            _dict['userInfo'] = self.user_info.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudRecommendationengineV1beta1UserEvent from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "eventDetail": GoogleCloudRecommendationengineV1beta1EventDetail.from_dict(obj["eventDetail"]) if obj.get("eventDetail") is not None else None,
            "eventSource": obj.get("eventSource"),
            "eventTime": obj.get("eventTime"),
            "eventType": obj.get("eventType"),
            "productEventDetail": GoogleCloudRecommendationengineV1beta1ProductEventDetail.from_dict(obj["productEventDetail"]) if obj.get("productEventDetail") is not None else None,
            "userInfo": GoogleCloudRecommendationengineV1beta1UserInfo.from_dict(obj["userInfo"]) if obj.get("userInfo") is not None else None
        })
        return _obj



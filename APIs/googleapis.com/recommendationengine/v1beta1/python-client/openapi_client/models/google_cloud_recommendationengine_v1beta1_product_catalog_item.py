# coding: utf-8

"""
    Recommendations AI (Beta)

    Note that we now highly recommend new customers to use Retail API, which incorporates the GA version of the Recommendations AI funtionalities. To enable Retail API, please visit https://console.cloud.google.com/apis/library/retail.googleapis.com. The Recommendations AI service enables customers to build end-to-end personalized recommendation systems without requiring a high level of expertise in machine learning, recommendation system, or Google Cloud.

    The version of the OpenAPI document: v1beta1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from openapi_client.models.google_cloud_recommendationengine_v1beta1_image import GoogleCloudRecommendationengineV1beta1Image
from openapi_client.models.google_cloud_recommendationengine_v1beta1_product_catalog_item_exact_price import GoogleCloudRecommendationengineV1beta1ProductCatalogItemExactPrice
from openapi_client.models.google_cloud_recommendationengine_v1beta1_product_catalog_item_price_range import GoogleCloudRecommendationengineV1beta1ProductCatalogItemPriceRange
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudRecommendationengineV1beta1ProductCatalogItem(BaseModel):
    """
    ProductCatalogItem captures item metadata specific to retail products.
    """ # noqa: E501
    available_quantity: Optional[StrictStr] = Field(default=None, description="Optional. The available quantity of the item.", alias="availableQuantity")
    canonical_product_uri: Optional[StrictStr] = Field(default=None, description="Optional. Canonical URL directly linking to the item detail page with a length limit of 5 KiB..", alias="canonicalProductUri")
    costs: Optional[Dict[str, Union[StrictFloat, StrictInt]]] = Field(default=None, description="Optional. A map to pass the costs associated with the product. For example: {\"manufacturing\": 45.5} The profit of selling this item is computed like so: * If 'exactPrice' is provided, profit = displayPrice - sum(costs) * If 'priceRange' is provided, profit = minPrice - sum(costs)")
    currency_code: Optional[StrictStr] = Field(default=None, description="Optional. Only required if the price is set. Currency code for price/costs. Use three-character ISO-4217 code.", alias="currencyCode")
    exact_price: Optional[GoogleCloudRecommendationengineV1beta1ProductCatalogItemExactPrice] = Field(default=None, alias="exactPrice")
    images: Optional[List[GoogleCloudRecommendationengineV1beta1Image]] = Field(default=None, description="Optional. Product images for the catalog item.")
    price_range: Optional[GoogleCloudRecommendationengineV1beta1ProductCatalogItemPriceRange] = Field(default=None, alias="priceRange")
    stock_state: Optional[StrictStr] = Field(default=None, description="Optional. Online stock state of the catalog item. Default is `IN_STOCK`.", alias="stockState")
    __properties: ClassVar[List[str]] = ["availableQuantity", "canonicalProductUri", "costs", "currencyCode", "exactPrice", "images", "priceRange", "stockState"]

    @field_validator('stock_state')
    def stock_state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['STOCK_STATE_UNSPECIFIED', 'IN_STOCK', 'OUT_OF_STOCK', 'PREORDER', 'BACKORDER']):
            raise ValueError("must be one of enum values ('STOCK_STATE_UNSPECIFIED', 'IN_STOCK', 'OUT_OF_STOCK', 'PREORDER', 'BACKORDER')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudRecommendationengineV1beta1ProductCatalogItem from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of exact_price
        if self.exact_price:
            _dict['exactPrice'] = self.exact_price.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in images (list)
        _items = []
        if self.images:
            for _item_images in self.images:
                if _item_images:
                    _items.append(_item_images.to_dict())
            _dict['images'] = _items
        # override the default output from pydantic by calling `to_dict()` of price_range
        if self.price_range:
            _dict['priceRange'] = self.price_range.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudRecommendationengineV1beta1ProductCatalogItem from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "availableQuantity": obj.get("availableQuantity"),
            "canonicalProductUri": obj.get("canonicalProductUri"),
            "costs": obj.get("costs"),
            "currencyCode": obj.get("currencyCode"),
            "exactPrice": GoogleCloudRecommendationengineV1beta1ProductCatalogItemExactPrice.from_dict(obj["exactPrice"]) if obj.get("exactPrice") is not None else None,
            "images": [GoogleCloudRecommendationengineV1beta1Image.from_dict(_item) for _item in obj["images"]] if obj.get("images") is not None else None,
            "priceRange": GoogleCloudRecommendationengineV1beta1ProductCatalogItemPriceRange.from_dict(obj["priceRange"]) if obj.get("priceRange") is not None else None,
            "stockState": obj.get("stockState")
        })
        return _obj



# coding: utf-8

"""
    Domains RDAP API

    Read-only public API that lets users search for information about domain names.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.http_body import HttpBody
from openapi_client.models.notice import Notice
from typing import Optional, Set
from typing_extensions import Self

class RdapResponse(BaseModel):
    """
    Response to a general RDAP query.
    """ # noqa: E501
    description: Optional[List[StrictStr]] = Field(default=None, description="Error description.")
    error_code: Optional[StrictInt] = Field(default=None, description="Error HTTP code. Example: \"501\".", alias="errorCode")
    json_response: Optional[HttpBody] = Field(default=None, alias="jsonResponse")
    lang: Optional[StrictStr] = Field(default=None, description="Error language code. Error response info fields are defined in [section 6 of RFC 7483](https://tools.ietf.org/html/rfc7483#section-6).")
    notices: Optional[List[Notice]] = Field(default=None, description="Notices applying to this response.")
    rdap_conformance: Optional[List[StrictStr]] = Field(default=None, description="RDAP conformance level.", alias="rdapConformance")
    title: Optional[StrictStr] = Field(default=None, description="Error title.")
    __properties: ClassVar[List[str]] = ["description", "errorCode", "jsonResponse", "lang", "notices", "rdapConformance", "title"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of RdapResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of json_response
        if self.json_response:
            _dict['jsonResponse'] = self.json_response.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in notices (list)
        _items = []
        if self.notices:
            for _item_notices in self.notices:
                if _item_notices:
                    _items.append(_item_notices.to_dict())
            _dict['notices'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of RdapResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "description": obj.get("description"),
            "errorCode": obj.get("errorCode"),
            "jsonResponse": HttpBody.from_dict(obj["jsonResponse"]) if obj.get("jsonResponse") is not None else None,
            "lang": obj.get("lang"),
            "notices": [Notice.from_dict(_item) for _item in obj["notices"]] if obj.get("notices") is not None else None,
            "rdapConformance": obj.get("rdapConformance"),
            "title": obj.get("title")
        })
        return _obj



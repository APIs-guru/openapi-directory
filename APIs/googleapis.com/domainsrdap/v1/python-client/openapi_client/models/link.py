# coding: utf-8

"""
    Domains RDAP API

    Read-only public API that lets users search for information about domain names.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class Link(BaseModel):
    """
    Links object defined in [section 4.2 of RFC 7483](https://tools.ietf.org/html/rfc7483#section-4.2).
    """ # noqa: E501
    href: Optional[StrictStr] = Field(default=None, description="Target URL of a link. Example: \"http://example.com/previous\".")
    hreflang: Optional[StrictStr] = Field(default=None, description="Language code of a link. Example: \"en\".")
    media: Optional[StrictStr] = Field(default=None, description="Media type of the link destination. Example: \"screen\".")
    rel: Optional[StrictStr] = Field(default=None, description="Relation type of a link. Example: \"previous\".")
    title: Optional[StrictStr] = Field(default=None, description="Title of this link. Example: \"title\".")
    type: Optional[StrictStr] = Field(default=None, description="Content type of the link. Example: \"application/json\".")
    value: Optional[StrictStr] = Field(default=None, description="URL giving context for the link. Example: \"http://example.com/current\".")
    __properties: ClassVar[List[str]] = ["href", "hreflang", "media", "rel", "title", "type", "value"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Link from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Link from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "href": obj.get("href"),
            "hreflang": obj.get("hreflang"),
            "media": obj.get("media"),
            "rel": obj.get("rel"),
            "title": obj.get("title"),
            "type": obj.get("type"),
            "value": obj.get("value")
        })
        return _obj



# coding: utf-8

"""
    Google Forms API

    Reads and writes Google Forms and responses.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.form_settings import FormSettings
from openapi_client.models.info import Info
from openapi_client.models.item import Item
from typing import Optional, Set
from typing_extensions import Self

class Form(BaseModel):
    """
    A Google Forms document. A form is created in Drive, and deleting a form or changing its access protections is done via the [Drive API](https://developers.google.com/drive/api/v3/about-sdk).
    """ # noqa: E501
    form_id: Optional[StrictStr] = Field(default=None, description="Output only. The form ID.", alias="formId")
    info: Optional[Info] = None
    items: Optional[List[Item]] = Field(default=None, description="Required. A list of the form's items, which can include section headers, questions, embedded media, etc.")
    linked_sheet_id: Optional[StrictStr] = Field(default=None, description="Output only. The ID of the linked Google Sheet which is accumulating responses from this Form (if such a Sheet exists).", alias="linkedSheetId")
    responder_uri: Optional[StrictStr] = Field(default=None, description="Output only. The form URI to share with responders. This opens a page that allows the user to submit responses but not edit the questions.", alias="responderUri")
    revision_id: Optional[StrictStr] = Field(default=None, description="Output only. The revision ID of the form. Used in the WriteControl in update requests to identify the revision on which the changes are based. The format of the revision ID may change over time, so it should be treated opaquely. A returned revision ID is only guaranteed to be valid for 24 hours after it has been returned and cannot be shared across users. If the revision ID is unchanged between calls, then the form has not changed. Conversely, a changed ID (for the same form and user) usually means the form has been updated; however, a changed ID can also be due to internal factors such as ID format changes.", alias="revisionId")
    settings: Optional[FormSettings] = None
    __properties: ClassVar[List[str]] = ["formId", "info", "items", "linkedSheetId", "responderUri", "revisionId", "settings"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Form from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "form_id",
            "linked_sheet_id",
            "responder_uri",
            "revision_id",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of info
        if self.info:
            _dict['info'] = self.info.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in items (list)
        _items = []
        if self.items:
            for _item_items in self.items:
                if _item_items:
                    _items.append(_item_items.to_dict())
            _dict['items'] = _items
        # override the default output from pydantic by calling `to_dict()` of settings
        if self.settings:
            _dict['settings'] = self.settings.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Form from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "formId": obj.get("formId"),
            "info": Info.from_dict(obj["info"]) if obj.get("info") is not None else None,
            "items": [Item.from_dict(_item) for _item in obj["items"]] if obj.get("items") is not None else None,
            "linkedSheetId": obj.get("linkedSheetId"),
            "responderUri": obj.get("responderUri"),
            "revisionId": obj.get("revisionId"),
            "settings": FormSettings.from_dict(obj["settings"]) if obj.get("settings") is not None else None
        })
        return _obj



# coding: utf-8

"""
    Google Forms API

    Reads and writes Google Forms and responses.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.watch_target import WatchTarget
from typing import Optional, Set
from typing_extensions import Self

class Watch(BaseModel):
    """
    A watch for events for a form. When the designated event happens, a notification will be published to the specified target. The notification's attributes will include a `formId` key that has the ID of the watched form and an `eventType` key that has the string of the type. Messages are sent with at-least-once delivery and are only dropped in extraordinary circumstances. Typically all notifications should be reliably delivered within a few seconds; however, in some situations notifications may be delayed. A watch expires seven days after it is created unless it is renewed with watches.renew
    """ # noqa: E501
    create_time: Optional[StrictStr] = Field(default=None, description="Output only. Timestamp of when this was created.", alias="createTime")
    error_type: Optional[StrictStr] = Field(default=None, description="Output only. The most recent error type for an attempted delivery. To begin watching the form again a call can be made to watches.renew which also clears this error information.", alias="errorType")
    event_type: Optional[StrictStr] = Field(default=None, description="Required. Which event type to watch for.", alias="eventType")
    expire_time: Optional[StrictStr] = Field(default=None, description="Output only. Timestamp for when this will expire. Each watches.renew call resets this to seven days in the future.", alias="expireTime")
    id: Optional[StrictStr] = Field(default=None, description="Output only. The ID of this watch. See notes on CreateWatchRequest.watch_id.")
    state: Optional[StrictStr] = Field(default=None, description="Output only. The current state of the watch. Additional details about suspended watches can be found by checking the `error_type`.")
    target: Optional[WatchTarget] = None
    __properties: ClassVar[List[str]] = ["createTime", "errorType", "eventType", "expireTime", "id", "state", "target"]

    @field_validator('error_type')
    def error_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['ERROR_TYPE_UNSPECIFIED', 'PROJECT_NOT_AUTHORIZED', 'NO_USER_ACCESS', 'OTHER_ERRORS']):
            raise ValueError("must be one of enum values ('ERROR_TYPE_UNSPECIFIED', 'PROJECT_NOT_AUTHORIZED', 'NO_USER_ACCESS', 'OTHER_ERRORS')")
        return value

    @field_validator('event_type')
    def event_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['EVENT_TYPE_UNSPECIFIED', 'SCHEMA', 'RESPONSES']):
            raise ValueError("must be one of enum values ('EVENT_TYPE_UNSPECIFIED', 'SCHEMA', 'RESPONSES')")
        return value

    @field_validator('state')
    def state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['STATE_UNSPECIFIED', 'ACTIVE', 'SUSPENDED']):
            raise ValueError("must be one of enum values ('STATE_UNSPECIFIED', 'ACTIVE', 'SUSPENDED')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Watch from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "create_time",
            "error_type",
            "expire_time",
            "id",
            "state",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of target
        if self.target:
            _dict['target'] = self.target.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Watch from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "createTime": obj.get("createTime"),
            "errorType": obj.get("errorType"),
            "eventType": obj.get("eventType"),
            "expireTime": obj.get("expireTime"),
            "id": obj.get("id"),
            "state": obj.get("state"),
            "target": WatchTarget.from_dict(obj["target"]) if obj.get("target") is not None else None
        })
        return _obj



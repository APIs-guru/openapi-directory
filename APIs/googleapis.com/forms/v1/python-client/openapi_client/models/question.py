# coding: utf-8

"""
    Google Forms API

    Reads and writes Google Forms and responses.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.choice_question import ChoiceQuestion
from openapi_client.models.date_question import DateQuestion
from openapi_client.models.file_upload_question import FileUploadQuestion
from openapi_client.models.grading import Grading
from openapi_client.models.row_question import RowQuestion
from openapi_client.models.scale_question import ScaleQuestion
from openapi_client.models.text_question import TextQuestion
from openapi_client.models.time_question import TimeQuestion
from typing import Optional, Set
from typing_extensions import Self

class Question(BaseModel):
    """
    Any question. The specific type of question is known by its `kind`.
    """ # noqa: E501
    choice_question: Optional[ChoiceQuestion] = Field(default=None, alias="choiceQuestion")
    date_question: Optional[DateQuestion] = Field(default=None, alias="dateQuestion")
    file_upload_question: Optional[FileUploadQuestion] = Field(default=None, alias="fileUploadQuestion")
    grading: Optional[Grading] = None
    question_id: Optional[StrictStr] = Field(default=None, description="Read only. The question ID. On creation, it can be provided but the ID must not be already used in the form. If not provided, a new ID is assigned.", alias="questionId")
    required: Optional[StrictBool] = Field(default=None, description="Whether the question must be answered in order for a respondent to submit their response.")
    row_question: Optional[RowQuestion] = Field(default=None, alias="rowQuestion")
    scale_question: Optional[ScaleQuestion] = Field(default=None, alias="scaleQuestion")
    text_question: Optional[TextQuestion] = Field(default=None, alias="textQuestion")
    time_question: Optional[TimeQuestion] = Field(default=None, alias="timeQuestion")
    __properties: ClassVar[List[str]] = ["choiceQuestion", "dateQuestion", "fileUploadQuestion", "grading", "questionId", "required", "rowQuestion", "scaleQuestion", "textQuestion", "timeQuestion"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Question from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of choice_question
        if self.choice_question:
            _dict['choiceQuestion'] = self.choice_question.to_dict()
        # override the default output from pydantic by calling `to_dict()` of date_question
        if self.date_question:
            _dict['dateQuestion'] = self.date_question.to_dict()
        # override the default output from pydantic by calling `to_dict()` of file_upload_question
        if self.file_upload_question:
            _dict['fileUploadQuestion'] = self.file_upload_question.to_dict()
        # override the default output from pydantic by calling `to_dict()` of grading
        if self.grading:
            _dict['grading'] = self.grading.to_dict()
        # override the default output from pydantic by calling `to_dict()` of row_question
        if self.row_question:
            _dict['rowQuestion'] = self.row_question.to_dict()
        # override the default output from pydantic by calling `to_dict()` of scale_question
        if self.scale_question:
            _dict['scaleQuestion'] = self.scale_question.to_dict()
        # override the default output from pydantic by calling `to_dict()` of text_question
        if self.text_question:
            _dict['textQuestion'] = self.text_question.to_dict()
        # override the default output from pydantic by calling `to_dict()` of time_question
        if self.time_question:
            _dict['timeQuestion'] = self.time_question.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Question from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "choiceQuestion": ChoiceQuestion.from_dict(obj["choiceQuestion"]) if obj.get("choiceQuestion") is not None else None,
            "dateQuestion": DateQuestion.from_dict(obj["dateQuestion"]) if obj.get("dateQuestion") is not None else None,
            "fileUploadQuestion": FileUploadQuestion.from_dict(obj["fileUploadQuestion"]) if obj.get("fileUploadQuestion") is not None else None,
            "grading": Grading.from_dict(obj["grading"]) if obj.get("grading") is not None else None,
            "questionId": obj.get("questionId"),
            "required": obj.get("required"),
            "rowQuestion": RowQuestion.from_dict(obj["rowQuestion"]) if obj.get("rowQuestion") is not None else None,
            "scaleQuestion": ScaleQuestion.from_dict(obj["scaleQuestion"]) if obj.get("scaleQuestion") is not None else None,
            "textQuestion": TextQuestion.from_dict(obj["textQuestion"]) if obj.get("textQuestion") is not None else None,
            "timeQuestion": TimeQuestion.from_dict(obj["timeQuestion"]) if obj.get("timeQuestion") is not None else None
        })
        return _obj



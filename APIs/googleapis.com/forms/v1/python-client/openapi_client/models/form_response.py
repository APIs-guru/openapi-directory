# coding: utf-8

"""
    Google Forms API

    Reads and writes Google Forms and responses.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from openapi_client.models.answer import Answer
from typing import Optional, Set
from typing_extensions import Self

class FormResponse(BaseModel):
    """
    A form response.
    """ # noqa: E501
    answers: Optional[Dict[str, Answer]] = Field(default=None, description="Output only. The actual answers to the questions, keyed by question_id.")
    create_time: Optional[StrictStr] = Field(default=None, description="Output only. Timestamp for the first time the response was submitted.", alias="createTime")
    form_id: Optional[StrictStr] = Field(default=None, description="Output only. The form ID.", alias="formId")
    last_submitted_time: Optional[StrictStr] = Field(default=None, description="Output only. Timestamp for the most recent time the response was submitted. Does not track changes to grades.", alias="lastSubmittedTime")
    respondent_email: Optional[StrictStr] = Field(default=None, description="Output only. The email address (if collected) for the respondent.", alias="respondentEmail")
    response_id: Optional[StrictStr] = Field(default=None, description="Output only. The response ID.", alias="responseId")
    total_score: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Output only. The total number of points the respondent received for their submission Only set if the form was a quiz and the response was graded. This includes points automatically awarded via autograding adjusted by any manual corrections entered by the form owner.", alias="totalScore")
    __properties: ClassVar[List[str]] = ["answers", "createTime", "formId", "lastSubmittedTime", "respondentEmail", "responseId", "totalScore"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of FormResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "answers",
            "create_time",
            "form_id",
            "last_submitted_time",
            "respondent_email",
            "response_id",
            "total_score",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each value in answers (dict)
        _field_dict = {}
        if self.answers:
            for _key_answers in self.answers:
                if self.answers[_key_answers]:
                    _field_dict[_key_answers] = self.answers[_key_answers].to_dict()
            _dict['answers'] = _field_dict
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of FormResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "answers": dict(
                (_k, Answer.from_dict(_v))
                for _k, _v in obj["answers"].items()
            )
            if obj.get("answers") is not None
            else None,
            "createTime": obj.get("createTime"),
            "formId": obj.get("formId"),
            "lastSubmittedTime": obj.get("lastSubmittedTime"),
            "respondentEmail": obj.get("respondentEmail"),
            "responseId": obj.get("responseId"),
            "totalScore": obj.get("totalScore")
        })
        return _obj



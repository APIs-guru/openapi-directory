# coding: utf-8

"""
    Google Forms API

    Reads and writes Google Forms and responses.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.create_item_request import CreateItemRequest
from openapi_client.models.delete_item_request import DeleteItemRequest
from openapi_client.models.move_item_request import MoveItemRequest
from openapi_client.models.update_form_info_request import UpdateFormInfoRequest
from openapi_client.models.update_item_request import UpdateItemRequest
from openapi_client.models.update_settings_request import UpdateSettingsRequest
from typing import Optional, Set
from typing_extensions import Self

class Request(BaseModel):
    """
    The kinds of update requests that can be made.
    """ # noqa: E501
    create_item: Optional[CreateItemRequest] = Field(default=None, alias="createItem")
    delete_item: Optional[DeleteItemRequest] = Field(default=None, alias="deleteItem")
    move_item: Optional[MoveItemRequest] = Field(default=None, alias="moveItem")
    update_form_info: Optional[UpdateFormInfoRequest] = Field(default=None, alias="updateFormInfo")
    update_item: Optional[UpdateItemRequest] = Field(default=None, alias="updateItem")
    update_settings: Optional[UpdateSettingsRequest] = Field(default=None, alias="updateSettings")
    __properties: ClassVar[List[str]] = ["createItem", "deleteItem", "moveItem", "updateFormInfo", "updateItem", "updateSettings"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Request from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of create_item
        if self.create_item:
            _dict['createItem'] = self.create_item.to_dict()
        # override the default output from pydantic by calling `to_dict()` of delete_item
        if self.delete_item:
            _dict['deleteItem'] = self.delete_item.to_dict()
        # override the default output from pydantic by calling `to_dict()` of move_item
        if self.move_item:
            _dict['moveItem'] = self.move_item.to_dict()
        # override the default output from pydantic by calling `to_dict()` of update_form_info
        if self.update_form_info:
            _dict['updateFormInfo'] = self.update_form_info.to_dict()
        # override the default output from pydantic by calling `to_dict()` of update_item
        if self.update_item:
            _dict['updateItem'] = self.update_item.to_dict()
        # override the default output from pydantic by calling `to_dict()` of update_settings
        if self.update_settings:
            _dict['updateSettings'] = self.update_settings.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Request from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "createItem": CreateItemRequest.from_dict(obj["createItem"]) if obj.get("createItem") is not None else None,
            "deleteItem": DeleteItemRequest.from_dict(obj["deleteItem"]) if obj.get("deleteItem") is not None else None,
            "moveItem": MoveItemRequest.from_dict(obj["moveItem"]) if obj.get("moveItem") is not None else None,
            "updateFormInfo": UpdateFormInfoRequest.from_dict(obj["updateFormInfo"]) if obj.get("updateFormInfo") is not None else None,
            "updateItem": UpdateItemRequest.from_dict(obj["updateItem"]) if obj.get("updateItem") is not None else None,
            "updateSettings": UpdateSettingsRequest.from_dict(obj["updateSettings"]) if obj.get("updateSettings") is not None else None
        })
        return _obj



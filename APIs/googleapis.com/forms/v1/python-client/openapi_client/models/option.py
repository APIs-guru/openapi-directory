# coding: utf-8

"""
    Google Forms API

    Reads and writes Google Forms and responses.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.image import Image
from typing import Optional, Set
from typing_extensions import Self

class Option(BaseModel):
    """
    An option for a Choice question.
    """ # noqa: E501
    go_to_action: Optional[StrictStr] = Field(default=None, description="Section navigation type.", alias="goToAction")
    go_to_section_id: Optional[StrictStr] = Field(default=None, description="Item ID of section header to go to.", alias="goToSectionId")
    image: Optional[Image] = None
    is_other: Optional[StrictBool] = Field(default=None, description="Whether the option is \"other\". Currently only applies to `RADIO` and `CHECKBOX` choice types, but is not allowed in a QuestionGroupItem.", alias="isOther")
    value: Optional[StrictStr] = Field(default=None, description="Required. The choice as presented to the user.")
    __properties: ClassVar[List[str]] = ["goToAction", "goToSectionId", "image", "isOther", "value"]

    @field_validator('go_to_action')
    def go_to_action_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['GO_TO_ACTION_UNSPECIFIED', 'NEXT_SECTION', 'RESTART_FORM', 'SUBMIT_FORM']):
            raise ValueError("must be one of enum values ('GO_TO_ACTION_UNSPECIFIED', 'NEXT_SECTION', 'RESTART_FORM', 'SUBMIT_FORM')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Option from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of image
        if self.image:
            _dict['image'] = self.image.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Option from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "goToAction": obj.get("goToAction"),
            "goToSectionId": obj.get("goToSectionId"),
            "image": Image.from_dict(obj["image"]) if obj.get("image") is not None else None,
            "isOther": obj.get("isOther"),
            "value": obj.get("value")
        })
        return _obj



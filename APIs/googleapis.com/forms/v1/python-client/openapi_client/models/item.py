# coding: utf-8

"""
    Google Forms API

    Reads and writes Google Forms and responses.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.image_item import ImageItem
from openapi_client.models.question_group_item import QuestionGroupItem
from openapi_client.models.question_item import QuestionItem
from openapi_client.models.video_item import VideoItem
from typing import Optional, Set
from typing_extensions import Self

class Item(BaseModel):
    """
    A single item of the form. `kind` defines which kind of item it is.
    """ # noqa: E501
    description: Optional[StrictStr] = Field(default=None, description="The description of the item.")
    image_item: Optional[ImageItem] = Field(default=None, alias="imageItem")
    item_id: Optional[StrictStr] = Field(default=None, description="The item ID. On creation, it can be provided but the ID must not be already used in the form. If not provided, a new ID is assigned.", alias="itemId")
    page_break_item: Optional[Dict[str, Any]] = Field(default=None, description="A page break. The title and description of this item are shown at the top of the new page.", alias="pageBreakItem")
    question_group_item: Optional[QuestionGroupItem] = Field(default=None, alias="questionGroupItem")
    question_item: Optional[QuestionItem] = Field(default=None, alias="questionItem")
    text_item: Optional[Dict[str, Any]] = Field(default=None, description="A text item.", alias="textItem")
    title: Optional[StrictStr] = Field(default=None, description="The title of the item.")
    video_item: Optional[VideoItem] = Field(default=None, alias="videoItem")
    __properties: ClassVar[List[str]] = ["description", "imageItem", "itemId", "pageBreakItem", "questionGroupItem", "questionItem", "textItem", "title", "videoItem"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Item from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of image_item
        if self.image_item:
            _dict['imageItem'] = self.image_item.to_dict()
        # override the default output from pydantic by calling `to_dict()` of question_group_item
        if self.question_group_item:
            _dict['questionGroupItem'] = self.question_group_item.to_dict()
        # override the default output from pydantic by calling `to_dict()` of question_item
        if self.question_item:
            _dict['questionItem'] = self.question_item.to_dict()
        # override the default output from pydantic by calling `to_dict()` of video_item
        if self.video_item:
            _dict['videoItem'] = self.video_item.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Item from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "description": obj.get("description"),
            "imageItem": ImageItem.from_dict(obj["imageItem"]) if obj.get("imageItem") is not None else None,
            "itemId": obj.get("itemId"),
            "pageBreakItem": obj.get("pageBreakItem"),
            "questionGroupItem": QuestionGroupItem.from_dict(obj["questionGroupItem"]) if obj.get("questionGroupItem") is not None else None,
            "questionItem": QuestionItem.from_dict(obj["questionItem"]) if obj.get("questionItem") is not None else None,
            "textItem": obj.get("textItem"),
            "title": obj.get("title"),
            "videoItem": VideoItem.from_dict(obj["videoItem"]) if obj.get("videoItem") is not None else None
        })
        return _obj



# coding: utf-8

"""
    Google Forms API

    Reads and writes Google Forms and responses.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.create_item_request import CreateItemRequest

class TestCreateItemRequest(unittest.TestCase):
    """CreateItemRequest unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> CreateItemRequest:
        """Test CreateItemRequest
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `CreateItemRequest`
        """
        model = CreateItemRequest()
        if include_optional:
            return CreateItemRequest(
                item = openapi_client.models.item.Item(
                    description = '', 
                    image_item = openapi_client.models.image_item.ImageItem(
                        image = openapi_client.models.image.Image(
                            alt_text = '', 
                            content_uri = '', 
                            properties = openapi_client.models.media_properties.MediaProperties(
                                alignment = 'ALIGNMENT_UNSPECIFIED', 
                                width = 56, ), 
                            source_uri = '', ), ), 
                    item_id = '', 
                    page_break_item = openapi_client.models.page_break_item.PageBreakItem(), 
                    question_group_item = openapi_client.models.question_group_item.QuestionGroupItem(
                        grid = openapi_client.models.grid.Grid(
                            columns = openapi_client.models.choice_question.ChoiceQuestion(
                                options = [
                                    openapi_client.models.option.Option(
                                        go_to_action = 'GO_TO_ACTION_UNSPECIFIED', 
                                        go_to_section_id = '', 
                                        is_other = True, 
                                        value = '', )
                                    ], 
                                shuffle = True, 
                                type = 'CHOICE_TYPE_UNSPECIFIED', ), 
                            shuffle_questions = True, ), 
                        questions = [
                            openapi_client.models.question.Question(
                                choice_question = openapi_client.models.choice_question.ChoiceQuestion(
                                    shuffle = True, 
                                    type = 'CHOICE_TYPE_UNSPECIFIED', ), 
                                date_question = openapi_client.models.date_question.DateQuestion(
                                    include_time = True, 
                                    include_year = True, ), 
                                file_upload_question = openapi_client.models.file_upload_question.FileUploadQuestion(
                                    folder_id = '', 
                                    max_file_size = '', 
                                    max_files = 56, 
                                    types = [
                                        'FILE_TYPE_UNSPECIFIED'
                                        ], ), 
                                grading = openapi_client.models.grading.Grading(
                                    correct_answers = openapi_client.models.correct_answers.CorrectAnswers(
                                        answers = [
                                            openapi_client.models.correct_answer.CorrectAnswer(
                                                value = '', )
                                            ], ), 
                                    general_feedback = openapi_client.models.feedback.Feedback(
                                        material = [
                                            openapi_client.models.extra_material.ExtraMaterial(
                                                link = openapi_client.models.text_link.TextLink(
                                                    display_text = '', 
                                                    uri = '', ), 
                                                video = openapi_client.models.video_link.VideoLink(
                                                    display_text = '', 
                                                    youtube_uri = '', ), )
                                            ], 
                                        text = '', ), 
                                    point_value = 56, 
                                    when_right = openapi_client.models.feedback.Feedback(
                                        text = '', ), 
                                    when_wrong = , ), 
                                question_id = '', 
                                required = True, 
                                row_question = openapi_client.models.row_question.RowQuestion(
                                    title = '', ), 
                                scale_question = openapi_client.models.scale_question.ScaleQuestion(
                                    high = 56, 
                                    high_label = '', 
                                    low = 56, 
                                    low_label = '', ), 
                                text_question = openapi_client.models.text_question.TextQuestion(
                                    paragraph = True, ), 
                                time_question = openapi_client.models.time_question.TimeQuestion(
                                    duration = True, ), )
                            ], ), 
                    question_item = openapi_client.models.question_item.QuestionItem(
                        question = openapi_client.models.question.Question(
                            question_id = '', 
                            required = True, ), ), 
                    text_item = openapi_client.models.text_item.TextItem(), 
                    title = '', 
                    video_item = openapi_client.models.video_item.VideoItem(
                        caption = '', ), ),
                location = openapi_client.models.location.Location(
                    index = 56, )
            )
        else:
            return CreateItemRequest(
        )
        """

    def testCreateItemRequest(self):
        """Test CreateItemRequest"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

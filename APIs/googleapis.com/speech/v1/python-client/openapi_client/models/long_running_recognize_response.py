# coding: utf-8

"""
    Cloud Speech-to-Text API

    Converts audio to text by applying powerful neural network models.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.speech_adaptation_info import SpeechAdaptationInfo
from openapi_client.models.speech_recognition_result import SpeechRecognitionResult
from openapi_client.models.status import Status
from openapi_client.models.transcript_output_config import TranscriptOutputConfig
from typing import Optional, Set
from typing_extensions import Self

class LongRunningRecognizeResponse(BaseModel):
    """
    The only message returned to the client by the `LongRunningRecognize` method. It contains the result as zero or more sequential `SpeechRecognitionResult` messages. It is included in the `result.response` field of the `Operation` returned by the `GetOperation` call of the `google::longrunning::Operations` service.
    """ # noqa: E501
    output_config: Optional[TranscriptOutputConfig] = Field(default=None, alias="outputConfig")
    output_error: Optional[Status] = Field(default=None, alias="outputError")
    request_id: Optional[StrictStr] = Field(default=None, description="The ID associated with the request. This is a unique ID specific only to the given request.", alias="requestId")
    results: Optional[List[SpeechRecognitionResult]] = Field(default=None, description="Sequential list of transcription results corresponding to sequential portions of audio.")
    speech_adaptation_info: Optional[SpeechAdaptationInfo] = Field(default=None, alias="speechAdaptationInfo")
    total_billed_time: Optional[StrictStr] = Field(default=None, description="When available, billed audio seconds for the corresponding request.", alias="totalBilledTime")
    __properties: ClassVar[List[str]] = ["outputConfig", "outputError", "requestId", "results", "speechAdaptationInfo", "totalBilledTime"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of LongRunningRecognizeResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of output_config
        if self.output_config:
            _dict['outputConfig'] = self.output_config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of output_error
        if self.output_error:
            _dict['outputError'] = self.output_error.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in results (list)
        _items = []
        if self.results:
            for _item_results in self.results:
                if _item_results:
                    _items.append(_item_results.to_dict())
            _dict['results'] = _items
        # override the default output from pydantic by calling `to_dict()` of speech_adaptation_info
        if self.speech_adaptation_info:
            _dict['speechAdaptationInfo'] = self.speech_adaptation_info.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of LongRunningRecognizeResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "outputConfig": TranscriptOutputConfig.from_dict(obj["outputConfig"]) if obj.get("outputConfig") is not None else None,
            "outputError": Status.from_dict(obj["outputError"]) if obj.get("outputError") is not None else None,
            "requestId": obj.get("requestId"),
            "results": [SpeechRecognitionResult.from_dict(_item) for _item in obj["results"]] if obj.get("results") is not None else None,
            "speechAdaptationInfo": SpeechAdaptationInfo.from_dict(obj["speechAdaptationInfo"]) if obj.get("speechAdaptationInfo") is not None else None,
            "totalBilledTime": obj.get("totalBilledTime")
        })
        return _obj



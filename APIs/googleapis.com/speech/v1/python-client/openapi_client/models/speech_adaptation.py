# coding: utf-8

"""
    Cloud Speech-to-Text API

    Converts audio to text by applying powerful neural network models.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.abnf_grammar import ABNFGrammar
from openapi_client.models.custom_class import CustomClass
from openapi_client.models.phrase_set import PhraseSet
from typing import Optional, Set
from typing_extensions import Self

class SpeechAdaptation(BaseModel):
    """
    Speech adaptation configuration.
    """ # noqa: E501
    abnf_grammar: Optional[ABNFGrammar] = Field(default=None, alias="abnfGrammar")
    custom_classes: Optional[List[CustomClass]] = Field(default=None, description="A collection of custom classes. To specify the classes inline, leave the class' `name` blank and fill in the rest of its fields, giving it a unique `custom_class_id`. Refer to the inline defined class in phrase hints by its `custom_class_id`.", alias="customClasses")
    phrase_set_references: Optional[List[StrictStr]] = Field(default=None, description="A collection of phrase set resource names to use.", alias="phraseSetReferences")
    phrase_sets: Optional[List[PhraseSet]] = Field(default=None, description="A collection of phrase sets. To specify the hints inline, leave the phrase set's `name` blank and fill in the rest of its fields. Any phrase set can use any custom class.", alias="phraseSets")
    __properties: ClassVar[List[str]] = ["abnfGrammar", "customClasses", "phraseSetReferences", "phraseSets"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SpeechAdaptation from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of abnf_grammar
        if self.abnf_grammar:
            _dict['abnfGrammar'] = self.abnf_grammar.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in custom_classes (list)
        _items = []
        if self.custom_classes:
            for _item_custom_classes in self.custom_classes:
                if _item_custom_classes:
                    _items.append(_item_custom_classes.to_dict())
            _dict['customClasses'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in phrase_sets (list)
        _items = []
        if self.phrase_sets:
            for _item_phrase_sets in self.phrase_sets:
                if _item_phrase_sets:
                    _items.append(_item_phrase_sets.to_dict())
            _dict['phraseSets'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SpeechAdaptation from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "abnfGrammar": ABNFGrammar.from_dict(obj["abnfGrammar"]) if obj.get("abnfGrammar") is not None else None,
            "customClasses": [CustomClass.from_dict(_item) for _item in obj["customClasses"]] if obj.get("customClasses") is not None else None,
            "phraseSetReferences": obj.get("phraseSetReferences"),
            "phraseSets": [PhraseSet.from_dict(_item) for _item in obj["phraseSets"]] if obj.get("phraseSets") is not None else None
        })
        return _obj



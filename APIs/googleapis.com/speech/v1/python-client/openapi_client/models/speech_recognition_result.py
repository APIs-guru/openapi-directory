# coding: utf-8

"""
    Cloud Speech-to-Text API

    Converts audio to text by applying powerful neural network models.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.speech_recognition_alternative import SpeechRecognitionAlternative
from typing import Optional, Set
from typing_extensions import Self

class SpeechRecognitionResult(BaseModel):
    """
    A speech recognition result corresponding to a portion of the audio.
    """ # noqa: E501
    alternatives: Optional[List[SpeechRecognitionAlternative]] = Field(default=None, description="May contain one or more recognition hypotheses (up to the maximum specified in `max_alternatives`). These alternatives are ordered in terms of accuracy, with the top (first) alternative being the most probable, as ranked by the recognizer.")
    channel_tag: Optional[StrictInt] = Field(default=None, description="For multi-channel audio, this is the channel number corresponding to the recognized result for the audio from that channel. For audio_channel_count = N, its output values can range from '1' to 'N'.", alias="channelTag")
    language_code: Optional[StrictStr] = Field(default=None, description="Output only. The [BCP-47](https://www.rfc-editor.org/rfc/bcp/bcp47.txt) language tag of the language in this result. This language code was detected to have the most likelihood of being spoken in the audio.", alias="languageCode")
    result_end_time: Optional[StrictStr] = Field(default=None, description="Time offset of the end of this result relative to the beginning of the audio.", alias="resultEndTime")
    __properties: ClassVar[List[str]] = ["alternatives", "channelTag", "languageCode", "resultEndTime"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SpeechRecognitionResult from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "language_code",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in alternatives (list)
        _items = []
        if self.alternatives:
            for _item_alternatives in self.alternatives:
                if _item_alternatives:
                    _items.append(_item_alternatives.to_dict())
            _dict['alternatives'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SpeechRecognitionResult from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "alternatives": [SpeechRecognitionAlternative.from_dict(_item) for _item in obj["alternatives"]] if obj.get("alternatives") is not None else None,
            "channelTag": obj.get("channelTag"),
            "languageCode": obj.get("languageCode"),
            "resultEndTime": obj.get("resultEndTime")
        })
        return _obj



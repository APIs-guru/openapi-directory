# coding: utf-8

"""
    Cloud Speech-to-Text API

    Converts audio to text by applying powerful neural network models.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from openapi_client.models.phrase import Phrase
from typing import Optional, Set
from typing_extensions import Self

class PhraseSet(BaseModel):
    """
    Provides \"hints\" to the speech recognizer to favor specific words and phrases in the results.
    """ # noqa: E501
    annotations: Optional[Dict[str, StrictStr]] = Field(default=None, description="Output only. Allows users to store small amounts of arbitrary data. Both the key and the value must be 63 characters or less each. At most 100 annotations. This field is not used.")
    boost: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Hint Boost. Positive value will increase the probability that a specific phrase will be recognized over other similar sounding phrases. The higher the boost, the higher the chance of false positive recognition as well. Negative boost values would correspond to anti-biasing. Anti-biasing is not enabled, so negative boost will simply be ignored. Though `boost` can accept a wide range of positive values, most use cases are best served with values between 0 (exclusive) and 20. We recommend using a binary search approach to finding the optimal value for your use case as well as adding phrases both with and without boost to your requests.")
    delete_time: Optional[StrictStr] = Field(default=None, description="Output only. The time at which this resource was requested for deletion. This field is not used.", alias="deleteTime")
    display_name: Optional[StrictStr] = Field(default=None, description="Output only. User-settable, human-readable name for the PhraseSet. Must be 63 characters or less. This field is not used.", alias="displayName")
    etag: Optional[StrictStr] = Field(default=None, description="Output only. This checksum is computed by the server based on the value of other fields. This may be sent on update, undelete, and delete requests to ensure the client has an up-to-date value before proceeding. This field is not used.")
    expire_time: Optional[StrictStr] = Field(default=None, description="Output only. The time at which this resource will be purged. This field is not used.", alias="expireTime")
    kms_key_name: Optional[StrictStr] = Field(default=None, description="Output only. The [KMS key name](https://cloud.google.com/kms/docs/resource-hierarchy#keys) with which the content of the PhraseSet is encrypted. The expected format is `projects/{project}/locations/{location}/keyRings/{key_ring}/cryptoKeys/{crypto_key}`.", alias="kmsKeyName")
    kms_key_version_name: Optional[StrictStr] = Field(default=None, description="Output only. The [KMS key version name](https://cloud.google.com/kms/docs/resource-hierarchy#key_versions) with which content of the PhraseSet is encrypted. The expected format is `projects/{project}/locations/{location}/keyRings/{key_ring}/cryptoKeys/{crypto_key}/cryptoKeyVersions/{crypto_key_version}`.", alias="kmsKeyVersionName")
    name: Optional[StrictStr] = Field(default=None, description="The resource name of the phrase set.")
    phrases: Optional[List[Phrase]] = Field(default=None, description="A list of word and phrases.")
    reconciling: Optional[StrictBool] = Field(default=None, description="Output only. Whether or not this PhraseSet is in the process of being updated. This field is not used.")
    state: Optional[StrictStr] = Field(default=None, description="Output only. The CustomClass lifecycle state. This field is not used.")
    uid: Optional[StrictStr] = Field(default=None, description="Output only. System-assigned unique identifier for the PhraseSet. This field is not used.")
    __properties: ClassVar[List[str]] = ["annotations", "boost", "deleteTime", "displayName", "etag", "expireTime", "kmsKeyName", "kmsKeyVersionName", "name", "phrases", "reconciling", "state", "uid"]

    @field_validator('state')
    def state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['STATE_UNSPECIFIED', 'ACTIVE', 'DELETED']):
            raise ValueError("must be one of enum values ('STATE_UNSPECIFIED', 'ACTIVE', 'DELETED')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PhraseSet from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "annotations",
            "delete_time",
            "display_name",
            "etag",
            "expire_time",
            "kms_key_name",
            "kms_key_version_name",
            "reconciling",
            "state",
            "uid",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in phrases (list)
        _items = []
        if self.phrases:
            for _item_phrases in self.phrases:
                if _item_phrases:
                    _items.append(_item_phrases.to_dict())
            _dict['phrases'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PhraseSet from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "annotations": obj.get("annotations"),
            "boost": obj.get("boost"),
            "deleteTime": obj.get("deleteTime"),
            "displayName": obj.get("displayName"),
            "etag": obj.get("etag"),
            "expireTime": obj.get("expireTime"),
            "kmsKeyName": obj.get("kmsKeyName"),
            "kmsKeyVersionName": obj.get("kmsKeyVersionName"),
            "name": obj.get("name"),
            "phrases": [Phrase.from_dict(_item) for _item in obj["phrases"]] if obj.get("phrases") is not None else None,
            "reconciling": obj.get("reconciling"),
            "state": obj.get("state"),
            "uid": obj.get("uid")
        })
        return _obj



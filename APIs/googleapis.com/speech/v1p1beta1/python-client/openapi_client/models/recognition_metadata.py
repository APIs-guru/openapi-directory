# coding: utf-8

"""
    Cloud Speech-to-Text API

    Converts audio to text by applying powerful neural network models.

    The version of the OpenAPI document: v1p1beta1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class RecognitionMetadata(BaseModel):
    """
    Description of audio data to be recognized.
    """ # noqa: E501
    audio_topic: Optional[StrictStr] = Field(default=None, description="Description of the content. Eg. \"Recordings of federal supreme court hearings from 2012\".", alias="audioTopic")
    industry_naics_code_of_audio: Optional[StrictInt] = Field(default=None, description="The industry vertical to which this speech recognition request most closely applies. This is most indicative of the topics contained in the audio. Use the 6-digit NAICS code to identify the industry vertical - see https://www.naics.com/search/.", alias="industryNaicsCodeOfAudio")
    interaction_type: Optional[StrictStr] = Field(default=None, description="The use case most closely describing the audio content to be recognized.", alias="interactionType")
    microphone_distance: Optional[StrictStr] = Field(default=None, description="The audio type that most closely describes the audio being recognized.", alias="microphoneDistance")
    obfuscated_id: Optional[StrictStr] = Field(default=None, description="Obfuscated (privacy-protected) ID of the user, to identify number of unique users using the service.", alias="obfuscatedId")
    original_media_type: Optional[StrictStr] = Field(default=None, description="The original media the speech was recorded on.", alias="originalMediaType")
    original_mime_type: Optional[StrictStr] = Field(default=None, description="Mime type of the original audio file. For example `audio/m4a`, `audio/x-alaw-basic`, `audio/mp3`, `audio/3gpp`. A list of possible audio mime types is maintained at http://www.iana.org/assignments/media-types/media-types.xhtml#audio", alias="originalMimeType")
    recording_device_name: Optional[StrictStr] = Field(default=None, description="The device used to make the recording. Examples 'Nexus 5X' or 'Polycom SoundStation IP 6000' or 'POTS' or 'VoIP' or 'Cardioid Microphone'.", alias="recordingDeviceName")
    recording_device_type: Optional[StrictStr] = Field(default=None, description="The type of device the speech was recorded with.", alias="recordingDeviceType")
    __properties: ClassVar[List[str]] = ["audioTopic", "industryNaicsCodeOfAudio", "interactionType", "microphoneDistance", "obfuscatedId", "originalMediaType", "originalMimeType", "recordingDeviceName", "recordingDeviceType"]

    @field_validator('interaction_type')
    def interaction_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['INTERACTION_TYPE_UNSPECIFIED', 'DISCUSSION', 'PRESENTATION', 'PHONE_CALL', 'VOICEMAIL', 'PROFESSIONALLY_PRODUCED', 'VOICE_SEARCH', 'VOICE_COMMAND', 'DICTATION']):
            raise ValueError("must be one of enum values ('INTERACTION_TYPE_UNSPECIFIED', 'DISCUSSION', 'PRESENTATION', 'PHONE_CALL', 'VOICEMAIL', 'PROFESSIONALLY_PRODUCED', 'VOICE_SEARCH', 'VOICE_COMMAND', 'DICTATION')")
        return value

    @field_validator('microphone_distance')
    def microphone_distance_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['MICROPHONE_DISTANCE_UNSPECIFIED', 'NEARFIELD', 'MIDFIELD', 'FARFIELD']):
            raise ValueError("must be one of enum values ('MICROPHONE_DISTANCE_UNSPECIFIED', 'NEARFIELD', 'MIDFIELD', 'FARFIELD')")
        return value

    @field_validator('original_media_type')
    def original_media_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['ORIGINAL_MEDIA_TYPE_UNSPECIFIED', 'AUDIO', 'VIDEO']):
            raise ValueError("must be one of enum values ('ORIGINAL_MEDIA_TYPE_UNSPECIFIED', 'AUDIO', 'VIDEO')")
        return value

    @field_validator('recording_device_type')
    def recording_device_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['RECORDING_DEVICE_TYPE_UNSPECIFIED', 'SMARTPHONE', 'PC', 'PHONE_LINE', 'VEHICLE', 'OTHER_OUTDOOR_DEVICE', 'OTHER_INDOOR_DEVICE']):
            raise ValueError("must be one of enum values ('RECORDING_DEVICE_TYPE_UNSPECIFIED', 'SMARTPHONE', 'PC', 'PHONE_LINE', 'VEHICLE', 'OTHER_OUTDOOR_DEVICE', 'OTHER_INDOOR_DEVICE')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of RecognitionMetadata from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of RecognitionMetadata from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "audioTopic": obj.get("audioTopic"),
            "industryNaicsCodeOfAudio": obj.get("industryNaicsCodeOfAudio"),
            "interactionType": obj.get("interactionType"),
            "microphoneDistance": obj.get("microphoneDistance"),
            "obfuscatedId": obj.get("obfuscatedId"),
            "originalMediaType": obj.get("originalMediaType"),
            "originalMimeType": obj.get("originalMimeType"),
            "recordingDeviceName": obj.get("recordingDeviceName"),
            "recordingDeviceType": obj.get("recordingDeviceType")
        })
        return _obj



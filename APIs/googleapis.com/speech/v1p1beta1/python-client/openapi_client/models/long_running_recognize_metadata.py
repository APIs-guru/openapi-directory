# coding: utf-8

"""
    Cloud Speech-to-Text API

    Converts audio to text by applying powerful neural network models.

    The version of the OpenAPI document: v1p1beta1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.transcript_output_config import TranscriptOutputConfig
from typing import Optional, Set
from typing_extensions import Self

class LongRunningRecognizeMetadata(BaseModel):
    """
    Describes the progress of a long-running `LongRunningRecognize` call. It is included in the `metadata` field of the `Operation` returned by the `GetOperation` call of the `google::longrunning::Operations` service.
    """ # noqa: E501
    last_update_time: Optional[StrictStr] = Field(default=None, description="Time of the most recent processing update.", alias="lastUpdateTime")
    output_config: Optional[TranscriptOutputConfig] = Field(default=None, alias="outputConfig")
    progress_percent: Optional[StrictInt] = Field(default=None, description="Approximate percentage of audio processed thus far. Guaranteed to be 100 when the audio is fully processed and the results are available.", alias="progressPercent")
    start_time: Optional[StrictStr] = Field(default=None, description="Time when the request was received.", alias="startTime")
    uri: Optional[StrictStr] = Field(default=None, description="Output only. The URI of the audio file being transcribed. Empty if the audio was sent as byte content.")
    __properties: ClassVar[List[str]] = ["lastUpdateTime", "outputConfig", "progressPercent", "startTime", "uri"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of LongRunningRecognizeMetadata from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "uri",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of output_config
        if self.output_config:
            _dict['outputConfig'] = self.output_config.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of LongRunningRecognizeMetadata from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "lastUpdateTime": obj.get("lastUpdateTime"),
            "outputConfig": TranscriptOutputConfig.from_dict(obj["outputConfig"]) if obj.get("outputConfig") is not None else None,
            "progressPercent": obj.get("progressPercent"),
            "startTime": obj.get("startTime"),
            "uri": obj.get("uri")
        })
        return _obj



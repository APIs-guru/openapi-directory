# coding: utf-8

"""
    BigQuery API

    A data platform for customers to create, manage, share and query data.

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.error_proto import ErrorProto
from openapi_client.models.job_configuration import JobConfiguration
from openapi_client.models.job_reference import JobReference
from openapi_client.models.job_statistics import JobStatistics
from openapi_client.models.job_status import JobStatus
from typing import Optional, Set
from typing_extensions import Self

class JobListJobsInner(BaseModel):
    """
    ListFormatJob is a partial projection of job information returned as part of a jobs.list response.
    """ # noqa: E501
    configuration: Optional[JobConfiguration] = None
    error_result: Optional[ErrorProto] = Field(default=None, alias="errorResult")
    id: Optional[StrictStr] = Field(default=None, description="Unique opaque ID of the job.")
    job_reference: Optional[JobReference] = Field(default=None, alias="jobReference")
    kind: Optional[StrictStr] = Field(default=None, description="The resource type.")
    principal_subject: Optional[StrictStr] = Field(default=None, description="[Full-projection-only] String representation of identity of requesting party. Populated for both first- and third-party identities. Only present for APIs that support third-party identities.")
    state: Optional[StrictStr] = Field(default=None, description="Running state of the job. When the state is DONE, errorResult can be checked to determine whether the job succeeded or failed.")
    statistics: Optional[JobStatistics] = None
    status: Optional[JobStatus] = None
    user_email: Optional[StrictStr] = Field(default=None, description="[Full-projection-only] Email address of the user who ran the job.")
    __properties: ClassVar[List[str]] = ["configuration", "errorResult", "id", "jobReference", "kind", "principal_subject", "state", "statistics", "status", "user_email"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of JobListJobsInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of configuration
        if self.configuration:
            _dict['configuration'] = self.configuration.to_dict()
        # override the default output from pydantic by calling `to_dict()` of error_result
        if self.error_result:
            _dict['errorResult'] = self.error_result.to_dict()
        # override the default output from pydantic by calling `to_dict()` of job_reference
        if self.job_reference:
            _dict['jobReference'] = self.job_reference.to_dict()
        # override the default output from pydantic by calling `to_dict()` of statistics
        if self.statistics:
            _dict['statistics'] = self.statistics.to_dict()
        # override the default output from pydantic by calling `to_dict()` of status
        if self.status:
            _dict['status'] = self.status.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of JobListJobsInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "configuration": JobConfiguration.from_dict(obj["configuration"]) if obj.get("configuration") is not None else None,
            "errorResult": ErrorProto.from_dict(obj["errorResult"]) if obj.get("errorResult") is not None else None,
            "id": obj.get("id"),
            "jobReference": JobReference.from_dict(obj["jobReference"]) if obj.get("jobReference") is not None else None,
            "kind": obj.get("kind"),
            "principal_subject": obj.get("principal_subject"),
            "state": obj.get("state"),
            "statistics": JobStatistics.from_dict(obj["statistics"]) if obj.get("statistics") is not None else None,
            "status": JobStatus.from_dict(obj["status"]) if obj.get("status") is not None else None,
            "user_email": obj.get("user_email")
        })
        return _obj



# coding: utf-8

"""
    BigQuery API

    A data platform for customers to create, manage, share and query data.

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.standard_sql_data_type import StandardSqlDataType
from typing import Optional, Set
from typing_extensions import Self

class Argument(BaseModel):
    """
    Input/output argument of a function or a stored procedure.
    """ # noqa: E501
    argument_kind: Optional[StrictStr] = Field(default=None, description="Optional. Defaults to FIXED_TYPE.", alias="argumentKind")
    data_type: Optional[StandardSqlDataType] = Field(default=None, alias="dataType")
    is_aggregate: Optional[StrictBool] = Field(default=None, description="Optional. Whether the argument is an aggregate function parameter. Must be Unset for routine types other than AGGREGATE_FUNCTION. For AGGREGATE_FUNCTION, if set to false, it is equivalent to adding \"NOT AGGREGATE\" clause in DDL; Otherwise, it is equivalent to omitting \"NOT AGGREGATE\" clause in DDL.", alias="isAggregate")
    mode: Optional[StrictStr] = Field(default=None, description="Optional. Specifies whether the argument is input or output. Can be set for procedures only.")
    name: Optional[StrictStr] = Field(default=None, description="Optional. The name of this argument. Can be absent for function return argument.")
    __properties: ClassVar[List[str]] = ["argumentKind", "dataType", "isAggregate", "mode", "name"]

    @field_validator('argument_kind')
    def argument_kind_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['ARGUMENT_KIND_UNSPECIFIED', 'FIXED_TYPE', 'ANY_TYPE']):
            raise ValueError("must be one of enum values ('ARGUMENT_KIND_UNSPECIFIED', 'FIXED_TYPE', 'ANY_TYPE')")
        return value

    @field_validator('mode')
    def mode_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['MODE_UNSPECIFIED', 'IN', 'OUT', 'INOUT']):
            raise ValueError("must be one of enum values ('MODE_UNSPECIFIED', 'IN', 'OUT', 'INOUT')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Argument from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of data_type
        if self.data_type:
            _dict['dataType'] = self.data_type.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Argument from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "argumentKind": obj.get("argumentKind"),
            "dataType": StandardSqlDataType.from_dict(obj["dataType"]) if obj.get("dataType") is not None else None,
            "isAggregate": obj.get("isAggregate"),
            "mode": obj.get("mode"),
            "name": obj.get("name")
        })
        return _obj



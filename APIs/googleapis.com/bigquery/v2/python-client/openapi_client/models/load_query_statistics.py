# coding: utf-8

"""
    BigQuery API

    A data platform for customers to create, manage, share and query data.

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class LoadQueryStatistics(BaseModel):
    """
    Statistics for a LOAD query.
    """ # noqa: E501
    bad_records: Optional[StrictStr] = Field(default=None, description="Output only. The number of bad records encountered while processing a LOAD query. Note that if the job has failed because of more bad records encountered than the maximum allowed in the load job configuration, then this number can be less than the total number of bad records present in the input data.", alias="badRecords")
    bytes_transferred: Optional[StrictStr] = Field(default=None, description="Output only. This field is deprecated. The number of bytes of source data copied over the network for a `LOAD` query. `transferred_bytes` has the canonical value for physical transferred bytes, which is used for BigQuery Omni billing.", alias="bytesTransferred")
    input_file_bytes: Optional[StrictStr] = Field(default=None, description="Output only. Number of bytes of source data in a LOAD query.", alias="inputFileBytes")
    input_files: Optional[StrictStr] = Field(default=None, description="Output only. Number of source files in a LOAD query.", alias="inputFiles")
    output_bytes: Optional[StrictStr] = Field(default=None, description="Output only. Size of the loaded data in bytes. Note that while a LOAD query is in the running state, this value may change.", alias="outputBytes")
    output_rows: Optional[StrictStr] = Field(default=None, description="Output only. Number of rows imported in a LOAD query. Note that while a LOAD query is in the running state, this value may change.", alias="outputRows")
    __properties: ClassVar[List[str]] = ["badRecords", "bytesTransferred", "inputFileBytes", "inputFiles", "outputBytes", "outputRows"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of LoadQueryStatistics from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "bad_records",
            "bytes_transferred",
            "input_file_bytes",
            "input_files",
            "output_bytes",
            "output_rows",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of LoadQueryStatistics from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "badRecords": obj.get("badRecords"),
            "bytesTransferred": obj.get("bytesTransferred"),
            "inputFileBytes": obj.get("inputFileBytes"),
            "inputFiles": obj.get("inputFiles"),
            "outputBytes": obj.get("outputBytes"),
            "outputRows": obj.get("outputRows")
        })
        return _obj



# coding: utf-8

"""
    BigQuery API

    A data platform for customers to create, manage, share and query data.

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictBytes, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class MaterializedViewDefinition(BaseModel):
    """
    Definition and configuration of a materialized view.
    """ # noqa: E501
    allow_non_incremental_definition: Optional[StrictBool] = Field(default=None, description="Optional. This option declares authors intention to construct a materialized view that will not be refreshed incrementally.", alias="allowNonIncrementalDefinition")
    enable_refresh: Optional[StrictBool] = Field(default=None, description="Optional. Enable automatic refresh of the materialized view when the base table is updated. The default value is \"true\".", alias="enableRefresh")
    last_refresh_time: Optional[StrictStr] = Field(default=None, description="Output only. The time when this materialized view was last refreshed, in milliseconds since the epoch.", alias="lastRefreshTime")
    max_staleness: Optional[Union[StrictBytes, StrictStr]] = Field(default=None, description="[Optional] Max staleness of data that could be returned when materizlized view is queried (formatted as Google SQL Interval type).", alias="maxStaleness")
    query: Optional[StrictStr] = Field(default=None, description="Required. A query whose results are persisted.")
    refresh_interval_ms: Optional[StrictStr] = Field(default=None, description="Optional. The maximum frequency at which this materialized view will be refreshed. The default value is \"1800000\" (30 minutes).", alias="refreshIntervalMs")
    __properties: ClassVar[List[str]] = ["allowNonIncrementalDefinition", "enableRefresh", "lastRefreshTime", "maxStaleness", "query", "refreshIntervalMs"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of MaterializedViewDefinition from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "last_refresh_time",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of MaterializedViewDefinition from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "allowNonIncrementalDefinition": obj.get("allowNonIncrementalDefinition"),
            "enableRefresh": obj.get("enableRefresh"),
            "lastRefreshTime": obj.get("lastRefreshTime"),
            "maxStaleness": obj.get("maxStaleness"),
            "query": obj.get("query"),
            "refreshIntervalMs": obj.get("refreshIntervalMs")
        })
        return _obj



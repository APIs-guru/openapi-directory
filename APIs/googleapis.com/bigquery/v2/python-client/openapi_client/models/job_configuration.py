# coding: utf-8

"""
    BigQuery API

    A data platform for customers to create, manage, share and query data.

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.job_configuration_extract import JobConfigurationExtract
from openapi_client.models.job_configuration_load import JobConfigurationLoad
from openapi_client.models.job_configuration_query import JobConfigurationQuery
from openapi_client.models.job_configuration_table_copy import JobConfigurationTableCopy
from typing import Optional, Set
from typing_extensions import Self

class JobConfiguration(BaseModel):
    """
    JobConfiguration
    """ # noqa: E501
    copy: Optional[JobConfigurationTableCopy] = None
    dry_run: Optional[StrictBool] = Field(default=None, description="Optional. If set, don't actually run this job. A valid query will return a mostly empty response with some processing statistics, while an invalid query will return the same error it would if it wasn't a dry run. Behavior of non-query jobs is undefined.", alias="dryRun")
    extract: Optional[JobConfigurationExtract] = None
    job_timeout_ms: Optional[StrictStr] = Field(default=None, description="Optional. Job timeout in milliseconds. If this time limit is exceeded, BigQuery might attempt to stop the job.", alias="jobTimeoutMs")
    job_type: Optional[StrictStr] = Field(default=None, description="Output only. The type of the job. Can be QUERY, LOAD, EXTRACT, COPY or UNKNOWN.", alias="jobType")
    labels: Optional[Dict[str, StrictStr]] = Field(default=None, description="The labels associated with this job. You can use these to organize and group your jobs. Label keys and values can be no longer than 63 characters, can only contain lowercase letters, numeric characters, underscores and dashes. International characters are allowed. Label values are optional. Label keys must start with a letter and each label in the list must have a different key.")
    load: Optional[JobConfigurationLoad] = None
    query: Optional[JobConfigurationQuery] = None
    __properties: ClassVar[List[str]] = ["copy", "dryRun", "extract", "jobTimeoutMs", "jobType", "labels", "load", "query"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of JobConfiguration from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of copy
        if self.copy:
            _dict['copy'] = self.copy.to_dict()
        # override the default output from pydantic by calling `to_dict()` of extract
        if self.extract:
            _dict['extract'] = self.extract.to_dict()
        # override the default output from pydantic by calling `to_dict()` of load
        if self.load:
            _dict['load'] = self.load.to_dict()
        # override the default output from pydantic by calling `to_dict()` of query
        if self.query:
            _dict['query'] = self.query.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of JobConfiguration from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "copy": JobConfigurationTableCopy.from_dict(obj["copy"]) if obj.get("copy") is not None else None,
            "dryRun": obj.get("dryRun"),
            "extract": JobConfigurationExtract.from_dict(obj["extract"]) if obj.get("extract") is not None else None,
            "jobTimeoutMs": obj.get("jobTimeoutMs"),
            "jobType": obj.get("jobType"),
            "labels": obj.get("labels"),
            "load": JobConfigurationLoad.from_dict(obj["load"]) if obj.get("load") is not None else None,
            "query": JobConfigurationQuery.from_dict(obj["query"]) if obj.get("query") is not None else None
        })
        return _obj



# coding: utf-8

"""
    BigQuery API

    A data platform for customers to create, manage, share and query data.

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class QueryTimelineSample(BaseModel):
    """
    Summary of the state of query execution at a given time.
    """ # noqa: E501
    active_units: Optional[StrictStr] = Field(default=None, description="Total number of active workers. This does not correspond directly to slot usage. This is the largest value observed since the last sample.", alias="activeUnits")
    completed_units: Optional[StrictStr] = Field(default=None, description="Total parallel units of work completed by this query.", alias="completedUnits")
    elapsed_ms: Optional[StrictStr] = Field(default=None, description="Milliseconds elapsed since the start of query execution.", alias="elapsedMs")
    estimated_runnable_units: Optional[StrictStr] = Field(default=None, description="Units of work that can be scheduled immediately. Providing additional slots for these units of work will accelerate the query, if no other query in the reservation needs additional slots.", alias="estimatedRunnableUnits")
    pending_units: Optional[StrictStr] = Field(default=None, description="Total units of work remaining for the query. This number can be revised (increased or decreased) while the query is running.", alias="pendingUnits")
    total_slot_ms: Optional[StrictStr] = Field(default=None, description="Cumulative slot-ms consumed by the query.", alias="totalSlotMs")
    __properties: ClassVar[List[str]] = ["activeUnits", "completedUnits", "elapsedMs", "estimatedRunnableUnits", "pendingUnits", "totalSlotMs"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of QueryTimelineSample from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of QueryTimelineSample from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "activeUnits": obj.get("activeUnits"),
            "completedUnits": obj.get("completedUnits"),
            "elapsedMs": obj.get("elapsedMs"),
            "estimatedRunnableUnits": obj.get("estimatedRunnableUnits"),
            "pendingUnits": obj.get("pendingUnits"),
            "totalSlotMs": obj.get("totalSlotMs")
        })
        return _obj



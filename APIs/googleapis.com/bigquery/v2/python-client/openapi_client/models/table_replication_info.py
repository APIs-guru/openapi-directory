# coding: utf-8

"""
    BigQuery API

    A data platform for customers to create, manage, share and query data.

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.error_proto import ErrorProto
from openapi_client.models.table_reference import TableReference
from typing import Optional, Set
from typing_extensions import Self

class TableReplicationInfo(BaseModel):
    """
    Replication info of a table created using `AS REPLICA` DDL like: `CREATE MATERIALIZED VIEW mv1 AS REPLICA OF src_mv`
    """ # noqa: E501
    replicated_source_last_refresh_time: Optional[StrictStr] = Field(default=None, description="Optional. Output only. If source is a materialized view, this field signifies the last refresh time of the source.", alias="replicatedSourceLastRefreshTime")
    replication_error: Optional[ErrorProto] = Field(default=None, alias="replicationError")
    replication_interval_ms: Optional[StrictStr] = Field(default=None, description="Required. Specifies the interval at which the source table is polled for updates.", alias="replicationIntervalMs")
    replication_status: Optional[StrictStr] = Field(default=None, description="Optional. Output only. Replication status of configured replication.", alias="replicationStatus")
    source_table: Optional[TableReference] = Field(default=None, alias="sourceTable")
    __properties: ClassVar[List[str]] = ["replicatedSourceLastRefreshTime", "replicationError", "replicationIntervalMs", "replicationStatus", "sourceTable"]

    @field_validator('replication_status')
    def replication_status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['REPLICATION_STATUS_UNSPECIFIED', 'ACTIVE', 'SOURCE_DELETED', 'PERMISSION_DENIED', 'UNSUPPORTED_CONFIGURATION']):
            raise ValueError("must be one of enum values ('REPLICATION_STATUS_UNSPECIFIED', 'ACTIVE', 'SOURCE_DELETED', 'PERMISSION_DENIED', 'UNSUPPORTED_CONFIGURATION')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of TableReplicationInfo from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "replicated_source_last_refresh_time",
            "replication_status",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of replication_error
        if self.replication_error:
            _dict['replicationError'] = self.replication_error.to_dict()
        # override the default output from pydantic by calling `to_dict()` of source_table
        if self.source_table:
            _dict['sourceTable'] = self.source_table.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of TableReplicationInfo from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "replicatedSourceLastRefreshTime": obj.get("replicatedSourceLastRefreshTime"),
            "replicationError": ErrorProto.from_dict(obj["replicationError"]) if obj.get("replicationError") is not None else None,
            "replicationIntervalMs": obj.get("replicationIntervalMs"),
            "replicationStatus": obj.get("replicationStatus"),
            "sourceTable": TableReference.from_dict(obj["sourceTable"]) if obj.get("sourceTable") is not None else None
        })
        return _obj



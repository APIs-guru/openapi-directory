# coding: utf-8

"""
    BigQuery API

    A data platform for customers to create, manage, share and query data.

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.table_reference import TableReference
from typing import Optional, Set
from typing_extensions import Self

class MaterializedView(BaseModel):
    """
    A materialized view considered for a query job.
    """ # noqa: E501
    chosen: Optional[StrictBool] = Field(default=None, description="Whether the materialized view is chosen for the query. A materialized view can be chosen to rewrite multiple parts of the same query. If a materialized view is chosen to rewrite any part of the query, then this field is true, even if the materialized view was not chosen to rewrite others parts.")
    estimated_bytes_saved: Optional[StrictStr] = Field(default=None, description="If present, specifies a best-effort estimation of the bytes saved by using the materialized view rather than its base tables.", alias="estimatedBytesSaved")
    rejected_reason: Optional[StrictStr] = Field(default=None, description="If present, specifies the reason why the materialized view was not chosen for the query.", alias="rejectedReason")
    table_reference: Optional[TableReference] = Field(default=None, alias="tableReference")
    __properties: ClassVar[List[str]] = ["chosen", "estimatedBytesSaved", "rejectedReason", "tableReference"]

    @field_validator('rejected_reason')
    def rejected_reason_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['REJECTED_REASON_UNSPECIFIED', 'NO_DATA', 'COST', 'BASE_TABLE_TRUNCATED', 'BASE_TABLE_DATA_CHANGE', 'BASE_TABLE_PARTITION_EXPIRATION_CHANGE', 'BASE_TABLE_EXPIRED_PARTITION', 'BASE_TABLE_INCOMPATIBLE_METADATA_CHANGE', 'TIME_ZONE', 'OUT_OF_TIME_TRAVEL_WINDOW', 'BASE_TABLE_FINE_GRAINED_SECURITY_POLICY', 'BASE_TABLE_TOO_STALE']):
            raise ValueError("must be one of enum values ('REJECTED_REASON_UNSPECIFIED', 'NO_DATA', 'COST', 'BASE_TABLE_TRUNCATED', 'BASE_TABLE_DATA_CHANGE', 'BASE_TABLE_PARTITION_EXPIRATION_CHANGE', 'BASE_TABLE_EXPIRED_PARTITION', 'BASE_TABLE_INCOMPATIBLE_METADATA_CHANGE', 'TIME_ZONE', 'OUT_OF_TIME_TRAVEL_WINDOW', 'BASE_TABLE_FINE_GRAINED_SECURITY_POLICY', 'BASE_TABLE_TOO_STALE')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of MaterializedView from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of table_reference
        if self.table_reference:
            _dict['tableReference'] = self.table_reference.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of MaterializedView from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "chosen": obj.get("chosen"),
            "estimatedBytesSaved": obj.get("estimatedBytesSaved"),
            "rejectedReason": obj.get("rejectedReason"),
            "tableReference": TableReference.from_dict(obj["tableReference"]) if obj.get("tableReference") is not None else None
        })
        return _obj



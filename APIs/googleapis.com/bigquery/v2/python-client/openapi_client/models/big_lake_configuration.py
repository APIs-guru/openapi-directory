# coding: utf-8

"""
    BigQuery API

    A data platform for customers to create, manage, share and query data.

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class BigLakeConfiguration(BaseModel):
    """
    Configuration for BigLake managed tables.
    """ # noqa: E501
    connection_id: Optional[StrictStr] = Field(default=None, description="Required. The connection specifying the credentials to be used to read and write to external storage, such as Cloud Storage. The connection_id can have the form \"<project\\_id>.<location\\_id>.<connection\\_id>\" or \"projects/<project\\_id>/locations/<location\\_id>/connections/<connection\\_id>\".", alias="connectionId")
    file_format: Optional[StrictStr] = Field(default=None, description="Required. The file format the table data is stored in.", alias="fileFormat")
    storage_uri: Optional[StrictStr] = Field(default=None, description="Required. The fully qualified location prefix of the external folder where table data is stored. The '*' wildcard character is not allowed. The URI should be in the format \"gs://bucket/path_to_table/\"", alias="storageUri")
    table_format: Optional[StrictStr] = Field(default=None, description="Required. The table format the metadata only snapshots are stored in.", alias="tableFormat")
    __properties: ClassVar[List[str]] = ["connectionId", "fileFormat", "storageUri", "tableFormat"]

    @field_validator('file_format')
    def file_format_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['FILE_FORMAT_UNSPECIFIED', 'PARQUET']):
            raise ValueError("must be one of enum values ('FILE_FORMAT_UNSPECIFIED', 'PARQUET')")
        return value

    @field_validator('table_format')
    def table_format_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['TABLE_FORMAT_UNSPECIFIED', 'ICEBERG']):
            raise ValueError("must be one of enum values ('TABLE_FORMAT_UNSPECIFIED', 'ICEBERG')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of BigLakeConfiguration from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of BigLakeConfiguration from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "connectionId": obj.get("connectionId"),
            "fileFormat": obj.get("fileFormat"),
            "storageUri": obj.get("storageUri"),
            "tableFormat": obj.get("tableFormat")
        })
        return _obj



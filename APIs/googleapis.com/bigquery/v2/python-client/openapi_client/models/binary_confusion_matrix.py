# coding: utf-8

"""
    BigQuery API

    A data platform for customers to create, manage, share and query data.

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class BinaryConfusionMatrix(BaseModel):
    """
    Confusion matrix for binary classification models.
    """ # noqa: E501
    accuracy: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The fraction of predictions given the correct label.")
    f1_score: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The equally weighted average of recall and precision.", alias="f1Score")
    false_negatives: Optional[StrictStr] = Field(default=None, description="Number of false samples predicted as false.", alias="falseNegatives")
    false_positives: Optional[StrictStr] = Field(default=None, description="Number of false samples predicted as true.", alias="falsePositives")
    positive_class_threshold: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Threshold value used when computing each of the following metric.", alias="positiveClassThreshold")
    precision: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The fraction of actual positive predictions that had positive actual labels.")
    recall: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The fraction of actual positive labels that were given a positive prediction.")
    true_negatives: Optional[StrictStr] = Field(default=None, description="Number of true samples predicted as false.", alias="trueNegatives")
    true_positives: Optional[StrictStr] = Field(default=None, description="Number of true samples predicted as true.", alias="truePositives")
    __properties: ClassVar[List[str]] = ["accuracy", "f1Score", "falseNegatives", "falsePositives", "positiveClassThreshold", "precision", "recall", "trueNegatives", "truePositives"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of BinaryConfusionMatrix from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of BinaryConfusionMatrix from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "accuracy": obj.get("accuracy"),
            "f1Score": obj.get("f1Score"),
            "falseNegatives": obj.get("falseNegatives"),
            "falsePositives": obj.get("falsePositives"),
            "positiveClassThreshold": obj.get("positiveClassThreshold"),
            "precision": obj.get("precision"),
            "recall": obj.get("recall"),
            "trueNegatives": obj.get("trueNegatives"),
            "truePositives": obj.get("truePositives")
        })
        return _obj



# coding: utf-8

"""
    BigQuery API

    A data platform for customers to create, manage, share and query data.

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.clustering import Clustering
from openapi_client.models.range_partitioning import RangePartitioning
from openapi_client.models.table_list_tables_inner_view import TableListTablesInnerView
from openapi_client.models.table_reference import TableReference
from openapi_client.models.time_partitioning import TimePartitioning
from typing import Optional, Set
from typing_extensions import Self

class TableListTablesInner(BaseModel):
    """
    TableListTablesInner
    """ # noqa: E501
    clustering: Optional[Clustering] = None
    creation_time: Optional[StrictStr] = Field(default=None, description="Output only. The time when this table was created, in milliseconds since the epoch.", alias="creationTime")
    expiration_time: Optional[StrictStr] = Field(default=None, description="The time when this table expires, in milliseconds since the epoch. If not present, the table will persist indefinitely. Expired tables will be deleted and their storage reclaimed.", alias="expirationTime")
    friendly_name: Optional[StrictStr] = Field(default=None, description="The user-friendly name for this table.", alias="friendlyName")
    id: Optional[StrictStr] = Field(default=None, description="An opaque ID of the table.")
    kind: Optional[StrictStr] = Field(default=None, description="The resource type.")
    labels: Optional[Dict[str, StrictStr]] = Field(default=None, description="The labels associated with this table. You can use these to organize and group your tables.")
    range_partitioning: Optional[RangePartitioning] = Field(default=None, alias="rangePartitioning")
    require_partition_filter: Optional[StrictBool] = Field(default=False, description="Optional. If set to true, queries including this table must specify a partition filter. This filter is used for partition elimination.", alias="requirePartitionFilter")
    table_reference: Optional[TableReference] = Field(default=None, alias="tableReference")
    time_partitioning: Optional[TimePartitioning] = Field(default=None, alias="timePartitioning")
    type: Optional[StrictStr] = Field(default=None, description="The type of table.")
    view: Optional[TableListTablesInnerView] = None
    __properties: ClassVar[List[str]] = ["clustering", "creationTime", "expirationTime", "friendlyName", "id", "kind", "labels", "rangePartitioning", "requirePartitionFilter", "tableReference", "timePartitioning", "type", "view"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of TableListTablesInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "creation_time",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of clustering
        if self.clustering:
            _dict['clustering'] = self.clustering.to_dict()
        # override the default output from pydantic by calling `to_dict()` of range_partitioning
        if self.range_partitioning:
            _dict['rangePartitioning'] = self.range_partitioning.to_dict()
        # override the default output from pydantic by calling `to_dict()` of table_reference
        if self.table_reference:
            _dict['tableReference'] = self.table_reference.to_dict()
        # override the default output from pydantic by calling `to_dict()` of time_partitioning
        if self.time_partitioning:
            _dict['timePartitioning'] = self.time_partitioning.to_dict()
        # override the default output from pydantic by calling `to_dict()` of view
        if self.view:
            _dict['view'] = self.view.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of TableListTablesInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "clustering": Clustering.from_dict(obj["clustering"]) if obj.get("clustering") is not None else None,
            "creationTime": obj.get("creationTime"),
            "expirationTime": obj.get("expirationTime"),
            "friendlyName": obj.get("friendlyName"),
            "id": obj.get("id"),
            "kind": obj.get("kind"),
            "labels": obj.get("labels"),
            "rangePartitioning": RangePartitioning.from_dict(obj["rangePartitioning"]) if obj.get("rangePartitioning") is not None else None,
            "requirePartitionFilter": obj.get("requirePartitionFilter") if obj.get("requirePartitionFilter") is not None else False,
            "tableReference": TableReference.from_dict(obj["tableReference"]) if obj.get("tableReference") is not None else None,
            "timePartitioning": TimePartitioning.from_dict(obj["timePartitioning"]) if obj.get("timePartitioning") is not None else None,
            "type": obj.get("type"),
            "view": TableListTablesInnerView.from_dict(obj["view"]) if obj.get("view") is not None else None
        })
        return _obj



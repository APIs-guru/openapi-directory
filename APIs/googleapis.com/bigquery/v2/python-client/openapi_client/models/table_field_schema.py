# coding: utf-8

"""
    BigQuery API

    A data platform for customers to create, manage, share and query data.

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.table_field_schema_categories import TableFieldSchemaCategories
from openapi_client.models.table_field_schema_policy_tags import TableFieldSchemaPolicyTags
from openapi_client.models.table_field_schema_range_element_type import TableFieldSchemaRangeElementType
from typing import Optional, Set
from typing_extensions import Self

class TableFieldSchema(BaseModel):
    """
    A field in TableSchema
    """ # noqa: E501
    categories: Optional[TableFieldSchemaCategories] = None
    collation: Optional[StrictStr] = Field(default=None, description="Optional. Field collation can be set only when the type of field is STRING. The following values are supported: * 'und:ci': undetermined locale, case insensitive. * '': empty string. Default to case-sensitive behavior.")
    default_value_expression: Optional[StrictStr] = Field(default=None, description="Optional. A SQL expression to specify the [default value] (https://cloud.google.com/bigquery/docs/default-values) for this field.", alias="defaultValueExpression")
    description: Optional[StrictStr] = Field(default=None, description="Optional. The field description. The maximum length is 1,024 characters.")
    fields: Optional[List[TableFieldSchema]] = Field(default=None, description="Optional. Describes the nested schema fields if the type property is set to RECORD.")
    max_length: Optional[StrictStr] = Field(default=None, description="Optional. Maximum length of values of this field for STRINGS or BYTES. If max_length is not specified, no maximum length constraint is imposed on this field. If type = \"STRING\", then max_length represents the maximum UTF-8 length of strings in this field. If type = \"BYTES\", then max_length represents the maximum number of bytes in this field. It is invalid to set this field if type ≠ \"STRING\" and ≠ \"BYTES\".", alias="maxLength")
    mode: Optional[StrictStr] = Field(default=None, description="Optional. The field mode. Possible values include NULLABLE, REQUIRED and REPEATED. The default value is NULLABLE.")
    name: Optional[StrictStr] = Field(default=None, description="Required. The field name. The name must contain only letters (a-z, A-Z), numbers (0-9), or underscores (_), and must start with a letter or underscore. The maximum length is 300 characters.")
    policy_tags: Optional[TableFieldSchemaPolicyTags] = Field(default=None, alias="policyTags")
    precision: Optional[StrictStr] = Field(default=None, description="Optional. Precision (maximum number of total digits in base 10) and scale (maximum number of digits in the fractional part in base 10) constraints for values of this field for NUMERIC or BIGNUMERIC. It is invalid to set precision or scale if type ≠ \"NUMERIC\" and ≠ \"BIGNUMERIC\". If precision and scale are not specified, no value range constraint is imposed on this field insofar as values are permitted by the type. Values of this NUMERIC or BIGNUMERIC field must be in this range when: * Precision (P) and scale (S) are specified: [-10P-S + 10-S, 10P-S - 10-S] * Precision (P) is specified but not scale (and thus scale is interpreted to be equal to zero): [-10P + 1, 10P - 1]. Acceptable values for precision and scale if both are specified: * If type = \"NUMERIC\": 1 ≤ precision - scale ≤ 29 and 0 ≤ scale ≤ 9. * If type = \"BIGNUMERIC\": 1 ≤ precision - scale ≤ 38 and 0 ≤ scale ≤ 38. Acceptable values for precision if only precision is specified but not scale (and thus scale is interpreted to be equal to zero): * If type = \"NUMERIC\": 1 ≤ precision ≤ 29. * If type = \"BIGNUMERIC\": 1 ≤ precision ≤ 38. If scale is specified but not precision, then it is invalid.")
    range_element_type: Optional[TableFieldSchemaRangeElementType] = Field(default=None, alias="rangeElementType")
    rounding_mode: Optional[StrictStr] = Field(default=None, description="Optional. Specifies the rounding mode to be used when storing values of NUMERIC and BIGNUMERIC type.", alias="roundingMode")
    scale: Optional[StrictStr] = Field(default=None, description="Optional. See documentation for precision.")
    type: Optional[StrictStr] = Field(default=None, description="Required. The field data type. Possible values include: * STRING * BYTES * INTEGER (or INT64) * FLOAT (or FLOAT64) * BOOLEAN (or BOOL) * TIMESTAMP * DATE * TIME * DATETIME * GEOGRAPHY * NUMERIC * BIGNUMERIC * JSON * RECORD (or STRUCT) Use of RECORD/STRUCT indicates that the field contains a nested schema.")
    __properties: ClassVar[List[str]] = ["categories", "collation", "defaultValueExpression", "description", "fields", "maxLength", "mode", "name", "policyTags", "precision", "rangeElementType", "roundingMode", "scale", "type"]

    @field_validator('rounding_mode')
    def rounding_mode_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['ROUNDING_MODE_UNSPECIFIED', 'ROUND_HALF_AWAY_FROM_ZERO', 'ROUND_HALF_EVEN']):
            raise ValueError("must be one of enum values ('ROUNDING_MODE_UNSPECIFIED', 'ROUND_HALF_AWAY_FROM_ZERO', 'ROUND_HALF_EVEN')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of TableFieldSchema from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of categories
        if self.categories:
            _dict['categories'] = self.categories.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in fields (list)
        _items = []
        if self.fields:
            for _item_fields in self.fields:
                if _item_fields:
                    _items.append(_item_fields.to_dict())
            _dict['fields'] = _items
        # override the default output from pydantic by calling `to_dict()` of policy_tags
        if self.policy_tags:
            _dict['policyTags'] = self.policy_tags.to_dict()
        # override the default output from pydantic by calling `to_dict()` of range_element_type
        if self.range_element_type:
            _dict['rangeElementType'] = self.range_element_type.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of TableFieldSchema from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "categories": TableFieldSchemaCategories.from_dict(obj["categories"]) if obj.get("categories") is not None else None,
            "collation": obj.get("collation"),
            "defaultValueExpression": obj.get("defaultValueExpression"),
            "description": obj.get("description"),
            "fields": [TableFieldSchema.from_dict(_item) for _item in obj["fields"]] if obj.get("fields") is not None else None,
            "maxLength": obj.get("maxLength"),
            "mode": obj.get("mode"),
            "name": obj.get("name"),
            "policyTags": TableFieldSchemaPolicyTags.from_dict(obj["policyTags"]) if obj.get("policyTags") is not None else None,
            "precision": obj.get("precision"),
            "rangeElementType": TableFieldSchemaRangeElementType.from_dict(obj["rangeElementType"]) if obj.get("rangeElementType") is not None else None,
            "roundingMode": obj.get("roundingMode"),
            "scale": obj.get("scale"),
            "type": obj.get("type")
        })
        return _obj

# TODO: Rewrite to not use raise_errors
TableFieldSchema.model_rebuild(raise_errors=False)


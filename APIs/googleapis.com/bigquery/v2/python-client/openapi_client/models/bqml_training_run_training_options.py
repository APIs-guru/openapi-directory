# coding: utf-8

"""
    BigQuery API

    A data platform for customers to create, manage, share and query data.

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class BqmlTrainingRunTrainingOptions(BaseModel):
    """
    Deprecated.
    """ # noqa: E501
    early_stop: Optional[StrictBool] = Field(default=None, alias="earlyStop")
    l1_reg: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="l1Reg")
    l2_reg: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="l2Reg")
    learn_rate: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="learnRate")
    learn_rate_strategy: Optional[StrictStr] = Field(default=None, alias="learnRateStrategy")
    line_search_init_learn_rate: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="lineSearchInitLearnRate")
    max_iteration: Optional[StrictStr] = Field(default=None, alias="maxIteration")
    min_rel_progress: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="minRelProgress")
    warm_start: Optional[StrictBool] = Field(default=None, alias="warmStart")
    __properties: ClassVar[List[str]] = ["earlyStop", "l1Reg", "l2Reg", "learnRate", "learnRateStrategy", "lineSearchInitLearnRate", "maxIteration", "minRelProgress", "warmStart"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of BqmlTrainingRunTrainingOptions from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of BqmlTrainingRunTrainingOptions from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "earlyStop": obj.get("earlyStop"),
            "l1Reg": obj.get("l1Reg"),
            "l2Reg": obj.get("l2Reg"),
            "learnRate": obj.get("learnRate"),
            "learnRateStrategy": obj.get("learnRateStrategy"),
            "lineSearchInitLearnRate": obj.get("lineSearchInitLearnRate"),
            "maxIteration": obj.get("maxIteration"),
            "minRelProgress": obj.get("minRelProgress"),
            "warmStart": obj.get("warmStart")
        })
        return _obj



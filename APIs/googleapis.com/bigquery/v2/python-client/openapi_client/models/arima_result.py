# coding: utf-8

"""
    BigQuery API

    A data platform for customers to create, manage, share and query data.

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.arima_model_info import ArimaModelInfo
from typing import Optional, Set
from typing_extensions import Self

class ArimaResult(BaseModel):
    """
    (Auto-)arima fitting result. Wrap everything in ArimaResult for easier refactoring if we want to use model-specific iteration results.
    """ # noqa: E501
    arima_model_info: Optional[List[ArimaModelInfo]] = Field(default=None, description="This message is repeated because there are multiple arima models fitted in auto-arima. For non-auto-arima model, its size is one.", alias="arimaModelInfo")
    seasonal_periods: Optional[List[StrictStr]] = Field(default=None, description="Seasonal periods. Repeated because multiple periods are supported for one time series.", alias="seasonalPeriods")
    __properties: ClassVar[List[str]] = ["arimaModelInfo", "seasonalPeriods"]

    @field_validator('seasonal_periods')
    def seasonal_periods_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        for i in value:
            if i not in set(['SEASONAL_PERIOD_TYPE_UNSPECIFIED', 'NO_SEASONALITY', 'DAILY', 'WEEKLY', 'MONTHLY', 'QUARTERLY', 'YEARLY']):
                raise ValueError("each list item must be one of ('SEASONAL_PERIOD_TYPE_UNSPECIFIED', 'NO_SEASONALITY', 'DAILY', 'WEEKLY', 'MONTHLY', 'QUARTERLY', 'YEARLY')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ArimaResult from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in arima_model_info (list)
        _items = []
        if self.arima_model_info:
            for _item_arima_model_info in self.arima_model_info:
                if _item_arima_model_info:
                    _items.append(_item_arima_model_info.to_dict())
            _dict['arimaModelInfo'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ArimaResult from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "arimaModelInfo": [ArimaModelInfo.from_dict(_item) for _item in obj["arimaModelInfo"]] if obj.get("arimaModelInfo") is not None else None,
            "seasonalPeriods": obj.get("seasonalPeriods")
        })
        return _obj



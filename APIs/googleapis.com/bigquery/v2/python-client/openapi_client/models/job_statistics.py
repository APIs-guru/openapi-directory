# coding: utf-8

"""
    BigQuery API

    A data platform for customers to create, manage, share and query data.

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from openapi_client.models.data_masking_statistics import DataMaskingStatistics
from openapi_client.models.job_statistics2 import JobStatistics2
from openapi_client.models.job_statistics3 import JobStatistics3
from openapi_client.models.job_statistics4 import JobStatistics4
from openapi_client.models.job_statistics5 import JobStatistics5
from openapi_client.models.job_statistics_reservation_usage_inner import JobStatisticsReservationUsageInner
from openapi_client.models.row_level_security_statistics import RowLevelSecurityStatistics
from openapi_client.models.script_statistics import ScriptStatistics
from openapi_client.models.session_info import SessionInfo
from openapi_client.models.transaction_info import TransactionInfo
from typing import Optional, Set
from typing_extensions import Self

class JobStatistics(BaseModel):
    """
    Statistics for a single job execution.
    """ # noqa: E501
    completion_ratio: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Output only. [TrustedTester] Job progress (0.0 -> 1.0) for LOAD and EXTRACT jobs.", alias="completionRatio")
    copy: Optional[JobStatistics5] = None
    creation_time: Optional[StrictStr] = Field(default=None, description="Output only. Creation time of this job, in milliseconds since the epoch. This field will be present on all jobs.", alias="creationTime")
    data_masking_statistics: Optional[DataMaskingStatistics] = Field(default=None, alias="dataMaskingStatistics")
    end_time: Optional[StrictStr] = Field(default=None, description="Output only. End time of this job, in milliseconds since the epoch. This field will be present whenever a job is in the DONE state.", alias="endTime")
    extract: Optional[JobStatistics4] = None
    final_execution_duration_ms: Optional[StrictStr] = Field(default=None, description="Output only. The duration in milliseconds of the execution of the final attempt of this job, as BigQuery may internally re-attempt to execute the job.", alias="finalExecutionDurationMs")
    load: Optional[JobStatistics3] = None
    num_child_jobs: Optional[StrictStr] = Field(default=None, description="Output only. Number of child jobs executed.", alias="numChildJobs")
    parent_job_id: Optional[StrictStr] = Field(default=None, description="Output only. If this is a child job, specifies the job ID of the parent.", alias="parentJobId")
    query: Optional[JobStatistics2] = None
    quota_deferments: Optional[List[StrictStr]] = Field(default=None, description="Output only. Quotas which delayed this job's start time.", alias="quotaDeferments")
    reservation_usage: Optional[List[JobStatisticsReservationUsageInner]] = Field(default=None, description="Output only. Job resource usage breakdown by reservation. This field reported misleading information and will no longer be populated.", alias="reservationUsage")
    reservation_id: Optional[StrictStr] = Field(default=None, description="Output only. Name of the primary reservation assigned to this job. Note that this could be different than reservations reported in the reservation usage field if parent reservations were used to execute this job.")
    row_level_security_statistics: Optional[RowLevelSecurityStatistics] = Field(default=None, alias="rowLevelSecurityStatistics")
    script_statistics: Optional[ScriptStatistics] = Field(default=None, alias="scriptStatistics")
    session_info: Optional[SessionInfo] = Field(default=None, alias="sessionInfo")
    start_time: Optional[StrictStr] = Field(default=None, description="Output only. Start time of this job, in milliseconds since the epoch. This field will be present when the job transitions from the PENDING state to either RUNNING or DONE.", alias="startTime")
    total_bytes_processed: Optional[StrictStr] = Field(default=None, description="Output only. Total bytes processed for the job.", alias="totalBytesProcessed")
    total_slot_ms: Optional[StrictStr] = Field(default=None, description="Output only. Slot-milliseconds for the job.", alias="totalSlotMs")
    transaction_info: Optional[TransactionInfo] = Field(default=None, alias="transactionInfo")
    __properties: ClassVar[List[str]] = ["completionRatio", "copy", "creationTime", "dataMaskingStatistics", "endTime", "extract", "finalExecutionDurationMs", "load", "numChildJobs", "parentJobId", "query", "quotaDeferments", "reservationUsage", "reservation_id", "rowLevelSecurityStatistics", "scriptStatistics", "sessionInfo", "startTime", "totalBytesProcessed", "totalSlotMs", "transactionInfo"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of JobStatistics from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "completion_ratio",
            "creation_time",
            "end_time",
            "final_execution_duration_ms",
            "num_child_jobs",
            "parent_job_id",
            "quota_deferments",
            "reservation_usage",
            "reservation_id",
            "start_time",
            "total_bytes_processed",
            "total_slot_ms",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of copy
        if self.copy:
            _dict['copy'] = self.copy.to_dict()
        # override the default output from pydantic by calling `to_dict()` of data_masking_statistics
        if self.data_masking_statistics:
            _dict['dataMaskingStatistics'] = self.data_masking_statistics.to_dict()
        # override the default output from pydantic by calling `to_dict()` of extract
        if self.extract:
            _dict['extract'] = self.extract.to_dict()
        # override the default output from pydantic by calling `to_dict()` of load
        if self.load:
            _dict['load'] = self.load.to_dict()
        # override the default output from pydantic by calling `to_dict()` of query
        if self.query:
            _dict['query'] = self.query.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in reservation_usage (list)
        _items = []
        if self.reservation_usage:
            for _item_reservation_usage in self.reservation_usage:
                if _item_reservation_usage:
                    _items.append(_item_reservation_usage.to_dict())
            _dict['reservationUsage'] = _items
        # override the default output from pydantic by calling `to_dict()` of row_level_security_statistics
        if self.row_level_security_statistics:
            _dict['rowLevelSecurityStatistics'] = self.row_level_security_statistics.to_dict()
        # override the default output from pydantic by calling `to_dict()` of script_statistics
        if self.script_statistics:
            _dict['scriptStatistics'] = self.script_statistics.to_dict()
        # override the default output from pydantic by calling `to_dict()` of session_info
        if self.session_info:
            _dict['sessionInfo'] = self.session_info.to_dict()
        # override the default output from pydantic by calling `to_dict()` of transaction_info
        if self.transaction_info:
            _dict['transactionInfo'] = self.transaction_info.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of JobStatistics from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "completionRatio": obj.get("completionRatio"),
            "copy": JobStatistics5.from_dict(obj["copy"]) if obj.get("copy") is not None else None,
            "creationTime": obj.get("creationTime"),
            "dataMaskingStatistics": DataMaskingStatistics.from_dict(obj["dataMaskingStatistics"]) if obj.get("dataMaskingStatistics") is not None else None,
            "endTime": obj.get("endTime"),
            "extract": JobStatistics4.from_dict(obj["extract"]) if obj.get("extract") is not None else None,
            "finalExecutionDurationMs": obj.get("finalExecutionDurationMs"),
            "load": JobStatistics3.from_dict(obj["load"]) if obj.get("load") is not None else None,
            "numChildJobs": obj.get("numChildJobs"),
            "parentJobId": obj.get("parentJobId"),
            "query": JobStatistics2.from_dict(obj["query"]) if obj.get("query") is not None else None,
            "quotaDeferments": obj.get("quotaDeferments"),
            "reservationUsage": [JobStatisticsReservationUsageInner.from_dict(_item) for _item in obj["reservationUsage"]] if obj.get("reservationUsage") is not None else None,
            "reservation_id": obj.get("reservation_id"),
            "rowLevelSecurityStatistics": RowLevelSecurityStatistics.from_dict(obj["rowLevelSecurityStatistics"]) if obj.get("rowLevelSecurityStatistics") is not None else None,
            "scriptStatistics": ScriptStatistics.from_dict(obj["scriptStatistics"]) if obj.get("scriptStatistics") is not None else None,
            "sessionInfo": SessionInfo.from_dict(obj["sessionInfo"]) if obj.get("sessionInfo") is not None else None,
            "startTime": obj.get("startTime"),
            "totalBytesProcessed": obj.get("totalBytesProcessed"),
            "totalSlotMs": obj.get("totalSlotMs"),
            "transactionInfo": TransactionInfo.from_dict(obj["transactionInfo"]) if obj.get("transactionInfo") is not None else None
        })
        return _obj



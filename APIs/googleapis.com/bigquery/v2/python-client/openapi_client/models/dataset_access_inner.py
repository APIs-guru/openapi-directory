# coding: utf-8

"""
    BigQuery API

    A data platform for customers to create, manage, share and query data.

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.dataset_access_entry import DatasetAccessEntry
from openapi_client.models.routine_reference import RoutineReference
from openapi_client.models.table_reference import TableReference
from typing import Optional, Set
from typing_extensions import Self

class DatasetAccessInner(BaseModel):
    """
    An object that defines dataset access for an entity.
    """ # noqa: E501
    dataset: Optional[DatasetAccessEntry] = None
    domain: Optional[StrictStr] = Field(default=None, description="[Pick one] A domain to grant access to. Any users signed in with the domain specified will be granted the specified access. Example: \"example.com\". Maps to IAM policy member \"domain:DOMAIN\".")
    group_by_email: Optional[StrictStr] = Field(default=None, description="[Pick one] An email address of a Google Group to grant access to. Maps to IAM policy member \"group:GROUP\".", alias="groupByEmail")
    iam_member: Optional[StrictStr] = Field(default=None, description="[Pick one] Some other type of member that appears in the IAM Policy but isn't a user, group, domain, or special group.", alias="iamMember")
    role: Optional[StrictStr] = Field(default=None, description="An IAM role ID that should be granted to the user, group, or domain specified in this access entry. The following legacy mappings will be applied: OWNER <=> roles/bigquery.dataOwner WRITER <=> roles/bigquery.dataEditor READER <=> roles/bigquery.dataViewer This field will accept any of the above formats, but will return only the legacy format. For example, if you set this field to \"roles/bigquery.dataOwner\", it will be returned back as \"OWNER\".")
    routine: Optional[RoutineReference] = None
    special_group: Optional[StrictStr] = Field(default=None, description="[Pick one] A special group to grant access to. Possible values include: projectOwners: Owners of the enclosing project. projectReaders: Readers of the enclosing project. projectWriters: Writers of the enclosing project. allAuthenticatedUsers: All authenticated BigQuery users. Maps to similarly-named IAM members.", alias="specialGroup")
    user_by_email: Optional[StrictStr] = Field(default=None, description="[Pick one] An email address of a user to grant access to. For example: fred@example.com. Maps to IAM policy member \"user:EMAIL\" or \"serviceAccount:EMAIL\".", alias="userByEmail")
    view: Optional[TableReference] = None
    __properties: ClassVar[List[str]] = ["dataset", "domain", "groupByEmail", "iamMember", "role", "routine", "specialGroup", "userByEmail", "view"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DatasetAccessInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of dataset
        if self.dataset:
            _dict['dataset'] = self.dataset.to_dict()
        # override the default output from pydantic by calling `to_dict()` of routine
        if self.routine:
            _dict['routine'] = self.routine.to_dict()
        # override the default output from pydantic by calling `to_dict()` of view
        if self.view:
            _dict['view'] = self.view.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DatasetAccessInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "dataset": DatasetAccessEntry.from_dict(obj["dataset"]) if obj.get("dataset") is not None else None,
            "domain": obj.get("domain"),
            "groupByEmail": obj.get("groupByEmail"),
            "iamMember": obj.get("iamMember"),
            "role": obj.get("role"),
            "routine": RoutineReference.from_dict(obj["routine"]) if obj.get("routine") is not None else None,
            "specialGroup": obj.get("specialGroup"),
            "userByEmail": obj.get("userByEmail"),
            "view": TableReference.from_dict(obj["view"]) if obj.get("view") is not None else None
        })
        return _obj



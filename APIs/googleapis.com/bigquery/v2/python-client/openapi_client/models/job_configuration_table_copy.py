# coding: utf-8

"""
    BigQuery API

    A data platform for customers to create, manage, share and query data.

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.encryption_configuration import EncryptionConfiguration
from openapi_client.models.table_reference import TableReference
from typing import Optional, Set
from typing_extensions import Self

class JobConfigurationTableCopy(BaseModel):
    """
    JobConfigurationTableCopy configures a job that copies data from one table to another. For more information on copying tables, see [Copy a table](https://cloud.google.com/bigquery/docs/managing-tables#copy-table).
    """ # noqa: E501
    create_disposition: Optional[StrictStr] = Field(default=None, description="Optional. Specifies whether the job is allowed to create new tables. The following values are supported: * CREATE_IF_NEEDED: If the table does not exist, BigQuery creates the table. * CREATE_NEVER: The table must already exist. If it does not, a 'notFound' error is returned in the job result. The default value is CREATE_IF_NEEDED. Creation, truncation and append actions occur as one atomic update upon job completion.", alias="createDisposition")
    destination_encryption_configuration: Optional[EncryptionConfiguration] = Field(default=None, alias="destinationEncryptionConfiguration")
    destination_expiration_time: Optional[StrictStr] = Field(default=None, description="Optional. The time when the destination table expires. Expired tables will be deleted and their storage reclaimed.", alias="destinationExpirationTime")
    destination_table: Optional[TableReference] = Field(default=None, alias="destinationTable")
    operation_type: Optional[StrictStr] = Field(default=None, description="Optional. Supported operation types in table copy job.", alias="operationType")
    source_table: Optional[TableReference] = Field(default=None, alias="sourceTable")
    source_tables: Optional[List[TableReference]] = Field(default=None, description="[Pick one] Source tables to copy.", alias="sourceTables")
    write_disposition: Optional[StrictStr] = Field(default=None, description="Optional. Specifies the action that occurs if the destination table already exists. The following values are supported: * WRITE_TRUNCATE: If the table already exists, BigQuery overwrites the table data and uses the schema and table constraints from the source table. * WRITE_APPEND: If the table already exists, BigQuery appends the data to the table. * WRITE_EMPTY: If the table already exists and contains data, a 'duplicate' error is returned in the job result. The default value is WRITE_EMPTY. Each action is atomic and only occurs if BigQuery is able to complete the job successfully. Creation, truncation and append actions occur as one atomic update upon job completion.", alias="writeDisposition")
    __properties: ClassVar[List[str]] = ["createDisposition", "destinationEncryptionConfiguration", "destinationExpirationTime", "destinationTable", "operationType", "sourceTable", "sourceTables", "writeDisposition"]

    @field_validator('operation_type')
    def operation_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['OPERATION_TYPE_UNSPECIFIED', 'COPY', 'SNAPSHOT', 'RESTORE', 'CLONE']):
            raise ValueError("must be one of enum values ('OPERATION_TYPE_UNSPECIFIED', 'COPY', 'SNAPSHOT', 'RESTORE', 'CLONE')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of JobConfigurationTableCopy from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of destination_encryption_configuration
        if self.destination_encryption_configuration:
            _dict['destinationEncryptionConfiguration'] = self.destination_encryption_configuration.to_dict()
        # override the default output from pydantic by calling `to_dict()` of destination_table
        if self.destination_table:
            _dict['destinationTable'] = self.destination_table.to_dict()
        # override the default output from pydantic by calling `to_dict()` of source_table
        if self.source_table:
            _dict['sourceTable'] = self.source_table.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in source_tables (list)
        _items = []
        if self.source_tables:
            for _item_source_tables in self.source_tables:
                if _item_source_tables:
                    _items.append(_item_source_tables.to_dict())
            _dict['sourceTables'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of JobConfigurationTableCopy from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "createDisposition": obj.get("createDisposition"),
            "destinationEncryptionConfiguration": EncryptionConfiguration.from_dict(obj["destinationEncryptionConfiguration"]) if obj.get("destinationEncryptionConfiguration") is not None else None,
            "destinationExpirationTime": obj.get("destinationExpirationTime"),
            "destinationTable": TableReference.from_dict(obj["destinationTable"]) if obj.get("destinationTable") is not None else None,
            "operationType": obj.get("operationType"),
            "sourceTable": TableReference.from_dict(obj["sourceTable"]) if obj.get("sourceTable") is not None else None,
            "sourceTables": [TableReference.from_dict(_item) for _item in obj["sourceTables"]] if obj.get("sourceTables") is not None else None,
            "writeDisposition": obj.get("writeDisposition")
        })
        return _obj



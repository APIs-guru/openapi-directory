# coding: utf-8

"""
    BigQuery API

    A data platform for customers to create, manage, share and query data.

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.bigtable_column_family import BigtableColumnFamily
from typing import Optional, Set
from typing_extensions import Self

class BigtableOptions(BaseModel):
    """
    Options specific to Google Cloud Bigtable data sources.
    """ # noqa: E501
    column_families: Optional[List[BigtableColumnFamily]] = Field(default=None, description="Optional. List of column families to expose in the table schema along with their types. This list restricts the column families that can be referenced in queries and specifies their value types. You can use this list to do type conversions - see the 'type' field for more details. If you leave this list empty, all column families are present in the table schema and their values are read as BYTES. During a query only the column families referenced in that query are read from Bigtable.", alias="columnFamilies")
    ignore_unspecified_column_families: Optional[StrictBool] = Field(default=None, description="Optional. If field is true, then the column families that are not specified in columnFamilies list are not exposed in the table schema. Otherwise, they are read with BYTES type values. The default value is false.", alias="ignoreUnspecifiedColumnFamilies")
    output_column_families_as_json: Optional[StrictBool] = Field(default=None, description="Optional. If field is true, then each column family will be read as a single JSON column. Otherwise they are read as a repeated cell structure containing timestamp/value tuples. The default value is false.", alias="outputColumnFamiliesAsJson")
    read_rowkey_as_string: Optional[StrictBool] = Field(default=None, description="Optional. If field is true, then the rowkey column families will be read and converted to string. Otherwise they are read with BYTES type values and users need to manually cast them with CAST if necessary. The default value is false.", alias="readRowkeyAsString")
    __properties: ClassVar[List[str]] = ["columnFamilies", "ignoreUnspecifiedColumnFamilies", "outputColumnFamiliesAsJson", "readRowkeyAsString"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of BigtableOptions from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in column_families (list)
        _items = []
        if self.column_families:
            for _item_column_families in self.column_families:
                if _item_column_families:
                    _items.append(_item_column_families.to_dict())
            _dict['columnFamilies'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of BigtableOptions from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "columnFamilies": [BigtableColumnFamily.from_dict(_item) for _item in obj["columnFamilies"]] if obj.get("columnFamilies") is not None else None,
            "ignoreUnspecifiedColumnFamilies": obj.get("ignoreUnspecifiedColumnFamilies"),
            "outputColumnFamiliesAsJson": obj.get("outputColumnFamiliesAsJson"),
            "readRowkeyAsString": obj.get("readRowkeyAsString")
        })
        return _obj



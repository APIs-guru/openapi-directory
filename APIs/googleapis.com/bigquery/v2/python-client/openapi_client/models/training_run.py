# coding: utf-8

"""
    BigQuery API

    A data platform for customers to create, manage, share and query data.

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.data_split_result import DataSplitResult
from openapi_client.models.evaluation_metrics import EvaluationMetrics
from openapi_client.models.global_explanation import GlobalExplanation
from openapi_client.models.iteration_result import IterationResult
from openapi_client.models.training_options import TrainingOptions
from typing import Optional, Set
from typing_extensions import Self

class TrainingRun(BaseModel):
    """
    Information about a single training query run for the model.
    """ # noqa: E501
    class_level_global_explanations: Optional[List[GlobalExplanation]] = Field(default=None, description="Output only. Global explanation contains the explanation of top features on the class level. Applies to classification models only.", alias="classLevelGlobalExplanations")
    data_split_result: Optional[DataSplitResult] = Field(default=None, alias="dataSplitResult")
    evaluation_metrics: Optional[EvaluationMetrics] = Field(default=None, alias="evaluationMetrics")
    model_level_global_explanation: Optional[GlobalExplanation] = Field(default=None, alias="modelLevelGlobalExplanation")
    results: Optional[List[IterationResult]] = Field(default=None, description="Output only. Output of each iteration run, results.size() <= max_iterations.")
    start_time: Optional[StrictStr] = Field(default=None, description="Output only. The start time of this training run.", alias="startTime")
    training_options: Optional[TrainingOptions] = Field(default=None, alias="trainingOptions")
    training_start_time: Optional[StrictStr] = Field(default=None, description="Output only. The start time of this training run, in milliseconds since epoch.", alias="trainingStartTime")
    vertex_ai_model_id: Optional[StrictStr] = Field(default=None, description="The model id in the [Vertex AI Model Registry](https://cloud.google.com/vertex-ai/docs/model-registry/introduction) for this training run.", alias="vertexAiModelId")
    vertex_ai_model_version: Optional[StrictStr] = Field(default=None, description="Output only. The model version in the [Vertex AI Model Registry](https://cloud.google.com/vertex-ai/docs/model-registry/introduction) for this training run.", alias="vertexAiModelVersion")
    __properties: ClassVar[List[str]] = ["classLevelGlobalExplanations", "dataSplitResult", "evaluationMetrics", "modelLevelGlobalExplanation", "results", "startTime", "trainingOptions", "trainingStartTime", "vertexAiModelId", "vertexAiModelVersion"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of TrainingRun from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "class_level_global_explanations",
            "results",
            "start_time",
            "training_start_time",
            "vertex_ai_model_version",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in class_level_global_explanations (list)
        _items = []
        if self.class_level_global_explanations:
            for _item_class_level_global_explanations in self.class_level_global_explanations:
                if _item_class_level_global_explanations:
                    _items.append(_item_class_level_global_explanations.to_dict())
            _dict['classLevelGlobalExplanations'] = _items
        # override the default output from pydantic by calling `to_dict()` of data_split_result
        if self.data_split_result:
            _dict['dataSplitResult'] = self.data_split_result.to_dict()
        # override the default output from pydantic by calling `to_dict()` of evaluation_metrics
        if self.evaluation_metrics:
            _dict['evaluationMetrics'] = self.evaluation_metrics.to_dict()
        # override the default output from pydantic by calling `to_dict()` of model_level_global_explanation
        if self.model_level_global_explanation:
            _dict['modelLevelGlobalExplanation'] = self.model_level_global_explanation.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in results (list)
        _items = []
        if self.results:
            for _item_results in self.results:
                if _item_results:
                    _items.append(_item_results.to_dict())
            _dict['results'] = _items
        # override the default output from pydantic by calling `to_dict()` of training_options
        if self.training_options:
            _dict['trainingOptions'] = self.training_options.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of TrainingRun from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "classLevelGlobalExplanations": [GlobalExplanation.from_dict(_item) for _item in obj["classLevelGlobalExplanations"]] if obj.get("classLevelGlobalExplanations") is not None else None,
            "dataSplitResult": DataSplitResult.from_dict(obj["dataSplitResult"]) if obj.get("dataSplitResult") is not None else None,
            "evaluationMetrics": EvaluationMetrics.from_dict(obj["evaluationMetrics"]) if obj.get("evaluationMetrics") is not None else None,
            "modelLevelGlobalExplanation": GlobalExplanation.from_dict(obj["modelLevelGlobalExplanation"]) if obj.get("modelLevelGlobalExplanation") is not None else None,
            "results": [IterationResult.from_dict(_item) for _item in obj["results"]] if obj.get("results") is not None else None,
            "startTime": obj.get("startTime"),
            "trainingOptions": TrainingOptions.from_dict(obj["trainingOptions"]) if obj.get("trainingOptions") is not None else None,
            "trainingStartTime": obj.get("trainingStartTime"),
            "vertexAiModelId": obj.get("vertexAiModelId"),
            "vertexAiModelVersion": obj.get("vertexAiModelVersion")
        })
        return _obj



# coding: utf-8

"""
    BigQuery API

    A data platform for customers to create, manage, share and query data.

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.hparam_tuning_trial import HparamTuningTrial
from openapi_client.models.iteration_result import IterationResult
from typing import Optional, Set
from typing_extensions import Self

class MlStatistics(BaseModel):
    """
    Job statistics specific to a BigQuery ML training job.
    """ # noqa: E501
    hparam_trials: Optional[List[HparamTuningTrial]] = Field(default=None, description="Output only. Trials of a [hyperparameter tuning job](/bigquery-ml/docs/reference/standard-sql/bigqueryml-syntax-hp-tuning-overview) sorted by trial_id.", alias="hparamTrials")
    iteration_results: Optional[List[IterationResult]] = Field(default=None, description="Results for all completed iterations. Empty for [hyperparameter tuning jobs](/bigquery-ml/docs/reference/standard-sql/bigqueryml-syntax-hp-tuning-overview).", alias="iterationResults")
    max_iterations: Optional[StrictStr] = Field(default=None, description="Output only. Maximum number of iterations specified as max_iterations in the 'CREATE MODEL' query. The actual number of iterations may be less than this number due to early stop.", alias="maxIterations")
    model_type: Optional[StrictStr] = Field(default=None, description="Output only. The type of the model that is being trained.", alias="modelType")
    training_type: Optional[StrictStr] = Field(default=None, description="Output only. Training type of the job.", alias="trainingType")
    __properties: ClassVar[List[str]] = ["hparamTrials", "iterationResults", "maxIterations", "modelType", "trainingType"]

    @field_validator('model_type')
    def model_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['MODEL_TYPE_UNSPECIFIED', 'LINEAR_REGRESSION', 'LOGISTIC_REGRESSION', 'KMEANS', 'MATRIX_FACTORIZATION', 'DNN_CLASSIFIER', 'TENSORFLOW', 'DNN_REGRESSOR', 'XGBOOST', 'BOOSTED_TREE_REGRESSOR', 'BOOSTED_TREE_CLASSIFIER', 'ARIMA', 'AUTOML_REGRESSOR', 'AUTOML_CLASSIFIER', 'PCA', 'DNN_LINEAR_COMBINED_CLASSIFIER', 'DNN_LINEAR_COMBINED_REGRESSOR', 'AUTOENCODER', 'ARIMA_PLUS', 'ARIMA_PLUS_XREG', 'RANDOM_FOREST_REGRESSOR', 'RANDOM_FOREST_CLASSIFIER', 'TENSORFLOW_LITE', 'ONNX']):
            raise ValueError("must be one of enum values ('MODEL_TYPE_UNSPECIFIED', 'LINEAR_REGRESSION', 'LOGISTIC_REGRESSION', 'KMEANS', 'MATRIX_FACTORIZATION', 'DNN_CLASSIFIER', 'TENSORFLOW', 'DNN_REGRESSOR', 'XGBOOST', 'BOOSTED_TREE_REGRESSOR', 'BOOSTED_TREE_CLASSIFIER', 'ARIMA', 'AUTOML_REGRESSOR', 'AUTOML_CLASSIFIER', 'PCA', 'DNN_LINEAR_COMBINED_CLASSIFIER', 'DNN_LINEAR_COMBINED_REGRESSOR', 'AUTOENCODER', 'ARIMA_PLUS', 'ARIMA_PLUS_XREG', 'RANDOM_FOREST_REGRESSOR', 'RANDOM_FOREST_CLASSIFIER', 'TENSORFLOW_LITE', 'ONNX')")
        return value

    @field_validator('training_type')
    def training_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['TRAINING_TYPE_UNSPECIFIED', 'SINGLE_TRAINING', 'HPARAM_TUNING']):
            raise ValueError("must be one of enum values ('TRAINING_TYPE_UNSPECIFIED', 'SINGLE_TRAINING', 'HPARAM_TUNING')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of MlStatistics from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "hparam_trials",
            "max_iterations",
            "model_type",
            "training_type",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in hparam_trials (list)
        _items = []
        if self.hparam_trials:
            for _item_hparam_trials in self.hparam_trials:
                if _item_hparam_trials:
                    _items.append(_item_hparam_trials.to_dict())
            _dict['hparamTrials'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in iteration_results (list)
        _items = []
        if self.iteration_results:
            for _item_iteration_results in self.iteration_results:
                if _item_iteration_results:
                    _items.append(_item_iteration_results.to_dict())
            _dict['iterationResults'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of MlStatistics from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "hparamTrials": [HparamTuningTrial.from_dict(_item) for _item in obj["hparamTrials"]] if obj.get("hparamTrials") is not None else None,
            "iterationResults": [IterationResult.from_dict(_item) for _item in obj["iterationResults"]] if obj.get("iterationResults") is not None else None,
            "maxIterations": obj.get("maxIterations"),
            "modelType": obj.get("modelType"),
            "trainingType": obj.get("trainingType")
        })
        return _obj



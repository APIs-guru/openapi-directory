# coding: utf-8

"""
    BigQuery API

    A data platform for customers to create, manage, share and query data.

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class RemoteModelInfo(BaseModel):
    """
    Remote Model Info
    """ # noqa: E501
    connection: Optional[StrictStr] = Field(default=None, description="Output only. Fully qualified name of the user-provided connection object of the remote model. Format: ```\"projects/{project_id}/locations/{location_id}/connections/{connection_id}\"```")
    endpoint: Optional[StrictStr] = Field(default=None, description="Output only. The endpoint for remote model.")
    max_batching_rows: Optional[StrictStr] = Field(default=None, description="Output only. Max number of rows in each batch sent to the remote service. If unset, the number of rows in each batch is set dynamically.", alias="maxBatchingRows")
    remote_model_version: Optional[StrictStr] = Field(default=None, description="Output only. The model version for LLM.", alias="remoteModelVersion")
    remote_service_type: Optional[StrictStr] = Field(default=None, description="Output only. The remote service type for remote model.", alias="remoteServiceType")
    speech_recognizer: Optional[StrictStr] = Field(default=None, description="Output only. The name of the speech recognizer to use for speech recognition. The expected format is `projects/{project}/locations/{location}/recognizers/{recognizer}`. Customers can specify this field at model creation. If not specified, a default recognizer `projects/{model project}/locations/global/recognizers/_` will be used. See more details at [recognizers](https://cloud.google.com/speech-to-text/v2/docs/reference/rest/v2/projects.locations.recognizers)", alias="speechRecognizer")
    __properties: ClassVar[List[str]] = ["connection", "endpoint", "maxBatchingRows", "remoteModelVersion", "remoteServiceType", "speechRecognizer"]

    @field_validator('remote_service_type')
    def remote_service_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['REMOTE_SERVICE_TYPE_UNSPECIFIED', 'CLOUD_AI_TRANSLATE_V3', 'CLOUD_AI_VISION_V1', 'CLOUD_AI_NATURAL_LANGUAGE_V1', 'CLOUD_AI_SPEECH_TO_TEXT_V2']):
            raise ValueError("must be one of enum values ('REMOTE_SERVICE_TYPE_UNSPECIFIED', 'CLOUD_AI_TRANSLATE_V3', 'CLOUD_AI_VISION_V1', 'CLOUD_AI_NATURAL_LANGUAGE_V1', 'CLOUD_AI_SPEECH_TO_TEXT_V2')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of RemoteModelInfo from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "connection",
            "endpoint",
            "max_batching_rows",
            "remote_model_version",
            "remote_service_type",
            "speech_recognizer",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of RemoteModelInfo from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "connection": obj.get("connection"),
            "endpoint": obj.get("endpoint"),
            "maxBatchingRows": obj.get("maxBatchingRows"),
            "remoteModelVersion": obj.get("remoteModelVersion"),
            "remoteServiceType": obj.get("remoteServiceType"),
            "speechRecognizer": obj.get("speechRecognizer")
        })
        return _obj



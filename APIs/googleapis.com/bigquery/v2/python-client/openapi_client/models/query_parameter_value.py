# coding: utf-8

"""
    BigQuery API

    A data platform for customers to create, manage, share and query data.

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class QueryParameterValue(BaseModel):
    """
    The value of a query parameter.
    """ # noqa: E501
    array_values: Optional[List[QueryParameterValue]] = Field(default=None, description="Optional. The array values, if this is an array type.", alias="arrayValues")
    range_value: Optional[RangeValue] = Field(default=None, alias="rangeValue")
    struct_values: Optional[Dict[str, QueryParameterValue]] = Field(default=None, description="The struct field values.", alias="structValues")
    value: Optional[StrictStr] = Field(default=None, description="Optional. The value of this value, if a simple scalar type.")
    __properties: ClassVar[List[str]] = ["arrayValues", "rangeValue", "structValues", "value"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of QueryParameterValue from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in array_values (list)
        _items = []
        if self.array_values:
            for _item_array_values in self.array_values:
                if _item_array_values:
                    _items.append(_item_array_values.to_dict())
            _dict['arrayValues'] = _items
        # override the default output from pydantic by calling `to_dict()` of range_value
        if self.range_value:
            _dict['rangeValue'] = self.range_value.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each value in struct_values (dict)
        _field_dict = {}
        if self.struct_values:
            for _key_struct_values in self.struct_values:
                if self.struct_values[_key_struct_values]:
                    _field_dict[_key_struct_values] = self.struct_values[_key_struct_values].to_dict()
            _dict['structValues'] = _field_dict
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of QueryParameterValue from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "arrayValues": [QueryParameterValue.from_dict(_item) for _item in obj["arrayValues"]] if obj.get("arrayValues") is not None else None,
            "rangeValue": RangeValue.from_dict(obj["rangeValue"]) if obj.get("rangeValue") is not None else None,
            "structValues": dict(
                (_k, QueryParameterValue.from_dict(_v))
                for _k, _v in obj["structValues"].items()
            )
            if obj.get("structValues") is not None
            else None,
            "value": obj.get("value")
        })
        return _obj

from openapi_client.models.range_value import RangeValue
# TODO: Rewrite to not use raise_errors
QueryParameterValue.model_rebuild(raise_errors=False)


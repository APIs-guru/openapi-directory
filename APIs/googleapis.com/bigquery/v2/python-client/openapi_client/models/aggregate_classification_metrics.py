# coding: utf-8

"""
    BigQuery API

    A data platform for customers to create, manage, share and query data.

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class AggregateClassificationMetrics(BaseModel):
    """
    Aggregate metrics for classification/classifier models. For multi-class models, the metrics are either macro-averaged or micro-averaged. When macro-averaged, the metrics are calculated for each label and then an unweighted average is taken of those values. When micro-averaged, the metric is calculated globally by counting the total number of correctly predicted rows.
    """ # noqa: E501
    accuracy: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Accuracy is the fraction of predictions given the correct label. For multiclass this is a micro-averaged metric.")
    f1_score: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The F1 score is an average of recall and precision. For multiclass this is a macro-averaged metric.", alias="f1Score")
    log_loss: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Logarithmic Loss. For multiclass this is a macro-averaged metric.", alias="logLoss")
    precision: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Precision is the fraction of actual positive predictions that had positive actual labels. For multiclass this is a macro-averaged metric treating each class as a binary classifier.")
    recall: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Recall is the fraction of actual positive labels that were given a positive prediction. For multiclass this is a macro-averaged metric.")
    roc_auc: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Area Under a ROC Curve. For multiclass this is a macro-averaged metric.", alias="rocAuc")
    threshold: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Threshold at which the metrics are computed. For binary classification models this is the positive class threshold. For multi-class classfication models this is the confidence threshold.")
    __properties: ClassVar[List[str]] = ["accuracy", "f1Score", "logLoss", "precision", "recall", "rocAuc", "threshold"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AggregateClassificationMetrics from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AggregateClassificationMetrics from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "accuracy": obj.get("accuracy"),
            "f1Score": obj.get("f1Score"),
            "logLoss": obj.get("logLoss"),
            "precision": obj.get("precision"),
            "recall": obj.get("recall"),
            "rocAuc": obj.get("rocAuc"),
            "threshold": obj.get("threshold")
        })
        return _obj



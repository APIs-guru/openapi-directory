# coding: utf-8

"""
    BigQuery API

    A data platform for customers to create, manage, share and query data.

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.bi_engine_reason import BiEngineReason
from openapi_client.models.high_cardinality_join import HighCardinalityJoin
from typing import Optional, Set
from typing_extensions import Self

class StagePerformanceStandaloneInsight(BaseModel):
    """
    Standalone performance insights for a specific stage.
    """ # noqa: E501
    bi_engine_reasons: Optional[List[BiEngineReason]] = Field(default=None, description="Output only. If present, the stage had the following reasons for being disqualified from BI Engine execution.", alias="biEngineReasons")
    high_cardinality_joins: Optional[List[HighCardinalityJoin]] = Field(default=None, description="Output only. High cardinality joins in the stage.", alias="highCardinalityJoins")
    insufficient_shuffle_quota: Optional[StrictBool] = Field(default=None, description="Output only. True if the stage has insufficient shuffle quota.", alias="insufficientShuffleQuota")
    slot_contention: Optional[StrictBool] = Field(default=None, description="Output only. True if the stage has a slot contention issue.", alias="slotContention")
    stage_id: Optional[StrictStr] = Field(default=None, description="Output only. The stage id that the insight mapped to.", alias="stageId")
    __properties: ClassVar[List[str]] = ["biEngineReasons", "highCardinalityJoins", "insufficientShuffleQuota", "slotContention", "stageId"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of StagePerformanceStandaloneInsight from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "bi_engine_reasons",
            "high_cardinality_joins",
            "insufficient_shuffle_quota",
            "slot_contention",
            "stage_id",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in bi_engine_reasons (list)
        _items = []
        if self.bi_engine_reasons:
            for _item_bi_engine_reasons in self.bi_engine_reasons:
                if _item_bi_engine_reasons:
                    _items.append(_item_bi_engine_reasons.to_dict())
            _dict['biEngineReasons'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in high_cardinality_joins (list)
        _items = []
        if self.high_cardinality_joins:
            for _item_high_cardinality_joins in self.high_cardinality_joins:
                if _item_high_cardinality_joins:
                    _items.append(_item_high_cardinality_joins.to_dict())
            _dict['highCardinalityJoins'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of StagePerformanceStandaloneInsight from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "biEngineReasons": [BiEngineReason.from_dict(_item) for _item in obj["biEngineReasons"]] if obj.get("biEngineReasons") is not None else None,
            "highCardinalityJoins": [HighCardinalityJoin.from_dict(_item) for _item in obj["highCardinalityJoins"]] if obj.get("highCardinalityJoins") is not None else None,
            "insufficientShuffleQuota": obj.get("insufficientShuffleQuota"),
            "slotContention": obj.get("slotContention"),
            "stageId": obj.get("stageId")
        })
        return _obj



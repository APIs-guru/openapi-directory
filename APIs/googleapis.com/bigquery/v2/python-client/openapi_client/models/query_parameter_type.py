# coding: utf-8

"""
    BigQuery API

    A data platform for customers to create, manage, share and query data.

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class QueryParameterType(BaseModel):
    """
    The type of a query parameter.
    """ # noqa: E501
    array_type: Optional[QueryParameterType] = Field(default=None, alias="arrayType")
    range_element_type: Optional[QueryParameterType] = Field(default=None, alias="rangeElementType")
    struct_types: Optional[List[QueryParameterTypeStructTypesInner]] = Field(default=None, description="Optional. The types of the fields of this struct, in order, if this is a struct.", alias="structTypes")
    type: Optional[StrictStr] = Field(default=None, description="Required. The top level type of this field.")
    __properties: ClassVar[List[str]] = ["arrayType", "rangeElementType", "structTypes", "type"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of QueryParameterType from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of array_type
        if self.array_type:
            _dict['arrayType'] = self.array_type.to_dict()
        # override the default output from pydantic by calling `to_dict()` of range_element_type
        if self.range_element_type:
            _dict['rangeElementType'] = self.range_element_type.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in struct_types (list)
        _items = []
        if self.struct_types:
            for _item_struct_types in self.struct_types:
                if _item_struct_types:
                    _items.append(_item_struct_types.to_dict())
            _dict['structTypes'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of QueryParameterType from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "arrayType": QueryParameterType.from_dict(obj["arrayType"]) if obj.get("arrayType") is not None else None,
            "rangeElementType": QueryParameterType.from_dict(obj["rangeElementType"]) if obj.get("rangeElementType") is not None else None,
            "structTypes": [QueryParameterTypeStructTypesInner.from_dict(_item) for _item in obj["structTypes"]] if obj.get("structTypes") is not None else None,
            "type": obj.get("type")
        })
        return _obj

from openapi_client.models.query_parameter_type_struct_types_inner import QueryParameterTypeStructTypesInner
# TODO: Rewrite to not use raise_errors
QueryParameterType.model_rebuild(raise_errors=False)


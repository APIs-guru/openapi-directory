# coding: utf-8

"""
    BigQuery API

    A data platform for customers to create, manage, share and query data.

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.bi_engine_reason import BiEngineReason
from typing import Optional, Set
from typing_extensions import Self

class BiEngineStatistics(BaseModel):
    """
    Statistics for a BI Engine specific query. Populated as part of JobStatistics2
    """ # noqa: E501
    acceleration_mode: Optional[StrictStr] = Field(default=None, description="Output only. Specifies which mode of BI Engine acceleration was performed (if any).", alias="accelerationMode")
    bi_engine_mode: Optional[StrictStr] = Field(default=None, description="Output only. Specifies which mode of BI Engine acceleration was performed (if any).", alias="biEngineMode")
    bi_engine_reasons: Optional[List[BiEngineReason]] = Field(default=None, description="In case of DISABLED or PARTIAL bi_engine_mode, these contain the explanatory reasons as to why BI Engine could not accelerate. In case the full query was accelerated, this field is not populated.", alias="biEngineReasons")
    __properties: ClassVar[List[str]] = ["accelerationMode", "biEngineMode", "biEngineReasons"]

    @field_validator('acceleration_mode')
    def acceleration_mode_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['BI_ENGINE_ACCELERATION_MODE_UNSPECIFIED', 'BI_ENGINE_DISABLED', 'PARTIAL_INPUT', 'FULL_INPUT', 'FULL_QUERY']):
            raise ValueError("must be one of enum values ('BI_ENGINE_ACCELERATION_MODE_UNSPECIFIED', 'BI_ENGINE_DISABLED', 'PARTIAL_INPUT', 'FULL_INPUT', 'FULL_QUERY')")
        return value

    @field_validator('bi_engine_mode')
    def bi_engine_mode_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['ACCELERATION_MODE_UNSPECIFIED', 'DISABLED', 'PARTIAL', 'FULL']):
            raise ValueError("must be one of enum values ('ACCELERATION_MODE_UNSPECIFIED', 'DISABLED', 'PARTIAL', 'FULL')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of BiEngineStatistics from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "acceleration_mode",
            "bi_engine_mode",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in bi_engine_reasons (list)
        _items = []
        if self.bi_engine_reasons:
            for _item_bi_engine_reasons in self.bi_engine_reasons:
                if _item_bi_engine_reasons:
                    _items.append(_item_bi_engine_reasons.to_dict())
            _dict['biEngineReasons'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of BiEngineStatistics from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "accelerationMode": obj.get("accelerationMode"),
            "biEngineMode": obj.get("biEngineMode"),
            "biEngineReasons": [BiEngineReason.from_dict(_item) for _item in obj["biEngineReasons"]] if obj.get("biEngineReasons") is not None else None
        })
        return _obj



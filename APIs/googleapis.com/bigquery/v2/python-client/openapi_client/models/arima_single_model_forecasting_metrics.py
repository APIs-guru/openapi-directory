# coding: utf-8

"""
    BigQuery API

    A data platform for customers to create, manage, share and query data.

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.arima_fitting_metrics import ArimaFittingMetrics
from openapi_client.models.arima_order import ArimaOrder
from typing import Optional, Set
from typing_extensions import Self

class ArimaSingleModelForecastingMetrics(BaseModel):
    """
    Model evaluation metrics for a single ARIMA forecasting model.
    """ # noqa: E501
    arima_fitting_metrics: Optional[ArimaFittingMetrics] = Field(default=None, alias="arimaFittingMetrics")
    has_drift: Optional[StrictBool] = Field(default=None, description="Is arima model fitted with drift or not. It is always false when d is not 1.", alias="hasDrift")
    has_holiday_effect: Optional[StrictBool] = Field(default=None, description="If true, holiday_effect is a part of time series decomposition result.", alias="hasHolidayEffect")
    has_spikes_and_dips: Optional[StrictBool] = Field(default=None, description="If true, spikes_and_dips is a part of time series decomposition result.", alias="hasSpikesAndDips")
    has_step_changes: Optional[StrictBool] = Field(default=None, description="If true, step_changes is a part of time series decomposition result.", alias="hasStepChanges")
    non_seasonal_order: Optional[ArimaOrder] = Field(default=None, alias="nonSeasonalOrder")
    seasonal_periods: Optional[List[StrictStr]] = Field(default=None, description="Seasonal periods. Repeated because multiple periods are supported for one time series.", alias="seasonalPeriods")
    time_series_id: Optional[StrictStr] = Field(default=None, description="The time_series_id value for this time series. It will be one of the unique values from the time_series_id_column specified during ARIMA model training. Only present when time_series_id_column training option was used.", alias="timeSeriesId")
    time_series_ids: Optional[List[StrictStr]] = Field(default=None, description="The tuple of time_series_ids identifying this time series. It will be one of the unique tuples of values present in the time_series_id_columns specified during ARIMA model training. Only present when time_series_id_columns training option was used and the order of values here are same as the order of time_series_id_columns.", alias="timeSeriesIds")
    __properties: ClassVar[List[str]] = ["arimaFittingMetrics", "hasDrift", "hasHolidayEffect", "hasSpikesAndDips", "hasStepChanges", "nonSeasonalOrder", "seasonalPeriods", "timeSeriesId", "timeSeriesIds"]

    @field_validator('seasonal_periods')
    def seasonal_periods_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        for i in value:
            if i not in set(['SEASONAL_PERIOD_TYPE_UNSPECIFIED', 'NO_SEASONALITY', 'DAILY', 'WEEKLY', 'MONTHLY', 'QUARTERLY', 'YEARLY']):
                raise ValueError("each list item must be one of ('SEASONAL_PERIOD_TYPE_UNSPECIFIED', 'NO_SEASONALITY', 'DAILY', 'WEEKLY', 'MONTHLY', 'QUARTERLY', 'YEARLY')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ArimaSingleModelForecastingMetrics from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of arima_fitting_metrics
        if self.arima_fitting_metrics:
            _dict['arimaFittingMetrics'] = self.arima_fitting_metrics.to_dict()
        # override the default output from pydantic by calling `to_dict()` of non_seasonal_order
        if self.non_seasonal_order:
            _dict['nonSeasonalOrder'] = self.non_seasonal_order.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ArimaSingleModelForecastingMetrics from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "arimaFittingMetrics": ArimaFittingMetrics.from_dict(obj["arimaFittingMetrics"]) if obj.get("arimaFittingMetrics") is not None else None,
            "hasDrift": obj.get("hasDrift"),
            "hasHolidayEffect": obj.get("hasHolidayEffect"),
            "hasSpikesAndDips": obj.get("hasSpikesAndDips"),
            "hasStepChanges": obj.get("hasStepChanges"),
            "nonSeasonalOrder": ArimaOrder.from_dict(obj["nonSeasonalOrder"]) if obj.get("nonSeasonalOrder") is not None else None,
            "seasonalPeriods": obj.get("seasonalPeriods"),
            "timeSeriesId": obj.get("timeSeriesId"),
            "timeSeriesIds": obj.get("timeSeriesIds")
        })
        return _obj



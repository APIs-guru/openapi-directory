# coding: utf-8

"""
    BigQuery API

    A data platform for customers to create, manage, share and query data.

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.encryption_configuration import EncryptionConfiguration
from openapi_client.models.hparam_search_spaces import HparamSearchSpaces
from openapi_client.models.hparam_tuning_trial import HparamTuningTrial
from openapi_client.models.model_reference import ModelReference
from openapi_client.models.remote_model_info import RemoteModelInfo
from openapi_client.models.standard_sql_field import StandardSqlField
from openapi_client.models.training_run import TrainingRun
from openapi_client.models.transform_column import TransformColumn
from typing import Optional, Set
from typing_extensions import Self

class Model(BaseModel):
    """
    Model
    """ # noqa: E501
    best_trial_id: Optional[StrictStr] = Field(default=None, description="The best trial_id across all training runs.", alias="bestTrialId")
    creation_time: Optional[StrictStr] = Field(default=None, description="Output only. The time when this model was created, in millisecs since the epoch.", alias="creationTime")
    default_trial_id: Optional[StrictStr] = Field(default=None, description="Output only. The default trial_id to use in TVFs when the trial_id is not passed in. For single-objective [hyperparameter tuning](/bigquery-ml/docs/reference/standard-sql/bigqueryml-syntax-hp-tuning-overview) models, this is the best trial ID. For multi-objective [hyperparameter tuning](/bigquery-ml/docs/reference/standard-sql/bigqueryml-syntax-hp-tuning-overview) models, this is the smallest trial ID among all Pareto optimal trials.", alias="defaultTrialId")
    description: Optional[StrictStr] = Field(default=None, description="Optional. A user-friendly description of this model.")
    encryption_configuration: Optional[EncryptionConfiguration] = Field(default=None, alias="encryptionConfiguration")
    etag: Optional[StrictStr] = Field(default=None, description="Output only. A hash of this resource.")
    expiration_time: Optional[StrictStr] = Field(default=None, description="Optional. The time when this model expires, in milliseconds since the epoch. If not present, the model will persist indefinitely. Expired models will be deleted and their storage reclaimed. The defaultTableExpirationMs property of the encapsulating dataset can be used to set a default expirationTime on newly created models.", alias="expirationTime")
    feature_columns: Optional[List[StandardSqlField]] = Field(default=None, description="Output only. Input feature columns for the model inference. If the model is trained with TRANSFORM clause, these are the input of the TRANSFORM clause.", alias="featureColumns")
    friendly_name: Optional[StrictStr] = Field(default=None, description="Optional. A descriptive name for this model.", alias="friendlyName")
    hparam_search_spaces: Optional[HparamSearchSpaces] = Field(default=None, alias="hparamSearchSpaces")
    hparam_trials: Optional[List[HparamTuningTrial]] = Field(default=None, description="Output only. Trials of a [hyperparameter tuning](/bigquery-ml/docs/reference/standard-sql/bigqueryml-syntax-hp-tuning-overview) model sorted by trial_id.", alias="hparamTrials")
    label_columns: Optional[List[StandardSqlField]] = Field(default=None, description="Output only. Label columns that were used to train this model. The output of the model will have a \"predicted_\" prefix to these columns.", alias="labelColumns")
    labels: Optional[Dict[str, StrictStr]] = Field(default=None, description="The labels associated with this model. You can use these to organize and group your models. Label keys and values can be no longer than 63 characters, can only contain lowercase letters, numeric characters, underscores and dashes. International characters are allowed. Label values are optional. Label keys must start with a letter and each label in the list must have a different key.")
    last_modified_time: Optional[StrictStr] = Field(default=None, description="Output only. The time when this model was last modified, in millisecs since the epoch.", alias="lastModifiedTime")
    location: Optional[StrictStr] = Field(default=None, description="Output only. The geographic location where the model resides. This value is inherited from the dataset.")
    model_reference: Optional[ModelReference] = Field(default=None, alias="modelReference")
    model_type: Optional[StrictStr] = Field(default=None, description="Output only. Type of the model resource.", alias="modelType")
    optimal_trial_ids: Optional[List[StrictStr]] = Field(default=None, description="Output only. For single-objective [hyperparameter tuning](/bigquery-ml/docs/reference/standard-sql/bigqueryml-syntax-hp-tuning-overview) models, it only contains the best trial. For multi-objective [hyperparameter tuning](/bigquery-ml/docs/reference/standard-sql/bigqueryml-syntax-hp-tuning-overview) models, it contains all Pareto optimal trials sorted by trial_id.", alias="optimalTrialIds")
    remote_model_info: Optional[RemoteModelInfo] = Field(default=None, alias="remoteModelInfo")
    training_runs: Optional[List[TrainingRun]] = Field(default=None, description="Information for all training runs in increasing order of start_time.", alias="trainingRuns")
    transform_columns: Optional[List[TransformColumn]] = Field(default=None, description="Output only. This field will be populated if a TRANSFORM clause was used to train a model. TRANSFORM clause (if used) takes feature_columns as input and outputs transform_columns. transform_columns then are used to train the model.", alias="transformColumns")
    __properties: ClassVar[List[str]] = ["bestTrialId", "creationTime", "defaultTrialId", "description", "encryptionConfiguration", "etag", "expirationTime", "featureColumns", "friendlyName", "hparamSearchSpaces", "hparamTrials", "labelColumns", "labels", "lastModifiedTime", "location", "modelReference", "modelType", "optimalTrialIds", "remoteModelInfo", "trainingRuns", "transformColumns"]

    @field_validator('model_type')
    def model_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['MODEL_TYPE_UNSPECIFIED', 'LINEAR_REGRESSION', 'LOGISTIC_REGRESSION', 'KMEANS', 'MATRIX_FACTORIZATION', 'DNN_CLASSIFIER', 'TENSORFLOW', 'DNN_REGRESSOR', 'XGBOOST', 'BOOSTED_TREE_REGRESSOR', 'BOOSTED_TREE_CLASSIFIER', 'ARIMA', 'AUTOML_REGRESSOR', 'AUTOML_CLASSIFIER', 'PCA', 'DNN_LINEAR_COMBINED_CLASSIFIER', 'DNN_LINEAR_COMBINED_REGRESSOR', 'AUTOENCODER', 'ARIMA_PLUS', 'ARIMA_PLUS_XREG', 'RANDOM_FOREST_REGRESSOR', 'RANDOM_FOREST_CLASSIFIER', 'TENSORFLOW_LITE', 'ONNX']):
            raise ValueError("must be one of enum values ('MODEL_TYPE_UNSPECIFIED', 'LINEAR_REGRESSION', 'LOGISTIC_REGRESSION', 'KMEANS', 'MATRIX_FACTORIZATION', 'DNN_CLASSIFIER', 'TENSORFLOW', 'DNN_REGRESSOR', 'XGBOOST', 'BOOSTED_TREE_REGRESSOR', 'BOOSTED_TREE_CLASSIFIER', 'ARIMA', 'AUTOML_REGRESSOR', 'AUTOML_CLASSIFIER', 'PCA', 'DNN_LINEAR_COMBINED_CLASSIFIER', 'DNN_LINEAR_COMBINED_REGRESSOR', 'AUTOENCODER', 'ARIMA_PLUS', 'ARIMA_PLUS_XREG', 'RANDOM_FOREST_REGRESSOR', 'RANDOM_FOREST_CLASSIFIER', 'TENSORFLOW_LITE', 'ONNX')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Model from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "creation_time",
            "default_trial_id",
            "etag",
            "feature_columns",
            "hparam_trials",
            "label_columns",
            "last_modified_time",
            "location",
            "model_type",
            "optimal_trial_ids",
            "transform_columns",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of encryption_configuration
        if self.encryption_configuration:
            _dict['encryptionConfiguration'] = self.encryption_configuration.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in feature_columns (list)
        _items = []
        if self.feature_columns:
            for _item_feature_columns in self.feature_columns:
                if _item_feature_columns:
                    _items.append(_item_feature_columns.to_dict())
            _dict['featureColumns'] = _items
        # override the default output from pydantic by calling `to_dict()` of hparam_search_spaces
        if self.hparam_search_spaces:
            _dict['hparamSearchSpaces'] = self.hparam_search_spaces.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in hparam_trials (list)
        _items = []
        if self.hparam_trials:
            for _item_hparam_trials in self.hparam_trials:
                if _item_hparam_trials:
                    _items.append(_item_hparam_trials.to_dict())
            _dict['hparamTrials'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in label_columns (list)
        _items = []
        if self.label_columns:
            for _item_label_columns in self.label_columns:
                if _item_label_columns:
                    _items.append(_item_label_columns.to_dict())
            _dict['labelColumns'] = _items
        # override the default output from pydantic by calling `to_dict()` of model_reference
        if self.model_reference:
            _dict['modelReference'] = self.model_reference.to_dict()
        # override the default output from pydantic by calling `to_dict()` of remote_model_info
        if self.remote_model_info:
            _dict['remoteModelInfo'] = self.remote_model_info.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in training_runs (list)
        _items = []
        if self.training_runs:
            for _item_training_runs in self.training_runs:
                if _item_training_runs:
                    _items.append(_item_training_runs.to_dict())
            _dict['trainingRuns'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in transform_columns (list)
        _items = []
        if self.transform_columns:
            for _item_transform_columns in self.transform_columns:
                if _item_transform_columns:
                    _items.append(_item_transform_columns.to_dict())
            _dict['transformColumns'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Model from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "bestTrialId": obj.get("bestTrialId"),
            "creationTime": obj.get("creationTime"),
            "defaultTrialId": obj.get("defaultTrialId"),
            "description": obj.get("description"),
            "encryptionConfiguration": EncryptionConfiguration.from_dict(obj["encryptionConfiguration"]) if obj.get("encryptionConfiguration") is not None else None,
            "etag": obj.get("etag"),
            "expirationTime": obj.get("expirationTime"),
            "featureColumns": [StandardSqlField.from_dict(_item) for _item in obj["featureColumns"]] if obj.get("featureColumns") is not None else None,
            "friendlyName": obj.get("friendlyName"),
            "hparamSearchSpaces": HparamSearchSpaces.from_dict(obj["hparamSearchSpaces"]) if obj.get("hparamSearchSpaces") is not None else None,
            "hparamTrials": [HparamTuningTrial.from_dict(_item) for _item in obj["hparamTrials"]] if obj.get("hparamTrials") is not None else None,
            "labelColumns": [StandardSqlField.from_dict(_item) for _item in obj["labelColumns"]] if obj.get("labelColumns") is not None else None,
            "labels": obj.get("labels"),
            "lastModifiedTime": obj.get("lastModifiedTime"),
            "location": obj.get("location"),
            "modelReference": ModelReference.from_dict(obj["modelReference"]) if obj.get("modelReference") is not None else None,
            "modelType": obj.get("modelType"),
            "optimalTrialIds": obj.get("optimalTrialIds"),
            "remoteModelInfo": RemoteModelInfo.from_dict(obj["remoteModelInfo"]) if obj.get("remoteModelInfo") is not None else None,
            "trainingRuns": [TrainingRun.from_dict(_item) for _item in obj["trainingRuns"]] if obj.get("trainingRuns") is not None else None,
            "transformColumns": [TransformColumn.from_dict(_item) for _item in obj["transformColumns"]] if obj.get("transformColumns") is not None else None
        })
        return _obj



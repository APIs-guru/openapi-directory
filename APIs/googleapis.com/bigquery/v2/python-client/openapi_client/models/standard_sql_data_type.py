# coding: utf-8

"""
    BigQuery API

    A data platform for customers to create, manage, share and query data.

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class StandardSqlDataType(BaseModel):
    """
    The data type of a variable such as a function argument. Examples include: * INT64: `{\"typeKind\": \"INT64\"}` * ARRAY: { \"typeKind\": \"ARRAY\", \"arrayElementType\": {\"typeKind\": \"STRING\"} } * STRUCT>: { \"typeKind\": \"STRUCT\", \"structType\": { \"fields\": [ { \"name\": \"x\", \"type\": {\"typeKind\": \"STRING\"} }, { \"name\": \"y\", \"type\": { \"typeKind\": \"ARRAY\", \"arrayElementType\": {\"typeKind\": \"DATE\"} } } ] } }
    """ # noqa: E501
    array_element_type: Optional[StandardSqlDataType] = Field(default=None, alias="arrayElementType")
    range_element_type: Optional[StandardSqlDataType] = Field(default=None, alias="rangeElementType")
    struct_type: Optional[StandardSqlStructType] = Field(default=None, alias="structType")
    type_kind: Optional[StrictStr] = Field(default=None, description="Required. The top level type of this field. Can be any GoogleSQL data type (e.g., \"INT64\", \"DATE\", \"ARRAY\").", alias="typeKind")
    __properties: ClassVar[List[str]] = ["arrayElementType", "rangeElementType", "structType", "typeKind"]

    @field_validator('type_kind')
    def type_kind_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['TYPE_KIND_UNSPECIFIED', 'INT64', 'BOOL', 'FLOAT64', 'STRING', 'BYTES', 'TIMESTAMP', 'DATE', 'TIME', 'DATETIME', 'INTERVAL', 'GEOGRAPHY', 'NUMERIC', 'BIGNUMERIC', 'JSON', 'ARRAY', 'STRUCT', 'RANGE']):
            raise ValueError("must be one of enum values ('TYPE_KIND_UNSPECIFIED', 'INT64', 'BOOL', 'FLOAT64', 'STRING', 'BYTES', 'TIMESTAMP', 'DATE', 'TIME', 'DATETIME', 'INTERVAL', 'GEOGRAPHY', 'NUMERIC', 'BIGNUMERIC', 'JSON', 'ARRAY', 'STRUCT', 'RANGE')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of StandardSqlDataType from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of array_element_type
        if self.array_element_type:
            _dict['arrayElementType'] = self.array_element_type.to_dict()
        # override the default output from pydantic by calling `to_dict()` of range_element_type
        if self.range_element_type:
            _dict['rangeElementType'] = self.range_element_type.to_dict()
        # override the default output from pydantic by calling `to_dict()` of struct_type
        if self.struct_type:
            _dict['structType'] = self.struct_type.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of StandardSqlDataType from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "arrayElementType": StandardSqlDataType.from_dict(obj["arrayElementType"]) if obj.get("arrayElementType") is not None else None,
            "rangeElementType": StandardSqlDataType.from_dict(obj["rangeElementType"]) if obj.get("rangeElementType") is not None else None,
            "structType": StandardSqlStructType.from_dict(obj["structType"]) if obj.get("structType") is not None else None,
            "typeKind": obj.get("typeKind")
        })
        return _obj

from openapi_client.models.standard_sql_struct_type import StandardSqlStructType
# TODO: Rewrite to not use raise_errors
StandardSqlDataType.model_rebuild(raise_errors=False)


# coding: utf-8

"""
    BigQuery API

    A data platform for customers to create, manage, share and query data.

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from openapi_client.models.explain_query_step import ExplainQueryStep
from typing import Optional, Set
from typing_extensions import Self

class ExplainQueryStage(BaseModel):
    """
    A single stage of query execution.
    """ # noqa: E501
    completed_parallel_inputs: Optional[StrictStr] = Field(default=None, description="Number of parallel input segments completed.", alias="completedParallelInputs")
    compute_mode: Optional[StrictStr] = Field(default=None, description="Output only. Compute mode for this stage.", alias="computeMode")
    compute_ms_avg: Optional[StrictStr] = Field(default=None, description="Milliseconds the average shard spent on CPU-bound tasks.", alias="computeMsAvg")
    compute_ms_max: Optional[StrictStr] = Field(default=None, description="Milliseconds the slowest shard spent on CPU-bound tasks.", alias="computeMsMax")
    compute_ratio_avg: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Relative amount of time the average shard spent on CPU-bound tasks.", alias="computeRatioAvg")
    compute_ratio_max: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Relative amount of time the slowest shard spent on CPU-bound tasks.", alias="computeRatioMax")
    end_ms: Optional[StrictStr] = Field(default=None, description="Stage end time represented as milliseconds since the epoch.", alias="endMs")
    id: Optional[StrictStr] = Field(default=None, description="Unique ID for the stage within the plan.")
    input_stages: Optional[List[StrictStr]] = Field(default=None, description="IDs for stages that are inputs to this stage.", alias="inputStages")
    name: Optional[StrictStr] = Field(default=None, description="Human-readable name for the stage.")
    parallel_inputs: Optional[StrictStr] = Field(default=None, description="Number of parallel input segments to be processed", alias="parallelInputs")
    read_ms_avg: Optional[StrictStr] = Field(default=None, description="Milliseconds the average shard spent reading input.", alias="readMsAvg")
    read_ms_max: Optional[StrictStr] = Field(default=None, description="Milliseconds the slowest shard spent reading input.", alias="readMsMax")
    read_ratio_avg: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Relative amount of time the average shard spent reading input.", alias="readRatioAvg")
    read_ratio_max: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Relative amount of time the slowest shard spent reading input.", alias="readRatioMax")
    records_read: Optional[StrictStr] = Field(default=None, description="Number of records read into the stage.", alias="recordsRead")
    records_written: Optional[StrictStr] = Field(default=None, description="Number of records written by the stage.", alias="recordsWritten")
    shuffle_output_bytes: Optional[StrictStr] = Field(default=None, description="Total number of bytes written to shuffle.", alias="shuffleOutputBytes")
    shuffle_output_bytes_spilled: Optional[StrictStr] = Field(default=None, description="Total number of bytes written to shuffle and spilled to disk.", alias="shuffleOutputBytesSpilled")
    slot_ms: Optional[StrictStr] = Field(default=None, description="Slot-milliseconds used by the stage.", alias="slotMs")
    start_ms: Optional[StrictStr] = Field(default=None, description="Stage start time represented as milliseconds since the epoch.", alias="startMs")
    status: Optional[StrictStr] = Field(default=None, description="Current status for this stage.")
    steps: Optional[List[ExplainQueryStep]] = Field(default=None, description="List of operations within the stage in dependency order (approximately chronological).")
    wait_ms_avg: Optional[StrictStr] = Field(default=None, description="Milliseconds the average shard spent waiting to be scheduled.", alias="waitMsAvg")
    wait_ms_max: Optional[StrictStr] = Field(default=None, description="Milliseconds the slowest shard spent waiting to be scheduled.", alias="waitMsMax")
    wait_ratio_avg: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Relative amount of time the average shard spent waiting to be scheduled.", alias="waitRatioAvg")
    wait_ratio_max: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Relative amount of time the slowest shard spent waiting to be scheduled.", alias="waitRatioMax")
    write_ms_avg: Optional[StrictStr] = Field(default=None, description="Milliseconds the average shard spent on writing output.", alias="writeMsAvg")
    write_ms_max: Optional[StrictStr] = Field(default=None, description="Milliseconds the slowest shard spent on writing output.", alias="writeMsMax")
    write_ratio_avg: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Relative amount of time the average shard spent on writing output.", alias="writeRatioAvg")
    write_ratio_max: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Relative amount of time the slowest shard spent on writing output.", alias="writeRatioMax")
    __properties: ClassVar[List[str]] = ["completedParallelInputs", "computeMode", "computeMsAvg", "computeMsMax", "computeRatioAvg", "computeRatioMax", "endMs", "id", "inputStages", "name", "parallelInputs", "readMsAvg", "readMsMax", "readRatioAvg", "readRatioMax", "recordsRead", "recordsWritten", "shuffleOutputBytes", "shuffleOutputBytesSpilled", "slotMs", "startMs", "status", "steps", "waitMsAvg", "waitMsMax", "waitRatioAvg", "waitRatioMax", "writeMsAvg", "writeMsMax", "writeRatioAvg", "writeRatioMax"]

    @field_validator('compute_mode')
    def compute_mode_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['COMPUTE_MODE_UNSPECIFIED', 'BIGQUERY', 'BI_ENGINE']):
            raise ValueError("must be one of enum values ('COMPUTE_MODE_UNSPECIFIED', 'BIGQUERY', 'BI_ENGINE')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ExplainQueryStage from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "compute_mode",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in steps (list)
        _items = []
        if self.steps:
            for _item_steps in self.steps:
                if _item_steps:
                    _items.append(_item_steps.to_dict())
            _dict['steps'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ExplainQueryStage from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "completedParallelInputs": obj.get("completedParallelInputs"),
            "computeMode": obj.get("computeMode"),
            "computeMsAvg": obj.get("computeMsAvg"),
            "computeMsMax": obj.get("computeMsMax"),
            "computeRatioAvg": obj.get("computeRatioAvg"),
            "computeRatioMax": obj.get("computeRatioMax"),
            "endMs": obj.get("endMs"),
            "id": obj.get("id"),
            "inputStages": obj.get("inputStages"),
            "name": obj.get("name"),
            "parallelInputs": obj.get("parallelInputs"),
            "readMsAvg": obj.get("readMsAvg"),
            "readMsMax": obj.get("readMsMax"),
            "readRatioAvg": obj.get("readRatioAvg"),
            "readRatioMax": obj.get("readRatioMax"),
            "recordsRead": obj.get("recordsRead"),
            "recordsWritten": obj.get("recordsWritten"),
            "shuffleOutputBytes": obj.get("shuffleOutputBytes"),
            "shuffleOutputBytesSpilled": obj.get("shuffleOutputBytesSpilled"),
            "slotMs": obj.get("slotMs"),
            "startMs": obj.get("startMs"),
            "status": obj.get("status"),
            "steps": [ExplainQueryStep.from_dict(_item) for _item in obj["steps"]] if obj.get("steps") is not None else None,
            "waitMsAvg": obj.get("waitMsAvg"),
            "waitMsMax": obj.get("waitMsMax"),
            "waitRatioAvg": obj.get("waitRatioAvg"),
            "waitRatioMax": obj.get("waitRatioMax"),
            "writeMsAvg": obj.get("writeMsAvg"),
            "writeMsMax": obj.get("writeMsMax"),
            "writeRatioAvg": obj.get("writeRatioAvg"),
            "writeRatioMax": obj.get("writeRatioMax")
        })
        return _obj



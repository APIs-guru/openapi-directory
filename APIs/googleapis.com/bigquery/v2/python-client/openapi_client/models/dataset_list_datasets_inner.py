# coding: utf-8

"""
    BigQuery API

    A data platform for customers to create, manage, share and query data.

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.dataset_reference import DatasetReference
from typing import Optional, Set
from typing_extensions import Self

class DatasetListDatasetsInner(BaseModel):
    """
    A dataset resource with only a subset of fields, to be returned in a list of datasets.
    """ # noqa: E501
    dataset_reference: Optional[DatasetReference] = Field(default=None, alias="datasetReference")
    friendly_name: Optional[StrictStr] = Field(default=None, description="An alternate name for the dataset. The friendly name is purely decorative in nature.", alias="friendlyName")
    id: Optional[StrictStr] = Field(default=None, description="The fully-qualified, unique, opaque ID of the dataset.")
    kind: Optional[StrictStr] = Field(default=None, description="The resource type. This property always returns the value \"bigquery#dataset\"")
    labels: Optional[Dict[str, StrictStr]] = Field(default=None, description="The labels associated with this dataset. You can use these to organize and group your datasets.")
    location: Optional[StrictStr] = Field(default=None, description="The geographic location where the dataset resides.")
    __properties: ClassVar[List[str]] = ["datasetReference", "friendlyName", "id", "kind", "labels", "location"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DatasetListDatasetsInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of dataset_reference
        if self.dataset_reference:
            _dict['datasetReference'] = self.dataset_reference.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DatasetListDatasetsInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "datasetReference": DatasetReference.from_dict(obj["datasetReference"]) if obj.get("datasetReference") is not None else None,
            "friendlyName": obj.get("friendlyName"),
            "id": obj.get("id"),
            "kind": obj.get("kind"),
            "labels": obj.get("labels"),
            "location": obj.get("location")
        })
        return _obj



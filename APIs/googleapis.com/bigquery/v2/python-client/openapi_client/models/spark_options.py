# coding: utf-8

"""
    BigQuery API

    A data platform for customers to create, manage, share and query data.

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class SparkOptions(BaseModel):
    """
    Options for a user-defined Spark routine.
    """ # noqa: E501
    archive_uris: Optional[List[StrictStr]] = Field(default=None, description="Archive files to be extracted into the working directory of each executor. For more information about Apache Spark, see [Apache Spark](https://spark.apache.org/docs/latest/index.html).", alias="archiveUris")
    connection: Optional[StrictStr] = Field(default=None, description="Fully qualified name of the user-provided Spark connection object. Format: ```\"projects/{project_id}/locations/{location_id}/connections/{connection_id}\"```")
    container_image: Optional[StrictStr] = Field(default=None, description="Custom container image for the runtime environment.", alias="containerImage")
    file_uris: Optional[List[StrictStr]] = Field(default=None, description="Files to be placed in the working directory of each executor. For more information about Apache Spark, see [Apache Spark](https://spark.apache.org/docs/latest/index.html).", alias="fileUris")
    jar_uris: Optional[List[StrictStr]] = Field(default=None, description="JARs to include on the driver and executor CLASSPATH. For more information about Apache Spark, see [Apache Spark](https://spark.apache.org/docs/latest/index.html).", alias="jarUris")
    main_class: Optional[StrictStr] = Field(default=None, description="The fully qualified name of a class in jar_uris, for example, com.example.wordcount. Exactly one of main_class and main_jar_uri field should be set for Java/Scala language type.", alias="mainClass")
    main_file_uri: Optional[StrictStr] = Field(default=None, description="The main file/jar URI of the Spark application. Exactly one of the definition_body field and the main_file_uri field must be set for Python. Exactly one of main_class and main_file_uri field should be set for Java/Scala language type.", alias="mainFileUri")
    properties: Optional[Dict[str, StrictStr]] = Field(default=None, description="Configuration properties as a set of key/value pairs, which will be passed on to the Spark application. For more information, see [Apache Spark](https://spark.apache.org/docs/latest/index.html) and the [procedure option list](https://cloud.google.com/bigquery/docs/reference/standard-sql/data-definition-language#procedure_option_list).")
    py_file_uris: Optional[List[StrictStr]] = Field(default=None, description="Python files to be placed on the PYTHONPATH for PySpark application. Supported file types: `.py`, `.egg`, and `.zip`. For more information about Apache Spark, see [Apache Spark](https://spark.apache.org/docs/latest/index.html).", alias="pyFileUris")
    runtime_version: Optional[StrictStr] = Field(default=None, description="Runtime version. If not specified, the default runtime version is used.", alias="runtimeVersion")
    __properties: ClassVar[List[str]] = ["archiveUris", "connection", "containerImage", "fileUris", "jarUris", "mainClass", "mainFileUri", "properties", "pyFileUris", "runtimeVersion"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SparkOptions from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SparkOptions from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "archiveUris": obj.get("archiveUris"),
            "connection": obj.get("connection"),
            "containerImage": obj.get("containerImage"),
            "fileUris": obj.get("fileUris"),
            "jarUris": obj.get("jarUris"),
            "mainClass": obj.get("mainClass"),
            "mainFileUri": obj.get("mainFileUri"),
            "properties": obj.get("properties"),
            "pyFileUris": obj.get("pyFileUris"),
            "runtimeVersion": obj.get("runtimeVersion")
        })
        return _obj



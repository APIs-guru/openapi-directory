# coding: utf-8

"""
    BigQuery API

    A data platform for customers to create, manage, share and query data.

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.avro_options import AvroOptions
from openapi_client.models.bigtable_options import BigtableOptions
from openapi_client.models.csv_options import CsvOptions
from openapi_client.models.google_sheets_options import GoogleSheetsOptions
from openapi_client.models.hive_partitioning_options import HivePartitioningOptions
from openapi_client.models.json_options import JsonOptions
from openapi_client.models.parquet_options import ParquetOptions
from openapi_client.models.table_schema import TableSchema
from typing import Optional, Set
from typing_extensions import Self

class ExternalDataConfiguration(BaseModel):
    """
    ExternalDataConfiguration
    """ # noqa: E501
    autodetect: Optional[StrictBool] = Field(default=None, description="Try to detect schema and format options automatically. Any option specified explicitly will be honored.")
    avro_options: Optional[AvroOptions] = Field(default=None, alias="avroOptions")
    bigtable_options: Optional[BigtableOptions] = Field(default=None, alias="bigtableOptions")
    compression: Optional[StrictStr] = Field(default=None, description="Optional. The compression type of the data source. Possible values include GZIP and NONE. The default value is NONE. This setting is ignored for Google Cloud Bigtable, Google Cloud Datastore backups, Avro, ORC and Parquet formats. An empty string is an invalid value.")
    connection_id: Optional[StrictStr] = Field(default=None, description="Optional. The connection specifying the credentials to be used to read external storage, such as Azure Blob, Cloud Storage, or S3. The connection_id can have the form \"<project\\_id>.<location\\_id>.<connection\\_id>\" or \"projects/<project\\_id>/locations/<location\\_id>/connections/<connection\\_id>\".", alias="connectionId")
    csv_options: Optional[CsvOptions] = Field(default=None, alias="csvOptions")
    decimal_target_types: Optional[List[StrictStr]] = Field(default=None, description="Defines the list of possible SQL data types to which the source decimal values are converted. This list and the precision and the scale parameters of the decimal field determine the target type. In the order of NUMERIC, BIGNUMERIC, and STRING, a type is picked if it is in the specified list and if it supports the precision and the scale. STRING supports all precision and scale values. If none of the listed types supports the precision and the scale, the type supporting the widest range in the specified list is picked, and if a value exceeds the supported range when reading the data, an error will be thrown. Example: Suppose the value of this field is [\"NUMERIC\", \"BIGNUMERIC\"]. If (precision,scale) is: * (38,9) -> NUMERIC; * (39,9) -> BIGNUMERIC (NUMERIC cannot hold 30 integer digits); * (38,10) -> BIGNUMERIC (NUMERIC cannot hold 10 fractional digits); * (76,38) -> BIGNUMERIC; * (77,38) -> BIGNUMERIC (error if value exeeds supported range). This field cannot contain duplicate types. The order of the types in this field is ignored. For example, [\"BIGNUMERIC\", \"NUMERIC\"] is the same as [\"NUMERIC\", \"BIGNUMERIC\"] and NUMERIC always takes precedence over BIGNUMERIC. Defaults to [\"NUMERIC\", \"STRING\"] for ORC and [\"NUMERIC\"] for the other file formats.", alias="decimalTargetTypes")
    file_set_spec_type: Optional[StrictStr] = Field(default=None, description="Optional. Specifies how source URIs are interpreted for constructing the file set to load. By default source URIs are expanded against the underlying storage. Other options include specifying manifest files. Only applicable to object storage systems.", alias="fileSetSpecType")
    google_sheets_options: Optional[GoogleSheetsOptions] = Field(default=None, alias="googleSheetsOptions")
    hive_partitioning_options: Optional[HivePartitioningOptions] = Field(default=None, alias="hivePartitioningOptions")
    ignore_unknown_values: Optional[StrictBool] = Field(default=None, description="Optional. Indicates if BigQuery should allow extra values that are not represented in the table schema. If true, the extra values are ignored. If false, records with extra columns are treated as bad records, and if there are too many bad records, an invalid error is returned in the job result. The default value is false. The sourceFormat property determines what BigQuery treats as an extra value: CSV: Trailing columns JSON: Named values that don't match any column names Google Cloud Bigtable: This setting is ignored. Google Cloud Datastore backups: This setting is ignored. Avro: This setting is ignored. ORC: This setting is ignored. Parquet: This setting is ignored.", alias="ignoreUnknownValues")
    json_extension: Optional[StrictStr] = Field(default=None, description="Optional. Load option to be used together with source_format newline-delimited JSON to indicate that a variant of JSON is being loaded. To load newline-delimited GeoJSON, specify GEOJSON (and source_format must be set to NEWLINE_DELIMITED_JSON).", alias="jsonExtension")
    json_options: Optional[JsonOptions] = Field(default=None, alias="jsonOptions")
    max_bad_records: Optional[StrictInt] = Field(default=None, description="Optional. The maximum number of bad records that BigQuery can ignore when reading data. If the number of bad records exceeds this value, an invalid error is returned in the job result. The default value is 0, which requires that all records are valid. This setting is ignored for Google Cloud Bigtable, Google Cloud Datastore backups, Avro, ORC and Parquet formats.", alias="maxBadRecords")
    metadata_cache_mode: Optional[StrictStr] = Field(default=None, description="Optional. Metadata Cache Mode for the table. Set this to enable caching of metadata from external data source.", alias="metadataCacheMode")
    object_metadata: Optional[StrictStr] = Field(default=None, description="Optional. ObjectMetadata is used to create Object Tables. Object Tables contain a listing of objects (with their metadata) found at the source_uris. If ObjectMetadata is set, source_format should be omitted. Currently SIMPLE is the only supported Object Metadata type.", alias="objectMetadata")
    parquet_options: Optional[ParquetOptions] = Field(default=None, alias="parquetOptions")
    reference_file_schema_uri: Optional[StrictStr] = Field(default=None, description="Optional. When creating an external table, the user can provide a reference file with the table schema. This is enabled for the following formats: AVRO, PARQUET, ORC.", alias="referenceFileSchemaUri")
    var_schema: Optional[TableSchema] = Field(default=None, alias="schema")
    source_format: Optional[StrictStr] = Field(default=None, description="[Required] The data format. For CSV files, specify \"CSV\". For Google sheets, specify \"GOOGLE_SHEETS\". For newline-delimited JSON, specify \"NEWLINE_DELIMITED_JSON\". For Avro files, specify \"AVRO\". For Google Cloud Datastore backups, specify \"DATASTORE_BACKUP\". For Apache Iceberg tables, specify \"ICEBERG\". For ORC files, specify \"ORC\". For Parquet files, specify \"PARQUET\". [Beta] For Google Cloud Bigtable, specify \"BIGTABLE\".", alias="sourceFormat")
    source_uris: Optional[List[StrictStr]] = Field(default=None, description="[Required] The fully-qualified URIs that point to your data in Google Cloud. For Google Cloud Storage URIs: Each URI can contain one '*' wildcard character and it must come after the 'bucket' name. Size limits related to load jobs apply to external data sources. For Google Cloud Bigtable URIs: Exactly one URI can be specified and it has be a fully specified and valid HTTPS URL for a Google Cloud Bigtable table. For Google Cloud Datastore backups, exactly one URI can be specified. Also, the '*' wildcard character is not allowed.", alias="sourceUris")
    __properties: ClassVar[List[str]] = ["autodetect", "avroOptions", "bigtableOptions", "compression", "connectionId", "csvOptions", "decimalTargetTypes", "fileSetSpecType", "googleSheetsOptions", "hivePartitioningOptions", "ignoreUnknownValues", "jsonExtension", "jsonOptions", "maxBadRecords", "metadataCacheMode", "objectMetadata", "parquetOptions", "referenceFileSchemaUri", "schema", "sourceFormat", "sourceUris"]

    @field_validator('decimal_target_types')
    def decimal_target_types_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        for i in value:
            if i not in set(['DECIMAL_TARGET_TYPE_UNSPECIFIED', 'NUMERIC', 'BIGNUMERIC', 'STRING']):
                raise ValueError("each list item must be one of ('DECIMAL_TARGET_TYPE_UNSPECIFIED', 'NUMERIC', 'BIGNUMERIC', 'STRING')")
        return value

    @field_validator('file_set_spec_type')
    def file_set_spec_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['FILE_SET_SPEC_TYPE_FILE_SYSTEM_MATCH', 'FILE_SET_SPEC_TYPE_NEW_LINE_DELIMITED_MANIFEST']):
            raise ValueError("must be one of enum values ('FILE_SET_SPEC_TYPE_FILE_SYSTEM_MATCH', 'FILE_SET_SPEC_TYPE_NEW_LINE_DELIMITED_MANIFEST')")
        return value

    @field_validator('json_extension')
    def json_extension_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['JSON_EXTENSION_UNSPECIFIED', 'GEOJSON']):
            raise ValueError("must be one of enum values ('JSON_EXTENSION_UNSPECIFIED', 'GEOJSON')")
        return value

    @field_validator('metadata_cache_mode')
    def metadata_cache_mode_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['METADATA_CACHE_MODE_UNSPECIFIED', 'AUTOMATIC', 'MANUAL']):
            raise ValueError("must be one of enum values ('METADATA_CACHE_MODE_UNSPECIFIED', 'AUTOMATIC', 'MANUAL')")
        return value

    @field_validator('object_metadata')
    def object_metadata_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['OBJECT_METADATA_UNSPECIFIED', 'DIRECTORY', 'SIMPLE']):
            raise ValueError("must be one of enum values ('OBJECT_METADATA_UNSPECIFIED', 'DIRECTORY', 'SIMPLE')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ExternalDataConfiguration from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of avro_options
        if self.avro_options:
            _dict['avroOptions'] = self.avro_options.to_dict()
        # override the default output from pydantic by calling `to_dict()` of bigtable_options
        if self.bigtable_options:
            _dict['bigtableOptions'] = self.bigtable_options.to_dict()
        # override the default output from pydantic by calling `to_dict()` of csv_options
        if self.csv_options:
            _dict['csvOptions'] = self.csv_options.to_dict()
        # override the default output from pydantic by calling `to_dict()` of google_sheets_options
        if self.google_sheets_options:
            _dict['googleSheetsOptions'] = self.google_sheets_options.to_dict()
        # override the default output from pydantic by calling `to_dict()` of hive_partitioning_options
        if self.hive_partitioning_options:
            _dict['hivePartitioningOptions'] = self.hive_partitioning_options.to_dict()
        # override the default output from pydantic by calling `to_dict()` of json_options
        if self.json_options:
            _dict['jsonOptions'] = self.json_options.to_dict()
        # override the default output from pydantic by calling `to_dict()` of parquet_options
        if self.parquet_options:
            _dict['parquetOptions'] = self.parquet_options.to_dict()
        # override the default output from pydantic by calling `to_dict()` of var_schema
        if self.var_schema:
            _dict['schema'] = self.var_schema.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ExternalDataConfiguration from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "autodetect": obj.get("autodetect"),
            "avroOptions": AvroOptions.from_dict(obj["avroOptions"]) if obj.get("avroOptions") is not None else None,
            "bigtableOptions": BigtableOptions.from_dict(obj["bigtableOptions"]) if obj.get("bigtableOptions") is not None else None,
            "compression": obj.get("compression"),
            "connectionId": obj.get("connectionId"),
            "csvOptions": CsvOptions.from_dict(obj["csvOptions"]) if obj.get("csvOptions") is not None else None,
            "decimalTargetTypes": obj.get("decimalTargetTypes"),
            "fileSetSpecType": obj.get("fileSetSpecType"),
            "googleSheetsOptions": GoogleSheetsOptions.from_dict(obj["googleSheetsOptions"]) if obj.get("googleSheetsOptions") is not None else None,
            "hivePartitioningOptions": HivePartitioningOptions.from_dict(obj["hivePartitioningOptions"]) if obj.get("hivePartitioningOptions") is not None else None,
            "ignoreUnknownValues": obj.get("ignoreUnknownValues"),
            "jsonExtension": obj.get("jsonExtension"),
            "jsonOptions": JsonOptions.from_dict(obj["jsonOptions"]) if obj.get("jsonOptions") is not None else None,
            "maxBadRecords": obj.get("maxBadRecords"),
            "metadataCacheMode": obj.get("metadataCacheMode"),
            "objectMetadata": obj.get("objectMetadata"),
            "parquetOptions": ParquetOptions.from_dict(obj["parquetOptions"]) if obj.get("parquetOptions") is not None else None,
            "referenceFileSchemaUri": obj.get("referenceFileSchemaUri"),
            "schema": TableSchema.from_dict(obj["schema"]) if obj.get("schema") is not None else None,
            "sourceFormat": obj.get("sourceFormat"),
            "sourceUris": obj.get("sourceUris")
        })
        return _obj



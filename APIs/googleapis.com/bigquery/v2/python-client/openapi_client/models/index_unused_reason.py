# coding: utf-8

"""
    BigQuery API

    A data platform for customers to create, manage, share and query data.

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.table_reference import TableReference
from typing import Optional, Set
from typing_extensions import Self

class IndexUnusedReason(BaseModel):
    """
    Reason about why no search index was used in the search query (or sub-query).
    """ # noqa: E501
    base_table: Optional[TableReference] = Field(default=None, alias="baseTable")
    code: Optional[StrictStr] = Field(default=None, description="Specifies the high-level reason for the scenario when no search index was used.")
    index_name: Optional[StrictStr] = Field(default=None, description="Specifies the name of the unused search index, if available.", alias="indexName")
    message: Optional[StrictStr] = Field(default=None, description="Free form human-readable reason for the scenario when no search index was used.")
    __properties: ClassVar[List[str]] = ["baseTable", "code", "indexName", "message"]

    @field_validator('code')
    def code_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['CODE_UNSPECIFIED', 'INDEX_CONFIG_NOT_AVAILABLE', 'PENDING_INDEX_CREATION', 'BASE_TABLE_TRUNCATED', 'INDEX_CONFIG_MODIFIED', 'TIME_TRAVEL_QUERY', 'NO_PRUNING_POWER', 'UNINDEXED_SEARCH_FIELDS', 'UNSUPPORTED_SEARCH_PATTERN', 'OPTIMIZED_WITH_MATERIALIZED_VIEW', 'SECURED_BY_DATA_MASKING', 'MISMATCHED_TEXT_ANALYZER', 'BASE_TABLE_TOO_SMALL', 'BASE_TABLE_TOO_LARGE', 'ESTIMATED_PERFORMANCE_GAIN_TOO_LOW', 'NOT_SUPPORTED_IN_STANDARD_EDITION', 'INDEX_SUPPRESSED_BY_FUNCTION_OPTION', 'QUERY_CACHE_HIT', 'INTERNAL_ERROR', 'OTHER_REASON']):
            raise ValueError("must be one of enum values ('CODE_UNSPECIFIED', 'INDEX_CONFIG_NOT_AVAILABLE', 'PENDING_INDEX_CREATION', 'BASE_TABLE_TRUNCATED', 'INDEX_CONFIG_MODIFIED', 'TIME_TRAVEL_QUERY', 'NO_PRUNING_POWER', 'UNINDEXED_SEARCH_FIELDS', 'UNSUPPORTED_SEARCH_PATTERN', 'OPTIMIZED_WITH_MATERIALIZED_VIEW', 'SECURED_BY_DATA_MASKING', 'MISMATCHED_TEXT_ANALYZER', 'BASE_TABLE_TOO_SMALL', 'BASE_TABLE_TOO_LARGE', 'ESTIMATED_PERFORMANCE_GAIN_TOO_LOW', 'NOT_SUPPORTED_IN_STANDARD_EDITION', 'INDEX_SUPPRESSED_BY_FUNCTION_OPTION', 'QUERY_CACHE_HIT', 'INTERNAL_ERROR', 'OTHER_REASON')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of IndexUnusedReason from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of base_table
        if self.base_table:
            _dict['baseTable'] = self.base_table.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of IndexUnusedReason from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "baseTable": TableReference.from_dict(obj["baseTable"]) if obj.get("baseTable") is not None else None,
            "code": obj.get("code"),
            "indexName": obj.get("indexName"),
            "message": obj.get("message")
        })
        return _obj



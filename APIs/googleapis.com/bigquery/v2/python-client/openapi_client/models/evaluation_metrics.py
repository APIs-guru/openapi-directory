# coding: utf-8

"""
    BigQuery API

    A data platform for customers to create, manage, share and query data.

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.arima_forecasting_metrics import ArimaForecastingMetrics
from openapi_client.models.binary_classification_metrics import BinaryClassificationMetrics
from openapi_client.models.clustering_metrics import ClusteringMetrics
from openapi_client.models.dimensionality_reduction_metrics import DimensionalityReductionMetrics
from openapi_client.models.multi_class_classification_metrics import MultiClassClassificationMetrics
from openapi_client.models.ranking_metrics import RankingMetrics
from openapi_client.models.regression_metrics import RegressionMetrics
from typing import Optional, Set
from typing_extensions import Self

class EvaluationMetrics(BaseModel):
    """
    Evaluation metrics of a model. These are either computed on all training data or just the eval data based on whether eval data was used during training. These are not present for imported models.
    """ # noqa: E501
    arima_forecasting_metrics: Optional[ArimaForecastingMetrics] = Field(default=None, alias="arimaForecastingMetrics")
    binary_classification_metrics: Optional[BinaryClassificationMetrics] = Field(default=None, alias="binaryClassificationMetrics")
    clustering_metrics: Optional[ClusteringMetrics] = Field(default=None, alias="clusteringMetrics")
    dimensionality_reduction_metrics: Optional[DimensionalityReductionMetrics] = Field(default=None, alias="dimensionalityReductionMetrics")
    multi_class_classification_metrics: Optional[MultiClassClassificationMetrics] = Field(default=None, alias="multiClassClassificationMetrics")
    ranking_metrics: Optional[RankingMetrics] = Field(default=None, alias="rankingMetrics")
    regression_metrics: Optional[RegressionMetrics] = Field(default=None, alias="regressionMetrics")
    __properties: ClassVar[List[str]] = ["arimaForecastingMetrics", "binaryClassificationMetrics", "clusteringMetrics", "dimensionalityReductionMetrics", "multiClassClassificationMetrics", "rankingMetrics", "regressionMetrics"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of EvaluationMetrics from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of arima_forecasting_metrics
        if self.arima_forecasting_metrics:
            _dict['arimaForecastingMetrics'] = self.arima_forecasting_metrics.to_dict()
        # override the default output from pydantic by calling `to_dict()` of binary_classification_metrics
        if self.binary_classification_metrics:
            _dict['binaryClassificationMetrics'] = self.binary_classification_metrics.to_dict()
        # override the default output from pydantic by calling `to_dict()` of clustering_metrics
        if self.clustering_metrics:
            _dict['clusteringMetrics'] = self.clustering_metrics.to_dict()
        # override the default output from pydantic by calling `to_dict()` of dimensionality_reduction_metrics
        if self.dimensionality_reduction_metrics:
            _dict['dimensionalityReductionMetrics'] = self.dimensionality_reduction_metrics.to_dict()
        # override the default output from pydantic by calling `to_dict()` of multi_class_classification_metrics
        if self.multi_class_classification_metrics:
            _dict['multiClassClassificationMetrics'] = self.multi_class_classification_metrics.to_dict()
        # override the default output from pydantic by calling `to_dict()` of ranking_metrics
        if self.ranking_metrics:
            _dict['rankingMetrics'] = self.ranking_metrics.to_dict()
        # override the default output from pydantic by calling `to_dict()` of regression_metrics
        if self.regression_metrics:
            _dict['regressionMetrics'] = self.regression_metrics.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of EvaluationMetrics from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "arimaForecastingMetrics": ArimaForecastingMetrics.from_dict(obj["arimaForecastingMetrics"]) if obj.get("arimaForecastingMetrics") is not None else None,
            "binaryClassificationMetrics": BinaryClassificationMetrics.from_dict(obj["binaryClassificationMetrics"]) if obj.get("binaryClassificationMetrics") is not None else None,
            "clusteringMetrics": ClusteringMetrics.from_dict(obj["clusteringMetrics"]) if obj.get("clusteringMetrics") is not None else None,
            "dimensionalityReductionMetrics": DimensionalityReductionMetrics.from_dict(obj["dimensionalityReductionMetrics"]) if obj.get("dimensionalityReductionMetrics") is not None else None,
            "multiClassClassificationMetrics": MultiClassClassificationMetrics.from_dict(obj["multiClassClassificationMetrics"]) if obj.get("multiClassClassificationMetrics") is not None else None,
            "rankingMetrics": RankingMetrics.from_dict(obj["rankingMetrics"]) if obj.get("rankingMetrics") is not None else None,
            "regressionMetrics": RegressionMetrics.from_dict(obj["regressionMetrics"]) if obj.get("regressionMetrics") is not None else None
        })
        return _obj



# coding: utf-8

"""
    BigQuery API

    A data platform for customers to create, manage, share and query data.

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from openapi_client.models.arima_result import ArimaResult
from openapi_client.models.cluster_info import ClusterInfo
from openapi_client.models.principal_component_info import PrincipalComponentInfo
from typing import Optional, Set
from typing_extensions import Self

class IterationResult(BaseModel):
    """
    Information about a single iteration of the training run.
    """ # noqa: E501
    arima_result: Optional[ArimaResult] = Field(default=None, alias="arimaResult")
    cluster_infos: Optional[List[ClusterInfo]] = Field(default=None, description="Information about top clusters for clustering models.", alias="clusterInfos")
    duration_ms: Optional[StrictStr] = Field(default=None, description="Time taken to run the iteration in milliseconds.", alias="durationMs")
    eval_loss: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Loss computed on the eval data at the end of iteration.", alias="evalLoss")
    index: Optional[StrictInt] = Field(default=None, description="Index of the iteration, 0 based.")
    learn_rate: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Learn rate used for this iteration.", alias="learnRate")
    principal_component_infos: Optional[List[PrincipalComponentInfo]] = Field(default=None, description="The information of the principal components.", alias="principalComponentInfos")
    training_loss: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Loss computed on the training data at the end of iteration.", alias="trainingLoss")
    __properties: ClassVar[List[str]] = ["arimaResult", "clusterInfos", "durationMs", "evalLoss", "index", "learnRate", "principalComponentInfos", "trainingLoss"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of IterationResult from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of arima_result
        if self.arima_result:
            _dict['arimaResult'] = self.arima_result.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in cluster_infos (list)
        _items = []
        if self.cluster_infos:
            for _item_cluster_infos in self.cluster_infos:
                if _item_cluster_infos:
                    _items.append(_item_cluster_infos.to_dict())
            _dict['clusterInfos'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in principal_component_infos (list)
        _items = []
        if self.principal_component_infos:
            for _item_principal_component_infos in self.principal_component_infos:
                if _item_principal_component_infos:
                    _items.append(_item_principal_component_infos.to_dict())
            _dict['principalComponentInfos'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of IterationResult from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "arimaResult": ArimaResult.from_dict(obj["arimaResult"]) if obj.get("arimaResult") is not None else None,
            "clusterInfos": [ClusterInfo.from_dict(_item) for _item in obj["clusterInfos"]] if obj.get("clusterInfos") is not None else None,
            "durationMs": obj.get("durationMs"),
            "evalLoss": obj.get("evalLoss"),
            "index": obj.get("index"),
            "learnRate": obj.get("learnRate"),
            "principalComponentInfos": [PrincipalComponentInfo.from_dict(_item) for _item in obj["principalComponentInfos"]] if obj.get("principalComponentInfos") is not None else None,
            "trainingLoss": obj.get("trainingLoss")
        })
        return _obj



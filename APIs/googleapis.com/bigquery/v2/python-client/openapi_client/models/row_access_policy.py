# coding: utf-8

"""
    BigQuery API

    A data platform for customers to create, manage, share and query data.

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.row_access_policy_reference import RowAccessPolicyReference
from typing import Optional, Set
from typing_extensions import Self

class RowAccessPolicy(BaseModel):
    """
    Represents access on a subset of rows on the specified table, defined by its filter predicate. Access to the subset of rows is controlled by its IAM policy.
    """ # noqa: E501
    creation_time: Optional[StrictStr] = Field(default=None, description="Output only. The time when this row access policy was created, in milliseconds since the epoch.", alias="creationTime")
    etag: Optional[StrictStr] = Field(default=None, description="Output only. A hash of this resource.")
    filter_predicate: Optional[StrictStr] = Field(default=None, description="Required. A SQL boolean expression that represents the rows defined by this row access policy, similar to the boolean expression in a WHERE clause of a SELECT query on a table. References to other tables, routines, and temporary functions are not supported. Examples: region=\"EU\" date_field = CAST('2019-9-27' as DATE) nullable_field is not NULL numeric_field BETWEEN 1.0 AND 5.0", alias="filterPredicate")
    last_modified_time: Optional[StrictStr] = Field(default=None, description="Output only. The time when this row access policy was last modified, in milliseconds since the epoch.", alias="lastModifiedTime")
    row_access_policy_reference: Optional[RowAccessPolicyReference] = Field(default=None, alias="rowAccessPolicyReference")
    __properties: ClassVar[List[str]] = ["creationTime", "etag", "filterPredicate", "lastModifiedTime", "rowAccessPolicyReference"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of RowAccessPolicy from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "creation_time",
            "etag",
            "last_modified_time",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of row_access_policy_reference
        if self.row_access_policy_reference:
            _dict['rowAccessPolicyReference'] = self.row_access_policy_reference.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of RowAccessPolicy from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "creationTime": obj.get("creationTime"),
            "etag": obj.get("etag"),
            "filterPredicate": obj.get("filterPredicate"),
            "lastModifiedTime": obj.get("lastModifiedTime"),
            "rowAccessPolicyReference": RowAccessPolicyReference.from_dict(obj["rowAccessPolicyReference"]) if obj.get("rowAccessPolicyReference") is not None else None
        })
        return _obj



# coding: utf-8

"""
    BigQuery API

    A data platform for customers to create, manage, share and query data.

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.argument import Argument
from openapi_client.models.remote_function_options import RemoteFunctionOptions
from openapi_client.models.routine_reference import RoutineReference
from openapi_client.models.spark_options import SparkOptions
from openapi_client.models.standard_sql_data_type import StandardSqlDataType
from openapi_client.models.standard_sql_table_type import StandardSqlTableType
from typing import Optional, Set
from typing_extensions import Self

class Routine(BaseModel):
    """
    A user-defined function or a stored procedure.
    """ # noqa: E501
    arguments: Optional[List[Argument]] = Field(default=None, description="Optional.")
    creation_time: Optional[StrictStr] = Field(default=None, description="Output only. The time when this routine was created, in milliseconds since the epoch.", alias="creationTime")
    data_governance_type: Optional[StrictStr] = Field(default=None, description="Optional. If set to `DATA_MASKING`, the function is validated and made available as a masking function. For more information, see [Create custom masking routines](https://cloud.google.com/bigquery/docs/user-defined-functions#custom-mask).", alias="dataGovernanceType")
    definition_body: Optional[StrictStr] = Field(default=None, description="Required. The body of the routine. For functions, this is the expression in the AS clause. If language=SQL, it is the substring inside (but excluding) the parentheses. For example, for the function created with the following statement: `CREATE FUNCTION JoinLines(x string, y string) as (concat(x, \"\\n\", y))` The definition_body is `concat(x, \"\\n\", y)` (\\n is not replaced with linebreak). If language=JAVASCRIPT, it is the evaluated string in the AS clause. For example, for the function created with the following statement: `CREATE FUNCTION f() RETURNS STRING LANGUAGE js AS 'return \"\\n\";\\n'` The definition_body is `return \"\\n\";\\n` Note that both \\n are replaced with linebreaks.", alias="definitionBody")
    description: Optional[StrictStr] = Field(default=None, description="Optional. The description of the routine, if defined.")
    determinism_level: Optional[StrictStr] = Field(default=None, description="Optional. The determinism level of the JavaScript UDF, if defined.", alias="determinismLevel")
    etag: Optional[StrictStr] = Field(default=None, description="Output only. A hash of this resource.")
    imported_libraries: Optional[List[StrictStr]] = Field(default=None, description="Optional. If language = \"JAVASCRIPT\", this field stores the path of the imported JAVASCRIPT libraries.", alias="importedLibraries")
    language: Optional[StrictStr] = Field(default=None, description="Optional. Defaults to \"SQL\" if remote_function_options field is absent, not set otherwise.")
    last_modified_time: Optional[StrictStr] = Field(default=None, description="Output only. The time when this routine was last modified, in milliseconds since the epoch.", alias="lastModifiedTime")
    remote_function_options: Optional[RemoteFunctionOptions] = Field(default=None, alias="remoteFunctionOptions")
    return_table_type: Optional[StandardSqlTableType] = Field(default=None, alias="returnTableType")
    return_type: Optional[StandardSqlDataType] = Field(default=None, alias="returnType")
    routine_reference: Optional[RoutineReference] = Field(default=None, alias="routineReference")
    routine_type: Optional[StrictStr] = Field(default=None, description="Required. The type of routine.", alias="routineType")
    security_mode: Optional[StrictStr] = Field(default=None, description="Optional. The security mode of the routine, if defined. If not defined, the security mode is automatically determined from the routine's configuration.", alias="securityMode")
    spark_options: Optional[SparkOptions] = Field(default=None, alias="sparkOptions")
    strict_mode: Optional[StrictBool] = Field(default=None, description="Optional. Use this option to catch many common errors. Error checking is not exhaustive, and successfully creating a procedure doesn't guarantee that the procedure will successfully execute at runtime. If `strictMode` is set to `TRUE`, the procedure body is further checked for errors such as non-existent tables or columns. The `CREATE PROCEDURE` statement fails if the body fails any of these checks. If `strictMode` is set to `FALSE`, the procedure body is checked only for syntax. For procedures that invoke themselves recursively, specify `strictMode=FALSE` to avoid non-existent procedure errors during validation. Default value is `TRUE`.", alias="strictMode")
    __properties: ClassVar[List[str]] = ["arguments", "creationTime", "dataGovernanceType", "definitionBody", "description", "determinismLevel", "etag", "importedLibraries", "language", "lastModifiedTime", "remoteFunctionOptions", "returnTableType", "returnType", "routineReference", "routineType", "securityMode", "sparkOptions", "strictMode"]

    @field_validator('data_governance_type')
    def data_governance_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['DATA_GOVERNANCE_TYPE_UNSPECIFIED', 'DATA_MASKING']):
            raise ValueError("must be one of enum values ('DATA_GOVERNANCE_TYPE_UNSPECIFIED', 'DATA_MASKING')")
        return value

    @field_validator('determinism_level')
    def determinism_level_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['DETERMINISM_LEVEL_UNSPECIFIED', 'DETERMINISTIC', 'NOT_DETERMINISTIC']):
            raise ValueError("must be one of enum values ('DETERMINISM_LEVEL_UNSPECIFIED', 'DETERMINISTIC', 'NOT_DETERMINISTIC')")
        return value

    @field_validator('language')
    def language_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['LANGUAGE_UNSPECIFIED', 'SQL', 'JAVASCRIPT', 'PYTHON', 'JAVA', 'SCALA']):
            raise ValueError("must be one of enum values ('LANGUAGE_UNSPECIFIED', 'SQL', 'JAVASCRIPT', 'PYTHON', 'JAVA', 'SCALA')")
        return value

    @field_validator('routine_type')
    def routine_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['ROUTINE_TYPE_UNSPECIFIED', 'SCALAR_FUNCTION', 'PROCEDURE', 'TABLE_VALUED_FUNCTION', 'AGGREGATE_FUNCTION']):
            raise ValueError("must be one of enum values ('ROUTINE_TYPE_UNSPECIFIED', 'SCALAR_FUNCTION', 'PROCEDURE', 'TABLE_VALUED_FUNCTION', 'AGGREGATE_FUNCTION')")
        return value

    @field_validator('security_mode')
    def security_mode_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['SECURITY_MODE_UNSPECIFIED', 'DEFINER', 'INVOKER']):
            raise ValueError("must be one of enum values ('SECURITY_MODE_UNSPECIFIED', 'DEFINER', 'INVOKER')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Routine from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "creation_time",
            "etag",
            "last_modified_time",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in arguments (list)
        _items = []
        if self.arguments:
            for _item_arguments in self.arguments:
                if _item_arguments:
                    _items.append(_item_arguments.to_dict())
            _dict['arguments'] = _items
        # override the default output from pydantic by calling `to_dict()` of remote_function_options
        if self.remote_function_options:
            _dict['remoteFunctionOptions'] = self.remote_function_options.to_dict()
        # override the default output from pydantic by calling `to_dict()` of return_table_type
        if self.return_table_type:
            _dict['returnTableType'] = self.return_table_type.to_dict()
        # override the default output from pydantic by calling `to_dict()` of return_type
        if self.return_type:
            _dict['returnType'] = self.return_type.to_dict()
        # override the default output from pydantic by calling `to_dict()` of routine_reference
        if self.routine_reference:
            _dict['routineReference'] = self.routine_reference.to_dict()
        # override the default output from pydantic by calling `to_dict()` of spark_options
        if self.spark_options:
            _dict['sparkOptions'] = self.spark_options.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Routine from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "arguments": [Argument.from_dict(_item) for _item in obj["arguments"]] if obj.get("arguments") is not None else None,
            "creationTime": obj.get("creationTime"),
            "dataGovernanceType": obj.get("dataGovernanceType"),
            "definitionBody": obj.get("definitionBody"),
            "description": obj.get("description"),
            "determinismLevel": obj.get("determinismLevel"),
            "etag": obj.get("etag"),
            "importedLibraries": obj.get("importedLibraries"),
            "language": obj.get("language"),
            "lastModifiedTime": obj.get("lastModifiedTime"),
            "remoteFunctionOptions": RemoteFunctionOptions.from_dict(obj["remoteFunctionOptions"]) if obj.get("remoteFunctionOptions") is not None else None,
            "returnTableType": StandardSqlTableType.from_dict(obj["returnTableType"]) if obj.get("returnTableType") is not None else None,
            "returnType": StandardSqlDataType.from_dict(obj["returnType"]) if obj.get("returnType") is not None else None,
            "routineReference": RoutineReference.from_dict(obj["routineReference"]) if obj.get("routineReference") is not None else None,
            "routineType": obj.get("routineType"),
            "securityMode": obj.get("securityMode"),
            "sparkOptions": SparkOptions.from_dict(obj["sparkOptions"]) if obj.get("sparkOptions") is not None else None,
            "strictMode": obj.get("strictMode")
        })
        return _obj



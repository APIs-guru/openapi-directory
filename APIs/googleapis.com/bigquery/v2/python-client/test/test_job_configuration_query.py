# coding: utf-8

"""
    BigQuery API

    A data platform for customers to create, manage, share and query data.

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.job_configuration_query import JobConfigurationQuery

class TestJobConfigurationQuery(unittest.TestCase):
    """JobConfigurationQuery unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> JobConfigurationQuery:
        """Test JobConfigurationQuery
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `JobConfigurationQuery`
        """
        model = JobConfigurationQuery()
        if include_optional:
            return JobConfigurationQuery(
                allow_large_results = True,
                clustering = openapi_client.models.clustering.Clustering(
                    fields = [
                        ''
                        ], ),
                connection_properties = [
                    openapi_client.models.connection_property.ConnectionProperty(
                        key = '', 
                        value = '', )
                    ],
                continuous = True,
                create_disposition = '',
                create_session = True,
                default_dataset = openapi_client.models.dataset_reference.DatasetReference(
                    dataset_id = '', 
                    project_id = '', ),
                destination_encryption_configuration = openapi_client.models.encryption_configuration.EncryptionConfiguration(
                    kms_key_name = '', ),
                destination_table = openapi_client.models.table_reference.TableReference(
                    dataset_id = '', 
                    project_id = '', 
                    table_id = '', ),
                flatten_results = True,
                maximum_billing_tier = 56,
                maximum_bytes_billed = '',
                parameter_mode = '',
                preserve_nulls = True,
                priority = '',
                query = '',
                query_parameters = [
                    openapi_client.models.query_parameter.QueryParameter(
                        name = '', 
                        parameter_type = openapi_client.models.query_parameter_type.QueryParameterType(
                            array_type = openapi_client.models.query_parameter_type.QueryParameterType(
                                range_element_type = , 
                                struct_types = [
                                    openapi_client.models.query_parameter_type_struct_types_inner.QueryParameterType_structTypes_inner(
                                        description = '', 
                                        name = '', 
                                        type = , )
                                    ], 
                                type = '', ), 
                            range_element_type = , 
                            struct_types = [
                                openapi_client.models.query_parameter_type_struct_types_inner.QueryParameterType_structTypes_inner(
                                    description = '', 
                                    name = '', )
                                ], 
                            type = '', ), 
                        parameter_value = openapi_client.models.query_parameter_value.QueryParameterValue(
                            array_values = [
                                openapi_client.models.query_parameter_value.QueryParameterValue(
                                    range_value = openapi_client.models.range_value.RangeValue(
                                        end = , 
                                        start = , ), 
                                    struct_values = {
                                        'key' : 
                                        }, 
                                    value = '', )
                                ], 
                            range_value = openapi_client.models.range_value.RangeValue(), 
                            struct_values = {
                                'key' : 
                                }, 
                            value = '', ), )
                    ],
                range_partitioning = openapi_client.models.range_partitioning.RangePartitioning(
                    field = '', 
                    range = openapi_client.models.range_partitioning_range.RangePartitioning_range(
                        end = '', 
                        interval = '', 
                        start = '', ), ),
                schema_update_options = [
                    ''
                    ],
                script_options = openapi_client.models.script_options.ScriptOptions(
                    key_result_statement = 'KEY_RESULT_STATEMENT_KIND_UNSPECIFIED', 
                    statement_byte_budget = '', 
                    statement_timeout_ms = '', ),
                system_variables = openapi_client.models.system_variables.SystemVariables(
                    types = {
                        'key' : openapi_client.models.standard_sql_data_type.StandardSqlDataType(
                            array_element_type = openapi_client.models.standard_sql_data_type.StandardSqlDataType(
                                range_element_type = , 
                                struct_type = openapi_client.models.standard_sql_struct_type.StandardSqlStructType(
                                    fields = [
                                        openapi_client.models.standard_sql_field.StandardSqlField(
                                            name = '', 
                                            type = , )
                                        ], ), 
                                type_kind = 'TYPE_KIND_UNSPECIFIED', ), 
                            range_element_type = , 
                            struct_type = openapi_client.models.standard_sql_struct_type.StandardSqlStructType(), 
                            type_kind = 'TYPE_KIND_UNSPECIFIED', )
                        }, 
                    values = {
                        'key' : null
                        }, ),
                table_definitions = {
                    'key' : openapi_client.models.external_data_configuration.ExternalDataConfiguration(
                        autodetect = True, 
                        avro_options = openapi_client.models.avro_options.AvroOptions(
                            use_avro_logical_types = True, ), 
                        bigtable_options = openapi_client.models.bigtable_options.BigtableOptions(
                            column_families = [
                                openapi_client.models.bigtable_column_family.BigtableColumnFamily(
                                    columns = [
                                        openapi_client.models.bigtable_column.BigtableColumn(
                                            encoding = '', 
                                            field_name = '', 
                                            only_read_latest = True, 
                                            qualifier_encoded = 'YQ==', 
                                            qualifier_string = '', 
                                            type = '', )
                                        ], 
                                    encoding = '', 
                                    family_id = '', 
                                    only_read_latest = True, 
                                    type = '', )
                                ], 
                            ignore_unspecified_column_families = True, 
                            output_column_families_as_json = True, 
                            read_rowkey_as_string = True, ), 
                        compression = '', 
                        connection_id = '', 
                        csv_options = openapi_client.models.csv_options.CsvOptions(
                            allow_jagged_rows = True, 
                            allow_quoted_newlines = True, 
                            encoding = '', 
                            field_delimiter = '', 
                            null_marker = '', 
                            preserve_ascii_control_characters = True, 
                            quote = '"', 
                            skip_leading_rows = '', ), 
                        decimal_target_types = [
                            'DECIMAL_TARGET_TYPE_UNSPECIFIED'
                            ], 
                        file_set_spec_type = 'FILE_SET_SPEC_TYPE_FILE_SYSTEM_MATCH', 
                        google_sheets_options = openapi_client.models.google_sheets_options.GoogleSheetsOptions(
                            range = '', 
                            skip_leading_rows = '', ), 
                        hive_partitioning_options = openapi_client.models.hive_partitioning_options.HivePartitioningOptions(
                            fields = [
                                ''
                                ], 
                            mode = '', 
                            require_partition_filter = True, 
                            source_uri_prefix = '', ), 
                        ignore_unknown_values = True, 
                        json_extension = 'JSON_EXTENSION_UNSPECIFIED', 
                        json_options = openapi_client.models.json_options.JsonOptions(
                            encoding = '', ), 
                        max_bad_records = 56, 
                        metadata_cache_mode = 'METADATA_CACHE_MODE_UNSPECIFIED', 
                        object_metadata = 'OBJECT_METADATA_UNSPECIFIED', 
                        parquet_options = openapi_client.models.parquet_options.ParquetOptions(
                            enable_list_inference = True, 
                            enum_as_string = True, ), 
                        reference_file_schema_uri = '', 
                        schema = openapi_client.models.table_schema.TableSchema(), 
                        source_format = '', 
                        source_uris = [
                            ''
                            ], )
                    },
                time_partitioning = openapi_client.models.time_partitioning.TimePartitioning(
                    expiration_ms = '', 
                    field = '', 
                    require_partition_filter = True, 
                    type = '', ),
                use_legacy_sql = True,
                use_query_cache = True,
                user_defined_function_resources = [
                    openapi_client.models.user_defined_function_resource.UserDefinedFunctionResource(
                        inline_code = '', 
                        resource_uri = '', )
                    ],
                write_disposition = ''
            )
        else:
            return JobConfigurationQuery(
        )
        """

    def testJobConfigurationQuery(self):
        """Test JobConfigurationQuery"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

# coding: utf-8

"""
    BigQuery API

    A data platform for customers to create, manage, share and query data.

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.model_definition import ModelDefinition

class TestModelDefinition(unittest.TestCase):
    """ModelDefinition unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> ModelDefinition:
        """Test ModelDefinition
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `ModelDefinition`
        """
        model = ModelDefinition()
        if include_optional:
            return ModelDefinition(
                model_options = openapi_client.models.model_definition_model_options.ModelDefinition_modelOptions(
                    labels = [
                        ''
                        ], 
                    loss_type = '', 
                    model_type = '', ),
                training_runs = [
                    openapi_client.models.bqml_training_run.BqmlTrainingRun(
                        iteration_results = [
                            openapi_client.models.bqml_iteration_result.BqmlIterationResult(
                                duration_ms = '', 
                                eval_loss = 1.337, 
                                index = 56, 
                                learn_rate = 1.337, 
                                training_loss = 1.337, )
                            ], 
                        start_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        state = '', 
                        training_options = openapi_client.models.bqml_training_run_training_options.BqmlTrainingRun_trainingOptions(
                            early_stop = True, 
                            l1_reg = 1.337, 
                            l2_reg = 1.337, 
                            learn_rate = 1.337, 
                            learn_rate_strategy = '', 
                            line_search_init_learn_rate = 1.337, 
                            max_iteration = '', 
                            min_rel_progress = 1.337, 
                            warm_start = True, ), )
                    ]
            )
        else:
            return ModelDefinition(
        )
        """

    def testModelDefinition(self):
        """Test ModelDefinition"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

# coding: utf-8

"""
    BigQuery API

    A data platform for customers to create, manage, share and query data.

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.job_configuration_extract import JobConfigurationExtract

class TestJobConfigurationExtract(unittest.TestCase):
    """JobConfigurationExtract unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> JobConfigurationExtract:
        """Test JobConfigurationExtract
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `JobConfigurationExtract`
        """
        model = JobConfigurationExtract()
        if include_optional:
            return JobConfigurationExtract(
                compression = '',
                destination_format = '',
                destination_uri = '',
                destination_uris = [
                    ''
                    ],
                field_delimiter = '',
                model_extract_options = openapi_client.models.model_extract_options.ModelExtractOptions(
                    trial_id = '', ),
                print_header = True,
                source_model = openapi_client.models.model_reference.ModelReference(
                    dataset_id = '', 
                    model_id = '', 
                    project_id = '', ),
                source_table = openapi_client.models.table_reference.TableReference(
                    dataset_id = '', 
                    project_id = '', 
                    table_id = '', ),
                use_avro_logical_types = True
            )
        else:
            return JobConfigurationExtract(
        )
        """

    def testJobConfigurationExtract(self):
        """Test JobConfigurationExtract"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

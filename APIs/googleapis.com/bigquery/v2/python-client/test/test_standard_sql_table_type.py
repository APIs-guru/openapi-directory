# coding: utf-8

"""
    BigQuery API

    A data platform for customers to create, manage, share and query data.

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.standard_sql_table_type import StandardSqlTableType

class TestStandardSqlTableType(unittest.TestCase):
    """StandardSqlTableType unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> StandardSqlTableType:
        """Test StandardSqlTableType
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `StandardSqlTableType`
        """
        model = StandardSqlTableType()
        if include_optional:
            return StandardSqlTableType(
                columns = [
                    openapi_client.models.standard_sql_field.StandardSqlField(
                        name = '', 
                        type = openapi_client.models.standard_sql_data_type.StandardSqlDataType(
                            array_element_type = openapi_client.models.standard_sql_data_type.StandardSqlDataType(
                                range_element_type = , 
                                struct_type = openapi_client.models.standard_sql_struct_type.StandardSqlStructType(
                                    fields = [
                                        openapi_client.models.standard_sql_field.StandardSqlField(
                                            name = '', )
                                        ], ), 
                                type_kind = 'TYPE_KIND_UNSPECIFIED', ), 
                            range_element_type = , 
                            struct_type = openapi_client.models.standard_sql_struct_type.StandardSqlStructType(), 
                            type_kind = 'TYPE_KIND_UNSPECIFIED', ), )
                    ]
            )
        else:
            return StandardSqlTableType(
        )
        """

    def testStandardSqlTableType(self):
        """Test StandardSqlTableType"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

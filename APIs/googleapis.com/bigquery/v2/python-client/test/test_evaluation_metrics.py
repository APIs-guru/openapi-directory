# coding: utf-8

"""
    BigQuery API

    A data platform for customers to create, manage, share and query data.

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.evaluation_metrics import EvaluationMetrics

class TestEvaluationMetrics(unittest.TestCase):
    """EvaluationMetrics unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> EvaluationMetrics:
        """Test EvaluationMetrics
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `EvaluationMetrics`
        """
        model = EvaluationMetrics()
        if include_optional:
            return EvaluationMetrics(
                arima_forecasting_metrics = openapi_client.models.arima_forecasting_metrics.ArimaForecastingMetrics(
                    arima_fitting_metrics = [
                        openapi_client.models.arima_fitting_metrics.ArimaFittingMetrics(
                            aic = 1.337, 
                            log_likelihood = 1.337, 
                            variance = 1.337, )
                        ], 
                    arima_single_model_forecasting_metrics = [
                        openapi_client.models.arima_single_model_forecasting_metrics.ArimaSingleModelForecastingMetrics(
                            has_drift = True, 
                            has_holiday_effect = True, 
                            has_spikes_and_dips = True, 
                            has_step_changes = True, 
                            non_seasonal_order = openapi_client.models.arima_order.ArimaOrder(
                                d = '', 
                                p = '', 
                                q = '', ), 
                            seasonal_periods = [
                                'SEASONAL_PERIOD_TYPE_UNSPECIFIED'
                                ], 
                            time_series_id = '', 
                            time_series_ids = [
                                ''
                                ], )
                        ], 
                    has_drift = [
                        True
                        ], 
                    non_seasonal_order = [
                        openapi_client.models.arima_order.ArimaOrder(
                            d = '', 
                            p = '', 
                            q = '', )
                        ], 
                    seasonal_periods = [
                        'SEASONAL_PERIOD_TYPE_UNSPECIFIED'
                        ], 
                    time_series_id = [
                        ''
                        ], ),
                binary_classification_metrics = openapi_client.models.binary_classification_metrics.BinaryClassificationMetrics(
                    aggregate_classification_metrics = openapi_client.models.aggregate_classification_metrics.AggregateClassificationMetrics(
                        accuracy = 1.337, 
                        f1_score = 1.337, 
                        log_loss = 1.337, 
                        precision = 1.337, 
                        recall = 1.337, 
                        roc_auc = 1.337, 
                        threshold = 1.337, ), 
                    binary_confusion_matrix_list = [
                        openapi_client.models.binary_confusion_matrix.BinaryConfusionMatrix(
                            accuracy = 1.337, 
                            f1_score = 1.337, 
                            false_negatives = '', 
                            false_positives = '', 
                            positive_class_threshold = 1.337, 
                            precision = 1.337, 
                            recall = 1.337, 
                            true_negatives = '', 
                            true_positives = '', )
                        ], 
                    negative_label = '', 
                    positive_label = '', ),
                clustering_metrics = openapi_client.models.clustering_metrics.ClusteringMetrics(
                    clusters = [
                        openapi_client.models.cluster.Cluster(
                            centroid_id = '', 
                            count = '', 
                            feature_values = [
                                openapi_client.models.feature_value.FeatureValue(
                                    categorical_value = openapi_client.models.categorical_value.CategoricalValue(
                                        category_counts = [
                                            openapi_client.models.category_count.CategoryCount(
                                                category = '', 
                                                count = '', )
                                            ], ), 
                                    feature_column = '', 
                                    numerical_value = 1.337, )
                                ], )
                        ], 
                    davies_bouldin_index = 1.337, 
                    mean_squared_distance = 1.337, ),
                dimensionality_reduction_metrics = openapi_client.models.dimensionality_reduction_metrics.DimensionalityReductionMetrics(
                    total_explained_variance_ratio = 1.337, ),
                multi_class_classification_metrics = openapi_client.models.multi_class_classification_metrics.MultiClassClassificationMetrics(
                    aggregate_classification_metrics = openapi_client.models.aggregate_classification_metrics.AggregateClassificationMetrics(
                        accuracy = 1.337, 
                        f1_score = 1.337, 
                        log_loss = 1.337, 
                        precision = 1.337, 
                        recall = 1.337, 
                        roc_auc = 1.337, 
                        threshold = 1.337, ), 
                    confusion_matrix_list = [
                        openapi_client.models.confusion_matrix.ConfusionMatrix(
                            confidence_threshold = 1.337, 
                            rows = [
                                openapi_client.models.row.Row(
                                    actual_label = '', 
                                    entries = [
                                        openapi_client.models.entry.Entry(
                                            item_count = '', 
                                            predicted_label = '', )
                                        ], )
                                ], )
                        ], ),
                ranking_metrics = openapi_client.models.ranking_metrics.RankingMetrics(
                    average_rank = 1.337, 
                    mean_average_precision = 1.337, 
                    mean_squared_error = 1.337, 
                    normalized_discounted_cumulative_gain = 1.337, ),
                regression_metrics = openapi_client.models.regression_metrics.RegressionMetrics(
                    mean_absolute_error = 1.337, 
                    mean_squared_error = 1.337, 
                    mean_squared_log_error = 1.337, 
                    median_absolute_error = 1.337, 
                    r_squared = 1.337, )
            )
        else:
            return EvaluationMetrics(
        )
        """

    def testEvaluationMetrics(self):
        """Test EvaluationMetrics"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

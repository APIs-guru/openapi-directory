# coding: utf-8

"""
    BigQuery API

    A data platform for customers to create, manage, share and query data.

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.dataset import Dataset

class TestDataset(unittest.TestCase):
    """Dataset unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> Dataset:
        """Test Dataset
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `Dataset`
        """
        model = Dataset()
        if include_optional:
            return Dataset(
                access = [
                    openapi_client.models.dataset_access_inner.Dataset_access_inner(
                        dataset = openapi_client.models.dataset_access_entry.DatasetAccessEntry(
                            target_types = [
                                'TARGET_TYPE_UNSPECIFIED'
                                ], ), 
                        domain = '', 
                        group_by_email = '', 
                        iam_member = '', 
                        role = '', 
                        routine = openapi_client.models.routine_reference.RoutineReference(
                            dataset_id = '', 
                            project_id = '', 
                            routine_id = '', ), 
                        special_group = '', 
                        user_by_email = '', 
                        view = openapi_client.models.table_reference.TableReference(
                            dataset_id = '', 
                            project_id = '', 
                            table_id = '', ), )
                    ],
                creation_time = '',
                dataset_reference = openapi_client.models.dataset_reference.DatasetReference(
                    dataset_id = '', 
                    project_id = '', ),
                default_collation = '',
                default_encryption_configuration = openapi_client.models.encryption_configuration.EncryptionConfiguration(
                    kms_key_name = '', ),
                default_partition_expiration_ms = '',
                default_rounding_mode = 'ROUNDING_MODE_UNSPECIFIED',
                default_table_expiration_ms = '',
                description = '',
                etag = '',
                external_dataset_reference = openapi_client.models.external_dataset_reference.ExternalDatasetReference(
                    connection = '', 
                    external_source = '', ),
                friendly_name = '',
                id = '',
                is_case_insensitive = True,
                kind = 'bigquery#dataset',
                labels = {
                    'key' : ''
                    },
                last_modified_time = '',
                linked_dataset_source = openapi_client.models.linked_dataset_source.LinkedDatasetSource(
                    source_dataset = openapi_client.models.dataset_reference.DatasetReference(
                        dataset_id = '', 
                        project_id = '', ), ),
                location = '',
                max_time_travel_hours = '',
                satisfies_pzi = True,
                satisfies_pzs = True,
                self_link = '',
                storage_billing_model = 'STORAGE_BILLING_MODEL_UNSPECIFIED',
                tags = [
                    openapi_client.models.dataset_tags_inner.Dataset_tags_inner(
                        tag_key = '', 
                        tag_value = '', )
                    ],
                type = ''
            )
        else:
            return Dataset(
        )
        """

    def testDataset(self):
        """Test Dataset"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

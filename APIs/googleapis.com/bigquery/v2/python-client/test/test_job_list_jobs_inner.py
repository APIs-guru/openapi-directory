# coding: utf-8

"""
    BigQuery API

    A data platform for customers to create, manage, share and query data.

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.job_list_jobs_inner import JobListJobsInner

class TestJobListJobsInner(unittest.TestCase):
    """JobListJobsInner unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> JobListJobsInner:
        """Test JobListJobsInner
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `JobListJobsInner`
        """
        model = JobListJobsInner()
        if include_optional:
            return JobListJobsInner(
                configuration = openapi_client.models.job_configuration.JobConfiguration(
                    copy = openapi_client.models.job_configuration_table_copy.JobConfigurationTableCopy(
                        create_disposition = '', 
                        destination_encryption_configuration = openapi_client.models.encryption_configuration.EncryptionConfiguration(
                            kms_key_name = '', ), 
                        destination_expiration_time = '', 
                        destination_table = openapi_client.models.table_reference.TableReference(
                            dataset_id = '', 
                            project_id = '', 
                            table_id = '', ), 
                        operation_type = 'OPERATION_TYPE_UNSPECIFIED', 
                        source_table = openapi_client.models.table_reference.TableReference(
                            dataset_id = '', 
                            project_id = '', 
                            table_id = '', ), 
                        source_tables = [
                            
                            ], 
                        write_disposition = '', ), 
                    dry_run = True, 
                    extract = openapi_client.models.job_configuration_extract.JobConfigurationExtract(
                        compression = '', 
                        destination_format = '', 
                        destination_uri = '', 
                        destination_uris = [
                            ''
                            ], 
                        field_delimiter = '', 
                        model_extract_options = openapi_client.models.model_extract_options.ModelExtractOptions(
                            trial_id = '', ), 
                        print_header = True, 
                        source_model = openapi_client.models.model_reference.ModelReference(
                            dataset_id = '', 
                            model_id = '', 
                            project_id = '', ), 
                        use_avro_logical_types = True, ), 
                    job_timeout_ms = '', 
                    job_type = '', 
                    labels = {
                        'key' : ''
                        }, 
                    load = openapi_client.models.job_configuration_load.JobConfigurationLoad(
                        allow_jagged_rows = True, 
                        allow_quoted_newlines = True, 
                        autodetect = True, 
                        clustering = openapi_client.models.clustering.Clustering(
                            fields = [
                                ''
                                ], ), 
                        connection_properties = [
                            openapi_client.models.connection_property.ConnectionProperty(
                                key = '', 
                                value = '', )
                            ], 
                        copy_files_only = True, 
                        create_disposition = '', 
                        create_session = True, 
                        decimal_target_types = [
                            'DECIMAL_TARGET_TYPE_UNSPECIFIED'
                            ], 
                        destination_table_properties = openapi_client.models.destination_table_properties.DestinationTableProperties(
                            description = '', 
                            expiration_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            friendly_name = '', ), 
                        encoding = '', 
                        field_delimiter = '', 
                        file_set_spec_type = 'FILE_SET_SPEC_TYPE_FILE_SYSTEM_MATCH', 
                        hive_partitioning_options = openapi_client.models.hive_partitioning_options.HivePartitioningOptions(
                            mode = '', 
                            require_partition_filter = True, 
                            source_uri_prefix = '', ), 
                        ignore_unknown_values = True, 
                        json_extension = 'JSON_EXTENSION_UNSPECIFIED', 
                        max_bad_records = 56, 
                        null_marker = '', 
                        parquet_options = openapi_client.models.parquet_options.ParquetOptions(
                            enable_list_inference = True, 
                            enum_as_string = True, ), 
                        preserve_ascii_control_characters = True, 
                        projection_fields = [
                            ''
                            ], 
                        quote = '"', 
                        range_partitioning = openapi_client.models.range_partitioning.RangePartitioning(
                            field = '', 
                            range = openapi_client.models.range_partitioning_range.RangePartitioning_range(
                                end = '', 
                                interval = '', 
                                start = '', ), ), 
                        reference_file_schema_uri = '', 
                        schema = openapi_client.models.table_schema.TableSchema(), 
                        schema_inline = '', 
                        schema_inline_format = '', 
                        schema_update_options = [
                            ''
                            ], 
                        skip_leading_rows = 56, 
                        source_format = '', 
                        source_uris = [
                            ''
                            ], 
                        time_partitioning = openapi_client.models.time_partitioning.TimePartitioning(
                            expiration_ms = '', 
                            field = '', 
                            require_partition_filter = True, 
                            type = '', ), 
                        use_avro_logical_types = True, 
                        write_disposition = '', ), 
                    query = openapi_client.models.job_configuration_query.JobConfigurationQuery(
                        allow_large_results = True, 
                        continuous = True, 
                        create_disposition = '', 
                        create_session = True, 
                        default_dataset = openapi_client.models.dataset_reference.DatasetReference(
                            dataset_id = '', 
                            project_id = '', ), 
                        flatten_results = True, 
                        maximum_billing_tier = 56, 
                        maximum_bytes_billed = '', 
                        parameter_mode = '', 
                        preserve_nulls = True, 
                        priority = '', 
                        query_parameters = [
                            openapi_client.models.query_parameter.QueryParameter(
                                name = '', 
                                parameter_type = openapi_client.models.query_parameter_type.QueryParameterType(
                                    array_type = openapi_client.models.query_parameter_type.QueryParameterType(
                                        range_element_type = , 
                                        struct_types = [
                                            openapi_client.models.query_parameter_type_struct_types_inner.QueryParameterType_structTypes_inner(
                                                description = '', 
                                                name = '', 
                                                type = , )
                                            ], 
                                        type = '', ), 
                                    range_element_type = , 
                                    struct_types = [
                                        openapi_client.models.query_parameter_type_struct_types_inner.QueryParameterType_structTypes_inner(
                                            description = '', 
                                            name = '', )
                                        ], 
                                    type = '', ), 
                                parameter_value = openapi_client.models.query_parameter_value.QueryParameterValue(
                                    array_values = [
                                        openapi_client.models.query_parameter_value.QueryParameterValue(
                                            range_value = openapi_client.models.range_value.RangeValue(
                                                end = , 
                                                start = , ), 
                                            struct_values = {
                                                'key' : 
                                                }, 
                                            value = '', )
                                        ], 
                                    range_value = openapi_client.models.range_value.RangeValue(), 
                                    struct_values = {
                                        'key' : 
                                        }, 
                                    value = '', ), )
                            ], 
                        script_options = openapi_client.models.script_options.ScriptOptions(
                            key_result_statement = 'KEY_RESULT_STATEMENT_KIND_UNSPECIFIED', 
                            statement_byte_budget = '', 
                            statement_timeout_ms = '', ), 
                        system_variables = openapi_client.models.system_variables.SystemVariables(
                            types = {
                                'key' : openapi_client.models.standard_sql_data_type.StandardSqlDataType(
                                    array_element_type = openapi_client.models.standard_sql_data_type.StandardSqlDataType(
                                        struct_type = openapi_client.models.standard_sql_struct_type.StandardSqlStructType(), 
                                        type_kind = 'TYPE_KIND_UNSPECIFIED', ), 
                                    struct_type = openapi_client.models.standard_sql_struct_type.StandardSqlStructType(), 
                                    type_kind = 'TYPE_KIND_UNSPECIFIED', )
                                }, 
                            values = {
                                'key' : null
                                }, ), 
                        table_definitions = {
                            'key' : openapi_client.models.external_data_configuration.ExternalDataConfiguration(
                                autodetect = True, 
                                avro_options = openapi_client.models.avro_options.AvroOptions(
                                    use_avro_logical_types = True, ), 
                                bigtable_options = openapi_client.models.bigtable_options.BigtableOptions(
                                    column_families = [
                                        openapi_client.models.bigtable_column_family.BigtableColumnFamily(
                                            columns = [
                                                openapi_client.models.bigtable_column.BigtableColumn(
                                                    encoding = '', 
                                                    field_name = '', 
                                                    only_read_latest = True, 
                                                    qualifier_encoded = 'YQ==', 
                                                    qualifier_string = '', )
                                                ], 
                                            encoding = '', 
                                            family_id = '', 
                                            only_read_latest = True, )
                                        ], 
                                    ignore_unspecified_column_families = True, 
                                    output_column_families_as_json = True, 
                                    read_rowkey_as_string = True, ), 
                                compression = '', 
                                connection_id = '', 
                                csv_options = openapi_client.models.csv_options.CsvOptions(
                                    allow_jagged_rows = True, 
                                    allow_quoted_newlines = True, 
                                    encoding = '', 
                                    field_delimiter = '', 
                                    null_marker = '', 
                                    preserve_ascii_control_characters = True, 
                                    quote = '"', 
                                    skip_leading_rows = '', ), 
                                file_set_spec_type = 'FILE_SET_SPEC_TYPE_FILE_SYSTEM_MATCH', 
                                google_sheets_options = openapi_client.models.google_sheets_options.GoogleSheetsOptions(
                                    skip_leading_rows = '', ), 
                                ignore_unknown_values = True, 
                                json_extension = 'JSON_EXTENSION_UNSPECIFIED', 
                                json_options = openapi_client.models.json_options.JsonOptions(
                                    encoding = '', ), 
                                max_bad_records = 56, 
                                metadata_cache_mode = 'METADATA_CACHE_MODE_UNSPECIFIED', 
                                object_metadata = 'OBJECT_METADATA_UNSPECIFIED', 
                                reference_file_schema_uri = '', 
                                source_format = '', )
                            }, 
                        use_legacy_sql = True, 
                        use_query_cache = True, 
                        user_defined_function_resources = [
                            openapi_client.models.user_defined_function_resource.UserDefinedFunctionResource(
                                inline_code = '', 
                                resource_uri = '', )
                            ], 
                        write_disposition = '', ), ),
                error_result = openapi_client.models.error_proto.ErrorProto(
                    debug_info = '', 
                    location = '', 
                    message = '', 
                    reason = '', ),
                id = '',
                job_reference = openapi_client.models.job_reference.JobReference(
                    job_id = '', 
                    location = '', 
                    project_id = '', ),
                kind = '',
                principal_subject = '',
                state = '',
                statistics = openapi_client.models.job_statistics.JobStatistics(
                    completion_ratio = 1.337, 
                    copy = openapi_client.models.job_statistics5.JobStatistics5(
                        copied_logical_bytes = '', 
                        copied_rows = '', ), 
                    creation_time = '', 
                    data_masking_statistics = openapi_client.models.data_masking_statistics.DataMaskingStatistics(
                        data_masking_applied = True, ), 
                    end_time = '', 
                    extract = openapi_client.models.job_statistics4.JobStatistics4(
                        destination_uri_file_counts = [
                            ''
                            ], 
                        input_bytes = '', 
                        timeline = [
                            openapi_client.models.query_timeline_sample.QueryTimelineSample(
                                active_units = '', 
                                completed_units = '', 
                                elapsed_ms = '', 
                                estimated_runnable_units = '', 
                                pending_units = '', 
                                total_slot_ms = '', )
                            ], ), 
                    final_execution_duration_ms = '', 
                    load = openapi_client.models.job_statistics3.JobStatistics3(
                        bad_records = '', 
                        input_file_bytes = '', 
                        input_files = '', 
                        output_bytes = '', 
                        output_rows = '', ), 
                    num_child_jobs = '', 
                    parent_job_id = '', 
                    query = openapi_client.models.job_statistics2.JobStatistics2(
                        bi_engine_statistics = openapi_client.models.bi_engine_statistics.BiEngineStatistics(
                            acceleration_mode = 'BI_ENGINE_ACCELERATION_MODE_UNSPECIFIED', 
                            bi_engine_mode = 'ACCELERATION_MODE_UNSPECIFIED', 
                            bi_engine_reasons = [
                                openapi_client.models.bi_engine_reason.BiEngineReason(
                                    code = 'CODE_UNSPECIFIED', 
                                    message = '', )
                                ], ), 
                        billing_tier = 56, 
                        cache_hit = True, 
                        dcl_target_dataset = openapi_client.models.dataset_reference.DatasetReference(
                            dataset_id = '', 
                            project_id = '', ), 
                        dcl_target_table = openapi_client.models.table_reference.TableReference(
                            dataset_id = '', 
                            project_id = '', 
                            table_id = '', ), 
                        dcl_target_view = openapi_client.models.table_reference.TableReference(
                            dataset_id = '', 
                            project_id = '', 
                            table_id = '', ), 
                        ddl_affected_row_access_policy_count = '', 
                        ddl_destination_table = , 
                        ddl_operation_performed = '', 
                        ddl_target_dataset = openapi_client.models.dataset_reference.DatasetReference(
                            dataset_id = '', 
                            project_id = '', ), 
                        ddl_target_routine = openapi_client.models.routine_reference.RoutineReference(
                            dataset_id = '', 
                            project_id = '', 
                            routine_id = '', ), 
                        ddl_target_row_access_policy = openapi_client.models.row_access_policy_reference.RowAccessPolicyReference(
                            dataset_id = '', 
                            policy_id = '', 
                            project_id = '', 
                            table_id = '', ), 
                        ddl_target_table = , 
                        dml_stats = openapi_client.models.dml_statistics.DmlStatistics(
                            deleted_row_count = '', 
                            inserted_row_count = '', 
                            updated_row_count = '', ), 
                        estimated_bytes_processed = '', 
                        export_data_statistics = openapi_client.models.export_data_statistics.ExportDataStatistics(
                            file_count = '', 
                            row_count = '', ), 
                        external_service_costs = [
                            openapi_client.models.external_service_cost.ExternalServiceCost(
                                bytes_billed = '', 
                                bytes_processed = '', 
                                external_service = '', 
                                reserved_slot_count = '', 
                                slot_ms = '', )
                            ], 
                        load_query_statistics = openapi_client.models.load_query_statistics.LoadQueryStatistics(
                            bad_records = '', 
                            bytes_transferred = '', 
                            input_file_bytes = '', 
                            input_files = '', 
                            output_bytes = '', 
                            output_rows = '', ), 
                        materialized_view_statistics = openapi_client.models.materialized_view_statistics.MaterializedViewStatistics(
                            materialized_view = [
                                openapi_client.models.materialized_view.MaterializedView(
                                    chosen = True, 
                                    estimated_bytes_saved = '', 
                                    rejected_reason = 'REJECTED_REASON_UNSPECIFIED', 
                                    table_reference = , )
                                ], ), 
                        metadata_cache_statistics = openapi_client.models.metadata_cache_statistics.MetadataCacheStatistics(
                            table_metadata_cache_usage = [
                                openapi_client.models.table_metadata_cache_usage.TableMetadataCacheUsage(
                                    explanation = '', 
                                    table_type = '', 
                                    unused_reason = 'UNUSED_REASON_UNSPECIFIED', )
                                ], ), 
                        ml_statistics = openapi_client.models.ml_statistics.MlStatistics(
                            hparam_trials = [
                                openapi_client.models.hparam_tuning_trial.HparamTuningTrial(
                                    end_time_ms = '', 
                                    error_message = '', 
                                    eval_loss = 1.337, 
                                    evaluation_metrics = openapi_client.models.evaluation_metrics.EvaluationMetrics(
                                        arima_forecasting_metrics = openapi_client.models.arima_forecasting_metrics.ArimaForecastingMetrics(
                                            arima_fitting_metrics = [
                                                openapi_client.models.arima_fitting_metrics.ArimaFittingMetrics(
                                                    aic = 1.337, 
                                                    log_likelihood = 1.337, 
                                                    variance = 1.337, )
                                                ], 
                                            arima_single_model_forecasting_metrics = [
                                                openapi_client.models.arima_single_model_forecasting_metrics.ArimaSingleModelForecastingMetrics(
                                                    has_drift = True, 
                                                    has_holiday_effect = True, 
                                                    has_spikes_and_dips = True, 
                                                    has_step_changes = True, 
                                                    non_seasonal_order = openapi_client.models.arima_order.ArimaOrder(
                                                        d = '', 
                                                        p = '', 
                                                        q = '', ), 
                                                    seasonal_periods = [
                                                        'SEASONAL_PERIOD_TYPE_UNSPECIFIED'
                                                        ], 
                                                    time_series_id = '', 
                                                    time_series_ids = [
                                                        ''
                                                        ], )
                                                ], 
                                            has_drift = [
                                                True
                                                ], 
                                            non_seasonal_order = [
                                                openapi_client.models.arima_order.ArimaOrder(
                                                    d = '', 
                                                    p = '', 
                                                    q = '', )
                                                ], 
                                            seasonal_periods = [
                                                'SEASONAL_PERIOD_TYPE_UNSPECIFIED'
                                                ], 
                                            time_series_id = [
                                                ''
                                                ], ), 
                                        binary_classification_metrics = openapi_client.models.binary_classification_metrics.BinaryClassificationMetrics(
                                            aggregate_classification_metrics = openapi_client.models.aggregate_classification_metrics.AggregateClassificationMetrics(
                                                accuracy = 1.337, 
                                                f1_score = 1.337, 
                                                log_loss = 1.337, 
                                                precision = 1.337, 
                                                recall = 1.337, 
                                                roc_auc = 1.337, 
                                                threshold = 1.337, ), 
                                            binary_confusion_matrix_list = [
                                                openapi_client.models.binary_confusion_matrix.BinaryConfusionMatrix(
                                                    accuracy = 1.337, 
                                                    f1_score = 1.337, 
                                                    false_negatives = '', 
                                                    false_positives = '', 
                                                    positive_class_threshold = 1.337, 
                                                    precision = 1.337, 
                                                    recall = 1.337, 
                                                    true_negatives = '', 
                                                    true_positives = '', )
                                                ], 
                                            negative_label = '', 
                                            positive_label = '', ), 
                                        clustering_metrics = openapi_client.models.clustering_metrics.ClusteringMetrics(
                                            clusters = [
                                                openapi_client.models.cluster.Cluster(
                                                    centroid_id = '', 
                                                    count = '', 
                                                    feature_values = [
                                                        openapi_client.models.feature_value.FeatureValue(
                                                            categorical_value = openapi_client.models.categorical_value.CategoricalValue(
                                                                category_counts = [
                                                                    openapi_client.models.category_count.CategoryCount(
                                                                        category = '', 
                                                                        count = '', )
                                                                    ], ), 
                                                            feature_column = '', 
                                                            numerical_value = 1.337, )
                                                        ], )
                                                ], 
                                            davies_bouldin_index = 1.337, 
                                            mean_squared_distance = 1.337, ), 
                                        dimensionality_reduction_metrics = openapi_client.models.dimensionality_reduction_metrics.DimensionalityReductionMetrics(
                                            total_explained_variance_ratio = 1.337, ), 
                                        multi_class_classification_metrics = openapi_client.models.multi_class_classification_metrics.MultiClassClassificationMetrics(
                                            confusion_matrix_list = [
                                                openapi_client.models.confusion_matrix.ConfusionMatrix(
                                                    confidence_threshold = 1.337, 
                                                    rows = [
                                                        openapi_client.models.row.Row(
                                                            actual_label = '', 
                                                            entries = [
                                                                openapi_client.models.entry.Entry(
                                                                    item_count = '', 
                                                                    predicted_label = '', )
                                                                ], )
                                                        ], )
                                                ], ), 
                                        ranking_metrics = openapi_client.models.ranking_metrics.RankingMetrics(
                                            average_rank = 1.337, 
                                            mean_average_precision = 1.337, 
                                            mean_squared_error = 1.337, 
                                            normalized_discounted_cumulative_gain = 1.337, ), 
                                        regression_metrics = openapi_client.models.regression_metrics.RegressionMetrics(
                                            mean_absolute_error = 1.337, 
                                            mean_squared_error = 1.337, 
                                            mean_squared_log_error = 1.337, 
                                            median_absolute_error = 1.337, 
                                            r_squared = 1.337, ), ), 
                                    hparam_tuning_evaluation_metrics = openapi_client.models.evaluation_metrics.EvaluationMetrics(), 
                                    hparams = openapi_client.models.training_options.TrainingOptions(
                                        activation_fn = '', 
                                        adjust_step_changes = True, 
                                        approx_global_feature_contrib = True, 
                                        auto_arima = True, 
                                        auto_arima_max_order = '', 
                                        auto_arima_min_order = '', 
                                        auto_class_weights = True, 
                                        batch_size = '', 
                                        booster_type = 'BOOSTER_TYPE_UNSPECIFIED', 
                                        budget_hours = 1.337, 
                                        calculate_p_values = True, 
                                        category_encoding_method = 'ENCODING_METHOD_UNSPECIFIED', 
                                        clean_spikes_and_dips = True, 
                                        color_space = 'COLOR_SPACE_UNSPECIFIED', 
                                        colsample_bylevel = 1.337, 
                                        colsample_bynode = 1.337, 
                                        colsample_bytree = 1.337, 
                                        dart_normalize_type = 'DART_NORMALIZE_TYPE_UNSPECIFIED', 
                                        data_frequency = 'DATA_FREQUENCY_UNSPECIFIED', 
                                        data_split_column = '', 
                                        data_split_eval_fraction = 1.337, 
                                        data_split_method = 'DATA_SPLIT_METHOD_UNSPECIFIED', 
                                        decompose_time_series = True, 
                                        distance_type = 'DISTANCE_TYPE_UNSPECIFIED', 
                                        dropout = 1.337, 
                                        early_stop = True, 
                                        enable_global_explain = True, 
                                        feedback_type = 'FEEDBACK_TYPE_UNSPECIFIED', 
                                        fit_intercept = True, 
                                        hidden_units = [
                                            ''
                                            ], 
                                        holiday_region = 'HOLIDAY_REGION_UNSPECIFIED', 
                                        holiday_regions = [
                                            'HOLIDAY_REGION_UNSPECIFIED'
                                            ], 
                                        horizon = '', 
                                        hparam_tuning_objectives = [
                                            'HPARAM_TUNING_OBJECTIVE_UNSPECIFIED'
                                            ], 
                                        include_drift = True, 
                                        initial_learn_rate = 1.337, 
                                        input_label_columns = [
                                            ''
                                            ], 
                                        instance_weight_column = '', 
                                        integrated_gradients_num_steps = '', 
                                        item_column = '', 
                                        kmeans_initialization_column = '', 
                                        kmeans_initialization_method = 'KMEANS_INITIALIZATION_METHOD_UNSPECIFIED', 
                                        l1_reg_activation = 1.337, 
                                        l1_regularization = 1.337, 
                                        l2_regularization = 1.337, 
                                        label_class_weights = {
                                            'key' : 1.337
                                            }, 
                                        learn_rate = 1.337, 
                                        learn_rate_strategy = 'LEARN_RATE_STRATEGY_UNSPECIFIED', 
                                        loss_type = 'LOSS_TYPE_UNSPECIFIED', 
                                        max_iterations = '', 
                                        max_parallel_trials = '', 
                                        max_time_series_length = '', 
                                        max_tree_depth = '', 
                                        min_relative_progress = 1.337, 
                                        min_split_loss = 1.337, 
                                        min_time_series_length = '', 
                                        min_tree_child_weight = '', 
                                        model_registry = 'MODEL_REGISTRY_UNSPECIFIED', 
                                        model_uri = '', 
                                        num_clusters = '', 
                                        num_factors = '', 
                                        num_parallel_tree = '', 
                                        num_principal_components = '', 
                                        num_trials = '', 
                                        optimization_strategy = 'OPTIMIZATION_STRATEGY_UNSPECIFIED', 
                                        optimizer = '', 
                                        pca_explained_variance_ratio = 1.337, 
                                        pca_solver = 'UNSPECIFIED', 
                                        sampled_shapley_num_paths = '', 
                                        scale_features = True, 
                                        standardize_features = True, 
                                        subsample = 1.337, 
                                        tf_version = '', 
                                        time_series_data_column = '', 
                                        time_series_id_column = '', 
                                        time_series_id_columns = [
                                            ''
                                            ], 
                                        time_series_length_fraction = 1.337, 
                                        time_series_timestamp_column = '', 
                                        tree_method = 'TREE_METHOD_UNSPECIFIED', 
                                        trend_smoothing_window_size = '', 
                                        user_column = '', 
                                        vertex_ai_model_version_aliases = [
                                            ''
                                            ], 
                                        wals_alpha = 1.337, 
                                        warm_start = True, 
                                        xgboost_version = '', ), 
                                    start_time_ms = '', 
                                    status = 'TRIAL_STATUS_UNSPECIFIED', 
                                    training_loss = 1.337, 
                                    trial_id = '', )
                                ], 
                            iteration_results = [
                                openapi_client.models.iteration_result.IterationResult(
                                    arima_result = openapi_client.models.arima_result.ArimaResult(
                                        arima_model_info = [
                                            openapi_client.models.arima_model_info.ArimaModelInfo(
                                                arima_coefficients = openapi_client.models.arima_coefficients.ArimaCoefficients(
                                                    auto_regressive_coefficients = [
                                                        1.337
                                                        ], 
                                                    intercept_coefficient = 1.337, 
                                                    moving_average_coefficients = [
                                                        1.337
                                                        ], ), 
                                                has_holiday_effect = True, 
                                                has_spikes_and_dips = True, 
                                                has_step_changes = True, )
                                            ], ), 
                                    cluster_infos = [
                                        openapi_client.models.cluster_info.ClusterInfo(
                                            centroid_id = '', 
                                            cluster_radius = 1.337, 
                                            cluster_size = '', )
                                        ], 
                                    duration_ms = '', 
                                    eval_loss = 1.337, 
                                    index = 56, 
                                    learn_rate = 1.337, 
                                    principal_component_infos = [
                                        openapi_client.models.principal_component_info.PrincipalComponentInfo(
                                            cumulative_explained_variance_ratio = 1.337, 
                                            explained_variance = 1.337, 
                                            explained_variance_ratio = 1.337, 
                                            principal_component_id = '', )
                                        ], 
                                    training_loss = 1.337, )
                                ], 
                            max_iterations = '', 
                            model_type = 'MODEL_TYPE_UNSPECIFIED', 
                            training_type = 'TRAINING_TYPE_UNSPECIFIED', ), 
                        model_training = openapi_client.models.big_query_model_training.BigQueryModelTraining(
                            current_iteration = 56, 
                            expected_total_iterations = '', ), 
                        model_training_current_iteration = 56, 
                        model_training_expected_total_iteration = '', 
                        num_dml_affected_rows = '', 
                        performance_insights = openapi_client.models.performance_insights.PerformanceInsights(
                            avg_previous_execution_ms = '', 
                            stage_performance_change_insights = [
                                openapi_client.models.stage_performance_change_insight.StagePerformanceChangeInsight(
                                    input_data_change = openapi_client.models.input_data_change.InputDataChange(
                                        records_read_diff_percentage = 1.337, ), 
                                    stage_id = '', )
                                ], 
                            stage_performance_standalone_insights = [
                                openapi_client.models.stage_performance_standalone_insight.StagePerformanceStandaloneInsight(
                                    high_cardinality_joins = [
                                        openapi_client.models.high_cardinality_join.HighCardinalityJoin(
                                            left_rows = '', 
                                            output_rows = '', 
                                            right_rows = '', 
                                            step_index = 56, )
                                        ], 
                                    insufficient_shuffle_quota = True, 
                                    slot_contention = True, 
                                    stage_id = '', )
                                ], ), 
                        query_info = openapi_client.models.query_info.QueryInfo(
                            optimization_details = {
                                'key' : null
                                }, ), 
                        query_plan = [
                            openapi_client.models.explain_query_stage.ExplainQueryStage(
                                completed_parallel_inputs = '', 
                                compute_mode = 'COMPUTE_MODE_UNSPECIFIED', 
                                compute_ms_avg = '', 
                                compute_ms_max = '', 
                                compute_ratio_avg = 1.337, 
                                compute_ratio_max = 1.337, 
                                end_ms = '', 
                                id = '', 
                                input_stages = [
                                    ''
                                    ], 
                                name = '', 
                                parallel_inputs = '', 
                                read_ms_avg = '', 
                                read_ms_max = '', 
                                read_ratio_avg = 1.337, 
                                read_ratio_max = 1.337, 
                                records_read = '', 
                                records_written = '', 
                                shuffle_output_bytes = '', 
                                shuffle_output_bytes_spilled = '', 
                                slot_ms = '', 
                                start_ms = '', 
                                status = '', 
                                steps = [
                                    openapi_client.models.explain_query_step.ExplainQueryStep(
                                        kind = '', 
                                        substeps = [
                                            ''
                                            ], )
                                    ], 
                                wait_ms_avg = '', 
                                wait_ms_max = '', 
                                wait_ratio_avg = 1.337, 
                                wait_ratio_max = 1.337, 
                                write_ms_avg = '', 
                                write_ms_max = '', 
                                write_ratio_avg = 1.337, 
                                write_ratio_max = 1.337, )
                            ], 
                        referenced_routines = [
                            openapi_client.models.routine_reference.RoutineReference(
                                dataset_id = '', 
                                project_id = '', 
                                routine_id = '', )
                            ], 
                        referenced_tables = [
                            
                            ], 
                        reservation_usage = [
                            openapi_client.models.job_statistics_reservation_usage_inner.JobStatistics_reservationUsage_inner(
                                name = '', 
                                slot_ms = '', )
                            ], 
                        schema = openapi_client.models.table_schema.TableSchema(
                            fields = [
                                openapi_client.models.table_field_schema.TableFieldSchema(
                                    categories = openapi_client.models.table_field_schema_categories.TableFieldSchema_categories(
                                        names = [
                                            ''
                                            ], ), 
                                    collation = '', 
                                    default_value_expression = '', 
                                    description = '', 
                                    max_length = '', 
                                    mode = '', 
                                    name = '', 
                                    policy_tags = openapi_client.models.table_field_schema_policy_tags.TableFieldSchema_policyTags(), 
                                    precision = '', 
                                    range_element_type = openapi_client.models.table_field_schema_range_element_type.TableFieldSchema_rangeElementType(
                                        type = '', ), 
                                    rounding_mode = 'ROUNDING_MODE_UNSPECIFIED', 
                                    scale = '', 
                                    type = '', )
                                ], ), 
                        search_statistics = openapi_client.models.search_statistics.SearchStatistics(
                            index_unused_reasons = [
                                openapi_client.models.index_unused_reason.IndexUnusedReason(
                                    base_table = , 
                                    code = 'CODE_UNSPECIFIED', 
                                    index_name = '', 
                                    message = '', )
                                ], 
                            index_usage_mode = 'INDEX_USAGE_MODE_UNSPECIFIED', ), 
                        spark_statistics = openapi_client.models.spark_statistics.SparkStatistics(
                            endpoints = {
                                'key' : ''
                                }, 
                            gcs_staging_bucket = '', 
                            kms_key_name = '', 
                            logging_info = openapi_client.models.spark_logging_info.SparkLoggingInfo(
                                project_id = '', 
                                resource_type = '', ), 
                            spark_job_id = '', 
                            spark_job_location = '', ), 
                        statement_type = '', 
                        total_bytes_billed = '', 
                        total_bytes_processed = '', 
                        total_bytes_processed_accuracy = '', 
                        total_partitions_processed = '', 
                        total_slot_ms = '', 
                        transferred_bytes = '', 
                        undeclared_query_parameters = [
                            openapi_client.models.query_parameter.QueryParameter(
                                name = '', 
                                parameter_type = openapi_client.models.query_parameter_type.QueryParameterType(
                                    array_type = openapi_client.models.query_parameter_type.QueryParameterType(
                                        struct_types = [
                                            openapi_client.models.query_parameter_type_struct_types_inner.QueryParameterType_structTypes_inner(
                                                description = '', 
                                                name = '', 
                                                type = , )
                                            ], 
                                        type = '', ), 
                                    struct_types = [
                                        openapi_client.models.query_parameter_type_struct_types_inner.QueryParameterType_structTypes_inner(
                                            description = '', 
                                            name = '', )
                                        ], 
                                    type = '', ), 
                                parameter_value = openapi_client.models.query_parameter_value.QueryParameterValue(
                                    array_values = [
                                        openapi_client.models.query_parameter_value.QueryParameterValue(
                                            range_value = openapi_client.models.range_value.RangeValue(
                                                end = , 
                                                start = , ), 
                                            struct_values = {
                                                'key' : 
                                                }, 
                                            value = '', )
                                        ], 
                                    range_value = openapi_client.models.range_value.RangeValue(), 
                                    struct_values = {
                                        'key' : 
                                        }, 
                                    value = '', ), )
                            ], 
                        vector_search_statistics = openapi_client.models.vector_search_statistics.VectorSearchStatistics(
                            index_usage_mode = 'INDEX_USAGE_MODE_UNSPECIFIED', ), ), 
                    quota_deferments = [
                        ''
                        ], 
                    reservation_usage = [
                        openapi_client.models.job_statistics_reservation_usage_inner.JobStatistics_reservationUsage_inner(
                            name = '', 
                            slot_ms = '', )
                        ], 
                    reservation_id = '', 
                    row_level_security_statistics = openapi_client.models.row_level_security_statistics.RowLevelSecurityStatistics(
                        row_level_security_applied = True, ), 
                    script_statistics = openapi_client.models.script_statistics.ScriptStatistics(
                        evaluation_kind = 'EVALUATION_KIND_UNSPECIFIED', 
                        stack_frames = [
                            openapi_client.models.script_stack_frame.ScriptStackFrame(
                                end_column = 56, 
                                end_line = 56, 
                                procedure_id = '', 
                                start_column = 56, 
                                start_line = 56, 
                                text = '', )
                            ], ), 
                    session_info = openapi_client.models.session_info.SessionInfo(
                        session_id = '', ), 
                    start_time = '', 
                    total_bytes_processed = '', 
                    total_slot_ms = '', 
                    transaction_info = openapi_client.models.transaction_info.TransactionInfo(
                        transaction_id = '', ), ),
                status = openapi_client.models.job_status.JobStatus(
                    error_result = openapi_client.models.error_proto.ErrorProto(
                        debug_info = '', 
                        location = '', 
                        message = '', 
                        reason = '', ), 
                    errors = [
                        openapi_client.models.error_proto.ErrorProto(
                            debug_info = '', 
                            location = '', 
                            message = '', 
                            reason = '', )
                        ], 
                    state = '', ),
                user_email = ''
            )
        else:
            return JobListJobsInner(
        )
        """

    def testJobListJobsInner(self):
        """Test JobListJobsInner"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

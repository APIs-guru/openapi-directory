# coding: utf-8

"""
    BigQuery API

    A data platform for customers to create, manage, share and query data.

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.arima_forecasting_metrics import ArimaForecastingMetrics

class TestArimaForecastingMetrics(unittest.TestCase):
    """ArimaForecastingMetrics unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> ArimaForecastingMetrics:
        """Test ArimaForecastingMetrics
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `ArimaForecastingMetrics`
        """
        model = ArimaForecastingMetrics()
        if include_optional:
            return ArimaForecastingMetrics(
                arima_fitting_metrics = [
                    openapi_client.models.arima_fitting_metrics.ArimaFittingMetrics(
                        aic = 1.337, 
                        log_likelihood = 1.337, 
                        variance = 1.337, )
                    ],
                arima_single_model_forecasting_metrics = [
                    openapi_client.models.arima_single_model_forecasting_metrics.ArimaSingleModelForecastingMetrics(
                        arima_fitting_metrics = openapi_client.models.arima_fitting_metrics.ArimaFittingMetrics(
                            aic = 1.337, 
                            log_likelihood = 1.337, 
                            variance = 1.337, ), 
                        has_drift = True, 
                        has_holiday_effect = True, 
                        has_spikes_and_dips = True, 
                        has_step_changes = True, 
                        non_seasonal_order = openapi_client.models.arima_order.ArimaOrder(
                            d = '', 
                            p = '', 
                            q = '', ), 
                        seasonal_periods = [
                            'SEASONAL_PERIOD_TYPE_UNSPECIFIED'
                            ], 
                        time_series_id = '', 
                        time_series_ids = [
                            ''
                            ], )
                    ],
                has_drift = [
                    True
                    ],
                non_seasonal_order = [
                    openapi_client.models.arima_order.ArimaOrder(
                        d = '', 
                        p = '', 
                        q = '', )
                    ],
                seasonal_periods = [
                    'SEASONAL_PERIOD_TYPE_UNSPECIFIED'
                    ],
                time_series_id = [
                    ''
                    ]
            )
        else:
            return ArimaForecastingMetrics(
        )
        """

    def testArimaForecastingMetrics(self):
        """Test ArimaForecastingMetrics"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

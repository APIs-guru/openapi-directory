# coding: utf-8

"""
    BigQuery API

    A data platform for customers to create, manage, share and query data.

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.metadata_cache_statistics import MetadataCacheStatistics

class TestMetadataCacheStatistics(unittest.TestCase):
    """MetadataCacheStatistics unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> MetadataCacheStatistics:
        """Test MetadataCacheStatistics
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `MetadataCacheStatistics`
        """
        model = MetadataCacheStatistics()
        if include_optional:
            return MetadataCacheStatistics(
                table_metadata_cache_usage = [
                    openapi_client.models.table_metadata_cache_usage.TableMetadataCacheUsage(
                        explanation = '', 
                        table_reference = openapi_client.models.table_reference.TableReference(
                            dataset_id = '', 
                            project_id = '', 
                            table_id = '', ), 
                        table_type = '', 
                        unused_reason = 'UNUSED_REASON_UNSPECIFIED', )
                    ]
            )
        else:
            return MetadataCacheStatistics(
        )
        """

    def testMetadataCacheStatistics(self):
        """Test MetadataCacheStatistics"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

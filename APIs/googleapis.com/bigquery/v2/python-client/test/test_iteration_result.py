# coding: utf-8

"""
    BigQuery API

    A data platform for customers to create, manage, share and query data.

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.iteration_result import IterationResult

class TestIterationResult(unittest.TestCase):
    """IterationResult unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> IterationResult:
        """Test IterationResult
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `IterationResult`
        """
        model = IterationResult()
        if include_optional:
            return IterationResult(
                arima_result = openapi_client.models.arima_result.ArimaResult(
                    arima_model_info = [
                        openapi_client.models.arima_model_info.ArimaModelInfo(
                            arima_coefficients = openapi_client.models.arima_coefficients.ArimaCoefficients(
                                auto_regressive_coefficients = [
                                    1.337
                                    ], 
                                intercept_coefficient = 1.337, 
                                moving_average_coefficients = [
                                    1.337
                                    ], ), 
                            arima_fitting_metrics = openapi_client.models.arima_fitting_metrics.ArimaFittingMetrics(
                                aic = 1.337, 
                                log_likelihood = 1.337, 
                                variance = 1.337, ), 
                            has_drift = True, 
                            has_holiday_effect = True, 
                            has_spikes_and_dips = True, 
                            has_step_changes = True, 
                            non_seasonal_order = openapi_client.models.arima_order.ArimaOrder(
                                d = '', 
                                p = '', 
                                q = '', ), 
                            seasonal_periods = [
                                'SEASONAL_PERIOD_TYPE_UNSPECIFIED'
                                ], 
                            time_series_id = '', 
                            time_series_ids = [
                                ''
                                ], )
                        ], 
                    seasonal_periods = [
                        'SEASONAL_PERIOD_TYPE_UNSPECIFIED'
                        ], ),
                cluster_infos = [
                    openapi_client.models.cluster_info.ClusterInfo(
                        centroid_id = '', 
                        cluster_radius = 1.337, 
                        cluster_size = '', )
                    ],
                duration_ms = '',
                eval_loss = 1.337,
                index = 56,
                learn_rate = 1.337,
                principal_component_infos = [
                    openapi_client.models.principal_component_info.PrincipalComponentInfo(
                        cumulative_explained_variance_ratio = 1.337, 
                        explained_variance = 1.337, 
                        explained_variance_ratio = 1.337, 
                        principal_component_id = '', )
                    ],
                training_loss = 1.337
            )
        else:
            return IterationResult(
        )
        """

    def testIterationResult(self):
        """Test IterationResult"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

# coding: utf-8

"""
    BigQuery API

    A data platform for customers to create, manage, share and query data.

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.training_run import TrainingRun

class TestTrainingRun(unittest.TestCase):
    """TrainingRun unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> TrainingRun:
        """Test TrainingRun
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `TrainingRun`
        """
        model = TrainingRun()
        if include_optional:
            return TrainingRun(
                class_level_global_explanations = [
                    openapi_client.models.global_explanation.GlobalExplanation(
                        class_label = '', 
                        explanations = [
                            openapi_client.models.explanation.Explanation(
                                attribution = 1.337, 
                                feature_name = '', )
                            ], )
                    ],
                data_split_result = openapi_client.models.data_split_result.DataSplitResult(
                    evaluation_table = openapi_client.models.table_reference.TableReference(
                        dataset_id = '', 
                        project_id = '', 
                        table_id = '', ), 
                    test_table = openapi_client.models.table_reference.TableReference(
                        dataset_id = '', 
                        project_id = '', 
                        table_id = '', ), 
                    training_table = , ),
                evaluation_metrics = openapi_client.models.evaluation_metrics.EvaluationMetrics(
                    arima_forecasting_metrics = openapi_client.models.arima_forecasting_metrics.ArimaForecastingMetrics(
                        arima_fitting_metrics = [
                            openapi_client.models.arima_fitting_metrics.ArimaFittingMetrics(
                                aic = 1.337, 
                                log_likelihood = 1.337, 
                                variance = 1.337, )
                            ], 
                        arima_single_model_forecasting_metrics = [
                            openapi_client.models.arima_single_model_forecasting_metrics.ArimaSingleModelForecastingMetrics(
                                has_drift = True, 
                                has_holiday_effect = True, 
                                has_spikes_and_dips = True, 
                                has_step_changes = True, 
                                non_seasonal_order = openapi_client.models.arima_order.ArimaOrder(
                                    d = '', 
                                    p = '', 
                                    q = '', ), 
                                seasonal_periods = [
                                    'SEASONAL_PERIOD_TYPE_UNSPECIFIED'
                                    ], 
                                time_series_id = '', 
                                time_series_ids = [
                                    ''
                                    ], )
                            ], 
                        has_drift = [
                            True
                            ], 
                        non_seasonal_order = [
                            openapi_client.models.arima_order.ArimaOrder(
                                d = '', 
                                p = '', 
                                q = '', )
                            ], 
                        seasonal_periods = [
                            'SEASONAL_PERIOD_TYPE_UNSPECIFIED'
                            ], 
                        time_series_id = [
                            ''
                            ], ), 
                    binary_classification_metrics = openapi_client.models.binary_classification_metrics.BinaryClassificationMetrics(
                        aggregate_classification_metrics = openapi_client.models.aggregate_classification_metrics.AggregateClassificationMetrics(
                            accuracy = 1.337, 
                            f1_score = 1.337, 
                            log_loss = 1.337, 
                            precision = 1.337, 
                            recall = 1.337, 
                            roc_auc = 1.337, 
                            threshold = 1.337, ), 
                        binary_confusion_matrix_list = [
                            openapi_client.models.binary_confusion_matrix.BinaryConfusionMatrix(
                                accuracy = 1.337, 
                                f1_score = 1.337, 
                                false_negatives = '', 
                                false_positives = '', 
                                positive_class_threshold = 1.337, 
                                precision = 1.337, 
                                recall = 1.337, 
                                true_negatives = '', 
                                true_positives = '', )
                            ], 
                        negative_label = '', 
                        positive_label = '', ), 
                    clustering_metrics = openapi_client.models.clustering_metrics.ClusteringMetrics(
                        clusters = [
                            openapi_client.models.cluster.Cluster(
                                centroid_id = '', 
                                count = '', 
                                feature_values = [
                                    openapi_client.models.feature_value.FeatureValue(
                                        categorical_value = openapi_client.models.categorical_value.CategoricalValue(
                                            category_counts = [
                                                openapi_client.models.category_count.CategoryCount(
                                                    category = '', 
                                                    count = '', )
                                                ], ), 
                                        feature_column = '', 
                                        numerical_value = 1.337, )
                                    ], )
                            ], 
                        davies_bouldin_index = 1.337, 
                        mean_squared_distance = 1.337, ), 
                    dimensionality_reduction_metrics = openapi_client.models.dimensionality_reduction_metrics.DimensionalityReductionMetrics(
                        total_explained_variance_ratio = 1.337, ), 
                    multi_class_classification_metrics = openapi_client.models.multi_class_classification_metrics.MultiClassClassificationMetrics(
                        confusion_matrix_list = [
                            openapi_client.models.confusion_matrix.ConfusionMatrix(
                                confidence_threshold = 1.337, 
                                rows = [
                                    openapi_client.models.row.Row(
                                        actual_label = '', 
                                        entries = [
                                            openapi_client.models.entry.Entry(
                                                item_count = '', 
                                                predicted_label = '', )
                                            ], )
                                    ], )
                            ], ), 
                    ranking_metrics = openapi_client.models.ranking_metrics.RankingMetrics(
                        average_rank = 1.337, 
                        mean_average_precision = 1.337, 
                        mean_squared_error = 1.337, 
                        normalized_discounted_cumulative_gain = 1.337, ), 
                    regression_metrics = openapi_client.models.regression_metrics.RegressionMetrics(
                        mean_absolute_error = 1.337, 
                        mean_squared_error = 1.337, 
                        mean_squared_log_error = 1.337, 
                        median_absolute_error = 1.337, 
                        r_squared = 1.337, ), ),
                model_level_global_explanation = openapi_client.models.global_explanation.GlobalExplanation(
                    class_label = '', 
                    explanations = [
                        openapi_client.models.explanation.Explanation(
                            attribution = 1.337, 
                            feature_name = '', )
                        ], ),
                results = [
                    openapi_client.models.iteration_result.IterationResult(
                        arima_result = openapi_client.models.arima_result.ArimaResult(
                            arima_model_info = [
                                openapi_client.models.arima_model_info.ArimaModelInfo(
                                    arima_coefficients = openapi_client.models.arima_coefficients.ArimaCoefficients(
                                        auto_regressive_coefficients = [
                                            1.337
                                            ], 
                                        intercept_coefficient = 1.337, 
                                        moving_average_coefficients = [
                                            1.337
                                            ], ), 
                                    arima_fitting_metrics = openapi_client.models.arima_fitting_metrics.ArimaFittingMetrics(
                                        aic = 1.337, 
                                        log_likelihood = 1.337, 
                                        variance = 1.337, ), 
                                    has_drift = True, 
                                    has_holiday_effect = True, 
                                    has_spikes_and_dips = True, 
                                    has_step_changes = True, 
                                    non_seasonal_order = openapi_client.models.arima_order.ArimaOrder(
                                        d = '', 
                                        p = '', 
                                        q = '', ), 
                                    seasonal_periods = [
                                        'SEASONAL_PERIOD_TYPE_UNSPECIFIED'
                                        ], 
                                    time_series_id = '', 
                                    time_series_ids = [
                                        ''
                                        ], )
                                ], 
                            seasonal_periods = [
                                'SEASONAL_PERIOD_TYPE_UNSPECIFIED'
                                ], ), 
                        cluster_infos = [
                            openapi_client.models.cluster_info.ClusterInfo(
                                centroid_id = '', 
                                cluster_radius = 1.337, 
                                cluster_size = '', )
                            ], 
                        duration_ms = '', 
                        eval_loss = 1.337, 
                        index = 56, 
                        learn_rate = 1.337, 
                        principal_component_infos = [
                            openapi_client.models.principal_component_info.PrincipalComponentInfo(
                                cumulative_explained_variance_ratio = 1.337, 
                                explained_variance = 1.337, 
                                explained_variance_ratio = 1.337, 
                                principal_component_id = '', )
                            ], 
                        training_loss = 1.337, )
                    ],
                start_time = '',
                training_options = openapi_client.models.training_options.TrainingOptions(
                    activation_fn = '', 
                    adjust_step_changes = True, 
                    approx_global_feature_contrib = True, 
                    auto_arima = True, 
                    auto_arima_max_order = '', 
                    auto_arima_min_order = '', 
                    auto_class_weights = True, 
                    batch_size = '', 
                    booster_type = 'BOOSTER_TYPE_UNSPECIFIED', 
                    budget_hours = 1.337, 
                    calculate_p_values = True, 
                    category_encoding_method = 'ENCODING_METHOD_UNSPECIFIED', 
                    clean_spikes_and_dips = True, 
                    color_space = 'COLOR_SPACE_UNSPECIFIED', 
                    colsample_bylevel = 1.337, 
                    colsample_bynode = 1.337, 
                    colsample_bytree = 1.337, 
                    dart_normalize_type = 'DART_NORMALIZE_TYPE_UNSPECIFIED', 
                    data_frequency = 'DATA_FREQUENCY_UNSPECIFIED', 
                    data_split_column = '', 
                    data_split_eval_fraction = 1.337, 
                    data_split_method = 'DATA_SPLIT_METHOD_UNSPECIFIED', 
                    decompose_time_series = True, 
                    distance_type = 'DISTANCE_TYPE_UNSPECIFIED', 
                    dropout = 1.337, 
                    early_stop = True, 
                    enable_global_explain = True, 
                    feedback_type = 'FEEDBACK_TYPE_UNSPECIFIED', 
                    fit_intercept = True, 
                    hidden_units = [
                        ''
                        ], 
                    holiday_region = 'HOLIDAY_REGION_UNSPECIFIED', 
                    holiday_regions = [
                        'HOLIDAY_REGION_UNSPECIFIED'
                        ], 
                    horizon = '', 
                    hparam_tuning_objectives = [
                        'HPARAM_TUNING_OBJECTIVE_UNSPECIFIED'
                        ], 
                    include_drift = True, 
                    initial_learn_rate = 1.337, 
                    input_label_columns = [
                        ''
                        ], 
                    instance_weight_column = '', 
                    integrated_gradients_num_steps = '', 
                    item_column = '', 
                    kmeans_initialization_column = '', 
                    kmeans_initialization_method = 'KMEANS_INITIALIZATION_METHOD_UNSPECIFIED', 
                    l1_reg_activation = 1.337, 
                    l1_regularization = 1.337, 
                    l2_regularization = 1.337, 
                    label_class_weights = {
                        'key' : 1.337
                        }, 
                    learn_rate = 1.337, 
                    learn_rate_strategy = 'LEARN_RATE_STRATEGY_UNSPECIFIED', 
                    loss_type = 'LOSS_TYPE_UNSPECIFIED', 
                    max_iterations = '', 
                    max_parallel_trials = '', 
                    max_time_series_length = '', 
                    max_tree_depth = '', 
                    min_relative_progress = 1.337, 
                    min_split_loss = 1.337, 
                    min_time_series_length = '', 
                    min_tree_child_weight = '', 
                    model_registry = 'MODEL_REGISTRY_UNSPECIFIED', 
                    model_uri = '', 
                    non_seasonal_order = openapi_client.models.arima_order.ArimaOrder(
                        d = '', 
                        p = '', 
                        q = '', ), 
                    num_clusters = '', 
                    num_factors = '', 
                    num_parallel_tree = '', 
                    num_principal_components = '', 
                    num_trials = '', 
                    optimization_strategy = 'OPTIMIZATION_STRATEGY_UNSPECIFIED', 
                    optimizer = '', 
                    pca_explained_variance_ratio = 1.337, 
                    pca_solver = 'UNSPECIFIED', 
                    sampled_shapley_num_paths = '', 
                    scale_features = True, 
                    standardize_features = True, 
                    subsample = 1.337, 
                    tf_version = '', 
                    time_series_data_column = '', 
                    time_series_id_column = '', 
                    time_series_id_columns = [
                        ''
                        ], 
                    time_series_length_fraction = 1.337, 
                    time_series_timestamp_column = '', 
                    tree_method = 'TREE_METHOD_UNSPECIFIED', 
                    trend_smoothing_window_size = '', 
                    user_column = '', 
                    vertex_ai_model_version_aliases = [
                        ''
                        ], 
                    wals_alpha = 1.337, 
                    warm_start = True, 
                    xgboost_version = '', ),
                training_start_time = '',
                vertex_ai_model_id = '',
                vertex_ai_model_version = ''
            )
        else:
            return TrainingRun(
        )
        """

    def testTrainingRun(self):
        """Test TrainingRun"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

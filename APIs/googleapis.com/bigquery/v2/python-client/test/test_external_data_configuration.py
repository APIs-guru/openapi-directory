# coding: utf-8

"""
    BigQuery API

    A data platform for customers to create, manage, share and query data.

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.external_data_configuration import ExternalDataConfiguration

class TestExternalDataConfiguration(unittest.TestCase):
    """ExternalDataConfiguration unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> ExternalDataConfiguration:
        """Test ExternalDataConfiguration
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `ExternalDataConfiguration`
        """
        model = ExternalDataConfiguration()
        if include_optional:
            return ExternalDataConfiguration(
                autodetect = True,
                avro_options = openapi_client.models.avro_options.AvroOptions(
                    use_avro_logical_types = True, ),
                bigtable_options = openapi_client.models.bigtable_options.BigtableOptions(
                    column_families = [
                        openapi_client.models.bigtable_column_family.BigtableColumnFamily(
                            columns = [
                                openapi_client.models.bigtable_column.BigtableColumn(
                                    encoding = '', 
                                    field_name = '', 
                                    only_read_latest = True, 
                                    qualifier_encoded = 'YQ==', 
                                    qualifier_string = '', 
                                    type = '', )
                                ], 
                            encoding = '', 
                            family_id = '', 
                            only_read_latest = True, 
                            type = '', )
                        ], 
                    ignore_unspecified_column_families = True, 
                    output_column_families_as_json = True, 
                    read_rowkey_as_string = True, ),
                compression = '',
                connection_id = '',
                csv_options = openapi_client.models.csv_options.CsvOptions(
                    allow_jagged_rows = True, 
                    allow_quoted_newlines = True, 
                    encoding = '', 
                    field_delimiter = '', 
                    null_marker = '', 
                    preserve_ascii_control_characters = True, 
                    quote = '"', 
                    skip_leading_rows = '', ),
                decimal_target_types = [
                    'DECIMAL_TARGET_TYPE_UNSPECIFIED'
                    ],
                file_set_spec_type = 'FILE_SET_SPEC_TYPE_FILE_SYSTEM_MATCH',
                google_sheets_options = openapi_client.models.google_sheets_options.GoogleSheetsOptions(
                    range = '', 
                    skip_leading_rows = '', ),
                hive_partitioning_options = openapi_client.models.hive_partitioning_options.HivePartitioningOptions(
                    fields = [
                        ''
                        ], 
                    mode = '', 
                    require_partition_filter = True, 
                    source_uri_prefix = '', ),
                ignore_unknown_values = True,
                json_extension = 'JSON_EXTENSION_UNSPECIFIED',
                json_options = openapi_client.models.json_options.JsonOptions(
                    encoding = '', ),
                max_bad_records = 56,
                metadata_cache_mode = 'METADATA_CACHE_MODE_UNSPECIFIED',
                object_metadata = 'OBJECT_METADATA_UNSPECIFIED',
                parquet_options = openapi_client.models.parquet_options.ParquetOptions(
                    enable_list_inference = True, 
                    enum_as_string = True, ),
                reference_file_schema_uri = '',
                var_schema = openapi_client.models.table_schema.TableSchema(
                    fields = [
                        openapi_client.models.table_field_schema.TableFieldSchema(
                            categories = openapi_client.models.table_field_schema_categories.TableFieldSchema_categories(
                                names = [
                                    ''
                                    ], ), 
                            collation = '', 
                            default_value_expression = '', 
                            description = '', 
                            max_length = '', 
                            mode = '', 
                            name = '', 
                            policy_tags = openapi_client.models.table_field_schema_policy_tags.TableFieldSchema_policyTags(), 
                            precision = '', 
                            range_element_type = openapi_client.models.table_field_schema_range_element_type.TableFieldSchema_rangeElementType(
                                type = '', ), 
                            rounding_mode = 'ROUNDING_MODE_UNSPECIFIED', 
                            scale = '', 
                            type = '', )
                        ], ),
                source_format = '',
                source_uris = [
                    ''
                    ]
            )
        else:
            return ExternalDataConfiguration(
        )
        """

    def testExternalDataConfiguration(self):
        """Test ExternalDataConfiguration"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

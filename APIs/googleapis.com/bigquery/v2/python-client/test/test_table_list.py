# coding: utf-8

"""
    BigQuery API

    A data platform for customers to create, manage, share and query data.

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.table_list import TableList

class TestTableList(unittest.TestCase):
    """TableList unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> TableList:
        """Test TableList
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `TableList`
        """
        model = TableList()
        if include_optional:
            return TableList(
                etag = '',
                kind = 'bigquery#tableList',
                next_page_token = '',
                tables = [
                    openapi_client.models.table_list_tables_inner.TableList_tables_inner(
                        clustering = openapi_client.models.clustering.Clustering(
                            fields = [
                                ''
                                ], ), 
                        creation_time = '', 
                        expiration_time = '', 
                        friendly_name = '', 
                        id = '', 
                        kind = '', 
                        labels = {
                            'key' : ''
                            }, 
                        range_partitioning = openapi_client.models.range_partitioning.RangePartitioning(
                            field = '', 
                            range = openapi_client.models.range_partitioning_range.RangePartitioning_range(
                                end = '', 
                                interval = '', 
                                start = '', ), ), 
                        require_partition_filter = True, 
                        table_reference = openapi_client.models.table_reference.TableReference(
                            dataset_id = '', 
                            project_id = '', 
                            table_id = '', ), 
                        time_partitioning = openapi_client.models.time_partitioning.TimePartitioning(
                            expiration_ms = '', 
                            field = '', 
                            require_partition_filter = True, 
                            type = '', ), 
                        type = '', 
                        view = openapi_client.models.table_list_tables_inner_view.TableList_tables_inner_view(
                            privacy_policy = openapi_client.models.privacy_policy.PrivacyPolicy(
                                aggregation_threshold_policy = openapi_client.models.aggregation_threshold_policy.AggregationThresholdPolicy(
                                    privacy_unit_columns = [
                                        ''
                                        ], 
                                    threshold = '', ), ), 
                            use_legacy_sql = True, ), )
                    ],
                total_items = 56
            )
        else:
            return TableList(
        )
        """

    def testTableList(self):
        """Test TableList"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

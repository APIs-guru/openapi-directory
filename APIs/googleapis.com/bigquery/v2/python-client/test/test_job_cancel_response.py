# coding: utf-8

"""
    BigQuery API

    A data platform for customers to create, manage, share and query data.

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.job_cancel_response import JobCancelResponse

class TestJobCancelResponse(unittest.TestCase):
    """JobCancelResponse unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> JobCancelResponse:
        """Test JobCancelResponse
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `JobCancelResponse`
        """
        model = JobCancelResponse()
        if include_optional:
            return JobCancelResponse(
                job = openapi_client.models.job.Job(
                    configuration = openapi_client.models.job_configuration.JobConfiguration(
                        copy = openapi_client.models.job_configuration_table_copy.JobConfigurationTableCopy(
                            create_disposition = '', 
                            destination_encryption_configuration = openapi_client.models.encryption_configuration.EncryptionConfiguration(
                                kms_key_name = '', ), 
                            destination_expiration_time = '', 
                            destination_table = openapi_client.models.table_reference.TableReference(
                                dataset_id = '', 
                                project_id = '', 
                                table_id = '', ), 
                            operation_type = 'OPERATION_TYPE_UNSPECIFIED', 
                            source_table = openapi_client.models.table_reference.TableReference(
                                dataset_id = '', 
                                project_id = '', 
                                table_id = '', ), 
                            source_tables = [
                                
                                ], 
                            write_disposition = '', ), 
                        dry_run = True, 
                        extract = openapi_client.models.job_configuration_extract.JobConfigurationExtract(
                            compression = '', 
                            destination_format = '', 
                            destination_uri = '', 
                            destination_uris = [
                                ''
                                ], 
                            field_delimiter = '', 
                            model_extract_options = openapi_client.models.model_extract_options.ModelExtractOptions(
                                trial_id = '', ), 
                            print_header = True, 
                            source_model = openapi_client.models.model_reference.ModelReference(
                                dataset_id = '', 
                                model_id = '', 
                                project_id = '', ), 
                            use_avro_logical_types = True, ), 
                        job_timeout_ms = '', 
                        job_type = '', 
                        labels = {
                            'key' : ''
                            }, 
                        load = openapi_client.models.job_configuration_load.JobConfigurationLoad(
                            allow_jagged_rows = True, 
                            allow_quoted_newlines = True, 
                            autodetect = True, 
                            clustering = openapi_client.models.clustering.Clustering(
                                fields = [
                                    ''
                                    ], ), 
                            connection_properties = [
                                openapi_client.models.connection_property.ConnectionProperty(
                                    key = '', 
                                    value = '', )
                                ], 
                            copy_files_only = True, 
                            create_disposition = '', 
                            create_session = True, 
                            decimal_target_types = [
                                'DECIMAL_TARGET_TYPE_UNSPECIFIED'
                                ], 
                            destination_table_properties = openapi_client.models.destination_table_properties.DestinationTableProperties(
                                description = '', 
                                expiration_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                friendly_name = '', ), 
                            encoding = '', 
                            field_delimiter = '', 
                            file_set_spec_type = 'FILE_SET_SPEC_TYPE_FILE_SYSTEM_MATCH', 
                            hive_partitioning_options = openapi_client.models.hive_partitioning_options.HivePartitioningOptions(
                                mode = '', 
                                require_partition_filter = True, 
                                source_uri_prefix = '', ), 
                            ignore_unknown_values = True, 
                            json_extension = 'JSON_EXTENSION_UNSPECIFIED', 
                            max_bad_records = 56, 
                            null_marker = '', 
                            parquet_options = openapi_client.models.parquet_options.ParquetOptions(
                                enable_list_inference = True, 
                                enum_as_string = True, ), 
                            preserve_ascii_control_characters = True, 
                            projection_fields = [
                                ''
                                ], 
                            quote = '"', 
                            range_partitioning = openapi_client.models.range_partitioning.RangePartitioning(
                                field = '', 
                                range = openapi_client.models.range_partitioning_range.RangePartitioning_range(
                                    end = '', 
                                    interval = '', 
                                    start = '', ), ), 
                            reference_file_schema_uri = '', 
                            schema = openapi_client.models.table_schema.TableSchema(), 
                            schema_inline = '', 
                            schema_inline_format = '', 
                            schema_update_options = [
                                ''
                                ], 
                            skip_leading_rows = 56, 
                            source_format = '', 
                            source_uris = [
                                ''
                                ], 
                            time_partitioning = openapi_client.models.time_partitioning.TimePartitioning(
                                expiration_ms = '', 
                                field = '', 
                                require_partition_filter = True, 
                                type = '', ), 
                            use_avro_logical_types = True, 
                            write_disposition = '', ), 
                        query = openapi_client.models.job_configuration_query.JobConfigurationQuery(
                            allow_large_results = True, 
                            continuous = True, 
                            create_disposition = '', 
                            create_session = True, 
                            default_dataset = openapi_client.models.dataset_reference.DatasetReference(
                                dataset_id = '', 
                                project_id = '', ), 
                            flatten_results = True, 
                            maximum_billing_tier = 56, 
                            maximum_bytes_billed = '', 
                            parameter_mode = '', 
                            preserve_nulls = True, 
                            priority = '', 
                            query_parameters = [
                                openapi_client.models.query_parameter.QueryParameter(
                                    name = '', 
                                    parameter_type = openapi_client.models.query_parameter_type.QueryParameterType(
                                        array_type = openapi_client.models.query_parameter_type.QueryParameterType(
                                            range_element_type = , 
                                            struct_types = [
                                                openapi_client.models.query_parameter_type_struct_types_inner.QueryParameterType_structTypes_inner(
                                                    description = '', 
                                                    name = '', 
                                                    type = , )
                                                ], 
                                            type = '', ), 
                                        range_element_type = , 
                                        struct_types = [
                                            openapi_client.models.query_parameter_type_struct_types_inner.QueryParameterType_structTypes_inner(
                                                description = '', 
                                                name = '', )
                                            ], 
                                        type = '', ), 
                                    parameter_value = openapi_client.models.query_parameter_value.QueryParameterValue(
                                        array_values = [
                                            openapi_client.models.query_parameter_value.QueryParameterValue(
                                                range_value = openapi_client.models.range_value.RangeValue(
                                                    end = , 
                                                    start = , ), 
                                                struct_values = {
                                                    'key' : 
                                                    }, 
                                                value = '', )
                                            ], 
                                        range_value = openapi_client.models.range_value.RangeValue(), 
                                        struct_values = {
                                            'key' : 
                                            }, 
                                        value = '', ), )
                                ], 
                            script_options = openapi_client.models.script_options.ScriptOptions(
                                key_result_statement = 'KEY_RESULT_STATEMENT_KIND_UNSPECIFIED', 
                                statement_byte_budget = '', 
                                statement_timeout_ms = '', ), 
                            system_variables = openapi_client.models.system_variables.SystemVariables(
                                types = {
                                    'key' : openapi_client.models.standard_sql_data_type.StandardSqlDataType(
                                        array_element_type = openapi_client.models.standard_sql_data_type.StandardSqlDataType(
                                            struct_type = openapi_client.models.standard_sql_struct_type.StandardSqlStructType(), 
                                            type_kind = 'TYPE_KIND_UNSPECIFIED', ), 
                                        struct_type = openapi_client.models.standard_sql_struct_type.StandardSqlStructType(), 
                                        type_kind = 'TYPE_KIND_UNSPECIFIED', )
                                    }, 
                                values = {
                                    'key' : null
                                    }, ), 
                            table_definitions = {
                                'key' : openapi_client.models.external_data_configuration.ExternalDataConfiguration(
                                    autodetect = True, 
                                    avro_options = openapi_client.models.avro_options.AvroOptions(
                                        use_avro_logical_types = True, ), 
                                    bigtable_options = openapi_client.models.bigtable_options.BigtableOptions(
                                        column_families = [
                                            openapi_client.models.bigtable_column_family.BigtableColumnFamily(
                                                columns = [
                                                    openapi_client.models.bigtable_column.BigtableColumn(
                                                        encoding = '', 
                                                        field_name = '', 
                                                        only_read_latest = True, 
                                                        qualifier_encoded = 'YQ==', 
                                                        qualifier_string = '', )
                                                    ], 
                                                encoding = '', 
                                                family_id = '', 
                                                only_read_latest = True, )
                                            ], 
                                        ignore_unspecified_column_families = True, 
                                        output_column_families_as_json = True, 
                                        read_rowkey_as_string = True, ), 
                                    compression = '', 
                                    connection_id = '', 
                                    csv_options = openapi_client.models.csv_options.CsvOptions(
                                        allow_jagged_rows = True, 
                                        allow_quoted_newlines = True, 
                                        encoding = '', 
                                        field_delimiter = '', 
                                        null_marker = '', 
                                        preserve_ascii_control_characters = True, 
                                        quote = '"', 
                                        skip_leading_rows = '', ), 
                                    file_set_spec_type = 'FILE_SET_SPEC_TYPE_FILE_SYSTEM_MATCH', 
                                    google_sheets_options = openapi_client.models.google_sheets_options.GoogleSheetsOptions(
                                        skip_leading_rows = '', ), 
                                    ignore_unknown_values = True, 
                                    json_extension = 'JSON_EXTENSION_UNSPECIFIED', 
                                    json_options = openapi_client.models.json_options.JsonOptions(
                                        encoding = '', ), 
                                    max_bad_records = 56, 
                                    metadata_cache_mode = 'METADATA_CACHE_MODE_UNSPECIFIED', 
                                    object_metadata = 'OBJECT_METADATA_UNSPECIFIED', 
                                    reference_file_schema_uri = '', 
                                    source_format = '', )
                                }, 
                            use_legacy_sql = True, 
                            use_query_cache = True, 
                            user_defined_function_resources = [
                                openapi_client.models.user_defined_function_resource.UserDefinedFunctionResource(
                                    inline_code = '', 
                                    resource_uri = '', )
                                ], 
                            write_disposition = '', ), ), 
                    etag = '', 
                    id = '', 
                    job_creation_reason = openapi_client.models.job_creation_reason.JobCreationReason(
                        code = 'CODE_UNSPECIFIED', ), 
                    job_reference = openapi_client.models.job_reference.JobReference(
                        job_id = '', 
                        location = '', 
                        project_id = '', ), 
                    kind = 'bigquery#job', 
                    principal_subject = '', 
                    self_link = '', 
                    statistics = openapi_client.models.job_statistics.JobStatistics(
                        completion_ratio = 1.337, 
                        creation_time = '', 
                        data_masking_statistics = openapi_client.models.data_masking_statistics.DataMaskingStatistics(
                            data_masking_applied = True, ), 
                        end_time = '', 
                        final_execution_duration_ms = '', 
                        num_child_jobs = '', 
                        parent_job_id = '', 
                        quota_deferments = [
                            ''
                            ], 
                        reservation_usage = [
                            openapi_client.models.job_statistics_reservation_usage_inner.JobStatistics_reservationUsage_inner(
                                name = '', 
                                slot_ms = '', )
                            ], 
                        reservation_id = '', 
                        row_level_security_statistics = openapi_client.models.row_level_security_statistics.RowLevelSecurityStatistics(
                            row_level_security_applied = True, ), 
                        script_statistics = openapi_client.models.script_statistics.ScriptStatistics(
                            evaluation_kind = 'EVALUATION_KIND_UNSPECIFIED', 
                            stack_frames = [
                                openapi_client.models.script_stack_frame.ScriptStackFrame(
                                    end_column = 56, 
                                    end_line = 56, 
                                    procedure_id = '', 
                                    start_column = 56, 
                                    start_line = 56, 
                                    text = '', )
                                ], ), 
                        session_info = openapi_client.models.session_info.SessionInfo(
                            session_id = '', ), 
                        start_time = '', 
                        total_bytes_processed = '', 
                        total_slot_ms = '', 
                        transaction_info = openapi_client.models.transaction_info.TransactionInfo(
                            transaction_id = '', ), ), 
                    status = openapi_client.models.job_status.JobStatus(
                        error_result = openapi_client.models.error_proto.ErrorProto(
                            debug_info = '', 
                            location = '', 
                            message = '', 
                            reason = '', ), 
                        errors = [
                            openapi_client.models.error_proto.ErrorProto(
                                debug_info = '', 
                                location = '', 
                                message = '', 
                                reason = '', )
                            ], 
                        state = '', ), 
                    user_email = '', ),
                kind = 'bigquery#jobCancelResponse'
            )
        else:
            return JobCancelResponse(
        )
        """

    def testJobCancelResponse(self):
        """Test JobCancelResponse"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

# coding: utf-8

"""
    BigQuery API

    A data platform for customers to create, manage, share and query data.

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.table import Table

class TestTable(unittest.TestCase):
    """Table unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> Table:
        """Test Table
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `Table`
        """
        model = Table()
        if include_optional:
            return Table(
                biglake_configuration = openapi_client.models.big_lake_configuration.BigLakeConfiguration(
                    connection_id = '', 
                    file_format = 'FILE_FORMAT_UNSPECIFIED', 
                    storage_uri = '', 
                    table_format = 'TABLE_FORMAT_UNSPECIFIED', ),
                clone_definition = openapi_client.models.clone_definition.CloneDefinition(
                    base_table_reference = openapi_client.models.table_reference.TableReference(
                        dataset_id = '', 
                        project_id = '', 
                        table_id = '', ), 
                    clone_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), ),
                clustering = openapi_client.models.clustering.Clustering(
                    fields = [
                        ''
                        ], ),
                creation_time = '',
                default_collation = '',
                default_rounding_mode = 'ROUNDING_MODE_UNSPECIFIED',
                description = '',
                encryption_configuration = openapi_client.models.encryption_configuration.EncryptionConfiguration(
                    kms_key_name = '', ),
                etag = '',
                expiration_time = '',
                external_data_configuration = openapi_client.models.external_data_configuration.ExternalDataConfiguration(
                    autodetect = True, 
                    avro_options = openapi_client.models.avro_options.AvroOptions(
                        use_avro_logical_types = True, ), 
                    bigtable_options = openapi_client.models.bigtable_options.BigtableOptions(
                        column_families = [
                            openapi_client.models.bigtable_column_family.BigtableColumnFamily(
                                columns = [
                                    openapi_client.models.bigtable_column.BigtableColumn(
                                        encoding = '', 
                                        field_name = '', 
                                        only_read_latest = True, 
                                        qualifier_encoded = 'YQ==', 
                                        qualifier_string = '', 
                                        type = '', )
                                    ], 
                                encoding = '', 
                                family_id = '', 
                                only_read_latest = True, 
                                type = '', )
                            ], 
                        ignore_unspecified_column_families = True, 
                        output_column_families_as_json = True, 
                        read_rowkey_as_string = True, ), 
                    compression = '', 
                    connection_id = '', 
                    csv_options = openapi_client.models.csv_options.CsvOptions(
                        allow_jagged_rows = True, 
                        allow_quoted_newlines = True, 
                        encoding = '', 
                        field_delimiter = '', 
                        null_marker = '', 
                        preserve_ascii_control_characters = True, 
                        quote = '"', 
                        skip_leading_rows = '', ), 
                    decimal_target_types = [
                        'DECIMAL_TARGET_TYPE_UNSPECIFIED'
                        ], 
                    file_set_spec_type = 'FILE_SET_SPEC_TYPE_FILE_SYSTEM_MATCH', 
                    google_sheets_options = openapi_client.models.google_sheets_options.GoogleSheetsOptions(
                        range = '', 
                        skip_leading_rows = '', ), 
                    hive_partitioning_options = openapi_client.models.hive_partitioning_options.HivePartitioningOptions(
                        fields = [
                            ''
                            ], 
                        mode = '', 
                        require_partition_filter = True, 
                        source_uri_prefix = '', ), 
                    ignore_unknown_values = True, 
                    json_extension = 'JSON_EXTENSION_UNSPECIFIED', 
                    json_options = openapi_client.models.json_options.JsonOptions(
                        encoding = '', ), 
                    max_bad_records = 56, 
                    metadata_cache_mode = 'METADATA_CACHE_MODE_UNSPECIFIED', 
                    object_metadata = 'OBJECT_METADATA_UNSPECIFIED', 
                    parquet_options = openapi_client.models.parquet_options.ParquetOptions(
                        enable_list_inference = True, 
                        enum_as_string = True, ), 
                    reference_file_schema_uri = '', 
                    schema = openapi_client.models.table_schema.TableSchema(), 
                    source_format = '', 
                    source_uris = [
                        ''
                        ], ),
                friendly_name = '',
                id = '',
                kind = 'bigquery#table',
                labels = {
                    'key' : ''
                    },
                last_modified_time = '',
                location = '',
                materialized_view = openapi_client.models.materialized_view_definition.MaterializedViewDefinition(
                    allow_non_incremental_definition = True, 
                    enable_refresh = True, 
                    last_refresh_time = '', 
                    max_staleness = 'YQ==', 
                    query = '', 
                    refresh_interval_ms = '', ),
                materialized_view_status = openapi_client.models.materialized_view_status.MaterializedViewStatus(
                    last_refresh_status = openapi_client.models.error_proto.ErrorProto(
                        debug_info = '', 
                        location = '', 
                        message = '', 
                        reason = '', ), 
                    refresh_watermark = '', ),
                max_staleness = '',
                model = openapi_client.models.model_definition.ModelDefinition(
                    model_options = openapi_client.models.model_definition_model_options.ModelDefinition_modelOptions(
                        labels = [
                            ''
                            ], 
                        loss_type = '', 
                        model_type = '', ), 
                    training_runs = [
                        openapi_client.models.bqml_training_run.BqmlTrainingRun(
                            iteration_results = [
                                openapi_client.models.bqml_iteration_result.BqmlIterationResult(
                                    duration_ms = '', 
                                    eval_loss = 1.337, 
                                    index = 56, 
                                    learn_rate = 1.337, 
                                    training_loss = 1.337, )
                                ], 
                            start_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            state = '', 
                            training_options = openapi_client.models.bqml_training_run_training_options.BqmlTrainingRun_trainingOptions(
                                early_stop = True, 
                                l1_reg = 1.337, 
                                l2_reg = 1.337, 
                                learn_rate = 1.337, 
                                learn_rate_strategy = '', 
                                line_search_init_learn_rate = 1.337, 
                                max_iteration = '', 
                                min_rel_progress = 1.337, 
                                warm_start = True, ), )
                        ], ),
                num_active_logical_bytes = '',
                num_active_physical_bytes = '',
                num_bytes = '',
                num_long_term_bytes = '',
                num_long_term_logical_bytes = '',
                num_long_term_physical_bytes = '',
                num_partitions = '',
                num_physical_bytes = '',
                num_rows = '',
                num_time_travel_physical_bytes = '',
                num_total_logical_bytes = '',
                num_total_physical_bytes = '',
                range_partitioning = openapi_client.models.range_partitioning.RangePartitioning(
                    field = '', 
                    range = openapi_client.models.range_partitioning_range.RangePartitioning_range(
                        end = '', 
                        interval = '', 
                        start = '', ), ),
                replicas = [
                    openapi_client.models.table_reference.TableReference(
                        dataset_id = '', 
                        project_id = '', 
                        table_id = '', )
                    ],
                require_partition_filter = True,
                resource_tags = {
                    'key' : ''
                    },
                var_schema = openapi_client.models.table_schema.TableSchema(
                    fields = [
                        openapi_client.models.table_field_schema.TableFieldSchema(
                            categories = openapi_client.models.table_field_schema_categories.TableFieldSchema_categories(
                                names = [
                                    ''
                                    ], ), 
                            collation = '', 
                            default_value_expression = '', 
                            description = '', 
                            max_length = '', 
                            mode = '', 
                            name = '', 
                            policy_tags = openapi_client.models.table_field_schema_policy_tags.TableFieldSchema_policyTags(), 
                            precision = '', 
                            range_element_type = openapi_client.models.table_field_schema_range_element_type.TableFieldSchema_rangeElementType(
                                type = '', ), 
                            rounding_mode = 'ROUNDING_MODE_UNSPECIFIED', 
                            scale = '', 
                            type = '', )
                        ], ),
                self_link = '',
                snapshot_definition = openapi_client.models.snapshot_definition.SnapshotDefinition(
                    base_table_reference = openapi_client.models.table_reference.TableReference(
                        dataset_id = '', 
                        project_id = '', 
                        table_id = '', ), 
                    snapshot_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), ),
                streaming_buffer = openapi_client.models.streamingbuffer.Streamingbuffer(
                    estimated_bytes = '', 
                    estimated_rows = '', 
                    oldest_entry_time = '', ),
                table_constraints = openapi_client.models.table_constraints.TableConstraints(
                    foreign_keys = [
                        openapi_client.models.table_constraints_foreign_keys_inner.TableConstraints_foreignKeys_inner(
                            column_references = [
                                openapi_client.models.table_constraints_foreign_keys_inner_column_references_inner.TableConstraints_foreignKeys_inner_columnReferences_inner(
                                    referenced_column = '', 
                                    referencing_column = '', )
                                ], 
                            name = '', 
                            referenced_table = openapi_client.models.table_constraints_foreign_keys_inner_referenced_table.TableConstraints_foreignKeys_inner_referencedTable(
                                dataset_id = '', 
                                project_id = '', 
                                table_id = '', ), )
                        ], 
                    primary_key = openapi_client.models.table_constraints_primary_key.TableConstraints_primaryKey(
                        columns = [
                            ''
                            ], ), ),
                table_reference = openapi_client.models.table_reference.TableReference(
                    dataset_id = '', 
                    project_id = '', 
                    table_id = '', ),
                table_replication_info = openapi_client.models.table_replication_info.TableReplicationInfo(
                    replicated_source_last_refresh_time = '', 
                    replication_error = openapi_client.models.error_proto.ErrorProto(
                        debug_info = '', 
                        location = '', 
                        message = '', 
                        reason = '', ), 
                    replication_interval_ms = '', 
                    replication_status = 'REPLICATION_STATUS_UNSPECIFIED', 
                    source_table = openapi_client.models.table_reference.TableReference(
                        dataset_id = '', 
                        project_id = '', 
                        table_id = '', ), ),
                time_partitioning = openapi_client.models.time_partitioning.TimePartitioning(
                    expiration_ms = '', 
                    field = '', 
                    require_partition_filter = True, 
                    type = '', ),
                type = '',
                view = openapi_client.models.view_definition.ViewDefinition(
                    privacy_policy = openapi_client.models.privacy_policy.PrivacyPolicy(
                        aggregation_threshold_policy = openapi_client.models.aggregation_threshold_policy.AggregationThresholdPolicy(
                            privacy_unit_columns = [
                                ''
                                ], 
                            threshold = '', ), ), 
                    query = '', 
                    use_explicit_column_names = True, 
                    use_legacy_sql = True, 
                    user_defined_function_resources = [
                        openapi_client.models.user_defined_function_resource.UserDefinedFunctionResource(
                            inline_code = '', 
                            resource_uri = '', )
                        ], )
            )
        else:
            return Table(
        )
        """

    def testTable(self):
        """Test Table"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

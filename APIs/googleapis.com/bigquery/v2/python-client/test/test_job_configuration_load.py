# coding: utf-8

"""
    BigQuery API

    A data platform for customers to create, manage, share and query data.

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.job_configuration_load import JobConfigurationLoad

class TestJobConfigurationLoad(unittest.TestCase):
    """JobConfigurationLoad unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> JobConfigurationLoad:
        """Test JobConfigurationLoad
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `JobConfigurationLoad`
        """
        model = JobConfigurationLoad()
        if include_optional:
            return JobConfigurationLoad(
                allow_jagged_rows = True,
                allow_quoted_newlines = True,
                autodetect = True,
                clustering = openapi_client.models.clustering.Clustering(
                    fields = [
                        ''
                        ], ),
                connection_properties = [
                    openapi_client.models.connection_property.ConnectionProperty(
                        key = '', 
                        value = '', )
                    ],
                copy_files_only = True,
                create_disposition = '',
                create_session = True,
                decimal_target_types = [
                    'DECIMAL_TARGET_TYPE_UNSPECIFIED'
                    ],
                destination_encryption_configuration = openapi_client.models.encryption_configuration.EncryptionConfiguration(
                    kms_key_name = '', ),
                destination_table = openapi_client.models.table_reference.TableReference(
                    dataset_id = '', 
                    project_id = '', 
                    table_id = '', ),
                destination_table_properties = openapi_client.models.destination_table_properties.DestinationTableProperties(
                    description = '', 
                    expiration_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    friendly_name = '', 
                    labels = {
                        'key' : ''
                        }, ),
                encoding = '',
                field_delimiter = '',
                file_set_spec_type = 'FILE_SET_SPEC_TYPE_FILE_SYSTEM_MATCH',
                hive_partitioning_options = openapi_client.models.hive_partitioning_options.HivePartitioningOptions(
                    fields = [
                        ''
                        ], 
                    mode = '', 
                    require_partition_filter = True, 
                    source_uri_prefix = '', ),
                ignore_unknown_values = True,
                json_extension = 'JSON_EXTENSION_UNSPECIFIED',
                max_bad_records = 56,
                null_marker = '',
                parquet_options = openapi_client.models.parquet_options.ParquetOptions(
                    enable_list_inference = True, 
                    enum_as_string = True, ),
                preserve_ascii_control_characters = True,
                projection_fields = [
                    ''
                    ],
                quote = '"',
                range_partitioning = openapi_client.models.range_partitioning.RangePartitioning(
                    field = '', 
                    range = openapi_client.models.range_partitioning_range.RangePartitioning_range(
                        end = '', 
                        interval = '', 
                        start = '', ), ),
                reference_file_schema_uri = '',
                var_schema = openapi_client.models.table_schema.TableSchema(
                    fields = [
                        openapi_client.models.table_field_schema.TableFieldSchema(
                            categories = openapi_client.models.table_field_schema_categories.TableFieldSchema_categories(
                                names = [
                                    ''
                                    ], ), 
                            collation = '', 
                            default_value_expression = '', 
                            description = '', 
                            max_length = '', 
                            mode = '', 
                            name = '', 
                            policy_tags = openapi_client.models.table_field_schema_policy_tags.TableFieldSchema_policyTags(), 
                            precision = '', 
                            range_element_type = openapi_client.models.table_field_schema_range_element_type.TableFieldSchema_rangeElementType(
                                type = '', ), 
                            rounding_mode = 'ROUNDING_MODE_UNSPECIFIED', 
                            scale = '', 
                            type = '', )
                        ], ),
                schema_inline = '',
                schema_inline_format = '',
                schema_update_options = [
                    ''
                    ],
                skip_leading_rows = 56,
                source_format = '',
                source_uris = [
                    ''
                    ],
                time_partitioning = openapi_client.models.time_partitioning.TimePartitioning(
                    expiration_ms = '', 
                    field = '', 
                    require_partition_filter = True, 
                    type = '', ),
                use_avro_logical_types = True,
                write_disposition = ''
            )
        else:
            return JobConfigurationLoad(
        )
        """

    def testJobConfigurationLoad(self):
        """Test JobConfigurationLoad"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

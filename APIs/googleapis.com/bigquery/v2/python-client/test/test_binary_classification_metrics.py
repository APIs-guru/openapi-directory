# coding: utf-8

"""
    BigQuery API

    A data platform for customers to create, manage, share and query data.

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.binary_classification_metrics import BinaryClassificationMetrics

class TestBinaryClassificationMetrics(unittest.TestCase):
    """BinaryClassificationMetrics unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> BinaryClassificationMetrics:
        """Test BinaryClassificationMetrics
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `BinaryClassificationMetrics`
        """
        model = BinaryClassificationMetrics()
        if include_optional:
            return BinaryClassificationMetrics(
                aggregate_classification_metrics = openapi_client.models.aggregate_classification_metrics.AggregateClassificationMetrics(
                    accuracy = 1.337, 
                    f1_score = 1.337, 
                    log_loss = 1.337, 
                    precision = 1.337, 
                    recall = 1.337, 
                    roc_auc = 1.337, 
                    threshold = 1.337, ),
                binary_confusion_matrix_list = [
                    openapi_client.models.binary_confusion_matrix.BinaryConfusionMatrix(
                        accuracy = 1.337, 
                        f1_score = 1.337, 
                        false_negatives = '', 
                        false_positives = '', 
                        positive_class_threshold = 1.337, 
                        precision = 1.337, 
                        recall = 1.337, 
                        true_negatives = '', 
                        true_positives = '', )
                    ],
                negative_label = '',
                positive_label = ''
            )
        else:
            return BinaryClassificationMetrics(
        )
        """

    def testBinaryClassificationMetrics(self):
        """Test BinaryClassificationMetrics"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

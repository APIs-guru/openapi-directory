# coding: utf-8

"""
    BigQuery API

    A data platform for customers to create, manage, share and query data.

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.performance_insights import PerformanceInsights

class TestPerformanceInsights(unittest.TestCase):
    """PerformanceInsights unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> PerformanceInsights:
        """Test PerformanceInsights
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `PerformanceInsights`
        """
        model = PerformanceInsights()
        if include_optional:
            return PerformanceInsights(
                avg_previous_execution_ms = '',
                stage_performance_change_insights = [
                    openapi_client.models.stage_performance_change_insight.StagePerformanceChangeInsight(
                        input_data_change = openapi_client.models.input_data_change.InputDataChange(
                            records_read_diff_percentage = 1.337, ), 
                        stage_id = '', )
                    ],
                stage_performance_standalone_insights = [
                    openapi_client.models.stage_performance_standalone_insight.StagePerformanceStandaloneInsight(
                        bi_engine_reasons = [
                            openapi_client.models.bi_engine_reason.BiEngineReason(
                                code = 'CODE_UNSPECIFIED', 
                                message = '', )
                            ], 
                        high_cardinality_joins = [
                            openapi_client.models.high_cardinality_join.HighCardinalityJoin(
                                left_rows = '', 
                                output_rows = '', 
                                right_rows = '', 
                                step_index = 56, )
                            ], 
                        insufficient_shuffle_quota = True, 
                        slot_contention = True, 
                        stage_id = '', )
                    ]
            )
        else:
            return PerformanceInsights(
        )
        """

    def testPerformanceInsights(self):
        """Test PerformanceInsights"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

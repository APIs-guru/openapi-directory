# coding: utf-8

"""
    BigQuery API

    A data platform for customers to create, manage, share and query data.

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.hparam_search_spaces import HparamSearchSpaces

class TestHparamSearchSpaces(unittest.TestCase):
    """HparamSearchSpaces unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> HparamSearchSpaces:
        """Test HparamSearchSpaces
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `HparamSearchSpaces`
        """
        model = HparamSearchSpaces()
        if include_optional:
            return HparamSearchSpaces(
                activation_fn = openapi_client.models.string_hparam_search_space.StringHparamSearchSpace(
                    candidates = [
                        ''
                        ], ),
                batch_size = openapi_client.models.int_hparam_search_space.IntHparamSearchSpace(
                    candidates = openapi_client.models.int_candidates.IntCandidates(), 
                    range = openapi_client.models.int_range.IntRange(
                        max = '', 
                        min = '', ), ),
                booster_type = openapi_client.models.string_hparam_search_space.StringHparamSearchSpace(
                    candidates = [
                        ''
                        ], ),
                colsample_bylevel = openapi_client.models.double_hparam_search_space.DoubleHparamSearchSpace(
                    candidates = openapi_client.models.double_candidates.DoubleCandidates(), 
                    range = openapi_client.models.double_range.DoubleRange(
                        max = 1.337, 
                        min = 1.337, ), ),
                colsample_bynode = openapi_client.models.double_hparam_search_space.DoubleHparamSearchSpace(
                    candidates = openapi_client.models.double_candidates.DoubleCandidates(), 
                    range = openapi_client.models.double_range.DoubleRange(
                        max = 1.337, 
                        min = 1.337, ), ),
                colsample_bytree = openapi_client.models.double_hparam_search_space.DoubleHparamSearchSpace(
                    candidates = openapi_client.models.double_candidates.DoubleCandidates(), 
                    range = openapi_client.models.double_range.DoubleRange(
                        max = 1.337, 
                        min = 1.337, ), ),
                dart_normalize_type = openapi_client.models.string_hparam_search_space.StringHparamSearchSpace(
                    candidates = [
                        ''
                        ], ),
                dropout = openapi_client.models.double_hparam_search_space.DoubleHparamSearchSpace(
                    candidates = openapi_client.models.double_candidates.DoubleCandidates(), 
                    range = openapi_client.models.double_range.DoubleRange(
                        max = 1.337, 
                        min = 1.337, ), ),
                hidden_units = openapi_client.models.int_array_hparam_search_space.IntArrayHparamSearchSpace(
                    candidates = [
                        openapi_client.models.int_array.IntArray(
                            elements = [
                                ''
                                ], )
                        ], ),
                l1_reg = openapi_client.models.double_hparam_search_space.DoubleHparamSearchSpace(
                    candidates = openapi_client.models.double_candidates.DoubleCandidates(), 
                    range = openapi_client.models.double_range.DoubleRange(
                        max = 1.337, 
                        min = 1.337, ), ),
                l2_reg = openapi_client.models.double_hparam_search_space.DoubleHparamSearchSpace(
                    candidates = openapi_client.models.double_candidates.DoubleCandidates(), 
                    range = openapi_client.models.double_range.DoubleRange(
                        max = 1.337, 
                        min = 1.337, ), ),
                learn_rate = openapi_client.models.double_hparam_search_space.DoubleHparamSearchSpace(
                    candidates = openapi_client.models.double_candidates.DoubleCandidates(), 
                    range = openapi_client.models.double_range.DoubleRange(
                        max = 1.337, 
                        min = 1.337, ), ),
                max_tree_depth = openapi_client.models.int_hparam_search_space.IntHparamSearchSpace(
                    candidates = openapi_client.models.int_candidates.IntCandidates(), 
                    range = openapi_client.models.int_range.IntRange(
                        max = '', 
                        min = '', ), ),
                min_split_loss = openapi_client.models.double_hparam_search_space.DoubleHparamSearchSpace(
                    candidates = openapi_client.models.double_candidates.DoubleCandidates(), 
                    range = openapi_client.models.double_range.DoubleRange(
                        max = 1.337, 
                        min = 1.337, ), ),
                min_tree_child_weight = openapi_client.models.int_hparam_search_space.IntHparamSearchSpace(
                    candidates = openapi_client.models.int_candidates.IntCandidates(), 
                    range = openapi_client.models.int_range.IntRange(
                        max = '', 
                        min = '', ), ),
                num_clusters = openapi_client.models.int_hparam_search_space.IntHparamSearchSpace(
                    candidates = openapi_client.models.int_candidates.IntCandidates(), 
                    range = openapi_client.models.int_range.IntRange(
                        max = '', 
                        min = '', ), ),
                num_factors = openapi_client.models.int_hparam_search_space.IntHparamSearchSpace(
                    candidates = openapi_client.models.int_candidates.IntCandidates(), 
                    range = openapi_client.models.int_range.IntRange(
                        max = '', 
                        min = '', ), ),
                num_parallel_tree = openapi_client.models.int_hparam_search_space.IntHparamSearchSpace(
                    candidates = openapi_client.models.int_candidates.IntCandidates(), 
                    range = openapi_client.models.int_range.IntRange(
                        max = '', 
                        min = '', ), ),
                optimizer = openapi_client.models.string_hparam_search_space.StringHparamSearchSpace(
                    candidates = [
                        ''
                        ], ),
                subsample = openapi_client.models.double_hparam_search_space.DoubleHparamSearchSpace(
                    candidates = openapi_client.models.double_candidates.DoubleCandidates(), 
                    range = openapi_client.models.double_range.DoubleRange(
                        max = 1.337, 
                        min = 1.337, ), ),
                tree_method = openapi_client.models.string_hparam_search_space.StringHparamSearchSpace(
                    candidates = [
                        ''
                        ], ),
                wals_alpha = openapi_client.models.double_hparam_search_space.DoubleHparamSearchSpace(
                    candidates = openapi_client.models.double_candidates.DoubleCandidates(), 
                    range = openapi_client.models.double_range.DoubleRange(
                        max = 1.337, 
                        min = 1.337, ), )
            )
        else:
            return HparamSearchSpaces(
        )
        """

    def testHparamSearchSpaces(self):
        """Test HparamSearchSpaces"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

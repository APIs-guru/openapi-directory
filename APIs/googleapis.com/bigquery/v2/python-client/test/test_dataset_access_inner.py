# coding: utf-8

"""
    BigQuery API

    A data platform for customers to create, manage, share and query data.

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.dataset_access_inner import DatasetAccessInner

class TestDatasetAccessInner(unittest.TestCase):
    """DatasetAccessInner unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> DatasetAccessInner:
        """Test DatasetAccessInner
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `DatasetAccessInner`
        """
        model = DatasetAccessInner()
        if include_optional:
            return DatasetAccessInner(
                dataset = openapi_client.models.dataset_access_entry.DatasetAccessEntry(
                    target_types = [
                        'TARGET_TYPE_UNSPECIFIED'
                        ], ),
                domain = '',
                group_by_email = '',
                iam_member = '',
                role = '',
                routine = openapi_client.models.routine_reference.RoutineReference(
                    dataset_id = '', 
                    project_id = '', 
                    routine_id = '', ),
                special_group = '',
                user_by_email = '',
                view = openapi_client.models.table_reference.TableReference(
                    dataset_id = '', 
                    project_id = '', 
                    table_id = '', )
            )
        else:
            return DatasetAccessInner(
        )
        """

    def testDatasetAccessInner(self):
        """Test DatasetAccessInner"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

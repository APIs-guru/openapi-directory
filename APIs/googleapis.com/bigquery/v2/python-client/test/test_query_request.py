# coding: utf-8

"""
    BigQuery API

    A data platform for customers to create, manage, share and query data.

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.query_request import QueryRequest

class TestQueryRequest(unittest.TestCase):
    """QueryRequest unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> QueryRequest:
        """Test QueryRequest
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `QueryRequest`
        """
        model = QueryRequest()
        if include_optional:
            return QueryRequest(
                connection_properties = [
                    openapi_client.models.connection_property.ConnectionProperty(
                        key = '', 
                        value = '', )
                    ],
                continuous = True,
                create_session = True,
                default_dataset = openapi_client.models.dataset_reference.DatasetReference(
                    dataset_id = '', 
                    project_id = '', ),
                dry_run = True,
                format_options = openapi_client.models.data_format_options.DataFormatOptions(
                    use_int64_timestamp = True, ),
                job_creation_mode = 'JOB_CREATION_MODE_UNSPECIFIED',
                kind = 'bigquery#queryRequest',
                labels = {
                    'key' : ''
                    },
                location = '',
                max_results = 56,
                maximum_bytes_billed = '',
                parameter_mode = '',
                preserve_nulls = True,
                query = '',
                query_parameters = [
                    openapi_client.models.query_parameter.QueryParameter(
                        name = '', 
                        parameter_type = openapi_client.models.query_parameter_type.QueryParameterType(
                            array_type = openapi_client.models.query_parameter_type.QueryParameterType(
                                range_element_type = , 
                                struct_types = [
                                    openapi_client.models.query_parameter_type_struct_types_inner.QueryParameterType_structTypes_inner(
                                        description = '', 
                                        name = '', 
                                        type = , )
                                    ], 
                                type = '', ), 
                            range_element_type = , 
                            struct_types = [
                                openapi_client.models.query_parameter_type_struct_types_inner.QueryParameterType_structTypes_inner(
                                    description = '', 
                                    name = '', )
                                ], 
                            type = '', ), 
                        parameter_value = openapi_client.models.query_parameter_value.QueryParameterValue(
                            array_values = [
                                openapi_client.models.query_parameter_value.QueryParameterValue(
                                    range_value = openapi_client.models.range_value.RangeValue(
                                        end = , 
                                        start = , ), 
                                    struct_values = {
                                        'key' : 
                                        }, 
                                    value = '', )
                                ], 
                            range_value = openapi_client.models.range_value.RangeValue(), 
                            struct_values = {
                                'key' : 
                                }, 
                            value = '', ), )
                    ],
                request_id = '',
                timeout_ms = 56,
                use_legacy_sql = True,
                use_query_cache = True
            )
        else:
            return QueryRequest(
        )
        """

    def testQueryRequest(self):
        """Test QueryRequest"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

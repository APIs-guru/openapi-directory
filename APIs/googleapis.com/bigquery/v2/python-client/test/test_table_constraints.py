# coding: utf-8

"""
    BigQuery API

    A data platform for customers to create, manage, share and query data.

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.table_constraints import TableConstraints

class TestTableConstraints(unittest.TestCase):
    """TableConstraints unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> TableConstraints:
        """Test TableConstraints
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `TableConstraints`
        """
        model = TableConstraints()
        if include_optional:
            return TableConstraints(
                foreign_keys = [
                    openapi_client.models.table_constraints_foreign_keys_inner.TableConstraints_foreignKeys_inner(
                        column_references = [
                            openapi_client.models.table_constraints_foreign_keys_inner_column_references_inner.TableConstraints_foreignKeys_inner_columnReferences_inner(
                                referenced_column = '', 
                                referencing_column = '', )
                            ], 
                        name = '', 
                        referenced_table = openapi_client.models.table_constraints_foreign_keys_inner_referenced_table.TableConstraints_foreignKeys_inner_referencedTable(
                            dataset_id = '', 
                            project_id = '', 
                            table_id = '', ), )
                    ],
                primary_key = openapi_client.models.table_constraints_primary_key.TableConstraints_primaryKey(
                    columns = [
                        ''
                        ], )
            )
        else:
            return TableConstraints(
        )
        """

    def testTableConstraints(self):
        """Test TableConstraints"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

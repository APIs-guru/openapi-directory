# coding: utf-8

"""
    BigQuery API

    A data platform for customers to create, manage, share and query data.

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.job_configuration_table_copy import JobConfigurationTableCopy

class TestJobConfigurationTableCopy(unittest.TestCase):
    """JobConfigurationTableCopy unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> JobConfigurationTableCopy:
        """Test JobConfigurationTableCopy
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `JobConfigurationTableCopy`
        """
        model = JobConfigurationTableCopy()
        if include_optional:
            return JobConfigurationTableCopy(
                create_disposition = '',
                destination_encryption_configuration = openapi_client.models.encryption_configuration.EncryptionConfiguration(
                    kms_key_name = '', ),
                destination_expiration_time = '',
                destination_table = openapi_client.models.table_reference.TableReference(
                    dataset_id = '', 
                    project_id = '', 
                    table_id = '', ),
                operation_type = 'OPERATION_TYPE_UNSPECIFIED',
                source_table = openapi_client.models.table_reference.TableReference(
                    dataset_id = '', 
                    project_id = '', 
                    table_id = '', ),
                source_tables = [
                    openapi_client.models.table_reference.TableReference(
                        dataset_id = '', 
                        project_id = '', 
                        table_id = '', )
                    ],
                write_disposition = ''
            )
        else:
            return JobConfigurationTableCopy(
        )
        """

    def testJobConfigurationTableCopy(self):
        """Test JobConfigurationTableCopy"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

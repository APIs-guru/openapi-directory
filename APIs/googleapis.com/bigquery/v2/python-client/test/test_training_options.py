# coding: utf-8

"""
    BigQuery API

    A data platform for customers to create, manage, share and query data.

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.training_options import TrainingOptions

class TestTrainingOptions(unittest.TestCase):
    """TrainingOptions unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> TrainingOptions:
        """Test TrainingOptions
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `TrainingOptions`
        """
        model = TrainingOptions()
        if include_optional:
            return TrainingOptions(
                activation_fn = '',
                adjust_step_changes = True,
                approx_global_feature_contrib = True,
                auto_arima = True,
                auto_arima_max_order = '',
                auto_arima_min_order = '',
                auto_class_weights = True,
                batch_size = '',
                booster_type = 'BOOSTER_TYPE_UNSPECIFIED',
                budget_hours = 1.337,
                calculate_p_values = True,
                category_encoding_method = 'ENCODING_METHOD_UNSPECIFIED',
                clean_spikes_and_dips = True,
                color_space = 'COLOR_SPACE_UNSPECIFIED',
                colsample_bylevel = 1.337,
                colsample_bynode = 1.337,
                colsample_bytree = 1.337,
                dart_normalize_type = 'DART_NORMALIZE_TYPE_UNSPECIFIED',
                data_frequency = 'DATA_FREQUENCY_UNSPECIFIED',
                data_split_column = '',
                data_split_eval_fraction = 1.337,
                data_split_method = 'DATA_SPLIT_METHOD_UNSPECIFIED',
                decompose_time_series = True,
                distance_type = 'DISTANCE_TYPE_UNSPECIFIED',
                dropout = 1.337,
                early_stop = True,
                enable_global_explain = True,
                feedback_type = 'FEEDBACK_TYPE_UNSPECIFIED',
                fit_intercept = True,
                hidden_units = [
                    ''
                    ],
                holiday_region = 'HOLIDAY_REGION_UNSPECIFIED',
                holiday_regions = [
                    'HOLIDAY_REGION_UNSPECIFIED'
                    ],
                horizon = '',
                hparam_tuning_objectives = [
                    'HPARAM_TUNING_OBJECTIVE_UNSPECIFIED'
                    ],
                include_drift = True,
                initial_learn_rate = 1.337,
                input_label_columns = [
                    ''
                    ],
                instance_weight_column = '',
                integrated_gradients_num_steps = '',
                item_column = '',
                kmeans_initialization_column = '',
                kmeans_initialization_method = 'KMEANS_INITIALIZATION_METHOD_UNSPECIFIED',
                l1_reg_activation = 1.337,
                l1_regularization = 1.337,
                l2_regularization = 1.337,
                label_class_weights = {
                    'key' : 1.337
                    },
                learn_rate = 1.337,
                learn_rate_strategy = 'LEARN_RATE_STRATEGY_UNSPECIFIED',
                loss_type = 'LOSS_TYPE_UNSPECIFIED',
                max_iterations = '',
                max_parallel_trials = '',
                max_time_series_length = '',
                max_tree_depth = '',
                min_relative_progress = 1.337,
                min_split_loss = 1.337,
                min_time_series_length = '',
                min_tree_child_weight = '',
                model_registry = 'MODEL_REGISTRY_UNSPECIFIED',
                model_uri = '',
                non_seasonal_order = openapi_client.models.arima_order.ArimaOrder(
                    d = '', 
                    p = '', 
                    q = '', ),
                num_clusters = '',
                num_factors = '',
                num_parallel_tree = '',
                num_principal_components = '',
                num_trials = '',
                optimization_strategy = 'OPTIMIZATION_STRATEGY_UNSPECIFIED',
                optimizer = '',
                pca_explained_variance_ratio = 1.337,
                pca_solver = 'UNSPECIFIED',
                sampled_shapley_num_paths = '',
                scale_features = True,
                standardize_features = True,
                subsample = 1.337,
                tf_version = '',
                time_series_data_column = '',
                time_series_id_column = '',
                time_series_id_columns = [
                    ''
                    ],
                time_series_length_fraction = 1.337,
                time_series_timestamp_column = '',
                tree_method = 'TREE_METHOD_UNSPECIFIED',
                trend_smoothing_window_size = '',
                user_column = '',
                vertex_ai_model_version_aliases = [
                    ''
                    ],
                wals_alpha = 1.337,
                warm_start = True,
                xgboost_version = ''
            )
        else:
            return TrainingOptions(
        )
        """

    def testTrainingOptions(self):
        """Test TrainingOptions"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

# coding: utf-8

"""
    Google Play Game Management

    The Google Play Game Management API allows developers to manage resources from the Google Play Game service.

    The version of the OpenAPI document: v1management
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.games_player_experience_info_resource import GamesPlayerExperienceInfoResource
from openapi_client.models.player_name import PlayerName
from openapi_client.models.profile_settings import ProfileSettings
from typing import Optional, Set
from typing_extensions import Self

class Player(BaseModel):
    """
    A Player resource.
    """ # noqa: E501
    avatar_image_url: Optional[StrictStr] = Field(default=None, description="The base URL for the image that represents the player.", alias="avatarImageUrl")
    banner_url_landscape: Optional[StrictStr] = Field(default=None, description="The url to the landscape mode player banner image.", alias="bannerUrlLandscape")
    banner_url_portrait: Optional[StrictStr] = Field(default=None, description="The url to the portrait mode player banner image.", alias="bannerUrlPortrait")
    display_name: Optional[StrictStr] = Field(default=None, description="The name to display for the player.", alias="displayName")
    experience_info: Optional[GamesPlayerExperienceInfoResource] = Field(default=None, alias="experienceInfo")
    kind: Optional[StrictStr] = Field(default=None, description="Uniquely identifies the type of this resource. Value is always the fixed string `gamesManagement#player`.")
    name: Optional[PlayerName] = None
    original_player_id: Optional[StrictStr] = Field(default=None, description="The player ID that was used for this player the first time they signed into the game in question. This is only populated for calls to player.get for the requesting player, only if the player ID has subsequently changed, and only to clients that support remapping player IDs.", alias="originalPlayerId")
    player_id: Optional[StrictStr] = Field(default=None, description="The ID of the player.", alias="playerId")
    profile_settings: Optional[ProfileSettings] = Field(default=None, alias="profileSettings")
    title: Optional[StrictStr] = Field(default=None, description="The player's title rewarded for their game activities.")
    __properties: ClassVar[List[str]] = ["avatarImageUrl", "bannerUrlLandscape", "bannerUrlPortrait", "displayName", "experienceInfo", "kind", "name", "originalPlayerId", "playerId", "profileSettings", "title"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Player from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of experience_info
        if self.experience_info:
            _dict['experienceInfo'] = self.experience_info.to_dict()
        # override the default output from pydantic by calling `to_dict()` of name
        if self.name:
            _dict['name'] = self.name.to_dict()
        # override the default output from pydantic by calling `to_dict()` of profile_settings
        if self.profile_settings:
            _dict['profileSettings'] = self.profile_settings.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Player from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "avatarImageUrl": obj.get("avatarImageUrl"),
            "bannerUrlLandscape": obj.get("bannerUrlLandscape"),
            "bannerUrlPortrait": obj.get("bannerUrlPortrait"),
            "displayName": obj.get("displayName"),
            "experienceInfo": GamesPlayerExperienceInfoResource.from_dict(obj["experienceInfo"]) if obj.get("experienceInfo") is not None else None,
            "kind": obj.get("kind"),
            "name": PlayerName.from_dict(obj["name"]) if obj.get("name") is not None else None,
            "originalPlayerId": obj.get("originalPlayerId"),
            "playerId": obj.get("playerId"),
            "profileSettings": ProfileSettings.from_dict(obj["profileSettings"]) if obj.get("profileSettings") is not None else None,
            "title": obj.get("title")
        })
        return _obj



# coding: utf-8

"""
    App Engine Admin API

    Provisions and manages developers' App Engine applications.

    The version of the OpenAPI document: v1beta
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.version import Version

class TestVersion(unittest.TestCase):
    """Version unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> Version:
        """Test Version
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `Version`
        """
        model = Version()
        if include_optional:
            return Version(
                api_config = openapi_client.models.api_config_handler.ApiConfigHandler(
                    auth_fail_action = 'AUTH_FAIL_ACTION_UNSPECIFIED', 
                    login = 'LOGIN_UNSPECIFIED', 
                    script = '', 
                    security_level = 'SECURE_UNSPECIFIED', 
                    url = '', ),
                app_engine_apis = True,
                automatic_scaling = openapi_client.models.automatic_scaling.AutomaticScaling(
                    cool_down_period = '', 
                    cpu_utilization = openapi_client.models.cpu_utilization.CpuUtilization(
                        aggregation_window_length = '', 
                        target_utilization = 1.337, ), 
                    custom_metrics = [
                        openapi_client.models.custom_metric.CustomMetric(
                            filter = '', 
                            metric_name = '', 
                            single_instance_assignment = 1.337, 
                            target_type = '', 
                            target_utilization = 1.337, )
                        ], 
                    disk_utilization = openapi_client.models.disk_utilization.DiskUtilization(
                        target_read_bytes_per_second = 56, 
                        target_read_ops_per_second = 56, 
                        target_write_bytes_per_second = 56, 
                        target_write_ops_per_second = 56, ), 
                    max_concurrent_requests = 56, 
                    max_idle_instances = 56, 
                    max_pending_latency = '', 
                    max_total_instances = 56, 
                    min_idle_instances = 56, 
                    min_pending_latency = '', 
                    min_total_instances = 56, 
                    network_utilization = openapi_client.models.network_utilization.NetworkUtilization(
                        target_received_bytes_per_second = 56, 
                        target_received_packets_per_second = 56, 
                        target_sent_bytes_per_second = 56, 
                        target_sent_packets_per_second = 56, ), 
                    request_utilization = openapi_client.models.request_utilization.RequestUtilization(
                        target_concurrent_requests = 56, 
                        target_request_count_per_second = 56, ), 
                    standard_scheduler_settings = openapi_client.models.standard_scheduler_settings.StandardSchedulerSettings(
                        max_instances = 56, 
                        min_instances = 56, 
                        target_cpu_utilization = 1.337, 
                        target_throughput_utilization = 1.337, ), ),
                basic_scaling = openapi_client.models.basic_scaling.BasicScaling(
                    idle_timeout = '', 
                    max_instances = 56, ),
                beta_settings = {
                    'key' : ''
                    },
                build_env_variables = {
                    'key' : ''
                    },
                create_time = '',
                created_by = '',
                default_expiration = '',
                deployment = openapi_client.models.deployment.Deployment(
                    build = openapi_client.models.build_info.BuildInfo(
                        cloud_build_id = '', ), 
                    cloud_build_options = openapi_client.models.cloud_build_options.CloudBuildOptions(
                        app_yaml_path = '', 
                        cloud_build_timeout = '', ), 
                    container = openapi_client.models.container_info.ContainerInfo(
                        image = '', ), 
                    files = {
                        'key' : openapi_client.models.file_info.FileInfo(
                            mime_type = '', 
                            sha1_sum = '', 
                            source_url = '', )
                        }, 
                    zip = openapi_client.models.zip_info.ZipInfo(
                        files_count = 56, 
                        source_url = '', ), ),
                disk_usage_bytes = '',
                endpoints_api_service = openapi_client.models.endpoints_api_service.EndpointsApiService(
                    config_id = '', 
                    disable_trace_sampling = True, 
                    name = '', 
                    rollout_strategy = 'UNSPECIFIED_ROLLOUT_STRATEGY', ),
                entrypoint = openapi_client.models.entrypoint.Entrypoint(
                    shell = '', ),
                env = '',
                env_variables = {
                    'key' : ''
                    },
                error_handlers = [
                    openapi_client.models.error_handler.ErrorHandler(
                        error_code = 'ERROR_CODE_UNSPECIFIED', 
                        mime_type = '', 
                        static_file = '', )
                    ],
                flexible_runtime_settings = openapi_client.models.flexible_runtime_settings.FlexibleRuntimeSettings(
                    operating_system = '', 
                    runtime_version = '', ),
                generated_customer_metadata = {
                    'key' : null
                    },
                handlers = [
                    openapi_client.models.url_map.UrlMap(
                        api_endpoint = openapi_client.models.api_endpoint_handler.ApiEndpointHandler(
                            script_path = '', ), 
                        auth_fail_action = 'AUTH_FAIL_ACTION_UNSPECIFIED', 
                        login = 'LOGIN_UNSPECIFIED', 
                        redirect_http_response_code = 'REDIRECT_HTTP_RESPONSE_CODE_UNSPECIFIED', 
                        script = openapi_client.models.script_handler.ScriptHandler(
                            script_path = '', ), 
                        security_level = 'SECURE_UNSPECIFIED', 
                        static_files = openapi_client.models.static_files_handler.StaticFilesHandler(
                            application_readable = True, 
                            expiration = '', 
                            http_headers = {
                                'key' : ''
                                }, 
                            mime_type = '', 
                            path = '', 
                            require_matching_file = True, 
                            upload_path_regex = '', ), 
                        url_regex = '', )
                    ],
                health_check = openapi_client.models.health_check.HealthCheck(
                    check_interval = '', 
                    disable_health_check = True, 
                    healthy_threshold = 56, 
                    host = '', 
                    restart_threshold = 56, 
                    timeout = '', 
                    unhealthy_threshold = 56, ),
                id = '',
                inbound_services = [
                    'INBOUND_SERVICE_UNSPECIFIED'
                    ],
                instance_class = '',
                libraries = [
                    openapi_client.models.library.Library(
                        name = '', 
                        version = '', )
                    ],
                liveness_check = openapi_client.models.liveness_check.LivenessCheck(
                    check_interval = '', 
                    failure_threshold = 56, 
                    host = '', 
                    initial_delay = '', 
                    path = '', 
                    success_threshold = 56, 
                    timeout = '', ),
                manual_scaling = openapi_client.models.manual_scaling.ManualScaling(
                    instances = 56, ),
                name = '',
                network = openapi_client.models.network.Network(
                    forwarded_ports = [
                        ''
                        ], 
                    instance_ip_mode = 'INSTANCE_IP_MODE_UNSPECIFIED', 
                    instance_tag = '', 
                    name = '', 
                    session_affinity = True, 
                    subnetwork_name = '', ),
                nobuild_files_regex = '',
                readiness_check = openapi_client.models.readiness_check.ReadinessCheck(
                    app_start_timeout = '', 
                    check_interval = '', 
                    failure_threshold = 56, 
                    host = '', 
                    path = '', 
                    success_threshold = 56, 
                    timeout = '', ),
                resources = openapi_client.models.resources.Resources(
                    cpu = 1.337, 
                    disk_gb = 1.337, 
                    kms_key_reference = '', 
                    memory_gb = 1.337, 
                    volumes = [
                        openapi_client.models.volume.Volume(
                            name = '', 
                            size_gb = 1.337, 
                            volume_type = '', )
                        ], ),
                runtime = '',
                runtime_api_version = '',
                runtime_channel = '',
                runtime_main_executable_path = '',
                service_account = '',
                serving_status = 'SERVING_STATUS_UNSPECIFIED',
                threadsafe = True,
                version_url = '',
                vm = True,
                vpc_access_connector = openapi_client.models.vpc_access_connector.VpcAccessConnector(
                    egress_setting = 'EGRESS_SETTING_UNSPECIFIED', 
                    name = '', ),
                zones = [
                    ''
                    ]
            )
        else:
            return Version(
        )
        """

    def testVersion(self):
        """Test Version"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

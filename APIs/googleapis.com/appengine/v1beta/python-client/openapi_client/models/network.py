# coding: utf-8

"""
    App Engine Admin API

    Provisions and manages developers' App Engine applications.

    The version of the OpenAPI document: v1beta
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class Network(BaseModel):
    """
    Extra network settings. Only applicable in the App Engine flexible environment.
    """ # noqa: E501
    forwarded_ports: Optional[List[StrictStr]] = Field(default=None, description="List of ports, or port pairs, to forward from the virtual machine to the application container. Only applicable in the App Engine flexible environment.", alias="forwardedPorts")
    instance_ip_mode: Optional[StrictStr] = Field(default=None, description="The IP mode for instances. Only applicable in the App Engine flexible environment.", alias="instanceIpMode")
    instance_tag: Optional[StrictStr] = Field(default=None, description="Tag to apply to the instance during creation. Only applicable in the App Engine flexible environment.", alias="instanceTag")
    name: Optional[StrictStr] = Field(default=None, description="Google Compute Engine network where the virtual machines are created. Specify the short name, not the resource path.Defaults to default.")
    session_affinity: Optional[StrictBool] = Field(default=None, description="Enable session affinity. Only applicable in the App Engine flexible environment.", alias="sessionAffinity")
    subnetwork_name: Optional[StrictStr] = Field(default=None, description="Google Cloud Platform sub-network where the virtual machines are created. Specify the short name, not the resource path.If a subnetwork name is specified, a network name will also be required unless it is for the default network. If the network that the instance is being created in is a Legacy network, then the IP address is allocated from the IPv4Range. If the network that the instance is being created in is an auto Subnet Mode Network, then only network name should be specified (not the subnetwork_name) and the IP address is created from the IPCidrRange of the subnetwork that exists in that zone for that network. If the network that the instance is being created in is a custom Subnet Mode Network, then the subnetwork_name must be specified and the IP address is created from the IPCidrRange of the subnetwork.If specified, the subnetwork must exist in the same region as the App Engine flexible environment application.", alias="subnetworkName")
    __properties: ClassVar[List[str]] = ["forwardedPorts", "instanceIpMode", "instanceTag", "name", "sessionAffinity", "subnetworkName"]

    @field_validator('instance_ip_mode')
    def instance_ip_mode_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['INSTANCE_IP_MODE_UNSPECIFIED', 'EXTERNAL', 'INTERNAL']):
            raise ValueError("must be one of enum values ('INSTANCE_IP_MODE_UNSPECIFIED', 'EXTERNAL', 'INTERNAL')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Network from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Network from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "forwardedPorts": obj.get("forwardedPorts"),
            "instanceIpMode": obj.get("instanceIpMode"),
            "instanceTag": obj.get("instanceTag"),
            "name": obj.get("name"),
            "sessionAffinity": obj.get("sessionAffinity"),
            "subnetworkName": obj.get("subnetworkName")
        })
        return _obj



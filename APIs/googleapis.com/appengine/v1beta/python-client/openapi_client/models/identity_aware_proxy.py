# coding: utf-8

"""
    App Engine Admin API

    Provisions and manages developers' App Engine applications.

    The version of the OpenAPI document: v1beta
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class IdentityAwareProxy(BaseModel):
    """
    Identity-Aware Proxy
    """ # noqa: E501
    enabled: Optional[StrictBool] = Field(default=None, description="Whether the serving infrastructure will authenticate and authorize all incoming requests.If true, the oauth2_client_id and oauth2_client_secret fields must be non-empty.")
    oauth2_client_id: Optional[StrictStr] = Field(default=None, description="OAuth2 client ID to use for the authentication flow.", alias="oauth2ClientId")
    oauth2_client_secret: Optional[StrictStr] = Field(default=None, description="OAuth2 client secret to use for the authentication flow.For security reasons, this value cannot be retrieved via the API. Instead, the SHA-256 hash of the value is returned in the oauth2_client_secret_sha256 field.@InputOnly", alias="oauth2ClientSecret")
    oauth2_client_secret_sha256: Optional[StrictStr] = Field(default=None, description="Output only. Hex-encoded SHA-256 hash of the client secret.@OutputOnly", alias="oauth2ClientSecretSha256")
    __properties: ClassVar[List[str]] = ["enabled", "oauth2ClientId", "oauth2ClientSecret", "oauth2ClientSecretSha256"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of IdentityAwareProxy from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "oauth2_client_secret_sha256",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of IdentityAwareProxy from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "enabled": obj.get("enabled"),
            "oauth2ClientId": obj.get("oauth2ClientId"),
            "oauth2ClientSecret": obj.get("oauth2ClientSecret"),
            "oauth2ClientSecretSha256": obj.get("oauth2ClientSecretSha256")
        })
        return _obj



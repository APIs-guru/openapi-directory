# coding: utf-8

"""
    App Engine Admin API

    Provisions and manages developers' App Engine applications.

    The version of the OpenAPI document: v1beta
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class Instance(BaseModel):
    """
    An Instance resource is the computing unit that App Engine uses to automatically scale an application.
    """ # noqa: E501
    app_engine_release: Optional[StrictStr] = Field(default=None, description="Output only. App Engine release this instance is running on.", alias="appEngineRelease")
    availability: Optional[StrictStr] = Field(default=None, description="Output only. Availability of the instance.")
    average_latency: Optional[StrictInt] = Field(default=None, description="Output only. Average latency (ms) over the last minute.", alias="averageLatency")
    errors: Optional[StrictInt] = Field(default=None, description="Output only. Number of errors since this instance was started.")
    id: Optional[StrictStr] = Field(default=None, description="Output only. Relative name of the instance within the version. Example: instance-1.")
    memory_usage: Optional[StrictStr] = Field(default=None, description="Output only. Total memory in use (bytes).", alias="memoryUsage")
    name: Optional[StrictStr] = Field(default=None, description="Output only. Full path to the Instance resource in the API. Example: apps/myapp/services/default/versions/v1/instances/instance-1.")
    qps: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Output only. Average queries per second (QPS) over the last minute.")
    requests: Optional[StrictInt] = Field(default=None, description="Output only. Number of requests since this instance was started.")
    start_time: Optional[StrictStr] = Field(default=None, description="Output only. Time that this instance was started.@OutputOnly", alias="startTime")
    vm_debug_enabled: Optional[StrictBool] = Field(default=None, description="Output only. Whether this instance is in debug mode. Only applicable for instances in App Engine flexible environment.", alias="vmDebugEnabled")
    vm_id: Optional[StrictStr] = Field(default=None, description="Output only. Virtual machine ID of this instance. Only applicable for instances in App Engine flexible environment.", alias="vmId")
    vm_ip: Optional[StrictStr] = Field(default=None, description="Output only. The IP address of this instance. Only applicable for instances in App Engine flexible environment.", alias="vmIp")
    vm_liveness: Optional[StrictStr] = Field(default=None, description="Output only. The liveness health check of this instance. Only applicable for instances in App Engine flexible environment.", alias="vmLiveness")
    vm_name: Optional[StrictStr] = Field(default=None, description="Output only. Name of the virtual machine where this instance lives. Only applicable for instances in App Engine flexible environment.", alias="vmName")
    vm_status: Optional[StrictStr] = Field(default=None, description="Output only. Status of the virtual machine where this instance lives. Only applicable for instances in App Engine flexible environment.", alias="vmStatus")
    vm_zone_name: Optional[StrictStr] = Field(default=None, description="Output only. Zone where the virtual machine is located. Only applicable for instances in App Engine flexible environment.", alias="vmZoneName")
    __properties: ClassVar[List[str]] = ["appEngineRelease", "availability", "averageLatency", "errors", "id", "memoryUsage", "name", "qps", "requests", "startTime", "vmDebugEnabled", "vmId", "vmIp", "vmLiveness", "vmName", "vmStatus", "vmZoneName"]

    @field_validator('availability')
    def availability_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['UNSPECIFIED', 'RESIDENT', 'DYNAMIC']):
            raise ValueError("must be one of enum values ('UNSPECIFIED', 'RESIDENT', 'DYNAMIC')")
        return value

    @field_validator('vm_liveness')
    def vm_liveness_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['LIVENESS_STATE_UNSPECIFIED', 'UNKNOWN', 'HEALTHY', 'UNHEALTHY', 'DRAINING', 'TIMEOUT']):
            raise ValueError("must be one of enum values ('LIVENESS_STATE_UNSPECIFIED', 'UNKNOWN', 'HEALTHY', 'UNHEALTHY', 'DRAINING', 'TIMEOUT')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Instance from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "app_engine_release",
            "availability",
            "average_latency",
            "errors",
            "id",
            "memory_usage",
            "name",
            "qps",
            "requests",
            "start_time",
            "vm_debug_enabled",
            "vm_id",
            "vm_ip",
            "vm_liveness",
            "vm_name",
            "vm_status",
            "vm_zone_name",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Instance from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "appEngineRelease": obj.get("appEngineRelease"),
            "availability": obj.get("availability"),
            "averageLatency": obj.get("averageLatency"),
            "errors": obj.get("errors"),
            "id": obj.get("id"),
            "memoryUsage": obj.get("memoryUsage"),
            "name": obj.get("name"),
            "qps": obj.get("qps"),
            "requests": obj.get("requests"),
            "startTime": obj.get("startTime"),
            "vmDebugEnabled": obj.get("vmDebugEnabled"),
            "vmId": obj.get("vmId"),
            "vmIp": obj.get("vmIp"),
            "vmLiveness": obj.get("vmLiveness"),
            "vmName": obj.get("vmName"),
            "vmStatus": obj.get("vmStatus"),
            "vmZoneName": obj.get("vmZoneName")
        })
        return _obj



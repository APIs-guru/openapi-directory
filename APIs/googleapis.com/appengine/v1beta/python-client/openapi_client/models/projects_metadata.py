# coding: utf-8

"""
    App Engine Admin API

    Provisions and manages developers' App Engine applications.

    The version of the OpenAPI document: v1beta
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class ProjectsMetadata(BaseModel):
    """
    ProjectsMetadata is the metadata CCFE stores about the all the relevant projects (tenant, consumer, producer).
    """ # noqa: E501
    consumer_project_id: Optional[StrictStr] = Field(default=None, description="The consumer project id.", alias="consumerProjectId")
    consumer_project_number: Optional[StrictStr] = Field(default=None, description="The consumer project number.", alias="consumerProjectNumber")
    consumer_project_state: Optional[StrictStr] = Field(default=None, description="The CCFE state of the consumer project. It is the same state that is communicated to the CLH during project events. Notice that this field is not set in the DB, it is only set in this proto when communicated to CLH in the side channel.", alias="consumerProjectState")
    p4_service_account: Optional[StrictStr] = Field(default=None, description="The service account authorized to operate on the consumer project. Note: CCFE only propagates P4SA with default tag to CLH.", alias="p4ServiceAccount")
    producer_project_id: Optional[StrictStr] = Field(default=None, description="The producer project id.", alias="producerProjectId")
    producer_project_number: Optional[StrictStr] = Field(default=None, description="The producer project number.", alias="producerProjectNumber")
    tenant_project_id: Optional[StrictStr] = Field(default=None, description="The tenant project id.", alias="tenantProjectId")
    tenant_project_number: Optional[StrictStr] = Field(default=None, description="The tenant project number.", alias="tenantProjectNumber")
    __properties: ClassVar[List[str]] = ["consumerProjectId", "consumerProjectNumber", "consumerProjectState", "p4ServiceAccount", "producerProjectId", "producerProjectNumber", "tenantProjectId", "tenantProjectNumber"]

    @field_validator('consumer_project_state')
    def consumer_project_state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['UNKNOWN_STATE', 'true', 'false', 'DELETED']):
            raise ValueError("must be one of enum values ('UNKNOWN_STATE', 'true', 'false', 'DELETED')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ProjectsMetadata from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ProjectsMetadata from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "consumerProjectId": obj.get("consumerProjectId"),
            "consumerProjectNumber": obj.get("consumerProjectNumber"),
            "consumerProjectState": obj.get("consumerProjectState"),
            "p4ServiceAccount": obj.get("p4ServiceAccount"),
            "producerProjectId": obj.get("producerProjectId"),
            "producerProjectNumber": obj.get("producerProjectNumber"),
            "tenantProjectId": obj.get("tenantProjectId"),
            "tenantProjectNumber": obj.get("tenantProjectNumber")
        })
        return _obj



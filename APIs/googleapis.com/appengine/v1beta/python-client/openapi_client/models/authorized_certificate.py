# coding: utf-8

"""
    App Engine Admin API

    Provisions and manages developers' App Engine applications.

    The version of the OpenAPI document: v1beta
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.certificate_raw_data import CertificateRawData
from openapi_client.models.managed_certificate import ManagedCertificate
from typing import Optional, Set
from typing_extensions import Self

class AuthorizedCertificate(BaseModel):
    """
    An SSL certificate that a user has been authorized to administer. A user is authorized to administer any certificate that applies to one of their authorized domains.
    """ # noqa: E501
    certificate_raw_data: Optional[CertificateRawData] = Field(default=None, alias="certificateRawData")
    display_name: Optional[StrictStr] = Field(default=None, description="The user-specified display name of the certificate. This is not guaranteed to be unique. Example: My Certificate.", alias="displayName")
    domain_mappings_count: Optional[StrictInt] = Field(default=None, description="Aggregate count of the domain mappings with this certificate mapped. This count includes domain mappings on applications for which the user does not have VIEWER permissions.Only returned by GET or LIST requests when specifically requested by the view=FULL_CERTIFICATE option.@OutputOnly", alias="domainMappingsCount")
    domain_names: Optional[List[StrictStr]] = Field(default=None, description="Topmost applicable domains of this certificate. This certificate applies to these domains and their subdomains. Example: example.com.@OutputOnly", alias="domainNames")
    expire_time: Optional[StrictStr] = Field(default=None, description="The time when this certificate expires. To update the renewal time on this certificate, upload an SSL certificate with a different expiration time using AuthorizedCertificates.UpdateAuthorizedCertificate.@OutputOnly", alias="expireTime")
    id: Optional[StrictStr] = Field(default=None, description="Relative name of the certificate. This is a unique value autogenerated on AuthorizedCertificate resource creation. Example: 12345.@OutputOnly")
    managed_certificate: Optional[ManagedCertificate] = Field(default=None, alias="managedCertificate")
    name: Optional[StrictStr] = Field(default=None, description="Full path to the AuthorizedCertificate resource in the API. Example: apps/myapp/authorizedCertificates/12345.@OutputOnly")
    visible_domain_mappings: Optional[List[StrictStr]] = Field(default=None, description="The full paths to user visible Domain Mapping resources that have this certificate mapped. Example: apps/myapp/domainMappings/example.com.This may not represent the full list of mapped domain mappings if the user does not have VIEWER permissions on all of the applications that have this certificate mapped. See domain_mappings_count for a complete count.Only returned by GET or LIST requests when specifically requested by the view=FULL_CERTIFICATE option.@OutputOnly", alias="visibleDomainMappings")
    __properties: ClassVar[List[str]] = ["certificateRawData", "displayName", "domainMappingsCount", "domainNames", "expireTime", "id", "managedCertificate", "name", "visibleDomainMappings"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AuthorizedCertificate from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of certificate_raw_data
        if self.certificate_raw_data:
            _dict['certificateRawData'] = self.certificate_raw_data.to_dict()
        # override the default output from pydantic by calling `to_dict()` of managed_certificate
        if self.managed_certificate:
            _dict['managedCertificate'] = self.managed_certificate.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AuthorizedCertificate from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "certificateRawData": CertificateRawData.from_dict(obj["certificateRawData"]) if obj.get("certificateRawData") is not None else None,
            "displayName": obj.get("displayName"),
            "domainMappingsCount": obj.get("domainMappingsCount"),
            "domainNames": obj.get("domainNames"),
            "expireTime": obj.get("expireTime"),
            "id": obj.get("id"),
            "managedCertificate": ManagedCertificate.from_dict(obj["managedCertificate"]) if obj.get("managedCertificate") is not None else None,
            "name": obj.get("name"),
            "visibleDomainMappings": obj.get("visibleDomainMappings")
        })
        return _obj



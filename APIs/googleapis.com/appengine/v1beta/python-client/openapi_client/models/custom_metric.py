# coding: utf-8

"""
    App Engine Admin API

    Provisions and manages developers' App Engine applications.

    The version of the OpenAPI document: v1beta
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class CustomMetric(BaseModel):
    """
    Allows autoscaling based on Stackdriver metrics.
    """ # noqa: E501
    filter: Optional[StrictStr] = Field(default=None, description="Allows filtering on the metric's fields.")
    metric_name: Optional[StrictStr] = Field(default=None, description="The name of the metric.", alias="metricName")
    single_instance_assignment: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="May be used instead of target_utilization when an instance can handle a specific amount of work/resources and the metric value is equal to the current amount of work remaining. The autoscaler will try to keep the number of instances equal to the metric value divided by single_instance_assignment.", alias="singleInstanceAssignment")
    target_type: Optional[StrictStr] = Field(default=None, description="The type of the metric. Must be a string representing a Stackdriver metric type e.g. GAGUE, DELTA_PER_SECOND, etc.", alias="targetType")
    target_utilization: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The target value for the metric.", alias="targetUtilization")
    __properties: ClassVar[List[str]] = ["filter", "metricName", "singleInstanceAssignment", "targetType", "targetUtilization"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CustomMetric from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CustomMetric from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "filter": obj.get("filter"),
            "metricName": obj.get("metricName"),
            "singleInstanceAssignment": obj.get("singleInstanceAssignment"),
            "targetType": obj.get("targetType"),
            "targetUtilization": obj.get("targetUtilization")
        })
        return _obj



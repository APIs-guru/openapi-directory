# coding: utf-8

"""
    App Engine Admin API

    Provisions and manages developers' App Engine applications.

    The version of the OpenAPI document: v1beta
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.create_version_metadata_v1_alpha import CreateVersionMetadataV1Alpha
from typing import Optional, Set
from typing_extensions import Self

class OperationMetadataV1Alpha(BaseModel):
    """
    Metadata for the given google.longrunning.Operation.
    """ # noqa: E501
    create_version_metadata: Optional[CreateVersionMetadataV1Alpha] = Field(default=None, alias="createVersionMetadata")
    end_time: Optional[StrictStr] = Field(default=None, description="Time that this operation completed.@OutputOnly", alias="endTime")
    ephemeral_message: Optional[StrictStr] = Field(default=None, description="Ephemeral message that may change every time the operation is polled. @OutputOnly", alias="ephemeralMessage")
    insert_time: Optional[StrictStr] = Field(default=None, description="Time that this operation was created.@OutputOnly", alias="insertTime")
    method: Optional[StrictStr] = Field(default=None, description="API method that initiated this operation. Example: google.appengine.v1alpha.Versions.CreateVersion.@OutputOnly")
    target: Optional[StrictStr] = Field(default=None, description="Name of the resource that this operation is acting on. Example: apps/myapp/services/default.@OutputOnly")
    user: Optional[StrictStr] = Field(default=None, description="User who requested this operation.@OutputOnly")
    warning: Optional[List[StrictStr]] = Field(default=None, description="Durable messages that persist on every operation poll. @OutputOnly")
    __properties: ClassVar[List[str]] = ["createVersionMetadata", "endTime", "ephemeralMessage", "insertTime", "method", "target", "user", "warning"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of OperationMetadataV1Alpha from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of create_version_metadata
        if self.create_version_metadata:
            _dict['createVersionMetadata'] = self.create_version_metadata.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of OperationMetadataV1Alpha from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "createVersionMetadata": CreateVersionMetadataV1Alpha.from_dict(obj["createVersionMetadata"]) if obj.get("createVersionMetadata") is not None else None,
            "endTime": obj.get("endTime"),
            "ephemeralMessage": obj.get("ephemeralMessage"),
            "insertTime": obj.get("insertTime"),
            "method": obj.get("method"),
            "target": obj.get("target"),
            "user": obj.get("user"),
            "warning": obj.get("warning")
        })
        return _obj



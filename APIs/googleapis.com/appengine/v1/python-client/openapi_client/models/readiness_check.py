# coding: utf-8

"""
    App Engine Admin API

    Provisions and manages developers' App Engine applications.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class ReadinessCheck(BaseModel):
    """
    Readiness checking configuration for VM instances. Unhealthy instances are removed from traffic rotation.
    """ # noqa: E501
    app_start_timeout: Optional[StrictStr] = Field(default=None, description="A maximum time limit on application initialization, measured from moment the application successfully replies to a healthcheck until it is ready to serve traffic.", alias="appStartTimeout")
    check_interval: Optional[StrictStr] = Field(default=None, description="Interval between health checks.", alias="checkInterval")
    failure_threshold: Optional[StrictInt] = Field(default=None, description="Number of consecutive failed checks required before removing traffic.", alias="failureThreshold")
    host: Optional[StrictStr] = Field(default=None, description="Host header to send when performing a HTTP Readiness check. Example: \"myapp.appspot.com\"")
    path: Optional[StrictStr] = Field(default=None, description="The request path.")
    success_threshold: Optional[StrictInt] = Field(default=None, description="Number of consecutive successful checks required before receiving traffic.", alias="successThreshold")
    timeout: Optional[StrictStr] = Field(default=None, description="Time before the check is considered failed.")
    __properties: ClassVar[List[str]] = ["appStartTimeout", "checkInterval", "failureThreshold", "host", "path", "successThreshold", "timeout"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ReadinessCheck from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ReadinessCheck from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "appStartTimeout": obj.get("appStartTimeout"),
            "checkInterval": obj.get("checkInterval"),
            "failureThreshold": obj.get("failureThreshold"),
            "host": obj.get("host"),
            "path": obj.get("path"),
            "successThreshold": obj.get("successThreshold"),
            "timeout": obj.get("timeout")
        })
        return _obj



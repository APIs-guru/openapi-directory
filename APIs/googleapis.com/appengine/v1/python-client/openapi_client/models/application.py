# coding: utf-8

"""
    App Engine Admin API

    Provisions and manages developers' App Engine applications.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.feature_settings import FeatureSettings
from openapi_client.models.identity_aware_proxy import IdentityAwareProxy
from openapi_client.models.url_dispatch_rule import UrlDispatchRule
from typing import Optional, Set
from typing_extensions import Self

class Application(BaseModel):
    """
    An Application resource contains the top-level configuration of an App Engine application.
    """ # noqa: E501
    auth_domain: Optional[StrictStr] = Field(default=None, description="Google Apps authentication domain that controls which users can access this application.Defaults to open access for any Google Account.", alias="authDomain")
    code_bucket: Optional[StrictStr] = Field(default=None, description="Output only. Google Cloud Storage bucket that can be used for storing files associated with this application. This bucket is associated with the application and can be used by the gcloud deployment commands.@OutputOnly", alias="codeBucket")
    database_type: Optional[StrictStr] = Field(default=None, description="The type of the Cloud Firestore or Cloud Datastore database associated with this application.", alias="databaseType")
    default_bucket: Optional[StrictStr] = Field(default=None, description="Output only. Google Cloud Storage bucket that can be used by this application to store content.@OutputOnly", alias="defaultBucket")
    default_cookie_expiration: Optional[StrictStr] = Field(default=None, description="Cookie expiration policy for this application.", alias="defaultCookieExpiration")
    default_hostname: Optional[StrictStr] = Field(default=None, description="Output only. Hostname used to reach this application, as resolved by App Engine.@OutputOnly", alias="defaultHostname")
    dispatch_rules: Optional[List[UrlDispatchRule]] = Field(default=None, description="HTTP path dispatch rules for requests to the application that do not explicitly target a service or version. Rules are order-dependent. Up to 20 dispatch rules can be supported.", alias="dispatchRules")
    feature_settings: Optional[FeatureSettings] = Field(default=None, alias="featureSettings")
    gcr_domain: Optional[StrictStr] = Field(default=None, description="Output only. The Google Container Registry domain used for storing managed build docker images for this application.", alias="gcrDomain")
    generated_customer_metadata: Optional[Dict[str, Any]] = Field(default=None, description="Additional Google Generated Customer Metadata, this field won't be provided by default and can be requested by setting the IncludeExtraData field in GetApplicationRequest", alias="generatedCustomerMetadata")
    iap: Optional[IdentityAwareProxy] = None
    id: Optional[StrictStr] = Field(default=None, description="Identifier of the Application resource. This identifier is equivalent to the project ID of the Google Cloud Platform project where you want to deploy your application. Example: myapp.")
    location_id: Optional[StrictStr] = Field(default=None, description="Location from which this application runs. Application instances run out of the data centers in the specified location, which is also where all of the application's end user content is stored.Defaults to us-central.View the list of supported locations (https://cloud.google.com/appengine/docs/locations).", alias="locationId")
    name: Optional[StrictStr] = Field(default=None, description="Output only. Full path to the Application resource in the API. Example: apps/myapp.@OutputOnly")
    service_account: Optional[StrictStr] = Field(default=None, description="The service account associated with the application. This is the app-level default identity. If no identity provided during create version, Admin API will fallback to this one.", alias="serviceAccount")
    serving_status: Optional[StrictStr] = Field(default=None, description="Serving status of this application.", alias="servingStatus")
    __properties: ClassVar[List[str]] = ["authDomain", "codeBucket", "databaseType", "defaultBucket", "defaultCookieExpiration", "defaultHostname", "dispatchRules", "featureSettings", "gcrDomain", "generatedCustomerMetadata", "iap", "id", "locationId", "name", "serviceAccount", "servingStatus"]

    @field_validator('database_type')
    def database_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['DATABASE_TYPE_UNSPECIFIED', 'CLOUD_DATASTORE', 'CLOUD_FIRESTORE', 'CLOUD_DATASTORE_COMPATIBILITY']):
            raise ValueError("must be one of enum values ('DATABASE_TYPE_UNSPECIFIED', 'CLOUD_DATASTORE', 'CLOUD_FIRESTORE', 'CLOUD_DATASTORE_COMPATIBILITY')")
        return value

    @field_validator('serving_status')
    def serving_status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['UNSPECIFIED', 'SERVING', 'USER_DISABLED', 'SYSTEM_DISABLED']):
            raise ValueError("must be one of enum values ('UNSPECIFIED', 'SERVING', 'USER_DISABLED', 'SYSTEM_DISABLED')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Application from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "code_bucket",
            "default_bucket",
            "default_hostname",
            "gcr_domain",
            "name",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in dispatch_rules (list)
        _items = []
        if self.dispatch_rules:
            for _item_dispatch_rules in self.dispatch_rules:
                if _item_dispatch_rules:
                    _items.append(_item_dispatch_rules.to_dict())
            _dict['dispatchRules'] = _items
        # override the default output from pydantic by calling `to_dict()` of feature_settings
        if self.feature_settings:
            _dict['featureSettings'] = self.feature_settings.to_dict()
        # override the default output from pydantic by calling `to_dict()` of iap
        if self.iap:
            _dict['iap'] = self.iap.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Application from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "authDomain": obj.get("authDomain"),
            "codeBucket": obj.get("codeBucket"),
            "databaseType": obj.get("databaseType"),
            "defaultBucket": obj.get("defaultBucket"),
            "defaultCookieExpiration": obj.get("defaultCookieExpiration"),
            "defaultHostname": obj.get("defaultHostname"),
            "dispatchRules": [UrlDispatchRule.from_dict(_item) for _item in obj["dispatchRules"]] if obj.get("dispatchRules") is not None else None,
            "featureSettings": FeatureSettings.from_dict(obj["featureSettings"]) if obj.get("featureSettings") is not None else None,
            "gcrDomain": obj.get("gcrDomain"),
            "generatedCustomerMetadata": obj.get("generatedCustomerMetadata"),
            "iap": IdentityAwareProxy.from_dict(obj["iap"]) if obj.get("iap") is not None else None,
            "id": obj.get("id"),
            "locationId": obj.get("locationId"),
            "name": obj.get("name"),
            "serviceAccount": obj.get("serviceAccount"),
            "servingStatus": obj.get("servingStatus")
        })
        return _obj



# coding: utf-8

"""
    App Engine Admin API

    Provisions and manages developers' App Engine applications.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.cpu_utilization import CpuUtilization
from openapi_client.models.disk_utilization import DiskUtilization
from openapi_client.models.network_utilization import NetworkUtilization
from openapi_client.models.request_utilization import RequestUtilization
from openapi_client.models.standard_scheduler_settings import StandardSchedulerSettings
from typing import Optional, Set
from typing_extensions import Self

class AutomaticScaling(BaseModel):
    """
    Automatic scaling is based on request rate, response latencies, and other application metrics.
    """ # noqa: E501
    cool_down_period: Optional[StrictStr] = Field(default=None, description="The time period that the Autoscaler (https://cloud.google.com/compute/docs/autoscaler/) should wait before it starts collecting information from a new instance. This prevents the autoscaler from collecting information when the instance is initializing, during which the collected usage would not be reliable. Only applicable in the App Engine flexible environment.", alias="coolDownPeriod")
    cpu_utilization: Optional[CpuUtilization] = Field(default=None, alias="cpuUtilization")
    disk_utilization: Optional[DiskUtilization] = Field(default=None, alias="diskUtilization")
    max_concurrent_requests: Optional[StrictInt] = Field(default=None, description="Number of concurrent requests an automatic scaling instance can accept before the scheduler spawns a new instance.Defaults to a runtime-specific value.", alias="maxConcurrentRequests")
    max_idle_instances: Optional[StrictInt] = Field(default=None, description="Maximum number of idle instances that should be maintained for this version.", alias="maxIdleInstances")
    max_pending_latency: Optional[StrictStr] = Field(default=None, description="Maximum amount of time that a request should wait in the pending queue before starting a new instance to handle it.", alias="maxPendingLatency")
    max_total_instances: Optional[StrictInt] = Field(default=None, description="Maximum number of instances that should be started to handle requests for this version.", alias="maxTotalInstances")
    min_idle_instances: Optional[StrictInt] = Field(default=None, description="Minimum number of idle instances that should be maintained for this version. Only applicable for the default version of a service.", alias="minIdleInstances")
    min_pending_latency: Optional[StrictStr] = Field(default=None, description="Minimum amount of time a request should wait in the pending queue before starting a new instance to handle it.", alias="minPendingLatency")
    min_total_instances: Optional[StrictInt] = Field(default=None, description="Minimum number of running instances that should be maintained for this version.", alias="minTotalInstances")
    network_utilization: Optional[NetworkUtilization] = Field(default=None, alias="networkUtilization")
    request_utilization: Optional[RequestUtilization] = Field(default=None, alias="requestUtilization")
    standard_scheduler_settings: Optional[StandardSchedulerSettings] = Field(default=None, alias="standardSchedulerSettings")
    __properties: ClassVar[List[str]] = ["coolDownPeriod", "cpuUtilization", "diskUtilization", "maxConcurrentRequests", "maxIdleInstances", "maxPendingLatency", "maxTotalInstances", "minIdleInstances", "minPendingLatency", "minTotalInstances", "networkUtilization", "requestUtilization", "standardSchedulerSettings"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AutomaticScaling from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of cpu_utilization
        if self.cpu_utilization:
            _dict['cpuUtilization'] = self.cpu_utilization.to_dict()
        # override the default output from pydantic by calling `to_dict()` of disk_utilization
        if self.disk_utilization:
            _dict['diskUtilization'] = self.disk_utilization.to_dict()
        # override the default output from pydantic by calling `to_dict()` of network_utilization
        if self.network_utilization:
            _dict['networkUtilization'] = self.network_utilization.to_dict()
        # override the default output from pydantic by calling `to_dict()` of request_utilization
        if self.request_utilization:
            _dict['requestUtilization'] = self.request_utilization.to_dict()
        # override the default output from pydantic by calling `to_dict()` of standard_scheduler_settings
        if self.standard_scheduler_settings:
            _dict['standardSchedulerSettings'] = self.standard_scheduler_settings.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AutomaticScaling from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "coolDownPeriod": obj.get("coolDownPeriod"),
            "cpuUtilization": CpuUtilization.from_dict(obj["cpuUtilization"]) if obj.get("cpuUtilization") is not None else None,
            "diskUtilization": DiskUtilization.from_dict(obj["diskUtilization"]) if obj.get("diskUtilization") is not None else None,
            "maxConcurrentRequests": obj.get("maxConcurrentRequests"),
            "maxIdleInstances": obj.get("maxIdleInstances"),
            "maxPendingLatency": obj.get("maxPendingLatency"),
            "maxTotalInstances": obj.get("maxTotalInstances"),
            "minIdleInstances": obj.get("minIdleInstances"),
            "minPendingLatency": obj.get("minPendingLatency"),
            "minTotalInstances": obj.get("minTotalInstances"),
            "networkUtilization": NetworkUtilization.from_dict(obj["networkUtilization"]) if obj.get("networkUtilization") is not None else None,
            "requestUtilization": RequestUtilization.from_dict(obj["requestUtilization"]) if obj.get("requestUtilization") is not None else None,
            "standardSchedulerSettings": StandardSchedulerSettings.from_dict(obj["standardSchedulerSettings"]) if obj.get("standardSchedulerSettings") is not None else None
        })
        return _obj



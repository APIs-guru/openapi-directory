# coding: utf-8

"""
    App Engine Admin API

    Provisions and manages developers' App Engine applications.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class StaticFilesHandler(BaseModel):
    """
    Files served directly to the user for a given URL, such as images, CSS stylesheets, or JavaScript source files. Static file handlers describe which files in the application directory are static files, and which URLs serve them.
    """ # noqa: E501
    application_readable: Optional[StrictBool] = Field(default=None, description="Whether files should also be uploaded as code data. By default, files declared in static file handlers are uploaded as static data and are only served to end users; they cannot be read by the application. If enabled, uploads are charged against both your code and static data storage resource quotas.", alias="applicationReadable")
    expiration: Optional[StrictStr] = Field(default=None, description="Time a static file served by this handler should be cached by web proxies and browsers.")
    http_headers: Optional[Dict[str, StrictStr]] = Field(default=None, description="HTTP headers to use for all responses from these URLs.", alias="httpHeaders")
    mime_type: Optional[StrictStr] = Field(default=None, description="MIME type used to serve all files served by this handler.Defaults to file-specific MIME types, which are derived from each file's filename extension.", alias="mimeType")
    path: Optional[StrictStr] = Field(default=None, description="Path to the static files matched by the URL pattern, from the application root directory. The path can refer to text matched in groupings in the URL pattern.")
    require_matching_file: Optional[StrictBool] = Field(default=None, description="Whether this handler should match the request if the file referenced by the handler does not exist.", alias="requireMatchingFile")
    upload_path_regex: Optional[StrictStr] = Field(default=None, description="Regular expression that matches the file paths for all files that should be referenced by this handler.", alias="uploadPathRegex")
    __properties: ClassVar[List[str]] = ["applicationReadable", "expiration", "httpHeaders", "mimeType", "path", "requireMatchingFile", "uploadPathRegex"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of StaticFilesHandler from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of StaticFilesHandler from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "applicationReadable": obj.get("applicationReadable"),
            "expiration": obj.get("expiration"),
            "httpHeaders": obj.get("httpHeaders"),
            "mimeType": obj.get("mimeType"),
            "path": obj.get("path"),
            "requireMatchingFile": obj.get("requireMatchingFile"),
            "uploadPathRegex": obj.get("uploadPathRegex")
        })
        return _obj



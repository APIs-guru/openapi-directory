# coding: utf-8

"""
    App Engine Admin API

    Provisions and manages developers' App Engine applications.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.network_settings import NetworkSettings
from openapi_client.models.traffic_split import TrafficSplit
from typing import Optional, Set
from typing_extensions import Self

class Service(BaseModel):
    """
    A Service resource is a logical component of an application that can share state and communicate in a secure fashion with other services. For example, an application that handles customer requests might include separate services to handle tasks such as backend data analysis or API requests from mobile devices. Each service has a collection of versions that define a specific set of code used to implement the functionality of that service.
    """ # noqa: E501
    generated_customer_metadata: Optional[Dict[str, Any]] = Field(default=None, description="Additional Google Generated Customer Metadata, this field won't be provided by default and can be requested by setting the IncludeExtraData field in GetServiceRequest", alias="generatedCustomerMetadata")
    id: Optional[StrictStr] = Field(default=None, description="Relative name of the service within the application. Example: default.@OutputOnly")
    labels: Optional[Dict[str, StrictStr]] = Field(default=None, description="A set of labels to apply to this service. Labels are key/value pairs that describe the service and all resources that belong to it (e.g., versions). The labels can be used to search and group resources, and are propagated to the usage and billing reports, enabling fine-grain analysis of costs. An example of using labels is to tag resources belonging to different environments (e.g., \"env=prod\", \"env=qa\"). Label keys and values can be no longer than 63 characters and can only contain lowercase letters, numeric characters, underscores, dashes, and international characters. Label keys must start with a lowercase letter or an international character. Each service can have at most 32 labels.")
    name: Optional[StrictStr] = Field(default=None, description="Full path to the Service resource in the API. Example: apps/myapp/services/default.@OutputOnly")
    network_settings: Optional[NetworkSettings] = Field(default=None, alias="networkSettings")
    split: Optional[TrafficSplit] = None
    __properties: ClassVar[List[str]] = ["generatedCustomerMetadata", "id", "labels", "name", "networkSettings", "split"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Service from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of network_settings
        if self.network_settings:
            _dict['networkSettings'] = self.network_settings.to_dict()
        # override the default output from pydantic by calling `to_dict()` of split
        if self.split:
            _dict['split'] = self.split.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Service from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "generatedCustomerMetadata": obj.get("generatedCustomerMetadata"),
            "id": obj.get("id"),
            "labels": obj.get("labels"),
            "name": obj.get("name"),
            "networkSettings": NetworkSettings.from_dict(obj["networkSettings"]) if obj.get("networkSettings") is not None else None,
            "split": TrafficSplit.from_dict(obj["split"]) if obj.get("split") is not None else None
        })
        return _obj



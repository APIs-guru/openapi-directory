# coding: utf-8

"""
    App Engine Admin API

    Provisions and manages developers' App Engine applications.

    The version of the OpenAPI document: v1alpha
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.reasons import Reasons
from typing import Optional, Set
from typing_extensions import Self

class ContainerState(BaseModel):
    """
    ContainerState contains the externally-visible container state that is used to communicate the state and reasoning for that state to the CLH. This data is not persisted by CCFE, but is instead derived from CCFE's internal representation of the container state.
    """ # noqa: E501
    current_reasons: Optional[Reasons] = Field(default=None, alias="currentReasons")
    previous_reasons: Optional[Reasons] = Field(default=None, alias="previousReasons")
    state: Optional[StrictStr] = Field(default=None, description="The current state of the container. This state is the culmination of all of the opinions from external systems that CCFE knows about of the container.")
    __properties: ClassVar[List[str]] = ["currentReasons", "previousReasons", "state"]

    @field_validator('state')
    def state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['UNKNOWN_STATE', 'true', 'false', 'DELETED']):
            raise ValueError("must be one of enum values ('UNKNOWN_STATE', 'true', 'false', 'DELETED')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ContainerState from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of current_reasons
        if self.current_reasons:
            _dict['currentReasons'] = self.current_reasons.to_dict()
        # override the default output from pydantic by calling `to_dict()` of previous_reasons
        if self.previous_reasons:
            _dict['previousReasons'] = self.previous_reasons.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ContainerState from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "currentReasons": Reasons.from_dict(obj["currentReasons"]) if obj.get("currentReasons") is not None else None,
            "previousReasons": Reasons.from_dict(obj["previousReasons"]) if obj.get("previousReasons") is not None else None,
            "state": obj.get("state")
        })
        return _obj



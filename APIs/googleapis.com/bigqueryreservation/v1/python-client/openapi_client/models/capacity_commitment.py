# coding: utf-8

"""
    BigQuery Reservation API

    A service to modify your BigQuery flat-rate reservations.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.status import Status
from typing import Optional, Set
from typing_extensions import Self

class CapacityCommitment(BaseModel):
    """
    Capacity commitment is a way to purchase compute capacity for BigQuery jobs (in the form of slots) with some committed period of usage. Annual commitments renew by default. Commitments can be removed after their commitment end time passes. In order to remove annual commitment, its plan needs to be changed to monthly or flex first. A capacity commitment resource exists as a child resource of the admin project.
    """ # noqa: E501
    commitment_end_time: Optional[StrictStr] = Field(default=None, description="Output only. The end of the current commitment period. It is applicable only for ACTIVE capacity commitments.", alias="commitmentEndTime")
    commitment_start_time: Optional[StrictStr] = Field(default=None, description="Output only. The start of the current commitment period. It is applicable only for ACTIVE capacity commitments.", alias="commitmentStartTime")
    edition: Optional[StrictStr] = Field(default=None, description="Edition of the capacity commitment.")
    failure_status: Optional[Status] = Field(default=None, alias="failureStatus")
    is_flat_rate: Optional[StrictBool] = Field(default=None, description="Output only. If true, the commitment is a flat-rate commitment, otherwise, it's an edition commitment.", alias="isFlatRate")
    multi_region_auxiliary: Optional[StrictBool] = Field(default=None, description="Applicable only for commitments located within one of the BigQuery multi-regions (US or EU). If set to true, this commitment is placed in the organization's secondary region which is designated for disaster recovery purposes. If false, this commitment is placed in the organization's default region. NOTE: this is a preview feature. Project must be allow-listed in order to set this field.", alias="multiRegionAuxiliary")
    name: Optional[StrictStr] = Field(default=None, description="Output only. The resource name of the capacity commitment, e.g., `projects/myproject/locations/US/capacityCommitments/123` The commitment_id must only contain lower case alphanumeric characters or dashes. It must start with a letter and must not end with a dash. Its maximum length is 64 characters.")
    plan: Optional[StrictStr] = Field(default=None, description="Capacity commitment commitment plan.")
    renewal_plan: Optional[StrictStr] = Field(default=None, description="The plan this capacity commitment is converted to after commitment_end_time passes. Once the plan is changed, committed period is extended according to commitment plan. Only applicable for ANNUAL and TRIAL commitments.", alias="renewalPlan")
    slot_count: Optional[StrictStr] = Field(default=None, description="Number of slots in this commitment.", alias="slotCount")
    state: Optional[StrictStr] = Field(default=None, description="Output only. State of the commitment.")
    __properties: ClassVar[List[str]] = ["commitmentEndTime", "commitmentStartTime", "edition", "failureStatus", "isFlatRate", "multiRegionAuxiliary", "name", "plan", "renewalPlan", "slotCount", "state"]

    @field_validator('edition')
    def edition_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['EDITION_UNSPECIFIED', 'STANDARD', 'ENTERPRISE', 'ENTERPRISE_PLUS']):
            raise ValueError("must be one of enum values ('EDITION_UNSPECIFIED', 'STANDARD', 'ENTERPRISE', 'ENTERPRISE_PLUS')")
        return value

    @field_validator('plan')
    def plan_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['COMMITMENT_PLAN_UNSPECIFIED', 'FLEX', 'FLEX_FLAT_RATE', 'TRIAL', 'MONTHLY', 'MONTHLY_FLAT_RATE', 'ANNUAL', 'ANNUAL_FLAT_RATE', 'THREE_YEAR', 'NONE']):
            raise ValueError("must be one of enum values ('COMMITMENT_PLAN_UNSPECIFIED', 'FLEX', 'FLEX_FLAT_RATE', 'TRIAL', 'MONTHLY', 'MONTHLY_FLAT_RATE', 'ANNUAL', 'ANNUAL_FLAT_RATE', 'THREE_YEAR', 'NONE')")
        return value

    @field_validator('renewal_plan')
    def renewal_plan_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['COMMITMENT_PLAN_UNSPECIFIED', 'FLEX', 'FLEX_FLAT_RATE', 'TRIAL', 'MONTHLY', 'MONTHLY_FLAT_RATE', 'ANNUAL', 'ANNUAL_FLAT_RATE', 'THREE_YEAR', 'NONE']):
            raise ValueError("must be one of enum values ('COMMITMENT_PLAN_UNSPECIFIED', 'FLEX', 'FLEX_FLAT_RATE', 'TRIAL', 'MONTHLY', 'MONTHLY_FLAT_RATE', 'ANNUAL', 'ANNUAL_FLAT_RATE', 'THREE_YEAR', 'NONE')")
        return value

    @field_validator('state')
    def state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['STATE_UNSPECIFIED', 'PENDING', 'ACTIVE', 'FAILED']):
            raise ValueError("must be one of enum values ('STATE_UNSPECIFIED', 'PENDING', 'ACTIVE', 'FAILED')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CapacityCommitment from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "commitment_end_time",
            "commitment_start_time",
            "is_flat_rate",
            "name",
            "state",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of failure_status
        if self.failure_status:
            _dict['failureStatus'] = self.failure_status.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CapacityCommitment from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "commitmentEndTime": obj.get("commitmentEndTime"),
            "commitmentStartTime": obj.get("commitmentStartTime"),
            "edition": obj.get("edition"),
            "failureStatus": Status.from_dict(obj["failureStatus"]) if obj.get("failureStatus") is not None else None,
            "isFlatRate": obj.get("isFlatRate"),
            "multiRegionAuxiliary": obj.get("multiRegionAuxiliary"),
            "name": obj.get("name"),
            "plan": obj.get("plan"),
            "renewalPlan": obj.get("renewalPlan"),
            "slotCount": obj.get("slotCount"),
            "state": obj.get("state")
        })
        return _obj



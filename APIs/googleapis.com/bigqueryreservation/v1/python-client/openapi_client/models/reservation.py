# coding: utf-8

"""
    BigQuery Reservation API

    A service to modify your BigQuery flat-rate reservations.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.autoscale import Autoscale
from typing import Optional, Set
from typing_extensions import Self

class Reservation(BaseModel):
    """
    A reservation is a mechanism used to guarantee slots to users.
    """ # noqa: E501
    autoscale: Optional[Autoscale] = None
    concurrency: Optional[StrictStr] = Field(default=None, description="Job concurrency target which sets a soft upper bound on the number of jobs that can run concurrently in this reservation. This is a soft target due to asynchronous nature of the system and various optimizations for small queries. Default value is 0 which means that concurrency target will be automatically computed by the system. NOTE: this field is exposed as `target_job_concurrency` in the Information Schema, DDL and BQ CLI.")
    creation_time: Optional[StrictStr] = Field(default=None, description="Output only. Creation time of the reservation.", alias="creationTime")
    edition: Optional[StrictStr] = Field(default=None, description="Edition of the reservation.")
    ignore_idle_slots: Optional[StrictBool] = Field(default=None, description="If false, any query or pipeline job using this reservation will use idle slots from other reservations within the same admin project. If true, a query or pipeline job using this reservation will execute with the slot capacity specified in the slot_capacity field at most.", alias="ignoreIdleSlots")
    multi_region_auxiliary: Optional[StrictBool] = Field(default=None, description="Applicable only for reservations located within one of the BigQuery multi-regions (US or EU). If set to true, this reservation is placed in the organization's secondary region which is designated for disaster recovery purposes. If false, this reservation is placed in the organization's default region. NOTE: this is a preview feature. Project must be allow-listed in order to set this field.", alias="multiRegionAuxiliary")
    name: Optional[StrictStr] = Field(default=None, description="The resource name of the reservation, e.g., `projects/*/locations/*/reservations/team1-prod`. The reservation_id must only contain lower case alphanumeric characters or dashes. It must start with a letter and must not end with a dash. Its maximum length is 64 characters.")
    slot_capacity: Optional[StrictStr] = Field(default=None, description="Baseline slots available to this reservation. A slot is a unit of computational power in BigQuery, and serves as the unit of parallelism. Queries using this reservation might use more slots during runtime if ignore_idle_slots is set to false, or autoscaling is enabled. If edition is EDITION_UNSPECIFIED and total slot_capacity of the reservation and its siblings exceeds the total slot_count of all capacity commitments, the request will fail with `google.rpc.Code.RESOURCE_EXHAUSTED`. If edition is any value but EDITION_UNSPECIFIED, then the above requirement is not needed. The total slot_capacity of the reservation and its siblings may exceed the total slot_count of capacity commitments. In that case, the exceeding slots will be charged with the autoscale SKU. You can increase the number of baseline slots in a reservation every few minutes. If you want to decrease your baseline slots, you are limited to once an hour if you have recently changed your baseline slot capacity and your baseline slots exceed your committed slots. Otherwise, you can decrease your baseline slots every few minutes.", alias="slotCapacity")
    update_time: Optional[StrictStr] = Field(default=None, description="Output only. Last update time of the reservation.", alias="updateTime")
    __properties: ClassVar[List[str]] = ["autoscale", "concurrency", "creationTime", "edition", "ignoreIdleSlots", "multiRegionAuxiliary", "name", "slotCapacity", "updateTime"]

    @field_validator('edition')
    def edition_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['EDITION_UNSPECIFIED', 'STANDARD', 'ENTERPRISE', 'ENTERPRISE_PLUS']):
            raise ValueError("must be one of enum values ('EDITION_UNSPECIFIED', 'STANDARD', 'ENTERPRISE', 'ENTERPRISE_PLUS')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Reservation from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "creation_time",
            "update_time",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of autoscale
        if self.autoscale:
            _dict['autoscale'] = self.autoscale.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Reservation from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "autoscale": Autoscale.from_dict(obj["autoscale"]) if obj.get("autoscale") is not None else None,
            "concurrency": obj.get("concurrency"),
            "creationTime": obj.get("creationTime"),
            "edition": obj.get("edition"),
            "ignoreIdleSlots": obj.get("ignoreIdleSlots"),
            "multiRegionAuxiliary": obj.get("multiRegionAuxiliary"),
            "name": obj.get("name"),
            "slotCapacity": obj.get("slotCapacity"),
            "updateTime": obj.get("updateTime")
        })
        return _obj



# coding: utf-8

"""
    Firebase Cloud Messaging API

    FCM send API that provides a cross-platform messaging solution to reliably deliver messages at no cost.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.message import Message

class TestMessage(unittest.TestCase):
    """Message unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> Message:
        """Test Message
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `Message`
        """
        model = Message()
        if include_optional:
            return Message(
                android = openapi_client.models.android_config.AndroidConfig(
                    collapse_key = '', 
                    data = {
                        'key' : ''
                        }, 
                    direct_boot_ok = True, 
                    fcm_options = openapi_client.models.android_fcm_options.AndroidFcmOptions(
                        analytics_label = '', ), 
                    notification = openapi_client.models.android_notification.AndroidNotification(
                        body = '', 
                        body_loc_args = [
                            ''
                            ], 
                        body_loc_key = '', 
                        bypass_proxy_notification = True, 
                        channel_id = '', 
                        click_action = '', 
                        color = '', 
                        default_light_settings = True, 
                        default_sound = True, 
                        default_vibrate_timings = True, 
                        event_time = '', 
                        icon = '', 
                        image = '', 
                        light_settings = openapi_client.models.light_settings.LightSettings(
                            color = openapi_client.models.color.Color(
                                alpha = 1.337, 
                                blue = 1.337, 
                                green = 1.337, 
                                red = 1.337, ), 
                            light_off_duration = '', 
                            light_on_duration = '', ), 
                        local_only = True, 
                        notification_count = 56, 
                        notification_priority = 'PRIORITY_UNSPECIFIED', 
                        proxy = 'PROXY_UNSPECIFIED', 
                        sound = '', 
                        sticky = True, 
                        tag = '', 
                        ticker = '', 
                        title = '', 
                        title_loc_args = [
                            ''
                            ], 
                        title_loc_key = '', 
                        vibrate_timings = [
                            ''
                            ], 
                        visibility = 'VISIBILITY_UNSPECIFIED', ), 
                    priority = 'NORMAL', 
                    restricted_package_name = '', 
                    ttl = '', ),
                apns = openapi_client.models.apns_config.ApnsConfig(
                    fcm_options = openapi_client.models.apns_fcm_options.ApnsFcmOptions(
                        analytics_label = '', 
                        image = '', ), 
                    headers = {
                        'key' : ''
                        }, 
                    payload = {
                        'key' : null
                        }, ),
                condition = '',
                data = {
                    'key' : ''
                    },
                fcm_options = openapi_client.models.fcm_options.FcmOptions(
                    analytics_label = '', ),
                name = '',
                notification = openapi_client.models.notification.Notification(
                    body = '', 
                    image = '', 
                    title = '', ),
                token = '',
                topic = '',
                webpush = openapi_client.models.webpush_config.WebpushConfig(
                    data = {
                        'key' : ''
                        }, 
                    fcm_options = openapi_client.models.webpush_fcm_options.WebpushFcmOptions(
                        analytics_label = '', 
                        link = '', ), 
                    headers = {
                        'key' : ''
                        }, 
                    notification = {
                        'key' : null
                        }, )
            )
        else:
            return Message(
        )
        """

    def testMessage(self):
        """Test Message"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

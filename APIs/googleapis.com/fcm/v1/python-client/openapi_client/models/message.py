# coding: utf-8

"""
    Firebase Cloud Messaging API

    FCM send API that provides a cross-platform messaging solution to reliably deliver messages at no cost.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.android_config import AndroidConfig
from openapi_client.models.apns_config import ApnsConfig
from openapi_client.models.fcm_options import FcmOptions
from openapi_client.models.notification import Notification
from openapi_client.models.webpush_config import WebpushConfig
from typing import Optional, Set
from typing_extensions import Self

class Message(BaseModel):
    """
    Message to send by Firebase Cloud Messaging Service.
    """ # noqa: E501
    android: Optional[AndroidConfig] = None
    apns: Optional[ApnsConfig] = None
    condition: Optional[StrictStr] = Field(default=None, description="Condition to send a message to, e.g. \"'foo' in topics && 'bar' in topics\".")
    data: Optional[Dict[str, StrictStr]] = Field(default=None, description="Input only. Arbitrary key/value payload, which must be UTF-8 encoded. The key should not be a reserved word (\"from\", \"message_type\", or any word starting with \"google\" or \"gcm\"). When sending payloads containing only data fields to iOS devices, only normal priority (`\"apns-priority\": \"5\"`) is allowed in [`ApnsConfig`](/docs/reference/fcm/rest/v1/projects.messages#apnsconfig).")
    fcm_options: Optional[FcmOptions] = Field(default=None, alias="fcmOptions")
    name: Optional[StrictStr] = Field(default=None, description="Output Only. The identifier of the message sent, in the format of `projects/*/messages/{message_id}`.")
    notification: Optional[Notification] = None
    token: Optional[StrictStr] = Field(default=None, description="Registration token to send a message to.")
    topic: Optional[StrictStr] = Field(default=None, description="Topic name to send a message to, e.g. \"weather\". Note: \"/topics/\" prefix should not be provided.")
    webpush: Optional[WebpushConfig] = None
    __properties: ClassVar[List[str]] = ["android", "apns", "condition", "data", "fcmOptions", "name", "notification", "token", "topic", "webpush"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Message from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of android
        if self.android:
            _dict['android'] = self.android.to_dict()
        # override the default output from pydantic by calling `to_dict()` of apns
        if self.apns:
            _dict['apns'] = self.apns.to_dict()
        # override the default output from pydantic by calling `to_dict()` of fcm_options
        if self.fcm_options:
            _dict['fcmOptions'] = self.fcm_options.to_dict()
        # override the default output from pydantic by calling `to_dict()` of notification
        if self.notification:
            _dict['notification'] = self.notification.to_dict()
        # override the default output from pydantic by calling `to_dict()` of webpush
        if self.webpush:
            _dict['webpush'] = self.webpush.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Message from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "android": AndroidConfig.from_dict(obj["android"]) if obj.get("android") is not None else None,
            "apns": ApnsConfig.from_dict(obj["apns"]) if obj.get("apns") is not None else None,
            "condition": obj.get("condition"),
            "data": obj.get("data"),
            "fcmOptions": FcmOptions.from_dict(obj["fcmOptions"]) if obj.get("fcmOptions") is not None else None,
            "name": obj.get("name"),
            "notification": Notification.from_dict(obj["notification"]) if obj.get("notification") is not None else None,
            "token": obj.get("token"),
            "topic": obj.get("topic"),
            "webpush": WebpushConfig.from_dict(obj["webpush"]) if obj.get("webpush") is not None else None
        })
        return _obj



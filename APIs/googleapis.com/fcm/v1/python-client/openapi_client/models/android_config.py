# coding: utf-8

"""
    Firebase Cloud Messaging API

    FCM send API that provides a cross-platform messaging solution to reliably deliver messages at no cost.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.android_fcm_options import AndroidFcmOptions
from openapi_client.models.android_notification import AndroidNotification
from typing import Optional, Set
from typing_extensions import Self

class AndroidConfig(BaseModel):
    """
    Android specific options for messages sent through [FCM connection server](https://goo.gl/4GLdUl).
    """ # noqa: E501
    collapse_key: Optional[StrictStr] = Field(default=None, description="An identifier of a group of messages that can be collapsed, so that only the last message gets sent when delivery can be resumed. A maximum of 4 different collapse keys is allowed at any given time.", alias="collapseKey")
    data: Optional[Dict[str, StrictStr]] = Field(default=None, description="Arbitrary key/value payload. If present, it will override google.firebase.fcm.v1.Message.data.")
    direct_boot_ok: Optional[StrictBool] = Field(default=None, description="If set to true, messages will be allowed to be delivered to the app while the device is in direct boot mode. See [Support Direct Boot mode](https://developer.android.com/training/articles/direct-boot).", alias="directBootOk")
    fcm_options: Optional[AndroidFcmOptions] = Field(default=None, alias="fcmOptions")
    notification: Optional[AndroidNotification] = None
    priority: Optional[StrictStr] = Field(default=None, description="Message priority. Can take \"normal\" and \"high\" values. For more information, see [Setting the priority of a message](https://goo.gl/GjONJv).")
    restricted_package_name: Optional[StrictStr] = Field(default=None, description="Package name of the application where the registration token must match in order to receive the message.", alias="restrictedPackageName")
    ttl: Optional[StrictStr] = Field(default=None, description="How long (in seconds) the message should be kept in FCM storage if the device is offline. The maximum time to live supported is 4 weeks, and the default value is 4 weeks if not set. Set it to 0 if want to send the message immediately. In JSON format, the Duration type is encoded as a string rather than an object, where the string ends in the suffix \"s\" (indicating seconds) and is preceded by the number of seconds, with nanoseconds expressed as fractional seconds. For example, 3 seconds with 0 nanoseconds should be encoded in JSON format as \"3s\", while 3 seconds and 1 nanosecond should be expressed in JSON format as \"3.000000001s\". The ttl will be rounded down to the nearest second.")
    __properties: ClassVar[List[str]] = ["collapseKey", "data", "directBootOk", "fcmOptions", "notification", "priority", "restrictedPackageName", "ttl"]

    @field_validator('priority')
    def priority_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['NORMAL', 'HIGH']):
            raise ValueError("must be one of enum values ('NORMAL', 'HIGH')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AndroidConfig from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of fcm_options
        if self.fcm_options:
            _dict['fcmOptions'] = self.fcm_options.to_dict()
        # override the default output from pydantic by calling `to_dict()` of notification
        if self.notification:
            _dict['notification'] = self.notification.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AndroidConfig from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "collapseKey": obj.get("collapseKey"),
            "data": obj.get("data"),
            "directBootOk": obj.get("directBootOk"),
            "fcmOptions": AndroidFcmOptions.from_dict(obj["fcmOptions"]) if obj.get("fcmOptions") is not None else None,
            "notification": AndroidNotification.from_dict(obj["notification"]) if obj.get("notification") is not None else None,
            "priority": obj.get("priority"),
            "restrictedPackageName": obj.get("restrictedPackageName"),
            "ttl": obj.get("ttl")
        })
        return _obj



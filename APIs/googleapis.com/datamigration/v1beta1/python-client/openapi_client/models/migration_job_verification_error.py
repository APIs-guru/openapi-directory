# coding: utf-8

"""
    Database Migration API

    Manage Cloud Database Migration Service resources on Google Cloud Platform.

    The version of the OpenAPI document: v1beta1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class MigrationJobVerificationError(BaseModel):
    """
    Error message of a verification Migration job.
    """ # noqa: E501
    error_code: Optional[StrictStr] = Field(default=None, description="Output only. An instance of ErrorCode specifying the error that occurred.", alias="errorCode")
    error_detail_message: Optional[StrictStr] = Field(default=None, description="Output only. A specific detailed error message, if supplied by the engine.", alias="errorDetailMessage")
    error_message: Optional[StrictStr] = Field(default=None, description="Output only. A formatted message with further details about the error and a CTA.", alias="errorMessage")
    __properties: ClassVar[List[str]] = ["errorCode", "errorDetailMessage", "errorMessage"]

    @field_validator('error_code')
    def error_code_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['ERROR_CODE_UNSPECIFIED', 'CONNECTION_FAILURE', 'AUTHENTICATION_FAILURE', 'INVALID_CONNECTION_PROFILE_CONFIG', 'VERSION_INCOMPATIBILITY', 'CONNECTION_PROFILE_TYPES_INCOMPATIBILITY', 'UNSUPPORTED_GTID_MODE', 'UNSUPPORTED_DEFINER', 'CANT_RESTART_RUNNING_MIGRATION', 'TABLES_WITH_LIMITED_SUPPORT', 'UNSUPPORTED_DATABASE_LOCALE', 'UNSUPPORTED_DATABASE_FDW_CONFIG', 'ERROR_RDBMS', 'SOURCE_SIZE_EXCEEDS_THRESHOLD', 'EXISTING_CONFLICTING_DATABASES', 'PARALLEL_IMPORT_INSUFFICIENT_PRIVILEGE', 'EXISTING_DATA', 'SOURCE_MAX_SUBSCRIPTIONS']):
            raise ValueError("must be one of enum values ('ERROR_CODE_UNSPECIFIED', 'CONNECTION_FAILURE', 'AUTHENTICATION_FAILURE', 'INVALID_CONNECTION_PROFILE_CONFIG', 'VERSION_INCOMPATIBILITY', 'CONNECTION_PROFILE_TYPES_INCOMPATIBILITY', 'UNSUPPORTED_GTID_MODE', 'UNSUPPORTED_DEFINER', 'CANT_RESTART_RUNNING_MIGRATION', 'TABLES_WITH_LIMITED_SUPPORT', 'UNSUPPORTED_DATABASE_LOCALE', 'UNSUPPORTED_DATABASE_FDW_CONFIG', 'ERROR_RDBMS', 'SOURCE_SIZE_EXCEEDS_THRESHOLD', 'EXISTING_CONFLICTING_DATABASES', 'PARALLEL_IMPORT_INSUFFICIENT_PRIVILEGE', 'EXISTING_DATA', 'SOURCE_MAX_SUBSCRIPTIONS')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of MigrationJobVerificationError from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "error_code",
            "error_detail_message",
            "error_message",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of MigrationJobVerificationError from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "errorCode": obj.get("errorCode"),
            "errorDetailMessage": obj.get("errorDetailMessage"),
            "errorMessage": obj.get("errorMessage")
        })
        return _obj



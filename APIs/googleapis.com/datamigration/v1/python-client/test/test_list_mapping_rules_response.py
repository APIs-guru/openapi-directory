# coding: utf-8

"""
    Database Migration API

    Manage Cloud Database Migration Service resources on Google Cloud Platform.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.list_mapping_rules_response import ListMappingRulesResponse

class TestListMappingRulesResponse(unittest.TestCase):
    """ListMappingRulesResponse unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> ListMappingRulesResponse:
        """Test ListMappingRulesResponse
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `ListMappingRulesResponse`
        """
        model = ListMappingRulesResponse()
        if include_optional:
            return ListMappingRulesResponse(
                mapping_rules = [
                    openapi_client.models.mapping_rule.MappingRule(
                        conditional_column_set_value = openapi_client.models.conditional_column_set_value.ConditionalColumnSetValue(
                            custom_features = {
                                'key' : null
                                }, 
                            source_numeric_filter = openapi_client.models.source_numeric_filter.SourceNumericFilter(
                                numeric_filter_option = 'NUMERIC_FILTER_OPTION_UNSPECIFIED', 
                                source_max_precision_filter = 56, 
                                source_max_scale_filter = 56, 
                                source_min_precision_filter = 56, 
                                source_min_scale_filter = 56, ), 
                            source_text_filter = openapi_client.models.source_text_filter.SourceTextFilter(
                                source_max_length_filter = '', 
                                source_min_length_filter = '', ), 
                            value_transformation = openapi_client.models.value_transformation.ValueTransformation(
                                apply_hash = openapi_client.models.apply_hash.ApplyHash(
                                    uuid_from_bytes = openapi_client.models.uuid_from_bytes.uuidFromBytes(), ), 
                                assign_max_value = openapi_client.models.uuid_from_bytes.uuidFromBytes(), 
                                assign_min_value = openapi_client.models.uuid_from_bytes.uuidFromBytes(), 
                                assign_null = openapi_client.models.uuid_from_bytes.uuidFromBytes(), 
                                assign_specific_value = openapi_client.models.assign_specific_value.AssignSpecificValue(
                                    value = '', ), 
                                double_comparison = openapi_client.models.double_comparison_filter.DoubleComparisonFilter(
                                    value = 1.337, 
                                    value_comparison = 'VALUE_COMPARISON_UNSPECIFIED', ), 
                                int_comparison = openapi_client.models.int_comparison_filter.IntComparisonFilter(
                                    value = '', 
                                    value_comparison = 'VALUE_COMPARISON_UNSPECIFIED', ), 
                                is_null = openapi_client.models.uuid_from_bytes.uuidFromBytes(), 
                                round_scale = openapi_client.models.round_to_scale.RoundToScale(
                                    scale = 56, ), 
                                value_list = openapi_client.models.value_list_filter.ValueListFilter(
                                    ignore_case = True, 
                                    value_present_list = 'VALUE_PRESENT_IN_LIST_UNSPECIFIED', 
                                    values = [
                                        ''
                                        ], ), ), ), 
                        convert_rowid_column = openapi_client.models.convert_row_id_to_column.ConvertRowIdToColumn(
                            only_if_no_primary_key = True, ), 
                        display_name = '', 
                        entity_move = openapi_client.models.entity_move.EntityMove(
                            new_schema = '', ), 
                        filter = openapi_client.models.mapping_rule_filter.MappingRuleFilter(
                            entities = [
                                ''
                                ], 
                            entity_name_contains = '', 
                            entity_name_prefix = '', 
                            entity_name_suffix = '', 
                            parent_entity = '', ), 
                        filter_table_columns = openapi_client.models.filter_table_columns.FilterTableColumns(
                            exclude_columns = [
                                ''
                                ], 
                            include_columns = [
                                ''
                                ], ), 
                        multi_column_data_type_change = openapi_client.models.multi_column_datatype_change.MultiColumnDatatypeChange(
                            new_data_type = '', 
                            override_fractional_seconds_precision = 56, 
                            override_length = '', 
                            override_precision = 56, 
                            override_scale = 56, 
                            source_data_type_filter = '', ), 
                        multi_entity_rename = openapi_client.models.multi_entity_rename.MultiEntityRename(
                            new_name_pattern = '', 
                            source_name_transformation = 'ENTITY_NAME_TRANSFORMATION_UNSPECIFIED', ), 
                        name = '', 
                        revision_create_time = '', 
                        revision_id = '', 
                        rule_order = '', 
                        rule_scope = 'DATABASE_ENTITY_TYPE_UNSPECIFIED', 
                        set_table_primary_key = openapi_client.models.set_table_primary_key.SetTablePrimaryKey(
                            primary_key = '', 
                            primary_key_columns = [
                                ''
                                ], ), 
                        single_column_change = openapi_client.models.single_column_change.SingleColumnChange(
                            array = True, 
                            array_length = 56, 
                            auto_generated = True, 
                            charset = '', 
                            collation = '', 
                            comment = '', 
                            data_type = '', 
                            fractional_seconds_precision = 56, 
                            length = '', 
                            nullable = True, 
                            precision = 56, 
                            scale = 56, 
                            set_values = [
                                ''
                                ], 
                            udt = True, ), 
                        single_entity_rename = openapi_client.models.single_entity_rename.SingleEntityRename(
                            new_name = '', ), 
                        single_package_change = openapi_client.models.single_package_change.SinglePackageChange(
                            package_body = '', 
                            package_description = '', ), 
                        source_sql_change = openapi_client.models.source_sql_change.SourceSqlChange(
                            sql_code = '', ), 
                        state = 'STATE_UNSPECIFIED', )
                    ],
                next_page_token = ''
            )
        else:
            return ListMappingRulesResponse(
        )
        """

    def testListMappingRulesResponse(self):
        """Test ListMappingRulesResponse"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

# coding: utf-8

"""
    Database Migration API

    Manage Cloud Database Migration Service resources on Google Cloud Platform.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.cloud_sql_settings import CloudSqlSettings

class TestCloudSqlSettings(unittest.TestCase):
    """CloudSqlSettings unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> CloudSqlSettings:
        """Test CloudSqlSettings
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `CloudSqlSettings`
        """
        model = CloudSqlSettings()
        if include_optional:
            return CloudSqlSettings(
                activation_policy = 'SQL_ACTIVATION_POLICY_UNSPECIFIED',
                auto_storage_increase = True,
                availability_type = 'SQL_AVAILABILITY_TYPE_UNSPECIFIED',
                cmek_key_name = '',
                collation = '',
                data_cache_config = openapi_client.models.data_cache_config.DataCacheConfig(
                    data_cache_enabled = True, ),
                data_disk_size_gb = '',
                data_disk_type = 'SQL_DATA_DISK_TYPE_UNSPECIFIED',
                database_flags = {
                    'key' : ''
                    },
                database_version = 'SQL_DATABASE_VERSION_UNSPECIFIED',
                edition = 'EDITION_UNSPECIFIED',
                ip_config = openapi_client.models.sql_ip_config.SqlIpConfig(
                    allocated_ip_range = '', 
                    authorized_networks = [
                        openapi_client.models.sql_acl_entry.SqlAclEntry(
                            expire_time = '', 
                            label = '', 
                            ttl = '', 
                            value = '', )
                        ], 
                    enable_ipv4 = True, 
                    private_network = '', 
                    require_ssl = True, ),
                root_password = '',
                root_password_set = True,
                secondary_zone = '',
                source_id = '',
                storage_auto_resize_limit = '',
                tier = '',
                user_labels = {
                    'key' : ''
                    },
                zone = ''
            )
        else:
            return CloudSqlSettings(
        )
        """

    def testCloudSqlSettings(self):
        """Test CloudSqlSettings"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

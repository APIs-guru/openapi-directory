# coding: utf-8

"""
    Database Migration API

    Manage Cloud Database Migration Service resources on Google Cloud Platform.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.multi_column_datatype_change import MultiColumnDatatypeChange

class TestMultiColumnDatatypeChange(unittest.TestCase):
    """MultiColumnDatatypeChange unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> MultiColumnDatatypeChange:
        """Test MultiColumnDatatypeChange
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `MultiColumnDatatypeChange`
        """
        model = MultiColumnDatatypeChange()
        if include_optional:
            return MultiColumnDatatypeChange(
                custom_features = {
                    'key' : null
                    },
                new_data_type = '',
                override_fractional_seconds_precision = 56,
                override_length = '',
                override_precision = 56,
                override_scale = 56,
                source_data_type_filter = '',
                source_numeric_filter = openapi_client.models.source_numeric_filter.SourceNumericFilter(
                    numeric_filter_option = 'NUMERIC_FILTER_OPTION_UNSPECIFIED', 
                    source_max_precision_filter = 56, 
                    source_max_scale_filter = 56, 
                    source_min_precision_filter = 56, 
                    source_min_scale_filter = 56, ),
                source_text_filter = openapi_client.models.source_text_filter.SourceTextFilter(
                    source_max_length_filter = '', 
                    source_min_length_filter = '', )
            )
        else:
            return MultiColumnDatatypeChange(
        )
        """

    def testMultiColumnDatatypeChange(self):
        """Test MultiColumnDatatypeChange"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

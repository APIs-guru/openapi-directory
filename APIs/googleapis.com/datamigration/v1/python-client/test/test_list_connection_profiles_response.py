# coding: utf-8

"""
    Database Migration API

    Manage Cloud Database Migration Service resources on Google Cloud Platform.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.list_connection_profiles_response import ListConnectionProfilesResponse

class TestListConnectionProfilesResponse(unittest.TestCase):
    """ListConnectionProfilesResponse unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> ListConnectionProfilesResponse:
        """Test ListConnectionProfilesResponse
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `ListConnectionProfilesResponse`
        """
        model = ListConnectionProfilesResponse()
        if include_optional:
            return ListConnectionProfilesResponse(
                connection_profiles = [
                    openapi_client.models.connection_profile.ConnectionProfile(
                        alloydb = openapi_client.models.alloy_db_connection_profile.AlloyDbConnectionProfile(
                            cluster_id = '', 
                            settings = openapi_client.models.alloy_db_settings.AlloyDbSettings(
                                database_version = 'DATABASE_VERSION_UNSPECIFIED', 
                                encryption_config = openapi_client.models.encryption_config.EncryptionConfig(
                                    kms_key_name = '', ), 
                                initial_user = openapi_client.models.user_password.UserPassword(
                                    password = '', 
                                    password_set = True, 
                                    user = '', ), 
                                labels = {
                                    'key' : ''
                                    }, 
                                primary_instance_settings = openapi_client.models.primary_instance_settings.PrimaryInstanceSettings(
                                    database_flags = {
                                        'key' : ''
                                        }, 
                                    id = '', 
                                    machine_config = openapi_client.models.machine_config.MachineConfig(
                                        cpu_count = 56, ), 
                                    private_ip = '', ), 
                                vpc_network = '', ), ), 
                        cloudsql = openapi_client.models.cloud_sql_connection_profile.CloudSqlConnectionProfile(
                            additional_public_ip = '', 
                            cloud_sql_id = '', 
                            private_ip = '', 
                            public_ip = '', ), 
                        create_time = '', 
                        display_name = '', 
                        error = openapi_client.models.status.Status(
                            code = 56, 
                            details = [
                                {
                                    'key' : null
                                    }
                                ], 
                            message = '', ), 
                        labels = {
                            'key' : ''
                            }, 
                        mysql = openapi_client.models.my_sql_connection_profile.MySqlConnectionProfile(
                            cloud_sql_id = '', 
                            host = '', 
                            password = '', 
                            password_set = True, 
                            port = 56, 
                            ssl = openapi_client.models.ssl_config.SslConfig(
                                ca_certificate = '', 
                                client_certificate = '', 
                                client_key = '', 
                                type = 'SSL_TYPE_UNSPECIFIED', ), 
                            username = '', ), 
                        name = '', 
                        oracle = openapi_client.models.oracle_connection_profile.OracleConnectionProfile(
                            database_service = '', 
                            forward_ssh_connectivity = openapi_client.models.forward_ssh_tunnel_connectivity.ForwardSshTunnelConnectivity(
                                hostname = '', 
                                password = '', 
                                port = 56, 
                                private_key = '', 
                                username = '', ), 
                            host = '', 
                            password = '', 
                            password_set = True, 
                            port = 56, 
                            private_connectivity = openapi_client.models.private_connectivity.PrivateConnectivity(
                                private_connection = '', ), 
                            static_service_ip_connectivity = openapi_client.models.static_service_ip_connectivity.StaticServiceIpConnectivity(), 
                            username = '', ), 
                        postgresql = openapi_client.models.postgre_sql_connection_profile.PostgreSqlConnectionProfile(
                            alloydb_cluster_id = '', 
                            cloud_sql_id = '', 
                            host = '', 
                            network_architecture = 'NETWORK_ARCHITECTURE_UNSPECIFIED', 
                            password = '', 
                            password_set = True, 
                            port = 56, 
                            private_service_connect_connectivity = openapi_client.models.private_service_connect_connectivity.PrivateServiceConnectConnectivity(
                                service_attachment = '', ), 
                            static_ip_connectivity = openapi_client.models.static_ip_connectivity.StaticIpConnectivity(), 
                            username = '', ), 
                        provider = 'DATABASE_PROVIDER_UNSPECIFIED', 
                        state = 'STATE_UNSPECIFIED', 
                        update_time = '', )
                    ],
                next_page_token = '',
                unreachable = [
                    ''
                    ]
            )
        else:
            return ListConnectionProfilesResponse(
        )
        """

    def testListConnectionProfilesResponse(self):
        """Test ListConnectionProfilesResponse"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

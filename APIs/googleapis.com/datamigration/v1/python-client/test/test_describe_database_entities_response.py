# coding: utf-8

"""
    Database Migration API

    Manage Cloud Database Migration Service resources on Google Cloud Platform.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.describe_database_entities_response import DescribeDatabaseEntitiesResponse

class TestDescribeDatabaseEntitiesResponse(unittest.TestCase):
    """DescribeDatabaseEntitiesResponse unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> DescribeDatabaseEntitiesResponse:
        """Test DescribeDatabaseEntitiesResponse
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `DescribeDatabaseEntitiesResponse`
        """
        model = DescribeDatabaseEntitiesResponse()
        if include_optional:
            return DescribeDatabaseEntitiesResponse(
                database_entities = [
                    openapi_client.models.database_entity.DatabaseEntity(
                        database = openapi_client.models.database_instance_entity.DatabaseInstanceEntity(
                            custom_features = {
                                'key' : null
                                }, ), 
                        database_function = openapi_client.models.function_entity.FunctionEntity(
                            sql_code = '', ), 
                        database_package = openapi_client.models.package_entity.PackageEntity(
                            package_body = '', 
                            package_sql_code = '', ), 
                        entity_ddl = [
                            openapi_client.models.entity_ddl.EntityDdl(
                                ddl = '', 
                                ddl_type = '', 
                                entity = '', 
                                entity_type = 'DATABASE_ENTITY_TYPE_UNSPECIFIED', 
                                issue_id = [
                                    ''
                                    ], )
                            ], 
                        entity_type = 'DATABASE_ENTITY_TYPE_UNSPECIFIED', 
                        issues = [
                            openapi_client.models.entity_issue.EntityIssue(
                                code = '', 
                                ddl = '', 
                                entity_type = 'DATABASE_ENTITY_TYPE_UNSPECIFIED', 
                                id = '', 
                                message = '', 
                                position = openapi_client.models.position.Position(
                                    column = 56, 
                                    length = 56, 
                                    line = 56, 
                                    offset = 56, ), 
                                severity = 'ISSUE_SEVERITY_UNSPECIFIED', 
                                type = 'ISSUE_TYPE_UNSPECIFIED', )
                            ], 
                        mappings = [
                            openapi_client.models.entity_mapping.EntityMapping(
                                draft_entity = '', 
                                draft_type = 'DATABASE_ENTITY_TYPE_UNSPECIFIED', 
                                mapping_log = [
                                    openapi_client.models.entity_mapping_log_entry.EntityMappingLogEntry(
                                        mapping_comment = '', 
                                        rule_id = '', 
                                        rule_revision_id = '', )
                                    ], 
                                source_entity = '', 
                                source_type = 'DATABASE_ENTITY_TYPE_UNSPECIFIED', )
                            ], 
                        materialized_view = openapi_client.models.materialized_view_entity.MaterializedViewEntity(
                            sql_code = '', ), 
                        parent_entity = '', 
                        schema = openapi_client.models.schema_entity.SchemaEntity(), 
                        sequence = openapi_client.models.sequence_entity.SequenceEntity(
                            cache = '', 
                            cycle = True, 
                            increment = '', 
                            max_value = 'YQ==', 
                            min_value = 'YQ==', 
                            start_value = 'YQ==', ), 
                        short_name = '', 
                        stored_procedure = openapi_client.models.stored_procedure_entity.StoredProcedureEntity(
                            sql_code = '', ), 
                        synonym = openapi_client.models.synonym_entity.SynonymEntity(
                            source_entity = '', 
                            source_type = 'DATABASE_ENTITY_TYPE_UNSPECIFIED', ), 
                        table = openapi_client.models.table_entity.TableEntity(
                            columns = [
                                openapi_client.models.column_entity.ColumnEntity(
                                    array = True, 
                                    array_length = 56, 
                                    auto_generated = True, 
                                    charset = '', 
                                    collation = '', 
                                    comment = '', 
                                    data_type = '', 
                                    default_value = '', 
                                    fractional_seconds_precision = 56, 
                                    length = '', 
                                    name = '', 
                                    nullable = True, 
                                    ordinal_position = 56, 
                                    precision = 56, 
                                    scale = 56, 
                                    set_values = [
                                        ''
                                        ], 
                                    udt = True, )
                                ], 
                            comment = '', 
                            constraints = [
                                openapi_client.models.constraint_entity.ConstraintEntity(
                                    name = '', 
                                    reference_columns = [
                                        ''
                                        ], 
                                    reference_table = '', 
                                    table_columns = [
                                        ''
                                        ], 
                                    table_name = '', 
                                    type = '', )
                                ], 
                            indices = [
                                openapi_client.models.index_entity.IndexEntity(
                                    name = '', 
                                    type = '', 
                                    unique = True, )
                                ], 
                            triggers = [
                                openapi_client.models.trigger_entity.TriggerEntity(
                                    name = '', 
                                    sql_code = '', 
                                    trigger_type = '', 
                                    triggering_events = [
                                        ''
                                        ], )
                                ], ), 
                        tree = 'TREE_TYPE_UNSPECIFIED', 
                        udt = openapi_client.models.udt_entity.UDTEntity(
                            udt_body = '', 
                            udt_sql_code = '', ), 
                        view = openapi_client.models.view_entity.ViewEntity(
                            sql_code = '', ), )
                    ],
                next_page_token = ''
            )
        else:
            return DescribeDatabaseEntitiesResponse(
        )
        """

    def testDescribeDatabaseEntitiesResponse(self):
        """Test DescribeDatabaseEntitiesResponse"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

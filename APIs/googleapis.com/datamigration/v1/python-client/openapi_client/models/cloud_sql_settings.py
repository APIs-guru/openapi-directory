# coding: utf-8

"""
    Database Migration API

    Manage Cloud Database Migration Service resources on Google Cloud Platform.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.data_cache_config import DataCacheConfig
from openapi_client.models.sql_ip_config import SqlIpConfig
from typing import Optional, Set
from typing_extensions import Self

class CloudSqlSettings(BaseModel):
    """
    Settings for creating a Cloud SQL database instance.
    """ # noqa: E501
    activation_policy: Optional[StrictStr] = Field(default=None, description="The activation policy specifies when the instance is activated; it is applicable only when the instance state is 'RUNNABLE'. Valid values: 'ALWAYS': The instance is on, and remains so even in the absence of connection requests. `NEVER`: The instance is off; it is not activated, even if a connection request arrives.", alias="activationPolicy")
    auto_storage_increase: Optional[StrictBool] = Field(default=None, description="[default: ON] If you enable this setting, Cloud SQL checks your available storage every 30 seconds. If the available storage falls below a threshold size, Cloud SQL automatically adds additional storage capacity. If the available storage repeatedly falls below the threshold size, Cloud SQL continues to add storage until it reaches the maximum of 30 TB.", alias="autoStorageIncrease")
    availability_type: Optional[StrictStr] = Field(default=None, description="Optional. Availability type. Potential values: * `ZONAL`: The instance serves data from only one zone. Outages in that zone affect data availability. * `REGIONAL`: The instance can serve data from more than one zone in a region (it is highly available).", alias="availabilityType")
    cmek_key_name: Optional[StrictStr] = Field(default=None, description="The KMS key name used for the csql instance.", alias="cmekKeyName")
    collation: Optional[StrictStr] = Field(default=None, description="The Cloud SQL default instance level collation.")
    data_cache_config: Optional[DataCacheConfig] = Field(default=None, alias="dataCacheConfig")
    data_disk_size_gb: Optional[StrictStr] = Field(default=None, description="The storage capacity available to the database, in GB. The minimum (and default) size is 10GB.", alias="dataDiskSizeGb")
    data_disk_type: Optional[StrictStr] = Field(default=None, description="The type of storage: `PD_SSD` (default) or `PD_HDD`.", alias="dataDiskType")
    database_flags: Optional[Dict[str, StrictStr]] = Field(default=None, description="The database flags passed to the Cloud SQL instance at startup. An object containing a list of \"key\": value pairs. Example: { \"name\": \"wrench\", \"mass\": \"1.3kg\", \"count\": \"3\" }.", alias="databaseFlags")
    database_version: Optional[StrictStr] = Field(default=None, description="The database engine type and version.", alias="databaseVersion")
    edition: Optional[StrictStr] = Field(default=None, description="Optional. The edition of the given Cloud SQL instance.")
    ip_config: Optional[SqlIpConfig] = Field(default=None, alias="ipConfig")
    root_password: Optional[StrictStr] = Field(default=None, description="Input only. Initial root password.", alias="rootPassword")
    root_password_set: Optional[StrictBool] = Field(default=None, description="Output only. Indicates If this connection profile root password is stored.", alias="rootPasswordSet")
    secondary_zone: Optional[StrictStr] = Field(default=None, description="Optional. The Google Cloud Platform zone where the failover Cloud SQL database instance is located. Used when the Cloud SQL database availability type is REGIONAL (i.e. multiple zones / highly available).", alias="secondaryZone")
    source_id: Optional[StrictStr] = Field(default=None, description="The Database Migration Service source connection profile ID, in the format: `projects/my_project_name/locations/us-central1/connectionProfiles/connection_profile_ID`", alias="sourceId")
    storage_auto_resize_limit: Optional[StrictStr] = Field(default=None, description="The maximum size to which storage capacity can be automatically increased. The default value is 0, which specifies that there is no limit.", alias="storageAutoResizeLimit")
    tier: Optional[StrictStr] = Field(default=None, description="The tier (or machine type) for this instance, for example: `db-n1-standard-1` (MySQL instances) or `db-custom-1-3840` (PostgreSQL instances). For more information, see [Cloud SQL Instance Settings](https://cloud.google.com/sql/docs/mysql/instance-settings).")
    user_labels: Optional[Dict[str, StrictStr]] = Field(default=None, description="The resource labels for a Cloud SQL instance to use to annotate any related underlying resources such as Compute Engine VMs. An object containing a list of \"key\": \"value\" pairs. Example: `{ \"name\": \"wrench\", \"mass\": \"18kg\", \"count\": \"3\" }`.", alias="userLabels")
    zone: Optional[StrictStr] = Field(default=None, description="The Google Cloud Platform zone where your Cloud SQL database instance is located.")
    __properties: ClassVar[List[str]] = ["activationPolicy", "autoStorageIncrease", "availabilityType", "cmekKeyName", "collation", "dataCacheConfig", "dataDiskSizeGb", "dataDiskType", "databaseFlags", "databaseVersion", "edition", "ipConfig", "rootPassword", "rootPasswordSet", "secondaryZone", "sourceId", "storageAutoResizeLimit", "tier", "userLabels", "zone"]

    @field_validator('activation_policy')
    def activation_policy_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['SQL_ACTIVATION_POLICY_UNSPECIFIED', 'ALWAYS', 'NEVER']):
            raise ValueError("must be one of enum values ('SQL_ACTIVATION_POLICY_UNSPECIFIED', 'ALWAYS', 'NEVER')")
        return value

    @field_validator('availability_type')
    def availability_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['SQL_AVAILABILITY_TYPE_UNSPECIFIED', 'ZONAL', 'REGIONAL']):
            raise ValueError("must be one of enum values ('SQL_AVAILABILITY_TYPE_UNSPECIFIED', 'ZONAL', 'REGIONAL')")
        return value

    @field_validator('data_disk_type')
    def data_disk_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['SQL_DATA_DISK_TYPE_UNSPECIFIED', 'PD_SSD', 'PD_HDD']):
            raise ValueError("must be one of enum values ('SQL_DATA_DISK_TYPE_UNSPECIFIED', 'PD_SSD', 'PD_HDD')")
        return value

    @field_validator('database_version')
    def database_version_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['SQL_DATABASE_VERSION_UNSPECIFIED', 'MYSQL_5_6', 'MYSQL_5_7', 'MYSQL_8_0', 'MYSQL_8_0_18', 'MYSQL_8_0_26', 'MYSQL_8_0_27', 'MYSQL_8_0_28', 'MYSQL_8_0_30', 'MYSQL_8_0_31', 'MYSQL_8_0_32', 'MYSQL_8_0_33', 'MYSQL_8_0_34', 'MYSQL_8_0_35', 'POSTGRES_9_6', 'POSTGRES_11', 'POSTGRES_10', 'POSTGRES_12', 'POSTGRES_13', 'POSTGRES_14', 'POSTGRES_15']):
            raise ValueError("must be one of enum values ('SQL_DATABASE_VERSION_UNSPECIFIED', 'MYSQL_5_6', 'MYSQL_5_7', 'MYSQL_8_0', 'MYSQL_8_0_18', 'MYSQL_8_0_26', 'MYSQL_8_0_27', 'MYSQL_8_0_28', 'MYSQL_8_0_30', 'MYSQL_8_0_31', 'MYSQL_8_0_32', 'MYSQL_8_0_33', 'MYSQL_8_0_34', 'MYSQL_8_0_35', 'POSTGRES_9_6', 'POSTGRES_11', 'POSTGRES_10', 'POSTGRES_12', 'POSTGRES_13', 'POSTGRES_14', 'POSTGRES_15')")
        return value

    @field_validator('edition')
    def edition_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['EDITION_UNSPECIFIED', 'ENTERPRISE', 'ENTERPRISE_PLUS']):
            raise ValueError("must be one of enum values ('EDITION_UNSPECIFIED', 'ENTERPRISE', 'ENTERPRISE_PLUS')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CloudSqlSettings from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "root_password_set",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of data_cache_config
        if self.data_cache_config:
            _dict['dataCacheConfig'] = self.data_cache_config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of ip_config
        if self.ip_config:
            _dict['ipConfig'] = self.ip_config.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CloudSqlSettings from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "activationPolicy": obj.get("activationPolicy"),
            "autoStorageIncrease": obj.get("autoStorageIncrease"),
            "availabilityType": obj.get("availabilityType"),
            "cmekKeyName": obj.get("cmekKeyName"),
            "collation": obj.get("collation"),
            "dataCacheConfig": DataCacheConfig.from_dict(obj["dataCacheConfig"]) if obj.get("dataCacheConfig") is not None else None,
            "dataDiskSizeGb": obj.get("dataDiskSizeGb"),
            "dataDiskType": obj.get("dataDiskType"),
            "databaseFlags": obj.get("databaseFlags"),
            "databaseVersion": obj.get("databaseVersion"),
            "edition": obj.get("edition"),
            "ipConfig": SqlIpConfig.from_dict(obj["ipConfig"]) if obj.get("ipConfig") is not None else None,
            "rootPassword": obj.get("rootPassword"),
            "rootPasswordSet": obj.get("rootPasswordSet"),
            "secondaryZone": obj.get("secondaryZone"),
            "sourceId": obj.get("sourceId"),
            "storageAutoResizeLimit": obj.get("storageAutoResizeLimit"),
            "tier": obj.get("tier"),
            "userLabels": obj.get("userLabels"),
            "zone": obj.get("zone")
        })
        return _obj



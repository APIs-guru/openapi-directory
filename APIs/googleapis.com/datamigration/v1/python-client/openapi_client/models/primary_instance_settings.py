# coding: utf-8

"""
    Database Migration API

    Manage Cloud Database Migration Service resources on Google Cloud Platform.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.machine_config import MachineConfig
from typing import Optional, Set
from typing_extensions import Self

class PrimaryInstanceSettings(BaseModel):
    """
    Settings for the cluster's primary instance
    """ # noqa: E501
    database_flags: Optional[Dict[str, StrictStr]] = Field(default=None, description="Database flags to pass to AlloyDB when DMS is creating the AlloyDB cluster and instances. See the AlloyDB documentation for how these can be used.", alias="databaseFlags")
    id: Optional[StrictStr] = Field(default=None, description="Required. The ID of the AlloyDB primary instance. The ID must satisfy the regex expression \"[a-z0-9-]+\".")
    labels: Optional[Dict[str, StrictStr]] = Field(default=None, description="Labels for the AlloyDB primary instance created by DMS. An object containing a list of 'key', 'value' pairs.")
    machine_config: Optional[MachineConfig] = Field(default=None, alias="machineConfig")
    private_ip: Optional[StrictStr] = Field(default=None, description="Output only. The private IP address for the Instance. This is the connection endpoint for an end-user application.", alias="privateIp")
    __properties: ClassVar[List[str]] = ["databaseFlags", "id", "labels", "machineConfig", "privateIp"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PrimaryInstanceSettings from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "private_ip",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of machine_config
        if self.machine_config:
            _dict['machineConfig'] = self.machine_config.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PrimaryInstanceSettings from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "databaseFlags": obj.get("databaseFlags"),
            "id": obj.get("id"),
            "labels": obj.get("labels"),
            "machineConfig": MachineConfig.from_dict(obj["machineConfig"]) if obj.get("machineConfig") is not None else None,
            "privateIp": obj.get("privateIp")
        })
        return _obj



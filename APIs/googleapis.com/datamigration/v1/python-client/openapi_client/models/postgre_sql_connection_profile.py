# coding: utf-8

"""
    Database Migration API

    Manage Cloud Database Migration Service resources on Google Cloud Platform.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.private_service_connect_connectivity import PrivateServiceConnectConnectivity
from openapi_client.models.ssl_config import SslConfig
from typing import Optional, Set
from typing_extensions import Self

class PostgreSqlConnectionProfile(BaseModel):
    """
    Specifies connection parameters required specifically for PostgreSQL databases.
    """ # noqa: E501
    alloydb_cluster_id: Optional[StrictStr] = Field(default=None, description="Optional. If the destination is an AlloyDB database, use this field to provide the AlloyDB cluster ID.", alias="alloydbClusterId")
    cloud_sql_id: Optional[StrictStr] = Field(default=None, description="If the source is a Cloud SQL database, use this field to provide the Cloud SQL instance ID of the source.", alias="cloudSqlId")
    host: Optional[StrictStr] = Field(default=None, description="Required. The IP or hostname of the source PostgreSQL database.")
    network_architecture: Optional[StrictStr] = Field(default=None, description="Output only. If the source is a Cloud SQL database, this field indicates the network architecture it's associated with.", alias="networkArchitecture")
    password: Optional[StrictStr] = Field(default=None, description="Required. Input only. The password for the user that Database Migration Service will be using to connect to the database. This field is not returned on request, and the value is encrypted when stored in Database Migration Service.")
    password_set: Optional[StrictBool] = Field(default=None, description="Output only. Indicates If this connection profile password is stored.", alias="passwordSet")
    port: Optional[StrictInt] = Field(default=None, description="Required. The network port of the source PostgreSQL database.")
    private_service_connect_connectivity: Optional[PrivateServiceConnectConnectivity] = Field(default=None, alias="privateServiceConnectConnectivity")
    ssl: Optional[SslConfig] = None
    static_ip_connectivity: Optional[Dict[str, Any]] = Field(default=None, description="The source database will allow incoming connections from the public IP of the destination database. You can retrieve the public IP of the Cloud SQL instance from the Cloud SQL console or using Cloud SQL APIs. No additional configuration is required.", alias="staticIpConnectivity")
    username: Optional[StrictStr] = Field(default=None, description="Required. The username that Database Migration Service will use to connect to the database. The value is encrypted when stored in Database Migration Service.")
    __properties: ClassVar[List[str]] = ["alloydbClusterId", "cloudSqlId", "host", "networkArchitecture", "password", "passwordSet", "port", "privateServiceConnectConnectivity", "ssl", "staticIpConnectivity", "username"]

    @field_validator('network_architecture')
    def network_architecture_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['NETWORK_ARCHITECTURE_UNSPECIFIED', 'NETWORK_ARCHITECTURE_OLD_CSQL_PRODUCER', 'NETWORK_ARCHITECTURE_NEW_CSQL_PRODUCER']):
            raise ValueError("must be one of enum values ('NETWORK_ARCHITECTURE_UNSPECIFIED', 'NETWORK_ARCHITECTURE_OLD_CSQL_PRODUCER', 'NETWORK_ARCHITECTURE_NEW_CSQL_PRODUCER')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PostgreSqlConnectionProfile from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "network_architecture",
            "password_set",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of private_service_connect_connectivity
        if self.private_service_connect_connectivity:
            _dict['privateServiceConnectConnectivity'] = self.private_service_connect_connectivity.to_dict()
        # override the default output from pydantic by calling `to_dict()` of ssl
        if self.ssl:
            _dict['ssl'] = self.ssl.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PostgreSqlConnectionProfile from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "alloydbClusterId": obj.get("alloydbClusterId"),
            "cloudSqlId": obj.get("cloudSqlId"),
            "host": obj.get("host"),
            "networkArchitecture": obj.get("networkArchitecture"),
            "password": obj.get("password"),
            "passwordSet": obj.get("passwordSet"),
            "port": obj.get("port"),
            "privateServiceConnectConnectivity": PrivateServiceConnectConnectivity.from_dict(obj["privateServiceConnectConnectivity"]) if obj.get("privateServiceConnectConnectivity") is not None else None,
            "ssl": SslConfig.from_dict(obj["ssl"]) if obj.get("ssl") is not None else None,
            "staticIpConnectivity": obj.get("staticIpConnectivity"),
            "username": obj.get("username")
        })
        return _obj



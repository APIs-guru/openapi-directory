# coding: utf-8

"""
    Database Migration API

    Manage Cloud Database Migration Service resources on Google Cloud Platform.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.apply_job_details import ApplyJobDetails
from openapi_client.models.convert_job_details import ConvertJobDetails
from openapi_client.models.import_rules_job_details import ImportRulesJobDetails
from openapi_client.models.seed_job_details import SeedJobDetails
from typing import Optional, Set
from typing_extensions import Self

class BackgroundJobLogEntry(BaseModel):
    """
    Execution log of a background job.
    """ # noqa: E501
    apply_job_details: Optional[ApplyJobDetails] = Field(default=None, alias="applyJobDetails")
    completion_comment: Optional[StrictStr] = Field(default=None, description="Output only. Job completion comment, such as how many entities were seeded, how many warnings were found during conversion, and similar information.", alias="completionComment")
    completion_state: Optional[StrictStr] = Field(default=None, description="Output only. Job completion state, i.e. the final state after the job completed.", alias="completionState")
    convert_job_details: Optional[ConvertJobDetails] = Field(default=None, alias="convertJobDetails")
    finish_time: Optional[StrictStr] = Field(default=None, description="The timestamp when the background job was finished.", alias="finishTime")
    id: Optional[StrictStr] = Field(default=None, description="The background job log entry ID.")
    import_rules_job_details: Optional[ImportRulesJobDetails] = Field(default=None, alias="importRulesJobDetails")
    job_type: Optional[StrictStr] = Field(default=None, description="The type of job that was executed.", alias="jobType")
    request_autocommit: Optional[StrictBool] = Field(default=None, description="Output only. Whether the client requested the conversion workspace to be committed after a successful completion of the job.", alias="requestAutocommit")
    seed_job_details: Optional[SeedJobDetails] = Field(default=None, alias="seedJobDetails")
    start_time: Optional[StrictStr] = Field(default=None, description="The timestamp when the background job was started.", alias="startTime")
    __properties: ClassVar[List[str]] = ["applyJobDetails", "completionComment", "completionState", "convertJobDetails", "finishTime", "id", "importRulesJobDetails", "jobType", "requestAutocommit", "seedJobDetails", "startTime"]

    @field_validator('completion_state')
    def completion_state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['JOB_COMPLETION_STATE_UNSPECIFIED', 'SUCCEEDED', 'FAILED']):
            raise ValueError("must be one of enum values ('JOB_COMPLETION_STATE_UNSPECIFIED', 'SUCCEEDED', 'FAILED')")
        return value

    @field_validator('job_type')
    def job_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['BACKGROUND_JOB_TYPE_UNSPECIFIED', 'BACKGROUND_JOB_TYPE_SOURCE_SEED', 'BACKGROUND_JOB_TYPE_CONVERT', 'BACKGROUND_JOB_TYPE_APPLY_DESTINATION', 'BACKGROUND_JOB_TYPE_IMPORT_RULES_FILE']):
            raise ValueError("must be one of enum values ('BACKGROUND_JOB_TYPE_UNSPECIFIED', 'BACKGROUND_JOB_TYPE_SOURCE_SEED', 'BACKGROUND_JOB_TYPE_CONVERT', 'BACKGROUND_JOB_TYPE_APPLY_DESTINATION', 'BACKGROUND_JOB_TYPE_IMPORT_RULES_FILE')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of BackgroundJobLogEntry from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "completion_comment",
            "completion_state",
            "request_autocommit",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of apply_job_details
        if self.apply_job_details:
            _dict['applyJobDetails'] = self.apply_job_details.to_dict()
        # override the default output from pydantic by calling `to_dict()` of convert_job_details
        if self.convert_job_details:
            _dict['convertJobDetails'] = self.convert_job_details.to_dict()
        # override the default output from pydantic by calling `to_dict()` of import_rules_job_details
        if self.import_rules_job_details:
            _dict['importRulesJobDetails'] = self.import_rules_job_details.to_dict()
        # override the default output from pydantic by calling `to_dict()` of seed_job_details
        if self.seed_job_details:
            _dict['seedJobDetails'] = self.seed_job_details.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of BackgroundJobLogEntry from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "applyJobDetails": ApplyJobDetails.from_dict(obj["applyJobDetails"]) if obj.get("applyJobDetails") is not None else None,
            "completionComment": obj.get("completionComment"),
            "completionState": obj.get("completionState"),
            "convertJobDetails": ConvertJobDetails.from_dict(obj["convertJobDetails"]) if obj.get("convertJobDetails") is not None else None,
            "finishTime": obj.get("finishTime"),
            "id": obj.get("id"),
            "importRulesJobDetails": ImportRulesJobDetails.from_dict(obj["importRulesJobDetails"]) if obj.get("importRulesJobDetails") is not None else None,
            "jobType": obj.get("jobType"),
            "requestAutocommit": obj.get("requestAutocommit"),
            "seedJobDetails": SeedJobDetails.from_dict(obj["seedJobDetails"]) if obj.get("seedJobDetails") is not None else None,
            "startTime": obj.get("startTime")
        })
        return _obj



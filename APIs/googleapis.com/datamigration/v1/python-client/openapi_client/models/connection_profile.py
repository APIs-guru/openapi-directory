# coding: utf-8

"""
    Database Migration API

    Manage Cloud Database Migration Service resources on Google Cloud Platform.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.alloy_db_connection_profile import AlloyDbConnectionProfile
from openapi_client.models.cloud_sql_connection_profile import CloudSqlConnectionProfile
from openapi_client.models.my_sql_connection_profile import MySqlConnectionProfile
from openapi_client.models.oracle_connection_profile import OracleConnectionProfile
from openapi_client.models.postgre_sql_connection_profile import PostgreSqlConnectionProfile
from openapi_client.models.status import Status
from typing import Optional, Set
from typing_extensions import Self

class ConnectionProfile(BaseModel):
    """
    A connection profile definition.
    """ # noqa: E501
    alloydb: Optional[AlloyDbConnectionProfile] = None
    cloudsql: Optional[CloudSqlConnectionProfile] = None
    create_time: Optional[StrictStr] = Field(default=None, description="Output only. The timestamp when the resource was created. A timestamp in RFC3339 UTC \"Zulu\" format, accurate to nanoseconds. Example: \"2014-10-02T15:01:23.045123456Z\".", alias="createTime")
    display_name: Optional[StrictStr] = Field(default=None, description="The connection profile display name.", alias="displayName")
    error: Optional[Status] = None
    labels: Optional[Dict[str, StrictStr]] = Field(default=None, description="The resource labels for connection profile to use to annotate any related underlying resources such as Compute Engine VMs. An object containing a list of \"key\": \"value\" pairs. Example: `{ \"name\": \"wrench\", \"mass\": \"1.3kg\", \"count\": \"3\" }`.")
    mysql: Optional[MySqlConnectionProfile] = None
    name: Optional[StrictStr] = Field(default=None, description="The name of this connection profile resource in the form of projects/{project}/locations/{location}/connectionProfiles/{connectionProfile}.")
    oracle: Optional[OracleConnectionProfile] = None
    postgresql: Optional[PostgreSqlConnectionProfile] = None
    provider: Optional[StrictStr] = Field(default=None, description="The database provider.")
    state: Optional[StrictStr] = Field(default=None, description="The current connection profile state (e.g. DRAFT, READY, or FAILED).")
    update_time: Optional[StrictStr] = Field(default=None, description="Output only. The timestamp when the resource was last updated. A timestamp in RFC3339 UTC \"Zulu\" format, accurate to nanoseconds. Example: \"2014-10-02T15:01:23.045123456Z\".", alias="updateTime")
    __properties: ClassVar[List[str]] = ["alloydb", "cloudsql", "createTime", "displayName", "error", "labels", "mysql", "name", "oracle", "postgresql", "provider", "state", "updateTime"]

    @field_validator('provider')
    def provider_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['DATABASE_PROVIDER_UNSPECIFIED', 'CLOUDSQL', 'RDS', 'AURORA', 'ALLOYDB']):
            raise ValueError("must be one of enum values ('DATABASE_PROVIDER_UNSPECIFIED', 'CLOUDSQL', 'RDS', 'AURORA', 'ALLOYDB')")
        return value

    @field_validator('state')
    def state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['STATE_UNSPECIFIED', 'DRAFT', 'CREATING', 'READY', 'UPDATING', 'DELETING', 'DELETED', 'FAILED']):
            raise ValueError("must be one of enum values ('STATE_UNSPECIFIED', 'DRAFT', 'CREATING', 'READY', 'UPDATING', 'DELETING', 'DELETED', 'FAILED')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ConnectionProfile from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "create_time",
            "update_time",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of alloydb
        if self.alloydb:
            _dict['alloydb'] = self.alloydb.to_dict()
        # override the default output from pydantic by calling `to_dict()` of cloudsql
        if self.cloudsql:
            _dict['cloudsql'] = self.cloudsql.to_dict()
        # override the default output from pydantic by calling `to_dict()` of error
        if self.error:
            _dict['error'] = self.error.to_dict()
        # override the default output from pydantic by calling `to_dict()` of mysql
        if self.mysql:
            _dict['mysql'] = self.mysql.to_dict()
        # override the default output from pydantic by calling `to_dict()` of oracle
        if self.oracle:
            _dict['oracle'] = self.oracle.to_dict()
        # override the default output from pydantic by calling `to_dict()` of postgresql
        if self.postgresql:
            _dict['postgresql'] = self.postgresql.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ConnectionProfile from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "alloydb": AlloyDbConnectionProfile.from_dict(obj["alloydb"]) if obj.get("alloydb") is not None else None,
            "cloudsql": CloudSqlConnectionProfile.from_dict(obj["cloudsql"]) if obj.get("cloudsql") is not None else None,
            "createTime": obj.get("createTime"),
            "displayName": obj.get("displayName"),
            "error": Status.from_dict(obj["error"]) if obj.get("error") is not None else None,
            "labels": obj.get("labels"),
            "mysql": MySqlConnectionProfile.from_dict(obj["mysql"]) if obj.get("mysql") is not None else None,
            "name": obj.get("name"),
            "oracle": OracleConnectionProfile.from_dict(obj["oracle"]) if obj.get("oracle") is not None else None,
            "postgresql": PostgreSqlConnectionProfile.from_dict(obj["postgresql"]) if obj.get("postgresql") is not None else None,
            "provider": obj.get("provider"),
            "state": obj.get("state"),
            "updateTime": obj.get("updateTime")
        })
        return _obj



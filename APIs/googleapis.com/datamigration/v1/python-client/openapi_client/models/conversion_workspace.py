# coding: utf-8

"""
    Database Migration API

    Manage Cloud Database Migration Service resources on Google Cloud Platform.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.database_engine_info import DatabaseEngineInfo
from typing import Optional, Set
from typing_extensions import Self

class ConversionWorkspace(BaseModel):
    """
    The main conversion workspace resource entity.
    """ # noqa: E501
    create_time: Optional[StrictStr] = Field(default=None, description="Output only. The timestamp when the workspace resource was created.", alias="createTime")
    destination: Optional[DatabaseEngineInfo] = None
    display_name: Optional[StrictStr] = Field(default=None, description="Optional. The display name for the workspace.", alias="displayName")
    global_settings: Optional[Dict[str, StrictStr]] = Field(default=None, description="Optional. A generic list of settings for the workspace. The settings are database pair dependant and can indicate default behavior for the mapping rules engine or turn on or off specific features. Such examples can be: convert_foreign_key_to_interleave=true, skip_triggers=false, ignore_non_table_synonyms=true", alias="globalSettings")
    has_uncommitted_changes: Optional[StrictBool] = Field(default=None, description="Output only. Whether the workspace has uncommitted changes (changes which were made after the workspace was committed).", alias="hasUncommittedChanges")
    latest_commit_id: Optional[StrictStr] = Field(default=None, description="Output only. The latest commit ID.", alias="latestCommitId")
    latest_commit_time: Optional[StrictStr] = Field(default=None, description="Output only. The timestamp when the workspace was committed.", alias="latestCommitTime")
    name: Optional[StrictStr] = Field(default=None, description="Full name of the workspace resource, in the form of: projects/{project}/locations/{location}/conversionWorkspaces/{conversion_workspace}.")
    source: Optional[DatabaseEngineInfo] = None
    update_time: Optional[StrictStr] = Field(default=None, description="Output only. The timestamp when the workspace resource was last updated.", alias="updateTime")
    __properties: ClassVar[List[str]] = ["createTime", "destination", "displayName", "globalSettings", "hasUncommittedChanges", "latestCommitId", "latestCommitTime", "name", "source", "updateTime"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ConversionWorkspace from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "create_time",
            "has_uncommitted_changes",
            "latest_commit_id",
            "latest_commit_time",
            "update_time",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of destination
        if self.destination:
            _dict['destination'] = self.destination.to_dict()
        # override the default output from pydantic by calling `to_dict()` of source
        if self.source:
            _dict['source'] = self.source.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ConversionWorkspace from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "createTime": obj.get("createTime"),
            "destination": DatabaseEngineInfo.from_dict(obj["destination"]) if obj.get("destination") is not None else None,
            "displayName": obj.get("displayName"),
            "globalSettings": obj.get("globalSettings"),
            "hasUncommittedChanges": obj.get("hasUncommittedChanges"),
            "latestCommitId": obj.get("latestCommitId"),
            "latestCommitTime": obj.get("latestCommitTime"),
            "name": obj.get("name"),
            "source": DatabaseEngineInfo.from_dict(obj["source"]) if obj.get("source") is not None else None,
            "updateTime": obj.get("updateTime")
        })
        return _obj



# coding: utf-8

"""
    Database Migration API

    Manage Cloud Database Migration Service resources on Google Cloud Platform.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class ColumnEntity(BaseModel):
    """
    Column is not used as an independent entity, it is retrieved as part of a Table entity.
    """ # noqa: E501
    array: Optional[StrictBool] = Field(default=None, description="Is the column of array type.")
    array_length: Optional[StrictInt] = Field(default=None, description="If the column is array, of which length.", alias="arrayLength")
    auto_generated: Optional[StrictBool] = Field(default=None, description="Is the column auto-generated/identity.", alias="autoGenerated")
    charset: Optional[StrictStr] = Field(default=None, description="Charset override - instead of table level charset.")
    collation: Optional[StrictStr] = Field(default=None, description="Collation override - instead of table level collation.")
    comment: Optional[StrictStr] = Field(default=None, description="Comment associated with the column.")
    custom_features: Optional[Dict[str, Any]] = Field(default=None, description="Custom engine specific features.", alias="customFeatures")
    data_type: Optional[StrictStr] = Field(default=None, description="Column data type.", alias="dataType")
    default_value: Optional[StrictStr] = Field(default=None, description="Default value of the column.", alias="defaultValue")
    fractional_seconds_precision: Optional[StrictInt] = Field(default=None, description="Column fractional second precision - used for timestamp based datatypes.", alias="fractionalSecondsPrecision")
    length: Optional[StrictStr] = Field(default=None, description="Column length - e.g. varchar (50).")
    name: Optional[StrictStr] = Field(default=None, description="Column name.")
    nullable: Optional[StrictBool] = Field(default=None, description="Is the column nullable.")
    ordinal_position: Optional[StrictInt] = Field(default=None, description="Column order in the table.", alias="ordinalPosition")
    precision: Optional[StrictInt] = Field(default=None, description="Column precision - when relevant.")
    scale: Optional[StrictInt] = Field(default=None, description="Column scale - when relevant.")
    set_values: Optional[List[StrictStr]] = Field(default=None, description="Specifies the list of values allowed in the column. Only used for set data type.", alias="setValues")
    udt: Optional[StrictBool] = Field(default=None, description="Is the column a UDT.")
    __properties: ClassVar[List[str]] = ["array", "arrayLength", "autoGenerated", "charset", "collation", "comment", "customFeatures", "dataType", "defaultValue", "fractionalSecondsPrecision", "length", "name", "nullable", "ordinalPosition", "precision", "scale", "setValues", "udt"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ColumnEntity from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ColumnEntity from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "array": obj.get("array"),
            "arrayLength": obj.get("arrayLength"),
            "autoGenerated": obj.get("autoGenerated"),
            "charset": obj.get("charset"),
            "collation": obj.get("collation"),
            "comment": obj.get("comment"),
            "customFeatures": obj.get("customFeatures"),
            "dataType": obj.get("dataType"),
            "defaultValue": obj.get("defaultValue"),
            "fractionalSecondsPrecision": obj.get("fractionalSecondsPrecision"),
            "length": obj.get("length"),
            "name": obj.get("name"),
            "nullable": obj.get("nullable"),
            "ordinalPosition": obj.get("ordinalPosition"),
            "precision": obj.get("precision"),
            "scale": obj.get("scale"),
            "setValues": obj.get("setValues"),
            "udt": obj.get("udt")
        })
        return _obj



# coding: utf-8

"""
    Database Migration API

    Manage Cloud Database Migration Service resources on Google Cloud Platform.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.apply_hash import ApplyHash
from openapi_client.models.assign_specific_value import AssignSpecificValue
from openapi_client.models.double_comparison_filter import DoubleComparisonFilter
from openapi_client.models.int_comparison_filter import IntComparisonFilter
from openapi_client.models.round_to_scale import RoundToScale
from openapi_client.models.value_list_filter import ValueListFilter
from typing import Optional, Set
from typing_extensions import Self

class ValueTransformation(BaseModel):
    """
    Description of data transformation during migration as part of the ConditionalColumnSetValue.
    """ # noqa: E501
    apply_hash: Optional[ApplyHash] = Field(default=None, alias="applyHash")
    assign_max_value: Optional[Dict[str, Any]] = Field(default=None, description="A generic empty message that you can re-use to avoid defining duplicated empty messages in your APIs. A typical example is to use it as the request or the response type of an API method. For instance: service Foo { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty); }", alias="assignMaxValue")
    assign_min_value: Optional[Dict[str, Any]] = Field(default=None, description="A generic empty message that you can re-use to avoid defining duplicated empty messages in your APIs. A typical example is to use it as the request or the response type of an API method. For instance: service Foo { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty); }", alias="assignMinValue")
    assign_null: Optional[Dict[str, Any]] = Field(default=None, description="A generic empty message that you can re-use to avoid defining duplicated empty messages in your APIs. A typical example is to use it as the request or the response type of an API method. For instance: service Foo { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty); }", alias="assignNull")
    assign_specific_value: Optional[AssignSpecificValue] = Field(default=None, alias="assignSpecificValue")
    double_comparison: Optional[DoubleComparisonFilter] = Field(default=None, alias="doubleComparison")
    int_comparison: Optional[IntComparisonFilter] = Field(default=None, alias="intComparison")
    is_null: Optional[Dict[str, Any]] = Field(default=None, description="A generic empty message that you can re-use to avoid defining duplicated empty messages in your APIs. A typical example is to use it as the request or the response type of an API method. For instance: service Foo { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty); }", alias="isNull")
    round_scale: Optional[RoundToScale] = Field(default=None, alias="roundScale")
    value_list: Optional[ValueListFilter] = Field(default=None, alias="valueList")
    __properties: ClassVar[List[str]] = ["applyHash", "assignMaxValue", "assignMinValue", "assignNull", "assignSpecificValue", "doubleComparison", "intComparison", "isNull", "roundScale", "valueList"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ValueTransformation from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of apply_hash
        if self.apply_hash:
            _dict['applyHash'] = self.apply_hash.to_dict()
        # override the default output from pydantic by calling `to_dict()` of assign_specific_value
        if self.assign_specific_value:
            _dict['assignSpecificValue'] = self.assign_specific_value.to_dict()
        # override the default output from pydantic by calling `to_dict()` of double_comparison
        if self.double_comparison:
            _dict['doubleComparison'] = self.double_comparison.to_dict()
        # override the default output from pydantic by calling `to_dict()` of int_comparison
        if self.int_comparison:
            _dict['intComparison'] = self.int_comparison.to_dict()
        # override the default output from pydantic by calling `to_dict()` of round_scale
        if self.round_scale:
            _dict['roundScale'] = self.round_scale.to_dict()
        # override the default output from pydantic by calling `to_dict()` of value_list
        if self.value_list:
            _dict['valueList'] = self.value_list.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ValueTransformation from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "applyHash": ApplyHash.from_dict(obj["applyHash"]) if obj.get("applyHash") is not None else None,
            "assignMaxValue": obj.get("assignMaxValue"),
            "assignMinValue": obj.get("assignMinValue"),
            "assignNull": obj.get("assignNull"),
            "assignSpecificValue": AssignSpecificValue.from_dict(obj["assignSpecificValue"]) if obj.get("assignSpecificValue") is not None else None,
            "doubleComparison": DoubleComparisonFilter.from_dict(obj["doubleComparison"]) if obj.get("doubleComparison") is not None else None,
            "intComparison": IntComparisonFilter.from_dict(obj["intComparison"]) if obj.get("intComparison") is not None else None,
            "isNull": obj.get("isNull"),
            "roundScale": RoundToScale.from_dict(obj["roundScale"]) if obj.get("roundScale") is not None else None,
            "valueList": ValueListFilter.from_dict(obj["valueList"]) if obj.get("valueList") is not None else None
        })
        return _obj



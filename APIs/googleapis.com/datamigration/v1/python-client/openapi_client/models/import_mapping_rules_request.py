# coding: utf-8

"""
    Database Migration API

    Manage Cloud Database Migration Service resources on Google Cloud Platform.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.rules_file import RulesFile
from typing import Optional, Set
from typing_extensions import Self

class ImportMappingRulesRequest(BaseModel):
    """
    Request message for 'ImportMappingRules' request.
    """ # noqa: E501
    auto_commit: Optional[StrictBool] = Field(default=None, description="Required. Should the conversion workspace be committed automatically after the import operation.", alias="autoCommit")
    rules_files: Optional[List[RulesFile]] = Field(default=None, description="Required. One or more rules files.", alias="rulesFiles")
    rules_format: Optional[StrictStr] = Field(default=None, description="Required. The format of the rules content file.", alias="rulesFormat")
    __properties: ClassVar[List[str]] = ["autoCommit", "rulesFiles", "rulesFormat"]

    @field_validator('rules_format')
    def rules_format_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['IMPORT_RULES_FILE_FORMAT_UNSPECIFIED', 'IMPORT_RULES_FILE_FORMAT_HARBOUR_BRIDGE_SESSION_FILE', 'IMPORT_RULES_FILE_FORMAT_ORATOPG_CONFIG_FILE']):
            raise ValueError("must be one of enum values ('IMPORT_RULES_FILE_FORMAT_UNSPECIFIED', 'IMPORT_RULES_FILE_FORMAT_HARBOUR_BRIDGE_SESSION_FILE', 'IMPORT_RULES_FILE_FORMAT_ORATOPG_CONFIG_FILE')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ImportMappingRulesRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in rules_files (list)
        _items = []
        if self.rules_files:
            for _item_rules_files in self.rules_files:
                if _item_rules_files:
                    _items.append(_item_rules_files.to_dict())
            _dict['rulesFiles'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ImportMappingRulesRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "autoCommit": obj.get("autoCommit"),
            "rulesFiles": [RulesFile.from_dict(_item) for _item in obj["rulesFiles"]] if obj.get("rulesFiles") is not None else None,
            "rulesFormat": obj.get("rulesFormat")
        })
        return _obj



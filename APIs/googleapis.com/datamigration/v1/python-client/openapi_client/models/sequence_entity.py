# coding: utf-8

"""
    Database Migration API

    Manage Cloud Database Migration Service resources on Google Cloud Platform.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictBytes, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class SequenceEntity(BaseModel):
    """
    Sequence's parent is a schema.
    """ # noqa: E501
    cache: Optional[StrictStr] = Field(default=None, description="Indicates number of entries to cache / precreate.")
    custom_features: Optional[Dict[str, Any]] = Field(default=None, description="Custom engine specific features.", alias="customFeatures")
    cycle: Optional[StrictBool] = Field(default=None, description="Indicates whether the sequence value should cycle through.")
    increment: Optional[StrictStr] = Field(default=None, description="Increment value for the sequence.")
    max_value: Optional[Union[StrictBytes, StrictStr]] = Field(default=None, description="Maximum number for the sequence represented as bytes to accommodate large. numbers", alias="maxValue")
    min_value: Optional[Union[StrictBytes, StrictStr]] = Field(default=None, description="Minimum number for the sequence represented as bytes to accommodate large. numbers", alias="minValue")
    start_value: Optional[Union[StrictBytes, StrictStr]] = Field(default=None, description="Start number for the sequence represented as bytes to accommodate large. numbers", alias="startValue")
    __properties: ClassVar[List[str]] = ["cache", "customFeatures", "cycle", "increment", "maxValue", "minValue", "startValue"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SequenceEntity from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SequenceEntity from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "cache": obj.get("cache"),
            "customFeatures": obj.get("customFeatures"),
            "cycle": obj.get("cycle"),
            "increment": obj.get("increment"),
            "maxValue": obj.get("maxValue"),
            "minValue": obj.get("minValue"),
            "startValue": obj.get("startValue")
        })
        return _obj



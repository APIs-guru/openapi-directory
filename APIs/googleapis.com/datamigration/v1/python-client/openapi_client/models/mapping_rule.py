# coding: utf-8

"""
    Database Migration API

    Manage Cloud Database Migration Service resources on Google Cloud Platform.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.conditional_column_set_value import ConditionalColumnSetValue
from openapi_client.models.convert_row_id_to_column import ConvertRowIdToColumn
from openapi_client.models.entity_move import EntityMove
from openapi_client.models.filter_table_columns import FilterTableColumns
from openapi_client.models.mapping_rule_filter import MappingRuleFilter
from openapi_client.models.multi_column_datatype_change import MultiColumnDatatypeChange
from openapi_client.models.multi_entity_rename import MultiEntityRename
from openapi_client.models.set_table_primary_key import SetTablePrimaryKey
from openapi_client.models.single_column_change import SingleColumnChange
from openapi_client.models.single_entity_rename import SingleEntityRename
from openapi_client.models.single_package_change import SinglePackageChange
from openapi_client.models.source_sql_change import SourceSqlChange
from typing import Optional, Set
from typing_extensions import Self

class MappingRule(BaseModel):
    """
    Definition of a transformation that is to be applied to a group of entities in the source schema. Several such transformations can be applied to an entity sequentially to define the corresponding entity in the target schema.
    """ # noqa: E501
    conditional_column_set_value: Optional[ConditionalColumnSetValue] = Field(default=None, alias="conditionalColumnSetValue")
    convert_rowid_column: Optional[ConvertRowIdToColumn] = Field(default=None, alias="convertRowidColumn")
    display_name: Optional[StrictStr] = Field(default=None, description="Optional. A human readable name", alias="displayName")
    entity_move: Optional[EntityMove] = Field(default=None, alias="entityMove")
    filter: Optional[MappingRuleFilter] = None
    filter_table_columns: Optional[FilterTableColumns] = Field(default=None, alias="filterTableColumns")
    multi_column_data_type_change: Optional[MultiColumnDatatypeChange] = Field(default=None, alias="multiColumnDataTypeChange")
    multi_entity_rename: Optional[MultiEntityRename] = Field(default=None, alias="multiEntityRename")
    name: Optional[StrictStr] = Field(default=None, description="Full name of the mapping rule resource, in the form of: projects/{project}/locations/{location}/conversionWorkspaces/{set}/mappingRule/{rule}.")
    revision_create_time: Optional[StrictStr] = Field(default=None, description="Output only. The timestamp that the revision was created.", alias="revisionCreateTime")
    revision_id: Optional[StrictStr] = Field(default=None, description="Output only. The revision ID of the mapping rule. A new revision is committed whenever the mapping rule is changed in any way. The format is an 8-character hexadecimal string.", alias="revisionId")
    rule_order: Optional[StrictStr] = Field(default=None, description="Required. The order in which the rule is applied. Lower order rules are applied before higher value rules so they may end up being overridden.", alias="ruleOrder")
    rule_scope: Optional[StrictStr] = Field(default=None, description="Required. The rule scope", alias="ruleScope")
    set_table_primary_key: Optional[SetTablePrimaryKey] = Field(default=None, alias="setTablePrimaryKey")
    single_column_change: Optional[SingleColumnChange] = Field(default=None, alias="singleColumnChange")
    single_entity_rename: Optional[SingleEntityRename] = Field(default=None, alias="singleEntityRename")
    single_package_change: Optional[SinglePackageChange] = Field(default=None, alias="singlePackageChange")
    source_sql_change: Optional[SourceSqlChange] = Field(default=None, alias="sourceSqlChange")
    state: Optional[StrictStr] = Field(default=None, description="Optional. The mapping rule state")
    __properties: ClassVar[List[str]] = ["conditionalColumnSetValue", "convertRowidColumn", "displayName", "entityMove", "filter", "filterTableColumns", "multiColumnDataTypeChange", "multiEntityRename", "name", "revisionCreateTime", "revisionId", "ruleOrder", "ruleScope", "setTablePrimaryKey", "singleColumnChange", "singleEntityRename", "singlePackageChange", "sourceSqlChange", "state"]

    @field_validator('rule_scope')
    def rule_scope_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['DATABASE_ENTITY_TYPE_UNSPECIFIED', 'DATABASE_ENTITY_TYPE_SCHEMA', 'DATABASE_ENTITY_TYPE_TABLE', 'DATABASE_ENTITY_TYPE_COLUMN', 'DATABASE_ENTITY_TYPE_CONSTRAINT', 'DATABASE_ENTITY_TYPE_INDEX', 'DATABASE_ENTITY_TYPE_TRIGGER', 'DATABASE_ENTITY_TYPE_VIEW', 'DATABASE_ENTITY_TYPE_SEQUENCE', 'DATABASE_ENTITY_TYPE_STORED_PROCEDURE', 'DATABASE_ENTITY_TYPE_FUNCTION', 'DATABASE_ENTITY_TYPE_SYNONYM', 'DATABASE_ENTITY_TYPE_DATABASE_PACKAGE', 'DATABASE_ENTITY_TYPE_UDT', 'DATABASE_ENTITY_TYPE_MATERIALIZED_VIEW', 'DATABASE_ENTITY_TYPE_DATABASE']):
            raise ValueError("must be one of enum values ('DATABASE_ENTITY_TYPE_UNSPECIFIED', 'DATABASE_ENTITY_TYPE_SCHEMA', 'DATABASE_ENTITY_TYPE_TABLE', 'DATABASE_ENTITY_TYPE_COLUMN', 'DATABASE_ENTITY_TYPE_CONSTRAINT', 'DATABASE_ENTITY_TYPE_INDEX', 'DATABASE_ENTITY_TYPE_TRIGGER', 'DATABASE_ENTITY_TYPE_VIEW', 'DATABASE_ENTITY_TYPE_SEQUENCE', 'DATABASE_ENTITY_TYPE_STORED_PROCEDURE', 'DATABASE_ENTITY_TYPE_FUNCTION', 'DATABASE_ENTITY_TYPE_SYNONYM', 'DATABASE_ENTITY_TYPE_DATABASE_PACKAGE', 'DATABASE_ENTITY_TYPE_UDT', 'DATABASE_ENTITY_TYPE_MATERIALIZED_VIEW', 'DATABASE_ENTITY_TYPE_DATABASE')")
        return value

    @field_validator('state')
    def state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['STATE_UNSPECIFIED', 'ENABLED', 'DISABLED', 'DELETED']):
            raise ValueError("must be one of enum values ('STATE_UNSPECIFIED', 'ENABLED', 'DISABLED', 'DELETED')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of MappingRule from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "revision_create_time",
            "revision_id",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of conditional_column_set_value
        if self.conditional_column_set_value:
            _dict['conditionalColumnSetValue'] = self.conditional_column_set_value.to_dict()
        # override the default output from pydantic by calling `to_dict()` of convert_rowid_column
        if self.convert_rowid_column:
            _dict['convertRowidColumn'] = self.convert_rowid_column.to_dict()
        # override the default output from pydantic by calling `to_dict()` of entity_move
        if self.entity_move:
            _dict['entityMove'] = self.entity_move.to_dict()
        # override the default output from pydantic by calling `to_dict()` of filter
        if self.filter:
            _dict['filter'] = self.filter.to_dict()
        # override the default output from pydantic by calling `to_dict()` of filter_table_columns
        if self.filter_table_columns:
            _dict['filterTableColumns'] = self.filter_table_columns.to_dict()
        # override the default output from pydantic by calling `to_dict()` of multi_column_data_type_change
        if self.multi_column_data_type_change:
            _dict['multiColumnDataTypeChange'] = self.multi_column_data_type_change.to_dict()
        # override the default output from pydantic by calling `to_dict()` of multi_entity_rename
        if self.multi_entity_rename:
            _dict['multiEntityRename'] = self.multi_entity_rename.to_dict()
        # override the default output from pydantic by calling `to_dict()` of set_table_primary_key
        if self.set_table_primary_key:
            _dict['setTablePrimaryKey'] = self.set_table_primary_key.to_dict()
        # override the default output from pydantic by calling `to_dict()` of single_column_change
        if self.single_column_change:
            _dict['singleColumnChange'] = self.single_column_change.to_dict()
        # override the default output from pydantic by calling `to_dict()` of single_entity_rename
        if self.single_entity_rename:
            _dict['singleEntityRename'] = self.single_entity_rename.to_dict()
        # override the default output from pydantic by calling `to_dict()` of single_package_change
        if self.single_package_change:
            _dict['singlePackageChange'] = self.single_package_change.to_dict()
        # override the default output from pydantic by calling `to_dict()` of source_sql_change
        if self.source_sql_change:
            _dict['sourceSqlChange'] = self.source_sql_change.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of MappingRule from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "conditionalColumnSetValue": ConditionalColumnSetValue.from_dict(obj["conditionalColumnSetValue"]) if obj.get("conditionalColumnSetValue") is not None else None,
            "convertRowidColumn": ConvertRowIdToColumn.from_dict(obj["convertRowidColumn"]) if obj.get("convertRowidColumn") is not None else None,
            "displayName": obj.get("displayName"),
            "entityMove": EntityMove.from_dict(obj["entityMove"]) if obj.get("entityMove") is not None else None,
            "filter": MappingRuleFilter.from_dict(obj["filter"]) if obj.get("filter") is not None else None,
            "filterTableColumns": FilterTableColumns.from_dict(obj["filterTableColumns"]) if obj.get("filterTableColumns") is not None else None,
            "multiColumnDataTypeChange": MultiColumnDatatypeChange.from_dict(obj["multiColumnDataTypeChange"]) if obj.get("multiColumnDataTypeChange") is not None else None,
            "multiEntityRename": MultiEntityRename.from_dict(obj["multiEntityRename"]) if obj.get("multiEntityRename") is not None else None,
            "name": obj.get("name"),
            "revisionCreateTime": obj.get("revisionCreateTime"),
            "revisionId": obj.get("revisionId"),
            "ruleOrder": obj.get("ruleOrder"),
            "ruleScope": obj.get("ruleScope"),
            "setTablePrimaryKey": SetTablePrimaryKey.from_dict(obj["setTablePrimaryKey"]) if obj.get("setTablePrimaryKey") is not None else None,
            "singleColumnChange": SingleColumnChange.from_dict(obj["singleColumnChange"]) if obj.get("singleColumnChange") is not None else None,
            "singleEntityRename": SingleEntityRename.from_dict(obj["singleEntityRename"]) if obj.get("singleEntityRename") is not None else None,
            "singlePackageChange": SinglePackageChange.from_dict(obj["singlePackageChange"]) if obj.get("singlePackageChange") is not None else None,
            "sourceSqlChange": SourceSqlChange.from_dict(obj["sourceSqlChange"]) if obj.get("sourceSqlChange") is not None else None,
            "state": obj.get("state")
        })
        return _obj



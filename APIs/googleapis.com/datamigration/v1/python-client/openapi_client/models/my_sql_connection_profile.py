# coding: utf-8

"""
    Database Migration API

    Manage Cloud Database Migration Service resources on Google Cloud Platform.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.ssl_config import SslConfig
from typing import Optional, Set
from typing_extensions import Self

class MySqlConnectionProfile(BaseModel):
    """
    Specifies connection parameters required specifically for MySQL databases.
    """ # noqa: E501
    cloud_sql_id: Optional[StrictStr] = Field(default=None, description="If the source is a Cloud SQL database, use this field to provide the Cloud SQL instance ID of the source.", alias="cloudSqlId")
    host: Optional[StrictStr] = Field(default=None, description="Required. The IP or hostname of the source MySQL database.")
    password: Optional[StrictStr] = Field(default=None, description="Required. Input only. The password for the user that Database Migration Service will be using to connect to the database. This field is not returned on request, and the value is encrypted when stored in Database Migration Service.")
    password_set: Optional[StrictBool] = Field(default=None, description="Output only. Indicates If this connection profile password is stored.", alias="passwordSet")
    port: Optional[StrictInt] = Field(default=None, description="Required. The network port of the source MySQL database.")
    ssl: Optional[SslConfig] = None
    username: Optional[StrictStr] = Field(default=None, description="Required. The username that Database Migration Service will use to connect to the database. The value is encrypted when stored in Database Migration Service.")
    __properties: ClassVar[List[str]] = ["cloudSqlId", "host", "password", "passwordSet", "port", "ssl", "username"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of MySqlConnectionProfile from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "password_set",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of ssl
        if self.ssl:
            _dict['ssl'] = self.ssl.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of MySqlConnectionProfile from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "cloudSqlId": obj.get("cloudSqlId"),
            "host": obj.get("host"),
            "password": obj.get("password"),
            "passwordSet": obj.get("passwordSet"),
            "port": obj.get("port"),
            "ssl": SslConfig.from_dict(obj["ssl"]) if obj.get("ssl") is not None else None,
            "username": obj.get("username")
        })
        return _obj



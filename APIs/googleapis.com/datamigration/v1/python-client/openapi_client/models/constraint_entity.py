# coding: utf-8

"""
    Database Migration API

    Manage Cloud Database Migration Service resources on Google Cloud Platform.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class ConstraintEntity(BaseModel):
    """
    Constraint is not used as an independent entity, it is retrieved as part of another entity such as Table or View.
    """ # noqa: E501
    custom_features: Optional[Dict[str, Any]] = Field(default=None, description="Custom engine specific features.", alias="customFeatures")
    name: Optional[StrictStr] = Field(default=None, description="The name of the table constraint.")
    reference_columns: Optional[List[StrictStr]] = Field(default=None, description="Reference columns which may be associated with the constraint. For example, if the constraint is a FOREIGN_KEY, this represents the list of full names of referenced columns by the foreign key.", alias="referenceColumns")
    reference_table: Optional[StrictStr] = Field(default=None, description="Reference table which may be associated with the constraint. For example, if the constraint is a FOREIGN_KEY, this represents the list of full name of the referenced table by the foreign key.", alias="referenceTable")
    table_columns: Optional[List[StrictStr]] = Field(default=None, description="Table columns used as part of the Constraint, for example primary key constraint should list the columns which constitutes the key.", alias="tableColumns")
    table_name: Optional[StrictStr] = Field(default=None, description="Table which is associated with the constraint. In case the constraint is defined on a table, this field is left empty as this information is stored in parent_name. However, if constraint is defined on a view, this field stores the table name on which the view is defined.", alias="tableName")
    type: Optional[StrictStr] = Field(default=None, description="Type of constraint, for example unique, primary key, foreign key (currently only primary key is supported).")
    __properties: ClassVar[List[str]] = ["customFeatures", "name", "referenceColumns", "referenceTable", "tableColumns", "tableName", "type"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ConstraintEntity from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ConstraintEntity from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "customFeatures": obj.get("customFeatures"),
            "name": obj.get("name"),
            "referenceColumns": obj.get("referenceColumns"),
            "referenceTable": obj.get("referenceTable"),
            "tableColumns": obj.get("tableColumns"),
            "tableName": obj.get("tableName"),
            "type": obj.get("type")
        })
        return _obj



# coding: utf-8

"""
    Database Migration API

    Manage Cloud Database Migration Service resources on Google Cloud Platform.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class MultiEntityRename(BaseModel):
    """
    Options to configure rule type MultiEntityRename. The rule is used to rename multiple entities. The rule filter field can refer to one or more entities. The rule scope can be one of: Database, Schema, Table, Column, Constraint, Index, View, Function, Stored Procedure, Materialized View, Sequence, UDT
    """ # noqa: E501
    new_name_pattern: Optional[StrictStr] = Field(default=None, description="Optional. The pattern used to generate the new entity's name. This pattern must include the characters '{name}', which will be replaced with the name of the original entity. For example, the pattern 't_{name}' for an entity name jobs would be converted to 't_jobs'. If unspecified, the default value for this field is '{name}'", alias="newNamePattern")
    source_name_transformation: Optional[StrictStr] = Field(default=None, description="Optional. Additional transformation that can be done on the source entity name before it is being used by the new_name_pattern, for example lower case. If no transformation is desired, use NO_TRANSFORMATION", alias="sourceNameTransformation")
    __properties: ClassVar[List[str]] = ["newNamePattern", "sourceNameTransformation"]

    @field_validator('source_name_transformation')
    def source_name_transformation_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['ENTITY_NAME_TRANSFORMATION_UNSPECIFIED', 'ENTITY_NAME_TRANSFORMATION_NO_TRANSFORMATION', 'ENTITY_NAME_TRANSFORMATION_LOWER_CASE', 'ENTITY_NAME_TRANSFORMATION_UPPER_CASE', 'ENTITY_NAME_TRANSFORMATION_CAPITALIZED_CASE']):
            raise ValueError("must be one of enum values ('ENTITY_NAME_TRANSFORMATION_UNSPECIFIED', 'ENTITY_NAME_TRANSFORMATION_NO_TRANSFORMATION', 'ENTITY_NAME_TRANSFORMATION_LOWER_CASE', 'ENTITY_NAME_TRANSFORMATION_UPPER_CASE', 'ENTITY_NAME_TRANSFORMATION_CAPITALIZED_CASE')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of MultiEntityRename from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of MultiEntityRename from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "newNamePattern": obj.get("newNamePattern"),
            "sourceNameTransformation": obj.get("sourceNameTransformation")
        })
        return _obj



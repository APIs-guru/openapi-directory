# coding: utf-8

"""
    Database Migration API

    Manage Cloud Database Migration Service resources on Google Cloud Platform.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.sql_acl_entry import SqlAclEntry
from typing import Optional, Set
from typing_extensions import Self

class SqlIpConfig(BaseModel):
    """
    IP Management configuration.
    """ # noqa: E501
    allocated_ip_range: Optional[StrictStr] = Field(default=None, description="Optional. The name of the allocated IP address range for the private IP Cloud SQL instance. This name refers to an already allocated IP range address. If set, the instance IP address will be created in the allocated range. Note that this IP address range can't be modified after the instance is created. If you change the VPC when configuring connectivity settings for the migration job, this field is not relevant.", alias="allocatedIpRange")
    authorized_networks: Optional[List[SqlAclEntry]] = Field(default=None, description="The list of external networks that are allowed to connect to the instance using the IP. See https://en.wikipedia.org/wiki/CIDR_notation#CIDR_notation, also known as 'slash' notation (e.g. `192.168.100.0/24`).", alias="authorizedNetworks")
    enable_ipv4: Optional[StrictBool] = Field(default=None, description="Whether the instance should be assigned an IPv4 address or not.", alias="enableIpv4")
    private_network: Optional[StrictStr] = Field(default=None, description="The resource link for the VPC network from which the Cloud SQL instance is accessible for private IP. For example, `projects/myProject/global/networks/default`. This setting can be updated, but it cannot be removed after it is set.", alias="privateNetwork")
    require_ssl: Optional[StrictBool] = Field(default=None, description="Whether SSL connections over IP should be enforced or not.", alias="requireSsl")
    __properties: ClassVar[List[str]] = ["allocatedIpRange", "authorizedNetworks", "enableIpv4", "privateNetwork", "requireSsl"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SqlIpConfig from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in authorized_networks (list)
        _items = []
        if self.authorized_networks:
            for _item_authorized_networks in self.authorized_networks:
                if _item_authorized_networks:
                    _items.append(_item_authorized_networks.to_dict())
            _dict['authorizedNetworks'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SqlIpConfig from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "allocatedIpRange": obj.get("allocatedIpRange"),
            "authorizedNetworks": [SqlAclEntry.from_dict(_item) for _item in obj["authorizedNetworks"]] if obj.get("authorizedNetworks") is not None else None,
            "enableIpv4": obj.get("enableIpv4"),
            "privateNetwork": obj.get("privateNetwork"),
            "requireSsl": obj.get("requireSsl")
        })
        return _obj



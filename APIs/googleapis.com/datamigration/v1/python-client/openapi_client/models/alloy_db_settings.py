# coding: utf-8

"""
    Database Migration API

    Manage Cloud Database Migration Service resources on Google Cloud Platform.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.encryption_config import EncryptionConfig
from openapi_client.models.primary_instance_settings import PrimaryInstanceSettings
from openapi_client.models.user_password import UserPassword
from typing import Optional, Set
from typing_extensions import Self

class AlloyDbSettings(BaseModel):
    """
    Settings for creating an AlloyDB cluster.
    """ # noqa: E501
    database_version: Optional[StrictStr] = Field(default=None, description="Optional. The database engine major version. This is an optional field. If a database version is not supplied at cluster creation time, then a default database version will be used.", alias="databaseVersion")
    encryption_config: Optional[EncryptionConfig] = Field(default=None, alias="encryptionConfig")
    initial_user: Optional[UserPassword] = Field(default=None, alias="initialUser")
    labels: Optional[Dict[str, StrictStr]] = Field(default=None, description="Labels for the AlloyDB cluster created by DMS. An object containing a list of 'key', 'value' pairs.")
    primary_instance_settings: Optional[PrimaryInstanceSettings] = Field(default=None, alias="primaryInstanceSettings")
    vpc_network: Optional[StrictStr] = Field(default=None, description="Required. The resource link for the VPC network in which cluster resources are created and from which they are accessible via Private IP. The network must belong to the same project as the cluster. It is specified in the form: \"projects/{project_number}/global/networks/{network_id}\". This is required to create a cluster.", alias="vpcNetwork")
    __properties: ClassVar[List[str]] = ["databaseVersion", "encryptionConfig", "initialUser", "labels", "primaryInstanceSettings", "vpcNetwork"]

    @field_validator('database_version')
    def database_version_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['DATABASE_VERSION_UNSPECIFIED', 'POSTGRES_14', 'POSTGRES_15']):
            raise ValueError("must be one of enum values ('DATABASE_VERSION_UNSPECIFIED', 'POSTGRES_14', 'POSTGRES_15')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AlloyDbSettings from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of encryption_config
        if self.encryption_config:
            _dict['encryptionConfig'] = self.encryption_config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of initial_user
        if self.initial_user:
            _dict['initialUser'] = self.initial_user.to_dict()
        # override the default output from pydantic by calling `to_dict()` of primary_instance_settings
        if self.primary_instance_settings:
            _dict['primaryInstanceSettings'] = self.primary_instance_settings.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AlloyDbSettings from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "databaseVersion": obj.get("databaseVersion"),
            "encryptionConfig": EncryptionConfig.from_dict(obj["encryptionConfig"]) if obj.get("encryptionConfig") is not None else None,
            "initialUser": UserPassword.from_dict(obj["initialUser"]) if obj.get("initialUser") is not None else None,
            "labels": obj.get("labels"),
            "primaryInstanceSettings": PrimaryInstanceSettings.from_dict(obj["primaryInstanceSettings"]) if obj.get("primaryInstanceSettings") is not None else None,
            "vpcNetwork": obj.get("vpcNetwork")
        })
        return _obj



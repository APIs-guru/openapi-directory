# coding: utf-8

"""
    Database Migration API

    Manage Cloud Database Migration Service resources on Google Cloud Platform.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.column_entity import ColumnEntity
from openapi_client.models.constraint_entity import ConstraintEntity
from openapi_client.models.index_entity import IndexEntity
from openapi_client.models.trigger_entity import TriggerEntity
from typing import Optional, Set
from typing_extensions import Self

class TableEntity(BaseModel):
    """
    Table's parent is a schema.
    """ # noqa: E501
    columns: Optional[List[ColumnEntity]] = Field(default=None, description="Table columns.")
    comment: Optional[StrictStr] = Field(default=None, description="Comment associated with the table.")
    constraints: Optional[List[ConstraintEntity]] = Field(default=None, description="Table constraints.")
    custom_features: Optional[Dict[str, Any]] = Field(default=None, description="Custom engine specific features.", alias="customFeatures")
    indices: Optional[List[IndexEntity]] = Field(default=None, description="Table indices.")
    triggers: Optional[List[TriggerEntity]] = Field(default=None, description="Table triggers.")
    __properties: ClassVar[List[str]] = ["columns", "comment", "constraints", "customFeatures", "indices", "triggers"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of TableEntity from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in columns (list)
        _items = []
        if self.columns:
            for _item_columns in self.columns:
                if _item_columns:
                    _items.append(_item_columns.to_dict())
            _dict['columns'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in constraints (list)
        _items = []
        if self.constraints:
            for _item_constraints in self.constraints:
                if _item_constraints:
                    _items.append(_item_constraints.to_dict())
            _dict['constraints'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in indices (list)
        _items = []
        if self.indices:
            for _item_indices in self.indices:
                if _item_indices:
                    _items.append(_item_indices.to_dict())
            _dict['indices'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in triggers (list)
        _items = []
        if self.triggers:
            for _item_triggers in self.triggers:
                if _item_triggers:
                    _items.append(_item_triggers.to_dict())
            _dict['triggers'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of TableEntity from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "columns": [ColumnEntity.from_dict(_item) for _item in obj["columns"]] if obj.get("columns") is not None else None,
            "comment": obj.get("comment"),
            "constraints": [ConstraintEntity.from_dict(_item) for _item in obj["constraints"]] if obj.get("constraints") is not None else None,
            "customFeatures": obj.get("customFeatures"),
            "indices": [IndexEntity.from_dict(_item) for _item in obj["indices"]] if obj.get("indices") is not None else None,
            "triggers": [TriggerEntity.from_dict(_item) for _item in obj["triggers"]] if obj.get("triggers") is not None else None
        })
        return _obj



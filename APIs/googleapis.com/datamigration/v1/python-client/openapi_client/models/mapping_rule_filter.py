# coding: utf-8

"""
    Database Migration API

    Manage Cloud Database Migration Service resources on Google Cloud Platform.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class MappingRuleFilter(BaseModel):
    """
    A filter defining the entities that a mapping rule should be applied to. When more than one field is specified, the rule is applied only to entities which match all the fields.
    """ # noqa: E501
    entities: Optional[List[StrictStr]] = Field(default=None, description="Optional. The rule should be applied to specific entities defined by their fully qualified names.")
    entity_name_contains: Optional[StrictStr] = Field(default=None, description="Optional. The rule should be applied to entities whose non-qualified name contains the given string.", alias="entityNameContains")
    entity_name_prefix: Optional[StrictStr] = Field(default=None, description="Optional. The rule should be applied to entities whose non-qualified name starts with the given prefix.", alias="entityNamePrefix")
    entity_name_suffix: Optional[StrictStr] = Field(default=None, description="Optional. The rule should be applied to entities whose non-qualified name ends with the given suffix.", alias="entityNameSuffix")
    parent_entity: Optional[StrictStr] = Field(default=None, description="Optional. The rule should be applied to entities whose parent entity (fully qualified name) matches the given value. For example, if the rule applies to a table entity, the expected value should be a schema (schema). If the rule applies to a column or index entity, the expected value can be either a schema (schema) or a table (schema.table)", alias="parentEntity")
    __properties: ClassVar[List[str]] = ["entities", "entityNameContains", "entityNamePrefix", "entityNameSuffix", "parentEntity"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of MappingRuleFilter from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of MappingRuleFilter from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "entities": obj.get("entities"),
            "entityNameContains": obj.get("entityNameContains"),
            "entityNamePrefix": obj.get("entityNamePrefix"),
            "entityNameSuffix": obj.get("entityNameSuffix"),
            "parentEntity": obj.get("parentEntity")
        })
        return _obj



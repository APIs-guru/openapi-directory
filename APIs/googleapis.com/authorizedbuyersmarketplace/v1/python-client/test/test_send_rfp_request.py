# coding: utf-8

"""
    Authorized Buyers Marketplace API

    The Authorized Buyers Marketplace API lets buyers programmatically discover inventory; propose, retrieve and negotiate deals with publishers.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.send_rfp_request import SendRfpRequest

class TestSendRfpRequest(unittest.TestCase):
    """SendRfpRequest unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> SendRfpRequest:
        """Test SendRfpRequest
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `SendRfpRequest`
        """
        model = SendRfpRequest()
        if include_optional:
            return SendRfpRequest(
                buyer_contacts = [
                    openapi_client.models.contact.Contact(
                        display_name = '', 
                        email = '', )
                    ],
                client = '',
                display_name = '',
                estimated_gross_spend = openapi_client.models.money.Money(
                    currency_code = '', 
                    nanos = 56, 
                    units = '', ),
                flight_end_time = '',
                flight_start_time = '',
                geo_targeting = openapi_client.models.criteria_targeting.CriteriaTargeting(
                    excluded_criteria_ids = [
                        ''
                        ], 
                    targeted_criteria_ids = [
                        ''
                        ], ),
                inventory_size_targeting = openapi_client.models.inventory_size_targeting.InventorySizeTargeting(
                    excluded_inventory_sizes = [
                        openapi_client.models.ad_size.AdSize(
                            height = '', 
                            type = 'TYPE_UNSPECIFIED', 
                            width = '', )
                        ], 
                    targeted_inventory_sizes = [
                        openapi_client.models.ad_size.AdSize(
                            height = '', 
                            type = 'TYPE_UNSPECIFIED', 
                            width = '', )
                        ], ),
                note = '',
                preferred_deal_terms = openapi_client.models.preferred_deal_terms.PreferredDealTerms(
                    fixed_price = openapi_client.models.price.Price(
                        amount = openapi_client.models.money.Money(
                            currency_code = '', 
                            nanos = 56, 
                            units = '', ), 
                        type = 'TYPE_UNSPECIFIED', ), ),
                programmatic_guaranteed_terms = openapi_client.models.programmatic_guaranteed_terms.ProgrammaticGuaranteedTerms(
                    fixed_price = openapi_client.models.price.Price(
                        amount = openapi_client.models.money.Money(
                            currency_code = '', 
                            nanos = 56, 
                            units = '', ), 
                        type = 'TYPE_UNSPECIFIED', ), 
                    guaranteed_looks = '', 
                    impression_cap = '', 
                    minimum_daily_looks = '', 
                    percent_share_of_voice = '', 
                    reservation_type = 'RESERVATION_TYPE_UNSPECIFIED', ),
                publisher_profile = ''
            )
        else:
            return SendRfpRequest(
        )
        """

    def testSendRfpRequest(self):
        """Test SendRfpRequest"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

# coding: utf-8

"""
    Authorized Buyers Marketplace API

    The Authorized Buyers Marketplace API lets buyers programmatically discover inventory; propose, retrieve and negotiate deals with publishers.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.private_auction_terms import PrivateAuctionTerms

class TestPrivateAuctionTerms(unittest.TestCase):
    """PrivateAuctionTerms unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> PrivateAuctionTerms:
        """Test PrivateAuctionTerms
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `PrivateAuctionTerms`
        """
        model = PrivateAuctionTerms()
        if include_optional:
            return PrivateAuctionTerms(
                floor_price = openapi_client.models.price.Price(
                    amount = openapi_client.models.money.Money(
                        currency_code = '', 
                        nanos = 56, 
                        units = '', ), 
                    type = 'TYPE_UNSPECIFIED', ),
                open_auction_allowed = True
            )
        else:
            return PrivateAuctionTerms(
        )
        """

    def testPrivateAuctionTerms(self):
        """Test PrivateAuctionTerms"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

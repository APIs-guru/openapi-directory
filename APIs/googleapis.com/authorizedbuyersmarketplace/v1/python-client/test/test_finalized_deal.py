# coding: utf-8

"""
    Authorized Buyers Marketplace API

    The Authorized Buyers Marketplace API lets buyers programmatically discover inventory; propose, retrieve and negotiate deals with publishers.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.finalized_deal import FinalizedDeal

class TestFinalizedDeal(unittest.TestCase):
    """FinalizedDeal unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> FinalizedDeal:
        """Test FinalizedDeal
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `FinalizedDeal`
        """
        model = FinalizedDeal()
        if include_optional:
            return FinalizedDeal(
                deal = openapi_client.models.deal.Deal(
                    billed_buyer = '', 
                    buyer = '', 
                    client = '', 
                    create_time = '', 
                    creative_requirements = openapi_client.models.creative_requirements.CreativeRequirements(
                        creative_format = 'CREATIVE_FORMAT_UNSPECIFIED', 
                        creative_pre_approval_policy = 'CREATIVE_PRE_APPROVAL_POLICY_UNSPECIFIED', 
                        creative_safe_frame_compatibility = 'CREATIVE_SAFE_FRAME_COMPATIBILITY_UNSPECIFIED', 
                        max_ad_duration_ms = '', 
                        programmatic_creative_source = 'PROGRAMMATIC_CREATIVE_SOURCE_UNSPECIFIED', 
                        skippable_ad_type = 'SKIPPABLE_AD_TYPE_UNSPECIFIED', ), 
                    deal_type = 'DEAL_TYPE_UNSPECIFIED', 
                    delivery_control = openapi_client.models.delivery_control.DeliveryControl(
                        companion_delivery_type = 'COMPANION_DELIVERY_TYPE_UNSPECIFIED', 
                        creative_rotation_type = 'CREATIVE_ROTATION_TYPE_UNSPECIFIED', 
                        delivery_rate_type = 'DELIVERY_RATE_TYPE_UNSPECIFIED', 
                        frequency_cap = [
                            openapi_client.models.frequency_cap.FrequencyCap(
                                max_impressions = 56, 
                                time_unit_type = 'TIME_UNIT_TYPE_UNSPECIFIED', 
                                time_units_count = 56, )
                            ], 
                        roadblocking_type = 'ROADBLOCKING_TYPE_UNSPECIFIED', ), 
                    description = '', 
                    display_name = '', 
                    estimated_gross_spend = openapi_client.models.money.Money(
                        currency_code = '', 
                        nanos = 56, 
                        units = '', ), 
                    flight_end_time = '', 
                    flight_start_time = '', 
                    name = '', 
                    preferred_deal_terms = openapi_client.models.preferred_deal_terms.PreferredDealTerms(
                        fixed_price = openapi_client.models.price.Price(
                            amount = openapi_client.models.money.Money(
                                currency_code = '', 
                                nanos = 56, 
                                units = '', ), 
                            type = 'TYPE_UNSPECIFIED', ), ), 
                    private_auction_terms = openapi_client.models.private_auction_terms.PrivateAuctionTerms(
                        floor_price = openapi_client.models.price.Price(
                            type = 'TYPE_UNSPECIFIED', ), 
                        open_auction_allowed = True, ), 
                    programmatic_guaranteed_terms = openapi_client.models.programmatic_guaranteed_terms.ProgrammaticGuaranteedTerms(
                        guaranteed_looks = '', 
                        impression_cap = '', 
                        minimum_daily_looks = '', 
                        percent_share_of_voice = '', 
                        reservation_type = 'RESERVATION_TYPE_UNSPECIFIED', ), 
                    proposal_revision = '', 
                    publisher_profile = '', 
                    seller_time_zone = openapi_client.models.time_zone.TimeZone(
                        id = '', 
                        version = '', ), 
                    targeting = openapi_client.models.marketplace_targeting.MarketplaceTargeting(
                        daypart_targeting = openapi_client.models.day_part_targeting.DayPartTargeting(
                            day_parts = [
                                openapi_client.models.day_part.DayPart(
                                    day_of_week = 'DAY_OF_WEEK_UNSPECIFIED', 
                                    end_time = openapi_client.models.time_of_day.TimeOfDay(
                                        hours = 56, 
                                        minutes = 56, 
                                        nanos = 56, 
                                        seconds = 56, ), 
                                    start_time = openapi_client.models.time_of_day.TimeOfDay(
                                        hours = 56, 
                                        minutes = 56, 
                                        nanos = 56, 
                                        seconds = 56, ), )
                                ], 
                            time_zone_type = 'TIME_ZONE_TYPE_UNSPECIFIED', ), 
                        geo_targeting = openapi_client.models.criteria_targeting.CriteriaTargeting(
                            excluded_criteria_ids = [
                                ''
                                ], 
                            targeted_criteria_ids = [
                                ''
                                ], ), 
                        inventory_size_targeting = openapi_client.models.inventory_size_targeting.InventorySizeTargeting(
                            excluded_inventory_sizes = [
                                openapi_client.models.ad_size.AdSize(
                                    height = '', 
                                    type = 'TYPE_UNSPECIFIED', 
                                    width = '', )
                                ], 
                            targeted_inventory_sizes = [
                                openapi_client.models.ad_size.AdSize(
                                    height = '', 
                                    type = 'TYPE_UNSPECIFIED', 
                                    width = '', )
                                ], ), 
                        inventory_type_targeting = openapi_client.models.inventory_type_targeting.InventoryTypeTargeting(
                            inventory_types = [
                                'INVENTORY_TYPE_UNSPECIFIED'
                                ], ), 
                        placement_targeting = openapi_client.models.placement_targeting.PlacementTargeting(
                            mobile_application_targeting = openapi_client.models.mobile_application_targeting.MobileApplicationTargeting(
                                first_party_targeting = openapi_client.models.first_party_mobile_application_targeting.FirstPartyMobileApplicationTargeting(
                                    excluded_app_ids = [
                                        ''
                                        ], 
                                    targeted_app_ids = [
                                        ''
                                        ], ), ), 
                            uri_targeting = openapi_client.models.uri_targeting.UriTargeting(
                                excluded_uris = [
                                    ''
                                    ], 
                                targeted_uris = [
                                    ''
                                    ], ), ), 
                        technology_targeting = openapi_client.models.technology_targeting.TechnologyTargeting(
                            device_capability_targeting = openapi_client.models.criteria_targeting.CriteriaTargeting(), 
                            device_category_targeting = , 
                            operating_system_targeting = openapi_client.models.operating_system_targeting.OperatingSystemTargeting(
                                operating_system_criteria = , 
                                operating_system_version_criteria = , ), ), 
                        user_list_targeting = , 
                        video_targeting = openapi_client.models.video_targeting.VideoTargeting(
                            excluded_position_types = [
                                'POSITION_TYPE_UNSPECIFIED'
                                ], 
                            targeted_position_types = [
                                'POSITION_TYPE_UNSPECIFIED'
                                ], ), ), 
                    update_time = '', ),
                deal_pausing_info = openapi_client.models.deal_pausing_info.DealPausingInfo(
                    pause_reason = '', 
                    pause_role = 'BUYER_SELLER_ROLE_UNSPECIFIED', 
                    pausing_consented = True, ),
                deal_serving_status = 'DEAL_SERVING_STATUS_UNSPECIFIED',
                name = '',
                ready_to_serve = True,
                rtb_metrics = openapi_client.models.rtb_metrics.RtbMetrics(
                    ad_impressions7_days = '', 
                    bid_rate7_days = 1.337, 
                    bid_requests7_days = '', 
                    bids7_days = '', 
                    filtered_bid_rate7_days = 1.337, 
                    must_bid_rate_current_month = 1.337, )
            )
        else:
            return FinalizedDeal(
        )
        """

    def testFinalizedDeal(self):
        """Test FinalizedDeal"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

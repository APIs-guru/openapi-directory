# coding: utf-8

"""
    Authorized Buyers Marketplace API

    The Authorized Buyers Marketplace API lets buyers programmatically discover inventory; propose, retrieve and negotiate deals with publishers.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class CreativeRequirements(BaseModel):
    """
    Message captures data about the creatives in the deal.
    """ # noqa: E501
    creative_format: Optional[StrictStr] = Field(default=None, description="Output only. The format of the creative, only applicable for programmatic guaranteed and preferred deals.", alias="creativeFormat")
    creative_pre_approval_policy: Optional[StrictStr] = Field(default=None, description="Output only. Specifies the creative pre-approval policy.", alias="creativePreApprovalPolicy")
    creative_safe_frame_compatibility: Optional[StrictStr] = Field(default=None, description="Output only. Specifies whether the creative is safeFrame compatible.", alias="creativeSafeFrameCompatibility")
    max_ad_duration_ms: Optional[StrictStr] = Field(default=None, description="Output only. The max duration of the video creative in milliseconds. only applicable for deals with video creatives.", alias="maxAdDurationMs")
    programmatic_creative_source: Optional[StrictStr] = Field(default=None, description="Output only. Specifies the creative source for programmatic deals. PUBLISHER means creative is provided by seller and ADVERTISER means creative is provided by the buyer.", alias="programmaticCreativeSource")
    skippable_ad_type: Optional[StrictStr] = Field(default=None, description="Output only. Skippable video ads allow viewers to skip ads after 5 seconds. Only applicable for deals with video creatives.", alias="skippableAdType")
    __properties: ClassVar[List[str]] = ["creativeFormat", "creativePreApprovalPolicy", "creativeSafeFrameCompatibility", "maxAdDurationMs", "programmaticCreativeSource", "skippableAdType"]

    @field_validator('creative_format')
    def creative_format_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['CREATIVE_FORMAT_UNSPECIFIED', 'DISPLAY', 'VIDEO', 'AUDIO']):
            raise ValueError("must be one of enum values ('CREATIVE_FORMAT_UNSPECIFIED', 'DISPLAY', 'VIDEO', 'AUDIO')")
        return value

    @field_validator('creative_pre_approval_policy')
    def creative_pre_approval_policy_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['CREATIVE_PRE_APPROVAL_POLICY_UNSPECIFIED', 'SELLER_PRE_APPROVAL_REQUIRED', 'SELLER_PRE_APPROVAL_NOT_REQUIRED']):
            raise ValueError("must be one of enum values ('CREATIVE_PRE_APPROVAL_POLICY_UNSPECIFIED', 'SELLER_PRE_APPROVAL_REQUIRED', 'SELLER_PRE_APPROVAL_NOT_REQUIRED')")
        return value

    @field_validator('creative_safe_frame_compatibility')
    def creative_safe_frame_compatibility_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['CREATIVE_SAFE_FRAME_COMPATIBILITY_UNSPECIFIED', 'COMPATIBLE', 'INCOMPATIBLE']):
            raise ValueError("must be one of enum values ('CREATIVE_SAFE_FRAME_COMPATIBILITY_UNSPECIFIED', 'COMPATIBLE', 'INCOMPATIBLE')")
        return value

    @field_validator('programmatic_creative_source')
    def programmatic_creative_source_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['PROGRAMMATIC_CREATIVE_SOURCE_UNSPECIFIED', 'ADVERTISER', 'PUBLISHER']):
            raise ValueError("must be one of enum values ('PROGRAMMATIC_CREATIVE_SOURCE_UNSPECIFIED', 'ADVERTISER', 'PUBLISHER')")
        return value

    @field_validator('skippable_ad_type')
    def skippable_ad_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['SKIPPABLE_AD_TYPE_UNSPECIFIED', 'SKIPPABLE', 'INSTREAM_SELECT', 'NOT_SKIPPABLE', 'ANY']):
            raise ValueError("must be one of enum values ('SKIPPABLE_AD_TYPE_UNSPECIFIED', 'SKIPPABLE', 'INSTREAM_SELECT', 'NOT_SKIPPABLE', 'ANY')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CreativeRequirements from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "creative_format",
            "creative_pre_approval_policy",
            "creative_safe_frame_compatibility",
            "max_ad_duration_ms",
            "programmatic_creative_source",
            "skippable_ad_type",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CreativeRequirements from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "creativeFormat": obj.get("creativeFormat"),
            "creativePreApprovalPolicy": obj.get("creativePreApprovalPolicy"),
            "creativeSafeFrameCompatibility": obj.get("creativeSafeFrameCompatibility"),
            "maxAdDurationMs": obj.get("maxAdDurationMs"),
            "programmaticCreativeSource": obj.get("programmaticCreativeSource"),
            "skippableAdType": obj.get("skippableAdType")
        })
        return _obj



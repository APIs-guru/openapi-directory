# coding: utf-8

"""
    Authorized Buyers Marketplace API

    The Authorized Buyers Marketplace API lets buyers programmatically discover inventory; propose, retrieve and negotiate deals with publishers.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.deal import Deal
from openapi_client.models.deal_pausing_info import DealPausingInfo
from openapi_client.models.rtb_metrics import RtbMetrics
from typing import Optional, Set
from typing_extensions import Self

class FinalizedDeal(BaseModel):
    """
    A finalized deal is a snapshot of the deal when both buyer and seller accept the deal. The buyer or seller can update the deal after it's been finalized and renegotiate on the deal targeting, terms and other fields, while at the same time the finalized snapshot of the deal can still be retrieved using this API. The finalized deal contains a copy of the deal as it existed when most recently finalized, as well as fields related to deal serving such as pause/resume status, RTB metrics, and more.
    """ # noqa: E501
    deal: Optional[Deal] = None
    deal_pausing_info: Optional[DealPausingInfo] = Field(default=None, alias="dealPausingInfo")
    deal_serving_status: Optional[StrictStr] = Field(default=None, description="Serving status of the deal.", alias="dealServingStatus")
    name: Optional[StrictStr] = Field(default=None, description="The resource name of the finalized deal. Format: `buyers/{accountId}/finalizedDeals/{finalizedDealId}`")
    ready_to_serve: Optional[StrictBool] = Field(default=None, description="Whether the Programmatic Guaranteed deal is ready for serving.", alias="readyToServe")
    rtb_metrics: Optional[RtbMetrics] = Field(default=None, alias="rtbMetrics")
    __properties: ClassVar[List[str]] = ["deal", "dealPausingInfo", "dealServingStatus", "name", "readyToServe", "rtbMetrics"]

    @field_validator('deal_serving_status')
    def deal_serving_status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['DEAL_SERVING_STATUS_UNSPECIFIED', 'ACTIVE', 'ENDED', 'PAUSED_BY_BUYER', 'PAUSED_BY_SELLER']):
            raise ValueError("must be one of enum values ('DEAL_SERVING_STATUS_UNSPECIFIED', 'ACTIVE', 'ENDED', 'PAUSED_BY_BUYER', 'PAUSED_BY_SELLER')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of FinalizedDeal from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of deal
        if self.deal:
            _dict['deal'] = self.deal.to_dict()
        # override the default output from pydantic by calling `to_dict()` of deal_pausing_info
        if self.deal_pausing_info:
            _dict['dealPausingInfo'] = self.deal_pausing_info.to_dict()
        # override the default output from pydantic by calling `to_dict()` of rtb_metrics
        if self.rtb_metrics:
            _dict['rtbMetrics'] = self.rtb_metrics.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of FinalizedDeal from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "deal": Deal.from_dict(obj["deal"]) if obj.get("deal") is not None else None,
            "dealPausingInfo": DealPausingInfo.from_dict(obj["dealPausingInfo"]) if obj.get("dealPausingInfo") is not None else None,
            "dealServingStatus": obj.get("dealServingStatus"),
            "name": obj.get("name"),
            "readyToServe": obj.get("readyToServe"),
            "rtbMetrics": RtbMetrics.from_dict(obj["rtbMetrics"]) if obj.get("rtbMetrics") is not None else None
        })
        return _obj



# coding: utf-8

"""
    Authorized Buyers Marketplace API

    The Authorized Buyers Marketplace API lets buyers programmatically discover inventory; propose, retrieve and negotiate deals with publishers.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.contact import Contact
from openapi_client.models.note import Note
from openapi_client.models.private_data import PrivateData
from typing import Optional, Set
from typing_extensions import Self

class Proposal(BaseModel):
    """
    Represents a proposal in the Marketplace. A proposal is the unit of negotiation between a seller and a buyer.
    """ # noqa: E501
    billed_buyer: Optional[StrictStr] = Field(default=None, description="Output only. When the client field is populated, this field refers to the buyer who creates and manages the client buyer and gets billed on behalf of the client buyer; when the buyer field is populated, this field is the same value as buyer. Format : `buyers/{buyerAccountId}`", alias="billedBuyer")
    buyer: Optional[StrictStr] = Field(default=None, description="Output only. Refers to a buyer in The Realtime-bidding API. Format: `buyers/{buyerAccountId}`")
    buyer_contacts: Optional[List[Contact]] = Field(default=None, description="Contact information for the buyer.", alias="buyerContacts")
    buyer_private_data: Optional[PrivateData] = Field(default=None, alias="buyerPrivateData")
    client: Optional[StrictStr] = Field(default=None, description="Output only. Refers to a Client. Format: `buyers/{buyerAccountId}/clients/{clientAccountid}`")
    deal_type: Optional[StrictStr] = Field(default=None, description="Output only. Type of deal the proposal contains.", alias="dealType")
    display_name: Optional[StrictStr] = Field(default=None, description="Output only. The descriptive name for the proposal. Maximum length of 255 unicode characters is allowed. Control characters are not allowed. Buyers cannot update this field. Note: Not to be confused with name, which is a unique identifier of the proposal.", alias="displayName")
    is_renegotiating: Optional[StrictBool] = Field(default=None, description="Output only. True if the proposal was previously finalized and is now being renegotiated.", alias="isRenegotiating")
    last_updater_or_commentor_role: Optional[StrictStr] = Field(default=None, description="Output only. The role of the last user that either updated the proposal or left a comment.", alias="lastUpdaterOrCommentorRole")
    name: Optional[StrictStr] = Field(default=None, description="Immutable. The name of the proposal serving as a unique identifier. Format: buyers/{accountId}/proposals/{proposalId}")
    notes: Optional[List[Note]] = Field(default=None, description="A list of notes from the buyer and the seller attached to this proposal.")
    originator_role: Optional[StrictStr] = Field(default=None, description="Output only. Indicates whether the buyer/seller created the proposal.", alias="originatorRole")
    pausing_consented: Optional[StrictBool] = Field(default=None, description="Whether pausing is allowed for the proposal. This is a negotiable term between buyers and publishers.", alias="pausingConsented")
    proposal_revision: Optional[StrictStr] = Field(default=None, description="Output only. The revision number for the proposal. Each update to the proposal or deal causes the proposal revision number to auto-increment. The buyer keeps track of the last revision number they know of and pass it in when making an update. If the head revision number on the server has since incremented, then an ABORTED error is returned during the update operation to let the buyer know that a subsequent update was made.", alias="proposalRevision")
    publisher_profile: Optional[StrictStr] = Field(default=None, description="Immutable. Reference to the seller on the proposal. Format: `buyers/{buyerAccountId}/publisherProfiles/{publisherProfileId}` Note: This field may be set only when creating the resource. Modifying this field while updating the resource will result in an error.", alias="publisherProfile")
    seller_contacts: Optional[List[Contact]] = Field(default=None, description="Output only. Contact information for the seller.", alias="sellerContacts")
    state: Optional[StrictStr] = Field(default=None, description="Output only. Indicates the state of the proposal.")
    terms_and_conditions: Optional[StrictStr] = Field(default=None, description="Output only. The terms and conditions associated with this proposal. Accepting a proposal implies acceptance of this field. This is created by the seller, the buyer can only view it.", alias="termsAndConditions")
    update_time: Optional[StrictStr] = Field(default=None, description="Output only. The time when the proposal was last revised.", alias="updateTime")
    __properties: ClassVar[List[str]] = ["billedBuyer", "buyer", "buyerContacts", "buyerPrivateData", "client", "dealType", "displayName", "isRenegotiating", "lastUpdaterOrCommentorRole", "name", "notes", "originatorRole", "pausingConsented", "proposalRevision", "publisherProfile", "sellerContacts", "state", "termsAndConditions", "updateTime"]

    @field_validator('deal_type')
    def deal_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['DEAL_TYPE_UNSPECIFIED', 'PREFERRED_DEAL', 'PRIVATE_AUCTION', 'PROGRAMMATIC_GUARANTEED']):
            raise ValueError("must be one of enum values ('DEAL_TYPE_UNSPECIFIED', 'PREFERRED_DEAL', 'PRIVATE_AUCTION', 'PROGRAMMATIC_GUARANTEED')")
        return value

    @field_validator('last_updater_or_commentor_role')
    def last_updater_or_commentor_role_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['BUYER_SELLER_ROLE_UNSPECIFIED', 'BUYER', 'SELLER']):
            raise ValueError("must be one of enum values ('BUYER_SELLER_ROLE_UNSPECIFIED', 'BUYER', 'SELLER')")
        return value

    @field_validator('originator_role')
    def originator_role_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['BUYER_SELLER_ROLE_UNSPECIFIED', 'BUYER', 'SELLER']):
            raise ValueError("must be one of enum values ('BUYER_SELLER_ROLE_UNSPECIFIED', 'BUYER', 'SELLER')")
        return value

    @field_validator('state')
    def state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['STATE_UNSPECIFIED', 'BUYER_REVIEW_REQUESTED', 'SELLER_REVIEW_REQUESTED', 'BUYER_ACCEPTANCE_REQUESTED', 'FINALIZED', 'TERMINATED']):
            raise ValueError("must be one of enum values ('STATE_UNSPECIFIED', 'BUYER_REVIEW_REQUESTED', 'SELLER_REVIEW_REQUESTED', 'BUYER_ACCEPTANCE_REQUESTED', 'FINALIZED', 'TERMINATED')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Proposal from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "billed_buyer",
            "buyer",
            "client",
            "deal_type",
            "display_name",
            "is_renegotiating",
            "last_updater_or_commentor_role",
            "originator_role",
            "proposal_revision",
            "seller_contacts",
            "state",
            "terms_and_conditions",
            "update_time",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in buyer_contacts (list)
        _items = []
        if self.buyer_contacts:
            for _item_buyer_contacts in self.buyer_contacts:
                if _item_buyer_contacts:
                    _items.append(_item_buyer_contacts.to_dict())
            _dict['buyerContacts'] = _items
        # override the default output from pydantic by calling `to_dict()` of buyer_private_data
        if self.buyer_private_data:
            _dict['buyerPrivateData'] = self.buyer_private_data.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in notes (list)
        _items = []
        if self.notes:
            for _item_notes in self.notes:
                if _item_notes:
                    _items.append(_item_notes.to_dict())
            _dict['notes'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in seller_contacts (list)
        _items = []
        if self.seller_contacts:
            for _item_seller_contacts in self.seller_contacts:
                if _item_seller_contacts:
                    _items.append(_item_seller_contacts.to_dict())
            _dict['sellerContacts'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Proposal from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "billedBuyer": obj.get("billedBuyer"),
            "buyer": obj.get("buyer"),
            "buyerContacts": [Contact.from_dict(_item) for _item in obj["buyerContacts"]] if obj.get("buyerContacts") is not None else None,
            "buyerPrivateData": PrivateData.from_dict(obj["buyerPrivateData"]) if obj.get("buyerPrivateData") is not None else None,
            "client": obj.get("client"),
            "dealType": obj.get("dealType"),
            "displayName": obj.get("displayName"),
            "isRenegotiating": obj.get("isRenegotiating"),
            "lastUpdaterOrCommentorRole": obj.get("lastUpdaterOrCommentorRole"),
            "name": obj.get("name"),
            "notes": [Note.from_dict(_item) for _item in obj["notes"]] if obj.get("notes") is not None else None,
            "originatorRole": obj.get("originatorRole"),
            "pausingConsented": obj.get("pausingConsented"),
            "proposalRevision": obj.get("proposalRevision"),
            "publisherProfile": obj.get("publisherProfile"),
            "sellerContacts": [Contact.from_dict(_item) for _item in obj["sellerContacts"]] if obj.get("sellerContacts") is not None else None,
            "state": obj.get("state"),
            "termsAndConditions": obj.get("termsAndConditions"),
            "updateTime": obj.get("updateTime")
        })
        return _obj



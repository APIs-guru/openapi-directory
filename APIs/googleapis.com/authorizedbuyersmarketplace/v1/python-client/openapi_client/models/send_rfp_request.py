# coding: utf-8

"""
    Authorized Buyers Marketplace API

    The Authorized Buyers Marketplace API lets buyers programmatically discover inventory; propose, retrieve and negotiate deals with publishers.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.contact import Contact
from openapi_client.models.criteria_targeting import CriteriaTargeting
from openapi_client.models.inventory_size_targeting import InventorySizeTargeting
from openapi_client.models.money import Money
from openapi_client.models.preferred_deal_terms import PreferredDealTerms
from openapi_client.models.programmatic_guaranteed_terms import ProgrammaticGuaranteedTerms
from typing import Optional, Set
from typing_extensions import Self

class SendRfpRequest(BaseModel):
    """
    Request to send an RFP. All fields in this request are proposed to publisher and subject to changes by publisher during later negotiation.
    """ # noqa: E501
    buyer_contacts: Optional[List[Contact]] = Field(default=None, description="Contact information for the buyer.", alias="buyerContacts")
    client: Optional[StrictStr] = Field(default=None, description="If the current buyer is sending the RFP on behalf of its client, use this field to specify the name of the client in the format: `buyers/{accountId}/clients/{clientAccountid}`.")
    display_name: Optional[StrictStr] = Field(default=None, description="Required. The display name of the proposal being created by this RFP.", alias="displayName")
    estimated_gross_spend: Optional[Money] = Field(default=None, alias="estimatedGrossSpend")
    flight_end_time: Optional[StrictStr] = Field(default=None, description="Required. Proposed flight end time of the RFP. A timestamp in RFC3339 UTC \"Zulu\" format. Note that the specified value will be truncated to a granularity of one second.", alias="flightEndTime")
    flight_start_time: Optional[StrictStr] = Field(default=None, description="Required. Proposed flight start time of the RFP. A timestamp in RFC3339 UTC \"Zulu\" format. Note that the specified value will be truncated to a granularity of one second.", alias="flightStartTime")
    geo_targeting: Optional[CriteriaTargeting] = Field(default=None, alias="geoTargeting")
    inventory_size_targeting: Optional[InventorySizeTargeting] = Field(default=None, alias="inventorySizeTargeting")
    note: Optional[StrictStr] = Field(default=None, description="A message that is sent to the publisher. Maximum length is 1024 characters.")
    preferred_deal_terms: Optional[PreferredDealTerms] = Field(default=None, alias="preferredDealTerms")
    programmatic_guaranteed_terms: Optional[ProgrammaticGuaranteedTerms] = Field(default=None, alias="programmaticGuaranteedTerms")
    publisher_profile: Optional[StrictStr] = Field(default=None, description="Required. The profile of the publisher who will receive this RFP in the format: `buyers/{accountId}/publisherProfiles/{publisherProfileId}`.", alias="publisherProfile")
    __properties: ClassVar[List[str]] = ["buyerContacts", "client", "displayName", "estimatedGrossSpend", "flightEndTime", "flightStartTime", "geoTargeting", "inventorySizeTargeting", "note", "preferredDealTerms", "programmaticGuaranteedTerms", "publisherProfile"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SendRfpRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in buyer_contacts (list)
        _items = []
        if self.buyer_contacts:
            for _item_buyer_contacts in self.buyer_contacts:
                if _item_buyer_contacts:
                    _items.append(_item_buyer_contacts.to_dict())
            _dict['buyerContacts'] = _items
        # override the default output from pydantic by calling `to_dict()` of estimated_gross_spend
        if self.estimated_gross_spend:
            _dict['estimatedGrossSpend'] = self.estimated_gross_spend.to_dict()
        # override the default output from pydantic by calling `to_dict()` of geo_targeting
        if self.geo_targeting:
            _dict['geoTargeting'] = self.geo_targeting.to_dict()
        # override the default output from pydantic by calling `to_dict()` of inventory_size_targeting
        if self.inventory_size_targeting:
            _dict['inventorySizeTargeting'] = self.inventory_size_targeting.to_dict()
        # override the default output from pydantic by calling `to_dict()` of preferred_deal_terms
        if self.preferred_deal_terms:
            _dict['preferredDealTerms'] = self.preferred_deal_terms.to_dict()
        # override the default output from pydantic by calling `to_dict()` of programmatic_guaranteed_terms
        if self.programmatic_guaranteed_terms:
            _dict['programmaticGuaranteedTerms'] = self.programmatic_guaranteed_terms.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SendRfpRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "buyerContacts": [Contact.from_dict(_item) for _item in obj["buyerContacts"]] if obj.get("buyerContacts") is not None else None,
            "client": obj.get("client"),
            "displayName": obj.get("displayName"),
            "estimatedGrossSpend": Money.from_dict(obj["estimatedGrossSpend"]) if obj.get("estimatedGrossSpend") is not None else None,
            "flightEndTime": obj.get("flightEndTime"),
            "flightStartTime": obj.get("flightStartTime"),
            "geoTargeting": CriteriaTargeting.from_dict(obj["geoTargeting"]) if obj.get("geoTargeting") is not None else None,
            "inventorySizeTargeting": InventorySizeTargeting.from_dict(obj["inventorySizeTargeting"]) if obj.get("inventorySizeTargeting") is not None else None,
            "note": obj.get("note"),
            "preferredDealTerms": PreferredDealTerms.from_dict(obj["preferredDealTerms"]) if obj.get("preferredDealTerms") is not None else None,
            "programmaticGuaranteedTerms": ProgrammaticGuaranteedTerms.from_dict(obj["programmaticGuaranteedTerms"]) if obj.get("programmaticGuaranteedTerms") is not None else None,
            "publisherProfile": obj.get("publisherProfile")
        })
        return _obj



# coding: utf-8

"""
    Authorized Buyers Marketplace API

    The Authorized Buyers Marketplace API lets buyers programmatically discover inventory; propose, retrieve and negotiate deals with publishers.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.frequency_cap import FrequencyCap
from typing import Optional, Set
from typing_extensions import Self

class DeliveryControl(BaseModel):
    """
    Message contains details about how the deal will be paced.
    """ # noqa: E501
    companion_delivery_type: Optional[StrictStr] = Field(default=None, description="Output only. Specifies roadblocking in a main companion lineitem.", alias="companionDeliveryType")
    creative_rotation_type: Optional[StrictStr] = Field(default=None, description="Output only. Specifies strategy to use for selecting a creative when multiple creatives of the same size are available.", alias="creativeRotationType")
    delivery_rate_type: Optional[StrictStr] = Field(default=None, description="Output only. Specifies how the impression delivery will be paced.", alias="deliveryRateType")
    frequency_cap: Optional[List[FrequencyCap]] = Field(default=None, description="Output only. Specifies any frequency caps. Cannot be filtered within ListDealsRequest.", alias="frequencyCap")
    roadblocking_type: Optional[StrictStr] = Field(default=None, description="Output only. Specifies the roadblocking type in display creatives.", alias="roadblockingType")
    __properties: ClassVar[List[str]] = ["companionDeliveryType", "creativeRotationType", "deliveryRateType", "frequencyCap", "roadblockingType"]

    @field_validator('companion_delivery_type')
    def companion_delivery_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['COMPANION_DELIVERY_TYPE_UNSPECIFIED', 'DELIVERY_OPTIONAL', 'DELIVERY_AT_LEAST_ONE', 'DELIVERY_ALL']):
            raise ValueError("must be one of enum values ('COMPANION_DELIVERY_TYPE_UNSPECIFIED', 'DELIVERY_OPTIONAL', 'DELIVERY_AT_LEAST_ONE', 'DELIVERY_ALL')")
        return value

    @field_validator('creative_rotation_type')
    def creative_rotation_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['CREATIVE_ROTATION_TYPE_UNSPECIFIED', 'ROTATION_EVEN', 'ROTATION_OPTIMIZED', 'ROTATION_MANUAL', 'ROTATION_SEQUENTIAL']):
            raise ValueError("must be one of enum values ('CREATIVE_ROTATION_TYPE_UNSPECIFIED', 'ROTATION_EVEN', 'ROTATION_OPTIMIZED', 'ROTATION_MANUAL', 'ROTATION_SEQUENTIAL')")
        return value

    @field_validator('delivery_rate_type')
    def delivery_rate_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['DELIVERY_RATE_TYPE_UNSPECIFIED', 'EVENLY', 'FRONT_LOADED', 'AS_FAST_AS_POSSIBLE']):
            raise ValueError("must be one of enum values ('DELIVERY_RATE_TYPE_UNSPECIFIED', 'EVENLY', 'FRONT_LOADED', 'AS_FAST_AS_POSSIBLE')")
        return value

    @field_validator('roadblocking_type')
    def roadblocking_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['ROADBLOCKING_TYPE_UNSPECIFIED', 'ONLY_ONE', 'ONE_OR_MORE', 'AS_MANY_AS_POSSIBLE', 'ALL_ROADBLOCK', 'CREATIVE_SET']):
            raise ValueError("must be one of enum values ('ROADBLOCKING_TYPE_UNSPECIFIED', 'ONLY_ONE', 'ONE_OR_MORE', 'AS_MANY_AS_POSSIBLE', 'ALL_ROADBLOCK', 'CREATIVE_SET')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DeliveryControl from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "companion_delivery_type",
            "creative_rotation_type",
            "delivery_rate_type",
            "frequency_cap",
            "roadblocking_type",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in frequency_cap (list)
        _items = []
        if self.frequency_cap:
            for _item_frequency_cap in self.frequency_cap:
                if _item_frequency_cap:
                    _items.append(_item_frequency_cap.to_dict())
            _dict['frequencyCap'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DeliveryControl from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "companionDeliveryType": obj.get("companionDeliveryType"),
            "creativeRotationType": obj.get("creativeRotationType"),
            "deliveryRateType": obj.get("deliveryRateType"),
            "frequencyCap": [FrequencyCap.from_dict(_item) for _item in obj["frequencyCap"]] if obj.get("frequencyCap") is not None else None,
            "roadblockingType": obj.get("roadblockingType")
        })
        return _obj



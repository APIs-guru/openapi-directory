# coding: utf-8

"""
    Authorized Buyers Marketplace API

    The Authorized Buyers Marketplace API lets buyers programmatically discover inventory; propose, retrieve and negotiate deals with publishers.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.creative_requirements import CreativeRequirements
from openapi_client.models.delivery_control import DeliveryControl
from openapi_client.models.marketplace_targeting import MarketplaceTargeting
from openapi_client.models.money import Money
from openapi_client.models.preferred_deal_terms import PreferredDealTerms
from openapi_client.models.private_auction_terms import PrivateAuctionTerms
from openapi_client.models.programmatic_guaranteed_terms import ProgrammaticGuaranteedTerms
from openapi_client.models.time_zone import TimeZone
from typing import Optional, Set
from typing_extensions import Self

class Deal(BaseModel):
    """
    A deal represents a segment of inventory for displaying ads that contains the terms and targeting information that is used for serving as well as the deal stats and status. Note: A proposal may contain multiple deals.
    """ # noqa: E501
    billed_buyer: Optional[StrictStr] = Field(default=None, description="Output only. When the client field is populated, this field refers to the buyer who creates and manages the client buyer and gets billed on behalf of the client buyer; when the buyer field is populated, this field is the same value as buyer. Format : `buyers/{buyerAccountId}`", alias="billedBuyer")
    buyer: Optional[StrictStr] = Field(default=None, description="Output only. Refers to a buyer in The Realtime-bidding API. Format: `buyers/{buyerAccountId}`")
    client: Optional[StrictStr] = Field(default=None, description="Output only. Refers to a Client. Format: `buyers/{buyerAccountId}/clients/{clientAccountid}`")
    create_time: Optional[StrictStr] = Field(default=None, description="Output only. The time of the deal creation.", alias="createTime")
    creative_requirements: Optional[CreativeRequirements] = Field(default=None, alias="creativeRequirements")
    deal_type: Optional[StrictStr] = Field(default=None, description="Output only. Type of deal.", alias="dealType")
    delivery_control: Optional[DeliveryControl] = Field(default=None, alias="deliveryControl")
    description: Optional[StrictStr] = Field(default=None, description="Output only. Free text description for the deal terms.")
    display_name: Optional[StrictStr] = Field(default=None, description="Output only. The name of the deal. Maximum length of 255 unicode characters is allowed. Control characters are not allowed. Buyers cannot update this field. Note: Not to be confused with name, which is a unique identifier of the deal.", alias="displayName")
    estimated_gross_spend: Optional[Money] = Field(default=None, alias="estimatedGrossSpend")
    flight_end_time: Optional[StrictStr] = Field(default=None, description="Proposed flight end time of the deal. This will generally be stored in a granularity of a second. A value is not necessary for Private Auction deals.", alias="flightEndTime")
    flight_start_time: Optional[StrictStr] = Field(default=None, description="Proposed flight start time of the deal. This will generally be stored in the granularity of one second since deal serving starts at seconds boundary. Any time specified with more granularity (for example, in milliseconds) will be truncated towards the start of time in seconds.", alias="flightStartTime")
    name: Optional[StrictStr] = Field(default=None, description="Immutable. The unique identifier of the deal. Auto-generated by the server when a deal is created. Format: buyers/{accountId}/proposals/{proposalId}/deals/{dealId}")
    preferred_deal_terms: Optional[PreferredDealTerms] = Field(default=None, alias="preferredDealTerms")
    private_auction_terms: Optional[PrivateAuctionTerms] = Field(default=None, alias="privateAuctionTerms")
    programmatic_guaranteed_terms: Optional[ProgrammaticGuaranteedTerms] = Field(default=None, alias="programmaticGuaranteedTerms")
    proposal_revision: Optional[StrictStr] = Field(default=None, description="Output only. The revision number for the proposal and is the same value as proposal.proposal_revision. Each update to deal causes the proposal revision number to auto-increment. The buyer keeps track of the last revision number they know of and pass it in when making an update. If the head revision number on the server has since incremented, then an ABORTED error is returned during the update operation to let the buyer know that a subsequent update was made.", alias="proposalRevision")
    publisher_profile: Optional[StrictStr] = Field(default=None, description="Immutable. Reference to the seller on the deal. Format: `buyers/{buyerAccountId}/publisherProfiles/{publisherProfileId}`", alias="publisherProfile")
    seller_time_zone: Optional[TimeZone] = Field(default=None, alias="sellerTimeZone")
    targeting: Optional[MarketplaceTargeting] = None
    update_time: Optional[StrictStr] = Field(default=None, description="Output only. The time when the deal was last updated.", alias="updateTime")
    __properties: ClassVar[List[str]] = ["billedBuyer", "buyer", "client", "createTime", "creativeRequirements", "dealType", "deliveryControl", "description", "displayName", "estimatedGrossSpend", "flightEndTime", "flightStartTime", "name", "preferredDealTerms", "privateAuctionTerms", "programmaticGuaranteedTerms", "proposalRevision", "publisherProfile", "sellerTimeZone", "targeting", "updateTime"]

    @field_validator('deal_type')
    def deal_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['DEAL_TYPE_UNSPECIFIED', 'PREFERRED_DEAL', 'PRIVATE_AUCTION', 'PROGRAMMATIC_GUARANTEED']):
            raise ValueError("must be one of enum values ('DEAL_TYPE_UNSPECIFIED', 'PREFERRED_DEAL', 'PRIVATE_AUCTION', 'PROGRAMMATIC_GUARANTEED')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Deal from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "billed_buyer",
            "buyer",
            "client",
            "create_time",
            "deal_type",
            "description",
            "display_name",
            "proposal_revision",
            "update_time",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of creative_requirements
        if self.creative_requirements:
            _dict['creativeRequirements'] = self.creative_requirements.to_dict()
        # override the default output from pydantic by calling `to_dict()` of delivery_control
        if self.delivery_control:
            _dict['deliveryControl'] = self.delivery_control.to_dict()
        # override the default output from pydantic by calling `to_dict()` of estimated_gross_spend
        if self.estimated_gross_spend:
            _dict['estimatedGrossSpend'] = self.estimated_gross_spend.to_dict()
        # override the default output from pydantic by calling `to_dict()` of preferred_deal_terms
        if self.preferred_deal_terms:
            _dict['preferredDealTerms'] = self.preferred_deal_terms.to_dict()
        # override the default output from pydantic by calling `to_dict()` of private_auction_terms
        if self.private_auction_terms:
            _dict['privateAuctionTerms'] = self.private_auction_terms.to_dict()
        # override the default output from pydantic by calling `to_dict()` of programmatic_guaranteed_terms
        if self.programmatic_guaranteed_terms:
            _dict['programmaticGuaranteedTerms'] = self.programmatic_guaranteed_terms.to_dict()
        # override the default output from pydantic by calling `to_dict()` of seller_time_zone
        if self.seller_time_zone:
            _dict['sellerTimeZone'] = self.seller_time_zone.to_dict()
        # override the default output from pydantic by calling `to_dict()` of targeting
        if self.targeting:
            _dict['targeting'] = self.targeting.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Deal from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "billedBuyer": obj.get("billedBuyer"),
            "buyer": obj.get("buyer"),
            "client": obj.get("client"),
            "createTime": obj.get("createTime"),
            "creativeRequirements": CreativeRequirements.from_dict(obj["creativeRequirements"]) if obj.get("creativeRequirements") is not None else None,
            "dealType": obj.get("dealType"),
            "deliveryControl": DeliveryControl.from_dict(obj["deliveryControl"]) if obj.get("deliveryControl") is not None else None,
            "description": obj.get("description"),
            "displayName": obj.get("displayName"),
            "estimatedGrossSpend": Money.from_dict(obj["estimatedGrossSpend"]) if obj.get("estimatedGrossSpend") is not None else None,
            "flightEndTime": obj.get("flightEndTime"),
            "flightStartTime": obj.get("flightStartTime"),
            "name": obj.get("name"),
            "preferredDealTerms": PreferredDealTerms.from_dict(obj["preferredDealTerms"]) if obj.get("preferredDealTerms") is not None else None,
            "privateAuctionTerms": PrivateAuctionTerms.from_dict(obj["privateAuctionTerms"]) if obj.get("privateAuctionTerms") is not None else None,
            "programmaticGuaranteedTerms": ProgrammaticGuaranteedTerms.from_dict(obj["programmaticGuaranteedTerms"]) if obj.get("programmaticGuaranteedTerms") is not None else None,
            "proposalRevision": obj.get("proposalRevision"),
            "publisherProfile": obj.get("publisherProfile"),
            "sellerTimeZone": TimeZone.from_dict(obj["sellerTimeZone"]) if obj.get("sellerTimeZone") is not None else None,
            "targeting": MarketplaceTargeting.from_dict(obj["targeting"]) if obj.get("targeting") is not None else None,
            "updateTime": obj.get("updateTime")
        })
        return _obj



# coding: utf-8

"""
    Authorized Buyers Marketplace API

    The Authorized Buyers Marketplace API lets buyers programmatically discover inventory; propose, retrieve and negotiate deals with publishers.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class Client(BaseModel):
    """
    A client represents an agency, a brand, or an advertiser customer of the buyer. Based on the client's role, its client users will have varying levels of restricted access to the Marketplace and certain other sections of the Authorized Buyers UI.
    """ # noqa: E501
    display_name: Optional[StrictStr] = Field(default=None, description="Required. Display name shown to publishers. Must be unique for clients without partnerClientId specified. Maximum length of 255 characters is allowed.", alias="displayName")
    name: Optional[StrictStr] = Field(default=None, description="Output only. The resource name of the client. Format: `buyers/{accountId}/clients/{clientAccountId}`")
    partner_client_id: Optional[StrictStr] = Field(default=None, description="Arbitrary unique identifier provided by the buyer. This field can be used to associate a client with an identifier in the namespace of the buyer, lookup clients by that identifier and verify whether an Authorized Buyers account of the client already exists. If present, must be unique across all the clients.", alias="partnerClientId")
    role: Optional[StrictStr] = Field(default=None, description="Required. The role assigned to the client. Each role implies a set of permissions granted to the client.")
    seller_visible: Optional[StrictBool] = Field(default=None, description="Whether the client will be visible to sellers.", alias="sellerVisible")
    state: Optional[StrictStr] = Field(default=None, description="Output only. The state of the client.")
    __properties: ClassVar[List[str]] = ["displayName", "name", "partnerClientId", "role", "sellerVisible", "state"]

    @field_validator('role')
    def role_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['CLIENT_ROLE_UNSPECIFIED', 'CLIENT_DEAL_VIEWER', 'CLIENT_DEAL_NEGOTIATOR', 'CLIENT_DEAL_APPROVER']):
            raise ValueError("must be one of enum values ('CLIENT_ROLE_UNSPECIFIED', 'CLIENT_DEAL_VIEWER', 'CLIENT_DEAL_NEGOTIATOR', 'CLIENT_DEAL_APPROVER')")
        return value

    @field_validator('state')
    def state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['STATE_UNSPECIFIED', 'ACTIVE', 'INACTIVE']):
            raise ValueError("must be one of enum values ('STATE_UNSPECIFIED', 'ACTIVE', 'INACTIVE')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Client from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "name",
            "state",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Client from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "displayName": obj.get("displayName"),
            "name": obj.get("name"),
            "partnerClientId": obj.get("partnerClientId"),
            "role": obj.get("role"),
            "sellerVisible": obj.get("sellerVisible"),
            "state": obj.get("state")
        })
        return _obj



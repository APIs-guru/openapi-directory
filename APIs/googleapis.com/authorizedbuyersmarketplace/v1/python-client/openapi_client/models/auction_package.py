# coding: utf-8

"""
    Authorized Buyers Marketplace API

    The Authorized Buyers Marketplace API lets buyers programmatically discover inventory; propose, retrieve and negotiate deals with publishers.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class AuctionPackage(BaseModel):
    """
    Defines a segment of inventory that buyer wants to buy. It's created by buyer and could be shared with multiple buyers.
    """ # noqa: E501
    create_time: Optional[StrictStr] = Field(default=None, description="Output only. Time the auction package was created.", alias="createTime")
    creator: Optional[StrictStr] = Field(default=None, description="Output only. The buyer that created this auction package. Format: `buyers/{buyerAccountId}`")
    description: Optional[StrictStr] = Field(default=None, description="Output only. A description of the auction package.")
    display_name: Optional[StrictStr] = Field(default=None, description="The display_name assigned to the auction package.", alias="displayName")
    name: Optional[StrictStr] = Field(default=None, description="Immutable. The unique identifier for the auction package. Format: `buyers/{accountId}/auctionPackages/{auctionPackageId}` The auction_package_id part of name is sent in the BidRequest to all RTB bidders and is returned as deal_id by the bidder in the BidResponse.")
    subscribed_clients: Optional[List[StrictStr]] = Field(default=None, description="Output only. The list of clients of the current buyer that are subscribed to the AuctionPackage. Format: `buyers/{buyerAccountId}/clients/{clientAccountId}`", alias="subscribedClients")
    update_time: Optional[StrictStr] = Field(default=None, description="Output only. Time the auction package was last updated. This value is only increased when this auction package is updated but never when a buyer subscribed.", alias="updateTime")
    __properties: ClassVar[List[str]] = ["createTime", "creator", "description", "displayName", "name", "subscribedClients", "updateTime"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AuctionPackage from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "create_time",
            "creator",
            "description",
            "subscribed_clients",
            "update_time",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AuctionPackage from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "createTime": obj.get("createTime"),
            "creator": obj.get("creator"),
            "description": obj.get("description"),
            "displayName": obj.get("displayName"),
            "name": obj.get("name"),
            "subscribedClients": obj.get("subscribedClients"),
            "updateTime": obj.get("updateTime")
        })
        return _obj



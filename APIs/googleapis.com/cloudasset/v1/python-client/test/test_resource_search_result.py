# coding: utf-8

"""
    Cloud Asset API

    The Cloud Asset API manages the history and inventory of Google Cloud resources.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.resource_search_result import ResourceSearchResult

class TestResourceSearchResult(unittest.TestCase):
    """ResourceSearchResult unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> ResourceSearchResult:
        """Test ResourceSearchResult
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `ResourceSearchResult`
        """
        model = ResourceSearchResult()
        if include_optional:
            return ResourceSearchResult(
                additional_attributes = {
                    'key' : null
                    },
                asset_type = '',
                attached_resources = [
                    openapi_client.models.attached_resource.AttachedResource(
                        asset_type = '', 
                        versioned_resources = [
                            openapi_client.models.versioned_resource.VersionedResource(
                                resource = {
                                    'key' : null
                                    }, 
                                version = '', )
                            ], )
                    ],
                create_time = '',
                description = '',
                display_name = '',
                effective_tags = [
                    openapi_client.models.effective_tag_details.EffectiveTagDetails(
                        attached_resource = '', 
                        effective_tags = [
                            openapi_client.models.tag.Tag(
                                tag_key = '', 
                                tag_value = '', 
                                tag_value_id = '', )
                            ], )
                    ],
                folders = [
                    ''
                    ],
                kms_key = '',
                kms_keys = [
                    ''
                    ],
                labels = {
                    'key' : ''
                    },
                location = '',
                name = '',
                network_tags = [
                    ''
                    ],
                organization = '',
                parent_asset_type = '',
                parent_full_resource_name = '',
                project = '',
                relationships = {
                    'key' : openapi_client.models.related_resources.RelatedResources(
                        related_resources = [
                            openapi_client.models.related_resource.RelatedResource(
                                asset_type = '', 
                                full_resource_name = '', )
                            ], )
                    },
                scc_security_marks = {
                    'key' : ''
                    },
                state = '',
                tag_keys = [
                    ''
                    ],
                tag_value_ids = [
                    ''
                    ],
                tag_values = [
                    ''
                    ],
                tags = [
                    openapi_client.models.tag.Tag(
                        tag_key = '', 
                        tag_value = '', 
                        tag_value_id = '', )
                    ],
                update_time = '',
                versioned_resources = [
                    openapi_client.models.versioned_resource.VersionedResource(
                        resource = {
                            'key' : null
                            }, 
                        version = '', )
                    ]
            )
        else:
            return ResourceSearchResult(
        )
        """

    def testResourceSearchResult(self):
        """Test ResourceSearchResult"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

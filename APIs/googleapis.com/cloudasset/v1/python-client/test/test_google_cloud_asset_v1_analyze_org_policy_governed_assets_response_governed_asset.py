# coding: utf-8

"""
    Cloud Asset API

    The Cloud Asset API manages the history and inventory of Google Cloud resources.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.google_cloud_asset_v1_analyze_org_policy_governed_assets_response_governed_asset import GoogleCloudAssetV1AnalyzeOrgPolicyGovernedAssetsResponseGovernedAsset

class TestGoogleCloudAssetV1AnalyzeOrgPolicyGovernedAssetsResponseGovernedAsset(unittest.TestCase):
    """GoogleCloudAssetV1AnalyzeOrgPolicyGovernedAssetsResponseGovernedAsset unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> GoogleCloudAssetV1AnalyzeOrgPolicyGovernedAssetsResponseGovernedAsset:
        """Test GoogleCloudAssetV1AnalyzeOrgPolicyGovernedAssetsResponseGovernedAsset
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `GoogleCloudAssetV1AnalyzeOrgPolicyGovernedAssetsResponseGovernedAsset`
        """
        model = GoogleCloudAssetV1AnalyzeOrgPolicyGovernedAssetsResponseGovernedAsset()
        if include_optional:
            return GoogleCloudAssetV1AnalyzeOrgPolicyGovernedAssetsResponseGovernedAsset(
                consolidated_policy = openapi_client.models.analyzer_org_policy.AnalyzerOrgPolicy(
                    applied_resource = '', 
                    attached_resource = '', 
                    inherit_from_parent = True, 
                    reset = True, 
                    rules = [
                        openapi_client.models.google_cloud_asset_v1_rule.GoogleCloudAssetV1Rule(
                            allow_all = True, 
                            condition = openapi_client.models.expr.Expr(
                                description = '', 
                                expression = '', 
                                location = '', 
                                title = '', ), 
                            condition_evaluation = openapi_client.models.condition_evaluation.ConditionEvaluation(
                                evaluation_value = 'EVALUATION_VALUE_UNSPECIFIED', ), 
                            deny_all = True, 
                            enforce = True, 
                            values = openapi_client.models.google_cloud_asset_v1_string_values.GoogleCloudAssetV1StringValues(
                                allowed_values = [
                                    ''
                                    ], 
                                denied_values = [
                                    ''
                                    ], ), )
                        ], ),
                governed_iam_policy = openapi_client.models.google_cloud_asset_v1_analyze_org_policy_governed_assets_response_governed_iam_policy.GoogleCloudAssetV1AnalyzeOrgPolicyGovernedAssetsResponseGovernedIamPolicy(
                    asset_type = '', 
                    attached_resource = '', 
                    folders = [
                        ''
                        ], 
                    organization = '', 
                    policy = openapi_client.models.policy.Policy(
                        audit_configs = [
                            openapi_client.models.audit_config.AuditConfig(
                                audit_log_configs = [
                                    openapi_client.models.audit_log_config.AuditLogConfig(
                                        exempted_members = [
                                            ''
                                            ], 
                                        log_type = 'LOG_TYPE_UNSPECIFIED', )
                                    ], 
                                service = '', )
                            ], 
                        bindings = [
                            openapi_client.models.binding.Binding(
                                condition = openapi_client.models.expr.Expr(
                                    description = '', 
                                    expression = '', 
                                    location = '', 
                                    title = '', ), 
                                members = [
                                    ''
                                    ], 
                                role = '', )
                            ], 
                        etag = 'YQ==', 
                        version = 56, ), 
                    project = '', ),
                governed_resource = openapi_client.models.google_cloud_asset_v1_analyze_org_policy_governed_assets_response_governed_resource.GoogleCloudAssetV1AnalyzeOrgPolicyGovernedAssetsResponseGovernedResource(
                    asset_type = '', 
                    effective_tags = [
                        openapi_client.models.effective_tag_details.EffectiveTagDetails(
                            attached_resource = '', )
                        ], 
                    folders = [
                        ''
                        ], 
                    full_resource_name = '', 
                    organization = '', 
                    parent = '', 
                    project = '', ),
                policy_bundle = [
                    openapi_client.models.analyzer_org_policy.AnalyzerOrgPolicy(
                        applied_resource = '', 
                        attached_resource = '', 
                        inherit_from_parent = True, 
                        reset = True, 
                        rules = [
                            openapi_client.models.google_cloud_asset_v1_rule.GoogleCloudAssetV1Rule(
                                allow_all = True, 
                                condition = openapi_client.models.expr.Expr(
                                    description = '', 
                                    expression = '', 
                                    location = '', 
                                    title = '', ), 
                                condition_evaluation = openapi_client.models.condition_evaluation.ConditionEvaluation(
                                    evaluation_value = 'EVALUATION_VALUE_UNSPECIFIED', ), 
                                deny_all = True, 
                                enforce = True, 
                                values = openapi_client.models.google_cloud_asset_v1_string_values.GoogleCloudAssetV1StringValues(
                                    allowed_values = [
                                        ''
                                        ], 
                                    denied_values = [
                                        ''
                                        ], ), )
                            ], )
                    ]
            )
        else:
            return GoogleCloudAssetV1AnalyzeOrgPolicyGovernedAssetsResponseGovernedAsset(
        )
        """

    def testGoogleCloudAssetV1AnalyzeOrgPolicyGovernedAssetsResponseGovernedAsset(self):
        """Test GoogleCloudAssetV1AnalyzeOrgPolicyGovernedAssetsResponseGovernedAsset"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

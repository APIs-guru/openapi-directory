# coding: utf-8

"""
    Cloud Asset API

    The Cloud Asset API manages the history and inventory of Google Cloud resources.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.iam_policy_analysis import IamPolicyAnalysis

class TestIamPolicyAnalysis(unittest.TestCase):
    """IamPolicyAnalysis unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> IamPolicyAnalysis:
        """Test IamPolicyAnalysis
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `IamPolicyAnalysis`
        """
        model = IamPolicyAnalysis()
        if include_optional:
            return IamPolicyAnalysis(
                analysis_query = openapi_client.models.iam_policy_analysis_query.IamPolicyAnalysisQuery(
                    access_selector = openapi_client.models.access_selector.AccessSelector(
                        permissions = [
                            ''
                            ], 
                        roles = [
                            ''
                            ], ), 
                    condition_context = openapi_client.models.condition_context.ConditionContext(
                        access_time = '', ), 
                    identity_selector = openapi_client.models.identity_selector.IdentitySelector(
                        identity = '', ), 
                    options = openapi_client.models.options.Options(
                        analyze_service_account_impersonation = True, 
                        expand_groups = True, 
                        expand_resources = True, 
                        expand_roles = True, 
                        output_group_edges = True, 
                        output_resource_edges = True, ), 
                    resource_selector = openapi_client.models.resource_selector.ResourceSelector(
                        full_resource_name = '', ), 
                    scope = '', ),
                analysis_results = [
                    openapi_client.models.iam_policy_analysis_result.IamPolicyAnalysisResult(
                        access_control_lists = [
                            openapi_client.models.google_cloud_asset_v1_access_control_list.GoogleCloudAssetV1AccessControlList(
                                accesses = [
                                    openapi_client.models.google_cloud_asset_v1_access.GoogleCloudAssetV1Access(
                                        analysis_state = openapi_client.models.iam_policy_analysis_state.IamPolicyAnalysisState(
                                            cause = '', 
                                            code = 'OK', ), 
                                        permission = '', 
                                        role = '', )
                                    ], 
                                condition_evaluation = openapi_client.models.condition_evaluation.ConditionEvaluation(
                                    evaluation_value = 'EVALUATION_VALUE_UNSPECIFIED', ), 
                                resource_edges = [
                                    openapi_client.models.google_cloud_asset_v1_edge.GoogleCloudAssetV1Edge(
                                        source_node = '', 
                                        target_node = '', )
                                    ], 
                                resources = [
                                    openapi_client.models.google_cloud_asset_v1_resource.GoogleCloudAssetV1Resource(
                                        full_resource_name = '', )
                                    ], )
                            ], 
                        attached_resource_full_name = '', 
                        fully_explored = True, 
                        iam_binding = openapi_client.models.binding.Binding(
                            condition = openapi_client.models.expr.Expr(
                                description = '', 
                                expression = '', 
                                location = '', 
                                title = '', ), 
                            members = [
                                ''
                                ], 
                            role = '', ), 
                        identity_list = openapi_client.models.google_cloud_asset_v1_identity_list.GoogleCloudAssetV1IdentityList(
                            group_edges = [
                                openapi_client.models.google_cloud_asset_v1_edge.GoogleCloudAssetV1Edge(
                                    source_node = '', 
                                    target_node = '', )
                                ], 
                            identities = [
                                openapi_client.models.google_cloud_asset_v1_identity.GoogleCloudAssetV1Identity(
                                    name = '', )
                                ], ), )
                    ],
                fully_explored = True,
                non_critical_errors = [
                    openapi_client.models.iam_policy_analysis_state.IamPolicyAnalysisState(
                        cause = '', 
                        code = 'OK', )
                    ]
            )
        else:
            return IamPolicyAnalysis(
        )
        """

    def testIamPolicyAnalysis(self):
        """Test IamPolicyAnalysis"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

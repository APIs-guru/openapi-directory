# coding: utf-8

"""
    Cloud Asset API

    The Cloud Asset API manages the history and inventory of Google Cloud resources.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.software_package import SoftwarePackage

class TestSoftwarePackage(unittest.TestCase):
    """SoftwarePackage unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> SoftwarePackage:
        """Test SoftwarePackage
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `SoftwarePackage`
        """
        model = SoftwarePackage()
        if include_optional:
            return SoftwarePackage(
                apt_package = openapi_client.models.versioned_package.VersionedPackage(
                    architecture = '', 
                    package_name = '', 
                    version = '', ),
                cos_package = openapi_client.models.versioned_package.VersionedPackage(
                    architecture = '', 
                    package_name = '', 
                    version = '', ),
                googet_package = openapi_client.models.versioned_package.VersionedPackage(
                    architecture = '', 
                    package_name = '', 
                    version = '', ),
                qfe_package = openapi_client.models.windows_quick_fix_engineering_package.WindowsQuickFixEngineeringPackage(
                    caption = '', 
                    description = '', 
                    hot_fix_id = '', 
                    install_time = '', ),
                windows_application = openapi_client.models.windows_application.WindowsApplication(
                    display_name = '', 
                    display_version = '', 
                    help_link = '', 
                    install_date = openapi_client.models.date.Date(
                        day = 56, 
                        month = 56, 
                        year = 56, ), 
                    publisher = '', ),
                wua_package = openapi_client.models.windows_update_package.WindowsUpdatePackage(
                    categories = [
                        openapi_client.models.windows_update_category.WindowsUpdateCategory(
                            id = '', 
                            name = '', )
                        ], 
                    description = '', 
                    kb_article_ids = [
                        ''
                        ], 
                    last_deployment_change_time = '', 
                    more_info_urls = [
                        ''
                        ], 
                    revision_number = 56, 
                    support_url = '', 
                    title = '', 
                    update_id = '', ),
                yum_package = openapi_client.models.versioned_package.VersionedPackage(
                    architecture = '', 
                    package_name = '', 
                    version = '', ),
                zypper_package = openapi_client.models.versioned_package.VersionedPackage(
                    architecture = '', 
                    package_name = '', 
                    version = '', ),
                zypper_patch = openapi_client.models.zypper_patch.ZypperPatch(
                    category = '', 
                    patch_name = '', 
                    severity = '', 
                    summary = '', )
            )
        else:
            return SoftwarePackage(
        )
        """

    def testSoftwarePackage(self):
        """Test SoftwarePackage"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

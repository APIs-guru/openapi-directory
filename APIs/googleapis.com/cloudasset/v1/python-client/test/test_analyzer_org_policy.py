# coding: utf-8

"""
    Cloud Asset API

    The Cloud Asset API manages the history and inventory of Google Cloud resources.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.analyzer_org_policy import AnalyzerOrgPolicy

class TestAnalyzerOrgPolicy(unittest.TestCase):
    """AnalyzerOrgPolicy unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> AnalyzerOrgPolicy:
        """Test AnalyzerOrgPolicy
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `AnalyzerOrgPolicy`
        """
        model = AnalyzerOrgPolicy()
        if include_optional:
            return AnalyzerOrgPolicy(
                applied_resource = '',
                attached_resource = '',
                inherit_from_parent = True,
                reset = True,
                rules = [
                    openapi_client.models.google_cloud_asset_v1_rule.GoogleCloudAssetV1Rule(
                        allow_all = True, 
                        condition = openapi_client.models.expr.Expr(
                            description = '', 
                            expression = '', 
                            location = '', 
                            title = '', ), 
                        condition_evaluation = openapi_client.models.condition_evaluation.ConditionEvaluation(
                            evaluation_value = 'EVALUATION_VALUE_UNSPECIFIED', ), 
                        deny_all = True, 
                        enforce = True, 
                        values = openapi_client.models.google_cloud_asset_v1_string_values.GoogleCloudAssetV1StringValues(
                            allowed_values = [
                                ''
                                ], 
                            denied_values = [
                                ''
                                ], ), )
                    ]
            )
        else:
            return AnalyzerOrgPolicy(
        )
        """

    def testAnalyzerOrgPolicy(self):
        """Test AnalyzerOrgPolicy"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

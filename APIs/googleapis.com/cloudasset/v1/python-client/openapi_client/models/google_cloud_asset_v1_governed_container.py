# coding: utf-8

"""
    Cloud Asset API

    The Cloud Asset API manages the history and inventory of Google Cloud resources.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.analyzer_org_policy import AnalyzerOrgPolicy
from openapi_client.models.effective_tag_details import EffectiveTagDetails
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudAssetV1GovernedContainer(BaseModel):
    """
    The organization/folder/project resource governed by organization policies of AnalyzeOrgPolicyGovernedContainersRequest.constraint.
    """ # noqa: E501
    consolidated_policy: Optional[AnalyzerOrgPolicy] = Field(default=None, alias="consolidatedPolicy")
    effective_tags: Optional[List[EffectiveTagDetails]] = Field(default=None, description="The effective tags on this resource.", alias="effectiveTags")
    folders: Optional[List[StrictStr]] = Field(default=None, description="The folder(s) that this resource belongs to, in the format of folders/{FOLDER_NUMBER}. This field is available when the resource belongs (directly or cascadingly) to one or more folders.")
    full_resource_name: Optional[StrictStr] = Field(default=None, description="The [full resource name] (https://cloud.google.com/asset-inventory/docs/resource-name-format) of an organization/folder/project resource.", alias="fullResourceName")
    organization: Optional[StrictStr] = Field(default=None, description="The organization that this resource belongs to, in the format of organizations/{ORGANIZATION_NUMBER}. This field is available when the resource belongs (directly or cascadingly) to an organization.")
    parent: Optional[StrictStr] = Field(default=None, description="The [full resource name] (https://cloud.google.com/asset-inventory/docs/resource-name-format) of the parent of AnalyzeOrgPolicyGovernedContainersResponse.GovernedContainer.full_resource_name.")
    policy_bundle: Optional[List[AnalyzerOrgPolicy]] = Field(default=None, description="The ordered list of all organization policies from the AnalyzeOrgPoliciesResponse.OrgPolicyResult.consolidated_policy.attached_resource. to the scope specified in the request. If the constraint is defined with default policy, it will also appear in the list.", alias="policyBundle")
    project: Optional[StrictStr] = Field(default=None, description="The project that this resource belongs to, in the format of projects/{PROJECT_NUMBER}. This field is available when the resource belongs to a project.")
    __properties: ClassVar[List[str]] = ["consolidatedPolicy", "effectiveTags", "folders", "fullResourceName", "organization", "parent", "policyBundle", "project"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudAssetV1GovernedContainer from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of consolidated_policy
        if self.consolidated_policy:
            _dict['consolidatedPolicy'] = self.consolidated_policy.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in effective_tags (list)
        _items = []
        if self.effective_tags:
            for _item_effective_tags in self.effective_tags:
                if _item_effective_tags:
                    _items.append(_item_effective_tags.to_dict())
            _dict['effectiveTags'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in policy_bundle (list)
        _items = []
        if self.policy_bundle:
            for _item_policy_bundle in self.policy_bundle:
                if _item_policy_bundle:
                    _items.append(_item_policy_bundle.to_dict())
            _dict['policyBundle'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudAssetV1GovernedContainer from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "consolidatedPolicy": AnalyzerOrgPolicy.from_dict(obj["consolidatedPolicy"]) if obj.get("consolidatedPolicy") is not None else None,
            "effectiveTags": [EffectiveTagDetails.from_dict(_item) for _item in obj["effectiveTags"]] if obj.get("effectiveTags") is not None else None,
            "folders": obj.get("folders"),
            "fullResourceName": obj.get("fullResourceName"),
            "organization": obj.get("organization"),
            "parent": obj.get("parent"),
            "policyBundle": [AnalyzerOrgPolicy.from_dict(_item) for _item in obj["policyBundle"]] if obj.get("policyBundle") is not None else None,
            "project": obj.get("project")
        })
        return _obj



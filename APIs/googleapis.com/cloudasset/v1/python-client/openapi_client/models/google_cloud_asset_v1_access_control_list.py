# coding: utf-8

"""
    Cloud Asset API

    The Cloud Asset API manages the history and inventory of Google Cloud resources.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.condition_evaluation import ConditionEvaluation
from openapi_client.models.google_cloud_asset_v1_access import GoogleCloudAssetV1Access
from openapi_client.models.google_cloud_asset_v1_edge import GoogleCloudAssetV1Edge
from openapi_client.models.google_cloud_asset_v1_resource import GoogleCloudAssetV1Resource
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudAssetV1AccessControlList(BaseModel):
    """
    An access control list, derived from the above IAM policy binding, which contains a set of resources and accesses. May include one item from each set to compose an access control entry. NOTICE that there could be multiple access control lists for one IAM policy binding. The access control lists are created based on resource and access combinations. For example, assume we have the following cases in one IAM policy binding: - Permission P1 and P2 apply to resource R1 and R2; - Permission P3 applies to resource R2 and R3; This will result in the following access control lists: - AccessControlList 1: [R1, R2], [P1, P2] - AccessControlList 2: [R2, R3], [P3]
    """ # noqa: E501
    accesses: Optional[List[GoogleCloudAssetV1Access]] = Field(default=None, description="The accesses that match one of the following conditions: - The access_selector, if it is specified in request; - Otherwise, access specifiers reachable from the policy binding's role.")
    condition_evaluation: Optional[ConditionEvaluation] = Field(default=None, alias="conditionEvaluation")
    resource_edges: Optional[List[GoogleCloudAssetV1Edge]] = Field(default=None, description="Resource edges of the graph starting from the policy attached resource to any descendant resources. The Edge.source_node contains the full resource name of a parent resource and Edge.target_node contains the full resource name of a child resource. This field is present only if the output_resource_edges option is enabled in request.", alias="resourceEdges")
    resources: Optional[List[GoogleCloudAssetV1Resource]] = Field(default=None, description="The resources that match one of the following conditions: - The resource_selector, if it is specified in request; - Otherwise, resources reachable from the policy attached resource.")
    __properties: ClassVar[List[str]] = ["accesses", "conditionEvaluation", "resourceEdges", "resources"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudAssetV1AccessControlList from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in accesses (list)
        _items = []
        if self.accesses:
            for _item_accesses in self.accesses:
                if _item_accesses:
                    _items.append(_item_accesses.to_dict())
            _dict['accesses'] = _items
        # override the default output from pydantic by calling `to_dict()` of condition_evaluation
        if self.condition_evaluation:
            _dict['conditionEvaluation'] = self.condition_evaluation.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in resource_edges (list)
        _items = []
        if self.resource_edges:
            for _item_resource_edges in self.resource_edges:
                if _item_resource_edges:
                    _items.append(_item_resource_edges.to_dict())
            _dict['resourceEdges'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in resources (list)
        _items = []
        if self.resources:
            for _item_resources in self.resources:
                if _item_resources:
                    _items.append(_item_resources.to_dict())
            _dict['resources'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudAssetV1AccessControlList from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "accesses": [GoogleCloudAssetV1Access.from_dict(_item) for _item in obj["accesses"]] if obj.get("accesses") is not None else None,
            "conditionEvaluation": ConditionEvaluation.from_dict(obj["conditionEvaluation"]) if obj.get("conditionEvaluation") is not None else None,
            "resourceEdges": [GoogleCloudAssetV1Edge.from_dict(_item) for _item in obj["resourceEdges"]] if obj.get("resourceEdges") is not None else None,
            "resources": [GoogleCloudAssetV1Resource.from_dict(_item) for _item in obj["resources"]] if obj.get("resources") is not None else None
        })
        return _obj



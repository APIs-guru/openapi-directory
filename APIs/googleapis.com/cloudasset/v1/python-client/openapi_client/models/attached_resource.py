# coding: utf-8

"""
    Cloud Asset API

    The Cloud Asset API manages the history and inventory of Google Cloud resources.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.versioned_resource import VersionedResource
from typing import Optional, Set
from typing_extensions import Self

class AttachedResource(BaseModel):
    """
    Attached resource representation, which is defined by the corresponding service provider. It represents an attached resource's payload.
    """ # noqa: E501
    asset_type: Optional[StrictStr] = Field(default=None, description="The type of this attached resource. Example: `osconfig.googleapis.com/Inventory` You can find the supported attached asset types of each resource in this table: `https://cloud.google.com/asset-inventory/docs/supported-asset-types`", alias="assetType")
    versioned_resources: Optional[List[VersionedResource]] = Field(default=None, description="Versioned resource representations of this attached resource. This is repeated because there could be multiple versions of the attached resource representations during version migration.", alias="versionedResources")
    __properties: ClassVar[List[str]] = ["assetType", "versionedResources"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AttachedResource from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in versioned_resources (list)
        _items = []
        if self.versioned_resources:
            for _item_versioned_resources in self.versioned_resources:
                if _item_versioned_resources:
                    _items.append(_item_versioned_resources.to_dict())
            _dict['versionedResources'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AttachedResource from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "assetType": obj.get("assetType"),
            "versionedResources": [VersionedResource.from_dict(_item) for _item in obj["versionedResources"]] if obj.get("versionedResources") is not None else None
        })
        return _obj



# coding: utf-8

"""
    Cloud Asset API

    The Cloud Asset API manages the history and inventory of Google Cloud resources.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.query_content import QueryContent
from typing import Optional, Set
from typing_extensions import Self

class SavedQuery(BaseModel):
    """
    A saved query which can be shared with others or used later.
    """ # noqa: E501
    content: Optional[QueryContent] = None
    create_time: Optional[StrictStr] = Field(default=None, description="Output only. The create time of this saved query.", alias="createTime")
    creator: Optional[StrictStr] = Field(default=None, description="Output only. The account's email address who has created this saved query.")
    description: Optional[StrictStr] = Field(default=None, description="The description of this saved query. This value should be fewer than 255 characters.")
    labels: Optional[Dict[str, StrictStr]] = Field(default=None, description="Labels applied on the resource. This value should not contain more than 10 entries. The key and value of each entry must be non-empty and fewer than 64 characters.")
    last_update_time: Optional[StrictStr] = Field(default=None, description="Output only. The last update time of this saved query.", alias="lastUpdateTime")
    last_updater: Optional[StrictStr] = Field(default=None, description="Output only. The account's email address who has updated this saved query most recently.", alias="lastUpdater")
    name: Optional[StrictStr] = Field(default=None, description="The resource name of the saved query. The format must be: * projects/project_number/savedQueries/saved_query_id * folders/folder_number/savedQueries/saved_query_id * organizations/organization_number/savedQueries/saved_query_id")
    __properties: ClassVar[List[str]] = ["content", "createTime", "creator", "description", "labels", "lastUpdateTime", "lastUpdater", "name"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SavedQuery from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "create_time",
            "creator",
            "last_update_time",
            "last_updater",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of content
        if self.content:
            _dict['content'] = self.content.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SavedQuery from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "content": QueryContent.from_dict(obj["content"]) if obj.get("content") is not None else None,
            "createTime": obj.get("createTime"),
            "creator": obj.get("creator"),
            "description": obj.get("description"),
            "labels": obj.get("labels"),
            "lastUpdateTime": obj.get("lastUpdateTime"),
            "lastUpdater": obj.get("lastUpdater"),
            "name": obj.get("name")
        })
        return _obj



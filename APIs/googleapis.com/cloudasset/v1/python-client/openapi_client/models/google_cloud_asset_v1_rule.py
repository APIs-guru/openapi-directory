# coding: utf-8

"""
    Cloud Asset API

    The Cloud Asset API manages the history and inventory of Google Cloud resources.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.condition_evaluation import ConditionEvaluation
from openapi_client.models.expr import Expr
from openapi_client.models.google_cloud_asset_v1_string_values import GoogleCloudAssetV1StringValues
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudAssetV1Rule(BaseModel):
    """
    This rule message is a customized version of the one defined in the Organization Policy system. In addition to the fields defined in the original organization policy, it contains additional field(s) under specific circumstances to support analysis results.
    """ # noqa: E501
    allow_all: Optional[StrictBool] = Field(default=None, description="Setting this to true means that all values are allowed. This field can be set only in Policies for list constraints.", alias="allowAll")
    condition: Optional[Expr] = None
    condition_evaluation: Optional[ConditionEvaluation] = Field(default=None, alias="conditionEvaluation")
    deny_all: Optional[StrictBool] = Field(default=None, description="Setting this to true means that all values are denied. This field can be set only in Policies for list constraints.", alias="denyAll")
    enforce: Optional[StrictBool] = Field(default=None, description="If `true`, then the `Policy` is enforced. If `false`, then any configuration is acceptable. This field can be set only in Policies for boolean constraints.")
    values: Optional[GoogleCloudAssetV1StringValues] = None
    __properties: ClassVar[List[str]] = ["allowAll", "condition", "conditionEvaluation", "denyAll", "enforce", "values"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudAssetV1Rule from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of condition
        if self.condition:
            _dict['condition'] = self.condition.to_dict()
        # override the default output from pydantic by calling `to_dict()` of condition_evaluation
        if self.condition_evaluation:
            _dict['conditionEvaluation'] = self.condition_evaluation.to_dict()
        # override the default output from pydantic by calling `to_dict()` of values
        if self.values:
            _dict['values'] = self.values.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudAssetV1Rule from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "allowAll": obj.get("allowAll"),
            "condition": Expr.from_dict(obj["condition"]) if obj.get("condition") is not None else None,
            "conditionEvaluation": ConditionEvaluation.from_dict(obj["conditionEvaluation"]) if obj.get("conditionEvaluation") is not None else None,
            "denyAll": obj.get("denyAll"),
            "enforce": obj.get("enforce"),
            "values": GoogleCloudAssetV1StringValues.from_dict(obj["values"]) if obj.get("values") is not None else None
        })
        return _obj



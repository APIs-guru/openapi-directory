# coding: utf-8

"""
    Cloud Asset API

    The Cloud Asset API manages the history and inventory of Google Cloud resources.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.software_package import SoftwarePackage
from typing import Optional, Set
from typing_extensions import Self

class Item(BaseModel):
    """
    A single piece of inventory on a VM.
    """ # noqa: E501
    available_package: Optional[SoftwarePackage] = Field(default=None, alias="availablePackage")
    create_time: Optional[StrictStr] = Field(default=None, description="When this inventory item was first detected.", alias="createTime")
    id: Optional[StrictStr] = Field(default=None, description="Identifier for this item, unique across items for this VM.")
    installed_package: Optional[SoftwarePackage] = Field(default=None, alias="installedPackage")
    origin_type: Optional[StrictStr] = Field(default=None, description="The origin of this inventory item.", alias="originType")
    type: Optional[StrictStr] = Field(default=None, description="The specific type of inventory, correlating to its specific details.")
    update_time: Optional[StrictStr] = Field(default=None, description="When this inventory item was last modified.", alias="updateTime")
    __properties: ClassVar[List[str]] = ["availablePackage", "createTime", "id", "installedPackage", "originType", "type", "updateTime"]

    @field_validator('origin_type')
    def origin_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['ORIGIN_TYPE_UNSPECIFIED', 'INVENTORY_REPORT']):
            raise ValueError("must be one of enum values ('ORIGIN_TYPE_UNSPECIFIED', 'INVENTORY_REPORT')")
        return value

    @field_validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['TYPE_UNSPECIFIED', 'INSTALLED_PACKAGE', 'AVAILABLE_PACKAGE']):
            raise ValueError("must be one of enum values ('TYPE_UNSPECIFIED', 'INSTALLED_PACKAGE', 'AVAILABLE_PACKAGE')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Item from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of available_package
        if self.available_package:
            _dict['availablePackage'] = self.available_package.to_dict()
        # override the default output from pydantic by calling `to_dict()` of installed_package
        if self.installed_package:
            _dict['installedPackage'] = self.installed_package.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Item from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "availablePackage": SoftwarePackage.from_dict(obj["availablePackage"]) if obj.get("availablePackage") is not None else None,
            "createTime": obj.get("createTime"),
            "id": obj.get("id"),
            "installedPackage": SoftwarePackage.from_dict(obj["installedPackage"]) if obj.get("installedPackage") is not None else None,
            "originType": obj.get("originType"),
            "type": obj.get("type"),
            "updateTime": obj.get("updateTime")
        })
        return _obj



# coding: utf-8

"""
    Cloud Asset API

    The Cloud Asset API manages the history and inventory of Google Cloud resources.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudAssetV1CustomConstraint(BaseModel):
    """
    The definition of a custom constraint.
    """ # noqa: E501
    action_type: Optional[StrictStr] = Field(default=None, description="Allow or deny type.", alias="actionType")
    condition: Optional[StrictStr] = Field(default=None, description="Organization Policy condition/expression. For example: `resource.instanceName.matches(\"[production|test]_.*_(\\d)+\")'` or, `resource.management.auto_upgrade == true`")
    description: Optional[StrictStr] = Field(default=None, description="Detailed information about this custom policy constraint.")
    display_name: Optional[StrictStr] = Field(default=None, description="One line display name for the UI.", alias="displayName")
    method_types: Optional[List[StrictStr]] = Field(default=None, description="All the operations being applied for this constraint.", alias="methodTypes")
    name: Optional[StrictStr] = Field(default=None, description="Name of the constraint. This is unique within the organization. Format of the name should be * `organizations/{organization_id}/customConstraints/{custom_constraint_id}` Example : \"organizations/123/customConstraints/custom.createOnlyE2TypeVms\"")
    resource_types: Optional[List[StrictStr]] = Field(default=None, description="The Resource Instance type on which this policy applies to. Format will be of the form : \"/\" Example: * `compute.googleapis.com/Instance`.", alias="resourceTypes")
    __properties: ClassVar[List[str]] = ["actionType", "condition", "description", "displayName", "methodTypes", "name", "resourceTypes"]

    @field_validator('action_type')
    def action_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['ACTION_TYPE_UNSPECIFIED', 'ALLOW', 'DENY']):
            raise ValueError("must be one of enum values ('ACTION_TYPE_UNSPECIFIED', 'ALLOW', 'DENY')")
        return value

    @field_validator('method_types')
    def method_types_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        for i in value:
            if i not in set(['METHOD_TYPE_UNSPECIFIED', 'CREATE', 'UPDATE', 'DELETE']):
                raise ValueError("each list item must be one of ('METHOD_TYPE_UNSPECIFIED', 'CREATE', 'UPDATE', 'DELETE')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudAssetV1CustomConstraint from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudAssetV1CustomConstraint from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "actionType": obj.get("actionType"),
            "condition": obj.get("condition"),
            "description": obj.get("description"),
            "displayName": obj.get("displayName"),
            "methodTypes": obj.get("methodTypes"),
            "name": obj.get("name"),
            "resourceTypes": obj.get("resourceTypes")
        })
        return _obj



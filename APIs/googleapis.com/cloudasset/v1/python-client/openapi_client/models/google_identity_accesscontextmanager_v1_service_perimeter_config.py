# coding: utf-8

"""
    Cloud Asset API

    The Cloud Asset API manages the history and inventory of Google Cloud resources.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_identity_accesscontextmanager_v1_egress_policy import GoogleIdentityAccesscontextmanagerV1EgressPolicy
from openapi_client.models.google_identity_accesscontextmanager_v1_ingress_policy import GoogleIdentityAccesscontextmanagerV1IngressPolicy
from openapi_client.models.google_identity_accesscontextmanager_v1_vpc_accessible_services import GoogleIdentityAccesscontextmanagerV1VpcAccessibleServices
from typing import Optional, Set
from typing_extensions import Self

class GoogleIdentityAccesscontextmanagerV1ServicePerimeterConfig(BaseModel):
    """
    `ServicePerimeterConfig` specifies a set of Google Cloud resources that describe specific Service Perimeter configuration.
    """ # noqa: E501
    access_levels: Optional[List[StrictStr]] = Field(default=None, description="A list of `AccessLevel` resource names that allow resources within the `ServicePerimeter` to be accessed from the internet. `AccessLevels` listed must be in the same policy as this `ServicePerimeter`. Referencing a nonexistent `AccessLevel` is a syntax error. If no `AccessLevel` names are listed, resources within the perimeter can only be accessed via Google Cloud calls with request origins within the perimeter. Example: `\"accessPolicies/MY_POLICY/accessLevels/MY_LEVEL\"`. For Service Perimeter Bridge, must be empty.", alias="accessLevels")
    egress_policies: Optional[List[GoogleIdentityAccesscontextmanagerV1EgressPolicy]] = Field(default=None, description="List of EgressPolicies to apply to the perimeter. A perimeter may have multiple EgressPolicies, each of which is evaluated separately. Access is granted if any EgressPolicy grants it. Must be empty for a perimeter bridge.", alias="egressPolicies")
    ingress_policies: Optional[List[GoogleIdentityAccesscontextmanagerV1IngressPolicy]] = Field(default=None, description="List of IngressPolicies to apply to the perimeter. A perimeter may have multiple IngressPolicies, each of which is evaluated separately. Access is granted if any Ingress Policy grants it. Must be empty for a perimeter bridge.", alias="ingressPolicies")
    resources: Optional[List[StrictStr]] = Field(default=None, description="A list of Google Cloud resources that are inside of the service perimeter. Currently only projects and VPCs are allowed. Project format: `projects/{project_number}` VPC network format: `//compute.googleapis.com/projects/{PROJECT_ID}/global/networks/{NAME}`.")
    restricted_services: Optional[List[StrictStr]] = Field(default=None, description="Google Cloud services that are subject to the Service Perimeter restrictions. For example, if `storage.googleapis.com` is specified, access to the storage buckets inside the perimeter must meet the perimeter's access restrictions.", alias="restrictedServices")
    vpc_accessible_services: Optional[GoogleIdentityAccesscontextmanagerV1VpcAccessibleServices] = Field(default=None, alias="vpcAccessibleServices")
    __properties: ClassVar[List[str]] = ["accessLevels", "egressPolicies", "ingressPolicies", "resources", "restrictedServices", "vpcAccessibleServices"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleIdentityAccesscontextmanagerV1ServicePerimeterConfig from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in egress_policies (list)
        _items = []
        if self.egress_policies:
            for _item_egress_policies in self.egress_policies:
                if _item_egress_policies:
                    _items.append(_item_egress_policies.to_dict())
            _dict['egressPolicies'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in ingress_policies (list)
        _items = []
        if self.ingress_policies:
            for _item_ingress_policies in self.ingress_policies:
                if _item_ingress_policies:
                    _items.append(_item_ingress_policies.to_dict())
            _dict['ingressPolicies'] = _items
        # override the default output from pydantic by calling `to_dict()` of vpc_accessible_services
        if self.vpc_accessible_services:
            _dict['vpcAccessibleServices'] = self.vpc_accessible_services.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleIdentityAccesscontextmanagerV1ServicePerimeterConfig from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "accessLevels": obj.get("accessLevels"),
            "egressPolicies": [GoogleIdentityAccesscontextmanagerV1EgressPolicy.from_dict(_item) for _item in obj["egressPolicies"]] if obj.get("egressPolicies") is not None else None,
            "ingressPolicies": [GoogleIdentityAccesscontextmanagerV1IngressPolicy.from_dict(_item) for _item in obj["ingressPolicies"]] if obj.get("ingressPolicies") is not None else None,
            "resources": obj.get("resources"),
            "restrictedServices": obj.get("restrictedServices"),
            "vpcAccessibleServices": GoogleIdentityAccesscontextmanagerV1VpcAccessibleServices.from_dict(obj["vpcAccessibleServices"]) if obj.get("vpcAccessibleServices") is not None else None
        })
        return _obj



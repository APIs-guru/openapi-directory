# coding: utf-8

"""
    Cloud Asset API

    The Cloud Asset API manages the history and inventory of Google Cloud resources.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.query_assets_output_config import QueryAssetsOutputConfig
from openapi_client.models.query_result import QueryResult
from openapi_client.models.status import Status
from typing import Optional, Set
from typing_extensions import Self

class QueryAssetsResponse(BaseModel):
    """
    QueryAssets response.
    """ # noqa: E501
    done: Optional[StrictBool] = Field(default=None, description="The query response, which can be either an `error` or a valid `response`. If `done` == `false` and the query result is being saved in a output, the output_config field will be set. If `done` == `true`, exactly one of `error`, `query_result` or `output_config` will be set.")
    error: Optional[Status] = None
    job_reference: Optional[StrictStr] = Field(default=None, description="Reference to a query job.", alias="jobReference")
    output_config: Optional[QueryAssetsOutputConfig] = Field(default=None, alias="outputConfig")
    query_result: Optional[QueryResult] = Field(default=None, alias="queryResult")
    __properties: ClassVar[List[str]] = ["done", "error", "jobReference", "outputConfig", "queryResult"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of QueryAssetsResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of error
        if self.error:
            _dict['error'] = self.error.to_dict()
        # override the default output from pydantic by calling `to_dict()` of output_config
        if self.output_config:
            _dict['outputConfig'] = self.output_config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of query_result
        if self.query_result:
            _dict['queryResult'] = self.query_result.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of QueryAssetsResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "done": obj.get("done"),
            "error": Status.from_dict(obj["error"]) if obj.get("error") is not None else None,
            "jobReference": obj.get("jobReference"),
            "outputConfig": QueryAssetsOutputConfig.from_dict(obj["outputConfig"]) if obj.get("outputConfig") is not None else None,
            "queryResult": QueryResult.from_dict(obj["queryResult"]) if obj.get("queryResult") is not None else None
        })
        return _obj



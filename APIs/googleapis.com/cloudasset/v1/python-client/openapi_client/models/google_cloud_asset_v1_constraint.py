# coding: utf-8

"""
    Cloud Asset API

    The Cloud Asset API manages the history and inventory of Google Cloud resources.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_cloud_asset_v1_list_constraint import GoogleCloudAssetV1ListConstraint
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudAssetV1Constraint(BaseModel):
    """
    The definition of a constraint.
    """ # noqa: E501
    boolean_constraint: Optional[Dict[str, Any]] = Field(default=None, description="A `Constraint` that is either enforced or not. For example a constraint `constraints/compute.disableSerialPortAccess`. If it is enforced on a VM instance, serial port connections will not be opened to that instance.", alias="booleanConstraint")
    constraint_default: Optional[StrictStr] = Field(default=None, description="The evaluation behavior of this constraint in the absence of 'Policy'.", alias="constraintDefault")
    description: Optional[StrictStr] = Field(default=None, description="Detailed description of what this `Constraint` controls as well as how and where it is enforced.")
    display_name: Optional[StrictStr] = Field(default=None, description="The human readable name of the constraint.", alias="displayName")
    list_constraint: Optional[GoogleCloudAssetV1ListConstraint] = Field(default=None, alias="listConstraint")
    name: Optional[StrictStr] = Field(default=None, description="The unique name of the constraint. Format of the name should be * `constraints/{constraint_name}` For example, `constraints/compute.disableSerialPortAccess`.")
    __properties: ClassVar[List[str]] = ["booleanConstraint", "constraintDefault", "description", "displayName", "listConstraint", "name"]

    @field_validator('constraint_default')
    def constraint_default_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['CONSTRAINT_DEFAULT_UNSPECIFIED', 'ALLOW', 'DENY']):
            raise ValueError("must be one of enum values ('CONSTRAINT_DEFAULT_UNSPECIFIED', 'ALLOW', 'DENY')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudAssetV1Constraint from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of list_constraint
        if self.list_constraint:
            _dict['listConstraint'] = self.list_constraint.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudAssetV1Constraint from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "booleanConstraint": obj.get("booleanConstraint"),
            "constraintDefault": obj.get("constraintDefault"),
            "description": obj.get("description"),
            "displayName": obj.get("displayName"),
            "listConstraint": GoogleCloudAssetV1ListConstraint.from_dict(obj["listConstraint"]) if obj.get("listConstraint") is not None else None,
            "name": obj.get("name")
        })
        return _obj



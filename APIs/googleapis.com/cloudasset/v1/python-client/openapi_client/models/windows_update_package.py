# coding: utf-8

"""
    Cloud Asset API

    The Cloud Asset API manages the history and inventory of Google Cloud resources.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.windows_update_category import WindowsUpdateCategory
from typing import Optional, Set
from typing_extensions import Self

class WindowsUpdatePackage(BaseModel):
    """
    Details related to a Windows Update package. Field data and names are taken from Windows Update API IUpdate Interface: https://docs.microsoft.com/en-us/windows/win32/api/_wua/ Descriptive fields like title, and description are localized based on the locale of the VM being updated.
    """ # noqa: E501
    categories: Optional[List[WindowsUpdateCategory]] = Field(default=None, description="The categories that are associated with this update package.")
    description: Optional[StrictStr] = Field(default=None, description="The localized description of the update package.")
    kb_article_ids: Optional[List[StrictStr]] = Field(default=None, description="A collection of Microsoft Knowledge Base article IDs that are associated with the update package.", alias="kbArticleIds")
    last_deployment_change_time: Optional[StrictStr] = Field(default=None, description="The last published date of the update, in (UTC) date and time.", alias="lastDeploymentChangeTime")
    more_info_urls: Optional[List[StrictStr]] = Field(default=None, description="A collection of URLs that provide more information about the update package.", alias="moreInfoUrls")
    revision_number: Optional[StrictInt] = Field(default=None, description="The revision number of this update package.", alias="revisionNumber")
    support_url: Optional[StrictStr] = Field(default=None, description="A hyperlink to the language-specific support information for the update.", alias="supportUrl")
    title: Optional[StrictStr] = Field(default=None, description="The localized title of the update package.")
    update_id: Optional[StrictStr] = Field(default=None, description="Gets the identifier of an update package. Stays the same across revisions.", alias="updateId")
    __properties: ClassVar[List[str]] = ["categories", "description", "kbArticleIds", "lastDeploymentChangeTime", "moreInfoUrls", "revisionNumber", "supportUrl", "title", "updateId"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of WindowsUpdatePackage from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in categories (list)
        _items = []
        if self.categories:
            for _item_categories in self.categories:
                if _item_categories:
                    _items.append(_item_categories.to_dict())
            _dict['categories'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of WindowsUpdatePackage from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "categories": [WindowsUpdateCategory.from_dict(_item) for _item in obj["categories"]] if obj.get("categories") is not None else None,
            "description": obj.get("description"),
            "kbArticleIds": obj.get("kbArticleIds"),
            "lastDeploymentChangeTime": obj.get("lastDeploymentChangeTime"),
            "moreInfoUrls": obj.get("moreInfoUrls"),
            "revisionNumber": obj.get("revisionNumber"),
            "supportUrl": obj.get("supportUrl"),
            "title": obj.get("title"),
            "updateId": obj.get("updateId")
        })
        return _obj



# coding: utf-8

"""
    Cloud Asset API

    The Cloud Asset API manages the history and inventory of Google Cloud resources.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.versioned_package import VersionedPackage
from openapi_client.models.windows_application import WindowsApplication
from openapi_client.models.windows_quick_fix_engineering_package import WindowsQuickFixEngineeringPackage
from openapi_client.models.windows_update_package import WindowsUpdatePackage
from openapi_client.models.zypper_patch import ZypperPatch
from typing import Optional, Set
from typing_extensions import Self

class SoftwarePackage(BaseModel):
    """
    Software package information of the operating system.
    """ # noqa: E501
    apt_package: Optional[VersionedPackage] = Field(default=None, alias="aptPackage")
    cos_package: Optional[VersionedPackage] = Field(default=None, alias="cosPackage")
    googet_package: Optional[VersionedPackage] = Field(default=None, alias="googetPackage")
    qfe_package: Optional[WindowsQuickFixEngineeringPackage] = Field(default=None, alias="qfePackage")
    windows_application: Optional[WindowsApplication] = Field(default=None, alias="windowsApplication")
    wua_package: Optional[WindowsUpdatePackage] = Field(default=None, alias="wuaPackage")
    yum_package: Optional[VersionedPackage] = Field(default=None, alias="yumPackage")
    zypper_package: Optional[VersionedPackage] = Field(default=None, alias="zypperPackage")
    zypper_patch: Optional[ZypperPatch] = Field(default=None, alias="zypperPatch")
    __properties: ClassVar[List[str]] = ["aptPackage", "cosPackage", "googetPackage", "qfePackage", "windowsApplication", "wuaPackage", "yumPackage", "zypperPackage", "zypperPatch"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SoftwarePackage from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of apt_package
        if self.apt_package:
            _dict['aptPackage'] = self.apt_package.to_dict()
        # override the default output from pydantic by calling `to_dict()` of cos_package
        if self.cos_package:
            _dict['cosPackage'] = self.cos_package.to_dict()
        # override the default output from pydantic by calling `to_dict()` of googet_package
        if self.googet_package:
            _dict['googetPackage'] = self.googet_package.to_dict()
        # override the default output from pydantic by calling `to_dict()` of qfe_package
        if self.qfe_package:
            _dict['qfePackage'] = self.qfe_package.to_dict()
        # override the default output from pydantic by calling `to_dict()` of windows_application
        if self.windows_application:
            _dict['windowsApplication'] = self.windows_application.to_dict()
        # override the default output from pydantic by calling `to_dict()` of wua_package
        if self.wua_package:
            _dict['wuaPackage'] = self.wua_package.to_dict()
        # override the default output from pydantic by calling `to_dict()` of yum_package
        if self.yum_package:
            _dict['yumPackage'] = self.yum_package.to_dict()
        # override the default output from pydantic by calling `to_dict()` of zypper_package
        if self.zypper_package:
            _dict['zypperPackage'] = self.zypper_package.to_dict()
        # override the default output from pydantic by calling `to_dict()` of zypper_patch
        if self.zypper_patch:
            _dict['zypperPatch'] = self.zypper_patch.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SoftwarePackage from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "aptPackage": VersionedPackage.from_dict(obj["aptPackage"]) if obj.get("aptPackage") is not None else None,
            "cosPackage": VersionedPackage.from_dict(obj["cosPackage"]) if obj.get("cosPackage") is not None else None,
            "googetPackage": VersionedPackage.from_dict(obj["googetPackage"]) if obj.get("googetPackage") is not None else None,
            "qfePackage": WindowsQuickFixEngineeringPackage.from_dict(obj["qfePackage"]) if obj.get("qfePackage") is not None else None,
            "windowsApplication": WindowsApplication.from_dict(obj["windowsApplication"]) if obj.get("windowsApplication") is not None else None,
            "wuaPackage": WindowsUpdatePackage.from_dict(obj["wuaPackage"]) if obj.get("wuaPackage") is not None else None,
            "yumPackage": VersionedPackage.from_dict(obj["yumPackage"]) if obj.get("yumPackage") is not None else None,
            "zypperPackage": VersionedPackage.from_dict(obj["zypperPackage"]) if obj.get("zypperPackage") is not None else None,
            "zypperPatch": ZypperPatch.from_dict(obj["zypperPatch"]) if obj.get("zypperPatch") is not None else None
        })
        return _obj



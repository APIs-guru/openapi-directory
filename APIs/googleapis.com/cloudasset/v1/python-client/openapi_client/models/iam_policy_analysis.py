# coding: utf-8

"""
    Cloud Asset API

    The Cloud Asset API manages the history and inventory of Google Cloud resources.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.iam_policy_analysis_query import IamPolicyAnalysisQuery
from openapi_client.models.iam_policy_analysis_result import IamPolicyAnalysisResult
from openapi_client.models.iam_policy_analysis_state import IamPolicyAnalysisState
from typing import Optional, Set
from typing_extensions import Self

class IamPolicyAnalysis(BaseModel):
    """
    An analysis message to group the query and results.
    """ # noqa: E501
    analysis_query: Optional[IamPolicyAnalysisQuery] = Field(default=None, alias="analysisQuery")
    analysis_results: Optional[List[IamPolicyAnalysisResult]] = Field(default=None, description="A list of IamPolicyAnalysisResult that matches the analysis query, or empty if no result is found.", alias="analysisResults")
    fully_explored: Optional[StrictBool] = Field(default=None, description="Represents whether all entries in the analysis_results have been fully explored to answer the query.", alias="fullyExplored")
    non_critical_errors: Optional[List[IamPolicyAnalysisState]] = Field(default=None, description="A list of non-critical errors happened during the query handling.", alias="nonCriticalErrors")
    __properties: ClassVar[List[str]] = ["analysisQuery", "analysisResults", "fullyExplored", "nonCriticalErrors"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of IamPolicyAnalysis from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of analysis_query
        if self.analysis_query:
            _dict['analysisQuery'] = self.analysis_query.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in analysis_results (list)
        _items = []
        if self.analysis_results:
            for _item_analysis_results in self.analysis_results:
                if _item_analysis_results:
                    _items.append(_item_analysis_results.to_dict())
            _dict['analysisResults'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in non_critical_errors (list)
        _items = []
        if self.non_critical_errors:
            for _item_non_critical_errors in self.non_critical_errors:
                if _item_non_critical_errors:
                    _items.append(_item_non_critical_errors.to_dict())
            _dict['nonCriticalErrors'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of IamPolicyAnalysis from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "analysisQuery": IamPolicyAnalysisQuery.from_dict(obj["analysisQuery"]) if obj.get("analysisQuery") is not None else None,
            "analysisResults": [IamPolicyAnalysisResult.from_dict(_item) for _item in obj["analysisResults"]] if obj.get("analysisResults") is not None else None,
            "fullyExplored": obj.get("fullyExplored"),
            "nonCriticalErrors": [IamPolicyAnalysisState.from_dict(_item) for _item in obj["nonCriticalErrors"]] if obj.get("nonCriticalErrors") is not None else None
        })
        return _obj



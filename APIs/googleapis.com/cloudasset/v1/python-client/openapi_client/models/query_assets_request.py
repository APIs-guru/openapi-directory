# coding: utf-8

"""
    Cloud Asset API

    The Cloud Asset API manages the history and inventory of Google Cloud resources.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.query_assets_output_config import QueryAssetsOutputConfig
from openapi_client.models.time_window import TimeWindow
from typing import Optional, Set
from typing_extensions import Self

class QueryAssetsRequest(BaseModel):
    """
    QueryAssets request.
    """ # noqa: E501
    job_reference: Optional[StrictStr] = Field(default=None, description="Optional. Reference to the query job, which is from the `QueryAssetsResponse` of previous `QueryAssets` call.", alias="jobReference")
    output_config: Optional[QueryAssetsOutputConfig] = Field(default=None, alias="outputConfig")
    page_size: Optional[StrictInt] = Field(default=None, description="Optional. The maximum number of rows to return in the results. Responses are limited to 10 MB and 1000 rows. By default, the maximum row count is 1000. When the byte or row count limit is reached, the rest of the query results will be paginated. The field will be ignored when [output_config] is specified.", alias="pageSize")
    page_token: Optional[StrictStr] = Field(default=None, description="Optional. A page token received from previous `QueryAssets`. The field will be ignored when [output_config] is specified.", alias="pageToken")
    read_time: Optional[StrictStr] = Field(default=None, description="Optional. Queries cloud assets as they appeared at the specified point in time.", alias="readTime")
    read_time_window: Optional[TimeWindow] = Field(default=None, alias="readTimeWindow")
    statement: Optional[StrictStr] = Field(default=None, description="Optional. A SQL statement that's compatible with [BigQuery SQL](https://cloud.google.com/bigquery/docs/introduction-sql).")
    timeout: Optional[StrictStr] = Field(default=None, description="Optional. Specifies the maximum amount of time that the client is willing to wait for the query to complete. By default, this limit is 5 min for the first query, and 1 minute for the following queries. If the query is complete, the `done` field in the `QueryAssetsResponse` is true, otherwise false. Like BigQuery [jobs.query API](https://cloud.google.com/bigquery/docs/reference/rest/v2/jobs/query#queryrequest) The call is not guaranteed to wait for the specified timeout; it typically returns after around 200 seconds (200,000 milliseconds), even if the query is not complete. The field will be ignored when [output_config] is specified.")
    __properties: ClassVar[List[str]] = ["jobReference", "outputConfig", "pageSize", "pageToken", "readTime", "readTimeWindow", "statement", "timeout"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of QueryAssetsRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of output_config
        if self.output_config:
            _dict['outputConfig'] = self.output_config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of read_time_window
        if self.read_time_window:
            _dict['readTimeWindow'] = self.read_time_window.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of QueryAssetsRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "jobReference": obj.get("jobReference"),
            "outputConfig": QueryAssetsOutputConfig.from_dict(obj["outputConfig"]) if obj.get("outputConfig") is not None else None,
            "pageSize": obj.get("pageSize"),
            "pageToken": obj.get("pageToken"),
            "readTime": obj.get("readTime"),
            "readTimeWindow": TimeWindow.from_dict(obj["readTimeWindow"]) if obj.get("readTimeWindow") is not None else None,
            "statement": obj.get("statement"),
            "timeout": obj.get("timeout")
        })
        return _obj



# coding: utf-8

"""
    Cloud Asset API

    The Cloud Asset API manages the history and inventory of Google Cloud resources.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_identity_accesscontextmanager_v1_os_constraint import GoogleIdentityAccesscontextmanagerV1OsConstraint
from typing import Optional, Set
from typing_extensions import Self

class GoogleIdentityAccesscontextmanagerV1DevicePolicy(BaseModel):
    """
    `DevicePolicy` specifies device specific restrictions necessary to acquire a given access level. A `DevicePolicy` specifies requirements for requests from devices to be granted access levels, it does not do any enforcement on the device. `DevicePolicy` acts as an AND over all specified fields, and each repeated field is an OR over its elements. Any unset fields are ignored. For example, if the proto is { os_type : DESKTOP_WINDOWS, os_type : DESKTOP_LINUX, encryption_status: ENCRYPTED}, then the DevicePolicy will be true for requests originating from encrypted Linux desktops and encrypted Windows desktops.
    """ # noqa: E501
    allowed_device_management_levels: Optional[List[StrictStr]] = Field(default=None, description="Allowed device management levels, an empty list allows all management levels.", alias="allowedDeviceManagementLevels")
    allowed_encryption_statuses: Optional[List[StrictStr]] = Field(default=None, description="Allowed encryptions statuses, an empty list allows all statuses.", alias="allowedEncryptionStatuses")
    os_constraints: Optional[List[GoogleIdentityAccesscontextmanagerV1OsConstraint]] = Field(default=None, description="Allowed OS versions, an empty list allows all types and all versions.", alias="osConstraints")
    require_admin_approval: Optional[StrictBool] = Field(default=None, description="Whether the device needs to be approved by the customer admin.", alias="requireAdminApproval")
    require_corp_owned: Optional[StrictBool] = Field(default=None, description="Whether the device needs to be corp owned.", alias="requireCorpOwned")
    require_screenlock: Optional[StrictBool] = Field(default=None, description="Whether or not screenlock is required for the DevicePolicy to be true. Defaults to `false`.", alias="requireScreenlock")
    __properties: ClassVar[List[str]] = ["allowedDeviceManagementLevels", "allowedEncryptionStatuses", "osConstraints", "requireAdminApproval", "requireCorpOwned", "requireScreenlock"]

    @field_validator('allowed_device_management_levels')
    def allowed_device_management_levels_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        for i in value:
            if i not in set(['MANAGEMENT_UNSPECIFIED', 'NONE', 'BASIC', 'COMPLETE']):
                raise ValueError("each list item must be one of ('MANAGEMENT_UNSPECIFIED', 'NONE', 'BASIC', 'COMPLETE')")
        return value

    @field_validator('allowed_encryption_statuses')
    def allowed_encryption_statuses_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        for i in value:
            if i not in set(['ENCRYPTION_UNSPECIFIED', 'ENCRYPTION_UNSUPPORTED', 'UNENCRYPTED', 'ENCRYPTED']):
                raise ValueError("each list item must be one of ('ENCRYPTION_UNSPECIFIED', 'ENCRYPTION_UNSUPPORTED', 'UNENCRYPTED', 'ENCRYPTED')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleIdentityAccesscontextmanagerV1DevicePolicy from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in os_constraints (list)
        _items = []
        if self.os_constraints:
            for _item_os_constraints in self.os_constraints:
                if _item_os_constraints:
                    _items.append(_item_os_constraints.to_dict())
            _dict['osConstraints'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleIdentityAccesscontextmanagerV1DevicePolicy from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "allowedDeviceManagementLevels": obj.get("allowedDeviceManagementLevels"),
            "allowedEncryptionStatuses": obj.get("allowedEncryptionStatuses"),
            "osConstraints": [GoogleIdentityAccesscontextmanagerV1OsConstraint.from_dict(_item) for _item in obj["osConstraints"]] if obj.get("osConstraints") is not None else None,
            "requireAdminApproval": obj.get("requireAdminApproval"),
            "requireCorpOwned": obj.get("requireCorpOwned"),
            "requireScreenlock": obj.get("requireScreenlock")
        })
        return _obj



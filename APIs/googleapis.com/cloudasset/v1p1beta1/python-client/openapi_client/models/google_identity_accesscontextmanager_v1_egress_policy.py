# coding: utf-8

"""
    Cloud Asset API

    The Cloud Asset API manages the history and inventory of Google Cloud resources.

    The version of the OpenAPI document: v1p1beta1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_identity_accesscontextmanager_v1_egress_from import GoogleIdentityAccesscontextmanagerV1EgressFrom
from openapi_client.models.google_identity_accesscontextmanager_v1_egress_to import GoogleIdentityAccesscontextmanagerV1EgressTo
from typing import Optional, Set
from typing_extensions import Self

class GoogleIdentityAccesscontextmanagerV1EgressPolicy(BaseModel):
    """
    Policy for egress from perimeter. EgressPolicies match requests based on `egress_from` and `egress_to` stanzas. For an EgressPolicy to match, both `egress_from` and `egress_to` stanzas must be matched. If an EgressPolicy matches a request, the request is allowed to span the ServicePerimeter boundary. For example, an EgressPolicy can be used to allow VMs on networks within the ServicePerimeter to access a defined set of projects outside the perimeter in certain contexts (e.g. to read data from a Cloud Storage bucket or query against a BigQuery dataset). EgressPolicies are concerned with the *resources* that a request relates as well as the API services and API actions being used. They do not related to the direction of data movement. More detailed documentation for this concept can be found in the descriptions of EgressFrom and EgressTo.
    """ # noqa: E501
    egress_from: Optional[GoogleIdentityAccesscontextmanagerV1EgressFrom] = Field(default=None, alias="egressFrom")
    egress_to: Optional[GoogleIdentityAccesscontextmanagerV1EgressTo] = Field(default=None, alias="egressTo")
    __properties: ClassVar[List[str]] = ["egressFrom", "egressTo"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleIdentityAccesscontextmanagerV1EgressPolicy from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of egress_from
        if self.egress_from:
            _dict['egressFrom'] = self.egress_from.to_dict()
        # override the default output from pydantic by calling `to_dict()` of egress_to
        if self.egress_to:
            _dict['egressTo'] = self.egress_to.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleIdentityAccesscontextmanagerV1EgressPolicy from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "egressFrom": GoogleIdentityAccesscontextmanagerV1EgressFrom.from_dict(obj["egressFrom"]) if obj.get("egressFrom") is not None else None,
            "egressTo": GoogleIdentityAccesscontextmanagerV1EgressTo.from_dict(obj["egressTo"]) if obj.get("egressTo") is not None else None
        })
        return _obj



# coding: utf-8

"""
    Cloud Asset API

    The Cloud Asset API manages the history and inventory of Google Cloud resources.

    The version of the OpenAPI document: v1p1beta1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class StandardResourceMetadata(BaseModel):
    """
    The standard metadata of a cloud resource.
    """ # noqa: E501
    additional_attributes: Optional[List[StrictStr]] = Field(default=None, description="Additional searchable attributes of this resource. Informational only. The exact set of attributes is subject to change. For example: project id, DNS name etc.", alias="additionalAttributes")
    asset_type: Optional[StrictStr] = Field(default=None, description="The type of this resource. For example: \"compute.googleapis.com/Disk\".", alias="assetType")
    description: Optional[StrictStr] = Field(default=None, description="One or more paragraphs of text description of this resource. Maximum length could be up to 1M bytes.")
    display_name: Optional[StrictStr] = Field(default=None, description="The display name of this resource.", alias="displayName")
    labels: Optional[Dict[str, StrictStr]] = Field(default=None, description="Labels associated with this resource. See [Labelling and grouping Google Cloud resources](https://cloud.google.com/blog/products/gcp/labelling-and-grouping-your-google-cloud-platform-resources) for more information.")
    location: Optional[StrictStr] = Field(default=None, description="Location can be \"global\", regional like \"us-east1\", or zonal like \"us-west1-b\".")
    name: Optional[StrictStr] = Field(default=None, description="The full resource name. For example: `//compute.googleapis.com/projects/my_project_123/zones/zone1/instances/instance1`. See [Resource Names](https://cloud.google.com/apis/design/resource_names#full_resource_name) for more information.")
    network_tags: Optional[List[StrictStr]] = Field(default=None, description="Network tags associated with this resource. Like labels, network tags are a type of annotations used to group Google Cloud resources. See [Labelling Google Cloud resources](lhttps://cloud.google.com/blog/products/gcp/labelling-and-grouping-your-google-cloud-platform-resources) for more information.", alias="networkTags")
    project: Optional[StrictStr] = Field(default=None, description="The project that this resource belongs to, in the form of `projects/{project_number}`.")
    __properties: ClassVar[List[str]] = ["additionalAttributes", "assetType", "description", "displayName", "labels", "location", "name", "networkTags", "project"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of StandardResourceMetadata from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of StandardResourceMetadata from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "additionalAttributes": obj.get("additionalAttributes"),
            "assetType": obj.get("assetType"),
            "description": obj.get("description"),
            "displayName": obj.get("displayName"),
            "labels": obj.get("labels"),
            "location": obj.get("location"),
            "name": obj.get("name"),
            "networkTags": obj.get("networkTags"),
            "project": obj.get("project")
        })
        return _obj



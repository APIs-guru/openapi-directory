# coding: utf-8

"""
    Cloud Asset API

    The Cloud Asset API manages the history and inventory of Google Cloud resources.

    The version of the OpenAPI document: v1p7beta1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class GoogleIdentityAccesscontextmanagerV1OsConstraint(BaseModel):
    """
    A restriction on the OS type and version of devices making requests.
    """ # noqa: E501
    minimum_version: Optional[StrictStr] = Field(default=None, description="The minimum allowed OS version. If not set, any version of this OS satisfies the constraint. Format: `\"major.minor.patch\"`. Examples: `\"10.5.301\"`, `\"9.2.1\"`.", alias="minimumVersion")
    os_type: Optional[StrictStr] = Field(default=None, description="Required. The allowed OS type.", alias="osType")
    require_verified_chrome_os: Optional[StrictBool] = Field(default=None, description="Only allows requests from devices with a verified Chrome OS. Verifications includes requirements that the device is enterprise-managed, conformant to domain policies, and the caller has permission to call the API targeted by the request.", alias="requireVerifiedChromeOs")
    __properties: ClassVar[List[str]] = ["minimumVersion", "osType", "requireVerifiedChromeOs"]

    @field_validator('os_type')
    def os_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['OS_UNSPECIFIED', 'DESKTOP_MAC', 'DESKTOP_WINDOWS', 'DESKTOP_LINUX', 'DESKTOP_CHROME_OS', 'ANDROID', 'IOS']):
            raise ValueError("must be one of enum values ('OS_UNSPECIFIED', 'DESKTOP_MAC', 'DESKTOP_WINDOWS', 'DESKTOP_LINUX', 'DESKTOP_CHROME_OS', 'ANDROID', 'IOS')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleIdentityAccesscontextmanagerV1OsConstraint from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleIdentityAccesscontextmanagerV1OsConstraint from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "minimumVersion": obj.get("minimumVersion"),
            "osType": obj.get("osType"),
            "requireVerifiedChromeOs": obj.get("requireVerifiedChromeOs")
        })
        return _obj



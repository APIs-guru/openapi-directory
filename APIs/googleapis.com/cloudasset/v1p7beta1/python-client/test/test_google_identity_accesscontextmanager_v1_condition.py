# coding: utf-8

"""
    Cloud Asset API

    The Cloud Asset API manages the history and inventory of Google Cloud resources.

    The version of the OpenAPI document: v1p7beta1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.google_identity_accesscontextmanager_v1_condition import GoogleIdentityAccesscontextmanagerV1Condition

class TestGoogleIdentityAccesscontextmanagerV1Condition(unittest.TestCase):
    """GoogleIdentityAccesscontextmanagerV1Condition unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> GoogleIdentityAccesscontextmanagerV1Condition:
        """Test GoogleIdentityAccesscontextmanagerV1Condition
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `GoogleIdentityAccesscontextmanagerV1Condition`
        """
        model = GoogleIdentityAccesscontextmanagerV1Condition()
        if include_optional:
            return GoogleIdentityAccesscontextmanagerV1Condition(
                device_policy = openapi_client.models.google_identity_accesscontextmanager_v1_device_policy.GoogleIdentityAccesscontextmanagerV1DevicePolicy(
                    allowed_device_management_levels = [
                        'MANAGEMENT_UNSPECIFIED'
                        ], 
                    allowed_encryption_statuses = [
                        'ENCRYPTION_UNSPECIFIED'
                        ], 
                    os_constraints = [
                        openapi_client.models.google_identity_accesscontextmanager_v1_os_constraint.GoogleIdentityAccesscontextmanagerV1OsConstraint(
                            minimum_version = '', 
                            os_type = 'OS_UNSPECIFIED', 
                            require_verified_chrome_os = True, )
                        ], 
                    require_admin_approval = True, 
                    require_corp_owned = True, 
                    require_screenlock = True, ),
                ip_subnetworks = [
                    ''
                    ],
                members = [
                    ''
                    ],
                negate = True,
                regions = [
                    ''
                    ],
                required_access_levels = [
                    ''
                    ],
                vpc_network_sources = [
                    openapi_client.models.google_identity_accesscontextmanager_v1_vpc_network_source.GoogleIdentityAccesscontextmanagerV1VpcNetworkSource(
                        vpc_subnetwork = openapi_client.models.google_identity_accesscontextmanager_v1_vpc_sub_network.GoogleIdentityAccesscontextmanagerV1VpcSubNetwork(
                            network = '', 
                            vpc_ip_subnetworks = [
                                ''
                                ], ), )
                    ]
            )
        else:
            return GoogleIdentityAccesscontextmanagerV1Condition(
        )
        """

    def testGoogleIdentityAccesscontextmanagerV1Condition(self):
        """Test GoogleIdentityAccesscontextmanagerV1Condition"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

# coding: utf-8

"""
    Cloud Asset API

    The Cloud Asset API manages the history and inventory of Google Cloud resources.

    The version of the OpenAPI document: v1beta1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_cloud_orgpolicy_v1_policy import GoogleCloudOrgpolicyV1Policy
from openapi_client.models.google_identity_accesscontextmanager_v1_access_level import GoogleIdentityAccesscontextmanagerV1AccessLevel
from openapi_client.models.google_identity_accesscontextmanager_v1_access_policy import GoogleIdentityAccesscontextmanagerV1AccessPolicy
from openapi_client.models.google_identity_accesscontextmanager_v1_service_perimeter import GoogleIdentityAccesscontextmanagerV1ServicePerimeter
from openapi_client.models.policy import Policy
from openapi_client.models.resource import Resource
from typing import Optional, Set
from typing_extensions import Self

class Asset(BaseModel):
    """
    An asset in Google Cloud. An asset can be any resource in the Google Cloud [resource hierarchy](https://cloud.google.com/resource-manager/docs/cloud-platform-resource-hierarchy), a resource outside the Google Cloud resource hierarchy (such as Google Kubernetes Engine clusters and objects), or a policy (e.g. IAM policy). See [Supported asset types](https://cloud.google.com/asset-inventory/docs/supported-asset-types) for more information.
    """ # noqa: E501
    access_level: Optional[GoogleIdentityAccesscontextmanagerV1AccessLevel] = Field(default=None, alias="accessLevel")
    access_policy: Optional[GoogleIdentityAccesscontextmanagerV1AccessPolicy] = Field(default=None, alias="accessPolicy")
    asset_type: Optional[StrictStr] = Field(default=None, description="The type of the asset. Example: `compute.googleapis.com/Disk` See [Supported asset types](https://cloud.google.com/asset-inventory/docs/supported-asset-types) for more information.", alias="assetType")
    iam_policy: Optional[Policy] = Field(default=None, alias="iamPolicy")
    name: Optional[StrictStr] = Field(default=None, description="The full name of the asset. Example: `//compute.googleapis.com/projects/my_project_123/zones/zone1/instances/instance1` See [Resource names](https://cloud.google.com/apis/design/resource_names#full_resource_name) for more information.")
    org_policy: Optional[List[GoogleCloudOrgpolicyV1Policy]] = Field(default=None, description="A representation of an [organization policy](https://cloud.google.com/resource-manager/docs/organization-policy/overview#organization_policy). There can be more than one organization policy with different constraints set on a given resource.", alias="orgPolicy")
    resource: Optional[Resource] = None
    service_perimeter: Optional[GoogleIdentityAccesscontextmanagerV1ServicePerimeter] = Field(default=None, alias="servicePerimeter")
    __properties: ClassVar[List[str]] = ["accessLevel", "accessPolicy", "assetType", "iamPolicy", "name", "orgPolicy", "resource", "servicePerimeter"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Asset from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of access_level
        if self.access_level:
            _dict['accessLevel'] = self.access_level.to_dict()
        # override the default output from pydantic by calling `to_dict()` of access_policy
        if self.access_policy:
            _dict['accessPolicy'] = self.access_policy.to_dict()
        # override the default output from pydantic by calling `to_dict()` of iam_policy
        if self.iam_policy:
            _dict['iamPolicy'] = self.iam_policy.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in org_policy (list)
        _items = []
        if self.org_policy:
            for _item_org_policy in self.org_policy:
                if _item_org_policy:
                    _items.append(_item_org_policy.to_dict())
            _dict['orgPolicy'] = _items
        # override the default output from pydantic by calling `to_dict()` of resource
        if self.resource:
            _dict['resource'] = self.resource.to_dict()
        # override the default output from pydantic by calling `to_dict()` of service_perimeter
        if self.service_perimeter:
            _dict['servicePerimeter'] = self.service_perimeter.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Asset from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "accessLevel": GoogleIdentityAccesscontextmanagerV1AccessLevel.from_dict(obj["accessLevel"]) if obj.get("accessLevel") is not None else None,
            "accessPolicy": GoogleIdentityAccesscontextmanagerV1AccessPolicy.from_dict(obj["accessPolicy"]) if obj.get("accessPolicy") is not None else None,
            "assetType": obj.get("assetType"),
            "iamPolicy": Policy.from_dict(obj["iamPolicy"]) if obj.get("iamPolicy") is not None else None,
            "name": obj.get("name"),
            "orgPolicy": [GoogleCloudOrgpolicyV1Policy.from_dict(_item) for _item in obj["orgPolicy"]] if obj.get("orgPolicy") is not None else None,
            "resource": Resource.from_dict(obj["resource"]) if obj.get("resource") is not None else None,
            "servicePerimeter": GoogleIdentityAccesscontextmanagerV1ServicePerimeter.from_dict(obj["servicePerimeter"]) if obj.get("servicePerimeter") is not None else None
        })
        return _obj



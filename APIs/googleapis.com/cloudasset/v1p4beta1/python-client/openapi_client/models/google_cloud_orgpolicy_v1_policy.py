# coding: utf-8

"""
    Cloud Asset API

    The cloud asset API manages the history and inventory of cloud resources.

    The version of the OpenAPI document: v1p4beta1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBytes, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from openapi_client.models.google_cloud_orgpolicy_v1_boolean_policy import GoogleCloudOrgpolicyV1BooleanPolicy
from openapi_client.models.google_cloud_orgpolicy_v1_list_policy import GoogleCloudOrgpolicyV1ListPolicy
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudOrgpolicyV1Policy(BaseModel):
    """
    Defines a Cloud Organization `Policy` which is used to specify `Constraints` for configurations of Cloud Platform resources.
    """ # noqa: E501
    boolean_policy: Optional[GoogleCloudOrgpolicyV1BooleanPolicy] = Field(default=None, alias="booleanPolicy")
    constraint: Optional[StrictStr] = Field(default=None, description="The name of the `Constraint` the `Policy` is configuring, for example, `constraints/serviceuser.services`. A [list of available constraints](/resource-manager/docs/organization-policy/org-policy-constraints) is available. Immutable after creation.")
    etag: Optional[Union[StrictBytes, StrictStr]] = Field(default=None, description="An opaque tag indicating the current version of the `Policy`, used for concurrency control. When the `Policy` is returned from either a `GetPolicy` or a `ListOrgPolicy` request, this `etag` indicates the version of the current `Policy` to use when executing a read-modify-write loop. When the `Policy` is returned from a `GetEffectivePolicy` request, the `etag` will be unset. When the `Policy` is used in a `SetOrgPolicy` method, use the `etag` value that was returned from a `GetOrgPolicy` request as part of a read-modify-write loop for concurrency control. Not setting the `etag`in a `SetOrgPolicy` request will result in an unconditional write of the `Policy`.")
    list_policy: Optional[GoogleCloudOrgpolicyV1ListPolicy] = Field(default=None, alias="listPolicy")
    restore_default: Optional[Dict[str, Any]] = Field(default=None, description="Ignores policies set above this resource and restores the `constraint_default` enforcement behavior of the specific `Constraint` at this resource. Suppose that `constraint_default` is set to `ALLOW` for the `Constraint` `constraints/serviceuser.services`. Suppose that organization foo.com sets a `Policy` at their Organization resource node that restricts the allowed service activations to deny all service activations. They could then set a `Policy` with the `policy_type` `restore_default` on several experimental projects, restoring the `constraint_default` enforcement of the `Constraint` for only those projects, allowing those projects to have all services activated.", alias="restoreDefault")
    update_time: Optional[StrictStr] = Field(default=None, description="The time stamp the `Policy` was previously updated. This is set by the server, not specified by the caller, and represents the last time a call to `SetOrgPolicy` was made for that `Policy`. Any value set by the client will be ignored.", alias="updateTime")
    version: Optional[StrictInt] = Field(default=None, description="Version of the `Policy`. Default version is 0;")
    __properties: ClassVar[List[str]] = ["booleanPolicy", "constraint", "etag", "listPolicy", "restoreDefault", "updateTime", "version"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudOrgpolicyV1Policy from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of boolean_policy
        if self.boolean_policy:
            _dict['booleanPolicy'] = self.boolean_policy.to_dict()
        # override the default output from pydantic by calling `to_dict()` of list_policy
        if self.list_policy:
            _dict['listPolicy'] = self.list_policy.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudOrgpolicyV1Policy from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "booleanPolicy": GoogleCloudOrgpolicyV1BooleanPolicy.from_dict(obj["booleanPolicy"]) if obj.get("booleanPolicy") is not None else None,
            "constraint": obj.get("constraint"),
            "etag": obj.get("etag"),
            "listPolicy": GoogleCloudOrgpolicyV1ListPolicy.from_dict(obj["listPolicy"]) if obj.get("listPolicy") is not None else None,
            "restoreDefault": obj.get("restoreDefault"),
            "updateTime": obj.get("updateTime"),
            "version": obj.get("version")
        })
        return _obj



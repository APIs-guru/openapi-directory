# coding: utf-8

"""
    Cloud Asset API

    The cloud asset API manages the history and inventory of cloud resources.

    The version of the OpenAPI document: v1p4beta1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.access_selector import AccessSelector
from openapi_client.models.identity_selector import IdentitySelector
from openapi_client.models.resource_selector import ResourceSelector
from typing import Optional, Set
from typing_extensions import Self

class IamPolicyAnalysisQuery(BaseModel):
    """
    IAM policy analysis query message.
    """ # noqa: E501
    access_selector: Optional[AccessSelector] = Field(default=None, alias="accessSelector")
    identity_selector: Optional[IdentitySelector] = Field(default=None, alias="identitySelector")
    parent: Optional[StrictStr] = Field(default=None, description="Required. The relative name of the root asset. Only resources and IAM policies within the parent will be analyzed. This can only be an organization number (such as \"organizations/123\"), a folder number (such as \"folders/123\"), a project ID (such as \"projects/my-project-id\"), or a project number (such as \"projects/12345\"). To know how to get organization id, visit [here ](https://cloud.google.com/resource-manager/docs/creating-managing-organization#retrieving_your_organization_id). To know how to get folder or project id, visit [here ](https://cloud.google.com/resource-manager/docs/creating-managing-folders#viewing_or_listing_folders_and_projects).")
    resource_selector: Optional[ResourceSelector] = Field(default=None, alias="resourceSelector")
    __properties: ClassVar[List[str]] = ["accessSelector", "identitySelector", "parent", "resourceSelector"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of IamPolicyAnalysisQuery from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of access_selector
        if self.access_selector:
            _dict['accessSelector'] = self.access_selector.to_dict()
        # override the default output from pydantic by calling `to_dict()` of identity_selector
        if self.identity_selector:
            _dict['identitySelector'] = self.identity_selector.to_dict()
        # override the default output from pydantic by calling `to_dict()` of resource_selector
        if self.resource_selector:
            _dict['resourceSelector'] = self.resource_selector.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of IamPolicyAnalysisQuery from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "accessSelector": AccessSelector.from_dict(obj["accessSelector"]) if obj.get("accessSelector") is not None else None,
            "identitySelector": IdentitySelector.from_dict(obj["identitySelector"]) if obj.get("identitySelector") is not None else None,
            "parent": obj.get("parent"),
            "resourceSelector": ResourceSelector.from_dict(obj["resourceSelector"]) if obj.get("resourceSelector") is not None else None
        })
        return _obj



# coding: utf-8

"""
    Cloud Asset API

    The cloud asset API manages the history and inventory of cloud resources.

    The version of the OpenAPI document: v1p4beta1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_cloud_asset_v1p4beta1_analysis_state import GoogleCloudAssetV1p4beta1AnalysisState
from openapi_client.models.iam_policy_analysis import IamPolicyAnalysis
from typing import Optional, Set
from typing_extensions import Self

class AnalyzeIamPolicyResponse(BaseModel):
    """
    A response message for AssetService.AnalyzeIamPolicy.
    """ # noqa: E501
    fully_explored: Optional[StrictBool] = Field(default=None, description="Represents whether all entries in the main_analysis and service_account_impersonation_analysis have been fully explored to answer the query in the request.", alias="fullyExplored")
    main_analysis: Optional[IamPolicyAnalysis] = Field(default=None, alias="mainAnalysis")
    non_critical_errors: Optional[List[GoogleCloudAssetV1p4beta1AnalysisState]] = Field(default=None, description="A list of non-critical errors happened during the request handling to explain why `fully_explored` is false, or empty if no error happened.", alias="nonCriticalErrors")
    service_account_impersonation_analysis: Optional[List[IamPolicyAnalysis]] = Field(default=None, description="The service account impersonation analysis if AnalyzeIamPolicyRequest.analyze_service_account_impersonation is enabled.", alias="serviceAccountImpersonationAnalysis")
    __properties: ClassVar[List[str]] = ["fullyExplored", "mainAnalysis", "nonCriticalErrors", "serviceAccountImpersonationAnalysis"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AnalyzeIamPolicyResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of main_analysis
        if self.main_analysis:
            _dict['mainAnalysis'] = self.main_analysis.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in non_critical_errors (list)
        _items = []
        if self.non_critical_errors:
            for _item_non_critical_errors in self.non_critical_errors:
                if _item_non_critical_errors:
                    _items.append(_item_non_critical_errors.to_dict())
            _dict['nonCriticalErrors'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in service_account_impersonation_analysis (list)
        _items = []
        if self.service_account_impersonation_analysis:
            for _item_service_account_impersonation_analysis in self.service_account_impersonation_analysis:
                if _item_service_account_impersonation_analysis:
                    _items.append(_item_service_account_impersonation_analysis.to_dict())
            _dict['serviceAccountImpersonationAnalysis'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AnalyzeIamPolicyResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "fullyExplored": obj.get("fullyExplored"),
            "mainAnalysis": IamPolicyAnalysis.from_dict(obj["mainAnalysis"]) if obj.get("mainAnalysis") is not None else None,
            "nonCriticalErrors": [GoogleCloudAssetV1p4beta1AnalysisState.from_dict(_item) for _item in obj["nonCriticalErrors"]] if obj.get("nonCriticalErrors") is not None else None,
            "serviceAccountImpersonationAnalysis": [IamPolicyAnalysis.from_dict(_item) for _item in obj["serviceAccountImpersonationAnalysis"]] if obj.get("serviceAccountImpersonationAnalysis") is not None else None
        })
        return _obj



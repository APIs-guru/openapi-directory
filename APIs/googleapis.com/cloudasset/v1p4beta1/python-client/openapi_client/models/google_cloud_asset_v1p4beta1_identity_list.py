# coding: utf-8

"""
    Cloud Asset API

    The cloud asset API manages the history and inventory of cloud resources.

    The version of the OpenAPI document: v1p4beta1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_cloud_asset_v1p4beta1_edge import GoogleCloudAssetV1p4beta1Edge
from openapi_client.models.google_cloud_asset_v1p4beta1_identity import GoogleCloudAssetV1p4beta1Identity
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudAssetV1p4beta1IdentityList(BaseModel):
    """
    GoogleCloudAssetV1p4beta1IdentityList
    """ # noqa: E501
    group_edges: Optional[List[GoogleCloudAssetV1p4beta1Edge]] = Field(default=None, description="Group identity edges of the graph starting from the binding's group members to any node of the identities. The Edge.source_node contains a group, such as \"group:parent@google.com\". The Edge.target_node contains a member of the group, such as \"group:child@google.com\" or \"user:foo@google.com\". This field is present only if the output_group_edges option is enabled in request.", alias="groupEdges")
    identities: Optional[List[GoogleCloudAssetV1p4beta1Identity]] = Field(default=None, description="Only the identities that match one of the following conditions will be presented: - The identity_selector, if it is specified in request; - Otherwise, identities reachable from the policy binding's members.")
    __properties: ClassVar[List[str]] = ["groupEdges", "identities"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudAssetV1p4beta1IdentityList from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in group_edges (list)
        _items = []
        if self.group_edges:
            for _item_group_edges in self.group_edges:
                if _item_group_edges:
                    _items.append(_item_group_edges.to_dict())
            _dict['groupEdges'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in identities (list)
        _items = []
        if self.identities:
            for _item_identities in self.identities:
                if _item_identities:
                    _items.append(_item_identities.to_dict())
            _dict['identities'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudAssetV1p4beta1IdentityList from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "groupEdges": [GoogleCloudAssetV1p4beta1Edge.from_dict(_item) for _item in obj["groupEdges"]] if obj.get("groupEdges") is not None else None,
            "identities": [GoogleCloudAssetV1p4beta1Identity.from_dict(_item) for _item in obj["identities"]] if obj.get("identities") is not None else None
        })
        return _obj



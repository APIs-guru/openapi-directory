# coding: utf-8

"""
    Cloud Asset API

    The cloud asset API manages the history and inventory of cloud resources.

    The version of the OpenAPI document: v1p4beta1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_identity_accesscontextmanager_v1_ingress_from import GoogleIdentityAccesscontextmanagerV1IngressFrom
from openapi_client.models.google_identity_accesscontextmanager_v1_ingress_to import GoogleIdentityAccesscontextmanagerV1IngressTo
from typing import Optional, Set
from typing_extensions import Self

class GoogleIdentityAccesscontextmanagerV1IngressPolicy(BaseModel):
    """
    Policy for ingress into ServicePerimeter. IngressPolicies match requests based on `ingress_from` and `ingress_to` stanzas. For an ingress policy to match, both the `ingress_from` and `ingress_to` stanzas must be matched. If an IngressPolicy matches a request, the request is allowed through the perimeter boundary from outside the perimeter. For example, access from the internet can be allowed either based on an AccessLevel or, for traffic hosted on Google Cloud, the project of the source network. For access from private networks, using the project of the hosting network is required. Individual ingress policies can be limited by restricting which services and/or actions they match using the `ingress_to` field.
    """ # noqa: E501
    ingress_from: Optional[GoogleIdentityAccesscontextmanagerV1IngressFrom] = Field(default=None, alias="ingressFrom")
    ingress_to: Optional[GoogleIdentityAccesscontextmanagerV1IngressTo] = Field(default=None, alias="ingressTo")
    __properties: ClassVar[List[str]] = ["ingressFrom", "ingressTo"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleIdentityAccesscontextmanagerV1IngressPolicy from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of ingress_from
        if self.ingress_from:
            _dict['ingressFrom'] = self.ingress_from.to_dict()
        # override the default output from pydantic by calling `to_dict()` of ingress_to
        if self.ingress_to:
            _dict['ingressTo'] = self.ingress_to.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleIdentityAccesscontextmanagerV1IngressPolicy from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "ingressFrom": GoogleIdentityAccesscontextmanagerV1IngressFrom.from_dict(obj["ingressFrom"]) if obj.get("ingressFrom") is not None else None,
            "ingressTo": GoogleIdentityAccesscontextmanagerV1IngressTo.from_dict(obj["ingressTo"]) if obj.get("ingressTo") is not None else None
        })
        return _obj



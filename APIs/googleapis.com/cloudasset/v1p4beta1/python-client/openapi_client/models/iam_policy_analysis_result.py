# coding: utf-8

"""
    Cloud Asset API

    The cloud asset API manages the history and inventory of cloud resources.

    The version of the OpenAPI document: v1p4beta1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.binding import Binding
from openapi_client.models.google_cloud_asset_v1p4beta1_access_control_list import GoogleCloudAssetV1p4beta1AccessControlList
from openapi_client.models.google_cloud_asset_v1p4beta1_identity_list import GoogleCloudAssetV1p4beta1IdentityList
from typing import Optional, Set
from typing_extensions import Self

class IamPolicyAnalysisResult(BaseModel):
    """
    IAM Policy analysis result, consisting of one IAM policy binding and derived access control lists.
    """ # noqa: E501
    access_control_lists: Optional[List[GoogleCloudAssetV1p4beta1AccessControlList]] = Field(default=None, description="The access control lists derived from the iam_binding that match or potentially match resource and access selectors specified in the request.", alias="accessControlLists")
    attached_resource_full_name: Optional[StrictStr] = Field(default=None, description="The [full resource name](https://cloud.google.com/asset-inventory/docs/resource-name-format) of the resource to which the iam_binding policy attaches.", alias="attachedResourceFullName")
    fully_explored: Optional[StrictBool] = Field(default=None, description="Represents whether all analyses on the iam_binding have successfully finished.", alias="fullyExplored")
    iam_binding: Optional[Binding] = Field(default=None, alias="iamBinding")
    identity_list: Optional[GoogleCloudAssetV1p4beta1IdentityList] = Field(default=None, alias="identityList")
    __properties: ClassVar[List[str]] = ["accessControlLists", "attachedResourceFullName", "fullyExplored", "iamBinding", "identityList"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of IamPolicyAnalysisResult from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in access_control_lists (list)
        _items = []
        if self.access_control_lists:
            for _item_access_control_lists in self.access_control_lists:
                if _item_access_control_lists:
                    _items.append(_item_access_control_lists.to_dict())
            _dict['accessControlLists'] = _items
        # override the default output from pydantic by calling `to_dict()` of iam_binding
        if self.iam_binding:
            _dict['iamBinding'] = self.iam_binding.to_dict()
        # override the default output from pydantic by calling `to_dict()` of identity_list
        if self.identity_list:
            _dict['identityList'] = self.identity_list.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of IamPolicyAnalysisResult from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "accessControlLists": [GoogleCloudAssetV1p4beta1AccessControlList.from_dict(_item) for _item in obj["accessControlLists"]] if obj.get("accessControlLists") is not None else None,
            "attachedResourceFullName": obj.get("attachedResourceFullName"),
            "fullyExplored": obj.get("fullyExplored"),
            "iamBinding": Binding.from_dict(obj["iamBinding"]) if obj.get("iamBinding") is not None else None,
            "identityList": GoogleCloudAssetV1p4beta1IdentityList.from_dict(obj["identityList"]) if obj.get("identityList") is not None else None
        })
        return _obj



# coding: utf-8

"""
    VM Migration API

    Use the Migrate to Virtual Machines API to programmatically migrate workloads. 

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.compute_engine_disks_target_defaults import ComputeEngineDisksTargetDefaults

class TestComputeEngineDisksTargetDefaults(unittest.TestCase):
    """ComputeEngineDisksTargetDefaults unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> ComputeEngineDisksTargetDefaults:
        """Test ComputeEngineDisksTargetDefaults
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `ComputeEngineDisksTargetDefaults`
        """
        model = ComputeEngineDisksTargetDefaults()
        if include_optional:
            return ComputeEngineDisksTargetDefaults(
                disks = [
                    openapi_client.models.persistent_disk_defaults.PersistentDiskDefaults(
                        additional_labels = {
                            'key' : ''
                            }, 
                        disk_name = '', 
                        disk_type = 'COMPUTE_ENGINE_DISK_TYPE_UNSPECIFIED', 
                        encryption = openapi_client.models.encryption.Encryption(
                            kms_key = '', ), 
                        source_disk_number = 56, 
                        vm_attachment_details = openapi_client.models.vm_attachment_details.VmAttachmentDetails(
                            device_name = '', ), )
                    ],
                disks_target_defaults = None,
                target_project = '',
                vm_target_defaults = openapi_client.models.disks_migration_vm_target_defaults.DisksMigrationVmTargetDefaults(
                    additional_licenses = [
                        ''
                        ], 
                    boot_disk_defaults = openapi_client.models.boot_disk_defaults.BootDiskDefaults(
                        device_name = '', 
                        disk_name = '', 
                        disk_type = 'COMPUTE_ENGINE_DISK_TYPE_UNSPECIFIED', 
                        encryption = openapi_client.models.encryption.Encryption(
                            kms_key = '', ), 
                        image = openapi_client.models.disk_image_defaults.DiskImageDefaults(
                            source_image = '', ), ), 
                    compute_scheduling = openapi_client.models.compute_scheduling.ComputeScheduling(
                        min_node_cpus = 56, 
                        node_affinities = [
                            openapi_client.models.scheduling_node_affinity.SchedulingNodeAffinity(
                                key = '', 
                                operator = 'OPERATOR_UNSPECIFIED', 
                                values = [
                                    ''
                                    ], )
                            ], 
                        on_host_maintenance = 'ON_HOST_MAINTENANCE_UNSPECIFIED', 
                        restart_type = 'RESTART_TYPE_UNSPECIFIED', ), 
                    encryption = openapi_client.models.encryption.Encryption(
                        kms_key = '', ), 
                    hostname = '', 
                    labels = {
                        'key' : ''
                        }, 
                    machine_type = '', 
                    machine_type_series = '', 
                    metadata = {
                        'key' : ''
                        }, 
                    network_interfaces = [
                        openapi_client.models.network_interface.NetworkInterface(
                            external_ip = '', 
                            internal_ip = '', 
                            network = '', 
                            subnetwork = '', )
                        ], 
                    network_tags = [
                        ''
                        ], 
                    secure_boot = True, 
                    service_account = '', 
                    vm_name = '', ),
                zone = ''
            )
        else:
            return ComputeEngineDisksTargetDefaults(
        )
        """

    def testComputeEngineDisksTargetDefaults(self):
        """Test ComputeEngineDisksTargetDefaults"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

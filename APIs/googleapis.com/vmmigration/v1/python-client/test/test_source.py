# coding: utf-8

"""
    VM Migration API

    Use the Migrate to Virtual Machines API to programmatically migrate workloads. 

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.source import Source

class TestSource(unittest.TestCase):
    """Source unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> Source:
        """Test Source
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `Source`
        """
        model = Source()
        if include_optional:
            return Source(
                aws = openapi_client.models.aws_source_details.AwsSourceDetails(
                    access_key_creds = openapi_client.models.access_key_credentials.AccessKeyCredentials(
                        access_key_id = '', 
                        secret_access_key = '', 
                        session_token = '', ), 
                    aws_region = '', 
                    error = openapi_client.models.status.Status(
                        code = 56, 
                        details = [
                            {
                                'key' : null
                                }
                            ], 
                        message = '', ), 
                    inventory_security_group_names = [
                        ''
                        ], 
                    inventory_tag_list = [
                        openapi_client.models.tag.Tag(
                            key = '', 
                            value = '', )
                        ], 
                    migration_resources_user_tags = {
                        'key' : ''
                        }, 
                    public_ip = '', 
                    state = 'STATE_UNSPECIFIED', ),
                azure = openapi_client.models.azure_source_details.AzureSourceDetails(
                    azure_location = '', 
                    client_secret_creds = openapi_client.models.client_secret_credentials.ClientSecretCredentials(
                        client_id = '', 
                        client_secret = '', 
                        tenant_id = '', ), 
                    error = openapi_client.models.status.Status(
                        code = 56, 
                        details = [
                            {
                                'key' : null
                                }
                            ], 
                        message = '', ), 
                    migration_resources_user_tags = {
                        'key' : ''
                        }, 
                    resource_group_id = '', 
                    state = 'STATE_UNSPECIFIED', 
                    subscription_id = '', ),
                create_time = '',
                description = '',
                encryption = openapi_client.models.encryption.Encryption(
                    kms_key = '', ),
                labels = {
                    'key' : ''
                    },
                name = '',
                update_time = '',
                vmware = openapi_client.models.vmware_source_details.VmwareSourceDetails(
                    password = '', 
                    resolved_vcenter_host = '', 
                    thumbprint = '', 
                    username = '', 
                    vcenter_ip = '', )
            )
        else:
            return Source(
        )
        """

    def testSource(self):
        """Test Source"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

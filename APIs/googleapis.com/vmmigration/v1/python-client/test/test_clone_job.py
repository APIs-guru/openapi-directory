# coding: utf-8

"""
    VM Migration API

    Use the Migrate to Virtual Machines API to programmatically migrate workloads. 

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.clone_job import CloneJob

class TestCloneJob(unittest.TestCase):
    """CloneJob unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> CloneJob:
        """Test CloneJob
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `CloneJob`
        """
        model = CloneJob()
        if include_optional:
            return CloneJob(
                compute_engine_disks_target_details = openapi_client.models.compute_engine_disks_target_details.ComputeEngineDisksTargetDetails(
                    disks = [
                        openapi_client.models.persistent_disk.PersistentDisk(
                            disk_uri = '', 
                            source_disk_number = 56, )
                        ], 
                    disks_target_details = openapi_client.models.disks_migration_disks_target_details.DisksMigrationDisksTargetDetails(), 
                    vm_target_details = openapi_client.models.disks_migration_vm_target_details.DisksMigrationVmTargetDetails(
                        vm_uri = '', ), ),
                compute_engine_target_details = openapi_client.models.compute_engine_target_details.ComputeEngineTargetDetails(
                    additional_licenses = [
                        ''
                        ], 
                    applied_license = openapi_client.models.applied_license.AppliedLicense(
                        os_license = '', 
                        type = 'TYPE_UNSPECIFIED', ), 
                    boot_option = 'COMPUTE_ENGINE_BOOT_OPTION_UNSPECIFIED', 
                    compute_scheduling = openapi_client.models.compute_scheduling.ComputeScheduling(
                        min_node_cpus = 56, 
                        node_affinities = [
                            openapi_client.models.scheduling_node_affinity.SchedulingNodeAffinity(
                                key = '', 
                                operator = 'OPERATOR_UNSPECIFIED', 
                                values = [
                                    ''
                                    ], )
                            ], 
                        on_host_maintenance = 'ON_HOST_MAINTENANCE_UNSPECIFIED', 
                        restart_type = 'RESTART_TYPE_UNSPECIFIED', ), 
                    disk_type = 'COMPUTE_ENGINE_DISK_TYPE_UNSPECIFIED', 
                    encryption = openapi_client.models.encryption.Encryption(
                        kms_key = '', ), 
                    hostname = '', 
                    labels = {
                        'key' : ''
                        }, 
                    license_type = 'COMPUTE_ENGINE_LICENSE_TYPE_DEFAULT', 
                    machine_type = '', 
                    machine_type_series = '', 
                    metadata = {
                        'key' : ''
                        }, 
                    network_interfaces = [
                        openapi_client.models.network_interface.NetworkInterface(
                            external_ip = '', 
                            internal_ip = '', 
                            network = '', 
                            subnetwork = '', )
                        ], 
                    network_tags = [
                        ''
                        ], 
                    project = '', 
                    secure_boot = True, 
                    service_account = '', 
                    vm_name = '', 
                    zone = '', ),
                create_time = '',
                end_time = '',
                error = openapi_client.models.status.Status(
                    code = 56, 
                    details = [
                        {
                            'key' : null
                            }
                        ], 
                    message = '', ),
                name = '',
                state = 'STATE_UNSPECIFIED',
                state_time = '',
                steps = [
                    openapi_client.models.clone_step.CloneStep(
                        adapting_os = openapi_client.models.adapting_os_step.AdaptingOSStep(), 
                        end_time = '', 
                        instantiating_migrated_vm = openapi_client.models.instantiating_migrated_vm_step.InstantiatingMigratedVMStep(), 
                        preparing_vm_disks = openapi_client.models.preparing_vm_disks_step.PreparingVMDisksStep(), 
                        start_time = '', )
                    ]
            )
        else:
            return CloneJob(
        )
        """

    def testCloneJob(self):
        """Test CloneJob"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

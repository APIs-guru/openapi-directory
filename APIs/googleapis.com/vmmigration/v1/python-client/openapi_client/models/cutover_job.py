# coding: utf-8

"""
    VM Migration API

    Use the Migrate to Virtual Machines API to programmatically migrate workloads. 

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.compute_engine_disks_target_details import ComputeEngineDisksTargetDetails
from openapi_client.models.compute_engine_target_details import ComputeEngineTargetDetails
from openapi_client.models.cutover_step import CutoverStep
from openapi_client.models.status import Status
from typing import Optional, Set
from typing_extensions import Self

class CutoverJob(BaseModel):
    """
    CutoverJob message describes a cutover of a migrating VM. The CutoverJob is the operation of shutting down the VM, creating a snapshot and clonning the VM using the replicated snapshot.
    """ # noqa: E501
    compute_engine_disks_target_details: Optional[ComputeEngineDisksTargetDetails] = Field(default=None, alias="computeEngineDisksTargetDetails")
    compute_engine_target_details: Optional[ComputeEngineTargetDetails] = Field(default=None, alias="computeEngineTargetDetails")
    create_time: Optional[StrictStr] = Field(default=None, description="Output only. The time the cutover job was created (as an API call, not when it was actually created in the target).", alias="createTime")
    end_time: Optional[StrictStr] = Field(default=None, description="Output only. The time the cutover job had finished.", alias="endTime")
    error: Optional[Status] = None
    name: Optional[StrictStr] = Field(default=None, description="Output only. The name of the cutover job.")
    progress_percent: Optional[StrictInt] = Field(default=None, description="Output only. The current progress in percentage of the cutover job.", alias="progressPercent")
    state: Optional[StrictStr] = Field(default=None, description="Output only. State of the cutover job.")
    state_message: Optional[StrictStr] = Field(default=None, description="Output only. A message providing possible extra details about the current state.", alias="stateMessage")
    state_time: Optional[StrictStr] = Field(default=None, description="Output only. The time the state was last updated.", alias="stateTime")
    steps: Optional[List[CutoverStep]] = Field(default=None, description="Output only. The cutover steps list representing its progress.")
    __properties: ClassVar[List[str]] = ["computeEngineDisksTargetDetails", "computeEngineTargetDetails", "createTime", "endTime", "error", "name", "progressPercent", "state", "stateMessage", "stateTime", "steps"]

    @field_validator('state')
    def state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['STATE_UNSPECIFIED', 'PENDING', 'FAILED', 'SUCCEEDED', 'CANCELLED', 'CANCELLING', 'ACTIVE', 'ADAPTING_OS']):
            raise ValueError("must be one of enum values ('STATE_UNSPECIFIED', 'PENDING', 'FAILED', 'SUCCEEDED', 'CANCELLED', 'CANCELLING', 'ACTIVE', 'ADAPTING_OS')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CutoverJob from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "create_time",
            "end_time",
            "name",
            "progress_percent",
            "state",
            "state_message",
            "state_time",
            "steps",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of compute_engine_disks_target_details
        if self.compute_engine_disks_target_details:
            _dict['computeEngineDisksTargetDetails'] = self.compute_engine_disks_target_details.to_dict()
        # override the default output from pydantic by calling `to_dict()` of compute_engine_target_details
        if self.compute_engine_target_details:
            _dict['computeEngineTargetDetails'] = self.compute_engine_target_details.to_dict()
        # override the default output from pydantic by calling `to_dict()` of error
        if self.error:
            _dict['error'] = self.error.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in steps (list)
        _items = []
        if self.steps:
            for _item_steps in self.steps:
                if _item_steps:
                    _items.append(_item_steps.to_dict())
            _dict['steps'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CutoverJob from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "computeEngineDisksTargetDetails": ComputeEngineDisksTargetDetails.from_dict(obj["computeEngineDisksTargetDetails"]) if obj.get("computeEngineDisksTargetDetails") is not None else None,
            "computeEngineTargetDetails": ComputeEngineTargetDetails.from_dict(obj["computeEngineTargetDetails"]) if obj.get("computeEngineTargetDetails") is not None else None,
            "createTime": obj.get("createTime"),
            "endTime": obj.get("endTime"),
            "error": Status.from_dict(obj["error"]) if obj.get("error") is not None else None,
            "name": obj.get("name"),
            "progressPercent": obj.get("progressPercent"),
            "state": obj.get("state"),
            "stateMessage": obj.get("stateMessage"),
            "stateTime": obj.get("stateTime"),
            "steps": [CutoverStep.from_dict(_item) for _item in obj["steps"]] if obj.get("steps") is not None else None
        })
        return _obj



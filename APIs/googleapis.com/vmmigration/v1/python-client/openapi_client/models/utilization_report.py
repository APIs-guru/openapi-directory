# coding: utf-8

"""
    VM Migration API

    Use the Migrate to Virtual Machines API to programmatically migrate workloads. 

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.status import Status
from openapi_client.models.vm_utilization_info import VmUtilizationInfo
from typing import Optional, Set
from typing_extensions import Self

class UtilizationReport(BaseModel):
    """
    Utilization report details the utilization (CPU, memory, etc.) of selected source VMs.
    """ # noqa: E501
    create_time: Optional[StrictStr] = Field(default=None, description="Output only. The time the report was created (this refers to the time of the request, not the time the report creation completed).", alias="createTime")
    display_name: Optional[StrictStr] = Field(default=None, description="The report display name, as assigned by the user.", alias="displayName")
    error: Optional[Status] = None
    frame_end_time: Optional[StrictStr] = Field(default=None, description="Output only. The point in time when the time frame ends. Notice that the time frame is counted backwards. For instance if the \"frame_end_time\" value is 2021/01/20 and the time frame is WEEK then the report covers the week between 2021/01/20 and 2021/01/14.", alias="frameEndTime")
    name: Optional[StrictStr] = Field(default=None, description="Output only. The report unique name.")
    state: Optional[StrictStr] = Field(default=None, description="Output only. Current state of the report.")
    state_time: Optional[StrictStr] = Field(default=None, description="Output only. The time the state was last set.", alias="stateTime")
    time_frame: Optional[StrictStr] = Field(default=None, description="Time frame of the report.", alias="timeFrame")
    vm_count: Optional[StrictInt] = Field(default=None, description="Output only. Total number of VMs included in the report.", alias="vmCount")
    vms: Optional[List[VmUtilizationInfo]] = Field(default=None, description="List of utilization information per VM. When sent as part of the request, the \"vm_id\" field is used in order to specify which VMs to include in the report. In that case all other fields are ignored.")
    __properties: ClassVar[List[str]] = ["createTime", "displayName", "error", "frameEndTime", "name", "state", "stateTime", "timeFrame", "vmCount", "vms"]

    @field_validator('state')
    def state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['STATE_UNSPECIFIED', 'CREATING', 'SUCCEEDED', 'FAILED']):
            raise ValueError("must be one of enum values ('STATE_UNSPECIFIED', 'CREATING', 'SUCCEEDED', 'FAILED')")
        return value

    @field_validator('time_frame')
    def time_frame_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['TIME_FRAME_UNSPECIFIED', 'WEEK', 'MONTH', 'YEAR']):
            raise ValueError("must be one of enum values ('TIME_FRAME_UNSPECIFIED', 'WEEK', 'MONTH', 'YEAR')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of UtilizationReport from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "create_time",
            "frame_end_time",
            "name",
            "state",
            "state_time",
            "vm_count",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of error
        if self.error:
            _dict['error'] = self.error.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in vms (list)
        _items = []
        if self.vms:
            for _item_vms in self.vms:
                if _item_vms:
                    _items.append(_item_vms.to_dict())
            _dict['vms'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of UtilizationReport from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "createTime": obj.get("createTime"),
            "displayName": obj.get("displayName"),
            "error": Status.from_dict(obj["error"]) if obj.get("error") is not None else None,
            "frameEndTime": obj.get("frameEndTime"),
            "name": obj.get("name"),
            "state": obj.get("state"),
            "stateTime": obj.get("stateTime"),
            "timeFrame": obj.get("timeFrame"),
            "vmCount": obj.get("vmCount"),
            "vms": [VmUtilizationInfo.from_dict(_item) for _item in obj["vms"]] if obj.get("vms") is not None else None
        })
        return _obj



# coding: utf-8

"""
    VM Migration API

    Use the Migrate to Virtual Machines API to programmatically migrate workloads. 

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.disks_migration_vm_target_defaults import DisksMigrationVmTargetDefaults
from openapi_client.models.persistent_disk_defaults import PersistentDiskDefaults
from typing import Optional, Set
from typing_extensions import Self

class ComputeEngineDisksTargetDefaults(BaseModel):
    """
    ComputeEngineDisksTargetDefaults is a collection of details for creating Persistent Disks in a target Compute Engine project.
    """ # noqa: E501
    disks: Optional[List[PersistentDiskDefaults]] = Field(default=None, description="The details of each Persistent Disk to create.")
    disks_target_defaults: Optional[Dict[str, Any]] = Field(default=None, description="Details for a disk only migration.", alias="disksTargetDefaults")
    target_project: Optional[StrictStr] = Field(default=None, description="The full path of the resource of type TargetProject which represents the Compute Engine project in which to create the Persistent Disks.", alias="targetProject")
    vm_target_defaults: Optional[DisksMigrationVmTargetDefaults] = Field(default=None, alias="vmTargetDefaults")
    zone: Optional[StrictStr] = Field(default=None, description="The zone in which to create the Persistent Disks.")
    __properties: ClassVar[List[str]] = ["disks", "disksTargetDefaults", "targetProject", "vmTargetDefaults", "zone"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ComputeEngineDisksTargetDefaults from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in disks (list)
        _items = []
        if self.disks:
            for _item_disks in self.disks:
                if _item_disks:
                    _items.append(_item_disks.to_dict())
            _dict['disks'] = _items
        # override the default output from pydantic by calling `to_dict()` of vm_target_defaults
        if self.vm_target_defaults:
            _dict['vmTargetDefaults'] = self.vm_target_defaults.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ComputeEngineDisksTargetDefaults from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "disks": [PersistentDiskDefaults.from_dict(_item) for _item in obj["disks"]] if obj.get("disks") is not None else None,
            "disksTargetDefaults": obj.get("disksTargetDefaults"),
            "targetProject": obj.get("targetProject"),
            "vmTargetDefaults": DisksMigrationVmTargetDefaults.from_dict(obj["vmTargetDefaults"]) if obj.get("vmTargetDefaults") is not None else None,
            "zone": obj.get("zone")
        })
        return _obj



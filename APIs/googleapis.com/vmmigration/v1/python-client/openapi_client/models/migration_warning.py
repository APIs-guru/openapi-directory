# coding: utf-8

"""
    VM Migration API

    Use the Migrate to Virtual Machines API to programmatically migrate workloads. 

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.link import Link
from openapi_client.models.localized_message import LocalizedMessage
from typing import Optional, Set
from typing_extensions import Self

class MigrationWarning(BaseModel):
    """
    Represents migration resource warning information that can be used with google.rpc.Status message. MigrationWarning is used to present the user with warning information in migration operations.
    """ # noqa: E501
    action_item: Optional[LocalizedMessage] = Field(default=None, alias="actionItem")
    code: Optional[StrictStr] = Field(default=None, description="The warning code.")
    help_links: Optional[List[Link]] = Field(default=None, description="URL(s) pointing to additional information on handling the current warning.", alias="helpLinks")
    warning_message: Optional[LocalizedMessage] = Field(default=None, alias="warningMessage")
    warning_time: Optional[StrictStr] = Field(default=None, description="The time the warning occurred.", alias="warningTime")
    __properties: ClassVar[List[str]] = ["actionItem", "code", "helpLinks", "warningMessage", "warningTime"]

    @field_validator('code')
    def code_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['WARNING_CODE_UNSPECIFIED', 'ADAPTATION_WARNING']):
            raise ValueError("must be one of enum values ('WARNING_CODE_UNSPECIFIED', 'ADAPTATION_WARNING')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of MigrationWarning from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of action_item
        if self.action_item:
            _dict['actionItem'] = self.action_item.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in help_links (list)
        _items = []
        if self.help_links:
            for _item_help_links in self.help_links:
                if _item_help_links:
                    _items.append(_item_help_links.to_dict())
            _dict['helpLinks'] = _items
        # override the default output from pydantic by calling `to_dict()` of warning_message
        if self.warning_message:
            _dict['warningMessage'] = self.warning_message.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of MigrationWarning from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "actionItem": LocalizedMessage.from_dict(obj["actionItem"]) if obj.get("actionItem") is not None else None,
            "code": obj.get("code"),
            "helpLinks": [Link.from_dict(_item) for _item in obj["helpLinks"]] if obj.get("helpLinks") is not None else None,
            "warningMessage": LocalizedMessage.from_dict(obj["warningMessage"]) if obj.get("warningMessage") is not None else None,
            "warningTime": obj.get("warningTime")
        })
        return _obj



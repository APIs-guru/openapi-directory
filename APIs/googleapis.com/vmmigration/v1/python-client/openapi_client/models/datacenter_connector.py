# coding: utf-8

"""
    VM Migration API

    Use the Migrate to Virtual Machines API to programmatically migrate workloads. 

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.available_updates import AvailableUpdates
from openapi_client.models.status import Status
from openapi_client.models.upgrade_status import UpgradeStatus
from typing import Optional, Set
from typing_extensions import Self

class DatacenterConnector(BaseModel):
    """
    DatacenterConnector message describes a connector between the Source and Google Cloud, which is installed on a vmware datacenter (an OVA vm installed by the user) to connect the Datacenter to Google Cloud and support vm migration data transfer.
    """ # noqa: E501
    appliance_infrastructure_version: Optional[StrictStr] = Field(default=None, description="Output only. Appliance OVA version. This is the OVA which is manually installed by the user and contains the infrastructure for the automatically updatable components on the appliance.", alias="applianceInfrastructureVersion")
    appliance_software_version: Optional[StrictStr] = Field(default=None, description="Output only. Appliance last installed update bundle version. This is the version of the automatically updatable components on the appliance.", alias="applianceSoftwareVersion")
    available_versions: Optional[AvailableUpdates] = Field(default=None, alias="availableVersions")
    bucket: Optional[StrictStr] = Field(default=None, description="Output only. The communication channel between the datacenter connector and Google Cloud.")
    create_time: Optional[StrictStr] = Field(default=None, description="Output only. The time the connector was created (as an API call, not when it was actually installed).", alias="createTime")
    error: Optional[Status] = None
    name: Optional[StrictStr] = Field(default=None, description="Output only. The connector's name.")
    registration_id: Optional[StrictStr] = Field(default=None, description="Immutable. A unique key for this connector. This key is internal to the OVA connector and is supplied with its creation during the registration process and can not be modified.", alias="registrationId")
    service_account: Optional[StrictStr] = Field(default=None, description="The service account to use in the connector when communicating with the cloud.", alias="serviceAccount")
    state: Optional[StrictStr] = Field(default=None, description="Output only. State of the DatacenterConnector, as determined by the health checks.")
    state_time: Optional[StrictStr] = Field(default=None, description="Output only. The time the state was last set.", alias="stateTime")
    update_time: Optional[StrictStr] = Field(default=None, description="Output only. The last time the connector was updated with an API call.", alias="updateTime")
    upgrade_status: Optional[UpgradeStatus] = Field(default=None, alias="upgradeStatus")
    version: Optional[StrictStr] = Field(default=None, description="The version running in the DatacenterConnector. This is supplied by the OVA connector during the registration process and can not be modified.")
    __properties: ClassVar[List[str]] = ["applianceInfrastructureVersion", "applianceSoftwareVersion", "availableVersions", "bucket", "createTime", "error", "name", "registrationId", "serviceAccount", "state", "stateTime", "updateTime", "upgradeStatus", "version"]

    @field_validator('state')
    def state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['STATE_UNSPECIFIED', 'PENDING', 'OFFLINE', 'FAILED', 'ACTIVE']):
            raise ValueError("must be one of enum values ('STATE_UNSPECIFIED', 'PENDING', 'OFFLINE', 'FAILED', 'ACTIVE')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DatacenterConnector from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "appliance_infrastructure_version",
            "appliance_software_version",
            "bucket",
            "create_time",
            "name",
            "state",
            "state_time",
            "update_time",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of available_versions
        if self.available_versions:
            _dict['availableVersions'] = self.available_versions.to_dict()
        # override the default output from pydantic by calling `to_dict()` of error
        if self.error:
            _dict['error'] = self.error.to_dict()
        # override the default output from pydantic by calling `to_dict()` of upgrade_status
        if self.upgrade_status:
            _dict['upgradeStatus'] = self.upgrade_status.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DatacenterConnector from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "applianceInfrastructureVersion": obj.get("applianceInfrastructureVersion"),
            "applianceSoftwareVersion": obj.get("applianceSoftwareVersion"),
            "availableVersions": AvailableUpdates.from_dict(obj["availableVersions"]) if obj.get("availableVersions") is not None else None,
            "bucket": obj.get("bucket"),
            "createTime": obj.get("createTime"),
            "error": Status.from_dict(obj["error"]) if obj.get("error") is not None else None,
            "name": obj.get("name"),
            "registrationId": obj.get("registrationId"),
            "serviceAccount": obj.get("serviceAccount"),
            "state": obj.get("state"),
            "stateTime": obj.get("stateTime"),
            "updateTime": obj.get("updateTime"),
            "upgradeStatus": UpgradeStatus.from_dict(obj["upgradeStatus"]) if obj.get("upgradeStatus") is not None else None,
            "version": obj.get("version")
        })
        return _obj



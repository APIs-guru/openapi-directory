# coding: utf-8

"""
    VM Migration API

    Use the Migrate to Virtual Machines API to programmatically migrate workloads. 

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.aws_source_vm_details import AwsSourceVmDetails
from openapi_client.models.azure_source_vm_details import AzureSourceVmDetails
from openapi_client.models.clone_job import CloneJob
from openapi_client.models.compute_engine_disks_target_defaults import ComputeEngineDisksTargetDefaults
from openapi_client.models.compute_engine_target_defaults import ComputeEngineTargetDefaults
from openapi_client.models.cutover_forecast import CutoverForecast
from openapi_client.models.cutover_job import CutoverJob
from openapi_client.models.replication_cycle import ReplicationCycle
from openapi_client.models.replication_sync import ReplicationSync
from openapi_client.models.schedule_policy import SchedulePolicy
from openapi_client.models.status import Status
from openapi_client.models.vmware_source_vm_details import VmwareSourceVmDetails
from typing import Optional, Set
from typing_extensions import Self

class MigratingVm(BaseModel):
    """
    MigratingVm describes the VM that will be migrated from a Source environment and its replication state.
    """ # noqa: E501
    aws_source_vm_details: Optional[AwsSourceVmDetails] = Field(default=None, alias="awsSourceVmDetails")
    azure_source_vm_details: Optional[AzureSourceVmDetails] = Field(default=None, alias="azureSourceVmDetails")
    compute_engine_disks_target_defaults: Optional[ComputeEngineDisksTargetDefaults] = Field(default=None, alias="computeEngineDisksTargetDefaults")
    compute_engine_target_defaults: Optional[ComputeEngineTargetDefaults] = Field(default=None, alias="computeEngineTargetDefaults")
    create_time: Optional[StrictStr] = Field(default=None, description="Output only. The time the migrating VM was created (this refers to this resource and not to the time it was installed in the source).", alias="createTime")
    current_sync_info: Optional[ReplicationCycle] = Field(default=None, alias="currentSyncInfo")
    cutover_forecast: Optional[CutoverForecast] = Field(default=None, alias="cutoverForecast")
    description: Optional[StrictStr] = Field(default=None, description="The description attached to the migrating VM by the user.")
    display_name: Optional[StrictStr] = Field(default=None, description="The display name attached to the MigratingVm by the user.", alias="displayName")
    error: Optional[Status] = None
    group: Optional[StrictStr] = Field(default=None, description="Output only. The group this migrating vm is included in, if any. The group is represented by the full path of the appropriate Group resource.")
    labels: Optional[Dict[str, StrictStr]] = Field(default=None, description="The labels of the migrating VM.")
    last_replication_cycle: Optional[ReplicationCycle] = Field(default=None, alias="lastReplicationCycle")
    last_sync: Optional[ReplicationSync] = Field(default=None, alias="lastSync")
    name: Optional[StrictStr] = Field(default=None, description="Output only. The identifier of the MigratingVm.")
    policy: Optional[SchedulePolicy] = None
    recent_clone_jobs: Optional[List[CloneJob]] = Field(default=None, description="Output only. The recent clone jobs performed on the migrating VM. This field holds the vm's last completed clone job and the vm's running clone job, if one exists. Note: To have this field populated you need to explicitly request it via the \"view\" parameter of the Get/List request.", alias="recentCloneJobs")
    recent_cutover_jobs: Optional[List[CutoverJob]] = Field(default=None, description="Output only. The recent cutover jobs performed on the migrating VM. This field holds the vm's last completed cutover job and the vm's running cutover job, if one exists. Note: To have this field populated you need to explicitly request it via the \"view\" parameter of the Get/List request.", alias="recentCutoverJobs")
    source_vm_id: Optional[StrictStr] = Field(default=None, description="The unique ID of the VM in the source. The VM's name in vSphere can be changed, so this is not the VM's name but rather its moRef id. This id is of the form vm-.", alias="sourceVmId")
    state: Optional[StrictStr] = Field(default=None, description="Output only. State of the MigratingVm.")
    state_time: Optional[StrictStr] = Field(default=None, description="Output only. The last time the migrating VM state was updated.", alias="stateTime")
    update_time: Optional[StrictStr] = Field(default=None, description="Output only. The last time the migrating VM resource was updated.", alias="updateTime")
    vmware_source_vm_details: Optional[VmwareSourceVmDetails] = Field(default=None, alias="vmwareSourceVmDetails")
    __properties: ClassVar[List[str]] = ["awsSourceVmDetails", "azureSourceVmDetails", "computeEngineDisksTargetDefaults", "computeEngineTargetDefaults", "createTime", "currentSyncInfo", "cutoverForecast", "description", "displayName", "error", "group", "labels", "lastReplicationCycle", "lastSync", "name", "policy", "recentCloneJobs", "recentCutoverJobs", "sourceVmId", "state", "stateTime", "updateTime", "vmwareSourceVmDetails"]

    @field_validator('state')
    def state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['STATE_UNSPECIFIED', 'PENDING', 'READY', 'FIRST_SYNC', 'ACTIVE', 'CUTTING_OVER', 'CUTOVER', 'FINAL_SYNC', 'PAUSED', 'FINALIZING', 'FINALIZED', 'ERROR']):
            raise ValueError("must be one of enum values ('STATE_UNSPECIFIED', 'PENDING', 'READY', 'FIRST_SYNC', 'ACTIVE', 'CUTTING_OVER', 'CUTOVER', 'FINAL_SYNC', 'PAUSED', 'FINALIZING', 'FINALIZED', 'ERROR')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of MigratingVm from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "create_time",
            "group",
            "name",
            "recent_clone_jobs",
            "recent_cutover_jobs",
            "state",
            "state_time",
            "update_time",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of aws_source_vm_details
        if self.aws_source_vm_details:
            _dict['awsSourceVmDetails'] = self.aws_source_vm_details.to_dict()
        # override the default output from pydantic by calling `to_dict()` of azure_source_vm_details
        if self.azure_source_vm_details:
            _dict['azureSourceVmDetails'] = self.azure_source_vm_details.to_dict()
        # override the default output from pydantic by calling `to_dict()` of compute_engine_disks_target_defaults
        if self.compute_engine_disks_target_defaults:
            _dict['computeEngineDisksTargetDefaults'] = self.compute_engine_disks_target_defaults.to_dict()
        # override the default output from pydantic by calling `to_dict()` of compute_engine_target_defaults
        if self.compute_engine_target_defaults:
            _dict['computeEngineTargetDefaults'] = self.compute_engine_target_defaults.to_dict()
        # override the default output from pydantic by calling `to_dict()` of current_sync_info
        if self.current_sync_info:
            _dict['currentSyncInfo'] = self.current_sync_info.to_dict()
        # override the default output from pydantic by calling `to_dict()` of cutover_forecast
        if self.cutover_forecast:
            _dict['cutoverForecast'] = self.cutover_forecast.to_dict()
        # override the default output from pydantic by calling `to_dict()` of error
        if self.error:
            _dict['error'] = self.error.to_dict()
        # override the default output from pydantic by calling `to_dict()` of last_replication_cycle
        if self.last_replication_cycle:
            _dict['lastReplicationCycle'] = self.last_replication_cycle.to_dict()
        # override the default output from pydantic by calling `to_dict()` of last_sync
        if self.last_sync:
            _dict['lastSync'] = self.last_sync.to_dict()
        # override the default output from pydantic by calling `to_dict()` of policy
        if self.policy:
            _dict['policy'] = self.policy.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in recent_clone_jobs (list)
        _items = []
        if self.recent_clone_jobs:
            for _item_recent_clone_jobs in self.recent_clone_jobs:
                if _item_recent_clone_jobs:
                    _items.append(_item_recent_clone_jobs.to_dict())
            _dict['recentCloneJobs'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in recent_cutover_jobs (list)
        _items = []
        if self.recent_cutover_jobs:
            for _item_recent_cutover_jobs in self.recent_cutover_jobs:
                if _item_recent_cutover_jobs:
                    _items.append(_item_recent_cutover_jobs.to_dict())
            _dict['recentCutoverJobs'] = _items
        # override the default output from pydantic by calling `to_dict()` of vmware_source_vm_details
        if self.vmware_source_vm_details:
            _dict['vmwareSourceVmDetails'] = self.vmware_source_vm_details.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of MigratingVm from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "awsSourceVmDetails": AwsSourceVmDetails.from_dict(obj["awsSourceVmDetails"]) if obj.get("awsSourceVmDetails") is not None else None,
            "azureSourceVmDetails": AzureSourceVmDetails.from_dict(obj["azureSourceVmDetails"]) if obj.get("azureSourceVmDetails") is not None else None,
            "computeEngineDisksTargetDefaults": ComputeEngineDisksTargetDefaults.from_dict(obj["computeEngineDisksTargetDefaults"]) if obj.get("computeEngineDisksTargetDefaults") is not None else None,
            "computeEngineTargetDefaults": ComputeEngineTargetDefaults.from_dict(obj["computeEngineTargetDefaults"]) if obj.get("computeEngineTargetDefaults") is not None else None,
            "createTime": obj.get("createTime"),
            "currentSyncInfo": ReplicationCycle.from_dict(obj["currentSyncInfo"]) if obj.get("currentSyncInfo") is not None else None,
            "cutoverForecast": CutoverForecast.from_dict(obj["cutoverForecast"]) if obj.get("cutoverForecast") is not None else None,
            "description": obj.get("description"),
            "displayName": obj.get("displayName"),
            "error": Status.from_dict(obj["error"]) if obj.get("error") is not None else None,
            "group": obj.get("group"),
            "labels": obj.get("labels"),
            "lastReplicationCycle": ReplicationCycle.from_dict(obj["lastReplicationCycle"]) if obj.get("lastReplicationCycle") is not None else None,
            "lastSync": ReplicationSync.from_dict(obj["lastSync"]) if obj.get("lastSync") is not None else None,
            "name": obj.get("name"),
            "policy": SchedulePolicy.from_dict(obj["policy"]) if obj.get("policy") is not None else None,
            "recentCloneJobs": [CloneJob.from_dict(_item) for _item in obj["recentCloneJobs"]] if obj.get("recentCloneJobs") is not None else None,
            "recentCutoverJobs": [CutoverJob.from_dict(_item) for _item in obj["recentCutoverJobs"]] if obj.get("recentCutoverJobs") is not None else None,
            "sourceVmId": obj.get("sourceVmId"),
            "state": obj.get("state"),
            "stateTime": obj.get("stateTime"),
            "updateTime": obj.get("updateTime"),
            "vmwareSourceVmDetails": VmwareSourceVmDetails.from_dict(obj["vmwareSourceVmDetails"]) if obj.get("vmwareSourceVmDetails") is not None else None
        })
        return _obj



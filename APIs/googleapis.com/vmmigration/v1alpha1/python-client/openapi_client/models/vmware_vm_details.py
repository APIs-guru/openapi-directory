# coding: utf-8

"""
    VM Migration API

    Use the Migrate to Virtual Machines API to programmatically migrate workloads. 

    The version of the OpenAPI document: v1alpha1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class VmwareVmDetails(BaseModel):
    """
    VmwareVmDetails describes a VM in vCenter.
    """ # noqa: E501
    boot_option: Optional[StrictStr] = Field(default=None, description="Output only. The VM Boot Option.", alias="bootOption")
    committed_storage: Optional[StrictStr] = Field(default=None, description="The total size of the storage allocated to the VM in MB.", alias="committedStorage")
    committed_storage_mb: Optional[StrictStr] = Field(default=None, description="The total size of the storage allocated to the VM in MB.", alias="committedStorageMb")
    cpu_count: Optional[StrictInt] = Field(default=None, description="The number of cpus in the VM.", alias="cpuCount")
    datacenter_description: Optional[StrictStr] = Field(default=None, description="The descriptive name of the vCenter's datacenter this VM is contained in.", alias="datacenterDescription")
    datacenter_id: Optional[StrictStr] = Field(default=None, description="The id of the vCenter's datacenter this VM is contained in.", alias="datacenterId")
    disk_count: Optional[StrictInt] = Field(default=None, description="The number of disks the VM has.", alias="diskCount")
    display_name: Optional[StrictStr] = Field(default=None, description="The display name of the VM. Note that this is not necessarily unique.", alias="displayName")
    guest_description: Optional[StrictStr] = Field(default=None, description="The VM's OS. See for example https://vdc-repo.vmware.com/vmwb-repository/dcr-public/da47f910-60ac-438b-8b9b-6122f4d14524/16b7274a-bf8b-4b4c-a05e-746f2aa93c8c/doc/vim.vm.GuestOsDescriptor.GuestOsIdentifier.html for types of strings this might hold.", alias="guestDescription")
    memory_mb: Optional[StrictInt] = Field(default=None, description="The size of the memory of the VM in MB.", alias="memoryMb")
    power_state: Optional[StrictStr] = Field(default=None, description="The power state of the VM at the moment list was taken.", alias="powerState")
    uuid: Optional[StrictStr] = Field(default=None, description="The unique identifier of the VM in vCenter.")
    vm_id: Optional[StrictStr] = Field(default=None, description="The VM's id in the source (note that this is not the MigratingVm's id). This is the moref id of the VM.", alias="vmId")
    __properties: ClassVar[List[str]] = ["bootOption", "committedStorage", "committedStorageMb", "cpuCount", "datacenterDescription", "datacenterId", "diskCount", "displayName", "guestDescription", "memoryMb", "powerState", "uuid", "vmId"]

    @field_validator('boot_option')
    def boot_option_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['BOOT_OPTION_UNSPECIFIED', 'EFI', 'BIOS']):
            raise ValueError("must be one of enum values ('BOOT_OPTION_UNSPECIFIED', 'EFI', 'BIOS')")
        return value

    @field_validator('power_state')
    def power_state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['POWER_STATE_UNSPECIFIED', 'true', 'false', 'SUSPENDED']):
            raise ValueError("must be one of enum values ('POWER_STATE_UNSPECIFIED', 'true', 'false', 'SUSPENDED')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of VmwareVmDetails from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "boot_option",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of VmwareVmDetails from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "bootOption": obj.get("bootOption"),
            "committedStorage": obj.get("committedStorage"),
            "committedStorageMb": obj.get("committedStorageMb"),
            "cpuCount": obj.get("cpuCount"),
            "datacenterDescription": obj.get("datacenterDescription"),
            "datacenterId": obj.get("datacenterId"),
            "diskCount": obj.get("diskCount"),
            "displayName": obj.get("displayName"),
            "guestDescription": obj.get("guestDescription"),
            "memoryMb": obj.get("memoryMb"),
            "powerState": obj.get("powerState"),
            "uuid": obj.get("uuid"),
            "vmId": obj.get("vmId")
        })
        return _obj



# coding: utf-8

"""
    VM Migration API

    Use the Migrate to Virtual Machines API to programmatically migrate workloads. 

    The version of the OpenAPI document: v1alpha1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.access_key_credentials import AccessKeyCredentials
from openapi_client.models.status import Status
from openapi_client.models.tag import Tag
from typing import Optional, Set
from typing_extensions import Self

class AwsSourceDetails(BaseModel):
    """
    AwsSourceDetails message describes a specific source details for the AWS source type.
    """ # noqa: E501
    access_key_creds: Optional[AccessKeyCredentials] = Field(default=None, alias="accessKeyCreds")
    aws_region: Optional[StrictStr] = Field(default=None, description="Immutable. The AWS region that the source VMs will be migrated from.", alias="awsRegion")
    error: Optional[Status] = None
    inventory_security_group_names: Optional[List[StrictStr]] = Field(default=None, description="AWS security group names to limit the scope of the source inventory.", alias="inventorySecurityGroupNames")
    inventory_tag_list: Optional[List[Tag]] = Field(default=None, description="AWS resource tags to limit the scope of the source inventory.", alias="inventoryTagList")
    migration_resources_user_tags: Optional[Dict[str, StrictStr]] = Field(default=None, description="User specified tags to add to every M2VM generated resource in AWS. These tags will be set in addition to the default tags that are set as part of the migration process. The tags must not begin with the reserved prefix `m2vm`.", alias="migrationResourcesUserTags")
    public_ip: Optional[StrictStr] = Field(default=None, description="Output only. The source's public IP. All communication initiated by this source will originate from this IP.", alias="publicIp")
    state: Optional[StrictStr] = Field(default=None, description="Output only. State of the source as determined by the health check.")
    __properties: ClassVar[List[str]] = ["accessKeyCreds", "awsRegion", "error", "inventorySecurityGroupNames", "inventoryTagList", "migrationResourcesUserTags", "publicIp", "state"]

    @field_validator('state')
    def state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['STATE_UNSPECIFIED', 'PENDING', 'FAILED', 'ACTIVE']):
            raise ValueError("must be one of enum values ('STATE_UNSPECIFIED', 'PENDING', 'FAILED', 'ACTIVE')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AwsSourceDetails from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "public_ip",
            "state",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of access_key_creds
        if self.access_key_creds:
            _dict['accessKeyCreds'] = self.access_key_creds.to_dict()
        # override the default output from pydantic by calling `to_dict()` of error
        if self.error:
            _dict['error'] = self.error.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in inventory_tag_list (list)
        _items = []
        if self.inventory_tag_list:
            for _item_inventory_tag_list in self.inventory_tag_list:
                if _item_inventory_tag_list:
                    _items.append(_item_inventory_tag_list.to_dict())
            _dict['inventoryTagList'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AwsSourceDetails from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "accessKeyCreds": AccessKeyCredentials.from_dict(obj["accessKeyCreds"]) if obj.get("accessKeyCreds") is not None else None,
            "awsRegion": obj.get("awsRegion"),
            "error": Status.from_dict(obj["error"]) if obj.get("error") is not None else None,
            "inventorySecurityGroupNames": obj.get("inventorySecurityGroupNames"),
            "inventoryTagList": [Tag.from_dict(_item) for _item in obj["inventoryTagList"]] if obj.get("inventoryTagList") is not None else None,
            "migrationResourcesUserTags": obj.get("migrationResourcesUserTags"),
            "publicIp": obj.get("publicIp"),
            "state": obj.get("state")
        })
        return _obj



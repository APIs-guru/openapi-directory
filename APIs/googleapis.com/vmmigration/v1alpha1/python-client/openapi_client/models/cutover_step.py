# coding: utf-8

"""
    VM Migration API

    Use the Migrate to Virtual Machines API to programmatically migrate workloads. 

    The version of the OpenAPI document: v1alpha1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.replication_cycle import ReplicationCycle
from typing import Optional, Set
from typing_extensions import Self

class CutoverStep(BaseModel):
    """
    CutoverStep holds information about the cutover step progress.
    """ # noqa: E501
    end_time: Optional[StrictStr] = Field(default=None, description="The time the step has ended.", alias="endTime")
    final_sync: Optional[ReplicationCycle] = Field(default=None, alias="finalSync")
    instantiating_migrated_vm: Optional[Dict[str, Any]] = Field(default=None, description="InstantiatingMigratedVMStep contains specific step details.", alias="instantiatingMigratedVm")
    preparing_vm_disks: Optional[Dict[str, Any]] = Field(default=None, description="PreparingVMDisksStep contains specific step details.", alias="preparingVmDisks")
    previous_replication_cycle: Optional[ReplicationCycle] = Field(default=None, alias="previousReplicationCycle")
    shutting_down_source_vm: Optional[Dict[str, Any]] = Field(default=None, description="ShuttingDownSourceVMStep contains specific step details.", alias="shuttingDownSourceVm")
    start_time: Optional[StrictStr] = Field(default=None, description="The time the step has started.", alias="startTime")
    __properties: ClassVar[List[str]] = ["endTime", "finalSync", "instantiatingMigratedVm", "preparingVmDisks", "previousReplicationCycle", "shuttingDownSourceVm", "startTime"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CutoverStep from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of final_sync
        if self.final_sync:
            _dict['finalSync'] = self.final_sync.to_dict()
        # override the default output from pydantic by calling `to_dict()` of previous_replication_cycle
        if self.previous_replication_cycle:
            _dict['previousReplicationCycle'] = self.previous_replication_cycle.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CutoverStep from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "endTime": obj.get("endTime"),
            "finalSync": ReplicationCycle.from_dict(obj["finalSync"]) if obj.get("finalSync") is not None else None,
            "instantiatingMigratedVm": obj.get("instantiatingMigratedVm"),
            "preparingVmDisks": obj.get("preparingVmDisks"),
            "previousReplicationCycle": ReplicationCycle.from_dict(obj["previousReplicationCycle"]) if obj.get("previousReplicationCycle") is not None else None,
            "shuttingDownSourceVm": obj.get("shuttingDownSourceVm"),
            "startTime": obj.get("startTime")
        })
        return _obj



# coding: utf-8

"""
    VM Migration API

    Use the Migrate to Virtual Machines API to programmatically migrate workloads. 

    The version of the OpenAPI document: v1alpha1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.clone_step import CloneStep
from openapi_client.models.compute_engine_disks_target_details import ComputeEngineDisksTargetDetails
from openapi_client.models.compute_engine_target_details import ComputeEngineTargetDetails
from openapi_client.models.status import Status
from openapi_client.models.target_vm_details import TargetVMDetails
from typing import Optional, Set
from typing_extensions import Self

class CloneJob(BaseModel):
    """
    CloneJob describes the process of creating a clone of a MigratingVM to the requested target based on the latest successful uploaded snapshots. While the migration cycles of a MigratingVm take place, it is possible to verify the uploaded VM can be started in the cloud, by creating a clone. The clone can be created without any downtime, and it is created using the latest snapshots which are already in the cloud. The cloneJob is only responsible for its work, not its products, which means once it is finished, it will never touch the instance it created. It will only delete it in case of the CloneJob being cancelled or upon failure to clone.
    """ # noqa: E501
    compute_engine_disks_target_details: Optional[ComputeEngineDisksTargetDetails] = Field(default=None, alias="computeEngineDisksTargetDetails")
    compute_engine_target_details: Optional[ComputeEngineTargetDetails] = Field(default=None, alias="computeEngineTargetDetails")
    compute_engine_vm_details: Optional[TargetVMDetails] = Field(default=None, alias="computeEngineVmDetails")
    create_time: Optional[StrictStr] = Field(default=None, description="Output only. The time the clone job was created (as an API call, not when it was actually created in the target).", alias="createTime")
    end_time: Optional[StrictStr] = Field(default=None, description="Output only. The time the clone job was ended.", alias="endTime")
    error: Optional[Status] = None
    name: Optional[StrictStr] = Field(default=None, description="Output only. The name of the clone.")
    state: Optional[StrictStr] = Field(default=None, description="Output only. State of the clone job.")
    state_time: Optional[StrictStr] = Field(default=None, description="Output only. The time the state was last updated.", alias="stateTime")
    steps: Optional[List[CloneStep]] = Field(default=None, description="Output only. The clone steps list representing its progress.")
    target_details: Optional[TargetVMDetails] = Field(default=None, alias="targetDetails")
    __properties: ClassVar[List[str]] = ["computeEngineDisksTargetDetails", "computeEngineTargetDetails", "computeEngineVmDetails", "createTime", "endTime", "error", "name", "state", "stateTime", "steps", "targetDetails"]

    @field_validator('state')
    def state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['STATE_UNSPECIFIED', 'PENDING', 'ACTIVE', 'FAILED', 'SUCCEEDED', 'CANCELLED', 'CANCELLING', 'ADAPTING_OS']):
            raise ValueError("must be one of enum values ('STATE_UNSPECIFIED', 'PENDING', 'ACTIVE', 'FAILED', 'SUCCEEDED', 'CANCELLED', 'CANCELLING', 'ADAPTING_OS')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CloneJob from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "create_time",
            "end_time",
            "name",
            "state",
            "state_time",
            "steps",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of compute_engine_disks_target_details
        if self.compute_engine_disks_target_details:
            _dict['computeEngineDisksTargetDetails'] = self.compute_engine_disks_target_details.to_dict()
        # override the default output from pydantic by calling `to_dict()` of compute_engine_target_details
        if self.compute_engine_target_details:
            _dict['computeEngineTargetDetails'] = self.compute_engine_target_details.to_dict()
        # override the default output from pydantic by calling `to_dict()` of compute_engine_vm_details
        if self.compute_engine_vm_details:
            _dict['computeEngineVmDetails'] = self.compute_engine_vm_details.to_dict()
        # override the default output from pydantic by calling `to_dict()` of error
        if self.error:
            _dict['error'] = self.error.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in steps (list)
        _items = []
        if self.steps:
            for _item_steps in self.steps:
                if _item_steps:
                    _items.append(_item_steps.to_dict())
            _dict['steps'] = _items
        # override the default output from pydantic by calling `to_dict()` of target_details
        if self.target_details:
            _dict['targetDetails'] = self.target_details.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CloneJob from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "computeEngineDisksTargetDetails": ComputeEngineDisksTargetDetails.from_dict(obj["computeEngineDisksTargetDetails"]) if obj.get("computeEngineDisksTargetDetails") is not None else None,
            "computeEngineTargetDetails": ComputeEngineTargetDetails.from_dict(obj["computeEngineTargetDetails"]) if obj.get("computeEngineTargetDetails") is not None else None,
            "computeEngineVmDetails": TargetVMDetails.from_dict(obj["computeEngineVmDetails"]) if obj.get("computeEngineVmDetails") is not None else None,
            "createTime": obj.get("createTime"),
            "endTime": obj.get("endTime"),
            "error": Status.from_dict(obj["error"]) if obj.get("error") is not None else None,
            "name": obj.get("name"),
            "state": obj.get("state"),
            "stateTime": obj.get("stateTime"),
            "steps": [CloneStep.from_dict(_item) for _item in obj["steps"]] if obj.get("steps") is not None else None,
            "targetDetails": TargetVMDetails.from_dict(obj["targetDetails"]) if obj.get("targetDetails") is not None else None
        })
        return _obj



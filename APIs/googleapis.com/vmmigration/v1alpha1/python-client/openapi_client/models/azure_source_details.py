# coding: utf-8

"""
    VM Migration API

    Use the Migrate to Virtual Machines API to programmatically migrate workloads. 

    The version of the OpenAPI document: v1alpha1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.client_secret_credentials import ClientSecretCredentials
from openapi_client.models.status import Status
from typing import Optional, Set
from typing_extensions import Self

class AzureSourceDetails(BaseModel):
    """
    AzureSourceDetails message describes a specific source details for the Azure source type.
    """ # noqa: E501
    azure_location: Optional[StrictStr] = Field(default=None, description="Immutable. The Azure location (region) that the source VMs will be migrated from.", alias="azureLocation")
    client_secret_creds: Optional[ClientSecretCredentials] = Field(default=None, alias="clientSecretCreds")
    error: Optional[Status] = None
    migration_resources_user_tags: Optional[Dict[str, StrictStr]] = Field(default=None, description="User specified tags to add to every M2VM generated resource in Azure. These tags will be set in addition to the default tags that are set as part of the migration process. The tags must not begin with the reserved prefix `m4ce` or `m2vm`.", alias="migrationResourcesUserTags")
    resource_group_id: Optional[StrictStr] = Field(default=None, description="Output only. The ID of the Azure resource group that contains all resources related to the migration process of this source.", alias="resourceGroupId")
    state: Optional[StrictStr] = Field(default=None, description="Output only. State of the source as determined by the health check.")
    subscription_id: Optional[StrictStr] = Field(default=None, description="Immutable. Azure subscription ID.", alias="subscriptionId")
    __properties: ClassVar[List[str]] = ["azureLocation", "clientSecretCreds", "error", "migrationResourcesUserTags", "resourceGroupId", "state", "subscriptionId"]

    @field_validator('state')
    def state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['STATE_UNSPECIFIED', 'PENDING', 'FAILED', 'ACTIVE']):
            raise ValueError("must be one of enum values ('STATE_UNSPECIFIED', 'PENDING', 'FAILED', 'ACTIVE')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AzureSourceDetails from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "resource_group_id",
            "state",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of client_secret_creds
        if self.client_secret_creds:
            _dict['clientSecretCreds'] = self.client_secret_creds.to_dict()
        # override the default output from pydantic by calling `to_dict()` of error
        if self.error:
            _dict['error'] = self.error.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AzureSourceDetails from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "azureLocation": obj.get("azureLocation"),
            "clientSecretCreds": ClientSecretCredentials.from_dict(obj["clientSecretCreds"]) if obj.get("clientSecretCreds") is not None else None,
            "error": Status.from_dict(obj["error"]) if obj.get("error") is not None else None,
            "migrationResourcesUserTags": obj.get("migrationResourcesUserTags"),
            "resourceGroupId": obj.get("resourceGroupId"),
            "state": obj.get("state"),
            "subscriptionId": obj.get("subscriptionId")
        })
        return _obj



# coding: utf-8

"""
    VM Migration API

    Use the Migrate to Virtual Machines API to programmatically migrate workloads. 

    The version of the OpenAPI document: v1alpha1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.disk_image_target_details import DiskImageTargetDetails
from openapi_client.models.encryption import Encryption
from openapi_client.models.image_import_job import ImageImportJob
from typing import Optional, Set
from typing_extensions import Self

class ImageImport(BaseModel):
    """
    ImageImport describes the configuration of the image import to run.
    """ # noqa: E501
    cloud_storage_uri: Optional[StrictStr] = Field(default=None, description="Immutable. The path to the Cloud Storage file from which the image should be imported.", alias="cloudStorageUri")
    create_time: Optional[StrictStr] = Field(default=None, description="Output only. The time the image import was created.", alias="createTime")
    disk_image_target_defaults: Optional[DiskImageTargetDetails] = Field(default=None, alias="diskImageTargetDefaults")
    encryption: Optional[Encryption] = None
    name: Optional[StrictStr] = Field(default=None, description="Output only. The resource path of the ImageImport.")
    recent_image_import_jobs: Optional[List[ImageImportJob]] = Field(default=None, description="Output only. The result of the most recent runs for this ImageImport. All jobs for this ImageImport can be listed via ListImageImportJobs.", alias="recentImageImportJobs")
    __properties: ClassVar[List[str]] = ["cloudStorageUri", "createTime", "diskImageTargetDefaults", "encryption", "name", "recentImageImportJobs"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ImageImport from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "create_time",
            "name",
            "recent_image_import_jobs",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of disk_image_target_defaults
        if self.disk_image_target_defaults:
            _dict['diskImageTargetDefaults'] = self.disk_image_target_defaults.to_dict()
        # override the default output from pydantic by calling `to_dict()` of encryption
        if self.encryption:
            _dict['encryption'] = self.encryption.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in recent_image_import_jobs (list)
        _items = []
        if self.recent_image_import_jobs:
            for _item_recent_image_import_jobs in self.recent_image_import_jobs:
                if _item_recent_image_import_jobs:
                    _items.append(_item_recent_image_import_jobs.to_dict())
            _dict['recentImageImportJobs'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ImageImport from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "cloudStorageUri": obj.get("cloudStorageUri"),
            "createTime": obj.get("createTime"),
            "diskImageTargetDefaults": DiskImageTargetDetails.from_dict(obj["diskImageTargetDefaults"]) if obj.get("diskImageTargetDefaults") is not None else None,
            "encryption": Encryption.from_dict(obj["encryption"]) if obj.get("encryption") is not None else None,
            "name": obj.get("name"),
            "recentImageImportJobs": [ImageImportJob.from_dict(_item) for _item in obj["recentImageImportJobs"]] if obj.get("recentImageImportJobs") is not None else None
        })
        return _obj



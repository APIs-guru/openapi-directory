# coding: utf-8

"""
    VM Migration API

    Use the Migrate to Virtual Machines API to programmatically migrate workloads. 

    The version of the OpenAPI document: v1alpha1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class VmUtilizationMetrics(BaseModel):
    """
    Utilization metrics values for a single VM.
    """ # noqa: E501
    cpu_average: Optional[StrictInt] = Field(default=None, description="Average CPU usage, percent.", alias="cpuAverage")
    cpu_average_percent: Optional[StrictInt] = Field(default=None, description="Average CPU usage, percent.", alias="cpuAveragePercent")
    cpu_max: Optional[StrictInt] = Field(default=None, description="Max CPU usage, percent.", alias="cpuMax")
    cpu_max_percent: Optional[StrictInt] = Field(default=None, description="Max CPU usage, percent.", alias="cpuMaxPercent")
    disk_io_rate_average: Optional[StrictStr] = Field(default=None, description="Average disk IO rate, in kilobytes per second.", alias="diskIoRateAverage")
    disk_io_rate_average_kbps: Optional[StrictStr] = Field(default=None, description="Average disk IO rate, in kilobytes per second.", alias="diskIoRateAverageKbps")
    disk_io_rate_max: Optional[StrictStr] = Field(default=None, description="Max disk IO rate, in kilobytes per second.", alias="diskIoRateMax")
    disk_io_rate_max_kbps: Optional[StrictStr] = Field(default=None, description="Max disk IO rate, in kilobytes per second.", alias="diskIoRateMaxKbps")
    memory_average: Optional[StrictInt] = Field(default=None, description="Average memory usage, percent.", alias="memoryAverage")
    memory_average_percent: Optional[StrictInt] = Field(default=None, description="Average memory usage, percent.", alias="memoryAveragePercent")
    memory_max: Optional[StrictInt] = Field(default=None, description="Max memory usage, percent.", alias="memoryMax")
    memory_max_percent: Optional[StrictInt] = Field(default=None, description="Max memory usage, percent.", alias="memoryMaxPercent")
    network_throughput_average: Optional[StrictStr] = Field(default=None, description="Average network throughput (combined transmit-rates and receive-rates), in kilobytes per second.", alias="networkThroughputAverage")
    network_throughput_average_kbps: Optional[StrictStr] = Field(default=None, description="Average network throughput (combined transmit-rates and receive-rates), in kilobytes per second.", alias="networkThroughputAverageKbps")
    network_throughput_max: Optional[StrictStr] = Field(default=None, description="Max network throughput (combined transmit-rates and receive-rates), in kilobytes per second.", alias="networkThroughputMax")
    network_throughput_max_kbps: Optional[StrictStr] = Field(default=None, description="Max network throughput (combined transmit-rates and receive-rates), in kilobytes per second.", alias="networkThroughputMaxKbps")
    __properties: ClassVar[List[str]] = ["cpuAverage", "cpuAveragePercent", "cpuMax", "cpuMaxPercent", "diskIoRateAverage", "diskIoRateAverageKbps", "diskIoRateMax", "diskIoRateMaxKbps", "memoryAverage", "memoryAveragePercent", "memoryMax", "memoryMaxPercent", "networkThroughputAverage", "networkThroughputAverageKbps", "networkThroughputMax", "networkThroughputMaxKbps"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of VmUtilizationMetrics from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of VmUtilizationMetrics from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "cpuAverage": obj.get("cpuAverage"),
            "cpuAveragePercent": obj.get("cpuAveragePercent"),
            "cpuMax": obj.get("cpuMax"),
            "cpuMaxPercent": obj.get("cpuMaxPercent"),
            "diskIoRateAverage": obj.get("diskIoRateAverage"),
            "diskIoRateAverageKbps": obj.get("diskIoRateAverageKbps"),
            "diskIoRateMax": obj.get("diskIoRateMax"),
            "diskIoRateMaxKbps": obj.get("diskIoRateMaxKbps"),
            "memoryAverage": obj.get("memoryAverage"),
            "memoryAveragePercent": obj.get("memoryAveragePercent"),
            "memoryMax": obj.get("memoryMax"),
            "memoryMaxPercent": obj.get("memoryMaxPercent"),
            "networkThroughputAverage": obj.get("networkThroughputAverage"),
            "networkThroughputAverageKbps": obj.get("networkThroughputAverageKbps"),
            "networkThroughputMax": obj.get("networkThroughputMax"),
            "networkThroughputMaxKbps": obj.get("networkThroughputMaxKbps")
        })
        return _obj



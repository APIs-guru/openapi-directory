# coding: utf-8

"""
    VM Migration API

    Use the Migrate to Virtual Machines API to programmatically migrate workloads. 

    The version of the OpenAPI document: v1alpha1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.cycle_step import CycleStep
from openapi_client.models.migration_warning import MigrationWarning
from openapi_client.models.status import Status
from typing import Optional, Set
from typing_extensions import Self

class ReplicationCycle(BaseModel):
    """
    ReplicationCycle contains information about the current replication cycle status.
    """ # noqa: E501
    cycle_number: Optional[StrictInt] = Field(default=None, description="The cycle's ordinal number.", alias="cycleNumber")
    end_time: Optional[StrictStr] = Field(default=None, description="The time the replication cycle has ended.", alias="endTime")
    error: Optional[Status] = None
    name: Optional[StrictStr] = Field(default=None, description="The identifier of the ReplicationCycle.")
    progress: Optional[StrictInt] = Field(default=None, description="The current progress in percentage of this cycle.")
    progress_percent: Optional[StrictInt] = Field(default=None, description="The current progress in percentage of this cycle. Was replaced by 'steps' field, which breaks down the cycle progression more accurately.", alias="progressPercent")
    start_time: Optional[StrictStr] = Field(default=None, description="The time the replication cycle has started.", alias="startTime")
    state: Optional[StrictStr] = Field(default=None, description="State of the ReplicationCycle.")
    steps: Optional[List[CycleStep]] = Field(default=None, description="The cycle's steps list representing its progress.")
    total_pause_duration: Optional[StrictStr] = Field(default=None, description="The accumulated duration the replication cycle was paused.", alias="totalPauseDuration")
    warnings: Optional[List[MigrationWarning]] = Field(default=None, description="Output only. Warnings that occurred during the cycle.")
    __properties: ClassVar[List[str]] = ["cycleNumber", "endTime", "error", "name", "progress", "progressPercent", "startTime", "state", "steps", "totalPauseDuration", "warnings"]

    @field_validator('state')
    def state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['STATE_UNSPECIFIED', 'RUNNING', 'PAUSED', 'FAILED', 'SUCCEEDED']):
            raise ValueError("must be one of enum values ('STATE_UNSPECIFIED', 'RUNNING', 'PAUSED', 'FAILED', 'SUCCEEDED')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ReplicationCycle from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "warnings",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of error
        if self.error:
            _dict['error'] = self.error.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in steps (list)
        _items = []
        if self.steps:
            for _item_steps in self.steps:
                if _item_steps:
                    _items.append(_item_steps.to_dict())
            _dict['steps'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in warnings (list)
        _items = []
        if self.warnings:
            for _item_warnings in self.warnings:
                if _item_warnings:
                    _items.append(_item_warnings.to_dict())
            _dict['warnings'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ReplicationCycle from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "cycleNumber": obj.get("cycleNumber"),
            "endTime": obj.get("endTime"),
            "error": Status.from_dict(obj["error"]) if obj.get("error") is not None else None,
            "name": obj.get("name"),
            "progress": obj.get("progress"),
            "progressPercent": obj.get("progressPercent"),
            "startTime": obj.get("startTime"),
            "state": obj.get("state"),
            "steps": [CycleStep.from_dict(_item) for _item in obj["steps"]] if obj.get("steps") is not None else None,
            "totalPauseDuration": obj.get("totalPauseDuration"),
            "warnings": [MigrationWarning.from_dict(_item) for _item in obj["warnings"]] if obj.get("warnings") is not None else None
        })
        return _obj



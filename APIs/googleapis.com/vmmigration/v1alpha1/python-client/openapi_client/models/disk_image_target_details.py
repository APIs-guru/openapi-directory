# coding: utf-8

"""
    VM Migration API

    Use the Migrate to Virtual Machines API to programmatically migrate workloads. 

    The version of the OpenAPI document: v1alpha1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.encryption import Encryption
from openapi_client.models.image_import_os_adaptation_parameters import ImageImportOsAdaptationParameters
from typing import Optional, Set
from typing_extensions import Self

class DiskImageTargetDetails(BaseModel):
    """
    The target details of the image resource that will be created by the import job.
    """ # noqa: E501
    additional_licenses: Optional[List[StrictStr]] = Field(default=None, description="Optional. Additional licenses to assign to the image.", alias="additionalLicenses")
    data_disk_image_import: Optional[Dict[str, Any]] = Field(default=None, description="Mentions that the image import is not using OS adaptation process.", alias="dataDiskImageImport")
    description: Optional[StrictStr] = Field(default=None, description="Optional. An optional description of the image.")
    encryption: Optional[Encryption] = None
    family_name: Optional[StrictStr] = Field(default=None, description="Optional. The name of the image family to which the new image belongs.", alias="familyName")
    image_name: Optional[StrictStr] = Field(default=None, description="Required. The name of the image to be created.", alias="imageName")
    labels: Optional[Dict[str, StrictStr]] = Field(default=None, description="Optional. A map of labels to associate with the image.")
    os_adaptation_parameters: Optional[ImageImportOsAdaptationParameters] = Field(default=None, alias="osAdaptationParameters")
    single_region_storage: Optional[StrictBool] = Field(default=None, description="Optional. Set to true to set the image storageLocations to the single region of the import job. When false, the closest multi-region is selected.", alias="singleRegionStorage")
    target_project: Optional[StrictStr] = Field(default=None, description="Required. Reference to the TargetProject resource that represents the target project in which the imported image will be created.", alias="targetProject")
    __properties: ClassVar[List[str]] = ["additionalLicenses", "dataDiskImageImport", "description", "encryption", "familyName", "imageName", "labels", "osAdaptationParameters", "singleRegionStorage", "targetProject"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DiskImageTargetDetails from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of encryption
        if self.encryption:
            _dict['encryption'] = self.encryption.to_dict()
        # override the default output from pydantic by calling `to_dict()` of os_adaptation_parameters
        if self.os_adaptation_parameters:
            _dict['osAdaptationParameters'] = self.os_adaptation_parameters.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DiskImageTargetDetails from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "additionalLicenses": obj.get("additionalLicenses"),
            "dataDiskImageImport": obj.get("dataDiskImageImport"),
            "description": obj.get("description"),
            "encryption": Encryption.from_dict(obj["encryption"]) if obj.get("encryption") is not None else None,
            "familyName": obj.get("familyName"),
            "imageName": obj.get("imageName"),
            "labels": obj.get("labels"),
            "osAdaptationParameters": ImageImportOsAdaptationParameters.from_dict(obj["osAdaptationParameters"]) if obj.get("osAdaptationParameters") is not None else None,
            "singleRegionStorage": obj.get("singleRegionStorage"),
            "targetProject": obj.get("targetProject")
        })
        return _obj



# coding: utf-8

"""
    VM Migration API

    Use the Migrate to Virtual Machines API to programmatically migrate workloads. 

    The version of the OpenAPI document: v1alpha1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.applied_license import AppliedLicense
from openapi_client.models.compute_scheduling import ComputeScheduling
from openapi_client.models.encryption import Encryption
from openapi_client.models.network_interface import NetworkInterface
from typing import Optional, Set
from typing_extensions import Self

class ComputeEngineTargetDefaults(BaseModel):
    """
    ComputeEngineTargetDefaults is a collection of details for creating a VM in a target Compute Engine project.
    """ # noqa: E501
    additional_licenses: Optional[List[StrictStr]] = Field(default=None, description="Additional licenses to assign to the VM.", alias="additionalLicenses")
    applied_license: Optional[AppliedLicense] = Field(default=None, alias="appliedLicense")
    boot_option: Optional[StrictStr] = Field(default=None, description="Output only. The VM Boot Option, as set in the source VM.", alias="bootOption")
    compute_scheduling: Optional[ComputeScheduling] = Field(default=None, alias="computeScheduling")
    disk_type: Optional[StrictStr] = Field(default=None, description="The disk type to use in the VM.", alias="diskType")
    encryption: Optional[Encryption] = None
    hostname: Optional[StrictStr] = Field(default=None, description="The hostname to assign to the VM.")
    labels: Optional[Dict[str, StrictStr]] = Field(default=None, description="A map of labels to associate with the VM.")
    license_type: Optional[StrictStr] = Field(default=None, description="The license type to use in OS adaptation.", alias="licenseType")
    machine_type: Optional[StrictStr] = Field(default=None, description="The machine type to create the VM with.", alias="machineType")
    machine_type_series: Optional[StrictStr] = Field(default=None, description="The machine type series to create the VM with.", alias="machineTypeSeries")
    metadata: Optional[Dict[str, StrictStr]] = Field(default=None, description="The metadata key/value pairs to assign to the VM.")
    network_interfaces: Optional[List[NetworkInterface]] = Field(default=None, description="List of NICs connected to this VM.", alias="networkInterfaces")
    network_tags: Optional[List[StrictStr]] = Field(default=None, description="A list of network tags to associate with the VM.", alias="networkTags")
    secure_boot: Optional[StrictBool] = Field(default=None, description="Defines whether the instance has Secure Boot enabled. This can be set to true only if the VM boot option is EFI.", alias="secureBoot")
    service_account: Optional[StrictStr] = Field(default=None, description="The service account to associate the VM with.", alias="serviceAccount")
    target_project: Optional[StrictStr] = Field(default=None, description="The full path of the resource of type TargetProject which represents the Compute Engine project in which to create this VM.", alias="targetProject")
    vm_name: Optional[StrictStr] = Field(default=None, description="The name of the VM to create.", alias="vmName")
    zone: Optional[StrictStr] = Field(default=None, description="The zone in which to create the VM.")
    __properties: ClassVar[List[str]] = ["additionalLicenses", "appliedLicense", "bootOption", "computeScheduling", "diskType", "encryption", "hostname", "labels", "licenseType", "machineType", "machineTypeSeries", "metadata", "networkInterfaces", "networkTags", "secureBoot", "serviceAccount", "targetProject", "vmName", "zone"]

    @field_validator('boot_option')
    def boot_option_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['COMPUTE_ENGINE_BOOT_OPTION_UNSPECIFIED', 'COMPUTE_ENGINE_BOOT_OPTION_EFI', 'COMPUTE_ENGINE_BOOT_OPTION_BIOS']):
            raise ValueError("must be one of enum values ('COMPUTE_ENGINE_BOOT_OPTION_UNSPECIFIED', 'COMPUTE_ENGINE_BOOT_OPTION_EFI', 'COMPUTE_ENGINE_BOOT_OPTION_BIOS')")
        return value

    @field_validator('disk_type')
    def disk_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['COMPUTE_ENGINE_DISK_TYPE_UNSPECIFIED', 'COMPUTE_ENGINE_DISK_TYPE_STANDARD', 'COMPUTE_ENGINE_DISK_TYPE_SSD', 'COMPUTE_ENGINE_DISK_TYPE_BALANCED']):
            raise ValueError("must be one of enum values ('COMPUTE_ENGINE_DISK_TYPE_UNSPECIFIED', 'COMPUTE_ENGINE_DISK_TYPE_STANDARD', 'COMPUTE_ENGINE_DISK_TYPE_SSD', 'COMPUTE_ENGINE_DISK_TYPE_BALANCED')")
        return value

    @field_validator('license_type')
    def license_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['COMPUTE_ENGINE_LICENSE_TYPE_DEFAULT', 'COMPUTE_ENGINE_LICENSE_TYPE_PAYG', 'COMPUTE_ENGINE_LICENSE_TYPE_BYOL']):
            raise ValueError("must be one of enum values ('COMPUTE_ENGINE_LICENSE_TYPE_DEFAULT', 'COMPUTE_ENGINE_LICENSE_TYPE_PAYG', 'COMPUTE_ENGINE_LICENSE_TYPE_BYOL')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ComputeEngineTargetDefaults from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "boot_option",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of applied_license
        if self.applied_license:
            _dict['appliedLicense'] = self.applied_license.to_dict()
        # override the default output from pydantic by calling `to_dict()` of compute_scheduling
        if self.compute_scheduling:
            _dict['computeScheduling'] = self.compute_scheduling.to_dict()
        # override the default output from pydantic by calling `to_dict()` of encryption
        if self.encryption:
            _dict['encryption'] = self.encryption.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in network_interfaces (list)
        _items = []
        if self.network_interfaces:
            for _item_network_interfaces in self.network_interfaces:
                if _item_network_interfaces:
                    _items.append(_item_network_interfaces.to_dict())
            _dict['networkInterfaces'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ComputeEngineTargetDefaults from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "additionalLicenses": obj.get("additionalLicenses"),
            "appliedLicense": AppliedLicense.from_dict(obj["appliedLicense"]) if obj.get("appliedLicense") is not None else None,
            "bootOption": obj.get("bootOption"),
            "computeScheduling": ComputeScheduling.from_dict(obj["computeScheduling"]) if obj.get("computeScheduling") is not None else None,
            "diskType": obj.get("diskType"),
            "encryption": Encryption.from_dict(obj["encryption"]) if obj.get("encryption") is not None else None,
            "hostname": obj.get("hostname"),
            "labels": obj.get("labels"),
            "licenseType": obj.get("licenseType"),
            "machineType": obj.get("machineType"),
            "machineTypeSeries": obj.get("machineTypeSeries"),
            "metadata": obj.get("metadata"),
            "networkInterfaces": [NetworkInterface.from_dict(_item) for _item in obj["networkInterfaces"]] if obj.get("networkInterfaces") is not None else None,
            "networkTags": obj.get("networkTags"),
            "secureBoot": obj.get("secureBoot"),
            "serviceAccount": obj.get("serviceAccount"),
            "targetProject": obj.get("targetProject"),
            "vmName": obj.get("vmName"),
            "zone": obj.get("zone")
        })
        return _obj



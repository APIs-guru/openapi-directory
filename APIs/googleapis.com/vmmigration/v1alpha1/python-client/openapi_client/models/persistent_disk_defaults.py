# coding: utf-8

"""
    VM Migration API

    Use the Migrate to Virtual Machines API to programmatically migrate workloads. 

    The version of the OpenAPI document: v1alpha1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.encryption import Encryption
from openapi_client.models.vm_attachment_details import VmAttachmentDetails
from typing import Optional, Set
from typing_extensions import Self

class PersistentDiskDefaults(BaseModel):
    """
    Details for creation of a Persistent Disk.
    """ # noqa: E501
    additional_labels: Optional[Dict[str, StrictStr]] = Field(default=None, description="A map of labels to associate with the Persistent Disk.", alias="additionalLabels")
    disk_name: Optional[StrictStr] = Field(default=None, description="Optional. The name of the Persistent Disk to create.", alias="diskName")
    disk_type: Optional[StrictStr] = Field(default=None, description="The disk type to use.", alias="diskType")
    encryption: Optional[Encryption] = None
    source_disk_number: Optional[StrictInt] = Field(default=None, description="Required. The ordinal number of the source VM disk.", alias="sourceDiskNumber")
    vm_attachment_details: Optional[VmAttachmentDetails] = Field(default=None, alias="vmAttachmentDetails")
    __properties: ClassVar[List[str]] = ["additionalLabels", "diskName", "diskType", "encryption", "sourceDiskNumber", "vmAttachmentDetails"]

    @field_validator('disk_type')
    def disk_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['COMPUTE_ENGINE_DISK_TYPE_UNSPECIFIED', 'COMPUTE_ENGINE_DISK_TYPE_STANDARD', 'COMPUTE_ENGINE_DISK_TYPE_SSD', 'COMPUTE_ENGINE_DISK_TYPE_BALANCED']):
            raise ValueError("must be one of enum values ('COMPUTE_ENGINE_DISK_TYPE_UNSPECIFIED', 'COMPUTE_ENGINE_DISK_TYPE_STANDARD', 'COMPUTE_ENGINE_DISK_TYPE_SSD', 'COMPUTE_ENGINE_DISK_TYPE_BALANCED')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PersistentDiskDefaults from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of encryption
        if self.encryption:
            _dict['encryption'] = self.encryption.to_dict()
        # override the default output from pydantic by calling `to_dict()` of vm_attachment_details
        if self.vm_attachment_details:
            _dict['vmAttachmentDetails'] = self.vm_attachment_details.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PersistentDiskDefaults from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "additionalLabels": obj.get("additionalLabels"),
            "diskName": obj.get("diskName"),
            "diskType": obj.get("diskType"),
            "encryption": Encryption.from_dict(obj["encryption"]) if obj.get("encryption") is not None else None,
            "sourceDiskNumber": obj.get("sourceDiskNumber"),
            "vmAttachmentDetails": VmAttachmentDetails.from_dict(obj["vmAttachmentDetails"]) if obj.get("vmAttachmentDetails") is not None else None
        })
        return _obj



# coding: utf-8

"""
    VM Migration API

    Use the Migrate to Virtual Machines API to programmatically migrate workloads. 

    The version of the OpenAPI document: v1alpha1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.scheduling_node_affinity import SchedulingNodeAffinity
from typing import Optional, Set
from typing_extensions import Self

class ComputeScheduling(BaseModel):
    """
    Scheduling information for VM on maintenance/restart behaviour and node allocation in sole tenant nodes.
    """ # noqa: E501
    automatic_restart: Optional[StrictBool] = Field(default=None, alias="automaticRestart")
    min_node_cpus: Optional[StrictInt] = Field(default=None, description="The minimum number of virtual CPUs this instance will consume when running on a sole-tenant node. Ignored if no node_affinites are configured.", alias="minNodeCpus")
    node_affinities: Optional[List[SchedulingNodeAffinity]] = Field(default=None, description="A set of node affinity and anti-affinity configurations for sole tenant nodes.", alias="nodeAffinities")
    on_host_maintenance: Optional[StrictStr] = Field(default=None, description="How the instance should behave when the host machine undergoes maintenance that may temporarily impact instance performance.", alias="onHostMaintenance")
    restart_type: Optional[StrictStr] = Field(default=None, description="Whether the Instance should be automatically restarted whenever it is terminated by Compute Engine (not terminated by user). This configuration is identical to `automaticRestart` field in Compute Engine create instance under scheduling. It was changed to an enum (instead of a boolean) to match the default value in Compute Engine which is automatic restart.", alias="restartType")
    __properties: ClassVar[List[str]] = ["automaticRestart", "minNodeCpus", "nodeAffinities", "onHostMaintenance", "restartType"]

    @field_validator('on_host_maintenance')
    def on_host_maintenance_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['ON_HOST_MAINTENANCE_UNSPECIFIED', 'TERMINATE', 'MIGRATE']):
            raise ValueError("must be one of enum values ('ON_HOST_MAINTENANCE_UNSPECIFIED', 'TERMINATE', 'MIGRATE')")
        return value

    @field_validator('restart_type')
    def restart_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['RESTART_TYPE_UNSPECIFIED', 'AUTOMATIC_RESTART', 'NO_AUTOMATIC_RESTART']):
            raise ValueError("must be one of enum values ('RESTART_TYPE_UNSPECIFIED', 'AUTOMATIC_RESTART', 'NO_AUTOMATIC_RESTART')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ComputeScheduling from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in node_affinities (list)
        _items = []
        if self.node_affinities:
            for _item_node_affinities in self.node_affinities:
                if _item_node_affinities:
                    _items.append(_item_node_affinities.to_dict())
            _dict['nodeAffinities'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ComputeScheduling from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "automaticRestart": obj.get("automaticRestart"),
            "minNodeCpus": obj.get("minNodeCpus"),
            "nodeAffinities": [SchedulingNodeAffinity.from_dict(_item) for _item in obj["nodeAffinities"]] if obj.get("nodeAffinities") is not None else None,
            "onHostMaintenance": obj.get("onHostMaintenance"),
            "restartType": obj.get("restartType")
        })
        return _obj



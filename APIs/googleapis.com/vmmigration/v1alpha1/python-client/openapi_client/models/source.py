# coding: utf-8

"""
    VM Migration API

    Use the Migrate to Virtual Machines API to programmatically migrate workloads. 

    The version of the OpenAPI document: v1alpha1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.aws_source_details import AwsSourceDetails
from openapi_client.models.azure_source_details import AzureSourceDetails
from openapi_client.models.encryption import Encryption
from openapi_client.models.status import Status
from openapi_client.models.vmware_source_details import VmwareSourceDetails
from typing import Optional, Set
from typing_extensions import Self

class Source(BaseModel):
    """
    Source message describes a specific vm migration Source resource. It contains the source environment information.
    """ # noqa: E501
    aws: Optional[AwsSourceDetails] = None
    azure: Optional[AzureSourceDetails] = None
    create_time: Optional[StrictStr] = Field(default=None, description="Output only. The create time timestamp.", alias="createTime")
    description: Optional[StrictStr] = Field(default=None, description="User-provided description of the source.")
    encryption: Optional[Encryption] = None
    error: Optional[Status] = None
    labels: Optional[Dict[str, StrictStr]] = Field(default=None, description="The labels of the source.")
    name: Optional[StrictStr] = Field(default=None, description="Output only. The Source name.")
    update_time: Optional[StrictStr] = Field(default=None, description="Output only. The update time timestamp.", alias="updateTime")
    vmware: Optional[VmwareSourceDetails] = None
    __properties: ClassVar[List[str]] = ["aws", "azure", "createTime", "description", "encryption", "error", "labels", "name", "updateTime", "vmware"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Source from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "create_time",
            "name",
            "update_time",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of aws
        if self.aws:
            _dict['aws'] = self.aws.to_dict()
        # override the default output from pydantic by calling `to_dict()` of azure
        if self.azure:
            _dict['azure'] = self.azure.to_dict()
        # override the default output from pydantic by calling `to_dict()` of encryption
        if self.encryption:
            _dict['encryption'] = self.encryption.to_dict()
        # override the default output from pydantic by calling `to_dict()` of error
        if self.error:
            _dict['error'] = self.error.to_dict()
        # override the default output from pydantic by calling `to_dict()` of vmware
        if self.vmware:
            _dict['vmware'] = self.vmware.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Source from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "aws": AwsSourceDetails.from_dict(obj["aws"]) if obj.get("aws") is not None else None,
            "azure": AzureSourceDetails.from_dict(obj["azure"]) if obj.get("azure") is not None else None,
            "createTime": obj.get("createTime"),
            "description": obj.get("description"),
            "encryption": Encryption.from_dict(obj["encryption"]) if obj.get("encryption") is not None else None,
            "error": Status.from_dict(obj["error"]) if obj.get("error") is not None else None,
            "labels": obj.get("labels"),
            "name": obj.get("name"),
            "updateTime": obj.get("updateTime"),
            "vmware": VmwareSourceDetails.from_dict(obj["vmware"]) if obj.get("vmware") is not None else None
        })
        return _obj



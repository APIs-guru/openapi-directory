# coding: utf-8

"""
    VM Migration API

    Use the Migrate to Virtual Machines API to programmatically migrate workloads. 

    The version of the OpenAPI document: v1alpha1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.aws_security_group import AwsSecurityGroup
from typing import Optional, Set
from typing_extensions import Self

class AwsVmDetails(BaseModel):
    """
    AwsVmDetails describes a VM in AWS.
    """ # noqa: E501
    architecture: Optional[StrictStr] = Field(default=None, description="The CPU architecture.")
    boot_option: Optional[StrictStr] = Field(default=None, description="The VM Boot Option.", alias="bootOption")
    committed_storage_mb: Optional[StrictStr] = Field(default=None, description="The total size of the storage allocated to the VM in MB.", alias="committedStorageMb")
    cpu_count: Optional[StrictInt] = Field(default=None, description="The number of cpus the VM has.", alias="cpuCount")
    disk_count: Optional[StrictInt] = Field(default=None, description="The number of disks the VM has.", alias="diskCount")
    display_name: Optional[StrictStr] = Field(default=None, description="The display name of the VM. Note that this value is not necessarily unique.", alias="displayName")
    instance_type: Optional[StrictStr] = Field(default=None, description="The instance type of the VM.", alias="instanceType")
    memory_mb: Optional[StrictInt] = Field(default=None, description="The memory size of the VM in MB.", alias="memoryMb")
    os_description: Optional[StrictStr] = Field(default=None, description="The VM's OS.", alias="osDescription")
    power_state: Optional[StrictStr] = Field(default=None, description="Output only. The power state of the VM at the moment list was taken.", alias="powerState")
    security_groups: Optional[List[AwsSecurityGroup]] = Field(default=None, description="The security groups the VM belongs to.", alias="securityGroups")
    source_description: Optional[StrictStr] = Field(default=None, description="The descriptive name of the AWS's source this VM is connected to.", alias="sourceDescription")
    source_id: Optional[StrictStr] = Field(default=None, description="The id of the AWS's source this VM is connected to.", alias="sourceId")
    tags: Optional[Dict[str, StrictStr]] = Field(default=None, description="The tags of the VM.")
    virtualization_type: Optional[StrictStr] = Field(default=None, description="The virtualization type.", alias="virtualizationType")
    vm_id: Optional[StrictStr] = Field(default=None, description="The VM ID in AWS.", alias="vmId")
    vpc_id: Optional[StrictStr] = Field(default=None, description="The VPC ID the VM belongs to.", alias="vpcId")
    zone: Optional[StrictStr] = Field(default=None, description="The AWS zone of the VM.")
    __properties: ClassVar[List[str]] = ["architecture", "bootOption", "committedStorageMb", "cpuCount", "diskCount", "displayName", "instanceType", "memoryMb", "osDescription", "powerState", "securityGroups", "sourceDescription", "sourceId", "tags", "virtualizationType", "vmId", "vpcId", "zone"]

    @field_validator('architecture')
    def architecture_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['VM_ARCHITECTURE_UNSPECIFIED', 'I386', 'X86_64', 'ARM64', 'X86_64_MAC']):
            raise ValueError("must be one of enum values ('VM_ARCHITECTURE_UNSPECIFIED', 'I386', 'X86_64', 'ARM64', 'X86_64_MAC')")
        return value

    @field_validator('boot_option')
    def boot_option_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['BOOT_OPTION_UNSPECIFIED', 'EFI', 'BIOS']):
            raise ValueError("must be one of enum values ('BOOT_OPTION_UNSPECIFIED', 'EFI', 'BIOS')")
        return value

    @field_validator('power_state')
    def power_state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['POWER_STATE_UNSPECIFIED', 'true', 'false', 'SUSPENDED', 'PENDING']):
            raise ValueError("must be one of enum values ('POWER_STATE_UNSPECIFIED', 'true', 'false', 'SUSPENDED', 'PENDING')")
        return value

    @field_validator('virtualization_type')
    def virtualization_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['VM_VIRTUALIZATION_TYPE_UNSPECIFIED', 'HVM', 'PARAVIRTUAL']):
            raise ValueError("must be one of enum values ('VM_VIRTUALIZATION_TYPE_UNSPECIFIED', 'HVM', 'PARAVIRTUAL')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AwsVmDetails from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "power_state",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in security_groups (list)
        _items = []
        if self.security_groups:
            for _item_security_groups in self.security_groups:
                if _item_security_groups:
                    _items.append(_item_security_groups.to_dict())
            _dict['securityGroups'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AwsVmDetails from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "architecture": obj.get("architecture"),
            "bootOption": obj.get("bootOption"),
            "committedStorageMb": obj.get("committedStorageMb"),
            "cpuCount": obj.get("cpuCount"),
            "diskCount": obj.get("diskCount"),
            "displayName": obj.get("displayName"),
            "instanceType": obj.get("instanceType"),
            "memoryMb": obj.get("memoryMb"),
            "osDescription": obj.get("osDescription"),
            "powerState": obj.get("powerState"),
            "securityGroups": [AwsSecurityGroup.from_dict(_item) for _item in obj["securityGroups"]] if obj.get("securityGroups") is not None else None,
            "sourceDescription": obj.get("sourceDescription"),
            "sourceId": obj.get("sourceId"),
            "tags": obj.get("tags"),
            "virtualizationType": obj.get("virtualizationType"),
            "vmId": obj.get("vmId"),
            "vpcId": obj.get("vpcId"),
            "zone": obj.get("zone")
        })
        return _obj



# coding: utf-8

"""
    VM Migration API

    Use the Migrate to Virtual Machines API to programmatically migrate workloads. 

    The version of the OpenAPI document: v1alpha1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.image_import import ImageImport

class TestImageImport(unittest.TestCase):
    """ImageImport unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> ImageImport:
        """Test ImageImport
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `ImageImport`
        """
        model = ImageImport()
        if include_optional:
            return ImageImport(
                cloud_storage_uri = '',
                create_time = '',
                disk_image_target_defaults = openapi_client.models.disk_image_target_details.DiskImageTargetDetails(
                    additional_licenses = [
                        ''
                        ], 
                    data_disk_image_import = openapi_client.models.data_disk_image_import.dataDiskImageImport(), 
                    description = '', 
                    encryption = openapi_client.models.encryption.Encryption(
                        kms_key = '', ), 
                    family_name = '', 
                    image_name = '', 
                    labels = {
                        'key' : ''
                        }, 
                    os_adaptation_parameters = openapi_client.models.image_import_os_adaptation_parameters.ImageImportOsAdaptationParameters(
                        generalize = True, 
                        license_type = 'COMPUTE_ENGINE_LICENSE_TYPE_DEFAULT', ), 
                    single_region_storage = True, 
                    target_project = '', ),
                encryption = openapi_client.models.encryption.Encryption(
                    kms_key = '', ),
                name = '',
                recent_image_import_jobs = [
                    openapi_client.models.image_import_job.ImageImportJob(
                        cloud_storage_uri = '', 
                        create_time = '', 
                        created_resources = [
                            ''
                            ], 
                        disk_image_target_details = openapi_client.models.disk_image_target_details.DiskImageTargetDetails(
                            additional_licenses = [
                                ''
                                ], 
                            data_disk_image_import = openapi_client.models.data_disk_image_import.dataDiskImageImport(), 
                            description = '', 
                            encryption = openapi_client.models.encryption.Encryption(
                                kms_key = '', ), 
                            family_name = '', 
                            image_name = '', 
                            labels = {
                                'key' : ''
                                }, 
                            os_adaptation_parameters = openapi_client.models.image_import_os_adaptation_parameters.ImageImportOsAdaptationParameters(
                                generalize = True, 
                                license_type = 'COMPUTE_ENGINE_LICENSE_TYPE_DEFAULT', ), 
                            single_region_storage = True, 
                            target_project = '', ), 
                        end_time = '', 
                        errors = [
                            openapi_client.models.status.Status(
                                code = 56, 
                                details = [
                                    {
                                        'key' : null
                                        }
                                    ], 
                                message = '', )
                            ], 
                        name = '', 
                        state = 'STATE_UNSPECIFIED', 
                        steps = [
                            openapi_client.models.image_import_step.ImageImportStep(
                                adapting_os = openapi_client.models.adapting_os_step.AdaptingOSStep(), 
                                creating_image = openapi_client.models.creating_image_step.CreatingImageStep(), 
                                end_time = '', 
                                initializing = openapi_client.models.initializing_image_import_step.InitializingImageImportStep(), 
                                loading_source_files = openapi_client.models.loading_image_source_files_step.LoadingImageSourceFilesStep(), 
                                start_time = '', )
                            ], 
                        warnings = [
                            openapi_client.models.migration_warning.MigrationWarning(
                                action_item = openapi_client.models.localized_message.LocalizedMessage(
                                    locale = '', 
                                    message = '', ), 
                                code = 'WARNING_CODE_UNSPECIFIED', 
                                help_links = [
                                    openapi_client.models.link.Link(
                                        description = '', 
                                        url = '', )
                                    ], 
                                warning_message = openapi_client.models.localized_message.LocalizedMessage(
                                    locale = '', 
                                    message = '', ), 
                                warning_time = '', )
                            ], )
                    ]
            )
        else:
            return ImageImport(
        )
        """

    def testImageImport(self):
        """Test ImageImport"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

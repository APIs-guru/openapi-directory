# coding: utf-8

"""
    VM Migration API

    Use the Migrate to Virtual Machines API to programmatically migrate workloads. 

    The version of the OpenAPI document: v1alpha1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.datacenter_connector import DatacenterConnector

class TestDatacenterConnector(unittest.TestCase):
    """DatacenterConnector unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> DatacenterConnector:
        """Test DatacenterConnector
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `DatacenterConnector`
        """
        model = DatacenterConnector()
        if include_optional:
            return DatacenterConnector(
                appliance_infrastructure_version = '',
                appliance_software_version = '',
                available_versions = openapi_client.models.available_updates.AvailableUpdates(
                    in_place_update = openapi_client.models.appliance_version.ApplianceVersion(
                        critical = True, 
                        release_notes_uri = '', 
                        uri = '', 
                        version = '', ), 
                    new_deployable_appliance = openapi_client.models.appliance_version.ApplianceVersion(
                        critical = True, 
                        release_notes_uri = '', 
                        uri = '', 
                        version = '', ), ),
                bucket = '',
                create_time = '',
                error = openapi_client.models.status.Status(
                    code = 56, 
                    details = [
                        {
                            'key' : null
                            }
                        ], 
                    message = '', ),
                name = '',
                registration_id = '',
                service_account = '',
                state = 'STATE_UNSPECIFIED',
                state_time = '',
                update_time = '',
                upgrade_status = openapi_client.models.upgrade_status.UpgradeStatus(
                    error = openapi_client.models.status.Status(
                        code = 56, 
                        details = [
                            {
                                'key' : null
                                }
                            ], 
                        message = '', ), 
                    previous_version = '', 
                    start_time = '', 
                    state = 'STATE_UNSPECIFIED', 
                    version = '', ),
                version = ''
            )
        else:
            return DatacenterConnector(
        )
        """

    def testDatacenterConnector(self):
        """Test DatacenterConnector"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

# coding: utf-8

"""
    VM Migration API

    Use the Migrate to Virtual Machines API to programmatically migrate workloads. 

    The version of the OpenAPI document: v1alpha1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.list_migrating_vms_response import ListMigratingVmsResponse

class TestListMigratingVmsResponse(unittest.TestCase):
    """ListMigratingVmsResponse unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> ListMigratingVmsResponse:
        """Test ListMigratingVmsResponse
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `ListMigratingVmsResponse`
        """
        model = ListMigratingVmsResponse()
        if include_optional:
            return ListMigratingVmsResponse(
                migrating_vms = [
                    openapi_client.models.migrating_vm.MigratingVm(
                        aws_source_vm_details = openapi_client.models.aws_source_vm_details.AwsSourceVmDetails(
                            committed_storage_bytes = '', 
                            disks = [
                                openapi_client.models.aws_disk_details.AwsDiskDetails(
                                    disk_number = 56, 
                                    size_gb = '', 
                                    volume_id = '', )
                                ], 
                            firmware = 'FIRMWARE_UNSPECIFIED', 
                            vm_capabilities_info = openapi_client.models.vm_capabilities.VmCapabilities(
                                last_os_capabilities_update_time = '', 
                                os_capabilities = [
                                    'OS_CAPABILITY_UNSPECIFIED'
                                    ], ), ), 
                        azure_source_vm_details = openapi_client.models.azure_source_vm_details.AzureSourceVmDetails(
                            committed_storage_bytes = '', 
                            firmware = 'FIRMWARE_UNSPECIFIED', ), 
                        compute_engine_disks_target_defaults = openapi_client.models.compute_engine_disks_target_defaults.ComputeEngineDisksTargetDefaults(
                            disks_target_defaults = openapi_client.models.disks_target_defaults.disksTargetDefaults(), 
                            target_project = '', 
                            vm_target_defaults = openapi_client.models.disks_migration_vm_target_defaults.DisksMigrationVmTargetDefaults(
                                additional_licenses = [
                                    ''
                                    ], 
                                boot_disk_defaults = openapi_client.models.boot_disk_defaults.BootDiskDefaults(
                                    device_name = '', 
                                    disk_name = '', 
                                    disk_type = 'COMPUTE_ENGINE_DISK_TYPE_UNSPECIFIED', 
                                    encryption = openapi_client.models.encryption.Encryption(
                                        kms_key = '', ), 
                                    image = openapi_client.models.disk_image_defaults.DiskImageDefaults(
                                        source_image = '', ), ), 
                                compute_scheduling = openapi_client.models.compute_scheduling.ComputeScheduling(
                                    automatic_restart = True, 
                                    min_node_cpus = 56, 
                                    node_affinities = [
                                        openapi_client.models.scheduling_node_affinity.SchedulingNodeAffinity(
                                            key = '', 
                                            operator = 'OPERATOR_UNSPECIFIED', 
                                            values = [
                                                ''
                                                ], )
                                        ], 
                                    on_host_maintenance = 'ON_HOST_MAINTENANCE_UNSPECIFIED', 
                                    restart_type = 'RESTART_TYPE_UNSPECIFIED', ), 
                                encryption = openapi_client.models.encryption.Encryption(
                                    kms_key = '', ), 
                                hostname = '', 
                                labels = {
                                    'key' : ''
                                    }, 
                                machine_type = '', 
                                machine_type_series = '', 
                                metadata = {
                                    'key' : ''
                                    }, 
                                network_interfaces = [
                                    openapi_client.models.network_interface.NetworkInterface(
                                        external_ip = '', 
                                        internal_ip = '', 
                                        network = '', 
                                        subnetwork = '', )
                                    ], 
                                network_tags = [
                                    ''
                                    ], 
                                secure_boot = True, 
                                service_account = '', 
                                vm_name = '', ), 
                            zone = '', ), 
                        compute_engine_target_defaults = openapi_client.models.compute_engine_target_defaults.ComputeEngineTargetDefaults(
                            applied_license = openapi_client.models.applied_license.AppliedLicense(
                                os_license = '', 
                                type = 'TYPE_UNSPECIFIED', ), 
                            boot_option = 'COMPUTE_ENGINE_BOOT_OPTION_UNSPECIFIED', 
                            disk_type = 'COMPUTE_ENGINE_DISK_TYPE_UNSPECIFIED', 
                            hostname = '', 
                            license_type = 'COMPUTE_ENGINE_LICENSE_TYPE_DEFAULT', 
                            machine_type = '', 
                            machine_type_series = '', 
                            secure_boot = True, 
                            service_account = '', 
                            target_project = '', 
                            vm_name = '', 
                            zone = '', ), 
                        compute_engine_vm_defaults = openapi_client.models.target_vm_details.TargetVMDetails(
                            boot_option = 'BOOT_OPTION_UNSPECIFIED', 
                            disk_type = 'DISK_TYPE_UNSPECIFIED', 
                            external_ip = '', 
                            internal_ip = '', 
                            license_type = 'DEFAULT', 
                            machine_type = '', 
                            machine_type_series = '', 
                            name = '', 
                            network = '', 
                            project = '', 
                            secure_boot = True, 
                            service_account = '', 
                            subnetwork = '', 
                            target_project = '', 
                            zone = '', ), 
                        create_time = '', 
                        current_sync_info = openapi_client.models.replication_cycle.ReplicationCycle(
                            cycle_number = 56, 
                            end_time = '', 
                            error = openapi_client.models.status.Status(
                                code = 56, 
                                details = [
                                    {
                                        'key' : null
                                        }
                                    ], 
                                message = '', ), 
                            name = '', 
                            progress = 56, 
                            progress_percent = 56, 
                            start_time = '', 
                            state = 'STATE_UNSPECIFIED', 
                            steps = [
                                openapi_client.models.cycle_step.CycleStep(
                                    end_time = '', 
                                    initializing_replication = openapi_client.models.initializing_replication_step.InitializingReplicationStep(), 
                                    post_processing = openapi_client.models.post_processing_step.PostProcessingStep(), 
                                    replicating = openapi_client.models.replicating_step.ReplicatingStep(
                                        last_thirty_minutes_average_bytes_per_second = '', 
                                        last_two_minutes_average_bytes_per_second = '', 
                                        replicated_bytes = '', 
                                        total_bytes = '', ), 
                                    start_time = '', )
                                ], 
                            total_pause_duration = '', 
                            warnings = [
                                openapi_client.models.migration_warning.MigrationWarning(
                                    action_item = openapi_client.models.localized_message.LocalizedMessage(
                                        locale = '', 
                                        message = '', ), 
                                    code = 'WARNING_CODE_UNSPECIFIED', 
                                    help_links = [
                                        openapi_client.models.link.Link(
                                            description = '', 
                                            url = '', )
                                        ], 
                                    warning_message = openapi_client.models.localized_message.LocalizedMessage(
                                        locale = '', 
                                        message = '', ), 
                                    warning_time = '', )
                                ], ), 
                        cutover_forecast = openapi_client.models.cutover_forecast.CutoverForecast(
                            estimated_cutover_job_duration = '', ), 
                        description = '', 
                        display_name = '', 
                        error = openapi_client.models.status.Status(
                            code = 56, 
                            message = '', ), 
                        group = '', 
                        labels = {
                            'key' : ''
                            }, 
                        last_replication_cycle = openapi_client.models.replication_cycle.ReplicationCycle(
                            cycle_number = 56, 
                            end_time = '', 
                            name = '', 
                            progress = 56, 
                            progress_percent = 56, 
                            start_time = '', 
                            state = 'STATE_UNSPECIFIED', 
                            total_pause_duration = '', ), 
                        last_sync = openapi_client.models.replication_sync.ReplicationSync(
                            last_sync_time = '', ), 
                        name = '', 
                        policy = openapi_client.models.schedule_policy.SchedulePolicy(
                            idle_duration = '', 
                            skip_os_adaptation = True, ), 
                        recent_clone_jobs = [
                            openapi_client.models.clone_job.CloneJob(
                                compute_engine_disks_target_details = openapi_client.models.compute_engine_disks_target_details.ComputeEngineDisksTargetDetails(
                                    disks_target_details = openapi_client.models.disks_migration_disks_target_details.DisksMigrationDisksTargetDetails(), 
                                    vm_target_details = openapi_client.models.disks_migration_vm_target_details.DisksMigrationVmTargetDetails(
                                        vm_uri = '', ), ), 
                                compute_engine_target_details = openapi_client.models.compute_engine_target_details.ComputeEngineTargetDetails(
                                    boot_option = 'COMPUTE_ENGINE_BOOT_OPTION_UNSPECIFIED', 
                                    disk_type = 'COMPUTE_ENGINE_DISK_TYPE_UNSPECIFIED', 
                                    hostname = '', 
                                    license_type = 'COMPUTE_ENGINE_LICENSE_TYPE_DEFAULT', 
                                    machine_type = '', 
                                    machine_type_series = '', 
                                    project = '', 
                                    secure_boot = True, 
                                    service_account = '', 
                                    vm_name = '', 
                                    zone = '', ), 
                                compute_engine_vm_details = openapi_client.models.target_vm_details.TargetVMDetails(
                                    boot_option = 'BOOT_OPTION_UNSPECIFIED', 
                                    disk_type = 'DISK_TYPE_UNSPECIFIED', 
                                    external_ip = '', 
                                    internal_ip = '', 
                                    license_type = 'DEFAULT', 
                                    machine_type = '', 
                                    machine_type_series = '', 
                                    name = '', 
                                    network = '', 
                                    project = '', 
                                    secure_boot = True, 
                                    service_account = '', 
                                    subnetwork = '', 
                                    target_project = '', 
                                    zone = '', ), 
                                create_time = '', 
                                end_time = '', 
                                name = '', 
                                state = 'STATE_UNSPECIFIED', 
                                state_time = '', 
                                target_details = , )
                            ], 
                        recent_cutover_jobs = [
                            openapi_client.models.cutover_job.CutoverJob(
                                create_time = '', 
                                end_time = '', 
                                name = '', 
                                progress = 56, 
                                progress_percent = 56, 
                                state = 'STATE_UNSPECIFIED', 
                                state_message = '', 
                                state_time = '', )
                            ], 
                        source_vm_id = '', 
                        state = 'STATE_UNSPECIFIED', 
                        state_time = '', 
                        target_defaults = , 
                        update_time = '', 
                        vmware_source_vm_details = openapi_client.models.vmware_source_vm_details.VmwareSourceVmDetails(
                            committed_storage_bytes = '', 
                            firmware = 'FIRMWARE_UNSPECIFIED', ), )
                    ],
                next_page_token = '',
                unreachable = [
                    ''
                    ]
            )
        else:
            return ListMigratingVmsResponse(
        )
        """

    def testListMigratingVmsResponse(self):
        """Test ListMigratingVmsResponse"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

# coding: utf-8

"""
    VM Migration API

    Use the Migrate to Virtual Machines API to programmatically migrate workloads. 

    The version of the OpenAPI document: v1alpha1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.target_vm_details import TargetVMDetails

class TestTargetVMDetails(unittest.TestCase):
    """TargetVMDetails unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> TargetVMDetails:
        """Test TargetVMDetails
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `TargetVMDetails`
        """
        model = TargetVMDetails()
        if include_optional:
            return TargetVMDetails(
                applied_license = openapi_client.models.applied_license.AppliedLicense(
                    os_license = '', 
                    type = 'TYPE_UNSPECIFIED', ),
                boot_option = 'BOOT_OPTION_UNSPECIFIED',
                compute_scheduling = openapi_client.models.compute_scheduling.ComputeScheduling(
                    automatic_restart = True, 
                    min_node_cpus = 56, 
                    node_affinities = [
                        openapi_client.models.scheduling_node_affinity.SchedulingNodeAffinity(
                            key = '', 
                            operator = 'OPERATOR_UNSPECIFIED', 
                            values = [
                                ''
                                ], )
                        ], 
                    on_host_maintenance = 'ON_HOST_MAINTENANCE_UNSPECIFIED', 
                    restart_type = 'RESTART_TYPE_UNSPECIFIED', ),
                disk_type = 'DISK_TYPE_UNSPECIFIED',
                external_ip = '',
                internal_ip = '',
                labels = {
                    'key' : ''
                    },
                license_type = 'DEFAULT',
                machine_type = '',
                machine_type_series = '',
                metadata = {
                    'key' : ''
                    },
                name = '',
                network = '',
                network_interfaces = [
                    openapi_client.models.network_interface.NetworkInterface(
                        external_ip = '', 
                        internal_ip = '', 
                        network = '', 
                        subnetwork = '', )
                    ],
                network_tags = [
                    ''
                    ],
                project = '',
                secure_boot = True,
                service_account = '',
                subnetwork = '',
                target_project = '',
                zone = ''
            )
        else:
            return TargetVMDetails(
        )
        """

    def testTargetVMDetails(self):
        """Test TargetVMDetails"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

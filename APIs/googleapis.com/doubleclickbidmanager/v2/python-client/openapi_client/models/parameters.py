# coding: utf-8

"""
    DoubleClick Bid Manager API

    DoubleClick Bid Manager API allows users to manage and create campaigns and reports.

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.filter_pair import FilterPair
from openapi_client.models.options import Options
from typing import Optional, Set
from typing_extensions import Self

class Parameters(BaseModel):
    """
    Parameters of a query or report.
    """ # noqa: E501
    filters: Optional[List[FilterPair]] = Field(default=None, description="Filters used to match traffic data in your report.")
    group_bys: Optional[List[StrictStr]] = Field(default=None, description="Data is grouped by the filters listed in this field.", alias="groupBys")
    metrics: Optional[List[StrictStr]] = Field(default=None, description="Metrics to include as columns in your report.")
    options: Optional[Options] = None
    type: Optional[StrictStr] = Field(default=None, description="The type of the report. The type of the report will dictate what dimesions, filters, and metrics can be used.")
    __properties: ClassVar[List[str]] = ["filters", "groupBys", "metrics", "options", "type"]

    @field_validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['REPORT_TYPE_UNSPECIFIED', 'STANDARD', 'INVENTORY_AVAILABILITY', 'AUDIENCE_COMPOSITION', 'FLOODLIGHT', 'YOUTUBE', 'GRP', 'YOUTUBE_PROGRAMMATIC_GUARANTEED', 'REACH', 'UNIQUE_REACH_AUDIENCE', 'FULL_PATH', 'PATH_ATTRIBUTION']):
            raise ValueError("must be one of enum values ('REPORT_TYPE_UNSPECIFIED', 'STANDARD', 'INVENTORY_AVAILABILITY', 'AUDIENCE_COMPOSITION', 'FLOODLIGHT', 'YOUTUBE', 'GRP', 'YOUTUBE_PROGRAMMATIC_GUARANTEED', 'REACH', 'UNIQUE_REACH_AUDIENCE', 'FULL_PATH', 'PATH_ATTRIBUTION')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Parameters from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in filters (list)
        _items = []
        if self.filters:
            for _item_filters in self.filters:
                if _item_filters:
                    _items.append(_item_filters.to_dict())
            _dict['filters'] = _items
        # override the default output from pydantic by calling `to_dict()` of options
        if self.options:
            _dict['options'] = self.options.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Parameters from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "filters": [FilterPair.from_dict(_item) for _item in obj["filters"]] if obj.get("filters") is not None else None,
            "groupBys": obj.get("groupBys"),
            "metrics": obj.get("metrics"),
            "options": Options.from_dict(obj["options"]) if obj.get("options") is not None else None,
            "type": obj.get("type")
        })
        return _obj



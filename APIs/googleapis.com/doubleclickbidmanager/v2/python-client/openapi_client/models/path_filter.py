# coding: utf-8

"""
    DoubleClick Bid Manager API

    DoubleClick Bid Manager API allows users to manage and create campaigns and reports.

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.event_filter import EventFilter
from typing import Optional, Set
from typing_extensions import Self

class PathFilter(BaseModel):
    """
    Path filters specify which paths to include in a report. A path is the result of combining DV360 events based on User ID to create a workflow of users' actions. When a path filter is set, the resulting report will only include paths that match the specified event at the specified position. All other paths will be excluded.
    """ # noqa: E501
    event_filters: Optional[List[EventFilter]] = Field(default=None, description="Filter on an event to be applied to some part of the path.", alias="eventFilters")
    path_match_position: Optional[StrictStr] = Field(default=None, description="The position of the path the filter should match to (first, last, or any event in path).", alias="pathMatchPosition")
    __properties: ClassVar[List[str]] = ["eventFilters", "pathMatchPosition"]

    @field_validator('path_match_position')
    def path_match_position_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['PATH_MATCH_POSITION_UNSPECIFIED', 'ANY', 'FIRST', 'LAST']):
            raise ValueError("must be one of enum values ('PATH_MATCH_POSITION_UNSPECIFIED', 'ANY', 'FIRST', 'LAST')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PathFilter from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in event_filters (list)
        _items = []
        if self.event_filters:
            for _item_event_filters in self.event_filters:
                if _item_event_filters:
                    _items.append(_item_event_filters.to_dict())
            _dict['eventFilters'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PathFilter from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "eventFilters": [EventFilter.from_dict(_item) for _item in obj["eventFilters"]] if obj.get("eventFilters") is not None else None,
            "pathMatchPosition": obj.get("pathMatchPosition")
        })
        return _obj



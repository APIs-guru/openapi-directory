# coding: utf-8

"""
    DoubleClick Bid Manager API

    DoubleClick Bid Manager API allows users to manage and create campaigns and reports.

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.query import Query

class TestQuery(unittest.TestCase):
    """Query unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> Query:
        """Test Query
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `Query`
        """
        model = Query()
        if include_optional:
            return Query(
                metadata = openapi_client.models.query_metadata.QueryMetadata(
                    data_range = openapi_client.models.data_range.DataRange(
                        custom_end_date = openapi_client.models.date.Date(
                            day = 56, 
                            month = 56, 
                            year = 56, ), 
                        custom_start_date = openapi_client.models.date.Date(
                            day = 56, 
                            month = 56, 
                            year = 56, ), 
                        range = 'RANGE_UNSPECIFIED', ), 
                    format = 'FORMAT_UNSPECIFIED', 
                    send_notification = True, 
                    share_email_address = [
                        ''
                        ], 
                    title = '', ),
                params = openapi_client.models.parameters.Parameters(
                    filters = [
                        openapi_client.models.filter_pair.FilterPair(
                            type = '', 
                            value = '', )
                        ], 
                    group_bys = [
                        ''
                        ], 
                    metrics = [
                        ''
                        ], 
                    options = openapi_client.models.options.Options(
                        include_only_targeted_user_lists = True, 
                        path_query_options = openapi_client.models.path_query_options.PathQueryOptions(
                            channel_grouping = openapi_client.models.channel_grouping.ChannelGrouping(
                                fallback_name = '', 
                                name = '', 
                                rules = [
                                    openapi_client.models.rule.Rule(
                                        disjunctive_match_statements = [
                                            openapi_client.models.disjunctive_match_statement.DisjunctiveMatchStatement(
                                                event_filters = [
                                                    openapi_client.models.event_filter.EventFilter(
                                                        dimension_filter = openapi_client.models.path_query_options_filter.PathQueryOptionsFilter(
                                                            filter = '', 
                                                            match = 'UNKNOWN', 
                                                            values = [
                                                                ''
                                                                ], ), )
                                                    ], )
                                            ], 
                                        name = '', )
                                    ], ), 
                            path_filters = [
                                openapi_client.models.path_filter.PathFilter(
                                    path_match_position = 'PATH_MATCH_POSITION_UNSPECIFIED', )
                                ], ), ), 
                    type = 'REPORT_TYPE_UNSPECIFIED', ),
                query_id = '',
                schedule = openapi_client.models.query_schedule.QuerySchedule(
                    end_date = openapi_client.models.date.Date(
                        day = 56, 
                        month = 56, 
                        year = 56, ), 
                    frequency = 'FREQUENCY_UNSPECIFIED', 
                    next_run_timezone_code = '', 
                    start_date = openapi_client.models.date.Date(
                        day = 56, 
                        month = 56, 
                        year = 56, ), )
            )
        else:
            return Query(
        )
        """

    def testQuery(self):
        """Test Query"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

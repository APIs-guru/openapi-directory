# coding: utf-8

"""
    DoubleClick Bid Manager API

    DoubleClick Bid Manager API allows users to manage and create campaigns and reports.

    The version of the OpenAPI document: v1.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.parameters import Parameters
from openapi_client.models.query_metadata import QueryMetadata
from openapi_client.models.query_schedule import QuerySchedule
from typing import Optional, Set
from typing_extensions import Self

class Query(BaseModel):
    """
    Represents a query.
    """ # noqa: E501
    kind: Optional[StrictStr] = Field(default=None, description="Identifies what kind of resource this is. Value: the fixed string \"doubleclickbidmanager#query\".")
    metadata: Optional[QueryMetadata] = None
    params: Optional[Parameters] = None
    query_id: Optional[StrictStr] = Field(default=None, description="Query ID.", alias="queryId")
    report_data_end_time_ms: Optional[StrictStr] = Field(default=None, description="The ending time for the data that is shown in the report. Note, reportDataEndTimeMs is required if metadata.dataRange is CUSTOM_DATES and ignored otherwise.", alias="reportDataEndTimeMs")
    report_data_start_time_ms: Optional[StrictStr] = Field(default=None, description="The starting time for the data that is shown in the report. Note, reportDataStartTimeMs is required if metadata.dataRange is CUSTOM_DATES and ignored otherwise.", alias="reportDataStartTimeMs")
    schedule: Optional[QuerySchedule] = None
    timezone_code: Optional[StrictStr] = Field(default=None, description="Canonical timezone code for report data time. Defaults to America/New_York.", alias="timezoneCode")
    __properties: ClassVar[List[str]] = ["kind", "metadata", "params", "queryId", "reportDataEndTimeMs", "reportDataStartTimeMs", "schedule", "timezoneCode"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Query from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of metadata
        if self.metadata:
            _dict['metadata'] = self.metadata.to_dict()
        # override the default output from pydantic by calling `to_dict()` of params
        if self.params:
            _dict['params'] = self.params.to_dict()
        # override the default output from pydantic by calling `to_dict()` of schedule
        if self.schedule:
            _dict['schedule'] = self.schedule.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Query from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "kind": obj.get("kind"),
            "metadata": QueryMetadata.from_dict(obj["metadata"]) if obj.get("metadata") is not None else None,
            "params": Parameters.from_dict(obj["params"]) if obj.get("params") is not None else None,
            "queryId": obj.get("queryId"),
            "reportDataEndTimeMs": obj.get("reportDataEndTimeMs"),
            "reportDataStartTimeMs": obj.get("reportDataStartTimeMs"),
            "schedule": QuerySchedule.from_dict(obj["schedule"]) if obj.get("schedule") is not None else None,
            "timezoneCode": obj.get("timezoneCode")
        })
        return _obj



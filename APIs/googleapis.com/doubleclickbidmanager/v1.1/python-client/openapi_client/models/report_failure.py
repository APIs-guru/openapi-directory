# coding: utf-8

"""
    DoubleClick Bid Manager API

    DoubleClick Bid Manager API allows users to manage and create campaigns and reports.

    The version of the OpenAPI document: v1.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class ReportFailure(BaseModel):
    """
    An explanation of a report failure.
    """ # noqa: E501
    error_code: Optional[StrictStr] = Field(default=None, description="Error code that shows why the report was not created.", alias="errorCode")
    __properties: ClassVar[List[str]] = ["errorCode"]

    @field_validator('error_code')
    def error_code_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['AUTHENTICATION_ERROR', 'UNAUTHORIZED_API_ACCESS', 'SERVER_ERROR', 'VALIDATION_ERROR', 'REPORTING_FATAL_ERROR', 'REPORTING_TRANSIENT_ERROR', 'REPORTING_IMCOMPATIBLE_METRICS', 'REPORTING_ILLEGAL_FILENAME', 'REPORTING_QUERY_NOT_FOUND', 'REPORTING_BUCKET_NOT_FOUND', 'REPORTING_CREATE_BUCKET_FAILED', 'REPORTING_DELETE_BUCKET_FAILED', 'REPORTING_UPDATE_BUCKET_PERMISSION_FAILED', 'REPORTING_WRITE_BUCKET_OBJECT_FAILED', 'DEPRECATED_REPORTING_INVALID_QUERY', 'REPORTING_INVALID_QUERY_TOO_MANY_UNFILTERED_LARGE_GROUP_BYS', 'REPORTING_INVALID_QUERY_TITLE_MISSING', 'REPORTING_INVALID_QUERY_MISSING_PARTNER_AND_ADVERTISER_FILTERS']):
            raise ValueError("must be one of enum values ('AUTHENTICATION_ERROR', 'UNAUTHORIZED_API_ACCESS', 'SERVER_ERROR', 'VALIDATION_ERROR', 'REPORTING_FATAL_ERROR', 'REPORTING_TRANSIENT_ERROR', 'REPORTING_IMCOMPATIBLE_METRICS', 'REPORTING_ILLEGAL_FILENAME', 'REPORTING_QUERY_NOT_FOUND', 'REPORTING_BUCKET_NOT_FOUND', 'REPORTING_CREATE_BUCKET_FAILED', 'REPORTING_DELETE_BUCKET_FAILED', 'REPORTING_UPDATE_BUCKET_PERMISSION_FAILED', 'REPORTING_WRITE_BUCKET_OBJECT_FAILED', 'DEPRECATED_REPORTING_INVALID_QUERY', 'REPORTING_INVALID_QUERY_TOO_MANY_UNFILTERED_LARGE_GROUP_BYS', 'REPORTING_INVALID_QUERY_TITLE_MISSING', 'REPORTING_INVALID_QUERY_MISSING_PARTNER_AND_ADVERTISER_FILTERS')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ReportFailure from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ReportFailure from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "errorCode": obj.get("errorCode")
        })
        return _obj



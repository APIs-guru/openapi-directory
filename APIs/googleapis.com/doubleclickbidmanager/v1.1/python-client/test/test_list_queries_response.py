# coding: utf-8

"""
    DoubleClick Bid Manager API

    DoubleClick Bid Manager API allows users to manage and create campaigns and reports.

    The version of the OpenAPI document: v1.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.list_queries_response import ListQueriesResponse

class TestListQueriesResponse(unittest.TestCase):
    """ListQueriesResponse unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> ListQueriesResponse:
        """Test ListQueriesResponse
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `ListQueriesResponse`
        """
        model = ListQueriesResponse()
        if include_optional:
            return ListQueriesResponse(
                kind = '',
                next_page_token = '',
                queries = [
                    openapi_client.models.query.Query(
                        kind = '', 
                        metadata = openapi_client.models.query_metadata.QueryMetadata(
                            data_range = 'CUSTOM_DATES', 
                            format = 'CSV', 
                            google_cloud_storage_path_for_latest_report = '', 
                            google_drive_path_for_latest_report = '', 
                            latest_report_run_time_ms = '', 
                            locale = '', 
                            report_count = 56, 
                            running = True, 
                            send_notification = True, 
                            share_email_address = [
                                ''
                                ], 
                            title = '', ), 
                        params = openapi_client.models.parameters.Parameters(
                            filters = [
                                openapi_client.models.filter_pair.FilterPair(
                                    type = 'FILTER_UNKNOWN', 
                                    value = '', )
                                ], 
                            group_bys = [
                                'FILTER_UNKNOWN'
                                ], 
                            include_invite_data = True, 
                            metrics = [
                                'METRIC_UNKNOWN'
                                ], 
                            options = openapi_client.models.options.Options(
                                include_only_targeted_user_lists = True, 
                                path_query_options = openapi_client.models.path_query_options.PathQueryOptions(
                                    channel_grouping = openapi_client.models.channel_grouping.ChannelGrouping(
                                        fallback_name = '', 
                                        name = '', 
                                        rules = [
                                            openapi_client.models.rule.Rule(
                                                disjunctive_match_statements = [
                                                    openapi_client.models.disjunctive_match_statement.DisjunctiveMatchStatement(
                                                        event_filters = [
                                                            openapi_client.models.event_filter.EventFilter(
                                                                dimension_filter = openapi_client.models.path_query_options_filter.PathQueryOptionsFilter(
                                                                    filter = 'FILTER_UNKNOWN', 
                                                                    match = 'UNKNOWN', 
                                                                    values = [
                                                                        ''
                                                                        ], ), )
                                                            ], )
                                                    ], 
                                                name = '', )
                                            ], ), 
                                    path_filters = [
                                        openapi_client.models.path_filter.PathFilter(
                                            path_match_position = 'ANY', )
                                        ], ), ), 
                            type = 'TYPE_GENERAL', ), 
                        query_id = '', 
                        report_data_end_time_ms = '', 
                        report_data_start_time_ms = '', 
                        schedule = openapi_client.models.query_schedule.QuerySchedule(
                            end_time_ms = '', 
                            frequency = 'ONE_TIME', 
                            next_run_minute_of_day = 56, 
                            next_run_timezone_code = '', 
                            start_time_ms = '', ), 
                        timezone_code = '', )
                    ]
            )
        else:
            return ListQueriesResponse(
        )
        """

    def testListQueriesResponse(self):
        """Test ListQueriesResponse"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

# coding: utf-8

"""
    DoubleClick Bid Manager API

    DoubleClick Bid Manager API allows users to manage and create campaigns and reports.

    The version of the OpenAPI document: v1.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.report import Report

class TestReport(unittest.TestCase):
    """Report unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> Report:
        """Test Report
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `Report`
        """
        model = Report()
        if include_optional:
            return Report(
                key = openapi_client.models.report_key.ReportKey(
                    query_id = '', 
                    report_id = '', ),
                metadata = openapi_client.models.report_metadata.ReportMetadata(
                    google_cloud_storage_path = '', 
                    report_data_end_time_ms = '', 
                    report_data_start_time_ms = '', 
                    status = openapi_client.models.report_status.ReportStatus(
                        failure = openapi_client.models.report_failure.ReportFailure(
                            error_code = 'AUTHENTICATION_ERROR', ), 
                        finish_time_ms = '', 
                        format = 'CSV', 
                        state = 'RUNNING', ), ),
                params = openapi_client.models.parameters.Parameters(
                    filters = [
                        openapi_client.models.filter_pair.FilterPair(
                            type = 'FILTER_UNKNOWN', 
                            value = '', )
                        ], 
                    group_bys = [
                        'FILTER_UNKNOWN'
                        ], 
                    include_invite_data = True, 
                    metrics = [
                        'METRIC_UNKNOWN'
                        ], 
                    options = openapi_client.models.options.Options(
                        include_only_targeted_user_lists = True, 
                        path_query_options = openapi_client.models.path_query_options.PathQueryOptions(
                            channel_grouping = openapi_client.models.channel_grouping.ChannelGrouping(
                                fallback_name = '', 
                                name = '', 
                                rules = [
                                    openapi_client.models.rule.Rule(
                                        disjunctive_match_statements = [
                                            openapi_client.models.disjunctive_match_statement.DisjunctiveMatchStatement(
                                                event_filters = [
                                                    openapi_client.models.event_filter.EventFilter(
                                                        dimension_filter = openapi_client.models.path_query_options_filter.PathQueryOptionsFilter(
                                                            filter = 'FILTER_UNKNOWN', 
                                                            match = 'UNKNOWN', 
                                                            values = [
                                                                ''
                                                                ], ), )
                                                    ], )
                                            ], 
                                        name = '', )
                                    ], ), 
                            path_filters = [
                                openapi_client.models.path_filter.PathFilter(
                                    path_match_position = 'ANY', )
                                ], ), ), 
                    type = 'TYPE_GENERAL', )
            )
        else:
            return Report(
        )
        """

    def testReport(self):
        """Test Report"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

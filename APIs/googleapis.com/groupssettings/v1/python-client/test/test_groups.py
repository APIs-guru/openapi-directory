# coding: utf-8

"""
    Groups Settings API

    Manages permission levels and related settings of a group.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.groups import Groups

class TestGroups(unittest.TestCase):
    """Groups unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> Groups:
        """Test Groups
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `Groups`
        """
        model = Groups()
        if include_optional:
            return Groups(
                allow_external_members = '',
                allow_google_communication = '',
                allow_web_posting = '',
                archive_only = '',
                custom_footer_text = '',
                custom_reply_to = '',
                custom_roles_enabled_for_settings_to_be_merged = '',
                default_message_deny_notification_text = '',
                default_sender = '',
                description = '',
                email = '',
                enable_collaborative_inbox = '',
                favorite_replies_on_top = '',
                include_custom_footer = '',
                include_in_global_address_list = '',
                is_archived = '',
                kind = 'groupsSettings#groups',
                max_message_bytes = 56,
                members_can_post_as_the_group = '',
                message_display_font = '',
                message_moderation_level = '',
                name = '',
                primary_language = '',
                reply_to = '',
                send_message_deny_notification = '',
                show_in_group_directory = '',
                spam_moderation_level = '',
                who_can_add = '',
                who_can_add_references = '',
                who_can_approve_members = '',
                who_can_approve_messages = '',
                who_can_assign_topics = '',
                who_can_assist_content = '',
                who_can_ban_users = '',
                who_can_contact_owner = '',
                who_can_delete_any_post = '',
                who_can_delete_topics = '',
                who_can_discover_group = '',
                who_can_enter_free_form_tags = '',
                who_can_hide_abuse = '',
                who_can_invite = '',
                who_can_join = '',
                who_can_leave_group = '',
                who_can_lock_topics = '',
                who_can_make_topics_sticky = '',
                who_can_mark_duplicate = '',
                who_can_mark_favorite_reply_on_any_topic = '',
                who_can_mark_favorite_reply_on_own_topic = '',
                who_can_mark_no_response_needed = '',
                who_can_moderate_content = '',
                who_can_moderate_members = '',
                who_can_modify_members = '',
                who_can_modify_tags_and_categories = '',
                who_can_move_topics_in = '',
                who_can_move_topics_out = '',
                who_can_post_announcements = '',
                who_can_post_message = '',
                who_can_take_topics = '',
                who_can_unassign_topic = '',
                who_can_unmark_favorite_reply_on_any_topic = '',
                who_can_view_group = '',
                who_can_view_membership = ''
            )
        else:
            return Groups(
        )
        """

    def testGroups(self):
        """Test Groups"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

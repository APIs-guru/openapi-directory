# coding: utf-8

"""
    Admin SDK API

    Admin SDK lets administrators of enterprise domains to view and manage resources like user, groups etc. It also provides audit and usage reports of domain.

    The version of the OpenAPI document: reports_v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.activity_actor import ActivityActor
from openapi_client.models.activity_events_inner import ActivityEventsInner
from openapi_client.models.activity_id import ActivityId
from typing import Optional, Set
from typing_extensions import Self

class Activity(BaseModel):
    """
    JSON template for the activity resource.
    """ # noqa: E501
    actor: Optional[ActivityActor] = None
    etag: Optional[StrictStr] = Field(default=None, description="ETag of the entry.")
    events: Optional[List[ActivityEventsInner]] = Field(default=None, description="Activity events in the report.")
    id: Optional[ActivityId] = None
    ip_address: Optional[StrictStr] = Field(default=None, description="IP address of the user doing the action. This is the Internet Protocol (IP) address of the user when logging into Google Workspace, which may or may not reflect the user's physical location. For example, the IP address can be the user's proxy server's address or a virtual private network (VPN) address. The API supports IPv4 and IPv6.", alias="ipAddress")
    kind: Optional[StrictStr] = Field(default='admin#reports#activity', description="The type of API resource. For an activity report, the value is `audit#activity`.")
    owner_domain: Optional[StrictStr] = Field(default=None, description="This is the domain that is affected by the report's event. For example domain of Admin console or the Drive application's document owner.", alias="ownerDomain")
    __properties: ClassVar[List[str]] = ["actor", "etag", "events", "id", "ipAddress", "kind", "ownerDomain"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Activity from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of actor
        if self.actor:
            _dict['actor'] = self.actor.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in events (list)
        _items = []
        if self.events:
            for _item_events in self.events:
                if _item_events:
                    _items.append(_item_events.to_dict())
            _dict['events'] = _items
        # override the default output from pydantic by calling `to_dict()` of id
        if self.id:
            _dict['id'] = self.id.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Activity from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "actor": ActivityActor.from_dict(obj["actor"]) if obj.get("actor") is not None else None,
            "etag": obj.get("etag"),
            "events": [ActivityEventsInner.from_dict(_item) for _item in obj["events"]] if obj.get("events") is not None else None,
            "id": ActivityId.from_dict(obj["id"]) if obj.get("id") is not None else None,
            "ipAddress": obj.get("ipAddress"),
            "kind": obj.get("kind") if obj.get("kind") is not None else 'admin#reports#activity',
            "ownerDomain": obj.get("ownerDomain")
        })
        return _obj



# coding: utf-8

"""
    Admin SDK API

    Admin SDK lets administrators of enterprise domains to view and manage resources like user, groups etc. It also provides audit and usage reports of domain.

    The version of the OpenAPI document: reports_v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.usage_report_entity import UsageReportEntity
from openapi_client.models.usage_report_parameters_inner import UsageReportParametersInner
from typing import Optional, Set
from typing_extensions import Self

class UsageReport(BaseModel):
    """
    JSON template for a usage report.
    """ # noqa: E501
    var_date: Optional[StrictStr] = Field(default=None, description="Output only. The date of the report request.", alias="date")
    entity: Optional[UsageReportEntity] = None
    etag: Optional[StrictStr] = Field(default=None, description="ETag of the resource.")
    kind: Optional[StrictStr] = Field(default='admin#reports#usageReport', description="The type of API resource. For a usage report, the value is `admin#reports#usageReport`.")
    parameters: Optional[List[UsageReportParametersInner]] = Field(default=None, description="Output only. Parameter value pairs for various applications. For the Entity Usage Report parameters and values, see [the Entity Usage parameters reference](/admin-sdk/reports/v1/reference/usage-ref-appendix-a/entities).")
    __properties: ClassVar[List[str]] = ["date", "entity", "etag", "kind", "parameters"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of UsageReport from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "var_date",
            "parameters",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of entity
        if self.entity:
            _dict['entity'] = self.entity.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in parameters (list)
        _items = []
        if self.parameters:
            for _item_parameters in self.parameters:
                if _item_parameters:
                    _items.append(_item_parameters.to_dict())
            _dict['parameters'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of UsageReport from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "date": obj.get("date"),
            "entity": UsageReportEntity.from_dict(obj["entity"]) if obj.get("entity") is not None else None,
            "etag": obj.get("etag"),
            "kind": obj.get("kind") if obj.get("kind") is not None else 'admin#reports#usageReport',
            "parameters": [UsageReportParametersInner.from_dict(_item) for _item in obj["parameters"]] if obj.get("parameters") is not None else None
        })
        return _obj



# coding: utf-8

"""
    Admin SDK API

    Admin SDK lets administrators of enterprise domains to view and manage resources like user, groups etc. It also provides audit and usage reports of domain.

    The version of the OpenAPI document: datatransfer_v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.application_data_transfer import ApplicationDataTransfer
from typing import Optional, Set
from typing_extensions import Self

class DataTransfer(BaseModel):
    """
    A Transfer resource represents the transfer of the ownership of user data between users.
    """ # noqa: E501
    application_data_transfers: Optional[List[ApplicationDataTransfer]] = Field(default=None, description="The list of per-application data transfer resources. It contains details of the applications associated with this transfer resource, and also specifies the applications for which data transfer has to be done at the time of the transfer resource creation.", alias="applicationDataTransfers")
    etag: Optional[StrictStr] = Field(default=None, description="ETag of the resource.")
    id: Optional[StrictStr] = Field(default=None, description="Read-only. The transfer's ID.")
    kind: Optional[StrictStr] = Field(default='admin#datatransfer#DataTransfer', description="Identifies the resource as a DataTransfer request.")
    new_owner_user_id: Optional[StrictStr] = Field(default=None, description="ID of the user to whom the data is being transferred.", alias="newOwnerUserId")
    old_owner_user_id: Optional[StrictStr] = Field(default=None, description="ID of the user whose data is being transferred.", alias="oldOwnerUserId")
    overall_transfer_status_code: Optional[StrictStr] = Field(default=None, description="Read-only. Overall transfer status.", alias="overallTransferStatusCode")
    request_time: Optional[datetime] = Field(default=None, description="Read-only. The time at which the data transfer was requested.", alias="requestTime")
    __properties: ClassVar[List[str]] = ["applicationDataTransfers", "etag", "id", "kind", "newOwnerUserId", "oldOwnerUserId", "overallTransferStatusCode", "requestTime"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DataTransfer from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in application_data_transfers (list)
        _items = []
        if self.application_data_transfers:
            for _item_application_data_transfers in self.application_data_transfers:
                if _item_application_data_transfers:
                    _items.append(_item_application_data_transfers.to_dict())
            _dict['applicationDataTransfers'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DataTransfer from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "applicationDataTransfers": [ApplicationDataTransfer.from_dict(_item) for _item in obj["applicationDataTransfers"]] if obj.get("applicationDataTransfers") is not None else None,
            "etag": obj.get("etag"),
            "id": obj.get("id"),
            "kind": obj.get("kind") if obj.get("kind") is not None else 'admin#datatransfer#DataTransfer',
            "newOwnerUserId": obj.get("newOwnerUserId"),
            "oldOwnerUserId": obj.get("oldOwnerUserId"),
            "overallTransferStatusCode": obj.get("overallTransferStatusCode"),
            "requestTime": obj.get("requestTime")
        })
        return _obj



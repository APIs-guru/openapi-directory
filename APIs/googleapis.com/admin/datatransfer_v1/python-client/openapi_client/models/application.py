# coding: utf-8

"""
    Admin SDK API

    Admin SDK lets administrators of enterprise domains to view and manage resources like user, groups etc. It also provides audit and usage reports of domain.

    The version of the OpenAPI document: datatransfer_v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.application_transfer_param import ApplicationTransferParam
from typing import Optional, Set
from typing_extensions import Self

class Application(BaseModel):
    """
    Application resources represent applications installed on the domain that support transferring ownership of user data.
    """ # noqa: E501
    etag: Optional[StrictStr] = Field(default=None, description="Etag of the resource.")
    id: Optional[StrictStr] = Field(default=None, description="The application's ID. Retrievable by using the [`applications.list()`](/admin-sdk/data-transfer/reference/rest/v1/applications/list) method.")
    kind: Optional[StrictStr] = Field(default='admin#datatransfer#ApplicationResource', description="Identifies the resource as a DataTransfer Application Resource.")
    name: Optional[StrictStr] = Field(default=None, description="The application's name.")
    transfer_params: Optional[List[ApplicationTransferParam]] = Field(default=None, description="The list of all possible transfer parameters for this application. These parameters select which categories of the user's data to transfer.", alias="transferParams")
    __properties: ClassVar[List[str]] = ["etag", "id", "kind", "name", "transferParams"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Application from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in transfer_params (list)
        _items = []
        if self.transfer_params:
            for _item_transfer_params in self.transfer_params:
                if _item_transfer_params:
                    _items.append(_item_transfer_params.to_dict())
            _dict['transferParams'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Application from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "etag": obj.get("etag"),
            "id": obj.get("id"),
            "kind": obj.get("kind") if obj.get("kind") is not None else 'admin#datatransfer#ApplicationResource',
            "name": obj.get("name"),
            "transferParams": [ApplicationTransferParam.from_dict(_item) for _item in obj["transferParams"]] if obj.get("transferParams") is not None else None
        })
        return _obj



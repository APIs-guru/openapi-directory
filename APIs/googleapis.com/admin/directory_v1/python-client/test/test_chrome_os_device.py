# coding: utf-8

"""
    Admin SDK API

    Admin SDK lets administrators of enterprise domains to view and manage resources like user, groups etc. It also provides audit and usage reports of domain.

    The version of the OpenAPI document: directory_v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.chrome_os_device import ChromeOsDevice

class TestChromeOsDevice(unittest.TestCase):
    """ChromeOsDevice unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> ChromeOsDevice:
        """Test ChromeOsDevice
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `ChromeOsDevice`
        """
        model = ChromeOsDevice()
        if include_optional:
            return ChromeOsDevice(
                active_time_ranges = [
                    openapi_client.models.chrome_os_device_active_time_ranges_inner.ChromeOsDevice_activeTimeRanges_inner(
                        active_time = 56, 
                        date = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(), )
                    ],
                annotated_asset_id = '',
                annotated_location = '',
                annotated_user = '',
                auto_update_expiration = '',
                boot_mode = '',
                cpu_info = [
                    openapi_client.models.chrome_os_device_cpu_info_inner.ChromeOsDevice_cpuInfo_inner(
                        architecture = '', 
                        logical_cpus = [
                            openapi_client.models.chrome_os_device_cpu_info_inner_logical_cpus_inner.ChromeOsDevice_cpuInfo_inner_logicalCpus_inner(
                                c_states = [
                                    openapi_client.models.chrome_os_device_cpu_info_inner_logical_cpus_inner_c_states_inner.ChromeOsDevice_cpuInfo_inner_logicalCpus_inner_cStates_inner(
                                        display_name = '', 
                                        session_duration = '', )
                                    ], 
                                current_scaling_frequency_khz = 56, 
                                idle_duration = '', 
                                max_scaling_frequency_khz = 56, )
                            ], 
                        max_clock_speed_khz = 56, 
                        model = '', )
                    ],
                cpu_status_reports = [
                    openapi_client.models.chrome_os_device_cpu_status_reports_inner.ChromeOsDevice_cpuStatusReports_inner(
                        cpu_temperature_info = [
                            openapi_client.models.chrome_os_device_cpu_status_reports_inner_cpu_temperature_info_inner.ChromeOsDevice_cpuStatusReports_inner_cpuTemperatureInfo_inner(
                                label = '', 
                                temperature = 56, )
                            ], 
                        cpu_utilization_percentage_info = [
                            56
                            ], 
                        report_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), )
                    ],
                deprovision_reason = 'DEPROVISION_REASON_UNSPECIFIED',
                device_files = [
                    openapi_client.models.chrome_os_device_device_files_inner.ChromeOsDevice_deviceFiles_inner(
                        create_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        download_url = '', 
                        name = '', 
                        type = '', )
                    ],
                device_id = '',
                device_license_type = 'deviceLicenseTypeUnspecified',
                disk_volume_reports = [
                    openapi_client.models.chrome_os_device_disk_volume_reports_inner.ChromeOsDevice_diskVolumeReports_inner(
                        volume_info = [
                            openapi_client.models.chrome_os_device_disk_volume_reports_inner_volume_info_inner.ChromeOsDevice_diskVolumeReports_inner_volumeInfo_inner(
                                storage_free = '', 
                                storage_total = '', 
                                volume_id = '', )
                            ], )
                    ],
                dock_mac_address = '',
                etag = '',
                ethernet_mac_address = '',
                ethernet_mac_address0 = '',
                firmware_version = '',
                first_enrollment_time = '',
                kind = 'admin#directory#chromeosdevice',
                last_deprovision_timestamp = '',
                last_enrollment_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                last_known_network = [
                    openapi_client.models.chrome_os_device_last_known_network_inner.ChromeOsDevice_lastKnownNetwork_inner(
                        ip_address = '', 
                        wan_ip_address = '', )
                    ],
                last_sync = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                mac_address = '',
                manufacture_date = '',
                meid = '',
                model = '',
                notes = '',
                order_number = '',
                org_unit_id = '',
                org_unit_path = '',
                os_update_status = openapi_client.models.os_update_status.OsUpdateStatus(
                    reboot_time = '', 
                    state = 'updateStateUnspecified', 
                    target_kiosk_app_version = '', 
                    target_os_version = '', 
                    update_check_time = '', 
                    update_time = '', ),
                os_version = '',
                platform_version = '',
                recent_users = [
                    openapi_client.models.chrome_os_device_recent_users_inner.ChromeOsDevice_recentUsers_inner(
                        email = '', 
                        type = '', )
                    ],
                screenshot_files = [
                    openapi_client.models.chrome_os_device_device_files_inner.ChromeOsDevice_deviceFiles_inner(
                        create_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        download_url = '', 
                        name = '', 
                        type = '', )
                    ],
                serial_number = '',
                status = '',
                support_end_date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                system_ram_free_reports = [
                    openapi_client.models.chrome_os_device_system_ram_free_reports_inner.ChromeOsDevice_systemRamFreeReports_inner(
                        report_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        system_ram_free_info = [
                            ''
                            ], )
                    ],
                system_ram_total = '',
                tpm_version_info = openapi_client.models.chrome_os_device_tpm_version_info.ChromeOsDevice_tpmVersionInfo(
                    family = '', 
                    firmware_version = '', 
                    manufacturer = '', 
                    spec_level = '', 
                    tpm_model = '', 
                    vendor_specific = '', ),
                will_auto_renew = True
            )
        else:
            return ChromeOsDevice(
        )
        """

    def testChromeOsDevice(self):
        """Test ChromeOsDevice"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

# coding: utf-8

"""
    Admin SDK API

    Admin SDK lets administrators of enterprise domains to view and manage resources like user, groups etc. It also provides audit and usage reports of domain.

    The version of the OpenAPI document: directory_v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictInt
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.chrome_os_device_cpu_status_reports_inner_cpu_temperature_info_inner import ChromeOsDeviceCpuStatusReportsInnerCpuTemperatureInfoInner
from typing import Optional, Set
from typing_extensions import Self

class ChromeOsDeviceCpuStatusReportsInner(BaseModel):
    """
    ChromeOsDeviceCpuStatusReportsInner
    """ # noqa: E501
    cpu_temperature_info: Optional[List[ChromeOsDeviceCpuStatusReportsInnerCpuTemperatureInfoInner]] = Field(default=None, description="A list of CPU temperature samples.", alias="cpuTemperatureInfo")
    cpu_utilization_percentage_info: Optional[List[StrictInt]] = Field(default=None, alias="cpuUtilizationPercentageInfo")
    report_time: Optional[datetime] = Field(default=None, description="Date and time the report was received.", alias="reportTime")
    __properties: ClassVar[List[str]] = ["cpuTemperatureInfo", "cpuUtilizationPercentageInfo", "reportTime"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ChromeOsDeviceCpuStatusReportsInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in cpu_temperature_info (list)
        _items = []
        if self.cpu_temperature_info:
            for _item_cpu_temperature_info in self.cpu_temperature_info:
                if _item_cpu_temperature_info:
                    _items.append(_item_cpu_temperature_info.to_dict())
            _dict['cpuTemperatureInfo'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ChromeOsDeviceCpuStatusReportsInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "cpuTemperatureInfo": [ChromeOsDeviceCpuStatusReportsInnerCpuTemperatureInfoInner.from_dict(_item) for _item in obj["cpuTemperatureInfo"]] if obj.get("cpuTemperatureInfo") is not None else None,
            "cpuUtilizationPercentageInfo": obj.get("cpuUtilizationPercentageInfo"),
            "reportTime": obj.get("reportTime")
        })
        return _obj



# coding: utf-8

"""
    Admin SDK API

    Admin SDK lets administrators of enterprise domains to view and manage resources like user, groups etc. It also provides audit and usage reports of domain.

    The version of the OpenAPI document: directory_v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class UserOrganization(BaseModel):
    """
    JSON template for an organization entry.
    """ # noqa: E501
    cost_center: Optional[StrictStr] = Field(default=None, description="The cost center of the users department.", alias="costCenter")
    custom_type: Optional[StrictStr] = Field(default=None, description="Custom type.", alias="customType")
    department: Optional[StrictStr] = Field(default=None, description="Department within the organization.")
    description: Optional[StrictStr] = Field(default=None, description="Description of the organization.")
    domain: Optional[StrictStr] = Field(default=None, description="The domain to which the organization belongs to.")
    full_time_equivalent: Optional[StrictInt] = Field(default=None, description="The full-time equivalent millipercent within the organization (100000 = 100%).", alias="fullTimeEquivalent")
    location: Optional[StrictStr] = Field(default=None, description="Location of the organization. This need not be fully qualified address.")
    name: Optional[StrictStr] = Field(default=None, description="Name of the organization")
    primary: Optional[StrictBool] = Field(default=None, description="If it user's primary organization.")
    symbol: Optional[StrictStr] = Field(default=None, description="Symbol of the organization.")
    title: Optional[StrictStr] = Field(default=None, description="Title (designation) of the user in the organization.")
    type: Optional[StrictStr] = Field(default=None, description="Each entry can have a type which indicates standard types of that entry. For example organization could be of school work etc. In addition to the standard type an entry can have a custom type and can give it any name. Such types should have the CUSTOM value as type and also have a CustomType value.")
    __properties: ClassVar[List[str]] = ["costCenter", "customType", "department", "description", "domain", "fullTimeEquivalent", "location", "name", "primary", "symbol", "title", "type"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of UserOrganization from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of UserOrganization from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "costCenter": obj.get("costCenter"),
            "customType": obj.get("customType"),
            "department": obj.get("department"),
            "description": obj.get("description"),
            "domain": obj.get("domain"),
            "fullTimeEquivalent": obj.get("fullTimeEquivalent"),
            "location": obj.get("location"),
            "name": obj.get("name"),
            "primary": obj.get("primary"),
            "symbol": obj.get("symbol"),
            "title": obj.get("title"),
            "type": obj.get("type")
        })
        return _obj



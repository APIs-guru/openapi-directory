# coding: utf-8

"""
    Admin SDK API

    Admin SDK lets administrators of enterprise domains to view and manage resources like user, groups etc. It also provides audit and usage reports of domain.

    The version of the OpenAPI document: directory_v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.chrome_os_device_active_time_ranges_inner import ChromeOsDeviceActiveTimeRangesInner
from openapi_client.models.chrome_os_device_cpu_info_inner import ChromeOsDeviceCpuInfoInner
from openapi_client.models.chrome_os_device_cpu_status_reports_inner import ChromeOsDeviceCpuStatusReportsInner
from openapi_client.models.chrome_os_device_device_files_inner import ChromeOsDeviceDeviceFilesInner
from openapi_client.models.chrome_os_device_disk_volume_reports_inner import ChromeOsDeviceDiskVolumeReportsInner
from openapi_client.models.chrome_os_device_last_known_network_inner import ChromeOsDeviceLastKnownNetworkInner
from openapi_client.models.chrome_os_device_recent_users_inner import ChromeOsDeviceRecentUsersInner
from openapi_client.models.chrome_os_device_system_ram_free_reports_inner import ChromeOsDeviceSystemRamFreeReportsInner
from openapi_client.models.chrome_os_device_tpm_version_info import ChromeOsDeviceTpmVersionInfo
from openapi_client.models.os_update_status import OsUpdateStatus
from typing import Optional, Set
from typing_extensions import Self

class ChromeOsDevice(BaseModel):
    """
    Google Chrome devices run on the [Chrome OS](https://support.google.com/chromeos). For more information about common API tasks, see the [Developer's Guide](/admin-sdk/directory/v1/guides/manage-chrome-devices).
    """ # noqa: E501
    active_time_ranges: Optional[List[ChromeOsDeviceActiveTimeRangesInner]] = Field(default=None, description="A list of active time ranges (Read-only).", alias="activeTimeRanges")
    annotated_asset_id: Optional[StrictStr] = Field(default=None, description="The asset identifier as noted by an administrator or specified during enrollment.", alias="annotatedAssetId")
    annotated_location: Optional[StrictStr] = Field(default=None, description="The address or location of the device as noted by the administrator. Maximum length is `200` characters. Empty values are allowed.", alias="annotatedLocation")
    annotated_user: Optional[StrictStr] = Field(default=None, description="The user of the device as noted by the administrator. Maximum length is 100 characters. Empty values are allowed.", alias="annotatedUser")
    auto_update_expiration: Optional[StrictStr] = Field(default=None, description="(Read-only) The timestamp after which the device will stop receiving Chrome updates or support", alias="autoUpdateExpiration")
    boot_mode: Optional[StrictStr] = Field(default=None, description="The boot mode for the device. The possible values are: * `Verified`: The device is running a valid version of the Chrome OS. * `Dev`: The devices's developer hardware switch is enabled. When booted, the device has a command line shell. For an example of a developer switch, see the [Chromebook developer information](https://www.chromium.org/chromium-os/developer-information-for-chrome-os-devices/samsung-series-5-chromebook#TOC-Developer-switch).", alias="bootMode")
    cpu_info: Optional[List[ChromeOsDeviceCpuInfoInner]] = Field(default=None, description="Information regarding CPU specs in the device.", alias="cpuInfo")
    cpu_status_reports: Optional[List[ChromeOsDeviceCpuStatusReportsInner]] = Field(default=None, description="Reports of CPU utilization and temperature (Read-only)", alias="cpuStatusReports")
    deprovision_reason: Optional[StrictStr] = Field(default=None, description="(Read-only) Deprovision reason.", alias="deprovisionReason")
    device_files: Optional[List[ChromeOsDeviceDeviceFilesInner]] = Field(default=None, description="A list of device files to download (Read-only)", alias="deviceFiles")
    device_id: Optional[StrictStr] = Field(default=None, description="The unique ID of the Chrome device.", alias="deviceId")
    device_license_type: Optional[StrictStr] = Field(default=None, description="Output only. Device license type.", alias="deviceLicenseType")
    disk_volume_reports: Optional[List[ChromeOsDeviceDiskVolumeReportsInner]] = Field(default=None, description="Reports of disk space and other info about mounted/connected volumes.", alias="diskVolumeReports")
    dock_mac_address: Optional[StrictStr] = Field(default=None, description="(Read-only) Built-in MAC address for the docking station that the device connected to. Factory sets Media access control address (MAC address) assigned for use by a dock. It is reserved specifically for MAC pass through device policy. The format is twelve (12) hexadecimal digits without any delimiter (uppercase letters). This is only relevant for some devices.", alias="dockMacAddress")
    etag: Optional[StrictStr] = Field(default=None, description="ETag of the resource.")
    ethernet_mac_address: Optional[StrictStr] = Field(default=None, description="The device's MAC address on the ethernet network interface.", alias="ethernetMacAddress")
    ethernet_mac_address0: Optional[StrictStr] = Field(default=None, description="(Read-only) MAC address used by the Chromebookâ€™s internal ethernet port, and for onboard network (ethernet) interface. The format is twelve (12) hexadecimal digits without any delimiter (uppercase letters). This is only relevant for some devices.", alias="ethernetMacAddress0")
    firmware_version: Optional[StrictStr] = Field(default=None, description="The Chrome device's firmware version.", alias="firmwareVersion")
    first_enrollment_time: Optional[StrictStr] = Field(default=None, description="Date and time for the first time the device was enrolled.", alias="firstEnrollmentTime")
    kind: Optional[StrictStr] = Field(default='admin#directory#chromeosdevice', description="The type of resource. For the Chromeosdevices resource, the value is `admin#directory#chromeosdevice`.")
    last_deprovision_timestamp: Optional[StrictStr] = Field(default=None, description="(Read-only) Date and time for the last deprovision of the device.", alias="lastDeprovisionTimestamp")
    last_enrollment_time: Optional[datetime] = Field(default=None, description="Date and time the device was last enrolled (Read-only)", alias="lastEnrollmentTime")
    last_known_network: Optional[List[ChromeOsDeviceLastKnownNetworkInner]] = Field(default=None, description="Contains last known network (Read-only)", alias="lastKnownNetwork")
    last_sync: Optional[datetime] = Field(default=None, description="Date and time the device was last synchronized with the policy settings in the G Suite administrator control panel (Read-only)", alias="lastSync")
    mac_address: Optional[StrictStr] = Field(default=None, description="The device's wireless MAC address. If the device does not have this information, it is not included in the response.", alias="macAddress")
    manufacture_date: Optional[StrictStr] = Field(default=None, description="(Read-only) The date the device was manufactured in yyyy-mm-dd format.", alias="manufactureDate")
    meid: Optional[StrictStr] = Field(default=None, description="The Mobile Equipment Identifier (MEID) or the International Mobile Equipment Identity (IMEI) for the 3G mobile card in a mobile device. A MEID/IMEI is typically used when adding a device to a wireless carrier's post-pay service plan. If the device does not have this information, this property is not included in the response. For more information on how to export a MEID/IMEI list, see the [Developer's Guide](/admin-sdk/directory/v1/guides/manage-chrome-devices.html#export_meid).")
    model: Optional[StrictStr] = Field(default=None, description="The device's model information. If the device does not have this information, this property is not included in the response.")
    notes: Optional[StrictStr] = Field(default=None, description="Notes about this device added by the administrator. This property can be [searched](https://support.google.com/chrome/a/answer/1698333) with the [list](/admin-sdk/directory/v1/reference/chromeosdevices/list) method's `query` parameter. Maximum length is 500 characters. Empty values are allowed.")
    order_number: Optional[StrictStr] = Field(default=None, description="The device's order number. Only devices directly purchased from Google have an order number.", alias="orderNumber")
    org_unit_id: Optional[StrictStr] = Field(default=None, description="The unique ID of the organizational unit. orgUnitPath is the human readable version of orgUnitId. While orgUnitPath may change by renaming an organizational unit within the path, orgUnitId is unchangeable for one organizational unit. This property can be [updated](/admin-sdk/directory/v1/guides/manage-chrome-devices#move_chrome_devices_to_ou) using the API. For more information about how to create an organizational structure for your device, see the [administration help center](https://support.google.com/a/answer/182433).", alias="orgUnitId")
    org_unit_path: Optional[StrictStr] = Field(default=None, description="The full parent path with the organizational unit's name associated with the device. Path names are case insensitive. If the parent organizational unit is the top-level organization, it is represented as a forward slash, `/`. This property can be [updated](/admin-sdk/directory/v1/guides/manage-chrome-devices#move_chrome_devices_to_ou) using the API. For more information about how to create an organizational structure for your device, see the [administration help center](https://support.google.com/a/answer/182433).", alias="orgUnitPath")
    os_update_status: Optional[OsUpdateStatus] = Field(default=None, alias="osUpdateStatus")
    os_version: Optional[StrictStr] = Field(default=None, description="The Chrome device's operating system version.", alias="osVersion")
    platform_version: Optional[StrictStr] = Field(default=None, description="The Chrome device's platform version.", alias="platformVersion")
    recent_users: Optional[List[ChromeOsDeviceRecentUsersInner]] = Field(default=None, description="A list of recent device users, in descending order, by last login time.", alias="recentUsers")
    screenshot_files: Optional[List[ChromeOsDeviceDeviceFilesInner]] = Field(default=None, description="A list of screenshot files to download. Type is always \"SCREENSHOT_FILE\". (Read-only)", alias="screenshotFiles")
    serial_number: Optional[StrictStr] = Field(default=None, description="The Chrome device serial number entered when the device was enabled. This value is the same as the Admin console's *Serial Number* in the *Chrome OS Devices* tab.", alias="serialNumber")
    status: Optional[StrictStr] = Field(default=None, description="The status of the device.")
    support_end_date: Optional[datetime] = Field(default=None, description="Final date the device will be supported (Read-only)", alias="supportEndDate")
    system_ram_free_reports: Optional[List[ChromeOsDeviceSystemRamFreeReportsInner]] = Field(default=None, description="Reports of amounts of available RAM memory (Read-only)", alias="systemRamFreeReports")
    system_ram_total: Optional[StrictStr] = Field(default=None, description="Total RAM on the device [in bytes] (Read-only)", alias="systemRamTotal")
    tpm_version_info: Optional[ChromeOsDeviceTpmVersionInfo] = Field(default=None, alias="tpmVersionInfo")
    will_auto_renew: Optional[StrictBool] = Field(default=None, description="Determines if the device will auto renew its support after the support end date. This is a read-only property.", alias="willAutoRenew")
    __properties: ClassVar[List[str]] = ["activeTimeRanges", "annotatedAssetId", "annotatedLocation", "annotatedUser", "autoUpdateExpiration", "bootMode", "cpuInfo", "cpuStatusReports", "deprovisionReason", "deviceFiles", "deviceId", "deviceLicenseType", "diskVolumeReports", "dockMacAddress", "etag", "ethernetMacAddress", "ethernetMacAddress0", "firmwareVersion", "firstEnrollmentTime", "kind", "lastDeprovisionTimestamp", "lastEnrollmentTime", "lastKnownNetwork", "lastSync", "macAddress", "manufactureDate", "meid", "model", "notes", "orderNumber", "orgUnitId", "orgUnitPath", "osUpdateStatus", "osVersion", "platformVersion", "recentUsers", "screenshotFiles", "serialNumber", "status", "supportEndDate", "systemRamFreeReports", "systemRamTotal", "tpmVersionInfo", "willAutoRenew"]

    @field_validator('deprovision_reason')
    def deprovision_reason_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['DEPROVISION_REASON_UNSPECIFIED', 'DEPROVISION_REASON_SAME_MODEL_REPLACEMENT', 'DEPROVISION_REASON_UPGRADE', 'DEPROVISION_REASON_DOMAIN_MOVE', 'DEPROVISION_REASON_SERVICE_EXPIRATION', 'DEPROVISION_REASON_OTHER', 'DEPROVISION_REASON_DIFFERENT_MODEL_REPLACEMENT', 'DEPROVISION_REASON_RETIRING_DEVICE', 'DEPROVISION_REASON_UPGRADE_TRANSFER', 'DEPROVISION_REASON_NOT_REQUIRED', 'DEPROVISION_REASON_REPAIR_CENTER']):
            raise ValueError("must be one of enum values ('DEPROVISION_REASON_UNSPECIFIED', 'DEPROVISION_REASON_SAME_MODEL_REPLACEMENT', 'DEPROVISION_REASON_UPGRADE', 'DEPROVISION_REASON_DOMAIN_MOVE', 'DEPROVISION_REASON_SERVICE_EXPIRATION', 'DEPROVISION_REASON_OTHER', 'DEPROVISION_REASON_DIFFERENT_MODEL_REPLACEMENT', 'DEPROVISION_REASON_RETIRING_DEVICE', 'DEPROVISION_REASON_UPGRADE_TRANSFER', 'DEPROVISION_REASON_NOT_REQUIRED', 'DEPROVISION_REASON_REPAIR_CENTER')")
        return value

    @field_validator('device_license_type')
    def device_license_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['deviceLicenseTypeUnspecified', 'enterprise', 'enterpriseUpgrade', 'educationUpgrade', 'education', 'kioskUpgrade']):
            raise ValueError("must be one of enum values ('deviceLicenseTypeUnspecified', 'enterprise', 'enterpriseUpgrade', 'educationUpgrade', 'education', 'kioskUpgrade')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ChromeOsDevice from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "device_license_type",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in active_time_ranges (list)
        _items = []
        if self.active_time_ranges:
            for _item_active_time_ranges in self.active_time_ranges:
                if _item_active_time_ranges:
                    _items.append(_item_active_time_ranges.to_dict())
            _dict['activeTimeRanges'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in cpu_info (list)
        _items = []
        if self.cpu_info:
            for _item_cpu_info in self.cpu_info:
                if _item_cpu_info:
                    _items.append(_item_cpu_info.to_dict())
            _dict['cpuInfo'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in cpu_status_reports (list)
        _items = []
        if self.cpu_status_reports:
            for _item_cpu_status_reports in self.cpu_status_reports:
                if _item_cpu_status_reports:
                    _items.append(_item_cpu_status_reports.to_dict())
            _dict['cpuStatusReports'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in device_files (list)
        _items = []
        if self.device_files:
            for _item_device_files in self.device_files:
                if _item_device_files:
                    _items.append(_item_device_files.to_dict())
            _dict['deviceFiles'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in disk_volume_reports (list)
        _items = []
        if self.disk_volume_reports:
            for _item_disk_volume_reports in self.disk_volume_reports:
                if _item_disk_volume_reports:
                    _items.append(_item_disk_volume_reports.to_dict())
            _dict['diskVolumeReports'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in last_known_network (list)
        _items = []
        if self.last_known_network:
            for _item_last_known_network in self.last_known_network:
                if _item_last_known_network:
                    _items.append(_item_last_known_network.to_dict())
            _dict['lastKnownNetwork'] = _items
        # override the default output from pydantic by calling `to_dict()` of os_update_status
        if self.os_update_status:
            _dict['osUpdateStatus'] = self.os_update_status.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in recent_users (list)
        _items = []
        if self.recent_users:
            for _item_recent_users in self.recent_users:
                if _item_recent_users:
                    _items.append(_item_recent_users.to_dict())
            _dict['recentUsers'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in screenshot_files (list)
        _items = []
        if self.screenshot_files:
            for _item_screenshot_files in self.screenshot_files:
                if _item_screenshot_files:
                    _items.append(_item_screenshot_files.to_dict())
            _dict['screenshotFiles'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in system_ram_free_reports (list)
        _items = []
        if self.system_ram_free_reports:
            for _item_system_ram_free_reports in self.system_ram_free_reports:
                if _item_system_ram_free_reports:
                    _items.append(_item_system_ram_free_reports.to_dict())
            _dict['systemRamFreeReports'] = _items
        # override the default output from pydantic by calling `to_dict()` of tpm_version_info
        if self.tpm_version_info:
            _dict['tpmVersionInfo'] = self.tpm_version_info.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ChromeOsDevice from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "activeTimeRanges": [ChromeOsDeviceActiveTimeRangesInner.from_dict(_item) for _item in obj["activeTimeRanges"]] if obj.get("activeTimeRanges") is not None else None,
            "annotatedAssetId": obj.get("annotatedAssetId"),
            "annotatedLocation": obj.get("annotatedLocation"),
            "annotatedUser": obj.get("annotatedUser"),
            "autoUpdateExpiration": obj.get("autoUpdateExpiration"),
            "bootMode": obj.get("bootMode"),
            "cpuInfo": [ChromeOsDeviceCpuInfoInner.from_dict(_item) for _item in obj["cpuInfo"]] if obj.get("cpuInfo") is not None else None,
            "cpuStatusReports": [ChromeOsDeviceCpuStatusReportsInner.from_dict(_item) for _item in obj["cpuStatusReports"]] if obj.get("cpuStatusReports") is not None else None,
            "deprovisionReason": obj.get("deprovisionReason"),
            "deviceFiles": [ChromeOsDeviceDeviceFilesInner.from_dict(_item) for _item in obj["deviceFiles"]] if obj.get("deviceFiles") is not None else None,
            "deviceId": obj.get("deviceId"),
            "deviceLicenseType": obj.get("deviceLicenseType"),
            "diskVolumeReports": [ChromeOsDeviceDiskVolumeReportsInner.from_dict(_item) for _item in obj["diskVolumeReports"]] if obj.get("diskVolumeReports") is not None else None,
            "dockMacAddress": obj.get("dockMacAddress"),
            "etag": obj.get("etag"),
            "ethernetMacAddress": obj.get("ethernetMacAddress"),
            "ethernetMacAddress0": obj.get("ethernetMacAddress0"),
            "firmwareVersion": obj.get("firmwareVersion"),
            "firstEnrollmentTime": obj.get("firstEnrollmentTime"),
            "kind": obj.get("kind") if obj.get("kind") is not None else 'admin#directory#chromeosdevice',
            "lastDeprovisionTimestamp": obj.get("lastDeprovisionTimestamp"),
            "lastEnrollmentTime": obj.get("lastEnrollmentTime"),
            "lastKnownNetwork": [ChromeOsDeviceLastKnownNetworkInner.from_dict(_item) for _item in obj["lastKnownNetwork"]] if obj.get("lastKnownNetwork") is not None else None,
            "lastSync": obj.get("lastSync"),
            "macAddress": obj.get("macAddress"),
            "manufactureDate": obj.get("manufactureDate"),
            "meid": obj.get("meid"),
            "model": obj.get("model"),
            "notes": obj.get("notes"),
            "orderNumber": obj.get("orderNumber"),
            "orgUnitId": obj.get("orgUnitId"),
            "orgUnitPath": obj.get("orgUnitPath"),
            "osUpdateStatus": OsUpdateStatus.from_dict(obj["osUpdateStatus"]) if obj.get("osUpdateStatus") is not None else None,
            "osVersion": obj.get("osVersion"),
            "platformVersion": obj.get("platformVersion"),
            "recentUsers": [ChromeOsDeviceRecentUsersInner.from_dict(_item) for _item in obj["recentUsers"]] if obj.get("recentUsers") is not None else None,
            "screenshotFiles": [ChromeOsDeviceDeviceFilesInner.from_dict(_item) for _item in obj["screenshotFiles"]] if obj.get("screenshotFiles") is not None else None,
            "serialNumber": obj.get("serialNumber"),
            "status": obj.get("status"),
            "supportEndDate": obj.get("supportEndDate"),
            "systemRamFreeReports": [ChromeOsDeviceSystemRamFreeReportsInner.from_dict(_item) for _item in obj["systemRamFreeReports"]] if obj.get("systemRamFreeReports") is not None else None,
            "systemRamTotal": obj.get("systemRamTotal"),
            "tpmVersionInfo": ChromeOsDeviceTpmVersionInfo.from_dict(obj["tpmVersionInfo"]) if obj.get("tpmVersionInfo") is not None else None,
            "willAutoRenew": obj.get("willAutoRenew")
        })
        return _obj



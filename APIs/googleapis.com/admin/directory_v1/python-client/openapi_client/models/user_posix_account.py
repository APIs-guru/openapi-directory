# coding: utf-8

"""
    Admin SDK API

    Admin SDK lets administrators of enterprise domains to view and manage resources like user, groups etc. It also provides audit and usage reports of domain.

    The version of the OpenAPI document: directory_v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class UserPosixAccount(BaseModel):
    """
    JSON template for a POSIX account entry.
    """ # noqa: E501
    account_id: Optional[StrictStr] = Field(default=None, description="A POSIX account field identifier.", alias="accountId")
    gecos: Optional[StrictStr] = Field(default=None, description="The GECOS (user information) for this account.")
    gid: Optional[StrictStr] = Field(default=None, description="The default group ID.")
    home_directory: Optional[StrictStr] = Field(default=None, description="The path to the home directory for this account.", alias="homeDirectory")
    operating_system_type: Optional[StrictStr] = Field(default=None, description="The operating system type for this account.", alias="operatingSystemType")
    primary: Optional[StrictBool] = Field(default=None, description="If this is user's primary account within the SystemId.")
    shell: Optional[StrictStr] = Field(default=None, description="The path to the login shell for this account.")
    system_id: Optional[StrictStr] = Field(default=None, description="System identifier for which account Username or Uid apply to.", alias="systemId")
    uid: Optional[StrictStr] = Field(default=None, description="The POSIX compliant user ID.")
    username: Optional[StrictStr] = Field(default=None, description="The username of the account.")
    __properties: ClassVar[List[str]] = ["accountId", "gecos", "gid", "homeDirectory", "operatingSystemType", "primary", "shell", "systemId", "uid", "username"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of UserPosixAccount from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of UserPosixAccount from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "accountId": obj.get("accountId"),
            "gecos": obj.get("gecos"),
            "gid": obj.get("gid"),
            "homeDirectory": obj.get("homeDirectory"),
            "operatingSystemType": obj.get("operatingSystemType"),
            "primary": obj.get("primary"),
            "shell": obj.get("shell"),
            "systemId": obj.get("systemId"),
            "uid": obj.get("uid"),
            "username": obj.get("username")
        })
        return _obj



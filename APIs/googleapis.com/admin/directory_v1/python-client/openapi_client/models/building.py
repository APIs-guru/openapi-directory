# coding: utf-8

"""
    Admin SDK API

    Admin SDK lets administrators of enterprise domains to view and manage resources like user, groups etc. It also provides audit and usage reports of domain.

    The version of the OpenAPI document: directory_v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.building_address import BuildingAddress
from openapi_client.models.building_coordinates import BuildingCoordinates
from typing import Optional, Set
from typing_extensions import Self

class Building(BaseModel):
    """
    Public API: Resources.buildings
    """ # noqa: E501
    address: Optional[BuildingAddress] = None
    building_id: Optional[StrictStr] = Field(default=None, description="Unique identifier for the building. The maximum length is 100 characters.", alias="buildingId")
    building_name: Optional[StrictStr] = Field(default=None, description="The building name as seen by users in Calendar. Must be unique for the customer. For example, \"NYC-CHEL\". The maximum length is 100 characters.", alias="buildingName")
    coordinates: Optional[BuildingCoordinates] = None
    description: Optional[StrictStr] = Field(default=None, description="A brief description of the building. For example, \"Chelsea Market\".")
    etags: Optional[StrictStr] = Field(default=None, description="ETag of the resource.")
    floor_names: Optional[List[StrictStr]] = Field(default=None, description="The display names for all floors in this building. The floors are expected to be sorted in ascending order, from lowest floor to highest floor. For example, [\"B2\", \"B1\", \"L\", \"1\", \"2\", \"2M\", \"3\", \"PH\"] Must contain at least one entry.", alias="floorNames")
    kind: Optional[StrictStr] = Field(default='admin#directory#resources#buildings#Building', description="Kind of resource this is.")
    __properties: ClassVar[List[str]] = ["address", "buildingId", "buildingName", "coordinates", "description", "etags", "floorNames", "kind"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Building from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of address
        if self.address:
            _dict['address'] = self.address.to_dict()
        # override the default output from pydantic by calling `to_dict()` of coordinates
        if self.coordinates:
            _dict['coordinates'] = self.coordinates.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Building from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "address": BuildingAddress.from_dict(obj["address"]) if obj.get("address") is not None else None,
            "buildingId": obj.get("buildingId"),
            "buildingName": obj.get("buildingName"),
            "coordinates": BuildingCoordinates.from_dict(obj["coordinates"]) if obj.get("coordinates") is not None else None,
            "description": obj.get("description"),
            "etags": obj.get("etags"),
            "floorNames": obj.get("floorNames"),
            "kind": obj.get("kind") if obj.get("kind") is not None else 'admin#directory#resources#buildings#Building'
        })
        return _obj



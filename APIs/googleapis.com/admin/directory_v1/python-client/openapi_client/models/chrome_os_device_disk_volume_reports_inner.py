# coding: utf-8

"""
    Admin SDK API

    Admin SDK lets administrators of enterprise domains to view and manage resources like user, groups etc. It also provides audit and usage reports of domain.

    The version of the OpenAPI document: directory_v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.chrome_os_device_disk_volume_reports_inner_volume_info_inner import ChromeOsDeviceDiskVolumeReportsInnerVolumeInfoInner
from typing import Optional, Set
from typing_extensions import Self

class ChromeOsDeviceDiskVolumeReportsInner(BaseModel):
    """
    ChromeOsDeviceDiskVolumeReportsInner
    """ # noqa: E501
    volume_info: Optional[List[ChromeOsDeviceDiskVolumeReportsInnerVolumeInfoInner]] = Field(default=None, description="Disk volumes", alias="volumeInfo")
    __properties: ClassVar[List[str]] = ["volumeInfo"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ChromeOsDeviceDiskVolumeReportsInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in volume_info (list)
        _items = []
        if self.volume_info:
            for _item_volume_info in self.volume_info:
                if _item_volume_info:
                    _items.append(_item_volume_info.to_dict())
            _dict['volumeInfo'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ChromeOsDeviceDiskVolumeReportsInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "volumeInfo": [ChromeOsDeviceDiskVolumeReportsInnerVolumeInfoInner.from_dict(_item) for _item in obj["volumeInfo"]] if obj.get("volumeInfo") is not None else None
        })
        return _obj



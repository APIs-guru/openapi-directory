# coding: utf-8

"""
    Admin SDK API

    Admin SDK lets administrators of enterprise domains to view and manage resources like user, groups etc. It also provides audit and usage reports of domain.

    The version of the OpenAPI document: directory_v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class CalendarResource(BaseModel):
    """
    Public API: Resources.calendars
    """ # noqa: E501
    building_id: Optional[StrictStr] = Field(default=None, description="Unique ID for the building a resource is located in.", alias="buildingId")
    capacity: Optional[StrictInt] = Field(default=None, description="Capacity of a resource, number of seats in a room.")
    etags: Optional[StrictStr] = Field(default=None, description="ETag of the resource.")
    feature_instances: Optional[Any] = Field(default=None, description="Instances of features for the calendar resource.", alias="featureInstances")
    floor_name: Optional[StrictStr] = Field(default=None, description="Name of the floor a resource is located on.", alias="floorName")
    floor_section: Optional[StrictStr] = Field(default=None, description="Name of the section within a floor a resource is located in.", alias="floorSection")
    generated_resource_name: Optional[StrictStr] = Field(default=None, description="The read-only auto-generated name of the calendar resource which includes metadata about the resource such as building name, floor, capacity, etc. For example, \"NYC-2-Training Room 1A (16)\".", alias="generatedResourceName")
    kind: Optional[StrictStr] = Field(default='admin#directory#resources#calendars#CalendarResource', description="The type of the resource. For calendar resources, the value is `admin#directory#resources#calendars#CalendarResource`.")
    resource_category: Optional[StrictStr] = Field(default=None, description="The category of the calendar resource. Either CONFERENCE_ROOM or OTHER. Legacy data is set to CATEGORY_UNKNOWN.", alias="resourceCategory")
    resource_description: Optional[StrictStr] = Field(default=None, description="Description of the resource, visible only to admins.", alias="resourceDescription")
    resource_email: Optional[StrictStr] = Field(default=None, description="The read-only email for the calendar resource. Generated as part of creating a new calendar resource.", alias="resourceEmail")
    resource_id: Optional[StrictStr] = Field(default=None, description="The unique ID for the calendar resource.", alias="resourceId")
    resource_name: Optional[StrictStr] = Field(default=None, description="The name of the calendar resource. For example, \"Training Room 1A\".", alias="resourceName")
    resource_type: Optional[StrictStr] = Field(default=None, description="The type of the calendar resource, intended for non-room resources.", alias="resourceType")
    user_visible_description: Optional[StrictStr] = Field(default=None, description="Description of the resource, visible to users and admins.", alias="userVisibleDescription")
    __properties: ClassVar[List[str]] = ["buildingId", "capacity", "etags", "featureInstances", "floorName", "floorSection", "generatedResourceName", "kind", "resourceCategory", "resourceDescription", "resourceEmail", "resourceId", "resourceName", "resourceType", "userVisibleDescription"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CalendarResource from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if feature_instances (nullable) is None
        # and model_fields_set contains the field
        if self.feature_instances is None and "feature_instances" in self.model_fields_set:
            _dict['featureInstances'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CalendarResource from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "buildingId": obj.get("buildingId"),
            "capacity": obj.get("capacity"),
            "etags": obj.get("etags"),
            "featureInstances": obj.get("featureInstances"),
            "floorName": obj.get("floorName"),
            "floorSection": obj.get("floorSection"),
            "generatedResourceName": obj.get("generatedResourceName"),
            "kind": obj.get("kind") if obj.get("kind") is not None else 'admin#directory#resources#calendars#CalendarResource',
            "resourceCategory": obj.get("resourceCategory"),
            "resourceDescription": obj.get("resourceDescription"),
            "resourceEmail": obj.get("resourceEmail"),
            "resourceId": obj.get("resourceId"),
            "resourceName": obj.get("resourceName"),
            "resourceType": obj.get("resourceType"),
            "userVisibleDescription": obj.get("userVisibleDescription")
        })
        return _obj



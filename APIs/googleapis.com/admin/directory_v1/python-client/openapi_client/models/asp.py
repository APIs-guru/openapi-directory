# coding: utf-8

"""
    Admin SDK API

    Admin SDK lets administrators of enterprise domains to view and manage resources like user, groups etc. It also provides audit and usage reports of domain.

    The version of the OpenAPI document: directory_v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class Asp(BaseModel):
    """
    An application-specific password (ASP) is used with applications that do not accept a verification code when logging into the application on certain devices. The ASP access code is used instead of the login and password you commonly use when accessing an application through a browser. For more information about ASPs and how to create one, see the [help center](https://support.google.com/a/answer/2537800#asp).
    """ # noqa: E501
    code_id: Optional[StrictInt] = Field(default=None, description="The unique ID of the ASP.", alias="codeId")
    creation_time: Optional[StrictStr] = Field(default=None, description="The time when the ASP was created. Expressed in [Unix time](https://en.wikipedia.org/wiki/Epoch_time) format.", alias="creationTime")
    etag: Optional[StrictStr] = Field(default=None, description="ETag of the ASP.")
    kind: Optional[StrictStr] = Field(default='admin#directory#asp', description="The type of the API resource. This is always `admin#directory#asp`.")
    last_time_used: Optional[StrictStr] = Field(default=None, description="The time when the ASP was last used. Expressed in [Unix time](https://en.wikipedia.org/wiki/Epoch_time) format.", alias="lastTimeUsed")
    name: Optional[StrictStr] = Field(default=None, description="The name of the application that the user, represented by their `userId`, entered when the ASP was created.")
    user_key: Optional[StrictStr] = Field(default=None, description="The unique ID of the user who issued the ASP.", alias="userKey")
    __properties: ClassVar[List[str]] = ["codeId", "creationTime", "etag", "kind", "lastTimeUsed", "name", "userKey"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Asp from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Asp from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "codeId": obj.get("codeId"),
            "creationTime": obj.get("creationTime"),
            "etag": obj.get("etag"),
            "kind": obj.get("kind") if obj.get("kind") is not None else 'admin#directory#asp',
            "lastTimeUsed": obj.get("lastTimeUsed"),
            "name": obj.get("name"),
            "userKey": obj.get("userKey")
        })
        return _obj



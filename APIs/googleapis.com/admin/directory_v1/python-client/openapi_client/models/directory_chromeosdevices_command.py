# coding: utf-8

"""
    Admin SDK API

    Admin SDK lets administrators of enterprise domains to view and manage resources like user, groups etc. It also provides audit and usage reports of domain.

    The version of the OpenAPI document: directory_v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.directory_chromeosdevices_command_result import DirectoryChromeosdevicesCommandResult
from typing import Optional, Set
from typing_extensions import Self

class DirectoryChromeosdevicesCommand(BaseModel):
    """
    Information regarding a command that was issued to a device.
    """ # noqa: E501
    command_expire_time: Optional[StrictStr] = Field(default=None, description="The time at which the command will expire. If the device doesn't execute the command within this time the command will become expired.", alias="commandExpireTime")
    command_id: Optional[StrictStr] = Field(default=None, description="Unique ID of a device command.", alias="commandId")
    command_result: Optional[DirectoryChromeosdevicesCommandResult] = Field(default=None, alias="commandResult")
    issue_time: Optional[StrictStr] = Field(default=None, description="The timestamp when the command was issued by the admin.", alias="issueTime")
    payload: Optional[StrictStr] = Field(default=None, description="The payload that the command specified, if any.")
    state: Optional[StrictStr] = Field(default=None, description="Indicates the command state.")
    type: Optional[StrictStr] = Field(default=None, description="The type of the command.")
    __properties: ClassVar[List[str]] = ["commandExpireTime", "commandId", "commandResult", "issueTime", "payload", "state", "type"]

    @field_validator('state')
    def state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['STATE_UNSPECIFIED', 'PENDING', 'EXPIRED', 'CANCELLED', 'SENT_TO_CLIENT', 'ACKED_BY_CLIENT', 'EXECUTED_BY_CLIENT']):
            raise ValueError("must be one of enum values ('STATE_UNSPECIFIED', 'PENDING', 'EXPIRED', 'CANCELLED', 'SENT_TO_CLIENT', 'ACKED_BY_CLIENT', 'EXECUTED_BY_CLIENT')")
        return value

    @field_validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['COMMAND_TYPE_UNSPECIFIED', 'REBOOT', 'TAKE_A_SCREENSHOT', 'SET_VOLUME', 'WIPE_USERS', 'REMOTE_POWERWASH', 'DEVICE_START_CRD_SESSION', 'CAPTURE_LOGS', 'FETCH_SUPPORT_PACKET']):
            raise ValueError("must be one of enum values ('COMMAND_TYPE_UNSPECIFIED', 'REBOOT', 'TAKE_A_SCREENSHOT', 'SET_VOLUME', 'WIPE_USERS', 'REMOTE_POWERWASH', 'DEVICE_START_CRD_SESSION', 'CAPTURE_LOGS', 'FETCH_SUPPORT_PACKET')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DirectoryChromeosdevicesCommand from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of command_result
        if self.command_result:
            _dict['commandResult'] = self.command_result.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DirectoryChromeosdevicesCommand from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "commandExpireTime": obj.get("commandExpireTime"),
            "commandId": obj.get("commandId"),
            "commandResult": DirectoryChromeosdevicesCommandResult.from_dict(obj["commandResult"]) if obj.get("commandResult") is not None else None,
            "issueTime": obj.get("issueTime"),
            "payload": obj.get("payload"),
            "state": obj.get("state"),
            "type": obj.get("type")
        })
        return _obj



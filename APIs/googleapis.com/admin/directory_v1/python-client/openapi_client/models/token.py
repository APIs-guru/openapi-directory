# coding: utf-8

"""
    Admin SDK API

    Admin SDK lets administrators of enterprise domains to view and manage resources like user, groups etc. It also provides audit and usage reports of domain.

    The version of the OpenAPI document: directory_v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class Token(BaseModel):
    """
    JSON template for token resource in Directory API.
    """ # noqa: E501
    anonymous: Optional[StrictBool] = Field(default=None, description="Whether the application is registered with Google. The value is `true` if the application has an anonymous Client ID.")
    client_id: Optional[StrictStr] = Field(default=None, description="The Client ID of the application the token is issued to.", alias="clientId")
    display_text: Optional[StrictStr] = Field(default=None, description="The displayable name of the application the token is issued to.", alias="displayText")
    etag: Optional[StrictStr] = Field(default=None, description="ETag of the resource.")
    kind: Optional[StrictStr] = Field(default='admin#directory#token', description="The type of the API resource. This is always `admin#directory#token`.")
    native_app: Optional[StrictBool] = Field(default=None, description="Whether the token is issued to an installed application. The value is `true` if the application is installed to a desktop or mobile device.", alias="nativeApp")
    scopes: Optional[List[StrictStr]] = Field(default=None, description="A list of authorization scopes the application is granted.")
    user_key: Optional[StrictStr] = Field(default=None, description="The unique ID of the user that issued the token.", alias="userKey")
    __properties: ClassVar[List[str]] = ["anonymous", "clientId", "displayText", "etag", "kind", "nativeApp", "scopes", "userKey"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Token from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Token from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "anonymous": obj.get("anonymous"),
            "clientId": obj.get("clientId"),
            "displayText": obj.get("displayText"),
            "etag": obj.get("etag"),
            "kind": obj.get("kind") if obj.get("kind") is not None else 'admin#directory#token',
            "nativeApp": obj.get("nativeApp"),
            "scopes": obj.get("scopes"),
            "userKey": obj.get("userKey")
        })
        return _obj



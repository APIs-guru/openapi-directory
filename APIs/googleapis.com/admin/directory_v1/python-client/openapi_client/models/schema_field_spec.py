# coding: utf-8

"""
    Admin SDK API

    Admin SDK lets administrators of enterprise domains to view and manage resources like user, groups etc. It also provides audit and usage reports of domain.

    The version of the OpenAPI document: directory_v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.schema_field_spec_numeric_indexing_spec import SchemaFieldSpecNumericIndexingSpec
from typing import Optional, Set
from typing_extensions import Self

class SchemaFieldSpec(BaseModel):
    """
    You can use schemas to add custom fields to user profiles. You can use these fields to store information such as the projects your users work on, their physical locations, their hire dates, or whatever else fits your business needs. For more information, see [Custom User Fields](/admin-sdk/directory/v1/guides/manage-schemas).
    """ # noqa: E501
    display_name: Optional[StrictStr] = Field(default=None, description="Display Name of the field.", alias="displayName")
    etag: Optional[StrictStr] = Field(default=None, description="The ETag of the field.")
    field_id: Optional[StrictStr] = Field(default=None, description="The unique identifier of the field (Read-only)", alias="fieldId")
    field_name: Optional[StrictStr] = Field(default=None, description="The name of the field.", alias="fieldName")
    field_type: Optional[StrictStr] = Field(default=None, description="The type of the field.", alias="fieldType")
    indexed: Optional[StrictBool] = Field(default=True, description="Boolean specifying whether the field is indexed or not. Default: `true`.")
    kind: Optional[StrictStr] = Field(default='admin#directory#schema#fieldspec', description="The kind of resource this is. For schema fields this is always `admin#directory#schema#fieldspec`.")
    multi_valued: Optional[StrictBool] = Field(default=None, description="A boolean specifying whether this is a multi-valued field or not. Default: `false`.", alias="multiValued")
    numeric_indexing_spec: Optional[SchemaFieldSpecNumericIndexingSpec] = Field(default=None, alias="numericIndexingSpec")
    read_access_type: Optional[StrictStr] = Field(default='ALL_DOMAIN_USERS', description="Specifies who can view values of this field. See [Retrieve users as a non-administrator](/admin-sdk/directory/v1/guides/manage-users#retrieve_users_non_admin) for more information. Note: It may take up to 24 hours for changes to this field to be reflected.", alias="readAccessType")
    __properties: ClassVar[List[str]] = ["displayName", "etag", "fieldId", "fieldName", "fieldType", "indexed", "kind", "multiValued", "numericIndexingSpec", "readAccessType"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SchemaFieldSpec from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of numeric_indexing_spec
        if self.numeric_indexing_spec:
            _dict['numericIndexingSpec'] = self.numeric_indexing_spec.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SchemaFieldSpec from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "displayName": obj.get("displayName"),
            "etag": obj.get("etag"),
            "fieldId": obj.get("fieldId"),
            "fieldName": obj.get("fieldName"),
            "fieldType": obj.get("fieldType"),
            "indexed": obj.get("indexed") if obj.get("indexed") is not None else True,
            "kind": obj.get("kind") if obj.get("kind") is not None else 'admin#directory#schema#fieldspec',
            "multiValued": obj.get("multiValued"),
            "numericIndexingSpec": SchemaFieldSpecNumericIndexingSpec.from_dict(obj["numericIndexingSpec"]) if obj.get("numericIndexingSpec") is not None else None,
            "readAccessType": obj.get("readAccessType") if obj.get("readAccessType") is not None else 'ALL_DOMAIN_USERS'
        })
        return _obj



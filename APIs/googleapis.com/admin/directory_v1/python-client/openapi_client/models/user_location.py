# coding: utf-8

"""
    Admin SDK API

    Admin SDK lets administrators of enterprise domains to view and manage resources like user, groups etc. It also provides audit and usage reports of domain.

    The version of the OpenAPI document: directory_v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class UserLocation(BaseModel):
    """
    JSON template for a location entry.
    """ # noqa: E501
    area: Optional[StrictStr] = Field(default=None, description="Textual location. This is most useful for display purposes to concisely describe the location. For example 'Mountain View, CA', 'Near Seattle', 'US-NYC-9TH 9A209A.''")
    building_id: Optional[StrictStr] = Field(default=None, description="Building Identifier.", alias="buildingId")
    custom_type: Optional[StrictStr] = Field(default=None, description="Custom Type.", alias="customType")
    desk_code: Optional[StrictStr] = Field(default=None, description="Most specific textual code of individual desk location.", alias="deskCode")
    floor_name: Optional[StrictStr] = Field(default=None, description="Floor name/number.", alias="floorName")
    floor_section: Optional[StrictStr] = Field(default=None, description="Floor section. More specific location within the floor. For example if a floor is divided into sections 'A', 'B' and 'C' this field would identify one of those values.", alias="floorSection")
    type: Optional[StrictStr] = Field(default=None, description="Each entry can have a type which indicates standard types of that entry. For example location could be of types default and desk. In addition to standard type an entry can have a custom type and can give it any name. Such types should have 'custom' as type and also have a customType value.")
    __properties: ClassVar[List[str]] = ["area", "buildingId", "customType", "deskCode", "floorName", "floorSection", "type"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of UserLocation from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of UserLocation from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "area": obj.get("area"),
            "buildingId": obj.get("buildingId"),
            "customType": obj.get("customType"),
            "deskCode": obj.get("deskCode"),
            "floorName": obj.get("floorName"),
            "floorSection": obj.get("floorSection"),
            "type": obj.get("type")
        })
        return _obj



# coding: utf-8

"""
    Admin SDK API

    Admin SDK lets administrators of enterprise domains to view and manage resources like user, groups etc. It also provides audit and usage reports of domain.

    The version of the OpenAPI document: directory_v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.auxiliary_message import AuxiliaryMessage
from typing import Optional, Set
from typing_extensions import Self

class Printer(BaseModel):
    """
    Printer configuration.
    """ # noqa: E501
    auxiliary_messages: Optional[List[AuxiliaryMessage]] = Field(default=None, description="Output only. Auxiliary messages about issues with the printer configuration if any.", alias="auxiliaryMessages")
    create_time: Optional[StrictStr] = Field(default=None, description="Output only. Time when printer was created.", alias="createTime")
    description: Optional[StrictStr] = Field(default=None, description="Editable. Description of printer.")
    display_name: Optional[StrictStr] = Field(default=None, description="Editable. Name of printer.", alias="displayName")
    id: Optional[StrictStr] = Field(default=None, description="Id of the printer. (During printer creation leave empty)")
    make_and_model: Optional[StrictStr] = Field(default=None, description="Editable. Make and model of printer. e.g. Lexmark MS610de Value must be in format as seen in ListPrinterModels response.", alias="makeAndModel")
    name: Optional[StrictStr] = Field(default=None, description="The resource name of the Printer object, in the format customers/{customer-id}/printers/{printer-id} (During printer creation leave empty)")
    org_unit_id: Optional[StrictStr] = Field(default=None, description="Organization Unit that owns this printer (Only can be set during Printer creation)", alias="orgUnitId")
    uri: Optional[StrictStr] = Field(default=None, description="Editable. Printer URI.")
    use_driverless_config: Optional[StrictBool] = Field(default=None, description="Editable. flag to use driverless configuration or not. If it's set to be true, make_and_model can be ignored", alias="useDriverlessConfig")
    __properties: ClassVar[List[str]] = ["auxiliaryMessages", "createTime", "description", "displayName", "id", "makeAndModel", "name", "orgUnitId", "uri", "useDriverlessConfig"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Printer from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "auxiliary_messages",
            "create_time",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in auxiliary_messages (list)
        _items = []
        if self.auxiliary_messages:
            for _item_auxiliary_messages in self.auxiliary_messages:
                if _item_auxiliary_messages:
                    _items.append(_item_auxiliary_messages.to_dict())
            _dict['auxiliaryMessages'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Printer from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "auxiliaryMessages": [AuxiliaryMessage.from_dict(_item) for _item in obj["auxiliaryMessages"]] if obj.get("auxiliaryMessages") is not None else None,
            "createTime": obj.get("createTime"),
            "description": obj.get("description"),
            "displayName": obj.get("displayName"),
            "id": obj.get("id"),
            "makeAndModel": obj.get("makeAndModel"),
            "name": obj.get("name"),
            "orgUnitId": obj.get("orgUnitId"),
            "uri": obj.get("uri"),
            "useDriverlessConfig": obj.get("useDriverlessConfig")
        })
        return _obj



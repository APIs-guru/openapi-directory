# coding: utf-8

"""
    Admin SDK API

    Admin SDK lets administrators of enterprise domains to view and manage resources like user, groups etc. It also provides audit and usage reports of domain.

    The version of the OpenAPI document: directory_v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class OrgUnit(BaseModel):
    """
    Managing your account's organizational units allows you to configure your users' access to services and custom settings. For more information about common organizational unit tasks, see the [Developer's Guide](/admin-sdk/directory/v1/guides/manage-org-units.html). The customer's organizational unit hierarchy is limited to 35 levels of depth.
    """ # noqa: E501
    block_inheritance: Optional[StrictBool] = Field(default=None, description="Determines if a sub-organizational unit can inherit the settings of the parent organization. The default value is `false`, meaning a sub-organizational unit inherits the settings of the nearest parent organizational unit. This field is deprecated. Setting it to `true` is no longer supported and can have _unintended consequences_. For more information about inheritance and users in an organization structure, see the [administration help center](https://support.google.com/a/answer/4352075).", alias="blockInheritance")
    description: Optional[StrictStr] = Field(default=None, description="Description of the organizational unit.")
    etag: Optional[StrictStr] = Field(default=None, description="ETag of the resource.")
    kind: Optional[StrictStr] = Field(default='admin#directory#orgUnit', description="The type of the API resource. For Orgunits resources, the value is `admin#directory#orgUnit`.")
    name: Optional[StrictStr] = Field(default=None, description="The organizational unit's path name. For example, an organizational unit's name within the /corp/support/sales_support parent path is sales_support. Required.")
    org_unit_id: Optional[StrictStr] = Field(default=None, description="The unique ID of the organizational unit.", alias="orgUnitId")
    org_unit_path: Optional[StrictStr] = Field(default=None, description="The full path to the organizational unit. The `orgUnitPath` is a derived property. When listed, it is derived from `parentOrgunitPath` and organizational unit's `name`. For example, for an organizational unit named 'apps' under parent organization '/engineering', the orgUnitPath is '/engineering/apps'. In order to edit an `orgUnitPath`, either update the name of the organization or the `parentOrgunitPath`. A user's organizational unit determines which Google Workspace services the user has access to. If the user is moved to a new organization, the user's access changes. For more information about organization structures, see the [administration help center](https://support.google.com/a/answer/4352075). For more information about moving a user to a different organization, see [Update a user](/admin-sdk/directory/v1/guides/manage-users.html#update_user).", alias="orgUnitPath")
    parent_org_unit_id: Optional[StrictStr] = Field(default=None, description="The unique ID of the parent organizational unit. Required, unless `parentOrgUnitPath` is set.", alias="parentOrgUnitId")
    parent_org_unit_path: Optional[StrictStr] = Field(default=None, description="The organizational unit's parent path. For example, /corp/sales is the parent path for /corp/sales/sales_support organizational unit. Required, unless `parentOrgUnitId` is set.", alias="parentOrgUnitPath")
    __properties: ClassVar[List[str]] = ["blockInheritance", "description", "etag", "kind", "name", "orgUnitId", "orgUnitPath", "parentOrgUnitId", "parentOrgUnitPath"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of OrgUnit from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of OrgUnit from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "blockInheritance": obj.get("blockInheritance"),
            "description": obj.get("description"),
            "etag": obj.get("etag"),
            "kind": obj.get("kind") if obj.get("kind") is not None else 'admin#directory#orgUnit',
            "name": obj.get("name"),
            "orgUnitId": obj.get("orgUnitId"),
            "orgUnitPath": obj.get("orgUnitPath"),
            "parentOrgUnitId": obj.get("parentOrgUnitId"),
            "parentOrgUnitPath": obj.get("parentOrgUnitPath")
        })
        return _obj



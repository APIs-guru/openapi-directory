# coding: utf-8

"""
    Admin SDK API

    Admin SDK lets administrators of enterprise domains to view and manage resources like user, groups etc. It also provides audit and usage reports of domain.

    The version of the OpenAPI document: directory_v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class DirectoryChromeosdevicesCommandResult(BaseModel):
    """
    The result of executing a command.
    """ # noqa: E501
    command_result_payload: Optional[StrictStr] = Field(default=None, description="The payload for the command result. The following commands respond with a payload: * `DEVICE_START_CRD_SESSION`: Payload is a stringified JSON object in the form: { \"url\": url }. The URL provides a link to the Chrome Remote Desktop session.", alias="commandResultPayload")
    error_message: Optional[StrictStr] = Field(default=None, description="The error message with a short explanation as to why the command failed. Only present if the command failed.", alias="errorMessage")
    execute_time: Optional[StrictStr] = Field(default=None, description="The time at which the command was executed or failed to execute.", alias="executeTime")
    result: Optional[StrictStr] = Field(default=None, description="The result of the command.")
    __properties: ClassVar[List[str]] = ["commandResultPayload", "errorMessage", "executeTime", "result"]

    @field_validator('result')
    def result_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['COMMAND_RESULT_TYPE_UNSPECIFIED', 'IGNORED', 'FAILURE', 'SUCCESS']):
            raise ValueError("must be one of enum values ('COMMAND_RESULT_TYPE_UNSPECIFIED', 'IGNORED', 'FAILURE', 'SUCCESS')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DirectoryChromeosdevicesCommandResult from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DirectoryChromeosdevicesCommandResult from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "commandResultPayload": obj.get("commandResultPayload"),
            "errorMessage": obj.get("errorMessage"),
            "executeTime": obj.get("executeTime"),
            "result": obj.get("result")
        })
        return _obj



# coding: utf-8

"""
    Admin SDK API

    Admin SDK lets administrators of enterprise domains to view and manage resources like user, groups etc. It also provides audit and usage reports of domain.

    The version of the OpenAPI document: directory_v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class Privilege(BaseModel):
    """
    Privilege
    """ # noqa: E501
    child_privileges: Optional[List[Privilege]] = Field(default=None, description="A list of child privileges. Privileges for a service form a tree. Each privilege can have a list of child privileges; this list is empty for a leaf privilege.", alias="childPrivileges")
    etag: Optional[StrictStr] = Field(default=None, description="ETag of the resource.")
    is_ou_scopable: Optional[StrictBool] = Field(default=None, description="If the privilege can be restricted to an organization unit.", alias="isOuScopable")
    kind: Optional[StrictStr] = Field(default='admin#directory#privilege', description="The type of the API resource. This is always `admin#directory#privilege`.")
    privilege_name: Optional[StrictStr] = Field(default=None, description="The name of the privilege.", alias="privilegeName")
    service_id: Optional[StrictStr] = Field(default=None, description="The obfuscated ID of the service this privilege is for. This value is returned with [`Privileges.list()`](/admin-sdk/directory/v1/reference/privileges/list).", alias="serviceId")
    service_name: Optional[StrictStr] = Field(default=None, description="The name of the service this privilege is for.", alias="serviceName")
    __properties: ClassVar[List[str]] = ["childPrivileges", "etag", "isOuScopable", "kind", "privilegeName", "serviceId", "serviceName"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Privilege from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in child_privileges (list)
        _items = []
        if self.child_privileges:
            for _item_child_privileges in self.child_privileges:
                if _item_child_privileges:
                    _items.append(_item_child_privileges.to_dict())
            _dict['childPrivileges'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Privilege from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "childPrivileges": [Privilege.from_dict(_item) for _item in obj["childPrivileges"]] if obj.get("childPrivileges") is not None else None,
            "etag": obj.get("etag"),
            "isOuScopable": obj.get("isOuScopable"),
            "kind": obj.get("kind") if obj.get("kind") is not None else 'admin#directory#privilege',
            "privilegeName": obj.get("privilegeName"),
            "serviceId": obj.get("serviceId"),
            "serviceName": obj.get("serviceName")
        })
        return _obj

# TODO: Rewrite to not use raise_errors
Privilege.model_rebuild(raise_errors=False)


# coding: utf-8

"""
    Admin SDK API

    Admin SDK lets administrators of enterprise domains to view and manage resources like user, groups etc. It also provides audit and usage reports of domain.

    The version of the OpenAPI document: directory_v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.customer_postal_address import CustomerPostalAddress
from typing import Optional, Set
from typing_extensions import Self

class Customer(BaseModel):
    """
    Customer
    """ # noqa: E501
    alternate_email: Optional[StrictStr] = Field(default=None, description="The customer's secondary contact email address. This email address cannot be on the same domain as the `customerDomain`", alias="alternateEmail")
    customer_creation_time: Optional[datetime] = Field(default=None, description="The customer's creation time (Readonly)", alias="customerCreationTime")
    customer_domain: Optional[StrictStr] = Field(default=None, description="The customer's primary domain name string. Do not include the `www` prefix when creating a new customer.", alias="customerDomain")
    etag: Optional[StrictStr] = Field(default=None, description="ETag of the resource.")
    id: Optional[StrictStr] = Field(default=None, description="The unique ID for the customer's Google Workspace account. (Readonly)")
    kind: Optional[StrictStr] = Field(default='admin#directory#customer', description="Identifies the resource as a customer. Value: `admin#directory#customer`")
    language: Optional[StrictStr] = Field(default=None, description="The customer's ISO 639-2 language code. See the [Language Codes](/admin-sdk/directory/v1/languages) page for the list of supported codes. Valid language codes outside the supported set will be accepted by the API but may lead to unexpected behavior. The default value is `en`.")
    phone_number: Optional[StrictStr] = Field(default=None, description="The customer's contact phone number in [E.164](https://en.wikipedia.org/wiki/E.164) format.", alias="phoneNumber")
    postal_address: Optional[CustomerPostalAddress] = Field(default=None, alias="postalAddress")
    __properties: ClassVar[List[str]] = ["alternateEmail", "customerCreationTime", "customerDomain", "etag", "id", "kind", "language", "phoneNumber", "postalAddress"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Customer from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of postal_address
        if self.postal_address:
            _dict['postalAddress'] = self.postal_address.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Customer from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "alternateEmail": obj.get("alternateEmail"),
            "customerCreationTime": obj.get("customerCreationTime"),
            "customerDomain": obj.get("customerDomain"),
            "etag": obj.get("etag"),
            "id": obj.get("id"),
            "kind": obj.get("kind") if obj.get("kind") is not None else 'admin#directory#customer',
            "language": obj.get("language"),
            "phoneNumber": obj.get("phoneNumber"),
            "postalAddress": CustomerPostalAddress.from_dict(obj["postalAddress"]) if obj.get("postalAddress") is not None else None
        })
        return _obj



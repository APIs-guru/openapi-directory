# coding: utf-8

"""
    Admin SDK API

    Admin SDK lets administrators of enterprise domains to view and manage resources like user, groups etc. It also provides audit and usage reports of domain.

    The version of the OpenAPI document: directory_v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class Group(BaseModel):
    """
    Google Groups provide your users the ability to send messages to groups of people using the group's email address. For more information about common tasks, see the [Developer's Guide](https://developers.google.com/admin-sdk/directory/v1/guides/manage-groups). For information about other types of groups, see the [Cloud Identity Groups API documentation](https://cloud.google.com/identity/docs/groups). Note: The user calling the API (or being impersonated by a service account) must have an assigned [role](https://developers.google.com/admin-sdk/directory/v1/guides/manage-roles) that includes Admin API Groups permissions, such as Super Admin or Groups Admin.
    """ # noqa: E501
    admin_created: Optional[StrictBool] = Field(default=None, description="Read-only. Value is `true` if this group was created by an administrator rather than a user.", alias="adminCreated")
    aliases: Optional[List[StrictStr]] = Field(default=None, description="Read-only. The list of a group's alias email addresses. To add, update, or remove a group's aliases, use the `groups.aliases` methods. If edited in a group's POST or PUT request, the edit is ignored.")
    description: Optional[StrictStr] = Field(default=None, description="An extended description to help users determine the purpose of a group. For example, you can include information about who should join the group, the types of messages to send to the group, links to FAQs about the group, or related groups. Maximum length is `4,096` characters.")
    direct_members_count: Optional[StrictStr] = Field(default=None, description="The number of users that are direct members of the group. If a group is a member (child) of this group (the parent), members of the child group are not counted in the `directMembersCount` property of the parent group.", alias="directMembersCount")
    email: Optional[StrictStr] = Field(default=None, description="The group's email address. If your account has multiple domains, select the appropriate domain for the email address. The `email` must be unique. This property is required when creating a group. Group email addresses are subject to the same character usage rules as usernames, see the [help center](https://support.google.com/a/answer/9193374) for details.")
    etag: Optional[StrictStr] = Field(default=None, description="ETag of the resource.")
    id: Optional[StrictStr] = Field(default=None, description="Read-only. The unique ID of a group. A group `id` can be used as a group request URI's `groupKey`.")
    kind: Optional[StrictStr] = Field(default='admin#directory#group', description="The type of the API resource. For Groups resources, the value is `admin#directory#group`.")
    name: Optional[StrictStr] = Field(default=None, description="The group's display name.")
    non_editable_aliases: Optional[List[StrictStr]] = Field(default=None, description="Read-only. The list of the group's non-editable alias email addresses that are outside of the account's primary domain or subdomains. These are functioning email addresses used by the group. This is a read-only property returned in the API's response for a group. If edited in a group's POST or PUT request, the edit is ignored.", alias="nonEditableAliases")
    __properties: ClassVar[List[str]] = ["adminCreated", "aliases", "description", "directMembersCount", "email", "etag", "id", "kind", "name", "nonEditableAliases"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Group from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Group from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "adminCreated": obj.get("adminCreated"),
            "aliases": obj.get("aliases"),
            "description": obj.get("description"),
            "directMembersCount": obj.get("directMembersCount"),
            "email": obj.get("email"),
            "etag": obj.get("etag"),
            "id": obj.get("id"),
            "kind": obj.get("kind") if obj.get("kind") is not None else 'admin#directory#group',
            "name": obj.get("name"),
            "nonEditableAliases": obj.get("nonEditableAliases")
        })
        return _obj



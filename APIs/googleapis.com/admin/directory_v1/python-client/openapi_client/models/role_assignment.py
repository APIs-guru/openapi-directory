# coding: utf-8

"""
    Admin SDK API

    Admin SDK lets administrators of enterprise domains to view and manage resources like user, groups etc. It also provides audit and usage reports of domain.

    The version of the OpenAPI document: directory_v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class RoleAssignment(BaseModel):
    """
    Defines an assignment of a role.
    """ # noqa: E501
    assigned_to: Optional[StrictStr] = Field(default=None, description="The unique ID of the entity this role is assigned toâ€”either the `user_id` of a user, the `group_id` of a group, or the `uniqueId` of a service account as defined in [Identity and Access Management (IAM)](https://cloud.google.com/iam/docs/reference/rest/v1/projects.serviceAccounts).", alias="assignedTo")
    assignee_type: Optional[StrictStr] = Field(default=None, description="Output only. The type of the assignee (`USER` or `GROUP`).", alias="assigneeType")
    etag: Optional[StrictStr] = Field(default=None, description="ETag of the resource.")
    kind: Optional[StrictStr] = Field(default='admin#directory#roleAssignment', description="The type of the API resource. This is always `admin#directory#roleAssignment`.")
    org_unit_id: Optional[StrictStr] = Field(default=None, description="If the role is restricted to an organization unit, this contains the ID for the organization unit the exercise of this role is restricted to.", alias="orgUnitId")
    role_assignment_id: Optional[StrictStr] = Field(default=None, description="ID of this roleAssignment.", alias="roleAssignmentId")
    role_id: Optional[StrictStr] = Field(default=None, description="The ID of the role that is assigned.", alias="roleId")
    scope_type: Optional[StrictStr] = Field(default=None, description="The scope in which this role is assigned.", alias="scopeType")
    __properties: ClassVar[List[str]] = ["assignedTo", "assigneeType", "etag", "kind", "orgUnitId", "roleAssignmentId", "roleId", "scopeType"]

    @field_validator('assignee_type')
    def assignee_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['user', 'group']):
            raise ValueError("must be one of enum values ('user', 'group')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of RoleAssignment from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "assignee_type",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of RoleAssignment from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "assignedTo": obj.get("assignedTo"),
            "assigneeType": obj.get("assigneeType"),
            "etag": obj.get("etag"),
            "kind": obj.get("kind") if obj.get("kind") is not None else 'admin#directory#roleAssignment',
            "orgUnitId": obj.get("orgUnitId"),
            "roleAssignmentId": obj.get("roleAssignmentId"),
            "roleId": obj.get("roleId"),
            "scopeType": obj.get("scopeType")
        })
        return _obj



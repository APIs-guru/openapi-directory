# coding: utf-8

"""
    Admin SDK API

    Admin SDK lets administrators of enterprise domains to view and manage resources like user, groups etc. It also provides audit and usage reports of domain.

    The version of the OpenAPI document: directory_v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class BuildingAddress(BaseModel):
    """
    Public API: Resources.buildings
    """ # noqa: E501
    address_lines: Optional[List[StrictStr]] = Field(default=None, description="Unstructured address lines describing the lower levels of an address.", alias="addressLines")
    administrative_area: Optional[StrictStr] = Field(default=None, description="Optional. Highest administrative subdivision which is used for postal addresses of a country or region.", alias="administrativeArea")
    language_code: Optional[StrictStr] = Field(default=None, description="Optional. BCP-47 language code of the contents of this address (if known).", alias="languageCode")
    locality: Optional[StrictStr] = Field(default=None, description="Optional. Generally refers to the city/town portion of the address. Examples: US city, IT comune, UK post town. In regions of the world where localities are not well defined or do not fit into this structure well, leave locality empty and use addressLines.")
    postal_code: Optional[StrictStr] = Field(default=None, description="Optional. Postal code of the address.", alias="postalCode")
    region_code: Optional[StrictStr] = Field(default=None, description="Required. CLDR region code of the country/region of the address.", alias="regionCode")
    sublocality: Optional[StrictStr] = Field(default=None, description="Optional. Sublocality of the address.")
    __properties: ClassVar[List[str]] = ["addressLines", "administrativeArea", "languageCode", "locality", "postalCode", "regionCode", "sublocality"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of BuildingAddress from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of BuildingAddress from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "addressLines": obj.get("addressLines"),
            "administrativeArea": obj.get("administrativeArea"),
            "languageCode": obj.get("languageCode"),
            "locality": obj.get("locality"),
            "postalCode": obj.get("postalCode"),
            "regionCode": obj.get("regionCode"),
            "sublocality": obj.get("sublocality")
        })
        return _obj



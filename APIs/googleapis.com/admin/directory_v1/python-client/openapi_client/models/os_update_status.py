# coding: utf-8

"""
    Admin SDK API

    Admin SDK lets administrators of enterprise domains to view and manage resources like user, groups etc. It also provides audit and usage reports of domain.

    The version of the OpenAPI document: directory_v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class OsUpdateStatus(BaseModel):
    """
    Contains information regarding the current OS update status.
    """ # noqa: E501
    reboot_time: Optional[StrictStr] = Field(default=None, description="Date and time of the last reboot.", alias="rebootTime")
    state: Optional[StrictStr] = Field(default=None, description="The update state of an OS update.")
    target_kiosk_app_version: Optional[StrictStr] = Field(default=None, description="New required platform version from the pending updated kiosk app.", alias="targetKioskAppVersion")
    target_os_version: Optional[StrictStr] = Field(default=None, description="New platform version of the OS image being downloaded and applied. It is only set when update status is UPDATE_STATUS_DOWNLOAD_IN_PROGRESS or UPDATE_STATUS_NEED_REBOOT. Note this could be a dummy \"0.0.0.0\" for UPDATE_STATUS_NEED_REBOOT for some edge cases, e.g. update engine is restarted without a reboot.", alias="targetOsVersion")
    update_check_time: Optional[StrictStr] = Field(default=None, description="Date and time of the last update check.", alias="updateCheckTime")
    update_time: Optional[StrictStr] = Field(default=None, description="Date and time of the last successful OS update.", alias="updateTime")
    __properties: ClassVar[List[str]] = ["rebootTime", "state", "targetKioskAppVersion", "targetOsVersion", "updateCheckTime", "updateTime"]

    @field_validator('state')
    def state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['updateStateUnspecified', 'updateStateNotStarted', 'updateStateDownloadInProgress', 'updateStateNeedReboot']):
            raise ValueError("must be one of enum values ('updateStateUnspecified', 'updateStateNotStarted', 'updateStateDownloadInProgress', 'updateStateNeedReboot')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of OsUpdateStatus from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of OsUpdateStatus from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "rebootTime": obj.get("rebootTime"),
            "state": obj.get("state"),
            "targetKioskAppVersion": obj.get("targetKioskAppVersion"),
            "targetOsVersion": obj.get("targetOsVersion"),
            "updateCheckTime": obj.get("updateCheckTime"),
            "updateTime": obj.get("updateTime")
        })
        return _obj



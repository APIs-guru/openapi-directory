# coding: utf-8

"""
    Drive Labels API

    An API for managing Drive Labels

    The version of the OpenAPI document: v2beta
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.google_apps_drive_labels_v2beta_delta_update_label_request_create_selection_choice_request import GoogleAppsDriveLabelsV2betaDeltaUpdateLabelRequestCreateSelectionChoiceRequest

class TestGoogleAppsDriveLabelsV2betaDeltaUpdateLabelRequestCreateSelectionChoiceRequest(unittest.TestCase):
    """GoogleAppsDriveLabelsV2betaDeltaUpdateLabelRequestCreateSelectionChoiceRequest unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> GoogleAppsDriveLabelsV2betaDeltaUpdateLabelRequestCreateSelectionChoiceRequest:
        """Test GoogleAppsDriveLabelsV2betaDeltaUpdateLabelRequestCreateSelectionChoiceRequest
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `GoogleAppsDriveLabelsV2betaDeltaUpdateLabelRequestCreateSelectionChoiceRequest`
        """
        model = GoogleAppsDriveLabelsV2betaDeltaUpdateLabelRequestCreateSelectionChoiceRequest()
        if include_optional:
            return GoogleAppsDriveLabelsV2betaDeltaUpdateLabelRequestCreateSelectionChoiceRequest(
                choice = openapi_client.models.google_apps_drive_labels_v2beta_field_selection_options_choice.GoogleAppsDriveLabelsV2betaFieldSelectionOptionsChoice(
                    applied_capabilities = openapi_client.models.google_apps_drive_labels_v2beta_field_selection_options_choice_applied_capabilities.GoogleAppsDriveLabelsV2betaFieldSelectionOptionsChoiceAppliedCapabilities(
                        can_read = True, 
                        can_search = True, 
                        can_select = True, ), 
                    create_time = '', 
                    creator = openapi_client.models.google_apps_drive_labels_v2beta_user_info.GoogleAppsDriveLabelsV2betaUserInfo(
                        person = '', ), 
                    disable_time = '', 
                    disabler = openapi_client.models.google_apps_drive_labels_v2beta_user_info.GoogleAppsDriveLabelsV2betaUserInfo(
                        person = '', ), 
                    display_hints = openapi_client.models.google_apps_drive_labels_v2beta_field_selection_options_choice_display_hints.GoogleAppsDriveLabelsV2betaFieldSelectionOptionsChoiceDisplayHints(
                        badge_colors = openapi_client.models.google_apps_drive_labels_v2beta_badge_colors.GoogleAppsDriveLabelsV2betaBadgeColors(
                            background_color = openapi_client.models.google_type_color.GoogleTypeColor(
                                alpha = 1.337, 
                                blue = 1.337, 
                                green = 1.337, 
                                red = 1.337, ), 
                            foreground_color = openapi_client.models.google_type_color.GoogleTypeColor(
                                alpha = 1.337, 
                                blue = 1.337, 
                                green = 1.337, 
                                red = 1.337, ), 
                            solo_color = , ), 
                        badge_priority = '', 
                        dark_badge_colors = openapi_client.models.google_apps_drive_labels_v2beta_badge_colors.GoogleAppsDriveLabelsV2betaBadgeColors(), 
                        disabled = True, 
                        hidden_in_search = True, 
                        shown_in_apply = True, ), 
                    id = '', 
                    lifecycle = openapi_client.models.google_apps_drive_labels_v2beta_lifecycle.GoogleAppsDriveLabelsV2betaLifecycle(
                        disabled_policy = openapi_client.models.google_apps_drive_labels_v2beta_lifecycle_disabled_policy.GoogleAppsDriveLabelsV2betaLifecycleDisabledPolicy(
                            hide_in_search = True, 
                            show_in_apply = True, ), 
                        has_unpublished_changes = True, 
                        state = 'STATE_UNSPECIFIED', ), 
                    lock_status = openapi_client.models.google_apps_drive_labels_v2beta_lock_status.GoogleAppsDriveLabelsV2betaLockStatus(
                        locked = True, ), 
                    properties = openapi_client.models.google_apps_drive_labels_v2beta_field_selection_options_choice_properties.GoogleAppsDriveLabelsV2betaFieldSelectionOptionsChoiceProperties(
                        badge_config = openapi_client.models.google_apps_drive_labels_v2beta_badge_config.GoogleAppsDriveLabelsV2betaBadgeConfig(
                            color = , 
                            priority_override = '', ), 
                        description = '', 
                        display_name = '', 
                        insert_before_choice = '', ), 
                    publish_time = '', 
                    publisher = , 
                    schema_capabilities = openapi_client.models.google_apps_drive_labels_v2beta_field_selection_options_choice_schema_capabilities.GoogleAppsDriveLabelsV2betaFieldSelectionOptionsChoiceSchemaCapabilities(
                        can_delete = True, 
                        can_disable = True, 
                        can_enable = True, 
                        can_update = True, ), 
                    update_time = '', 
                    updater = , ),
                field_id = ''
            )
        else:
            return GoogleAppsDriveLabelsV2betaDeltaUpdateLabelRequestCreateSelectionChoiceRequest(
        )
        """

    def testGoogleAppsDriveLabelsV2betaDeltaUpdateLabelRequestCreateSelectionChoiceRequest(self):
        """Test GoogleAppsDriveLabelsV2betaDeltaUpdateLabelRequestCreateSelectionChoiceRequest"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

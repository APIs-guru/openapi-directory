# coding: utf-8

"""
    Drive Labels API

    An API for managing Drive Labels

    The version of the OpenAPI document: v2beta
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_apps_drive_labels_v2beta_label_lock_capabilities import GoogleAppsDriveLabelsV2betaLabelLockCapabilities
from openapi_client.models.google_apps_drive_labels_v2beta_user_info import GoogleAppsDriveLabelsV2betaUserInfo
from typing import Optional, Set
from typing_extensions import Self

class GoogleAppsDriveLabelsV2betaLabelLock(BaseModel):
    """
    A Lock that can be applied to a Label, Field, or Choice.
    """ # noqa: E501
    capabilities: Optional[GoogleAppsDriveLabelsV2betaLabelLockCapabilities] = None
    choice_id: Optional[StrictStr] = Field(default=None, description="The ID of the Selection Field Choice that should be locked. If present, `field_id` must also be present.", alias="choiceId")
    create_time: Optional[StrictStr] = Field(default=None, description="Output only. The time this LabelLock was created.", alias="createTime")
    creator: Optional[GoogleAppsDriveLabelsV2betaUserInfo] = None
    delete_time: Optional[StrictStr] = Field(default=None, description="Output only. A timestamp indicating when this LabelLock was scheduled for deletion. This will be present only if this LabelLock is in the DELETING state.", alias="deleteTime")
    field_id: Optional[StrictStr] = Field(default=None, description="The ID of the Field that should be locked. Empty if the whole Label should be locked.", alias="fieldId")
    name: Optional[StrictStr] = Field(default=None, description="Output only. Resource name of this LabelLock.")
    state: Optional[StrictStr] = Field(default=None, description="Output only. This LabelLock's state.")
    __properties: ClassVar[List[str]] = ["capabilities", "choiceId", "createTime", "creator", "deleteTime", "fieldId", "name", "state"]

    @field_validator('state')
    def state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['STATE_UNSPECIFIED', 'ACTIVE', 'DELETING']):
            raise ValueError("must be one of enum values ('STATE_UNSPECIFIED', 'ACTIVE', 'DELETING')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleAppsDriveLabelsV2betaLabelLock from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "create_time",
            "delete_time",
            "name",
            "state",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of capabilities
        if self.capabilities:
            _dict['capabilities'] = self.capabilities.to_dict()
        # override the default output from pydantic by calling `to_dict()` of creator
        if self.creator:
            _dict['creator'] = self.creator.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleAppsDriveLabelsV2betaLabelLock from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "capabilities": GoogleAppsDriveLabelsV2betaLabelLockCapabilities.from_dict(obj["capabilities"]) if obj.get("capabilities") is not None else None,
            "choiceId": obj.get("choiceId"),
            "createTime": obj.get("createTime"),
            "creator": GoogleAppsDriveLabelsV2betaUserInfo.from_dict(obj["creator"]) if obj.get("creator") is not None else None,
            "deleteTime": obj.get("deleteTime"),
            "fieldId": obj.get("fieldId"),
            "name": obj.get("name"),
            "state": obj.get("state")
        })
        return _obj



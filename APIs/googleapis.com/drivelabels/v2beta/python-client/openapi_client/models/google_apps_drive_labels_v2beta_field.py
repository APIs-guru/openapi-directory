# coding: utf-8

"""
    Drive Labels API

    An API for managing Drive Labels

    The version of the OpenAPI document: v2beta
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_apps_drive_labels_v2beta_field_applied_capabilities import GoogleAppsDriveLabelsV2betaFieldAppliedCapabilities
from openapi_client.models.google_apps_drive_labels_v2beta_field_date_options import GoogleAppsDriveLabelsV2betaFieldDateOptions
from openapi_client.models.google_apps_drive_labels_v2beta_field_display_hints import GoogleAppsDriveLabelsV2betaFieldDisplayHints
from openapi_client.models.google_apps_drive_labels_v2beta_field_integer_options import GoogleAppsDriveLabelsV2betaFieldIntegerOptions
from openapi_client.models.google_apps_drive_labels_v2beta_field_properties import GoogleAppsDriveLabelsV2betaFieldProperties
from openapi_client.models.google_apps_drive_labels_v2beta_field_schema_capabilities import GoogleAppsDriveLabelsV2betaFieldSchemaCapabilities
from openapi_client.models.google_apps_drive_labels_v2beta_field_selection_options import GoogleAppsDriveLabelsV2betaFieldSelectionOptions
from openapi_client.models.google_apps_drive_labels_v2beta_field_text_options import GoogleAppsDriveLabelsV2betaFieldTextOptions
from openapi_client.models.google_apps_drive_labels_v2beta_field_user_options import GoogleAppsDriveLabelsV2betaFieldUserOptions
from openapi_client.models.google_apps_drive_labels_v2beta_lifecycle import GoogleAppsDriveLabelsV2betaLifecycle
from openapi_client.models.google_apps_drive_labels_v2beta_lock_status import GoogleAppsDriveLabelsV2betaLockStatus
from openapi_client.models.google_apps_drive_labels_v2beta_user_info import GoogleAppsDriveLabelsV2betaUserInfo
from typing import Optional, Set
from typing_extensions import Self

class GoogleAppsDriveLabelsV2betaField(BaseModel):
    """
    Defines a field that has a display name, data type, and other configuration options. This field defines the kind of metadata that may be set on a Drive item.
    """ # noqa: E501
    applied_capabilities: Optional[GoogleAppsDriveLabelsV2betaFieldAppliedCapabilities] = Field(default=None, alias="appliedCapabilities")
    create_time: Optional[StrictStr] = Field(default=None, description="Output only. The time this field was created.", alias="createTime")
    creator: Optional[GoogleAppsDriveLabelsV2betaUserInfo] = None
    date_options: Optional[GoogleAppsDriveLabelsV2betaFieldDateOptions] = Field(default=None, alias="dateOptions")
    disable_time: Optional[StrictStr] = Field(default=None, description="Output only. The time this field was disabled. This value has no meaning when the field is not disabled.", alias="disableTime")
    disabler: Optional[GoogleAppsDriveLabelsV2betaUserInfo] = None
    display_hints: Optional[GoogleAppsDriveLabelsV2betaFieldDisplayHints] = Field(default=None, alias="displayHints")
    id: Optional[StrictStr] = Field(default=None, description="Output only. The key of a field, unique within a label or library. This value is autogenerated. Matches the regex: `([a-zA-Z0-9])+`")
    integer_options: Optional[GoogleAppsDriveLabelsV2betaFieldIntegerOptions] = Field(default=None, alias="integerOptions")
    lifecycle: Optional[GoogleAppsDriveLabelsV2betaLifecycle] = None
    lock_status: Optional[GoogleAppsDriveLabelsV2betaLockStatus] = Field(default=None, alias="lockStatus")
    properties: Optional[GoogleAppsDriveLabelsV2betaFieldProperties] = None
    publisher: Optional[GoogleAppsDriveLabelsV2betaUserInfo] = None
    query_key: Optional[StrictStr] = Field(default=None, description="Output only. The key to use when constructing Drive search queries to find files based on values defined for this field on files. For example, \"`{query_key}` > 2001-01-01\".", alias="queryKey")
    schema_capabilities: Optional[GoogleAppsDriveLabelsV2betaFieldSchemaCapabilities] = Field(default=None, alias="schemaCapabilities")
    selection_options: Optional[GoogleAppsDriveLabelsV2betaFieldSelectionOptions] = Field(default=None, alias="selectionOptions")
    text_options: Optional[GoogleAppsDriveLabelsV2betaFieldTextOptions] = Field(default=None, alias="textOptions")
    update_time: Optional[StrictStr] = Field(default=None, description="Output only. The time this field was updated.", alias="updateTime")
    updater: Optional[GoogleAppsDriveLabelsV2betaUserInfo] = None
    user_options: Optional[GoogleAppsDriveLabelsV2betaFieldUserOptions] = Field(default=None, alias="userOptions")
    __properties: ClassVar[List[str]] = ["appliedCapabilities", "createTime", "creator", "dateOptions", "disableTime", "disabler", "displayHints", "id", "integerOptions", "lifecycle", "lockStatus", "properties", "publisher", "queryKey", "schemaCapabilities", "selectionOptions", "textOptions", "updateTime", "updater", "userOptions"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleAppsDriveLabelsV2betaField from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "create_time",
            "disable_time",
            "id",
            "query_key",
            "update_time",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of applied_capabilities
        if self.applied_capabilities:
            _dict['appliedCapabilities'] = self.applied_capabilities.to_dict()
        # override the default output from pydantic by calling `to_dict()` of creator
        if self.creator:
            _dict['creator'] = self.creator.to_dict()
        # override the default output from pydantic by calling `to_dict()` of date_options
        if self.date_options:
            _dict['dateOptions'] = self.date_options.to_dict()
        # override the default output from pydantic by calling `to_dict()` of disabler
        if self.disabler:
            _dict['disabler'] = self.disabler.to_dict()
        # override the default output from pydantic by calling `to_dict()` of display_hints
        if self.display_hints:
            _dict['displayHints'] = self.display_hints.to_dict()
        # override the default output from pydantic by calling `to_dict()` of integer_options
        if self.integer_options:
            _dict['integerOptions'] = self.integer_options.to_dict()
        # override the default output from pydantic by calling `to_dict()` of lifecycle
        if self.lifecycle:
            _dict['lifecycle'] = self.lifecycle.to_dict()
        # override the default output from pydantic by calling `to_dict()` of lock_status
        if self.lock_status:
            _dict['lockStatus'] = self.lock_status.to_dict()
        # override the default output from pydantic by calling `to_dict()` of properties
        if self.properties:
            _dict['properties'] = self.properties.to_dict()
        # override the default output from pydantic by calling `to_dict()` of publisher
        if self.publisher:
            _dict['publisher'] = self.publisher.to_dict()
        # override the default output from pydantic by calling `to_dict()` of schema_capabilities
        if self.schema_capabilities:
            _dict['schemaCapabilities'] = self.schema_capabilities.to_dict()
        # override the default output from pydantic by calling `to_dict()` of selection_options
        if self.selection_options:
            _dict['selectionOptions'] = self.selection_options.to_dict()
        # override the default output from pydantic by calling `to_dict()` of text_options
        if self.text_options:
            _dict['textOptions'] = self.text_options.to_dict()
        # override the default output from pydantic by calling `to_dict()` of updater
        if self.updater:
            _dict['updater'] = self.updater.to_dict()
        # override the default output from pydantic by calling `to_dict()` of user_options
        if self.user_options:
            _dict['userOptions'] = self.user_options.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleAppsDriveLabelsV2betaField from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "appliedCapabilities": GoogleAppsDriveLabelsV2betaFieldAppliedCapabilities.from_dict(obj["appliedCapabilities"]) if obj.get("appliedCapabilities") is not None else None,
            "createTime": obj.get("createTime"),
            "creator": GoogleAppsDriveLabelsV2betaUserInfo.from_dict(obj["creator"]) if obj.get("creator") is not None else None,
            "dateOptions": GoogleAppsDriveLabelsV2betaFieldDateOptions.from_dict(obj["dateOptions"]) if obj.get("dateOptions") is not None else None,
            "disableTime": obj.get("disableTime"),
            "disabler": GoogleAppsDriveLabelsV2betaUserInfo.from_dict(obj["disabler"]) if obj.get("disabler") is not None else None,
            "displayHints": GoogleAppsDriveLabelsV2betaFieldDisplayHints.from_dict(obj["displayHints"]) if obj.get("displayHints") is not None else None,
            "id": obj.get("id"),
            "integerOptions": GoogleAppsDriveLabelsV2betaFieldIntegerOptions.from_dict(obj["integerOptions"]) if obj.get("integerOptions") is not None else None,
            "lifecycle": GoogleAppsDriveLabelsV2betaLifecycle.from_dict(obj["lifecycle"]) if obj.get("lifecycle") is not None else None,
            "lockStatus": GoogleAppsDriveLabelsV2betaLockStatus.from_dict(obj["lockStatus"]) if obj.get("lockStatus") is not None else None,
            "properties": GoogleAppsDriveLabelsV2betaFieldProperties.from_dict(obj["properties"]) if obj.get("properties") is not None else None,
            "publisher": GoogleAppsDriveLabelsV2betaUserInfo.from_dict(obj["publisher"]) if obj.get("publisher") is not None else None,
            "queryKey": obj.get("queryKey"),
            "schemaCapabilities": GoogleAppsDriveLabelsV2betaFieldSchemaCapabilities.from_dict(obj["schemaCapabilities"]) if obj.get("schemaCapabilities") is not None else None,
            "selectionOptions": GoogleAppsDriveLabelsV2betaFieldSelectionOptions.from_dict(obj["selectionOptions"]) if obj.get("selectionOptions") is not None else None,
            "textOptions": GoogleAppsDriveLabelsV2betaFieldTextOptions.from_dict(obj["textOptions"]) if obj.get("textOptions") is not None else None,
            "updateTime": obj.get("updateTime"),
            "updater": GoogleAppsDriveLabelsV2betaUserInfo.from_dict(obj["updater"]) if obj.get("updater") is not None else None,
            "userOptions": GoogleAppsDriveLabelsV2betaFieldUserOptions.from_dict(obj["userOptions"]) if obj.get("userOptions") is not None else None
        })
        return _obj



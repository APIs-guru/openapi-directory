# coding: utf-8

"""
    Drive Labels API

    An API for managing Drive Labels

    The version of the OpenAPI document: v2beta
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_apps_drive_labels_v2beta_lifecycle_disabled_policy import GoogleAppsDriveLabelsV2betaLifecycleDisabledPolicy
from typing import Optional, Set
from typing_extensions import Self

class GoogleAppsDriveLabelsV2betaLifecycle(BaseModel):
    """
    The lifecycle state of an object, such as label, field, or choice. The lifecycle enforces the following transitions: * `UNPUBLISHED_DRAFT` (starting state) * `UNPUBLISHED_DRAFT` -> `PUBLISHED` * `UNPUBLISHED_DRAFT` -> (Deleted) * `PUBLISHED` -> `DISABLED` * `DISABLED` -> `PUBLISHED` * `DISABLED` -> (Deleted) The published and disabled states have some distinct characteristics: * Published—Some kinds of changes might be made to an object in this state, in which case `has_unpublished_changes` will be true. Also, some kinds of changes are not permitted. Generally, any change that would invalidate or cause new restrictions on existing metadata related to the label are rejected. * Disabled—When disabled, the configured `DisabledPolicy` takes effect.
    """ # noqa: E501
    disabled_policy: Optional[GoogleAppsDriveLabelsV2betaLifecycleDisabledPolicy] = Field(default=None, alias="disabledPolicy")
    has_unpublished_changes: Optional[StrictBool] = Field(default=None, description="Output only. Whether the object associated with this lifecycle has unpublished changes.", alias="hasUnpublishedChanges")
    state: Optional[StrictStr] = Field(default=None, description="Output only. The state of the object associated with this lifecycle.")
    __properties: ClassVar[List[str]] = ["disabledPolicy", "hasUnpublishedChanges", "state"]

    @field_validator('state')
    def state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['STATE_UNSPECIFIED', 'UNPUBLISHED_DRAFT', 'PUBLISHED', 'DISABLED', 'DELETED']):
            raise ValueError("must be one of enum values ('STATE_UNSPECIFIED', 'UNPUBLISHED_DRAFT', 'PUBLISHED', 'DISABLED', 'DELETED')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleAppsDriveLabelsV2betaLifecycle from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "has_unpublished_changes",
            "state",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of disabled_policy
        if self.disabled_policy:
            _dict['disabledPolicy'] = self.disabled_policy.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleAppsDriveLabelsV2betaLifecycle from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "disabledPolicy": GoogleAppsDriveLabelsV2betaLifecycleDisabledPolicy.from_dict(obj["disabledPolicy"]) if obj.get("disabledPolicy") is not None else None,
            "hasUnpublishedChanges": obj.get("hasUnpublishedChanges"),
            "state": obj.get("state")
        })
        return _obj



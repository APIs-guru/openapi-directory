# coding: utf-8

"""
    Drive Labels API

    An API for managing Drive Labels

    The version of the OpenAPI document: v2beta
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class GoogleAppsDriveLabelsV2betaLabelPermission(BaseModel):
    """
    The permission that applies to a principal (user, group, audience) on a label.
    """ # noqa: E501
    audience: Optional[StrictStr] = Field(default=None, description="Audience to grant a role to. The magic value of `audiences/default` may be used to apply the role to the default audience in the context of the organization that owns the Label.")
    email: Optional[StrictStr] = Field(default=None, description="Specifies the email address for a user or group pricinpal. Not populated for audience principals. User and Group permissions may only be inserted using email address. On update requests, if email address is specified, no principal should be specified.")
    group: Optional[StrictStr] = Field(default=None, description="Group resource name.")
    name: Optional[StrictStr] = Field(default=None, description="Resource name of this permission.")
    person: Optional[StrictStr] = Field(default=None, description="Person resource name.")
    role: Optional[StrictStr] = Field(default=None, description="The role the principal should have.")
    __properties: ClassVar[List[str]] = ["audience", "email", "group", "name", "person", "role"]

    @field_validator('role')
    def role_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['LABEL_ROLE_UNSPECIFIED', 'READER', 'APPLIER', 'ORGANIZER', 'EDITOR']):
            raise ValueError("must be one of enum values ('LABEL_ROLE_UNSPECIFIED', 'READER', 'APPLIER', 'ORGANIZER', 'EDITOR')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleAppsDriveLabelsV2betaLabelPermission from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleAppsDriveLabelsV2betaLabelPermission from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "audience": obj.get("audience"),
            "email": obj.get("email"),
            "group": obj.get("group"),
            "name": obj.get("name"),
            "person": obj.get("person"),
            "role": obj.get("role")
        })
        return _obj



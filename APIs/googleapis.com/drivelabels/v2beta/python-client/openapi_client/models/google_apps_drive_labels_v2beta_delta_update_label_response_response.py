# coding: utf-8

"""
    Drive Labels API

    An API for managing Drive Labels

    The version of the OpenAPI document: v2beta
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_apps_drive_labels_v2beta_delta_update_label_response_create_field_response import GoogleAppsDriveLabelsV2betaDeltaUpdateLabelResponseCreateFieldResponse
from openapi_client.models.google_apps_drive_labels_v2beta_delta_update_label_response_create_selection_choice_response import GoogleAppsDriveLabelsV2betaDeltaUpdateLabelResponseCreateSelectionChoiceResponse
from openapi_client.models.google_apps_drive_labels_v2beta_delta_update_label_response_update_field_properties_response import GoogleAppsDriveLabelsV2betaDeltaUpdateLabelResponseUpdateFieldPropertiesResponse
from openapi_client.models.google_apps_drive_labels_v2beta_delta_update_label_response_update_selection_choice_properties_response import GoogleAppsDriveLabelsV2betaDeltaUpdateLabelResponseUpdateSelectionChoicePropertiesResponse
from typing import Optional, Set
from typing_extensions import Self

class GoogleAppsDriveLabelsV2betaDeltaUpdateLabelResponseResponse(BaseModel):
    """
    A single response from an update.
    """ # noqa: E501
    create_field: Optional[GoogleAppsDriveLabelsV2betaDeltaUpdateLabelResponseCreateFieldResponse] = Field(default=None, alias="createField")
    create_selection_choice: Optional[GoogleAppsDriveLabelsV2betaDeltaUpdateLabelResponseCreateSelectionChoiceResponse] = Field(default=None, alias="createSelectionChoice")
    delete_field: Optional[Dict[str, Any]] = Field(default=None, description="Response following Field delete.", alias="deleteField")
    delete_selection_choice: Optional[Dict[str, Any]] = Field(default=None, description="Response following Choice delete.", alias="deleteSelectionChoice")
    disable_field: Optional[Dict[str, Any]] = Field(default=None, description="Response following Field disable.", alias="disableField")
    disable_selection_choice: Optional[Dict[str, Any]] = Field(default=None, description="Response following Choice disable.", alias="disableSelectionChoice")
    enable_field: Optional[Dict[str, Any]] = Field(default=None, description="Response following Field enable.", alias="enableField")
    enable_selection_choice: Optional[Dict[str, Any]] = Field(default=None, description="Response following Choice enable.", alias="enableSelectionChoice")
    update_field: Optional[GoogleAppsDriveLabelsV2betaDeltaUpdateLabelResponseUpdateFieldPropertiesResponse] = Field(default=None, alias="updateField")
    update_field_type: Optional[Dict[str, Any]] = Field(default=None, description="Response following update to Field type.", alias="updateFieldType")
    update_label: Optional[Dict[str, Any]] = Field(default=None, description="Response following update to Label properties.", alias="updateLabel")
    update_selection_choice_properties: Optional[GoogleAppsDriveLabelsV2betaDeltaUpdateLabelResponseUpdateSelectionChoicePropertiesResponse] = Field(default=None, alias="updateSelectionChoiceProperties")
    __properties: ClassVar[List[str]] = ["createField", "createSelectionChoice", "deleteField", "deleteSelectionChoice", "disableField", "disableSelectionChoice", "enableField", "enableSelectionChoice", "updateField", "updateFieldType", "updateLabel", "updateSelectionChoiceProperties"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleAppsDriveLabelsV2betaDeltaUpdateLabelResponseResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of create_field
        if self.create_field:
            _dict['createField'] = self.create_field.to_dict()
        # override the default output from pydantic by calling `to_dict()` of create_selection_choice
        if self.create_selection_choice:
            _dict['createSelectionChoice'] = self.create_selection_choice.to_dict()
        # override the default output from pydantic by calling `to_dict()` of update_field
        if self.update_field:
            _dict['updateField'] = self.update_field.to_dict()
        # override the default output from pydantic by calling `to_dict()` of update_selection_choice_properties
        if self.update_selection_choice_properties:
            _dict['updateSelectionChoiceProperties'] = self.update_selection_choice_properties.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleAppsDriveLabelsV2betaDeltaUpdateLabelResponseResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "createField": GoogleAppsDriveLabelsV2betaDeltaUpdateLabelResponseCreateFieldResponse.from_dict(obj["createField"]) if obj.get("createField") is not None else None,
            "createSelectionChoice": GoogleAppsDriveLabelsV2betaDeltaUpdateLabelResponseCreateSelectionChoiceResponse.from_dict(obj["createSelectionChoice"]) if obj.get("createSelectionChoice") is not None else None,
            "deleteField": obj.get("deleteField"),
            "deleteSelectionChoice": obj.get("deleteSelectionChoice"),
            "disableField": obj.get("disableField"),
            "disableSelectionChoice": obj.get("disableSelectionChoice"),
            "enableField": obj.get("enableField"),
            "enableSelectionChoice": obj.get("enableSelectionChoice"),
            "updateField": GoogleAppsDriveLabelsV2betaDeltaUpdateLabelResponseUpdateFieldPropertiesResponse.from_dict(obj["updateField"]) if obj.get("updateField") is not None else None,
            "updateFieldType": obj.get("updateFieldType"),
            "updateLabel": obj.get("updateLabel"),
            "updateSelectionChoiceProperties": GoogleAppsDriveLabelsV2betaDeltaUpdateLabelResponseUpdateSelectionChoicePropertiesResponse.from_dict(obj["updateSelectionChoiceProperties"]) if obj.get("updateSelectionChoiceProperties") is not None else None
        })
        return _obj



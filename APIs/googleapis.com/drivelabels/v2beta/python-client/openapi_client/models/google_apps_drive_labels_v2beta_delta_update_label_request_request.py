# coding: utf-8

"""
    Drive Labels API

    An API for managing Drive Labels

    The version of the OpenAPI document: v2beta
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_apps_drive_labels_v2beta_delta_update_label_request_create_field_request import GoogleAppsDriveLabelsV2betaDeltaUpdateLabelRequestCreateFieldRequest
from openapi_client.models.google_apps_drive_labels_v2beta_delta_update_label_request_create_selection_choice_request import GoogleAppsDriveLabelsV2betaDeltaUpdateLabelRequestCreateSelectionChoiceRequest
from openapi_client.models.google_apps_drive_labels_v2beta_delta_update_label_request_delete_field_request import GoogleAppsDriveLabelsV2betaDeltaUpdateLabelRequestDeleteFieldRequest
from openapi_client.models.google_apps_drive_labels_v2beta_delta_update_label_request_delete_selection_choice_request import GoogleAppsDriveLabelsV2betaDeltaUpdateLabelRequestDeleteSelectionChoiceRequest
from openapi_client.models.google_apps_drive_labels_v2beta_delta_update_label_request_disable_field_request import GoogleAppsDriveLabelsV2betaDeltaUpdateLabelRequestDisableFieldRequest
from openapi_client.models.google_apps_drive_labels_v2beta_delta_update_label_request_disable_selection_choice_request import GoogleAppsDriveLabelsV2betaDeltaUpdateLabelRequestDisableSelectionChoiceRequest
from openapi_client.models.google_apps_drive_labels_v2beta_delta_update_label_request_enable_field_request import GoogleAppsDriveLabelsV2betaDeltaUpdateLabelRequestEnableFieldRequest
from openapi_client.models.google_apps_drive_labels_v2beta_delta_update_label_request_enable_selection_choice_request import GoogleAppsDriveLabelsV2betaDeltaUpdateLabelRequestEnableSelectionChoiceRequest
from openapi_client.models.google_apps_drive_labels_v2beta_delta_update_label_request_update_field_properties_request import GoogleAppsDriveLabelsV2betaDeltaUpdateLabelRequestUpdateFieldPropertiesRequest
from openapi_client.models.google_apps_drive_labels_v2beta_delta_update_label_request_update_field_type_request import GoogleAppsDriveLabelsV2betaDeltaUpdateLabelRequestUpdateFieldTypeRequest
from openapi_client.models.google_apps_drive_labels_v2beta_delta_update_label_request_update_label_properties_request import GoogleAppsDriveLabelsV2betaDeltaUpdateLabelRequestUpdateLabelPropertiesRequest
from openapi_client.models.google_apps_drive_labels_v2beta_delta_update_label_request_update_selection_choice_properties_request import GoogleAppsDriveLabelsV2betaDeltaUpdateLabelRequestUpdateSelectionChoicePropertiesRequest
from typing import Optional, Set
from typing_extensions import Self

class GoogleAppsDriveLabelsV2betaDeltaUpdateLabelRequestRequest(BaseModel):
    """
    A single kind of update to apply to a Label.
    """ # noqa: E501
    create_field: Optional[GoogleAppsDriveLabelsV2betaDeltaUpdateLabelRequestCreateFieldRequest] = Field(default=None, alias="createField")
    create_selection_choice: Optional[GoogleAppsDriveLabelsV2betaDeltaUpdateLabelRequestCreateSelectionChoiceRequest] = Field(default=None, alias="createSelectionChoice")
    delete_field: Optional[GoogleAppsDriveLabelsV2betaDeltaUpdateLabelRequestDeleteFieldRequest] = Field(default=None, alias="deleteField")
    delete_selection_choice: Optional[GoogleAppsDriveLabelsV2betaDeltaUpdateLabelRequestDeleteSelectionChoiceRequest] = Field(default=None, alias="deleteSelectionChoice")
    disable_field: Optional[GoogleAppsDriveLabelsV2betaDeltaUpdateLabelRequestDisableFieldRequest] = Field(default=None, alias="disableField")
    disable_selection_choice: Optional[GoogleAppsDriveLabelsV2betaDeltaUpdateLabelRequestDisableSelectionChoiceRequest] = Field(default=None, alias="disableSelectionChoice")
    enable_field: Optional[GoogleAppsDriveLabelsV2betaDeltaUpdateLabelRequestEnableFieldRequest] = Field(default=None, alias="enableField")
    enable_selection_choice: Optional[GoogleAppsDriveLabelsV2betaDeltaUpdateLabelRequestEnableSelectionChoiceRequest] = Field(default=None, alias="enableSelectionChoice")
    update_field: Optional[GoogleAppsDriveLabelsV2betaDeltaUpdateLabelRequestUpdateFieldPropertiesRequest] = Field(default=None, alias="updateField")
    update_field_type: Optional[GoogleAppsDriveLabelsV2betaDeltaUpdateLabelRequestUpdateFieldTypeRequest] = Field(default=None, alias="updateFieldType")
    update_label: Optional[GoogleAppsDriveLabelsV2betaDeltaUpdateLabelRequestUpdateLabelPropertiesRequest] = Field(default=None, alias="updateLabel")
    update_selection_choice_properties: Optional[GoogleAppsDriveLabelsV2betaDeltaUpdateLabelRequestUpdateSelectionChoicePropertiesRequest] = Field(default=None, alias="updateSelectionChoiceProperties")
    __properties: ClassVar[List[str]] = ["createField", "createSelectionChoice", "deleteField", "deleteSelectionChoice", "disableField", "disableSelectionChoice", "enableField", "enableSelectionChoice", "updateField", "updateFieldType", "updateLabel", "updateSelectionChoiceProperties"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleAppsDriveLabelsV2betaDeltaUpdateLabelRequestRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of create_field
        if self.create_field:
            _dict['createField'] = self.create_field.to_dict()
        # override the default output from pydantic by calling `to_dict()` of create_selection_choice
        if self.create_selection_choice:
            _dict['createSelectionChoice'] = self.create_selection_choice.to_dict()
        # override the default output from pydantic by calling `to_dict()` of delete_field
        if self.delete_field:
            _dict['deleteField'] = self.delete_field.to_dict()
        # override the default output from pydantic by calling `to_dict()` of delete_selection_choice
        if self.delete_selection_choice:
            _dict['deleteSelectionChoice'] = self.delete_selection_choice.to_dict()
        # override the default output from pydantic by calling `to_dict()` of disable_field
        if self.disable_field:
            _dict['disableField'] = self.disable_field.to_dict()
        # override the default output from pydantic by calling `to_dict()` of disable_selection_choice
        if self.disable_selection_choice:
            _dict['disableSelectionChoice'] = self.disable_selection_choice.to_dict()
        # override the default output from pydantic by calling `to_dict()` of enable_field
        if self.enable_field:
            _dict['enableField'] = self.enable_field.to_dict()
        # override the default output from pydantic by calling `to_dict()` of enable_selection_choice
        if self.enable_selection_choice:
            _dict['enableSelectionChoice'] = self.enable_selection_choice.to_dict()
        # override the default output from pydantic by calling `to_dict()` of update_field
        if self.update_field:
            _dict['updateField'] = self.update_field.to_dict()
        # override the default output from pydantic by calling `to_dict()` of update_field_type
        if self.update_field_type:
            _dict['updateFieldType'] = self.update_field_type.to_dict()
        # override the default output from pydantic by calling `to_dict()` of update_label
        if self.update_label:
            _dict['updateLabel'] = self.update_label.to_dict()
        # override the default output from pydantic by calling `to_dict()` of update_selection_choice_properties
        if self.update_selection_choice_properties:
            _dict['updateSelectionChoiceProperties'] = self.update_selection_choice_properties.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleAppsDriveLabelsV2betaDeltaUpdateLabelRequestRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "createField": GoogleAppsDriveLabelsV2betaDeltaUpdateLabelRequestCreateFieldRequest.from_dict(obj["createField"]) if obj.get("createField") is not None else None,
            "createSelectionChoice": GoogleAppsDriveLabelsV2betaDeltaUpdateLabelRequestCreateSelectionChoiceRequest.from_dict(obj["createSelectionChoice"]) if obj.get("createSelectionChoice") is not None else None,
            "deleteField": GoogleAppsDriveLabelsV2betaDeltaUpdateLabelRequestDeleteFieldRequest.from_dict(obj["deleteField"]) if obj.get("deleteField") is not None else None,
            "deleteSelectionChoice": GoogleAppsDriveLabelsV2betaDeltaUpdateLabelRequestDeleteSelectionChoiceRequest.from_dict(obj["deleteSelectionChoice"]) if obj.get("deleteSelectionChoice") is not None else None,
            "disableField": GoogleAppsDriveLabelsV2betaDeltaUpdateLabelRequestDisableFieldRequest.from_dict(obj["disableField"]) if obj.get("disableField") is not None else None,
            "disableSelectionChoice": GoogleAppsDriveLabelsV2betaDeltaUpdateLabelRequestDisableSelectionChoiceRequest.from_dict(obj["disableSelectionChoice"]) if obj.get("disableSelectionChoice") is not None else None,
            "enableField": GoogleAppsDriveLabelsV2betaDeltaUpdateLabelRequestEnableFieldRequest.from_dict(obj["enableField"]) if obj.get("enableField") is not None else None,
            "enableSelectionChoice": GoogleAppsDriveLabelsV2betaDeltaUpdateLabelRequestEnableSelectionChoiceRequest.from_dict(obj["enableSelectionChoice"]) if obj.get("enableSelectionChoice") is not None else None,
            "updateField": GoogleAppsDriveLabelsV2betaDeltaUpdateLabelRequestUpdateFieldPropertiesRequest.from_dict(obj["updateField"]) if obj.get("updateField") is not None else None,
            "updateFieldType": GoogleAppsDriveLabelsV2betaDeltaUpdateLabelRequestUpdateFieldTypeRequest.from_dict(obj["updateFieldType"]) if obj.get("updateFieldType") is not None else None,
            "updateLabel": GoogleAppsDriveLabelsV2betaDeltaUpdateLabelRequestUpdateLabelPropertiesRequest.from_dict(obj["updateLabel"]) if obj.get("updateLabel") is not None else None,
            "updateSelectionChoiceProperties": GoogleAppsDriveLabelsV2betaDeltaUpdateLabelRequestUpdateSelectionChoicePropertiesRequest.from_dict(obj["updateSelectionChoiceProperties"]) if obj.get("updateSelectionChoiceProperties") is not None else None
        })
        return _obj



# coding: utf-8

"""
    Drive Labels API

    An API for managing Drive Labels

    The version of the OpenAPI document: v2beta
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_apps_drive_labels_v2beta_date_limits import GoogleAppsDriveLabelsV2betaDateLimits
from openapi_client.models.google_apps_drive_labels_v2beta_integer_limits import GoogleAppsDriveLabelsV2betaIntegerLimits
from openapi_client.models.google_apps_drive_labels_v2beta_long_text_limits import GoogleAppsDriveLabelsV2betaLongTextLimits
from openapi_client.models.google_apps_drive_labels_v2beta_selection_limits import GoogleAppsDriveLabelsV2betaSelectionLimits
from openapi_client.models.google_apps_drive_labels_v2beta_text_limits import GoogleAppsDriveLabelsV2betaTextLimits
from openapi_client.models.google_apps_drive_labels_v2beta_user_limits import GoogleAppsDriveLabelsV2betaUserLimits
from typing import Optional, Set
from typing_extensions import Self

class GoogleAppsDriveLabelsV2betaFieldLimits(BaseModel):
    """
    Field constants governing the structure of a Field; such as, the maximum title length, minimum and maximum field values or length, etc.
    """ # noqa: E501
    date_limits: Optional[GoogleAppsDriveLabelsV2betaDateLimits] = Field(default=None, alias="dateLimits")
    integer_limits: Optional[GoogleAppsDriveLabelsV2betaIntegerLimits] = Field(default=None, alias="integerLimits")
    long_text_limits: Optional[GoogleAppsDriveLabelsV2betaLongTextLimits] = Field(default=None, alias="longTextLimits")
    max_description_length: Optional[StrictInt] = Field(default=None, description="Limits for Field description, also called help text.", alias="maxDescriptionLength")
    max_display_name_length: Optional[StrictInt] = Field(default=None, description="Limits for Field title.", alias="maxDisplayNameLength")
    max_id_length: Optional[StrictInt] = Field(default=None, description="Max length for the id.", alias="maxIdLength")
    selection_limits: Optional[GoogleAppsDriveLabelsV2betaSelectionLimits] = Field(default=None, alias="selectionLimits")
    text_limits: Optional[GoogleAppsDriveLabelsV2betaTextLimits] = Field(default=None, alias="textLimits")
    user_limits: Optional[GoogleAppsDriveLabelsV2betaUserLimits] = Field(default=None, alias="userLimits")
    __properties: ClassVar[List[str]] = ["dateLimits", "integerLimits", "longTextLimits", "maxDescriptionLength", "maxDisplayNameLength", "maxIdLength", "selectionLimits", "textLimits", "userLimits"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleAppsDriveLabelsV2betaFieldLimits from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of date_limits
        if self.date_limits:
            _dict['dateLimits'] = self.date_limits.to_dict()
        # override the default output from pydantic by calling `to_dict()` of integer_limits
        if self.integer_limits:
            _dict['integerLimits'] = self.integer_limits.to_dict()
        # override the default output from pydantic by calling `to_dict()` of long_text_limits
        if self.long_text_limits:
            _dict['longTextLimits'] = self.long_text_limits.to_dict()
        # override the default output from pydantic by calling `to_dict()` of selection_limits
        if self.selection_limits:
            _dict['selectionLimits'] = self.selection_limits.to_dict()
        # override the default output from pydantic by calling `to_dict()` of text_limits
        if self.text_limits:
            _dict['textLimits'] = self.text_limits.to_dict()
        # override the default output from pydantic by calling `to_dict()` of user_limits
        if self.user_limits:
            _dict['userLimits'] = self.user_limits.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleAppsDriveLabelsV2betaFieldLimits from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "dateLimits": GoogleAppsDriveLabelsV2betaDateLimits.from_dict(obj["dateLimits"]) if obj.get("dateLimits") is not None else None,
            "integerLimits": GoogleAppsDriveLabelsV2betaIntegerLimits.from_dict(obj["integerLimits"]) if obj.get("integerLimits") is not None else None,
            "longTextLimits": GoogleAppsDriveLabelsV2betaLongTextLimits.from_dict(obj["longTextLimits"]) if obj.get("longTextLimits") is not None else None,
            "maxDescriptionLength": obj.get("maxDescriptionLength"),
            "maxDisplayNameLength": obj.get("maxDisplayNameLength"),
            "maxIdLength": obj.get("maxIdLength"),
            "selectionLimits": GoogleAppsDriveLabelsV2betaSelectionLimits.from_dict(obj["selectionLimits"]) if obj.get("selectionLimits") is not None else None,
            "textLimits": GoogleAppsDriveLabelsV2betaTextLimits.from_dict(obj["textLimits"]) if obj.get("textLimits") is not None else None,
            "userLimits": GoogleAppsDriveLabelsV2betaUserLimits.from_dict(obj["userLimits"]) if obj.get("userLimits") is not None else None
        })
        return _obj



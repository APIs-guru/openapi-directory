# coding: utf-8

"""
    Drive Labels API

    An API for managing Drive Labels

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_apps_drive_labels_v2_field import GoogleAppsDriveLabelsV2Field
from openapi_client.models.google_apps_drive_labels_v2_label_applied_capabilities import GoogleAppsDriveLabelsV2LabelAppliedCapabilities
from openapi_client.models.google_apps_drive_labels_v2_label_applied_label_policy import GoogleAppsDriveLabelsV2LabelAppliedLabelPolicy
from openapi_client.models.google_apps_drive_labels_v2_label_display_hints import GoogleAppsDriveLabelsV2LabelDisplayHints
from openapi_client.models.google_apps_drive_labels_v2_label_properties import GoogleAppsDriveLabelsV2LabelProperties
from openapi_client.models.google_apps_drive_labels_v2_label_schema_capabilities import GoogleAppsDriveLabelsV2LabelSchemaCapabilities
from openapi_client.models.google_apps_drive_labels_v2_lifecycle import GoogleAppsDriveLabelsV2Lifecycle
from openapi_client.models.google_apps_drive_labels_v2_lock_status import GoogleAppsDriveLabelsV2LockStatus
from openapi_client.models.google_apps_drive_labels_v2_user_info import GoogleAppsDriveLabelsV2UserInfo
from typing import Optional, Set
from typing_extensions import Self

class GoogleAppsDriveLabelsV2Label(BaseModel):
    """
    A label defines a taxonomy that can be applied to Drive items in order to organize and search across items. Labels can be simple strings, or can contain fields that describe additional metadata that can be further used to organize and search Drive items.
    """ # noqa: E501
    applied_capabilities: Optional[GoogleAppsDriveLabelsV2LabelAppliedCapabilities] = Field(default=None, alias="appliedCapabilities")
    applied_label_policy: Optional[GoogleAppsDriveLabelsV2LabelAppliedLabelPolicy] = Field(default=None, alias="appliedLabelPolicy")
    create_time: Optional[StrictStr] = Field(default=None, description="Output only. The time this label was created.", alias="createTime")
    creator: Optional[GoogleAppsDriveLabelsV2UserInfo] = None
    customer: Optional[StrictStr] = Field(default=None, description="Output only. The customer this label belongs to. For example: \"customers/123abc789.\"")
    disable_time: Optional[StrictStr] = Field(default=None, description="Output only. The time this label was disabled. This value has no meaning when the label is not disabled.", alias="disableTime")
    disabler: Optional[GoogleAppsDriveLabelsV2UserInfo] = None
    display_hints: Optional[GoogleAppsDriveLabelsV2LabelDisplayHints] = Field(default=None, alias="displayHints")
    fields: Optional[List[GoogleAppsDriveLabelsV2Field]] = Field(default=None, description="List of fields in descending priority order.")
    id: Optional[StrictStr] = Field(default=None, description="Output only. Globally unique identifier of this label. ID makes up part of the label `name`, but unlike `name`, ID is consistent between revisions. Matches the regex: `([a-zA-Z0-9])+`")
    label_type: Optional[StrictStr] = Field(default=None, description="Required. The type of label.", alias="labelType")
    learn_more_uri: Optional[StrictStr] = Field(default=None, description="Custom URL to present to users to allow them to learn more about this label and how it should be used.", alias="learnMoreUri")
    lifecycle: Optional[GoogleAppsDriveLabelsV2Lifecycle] = None
    lock_status: Optional[GoogleAppsDriveLabelsV2LockStatus] = Field(default=None, alias="lockStatus")
    name: Optional[StrictStr] = Field(default=None, description="Output only. Resource name of the label. Will be in the form of either: `labels/{id}` or `labels/{id}@{revision_id}` depending on the request. See `id` and `revision_id` below.")
    properties: Optional[GoogleAppsDriveLabelsV2LabelProperties] = None
    publish_time: Optional[StrictStr] = Field(default=None, description="Output only. The time this label was published. This value has no meaning when the label is not published.", alias="publishTime")
    publisher: Optional[GoogleAppsDriveLabelsV2UserInfo] = None
    revision_create_time: Optional[StrictStr] = Field(default=None, description="Output only. The time this label revision was created.", alias="revisionCreateTime")
    revision_creator: Optional[GoogleAppsDriveLabelsV2UserInfo] = Field(default=None, alias="revisionCreator")
    revision_id: Optional[StrictStr] = Field(default=None, description="Output only. Revision ID of the label. Revision ID might be part of the label `name` depending on the request issued. A new revision is created whenever revisioned properties of a label are changed. Matches the regex: `([a-zA-Z0-9])+`", alias="revisionId")
    schema_capabilities: Optional[GoogleAppsDriveLabelsV2LabelSchemaCapabilities] = Field(default=None, alias="schemaCapabilities")
    __properties: ClassVar[List[str]] = ["appliedCapabilities", "appliedLabelPolicy", "createTime", "creator", "customer", "disableTime", "disabler", "displayHints", "fields", "id", "labelType", "learnMoreUri", "lifecycle", "lockStatus", "name", "properties", "publishTime", "publisher", "revisionCreateTime", "revisionCreator", "revisionId", "schemaCapabilities"]

    @field_validator('label_type')
    def label_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['LABEL_TYPE_UNSPECIFIED', 'SHARED', 'ADMIN', 'GOOGLE_APP']):
            raise ValueError("must be one of enum values ('LABEL_TYPE_UNSPECIFIED', 'SHARED', 'ADMIN', 'GOOGLE_APP')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleAppsDriveLabelsV2Label from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "create_time",
            "customer",
            "disable_time",
            "id",
            "name",
            "publish_time",
            "revision_create_time",
            "revision_id",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of applied_capabilities
        if self.applied_capabilities:
            _dict['appliedCapabilities'] = self.applied_capabilities.to_dict()
        # override the default output from pydantic by calling `to_dict()` of applied_label_policy
        if self.applied_label_policy:
            _dict['appliedLabelPolicy'] = self.applied_label_policy.to_dict()
        # override the default output from pydantic by calling `to_dict()` of creator
        if self.creator:
            _dict['creator'] = self.creator.to_dict()
        # override the default output from pydantic by calling `to_dict()` of disabler
        if self.disabler:
            _dict['disabler'] = self.disabler.to_dict()
        # override the default output from pydantic by calling `to_dict()` of display_hints
        if self.display_hints:
            _dict['displayHints'] = self.display_hints.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in fields (list)
        _items = []
        if self.fields:
            for _item_fields in self.fields:
                if _item_fields:
                    _items.append(_item_fields.to_dict())
            _dict['fields'] = _items
        # override the default output from pydantic by calling `to_dict()` of lifecycle
        if self.lifecycle:
            _dict['lifecycle'] = self.lifecycle.to_dict()
        # override the default output from pydantic by calling `to_dict()` of lock_status
        if self.lock_status:
            _dict['lockStatus'] = self.lock_status.to_dict()
        # override the default output from pydantic by calling `to_dict()` of properties
        if self.properties:
            _dict['properties'] = self.properties.to_dict()
        # override the default output from pydantic by calling `to_dict()` of publisher
        if self.publisher:
            _dict['publisher'] = self.publisher.to_dict()
        # override the default output from pydantic by calling `to_dict()` of revision_creator
        if self.revision_creator:
            _dict['revisionCreator'] = self.revision_creator.to_dict()
        # override the default output from pydantic by calling `to_dict()` of schema_capabilities
        if self.schema_capabilities:
            _dict['schemaCapabilities'] = self.schema_capabilities.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleAppsDriveLabelsV2Label from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "appliedCapabilities": GoogleAppsDriveLabelsV2LabelAppliedCapabilities.from_dict(obj["appliedCapabilities"]) if obj.get("appliedCapabilities") is not None else None,
            "appliedLabelPolicy": GoogleAppsDriveLabelsV2LabelAppliedLabelPolicy.from_dict(obj["appliedLabelPolicy"]) if obj.get("appliedLabelPolicy") is not None else None,
            "createTime": obj.get("createTime"),
            "creator": GoogleAppsDriveLabelsV2UserInfo.from_dict(obj["creator"]) if obj.get("creator") is not None else None,
            "customer": obj.get("customer"),
            "disableTime": obj.get("disableTime"),
            "disabler": GoogleAppsDriveLabelsV2UserInfo.from_dict(obj["disabler"]) if obj.get("disabler") is not None else None,
            "displayHints": GoogleAppsDriveLabelsV2LabelDisplayHints.from_dict(obj["displayHints"]) if obj.get("displayHints") is not None else None,
            "fields": [GoogleAppsDriveLabelsV2Field.from_dict(_item) for _item in obj["fields"]] if obj.get("fields") is not None else None,
            "id": obj.get("id"),
            "labelType": obj.get("labelType"),
            "learnMoreUri": obj.get("learnMoreUri"),
            "lifecycle": GoogleAppsDriveLabelsV2Lifecycle.from_dict(obj["lifecycle"]) if obj.get("lifecycle") is not None else None,
            "lockStatus": GoogleAppsDriveLabelsV2LockStatus.from_dict(obj["lockStatus"]) if obj.get("lockStatus") is not None else None,
            "name": obj.get("name"),
            "properties": GoogleAppsDriveLabelsV2LabelProperties.from_dict(obj["properties"]) if obj.get("properties") is not None else None,
            "publishTime": obj.get("publishTime"),
            "publisher": GoogleAppsDriveLabelsV2UserInfo.from_dict(obj["publisher"]) if obj.get("publisher") is not None else None,
            "revisionCreateTime": obj.get("revisionCreateTime"),
            "revisionCreator": GoogleAppsDriveLabelsV2UserInfo.from_dict(obj["revisionCreator"]) if obj.get("revisionCreator") is not None else None,
            "revisionId": obj.get("revisionId"),
            "schemaCapabilities": GoogleAppsDriveLabelsV2LabelSchemaCapabilities.from_dict(obj["schemaCapabilities"]) if obj.get("schemaCapabilities") is not None else None
        })
        return _obj



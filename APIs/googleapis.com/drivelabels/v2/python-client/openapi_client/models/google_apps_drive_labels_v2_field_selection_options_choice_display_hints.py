# coding: utf-8

"""
    Drive Labels API

    An API for managing Drive Labels

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_apps_drive_labels_v2_badge_colors import GoogleAppsDriveLabelsV2BadgeColors
from typing import Optional, Set
from typing_extensions import Self

class GoogleAppsDriveLabelsV2FieldSelectionOptionsChoiceDisplayHints(BaseModel):
    """
    UI display hints for rendering an option.
    """ # noqa: E501
    badge_colors: Optional[GoogleAppsDriveLabelsV2BadgeColors] = Field(default=None, alias="badgeColors")
    badge_priority: Optional[StrictStr] = Field(default=None, description="The priority of this badge. Used to compare and sort between multiple badges. A lower number means the badge should be shown first. When a badging configuration is not present, this will be 0. Otherwise, this will be set to `BadgeConfig.priority_override` or the default heuristic which prefers creation date of the label, and field and option priority.", alias="badgePriority")
    dark_badge_colors: Optional[GoogleAppsDriveLabelsV2BadgeColors] = Field(default=None, alias="darkBadgeColors")
    disabled: Optional[StrictBool] = Field(default=None, description="Whether the option should be shown in the UI as disabled.")
    hidden_in_search: Optional[StrictBool] = Field(default=None, description="This option should be hidden in the search menu when searching for Drive items.", alias="hiddenInSearch")
    shown_in_apply: Optional[StrictBool] = Field(default=None, description="This option should be shown in the apply menu when applying values to a Drive item.", alias="shownInApply")
    __properties: ClassVar[List[str]] = ["badgeColors", "badgePriority", "darkBadgeColors", "disabled", "hiddenInSearch", "shownInApply"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleAppsDriveLabelsV2FieldSelectionOptionsChoiceDisplayHints from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of badge_colors
        if self.badge_colors:
            _dict['badgeColors'] = self.badge_colors.to_dict()
        # override the default output from pydantic by calling `to_dict()` of dark_badge_colors
        if self.dark_badge_colors:
            _dict['darkBadgeColors'] = self.dark_badge_colors.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleAppsDriveLabelsV2FieldSelectionOptionsChoiceDisplayHints from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "badgeColors": GoogleAppsDriveLabelsV2BadgeColors.from_dict(obj["badgeColors"]) if obj.get("badgeColors") is not None else None,
            "badgePriority": obj.get("badgePriority"),
            "darkBadgeColors": GoogleAppsDriveLabelsV2BadgeColors.from_dict(obj["darkBadgeColors"]) if obj.get("darkBadgeColors") is not None else None,
            "disabled": obj.get("disabled"),
            "hiddenInSearch": obj.get("hiddenInSearch"),
            "shownInApply": obj.get("shownInApply")
        })
        return _obj



# coding: utf-8

"""
    Drive Labels API

    An API for managing Drive Labels

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_apps_drive_labels_v2_field_date_options import GoogleAppsDriveLabelsV2FieldDateOptions
from openapi_client.models.google_apps_drive_labels_v2_field_integer_options import GoogleAppsDriveLabelsV2FieldIntegerOptions
from openapi_client.models.google_apps_drive_labels_v2_field_selection_options import GoogleAppsDriveLabelsV2FieldSelectionOptions
from openapi_client.models.google_apps_drive_labels_v2_field_text_options import GoogleAppsDriveLabelsV2FieldTextOptions
from openapi_client.models.google_apps_drive_labels_v2_field_user_options import GoogleAppsDriveLabelsV2FieldUserOptions
from typing import Optional, Set
from typing_extensions import Self

class GoogleAppsDriveLabelsV2DeltaUpdateLabelRequestUpdateFieldTypeRequest(BaseModel):
    """
    Request to change the type of a Field.
    """ # noqa: E501
    date_options: Optional[GoogleAppsDriveLabelsV2FieldDateOptions] = Field(default=None, alias="dateOptions")
    id: Optional[StrictStr] = Field(default=None, description="Required. The Field to update.")
    integer_options: Optional[GoogleAppsDriveLabelsV2FieldIntegerOptions] = Field(default=None, alias="integerOptions")
    selection_options: Optional[GoogleAppsDriveLabelsV2FieldSelectionOptions] = Field(default=None, alias="selectionOptions")
    text_options: Optional[GoogleAppsDriveLabelsV2FieldTextOptions] = Field(default=None, alias="textOptions")
    update_mask: Optional[StrictStr] = Field(default=None, description="The fields that should be updated. At least one field must be specified. The root of `type_options` is implied and should not be specified. A single `*` can be used as short-hand for updating every field.", alias="updateMask")
    user_options: Optional[GoogleAppsDriveLabelsV2FieldUserOptions] = Field(default=None, alias="userOptions")
    __properties: ClassVar[List[str]] = ["dateOptions", "id", "integerOptions", "selectionOptions", "textOptions", "updateMask", "userOptions"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleAppsDriveLabelsV2DeltaUpdateLabelRequestUpdateFieldTypeRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of date_options
        if self.date_options:
            _dict['dateOptions'] = self.date_options.to_dict()
        # override the default output from pydantic by calling `to_dict()` of integer_options
        if self.integer_options:
            _dict['integerOptions'] = self.integer_options.to_dict()
        # override the default output from pydantic by calling `to_dict()` of selection_options
        if self.selection_options:
            _dict['selectionOptions'] = self.selection_options.to_dict()
        # override the default output from pydantic by calling `to_dict()` of text_options
        if self.text_options:
            _dict['textOptions'] = self.text_options.to_dict()
        # override the default output from pydantic by calling `to_dict()` of user_options
        if self.user_options:
            _dict['userOptions'] = self.user_options.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleAppsDriveLabelsV2DeltaUpdateLabelRequestUpdateFieldTypeRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "dateOptions": GoogleAppsDriveLabelsV2FieldDateOptions.from_dict(obj["dateOptions"]) if obj.get("dateOptions") is not None else None,
            "id": obj.get("id"),
            "integerOptions": GoogleAppsDriveLabelsV2FieldIntegerOptions.from_dict(obj["integerOptions"]) if obj.get("integerOptions") is not None else None,
            "selectionOptions": GoogleAppsDriveLabelsV2FieldSelectionOptions.from_dict(obj["selectionOptions"]) if obj.get("selectionOptions") is not None else None,
            "textOptions": GoogleAppsDriveLabelsV2FieldTextOptions.from_dict(obj["textOptions"]) if obj.get("textOptions") is not None else None,
            "updateMask": obj.get("updateMask"),
            "userOptions": GoogleAppsDriveLabelsV2FieldUserOptions.from_dict(obj["userOptions"]) if obj.get("userOptions") is not None else None
        })
        return _obj



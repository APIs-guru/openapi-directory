# coding: utf-8

"""
    Drive Labels API

    An API for managing Drive Labels

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class GoogleAppsDriveLabelsV2LabelSchemaCapabilities(BaseModel):
    """
    The capabilities related to this label when editing the label.
    """ # noqa: E501
    can_delete: Optional[StrictBool] = Field(default=None, description="Whether the user can delete this label. The user must have permission and the label must be disabled.", alias="canDelete")
    can_disable: Optional[StrictBool] = Field(default=None, description="Whether the user can disable this label. The user must have permission and this label must not already be disabled.", alias="canDisable")
    can_enable: Optional[StrictBool] = Field(default=None, description="Whether the user can enable this label. The user must have permission and this label must be disabled.", alias="canEnable")
    can_update: Optional[StrictBool] = Field(default=None, description="Whether the user can change this label.", alias="canUpdate")
    __properties: ClassVar[List[str]] = ["canDelete", "canDisable", "canEnable", "canUpdate"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleAppsDriveLabelsV2LabelSchemaCapabilities from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleAppsDriveLabelsV2LabelSchemaCapabilities from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "canDelete": obj.get("canDelete"),
            "canDisable": obj.get("canDisable"),
            "canEnable": obj.get("canEnable"),
            "canUpdate": obj.get("canUpdate")
        })
        return _obj



# coding: utf-8

"""
    Drive Labels API

    An API for managing Drive Labels

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_apps_drive_labels_v2_field_limits import GoogleAppsDriveLabelsV2FieldLimits
from typing import Optional, Set
from typing_extensions import Self

class GoogleAppsDriveLabelsV2LabelLimits(BaseModel):
    """
    Label constraints governing the structure of a Label; such as, the maximum number of Fields allowed and maximum length of the label title.
    """ # noqa: E501
    field_limits: Optional[GoogleAppsDriveLabelsV2FieldLimits] = Field(default=None, alias="fieldLimits")
    max_deleted_fields: Optional[StrictInt] = Field(default=None, description="The maximum number of published Fields that can be deleted.", alias="maxDeletedFields")
    max_description_length: Optional[StrictInt] = Field(default=None, description="The maximum number of characters allowed for the description.", alias="maxDescriptionLength")
    max_draft_revisions: Optional[StrictInt] = Field(default=None, description="The maximum number of draft revisions that will be kept before deleting old drafts.", alias="maxDraftRevisions")
    max_fields: Optional[StrictInt] = Field(default=None, description="The maximum number of Fields allowed within the label.", alias="maxFields")
    max_title_length: Optional[StrictInt] = Field(default=None, description="The maximum number of characters allowed for the title.", alias="maxTitleLength")
    name: Optional[StrictStr] = Field(default=None, description="Resource name.")
    __properties: ClassVar[List[str]] = ["fieldLimits", "maxDeletedFields", "maxDescriptionLength", "maxDraftRevisions", "maxFields", "maxTitleLength", "name"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleAppsDriveLabelsV2LabelLimits from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of field_limits
        if self.field_limits:
            _dict['fieldLimits'] = self.field_limits.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleAppsDriveLabelsV2LabelLimits from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "fieldLimits": GoogleAppsDriveLabelsV2FieldLimits.from_dict(obj["fieldLimits"]) if obj.get("fieldLimits") is not None else None,
            "maxDeletedFields": obj.get("maxDeletedFields"),
            "maxDescriptionLength": obj.get("maxDescriptionLength"),
            "maxDraftRevisions": obj.get("maxDraftRevisions"),
            "maxFields": obj.get("maxFields"),
            "maxTitleLength": obj.get("maxTitleLength"),
            "name": obj.get("name")
        })
        return _obj



# coding: utf-8

"""
    Drive Labels API

    An API for managing Drive Labels

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_apps_drive_labels_v2_delta_update_label_request_request import GoogleAppsDriveLabelsV2DeltaUpdateLabelRequestRequest
from openapi_client.models.google_apps_drive_labels_v2_write_control import GoogleAppsDriveLabelsV2WriteControl
from typing import Optional, Set
from typing_extensions import Self

class GoogleAppsDriveLabelsV2DeltaUpdateLabelRequest(BaseModel):
    """
    The set of requests for updating aspects of a Label. If any request is not valid, no requests will be applied.
    """ # noqa: E501
    language_code: Optional[StrictStr] = Field(default=None, description="The BCP-47 language code to use for evaluating localized Field labels when `include_label_in_response` is `true`.", alias="languageCode")
    requests: Optional[List[GoogleAppsDriveLabelsV2DeltaUpdateLabelRequestRequest]] = Field(default=None, description="A list of updates to apply to the Label. Requests will be applied in the order they are specified.")
    use_admin_access: Optional[StrictBool] = Field(default=None, description="Set to `true` in order to use the user's admin credentials. The server will verify the user is an admin for the Label before allowing access.", alias="useAdminAccess")
    view: Optional[StrictStr] = Field(default=None, description="When specified, only certain fields belonging to the indicated view will be returned.")
    write_control: Optional[GoogleAppsDriveLabelsV2WriteControl] = Field(default=None, alias="writeControl")
    __properties: ClassVar[List[str]] = ["languageCode", "requests", "useAdminAccess", "view", "writeControl"]

    @field_validator('view')
    def view_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['LABEL_VIEW_BASIC', 'LABEL_VIEW_FULL']):
            raise ValueError("must be one of enum values ('LABEL_VIEW_BASIC', 'LABEL_VIEW_FULL')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleAppsDriveLabelsV2DeltaUpdateLabelRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in requests (list)
        _items = []
        if self.requests:
            for _item_requests in self.requests:
                if _item_requests:
                    _items.append(_item_requests.to_dict())
            _dict['requests'] = _items
        # override the default output from pydantic by calling `to_dict()` of write_control
        if self.write_control:
            _dict['writeControl'] = self.write_control.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleAppsDriveLabelsV2DeltaUpdateLabelRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "languageCode": obj.get("languageCode"),
            "requests": [GoogleAppsDriveLabelsV2DeltaUpdateLabelRequestRequest.from_dict(_item) for _item in obj["requests"]] if obj.get("requests") is not None else None,
            "useAdminAccess": obj.get("useAdminAccess"),
            "view": obj.get("view"),
            "writeControl": GoogleAppsDriveLabelsV2WriteControl.from_dict(obj["writeControl"]) if obj.get("writeControl") is not None else None
        })
        return _obj



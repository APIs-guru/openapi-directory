# coding: utf-8

"""
    Dataproc Metastore API

    The Dataproc Metastore API is used to manage the lifecycle and configuration of metastore services.

    The version of the OpenAPI document: v1beta
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.encryption_config import EncryptionConfig
from openapi_client.models.hive_metastore_config import HiveMetastoreConfig
from openapi_client.models.maintenance_window import MaintenanceWindow
from openapi_client.models.metadata_integration import MetadataIntegration
from openapi_client.models.metadata_management_activity import MetadataManagementActivity
from openapi_client.models.network_config import NetworkConfig
from openapi_client.models.scaling_config import ScalingConfig
from openapi_client.models.scheduled_backup import ScheduledBackup
from openapi_client.models.telemetry_config import TelemetryConfig
from typing import Optional, Set
from typing_extensions import Self

class Service(BaseModel):
    """
    A managed metastore service that serves metadata queries.
    """ # noqa: E501
    artifact_gcs_uri: Optional[StrictStr] = Field(default=None, description="Output only. A Cloud Storage URI (starting with gs://) that specifies where artifacts related to the metastore service are stored.", alias="artifactGcsUri")
    create_time: Optional[StrictStr] = Field(default=None, description="Output only. The time when the metastore service was created.", alias="createTime")
    database_type: Optional[StrictStr] = Field(default=None, description="Immutable. The database type that the Metastore service stores its data.", alias="databaseType")
    encryption_config: Optional[EncryptionConfig] = Field(default=None, alias="encryptionConfig")
    endpoint_uri: Optional[StrictStr] = Field(default=None, description="Output only. The URI of the endpoint used to access the metastore service.", alias="endpointUri")
    hive_metastore_config: Optional[HiveMetastoreConfig] = Field(default=None, alias="hiveMetastoreConfig")
    labels: Optional[Dict[str, StrictStr]] = Field(default=None, description="User-defined labels for the metastore service.")
    maintenance_window: Optional[MaintenanceWindow] = Field(default=None, alias="maintenanceWindow")
    metadata_integration: Optional[MetadataIntegration] = Field(default=None, alias="metadataIntegration")
    metadata_management_activity: Optional[MetadataManagementActivity] = Field(default=None, alias="metadataManagementActivity")
    name: Optional[StrictStr] = Field(default=None, description="Immutable. The relative resource name of the metastore service, in the following format:projects/{project_number}/locations/{location_id}/services/{service_id}.")
    network: Optional[StrictStr] = Field(default=None, description="Immutable. The relative resource name of the VPC network on which the instance can be accessed. It is specified in the following form:projects/{project_number}/global/networks/{network_id}.")
    network_config: Optional[NetworkConfig] = Field(default=None, alias="networkConfig")
    port: Optional[StrictInt] = Field(default=None, description="The TCP port at which the metastore service is reached. Default: 9083.")
    release_channel: Optional[StrictStr] = Field(default=None, description="Immutable. The release channel of the service. If unspecified, defaults to STABLE.", alias="releaseChannel")
    scaling_config: Optional[ScalingConfig] = Field(default=None, alias="scalingConfig")
    scheduled_backup: Optional[ScheduledBackup] = Field(default=None, alias="scheduledBackup")
    state: Optional[StrictStr] = Field(default=None, description="Output only. The current state of the metastore service.")
    state_message: Optional[StrictStr] = Field(default=None, description="Output only. Additional information about the current state of the metastore service, if available.", alias="stateMessage")
    telemetry_config: Optional[TelemetryConfig] = Field(default=None, alias="telemetryConfig")
    tier: Optional[StrictStr] = Field(default=None, description="The tier of the service.")
    uid: Optional[StrictStr] = Field(default=None, description="Output only. The globally unique resource identifier of the metastore service.")
    update_time: Optional[StrictStr] = Field(default=None, description="Output only. The time when the metastore service was last updated.", alias="updateTime")
    __properties: ClassVar[List[str]] = ["artifactGcsUri", "createTime", "databaseType", "encryptionConfig", "endpointUri", "hiveMetastoreConfig", "labels", "maintenanceWindow", "metadataIntegration", "metadataManagementActivity", "name", "network", "networkConfig", "port", "releaseChannel", "scalingConfig", "scheduledBackup", "state", "stateMessage", "telemetryConfig", "tier", "uid", "updateTime"]

    @field_validator('database_type')
    def database_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['DATABASE_TYPE_UNSPECIFIED', 'MYSQL', 'SPANNER']):
            raise ValueError("must be one of enum values ('DATABASE_TYPE_UNSPECIFIED', 'MYSQL', 'SPANNER')")
        return value

    @field_validator('release_channel')
    def release_channel_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['RELEASE_CHANNEL_UNSPECIFIED', 'CANARY', 'STABLE']):
            raise ValueError("must be one of enum values ('RELEASE_CHANNEL_UNSPECIFIED', 'CANARY', 'STABLE')")
        return value

    @field_validator('state')
    def state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['STATE_UNSPECIFIED', 'CREATING', 'ACTIVE', 'SUSPENDING', 'SUSPENDED', 'UPDATING', 'DELETING', 'ERROR']):
            raise ValueError("must be one of enum values ('STATE_UNSPECIFIED', 'CREATING', 'ACTIVE', 'SUSPENDING', 'SUSPENDED', 'UPDATING', 'DELETING', 'ERROR')")
        return value

    @field_validator('tier')
    def tier_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['TIER_UNSPECIFIED', 'DEVELOPER', 'ENTERPRISE']):
            raise ValueError("must be one of enum values ('TIER_UNSPECIFIED', 'DEVELOPER', 'ENTERPRISE')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Service from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "artifact_gcs_uri",
            "create_time",
            "endpoint_uri",
            "state",
            "state_message",
            "uid",
            "update_time",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of encryption_config
        if self.encryption_config:
            _dict['encryptionConfig'] = self.encryption_config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of hive_metastore_config
        if self.hive_metastore_config:
            _dict['hiveMetastoreConfig'] = self.hive_metastore_config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of maintenance_window
        if self.maintenance_window:
            _dict['maintenanceWindow'] = self.maintenance_window.to_dict()
        # override the default output from pydantic by calling `to_dict()` of metadata_integration
        if self.metadata_integration:
            _dict['metadataIntegration'] = self.metadata_integration.to_dict()
        # override the default output from pydantic by calling `to_dict()` of metadata_management_activity
        if self.metadata_management_activity:
            _dict['metadataManagementActivity'] = self.metadata_management_activity.to_dict()
        # override the default output from pydantic by calling `to_dict()` of network_config
        if self.network_config:
            _dict['networkConfig'] = self.network_config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of scaling_config
        if self.scaling_config:
            _dict['scalingConfig'] = self.scaling_config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of scheduled_backup
        if self.scheduled_backup:
            _dict['scheduledBackup'] = self.scheduled_backup.to_dict()
        # override the default output from pydantic by calling `to_dict()` of telemetry_config
        if self.telemetry_config:
            _dict['telemetryConfig'] = self.telemetry_config.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Service from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "artifactGcsUri": obj.get("artifactGcsUri"),
            "createTime": obj.get("createTime"),
            "databaseType": obj.get("databaseType"),
            "encryptionConfig": EncryptionConfig.from_dict(obj["encryptionConfig"]) if obj.get("encryptionConfig") is not None else None,
            "endpointUri": obj.get("endpointUri"),
            "hiveMetastoreConfig": HiveMetastoreConfig.from_dict(obj["hiveMetastoreConfig"]) if obj.get("hiveMetastoreConfig") is not None else None,
            "labels": obj.get("labels"),
            "maintenanceWindow": MaintenanceWindow.from_dict(obj["maintenanceWindow"]) if obj.get("maintenanceWindow") is not None else None,
            "metadataIntegration": MetadataIntegration.from_dict(obj["metadataIntegration"]) if obj.get("metadataIntegration") is not None else None,
            "metadataManagementActivity": MetadataManagementActivity.from_dict(obj["metadataManagementActivity"]) if obj.get("metadataManagementActivity") is not None else None,
            "name": obj.get("name"),
            "network": obj.get("network"),
            "networkConfig": NetworkConfig.from_dict(obj["networkConfig"]) if obj.get("networkConfig") is not None else None,
            "port": obj.get("port"),
            "releaseChannel": obj.get("releaseChannel"),
            "scalingConfig": ScalingConfig.from_dict(obj["scalingConfig"]) if obj.get("scalingConfig") is not None else None,
            "scheduledBackup": ScheduledBackup.from_dict(obj["scheduledBackup"]) if obj.get("scheduledBackup") is not None else None,
            "state": obj.get("state"),
            "stateMessage": obj.get("stateMessage"),
            "telemetryConfig": TelemetryConfig.from_dict(obj["telemetryConfig"]) if obj.get("telemetryConfig") is not None else None,
            "tier": obj.get("tier"),
            "uid": obj.get("uid"),
            "updateTime": obj.get("updateTime")
        })
        return _obj



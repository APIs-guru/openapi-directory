# coding: utf-8

"""
    Dataproc Metastore API

    The Dataproc Metastore API is used to manage the lifecycle and configuration of metastore services.

    The version of the OpenAPI document: v1beta
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.latest_backup import LatestBackup
from typing import Optional, Set
from typing_extensions import Self

class ScheduledBackup(BaseModel):
    """
    This specifies the configuration of scheduled backup.
    """ # noqa: E501
    backup_location: Optional[StrictStr] = Field(default=None, description="Optional. A Cloud Storage URI of a folder, in the format gs:///. A sub-folder containing backup files will be stored below it.", alias="backupLocation")
    cron_schedule: Optional[StrictStr] = Field(default=None, description="Optional. The scheduled interval in Cron format, see https://en.wikipedia.org/wiki/Cron The default is empty: scheduled backup is not enabled. Must be specified to enable scheduled backups.", alias="cronSchedule")
    enabled: Optional[StrictBool] = Field(default=None, description="Optional. Defines whether the scheduled backup is enabled. The default value is false.")
    latest_backup: Optional[LatestBackup] = Field(default=None, alias="latestBackup")
    next_scheduled_time: Optional[StrictStr] = Field(default=None, description="Output only. The time when the next backups execution is scheduled to start.", alias="nextScheduledTime")
    time_zone: Optional[StrictStr] = Field(default=None, description="Optional. Specifies the time zone to be used when interpreting cron_schedule. Must be a time zone name from the time zone database (https://en.wikipedia.org/wiki/List_of_tz_database_time_zones), e.g. America/Los_Angeles or Africa/Abidjan. If left unspecified, the default is UTC.", alias="timeZone")
    __properties: ClassVar[List[str]] = ["backupLocation", "cronSchedule", "enabled", "latestBackup", "nextScheduledTime", "timeZone"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ScheduledBackup from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "next_scheduled_time",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of latest_backup
        if self.latest_backup:
            _dict['latestBackup'] = self.latest_backup.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ScheduledBackup from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "backupLocation": obj.get("backupLocation"),
            "cronSchedule": obj.get("cronSchedule"),
            "enabled": obj.get("enabled"),
            "latestBackup": LatestBackup.from_dict(obj["latestBackup"]) if obj.get("latestBackup") is not None else None,
            "nextScheduledTime": obj.get("nextScheduledTime"),
            "timeZone": obj.get("timeZone")
        })
        return _obj



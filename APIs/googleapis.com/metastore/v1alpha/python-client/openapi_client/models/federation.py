# coding: utf-8

"""
    Dataproc Metastore API

    The Dataproc Metastore API is used to manage the lifecycle and configuration of metastore services.

    The version of the OpenAPI document: v1alpha
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.backend_metastore import BackendMetastore
from typing import Optional, Set
from typing_extensions import Self

class Federation(BaseModel):
    """
    Represents a federation of multiple backend metastores.
    """ # noqa: E501
    backend_metastores: Optional[Dict[str, BackendMetastore]] = Field(default=None, description="A map from BackendMetastore rank to BackendMetastores from which the federation service serves metadata at query time. The map key represents the order in which BackendMetastores should be evaluated to resolve database names at query time and should be greater than or equal to zero. A BackendMetastore with a lower number will be evaluated before a BackendMetastore with a higher number.", alias="backendMetastores")
    create_time: Optional[StrictStr] = Field(default=None, description="Output only. The time when the metastore federation was created.", alias="createTime")
    endpoint_uri: Optional[StrictStr] = Field(default=None, description="Output only. The federation endpoint.", alias="endpointUri")
    labels: Optional[Dict[str, StrictStr]] = Field(default=None, description="User-defined labels for the metastore federation.")
    name: Optional[StrictStr] = Field(default=None, description="Immutable. The relative resource name of the federation, of the form: projects/{project_number}/locations/{location_id}/federations/{federation_id}`.")
    state: Optional[StrictStr] = Field(default=None, description="Output only. The current state of the federation.")
    state_message: Optional[StrictStr] = Field(default=None, description="Output only. Additional information about the current state of the metastore federation, if available.", alias="stateMessage")
    uid: Optional[StrictStr] = Field(default=None, description="Output only. The globally unique resource identifier of the metastore federation.")
    update_time: Optional[StrictStr] = Field(default=None, description="Output only. The time when the metastore federation was last updated.", alias="updateTime")
    version: Optional[StrictStr] = Field(default=None, description="Immutable. The Apache Hive metastore version of the federation. All backend metastore versions must be compatible with the federation version.")
    __properties: ClassVar[List[str]] = ["backendMetastores", "createTime", "endpointUri", "labels", "name", "state", "stateMessage", "uid", "updateTime", "version"]

    @field_validator('state')
    def state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['STATE_UNSPECIFIED', 'CREATING', 'ACTIVE', 'UPDATING', 'DELETING', 'ERROR']):
            raise ValueError("must be one of enum values ('STATE_UNSPECIFIED', 'CREATING', 'ACTIVE', 'UPDATING', 'DELETING', 'ERROR')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Federation from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "create_time",
            "endpoint_uri",
            "state",
            "state_message",
            "uid",
            "update_time",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each value in backend_metastores (dict)
        _field_dict = {}
        if self.backend_metastores:
            for _key_backend_metastores in self.backend_metastores:
                if self.backend_metastores[_key_backend_metastores]:
                    _field_dict[_key_backend_metastores] = self.backend_metastores[_key_backend_metastores].to_dict()
            _dict['backendMetastores'] = _field_dict
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Federation from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "backendMetastores": dict(
                (_k, BackendMetastore.from_dict(_v))
                for _k, _v in obj["backendMetastores"].items()
            )
            if obj.get("backendMetastores") is not None
            else None,
            "createTime": obj.get("createTime"),
            "endpointUri": obj.get("endpointUri"),
            "labels": obj.get("labels"),
            "name": obj.get("name"),
            "state": obj.get("state"),
            "stateMessage": obj.get("stateMessage"),
            "uid": obj.get("uid"),
            "updateTime": obj.get("updateTime"),
            "version": obj.get("version")
        })
        return _obj



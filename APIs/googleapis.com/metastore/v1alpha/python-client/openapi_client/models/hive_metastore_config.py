# coding: utf-8

"""
    Dataproc Metastore API

    The Dataproc Metastore API is used to manage the lifecycle and configuration of metastore services.

    The version of the OpenAPI document: v1alpha
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.auxiliary_version_config import AuxiliaryVersionConfig
from openapi_client.models.kerberos_config import KerberosConfig
from typing import Optional, Set
from typing_extensions import Self

class HiveMetastoreConfig(BaseModel):
    """
    Specifies configuration information specific to running Hive metastore software as the metastore service.
    """ # noqa: E501
    auxiliary_versions: Optional[Dict[str, AuxiliaryVersionConfig]] = Field(default=None, description="A mapping of Hive metastore version to the auxiliary version configuration. When specified, a secondary Hive metastore service is created along with the primary service. All auxiliary versions must be less than the service's primary version. The key is the auxiliary service name and it must match the regular expression a-z?. This means that the first character must be a lowercase letter, and all the following characters must be hyphens, lowercase letters, or digits, except the last character, which cannot be a hyphen.", alias="auxiliaryVersions")
    config_overrides: Optional[Dict[str, StrictStr]] = Field(default=None, description="A mapping of Hive metastore configuration key-value pairs to apply to the Hive metastore (configured in hive-site.xml). The mappings override system defaults (some keys cannot be overridden). These overrides are also applied to auxiliary versions and can be further customized in the auxiliary version's AuxiliaryVersionConfig.", alias="configOverrides")
    endpoint_protocol: Optional[StrictStr] = Field(default=None, description="The protocol to use for the metastore service endpoint. If unspecified, defaults to THRIFT.", alias="endpointProtocol")
    kerberos_config: Optional[KerberosConfig] = Field(default=None, alias="kerberosConfig")
    version: Optional[StrictStr] = Field(default=None, description="Immutable. The Hive metastore schema version.")
    __properties: ClassVar[List[str]] = ["auxiliaryVersions", "configOverrides", "endpointProtocol", "kerberosConfig", "version"]

    @field_validator('endpoint_protocol')
    def endpoint_protocol_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['ENDPOINT_PROTOCOL_UNSPECIFIED', 'THRIFT', 'GRPC']):
            raise ValueError("must be one of enum values ('ENDPOINT_PROTOCOL_UNSPECIFIED', 'THRIFT', 'GRPC')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of HiveMetastoreConfig from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each value in auxiliary_versions (dict)
        _field_dict = {}
        if self.auxiliary_versions:
            for _key_auxiliary_versions in self.auxiliary_versions:
                if self.auxiliary_versions[_key_auxiliary_versions]:
                    _field_dict[_key_auxiliary_versions] = self.auxiliary_versions[_key_auxiliary_versions].to_dict()
            _dict['auxiliaryVersions'] = _field_dict
        # override the default output from pydantic by calling `to_dict()` of kerberos_config
        if self.kerberos_config:
            _dict['kerberosConfig'] = self.kerberos_config.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of HiveMetastoreConfig from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "auxiliaryVersions": dict(
                (_k, AuxiliaryVersionConfig.from_dict(_v))
                for _k, _v in obj["auxiliaryVersions"].items()
            )
            if obj.get("auxiliaryVersions") is not None
            else None,
            "configOverrides": obj.get("configOverrides"),
            "endpointProtocol": obj.get("endpointProtocol"),
            "kerberosConfig": KerberosConfig.from_dict(obj["kerberosConfig"]) if obj.get("kerberosConfig") is not None else None,
            "version": obj.get("version")
        })
        return _obj



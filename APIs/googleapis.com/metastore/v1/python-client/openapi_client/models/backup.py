# coding: utf-8

"""
    Dataproc Metastore API

    The Dataproc Metastore API is used to manage the lifecycle and configuration of metastore services.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.service import Service
from typing import Optional, Set
from typing_extensions import Self

class Backup(BaseModel):
    """
    The details of a backup resource.
    """ # noqa: E501
    create_time: Optional[StrictStr] = Field(default=None, description="Output only. The time when the backup was started.", alias="createTime")
    description: Optional[StrictStr] = Field(default=None, description="The description of the backup.")
    end_time: Optional[StrictStr] = Field(default=None, description="Output only. The time when the backup finished creating.", alias="endTime")
    name: Optional[StrictStr] = Field(default=None, description="Immutable. The relative resource name of the backup, in the following form:projects/{project_number}/locations/{location_id}/services/{service_id}/backups/{backup_id}")
    restoring_services: Optional[List[StrictStr]] = Field(default=None, description="Output only. Services that are restoring from the backup.", alias="restoringServices")
    service_revision: Optional[Service] = Field(default=None, alias="serviceRevision")
    state: Optional[StrictStr] = Field(default=None, description="Output only. The current state of the backup.")
    __properties: ClassVar[List[str]] = ["createTime", "description", "endTime", "name", "restoringServices", "serviceRevision", "state"]

    @field_validator('state')
    def state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['STATE_UNSPECIFIED', 'CREATING', 'DELETING', 'ACTIVE', 'FAILED', 'RESTORING']):
            raise ValueError("must be one of enum values ('STATE_UNSPECIFIED', 'CREATING', 'DELETING', 'ACTIVE', 'FAILED', 'RESTORING')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Backup from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "create_time",
            "end_time",
            "restoring_services",
            "state",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of service_revision
        if self.service_revision:
            _dict['serviceRevision'] = self.service_revision.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Backup from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "createTime": obj.get("createTime"),
            "description": obj.get("description"),
            "endTime": obj.get("endTime"),
            "name": obj.get("name"),
            "restoringServices": obj.get("restoringServices"),
            "serviceRevision": Service.from_dict(obj["serviceRevision"]) if obj.get("serviceRevision") is not None else None,
            "state": obj.get("state")
        })
        return _obj



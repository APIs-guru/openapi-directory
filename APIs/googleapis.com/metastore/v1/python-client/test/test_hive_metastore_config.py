# coding: utf-8

"""
    Dataproc Metastore API

    The Dataproc Metastore API is used to manage the lifecycle and configuration of metastore services.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.hive_metastore_config import HiveMetastoreConfig

class TestHiveMetastoreConfig(unittest.TestCase):
    """HiveMetastoreConfig unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> HiveMetastoreConfig:
        """Test HiveMetastoreConfig
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `HiveMetastoreConfig`
        """
        model = HiveMetastoreConfig()
        if include_optional:
            return HiveMetastoreConfig(
                auxiliary_versions = {
                    'key' : openapi_client.models.auxiliary_version_config.AuxiliaryVersionConfig(
                        config_overrides = {
                            'key' : ''
                            }, 
                        network_config = openapi_client.models.network_config.NetworkConfig(
                            consumers = [
                                openapi_client.models.consumer.Consumer(
                                    endpoint_location = '', 
                                    endpoint_uri = '', 
                                    subnetwork = '', )
                                ], ), 
                        version = '', )
                    },
                config_overrides = {
                    'key' : ''
                    },
                endpoint_protocol = 'ENDPOINT_PROTOCOL_UNSPECIFIED',
                kerberos_config = openapi_client.models.kerberos_config.KerberosConfig(
                    keytab = openapi_client.models.secret.Secret(
                        cloud_secret = '', ), 
                    krb5_config_gcs_uri = '', 
                    principal = '', ),
                version = ''
            )
        else:
            return HiveMetastoreConfig(
        )
        """

    def testHiveMetastoreConfig(self):
        """Test HiveMetastoreConfig"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

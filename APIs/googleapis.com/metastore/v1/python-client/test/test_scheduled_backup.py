# coding: utf-8

"""
    Dataproc Metastore API

    The Dataproc Metastore API is used to manage the lifecycle and configuration of metastore services.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.scheduled_backup import ScheduledBackup

class TestScheduledBackup(unittest.TestCase):
    """ScheduledBackup unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> ScheduledBackup:
        """Test ScheduledBackup
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `ScheduledBackup`
        """
        model = ScheduledBackup()
        if include_optional:
            return ScheduledBackup(
                backup_location = '',
                cron_schedule = '',
                enabled = True,
                latest_backup = openapi_client.models.latest_backup.LatestBackup(
                    backup_id = '', 
                    duration = '', 
                    start_time = '', 
                    state = 'STATE_UNSPECIFIED', ),
                next_scheduled_time = '',
                time_zone = ''
            )
        else:
            return ScheduledBackup(
        )
        """

    def testScheduledBackup(self):
        """Test ScheduledBackup"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

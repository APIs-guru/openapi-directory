# coding: utf-8

"""
    Dataproc Metastore API

    The Dataproc Metastore API is used to manage the lifecycle and configuration of metastore services.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.list_backups_response import ListBackupsResponse

class TestListBackupsResponse(unittest.TestCase):
    """ListBackupsResponse unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> ListBackupsResponse:
        """Test ListBackupsResponse
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `ListBackupsResponse`
        """
        model = ListBackupsResponse()
        if include_optional:
            return ListBackupsResponse(
                backups = [
                    openapi_client.models.backup.Backup(
                        create_time = '', 
                        description = '', 
                        end_time = '', 
                        name = '', 
                        restoring_services = [
                            ''
                            ], 
                        service_revision = openapi_client.models.service.Service(
                            artifact_gcs_uri = '', 
                            create_time = '', 
                            database_type = 'DATABASE_TYPE_UNSPECIFIED', 
                            encryption_config = openapi_client.models.encryption_config.EncryptionConfig(
                                kms_key = '', ), 
                            endpoint_uri = '', 
                            hive_metastore_config = openapi_client.models.hive_metastore_config.HiveMetastoreConfig(
                                auxiliary_versions = {
                                    'key' : openapi_client.models.auxiliary_version_config.AuxiliaryVersionConfig(
                                        config_overrides = {
                                            'key' : ''
                                            }, 
                                        network_config = openapi_client.models.network_config.NetworkConfig(
                                            consumers = [
                                                openapi_client.models.consumer.Consumer(
                                                    endpoint_location = '', 
                                                    endpoint_uri = '', 
                                                    subnetwork = '', )
                                                ], ), 
                                        version = '', )
                                    }, 
                                config_overrides = {
                                    'key' : ''
                                    }, 
                                endpoint_protocol = 'ENDPOINT_PROTOCOL_UNSPECIFIED', 
                                kerberos_config = openapi_client.models.kerberos_config.KerberosConfig(
                                    keytab = openapi_client.models.secret.Secret(
                                        cloud_secret = '', ), 
                                    krb5_config_gcs_uri = '', 
                                    principal = '', ), 
                                version = '', ), 
                            labels = {
                                'key' : ''
                                }, 
                            maintenance_window = openapi_client.models.maintenance_window.MaintenanceWindow(
                                day_of_week = 'DAY_OF_WEEK_UNSPECIFIED', 
                                hour_of_day = 56, ), 
                            metadata_integration = openapi_client.models.metadata_integration.MetadataIntegration(
                                data_catalog_config = openapi_client.models.data_catalog_config.DataCatalogConfig(
                                    enabled = True, ), ), 
                            metadata_management_activity = openapi_client.models.metadata_management_activity.MetadataManagementActivity(
                                metadata_exports = [
                                    openapi_client.models.metadata_export.MetadataExport(
                                        database_dump_type = 'TYPE_UNSPECIFIED', 
                                        destination_gcs_uri = '', 
                                        end_time = '', 
                                        start_time = '', 
                                        state = 'STATE_UNSPECIFIED', )
                                    ], 
                                restores = [
                                    openapi_client.models.restore.Restore(
                                        backup = '', 
                                        backup_location = '', 
                                        details = '', 
                                        end_time = '', 
                                        start_time = '', 
                                        state = 'STATE_UNSPECIFIED', 
                                        type = 'RESTORE_TYPE_UNSPECIFIED', )
                                    ], ), 
                            name = '', 
                            network = '', 
                            network_config = openapi_client.models.network_config.NetworkConfig(), 
                            port = 56, 
                            release_channel = 'RELEASE_CHANNEL_UNSPECIFIED', 
                            scaling_config = openapi_client.models.scaling_config.ScalingConfig(
                                instance_size = 'INSTANCE_SIZE_UNSPECIFIED', 
                                scaling_factor = 1.337, ), 
                            scheduled_backup = openapi_client.models.scheduled_backup.ScheduledBackup(
                                backup_location = '', 
                                cron_schedule = '', 
                                enabled = True, 
                                latest_backup = openapi_client.models.latest_backup.LatestBackup(
                                    backup_id = '', 
                                    duration = '', 
                                    start_time = '', 
                                    state = 'STATE_UNSPECIFIED', ), 
                                next_scheduled_time = '', 
                                time_zone = '', ), 
                            state = 'STATE_UNSPECIFIED', 
                            state_message = '', 
                            telemetry_config = openapi_client.models.telemetry_config.TelemetryConfig(
                                log_format = 'LOG_FORMAT_UNSPECIFIED', ), 
                            tier = 'TIER_UNSPECIFIED', 
                            uid = '', 
                            update_time = '', ), 
                        state = 'STATE_UNSPECIFIED', )
                    ],
                next_page_token = '',
                unreachable = [
                    ''
                    ]
            )
        else:
            return ListBackupsResponse(
        )
        """

    def testListBackupsResponse(self):
        """Test ListBackupsResponse"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

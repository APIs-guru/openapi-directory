# coding: utf-8

"""
    Google Workspace Events API

    The Google Workspace Events API lets you subscribe to events and manage change notifications across Google Workspace applications.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.list_subscriptions_response import ListSubscriptionsResponse

class TestListSubscriptionsResponse(unittest.TestCase):
    """ListSubscriptionsResponse unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> ListSubscriptionsResponse:
        """Test ListSubscriptionsResponse
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `ListSubscriptionsResponse`
        """
        model = ListSubscriptionsResponse()
        if include_optional:
            return ListSubscriptionsResponse(
                next_page_token = '',
                subscriptions = [
                    openapi_client.models.subscription.Subscription(
                        authority = '', 
                        create_time = '', 
                        etag = '', 
                        event_types = [
                            ''
                            ], 
                        expire_time = '', 
                        name = '', 
                        notification_endpoint = openapi_client.models.notification_endpoint.NotificationEndpoint(
                            pubsub_topic = '', ), 
                        payload_options = openapi_client.models.payload_options.PayloadOptions(
                            field_mask = '', 
                            include_resource = True, ), 
                        reconciling = True, 
                        state = 'STATE_UNSPECIFIED', 
                        suspension_reason = 'ERROR_TYPE_UNSPECIFIED', 
                        target_resource = '', 
                        ttl = '', 
                        uid = '', 
                        update_time = '', )
                    ]
            )
        else:
            return ListSubscriptionsResponse(
        )
        """

    def testListSubscriptionsResponse(self):
        """Test ListSubscriptionsResponse"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

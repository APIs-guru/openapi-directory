# coding: utf-8

"""
    Cloud Workstations API

    Allows administrators to create managed developer environments in the cloud. 

    The version of the OpenAPI document: v1beta
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.list_usable_workstation_configs_response import ListUsableWorkstationConfigsResponse

class TestListUsableWorkstationConfigsResponse(unittest.TestCase):
    """ListUsableWorkstationConfigsResponse unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> ListUsableWorkstationConfigsResponse:
        """Test ListUsableWorkstationConfigsResponse
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `ListUsableWorkstationConfigsResponse`
        """
        model = ListUsableWorkstationConfigsResponse()
        if include_optional:
            return ListUsableWorkstationConfigsResponse(
                next_page_token = '',
                unreachable = [
                    ''
                    ],
                workstation_configs = [
                    openapi_client.models.workstation_config.WorkstationConfig(
                        annotations = {
                            'key' : ''
                            }, 
                        conditions = [
                            openapi_client.models.status.Status(
                                code = 56, 
                                details = [
                                    {
                                        'key' : null
                                        }
                                    ], 
                                message = '', )
                            ], 
                        container = openapi_client.models.container.Container(
                            args = [
                                ''
                                ], 
                            command = [
                                ''
                                ], 
                            env = {
                                'key' : ''
                                }, 
                            image = '', 
                            run_as_user = 56, 
                            working_dir = '', ), 
                        create_time = '', 
                        degraded = True, 
                        delete_time = '', 
                        disable_tcp_connections = True, 
                        display_name = '', 
                        enable_audit_agent = True, 
                        encryption_key = openapi_client.models.customer_encryption_key.CustomerEncryptionKey(
                            kms_key = '', 
                            kms_key_service_account = '', ), 
                        ephemeral_directories = [
                            openapi_client.models.ephemeral_directory.EphemeralDirectory(
                                gce_pd = openapi_client.models.gce_persistent_disk.GcePersistentDisk(
                                    disk_type = '', 
                                    read_only = True, 
                                    source_image = '', 
                                    source_snapshot = '', ), 
                                mount_path = '', )
                            ], 
                        etag = '', 
                        host = openapi_client.models.host.Host(
                            gce_instance = openapi_client.models.gce_instance.GceInstance(
                                accelerators = [
                                    openapi_client.models.accelerator.Accelerator(
                                        count = 56, 
                                        type = '', )
                                    ], 
                                boot_disk_size_gb = 56, 
                                confidential_instance_config = openapi_client.models.gce_confidential_instance_config.GceConfidentialInstanceConfig(
                                    enable_confidential_compute = True, ), 
                                disable_public_ip_addresses = True, 
                                disable_ssh = True, 
                                enable_nested_virtualization = True, 
                                machine_type = '', 
                                pool_size = 56, 
                                pooled_instances = 56, 
                                service_account = '', 
                                service_account_scopes = [
                                    ''
                                    ], 
                                shielded_instance_config = openapi_client.models.gce_shielded_instance_config.GceShieldedInstanceConfig(
                                    enable_integrity_monitoring = True, 
                                    enable_secure_boot = True, 
                                    enable_vtpm = True, ), 
                                tags = [
                                    ''
                                    ], ), ), 
                        idle_timeout = '', 
                        labels = {
                            'key' : ''
                            }, 
                        name = '', 
                        persistent_directories = [
                            openapi_client.models.persistent_directory.PersistentDirectory(
                                mount_path = '', )
                            ], 
                        readiness_checks = [
                            openapi_client.models.readiness_check.ReadinessCheck(
                                path = '', 
                                port = 56, )
                            ], 
                        reconciling = True, 
                        replica_zones = [
                            ''
                            ], 
                        running_timeout = '', 
                        uid = '', 
                        update_time = '', )
                    ]
            )
        else:
            return ListUsableWorkstationConfigsResponse(
        )
        """

    def testListUsableWorkstationConfigsResponse(self):
        """Test ListUsableWorkstationConfigsResponse"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

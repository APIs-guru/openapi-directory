# coding: utf-8

"""
    Cloud Workstations API

    Allows administrators to create managed developer environments in the cloud. 

    The version of the OpenAPI document: v1beta
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.gce_instance import GceInstance

class TestGceInstance(unittest.TestCase):
    """GceInstance unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> GceInstance:
        """Test GceInstance
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `GceInstance`
        """
        model = GceInstance()
        if include_optional:
            return GceInstance(
                accelerators = [
                    openapi_client.models.accelerator.Accelerator(
                        count = 56, 
                        type = '', )
                    ],
                boot_disk_size_gb = 56,
                confidential_instance_config = openapi_client.models.gce_confidential_instance_config.GceConfidentialInstanceConfig(
                    enable_confidential_compute = True, ),
                disable_public_ip_addresses = True,
                disable_ssh = True,
                enable_nested_virtualization = True,
                machine_type = '',
                pool_size = 56,
                pooled_instances = 56,
                service_account = '',
                service_account_scopes = [
                    ''
                    ],
                shielded_instance_config = openapi_client.models.gce_shielded_instance_config.GceShieldedInstanceConfig(
                    enable_integrity_monitoring = True, 
                    enable_secure_boot = True, 
                    enable_vtpm = True, ),
                tags = [
                    ''
                    ]
            )
        else:
            return GceInstance(
        )
        """

    def testGceInstance(self):
        """Test GceInstance"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

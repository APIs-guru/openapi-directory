# coding: utf-8

"""
    Cloud Workstations API

    Allows administrators to create managed developer environments in the cloud. 

    The version of the OpenAPI document: v1beta
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class Workstation(BaseModel):
    """
    A single instance of a developer workstation with its own persistent storage.
    """ # noqa: E501
    annotations: Optional[Dict[str, StrictStr]] = Field(default=None, description="Optional. Client-specified annotations.")
    create_time: Optional[StrictStr] = Field(default=None, description="Output only. Time when this workstation was created.", alias="createTime")
    delete_time: Optional[StrictStr] = Field(default=None, description="Output only. Time when this workstation was soft-deleted.", alias="deleteTime")
    display_name: Optional[StrictStr] = Field(default=None, description="Optional. Human-readable name for this workstation.", alias="displayName")
    env: Optional[Dict[str, StrictStr]] = Field(default=None, description="Optional. Environment variables passed to the workstation container's entrypoint.")
    etag: Optional[StrictStr] = Field(default=None, description="Optional. Checksum computed by the server. May be sent on update and delete requests to make sure that the client has an up-to-date value before proceeding.")
    host: Optional[StrictStr] = Field(default=None, description="Output only. Host to which clients can send HTTPS traffic that will be received by the workstation. Authorized traffic will be received to the workstation as HTTP on port 80. To send traffic to a different port, clients may prefix the host with the destination port in the format `{port}-{host}`.")
    kms_key: Optional[StrictStr] = Field(default=None, description="Output only. The name of the Google Cloud KMS encryption key used to encrypt this workstation. The KMS key can only be configured in the WorkstationConfig. The expected format is `projects/*/locations/*/keyRings/*/cryptoKeys/*`.", alias="kmsKey")
    labels: Optional[Dict[str, StrictStr]] = Field(default=None, description="Optional. [Labels](https://cloud.google.com/workstations/docs/label-resources) that are applied to the workstation and that are also propagated to the underlying Compute Engine resources.")
    name: Optional[StrictStr] = Field(default=None, description="Identifier. Full name of this workstation.")
    reconciling: Optional[StrictBool] = Field(default=None, description="Output only. Indicates whether this workstation is currently being updated to match its intended state.")
    start_time: Optional[StrictStr] = Field(default=None, description="Output only. Time when this workstation was most recently successfully started, regardless of the workstation's initial state.", alias="startTime")
    state: Optional[StrictStr] = Field(default=None, description="Output only. Current state of the workstation.")
    uid: Optional[StrictStr] = Field(default=None, description="Output only. A system-assigned unique identifier for this workstation.")
    update_time: Optional[StrictStr] = Field(default=None, description="Output only. Time when this workstation was most recently updated.", alias="updateTime")
    __properties: ClassVar[List[str]] = ["annotations", "createTime", "deleteTime", "displayName", "env", "etag", "host", "kmsKey", "labels", "name", "reconciling", "startTime", "state", "uid", "updateTime"]

    @field_validator('state')
    def state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['STATE_UNSPECIFIED', 'STATE_STARTING', 'STATE_RUNNING', 'STATE_STOPPING', 'STATE_STOPPED']):
            raise ValueError("must be one of enum values ('STATE_UNSPECIFIED', 'STATE_STARTING', 'STATE_RUNNING', 'STATE_STOPPING', 'STATE_STOPPED')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Workstation from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "create_time",
            "delete_time",
            "host",
            "kms_key",
            "reconciling",
            "start_time",
            "state",
            "uid",
            "update_time",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Workstation from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "annotations": obj.get("annotations"),
            "createTime": obj.get("createTime"),
            "deleteTime": obj.get("deleteTime"),
            "displayName": obj.get("displayName"),
            "env": obj.get("env"),
            "etag": obj.get("etag"),
            "host": obj.get("host"),
            "kmsKey": obj.get("kmsKey"),
            "labels": obj.get("labels"),
            "name": obj.get("name"),
            "reconciling": obj.get("reconciling"),
            "startTime": obj.get("startTime"),
            "state": obj.get("state"),
            "uid": obj.get("uid"),
            "updateTime": obj.get("updateTime")
        })
        return _obj



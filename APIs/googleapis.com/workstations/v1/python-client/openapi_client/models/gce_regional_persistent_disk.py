# coding: utf-8

"""
    Cloud Workstations API

    Allows administrators to create managed developer environments in the cloud. 

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class GceRegionalPersistentDisk(BaseModel):
    """
    A PersistentDirectory backed by a Compute Engine regional persistent disk. The persistent_directories field is repeated, but it may contain only one entry. It creates a [persistent disk](https://cloud.google.com/compute/docs/disks/persistent-disks) that mounts to the workstation VM at `/home` when the session starts and detaches when the session ends. If this field is empty, workstations created with this configuration do not have a persistent home directory.
    """ # noqa: E501
    disk_type: Optional[StrictStr] = Field(default=None, description="Optional. The [type of the persistent disk](https://cloud.google.com/compute/docs/disks#disk-types) for the home directory. Defaults to `\"pd-standard\"`.", alias="diskType")
    fs_type: Optional[StrictStr] = Field(default=None, description="Optional. Type of file system that the disk should be formatted with. The workstation image must support this file system type. Must be empty if source_snapshot is set. Defaults to `\"ext4\"`.", alias="fsType")
    reclaim_policy: Optional[StrictStr] = Field(default=None, description="Optional. Whether the persistent disk should be deleted when the workstation is deleted. Valid values are `DELETE` and `RETAIN`. Defaults to `DELETE`.", alias="reclaimPolicy")
    size_gb: Optional[StrictInt] = Field(default=None, description="Optional. The GB capacity of a persistent home directory for each workstation created with this configuration. Must be empty if source_snapshot is set. Valid values are `10`, `50`, `100`, `200`, `500`, or `1000`. Defaults to `200`. If less than `200` GB, the disk_type must be `\"pd-balanced\"` or `\"pd-ssd\"`.", alias="sizeGb")
    source_snapshot: Optional[StrictStr] = Field(default=None, description="Optional. Name of the snapshot to use as the source for the disk. If set, size_gb and fs_type must be empty.", alias="sourceSnapshot")
    __properties: ClassVar[List[str]] = ["diskType", "fsType", "reclaimPolicy", "sizeGb", "sourceSnapshot"]

    @field_validator('reclaim_policy')
    def reclaim_policy_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['RECLAIM_POLICY_UNSPECIFIED', 'DELETE', 'RETAIN']):
            raise ValueError("must be one of enum values ('RECLAIM_POLICY_UNSPECIFIED', 'DELETE', 'RETAIN')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GceRegionalPersistentDisk from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GceRegionalPersistentDisk from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "diskType": obj.get("diskType"),
            "fsType": obj.get("fsType"),
            "reclaimPolicy": obj.get("reclaimPolicy"),
            "sizeGb": obj.get("sizeGb"),
            "sourceSnapshot": obj.get("sourceSnapshot")
        })
        return _obj



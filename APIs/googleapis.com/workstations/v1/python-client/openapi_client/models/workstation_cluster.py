# coding: utf-8

"""
    Cloud Workstations API

    Allows administrators to create managed developer environments in the cloud. 

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.domain_config import DomainConfig
from openapi_client.models.private_cluster_config import PrivateClusterConfig
from openapi_client.models.status import Status
from typing import Optional, Set
from typing_extensions import Self

class WorkstationCluster(BaseModel):
    """
    A workstation cluster resource in the Cloud Workstations API. Defines a group of workstations in a particular region and the VPC network they're attached to.
    """ # noqa: E501
    annotations: Optional[Dict[str, StrictStr]] = Field(default=None, description="Optional. Client-specified annotations.")
    conditions: Optional[List[Status]] = Field(default=None, description="Output only. Status conditions describing the workstation cluster's current state.")
    control_plane_ip: Optional[StrictStr] = Field(default=None, description="Output only. The private IP address of the control plane for this workstation cluster. Workstation VMs need access to this IP address to work with the service, so make sure that your firewall rules allow egress from the workstation VMs to this address.", alias="controlPlaneIp")
    create_time: Optional[StrictStr] = Field(default=None, description="Output only. Time when this workstation cluster was created.", alias="createTime")
    degraded: Optional[StrictBool] = Field(default=None, description="Output only. Whether this workstation cluster is in degraded mode, in which case it may require user action to restore full functionality. Details can be found in conditions.")
    delete_time: Optional[StrictStr] = Field(default=None, description="Output only. Time when this workstation cluster was soft-deleted.", alias="deleteTime")
    display_name: Optional[StrictStr] = Field(default=None, description="Optional. Human-readable name for this workstation cluster.", alias="displayName")
    domain_config: Optional[DomainConfig] = Field(default=None, alias="domainConfig")
    etag: Optional[StrictStr] = Field(default=None, description="Optional. Checksum computed by the server. May be sent on update and delete requests to make sure that the client has an up-to-date value before proceeding.")
    labels: Optional[Dict[str, StrictStr]] = Field(default=None, description="Optional. [Labels](https://cloud.google.com/workstations/docs/label-resources) that are applied to the workstation cluster and that are also propagated to the underlying Compute Engine resources.")
    name: Optional[StrictStr] = Field(default=None, description="Identifier. Full name of this workstation cluster.")
    network: Optional[StrictStr] = Field(default=None, description="Immutable. Name of the Compute Engine network in which instances associated with this workstation cluster will be created.")
    private_cluster_config: Optional[PrivateClusterConfig] = Field(default=None, alias="privateClusterConfig")
    reconciling: Optional[StrictBool] = Field(default=None, description="Output only. Indicates whether this workstation cluster is currently being updated to match its intended state.")
    subnetwork: Optional[StrictStr] = Field(default=None, description="Immutable. Name of the Compute Engine subnetwork in which instances associated with this workstation cluster will be created. Must be part of the subnetwork specified for this workstation cluster.")
    uid: Optional[StrictStr] = Field(default=None, description="Output only. A system-assigned unique identifier for this workstation cluster.")
    update_time: Optional[StrictStr] = Field(default=None, description="Output only. Time when this workstation cluster was most recently updated.", alias="updateTime")
    __properties: ClassVar[List[str]] = ["annotations", "conditions", "controlPlaneIp", "createTime", "degraded", "deleteTime", "displayName", "domainConfig", "etag", "labels", "name", "network", "privateClusterConfig", "reconciling", "subnetwork", "uid", "updateTime"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of WorkstationCluster from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "conditions",
            "control_plane_ip",
            "create_time",
            "degraded",
            "delete_time",
            "reconciling",
            "uid",
            "update_time",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in conditions (list)
        _items = []
        if self.conditions:
            for _item_conditions in self.conditions:
                if _item_conditions:
                    _items.append(_item_conditions.to_dict())
            _dict['conditions'] = _items
        # override the default output from pydantic by calling `to_dict()` of domain_config
        if self.domain_config:
            _dict['domainConfig'] = self.domain_config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of private_cluster_config
        if self.private_cluster_config:
            _dict['privateClusterConfig'] = self.private_cluster_config.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of WorkstationCluster from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "annotations": obj.get("annotations"),
            "conditions": [Status.from_dict(_item) for _item in obj["conditions"]] if obj.get("conditions") is not None else None,
            "controlPlaneIp": obj.get("controlPlaneIp"),
            "createTime": obj.get("createTime"),
            "degraded": obj.get("degraded"),
            "deleteTime": obj.get("deleteTime"),
            "displayName": obj.get("displayName"),
            "domainConfig": DomainConfig.from_dict(obj["domainConfig"]) if obj.get("domainConfig") is not None else None,
            "etag": obj.get("etag"),
            "labels": obj.get("labels"),
            "name": obj.get("name"),
            "network": obj.get("network"),
            "privateClusterConfig": PrivateClusterConfig.from_dict(obj["privateClusterConfig"]) if obj.get("privateClusterConfig") is not None else None,
            "reconciling": obj.get("reconciling"),
            "subnetwork": obj.get("subnetwork"),
            "uid": obj.get("uid"),
            "updateTime": obj.get("updateTime")
        })
        return _obj



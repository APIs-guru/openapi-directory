# coding: utf-8

"""
    Cloud DNS API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.response_policy_rule_local_data import ResponsePolicyRuleLocalData

class TestResponsePolicyRuleLocalData(unittest.TestCase):
    """ResponsePolicyRuleLocalData unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> ResponsePolicyRuleLocalData:
        """Test ResponsePolicyRuleLocalData
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `ResponsePolicyRuleLocalData`
        """
        model = ResponsePolicyRuleLocalData()
        if include_optional:
            return ResponsePolicyRuleLocalData(
                local_datas = [
                    openapi_client.models.resource_record_set.ResourceRecordSet(
                        kind = 'dns#resourceRecordSet', 
                        name = '', 
                        routing_policy = openapi_client.models.rr_set_routing_policy.RRSetRoutingPolicy(
                            geo = openapi_client.models.rr_set_routing_policy_geo_policy.RRSetRoutingPolicyGeoPolicy(
                                enable_fencing = True, 
                                items = [
                                    openapi_client.models.rr_set_routing_policy_geo_policy_geo_policy_item.RRSetRoutingPolicyGeoPolicyGeoPolicyItem(
                                        health_checked_targets = openapi_client.models.rr_set_routing_policy_health_check_targets.RRSetRoutingPolicyHealthCheckTargets(
                                            external_endpoints = [
                                                ''
                                                ], 
                                            internal_load_balancers = [
                                                openapi_client.models.rr_set_routing_policy_load_balancer_target.RRSetRoutingPolicyLoadBalancerTarget(
                                                    ip_address = '', 
                                                    ip_protocol = 'UNDEFINED', 
                                                    kind = 'dns#rRSetRoutingPolicyLoadBalancerTarget', 
                                                    load_balancer_type = 'NONE', 
                                                    network_url = '', 
                                                    port = '', 
                                                    project = '', 
                                                    region = '', )
                                                ], ), 
                                        kind = 'dns#rRSetRoutingPolicyGeoPolicyGeoPolicyItem', 
                                        location = '', 
                                        rrdatas = [
                                            ''
                                            ], 
                                        signature_rrdatas = [
                                            ''
                                            ], )
                                    ], 
                                kind = 'dns#rRSetRoutingPolicyGeoPolicy', ), 
                            health_check = '', 
                            kind = 'dns#rRSetRoutingPolicy', 
                            primary_backup = openapi_client.models.rr_set_routing_policy_primary_backup_policy.RRSetRoutingPolicyPrimaryBackupPolicy(
                                backup_geo_targets = openapi_client.models.rr_set_routing_policy_geo_policy.RRSetRoutingPolicyGeoPolicy(
                                    enable_fencing = True, 
                                    kind = 'dns#rRSetRoutingPolicyGeoPolicy', ), 
                                kind = 'dns#rRSetRoutingPolicyPrimaryBackupPolicy', 
                                primary_targets = openapi_client.models.rr_set_routing_policy_health_check_targets.RRSetRoutingPolicyHealthCheckTargets(), 
                                trickle_traffic = 1.337, ), 
                            wrr = openapi_client.models.rr_set_routing_policy_wrr_policy.RRSetRoutingPolicyWrrPolicy(
                                kind = 'dns#rRSetRoutingPolicyWrrPolicy', ), ), 
                        rrdatas = [
                            ''
                            ], 
                        signature_rrdatas = [
                            ''
                            ], 
                        ttl = 56, 
                        type = '', )
                    ]
            )
        else:
            return ResponsePolicyRuleLocalData(
        )
        """

    def testResponsePolicyRuleLocalData(self):
        """Test ResponsePolicyRuleLocalData"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

# coding: utf-8

"""
    Cloud DNS API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.rr_set_routing_policy_primary_backup_policy import RRSetRoutingPolicyPrimaryBackupPolicy

class TestRRSetRoutingPolicyPrimaryBackupPolicy(unittest.TestCase):
    """RRSetRoutingPolicyPrimaryBackupPolicy unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> RRSetRoutingPolicyPrimaryBackupPolicy:
        """Test RRSetRoutingPolicyPrimaryBackupPolicy
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `RRSetRoutingPolicyPrimaryBackupPolicy`
        """
        model = RRSetRoutingPolicyPrimaryBackupPolicy()
        if include_optional:
            return RRSetRoutingPolicyPrimaryBackupPolicy(
                backup_geo_targets = openapi_client.models.rr_set_routing_policy_geo_policy.RRSetRoutingPolicyGeoPolicy(
                    enable_fencing = True, 
                    items = [
                        openapi_client.models.rr_set_routing_policy_geo_policy_geo_policy_item.RRSetRoutingPolicyGeoPolicyGeoPolicyItem(
                            health_checked_targets = openapi_client.models.rr_set_routing_policy_health_check_targets.RRSetRoutingPolicyHealthCheckTargets(
                                external_endpoints = [
                                    ''
                                    ], 
                                internal_load_balancers = [
                                    openapi_client.models.rr_set_routing_policy_load_balancer_target.RRSetRoutingPolicyLoadBalancerTarget(
                                        ip_address = '', 
                                        ip_protocol = 'UNDEFINED', 
                                        kind = 'dns#rRSetRoutingPolicyLoadBalancerTarget', 
                                        load_balancer_type = 'NONE', 
                                        network_url = '', 
                                        port = '', 
                                        project = '', 
                                        region = '', )
                                    ], ), 
                            kind = 'dns#rRSetRoutingPolicyGeoPolicyGeoPolicyItem', 
                            location = '', 
                            rrdatas = [
                                ''
                                ], 
                            signature_rrdatas = [
                                ''
                                ], )
                        ], 
                    kind = 'dns#rRSetRoutingPolicyGeoPolicy', ),
                kind = 'dns#rRSetRoutingPolicyPrimaryBackupPolicy',
                primary_targets = openapi_client.models.rr_set_routing_policy_health_check_targets.RRSetRoutingPolicyHealthCheckTargets(
                    external_endpoints = [
                        ''
                        ], 
                    internal_load_balancers = [
                        openapi_client.models.rr_set_routing_policy_load_balancer_target.RRSetRoutingPolicyLoadBalancerTarget(
                            ip_address = '', 
                            ip_protocol = 'UNDEFINED', 
                            kind = 'dns#rRSetRoutingPolicyLoadBalancerTarget', 
                            load_balancer_type = 'NONE', 
                            network_url = '', 
                            port = '', 
                            project = '', 
                            region = '', )
                        ], ),
                trickle_traffic = 1.337
            )
        else:
            return RRSetRoutingPolicyPrimaryBackupPolicy(
        )
        """

    def testRRSetRoutingPolicyPrimaryBackupPolicy(self):
        """Test RRSetRoutingPolicyPrimaryBackupPolicy"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

# coding: utf-8

"""
    Cloud DNS API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.dns_key_spec import DnsKeySpec
from typing import Optional, Set
from typing_extensions import Self

class ManagedZoneDnsSecConfig(BaseModel):
    """
    ManagedZoneDnsSecConfig
    """ # noqa: E501
    default_key_specs: Optional[List[DnsKeySpec]] = Field(default=None, description="Specifies parameters for generating initial DnsKeys for this ManagedZone. Can only be changed while the state is OFF.", alias="defaultKeySpecs")
    kind: Optional[StrictStr] = 'dns#managedZoneDnsSecConfig'
    non_existence: Optional[StrictStr] = Field(default=None, description="Specifies the mechanism for authenticated denial-of-existence responses. Can only be changed while the state is OFF.", alias="nonExistence")
    state: Optional[StrictStr] = Field(default=None, description="Specifies whether DNSSEC is enabled, and what mode it is in.")
    __properties: ClassVar[List[str]] = ["defaultKeySpecs", "kind", "nonExistence", "state"]

    @field_validator('non_existence')
    def non_existence_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['NSEC', 'NSEC3']):
            raise ValueError("must be one of enum values ('NSEC', 'NSEC3')")
        return value

    @field_validator('state')
    def state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['false', 'true', 'TRANSFER']):
            raise ValueError("must be one of enum values ('false', 'true', 'TRANSFER')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ManagedZoneDnsSecConfig from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in default_key_specs (list)
        _items = []
        if self.default_key_specs:
            for _item_default_key_specs in self.default_key_specs:
                if _item_default_key_specs:
                    _items.append(_item_default_key_specs.to_dict())
            _dict['defaultKeySpecs'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ManagedZoneDnsSecConfig from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "defaultKeySpecs": [DnsKeySpec.from_dict(_item) for _item in obj["defaultKeySpecs"]] if obj.get("defaultKeySpecs") is not None else None,
            "kind": obj.get("kind") if obj.get("kind") is not None else 'dns#managedZoneDnsSecConfig',
            "nonExistence": obj.get("nonExistence"),
            "state": obj.get("state")
        })
        return _obj



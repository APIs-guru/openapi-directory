# coding: utf-8

"""
    Cloud DNS API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.dns_key_digest import DnsKeyDigest
from typing import Optional, Set
from typing_extensions import Self

class DnsKey(BaseModel):
    """
    A DNSSEC key pair.
    """ # noqa: E501
    algorithm: Optional[StrictStr] = Field(default=None, description="String mnemonic specifying the DNSSEC algorithm of this key. Immutable after creation time.")
    creation_time: Optional[StrictStr] = Field(default=None, description="The time that this resource was created in the control plane. This is in RFC3339 text format. Output only.", alias="creationTime")
    description: Optional[StrictStr] = Field(default=None, description="A mutable string of at most 1024 characters associated with this resource for the user's convenience. Has no effect on the resource's function.")
    digests: Optional[List[DnsKeyDigest]] = Field(default=None, description="Cryptographic hashes of the DNSKEY resource record associated with this DnsKey. These digests are needed to construct a DS record that points at this DNS key. Output only.")
    id: Optional[StrictStr] = Field(default=None, description="Unique identifier for the resource; defined by the server (output only).")
    is_active: Optional[StrictBool] = Field(default=None, description="Active keys are used to sign subsequent changes to the ManagedZone. Inactive keys are still present as DNSKEY Resource Records for the use of resolvers validating existing signatures.", alias="isActive")
    key_length: Optional[StrictInt] = Field(default=None, description="Length of the key in bits. Specified at creation time, and then immutable.", alias="keyLength")
    key_tag: Optional[StrictInt] = Field(default=None, description="The key tag is a non-cryptographic hash of the a DNSKEY resource record associated with this DnsKey. The key tag can be used to identify a DNSKEY more quickly (but it is not a unique identifier). In particular, the key tag is used in a parent zone's DS record to point at the DNSKEY in this child ManagedZone. The key tag is a number in the range [0, 65535] and the algorithm to calculate it is specified in RFC4034 Appendix B. Output only.", alias="keyTag")
    kind: Optional[StrictStr] = 'dns#dnsKey'
    public_key: Optional[StrictStr] = Field(default=None, description="Base64 encoded public half of this key. Output only.", alias="publicKey")
    type: Optional[StrictStr] = Field(default=None, description="One of \"KEY_SIGNING\" or \"ZONE_SIGNING\". Keys of type KEY_SIGNING have the Secure Entry Point flag set and, when active, are used to sign only resource record sets of type DNSKEY. Otherwise, the Secure Entry Point flag is cleared, and this key is used to sign only resource record sets of other types. Immutable after creation time.")
    __properties: ClassVar[List[str]] = ["algorithm", "creationTime", "description", "digests", "id", "isActive", "keyLength", "keyTag", "kind", "publicKey", "type"]

    @field_validator('algorithm')
    def algorithm_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['RSASHA1', 'RSASHA256', 'RSASHA512', 'ECDSAP256SHA256', 'ECDSAP384SHA384']):
            raise ValueError("must be one of enum values ('RSASHA1', 'RSASHA256', 'RSASHA512', 'ECDSAP256SHA256', 'ECDSAP384SHA384')")
        return value

    @field_validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['KEY_SIGNING', 'ZONE_SIGNING']):
            raise ValueError("must be one of enum values ('KEY_SIGNING', 'ZONE_SIGNING')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DnsKey from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in digests (list)
        _items = []
        if self.digests:
            for _item_digests in self.digests:
                if _item_digests:
                    _items.append(_item_digests.to_dict())
            _dict['digests'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DnsKey from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "algorithm": obj.get("algorithm"),
            "creationTime": obj.get("creationTime"),
            "description": obj.get("description"),
            "digests": [DnsKeyDigest.from_dict(_item) for _item in obj["digests"]] if obj.get("digests") is not None else None,
            "id": obj.get("id"),
            "isActive": obj.get("isActive"),
            "keyLength": obj.get("keyLength"),
            "keyTag": obj.get("keyTag"),
            "kind": obj.get("kind") if obj.get("kind") is not None else 'dns#dnsKey',
            "publicKey": obj.get("publicKey"),
            "type": obj.get("type")
        })
        return _obj



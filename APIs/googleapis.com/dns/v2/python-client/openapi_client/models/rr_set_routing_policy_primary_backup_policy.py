# coding: utf-8

"""
    Cloud DNS API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from openapi_client.models.rr_set_routing_policy_geo_policy import RRSetRoutingPolicyGeoPolicy
from openapi_client.models.rr_set_routing_policy_health_check_targets import RRSetRoutingPolicyHealthCheckTargets
from typing import Optional, Set
from typing_extensions import Self

class RRSetRoutingPolicyPrimaryBackupPolicy(BaseModel):
    """
    Configures a RRSetRoutingPolicy such that all queries are responded with the primary_targets if they are healthy. And if all of them are unhealthy, then we fallback to a geo localized policy.
    """ # noqa: E501
    backup_geo_targets: Optional[RRSetRoutingPolicyGeoPolicy] = Field(default=None, alias="backupGeoTargets")
    kind: Optional[StrictStr] = 'dns#rRSetRoutingPolicyPrimaryBackupPolicy'
    primary_targets: Optional[RRSetRoutingPolicyHealthCheckTargets] = Field(default=None, alias="primaryTargets")
    trickle_traffic: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="When serving state is PRIMARY, this field provides the option of sending a small percentage of the traffic to the backup targets.", alias="trickleTraffic")
    __properties: ClassVar[List[str]] = ["backupGeoTargets", "kind", "primaryTargets", "trickleTraffic"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of RRSetRoutingPolicyPrimaryBackupPolicy from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of backup_geo_targets
        if self.backup_geo_targets:
            _dict['backupGeoTargets'] = self.backup_geo_targets.to_dict()
        # override the default output from pydantic by calling `to_dict()` of primary_targets
        if self.primary_targets:
            _dict['primaryTargets'] = self.primary_targets.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of RRSetRoutingPolicyPrimaryBackupPolicy from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "backupGeoTargets": RRSetRoutingPolicyGeoPolicy.from_dict(obj["backupGeoTargets"]) if obj.get("backupGeoTargets") is not None else None,
            "kind": obj.get("kind") if obj.get("kind") is not None else 'dns#rRSetRoutingPolicyPrimaryBackupPolicy',
            "primaryTargets": RRSetRoutingPolicyHealthCheckTargets.from_dict(obj["primaryTargets"]) if obj.get("primaryTargets") is not None else None,
            "trickleTraffic": obj.get("trickleTraffic")
        })
        return _obj



# coding: utf-8

"""
    Cloud DNS API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.managed_zones_list_response import ManagedZonesListResponse

class TestManagedZonesListResponse(unittest.TestCase):
    """ManagedZonesListResponse unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> ManagedZonesListResponse:
        """Test ManagedZonesListResponse
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `ManagedZonesListResponse`
        """
        model = ManagedZonesListResponse()
        if include_optional:
            return ManagedZonesListResponse(
                header = openapi_client.models.response_header.ResponseHeader(
                    operation_id = '', ),
                kind = 'dns#managedZonesListResponse',
                managed_zones = [
                    openapi_client.models.managed_zone.ManagedZone(
                        cloud_logging_config = openapi_client.models.managed_zone_cloud_logging_config.ManagedZoneCloudLoggingConfig(
                            enable_logging = True, 
                            kind = 'dns#managedZoneCloudLoggingConfig', ), 
                        creation_time = '', 
                        description = '', 
                        dns_name = '', 
                        dnssec_config = openapi_client.models.managed_zone_dns_sec_config.ManagedZoneDnsSecConfig(
                            default_key_specs = [
                                openapi_client.models.dns_key_spec.DnsKeySpec(
                                    algorithm = 'rsasha1', 
                                    key_length = 56, 
                                    key_type = 'keySigning', 
                                    kind = 'dns#dnsKeySpec', )
                                ], 
                            kind = 'dns#managedZoneDnsSecConfig', 
                            non_existence = 'nsec', 
                            state = 'false', ), 
                        forwarding_config = openapi_client.models.managed_zone_forwarding_config.ManagedZoneForwardingConfig(
                            kind = 'dns#managedZoneForwardingConfig', 
                            target_name_servers = [
                                openapi_client.models.managed_zone_forwarding_config_name_server_target.ManagedZoneForwardingConfigNameServerTarget(
                                    forwarding_path = 'default', 
                                    ipv4_address = '', 
                                    ipv6_address = '', 
                                    kind = 'dns#managedZoneForwardingConfigNameServerTarget', )
                                ], ), 
                        id = '', 
                        kind = 'dns#managedZone', 
                        labels = {
                            'key' : ''
                            }, 
                        name = '', 
                        name_server_set = '', 
                        name_servers = [
                            ''
                            ], 
                        peering_config = openapi_client.models.managed_zone_peering_config.ManagedZonePeeringConfig(
                            kind = 'dns#managedZonePeeringConfig', 
                            target_network = openapi_client.models.managed_zone_peering_config_target_network.ManagedZonePeeringConfigTargetNetwork(
                                deactivate_time = '', 
                                kind = 'dns#managedZonePeeringConfigTargetNetwork', 
                                network_url = '', ), ), 
                        private_visibility_config = openapi_client.models.managed_zone_private_visibility_config.ManagedZonePrivateVisibilityConfig(
                            gke_clusters = [
                                openapi_client.models.managed_zone_private_visibility_config_gke_cluster.ManagedZonePrivateVisibilityConfigGKECluster(
                                    gke_cluster_name = '', 
                                    kind = 'dns#managedZonePrivateVisibilityConfigGKECluster', )
                                ], 
                            kind = 'dns#managedZonePrivateVisibilityConfig', 
                            networks = [
                                openapi_client.models.managed_zone_private_visibility_config_network.ManagedZonePrivateVisibilityConfigNetwork(
                                    kind = 'dns#managedZonePrivateVisibilityConfigNetwork', 
                                    network_url = '', )
                                ], ), 
                        reverse_lookup_config = openapi_client.models.managed_zone_reverse_lookup_config.ManagedZoneReverseLookupConfig(
                            kind = 'dns#managedZoneReverseLookupConfig', ), 
                        service_directory_config = openapi_client.models.managed_zone_service_directory_config.ManagedZoneServiceDirectoryConfig(
                            kind = 'dns#managedZoneServiceDirectoryConfig', 
                            namespace = openapi_client.models.managed_zone_service_directory_config_namespace.ManagedZoneServiceDirectoryConfigNamespace(
                                deletion_time = '', 
                                kind = 'dns#managedZoneServiceDirectoryConfigNamespace', 
                                namespace_url = '', ), ), 
                        visibility = 'public', )
                    ],
                next_page_token = ''
            )
        else:
            return ManagedZonesListResponse(
        )
        """

    def testManagedZonesListResponse(self):
        """Test ManagedZonesListResponse"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

# coding: utf-8

"""
    Cloud DNS API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.dns_key_spec import DnsKeySpec
from typing import Optional, Set
from typing_extensions import Self

class Quota(BaseModel):
    """
    Limits associated with a Project.
    """ # noqa: E501
    dns_keys_per_managed_zone: Optional[StrictInt] = Field(default=None, description="Maximum allowed number of DnsKeys per ManagedZone.", alias="dnsKeysPerManagedZone")
    gke_clusters_per_managed_zone: Optional[StrictInt] = Field(default=None, description="Maximum allowed number of GKE clusters to which a privately scoped zone can be attached.", alias="gkeClustersPerManagedZone")
    gke_clusters_per_policy: Optional[StrictInt] = Field(default=None, description="Maximum allowed number of GKE clusters per policy.", alias="gkeClustersPerPolicy")
    gke_clusters_per_response_policy: Optional[StrictInt] = Field(default=None, description="Maximum allowed number of GKE clusters per response policy.", alias="gkeClustersPerResponsePolicy")
    items_per_routing_policy: Optional[StrictInt] = Field(default=None, description="Maximum allowed number of items per routing policy.", alias="itemsPerRoutingPolicy")
    kind: Optional[StrictStr] = 'dns#quota'
    managed_zones: Optional[StrictInt] = Field(default=None, description="Maximum allowed number of managed zones in the project.", alias="managedZones")
    managed_zones_per_gke_cluster: Optional[StrictInt] = Field(default=None, description="Maximum allowed number of managed zones which can be attached to a GKE cluster.", alias="managedZonesPerGkeCluster")
    managed_zones_per_network: Optional[StrictInt] = Field(default=None, description="Maximum allowed number of managed zones which can be attached to a network.", alias="managedZonesPerNetwork")
    nameservers_per_delegation: Optional[StrictInt] = Field(default=None, description="Maximum number of nameservers per delegation, meant to prevent abuse", alias="nameserversPerDelegation")
    networks_per_managed_zone: Optional[StrictInt] = Field(default=None, description="Maximum allowed number of networks to which a privately scoped zone can be attached.", alias="networksPerManagedZone")
    networks_per_policy: Optional[StrictInt] = Field(default=None, description="Maximum allowed number of networks per policy.", alias="networksPerPolicy")
    networks_per_response_policy: Optional[StrictInt] = Field(default=None, description="Maximum allowed number of networks per response policy.", alias="networksPerResponsePolicy")
    peering_zones_per_target_network: Optional[StrictInt] = Field(default=None, description="Maximum allowed number of consumer peering zones per target network owned by this producer project", alias="peeringZonesPerTargetNetwork")
    policies: Optional[StrictInt] = Field(default=None, description="Maximum allowed number of policies per project.")
    resource_records_per_rrset: Optional[StrictInt] = Field(default=None, description="Maximum allowed number of ResourceRecords per ResourceRecordSet.", alias="resourceRecordsPerRrset")
    response_policies: Optional[StrictInt] = Field(default=None, description="Maximum allowed number of response policies per project.", alias="responsePolicies")
    response_policy_rules_per_response_policy: Optional[StrictInt] = Field(default=None, description="Maximum allowed number of rules per response policy.", alias="responsePolicyRulesPerResponsePolicy")
    rrset_additions_per_change: Optional[StrictInt] = Field(default=None, description="Maximum allowed number of ResourceRecordSets to add per ChangesCreateRequest.", alias="rrsetAdditionsPerChange")
    rrset_deletions_per_change: Optional[StrictInt] = Field(default=None, description="Maximum allowed number of ResourceRecordSets to delete per ChangesCreateRequest.", alias="rrsetDeletionsPerChange")
    rrsets_per_managed_zone: Optional[StrictInt] = Field(default=None, description="Maximum allowed number of ResourceRecordSets per zone in the project.", alias="rrsetsPerManagedZone")
    target_name_servers_per_managed_zone: Optional[StrictInt] = Field(default=None, description="Maximum allowed number of target name servers per managed forwarding zone.", alias="targetNameServersPerManagedZone")
    target_name_servers_per_policy: Optional[StrictInt] = Field(default=None, description="Maximum allowed number of alternative target name servers per policy.", alias="targetNameServersPerPolicy")
    total_rrdata_size_per_change: Optional[StrictInt] = Field(default=None, description="Maximum allowed size for total rrdata in one ChangesCreateRequest in bytes.", alias="totalRrdataSizePerChange")
    whitelisted_key_specs: Optional[List[DnsKeySpec]] = Field(default=None, description="DNSSEC algorithm and key length types that can be used for DnsKeys.", alias="whitelistedKeySpecs")
    __properties: ClassVar[List[str]] = ["dnsKeysPerManagedZone", "gkeClustersPerManagedZone", "gkeClustersPerPolicy", "gkeClustersPerResponsePolicy", "itemsPerRoutingPolicy", "kind", "managedZones", "managedZonesPerGkeCluster", "managedZonesPerNetwork", "nameserversPerDelegation", "networksPerManagedZone", "networksPerPolicy", "networksPerResponsePolicy", "peeringZonesPerTargetNetwork", "policies", "resourceRecordsPerRrset", "responsePolicies", "responsePolicyRulesPerResponsePolicy", "rrsetAdditionsPerChange", "rrsetDeletionsPerChange", "rrsetsPerManagedZone", "targetNameServersPerManagedZone", "targetNameServersPerPolicy", "totalRrdataSizePerChange", "whitelistedKeySpecs"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Quota from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in whitelisted_key_specs (list)
        _items = []
        if self.whitelisted_key_specs:
            for _item_whitelisted_key_specs in self.whitelisted_key_specs:
                if _item_whitelisted_key_specs:
                    _items.append(_item_whitelisted_key_specs.to_dict())
            _dict['whitelistedKeySpecs'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Quota from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "dnsKeysPerManagedZone": obj.get("dnsKeysPerManagedZone"),
            "gkeClustersPerManagedZone": obj.get("gkeClustersPerManagedZone"),
            "gkeClustersPerPolicy": obj.get("gkeClustersPerPolicy"),
            "gkeClustersPerResponsePolicy": obj.get("gkeClustersPerResponsePolicy"),
            "itemsPerRoutingPolicy": obj.get("itemsPerRoutingPolicy"),
            "kind": obj.get("kind") if obj.get("kind") is not None else 'dns#quota',
            "managedZones": obj.get("managedZones"),
            "managedZonesPerGkeCluster": obj.get("managedZonesPerGkeCluster"),
            "managedZonesPerNetwork": obj.get("managedZonesPerNetwork"),
            "nameserversPerDelegation": obj.get("nameserversPerDelegation"),
            "networksPerManagedZone": obj.get("networksPerManagedZone"),
            "networksPerPolicy": obj.get("networksPerPolicy"),
            "networksPerResponsePolicy": obj.get("networksPerResponsePolicy"),
            "peeringZonesPerTargetNetwork": obj.get("peeringZonesPerTargetNetwork"),
            "policies": obj.get("policies"),
            "resourceRecordsPerRrset": obj.get("resourceRecordsPerRrset"),
            "responsePolicies": obj.get("responsePolicies"),
            "responsePolicyRulesPerResponsePolicy": obj.get("responsePolicyRulesPerResponsePolicy"),
            "rrsetAdditionsPerChange": obj.get("rrsetAdditionsPerChange"),
            "rrsetDeletionsPerChange": obj.get("rrsetDeletionsPerChange"),
            "rrsetsPerManagedZone": obj.get("rrsetsPerManagedZone"),
            "targetNameServersPerManagedZone": obj.get("targetNameServersPerManagedZone"),
            "targetNameServersPerPolicy": obj.get("targetNameServersPerPolicy"),
            "totalRrdataSizePerChange": obj.get("totalRrdataSizePerChange"),
            "whitelistedKeySpecs": [DnsKeySpec.from_dict(_item) for _item in obj["whitelistedKeySpecs"]] if obj.get("whitelistedKeySpecs") is not None else None
        })
        return _obj



# coding: utf-8

"""
    Cloud DNS API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.resource_record_set import ResourceRecordSet
from typing import Optional, Set
from typing_extensions import Self

class Change(BaseModel):
    """
    A Change represents a set of ResourceRecordSet additions and deletions applied atomically to a ManagedZone. ResourceRecordSets within a ManagedZone are modified by creating a new Change element in the Changes collection. In turn the Changes collection also records the past modifications to the ResourceRecordSets in a ManagedZone. The current state of the ManagedZone is the sum effect of applying all Change elements in the Changes collection in sequence.
    """ # noqa: E501
    additions: Optional[List[ResourceRecordSet]] = Field(default=None, description="Which ResourceRecordSets to add?")
    deletions: Optional[List[ResourceRecordSet]] = Field(default=None, description="Which ResourceRecordSets to remove? Must match existing data exactly.")
    id: Optional[StrictStr] = Field(default=None, description="Unique identifier for the resource; defined by the server (output only).")
    is_serving: Optional[StrictBool] = Field(default=None, description="If the DNS queries for the zone will be served.", alias="isServing")
    kind: Optional[StrictStr] = 'dns#change'
    start_time: Optional[StrictStr] = Field(default=None, description="The time that this operation was started by the server (output only). This is in RFC3339 text format.", alias="startTime")
    status: Optional[StrictStr] = Field(default=None, description="Status of the operation (output only). A status of \"done\" means that the request to update the authoritative servers has been sent, but the servers might not be updated yet.")
    __properties: ClassVar[List[str]] = ["additions", "deletions", "id", "isServing", "kind", "startTime", "status"]

    @field_validator('status')
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['pending', 'done']):
            raise ValueError("must be one of enum values ('pending', 'done')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Change from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in additions (list)
        _items = []
        if self.additions:
            for _item_additions in self.additions:
                if _item_additions:
                    _items.append(_item_additions.to_dict())
            _dict['additions'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in deletions (list)
        _items = []
        if self.deletions:
            for _item_deletions in self.deletions:
                if _item_deletions:
                    _items.append(_item_deletions.to_dict())
            _dict['deletions'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Change from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "additions": [ResourceRecordSet.from_dict(_item) for _item in obj["additions"]] if obj.get("additions") is not None else None,
            "deletions": [ResourceRecordSet.from_dict(_item) for _item in obj["deletions"]] if obj.get("deletions") is not None else None,
            "id": obj.get("id"),
            "isServing": obj.get("isServing"),
            "kind": obj.get("kind") if obj.get("kind") is not None else 'dns#change',
            "startTime": obj.get("startTime"),
            "status": obj.get("status")
        })
        return _obj



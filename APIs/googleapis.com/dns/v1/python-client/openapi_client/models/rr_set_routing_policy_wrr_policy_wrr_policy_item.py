# coding: utf-8

"""
    Cloud DNS API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from openapi_client.models.rr_set_routing_policy_health_check_targets import RRSetRoutingPolicyHealthCheckTargets
from typing import Optional, Set
from typing_extensions import Self

class RRSetRoutingPolicyWrrPolicyWrrPolicyItem(BaseModel):
    """
    A routing block which contains the routing information for one WRR item.
    """ # noqa: E501
    health_checked_targets: Optional[RRSetRoutingPolicyHealthCheckTargets] = Field(default=None, alias="healthCheckedTargets")
    kind: Optional[StrictStr] = 'dns#rRSetRoutingPolicyWrrPolicyWrrPolicyItem'
    rrdatas: Optional[List[StrictStr]] = None
    signature_rrdatas: Optional[List[StrictStr]] = Field(default=None, description="DNSSEC generated signatures for all the rrdata within this item. Note that if health checked targets are provided for DNSSEC enabled zones, there's a restriction of 1 IP address per item.", alias="signatureRrdatas")
    weight: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The weight corresponding to this WrrPolicyItem object. When multiple WrrPolicyItem objects are configured, the probability of returning an WrrPolicyItem object's data is proportional to its weight relative to the sum of weights configured for all items. This weight must be non-negative.")
    __properties: ClassVar[List[str]] = ["healthCheckedTargets", "kind", "rrdatas", "signatureRrdatas", "weight"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of RRSetRoutingPolicyWrrPolicyWrrPolicyItem from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of health_checked_targets
        if self.health_checked_targets:
            _dict['healthCheckedTargets'] = self.health_checked_targets.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of RRSetRoutingPolicyWrrPolicyWrrPolicyItem from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "healthCheckedTargets": RRSetRoutingPolicyHealthCheckTargets.from_dict(obj["healthCheckedTargets"]) if obj.get("healthCheckedTargets") is not None else None,
            "kind": obj.get("kind") if obj.get("kind") is not None else 'dns#rRSetRoutingPolicyWrrPolicyWrrPolicyItem',
            "rrdatas": obj.get("rrdatas"),
            "signatureRrdatas": obj.get("signatureRrdatas"),
            "weight": obj.get("weight")
        })
        return _obj



# coding: utf-8

"""
    Cloud DNS API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v1beta2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.policy_alternative_name_server_config import PolicyAlternativeNameServerConfig
from openapi_client.models.policy_network import PolicyNetwork
from typing import Optional, Set
from typing_extensions import Self

class Policy(BaseModel):
    """
    A policy is a collection of DNS rules applied to one or more Virtual Private Cloud resources.
    """ # noqa: E501
    alternative_name_server_config: Optional[PolicyAlternativeNameServerConfig] = Field(default=None, alias="alternativeNameServerConfig")
    description: Optional[StrictStr] = Field(default=None, description="A mutable string of at most 1024 characters associated with this resource for the user's convenience. Has no effect on the policy's function.")
    enable_inbound_forwarding: Optional[StrictBool] = Field(default=None, description="Allows networks bound to this policy to receive DNS queries sent by VMs or applications over VPN connections. When enabled, a virtual IP address is allocated from each of the subnetworks that are bound to this policy.", alias="enableInboundForwarding")
    enable_logging: Optional[StrictBool] = Field(default=None, description="Controls whether logging is enabled for the networks bound to this policy. Defaults to no logging if not set.", alias="enableLogging")
    id: Optional[StrictStr] = Field(default=None, description="Unique identifier for the resource; defined by the server (output only).")
    kind: Optional[StrictStr] = 'dns#policy'
    name: Optional[StrictStr] = Field(default=None, description="User-assigned name for this policy.")
    networks: Optional[List[PolicyNetwork]] = Field(default=None, description="List of network names specifying networks to which this policy is applied.")
    __properties: ClassVar[List[str]] = ["alternativeNameServerConfig", "description", "enableInboundForwarding", "enableLogging", "id", "kind", "name", "networks"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Policy from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of alternative_name_server_config
        if self.alternative_name_server_config:
            _dict['alternativeNameServerConfig'] = self.alternative_name_server_config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in networks (list)
        _items = []
        if self.networks:
            for _item_networks in self.networks:
                if _item_networks:
                    _items.append(_item_networks.to_dict())
            _dict['networks'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Policy from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "alternativeNameServerConfig": PolicyAlternativeNameServerConfig.from_dict(obj["alternativeNameServerConfig"]) if obj.get("alternativeNameServerConfig") is not None else None,
            "description": obj.get("description"),
            "enableInboundForwarding": obj.get("enableInboundForwarding"),
            "enableLogging": obj.get("enableLogging"),
            "id": obj.get("id"),
            "kind": obj.get("kind") if obj.get("kind") is not None else 'dns#policy',
            "name": obj.get("name"),
            "networks": [PolicyNetwork.from_dict(_item) for _item in obj["networks"]] if obj.get("networks") is not None else None
        })
        return _obj



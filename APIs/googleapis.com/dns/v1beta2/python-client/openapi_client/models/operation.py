# coding: utf-8

"""
    Cloud DNS API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v1beta2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.operation_dns_key_context import OperationDnsKeyContext
from openapi_client.models.operation_managed_zone_context import OperationManagedZoneContext
from typing import Optional, Set
from typing_extensions import Self

class Operation(BaseModel):
    """
    An operation represents a successful mutation performed on a Cloud DNS resource. Operations provide: - An audit log of server resource mutations. - A way to recover/retry API calls in the case where the response is never received by the caller. Use the caller specified client_operation_id.
    """ # noqa: E501
    dns_key_context: Optional[OperationDnsKeyContext] = Field(default=None, alias="dnsKeyContext")
    id: Optional[StrictStr] = Field(default=None, description="Unique identifier for the resource. This is the client_operation_id if the client specified it when the mutation was initiated, otherwise, it is generated by the server. The name must be 1-63 characters long and match the regular expression [-a-z0-9]? (output only)")
    kind: Optional[StrictStr] = 'dns#operation'
    start_time: Optional[StrictStr] = Field(default=None, description="The time that this operation was started by the server. This is in RFC3339 text format (output only).", alias="startTime")
    status: Optional[StrictStr] = Field(default=None, description="Status of the operation. Can be one of the following: \"PENDING\" or \"DONE\" (output only). A status of \"DONE\" means that the request to update the authoritative servers has been sent, but the servers might not be updated yet.")
    type: Optional[StrictStr] = Field(default=None, description="Type of the operation. Operations include insert, update, and delete (output only).")
    user: Optional[StrictStr] = Field(default=None, description="User who requested the operation, for example: user@example.com. cloud-dns-system for operations automatically done by the system. (output only)")
    zone_context: Optional[OperationManagedZoneContext] = Field(default=None, alias="zoneContext")
    __properties: ClassVar[List[str]] = ["dnsKeyContext", "id", "kind", "startTime", "status", "type", "user", "zoneContext"]

    @field_validator('status')
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['pending', 'done']):
            raise ValueError("must be one of enum values ('pending', 'done')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Operation from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of dns_key_context
        if self.dns_key_context:
            _dict['dnsKeyContext'] = self.dns_key_context.to_dict()
        # override the default output from pydantic by calling `to_dict()` of zone_context
        if self.zone_context:
            _dict['zoneContext'] = self.zone_context.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Operation from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "dnsKeyContext": OperationDnsKeyContext.from_dict(obj["dnsKeyContext"]) if obj.get("dnsKeyContext") is not None else None,
            "id": obj.get("id"),
            "kind": obj.get("kind") if obj.get("kind") is not None else 'dns#operation',
            "startTime": obj.get("startTime"),
            "status": obj.get("status"),
            "type": obj.get("type"),
            "user": obj.get("user"),
            "zoneContext": OperationManagedZoneContext.from_dict(obj["zoneContext"]) if obj.get("zoneContext") is not None else None
        })
        return _obj



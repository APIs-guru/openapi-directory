# coding: utf-8

"""
    Cloud DNS API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v1beta2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.response_header import ResponseHeader
from openapi_client.models.response_policy import ResponsePolicy
from typing import Optional, Set
from typing_extensions import Self

class ResponsePoliciesListResponse(BaseModel):
    """
    ResponsePoliciesListResponse
    """ # noqa: E501
    header: Optional[ResponseHeader] = None
    next_page_token: Optional[StrictStr] = Field(default=None, description="The presence of this field indicates that more results exist following your last page of results in pagination order. To fetch them, make another list request by using this value as your page token. This lets you view the complete contents of even very large collections one page at a time. However, if the contents of the collection change between the first and last paginated list request, the set of all elements returned are an inconsistent view of the collection. You cannot retrieve a consistent snapshot of a collection larger than the maximum page size.", alias="nextPageToken")
    response_policies: Optional[List[ResponsePolicy]] = Field(default=None, description="The Response Policy resources.", alias="responsePolicies")
    __properties: ClassVar[List[str]] = ["header", "nextPageToken", "responsePolicies"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ResponsePoliciesListResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of header
        if self.header:
            _dict['header'] = self.header.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in response_policies (list)
        _items = []
        if self.response_policies:
            for _item_response_policies in self.response_policies:
                if _item_response_policies:
                    _items.append(_item_response_policies.to_dict())
            _dict['responsePolicies'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ResponsePoliciesListResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "header": ResponseHeader.from_dict(obj["header"]) if obj.get("header") is not None else None,
            "nextPageToken": obj.get("nextPageToken"),
            "responsePolicies": [ResponsePolicy.from_dict(_item) for _item in obj["responsePolicies"]] if obj.get("responsePolicies") is not None else None
        })
        return _obj



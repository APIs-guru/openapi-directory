# coding: utf-8

"""
    Cloud DNS API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v1beta2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.response_policy_rule_local_data import ResponsePolicyRuleLocalData
from typing import Optional, Set
from typing_extensions import Self

class ResponsePolicyRule(BaseModel):
    """
    A Response Policy Rule is a selector that applies its behavior to queries that match the selector. Selectors are DNS names, which may be wildcards or exact matches. Each DNS query subject to a Response Policy matches at most one ResponsePolicyRule, as identified by the dns_name field with the longest matching suffix.
    """ # noqa: E501
    behavior: Optional[StrictStr] = Field(default=None, description="Answer this query with a behavior rather than DNS data.")
    dns_name: Optional[StrictStr] = Field(default=None, description="The DNS name (wildcard or exact) to apply this rule to. Must be unique within the Response Policy Rule.", alias="dnsName")
    kind: Optional[StrictStr] = 'dns#responsePolicyRule'
    local_data: Optional[ResponsePolicyRuleLocalData] = Field(default=None, alias="localData")
    rule_name: Optional[StrictStr] = Field(default=None, description="An identifier for this rule. Must be unique with the ResponsePolicy.", alias="ruleName")
    __properties: ClassVar[List[str]] = ["behavior", "dnsName", "kind", "localData", "ruleName"]

    @field_validator('behavior')
    def behavior_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['behaviorUnspecified', 'bypassResponsePolicy']):
            raise ValueError("must be one of enum values ('behaviorUnspecified', 'bypassResponsePolicy')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ResponsePolicyRule from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of local_data
        if self.local_data:
            _dict['localData'] = self.local_data.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ResponsePolicyRule from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "behavior": obj.get("behavior"),
            "dnsName": obj.get("dnsName"),
            "kind": obj.get("kind") if obj.get("kind") is not None else 'dns#responsePolicyRule',
            "localData": ResponsePolicyRuleLocalData.from_dict(obj["localData"]) if obj.get("localData") is not None else None,
            "ruleName": obj.get("ruleName")
        })
        return _obj



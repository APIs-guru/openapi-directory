# coding: utf-8

"""
    Cloud DNS API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v1beta2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.response_policy_gke_cluster import ResponsePolicyGKECluster
from openapi_client.models.response_policy_network import ResponsePolicyNetwork
from typing import Optional, Set
from typing_extensions import Self

class ResponsePolicy(BaseModel):
    """
    A Response Policy is a collection of selectors that apply to queries made against one or more Virtual Private Cloud networks.
    """ # noqa: E501
    description: Optional[StrictStr] = Field(default=None, description="User-provided description for this Response Policy.")
    gke_clusters: Optional[List[ResponsePolicyGKECluster]] = Field(default=None, description="The list of Google Kubernetes Engine clusters to which this response policy is applied.", alias="gkeClusters")
    id: Optional[StrictStr] = Field(default=None, description="Unique identifier for the resource; defined by the server (output only).")
    kind: Optional[StrictStr] = 'dns#responsePolicy'
    labels: Optional[Dict[str, StrictStr]] = Field(default=None, description="User labels.")
    networks: Optional[List[ResponsePolicyNetwork]] = Field(default=None, description="List of network names specifying networks to which this policy is applied.")
    response_policy_name: Optional[StrictStr] = Field(default=None, description="User assigned name for this Response Policy.", alias="responsePolicyName")
    __properties: ClassVar[List[str]] = ["description", "gkeClusters", "id", "kind", "labels", "networks", "responsePolicyName"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ResponsePolicy from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in gke_clusters (list)
        _items = []
        if self.gke_clusters:
            for _item_gke_clusters in self.gke_clusters:
                if _item_gke_clusters:
                    _items.append(_item_gke_clusters.to_dict())
            _dict['gkeClusters'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in networks (list)
        _items = []
        if self.networks:
            for _item_networks in self.networks:
                if _item_networks:
                    _items.append(_item_networks.to_dict())
            _dict['networks'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ResponsePolicy from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "description": obj.get("description"),
            "gkeClusters": [ResponsePolicyGKECluster.from_dict(_item) for _item in obj["gkeClusters"]] if obj.get("gkeClusters") is not None else None,
            "id": obj.get("id"),
            "kind": obj.get("kind") if obj.get("kind") is not None else 'dns#responsePolicy',
            "labels": obj.get("labels"),
            "networks": [ResponsePolicyNetwork.from_dict(_item) for _item in obj["networks"]] if obj.get("networks") is not None else None,
            "responsePolicyName": obj.get("responsePolicyName")
        })
        return _obj



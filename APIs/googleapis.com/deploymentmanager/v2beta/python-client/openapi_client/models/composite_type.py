# coding: utf-8

"""
    Cloud Deployment Manager V2 API

    The Google Cloud Deployment Manager v2 API provides services for configuring, deploying, and viewing Google Cloud services and APIs via templates which specify deployments of Cloud resources.

    The version of the OpenAPI document: v2beta
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.composite_type_label_entry import CompositeTypeLabelEntry
from openapi_client.models.operation import Operation
from openapi_client.models.template_contents import TemplateContents
from typing import Optional, Set
from typing_extensions import Self

class CompositeType(BaseModel):
    """
    Holds the composite type.
    """ # noqa: E501
    description: Optional[StrictStr] = Field(default=None, description="An optional textual description of the resource; provided by the client when the resource is created.")
    id: Optional[StrictStr] = None
    insert_time: Optional[StrictStr] = Field(default=None, description="Output only. Creation timestamp in RFC3339 text format.", alias="insertTime")
    labels: Optional[List[CompositeTypeLabelEntry]] = Field(default=None, description="Map of labels; provided by the client when the resource is created or updated. Specifically: Label keys must be between 1 and 63 characters long and must conform to the following regular expression: `[a-z]([-a-z0-9]*[a-z0-9])?` Label values must be between 0 and 63 characters long and must conform to the regular expression `([a-z]([-a-z0-9]*[a-z0-9])?)?`.")
    name: Optional[StrictStr] = Field(default=None, description="Name of the composite type, must follow the expression: `[a-z]([-a-z0-9_.]{0,61}[a-z0-9])?`.")
    operation: Optional[Operation] = None
    self_link: Optional[StrictStr] = Field(default=None, description="Output only. Server defined URL for the resource.", alias="selfLink")
    status: Optional[StrictStr] = None
    template_contents: Optional[TemplateContents] = Field(default=None, alias="templateContents")
    __properties: ClassVar[List[str]] = ["description", "id", "insertTime", "labels", "name", "operation", "selfLink", "status", "templateContents"]

    @field_validator('status')
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['UNKNOWN_STATUS', 'DEPRECATED', 'EXPERIMENTAL', 'SUPPORTED']):
            raise ValueError("must be one of enum values ('UNKNOWN_STATUS', 'DEPRECATED', 'EXPERIMENTAL', 'SUPPORTED')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CompositeType from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in labels (list)
        _items = []
        if self.labels:
            for _item_labels in self.labels:
                if _item_labels:
                    _items.append(_item_labels.to_dict())
            _dict['labels'] = _items
        # override the default output from pydantic by calling `to_dict()` of operation
        if self.operation:
            _dict['operation'] = self.operation.to_dict()
        # override the default output from pydantic by calling `to_dict()` of template_contents
        if self.template_contents:
            _dict['templateContents'] = self.template_contents.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CompositeType from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "description": obj.get("description"),
            "id": obj.get("id"),
            "insertTime": obj.get("insertTime"),
            "labels": [CompositeTypeLabelEntry.from_dict(_item) for _item in obj["labels"]] if obj.get("labels") is not None else None,
            "name": obj.get("name"),
            "operation": Operation.from_dict(obj["operation"]) if obj.get("operation") is not None else None,
            "selfLink": obj.get("selfLink"),
            "status": obj.get("status"),
            "templateContents": TemplateContents.from_dict(obj["templateContents"]) if obj.get("templateContents") is not None else None
        })
        return _obj



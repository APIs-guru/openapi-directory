# coding: utf-8

"""
    Cloud Deployment Manager V2 API

    The Google Cloud Deployment Manager v2 API provides services for configuring, deploying, and viewing Google Cloud services and APIs via templates which specify deployments of Cloud resources.

    The version of the OpenAPI document: v2beta
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.operation_warnings_inner import OperationWarningsInner
from openapi_client.models.resource_access_control import ResourceAccessControl
from openapi_client.models.resource_update import ResourceUpdate
from typing import Optional, Set
from typing_extensions import Self

class Resource(BaseModel):
    """
    Resource
    """ # noqa: E501
    access_control: Optional[ResourceAccessControl] = Field(default=None, alias="accessControl")
    final_properties: Optional[StrictStr] = Field(default=None, description="Output only. The evaluated properties of the resource with references expanded. Returned as serialized YAML.", alias="finalProperties")
    id: Optional[StrictStr] = None
    insert_time: Optional[StrictStr] = Field(default=None, description="Output only. Creation timestamp in RFC3339 text format.", alias="insertTime")
    manifest: Optional[StrictStr] = Field(default=None, description="Output only. URL of the manifest representing the current configuration of this resource.")
    name: Optional[StrictStr] = Field(default=None, description="Output only. The name of the resource as it appears in the YAML config.")
    properties: Optional[StrictStr] = Field(default=None, description="Output only. The current properties of the resource before any references have been filled in. Returned as serialized YAML.")
    type: Optional[StrictStr] = Field(default=None, description="Output only. The type of the resource, for example `compute.v1.instance`, or `cloudfunctions.v1beta1.function`.")
    update: Optional[ResourceUpdate] = None
    update_time: Optional[StrictStr] = Field(default=None, description="Output only. Update timestamp in RFC3339 text format.", alias="updateTime")
    url: Optional[StrictStr] = Field(default=None, description="Output only. The URL of the actual resource.")
    warnings: Optional[List[OperationWarningsInner]] = Field(default=None, description="Output only. If warning messages are generated during processing of this resource, this field will be populated.")
    __properties: ClassVar[List[str]] = ["accessControl", "finalProperties", "id", "insertTime", "manifest", "name", "properties", "type", "update", "updateTime", "url", "warnings"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Resource from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of access_control
        if self.access_control:
            _dict['accessControl'] = self.access_control.to_dict()
        # override the default output from pydantic by calling `to_dict()` of update
        if self.update:
            _dict['update'] = self.update.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in warnings (list)
        _items = []
        if self.warnings:
            for _item_warnings in self.warnings:
                if _item_warnings:
                    _items.append(_item_warnings.to_dict())
            _dict['warnings'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Resource from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "accessControl": ResourceAccessControl.from_dict(obj["accessControl"]) if obj.get("accessControl") is not None else None,
            "finalProperties": obj.get("finalProperties"),
            "id": obj.get("id"),
            "insertTime": obj.get("insertTime"),
            "manifest": obj.get("manifest"),
            "name": obj.get("name"),
            "properties": obj.get("properties"),
            "type": obj.get("type"),
            "update": ResourceUpdate.from_dict(obj["update"]) if obj.get("update") is not None else None,
            "updateTime": obj.get("updateTime"),
            "url": obj.get("url"),
            "warnings": [OperationWarningsInner.from_dict(_item) for _item in obj["warnings"]] if obj.get("warnings") is not None else None
        })
        return _obj



# coding: utf-8

"""
    Cloud Deployment Manager V2 API

    The Google Cloud Deployment Manager v2 API provides services for configuring, deploying, and viewing Google Cloud services and APIs via templates which specify deployments of Cloud resources.

    The version of the OpenAPI document: v2beta
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBytes, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from openapi_client.models.deployment_label_entry import DeploymentLabelEntry
from openapi_client.models.deployment_update import DeploymentUpdate
from openapi_client.models.operation import Operation
from openapi_client.models.target_configuration import TargetConfiguration
from typing import Optional, Set
from typing_extensions import Self

class Deployment(BaseModel):
    """
    Deployment
    """ # noqa: E501
    description: Optional[StrictStr] = Field(default=None, description="An optional user-provided description of the deployment.")
    fingerprint: Optional[Union[StrictBytes, StrictStr]] = Field(default=None, description="Provides a fingerprint to use in requests to modify a deployment, such as `update()`, `stop()`, and `cancelPreview()` requests. A fingerprint is a randomly generated value that must be provided with `update()`, `stop()`, and `cancelPreview()` requests to perform optimistic locking. This ensures optimistic concurrency so that only one request happens at a time. The fingerprint is initially generated by Deployment Manager and changes after every request to modify data. To get the latest fingerprint value, perform a `get()` request to a deployment.")
    id: Optional[StrictStr] = None
    insert_time: Optional[StrictStr] = Field(default=None, description="Output only. Creation timestamp in RFC3339 text format.", alias="insertTime")
    labels: Optional[List[DeploymentLabelEntry]] = Field(default=None, description="Map of One Platform labels; provided by the client when the resource is created or updated. Specifically: Label keys must be between 1 and 63 characters long and must conform to the following regular expression: `[a-z]([-a-z0-9]*[a-z0-9])?` Label values must be between 0 and 63 characters long and must conform to the regular expression `([a-z]([-a-z0-9]*[a-z0-9])?)?`.")
    manifest: Optional[StrictStr] = Field(default=None, description="Output only. URL of the manifest representing the last manifest that was successfully deployed. If no manifest has been successfully deployed, this field will be absent.")
    name: Optional[StrictStr] = Field(default=None, description="Name of the resource; provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.")
    operation: Optional[Operation] = None
    self_link: Optional[StrictStr] = Field(default=None, description="Output only. Server defined URL for the resource.", alias="selfLink")
    target: Optional[TargetConfiguration] = None
    update: Optional[DeploymentUpdate] = None
    update_time: Optional[StrictStr] = Field(default=None, description="Output only. Update timestamp in RFC3339 text format.", alias="updateTime")
    __properties: ClassVar[List[str]] = ["description", "fingerprint", "id", "insertTime", "labels", "manifest", "name", "operation", "selfLink", "target", "update", "updateTime"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Deployment from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in labels (list)
        _items = []
        if self.labels:
            for _item_labels in self.labels:
                if _item_labels:
                    _items.append(_item_labels.to_dict())
            _dict['labels'] = _items
        # override the default output from pydantic by calling `to_dict()` of operation
        if self.operation:
            _dict['operation'] = self.operation.to_dict()
        # override the default output from pydantic by calling `to_dict()` of target
        if self.target:
            _dict['target'] = self.target.to_dict()
        # override the default output from pydantic by calling `to_dict()` of update
        if self.update:
            _dict['update'] = self.update.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Deployment from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "description": obj.get("description"),
            "fingerprint": obj.get("fingerprint"),
            "id": obj.get("id"),
            "insertTime": obj.get("insertTime"),
            "labels": [DeploymentLabelEntry.from_dict(_item) for _item in obj["labels"]] if obj.get("labels") is not None else None,
            "manifest": obj.get("manifest"),
            "name": obj.get("name"),
            "operation": Operation.from_dict(obj["operation"]) if obj.get("operation") is not None else None,
            "selfLink": obj.get("selfLink"),
            "target": TargetConfiguration.from_dict(obj["target"]) if obj.get("target") is not None else None,
            "update": DeploymentUpdate.from_dict(obj["update"]) if obj.get("update") is not None else None,
            "updateTime": obj.get("updateTime")
        })
        return _obj



# coding: utf-8

"""
    Cloud Deployment Manager V2 API

    The Google Cloud Deployment Manager v2 API provides services for configuring, deploying, and viewing Google Cloud services and APIs via templates which specify deployments of Cloud resources.

    The version of the OpenAPI document: v2beta
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.instances_bulk_insert_operation_metadata import InstancesBulkInsertOperationMetadata
from openapi_client.models.operation_error import OperationError
from openapi_client.models.operation_warnings_inner import OperationWarningsInner
from openapi_client.models.set_common_instance_metadata_operation_metadata import SetCommonInstanceMetadataOperationMetadata
from typing import Optional, Set
from typing_extensions import Self

class Operation(BaseModel):
    """
    Represents an Operation resource. Google Compute Engine has three Operation resources: * [Global](/compute/docs/reference/rest/{$api_version}/globalOperations) * [Regional](/compute/docs/reference/rest/{$api_version}/regionOperations) * [Zonal](/compute/docs/reference/rest/{$api_version}/zoneOperations) You can use an operation resource to manage asynchronous API requests. For more information, read Handling API responses. Operations can be global, regional or zonal. - For global operations, use the `globalOperations` resource. - For regional operations, use the `regionOperations` resource. - For zonal operations, use the `zoneOperations` resource. For more information, read Global, Regional, and Zonal Resources. Note that completed Operation resources have a limited retention period.
    """ # noqa: E501
    client_operation_id: Optional[StrictStr] = Field(default=None, description="[Output Only] The value of `requestId` if you provided it in the request. Not present otherwise.", alias="clientOperationId")
    creation_timestamp: Optional[StrictStr] = Field(default=None, description="[Deprecated] This field is deprecated.", alias="creationTimestamp")
    description: Optional[StrictStr] = Field(default=None, description="[Output Only] A textual description of the operation, which is set when the operation is created.")
    end_time: Optional[StrictStr] = Field(default=None, description="[Output Only] The time that this operation was completed. This value is in RFC3339 text format.", alias="endTime")
    error: Optional[OperationError] = None
    http_error_message: Optional[StrictStr] = Field(default=None, description="[Output Only] If the operation fails, this field contains the HTTP error message that was returned, such as `NOT FOUND`.", alias="httpErrorMessage")
    http_error_status_code: Optional[StrictInt] = Field(default=None, description="[Output Only] If the operation fails, this field contains the HTTP error status code that was returned. For example, a `404` means the resource was not found.", alias="httpErrorStatusCode")
    id: Optional[StrictStr] = Field(default=None, description="[Output Only] The unique identifier for the operation. This identifier is defined by the server.")
    insert_time: Optional[StrictStr] = Field(default=None, description="[Output Only] The time that this operation was requested. This value is in RFC3339 text format.", alias="insertTime")
    instances_bulk_insert_operation_metadata: Optional[InstancesBulkInsertOperationMetadata] = Field(default=None, alias="instancesBulkInsertOperationMetadata")
    kind: Optional[StrictStr] = Field(default='compute#operation', description="[Output Only] Type of the resource. Always `compute#operation` for Operation resources.")
    name: Optional[StrictStr] = Field(default=None, description="[Output Only] Name of the operation.")
    operation_group_id: Optional[StrictStr] = Field(default=None, description="[Output Only] An ID that represents a group of operations, such as when a group of operations results from a `bulkInsert` API request.", alias="operationGroupId")
    operation_type: Optional[StrictStr] = Field(default=None, description="[Output Only] The type of operation, such as `insert`, `update`, or `delete`, and so on.", alias="operationType")
    progress: Optional[StrictInt] = Field(default=None, description="[Output Only] An optional progress indicator that ranges from 0 to 100. There is no requirement that this be linear or support any granularity of operations. This should not be used to guess when the operation will be complete. This number should monotonically increase as the operation progresses.")
    region: Optional[StrictStr] = Field(default=None, description="[Output Only] The URL of the region where the operation resides. Only applicable when performing regional operations.")
    self_link: Optional[StrictStr] = Field(default=None, description="[Output Only] Server-defined URL for the resource.", alias="selfLink")
    set_common_instance_metadata_operation_metadata: Optional[SetCommonInstanceMetadataOperationMetadata] = Field(default=None, alias="setCommonInstanceMetadataOperationMetadata")
    start_time: Optional[StrictStr] = Field(default=None, description="[Output Only] The time that this operation was started by the server. This value is in RFC3339 text format.", alias="startTime")
    status: Optional[StrictStr] = Field(default=None, description="[Output Only] The status of the operation, which can be one of the following: `PENDING`, `RUNNING`, or `DONE`.")
    status_message: Optional[StrictStr] = Field(default=None, description="[Output Only] An optional textual description of the current status of the operation.", alias="statusMessage")
    target_id: Optional[StrictStr] = Field(default=None, description="[Output Only] The unique target ID, which identifies a specific incarnation of the target resource.", alias="targetId")
    target_link: Optional[StrictStr] = Field(default=None, description="[Output Only] The URL of the resource that the operation modifies. For operations related to creating a snapshot, this points to the persistent disk that the snapshot was created from.", alias="targetLink")
    user: Optional[StrictStr] = Field(default=None, description="[Output Only] User who requested the operation, for example: `user@example.com` or `alice_smith_identifier (global/workforcePools/example-com-us-employees)`.")
    warnings: Optional[List[OperationWarningsInner]] = Field(default=None, description="[Output Only] If warning messages are generated during processing of the operation, this field will be populated.")
    zone: Optional[StrictStr] = Field(default=None, description="[Output Only] The URL of the zone where the operation resides. Only applicable when performing per-zone operations.")
    __properties: ClassVar[List[str]] = ["clientOperationId", "creationTimestamp", "description", "endTime", "error", "httpErrorMessage", "httpErrorStatusCode", "id", "insertTime", "instancesBulkInsertOperationMetadata", "kind", "name", "operationGroupId", "operationType", "progress", "region", "selfLink", "setCommonInstanceMetadataOperationMetadata", "startTime", "status", "statusMessage", "targetId", "targetLink", "user", "warnings", "zone"]

    @field_validator('status')
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['PENDING', 'RUNNING', 'DONE']):
            raise ValueError("must be one of enum values ('PENDING', 'RUNNING', 'DONE')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Operation from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of error
        if self.error:
            _dict['error'] = self.error.to_dict()
        # override the default output from pydantic by calling `to_dict()` of instances_bulk_insert_operation_metadata
        if self.instances_bulk_insert_operation_metadata:
            _dict['instancesBulkInsertOperationMetadata'] = self.instances_bulk_insert_operation_metadata.to_dict()
        # override the default output from pydantic by calling `to_dict()` of set_common_instance_metadata_operation_metadata
        if self.set_common_instance_metadata_operation_metadata:
            _dict['setCommonInstanceMetadataOperationMetadata'] = self.set_common_instance_metadata_operation_metadata.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in warnings (list)
        _items = []
        if self.warnings:
            for _item_warnings in self.warnings:
                if _item_warnings:
                    _items.append(_item_warnings.to_dict())
            _dict['warnings'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Operation from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "clientOperationId": obj.get("clientOperationId"),
            "creationTimestamp": obj.get("creationTimestamp"),
            "description": obj.get("description"),
            "endTime": obj.get("endTime"),
            "error": OperationError.from_dict(obj["error"]) if obj.get("error") is not None else None,
            "httpErrorMessage": obj.get("httpErrorMessage"),
            "httpErrorStatusCode": obj.get("httpErrorStatusCode"),
            "id": obj.get("id"),
            "insertTime": obj.get("insertTime"),
            "instancesBulkInsertOperationMetadata": InstancesBulkInsertOperationMetadata.from_dict(obj["instancesBulkInsertOperationMetadata"]) if obj.get("instancesBulkInsertOperationMetadata") is not None else None,
            "kind": obj.get("kind") if obj.get("kind") is not None else 'compute#operation',
            "name": obj.get("name"),
            "operationGroupId": obj.get("operationGroupId"),
            "operationType": obj.get("operationType"),
            "progress": obj.get("progress"),
            "region": obj.get("region"),
            "selfLink": obj.get("selfLink"),
            "setCommonInstanceMetadataOperationMetadata": SetCommonInstanceMetadataOperationMetadata.from_dict(obj["setCommonInstanceMetadataOperationMetadata"]) if obj.get("setCommonInstanceMetadataOperationMetadata") is not None else None,
            "startTime": obj.get("startTime"),
            "status": obj.get("status"),
            "statusMessage": obj.get("statusMessage"),
            "targetId": obj.get("targetId"),
            "targetLink": obj.get("targetLink"),
            "user": obj.get("user"),
            "warnings": [OperationWarningsInner.from_dict(_item) for _item in obj["warnings"]] if obj.get("warnings") is not None else None,
            "zone": obj.get("zone")
        })
        return _obj



# coding: utf-8

"""
    Cloud Deployment Manager V2 API

    The Google Cloud Deployment Manager v2 API provides services for configuring, deploying, and viewing Google Cloud services and APIs via templates which specify deployments of Cloud resources.

    The version of the OpenAPI document: v2beta
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.config_file import ConfigFile
from openapi_client.models.import_file import ImportFile
from typing import Optional, Set
from typing_extensions import Self

class Manifest(BaseModel):
    """
    Manifest
    """ # noqa: E501
    config: Optional[ConfigFile] = None
    expanded_config: Optional[StrictStr] = Field(default=None, description="Output only. The fully-expanded configuration file, including any templates and references.", alias="expandedConfig")
    id: Optional[StrictStr] = None
    imports: Optional[List[ImportFile]] = Field(default=None, description="Output only. The imported files for this manifest.")
    insert_time: Optional[StrictStr] = Field(default=None, description="Output only. Creation timestamp in RFC3339 text format.", alias="insertTime")
    layout: Optional[StrictStr] = Field(default=None, description="Output only. The YAML layout for this manifest.")
    manifest_size_bytes: Optional[StrictStr] = Field(default=None, description="Output only. The computed size of the fully expanded manifest.", alias="manifestSizeBytes")
    manifest_size_limit_bytes: Optional[StrictStr] = Field(default=None, description="Output only. The size limit for expanded manifests in the project.", alias="manifestSizeLimitBytes")
    name: Optional[StrictStr] = Field(default=None, description="Output only. The name of the manifest.")
    self_link: Optional[StrictStr] = Field(default=None, description="Output only. Self link for the manifest.", alias="selfLink")
    __properties: ClassVar[List[str]] = ["config", "expandedConfig", "id", "imports", "insertTime", "layout", "manifestSizeBytes", "manifestSizeLimitBytes", "name", "selfLink"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Manifest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of config
        if self.config:
            _dict['config'] = self.config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in imports (list)
        _items = []
        if self.imports:
            for _item_imports in self.imports:
                if _item_imports:
                    _items.append(_item_imports.to_dict())
            _dict['imports'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Manifest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "config": ConfigFile.from_dict(obj["config"]) if obj.get("config") is not None else None,
            "expandedConfig": obj.get("expandedConfig"),
            "id": obj.get("id"),
            "imports": [ImportFile.from_dict(_item) for _item in obj["imports"]] if obj.get("imports") is not None else None,
            "insertTime": obj.get("insertTime"),
            "layout": obj.get("layout"),
            "manifestSizeBytes": obj.get("manifestSizeBytes"),
            "manifestSizeLimitBytes": obj.get("manifestSizeLimitBytes"),
            "name": obj.get("name"),
            "selfLink": obj.get("selfLink")
        })
        return _obj



# coding: utf-8

"""
    Cloud Deployment Manager V2 API

    The Google Cloud Deployment Manager v2 API provides services for configuring, deploying, and viewing Google Cloud services and APIs via templates which specify deployments of Cloud resources.

    The version of the OpenAPI document: alpha
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.types_list_response import TypesListResponse

class TestTypesListResponse(unittest.TestCase):
    """TypesListResponse unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> TypesListResponse:
        """Test TypesListResponse
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `TypesListResponse`
        """
        model = TypesListResponse()
        if include_optional:
            return TypesListResponse(
                next_page_token = '',
                types = [
                    openapi_client.models.type.Type(
                        base = openapi_client.models.base_type.BaseType(
                            collection_overrides = [
                                openapi_client.models.collection_override.CollectionOverride(
                                    collection = '', 
                                    method_map = openapi_client.models.method_map.MethodMap(
                                        create = '', 
                                        delete = '', 
                                        get = '', 
                                        set_iam_policy = '', 
                                        update = '', ), 
                                    options = openapi_client.models.options.Options(
                                        async_options = [
                                            openapi_client.models.async_options.AsyncOptions(
                                                method_match = '', 
                                                polling_options = openapi_client.models.polling_options.PollingOptions(
                                                    diagnostics = [
                                                        openapi_client.models.diagnostic.Diagnostic(
                                                            field = '', 
                                                            level = 'UNKNOWN', )
                                                        ], 
                                                    fail_condition = '', 
                                                    finish_condition = '', 
                                                    polling_link = '', 
                                                    target_link = '', ), )
                                            ], 
                                        input_mappings = [
                                            openapi_client.models.input_mapping.InputMapping(
                                                field_name = '', 
                                                location = 'UNKNOWN', 
                                                method_match = '', 
                                                value = '', )
                                            ], 
                                        name_property = '', 
                                        validation_options = openapi_client.models.validation_options.ValidationOptions(
                                            schema_validation = 'UNKNOWN', 
                                            undeclared_properties = 'UNKNOWN', ), ), )
                                ], 
                            credential = openapi_client.models.credential.Credential(
                                basic_auth = openapi_client.models.basic_auth.BasicAuth(
                                    password = '', 
                                    user = '', ), 
                                service_account = openapi_client.models.service_account.ServiceAccount(
                                    email = '', ), 
                                use_project_default = True, ), 
                            descriptor_url = '', 
                            options = openapi_client.models.options.Options(
                                name_property = '', ), ), 
                        description = '', 
                        id = '', 
                        insert_time = '', 
                        labels = [
                            openapi_client.models.type_label_entry.TypeLabelEntry(
                                key = '', 
                                value = '', )
                            ], 
                        name = '', 
                        operation = openapi_client.models.operation.Operation(
                            client_operation_id = '', 
                            creation_timestamp = '', 
                            description = '', 
                            end_time = '', 
                            error = openapi_client.models.operation_error.Operation_error(
                                errors = [
                                    openapi_client.models.operation_error_errors_inner.Operation_error_errors_inner(
                                        code = '', 
                                        location = '', 
                                        message = '', )
                                    ], ), 
                            http_error_message = '', 
                            http_error_status_code = 56, 
                            id = '', 
                            insert_time = '', 
                            instances_bulk_insert_operation_metadata = openapi_client.models.instances_bulk_insert_operation_metadata.InstancesBulkInsertOperationMetadata(
                                per_location_status = {
                                    'key' : openapi_client.models.bulk_insert_operation_status.BulkInsertOperationStatus(
                                        created_vm_count = 56, 
                                        deleted_vm_count = 56, 
                                        failed_to_create_vm_count = 56, 
                                        status = 'STATUS_UNSPECIFIED', 
                                        target_vm_count = 56, )
                                    }, ), 
                            kind = 'compute#operation', 
                            name = '', 
                            operation_group_id = '', 
                            operation_type = '', 
                            progress = 56, 
                            region = '', 
                            self_link = '', 
                            set_common_instance_metadata_operation_metadata = openapi_client.models.set_common_instance_metadata_operation_metadata.SetCommonInstanceMetadataOperationMetadata(
                                client_operation_id = '', 
                                per_location_operations = {
                                    'key' : openapi_client.models.set_common_instance_metadata_operation_metadata_per_location_operation_info.SetCommonInstanceMetadataOperationMetadataPerLocationOperationInfo(
                                        state = 'UNSPECIFIED', )
                                    }, ), 
                            start_time = '', 
                            status = 'PENDING', 
                            status_message = '', 
                            target_id = '', 
                            target_link = '', 
                            user = '', 
                            warnings = [
                                openapi_client.models.operation_warnings_inner.Operation_warnings_inner(
                                    code = 'DEPRECATED_RESOURCE_USED', 
                                    data = [
                                        openapi_client.models.operation_warnings_inner_data_inner.Operation_warnings_inner_data_inner(
                                            key = '', 
                                            value = '', )
                                        ], 
                                    message = '', )
                                ], 
                            zone = '', ), 
                        self_link = '', )
                    ]
            )
        else:
            return TypesListResponse(
        )
        """

    def testTypesListResponse(self):
        """Test TypesListResponse"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

# coding: utf-8

"""
    Cloud Deployment Manager V2 API

    The Google Cloud Deployment Manager v2 API provides services for configuring, deploying, and viewing Google Cloud services and APIs via templates which specify deployments of Cloud resources.

    The version of the OpenAPI document: alpha
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.collection_override import CollectionOverride
from openapi_client.models.credential import Credential
from openapi_client.models.operation import Operation
from openapi_client.models.options import Options
from openapi_client.models.type_provider_label_entry import TypeProviderLabelEntry
from typing import Optional, Set
from typing_extensions import Self

class TypeProvider(BaseModel):
    """
    A type provider that describes a service-backed Type.
    """ # noqa: E501
    collection_overrides: Optional[List[CollectionOverride]] = Field(default=None, description="Allows resource handling overrides for specific collections", alias="collectionOverrides")
    credential: Optional[Credential] = None
    custom_certificate_authority_roots: Optional[List[StrictStr]] = Field(default=None, description="List of up to 2 custom certificate authority roots to use for TLS authentication when making calls on behalf of this type provider. If set, TLS authentication will exclusively use these roots instead of relying on publicly trusted certificate authorities when validating TLS certificate authenticity. The certificates must be in base64-encoded PEM format. The maximum size of each certificate must not exceed 10KB.", alias="customCertificateAuthorityRoots")
    description: Optional[StrictStr] = Field(default=None, description="An optional textual description of the resource; provided by the client when the resource is created.")
    descriptor_url: Optional[StrictStr] = Field(default=None, description="Descriptor Url for the this type provider.", alias="descriptorUrl")
    id: Optional[StrictStr] = Field(default=None, description="Output only. Unique identifier for the resource defined by the server.")
    insert_time: Optional[StrictStr] = Field(default=None, description="Output only. Creation timestamp in RFC3339 text format.", alias="insertTime")
    labels: Optional[List[TypeProviderLabelEntry]] = Field(default=None, description="Map of One Platform labels; provided by the client when the resource is created or updated. Specifically: Label keys must be between 1 and 63 characters long and must conform to the following regular expression: `[a-z]([-a-z0-9]*[a-z0-9])?` Label values must be between 0 and 63 characters long and must conform to the regular expression `([a-z]([-a-z0-9]*[a-z0-9])?)?`")
    name: Optional[StrictStr] = Field(default=None, description="Name of the resource; provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.")
    operation: Optional[Operation] = None
    options: Optional[Options] = None
    self_link: Optional[StrictStr] = Field(default=None, description="Output only. Self link for the type provider.", alias="selfLink")
    __properties: ClassVar[List[str]] = ["collectionOverrides", "credential", "customCertificateAuthorityRoots", "description", "descriptorUrl", "id", "insertTime", "labels", "name", "operation", "options", "selfLink"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of TypeProvider from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in collection_overrides (list)
        _items = []
        if self.collection_overrides:
            for _item_collection_overrides in self.collection_overrides:
                if _item_collection_overrides:
                    _items.append(_item_collection_overrides.to_dict())
            _dict['collectionOverrides'] = _items
        # override the default output from pydantic by calling `to_dict()` of credential
        if self.credential:
            _dict['credential'] = self.credential.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in labels (list)
        _items = []
        if self.labels:
            for _item_labels in self.labels:
                if _item_labels:
                    _items.append(_item_labels.to_dict())
            _dict['labels'] = _items
        # override the default output from pydantic by calling `to_dict()` of operation
        if self.operation:
            _dict['operation'] = self.operation.to_dict()
        # override the default output from pydantic by calling `to_dict()` of options
        if self.options:
            _dict['options'] = self.options.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of TypeProvider from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "collectionOverrides": [CollectionOverride.from_dict(_item) for _item in obj["collectionOverrides"]] if obj.get("collectionOverrides") is not None else None,
            "credential": Credential.from_dict(obj["credential"]) if obj.get("credential") is not None else None,
            "customCertificateAuthorityRoots": obj.get("customCertificateAuthorityRoots"),
            "description": obj.get("description"),
            "descriptorUrl": obj.get("descriptorUrl"),
            "id": obj.get("id"),
            "insertTime": obj.get("insertTime"),
            "labels": [TypeProviderLabelEntry.from_dict(_item) for _item in obj["labels"]] if obj.get("labels") is not None else None,
            "name": obj.get("name"),
            "operation": Operation.from_dict(obj["operation"]) if obj.get("operation") is not None else None,
            "options": Options.from_dict(obj["options"]) if obj.get("options") is not None else None,
            "selfLink": obj.get("selfLink")
        })
        return _obj



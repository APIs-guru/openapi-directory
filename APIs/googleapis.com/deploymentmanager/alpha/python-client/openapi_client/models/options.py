# coding: utf-8

"""
    Cloud Deployment Manager V2 API

    The Google Cloud Deployment Manager v2 API provides services for configuring, deploying, and viewing Google Cloud services and APIs via templates which specify deployments of Cloud resources.

    The version of the OpenAPI document: alpha
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.async_options import AsyncOptions
from openapi_client.models.input_mapping import InputMapping
from openapi_client.models.validation_options import ValidationOptions
from typing import Optional, Set
from typing_extensions import Self

class Options(BaseModel):
    """
    Options allows customized resource handling by Deployment Manager.
    """ # noqa: E501
    async_options: Optional[List[AsyncOptions]] = Field(default=None, description="Options regarding how to thread async requests.", alias="asyncOptions")
    input_mappings: Optional[List[InputMapping]] = Field(default=None, description="The mappings that apply for requests.", alias="inputMappings")
    name_property: Optional[StrictStr] = Field(default=None, description="The json path to the field in the resource JSON body into which the resource name should be mapped. Leaving this empty indicates that there should be no mapping performed.", alias="nameProperty")
    validation_options: Optional[ValidationOptions] = Field(default=None, alias="validationOptions")
    __properties: ClassVar[List[str]] = ["asyncOptions", "inputMappings", "nameProperty", "validationOptions"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Options from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in async_options (list)
        _items = []
        if self.async_options:
            for _item_async_options in self.async_options:
                if _item_async_options:
                    _items.append(_item_async_options.to_dict())
            _dict['asyncOptions'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in input_mappings (list)
        _items = []
        if self.input_mappings:
            for _item_input_mappings in self.input_mappings:
                if _item_input_mappings:
                    _items.append(_item_input_mappings.to_dict())
            _dict['inputMappings'] = _items
        # override the default output from pydantic by calling `to_dict()` of validation_options
        if self.validation_options:
            _dict['validationOptions'] = self.validation_options.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Options from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "asyncOptions": [AsyncOptions.from_dict(_item) for _item in obj["asyncOptions"]] if obj.get("asyncOptions") is not None else None,
            "inputMappings": [InputMapping.from_dict(_item) for _item in obj["inputMappings"]] if obj.get("inputMappings") is not None else None,
            "nameProperty": obj.get("nameProperty"),
            "validationOptions": ValidationOptions.from_dict(obj["validationOptions"]) if obj.get("validationOptions") is not None else None
        })
        return _obj



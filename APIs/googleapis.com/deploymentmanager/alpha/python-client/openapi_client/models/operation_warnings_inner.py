# coding: utf-8

"""
    Cloud Deployment Manager V2 API

    The Google Cloud Deployment Manager v2 API provides services for configuring, deploying, and viewing Google Cloud services and APIs via templates which specify deployments of Cloud resources.

    The version of the OpenAPI document: alpha
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.operation_warnings_inner_data_inner import OperationWarningsInnerDataInner
from typing import Optional, Set
from typing_extensions import Self

class OperationWarningsInner(BaseModel):
    """
    OperationWarningsInner
    """ # noqa: E501
    code: Optional[StrictStr] = Field(default=None, description="[Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response.")
    data: Optional[List[OperationWarningsInnerDataInner]] = Field(default=None, description="[Output Only] Metadata about this warning in key: value format. For example: \"data\": [ { \"key\": \"scope\", \"value\": \"zones/us-east1-d\" } ")
    message: Optional[StrictStr] = Field(default=None, description="[Output Only] A human-readable description of the warning code.")
    __properties: ClassVar[List[str]] = ["code", "data", "message"]

    @field_validator('code')
    def code_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['DEPRECATED_RESOURCE_USED', 'NO_RESULTS_ON_PAGE', 'UNREACHABLE', 'NEXT_HOP_ADDRESS_NOT_ASSIGNED', 'NEXT_HOP_INSTANCE_NOT_FOUND', 'NEXT_HOP_INSTANCE_NOT_ON_NETWORK', 'NEXT_HOP_CANNOT_IP_FORWARD', 'NEXT_HOP_NOT_RUNNING', 'INJECTED_KERNELS_DEPRECATED', 'REQUIRED_TOS_AGREEMENT', 'DISK_SIZE_LARGER_THAN_IMAGE_SIZE', 'RESOURCE_NOT_DELETED', 'SINGLE_INSTANCE_PROPERTY_TEMPLATE', 'NOT_CRITICAL_ERROR', 'CLEANUP_FAILED', 'FIELD_VALUE_OVERRIDEN', 'RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING', 'MISSING_TYPE_DEPENDENCY', 'EXTERNAL_API_WARNING', 'SCHEMA_VALIDATION_IGNORED', 'UNDECLARED_PROPERTIES', 'EXPERIMENTAL_TYPE_USED', 'DEPRECATED_TYPE_USED', 'PARTIAL_SUCCESS', 'LARGE_DEPLOYMENT_WARNING', 'NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE', 'INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB', 'LIST_OVERHEAD_QUOTA_EXCEED']):
            raise ValueError("must be one of enum values ('DEPRECATED_RESOURCE_USED', 'NO_RESULTS_ON_PAGE', 'UNREACHABLE', 'NEXT_HOP_ADDRESS_NOT_ASSIGNED', 'NEXT_HOP_INSTANCE_NOT_FOUND', 'NEXT_HOP_INSTANCE_NOT_ON_NETWORK', 'NEXT_HOP_CANNOT_IP_FORWARD', 'NEXT_HOP_NOT_RUNNING', 'INJECTED_KERNELS_DEPRECATED', 'REQUIRED_TOS_AGREEMENT', 'DISK_SIZE_LARGER_THAN_IMAGE_SIZE', 'RESOURCE_NOT_DELETED', 'SINGLE_INSTANCE_PROPERTY_TEMPLATE', 'NOT_CRITICAL_ERROR', 'CLEANUP_FAILED', 'FIELD_VALUE_OVERRIDEN', 'RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING', 'MISSING_TYPE_DEPENDENCY', 'EXTERNAL_API_WARNING', 'SCHEMA_VALIDATION_IGNORED', 'UNDECLARED_PROPERTIES', 'EXPERIMENTAL_TYPE_USED', 'DEPRECATED_TYPE_USED', 'PARTIAL_SUCCESS', 'LARGE_DEPLOYMENT_WARNING', 'NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE', 'INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB', 'LIST_OVERHEAD_QUOTA_EXCEED')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of OperationWarningsInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in data (list)
        _items = []
        if self.data:
            for _item_data in self.data:
                if _item_data:
                    _items.append(_item_data.to_dict())
            _dict['data'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of OperationWarningsInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "code": obj.get("code"),
            "data": [OperationWarningsInnerDataInner.from_dict(_item) for _item in obj["data"]] if obj.get("data") is not None else None,
            "message": obj.get("message")
        })
        return _obj



# coding: utf-8

"""
    Cloud Deployment Manager V2 API

    The Google Cloud Deployment Manager v2 API provides services for configuring, deploying, and viewing Google Cloud services and APIs via templates which specify deployments of Cloud resources.

    The version of the OpenAPI document: alpha
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.import_file import ImportFile
from typing import Optional, Set
from typing_extensions import Self

class TemplateContents(BaseModel):
    """
    Files that make up the template contents of a template type.
    """ # noqa: E501
    imports: Optional[List[ImportFile]] = Field(default=None, description="Import files referenced by the main template.")
    interpreter: Optional[StrictStr] = Field(default=None, description="Which interpreter (python or jinja) should be used during expansion.")
    main_template: Optional[StrictStr] = Field(default=None, description="The filename of the mainTemplate", alias="mainTemplate")
    var_schema: Optional[StrictStr] = Field(default=None, description="The contents of the template schema.", alias="schema")
    template: Optional[StrictStr] = Field(default=None, description="The contents of the main template file.")
    __properties: ClassVar[List[str]] = ["imports", "interpreter", "mainTemplate", "schema", "template"]

    @field_validator('interpreter')
    def interpreter_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['UNKNOWN_INTERPRETER', 'PYTHON', 'JINJA']):
            raise ValueError("must be one of enum values ('UNKNOWN_INTERPRETER', 'PYTHON', 'JINJA')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of TemplateContents from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in imports (list)
        _items = []
        if self.imports:
            for _item_imports in self.imports:
                if _item_imports:
                    _items.append(_item_imports.to_dict())
            _dict['imports'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of TemplateContents from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "imports": [ImportFile.from_dict(_item) for _item in obj["imports"]] if obj.get("imports") is not None else None,
            "interpreter": obj.get("interpreter"),
            "mainTemplate": obj.get("mainTemplate"),
            "schema": obj.get("schema"),
            "template": obj.get("template")
        })
        return _obj



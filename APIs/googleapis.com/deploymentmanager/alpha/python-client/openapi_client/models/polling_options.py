# coding: utf-8

"""
    Cloud Deployment Manager V2 API

    The Google Cloud Deployment Manager v2 API provides services for configuring, deploying, and viewing Google Cloud services and APIs via templates which specify deployments of Cloud resources.

    The version of the OpenAPI document: alpha
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.diagnostic import Diagnostic
from typing import Optional, Set
from typing_extensions import Self

class PollingOptions(BaseModel):
    """
    PollingOptions
    """ # noqa: E501
    diagnostics: Optional[List[Diagnostic]] = Field(default=None, description="An array of diagnostics to be collected by Deployment Manager, these diagnostics will be displayed to the user.")
    fail_condition: Optional[StrictStr] = Field(default=None, description="JsonPath expression that determines if the request failed.", alias="failCondition")
    finish_condition: Optional[StrictStr] = Field(default=None, description="JsonPath expression that determines if the request is completed.", alias="finishCondition")
    polling_link: Optional[StrictStr] = Field(default=None, description="JsonPath expression that evaluates to string, it indicates where to poll.", alias="pollingLink")
    target_link: Optional[StrictStr] = Field(default=None, description="JsonPath expression, after polling is completed, indicates where to fetch the resource.", alias="targetLink")
    __properties: ClassVar[List[str]] = ["diagnostics", "failCondition", "finishCondition", "pollingLink", "targetLink"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PollingOptions from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in diagnostics (list)
        _items = []
        if self.diagnostics:
            for _item_diagnostics in self.diagnostics:
                if _item_diagnostics:
                    _items.append(_item_diagnostics.to_dict())
            _dict['diagnostics'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PollingOptions from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "diagnostics": [Diagnostic.from_dict(_item) for _item in obj["diagnostics"]] if obj.get("diagnostics") is not None else None,
            "failCondition": obj.get("failCondition"),
            "finishCondition": obj.get("finishCondition"),
            "pollingLink": obj.get("pollingLink"),
            "targetLink": obj.get("targetLink")
        })
        return _obj



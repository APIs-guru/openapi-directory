# coding: utf-8

"""
    Cloud Deployment Manager V2 API

    The Google Cloud Deployment Manager v2 API provides services for configuring, deploying, and viewing Google Cloud services and APIs via templates which specify deployments of Cloud resources.

    The version of the OpenAPI document: alpha
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class MethodMap(BaseModel):
    """
    Deployment Manager will call these methods during the events of creation/deletion/update/get/setIamPolicy
    """ # noqa: E501
    create: Optional[StrictStr] = Field(default=None, description="The action identifier for the create method to be used for this collection")
    delete: Optional[StrictStr] = Field(default=None, description="The action identifier for the delete method to be used for this collection")
    get: Optional[StrictStr] = Field(default=None, description="The action identifier for the get method to be used for this collection")
    set_iam_policy: Optional[StrictStr] = Field(default=None, description="The action identifier for the setIamPolicy method to be used for this collection", alias="setIamPolicy")
    update: Optional[StrictStr] = Field(default=None, description="The action identifier for the update method to be used for this collection")
    __properties: ClassVar[List[str]] = ["create", "delete", "get", "setIamPolicy", "update"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of MethodMap from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of MethodMap from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "create": obj.get("create"),
            "delete": obj.get("delete"),
            "get": obj.get("get"),
            "setIamPolicy": obj.get("setIamPolicy"),
            "update": obj.get("update")
        })
        return _obj



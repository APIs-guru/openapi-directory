# coding: utf-8

"""
    Cloud Deployment Manager V2 API

    The Google Cloud Deployment Manager v2 API provides services for configuring, deploying, and viewing Google Cloud services and APIs via templates which specify deployments of Cloud resources.

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBytes, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from openapi_client.models.binding import Binding
from openapi_client.models.policy import Policy
from typing import Optional, Set
from typing_extensions import Self

class GlobalSetPolicyRequest(BaseModel):
    """
    GlobalSetPolicyRequest
    """ # noqa: E501
    bindings: Optional[List[Binding]] = Field(default=None, description="Flatten Policy to create a backward compatible wire-format. Deprecated. Use 'policy' to specify bindings.")
    etag: Optional[Union[StrictBytes, StrictStr]] = Field(default=None, description="Flatten Policy to create a backward compatible wire-format. Deprecated. Use 'policy' to specify the etag.")
    policy: Optional[Policy] = None
    __properties: ClassVar[List[str]] = ["bindings", "etag", "policy"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GlobalSetPolicyRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in bindings (list)
        _items = []
        if self.bindings:
            for _item_bindings in self.bindings:
                if _item_bindings:
                    _items.append(_item_bindings.to_dict())
            _dict['bindings'] = _items
        # override the default output from pydantic by calling `to_dict()` of policy
        if self.policy:
            _dict['policy'] = self.policy.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GlobalSetPolicyRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "bindings": [Binding.from_dict(_item) for _item in obj["bindings"]] if obj.get("bindings") is not None else None,
            "etag": obj.get("etag"),
            "policy": Policy.from_dict(obj["policy"]) if obj.get("policy") is not None else None
        })
        return _obj



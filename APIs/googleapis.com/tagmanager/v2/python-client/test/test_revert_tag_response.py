# coding: utf-8

"""
    Tag Manager API

    This API allows clients to access and modify container and tag configuration.

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.revert_tag_response import RevertTagResponse

class TestRevertTagResponse(unittest.TestCase):
    """RevertTagResponse unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> RevertTagResponse:
        """Test RevertTagResponse
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `RevertTagResponse`
        """
        model = RevertTagResponse()
        if include_optional:
            return RevertTagResponse(
                tag = openapi_client.models.tag.Tag(
                    account_id = '', 
                    blocking_rule_id = [
                        ''
                        ], 
                    blocking_trigger_id = [
                        ''
                        ], 
                    consent_settings = openapi_client.models.tag_consent_setting.TagConsentSetting(
                        consent_status = 'notSet', 
                        consent_type = openapi_client.models.parameter.Parameter(
                            is_weak_reference = True, 
                            key = '', 
                            list = [
                                openapi_client.models.parameter.Parameter(
                                    is_weak_reference = True, 
                                    key = '', 
                                    map = [
                                        
                                        ], 
                                    type = 'typeUnspecified', 
                                    value = '', )
                                ], 
                            map = [
                                
                                ], 
                            type = 'typeUnspecified', 
                            value = '', ), ), 
                    container_id = '', 
                    fingerprint = '', 
                    firing_rule_id = [
                        ''
                        ], 
                    firing_trigger_id = [
                        ''
                        ], 
                    live_only = True, 
                    monitoring_metadata = , 
                    monitoring_metadata_tag_name_key = '', 
                    name = '', 
                    notes = '', 
                    parameter = [
                        
                        ], 
                    parent_folder_id = '', 
                    path = '', 
                    paused = True, 
                    priority = , 
                    schedule_end_ms = '', 
                    schedule_start_ms = '', 
                    setup_tag = [
                        openapi_client.models.setup_tag.SetupTag(
                            stop_on_setup_failure = True, 
                            tag_name = '', )
                        ], 
                    tag_firing_option = 'tagFiringOptionUnspecified', 
                    tag_id = '', 
                    tag_manager_url = '', 
                    teardown_tag = [
                        openapi_client.models.teardown_tag.TeardownTag(
                            stop_teardown_on_failure = True, 
                            tag_name = '', )
                        ], 
                    type = '', 
                    workspace_id = '', )
            )
        else:
            return RevertTagResponse(
        )
        """

    def testRevertTagResponse(self):
        """Test RevertTagResponse"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

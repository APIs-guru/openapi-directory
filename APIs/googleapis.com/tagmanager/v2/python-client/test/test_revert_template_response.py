# coding: utf-8

"""
    Tag Manager API

    This API allows clients to access and modify container and tag configuration.

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.revert_template_response import RevertTemplateResponse

class TestRevertTemplateResponse(unittest.TestCase):
    """RevertTemplateResponse unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> RevertTemplateResponse:
        """Test RevertTemplateResponse
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `RevertTemplateResponse`
        """
        model = RevertTemplateResponse()
        if include_optional:
            return RevertTemplateResponse(
                template = openapi_client.models.custom_template.CustomTemplate(
                    account_id = '', 
                    container_id = '', 
                    fingerprint = '', 
                    gallery_reference = openapi_client.models.gallery_reference.GalleryReference(
                        host = '', 
                        is_modified = True, 
                        owner = '', 
                        repository = '', 
                        signature = '', 
                        version = '', ), 
                    name = '', 
                    path = '', 
                    tag_manager_url = '', 
                    template_data = '', 
                    template_id = '', 
                    workspace_id = '', )
            )
        else:
            return RevertTemplateResponse(
        )
        """

    def testRevertTemplateResponse(self):
        """Test RevertTemplateResponse"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

# coding: utf-8

"""
    Tag Manager API

    This API allows clients to access and modify container and tag configuration.

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.tag_consent_setting import TagConsentSetting

class TestTagConsentSetting(unittest.TestCase):
    """TagConsentSetting unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> TagConsentSetting:
        """Test TagConsentSetting
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `TagConsentSetting`
        """
        model = TagConsentSetting()
        if include_optional:
            return TagConsentSetting(
                consent_status = 'notSet',
                consent_type = openapi_client.models.parameter.Parameter(
                    is_weak_reference = True, 
                    key = '', 
                    list = [
                        openapi_client.models.parameter.Parameter(
                            is_weak_reference = True, 
                            key = '', 
                            map = [
                                
                                ], 
                            type = 'typeUnspecified', 
                            value = '', )
                        ], 
                    map = [
                        
                        ], 
                    type = 'typeUnspecified', 
                    value = '', )
            )
        else:
            return TagConsentSetting(
        )
        """

    def testTagConsentSetting(self):
        """Test TagConsentSetting"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

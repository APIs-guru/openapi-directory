# coding: utf-8

"""
    Tag Manager API

    This API allows clients to access and modify container and tag configuration.

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.sync_workspace_response import SyncWorkspaceResponse

class TestSyncWorkspaceResponse(unittest.TestCase):
    """SyncWorkspaceResponse unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> SyncWorkspaceResponse:
        """Test SyncWorkspaceResponse
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `SyncWorkspaceResponse`
        """
        model = SyncWorkspaceResponse()
        if include_optional:
            return SyncWorkspaceResponse(
                merge_conflict = [
                    openapi_client.models.merge_conflict.MergeConflict(
                        entity_in_base_version = openapi_client.models.entity.Entity(
                            built_in_variable = openapi_client.models.built_in_variable.BuiltInVariable(
                                account_id = '', 
                                container_id = '', 
                                name = '', 
                                path = '', 
                                type = 'builtInVariableTypeUnspecified', 
                                workspace_id = '', ), 
                            change_status = 'changeStatusUnspecified', 
                            client = openapi_client.models.client.Client(
                                account_id = '', 
                                client_id = '', 
                                container_id = '', 
                                fingerprint = '', 
                                name = '', 
                                notes = '', 
                                parameter = [
                                    openapi_client.models.parameter.Parameter(
                                        is_weak_reference = True, 
                                        key = '', 
                                        list = [
                                            openapi_client.models.parameter.Parameter(
                                                is_weak_reference = True, 
                                                key = '', 
                                                map = [
                                                    
                                                    ], 
                                                type = 'typeUnspecified', 
                                                value = '', )
                                            ], 
                                        map = [
                                            
                                            ], 
                                        type = 'typeUnspecified', 
                                        value = '', )
                                    ], 
                                parent_folder_id = '', 
                                path = '', 
                                priority = 56, 
                                tag_manager_url = '', 
                                type = '', 
                                workspace_id = '', ), 
                            custom_template = openapi_client.models.custom_template.CustomTemplate(
                                account_id = '', 
                                container_id = '', 
                                fingerprint = '', 
                                gallery_reference = openapi_client.models.gallery_reference.GalleryReference(
                                    host = '', 
                                    is_modified = True, 
                                    owner = '', 
                                    repository = '', 
                                    signature = '', 
                                    version = '', ), 
                                name = '', 
                                path = '', 
                                tag_manager_url = '', 
                                template_data = '', 
                                template_id = '', 
                                workspace_id = '', ), 
                            folder = openapi_client.models.folder.Folder(
                                account_id = '', 
                                container_id = '', 
                                fingerprint = '', 
                                folder_id = '', 
                                name = '', 
                                notes = '', 
                                path = '', 
                                tag_manager_url = '', 
                                workspace_id = '', ), 
                            gtag_config = openapi_client.models.gtag_config.GtagConfig(
                                account_id = '', 
                                container_id = '', 
                                fingerprint = '', 
                                gtag_config_id = '', 
                                path = '', 
                                tag_manager_url = '', 
                                type = '', 
                                workspace_id = '', ), 
                            tag = openapi_client.models.tag.Tag(
                                account_id = '', 
                                blocking_rule_id = [
                                    ''
                                    ], 
                                blocking_trigger_id = [
                                    ''
                                    ], 
                                consent_settings = openapi_client.models.tag_consent_setting.TagConsentSetting(
                                    consent_status = 'notSet', 
                                    consent_type = , ), 
                                container_id = '', 
                                fingerprint = '', 
                                firing_rule_id = [
                                    ''
                                    ], 
                                firing_trigger_id = [
                                    ''
                                    ], 
                                live_only = True, 
                                monitoring_metadata = , 
                                monitoring_metadata_tag_name_key = '', 
                                name = '', 
                                notes = '', 
                                parent_folder_id = '', 
                                path = '', 
                                paused = True, 
                                priority = , 
                                schedule_end_ms = '', 
                                schedule_start_ms = '', 
                                setup_tag = [
                                    openapi_client.models.setup_tag.SetupTag(
                                        stop_on_setup_failure = True, 
                                        tag_name = '', )
                                    ], 
                                tag_firing_option = 'tagFiringOptionUnspecified', 
                                tag_id = '', 
                                tag_manager_url = '', 
                                teardown_tag = [
                                    openapi_client.models.teardown_tag.TeardownTag(
                                        stop_teardown_on_failure = True, 
                                        tag_name = '', )
                                    ], 
                                type = '', 
                                workspace_id = '', ), 
                            transformation = openapi_client.models.transformation.Transformation(
                                account_id = '', 
                                container_id = '', 
                                fingerprint = '', 
                                name = '', 
                                notes = '', 
                                parent_folder_id = '', 
                                path = '', 
                                tag_manager_url = '', 
                                transformation_id = '', 
                                type = '', 
                                workspace_id = '', ), 
                            trigger = openapi_client.models.trigger.Trigger(
                                account_id = '', 
                                auto_event_filter = [
                                    openapi_client.models.condition.Condition(
                                        type = 'conditionTypeUnspecified', )
                                    ], 
                                check_validation = , 
                                container_id = '', 
                                continuous_time_min_milliseconds = , 
                                custom_event_filter = [
                                    openapi_client.models.condition.Condition(
                                        type = 'conditionTypeUnspecified', )
                                    ], 
                                event_name = , 
                                filter = [
                                    
                                    ], 
                                fingerprint = '', 
                                horizontal_scroll_percentage_list = , 
                                interval = , 
                                interval_seconds = , 
                                limit = , 
                                max_timer_length_seconds = , 
                                name = '', 
                                notes = '', 
                                parent_folder_id = '', 
                                path = '', 
                                selector = , 
                                tag_manager_url = '', 
                                total_time_min_milliseconds = , 
                                trigger_id = '', 
                                type = 'eventTypeUnspecified', 
                                unique_trigger_id = , 
                                vertical_scroll_percentage_list = , 
                                visibility_selector = , 
                                visible_percentage_max = , 
                                visible_percentage_min = , 
                                wait_for_tags = , 
                                wait_for_tags_timeout = , 
                                workspace_id = '', ), 
                            variable = openapi_client.models.variable.Variable(
                                account_id = '', 
                                container_id = '', 
                                disabling_trigger_id = [
                                    ''
                                    ], 
                                enabling_trigger_id = [
                                    ''
                                    ], 
                                fingerprint = '', 
                                format_value = openapi_client.models.variable_format_value.VariableFormatValue(
                                    case_conversion_type = 'none', 
                                    convert_false_to_value = , 
                                    convert_null_to_value = , 
                                    convert_true_to_value = , 
                                    convert_undefined_to_value = , ), 
                                name = '', 
                                notes = '', 
                                parent_folder_id = '', 
                                path = '', 
                                schedule_end_ms = '', 
                                schedule_start_ms = '', 
                                tag_manager_url = '', 
                                type = '', 
                                variable_id = '', 
                                workspace_id = '', ), 
                            zone = openapi_client.models.zone.Zone(
                                account_id = '', 
                                boundary = openapi_client.models.zone_boundary.ZoneBoundary(
                                    condition = [
                                        
                                        ], 
                                    custom_evaluation_trigger_id = [
                                        ''
                                        ], ), 
                                child_container = [
                                    openapi_client.models.zone_child_container.ZoneChildContainer(
                                        nickname = '', 
                                        public_id = '', )
                                    ], 
                                container_id = '', 
                                fingerprint = '', 
                                name = '', 
                                notes = '', 
                                path = '', 
                                tag_manager_url = '', 
                                type_restriction = openapi_client.models.zone_type_restriction.ZoneTypeRestriction(
                                    enable = True, 
                                    whitelisted_type_id = [
                                        ''
                                        ], ), 
                                workspace_id = '', 
                                zone_id = '', ), ), 
                        entity_in_workspace = openapi_client.models.entity.Entity(
                            change_status = 'changeStatusUnspecified', ), )
                    ],
                sync_status = openapi_client.models.sync_status.SyncStatus(
                    merge_conflict = True, 
                    sync_error = True, )
            )
        else:
            return SyncWorkspaceResponse(
        )
        """

    def testSyncWorkspaceResponse(self):
        """Test SyncWorkspaceResponse"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

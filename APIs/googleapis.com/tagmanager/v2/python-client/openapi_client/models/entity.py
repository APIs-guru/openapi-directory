# coding: utf-8

"""
    Tag Manager API

    This API allows clients to access and modify container and tag configuration.

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.built_in_variable import BuiltInVariable
from openapi_client.models.client import Client
from openapi_client.models.custom_template import CustomTemplate
from openapi_client.models.folder import Folder
from openapi_client.models.gtag_config import GtagConfig
from openapi_client.models.tag import Tag
from openapi_client.models.transformation import Transformation
from openapi_client.models.trigger import Trigger
from openapi_client.models.variable import Variable
from openapi_client.models.zone import Zone
from typing import Optional, Set
from typing_extensions import Self

class Entity(BaseModel):
    """
    A workspace entity that may represent a tag, trigger, variable, or folder in addition to its status in the workspace.
    """ # noqa: E501
    built_in_variable: Optional[BuiltInVariable] = Field(default=None, alias="builtInVariable")
    change_status: Optional[StrictStr] = Field(default=None, description="Represents how the entity has been changed in the workspace.", alias="changeStatus")
    client: Optional[Client] = None
    custom_template: Optional[CustomTemplate] = Field(default=None, alias="customTemplate")
    folder: Optional[Folder] = None
    gtag_config: Optional[GtagConfig] = Field(default=None, alias="gtagConfig")
    tag: Optional[Tag] = None
    transformation: Optional[Transformation] = None
    trigger: Optional[Trigger] = None
    variable: Optional[Variable] = None
    zone: Optional[Zone] = None
    __properties: ClassVar[List[str]] = ["builtInVariable", "changeStatus", "client", "customTemplate", "folder", "gtagConfig", "tag", "transformation", "trigger", "variable", "zone"]

    @field_validator('change_status')
    def change_status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['changeStatusUnspecified', 'none', 'added', 'deleted', 'updated']):
            raise ValueError("must be one of enum values ('changeStatusUnspecified', 'none', 'added', 'deleted', 'updated')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Entity from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of built_in_variable
        if self.built_in_variable:
            _dict['builtInVariable'] = self.built_in_variable.to_dict()
        # override the default output from pydantic by calling `to_dict()` of client
        if self.client:
            _dict['client'] = self.client.to_dict()
        # override the default output from pydantic by calling `to_dict()` of custom_template
        if self.custom_template:
            _dict['customTemplate'] = self.custom_template.to_dict()
        # override the default output from pydantic by calling `to_dict()` of folder
        if self.folder:
            _dict['folder'] = self.folder.to_dict()
        # override the default output from pydantic by calling `to_dict()` of gtag_config
        if self.gtag_config:
            _dict['gtagConfig'] = self.gtag_config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of tag
        if self.tag:
            _dict['tag'] = self.tag.to_dict()
        # override the default output from pydantic by calling `to_dict()` of transformation
        if self.transformation:
            _dict['transformation'] = self.transformation.to_dict()
        # override the default output from pydantic by calling `to_dict()` of trigger
        if self.trigger:
            _dict['trigger'] = self.trigger.to_dict()
        # override the default output from pydantic by calling `to_dict()` of variable
        if self.variable:
            _dict['variable'] = self.variable.to_dict()
        # override the default output from pydantic by calling `to_dict()` of zone
        if self.zone:
            _dict['zone'] = self.zone.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Entity from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "builtInVariable": BuiltInVariable.from_dict(obj["builtInVariable"]) if obj.get("builtInVariable") is not None else None,
            "changeStatus": obj.get("changeStatus"),
            "client": Client.from_dict(obj["client"]) if obj.get("client") is not None else None,
            "customTemplate": CustomTemplate.from_dict(obj["customTemplate"]) if obj.get("customTemplate") is not None else None,
            "folder": Folder.from_dict(obj["folder"]) if obj.get("folder") is not None else None,
            "gtagConfig": GtagConfig.from_dict(obj["gtagConfig"]) if obj.get("gtagConfig") is not None else None,
            "tag": Tag.from_dict(obj["tag"]) if obj.get("tag") is not None else None,
            "transformation": Transformation.from_dict(obj["transformation"]) if obj.get("transformation") is not None else None,
            "trigger": Trigger.from_dict(obj["trigger"]) if obj.get("trigger") is not None else None,
            "variable": Variable.from_dict(obj["variable"]) if obj.get("variable") is not None else None,
            "zone": Zone.from_dict(obj["zone"]) if obj.get("zone") is not None else None
        })
        return _obj



# coding: utf-8

"""
    Tag Manager API

    This API allows clients to access and modify container and tag configuration.

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class ContainerVersionHeader(BaseModel):
    """
    Represents a Google Tag Manager Container Version Header.
    """ # noqa: E501
    account_id: Optional[StrictStr] = Field(default=None, description="GTM Account ID.", alias="accountId")
    container_id: Optional[StrictStr] = Field(default=None, description="GTM Container ID.", alias="containerId")
    container_version_id: Optional[StrictStr] = Field(default=None, description="The Container Version ID uniquely identifies the GTM Container Version.", alias="containerVersionId")
    deleted: Optional[StrictBool] = Field(default=None, description="A value of true indicates this container version has been deleted.")
    name: Optional[StrictStr] = Field(default=None, description="Container version display name.")
    num_clients: Optional[StrictStr] = Field(default=None, description="Number of clients in the container version.", alias="numClients")
    num_custom_templates: Optional[StrictStr] = Field(default=None, description="Number of custom templates in the container version.", alias="numCustomTemplates")
    num_gtag_configs: Optional[StrictStr] = Field(default=None, description="Number of Google tag configs in the container version.", alias="numGtagConfigs")
    num_macros: Optional[StrictStr] = Field(default=None, description="Number of macros in the container version.", alias="numMacros")
    num_rules: Optional[StrictStr] = Field(default=None, description="Number of rules in the container version.", alias="numRules")
    num_tags: Optional[StrictStr] = Field(default=None, description="Number of tags in the container version.", alias="numTags")
    num_transformations: Optional[StrictStr] = Field(default=None, description="Number of transformations in the container version.", alias="numTransformations")
    num_triggers: Optional[StrictStr] = Field(default=None, description="Number of triggers in the container version.", alias="numTriggers")
    num_variables: Optional[StrictStr] = Field(default=None, description="Number of variables in the container version.", alias="numVariables")
    num_zones: Optional[StrictStr] = Field(default=None, description="Number of zones in the container version.", alias="numZones")
    path: Optional[StrictStr] = Field(default=None, description="GTM Container Version's API relative path.")
    __properties: ClassVar[List[str]] = ["accountId", "containerId", "containerVersionId", "deleted", "name", "numClients", "numCustomTemplates", "numGtagConfigs", "numMacros", "numRules", "numTags", "numTransformations", "numTriggers", "numVariables", "numZones", "path"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ContainerVersionHeader from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ContainerVersionHeader from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "accountId": obj.get("accountId"),
            "containerId": obj.get("containerId"),
            "containerVersionId": obj.get("containerVersionId"),
            "deleted": obj.get("deleted"),
            "name": obj.get("name"),
            "numClients": obj.get("numClients"),
            "numCustomTemplates": obj.get("numCustomTemplates"),
            "numGtagConfigs": obj.get("numGtagConfigs"),
            "numMacros": obj.get("numMacros"),
            "numRules": obj.get("numRules"),
            "numTags": obj.get("numTags"),
            "numTransformations": obj.get("numTransformations"),
            "numTriggers": obj.get("numTriggers"),
            "numVariables": obj.get("numVariables"),
            "numZones": obj.get("numZones"),
            "path": obj.get("path")
        })
        return _obj



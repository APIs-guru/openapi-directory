# coding: utf-8

"""
    Tag Manager API

    This API allows clients to access and modify container and tag configuration.

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class ContainerFeatures(BaseModel):
    """
    ContainerFeatures
    """ # noqa: E501
    support_built_in_variables: Optional[StrictBool] = Field(default=None, description="Whether this Container supports built-in variables", alias="supportBuiltInVariables")
    support_clients: Optional[StrictBool] = Field(default=None, description="Whether this Container supports clients.", alias="supportClients")
    support_environments: Optional[StrictBool] = Field(default=None, description="Whether this Container supports environments.", alias="supportEnvironments")
    support_folders: Optional[StrictBool] = Field(default=None, description="Whether this Container supports folders.", alias="supportFolders")
    support_gtag_configs: Optional[StrictBool] = Field(default=None, description="Whether this Container supports Google tag config.", alias="supportGtagConfigs")
    support_tags: Optional[StrictBool] = Field(default=None, description="Whether this Container supports tags.", alias="supportTags")
    support_templates: Optional[StrictBool] = Field(default=None, description="Whether this Container supports templates.", alias="supportTemplates")
    support_transformations: Optional[StrictBool] = Field(default=None, description="Whether this Container supports transformations.", alias="supportTransformations")
    support_triggers: Optional[StrictBool] = Field(default=None, description="Whether this Container supports triggers.", alias="supportTriggers")
    support_user_permissions: Optional[StrictBool] = Field(default=None, description="Whether this Container supports user permissions managed by GTM.", alias="supportUserPermissions")
    support_variables: Optional[StrictBool] = Field(default=None, description="Whether this Container supports variables.", alias="supportVariables")
    support_versions: Optional[StrictBool] = Field(default=None, description="Whether this Container supports Container versions.", alias="supportVersions")
    support_workspaces: Optional[StrictBool] = Field(default=None, description="Whether this Container supports workspaces.", alias="supportWorkspaces")
    support_zones: Optional[StrictBool] = Field(default=None, description="Whether this Container supports zones.", alias="supportZones")
    __properties: ClassVar[List[str]] = ["supportBuiltInVariables", "supportClients", "supportEnvironments", "supportFolders", "supportGtagConfigs", "supportTags", "supportTemplates", "supportTransformations", "supportTriggers", "supportUserPermissions", "supportVariables", "supportVersions", "supportWorkspaces", "supportZones"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ContainerFeatures from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ContainerFeatures from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "supportBuiltInVariables": obj.get("supportBuiltInVariables"),
            "supportClients": obj.get("supportClients"),
            "supportEnvironments": obj.get("supportEnvironments"),
            "supportFolders": obj.get("supportFolders"),
            "supportGtagConfigs": obj.get("supportGtagConfigs"),
            "supportTags": obj.get("supportTags"),
            "supportTemplates": obj.get("supportTemplates"),
            "supportTransformations": obj.get("supportTransformations"),
            "supportTriggers": obj.get("supportTriggers"),
            "supportUserPermissions": obj.get("supportUserPermissions"),
            "supportVariables": obj.get("supportVariables"),
            "supportVersions": obj.get("supportVersions"),
            "supportWorkspaces": obj.get("supportWorkspaces"),
            "supportZones": obj.get("supportZones")
        })
        return _obj



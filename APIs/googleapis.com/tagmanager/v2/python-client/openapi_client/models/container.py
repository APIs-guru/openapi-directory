# coding: utf-8

"""
    Tag Manager API

    This API allows clients to access and modify container and tag configuration.

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.container_features import ContainerFeatures
from typing import Optional, Set
from typing_extensions import Self

class Container(BaseModel):
    """
    Represents a Google Tag Manager Container, which specifies the platform tags will run on, manages workspaces, and retains container versions.
    """ # noqa: E501
    account_id: Optional[StrictStr] = Field(default=None, description="GTM Account ID.", alias="accountId")
    container_id: Optional[StrictStr] = Field(default=None, description="The Container ID uniquely identifies the GTM Container.", alias="containerId")
    domain_name: Optional[List[StrictStr]] = Field(default=None, description="List of domain names associated with the Container. @mutable tagmanager.accounts.containers.create @mutable tagmanager.accounts.containers.update", alias="domainName")
    features: Optional[ContainerFeatures] = None
    fingerprint: Optional[StrictStr] = Field(default=None, description="The fingerprint of the GTM Container as computed at storage time. This value is recomputed whenever the account is modified.")
    name: Optional[StrictStr] = Field(default=None, description="Container display name. @mutable tagmanager.accounts.containers.create @mutable tagmanager.accounts.containers.update")
    notes: Optional[StrictStr] = Field(default=None, description="Container Notes. @mutable tagmanager.accounts.containers.create @mutable tagmanager.accounts.containers.update")
    path: Optional[StrictStr] = Field(default=None, description="GTM Container's API relative path.")
    public_id: Optional[StrictStr] = Field(default=None, description="Container Public ID.", alias="publicId")
    tag_ids: Optional[List[StrictStr]] = Field(default=None, description="All Tag IDs that refer to this Container.", alias="tagIds")
    tag_manager_url: Optional[StrictStr] = Field(default=None, description="Auto generated link to the tag manager UI", alias="tagManagerUrl")
    tagging_server_urls: Optional[List[StrictStr]] = Field(default=None, description="List of server-side container URLs for the Container. If multiple URLs are provided, all URL paths must match. @mutable tagmanager.accounts.containers.create @mutable tagmanager.accounts.containers.update", alias="taggingServerUrls")
    usage_context: Optional[List[StrictStr]] = Field(default=None, description="List of Usage Contexts for the Container. Valid values include: web, android, or ios. @mutable tagmanager.accounts.containers.create @mutable tagmanager.accounts.containers.update", alias="usageContext")
    __properties: ClassVar[List[str]] = ["accountId", "containerId", "domainName", "features", "fingerprint", "name", "notes", "path", "publicId", "tagIds", "tagManagerUrl", "taggingServerUrls", "usageContext"]

    @field_validator('usage_context')
    def usage_context_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        for i in value:
            if i not in set(['usageContextUnspecified', 'web', 'android', 'ios', 'androidSdk5', 'iosSdk5', 'amp', 'server']):
                raise ValueError("each list item must be one of ('usageContextUnspecified', 'web', 'android', 'ios', 'androidSdk5', 'iosSdk5', 'amp', 'server')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Container from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of features
        if self.features:
            _dict['features'] = self.features.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Container from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "accountId": obj.get("accountId"),
            "containerId": obj.get("containerId"),
            "domainName": obj.get("domainName"),
            "features": ContainerFeatures.from_dict(obj["features"]) if obj.get("features") is not None else None,
            "fingerprint": obj.get("fingerprint"),
            "name": obj.get("name"),
            "notes": obj.get("notes"),
            "path": obj.get("path"),
            "publicId": obj.get("publicId"),
            "tagIds": obj.get("tagIds"),
            "tagManagerUrl": obj.get("tagManagerUrl"),
            "taggingServerUrls": obj.get("taggingServerUrls"),
            "usageContext": obj.get("usageContext")
        })
        return _obj



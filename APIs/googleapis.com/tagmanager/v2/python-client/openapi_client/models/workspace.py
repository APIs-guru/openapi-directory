# coding: utf-8

"""
    Tag Manager API

    This API allows clients to access and modify container and tag configuration.

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class Workspace(BaseModel):
    """
    Represents a Google Tag Manager Container Workspace.
    """ # noqa: E501
    account_id: Optional[StrictStr] = Field(default=None, description="GTM Account ID.", alias="accountId")
    container_id: Optional[StrictStr] = Field(default=None, description="GTM Container ID.", alias="containerId")
    description: Optional[StrictStr] = Field(default=None, description="Workspace description. @mutable tagmanager.accounts.containers.workspaces.create @mutable tagmanager.accounts.containers.workspaces.update")
    fingerprint: Optional[StrictStr] = Field(default=None, description="The fingerprint of the GTM Workspace as computed at storage time. This value is recomputed whenever the workspace is modified.")
    name: Optional[StrictStr] = Field(default=None, description="Workspace display name. @mutable tagmanager.accounts.containers.workspaces.create @mutable tagmanager.accounts.containers.workspaces.update")
    path: Optional[StrictStr] = Field(default=None, description="GTM Workspace's API relative path.")
    tag_manager_url: Optional[StrictStr] = Field(default=None, description="Auto generated link to the tag manager UI", alias="tagManagerUrl")
    workspace_id: Optional[StrictStr] = Field(default=None, description="The Workspace ID uniquely identifies the GTM Workspace.", alias="workspaceId")
    __properties: ClassVar[List[str]] = ["accountId", "containerId", "description", "fingerprint", "name", "path", "tagManagerUrl", "workspaceId"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Workspace from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Workspace from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "accountId": obj.get("accountId"),
            "containerId": obj.get("containerId"),
            "description": obj.get("description"),
            "fingerprint": obj.get("fingerprint"),
            "name": obj.get("name"),
            "path": obj.get("path"),
            "tagManagerUrl": obj.get("tagManagerUrl"),
            "workspaceId": obj.get("workspaceId")
        })
        return _obj



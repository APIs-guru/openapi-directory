# coding: utf-8

"""
    Tag Manager API

    This API allows clients to access and modify container and tag configuration.

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.built_in_variable import BuiltInVariable
from openapi_client.models.client import Client
from openapi_client.models.container import Container
from openapi_client.models.custom_template import CustomTemplate
from openapi_client.models.folder import Folder
from openapi_client.models.gtag_config import GtagConfig
from openapi_client.models.tag import Tag
from openapi_client.models.transformation import Transformation
from openapi_client.models.trigger import Trigger
from openapi_client.models.variable import Variable
from openapi_client.models.zone import Zone
from typing import Optional, Set
from typing_extensions import Self

class ContainerVersion(BaseModel):
    """
    Represents a Google Tag Manager Container Version.
    """ # noqa: E501
    account_id: Optional[StrictStr] = Field(default=None, description="GTM Account ID.", alias="accountId")
    built_in_variable: Optional[List[BuiltInVariable]] = Field(default=None, description="The built-in variables in the container that this version was taken from.", alias="builtInVariable")
    client: Optional[List[Client]] = Field(default=None, description="The clients in the container that this version was taken from.")
    container: Optional[Container] = None
    container_id: Optional[StrictStr] = Field(default=None, description="GTM Container ID.", alias="containerId")
    container_version_id: Optional[StrictStr] = Field(default=None, description="The Container Version ID uniquely identifies the GTM Container Version.", alias="containerVersionId")
    custom_template: Optional[List[CustomTemplate]] = Field(default=None, description="The custom templates in the container that this version was taken from.", alias="customTemplate")
    deleted: Optional[StrictBool] = Field(default=None, description="A value of true indicates this container version has been deleted.")
    description: Optional[StrictStr] = Field(default=None, description="Container version description. @mutable tagmanager.accounts.containers.versions.update")
    fingerprint: Optional[StrictStr] = Field(default=None, description="The fingerprint of the GTM Container Version as computed at storage time. This value is recomputed whenever the container version is modified.")
    folder: Optional[List[Folder]] = Field(default=None, description="The folders in the container that this version was taken from.")
    gtag_config: Optional[List[GtagConfig]] = Field(default=None, description="The Google tag configs in the container that this version was taken from.", alias="gtagConfig")
    name: Optional[StrictStr] = Field(default=None, description="Container version display name. @mutable tagmanager.accounts.containers.versions.update")
    path: Optional[StrictStr] = Field(default=None, description="GTM Container Version's API relative path.")
    tag: Optional[List[Tag]] = Field(default=None, description="The tags in the container that this version was taken from.")
    tag_manager_url: Optional[StrictStr] = Field(default=None, description="Auto generated link to the tag manager UI", alias="tagManagerUrl")
    transformation: Optional[List[Transformation]] = Field(default=None, description="The transformations in the container that this version was taken from.")
    trigger: Optional[List[Trigger]] = Field(default=None, description="The triggers in the container that this version was taken from.")
    variable: Optional[List[Variable]] = Field(default=None, description="The variables in the container that this version was taken from.")
    zone: Optional[List[Zone]] = Field(default=None, description="The zones in the container that this version was taken from.")
    __properties: ClassVar[List[str]] = ["accountId", "builtInVariable", "client", "container", "containerId", "containerVersionId", "customTemplate", "deleted", "description", "fingerprint", "folder", "gtagConfig", "name", "path", "tag", "tagManagerUrl", "transformation", "trigger", "variable", "zone"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ContainerVersion from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in built_in_variable (list)
        _items = []
        if self.built_in_variable:
            for _item_built_in_variable in self.built_in_variable:
                if _item_built_in_variable:
                    _items.append(_item_built_in_variable.to_dict())
            _dict['builtInVariable'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in client (list)
        _items = []
        if self.client:
            for _item_client in self.client:
                if _item_client:
                    _items.append(_item_client.to_dict())
            _dict['client'] = _items
        # override the default output from pydantic by calling `to_dict()` of container
        if self.container:
            _dict['container'] = self.container.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in custom_template (list)
        _items = []
        if self.custom_template:
            for _item_custom_template in self.custom_template:
                if _item_custom_template:
                    _items.append(_item_custom_template.to_dict())
            _dict['customTemplate'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in folder (list)
        _items = []
        if self.folder:
            for _item_folder in self.folder:
                if _item_folder:
                    _items.append(_item_folder.to_dict())
            _dict['folder'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in gtag_config (list)
        _items = []
        if self.gtag_config:
            for _item_gtag_config in self.gtag_config:
                if _item_gtag_config:
                    _items.append(_item_gtag_config.to_dict())
            _dict['gtagConfig'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in tag (list)
        _items = []
        if self.tag:
            for _item_tag in self.tag:
                if _item_tag:
                    _items.append(_item_tag.to_dict())
            _dict['tag'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in transformation (list)
        _items = []
        if self.transformation:
            for _item_transformation in self.transformation:
                if _item_transformation:
                    _items.append(_item_transformation.to_dict())
            _dict['transformation'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in trigger (list)
        _items = []
        if self.trigger:
            for _item_trigger in self.trigger:
                if _item_trigger:
                    _items.append(_item_trigger.to_dict())
            _dict['trigger'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in variable (list)
        _items = []
        if self.variable:
            for _item_variable in self.variable:
                if _item_variable:
                    _items.append(_item_variable.to_dict())
            _dict['variable'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in zone (list)
        _items = []
        if self.zone:
            for _item_zone in self.zone:
                if _item_zone:
                    _items.append(_item_zone.to_dict())
            _dict['zone'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ContainerVersion from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "accountId": obj.get("accountId"),
            "builtInVariable": [BuiltInVariable.from_dict(_item) for _item in obj["builtInVariable"]] if obj.get("builtInVariable") is not None else None,
            "client": [Client.from_dict(_item) for _item in obj["client"]] if obj.get("client") is not None else None,
            "container": Container.from_dict(obj["container"]) if obj.get("container") is not None else None,
            "containerId": obj.get("containerId"),
            "containerVersionId": obj.get("containerVersionId"),
            "customTemplate": [CustomTemplate.from_dict(_item) for _item in obj["customTemplate"]] if obj.get("customTemplate") is not None else None,
            "deleted": obj.get("deleted"),
            "description": obj.get("description"),
            "fingerprint": obj.get("fingerprint"),
            "folder": [Folder.from_dict(_item) for _item in obj["folder"]] if obj.get("folder") is not None else None,
            "gtagConfig": [GtagConfig.from_dict(_item) for _item in obj["gtagConfig"]] if obj.get("gtagConfig") is not None else None,
            "name": obj.get("name"),
            "path": obj.get("path"),
            "tag": [Tag.from_dict(_item) for _item in obj["tag"]] if obj.get("tag") is not None else None,
            "tagManagerUrl": obj.get("tagManagerUrl"),
            "transformation": [Transformation.from_dict(_item) for _item in obj["transformation"]] if obj.get("transformation") is not None else None,
            "trigger": [Trigger.from_dict(_item) for _item in obj["trigger"]] if obj.get("trigger") is not None else None,
            "variable": [Variable.from_dict(_item) for _item in obj["variable"]] if obj.get("variable") is not None else None,
            "zone": [Zone.from_dict(_item) for _item in obj["zone"]] if obj.get("zone") is not None else None
        })
        return _obj



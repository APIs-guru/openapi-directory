# coding: utf-8

"""
    Tag Manager API

    This API allows clients to access and modify container and tag configuration.

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.parameter import Parameter
from openapi_client.models.setup_tag import SetupTag
from openapi_client.models.tag_consent_setting import TagConsentSetting
from openapi_client.models.teardown_tag import TeardownTag
from typing import Optional, Set
from typing_extensions import Self

class Tag(BaseModel):
    """
    Represents a Google Tag Manager Tag.
    """ # noqa: E501
    account_id: Optional[StrictStr] = Field(default=None, description="GTM Account ID.", alias="accountId")
    blocking_rule_id: Optional[List[StrictStr]] = Field(default=None, description="Blocking rule IDs. If any of the listed rules evaluate to true, the tag will not fire. @mutable tagmanager.accounts.containers.workspaces.tags.create @mutable tagmanager.accounts.containers.workspaces.tags.update", alias="blockingRuleId")
    blocking_trigger_id: Optional[List[StrictStr]] = Field(default=None, description="Blocking trigger IDs. If any of the listed triggers evaluate to true, the tag will not fire. @mutable tagmanager.accounts.containers.workspaces.tags.create @mutable tagmanager.accounts.containers.workspaces.tags.update", alias="blockingTriggerId")
    consent_settings: Optional[TagConsentSetting] = Field(default=None, alias="consentSettings")
    container_id: Optional[StrictStr] = Field(default=None, description="GTM Container ID.", alias="containerId")
    fingerprint: Optional[StrictStr] = Field(default=None, description="The fingerprint of the GTM Tag as computed at storage time. This value is recomputed whenever the tag is modified.")
    firing_rule_id: Optional[List[StrictStr]] = Field(default=None, description="Firing rule IDs. A tag will fire when any of the listed rules are true and all of its blockingRuleIds (if any specified) are false. @mutable tagmanager.accounts.containers.workspaces.tags.create @mutable tagmanager.accounts.containers.workspaces.tags.update", alias="firingRuleId")
    firing_trigger_id: Optional[List[StrictStr]] = Field(default=None, description="Firing trigger IDs. A tag will fire when any of the listed triggers are true and all of its blockingTriggerIds (if any specified) are false. @mutable tagmanager.accounts.containers.workspaces.tags.create @mutable tagmanager.accounts.containers.workspaces.tags.update", alias="firingTriggerId")
    live_only: Optional[StrictBool] = Field(default=None, description="If set to true, this tag will only fire in the live environment (e.g. not in preview or debug mode). @mutable tagmanager.accounts.containers.workspaces.tags.create @mutable tagmanager.accounts.containers.workspaces.tags.update", alias="liveOnly")
    monitoring_metadata: Optional[Parameter] = Field(default=None, alias="monitoringMetadata")
    monitoring_metadata_tag_name_key: Optional[StrictStr] = Field(default=None, description="If non-empty, then the tag display name will be included in the monitoring metadata map using the key specified. @mutable tagmanager.accounts.containers.workspaces.tags.create @mutable tagmanager.accounts.containers.workspaces.tags.update", alias="monitoringMetadataTagNameKey")
    name: Optional[StrictStr] = Field(default=None, description="Tag display name. @mutable tagmanager.accounts.containers.workspaces.tags.create @mutable tagmanager.accounts.containers.workspaces.tags.update")
    notes: Optional[StrictStr] = Field(default=None, description="User notes on how to apply this tag in the container. @mutable tagmanager.accounts.containers.workspaces.tags.create @mutable tagmanager.accounts.containers.workspaces.tags.update")
    parameter: Optional[List[Parameter]] = Field(default=None, description="The tag's parameters. @mutable tagmanager.accounts.containers.workspaces.tags.create @mutable tagmanager.accounts.containers.workspaces.tags.update")
    parent_folder_id: Optional[StrictStr] = Field(default=None, description="Parent folder id.", alias="parentFolderId")
    path: Optional[StrictStr] = Field(default=None, description="GTM Tag's API relative path.")
    paused: Optional[StrictBool] = Field(default=None, description="Indicates whether the tag is paused, which prevents the tag from firing. @mutable tagmanager.accounts.containers.workspaces.tags.create @mutable tagmanager.accounts.containers.workspaces.tags.update")
    priority: Optional[Parameter] = None
    schedule_end_ms: Optional[StrictStr] = Field(default=None, description="The end timestamp in milliseconds to schedule a tag. @mutable tagmanager.accounts.containers.workspaces.tags.create @mutable tagmanager.accounts.containers.workspaces.tags.update", alias="scheduleEndMs")
    schedule_start_ms: Optional[StrictStr] = Field(default=None, description="The start timestamp in milliseconds to schedule a tag. @mutable tagmanager.accounts.containers.workspaces.tags.create @mutable tagmanager.accounts.containers.workspaces.tags.update", alias="scheduleStartMs")
    setup_tag: Optional[List[SetupTag]] = Field(default=None, description="The list of setup tags. Currently we only allow one.", alias="setupTag")
    tag_firing_option: Optional[StrictStr] = Field(default=None, description="Option to fire this tag.", alias="tagFiringOption")
    tag_id: Optional[StrictStr] = Field(default=None, description="The Tag ID uniquely identifies the GTM Tag.", alias="tagId")
    tag_manager_url: Optional[StrictStr] = Field(default=None, description="Auto generated link to the tag manager UI", alias="tagManagerUrl")
    teardown_tag: Optional[List[TeardownTag]] = Field(default=None, description="The list of teardown tags. Currently we only allow one.", alias="teardownTag")
    type: Optional[StrictStr] = Field(default=None, description="GTM Tag Type. @mutable tagmanager.accounts.containers.workspaces.tags.create @mutable tagmanager.accounts.containers.workspaces.tags.update")
    workspace_id: Optional[StrictStr] = Field(default=None, description="GTM Workspace ID.", alias="workspaceId")
    __properties: ClassVar[List[str]] = ["accountId", "blockingRuleId", "blockingTriggerId", "consentSettings", "containerId", "fingerprint", "firingRuleId", "firingTriggerId", "liveOnly", "monitoringMetadata", "monitoringMetadataTagNameKey", "name", "notes", "parameter", "parentFolderId", "path", "paused", "priority", "scheduleEndMs", "scheduleStartMs", "setupTag", "tagFiringOption", "tagId", "tagManagerUrl", "teardownTag", "type", "workspaceId"]

    @field_validator('tag_firing_option')
    def tag_firing_option_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['tagFiringOptionUnspecified', 'unlimited', 'oncePerEvent', 'oncePerLoad']):
            raise ValueError("must be one of enum values ('tagFiringOptionUnspecified', 'unlimited', 'oncePerEvent', 'oncePerLoad')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Tag from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of consent_settings
        if self.consent_settings:
            _dict['consentSettings'] = self.consent_settings.to_dict()
        # override the default output from pydantic by calling `to_dict()` of monitoring_metadata
        if self.monitoring_metadata:
            _dict['monitoringMetadata'] = self.monitoring_metadata.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in parameter (list)
        _items = []
        if self.parameter:
            for _item_parameter in self.parameter:
                if _item_parameter:
                    _items.append(_item_parameter.to_dict())
            _dict['parameter'] = _items
        # override the default output from pydantic by calling `to_dict()` of priority
        if self.priority:
            _dict['priority'] = self.priority.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in setup_tag (list)
        _items = []
        if self.setup_tag:
            for _item_setup_tag in self.setup_tag:
                if _item_setup_tag:
                    _items.append(_item_setup_tag.to_dict())
            _dict['setupTag'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in teardown_tag (list)
        _items = []
        if self.teardown_tag:
            for _item_teardown_tag in self.teardown_tag:
                if _item_teardown_tag:
                    _items.append(_item_teardown_tag.to_dict())
            _dict['teardownTag'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Tag from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "accountId": obj.get("accountId"),
            "blockingRuleId": obj.get("blockingRuleId"),
            "blockingTriggerId": obj.get("blockingTriggerId"),
            "consentSettings": TagConsentSetting.from_dict(obj["consentSettings"]) if obj.get("consentSettings") is not None else None,
            "containerId": obj.get("containerId"),
            "fingerprint": obj.get("fingerprint"),
            "firingRuleId": obj.get("firingRuleId"),
            "firingTriggerId": obj.get("firingTriggerId"),
            "liveOnly": obj.get("liveOnly"),
            "monitoringMetadata": Parameter.from_dict(obj["monitoringMetadata"]) if obj.get("monitoringMetadata") is not None else None,
            "monitoringMetadataTagNameKey": obj.get("monitoringMetadataTagNameKey"),
            "name": obj.get("name"),
            "notes": obj.get("notes"),
            "parameter": [Parameter.from_dict(_item) for _item in obj["parameter"]] if obj.get("parameter") is not None else None,
            "parentFolderId": obj.get("parentFolderId"),
            "path": obj.get("path"),
            "paused": obj.get("paused"),
            "priority": Parameter.from_dict(obj["priority"]) if obj.get("priority") is not None else None,
            "scheduleEndMs": obj.get("scheduleEndMs"),
            "scheduleStartMs": obj.get("scheduleStartMs"),
            "setupTag": [SetupTag.from_dict(_item) for _item in obj["setupTag"]] if obj.get("setupTag") is not None else None,
            "tagFiringOption": obj.get("tagFiringOption"),
            "tagId": obj.get("tagId"),
            "tagManagerUrl": obj.get("tagManagerUrl"),
            "teardownTag": [TeardownTag.from_dict(_item) for _item in obj["teardownTag"]] if obj.get("teardownTag") is not None else None,
            "type": obj.get("type"),
            "workspaceId": obj.get("workspaceId")
        })
        return _obj



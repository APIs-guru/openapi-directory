# coding: utf-8

"""
    Tag Manager API

    This API allows clients to access and modify container and tag configuration.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.publish_container_version_response import PublishContainerVersionResponse

class TestPublishContainerVersionResponse(unittest.TestCase):
    """PublishContainerVersionResponse unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> PublishContainerVersionResponse:
        """Test PublishContainerVersionResponse
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `PublishContainerVersionResponse`
        """
        model = PublishContainerVersionResponse()
        if include_optional:
            return PublishContainerVersionResponse(
                compiler_error = True,
                container_version = openapi_client.models.container_version.ContainerVersion(
                    account_id = '', 
                    container = openapi_client.models.container.Container(
                        account_id = '', 
                        container_id = '', 
                        domain_name = [
                            ''
                            ], 
                        enabled_built_in_variable = [
                            'pageUrl'
                            ], 
                        fingerprint = '', 
                        name = '', 
                        notes = '', 
                        public_id = '', 
                        time_zone_country_id = '', 
                        time_zone_id = '', 
                        usage_context = [
                            'web'
                            ], ), 
                    container_id = '', 
                    container_version_id = '', 
                    deleted = True, 
                    fingerprint = '', 
                    folder = [
                        openapi_client.models.folder.Folder(
                            account_id = '', 
                            container_id = '', 
                            fingerprint = '', 
                            folder_id = '', 
                            name = '', )
                        ], 
                    macro = [
                        openapi_client.models.macro.Macro(
                            account_id = '', 
                            container_id = '', 
                            disabling_rule_id = [
                                ''
                                ], 
                            enabling_rule_id = [
                                ''
                                ], 
                            fingerprint = '', 
                            macro_id = '', 
                            name = '', 
                            notes = '', 
                            parameter = [
                                openapi_client.models.parameter.Parameter(
                                    key = '', 
                                    list = [
                                        openapi_client.models.parameter.Parameter(
                                            key = '', 
                                            map = [
                                                
                                                ], 
                                            type = 'template', 
                                            value = '', )
                                        ], 
                                    map = [
                                        
                                        ], 
                                    type = 'template', 
                                    value = '', )
                                ], 
                            parent_folder_id = '', 
                            schedule_end_ms = '', 
                            schedule_start_ms = '', 
                            type = '', )
                        ], 
                    name = '', 
                    notes = '', 
                    rule = [
                        openapi_client.models.rule.Rule(
                            account_id = '', 
                            condition = [
                                openapi_client.models.condition.Condition(
                                    type = 'equals', )
                                ], 
                            container_id = '', 
                            fingerprint = '', 
                            name = '', 
                            notes = '', 
                            rule_id = '', )
                        ], 
                    tag = [
                        openapi_client.models.tag.Tag(
                            account_id = '', 
                            blocking_rule_id = [
                                ''
                                ], 
                            blocking_trigger_id = [
                                ''
                                ], 
                            container_id = '', 
                            fingerprint = '', 
                            firing_rule_id = [
                                ''
                                ], 
                            firing_trigger_id = [
                                ''
                                ], 
                            live_only = True, 
                            name = '', 
                            notes = '', 
                            parent_folder_id = '', 
                            paused = True, 
                            priority = , 
                            schedule_end_ms = '', 
                            schedule_start_ms = '', 
                            setup_tag = [
                                openapi_client.models.setup_tag.SetupTag(
                                    stop_on_setup_failure = True, 
                                    tag_name = '', )
                                ], 
                            tag_firing_option = 'unlimited', 
                            tag_id = '', 
                            teardown_tag = [
                                openapi_client.models.teardown_tag.TeardownTag(
                                    stop_teardown_on_failure = True, 
                                    tag_name = '', )
                                ], 
                            type = '', )
                        ], 
                    trigger = [
                        openapi_client.models.trigger.Trigger(
                            account_id = '', 
                            auto_event_filter = [
                                openapi_client.models.condition.Condition(
                                    type = 'equals', )
                                ], 
                            check_validation = , 
                            container_id = '', 
                            continuous_time_min_milliseconds = , 
                            custom_event_filter = [
                                
                                ], 
                            event_name = , 
                            filter = [
                                
                                ], 
                            fingerprint = '', 
                            horizontal_scroll_percentage_list = , 
                            interval = , 
                            interval_seconds = , 
                            limit = , 
                            max_timer_length_seconds = , 
                            name = '', 
                            parent_folder_id = '', 
                            selector = , 
                            total_time_min_milliseconds = , 
                            trigger_id = '', 
                            type = 'pageview', 
                            unique_trigger_id = , 
                            vertical_scroll_percentage_list = , 
                            visibility_selector = , 
                            visible_percentage_max = , 
                            visible_percentage_min = , 
                            wait_for_tags = , 
                            wait_for_tags_timeout = , )
                        ], 
                    variable = [
                        openapi_client.models.variable.Variable(
                            account_id = '', 
                            container_id = '', 
                            disabling_trigger_id = [
                                ''
                                ], 
                            enabling_trigger_id = [
                                ''
                                ], 
                            fingerprint = '', 
                            name = '', 
                            notes = '', 
                            parent_folder_id = '', 
                            schedule_end_ms = '', 
                            schedule_start_ms = '', 
                            type = '', 
                            variable_id = '', )
                        ], )
            )
        else:
            return PublishContainerVersionResponse(
        )
        """

    def testPublishContainerVersionResponse(self):
        """Test PublishContainerVersionResponse"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

# coding: utf-8

"""
    Tag Manager API

    This API allows clients to access and modify container and tag configuration.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class Environment(BaseModel):
    """
    Represents a Google Tag Manager Environment. Note that a user can create, delete and update environments of type USER, but can only update the enable_debug and url fields of environments of other types.
    """ # noqa: E501
    account_id: Optional[StrictStr] = Field(default=None, description="GTM Account ID.", alias="accountId")
    authorization_code: Optional[StrictStr] = Field(default=None, description="The environment authorization code.", alias="authorizationCode")
    authorization_timestamp_ms: Optional[StrictStr] = Field(default=None, description="The last update time-stamp for the authorization code.", alias="authorizationTimestampMs")
    container_id: Optional[StrictStr] = Field(default=None, description="GTM Container ID.", alias="containerId")
    container_version_id: Optional[StrictStr] = Field(default=None, alias="containerVersionId")
    description: Optional[StrictStr] = Field(default=None, description="The environment description. Can be set or changed only on USER type environments. @mutable tagmanager.accounts.containers.environments.create @mutable tagmanager.accounts.containers.environments.update")
    enable_debug: Optional[StrictBool] = Field(default=None, description="Whether or not to enable debug by default on for the environment. @mutable tagmanager.accounts.containers.environments.create @mutable tagmanager.accounts.containers.environments.update", alias="enableDebug")
    environment_id: Optional[StrictStr] = Field(default=None, description="GTM Environment ID uniquely identifies the GTM Environment.", alias="environmentId")
    fingerprint: Optional[StrictStr] = Field(default=None, description="The fingerprint of the GTM environment as computed at storage time. This value is recomputed whenever the environment is modified.")
    name: Optional[StrictStr] = Field(default=None, description="The environment display name. Can be set or changed only on USER type environments. @mutable tagmanager.accounts.containers.environments.create @mutable tagmanager.accounts.containers.environments.update")
    type: Optional[StrictStr] = Field(default=None, description="The type of this environment.")
    url: Optional[StrictStr] = Field(default=None, description="Default preview page url for the environment. @mutable tagmanager.accounts.containers.environments.create @mutable tagmanager.accounts.containers.environments.update")
    __properties: ClassVar[List[str]] = ["accountId", "authorizationCode", "authorizationTimestampMs", "containerId", "containerVersionId", "description", "enableDebug", "environmentId", "fingerprint", "name", "type", "url"]

    @field_validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['user', 'live', 'latest', 'draft']):
            raise ValueError("must be one of enum values ('user', 'live', 'latest', 'draft')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Environment from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Environment from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "accountId": obj.get("accountId"),
            "authorizationCode": obj.get("authorizationCode"),
            "authorizationTimestampMs": obj.get("authorizationTimestampMs"),
            "containerId": obj.get("containerId"),
            "containerVersionId": obj.get("containerVersionId"),
            "description": obj.get("description"),
            "enableDebug": obj.get("enableDebug"),
            "environmentId": obj.get("environmentId"),
            "fingerprint": obj.get("fingerprint"),
            "name": obj.get("name"),
            "type": obj.get("type"),
            "url": obj.get("url")
        })
        return _obj



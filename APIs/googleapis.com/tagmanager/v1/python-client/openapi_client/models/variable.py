# coding: utf-8

"""
    Tag Manager API

    This API allows clients to access and modify container and tag configuration.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.parameter import Parameter
from typing import Optional, Set
from typing_extensions import Self

class Variable(BaseModel):
    """
    Represents a Google Tag Manager Variable.
    """ # noqa: E501
    account_id: Optional[StrictStr] = Field(default=None, description="GTM Account ID.", alias="accountId")
    container_id: Optional[StrictStr] = Field(default=None, description="GTM Container ID.", alias="containerId")
    disabling_trigger_id: Optional[List[StrictStr]] = Field(default=None, description="For mobile containers only: A list of trigger IDs for disabling conditional variables; the variable is enabled if one of the enabling trigger is true while all the disabling trigger are false. Treated as an unordered set. @mutable tagmanager.accounts.containers.variables.create @mutable tagmanager.accounts.containers.variables.update", alias="disablingTriggerId")
    enabling_trigger_id: Optional[List[StrictStr]] = Field(default=None, description="For mobile containers only: A list of trigger IDs for enabling conditional variables; the variable is enabled if one of the enabling triggers is true while all the disabling triggers are false. Treated as an unordered set. @mutable tagmanager.accounts.containers.variables.create @mutable tagmanager.accounts.containers.variables.update", alias="enablingTriggerId")
    fingerprint: Optional[StrictStr] = Field(default=None, description="The fingerprint of the GTM Variable as computed at storage time. This value is recomputed whenever the variable is modified.")
    name: Optional[StrictStr] = Field(default=None, description="Variable display name. @mutable tagmanager.accounts.containers.variables.create @mutable tagmanager.accounts.containers.variables.update")
    notes: Optional[StrictStr] = Field(default=None, description="User notes on how to apply this variable in the container. @mutable tagmanager.accounts.containers.variables.create @mutable tagmanager.accounts.containers.variables.update")
    parameter: Optional[List[Parameter]] = Field(default=None, description="The variable's parameters. @mutable tagmanager.accounts.containers.variables.create @mutable tagmanager.accounts.containers.variables.update")
    parent_folder_id: Optional[StrictStr] = Field(default=None, description="Parent folder id.", alias="parentFolderId")
    schedule_end_ms: Optional[StrictStr] = Field(default=None, description="The end timestamp in milliseconds to schedule a variable. @mutable tagmanager.accounts.containers.variables.create @mutable tagmanager.accounts.containers.variables.update", alias="scheduleEndMs")
    schedule_start_ms: Optional[StrictStr] = Field(default=None, description="The start timestamp in milliseconds to schedule a variable. @mutable tagmanager.accounts.containers.variables.create @mutable tagmanager.accounts.containers.variables.update", alias="scheduleStartMs")
    type: Optional[StrictStr] = Field(default=None, description="GTM Variable Type. @mutable tagmanager.accounts.containers.variables.create @mutable tagmanager.accounts.containers.variables.update")
    variable_id: Optional[StrictStr] = Field(default=None, description="The Variable ID uniquely identifies the GTM Variable.", alias="variableId")
    __properties: ClassVar[List[str]] = ["accountId", "containerId", "disablingTriggerId", "enablingTriggerId", "fingerprint", "name", "notes", "parameter", "parentFolderId", "scheduleEndMs", "scheduleStartMs", "type", "variableId"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Variable from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in parameter (list)
        _items = []
        if self.parameter:
            for _item_parameter in self.parameter:
                if _item_parameter:
                    _items.append(_item_parameter.to_dict())
            _dict['parameter'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Variable from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "accountId": obj.get("accountId"),
            "containerId": obj.get("containerId"),
            "disablingTriggerId": obj.get("disablingTriggerId"),
            "enablingTriggerId": obj.get("enablingTriggerId"),
            "fingerprint": obj.get("fingerprint"),
            "name": obj.get("name"),
            "notes": obj.get("notes"),
            "parameter": [Parameter.from_dict(_item) for _item in obj["parameter"]] if obj.get("parameter") is not None else None,
            "parentFolderId": obj.get("parentFolderId"),
            "scheduleEndMs": obj.get("scheduleEndMs"),
            "scheduleStartMs": obj.get("scheduleStartMs"),
            "type": obj.get("type"),
            "variableId": obj.get("variableId")
        })
        return _obj



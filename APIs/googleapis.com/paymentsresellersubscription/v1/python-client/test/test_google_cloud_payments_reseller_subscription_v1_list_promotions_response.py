# coding: utf-8

"""
    Payments Reseller Subscription API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.google_cloud_payments_reseller_subscription_v1_list_promotions_response import GoogleCloudPaymentsResellerSubscriptionV1ListPromotionsResponse

class TestGoogleCloudPaymentsResellerSubscriptionV1ListPromotionsResponse(unittest.TestCase):
    """GoogleCloudPaymentsResellerSubscriptionV1ListPromotionsResponse unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> GoogleCloudPaymentsResellerSubscriptionV1ListPromotionsResponse:
        """Test GoogleCloudPaymentsResellerSubscriptionV1ListPromotionsResponse
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `GoogleCloudPaymentsResellerSubscriptionV1ListPromotionsResponse`
        """
        model = GoogleCloudPaymentsResellerSubscriptionV1ListPromotionsResponse()
        if include_optional:
            return GoogleCloudPaymentsResellerSubscriptionV1ListPromotionsResponse(
                next_page_token = '',
                promotions = [
                    openapi_client.models.google_cloud_payments_reseller_subscription_v1_promotion.GoogleCloudPaymentsResellerSubscriptionV1Promotion(
                        applicable_products = [
                            ''
                            ], 
                        end_time = '', 
                        free_trial_duration = openapi_client.models.google_cloud_payments_reseller_subscription_v1_duration.GoogleCloudPaymentsResellerSubscriptionV1Duration(
                            count = 56, 
                            unit = 'UNIT_UNSPECIFIED', ), 
                        introductory_pricing_details = openapi_client.models.google_cloud_payments_reseller_subscription_v1_promotion_introductory_pricing_details.GoogleCloudPaymentsResellerSubscriptionV1PromotionIntroductoryPricingDetails(
                            introductory_pricing_specs = [
                                openapi_client.models.google_cloud_payments_reseller_subscription_v1_promotion_introductory_pricing_details_introductory_pricing_spec.GoogleCloudPaymentsResellerSubscriptionV1PromotionIntroductoryPricingDetailsIntroductoryPricingSpec(
                                    discount_amount = openapi_client.models.google_cloud_payments_reseller_subscription_v1_amount.GoogleCloudPaymentsResellerSubscriptionV1Amount(
                                        amount_micros = '', 
                                        currency_code = '', ), 
                                    discount_ratio_micros = '', 
                                    recurrence_count = 56, 
                                    region_code = '', )
                                ], ), 
                        name = '', 
                        promotion_type = 'PROMOTION_TYPE_UNSPECIFIED', 
                        region_codes = [
                            ''
                            ], 
                        start_time = '', 
                        titles = [
                            openapi_client.models.google_type_localized_text.GoogleTypeLocalizedText(
                                language_code = '', 
                                text = '', )
                            ], )
                    ]
            )
        else:
            return GoogleCloudPaymentsResellerSubscriptionV1ListPromotionsResponse(
        )
        """

    def testGoogleCloudPaymentsResellerSubscriptionV1ListPromotionsResponse(self):
        """Test GoogleCloudPaymentsResellerSubscriptionV1ListPromotionsResponse"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

# coding: utf-8

"""
    Payments Reseller Subscription API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_cloud_payments_reseller_subscription_v1_duration import GoogleCloudPaymentsResellerSubscriptionV1Duration
from openapi_client.models.google_cloud_payments_reseller_subscription_v1_promotion_introductory_pricing_details import GoogleCloudPaymentsResellerSubscriptionV1PromotionIntroductoryPricingDetails
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudPaymentsResellerSubscriptionV1SubscriptionPromotionSpec(BaseModel):
    """
    Describes the spec for one promotion.
    """ # noqa: E501
    free_trial_duration: Optional[GoogleCloudPaymentsResellerSubscriptionV1Duration] = Field(default=None, alias="freeTrialDuration")
    introductory_pricing_details: Optional[GoogleCloudPaymentsResellerSubscriptionV1PromotionIntroductoryPricingDetails] = Field(default=None, alias="introductoryPricingDetails")
    promotion: Optional[StrictStr] = Field(default=None, description="Required. Promotion resource name that identifies a promotion. The format is 'partners/{partner_id}/promotions/{promotion_id}'.")
    type: Optional[StrictStr] = Field(default=None, description="Output only. The type of the promotion for the spec.")
    __properties: ClassVar[List[str]] = ["freeTrialDuration", "introductoryPricingDetails", "promotion", "type"]

    @field_validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['PROMOTION_TYPE_UNSPECIFIED', 'PROMOTION_TYPE_FREE_TRIAL', 'PROMOTION_TYPE_INTRODUCTORY_PRICING']):
            raise ValueError("must be one of enum values ('PROMOTION_TYPE_UNSPECIFIED', 'PROMOTION_TYPE_FREE_TRIAL', 'PROMOTION_TYPE_INTRODUCTORY_PRICING')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudPaymentsResellerSubscriptionV1SubscriptionPromotionSpec from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "type",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of free_trial_duration
        if self.free_trial_duration:
            _dict['freeTrialDuration'] = self.free_trial_duration.to_dict()
        # override the default output from pydantic by calling `to_dict()` of introductory_pricing_details
        if self.introductory_pricing_details:
            _dict['introductoryPricingDetails'] = self.introductory_pricing_details.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudPaymentsResellerSubscriptionV1SubscriptionPromotionSpec from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "freeTrialDuration": GoogleCloudPaymentsResellerSubscriptionV1Duration.from_dict(obj["freeTrialDuration"]) if obj.get("freeTrialDuration") is not None else None,
            "introductoryPricingDetails": GoogleCloudPaymentsResellerSubscriptionV1PromotionIntroductoryPricingDetails.from_dict(obj["introductoryPricingDetails"]) if obj.get("introductoryPricingDetails") is not None else None,
            "promotion": obj.get("promotion"),
            "type": obj.get("type")
        })
        return _obj



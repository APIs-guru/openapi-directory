# coding: utf-8

"""
    Payments Reseller Subscription API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_cloud_payments_reseller_subscription_v1_amount import GoogleCloudPaymentsResellerSubscriptionV1Amount
from openapi_client.models.google_cloud_payments_reseller_subscription_v1_finite_billing_cycle_details import GoogleCloudPaymentsResellerSubscriptionV1FiniteBillingCycleDetails
from openapi_client.models.google_cloud_payments_reseller_subscription_v1_product_payload import GoogleCloudPaymentsResellerSubscriptionV1ProductPayload
from openapi_client.models.google_cloud_payments_reseller_subscription_v1_subscription_line_item_one_time_recurrence_details import GoogleCloudPaymentsResellerSubscriptionV1SubscriptionLineItemOneTimeRecurrenceDetails
from openapi_client.models.google_cloud_payments_reseller_subscription_v1_subscription_promotion_spec import GoogleCloudPaymentsResellerSubscriptionV1SubscriptionPromotionSpec
from openapi_client.models.subscription_line_item_bundle_details import SubscriptionLineItemBundleDetails
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudPaymentsResellerSubscriptionV1SubscriptionLineItem(BaseModel):
    """
    Individual line item definition of a subscription.
    """ # noqa: E501
    amount: Optional[GoogleCloudPaymentsResellerSubscriptionV1Amount] = None
    bundle_details: Optional[SubscriptionLineItemBundleDetails] = Field(default=None, alias="bundleDetails")
    description: Optional[StrictStr] = Field(default=None, description="Output only. Description of this line item.")
    finite_billing_cycle_details: Optional[GoogleCloudPaymentsResellerSubscriptionV1FiniteBillingCycleDetails] = Field(default=None, alias="finiteBillingCycleDetails")
    line_item_free_trial_end_time: Optional[StrictStr] = Field(default=None, description="Output only. The free trial end time will be populated after the line item is successfully processed. End time of the line item free trial period, in ISO 8061 format. For example, \"2019-08-31T17:28:54.564Z\". It will be set the same as createTime if no free trial promotion is specified.", alias="lineItemFreeTrialEndTime")
    line_item_index: Optional[StrictInt] = Field(default=None, description="Output only. A unique index of the subscription line item.", alias="lineItemIndex")
    line_item_promotion_specs: Optional[List[GoogleCloudPaymentsResellerSubscriptionV1SubscriptionPromotionSpec]] = Field(default=None, description="Optional. The promotions applied on the line item. It can be: - a free trial promotion, which overrides the subscription-level free trial promotion. - an introductory pricing promotion. When used as input in Create or Provision API, specify its resource name only.", alias="lineItemPromotionSpecs")
    one_time_recurrence_details: Optional[GoogleCloudPaymentsResellerSubscriptionV1SubscriptionLineItemOneTimeRecurrenceDetails] = Field(default=None, alias="oneTimeRecurrenceDetails")
    product: Optional[StrictStr] = Field(default=None, description="Required. Product resource name that identifies one the line item The format is 'partners/{partner_id}/products/{product_id}'.")
    product_payload: Optional[GoogleCloudPaymentsResellerSubscriptionV1ProductPayload] = Field(default=None, alias="productPayload")
    recurrence_type: Optional[StrictStr] = Field(default=None, description="Output only. The recurrence type of the line item.", alias="recurrenceType")
    state: Optional[StrictStr] = Field(default=None, description="Output only. The state of the line item.")
    __properties: ClassVar[List[str]] = ["amount", "bundleDetails", "description", "finiteBillingCycleDetails", "lineItemFreeTrialEndTime", "lineItemIndex", "lineItemPromotionSpecs", "oneTimeRecurrenceDetails", "product", "productPayload", "recurrenceType", "state"]

    @field_validator('recurrence_type')
    def recurrence_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['LINE_ITEM_RECURRENCE_TYPE_UNSPECIFIED', 'LINE_ITEM_RECURRENCE_TYPE_PERIODIC', 'LINE_ITEM_RECURRENCE_TYPE_ONE_TIME']):
            raise ValueError("must be one of enum values ('LINE_ITEM_RECURRENCE_TYPE_UNSPECIFIED', 'LINE_ITEM_RECURRENCE_TYPE_PERIODIC', 'LINE_ITEM_RECURRENCE_TYPE_ONE_TIME')")
        return value

    @field_validator('state')
    def state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['LINE_ITEM_STATE_UNSPECIFIED', 'LINE_ITEM_STATE_ACTIVE', 'LINE_ITEM_STATE_INACTIVE', 'LINE_ITEM_STATE_NEW', 'LINE_ITEM_STATE_ACTIVATING', 'LINE_ITEM_STATE_DEACTIVATING', 'LINE_ITEM_STATE_WAITING_TO_DEACTIVATE', 'LINE_ITEM_STATE_OFF_CYCLE_CHARGING']):
            raise ValueError("must be one of enum values ('LINE_ITEM_STATE_UNSPECIFIED', 'LINE_ITEM_STATE_ACTIVE', 'LINE_ITEM_STATE_INACTIVE', 'LINE_ITEM_STATE_NEW', 'LINE_ITEM_STATE_ACTIVATING', 'LINE_ITEM_STATE_DEACTIVATING', 'LINE_ITEM_STATE_WAITING_TO_DEACTIVATE', 'LINE_ITEM_STATE_OFF_CYCLE_CHARGING')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudPaymentsResellerSubscriptionV1SubscriptionLineItem from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "description",
            "line_item_free_trial_end_time",
            "line_item_index",
            "recurrence_type",
            "state",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of amount
        if self.amount:
            _dict['amount'] = self.amount.to_dict()
        # override the default output from pydantic by calling `to_dict()` of bundle_details
        if self.bundle_details:
            _dict['bundleDetails'] = self.bundle_details.to_dict()
        # override the default output from pydantic by calling `to_dict()` of finite_billing_cycle_details
        if self.finite_billing_cycle_details:
            _dict['finiteBillingCycleDetails'] = self.finite_billing_cycle_details.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in line_item_promotion_specs (list)
        _items = []
        if self.line_item_promotion_specs:
            for _item_line_item_promotion_specs in self.line_item_promotion_specs:
                if _item_line_item_promotion_specs:
                    _items.append(_item_line_item_promotion_specs.to_dict())
            _dict['lineItemPromotionSpecs'] = _items
        # override the default output from pydantic by calling `to_dict()` of one_time_recurrence_details
        if self.one_time_recurrence_details:
            _dict['oneTimeRecurrenceDetails'] = self.one_time_recurrence_details.to_dict()
        # override the default output from pydantic by calling `to_dict()` of product_payload
        if self.product_payload:
            _dict['productPayload'] = self.product_payload.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudPaymentsResellerSubscriptionV1SubscriptionLineItem from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "amount": GoogleCloudPaymentsResellerSubscriptionV1Amount.from_dict(obj["amount"]) if obj.get("amount") is not None else None,
            "bundleDetails": SubscriptionLineItemBundleDetails.from_dict(obj["bundleDetails"]) if obj.get("bundleDetails") is not None else None,
            "description": obj.get("description"),
            "finiteBillingCycleDetails": GoogleCloudPaymentsResellerSubscriptionV1FiniteBillingCycleDetails.from_dict(obj["finiteBillingCycleDetails"]) if obj.get("finiteBillingCycleDetails") is not None else None,
            "lineItemFreeTrialEndTime": obj.get("lineItemFreeTrialEndTime"),
            "lineItemIndex": obj.get("lineItemIndex"),
            "lineItemPromotionSpecs": [GoogleCloudPaymentsResellerSubscriptionV1SubscriptionPromotionSpec.from_dict(_item) for _item in obj["lineItemPromotionSpecs"]] if obj.get("lineItemPromotionSpecs") is not None else None,
            "oneTimeRecurrenceDetails": GoogleCloudPaymentsResellerSubscriptionV1SubscriptionLineItemOneTimeRecurrenceDetails.from_dict(obj["oneTimeRecurrenceDetails"]) if obj.get("oneTimeRecurrenceDetails") is not None else None,
            "product": obj.get("product"),
            "productPayload": GoogleCloudPaymentsResellerSubscriptionV1ProductPayload.from_dict(obj["productPayload"]) if obj.get("productPayload") is not None else None,
            "recurrenceType": obj.get("recurrenceType"),
            "state": obj.get("state")
        })
        return _obj



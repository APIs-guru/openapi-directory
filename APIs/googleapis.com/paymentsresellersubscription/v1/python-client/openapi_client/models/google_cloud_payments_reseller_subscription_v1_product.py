# coding: utf-8

"""
    Payments Reseller Subscription API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_cloud_payments_reseller_subscription_v1_duration import GoogleCloudPaymentsResellerSubscriptionV1Duration
from openapi_client.models.google_cloud_payments_reseller_subscription_v1_finite_billing_cycle_details import GoogleCloudPaymentsResellerSubscriptionV1FiniteBillingCycleDetails
from openapi_client.models.google_cloud_payments_reseller_subscription_v1_product_price_config import GoogleCloudPaymentsResellerSubscriptionV1ProductPriceConfig
from openapi_client.models.google_type_localized_text import GoogleTypeLocalizedText
from openapi_client.models.product_bundle_details import ProductBundleDetails
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudPaymentsResellerSubscriptionV1Product(BaseModel):
    """
    A Product resource that defines a subscription service that can be resold.
    """ # noqa: E501
    bundle_details: Optional[ProductBundleDetails] = Field(default=None, alias="bundleDetails")
    finite_billing_cycle_details: Optional[GoogleCloudPaymentsResellerSubscriptionV1FiniteBillingCycleDetails] = Field(default=None, alias="finiteBillingCycleDetails")
    name: Optional[StrictStr] = Field(default=None, description="Identifier. Response only. Resource name of the product. It will have the format of \"partners/{partner_id}/products/{product_id}\"")
    price_configs: Optional[List[GoogleCloudPaymentsResellerSubscriptionV1ProductPriceConfig]] = Field(default=None, description="Output only. Price configs for the product in the available regions.", alias="priceConfigs")
    product_type: Optional[StrictStr] = Field(default=None, description="Output only. Output Only. Specifies the type of the product.", alias="productType")
    region_codes: Optional[List[StrictStr]] = Field(default=None, description="Output only. 2-letter ISO region code where the product is available in. Ex. \"US\" Please refers to: https://en.wikipedia.org/wiki/ISO_3166-1", alias="regionCodes")
    subscription_billing_cycle_duration: Optional[GoogleCloudPaymentsResellerSubscriptionV1Duration] = Field(default=None, alias="subscriptionBillingCycleDuration")
    titles: Optional[List[GoogleTypeLocalizedText]] = Field(default=None, description="Output only. Localized human readable name of the product.")
    __properties: ClassVar[List[str]] = ["bundleDetails", "finiteBillingCycleDetails", "name", "priceConfigs", "productType", "regionCodes", "subscriptionBillingCycleDuration", "titles"]

    @field_validator('product_type')
    def product_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['PRODUCT_TYPE_UNSPECIFIED', 'PRODUCT_TYPE_SUBSCRIPTION', 'PRODUCT_TYPE_BUNDLE_SUBSCRIPTION']):
            raise ValueError("must be one of enum values ('PRODUCT_TYPE_UNSPECIFIED', 'PRODUCT_TYPE_SUBSCRIPTION', 'PRODUCT_TYPE_BUNDLE_SUBSCRIPTION')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudPaymentsResellerSubscriptionV1Product from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "price_configs",
            "product_type",
            "region_codes",
            "titles",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of bundle_details
        if self.bundle_details:
            _dict['bundleDetails'] = self.bundle_details.to_dict()
        # override the default output from pydantic by calling `to_dict()` of finite_billing_cycle_details
        if self.finite_billing_cycle_details:
            _dict['finiteBillingCycleDetails'] = self.finite_billing_cycle_details.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in price_configs (list)
        _items = []
        if self.price_configs:
            for _item_price_configs in self.price_configs:
                if _item_price_configs:
                    _items.append(_item_price_configs.to_dict())
            _dict['priceConfigs'] = _items
        # override the default output from pydantic by calling `to_dict()` of subscription_billing_cycle_duration
        if self.subscription_billing_cycle_duration:
            _dict['subscriptionBillingCycleDuration'] = self.subscription_billing_cycle_duration.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in titles (list)
        _items = []
        if self.titles:
            for _item_titles in self.titles:
                if _item_titles:
                    _items.append(_item_titles.to_dict())
            _dict['titles'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudPaymentsResellerSubscriptionV1Product from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "bundleDetails": ProductBundleDetails.from_dict(obj["bundleDetails"]) if obj.get("bundleDetails") is not None else None,
            "finiteBillingCycleDetails": GoogleCloudPaymentsResellerSubscriptionV1FiniteBillingCycleDetails.from_dict(obj["finiteBillingCycleDetails"]) if obj.get("finiteBillingCycleDetails") is not None else None,
            "name": obj.get("name"),
            "priceConfigs": [GoogleCloudPaymentsResellerSubscriptionV1ProductPriceConfig.from_dict(_item) for _item in obj["priceConfigs"]] if obj.get("priceConfigs") is not None else None,
            "productType": obj.get("productType"),
            "regionCodes": obj.get("regionCodes"),
            "subscriptionBillingCycleDuration": GoogleCloudPaymentsResellerSubscriptionV1Duration.from_dict(obj["subscriptionBillingCycleDuration"]) if obj.get("subscriptionBillingCycleDuration") is not None else None,
            "titles": [GoogleTypeLocalizedText.from_dict(_item) for _item in obj["titles"]] if obj.get("titles") is not None else None
        })
        return _obj



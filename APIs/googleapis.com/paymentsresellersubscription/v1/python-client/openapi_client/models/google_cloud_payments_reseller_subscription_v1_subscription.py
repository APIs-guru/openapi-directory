# coding: utf-8

"""
    Payments Reseller Subscription API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_cloud_payments_reseller_subscription_v1_location import GoogleCloudPaymentsResellerSubscriptionV1Location
from openapi_client.models.google_cloud_payments_reseller_subscription_v1_subscription_cancellation_details import GoogleCloudPaymentsResellerSubscriptionV1SubscriptionCancellationDetails
from openapi_client.models.google_cloud_payments_reseller_subscription_v1_subscription_line_item import GoogleCloudPaymentsResellerSubscriptionV1SubscriptionLineItem
from openapi_client.models.google_cloud_payments_reseller_subscription_v1_subscription_promotion_spec import GoogleCloudPaymentsResellerSubscriptionV1SubscriptionPromotionSpec
from openapi_client.models.google_cloud_payments_reseller_subscription_v1_subscription_upgrade_downgrade_details import GoogleCloudPaymentsResellerSubscriptionV1SubscriptionUpgradeDowngradeDetails
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudPaymentsResellerSubscriptionV1Subscription(BaseModel):
    """
    A subscription serves as a central billing entity between an external partner and Google. The underlying Google services rely on the subscription state to grant or revoke the user's service entitlement. It's important to note that the subscription state may not always perfectly align with the user's service entitlement. For example, some Google services may continue providing access to the user until the current billing cycle ends, even if the subscription has been immediately canceled. However, other services may not do the same. To fully understand the specific details, please consult the relevant contract or product policy.
    """ # noqa: E501
    cancellation_details: Optional[GoogleCloudPaymentsResellerSubscriptionV1SubscriptionCancellationDetails] = Field(default=None, alias="cancellationDetails")
    create_time: Optional[StrictStr] = Field(default=None, description="Output only. System generated timestamp when the subscription is created. UTC timezone.", alias="createTime")
    cycle_end_time: Optional[StrictStr] = Field(default=None, description="Output only. The time at which the subscription is expected to be extended, in ISO 8061 format. UTC timezone. For example: \"2019-08-31T17:28:54.564Z\"", alias="cycleEndTime")
    end_user_entitled: Optional[StrictBool] = Field(default=None, description="Output only. Indicates if the subscription is entitled to the end user.", alias="endUserEntitled")
    free_trial_end_time: Optional[StrictStr] = Field(default=None, description="Output only. End of the free trial period, in ISO 8061 format. For example, \"2019-08-31T17:28:54.564Z\". It will be set the same as createTime if no free trial promotion is specified.", alias="freeTrialEndTime")
    line_items: Optional[List[GoogleCloudPaymentsResellerSubscriptionV1SubscriptionLineItem]] = Field(default=None, description="Required. The line items of the subscription.", alias="lineItems")
    name: Optional[StrictStr] = Field(default=None, description="Identifier. Resource name of the subscription. It will have the format of \"partners/{partner_id}/subscriptions/{subscription_id}\". This is available for authorizeAddon, but otherwise is response only.")
    partner_user_token: Optional[StrictStr] = Field(default=None, description="Required. Identifier of the end-user in partnerâ€™s system. The value is restricted to 63 ASCII characters at the maximum.", alias="partnerUserToken")
    processing_state: Optional[StrictStr] = Field(default=None, description="Output only. Describes the processing state of the subscription. See more details at [the lifecycle of a subscription](/payments/reseller/subscription/reference/index/Receive.Notifications#payments-subscription-lifecycle).", alias="processingState")
    products: Optional[List[StrictStr]] = Field(default=None, description="Optional. Deprecated: consider using `line_items` as the input. Required. Resource name that identifies the purchased products. The format will be 'partners/{partner_id}/products/{product_id}'.")
    promotion_specs: Optional[List[GoogleCloudPaymentsResellerSubscriptionV1SubscriptionPromotionSpec]] = Field(default=None, description="Optional. Subscription-level promotions. Only free trial is supported on this level. It determines the first renewal time of the subscription to be the end of the free trial period. Specify the promotion resource name only when used as input.", alias="promotionSpecs")
    promotions: Optional[List[StrictStr]] = Field(default=None, description="Optional. Deprecated: consider using the top-level `promotion_specs` as the input. Optional. Resource name that identifies one or more promotions that can be applied on the product. A typical promotion for a subscription is Free trial. The format will be 'partners/{partner_id}/promotions/{promotion_id}'.")
    redirect_uri: Optional[StrictStr] = Field(default=None, description="Output only. The place where partners should redirect the end-user to after creation. This field might also be populated when creation failed. However, Partners should always prepare a default URL to redirect the user in case this field is empty.", alias="redirectUri")
    renewal_time: Optional[StrictStr] = Field(default=None, description="Output only. The time at which the subscription is expected to be renewed by Google - a new charge will be incurred and the service entitlement will be renewed. A non-immediate cancellation will take place at this time too, before which, the service entitlement for the end user will remain valid. UTC timezone in ISO 8061 format. For example: \"2019-08-31T17:28:54.564Z\"", alias="renewalTime")
    service_location: Optional[GoogleCloudPaymentsResellerSubscriptionV1Location] = Field(default=None, alias="serviceLocation")
    state: Optional[StrictStr] = Field(default=None, description="Output only. Describes the state of the subscription. See more details at [the lifecycle of a subscription](/payments/reseller/subscription/reference/index/Receive.Notifications#payments-subscription-lifecycle).")
    update_time: Optional[StrictStr] = Field(default=None, description="Output only. System generated timestamp when the subscription is most recently updated. UTC timezone.", alias="updateTime")
    upgrade_downgrade_details: Optional[GoogleCloudPaymentsResellerSubscriptionV1SubscriptionUpgradeDowngradeDetails] = Field(default=None, alias="upgradeDowngradeDetails")
    __properties: ClassVar[List[str]] = ["cancellationDetails", "createTime", "cycleEndTime", "endUserEntitled", "freeTrialEndTime", "lineItems", "name", "partnerUserToken", "processingState", "products", "promotionSpecs", "promotions", "redirectUri", "renewalTime", "serviceLocation", "state", "updateTime", "upgradeDowngradeDetails"]

    @field_validator('processing_state')
    def processing_state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['PROCESSING_STATE_UNSPECIFIED', 'PROCESSING_STATE_CANCELLING', 'PROCESSING_STATE_RECURRING']):
            raise ValueError("must be one of enum values ('PROCESSING_STATE_UNSPECIFIED', 'PROCESSING_STATE_CANCELLING', 'PROCESSING_STATE_RECURRING')")
        return value

    @field_validator('state')
    def state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['STATE_UNSPECIFIED', 'STATE_CREATED', 'STATE_ACTIVE', 'STATE_CANCELLED', 'STATE_IN_GRACE_PERIOD', 'STATE_CANCEL_AT_END_OF_CYCLE', 'STATE_SUSPENDED']):
            raise ValueError("must be one of enum values ('STATE_UNSPECIFIED', 'STATE_CREATED', 'STATE_ACTIVE', 'STATE_CANCELLED', 'STATE_IN_GRACE_PERIOD', 'STATE_CANCEL_AT_END_OF_CYCLE', 'STATE_SUSPENDED')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudPaymentsResellerSubscriptionV1Subscription from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "create_time",
            "cycle_end_time",
            "end_user_entitled",
            "free_trial_end_time",
            "processing_state",
            "redirect_uri",
            "renewal_time",
            "state",
            "update_time",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of cancellation_details
        if self.cancellation_details:
            _dict['cancellationDetails'] = self.cancellation_details.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in line_items (list)
        _items = []
        if self.line_items:
            for _item_line_items in self.line_items:
                if _item_line_items:
                    _items.append(_item_line_items.to_dict())
            _dict['lineItems'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in promotion_specs (list)
        _items = []
        if self.promotion_specs:
            for _item_promotion_specs in self.promotion_specs:
                if _item_promotion_specs:
                    _items.append(_item_promotion_specs.to_dict())
            _dict['promotionSpecs'] = _items
        # override the default output from pydantic by calling `to_dict()` of service_location
        if self.service_location:
            _dict['serviceLocation'] = self.service_location.to_dict()
        # override the default output from pydantic by calling `to_dict()` of upgrade_downgrade_details
        if self.upgrade_downgrade_details:
            _dict['upgradeDowngradeDetails'] = self.upgrade_downgrade_details.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudPaymentsResellerSubscriptionV1Subscription from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "cancellationDetails": GoogleCloudPaymentsResellerSubscriptionV1SubscriptionCancellationDetails.from_dict(obj["cancellationDetails"]) if obj.get("cancellationDetails") is not None else None,
            "createTime": obj.get("createTime"),
            "cycleEndTime": obj.get("cycleEndTime"),
            "endUserEntitled": obj.get("endUserEntitled"),
            "freeTrialEndTime": obj.get("freeTrialEndTime"),
            "lineItems": [GoogleCloudPaymentsResellerSubscriptionV1SubscriptionLineItem.from_dict(_item) for _item in obj["lineItems"]] if obj.get("lineItems") is not None else None,
            "name": obj.get("name"),
            "partnerUserToken": obj.get("partnerUserToken"),
            "processingState": obj.get("processingState"),
            "products": obj.get("products"),
            "promotionSpecs": [GoogleCloudPaymentsResellerSubscriptionV1SubscriptionPromotionSpec.from_dict(_item) for _item in obj["promotionSpecs"]] if obj.get("promotionSpecs") is not None else None,
            "promotions": obj.get("promotions"),
            "redirectUri": obj.get("redirectUri"),
            "renewalTime": obj.get("renewalTime"),
            "serviceLocation": GoogleCloudPaymentsResellerSubscriptionV1Location.from_dict(obj["serviceLocation"]) if obj.get("serviceLocation") is not None else None,
            "state": obj.get("state"),
            "updateTime": obj.get("updateTime"),
            "upgradeDowngradeDetails": GoogleCloudPaymentsResellerSubscriptionV1SubscriptionUpgradeDowngradeDetails.from_dict(obj["upgradeDowngradeDetails"]) if obj.get("upgradeDowngradeDetails") is not None else None
        })
        return _obj



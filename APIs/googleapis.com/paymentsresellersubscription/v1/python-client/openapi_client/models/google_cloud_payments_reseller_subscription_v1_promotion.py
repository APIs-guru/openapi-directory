# coding: utf-8

"""
    Payments Reseller Subscription API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_cloud_payments_reseller_subscription_v1_duration import GoogleCloudPaymentsResellerSubscriptionV1Duration
from openapi_client.models.google_cloud_payments_reseller_subscription_v1_promotion_introductory_pricing_details import GoogleCloudPaymentsResellerSubscriptionV1PromotionIntroductoryPricingDetails
from openapi_client.models.google_type_localized_text import GoogleTypeLocalizedText
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudPaymentsResellerSubscriptionV1Promotion(BaseModel):
    """
    A Promotion resource that defines a promotion for a subscription that can be resold.
    """ # noqa: E501
    applicable_products: Optional[List[StrictStr]] = Field(default=None, description="Output only. The product ids this promotion can be applied to.", alias="applicableProducts")
    end_time: Optional[StrictStr] = Field(default=None, description="Optional. Specifies the end time (exclusive) of the period that the promotion is available in. If unset, the promotion is available indefinitely.", alias="endTime")
    free_trial_duration: Optional[GoogleCloudPaymentsResellerSubscriptionV1Duration] = Field(default=None, alias="freeTrialDuration")
    introductory_pricing_details: Optional[GoogleCloudPaymentsResellerSubscriptionV1PromotionIntroductoryPricingDetails] = Field(default=None, alias="introductoryPricingDetails")
    name: Optional[StrictStr] = Field(default=None, description="Identifier. Response only. Resource name of the subscription promotion. It will have the format of \"partners/{partner_id}/promotion/{promotion_id}\"")
    promotion_type: Optional[StrictStr] = Field(default=None, description="Output only. Output Only. Specifies the type of the promotion.", alias="promotionType")
    region_codes: Optional[List[StrictStr]] = Field(default=None, description="Output only. 2-letter ISO region code where the promotion is available in. Ex. \"US\" Please refers to: https://en.wikipedia.org/wiki/ISO_3166-1", alias="regionCodes")
    start_time: Optional[StrictStr] = Field(default=None, description="Optional. Specifies the start time (inclusive) of the period that the promotion is available in.", alias="startTime")
    titles: Optional[List[GoogleTypeLocalizedText]] = Field(default=None, description="Output only. Localized human readable name of the promotion.")
    __properties: ClassVar[List[str]] = ["applicableProducts", "endTime", "freeTrialDuration", "introductoryPricingDetails", "name", "promotionType", "regionCodes", "startTime", "titles"]

    @field_validator('promotion_type')
    def promotion_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['PROMOTION_TYPE_UNSPECIFIED', 'PROMOTION_TYPE_FREE_TRIAL', 'PROMOTION_TYPE_INTRODUCTORY_PRICING']):
            raise ValueError("must be one of enum values ('PROMOTION_TYPE_UNSPECIFIED', 'PROMOTION_TYPE_FREE_TRIAL', 'PROMOTION_TYPE_INTRODUCTORY_PRICING')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudPaymentsResellerSubscriptionV1Promotion from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "applicable_products",
            "promotion_type",
            "region_codes",
            "titles",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of free_trial_duration
        if self.free_trial_duration:
            _dict['freeTrialDuration'] = self.free_trial_duration.to_dict()
        # override the default output from pydantic by calling `to_dict()` of introductory_pricing_details
        if self.introductory_pricing_details:
            _dict['introductoryPricingDetails'] = self.introductory_pricing_details.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in titles (list)
        _items = []
        if self.titles:
            for _item_titles in self.titles:
                if _item_titles:
                    _items.append(_item_titles.to_dict())
            _dict['titles'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudPaymentsResellerSubscriptionV1Promotion from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "applicableProducts": obj.get("applicableProducts"),
            "endTime": obj.get("endTime"),
            "freeTrialDuration": GoogleCloudPaymentsResellerSubscriptionV1Duration.from_dict(obj["freeTrialDuration"]) if obj.get("freeTrialDuration") is not None else None,
            "introductoryPricingDetails": GoogleCloudPaymentsResellerSubscriptionV1PromotionIntroductoryPricingDetails.from_dict(obj["introductoryPricingDetails"]) if obj.get("introductoryPricingDetails") is not None else None,
            "name": obj.get("name"),
            "promotionType": obj.get("promotionType"),
            "regionCodes": obj.get("regionCodes"),
            "startTime": obj.get("startTime"),
            "titles": [GoogleTypeLocalizedText.from_dict(_item) for _item in obj["titles"]] if obj.get("titles") is not None else None
        })
        return _obj



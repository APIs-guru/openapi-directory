# coding: utf-8

"""
    Service Broker

    The Google Cloud Platform Service Broker API provides Google hosted implementation of the Open Service Broker API (https://www.openservicebrokerapi.org/). 

    The version of the OpenAPI document: v1beta1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudServicebrokerV1beta1Binding(BaseModel):
    """
    Describes the binding.
    """ # noqa: E501
    bind_resource: Optional[Dict[str, Any]] = Field(default=None, description="A JSON object that contains data for platform resources associated with the binding to be created.")
    binding_id: Optional[StrictStr] = Field(default=None, description="The id of the binding. Must be unique within GCP project. Maximum length is 64, GUID recommended. Required.")
    create_time: Optional[StrictStr] = Field(default=None, description="Output only. Timestamp for when the binding was created.", alias="createTime")
    deployment_name: Optional[StrictStr] = Field(default=None, description="Output only. String containing the Deployment Manager deployment name that was created for this binding,", alias="deploymentName")
    parameters: Optional[Dict[str, Any]] = Field(default=None, description="Configuration options for the service binding.")
    plan_id: Optional[StrictStr] = Field(default=None, description="The ID of the plan. See `Service` and `Plan` resources for details. Maximum length is 64, GUID recommended. Required.")
    resource_name: Optional[StrictStr] = Field(default=None, description="Output only. The resource name of the binding, e.g. projects/project_id/brokers/broker_id/service_instances/instance_id/bindings/binding_id.", alias="resourceName")
    service_id: Optional[StrictStr] = Field(default=None, description="The id of the service. Must be a valid identifier of a service contained in the list from a `ListServices()` call. Maximum length is 64, GUID recommended. Required.")
    __properties: ClassVar[List[str]] = ["bind_resource", "binding_id", "createTime", "deploymentName", "parameters", "plan_id", "resourceName", "service_id"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudServicebrokerV1beta1Binding from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudServicebrokerV1beta1Binding from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "bind_resource": obj.get("bind_resource"),
            "binding_id": obj.get("binding_id"),
            "createTime": obj.get("createTime"),
            "deploymentName": obj.get("deploymentName"),
            "parameters": obj.get("parameters"),
            "plan_id": obj.get("plan_id"),
            "resourceName": obj.get("resourceName"),
            "service_id": obj.get("service_id")
        })
        return _obj



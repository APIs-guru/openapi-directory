# coding: utf-8

"""
    Service Broker

    The Google Cloud Platform Service Broker API provides Google hosted implementation of the Open Service Broker API (https://www.openservicebrokerapi.org/). 

    The version of the OpenAPI document: v1beta1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudServicebrokerV1beta1GetBindingResponse(BaseModel):
    """
    Response for the `GetBinding()` method.
    """ # noqa: E501
    credentials: Optional[Dict[str, Any]] = Field(default=None, description="Credentials to use the binding.")
    deployment_name: Optional[StrictStr] = Field(default=None, description="String containing the Deployment Manager deployment name that was created for this binding,", alias="deploymentName")
    description: Optional[StrictStr] = Field(default=None, description="Used to communicate description of the response. Usually for non-standard error codes. https://github.com/openservicebrokerapi/servicebroker/blob/master/spec.md#service-broker-errors")
    resource_name: Optional[StrictStr] = Field(default=None, description="Output only. The resource name of the binding, e.g. projects/project_id/brokers/broker_id/service_instances/instance_id/bindings/binding_id.", alias="resourceName")
    route_service_url: Optional[StrictStr] = Field(default=None, description="A URL to which the platform may proxy requests for the address sent with bind_resource.route")
    syslog_drain_url: Optional[StrictStr] = Field(default=None, description="From where to read system logs.")
    volume_mounts: Optional[List[Dict[str, Any]]] = Field(default=None, description="An array of configurations for mounting volumes.")
    __properties: ClassVar[List[str]] = ["credentials", "deploymentName", "description", "resourceName", "route_service_url", "syslog_drain_url", "volume_mounts"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudServicebrokerV1beta1GetBindingResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudServicebrokerV1beta1GetBindingResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "credentials": obj.get("credentials"),
            "deploymentName": obj.get("deploymentName"),
            "description": obj.get("description"),
            "resourceName": obj.get("resourceName"),
            "route_service_url": obj.get("route_service_url"),
            "syslog_drain_url": obj.get("syslog_drain_url"),
            "volume_mounts": obj.get("volume_mounts")
        })
        return _obj



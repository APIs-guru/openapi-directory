# coding: utf-8

"""
    Service Broker

    The Google Cloud Platform Service Broker API provides Google hosted implementation of the Open Service Broker API (https://www.openservicebrokerapi.org/). 

    The version of the OpenAPI document: v1beta1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_cloud_servicebroker_v1beta1_dashboard_client import GoogleCloudServicebrokerV1beta1DashboardClient
from openapi_client.models.google_cloud_servicebroker_v1beta1_plan import GoogleCloudServicebrokerV1beta1Plan
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudServicebrokerV1beta1Service(BaseModel):
    """
    The resource model mostly follows the Open Service Broker API, as described here: https://github.com/openservicebrokerapi/servicebroker/blob/master/_spec.md Though due to Google Specifics it has additional optional fields.
    """ # noqa: E501
    bindable: Optional[StrictBool] = Field(default=None, description="Specifies whether instances of the service can be bound to applications. Required.")
    binding_retrievable: Optional[StrictBool] = Field(default=None, description="Whether the service provides an endpoint to get service bindings.")
    bindings_retrievable: Optional[StrictBool] = Field(default=None, description="Whether the service provides an endpoint to get service bindings.")
    dashboard_client: Optional[GoogleCloudServicebrokerV1beta1DashboardClient] = None
    description: Optional[StrictStr] = Field(default=None, description="Textual description of the service. Required.")
    id: Optional[StrictStr] = Field(default=None, description="ID is a globally unique identifier used to uniquely identify the service. ID is an opaque string.")
    instances_retrievable: Optional[StrictBool] = Field(default=None, description="Whether the service provides an endpoint to get service instances.")
    metadata: Optional[Dict[str, Any]] = Field(default=None, description="A list of metadata for a service offering. Metadata is an arbitrary JSON object.")
    name: Optional[StrictStr] = Field(default=None, description="User friendly service name. Name must match [a-z0-9]+ regexp. The name must be globally unique within GCP project. Note, which is different from (\"This must be globally unique within a platform marketplace\"). Required.")
    plan_updateable: Optional[StrictBool] = Field(default=None, description="Whether the service supports upgrade/downgrade for some plans.")
    plans: Optional[List[GoogleCloudServicebrokerV1beta1Plan]] = Field(default=None, description="A list of plans for this service. At least one plan is required.")
    tags: Optional[List[StrictStr]] = Field(default=None, description="Tags provide a flexible mechanism to expose a classification, attribute, or base technology of a service.")
    __properties: ClassVar[List[str]] = ["bindable", "binding_retrievable", "bindings_retrievable", "dashboard_client", "description", "id", "instances_retrievable", "metadata", "name", "plan_updateable", "plans", "tags"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudServicebrokerV1beta1Service from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of dashboard_client
        if self.dashboard_client:
            _dict['dashboard_client'] = self.dashboard_client.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in plans (list)
        _items = []
        if self.plans:
            for _item_plans in self.plans:
                if _item_plans:
                    _items.append(_item_plans.to_dict())
            _dict['plans'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudServicebrokerV1beta1Service from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "bindable": obj.get("bindable"),
            "binding_retrievable": obj.get("binding_retrievable"),
            "bindings_retrievable": obj.get("bindings_retrievable"),
            "dashboard_client": GoogleCloudServicebrokerV1beta1DashboardClient.from_dict(obj["dashboard_client"]) if obj.get("dashboard_client") is not None else None,
            "description": obj.get("description"),
            "id": obj.get("id"),
            "instances_retrievable": obj.get("instances_retrievable"),
            "metadata": obj.get("metadata"),
            "name": obj.get("name"),
            "plan_updateable": obj.get("plan_updateable"),
            "plans": [GoogleCloudServicebrokerV1beta1Plan.from_dict(_item) for _item in obj["plans"]] if obj.get("plans") is not None else None,
            "tags": obj.get("tags")
        })
        return _obj



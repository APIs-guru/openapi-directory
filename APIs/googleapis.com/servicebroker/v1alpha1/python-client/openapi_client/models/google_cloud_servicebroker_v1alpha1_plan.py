# coding: utf-8

"""
    Service Broker

    The Google Cloud Platform Service Broker API provides Google hosted implementation of the Open Service Broker API (https://www.openservicebrokerapi.org/). 

    The version of the OpenAPI document: v1alpha1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudServicebrokerV1alpha1Plan(BaseModel):
    """
    Plan message describes a Service Plan.
    """ # noqa: E501
    bindable: Optional[StrictBool] = Field(default=None, description="Specifies whether instances of the service can be bound to applications. If not specified, `Service.bindable` will be presumed.")
    description: Optional[StrictStr] = Field(default=None, description="Textual description of the plan. Optional.")
    free: Optional[StrictBool] = Field(default=None, description="Whether the service is free.")
    id: Optional[StrictStr] = Field(default=None, description="ID is a globally unique identifier used to uniquely identify the plan. User must make no presumption about the format of this field.")
    metadata: Optional[Dict[str, Any]] = Field(default=None, description="A list of metadata for a service offering. Metadata is an arbitrary JSON object.")
    name: Optional[StrictStr] = Field(default=None, description="User friendly name of the plan. The name must be globally unique within GCP project. Note, which is different from (\"This must be globally unique within a platform marketplace\").")
    schemas: Optional[Dict[str, Any]] = Field(default=None, description="Schema definitions for service instances and bindings for the plan.")
    __properties: ClassVar[List[str]] = ["bindable", "description", "free", "id", "metadata", "name", "schemas"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudServicebrokerV1alpha1Plan from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudServicebrokerV1alpha1Plan from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "bindable": obj.get("bindable"),
            "description": obj.get("description"),
            "free": obj.get("free"),
            "id": obj.get("id"),
            "metadata": obj.get("metadata"),
            "name": obj.get("name"),
            "schemas": obj.get("schemas")
        })
        return _obj



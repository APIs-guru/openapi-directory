# coding: utf-8

"""
    Service Broker

    The Google Cloud Platform Service Broker API provides Google hosted implementation of the Open Service Broker API (https://www.openservicebrokerapi.org/). 

    The version of the OpenAPI document: v1alpha1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudServicebrokerV1alpha1ServiceInstance(BaseModel):
    """
    Message describing inputs to Provision and Update Service instance requests.
    """ # noqa: E501
    context: Optional[Dict[str, Any]] = Field(default=None, description="Platform specific contextual information under which the service instance is to be provisioned. This replaces organization_guid and space_guid. But can also contain anything. Currently only used for logging context information.")
    create_time: Optional[StrictStr] = Field(default=None, description="Output only. Timestamp for when the instance was created.", alias="createTime")
    deployment_name: Optional[StrictStr] = Field(default=None, description="Output only. Name of the Deployment Manager deployment used for provisioning of this service instance.", alias="deploymentName")
    instance_id: Optional[StrictStr] = Field(default=None, description="The id of the service instance. Must be unique within GCP project. Maximum length is 64, GUID recommended. Required.")
    organization_guid: Optional[StrictStr] = Field(default=None, description="The platform GUID for the organization under which the service is to be provisioned. Required.")
    parameters: Optional[Dict[str, Any]] = Field(default=None, description="Configuration options for the service instance. Parameters is JSON object serialized to string.")
    plan_id: Optional[StrictStr] = Field(default=None, description="The ID of the plan. See `Service` and `Plan` resources for details. Maximum length is 64, GUID recommended. Required.")
    previous_values: Optional[Dict[str, Any]] = Field(default=None, description="Used only in UpdateServiceInstance request to optionally specify previous fields.")
    resource_name: Optional[StrictStr] = Field(default=None, description="Output only. The resource name of the instance, e.g. projects/project_id/brokers/broker_id/service_instances/instance_id", alias="resourceName")
    service_id: Optional[StrictStr] = Field(default=None, description="The id of the service. Must be a valid identifier of a service contained in the list from a `ListServices()` call. Maximum length is 64, GUID recommended. Required.")
    space_guid: Optional[StrictStr] = Field(default=None, description="The identifier for the project space within the platform organization. Required.")
    __properties: ClassVar[List[str]] = ["context", "createTime", "deploymentName", "instance_id", "organization_guid", "parameters", "plan_id", "previous_values", "resourceName", "service_id", "space_guid"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudServicebrokerV1alpha1ServiceInstance from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudServicebrokerV1alpha1ServiceInstance from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "context": obj.get("context"),
            "createTime": obj.get("createTime"),
            "deploymentName": obj.get("deploymentName"),
            "instance_id": obj.get("instance_id"),
            "organization_guid": obj.get("organization_guid"),
            "parameters": obj.get("parameters"),
            "plan_id": obj.get("plan_id"),
            "previous_values": obj.get("previous_values"),
            "resourceName": obj.get("resourceName"),
            "service_id": obj.get("service_id"),
            "space_guid": obj.get("space_guid")
        })
        return _obj



# coding: utf-8

"""
    Service Broker

    The Google Cloud Platform Service Broker API provides Google hosted implementation of the Open Service Broker API (https://www.openservicebrokerapi.org/). 

    The version of the OpenAPI document: v1alpha1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from pydantic import Field, StrictBool, StrictInt, StrictStr, field_validator
from typing import Optional
from typing_extensions import Annotated
from openapi_client.models.google_cloud_servicebroker_v1alpha1_binding import GoogleCloudServicebrokerV1alpha1Binding
from openapi_client.models.google_cloud_servicebroker_v1alpha1_create_binding_response import GoogleCloudServicebrokerV1alpha1CreateBindingResponse
from openapi_client.models.google_cloud_servicebroker_v1alpha1_create_service_instance_response import GoogleCloudServicebrokerV1alpha1CreateServiceInstanceResponse
from openapi_client.models.google_cloud_servicebroker_v1alpha1_delete_service_instance_response import GoogleCloudServicebrokerV1alpha1DeleteServiceInstanceResponse
from openapi_client.models.google_cloud_servicebroker_v1alpha1_get_binding_response import GoogleCloudServicebrokerV1alpha1GetBindingResponse
from openapi_client.models.google_cloud_servicebroker_v1alpha1_list_bindings_response import GoogleCloudServicebrokerV1alpha1ListBindingsResponse
from openapi_client.models.google_cloud_servicebroker_v1alpha1_list_catalog_response import GoogleCloudServicebrokerV1alpha1ListCatalogResponse
from openapi_client.models.google_cloud_servicebroker_v1alpha1_list_service_instances_response import GoogleCloudServicebrokerV1alpha1ListServiceInstancesResponse
from openapi_client.models.google_cloud_servicebroker_v1alpha1_operation import GoogleCloudServicebrokerV1alpha1Operation
from openapi_client.models.google_cloud_servicebroker_v1alpha1_service_instance import GoogleCloudServicebrokerV1alpha1ServiceInstance
from openapi_client.models.google_cloud_servicebroker_v1alpha1_update_service_instance_response import GoogleCloudServicebrokerV1alpha1UpdateServiceInstanceResponse

from openapi_client.api_client import ApiClient, RequestSerialized
from openapi_client.api_response import ApiResponse
from openapi_client.rest import RESTResponseType


class ProjectsApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def servicebroker_projects_brokers_instances_service_bindings_list(
        self,
        parent: Annotated[StrictStr, Field(description="Parent must match `projects/[PROJECT_ID]/brokers/[BROKER_ID]/instances/[INSTANCE_ID]`.")],
        upload_protocol: Annotated[Optional[StrictStr], Field(description="Upload protocol for media (e.g. \"raw\", \"multipart\").")] = None,
        quota_user: Annotated[Optional[StrictStr], Field(description="Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.")] = None,
        pretty_print: Annotated[Optional[StrictBool], Field(description="Returns response with indentations and line breaks.")] = None,
        upload_type: Annotated[Optional[StrictStr], Field(description="Legacy upload protocol for media (e.g. \"media\", \"multipart\").")] = None,
        fields: Annotated[Optional[StrictStr], Field(description="Selector specifying which fields to include in a partial response.")] = None,
        param_callback: Annotated[Optional[StrictStr], Field(description="JSONP")] = None,
        oauth_token: Annotated[Optional[StrictStr], Field(description="OAuth 2.0 token for the current user.")] = None,
        xgafv: Annotated[Optional[StrictStr], Field(description="V1 error format.")] = None,
        alt: Annotated[Optional[StrictStr], Field(description="Data format for response.")] = None,
        key: Annotated[Optional[StrictStr], Field(description="API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.")] = None,
        access_token: Annotated[Optional[StrictStr], Field(description="OAuth access token.")] = None,
        page_size: Annotated[Optional[StrictInt], Field(description="Specifies the number of results to return per page. If there are fewer elements than the specified number, returns all elements. Optional. If unset or 0, all the results will be returned.")] = None,
        page_token: Annotated[Optional[StrictStr], Field(description="Specifies a page token to use. Set `pageToken` to a `nextPageToken` returned by a previous list request to get the next page of results.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> GoogleCloudServicebrokerV1alpha1ListBindingsResponse:
        """servicebroker_projects_brokers_instances_service_bindings_list

        Lists all the bindings in the instance

        :param parent: Parent must match `projects/[PROJECT_ID]/brokers/[BROKER_ID]/instances/[INSTANCE_ID]`. (required)
        :type parent: str
        :param upload_protocol: Upload protocol for media (e.g. \"raw\", \"multipart\").
        :type upload_protocol: str
        :param quota_user: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
        :type quota_user: str
        :param pretty_print: Returns response with indentations and line breaks.
        :type pretty_print: bool
        :param upload_type: Legacy upload protocol for media (e.g. \"media\", \"multipart\").
        :type upload_type: str
        :param fields: Selector specifying which fields to include in a partial response.
        :type fields: str
        :param param_callback: JSONP
        :type param_callback: str
        :param oauth_token: OAuth 2.0 token for the current user.
        :type oauth_token: str
        :param xgafv: V1 error format.
        :type xgafv: str
        :param alt: Data format for response.
        :type alt: str
        :param key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
        :type key: str
        :param access_token: OAuth access token.
        :type access_token: str
        :param page_size: Specifies the number of results to return per page. If there are fewer elements than the specified number, returns all elements. Optional. If unset or 0, all the results will be returned.
        :type page_size: int
        :param page_token: Specifies a page token to use. Set `pageToken` to a `nextPageToken` returned by a previous list request to get the next page of results.
        :type page_token: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._servicebroker_projects_brokers_instances_service_bindings_list_serialize(
            parent=parent,
            upload_protocol=upload_protocol,
            quota_user=quota_user,
            pretty_print=pretty_print,
            upload_type=upload_type,
            fields=fields,
            param_callback=param_callback,
            oauth_token=oauth_token,
            xgafv=xgafv,
            alt=alt,
            key=key,
            access_token=access_token,
            page_size=page_size,
            page_token=page_token,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GoogleCloudServicebrokerV1alpha1ListBindingsResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def servicebroker_projects_brokers_instances_service_bindings_list_with_http_info(
        self,
        parent: Annotated[StrictStr, Field(description="Parent must match `projects/[PROJECT_ID]/brokers/[BROKER_ID]/instances/[INSTANCE_ID]`.")],
        upload_protocol: Annotated[Optional[StrictStr], Field(description="Upload protocol for media (e.g. \"raw\", \"multipart\").")] = None,
        quota_user: Annotated[Optional[StrictStr], Field(description="Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.")] = None,
        pretty_print: Annotated[Optional[StrictBool], Field(description="Returns response with indentations and line breaks.")] = None,
        upload_type: Annotated[Optional[StrictStr], Field(description="Legacy upload protocol for media (e.g. \"media\", \"multipart\").")] = None,
        fields: Annotated[Optional[StrictStr], Field(description="Selector specifying which fields to include in a partial response.")] = None,
        param_callback: Annotated[Optional[StrictStr], Field(description="JSONP")] = None,
        oauth_token: Annotated[Optional[StrictStr], Field(description="OAuth 2.0 token for the current user.")] = None,
        xgafv: Annotated[Optional[StrictStr], Field(description="V1 error format.")] = None,
        alt: Annotated[Optional[StrictStr], Field(description="Data format for response.")] = None,
        key: Annotated[Optional[StrictStr], Field(description="API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.")] = None,
        access_token: Annotated[Optional[StrictStr], Field(description="OAuth access token.")] = None,
        page_size: Annotated[Optional[StrictInt], Field(description="Specifies the number of results to return per page. If there are fewer elements than the specified number, returns all elements. Optional. If unset or 0, all the results will be returned.")] = None,
        page_token: Annotated[Optional[StrictStr], Field(description="Specifies a page token to use. Set `pageToken` to a `nextPageToken` returned by a previous list request to get the next page of results.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[GoogleCloudServicebrokerV1alpha1ListBindingsResponse]:
        """servicebroker_projects_brokers_instances_service_bindings_list

        Lists all the bindings in the instance

        :param parent: Parent must match `projects/[PROJECT_ID]/brokers/[BROKER_ID]/instances/[INSTANCE_ID]`. (required)
        :type parent: str
        :param upload_protocol: Upload protocol for media (e.g. \"raw\", \"multipart\").
        :type upload_protocol: str
        :param quota_user: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
        :type quota_user: str
        :param pretty_print: Returns response with indentations and line breaks.
        :type pretty_print: bool
        :param upload_type: Legacy upload protocol for media (e.g. \"media\", \"multipart\").
        :type upload_type: str
        :param fields: Selector specifying which fields to include in a partial response.
        :type fields: str
        :param param_callback: JSONP
        :type param_callback: str
        :param oauth_token: OAuth 2.0 token for the current user.
        :type oauth_token: str
        :param xgafv: V1 error format.
        :type xgafv: str
        :param alt: Data format for response.
        :type alt: str
        :param key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
        :type key: str
        :param access_token: OAuth access token.
        :type access_token: str
        :param page_size: Specifies the number of results to return per page. If there are fewer elements than the specified number, returns all elements. Optional. If unset or 0, all the results will be returned.
        :type page_size: int
        :param page_token: Specifies a page token to use. Set `pageToken` to a `nextPageToken` returned by a previous list request to get the next page of results.
        :type page_token: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._servicebroker_projects_brokers_instances_service_bindings_list_serialize(
            parent=parent,
            upload_protocol=upload_protocol,
            quota_user=quota_user,
            pretty_print=pretty_print,
            upload_type=upload_type,
            fields=fields,
            param_callback=param_callback,
            oauth_token=oauth_token,
            xgafv=xgafv,
            alt=alt,
            key=key,
            access_token=access_token,
            page_size=page_size,
            page_token=page_token,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GoogleCloudServicebrokerV1alpha1ListBindingsResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def servicebroker_projects_brokers_instances_service_bindings_list_without_preload_content(
        self,
        parent: Annotated[StrictStr, Field(description="Parent must match `projects/[PROJECT_ID]/brokers/[BROKER_ID]/instances/[INSTANCE_ID]`.")],
        upload_protocol: Annotated[Optional[StrictStr], Field(description="Upload protocol for media (e.g. \"raw\", \"multipart\").")] = None,
        quota_user: Annotated[Optional[StrictStr], Field(description="Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.")] = None,
        pretty_print: Annotated[Optional[StrictBool], Field(description="Returns response with indentations and line breaks.")] = None,
        upload_type: Annotated[Optional[StrictStr], Field(description="Legacy upload protocol for media (e.g. \"media\", \"multipart\").")] = None,
        fields: Annotated[Optional[StrictStr], Field(description="Selector specifying which fields to include in a partial response.")] = None,
        param_callback: Annotated[Optional[StrictStr], Field(description="JSONP")] = None,
        oauth_token: Annotated[Optional[StrictStr], Field(description="OAuth 2.0 token for the current user.")] = None,
        xgafv: Annotated[Optional[StrictStr], Field(description="V1 error format.")] = None,
        alt: Annotated[Optional[StrictStr], Field(description="Data format for response.")] = None,
        key: Annotated[Optional[StrictStr], Field(description="API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.")] = None,
        access_token: Annotated[Optional[StrictStr], Field(description="OAuth access token.")] = None,
        page_size: Annotated[Optional[StrictInt], Field(description="Specifies the number of results to return per page. If there are fewer elements than the specified number, returns all elements. Optional. If unset or 0, all the results will be returned.")] = None,
        page_token: Annotated[Optional[StrictStr], Field(description="Specifies a page token to use. Set `pageToken` to a `nextPageToken` returned by a previous list request to get the next page of results.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """servicebroker_projects_brokers_instances_service_bindings_list

        Lists all the bindings in the instance

        :param parent: Parent must match `projects/[PROJECT_ID]/brokers/[BROKER_ID]/instances/[INSTANCE_ID]`. (required)
        :type parent: str
        :param upload_protocol: Upload protocol for media (e.g. \"raw\", \"multipart\").
        :type upload_protocol: str
        :param quota_user: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
        :type quota_user: str
        :param pretty_print: Returns response with indentations and line breaks.
        :type pretty_print: bool
        :param upload_type: Legacy upload protocol for media (e.g. \"media\", \"multipart\").
        :type upload_type: str
        :param fields: Selector specifying which fields to include in a partial response.
        :type fields: str
        :param param_callback: JSONP
        :type param_callback: str
        :param oauth_token: OAuth 2.0 token for the current user.
        :type oauth_token: str
        :param xgafv: V1 error format.
        :type xgafv: str
        :param alt: Data format for response.
        :type alt: str
        :param key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
        :type key: str
        :param access_token: OAuth access token.
        :type access_token: str
        :param page_size: Specifies the number of results to return per page. If there are fewer elements than the specified number, returns all elements. Optional. If unset or 0, all the results will be returned.
        :type page_size: int
        :param page_token: Specifies a page token to use. Set `pageToken` to a `nextPageToken` returned by a previous list request to get the next page of results.
        :type page_token: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._servicebroker_projects_brokers_instances_service_bindings_list_serialize(
            parent=parent,
            upload_protocol=upload_protocol,
            quota_user=quota_user,
            pretty_print=pretty_print,
            upload_type=upload_type,
            fields=fields,
            param_callback=param_callback,
            oauth_token=oauth_token,
            xgafv=xgafv,
            alt=alt,
            key=key,
            access_token=access_token,
            page_size=page_size,
            page_token=page_token,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GoogleCloudServicebrokerV1alpha1ListBindingsResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _servicebroker_projects_brokers_instances_service_bindings_list_serialize(
        self,
        parent,
        upload_protocol,
        quota_user,
        pretty_print,
        upload_type,
        fields,
        param_callback,
        oauth_token,
        xgafv,
        alt,
        key,
        access_token,
        page_size,
        page_token,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if parent is not None:
            _path_params['parent'] = parent
        # process the query parameters
        if upload_protocol is not None:
            
            _query_params.append(('upload_protocol', upload_protocol))
            
        if quota_user is not None:
            
            _query_params.append(('quotaUser', quota_user))
            
        if pretty_print is not None:
            
            _query_params.append(('prettyPrint', pretty_print))
            
        if upload_type is not None:
            
            _query_params.append(('uploadType', upload_type))
            
        if fields is not None:
            
            _query_params.append(('fields', fields))
            
        if param_callback is not None:
            
            _query_params.append(('callback', param_callback))
            
        if oauth_token is not None:
            
            _query_params.append(('oauth_token', oauth_token))
            
        if xgafv is not None:
            
            _query_params.append(('$.xgafv', xgafv))
            
        if alt is not None:
            
            _query_params.append(('alt', alt))
            
        if key is not None:
            
            _query_params.append(('key', key))
            
        if access_token is not None:
            
            _query_params.append(('access_token', access_token))
            
        if page_size is not None:
            
            _query_params.append(('pageSize', page_size))
            
        if page_token is not None:
            
            _query_params.append(('pageToken', page_token))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    '*/*'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'Oauth2c', 
            'Oauth2'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/v1alpha1/{parent}/service_bindings',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def servicebroker_projects_brokers_service_instances_list(
        self,
        parent: Annotated[StrictStr, Field(description="Parent must match `projects/[PROJECT_ID]/brokers/[BROKER_ID]`.")],
        upload_protocol: Annotated[Optional[StrictStr], Field(description="Upload protocol for media (e.g. \"raw\", \"multipart\").")] = None,
        quota_user: Annotated[Optional[StrictStr], Field(description="Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.")] = None,
        pretty_print: Annotated[Optional[StrictBool], Field(description="Returns response with indentations and line breaks.")] = None,
        upload_type: Annotated[Optional[StrictStr], Field(description="Legacy upload protocol for media (e.g. \"media\", \"multipart\").")] = None,
        fields: Annotated[Optional[StrictStr], Field(description="Selector specifying which fields to include in a partial response.")] = None,
        param_callback: Annotated[Optional[StrictStr], Field(description="JSONP")] = None,
        oauth_token: Annotated[Optional[StrictStr], Field(description="OAuth 2.0 token for the current user.")] = None,
        xgafv: Annotated[Optional[StrictStr], Field(description="V1 error format.")] = None,
        alt: Annotated[Optional[StrictStr], Field(description="Data format for response.")] = None,
        key: Annotated[Optional[StrictStr], Field(description="API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.")] = None,
        access_token: Annotated[Optional[StrictStr], Field(description="OAuth access token.")] = None,
        page_size: Annotated[Optional[StrictInt], Field(description="Specifies the number of results to return per page. If there are fewer elements than the specified number, returns all elements. Optional. If unset or 0, all the results will be returned.")] = None,
        page_token: Annotated[Optional[StrictStr], Field(description="Specifies a page token to use. Set `pageToken` to a `nextPageToken` returned by a previous list request to get the next page of results.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> GoogleCloudServicebrokerV1alpha1ListServiceInstancesResponse:
        """servicebroker_projects_brokers_service_instances_list

        Lists all the instances in the brokers This API is an extension and not part of the OSB spec. Hence the path is a standard Google API URL.

        :param parent: Parent must match `projects/[PROJECT_ID]/brokers/[BROKER_ID]`. (required)
        :type parent: str
        :param upload_protocol: Upload protocol for media (e.g. \"raw\", \"multipart\").
        :type upload_protocol: str
        :param quota_user: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
        :type quota_user: str
        :param pretty_print: Returns response with indentations and line breaks.
        :type pretty_print: bool
        :param upload_type: Legacy upload protocol for media (e.g. \"media\", \"multipart\").
        :type upload_type: str
        :param fields: Selector specifying which fields to include in a partial response.
        :type fields: str
        :param param_callback: JSONP
        :type param_callback: str
        :param oauth_token: OAuth 2.0 token for the current user.
        :type oauth_token: str
        :param xgafv: V1 error format.
        :type xgafv: str
        :param alt: Data format for response.
        :type alt: str
        :param key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
        :type key: str
        :param access_token: OAuth access token.
        :type access_token: str
        :param page_size: Specifies the number of results to return per page. If there are fewer elements than the specified number, returns all elements. Optional. If unset or 0, all the results will be returned.
        :type page_size: int
        :param page_token: Specifies a page token to use. Set `pageToken` to a `nextPageToken` returned by a previous list request to get the next page of results.
        :type page_token: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._servicebroker_projects_brokers_service_instances_list_serialize(
            parent=parent,
            upload_protocol=upload_protocol,
            quota_user=quota_user,
            pretty_print=pretty_print,
            upload_type=upload_type,
            fields=fields,
            param_callback=param_callback,
            oauth_token=oauth_token,
            xgafv=xgafv,
            alt=alt,
            key=key,
            access_token=access_token,
            page_size=page_size,
            page_token=page_token,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GoogleCloudServicebrokerV1alpha1ListServiceInstancesResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def servicebroker_projects_brokers_service_instances_list_with_http_info(
        self,
        parent: Annotated[StrictStr, Field(description="Parent must match `projects/[PROJECT_ID]/brokers/[BROKER_ID]`.")],
        upload_protocol: Annotated[Optional[StrictStr], Field(description="Upload protocol for media (e.g. \"raw\", \"multipart\").")] = None,
        quota_user: Annotated[Optional[StrictStr], Field(description="Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.")] = None,
        pretty_print: Annotated[Optional[StrictBool], Field(description="Returns response with indentations and line breaks.")] = None,
        upload_type: Annotated[Optional[StrictStr], Field(description="Legacy upload protocol for media (e.g. \"media\", \"multipart\").")] = None,
        fields: Annotated[Optional[StrictStr], Field(description="Selector specifying which fields to include in a partial response.")] = None,
        param_callback: Annotated[Optional[StrictStr], Field(description="JSONP")] = None,
        oauth_token: Annotated[Optional[StrictStr], Field(description="OAuth 2.0 token for the current user.")] = None,
        xgafv: Annotated[Optional[StrictStr], Field(description="V1 error format.")] = None,
        alt: Annotated[Optional[StrictStr], Field(description="Data format for response.")] = None,
        key: Annotated[Optional[StrictStr], Field(description="API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.")] = None,
        access_token: Annotated[Optional[StrictStr], Field(description="OAuth access token.")] = None,
        page_size: Annotated[Optional[StrictInt], Field(description="Specifies the number of results to return per page. If there are fewer elements than the specified number, returns all elements. Optional. If unset or 0, all the results will be returned.")] = None,
        page_token: Annotated[Optional[StrictStr], Field(description="Specifies a page token to use. Set `pageToken` to a `nextPageToken` returned by a previous list request to get the next page of results.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[GoogleCloudServicebrokerV1alpha1ListServiceInstancesResponse]:
        """servicebroker_projects_brokers_service_instances_list

        Lists all the instances in the brokers This API is an extension and not part of the OSB spec. Hence the path is a standard Google API URL.

        :param parent: Parent must match `projects/[PROJECT_ID]/brokers/[BROKER_ID]`. (required)
        :type parent: str
        :param upload_protocol: Upload protocol for media (e.g. \"raw\", \"multipart\").
        :type upload_protocol: str
        :param quota_user: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
        :type quota_user: str
        :param pretty_print: Returns response with indentations and line breaks.
        :type pretty_print: bool
        :param upload_type: Legacy upload protocol for media (e.g. \"media\", \"multipart\").
        :type upload_type: str
        :param fields: Selector specifying which fields to include in a partial response.
        :type fields: str
        :param param_callback: JSONP
        :type param_callback: str
        :param oauth_token: OAuth 2.0 token for the current user.
        :type oauth_token: str
        :param xgafv: V1 error format.
        :type xgafv: str
        :param alt: Data format for response.
        :type alt: str
        :param key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
        :type key: str
        :param access_token: OAuth access token.
        :type access_token: str
        :param page_size: Specifies the number of results to return per page. If there are fewer elements than the specified number, returns all elements. Optional. If unset or 0, all the results will be returned.
        :type page_size: int
        :param page_token: Specifies a page token to use. Set `pageToken` to a `nextPageToken` returned by a previous list request to get the next page of results.
        :type page_token: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._servicebroker_projects_brokers_service_instances_list_serialize(
            parent=parent,
            upload_protocol=upload_protocol,
            quota_user=quota_user,
            pretty_print=pretty_print,
            upload_type=upload_type,
            fields=fields,
            param_callback=param_callback,
            oauth_token=oauth_token,
            xgafv=xgafv,
            alt=alt,
            key=key,
            access_token=access_token,
            page_size=page_size,
            page_token=page_token,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GoogleCloudServicebrokerV1alpha1ListServiceInstancesResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def servicebroker_projects_brokers_service_instances_list_without_preload_content(
        self,
        parent: Annotated[StrictStr, Field(description="Parent must match `projects/[PROJECT_ID]/brokers/[BROKER_ID]`.")],
        upload_protocol: Annotated[Optional[StrictStr], Field(description="Upload protocol for media (e.g. \"raw\", \"multipart\").")] = None,
        quota_user: Annotated[Optional[StrictStr], Field(description="Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.")] = None,
        pretty_print: Annotated[Optional[StrictBool], Field(description="Returns response with indentations and line breaks.")] = None,
        upload_type: Annotated[Optional[StrictStr], Field(description="Legacy upload protocol for media (e.g. \"media\", \"multipart\").")] = None,
        fields: Annotated[Optional[StrictStr], Field(description="Selector specifying which fields to include in a partial response.")] = None,
        param_callback: Annotated[Optional[StrictStr], Field(description="JSONP")] = None,
        oauth_token: Annotated[Optional[StrictStr], Field(description="OAuth 2.0 token for the current user.")] = None,
        xgafv: Annotated[Optional[StrictStr], Field(description="V1 error format.")] = None,
        alt: Annotated[Optional[StrictStr], Field(description="Data format for response.")] = None,
        key: Annotated[Optional[StrictStr], Field(description="API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.")] = None,
        access_token: Annotated[Optional[StrictStr], Field(description="OAuth access token.")] = None,
        page_size: Annotated[Optional[StrictInt], Field(description="Specifies the number of results to return per page. If there are fewer elements than the specified number, returns all elements. Optional. If unset or 0, all the results will be returned.")] = None,
        page_token: Annotated[Optional[StrictStr], Field(description="Specifies a page token to use. Set `pageToken` to a `nextPageToken` returned by a previous list request to get the next page of results.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """servicebroker_projects_brokers_service_instances_list

        Lists all the instances in the brokers This API is an extension and not part of the OSB spec. Hence the path is a standard Google API URL.

        :param parent: Parent must match `projects/[PROJECT_ID]/brokers/[BROKER_ID]`. (required)
        :type parent: str
        :param upload_protocol: Upload protocol for media (e.g. \"raw\", \"multipart\").
        :type upload_protocol: str
        :param quota_user: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
        :type quota_user: str
        :param pretty_print: Returns response with indentations and line breaks.
        :type pretty_print: bool
        :param upload_type: Legacy upload protocol for media (e.g. \"media\", \"multipart\").
        :type upload_type: str
        :param fields: Selector specifying which fields to include in a partial response.
        :type fields: str
        :param param_callback: JSONP
        :type param_callback: str
        :param oauth_token: OAuth 2.0 token for the current user.
        :type oauth_token: str
        :param xgafv: V1 error format.
        :type xgafv: str
        :param alt: Data format for response.
        :type alt: str
        :param key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
        :type key: str
        :param access_token: OAuth access token.
        :type access_token: str
        :param page_size: Specifies the number of results to return per page. If there are fewer elements than the specified number, returns all elements. Optional. If unset or 0, all the results will be returned.
        :type page_size: int
        :param page_token: Specifies a page token to use. Set `pageToken` to a `nextPageToken` returned by a previous list request to get the next page of results.
        :type page_token: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._servicebroker_projects_brokers_service_instances_list_serialize(
            parent=parent,
            upload_protocol=upload_protocol,
            quota_user=quota_user,
            pretty_print=pretty_print,
            upload_type=upload_type,
            fields=fields,
            param_callback=param_callback,
            oauth_token=oauth_token,
            xgafv=xgafv,
            alt=alt,
            key=key,
            access_token=access_token,
            page_size=page_size,
            page_token=page_token,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GoogleCloudServicebrokerV1alpha1ListServiceInstancesResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _servicebroker_projects_brokers_service_instances_list_serialize(
        self,
        parent,
        upload_protocol,
        quota_user,
        pretty_print,
        upload_type,
        fields,
        param_callback,
        oauth_token,
        xgafv,
        alt,
        key,
        access_token,
        page_size,
        page_token,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if parent is not None:
            _path_params['parent'] = parent
        # process the query parameters
        if upload_protocol is not None:
            
            _query_params.append(('upload_protocol', upload_protocol))
            
        if quota_user is not None:
            
            _query_params.append(('quotaUser', quota_user))
            
        if pretty_print is not None:
            
            _query_params.append(('prettyPrint', pretty_print))
            
        if upload_type is not None:
            
            _query_params.append(('uploadType', upload_type))
            
        if fields is not None:
            
            _query_params.append(('fields', fields))
            
        if param_callback is not None:
            
            _query_params.append(('callback', param_callback))
            
        if oauth_token is not None:
            
            _query_params.append(('oauth_token', oauth_token))
            
        if xgafv is not None:
            
            _query_params.append(('$.xgafv', xgafv))
            
        if alt is not None:
            
            _query_params.append(('alt', alt))
            
        if key is not None:
            
            _query_params.append(('key', key))
            
        if access_token is not None:
            
            _query_params.append(('access_token', access_token))
            
        if page_size is not None:
            
            _query_params.append(('pageSize', page_size))
            
        if page_token is not None:
            
            _query_params.append(('pageToken', page_token))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    '*/*'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'Oauth2c', 
            'Oauth2'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/v1alpha1/{parent}/service_instances',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def servicebroker_projects_brokers_v2_catalog_list(
        self,
        parent: Annotated[StrictStr, Field(description="Parent must match `projects/[PROJECT_ID]/brokers/[BROKER_ID]`.")],
        upload_protocol: Annotated[Optional[StrictStr], Field(description="Upload protocol for media (e.g. \"raw\", \"multipart\").")] = None,
        quota_user: Annotated[Optional[StrictStr], Field(description="Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.")] = None,
        pretty_print: Annotated[Optional[StrictBool], Field(description="Returns response with indentations and line breaks.")] = None,
        upload_type: Annotated[Optional[StrictStr], Field(description="Legacy upload protocol for media (e.g. \"media\", \"multipart\").")] = None,
        fields: Annotated[Optional[StrictStr], Field(description="Selector specifying which fields to include in a partial response.")] = None,
        param_callback: Annotated[Optional[StrictStr], Field(description="JSONP")] = None,
        oauth_token: Annotated[Optional[StrictStr], Field(description="OAuth 2.0 token for the current user.")] = None,
        xgafv: Annotated[Optional[StrictStr], Field(description="V1 error format.")] = None,
        alt: Annotated[Optional[StrictStr], Field(description="Data format for response.")] = None,
        key: Annotated[Optional[StrictStr], Field(description="API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.")] = None,
        access_token: Annotated[Optional[StrictStr], Field(description="OAuth access token.")] = None,
        page_size: Annotated[Optional[StrictInt], Field(description="Specifies the number of results to return per page. If there are fewer elements than the specified number, returns all elements. Optional. If unset or 0, all the results will be returned.")] = None,
        page_token: Annotated[Optional[StrictStr], Field(description="Specifies a page token to use. Set `pageToken` to a `nextPageToken` returned by a previous list request to get the next page of results.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> GoogleCloudServicebrokerV1alpha1ListCatalogResponse:
        """servicebroker_projects_brokers_v2_catalog_list

        Lists all the Services registered with this broker for consumption for given service registry broker, which contains an set of services. Note, that Service producer API is separate from Broker API.

        :param parent: Parent must match `projects/[PROJECT_ID]/brokers/[BROKER_ID]`. (required)
        :type parent: str
        :param upload_protocol: Upload protocol for media (e.g. \"raw\", \"multipart\").
        :type upload_protocol: str
        :param quota_user: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
        :type quota_user: str
        :param pretty_print: Returns response with indentations and line breaks.
        :type pretty_print: bool
        :param upload_type: Legacy upload protocol for media (e.g. \"media\", \"multipart\").
        :type upload_type: str
        :param fields: Selector specifying which fields to include in a partial response.
        :type fields: str
        :param param_callback: JSONP
        :type param_callback: str
        :param oauth_token: OAuth 2.0 token for the current user.
        :type oauth_token: str
        :param xgafv: V1 error format.
        :type xgafv: str
        :param alt: Data format for response.
        :type alt: str
        :param key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
        :type key: str
        :param access_token: OAuth access token.
        :type access_token: str
        :param page_size: Specifies the number of results to return per page. If there are fewer elements than the specified number, returns all elements. Optional. If unset or 0, all the results will be returned.
        :type page_size: int
        :param page_token: Specifies a page token to use. Set `pageToken` to a `nextPageToken` returned by a previous list request to get the next page of results.
        :type page_token: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._servicebroker_projects_brokers_v2_catalog_list_serialize(
            parent=parent,
            upload_protocol=upload_protocol,
            quota_user=quota_user,
            pretty_print=pretty_print,
            upload_type=upload_type,
            fields=fields,
            param_callback=param_callback,
            oauth_token=oauth_token,
            xgafv=xgafv,
            alt=alt,
            key=key,
            access_token=access_token,
            page_size=page_size,
            page_token=page_token,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GoogleCloudServicebrokerV1alpha1ListCatalogResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def servicebroker_projects_brokers_v2_catalog_list_with_http_info(
        self,
        parent: Annotated[StrictStr, Field(description="Parent must match `projects/[PROJECT_ID]/brokers/[BROKER_ID]`.")],
        upload_protocol: Annotated[Optional[StrictStr], Field(description="Upload protocol for media (e.g. \"raw\", \"multipart\").")] = None,
        quota_user: Annotated[Optional[StrictStr], Field(description="Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.")] = None,
        pretty_print: Annotated[Optional[StrictBool], Field(description="Returns response with indentations and line breaks.")] = None,
        upload_type: Annotated[Optional[StrictStr], Field(description="Legacy upload protocol for media (e.g. \"media\", \"multipart\").")] = None,
        fields: Annotated[Optional[StrictStr], Field(description="Selector specifying which fields to include in a partial response.")] = None,
        param_callback: Annotated[Optional[StrictStr], Field(description="JSONP")] = None,
        oauth_token: Annotated[Optional[StrictStr], Field(description="OAuth 2.0 token for the current user.")] = None,
        xgafv: Annotated[Optional[StrictStr], Field(description="V1 error format.")] = None,
        alt: Annotated[Optional[StrictStr], Field(description="Data format for response.")] = None,
        key: Annotated[Optional[StrictStr], Field(description="API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.")] = None,
        access_token: Annotated[Optional[StrictStr], Field(description="OAuth access token.")] = None,
        page_size: Annotated[Optional[StrictInt], Field(description="Specifies the number of results to return per page. If there are fewer elements than the specified number, returns all elements. Optional. If unset or 0, all the results will be returned.")] = None,
        page_token: Annotated[Optional[StrictStr], Field(description="Specifies a page token to use. Set `pageToken` to a `nextPageToken` returned by a previous list request to get the next page of results.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[GoogleCloudServicebrokerV1alpha1ListCatalogResponse]:
        """servicebroker_projects_brokers_v2_catalog_list

        Lists all the Services registered with this broker for consumption for given service registry broker, which contains an set of services. Note, that Service producer API is separate from Broker API.

        :param parent: Parent must match `projects/[PROJECT_ID]/brokers/[BROKER_ID]`. (required)
        :type parent: str
        :param upload_protocol: Upload protocol for media (e.g. \"raw\", \"multipart\").
        :type upload_protocol: str
        :param quota_user: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
        :type quota_user: str
        :param pretty_print: Returns response with indentations and line breaks.
        :type pretty_print: bool
        :param upload_type: Legacy upload protocol for media (e.g. \"media\", \"multipart\").
        :type upload_type: str
        :param fields: Selector specifying which fields to include in a partial response.
        :type fields: str
        :param param_callback: JSONP
        :type param_callback: str
        :param oauth_token: OAuth 2.0 token for the current user.
        :type oauth_token: str
        :param xgafv: V1 error format.
        :type xgafv: str
        :param alt: Data format for response.
        :type alt: str
        :param key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
        :type key: str
        :param access_token: OAuth access token.
        :type access_token: str
        :param page_size: Specifies the number of results to return per page. If there are fewer elements than the specified number, returns all elements. Optional. If unset or 0, all the results will be returned.
        :type page_size: int
        :param page_token: Specifies a page token to use. Set `pageToken` to a `nextPageToken` returned by a previous list request to get the next page of results.
        :type page_token: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._servicebroker_projects_brokers_v2_catalog_list_serialize(
            parent=parent,
            upload_protocol=upload_protocol,
            quota_user=quota_user,
            pretty_print=pretty_print,
            upload_type=upload_type,
            fields=fields,
            param_callback=param_callback,
            oauth_token=oauth_token,
            xgafv=xgafv,
            alt=alt,
            key=key,
            access_token=access_token,
            page_size=page_size,
            page_token=page_token,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GoogleCloudServicebrokerV1alpha1ListCatalogResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def servicebroker_projects_brokers_v2_catalog_list_without_preload_content(
        self,
        parent: Annotated[StrictStr, Field(description="Parent must match `projects/[PROJECT_ID]/brokers/[BROKER_ID]`.")],
        upload_protocol: Annotated[Optional[StrictStr], Field(description="Upload protocol for media (e.g. \"raw\", \"multipart\").")] = None,
        quota_user: Annotated[Optional[StrictStr], Field(description="Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.")] = None,
        pretty_print: Annotated[Optional[StrictBool], Field(description="Returns response with indentations and line breaks.")] = None,
        upload_type: Annotated[Optional[StrictStr], Field(description="Legacy upload protocol for media (e.g. \"media\", \"multipart\").")] = None,
        fields: Annotated[Optional[StrictStr], Field(description="Selector specifying which fields to include in a partial response.")] = None,
        param_callback: Annotated[Optional[StrictStr], Field(description="JSONP")] = None,
        oauth_token: Annotated[Optional[StrictStr], Field(description="OAuth 2.0 token for the current user.")] = None,
        xgafv: Annotated[Optional[StrictStr], Field(description="V1 error format.")] = None,
        alt: Annotated[Optional[StrictStr], Field(description="Data format for response.")] = None,
        key: Annotated[Optional[StrictStr], Field(description="API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.")] = None,
        access_token: Annotated[Optional[StrictStr], Field(description="OAuth access token.")] = None,
        page_size: Annotated[Optional[StrictInt], Field(description="Specifies the number of results to return per page. If there are fewer elements than the specified number, returns all elements. Optional. If unset or 0, all the results will be returned.")] = None,
        page_token: Annotated[Optional[StrictStr], Field(description="Specifies a page token to use. Set `pageToken` to a `nextPageToken` returned by a previous list request to get the next page of results.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """servicebroker_projects_brokers_v2_catalog_list

        Lists all the Services registered with this broker for consumption for given service registry broker, which contains an set of services. Note, that Service producer API is separate from Broker API.

        :param parent: Parent must match `projects/[PROJECT_ID]/brokers/[BROKER_ID]`. (required)
        :type parent: str
        :param upload_protocol: Upload protocol for media (e.g. \"raw\", \"multipart\").
        :type upload_protocol: str
        :param quota_user: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
        :type quota_user: str
        :param pretty_print: Returns response with indentations and line breaks.
        :type pretty_print: bool
        :param upload_type: Legacy upload protocol for media (e.g. \"media\", \"multipart\").
        :type upload_type: str
        :param fields: Selector specifying which fields to include in a partial response.
        :type fields: str
        :param param_callback: JSONP
        :type param_callback: str
        :param oauth_token: OAuth 2.0 token for the current user.
        :type oauth_token: str
        :param xgafv: V1 error format.
        :type xgafv: str
        :param alt: Data format for response.
        :type alt: str
        :param key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
        :type key: str
        :param access_token: OAuth access token.
        :type access_token: str
        :param page_size: Specifies the number of results to return per page. If there are fewer elements than the specified number, returns all elements. Optional. If unset or 0, all the results will be returned.
        :type page_size: int
        :param page_token: Specifies a page token to use. Set `pageToken` to a `nextPageToken` returned by a previous list request to get the next page of results.
        :type page_token: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._servicebroker_projects_brokers_v2_catalog_list_serialize(
            parent=parent,
            upload_protocol=upload_protocol,
            quota_user=quota_user,
            pretty_print=pretty_print,
            upload_type=upload_type,
            fields=fields,
            param_callback=param_callback,
            oauth_token=oauth_token,
            xgafv=xgafv,
            alt=alt,
            key=key,
            access_token=access_token,
            page_size=page_size,
            page_token=page_token,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GoogleCloudServicebrokerV1alpha1ListCatalogResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _servicebroker_projects_brokers_v2_catalog_list_serialize(
        self,
        parent,
        upload_protocol,
        quota_user,
        pretty_print,
        upload_type,
        fields,
        param_callback,
        oauth_token,
        xgafv,
        alt,
        key,
        access_token,
        page_size,
        page_token,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if parent is not None:
            _path_params['parent'] = parent
        # process the query parameters
        if upload_protocol is not None:
            
            _query_params.append(('upload_protocol', upload_protocol))
            
        if quota_user is not None:
            
            _query_params.append(('quotaUser', quota_user))
            
        if pretty_print is not None:
            
            _query_params.append(('prettyPrint', pretty_print))
            
        if upload_type is not None:
            
            _query_params.append(('uploadType', upload_type))
            
        if fields is not None:
            
            _query_params.append(('fields', fields))
            
        if param_callback is not None:
            
            _query_params.append(('callback', param_callback))
            
        if oauth_token is not None:
            
            _query_params.append(('oauth_token', oauth_token))
            
        if xgafv is not None:
            
            _query_params.append(('$.xgafv', xgafv))
            
        if alt is not None:
            
            _query_params.append(('alt', alt))
            
        if key is not None:
            
            _query_params.append(('key', key))
            
        if access_token is not None:
            
            _query_params.append(('access_token', access_token))
            
        if page_size is not None:
            
            _query_params.append(('pageSize', page_size))
            
        if page_token is not None:
            
            _query_params.append(('pageToken', page_token))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    '*/*'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'Oauth2c', 
            'Oauth2'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/v1alpha1/{parent}/v2/catalog',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def servicebroker_projects_brokers_v2_service_instances_create(
        self,
        parent: Annotated[StrictStr, Field(description="Parent must match `projects/[PROJECT_ID]/brokers/[BROKER_ID]`.")],
        instance_id: Annotated[StrictStr, Field(description="The id of the service instance. Must be unique within GCP project. Maximum length is 64, GUID recommended. Required.")],
        upload_protocol: Annotated[Optional[StrictStr], Field(description="Upload protocol for media (e.g. \"raw\", \"multipart\").")] = None,
        quota_user: Annotated[Optional[StrictStr], Field(description="Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.")] = None,
        pretty_print: Annotated[Optional[StrictBool], Field(description="Returns response with indentations and line breaks.")] = None,
        upload_type: Annotated[Optional[StrictStr], Field(description="Legacy upload protocol for media (e.g. \"media\", \"multipart\").")] = None,
        fields: Annotated[Optional[StrictStr], Field(description="Selector specifying which fields to include in a partial response.")] = None,
        param_callback: Annotated[Optional[StrictStr], Field(description="JSONP")] = None,
        oauth_token: Annotated[Optional[StrictStr], Field(description="OAuth 2.0 token for the current user.")] = None,
        xgafv: Annotated[Optional[StrictStr], Field(description="V1 error format.")] = None,
        alt: Annotated[Optional[StrictStr], Field(description="Data format for response.")] = None,
        key: Annotated[Optional[StrictStr], Field(description="API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.")] = None,
        access_token: Annotated[Optional[StrictStr], Field(description="OAuth access token.")] = None,
        accepts_incomplete: Annotated[Optional[StrictBool], Field(description="Value indicating that API client supports asynchronous operations. If Broker cannot execute the request synchronously HTTP 422 code will be returned to HTTP clients along with FAILED_PRECONDITION error. If true and broker will execute request asynchronously 202 HTTP code will be returned. This broker always requires this to be true as all mutator operations are asynchronous.")] = None,
        google_cloud_servicebroker_v1alpha1_service_instance: Optional[GoogleCloudServicebrokerV1alpha1ServiceInstance] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> GoogleCloudServicebrokerV1alpha1CreateServiceInstanceResponse:
        """servicebroker_projects_brokers_v2_service_instances_create

        Provisions a service instance. If `request.accepts_incomplete` is false and Broker cannot execute request synchronously HTTP 422 error will be returned along with FAILED_PRECONDITION status. If `request.accepts_incomplete` is true and the Broker decides to execute resource asynchronously then HTTP 202 response code will be returned and a valid polling operation in the response will be included. If Broker executes the request synchronously and it succeeds HTTP 201 response will be furnished. If identical instance exists, then HTTP 200 response will be returned. If an instance with identical ID but mismatching parameters exists, then HTTP 409 status code will be returned.

        :param parent: Parent must match `projects/[PROJECT_ID]/brokers/[BROKER_ID]`. (required)
        :type parent: str
        :param instance_id: The id of the service instance. Must be unique within GCP project. Maximum length is 64, GUID recommended. Required. (required)
        :type instance_id: str
        :param upload_protocol: Upload protocol for media (e.g. \"raw\", \"multipart\").
        :type upload_protocol: str
        :param quota_user: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
        :type quota_user: str
        :param pretty_print: Returns response with indentations and line breaks.
        :type pretty_print: bool
        :param upload_type: Legacy upload protocol for media (e.g. \"media\", \"multipart\").
        :type upload_type: str
        :param fields: Selector specifying which fields to include in a partial response.
        :type fields: str
        :param param_callback: JSONP
        :type param_callback: str
        :param oauth_token: OAuth 2.0 token for the current user.
        :type oauth_token: str
        :param xgafv: V1 error format.
        :type xgafv: str
        :param alt: Data format for response.
        :type alt: str
        :param key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
        :type key: str
        :param access_token: OAuth access token.
        :type access_token: str
        :param accepts_incomplete: Value indicating that API client supports asynchronous operations. If Broker cannot execute the request synchronously HTTP 422 code will be returned to HTTP clients along with FAILED_PRECONDITION error. If true and broker will execute request asynchronously 202 HTTP code will be returned. This broker always requires this to be true as all mutator operations are asynchronous.
        :type accepts_incomplete: bool
        :param google_cloud_servicebroker_v1alpha1_service_instance:
        :type google_cloud_servicebroker_v1alpha1_service_instance: GoogleCloudServicebrokerV1alpha1ServiceInstance
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._servicebroker_projects_brokers_v2_service_instances_create_serialize(
            parent=parent,
            instance_id=instance_id,
            upload_protocol=upload_protocol,
            quota_user=quota_user,
            pretty_print=pretty_print,
            upload_type=upload_type,
            fields=fields,
            param_callback=param_callback,
            oauth_token=oauth_token,
            xgafv=xgafv,
            alt=alt,
            key=key,
            access_token=access_token,
            accepts_incomplete=accepts_incomplete,
            google_cloud_servicebroker_v1alpha1_service_instance=google_cloud_servicebroker_v1alpha1_service_instance,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GoogleCloudServicebrokerV1alpha1CreateServiceInstanceResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def servicebroker_projects_brokers_v2_service_instances_create_with_http_info(
        self,
        parent: Annotated[StrictStr, Field(description="Parent must match `projects/[PROJECT_ID]/brokers/[BROKER_ID]`.")],
        instance_id: Annotated[StrictStr, Field(description="The id of the service instance. Must be unique within GCP project. Maximum length is 64, GUID recommended. Required.")],
        upload_protocol: Annotated[Optional[StrictStr], Field(description="Upload protocol for media (e.g. \"raw\", \"multipart\").")] = None,
        quota_user: Annotated[Optional[StrictStr], Field(description="Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.")] = None,
        pretty_print: Annotated[Optional[StrictBool], Field(description="Returns response with indentations and line breaks.")] = None,
        upload_type: Annotated[Optional[StrictStr], Field(description="Legacy upload protocol for media (e.g. \"media\", \"multipart\").")] = None,
        fields: Annotated[Optional[StrictStr], Field(description="Selector specifying which fields to include in a partial response.")] = None,
        param_callback: Annotated[Optional[StrictStr], Field(description="JSONP")] = None,
        oauth_token: Annotated[Optional[StrictStr], Field(description="OAuth 2.0 token for the current user.")] = None,
        xgafv: Annotated[Optional[StrictStr], Field(description="V1 error format.")] = None,
        alt: Annotated[Optional[StrictStr], Field(description="Data format for response.")] = None,
        key: Annotated[Optional[StrictStr], Field(description="API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.")] = None,
        access_token: Annotated[Optional[StrictStr], Field(description="OAuth access token.")] = None,
        accepts_incomplete: Annotated[Optional[StrictBool], Field(description="Value indicating that API client supports asynchronous operations. If Broker cannot execute the request synchronously HTTP 422 code will be returned to HTTP clients along with FAILED_PRECONDITION error. If true and broker will execute request asynchronously 202 HTTP code will be returned. This broker always requires this to be true as all mutator operations are asynchronous.")] = None,
        google_cloud_servicebroker_v1alpha1_service_instance: Optional[GoogleCloudServicebrokerV1alpha1ServiceInstance] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[GoogleCloudServicebrokerV1alpha1CreateServiceInstanceResponse]:
        """servicebroker_projects_brokers_v2_service_instances_create

        Provisions a service instance. If `request.accepts_incomplete` is false and Broker cannot execute request synchronously HTTP 422 error will be returned along with FAILED_PRECONDITION status. If `request.accepts_incomplete` is true and the Broker decides to execute resource asynchronously then HTTP 202 response code will be returned and a valid polling operation in the response will be included. If Broker executes the request synchronously and it succeeds HTTP 201 response will be furnished. If identical instance exists, then HTTP 200 response will be returned. If an instance with identical ID but mismatching parameters exists, then HTTP 409 status code will be returned.

        :param parent: Parent must match `projects/[PROJECT_ID]/brokers/[BROKER_ID]`. (required)
        :type parent: str
        :param instance_id: The id of the service instance. Must be unique within GCP project. Maximum length is 64, GUID recommended. Required. (required)
        :type instance_id: str
        :param upload_protocol: Upload protocol for media (e.g. \"raw\", \"multipart\").
        :type upload_protocol: str
        :param quota_user: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
        :type quota_user: str
        :param pretty_print: Returns response with indentations and line breaks.
        :type pretty_print: bool
        :param upload_type: Legacy upload protocol for media (e.g. \"media\", \"multipart\").
        :type upload_type: str
        :param fields: Selector specifying which fields to include in a partial response.
        :type fields: str
        :param param_callback: JSONP
        :type param_callback: str
        :param oauth_token: OAuth 2.0 token for the current user.
        :type oauth_token: str
        :param xgafv: V1 error format.
        :type xgafv: str
        :param alt: Data format for response.
        :type alt: str
        :param key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
        :type key: str
        :param access_token: OAuth access token.
        :type access_token: str
        :param accepts_incomplete: Value indicating that API client supports asynchronous operations. If Broker cannot execute the request synchronously HTTP 422 code will be returned to HTTP clients along with FAILED_PRECONDITION error. If true and broker will execute request asynchronously 202 HTTP code will be returned. This broker always requires this to be true as all mutator operations are asynchronous.
        :type accepts_incomplete: bool
        :param google_cloud_servicebroker_v1alpha1_service_instance:
        :type google_cloud_servicebroker_v1alpha1_service_instance: GoogleCloudServicebrokerV1alpha1ServiceInstance
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._servicebroker_projects_brokers_v2_service_instances_create_serialize(
            parent=parent,
            instance_id=instance_id,
            upload_protocol=upload_protocol,
            quota_user=quota_user,
            pretty_print=pretty_print,
            upload_type=upload_type,
            fields=fields,
            param_callback=param_callback,
            oauth_token=oauth_token,
            xgafv=xgafv,
            alt=alt,
            key=key,
            access_token=access_token,
            accepts_incomplete=accepts_incomplete,
            google_cloud_servicebroker_v1alpha1_service_instance=google_cloud_servicebroker_v1alpha1_service_instance,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GoogleCloudServicebrokerV1alpha1CreateServiceInstanceResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def servicebroker_projects_brokers_v2_service_instances_create_without_preload_content(
        self,
        parent: Annotated[StrictStr, Field(description="Parent must match `projects/[PROJECT_ID]/brokers/[BROKER_ID]`.")],
        instance_id: Annotated[StrictStr, Field(description="The id of the service instance. Must be unique within GCP project. Maximum length is 64, GUID recommended. Required.")],
        upload_protocol: Annotated[Optional[StrictStr], Field(description="Upload protocol for media (e.g. \"raw\", \"multipart\").")] = None,
        quota_user: Annotated[Optional[StrictStr], Field(description="Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.")] = None,
        pretty_print: Annotated[Optional[StrictBool], Field(description="Returns response with indentations and line breaks.")] = None,
        upload_type: Annotated[Optional[StrictStr], Field(description="Legacy upload protocol for media (e.g. \"media\", \"multipart\").")] = None,
        fields: Annotated[Optional[StrictStr], Field(description="Selector specifying which fields to include in a partial response.")] = None,
        param_callback: Annotated[Optional[StrictStr], Field(description="JSONP")] = None,
        oauth_token: Annotated[Optional[StrictStr], Field(description="OAuth 2.0 token for the current user.")] = None,
        xgafv: Annotated[Optional[StrictStr], Field(description="V1 error format.")] = None,
        alt: Annotated[Optional[StrictStr], Field(description="Data format for response.")] = None,
        key: Annotated[Optional[StrictStr], Field(description="API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.")] = None,
        access_token: Annotated[Optional[StrictStr], Field(description="OAuth access token.")] = None,
        accepts_incomplete: Annotated[Optional[StrictBool], Field(description="Value indicating that API client supports asynchronous operations. If Broker cannot execute the request synchronously HTTP 422 code will be returned to HTTP clients along with FAILED_PRECONDITION error. If true and broker will execute request asynchronously 202 HTTP code will be returned. This broker always requires this to be true as all mutator operations are asynchronous.")] = None,
        google_cloud_servicebroker_v1alpha1_service_instance: Optional[GoogleCloudServicebrokerV1alpha1ServiceInstance] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """servicebroker_projects_brokers_v2_service_instances_create

        Provisions a service instance. If `request.accepts_incomplete` is false and Broker cannot execute request synchronously HTTP 422 error will be returned along with FAILED_PRECONDITION status. If `request.accepts_incomplete` is true and the Broker decides to execute resource asynchronously then HTTP 202 response code will be returned and a valid polling operation in the response will be included. If Broker executes the request synchronously and it succeeds HTTP 201 response will be furnished. If identical instance exists, then HTTP 200 response will be returned. If an instance with identical ID but mismatching parameters exists, then HTTP 409 status code will be returned.

        :param parent: Parent must match `projects/[PROJECT_ID]/brokers/[BROKER_ID]`. (required)
        :type parent: str
        :param instance_id: The id of the service instance. Must be unique within GCP project. Maximum length is 64, GUID recommended. Required. (required)
        :type instance_id: str
        :param upload_protocol: Upload protocol for media (e.g. \"raw\", \"multipart\").
        :type upload_protocol: str
        :param quota_user: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
        :type quota_user: str
        :param pretty_print: Returns response with indentations and line breaks.
        :type pretty_print: bool
        :param upload_type: Legacy upload protocol for media (e.g. \"media\", \"multipart\").
        :type upload_type: str
        :param fields: Selector specifying which fields to include in a partial response.
        :type fields: str
        :param param_callback: JSONP
        :type param_callback: str
        :param oauth_token: OAuth 2.0 token for the current user.
        :type oauth_token: str
        :param xgafv: V1 error format.
        :type xgafv: str
        :param alt: Data format for response.
        :type alt: str
        :param key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
        :type key: str
        :param access_token: OAuth access token.
        :type access_token: str
        :param accepts_incomplete: Value indicating that API client supports asynchronous operations. If Broker cannot execute the request synchronously HTTP 422 code will be returned to HTTP clients along with FAILED_PRECONDITION error. If true and broker will execute request asynchronously 202 HTTP code will be returned. This broker always requires this to be true as all mutator operations are asynchronous.
        :type accepts_incomplete: bool
        :param google_cloud_servicebroker_v1alpha1_service_instance:
        :type google_cloud_servicebroker_v1alpha1_service_instance: GoogleCloudServicebrokerV1alpha1ServiceInstance
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._servicebroker_projects_brokers_v2_service_instances_create_serialize(
            parent=parent,
            instance_id=instance_id,
            upload_protocol=upload_protocol,
            quota_user=quota_user,
            pretty_print=pretty_print,
            upload_type=upload_type,
            fields=fields,
            param_callback=param_callback,
            oauth_token=oauth_token,
            xgafv=xgafv,
            alt=alt,
            key=key,
            access_token=access_token,
            accepts_incomplete=accepts_incomplete,
            google_cloud_servicebroker_v1alpha1_service_instance=google_cloud_servicebroker_v1alpha1_service_instance,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GoogleCloudServicebrokerV1alpha1CreateServiceInstanceResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _servicebroker_projects_brokers_v2_service_instances_create_serialize(
        self,
        parent,
        instance_id,
        upload_protocol,
        quota_user,
        pretty_print,
        upload_type,
        fields,
        param_callback,
        oauth_token,
        xgafv,
        alt,
        key,
        access_token,
        accepts_incomplete,
        google_cloud_servicebroker_v1alpha1_service_instance,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if parent is not None:
            _path_params['parent'] = parent
        if instance_id is not None:
            _path_params['instance_id'] = instance_id
        # process the query parameters
        if upload_protocol is not None:
            
            _query_params.append(('upload_protocol', upload_protocol))
            
        if quota_user is not None:
            
            _query_params.append(('quotaUser', quota_user))
            
        if pretty_print is not None:
            
            _query_params.append(('prettyPrint', pretty_print))
            
        if upload_type is not None:
            
            _query_params.append(('uploadType', upload_type))
            
        if fields is not None:
            
            _query_params.append(('fields', fields))
            
        if param_callback is not None:
            
            _query_params.append(('callback', param_callback))
            
        if oauth_token is not None:
            
            _query_params.append(('oauth_token', oauth_token))
            
        if xgafv is not None:
            
            _query_params.append(('$.xgafv', xgafv))
            
        if alt is not None:
            
            _query_params.append(('alt', alt))
            
        if key is not None:
            
            _query_params.append(('key', key))
            
        if access_token is not None:
            
            _query_params.append(('access_token', access_token))
            
        if accepts_incomplete is not None:
            
            _query_params.append(('acceptsIncomplete', accepts_incomplete))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if google_cloud_servicebroker_v1alpha1_service_instance is not None:
            _body_params = google_cloud_servicebroker_v1alpha1_service_instance


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    '*/*'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'Oauth2c', 
            'Oauth2'
        ]

        return self.api_client.param_serialize(
            method='PUT',
            resource_path='/v1alpha1/{parent}/v2/service_instances/{instance_id}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def servicebroker_projects_brokers_v2_service_instances_delete(
        self,
        parent: Annotated[StrictStr, Field(description="Parent must match `projects/[PROJECT_ID]/brokers/[BROKER_ID]`.")],
        instance_id: Annotated[StrictStr, Field(description="The instance id to deprovision.")],
        upload_protocol: Annotated[Optional[StrictStr], Field(description="Upload protocol for media (e.g. \"raw\", \"multipart\").")] = None,
        quota_user: Annotated[Optional[StrictStr], Field(description="Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.")] = None,
        pretty_print: Annotated[Optional[StrictBool], Field(description="Returns response with indentations and line breaks.")] = None,
        upload_type: Annotated[Optional[StrictStr], Field(description="Legacy upload protocol for media (e.g. \"media\", \"multipart\").")] = None,
        fields: Annotated[Optional[StrictStr], Field(description="Selector specifying which fields to include in a partial response.")] = None,
        param_callback: Annotated[Optional[StrictStr], Field(description="JSONP")] = None,
        oauth_token: Annotated[Optional[StrictStr], Field(description="OAuth 2.0 token for the current user.")] = None,
        xgafv: Annotated[Optional[StrictStr], Field(description="V1 error format.")] = None,
        alt: Annotated[Optional[StrictStr], Field(description="Data format for response.")] = None,
        key: Annotated[Optional[StrictStr], Field(description="API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.")] = None,
        access_token: Annotated[Optional[StrictStr], Field(description="OAuth access token.")] = None,
        accepts_incomplete: Annotated[Optional[StrictBool], Field(description="See CreateServiceInstanceRequest for details.")] = None,
        plan_id: Annotated[Optional[StrictStr], Field(description="The plan id of the service instance.")] = None,
        service_id: Annotated[Optional[StrictStr], Field(description="The service id of the service instance.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> GoogleCloudServicebrokerV1alpha1DeleteServiceInstanceResponse:
        """servicebroker_projects_brokers_v2_service_instances_delete

        Deprovisions a service instance. For synchronous/asynchronous request details see CreateServiceInstance method. If service instance does not exist HTTP 410 status will be returned.

        :param parent: Parent must match `projects/[PROJECT_ID]/brokers/[BROKER_ID]`. (required)
        :type parent: str
        :param instance_id: The instance id to deprovision. (required)
        :type instance_id: str
        :param upload_protocol: Upload protocol for media (e.g. \"raw\", \"multipart\").
        :type upload_protocol: str
        :param quota_user: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
        :type quota_user: str
        :param pretty_print: Returns response with indentations and line breaks.
        :type pretty_print: bool
        :param upload_type: Legacy upload protocol for media (e.g. \"media\", \"multipart\").
        :type upload_type: str
        :param fields: Selector specifying which fields to include in a partial response.
        :type fields: str
        :param param_callback: JSONP
        :type param_callback: str
        :param oauth_token: OAuth 2.0 token for the current user.
        :type oauth_token: str
        :param xgafv: V1 error format.
        :type xgafv: str
        :param alt: Data format for response.
        :type alt: str
        :param key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
        :type key: str
        :param access_token: OAuth access token.
        :type access_token: str
        :param accepts_incomplete: See CreateServiceInstanceRequest for details.
        :type accepts_incomplete: bool
        :param plan_id: The plan id of the service instance.
        :type plan_id: str
        :param service_id: The service id of the service instance.
        :type service_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._servicebroker_projects_brokers_v2_service_instances_delete_serialize(
            parent=parent,
            instance_id=instance_id,
            upload_protocol=upload_protocol,
            quota_user=quota_user,
            pretty_print=pretty_print,
            upload_type=upload_type,
            fields=fields,
            param_callback=param_callback,
            oauth_token=oauth_token,
            xgafv=xgafv,
            alt=alt,
            key=key,
            access_token=access_token,
            accepts_incomplete=accepts_incomplete,
            plan_id=plan_id,
            service_id=service_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GoogleCloudServicebrokerV1alpha1DeleteServiceInstanceResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def servicebroker_projects_brokers_v2_service_instances_delete_with_http_info(
        self,
        parent: Annotated[StrictStr, Field(description="Parent must match `projects/[PROJECT_ID]/brokers/[BROKER_ID]`.")],
        instance_id: Annotated[StrictStr, Field(description="The instance id to deprovision.")],
        upload_protocol: Annotated[Optional[StrictStr], Field(description="Upload protocol for media (e.g. \"raw\", \"multipart\").")] = None,
        quota_user: Annotated[Optional[StrictStr], Field(description="Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.")] = None,
        pretty_print: Annotated[Optional[StrictBool], Field(description="Returns response with indentations and line breaks.")] = None,
        upload_type: Annotated[Optional[StrictStr], Field(description="Legacy upload protocol for media (e.g. \"media\", \"multipart\").")] = None,
        fields: Annotated[Optional[StrictStr], Field(description="Selector specifying which fields to include in a partial response.")] = None,
        param_callback: Annotated[Optional[StrictStr], Field(description="JSONP")] = None,
        oauth_token: Annotated[Optional[StrictStr], Field(description="OAuth 2.0 token for the current user.")] = None,
        xgafv: Annotated[Optional[StrictStr], Field(description="V1 error format.")] = None,
        alt: Annotated[Optional[StrictStr], Field(description="Data format for response.")] = None,
        key: Annotated[Optional[StrictStr], Field(description="API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.")] = None,
        access_token: Annotated[Optional[StrictStr], Field(description="OAuth access token.")] = None,
        accepts_incomplete: Annotated[Optional[StrictBool], Field(description="See CreateServiceInstanceRequest for details.")] = None,
        plan_id: Annotated[Optional[StrictStr], Field(description="The plan id of the service instance.")] = None,
        service_id: Annotated[Optional[StrictStr], Field(description="The service id of the service instance.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[GoogleCloudServicebrokerV1alpha1DeleteServiceInstanceResponse]:
        """servicebroker_projects_brokers_v2_service_instances_delete

        Deprovisions a service instance. For synchronous/asynchronous request details see CreateServiceInstance method. If service instance does not exist HTTP 410 status will be returned.

        :param parent: Parent must match `projects/[PROJECT_ID]/brokers/[BROKER_ID]`. (required)
        :type parent: str
        :param instance_id: The instance id to deprovision. (required)
        :type instance_id: str
        :param upload_protocol: Upload protocol for media (e.g. \"raw\", \"multipart\").
        :type upload_protocol: str
        :param quota_user: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
        :type quota_user: str
        :param pretty_print: Returns response with indentations and line breaks.
        :type pretty_print: bool
        :param upload_type: Legacy upload protocol for media (e.g. \"media\", \"multipart\").
        :type upload_type: str
        :param fields: Selector specifying which fields to include in a partial response.
        :type fields: str
        :param param_callback: JSONP
        :type param_callback: str
        :param oauth_token: OAuth 2.0 token for the current user.
        :type oauth_token: str
        :param xgafv: V1 error format.
        :type xgafv: str
        :param alt: Data format for response.
        :type alt: str
        :param key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
        :type key: str
        :param access_token: OAuth access token.
        :type access_token: str
        :param accepts_incomplete: See CreateServiceInstanceRequest for details.
        :type accepts_incomplete: bool
        :param plan_id: The plan id of the service instance.
        :type plan_id: str
        :param service_id: The service id of the service instance.
        :type service_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._servicebroker_projects_brokers_v2_service_instances_delete_serialize(
            parent=parent,
            instance_id=instance_id,
            upload_protocol=upload_protocol,
            quota_user=quota_user,
            pretty_print=pretty_print,
            upload_type=upload_type,
            fields=fields,
            param_callback=param_callback,
            oauth_token=oauth_token,
            xgafv=xgafv,
            alt=alt,
            key=key,
            access_token=access_token,
            accepts_incomplete=accepts_incomplete,
            plan_id=plan_id,
            service_id=service_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GoogleCloudServicebrokerV1alpha1DeleteServiceInstanceResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def servicebroker_projects_brokers_v2_service_instances_delete_without_preload_content(
        self,
        parent: Annotated[StrictStr, Field(description="Parent must match `projects/[PROJECT_ID]/brokers/[BROKER_ID]`.")],
        instance_id: Annotated[StrictStr, Field(description="The instance id to deprovision.")],
        upload_protocol: Annotated[Optional[StrictStr], Field(description="Upload protocol for media (e.g. \"raw\", \"multipart\").")] = None,
        quota_user: Annotated[Optional[StrictStr], Field(description="Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.")] = None,
        pretty_print: Annotated[Optional[StrictBool], Field(description="Returns response with indentations and line breaks.")] = None,
        upload_type: Annotated[Optional[StrictStr], Field(description="Legacy upload protocol for media (e.g. \"media\", \"multipart\").")] = None,
        fields: Annotated[Optional[StrictStr], Field(description="Selector specifying which fields to include in a partial response.")] = None,
        param_callback: Annotated[Optional[StrictStr], Field(description="JSONP")] = None,
        oauth_token: Annotated[Optional[StrictStr], Field(description="OAuth 2.0 token for the current user.")] = None,
        xgafv: Annotated[Optional[StrictStr], Field(description="V1 error format.")] = None,
        alt: Annotated[Optional[StrictStr], Field(description="Data format for response.")] = None,
        key: Annotated[Optional[StrictStr], Field(description="API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.")] = None,
        access_token: Annotated[Optional[StrictStr], Field(description="OAuth access token.")] = None,
        accepts_incomplete: Annotated[Optional[StrictBool], Field(description="See CreateServiceInstanceRequest for details.")] = None,
        plan_id: Annotated[Optional[StrictStr], Field(description="The plan id of the service instance.")] = None,
        service_id: Annotated[Optional[StrictStr], Field(description="The service id of the service instance.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """servicebroker_projects_brokers_v2_service_instances_delete

        Deprovisions a service instance. For synchronous/asynchronous request details see CreateServiceInstance method. If service instance does not exist HTTP 410 status will be returned.

        :param parent: Parent must match `projects/[PROJECT_ID]/brokers/[BROKER_ID]`. (required)
        :type parent: str
        :param instance_id: The instance id to deprovision. (required)
        :type instance_id: str
        :param upload_protocol: Upload protocol for media (e.g. \"raw\", \"multipart\").
        :type upload_protocol: str
        :param quota_user: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
        :type quota_user: str
        :param pretty_print: Returns response with indentations and line breaks.
        :type pretty_print: bool
        :param upload_type: Legacy upload protocol for media (e.g. \"media\", \"multipart\").
        :type upload_type: str
        :param fields: Selector specifying which fields to include in a partial response.
        :type fields: str
        :param param_callback: JSONP
        :type param_callback: str
        :param oauth_token: OAuth 2.0 token for the current user.
        :type oauth_token: str
        :param xgafv: V1 error format.
        :type xgafv: str
        :param alt: Data format for response.
        :type alt: str
        :param key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
        :type key: str
        :param access_token: OAuth access token.
        :type access_token: str
        :param accepts_incomplete: See CreateServiceInstanceRequest for details.
        :type accepts_incomplete: bool
        :param plan_id: The plan id of the service instance.
        :type plan_id: str
        :param service_id: The service id of the service instance.
        :type service_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._servicebroker_projects_brokers_v2_service_instances_delete_serialize(
            parent=parent,
            instance_id=instance_id,
            upload_protocol=upload_protocol,
            quota_user=quota_user,
            pretty_print=pretty_print,
            upload_type=upload_type,
            fields=fields,
            param_callback=param_callback,
            oauth_token=oauth_token,
            xgafv=xgafv,
            alt=alt,
            key=key,
            access_token=access_token,
            accepts_incomplete=accepts_incomplete,
            plan_id=plan_id,
            service_id=service_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GoogleCloudServicebrokerV1alpha1DeleteServiceInstanceResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _servicebroker_projects_brokers_v2_service_instances_delete_serialize(
        self,
        parent,
        instance_id,
        upload_protocol,
        quota_user,
        pretty_print,
        upload_type,
        fields,
        param_callback,
        oauth_token,
        xgafv,
        alt,
        key,
        access_token,
        accepts_incomplete,
        plan_id,
        service_id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if parent is not None:
            _path_params['parent'] = parent
        if instance_id is not None:
            _path_params['instanceId'] = instance_id
        # process the query parameters
        if upload_protocol is not None:
            
            _query_params.append(('upload_protocol', upload_protocol))
            
        if quota_user is not None:
            
            _query_params.append(('quotaUser', quota_user))
            
        if pretty_print is not None:
            
            _query_params.append(('prettyPrint', pretty_print))
            
        if upload_type is not None:
            
            _query_params.append(('uploadType', upload_type))
            
        if fields is not None:
            
            _query_params.append(('fields', fields))
            
        if param_callback is not None:
            
            _query_params.append(('callback', param_callback))
            
        if oauth_token is not None:
            
            _query_params.append(('oauth_token', oauth_token))
            
        if xgafv is not None:
            
            _query_params.append(('$.xgafv', xgafv))
            
        if alt is not None:
            
            _query_params.append(('alt', alt))
            
        if key is not None:
            
            _query_params.append(('key', key))
            
        if access_token is not None:
            
            _query_params.append(('access_token', access_token))
            
        if accepts_incomplete is not None:
            
            _query_params.append(('acceptsIncomplete', accepts_incomplete))
            
        if plan_id is not None:
            
            _query_params.append(('planId', plan_id))
            
        if service_id is not None:
            
            _query_params.append(('serviceId', service_id))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    '*/*'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'Oauth2c', 
            'Oauth2'
        ]

        return self.api_client.param_serialize(
            method='DELETE',
            resource_path='/v1alpha1/{parent}/v2/service_instances/{instanceId}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def servicebroker_projects_brokers_v2_service_instances_get(
        self,
        name: Annotated[StrictStr, Field(description="The resource name of the instance to return.")],
        upload_protocol: Annotated[Optional[StrictStr], Field(description="Upload protocol for media (e.g. \"raw\", \"multipart\").")] = None,
        quota_user: Annotated[Optional[StrictStr], Field(description="Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.")] = None,
        pretty_print: Annotated[Optional[StrictBool], Field(description="Returns response with indentations and line breaks.")] = None,
        upload_type: Annotated[Optional[StrictStr], Field(description="Legacy upload protocol for media (e.g. \"media\", \"multipart\").")] = None,
        fields: Annotated[Optional[StrictStr], Field(description="Selector specifying which fields to include in a partial response.")] = None,
        param_callback: Annotated[Optional[StrictStr], Field(description="JSONP")] = None,
        oauth_token: Annotated[Optional[StrictStr], Field(description="OAuth 2.0 token for the current user.")] = None,
        xgafv: Annotated[Optional[StrictStr], Field(description="V1 error format.")] = None,
        alt: Annotated[Optional[StrictStr], Field(description="Data format for response.")] = None,
        key: Annotated[Optional[StrictStr], Field(description="API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.")] = None,
        access_token: Annotated[Optional[StrictStr], Field(description="OAuth access token.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> GoogleCloudServicebrokerV1alpha1ServiceInstance:
        """servicebroker_projects_brokers_v2_service_instances_get

        Gets the given service instance from the system. This API is an extension and not part of the OSB spec. Hence the path is a standard Google API URL.

        :param name: The resource name of the instance to return. (required)
        :type name: str
        :param upload_protocol: Upload protocol for media (e.g. \"raw\", \"multipart\").
        :type upload_protocol: str
        :param quota_user: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
        :type quota_user: str
        :param pretty_print: Returns response with indentations and line breaks.
        :type pretty_print: bool
        :param upload_type: Legacy upload protocol for media (e.g. \"media\", \"multipart\").
        :type upload_type: str
        :param fields: Selector specifying which fields to include in a partial response.
        :type fields: str
        :param param_callback: JSONP
        :type param_callback: str
        :param oauth_token: OAuth 2.0 token for the current user.
        :type oauth_token: str
        :param xgafv: V1 error format.
        :type xgafv: str
        :param alt: Data format for response.
        :type alt: str
        :param key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
        :type key: str
        :param access_token: OAuth access token.
        :type access_token: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._servicebroker_projects_brokers_v2_service_instances_get_serialize(
            name=name,
            upload_protocol=upload_protocol,
            quota_user=quota_user,
            pretty_print=pretty_print,
            upload_type=upload_type,
            fields=fields,
            param_callback=param_callback,
            oauth_token=oauth_token,
            xgafv=xgafv,
            alt=alt,
            key=key,
            access_token=access_token,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GoogleCloudServicebrokerV1alpha1ServiceInstance",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def servicebroker_projects_brokers_v2_service_instances_get_with_http_info(
        self,
        name: Annotated[StrictStr, Field(description="The resource name of the instance to return.")],
        upload_protocol: Annotated[Optional[StrictStr], Field(description="Upload protocol for media (e.g. \"raw\", \"multipart\").")] = None,
        quota_user: Annotated[Optional[StrictStr], Field(description="Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.")] = None,
        pretty_print: Annotated[Optional[StrictBool], Field(description="Returns response with indentations and line breaks.")] = None,
        upload_type: Annotated[Optional[StrictStr], Field(description="Legacy upload protocol for media (e.g. \"media\", \"multipart\").")] = None,
        fields: Annotated[Optional[StrictStr], Field(description="Selector specifying which fields to include in a partial response.")] = None,
        param_callback: Annotated[Optional[StrictStr], Field(description="JSONP")] = None,
        oauth_token: Annotated[Optional[StrictStr], Field(description="OAuth 2.0 token for the current user.")] = None,
        xgafv: Annotated[Optional[StrictStr], Field(description="V1 error format.")] = None,
        alt: Annotated[Optional[StrictStr], Field(description="Data format for response.")] = None,
        key: Annotated[Optional[StrictStr], Field(description="API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.")] = None,
        access_token: Annotated[Optional[StrictStr], Field(description="OAuth access token.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[GoogleCloudServicebrokerV1alpha1ServiceInstance]:
        """servicebroker_projects_brokers_v2_service_instances_get

        Gets the given service instance from the system. This API is an extension and not part of the OSB spec. Hence the path is a standard Google API URL.

        :param name: The resource name of the instance to return. (required)
        :type name: str
        :param upload_protocol: Upload protocol for media (e.g. \"raw\", \"multipart\").
        :type upload_protocol: str
        :param quota_user: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
        :type quota_user: str
        :param pretty_print: Returns response with indentations and line breaks.
        :type pretty_print: bool
        :param upload_type: Legacy upload protocol for media (e.g. \"media\", \"multipart\").
        :type upload_type: str
        :param fields: Selector specifying which fields to include in a partial response.
        :type fields: str
        :param param_callback: JSONP
        :type param_callback: str
        :param oauth_token: OAuth 2.0 token for the current user.
        :type oauth_token: str
        :param xgafv: V1 error format.
        :type xgafv: str
        :param alt: Data format for response.
        :type alt: str
        :param key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
        :type key: str
        :param access_token: OAuth access token.
        :type access_token: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._servicebroker_projects_brokers_v2_service_instances_get_serialize(
            name=name,
            upload_protocol=upload_protocol,
            quota_user=quota_user,
            pretty_print=pretty_print,
            upload_type=upload_type,
            fields=fields,
            param_callback=param_callback,
            oauth_token=oauth_token,
            xgafv=xgafv,
            alt=alt,
            key=key,
            access_token=access_token,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GoogleCloudServicebrokerV1alpha1ServiceInstance",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def servicebroker_projects_brokers_v2_service_instances_get_without_preload_content(
        self,
        name: Annotated[StrictStr, Field(description="The resource name of the instance to return.")],
        upload_protocol: Annotated[Optional[StrictStr], Field(description="Upload protocol for media (e.g. \"raw\", \"multipart\").")] = None,
        quota_user: Annotated[Optional[StrictStr], Field(description="Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.")] = None,
        pretty_print: Annotated[Optional[StrictBool], Field(description="Returns response with indentations and line breaks.")] = None,
        upload_type: Annotated[Optional[StrictStr], Field(description="Legacy upload protocol for media (e.g. \"media\", \"multipart\").")] = None,
        fields: Annotated[Optional[StrictStr], Field(description="Selector specifying which fields to include in a partial response.")] = None,
        param_callback: Annotated[Optional[StrictStr], Field(description="JSONP")] = None,
        oauth_token: Annotated[Optional[StrictStr], Field(description="OAuth 2.0 token for the current user.")] = None,
        xgafv: Annotated[Optional[StrictStr], Field(description="V1 error format.")] = None,
        alt: Annotated[Optional[StrictStr], Field(description="Data format for response.")] = None,
        key: Annotated[Optional[StrictStr], Field(description="API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.")] = None,
        access_token: Annotated[Optional[StrictStr], Field(description="OAuth access token.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """servicebroker_projects_brokers_v2_service_instances_get

        Gets the given service instance from the system. This API is an extension and not part of the OSB spec. Hence the path is a standard Google API URL.

        :param name: The resource name of the instance to return. (required)
        :type name: str
        :param upload_protocol: Upload protocol for media (e.g. \"raw\", \"multipart\").
        :type upload_protocol: str
        :param quota_user: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
        :type quota_user: str
        :param pretty_print: Returns response with indentations and line breaks.
        :type pretty_print: bool
        :param upload_type: Legacy upload protocol for media (e.g. \"media\", \"multipart\").
        :type upload_type: str
        :param fields: Selector specifying which fields to include in a partial response.
        :type fields: str
        :param param_callback: JSONP
        :type param_callback: str
        :param oauth_token: OAuth 2.0 token for the current user.
        :type oauth_token: str
        :param xgafv: V1 error format.
        :type xgafv: str
        :param alt: Data format for response.
        :type alt: str
        :param key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
        :type key: str
        :param access_token: OAuth access token.
        :type access_token: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._servicebroker_projects_brokers_v2_service_instances_get_serialize(
            name=name,
            upload_protocol=upload_protocol,
            quota_user=quota_user,
            pretty_print=pretty_print,
            upload_type=upload_type,
            fields=fields,
            param_callback=param_callback,
            oauth_token=oauth_token,
            xgafv=xgafv,
            alt=alt,
            key=key,
            access_token=access_token,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GoogleCloudServicebrokerV1alpha1ServiceInstance",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _servicebroker_projects_brokers_v2_service_instances_get_serialize(
        self,
        name,
        upload_protocol,
        quota_user,
        pretty_print,
        upload_type,
        fields,
        param_callback,
        oauth_token,
        xgafv,
        alt,
        key,
        access_token,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if name is not None:
            _path_params['name'] = name
        # process the query parameters
        if upload_protocol is not None:
            
            _query_params.append(('upload_protocol', upload_protocol))
            
        if quota_user is not None:
            
            _query_params.append(('quotaUser', quota_user))
            
        if pretty_print is not None:
            
            _query_params.append(('prettyPrint', pretty_print))
            
        if upload_type is not None:
            
            _query_params.append(('uploadType', upload_type))
            
        if fields is not None:
            
            _query_params.append(('fields', fields))
            
        if param_callback is not None:
            
            _query_params.append(('callback', param_callback))
            
        if oauth_token is not None:
            
            _query_params.append(('oauth_token', oauth_token))
            
        if xgafv is not None:
            
            _query_params.append(('$.xgafv', xgafv))
            
        if alt is not None:
            
            _query_params.append(('alt', alt))
            
        if key is not None:
            
            _query_params.append(('key', key))
            
        if access_token is not None:
            
            _query_params.append(('access_token', access_token))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    '*/*'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'Oauth2c', 
            'Oauth2'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/v1alpha1/{name}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def servicebroker_projects_brokers_v2_service_instances_get_last_operation(
        self,
        parent: Annotated[StrictStr, Field(description="Parent must match `projects/[PROJECT_ID]/brokers/[BROKER_ID]`.")],
        instance_id: Annotated[StrictStr, Field(description="The instance id for which to return the last operation status.")],
        upload_protocol: Annotated[Optional[StrictStr], Field(description="Upload protocol for media (e.g. \"raw\", \"multipart\").")] = None,
        quota_user: Annotated[Optional[StrictStr], Field(description="Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.")] = None,
        pretty_print: Annotated[Optional[StrictBool], Field(description="Returns response with indentations and line breaks.")] = None,
        upload_type: Annotated[Optional[StrictStr], Field(description="Legacy upload protocol for media (e.g. \"media\", \"multipart\").")] = None,
        fields: Annotated[Optional[StrictStr], Field(description="Selector specifying which fields to include in a partial response.")] = None,
        param_callback: Annotated[Optional[StrictStr], Field(description="JSONP")] = None,
        oauth_token: Annotated[Optional[StrictStr], Field(description="OAuth 2.0 token for the current user.")] = None,
        xgafv: Annotated[Optional[StrictStr], Field(description="V1 error format.")] = None,
        alt: Annotated[Optional[StrictStr], Field(description="Data format for response.")] = None,
        key: Annotated[Optional[StrictStr], Field(description="API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.")] = None,
        access_token: Annotated[Optional[StrictStr], Field(description="OAuth access token.")] = None,
        operation: Annotated[Optional[StrictStr], Field(description="If `operation` was returned during mutation operation, this field must be populated with the provided value.")] = None,
        plan_id: Annotated[Optional[StrictStr], Field(description="Plan id.")] = None,
        service_id: Annotated[Optional[StrictStr], Field(description="Service id.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> GoogleCloudServicebrokerV1alpha1Operation:
        """servicebroker_projects_brokers_v2_service_instances_get_last_operation

        Returns the state of the last operation for the service instance. Only last (or current) operation can be polled.

        :param parent: Parent must match `projects/[PROJECT_ID]/brokers/[BROKER_ID]`. (required)
        :type parent: str
        :param instance_id: The instance id for which to return the last operation status. (required)
        :type instance_id: str
        :param upload_protocol: Upload protocol for media (e.g. \"raw\", \"multipart\").
        :type upload_protocol: str
        :param quota_user: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
        :type quota_user: str
        :param pretty_print: Returns response with indentations and line breaks.
        :type pretty_print: bool
        :param upload_type: Legacy upload protocol for media (e.g. \"media\", \"multipart\").
        :type upload_type: str
        :param fields: Selector specifying which fields to include in a partial response.
        :type fields: str
        :param param_callback: JSONP
        :type param_callback: str
        :param oauth_token: OAuth 2.0 token for the current user.
        :type oauth_token: str
        :param xgafv: V1 error format.
        :type xgafv: str
        :param alt: Data format for response.
        :type alt: str
        :param key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
        :type key: str
        :param access_token: OAuth access token.
        :type access_token: str
        :param operation: If `operation` was returned during mutation operation, this field must be populated with the provided value.
        :type operation: str
        :param plan_id: Plan id.
        :type plan_id: str
        :param service_id: Service id.
        :type service_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._servicebroker_projects_brokers_v2_service_instances_get_last_operation_serialize(
            parent=parent,
            instance_id=instance_id,
            upload_protocol=upload_protocol,
            quota_user=quota_user,
            pretty_print=pretty_print,
            upload_type=upload_type,
            fields=fields,
            param_callback=param_callback,
            oauth_token=oauth_token,
            xgafv=xgafv,
            alt=alt,
            key=key,
            access_token=access_token,
            operation=operation,
            plan_id=plan_id,
            service_id=service_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GoogleCloudServicebrokerV1alpha1Operation",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def servicebroker_projects_brokers_v2_service_instances_get_last_operation_with_http_info(
        self,
        parent: Annotated[StrictStr, Field(description="Parent must match `projects/[PROJECT_ID]/brokers/[BROKER_ID]`.")],
        instance_id: Annotated[StrictStr, Field(description="The instance id for which to return the last operation status.")],
        upload_protocol: Annotated[Optional[StrictStr], Field(description="Upload protocol for media (e.g. \"raw\", \"multipart\").")] = None,
        quota_user: Annotated[Optional[StrictStr], Field(description="Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.")] = None,
        pretty_print: Annotated[Optional[StrictBool], Field(description="Returns response with indentations and line breaks.")] = None,
        upload_type: Annotated[Optional[StrictStr], Field(description="Legacy upload protocol for media (e.g. \"media\", \"multipart\").")] = None,
        fields: Annotated[Optional[StrictStr], Field(description="Selector specifying which fields to include in a partial response.")] = None,
        param_callback: Annotated[Optional[StrictStr], Field(description="JSONP")] = None,
        oauth_token: Annotated[Optional[StrictStr], Field(description="OAuth 2.0 token for the current user.")] = None,
        xgafv: Annotated[Optional[StrictStr], Field(description="V1 error format.")] = None,
        alt: Annotated[Optional[StrictStr], Field(description="Data format for response.")] = None,
        key: Annotated[Optional[StrictStr], Field(description="API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.")] = None,
        access_token: Annotated[Optional[StrictStr], Field(description="OAuth access token.")] = None,
        operation: Annotated[Optional[StrictStr], Field(description="If `operation` was returned during mutation operation, this field must be populated with the provided value.")] = None,
        plan_id: Annotated[Optional[StrictStr], Field(description="Plan id.")] = None,
        service_id: Annotated[Optional[StrictStr], Field(description="Service id.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[GoogleCloudServicebrokerV1alpha1Operation]:
        """servicebroker_projects_brokers_v2_service_instances_get_last_operation

        Returns the state of the last operation for the service instance. Only last (or current) operation can be polled.

        :param parent: Parent must match `projects/[PROJECT_ID]/brokers/[BROKER_ID]`. (required)
        :type parent: str
        :param instance_id: The instance id for which to return the last operation status. (required)
        :type instance_id: str
        :param upload_protocol: Upload protocol for media (e.g. \"raw\", \"multipart\").
        :type upload_protocol: str
        :param quota_user: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
        :type quota_user: str
        :param pretty_print: Returns response with indentations and line breaks.
        :type pretty_print: bool
        :param upload_type: Legacy upload protocol for media (e.g. \"media\", \"multipart\").
        :type upload_type: str
        :param fields: Selector specifying which fields to include in a partial response.
        :type fields: str
        :param param_callback: JSONP
        :type param_callback: str
        :param oauth_token: OAuth 2.0 token for the current user.
        :type oauth_token: str
        :param xgafv: V1 error format.
        :type xgafv: str
        :param alt: Data format for response.
        :type alt: str
        :param key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
        :type key: str
        :param access_token: OAuth access token.
        :type access_token: str
        :param operation: If `operation` was returned during mutation operation, this field must be populated with the provided value.
        :type operation: str
        :param plan_id: Plan id.
        :type plan_id: str
        :param service_id: Service id.
        :type service_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._servicebroker_projects_brokers_v2_service_instances_get_last_operation_serialize(
            parent=parent,
            instance_id=instance_id,
            upload_protocol=upload_protocol,
            quota_user=quota_user,
            pretty_print=pretty_print,
            upload_type=upload_type,
            fields=fields,
            param_callback=param_callback,
            oauth_token=oauth_token,
            xgafv=xgafv,
            alt=alt,
            key=key,
            access_token=access_token,
            operation=operation,
            plan_id=plan_id,
            service_id=service_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GoogleCloudServicebrokerV1alpha1Operation",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def servicebroker_projects_brokers_v2_service_instances_get_last_operation_without_preload_content(
        self,
        parent: Annotated[StrictStr, Field(description="Parent must match `projects/[PROJECT_ID]/brokers/[BROKER_ID]`.")],
        instance_id: Annotated[StrictStr, Field(description="The instance id for which to return the last operation status.")],
        upload_protocol: Annotated[Optional[StrictStr], Field(description="Upload protocol for media (e.g. \"raw\", \"multipart\").")] = None,
        quota_user: Annotated[Optional[StrictStr], Field(description="Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.")] = None,
        pretty_print: Annotated[Optional[StrictBool], Field(description="Returns response with indentations and line breaks.")] = None,
        upload_type: Annotated[Optional[StrictStr], Field(description="Legacy upload protocol for media (e.g. \"media\", \"multipart\").")] = None,
        fields: Annotated[Optional[StrictStr], Field(description="Selector specifying which fields to include in a partial response.")] = None,
        param_callback: Annotated[Optional[StrictStr], Field(description="JSONP")] = None,
        oauth_token: Annotated[Optional[StrictStr], Field(description="OAuth 2.0 token for the current user.")] = None,
        xgafv: Annotated[Optional[StrictStr], Field(description="V1 error format.")] = None,
        alt: Annotated[Optional[StrictStr], Field(description="Data format for response.")] = None,
        key: Annotated[Optional[StrictStr], Field(description="API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.")] = None,
        access_token: Annotated[Optional[StrictStr], Field(description="OAuth access token.")] = None,
        operation: Annotated[Optional[StrictStr], Field(description="If `operation` was returned during mutation operation, this field must be populated with the provided value.")] = None,
        plan_id: Annotated[Optional[StrictStr], Field(description="Plan id.")] = None,
        service_id: Annotated[Optional[StrictStr], Field(description="Service id.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """servicebroker_projects_brokers_v2_service_instances_get_last_operation

        Returns the state of the last operation for the service instance. Only last (or current) operation can be polled.

        :param parent: Parent must match `projects/[PROJECT_ID]/brokers/[BROKER_ID]`. (required)
        :type parent: str
        :param instance_id: The instance id for which to return the last operation status. (required)
        :type instance_id: str
        :param upload_protocol: Upload protocol for media (e.g. \"raw\", \"multipart\").
        :type upload_protocol: str
        :param quota_user: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
        :type quota_user: str
        :param pretty_print: Returns response with indentations and line breaks.
        :type pretty_print: bool
        :param upload_type: Legacy upload protocol for media (e.g. \"media\", \"multipart\").
        :type upload_type: str
        :param fields: Selector specifying which fields to include in a partial response.
        :type fields: str
        :param param_callback: JSONP
        :type param_callback: str
        :param oauth_token: OAuth 2.0 token for the current user.
        :type oauth_token: str
        :param xgafv: V1 error format.
        :type xgafv: str
        :param alt: Data format for response.
        :type alt: str
        :param key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
        :type key: str
        :param access_token: OAuth access token.
        :type access_token: str
        :param operation: If `operation` was returned during mutation operation, this field must be populated with the provided value.
        :type operation: str
        :param plan_id: Plan id.
        :type plan_id: str
        :param service_id: Service id.
        :type service_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._servicebroker_projects_brokers_v2_service_instances_get_last_operation_serialize(
            parent=parent,
            instance_id=instance_id,
            upload_protocol=upload_protocol,
            quota_user=quota_user,
            pretty_print=pretty_print,
            upload_type=upload_type,
            fields=fields,
            param_callback=param_callback,
            oauth_token=oauth_token,
            xgafv=xgafv,
            alt=alt,
            key=key,
            access_token=access_token,
            operation=operation,
            plan_id=plan_id,
            service_id=service_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GoogleCloudServicebrokerV1alpha1Operation",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _servicebroker_projects_brokers_v2_service_instances_get_last_operation_serialize(
        self,
        parent,
        instance_id,
        upload_protocol,
        quota_user,
        pretty_print,
        upload_type,
        fields,
        param_callback,
        oauth_token,
        xgafv,
        alt,
        key,
        access_token,
        operation,
        plan_id,
        service_id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if parent is not None:
            _path_params['parent'] = parent
        if instance_id is not None:
            _path_params['instanceId'] = instance_id
        # process the query parameters
        if upload_protocol is not None:
            
            _query_params.append(('upload_protocol', upload_protocol))
            
        if quota_user is not None:
            
            _query_params.append(('quotaUser', quota_user))
            
        if pretty_print is not None:
            
            _query_params.append(('prettyPrint', pretty_print))
            
        if upload_type is not None:
            
            _query_params.append(('uploadType', upload_type))
            
        if fields is not None:
            
            _query_params.append(('fields', fields))
            
        if param_callback is not None:
            
            _query_params.append(('callback', param_callback))
            
        if oauth_token is not None:
            
            _query_params.append(('oauth_token', oauth_token))
            
        if xgafv is not None:
            
            _query_params.append(('$.xgafv', xgafv))
            
        if alt is not None:
            
            _query_params.append(('alt', alt))
            
        if key is not None:
            
            _query_params.append(('key', key))
            
        if access_token is not None:
            
            _query_params.append(('access_token', access_token))
            
        if operation is not None:
            
            _query_params.append(('operation', operation))
            
        if plan_id is not None:
            
            _query_params.append(('planId', plan_id))
            
        if service_id is not None:
            
            _query_params.append(('serviceId', service_id))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    '*/*'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'Oauth2c', 
            'Oauth2'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/v1alpha1/{parent}/v2/service_instances/{instanceId}/last_operation',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def servicebroker_projects_brokers_v2_service_instances_patch(
        self,
        parent: Annotated[StrictStr, Field(description="Parent must match `projects/[PROJECT_ID]/brokers/[BROKER_ID]`.")],
        instance_id: Annotated[StrictStr, Field(description="The id of the service instance. Must be unique within GCP project. Maximum length is 64, GUID recommended. Required.")],
        upload_protocol: Annotated[Optional[StrictStr], Field(description="Upload protocol for media (e.g. \"raw\", \"multipart\").")] = None,
        quota_user: Annotated[Optional[StrictStr], Field(description="Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.")] = None,
        pretty_print: Annotated[Optional[StrictBool], Field(description="Returns response with indentations and line breaks.")] = None,
        upload_type: Annotated[Optional[StrictStr], Field(description="Legacy upload protocol for media (e.g. \"media\", \"multipart\").")] = None,
        fields: Annotated[Optional[StrictStr], Field(description="Selector specifying which fields to include in a partial response.")] = None,
        param_callback: Annotated[Optional[StrictStr], Field(description="JSONP")] = None,
        oauth_token: Annotated[Optional[StrictStr], Field(description="OAuth 2.0 token for the current user.")] = None,
        xgafv: Annotated[Optional[StrictStr], Field(description="V1 error format.")] = None,
        alt: Annotated[Optional[StrictStr], Field(description="Data format for response.")] = None,
        key: Annotated[Optional[StrictStr], Field(description="API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.")] = None,
        access_token: Annotated[Optional[StrictStr], Field(description="OAuth access token.")] = None,
        accepts_incomplete: Annotated[Optional[StrictBool], Field(description="See CreateServiceInstanceRequest for details.")] = None,
        google_cloud_servicebroker_v1alpha1_service_instance: Optional[GoogleCloudServicebrokerV1alpha1ServiceInstance] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> GoogleCloudServicebrokerV1alpha1UpdateServiceInstanceResponse:
        """servicebroker_projects_brokers_v2_service_instances_patch

        Updates an existing service instance. See CreateServiceInstance for possible response codes.

        :param parent: Parent must match `projects/[PROJECT_ID]/brokers/[BROKER_ID]`. (required)
        :type parent: str
        :param instance_id: The id of the service instance. Must be unique within GCP project. Maximum length is 64, GUID recommended. Required. (required)
        :type instance_id: str
        :param upload_protocol: Upload protocol for media (e.g. \"raw\", \"multipart\").
        :type upload_protocol: str
        :param quota_user: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
        :type quota_user: str
        :param pretty_print: Returns response with indentations and line breaks.
        :type pretty_print: bool
        :param upload_type: Legacy upload protocol for media (e.g. \"media\", \"multipart\").
        :type upload_type: str
        :param fields: Selector specifying which fields to include in a partial response.
        :type fields: str
        :param param_callback: JSONP
        :type param_callback: str
        :param oauth_token: OAuth 2.0 token for the current user.
        :type oauth_token: str
        :param xgafv: V1 error format.
        :type xgafv: str
        :param alt: Data format for response.
        :type alt: str
        :param key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
        :type key: str
        :param access_token: OAuth access token.
        :type access_token: str
        :param accepts_incomplete: See CreateServiceInstanceRequest for details.
        :type accepts_incomplete: bool
        :param google_cloud_servicebroker_v1alpha1_service_instance:
        :type google_cloud_servicebroker_v1alpha1_service_instance: GoogleCloudServicebrokerV1alpha1ServiceInstance
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._servicebroker_projects_brokers_v2_service_instances_patch_serialize(
            parent=parent,
            instance_id=instance_id,
            upload_protocol=upload_protocol,
            quota_user=quota_user,
            pretty_print=pretty_print,
            upload_type=upload_type,
            fields=fields,
            param_callback=param_callback,
            oauth_token=oauth_token,
            xgafv=xgafv,
            alt=alt,
            key=key,
            access_token=access_token,
            accepts_incomplete=accepts_incomplete,
            google_cloud_servicebroker_v1alpha1_service_instance=google_cloud_servicebroker_v1alpha1_service_instance,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GoogleCloudServicebrokerV1alpha1UpdateServiceInstanceResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def servicebroker_projects_brokers_v2_service_instances_patch_with_http_info(
        self,
        parent: Annotated[StrictStr, Field(description="Parent must match `projects/[PROJECT_ID]/brokers/[BROKER_ID]`.")],
        instance_id: Annotated[StrictStr, Field(description="The id of the service instance. Must be unique within GCP project. Maximum length is 64, GUID recommended. Required.")],
        upload_protocol: Annotated[Optional[StrictStr], Field(description="Upload protocol for media (e.g. \"raw\", \"multipart\").")] = None,
        quota_user: Annotated[Optional[StrictStr], Field(description="Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.")] = None,
        pretty_print: Annotated[Optional[StrictBool], Field(description="Returns response with indentations and line breaks.")] = None,
        upload_type: Annotated[Optional[StrictStr], Field(description="Legacy upload protocol for media (e.g. \"media\", \"multipart\").")] = None,
        fields: Annotated[Optional[StrictStr], Field(description="Selector specifying which fields to include in a partial response.")] = None,
        param_callback: Annotated[Optional[StrictStr], Field(description="JSONP")] = None,
        oauth_token: Annotated[Optional[StrictStr], Field(description="OAuth 2.0 token for the current user.")] = None,
        xgafv: Annotated[Optional[StrictStr], Field(description="V1 error format.")] = None,
        alt: Annotated[Optional[StrictStr], Field(description="Data format for response.")] = None,
        key: Annotated[Optional[StrictStr], Field(description="API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.")] = None,
        access_token: Annotated[Optional[StrictStr], Field(description="OAuth access token.")] = None,
        accepts_incomplete: Annotated[Optional[StrictBool], Field(description="See CreateServiceInstanceRequest for details.")] = None,
        google_cloud_servicebroker_v1alpha1_service_instance: Optional[GoogleCloudServicebrokerV1alpha1ServiceInstance] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[GoogleCloudServicebrokerV1alpha1UpdateServiceInstanceResponse]:
        """servicebroker_projects_brokers_v2_service_instances_patch

        Updates an existing service instance. See CreateServiceInstance for possible response codes.

        :param parent: Parent must match `projects/[PROJECT_ID]/brokers/[BROKER_ID]`. (required)
        :type parent: str
        :param instance_id: The id of the service instance. Must be unique within GCP project. Maximum length is 64, GUID recommended. Required. (required)
        :type instance_id: str
        :param upload_protocol: Upload protocol for media (e.g. \"raw\", \"multipart\").
        :type upload_protocol: str
        :param quota_user: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
        :type quota_user: str
        :param pretty_print: Returns response with indentations and line breaks.
        :type pretty_print: bool
        :param upload_type: Legacy upload protocol for media (e.g. \"media\", \"multipart\").
        :type upload_type: str
        :param fields: Selector specifying which fields to include in a partial response.
        :type fields: str
        :param param_callback: JSONP
        :type param_callback: str
        :param oauth_token: OAuth 2.0 token for the current user.
        :type oauth_token: str
        :param xgafv: V1 error format.
        :type xgafv: str
        :param alt: Data format for response.
        :type alt: str
        :param key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
        :type key: str
        :param access_token: OAuth access token.
        :type access_token: str
        :param accepts_incomplete: See CreateServiceInstanceRequest for details.
        :type accepts_incomplete: bool
        :param google_cloud_servicebroker_v1alpha1_service_instance:
        :type google_cloud_servicebroker_v1alpha1_service_instance: GoogleCloudServicebrokerV1alpha1ServiceInstance
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._servicebroker_projects_brokers_v2_service_instances_patch_serialize(
            parent=parent,
            instance_id=instance_id,
            upload_protocol=upload_protocol,
            quota_user=quota_user,
            pretty_print=pretty_print,
            upload_type=upload_type,
            fields=fields,
            param_callback=param_callback,
            oauth_token=oauth_token,
            xgafv=xgafv,
            alt=alt,
            key=key,
            access_token=access_token,
            accepts_incomplete=accepts_incomplete,
            google_cloud_servicebroker_v1alpha1_service_instance=google_cloud_servicebroker_v1alpha1_service_instance,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GoogleCloudServicebrokerV1alpha1UpdateServiceInstanceResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def servicebroker_projects_brokers_v2_service_instances_patch_without_preload_content(
        self,
        parent: Annotated[StrictStr, Field(description="Parent must match `projects/[PROJECT_ID]/brokers/[BROKER_ID]`.")],
        instance_id: Annotated[StrictStr, Field(description="The id of the service instance. Must be unique within GCP project. Maximum length is 64, GUID recommended. Required.")],
        upload_protocol: Annotated[Optional[StrictStr], Field(description="Upload protocol for media (e.g. \"raw\", \"multipart\").")] = None,
        quota_user: Annotated[Optional[StrictStr], Field(description="Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.")] = None,
        pretty_print: Annotated[Optional[StrictBool], Field(description="Returns response with indentations and line breaks.")] = None,
        upload_type: Annotated[Optional[StrictStr], Field(description="Legacy upload protocol for media (e.g. \"media\", \"multipart\").")] = None,
        fields: Annotated[Optional[StrictStr], Field(description="Selector specifying which fields to include in a partial response.")] = None,
        param_callback: Annotated[Optional[StrictStr], Field(description="JSONP")] = None,
        oauth_token: Annotated[Optional[StrictStr], Field(description="OAuth 2.0 token for the current user.")] = None,
        xgafv: Annotated[Optional[StrictStr], Field(description="V1 error format.")] = None,
        alt: Annotated[Optional[StrictStr], Field(description="Data format for response.")] = None,
        key: Annotated[Optional[StrictStr], Field(description="API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.")] = None,
        access_token: Annotated[Optional[StrictStr], Field(description="OAuth access token.")] = None,
        accepts_incomplete: Annotated[Optional[StrictBool], Field(description="See CreateServiceInstanceRequest for details.")] = None,
        google_cloud_servicebroker_v1alpha1_service_instance: Optional[GoogleCloudServicebrokerV1alpha1ServiceInstance] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """servicebroker_projects_brokers_v2_service_instances_patch

        Updates an existing service instance. See CreateServiceInstance for possible response codes.

        :param parent: Parent must match `projects/[PROJECT_ID]/brokers/[BROKER_ID]`. (required)
        :type parent: str
        :param instance_id: The id of the service instance. Must be unique within GCP project. Maximum length is 64, GUID recommended. Required. (required)
        :type instance_id: str
        :param upload_protocol: Upload protocol for media (e.g. \"raw\", \"multipart\").
        :type upload_protocol: str
        :param quota_user: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
        :type quota_user: str
        :param pretty_print: Returns response with indentations and line breaks.
        :type pretty_print: bool
        :param upload_type: Legacy upload protocol for media (e.g. \"media\", \"multipart\").
        :type upload_type: str
        :param fields: Selector specifying which fields to include in a partial response.
        :type fields: str
        :param param_callback: JSONP
        :type param_callback: str
        :param oauth_token: OAuth 2.0 token for the current user.
        :type oauth_token: str
        :param xgafv: V1 error format.
        :type xgafv: str
        :param alt: Data format for response.
        :type alt: str
        :param key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
        :type key: str
        :param access_token: OAuth access token.
        :type access_token: str
        :param accepts_incomplete: See CreateServiceInstanceRequest for details.
        :type accepts_incomplete: bool
        :param google_cloud_servicebroker_v1alpha1_service_instance:
        :type google_cloud_servicebroker_v1alpha1_service_instance: GoogleCloudServicebrokerV1alpha1ServiceInstance
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._servicebroker_projects_brokers_v2_service_instances_patch_serialize(
            parent=parent,
            instance_id=instance_id,
            upload_protocol=upload_protocol,
            quota_user=quota_user,
            pretty_print=pretty_print,
            upload_type=upload_type,
            fields=fields,
            param_callback=param_callback,
            oauth_token=oauth_token,
            xgafv=xgafv,
            alt=alt,
            key=key,
            access_token=access_token,
            accepts_incomplete=accepts_incomplete,
            google_cloud_servicebroker_v1alpha1_service_instance=google_cloud_servicebroker_v1alpha1_service_instance,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GoogleCloudServicebrokerV1alpha1UpdateServiceInstanceResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _servicebroker_projects_brokers_v2_service_instances_patch_serialize(
        self,
        parent,
        instance_id,
        upload_protocol,
        quota_user,
        pretty_print,
        upload_type,
        fields,
        param_callback,
        oauth_token,
        xgafv,
        alt,
        key,
        access_token,
        accepts_incomplete,
        google_cloud_servicebroker_v1alpha1_service_instance,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if parent is not None:
            _path_params['parent'] = parent
        if instance_id is not None:
            _path_params['instance_id'] = instance_id
        # process the query parameters
        if upload_protocol is not None:
            
            _query_params.append(('upload_protocol', upload_protocol))
            
        if quota_user is not None:
            
            _query_params.append(('quotaUser', quota_user))
            
        if pretty_print is not None:
            
            _query_params.append(('prettyPrint', pretty_print))
            
        if upload_type is not None:
            
            _query_params.append(('uploadType', upload_type))
            
        if fields is not None:
            
            _query_params.append(('fields', fields))
            
        if param_callback is not None:
            
            _query_params.append(('callback', param_callback))
            
        if oauth_token is not None:
            
            _query_params.append(('oauth_token', oauth_token))
            
        if xgafv is not None:
            
            _query_params.append(('$.xgafv', xgafv))
            
        if alt is not None:
            
            _query_params.append(('alt', alt))
            
        if key is not None:
            
            _query_params.append(('key', key))
            
        if access_token is not None:
            
            _query_params.append(('access_token', access_token))
            
        if accepts_incomplete is not None:
            
            _query_params.append(('acceptsIncomplete', accepts_incomplete))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if google_cloud_servicebroker_v1alpha1_service_instance is not None:
            _body_params = google_cloud_servicebroker_v1alpha1_service_instance


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    '*/*'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'Oauth2c', 
            'Oauth2'
        ]

        return self.api_client.param_serialize(
            method='PATCH',
            resource_path='/v1alpha1/{parent}/v2/service_instances/{instance_id}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def servicebroker_projects_brokers_v2_service_instances_service_bindings_create(
        self,
        parent: Annotated[StrictStr, Field(description="The GCP container. Must match `projects/[PROJECT_ID]/brokers/[BROKER_ID]`.")],
        instance_id: Annotated[StrictStr, Field(description="The service instance to which to bind.")],
        binding_id: Annotated[StrictStr, Field(description="The id of the binding. Must be unique within GCP project. Maximum length is 64, GUID recommended. Required.")],
        upload_protocol: Annotated[Optional[StrictStr], Field(description="Upload protocol for media (e.g. \"raw\", \"multipart\").")] = None,
        quota_user: Annotated[Optional[StrictStr], Field(description="Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.")] = None,
        pretty_print: Annotated[Optional[StrictBool], Field(description="Returns response with indentations and line breaks.")] = None,
        upload_type: Annotated[Optional[StrictStr], Field(description="Legacy upload protocol for media (e.g. \"media\", \"multipart\").")] = None,
        fields: Annotated[Optional[StrictStr], Field(description="Selector specifying which fields to include in a partial response.")] = None,
        param_callback: Annotated[Optional[StrictStr], Field(description="JSONP")] = None,
        oauth_token: Annotated[Optional[StrictStr], Field(description="OAuth 2.0 token for the current user.")] = None,
        xgafv: Annotated[Optional[StrictStr], Field(description="V1 error format.")] = None,
        alt: Annotated[Optional[StrictStr], Field(description="Data format for response.")] = None,
        key: Annotated[Optional[StrictStr], Field(description="API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.")] = None,
        access_token: Annotated[Optional[StrictStr], Field(description="OAuth access token.")] = None,
        accepts_incomplete: Annotated[Optional[StrictBool], Field(description="See CreateServiceInstanceRequest for details.")] = None,
        google_cloud_servicebroker_v1alpha1_binding: Optional[GoogleCloudServicebrokerV1alpha1Binding] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> GoogleCloudServicebrokerV1alpha1CreateBindingResponse:
        """servicebroker_projects_brokers_v2_service_instances_service_bindings_create

        CreateBinding generates a service binding to an existing service instance. See ProviServiceInstance for async operation details.

        :param parent: The GCP container. Must match `projects/[PROJECT_ID]/brokers/[BROKER_ID]`. (required)
        :type parent: str
        :param instance_id: The service instance to which to bind. (required)
        :type instance_id: str
        :param binding_id: The id of the binding. Must be unique within GCP project. Maximum length is 64, GUID recommended. Required. (required)
        :type binding_id: str
        :param upload_protocol: Upload protocol for media (e.g. \"raw\", \"multipart\").
        :type upload_protocol: str
        :param quota_user: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
        :type quota_user: str
        :param pretty_print: Returns response with indentations and line breaks.
        :type pretty_print: bool
        :param upload_type: Legacy upload protocol for media (e.g. \"media\", \"multipart\").
        :type upload_type: str
        :param fields: Selector specifying which fields to include in a partial response.
        :type fields: str
        :param param_callback: JSONP
        :type param_callback: str
        :param oauth_token: OAuth 2.0 token for the current user.
        :type oauth_token: str
        :param xgafv: V1 error format.
        :type xgafv: str
        :param alt: Data format for response.
        :type alt: str
        :param key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
        :type key: str
        :param access_token: OAuth access token.
        :type access_token: str
        :param accepts_incomplete: See CreateServiceInstanceRequest for details.
        :type accepts_incomplete: bool
        :param google_cloud_servicebroker_v1alpha1_binding:
        :type google_cloud_servicebroker_v1alpha1_binding: GoogleCloudServicebrokerV1alpha1Binding
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._servicebroker_projects_brokers_v2_service_instances_service_bindings_create_serialize(
            parent=parent,
            instance_id=instance_id,
            binding_id=binding_id,
            upload_protocol=upload_protocol,
            quota_user=quota_user,
            pretty_print=pretty_print,
            upload_type=upload_type,
            fields=fields,
            param_callback=param_callback,
            oauth_token=oauth_token,
            xgafv=xgafv,
            alt=alt,
            key=key,
            access_token=access_token,
            accepts_incomplete=accepts_incomplete,
            google_cloud_servicebroker_v1alpha1_binding=google_cloud_servicebroker_v1alpha1_binding,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GoogleCloudServicebrokerV1alpha1CreateBindingResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def servicebroker_projects_brokers_v2_service_instances_service_bindings_create_with_http_info(
        self,
        parent: Annotated[StrictStr, Field(description="The GCP container. Must match `projects/[PROJECT_ID]/brokers/[BROKER_ID]`.")],
        instance_id: Annotated[StrictStr, Field(description="The service instance to which to bind.")],
        binding_id: Annotated[StrictStr, Field(description="The id of the binding. Must be unique within GCP project. Maximum length is 64, GUID recommended. Required.")],
        upload_protocol: Annotated[Optional[StrictStr], Field(description="Upload protocol for media (e.g. \"raw\", \"multipart\").")] = None,
        quota_user: Annotated[Optional[StrictStr], Field(description="Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.")] = None,
        pretty_print: Annotated[Optional[StrictBool], Field(description="Returns response with indentations and line breaks.")] = None,
        upload_type: Annotated[Optional[StrictStr], Field(description="Legacy upload protocol for media (e.g. \"media\", \"multipart\").")] = None,
        fields: Annotated[Optional[StrictStr], Field(description="Selector specifying which fields to include in a partial response.")] = None,
        param_callback: Annotated[Optional[StrictStr], Field(description="JSONP")] = None,
        oauth_token: Annotated[Optional[StrictStr], Field(description="OAuth 2.0 token for the current user.")] = None,
        xgafv: Annotated[Optional[StrictStr], Field(description="V1 error format.")] = None,
        alt: Annotated[Optional[StrictStr], Field(description="Data format for response.")] = None,
        key: Annotated[Optional[StrictStr], Field(description="API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.")] = None,
        access_token: Annotated[Optional[StrictStr], Field(description="OAuth access token.")] = None,
        accepts_incomplete: Annotated[Optional[StrictBool], Field(description="See CreateServiceInstanceRequest for details.")] = None,
        google_cloud_servicebroker_v1alpha1_binding: Optional[GoogleCloudServicebrokerV1alpha1Binding] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[GoogleCloudServicebrokerV1alpha1CreateBindingResponse]:
        """servicebroker_projects_brokers_v2_service_instances_service_bindings_create

        CreateBinding generates a service binding to an existing service instance. See ProviServiceInstance for async operation details.

        :param parent: The GCP container. Must match `projects/[PROJECT_ID]/brokers/[BROKER_ID]`. (required)
        :type parent: str
        :param instance_id: The service instance to which to bind. (required)
        :type instance_id: str
        :param binding_id: The id of the binding. Must be unique within GCP project. Maximum length is 64, GUID recommended. Required. (required)
        :type binding_id: str
        :param upload_protocol: Upload protocol for media (e.g. \"raw\", \"multipart\").
        :type upload_protocol: str
        :param quota_user: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
        :type quota_user: str
        :param pretty_print: Returns response with indentations and line breaks.
        :type pretty_print: bool
        :param upload_type: Legacy upload protocol for media (e.g. \"media\", \"multipart\").
        :type upload_type: str
        :param fields: Selector specifying which fields to include in a partial response.
        :type fields: str
        :param param_callback: JSONP
        :type param_callback: str
        :param oauth_token: OAuth 2.0 token for the current user.
        :type oauth_token: str
        :param xgafv: V1 error format.
        :type xgafv: str
        :param alt: Data format for response.
        :type alt: str
        :param key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
        :type key: str
        :param access_token: OAuth access token.
        :type access_token: str
        :param accepts_incomplete: See CreateServiceInstanceRequest for details.
        :type accepts_incomplete: bool
        :param google_cloud_servicebroker_v1alpha1_binding:
        :type google_cloud_servicebroker_v1alpha1_binding: GoogleCloudServicebrokerV1alpha1Binding
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._servicebroker_projects_brokers_v2_service_instances_service_bindings_create_serialize(
            parent=parent,
            instance_id=instance_id,
            binding_id=binding_id,
            upload_protocol=upload_protocol,
            quota_user=quota_user,
            pretty_print=pretty_print,
            upload_type=upload_type,
            fields=fields,
            param_callback=param_callback,
            oauth_token=oauth_token,
            xgafv=xgafv,
            alt=alt,
            key=key,
            access_token=access_token,
            accepts_incomplete=accepts_incomplete,
            google_cloud_servicebroker_v1alpha1_binding=google_cloud_servicebroker_v1alpha1_binding,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GoogleCloudServicebrokerV1alpha1CreateBindingResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def servicebroker_projects_brokers_v2_service_instances_service_bindings_create_without_preload_content(
        self,
        parent: Annotated[StrictStr, Field(description="The GCP container. Must match `projects/[PROJECT_ID]/brokers/[BROKER_ID]`.")],
        instance_id: Annotated[StrictStr, Field(description="The service instance to which to bind.")],
        binding_id: Annotated[StrictStr, Field(description="The id of the binding. Must be unique within GCP project. Maximum length is 64, GUID recommended. Required.")],
        upload_protocol: Annotated[Optional[StrictStr], Field(description="Upload protocol for media (e.g. \"raw\", \"multipart\").")] = None,
        quota_user: Annotated[Optional[StrictStr], Field(description="Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.")] = None,
        pretty_print: Annotated[Optional[StrictBool], Field(description="Returns response with indentations and line breaks.")] = None,
        upload_type: Annotated[Optional[StrictStr], Field(description="Legacy upload protocol for media (e.g. \"media\", \"multipart\").")] = None,
        fields: Annotated[Optional[StrictStr], Field(description="Selector specifying which fields to include in a partial response.")] = None,
        param_callback: Annotated[Optional[StrictStr], Field(description="JSONP")] = None,
        oauth_token: Annotated[Optional[StrictStr], Field(description="OAuth 2.0 token for the current user.")] = None,
        xgafv: Annotated[Optional[StrictStr], Field(description="V1 error format.")] = None,
        alt: Annotated[Optional[StrictStr], Field(description="Data format for response.")] = None,
        key: Annotated[Optional[StrictStr], Field(description="API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.")] = None,
        access_token: Annotated[Optional[StrictStr], Field(description="OAuth access token.")] = None,
        accepts_incomplete: Annotated[Optional[StrictBool], Field(description="See CreateServiceInstanceRequest for details.")] = None,
        google_cloud_servicebroker_v1alpha1_binding: Optional[GoogleCloudServicebrokerV1alpha1Binding] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """servicebroker_projects_brokers_v2_service_instances_service_bindings_create

        CreateBinding generates a service binding to an existing service instance. See ProviServiceInstance for async operation details.

        :param parent: The GCP container. Must match `projects/[PROJECT_ID]/brokers/[BROKER_ID]`. (required)
        :type parent: str
        :param instance_id: The service instance to which to bind. (required)
        :type instance_id: str
        :param binding_id: The id of the binding. Must be unique within GCP project. Maximum length is 64, GUID recommended. Required. (required)
        :type binding_id: str
        :param upload_protocol: Upload protocol for media (e.g. \"raw\", \"multipart\").
        :type upload_protocol: str
        :param quota_user: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
        :type quota_user: str
        :param pretty_print: Returns response with indentations and line breaks.
        :type pretty_print: bool
        :param upload_type: Legacy upload protocol for media (e.g. \"media\", \"multipart\").
        :type upload_type: str
        :param fields: Selector specifying which fields to include in a partial response.
        :type fields: str
        :param param_callback: JSONP
        :type param_callback: str
        :param oauth_token: OAuth 2.0 token for the current user.
        :type oauth_token: str
        :param xgafv: V1 error format.
        :type xgafv: str
        :param alt: Data format for response.
        :type alt: str
        :param key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
        :type key: str
        :param access_token: OAuth access token.
        :type access_token: str
        :param accepts_incomplete: See CreateServiceInstanceRequest for details.
        :type accepts_incomplete: bool
        :param google_cloud_servicebroker_v1alpha1_binding:
        :type google_cloud_servicebroker_v1alpha1_binding: GoogleCloudServicebrokerV1alpha1Binding
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._servicebroker_projects_brokers_v2_service_instances_service_bindings_create_serialize(
            parent=parent,
            instance_id=instance_id,
            binding_id=binding_id,
            upload_protocol=upload_protocol,
            quota_user=quota_user,
            pretty_print=pretty_print,
            upload_type=upload_type,
            fields=fields,
            param_callback=param_callback,
            oauth_token=oauth_token,
            xgafv=xgafv,
            alt=alt,
            key=key,
            access_token=access_token,
            accepts_incomplete=accepts_incomplete,
            google_cloud_servicebroker_v1alpha1_binding=google_cloud_servicebroker_v1alpha1_binding,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GoogleCloudServicebrokerV1alpha1CreateBindingResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _servicebroker_projects_brokers_v2_service_instances_service_bindings_create_serialize(
        self,
        parent,
        instance_id,
        binding_id,
        upload_protocol,
        quota_user,
        pretty_print,
        upload_type,
        fields,
        param_callback,
        oauth_token,
        xgafv,
        alt,
        key,
        access_token,
        accepts_incomplete,
        google_cloud_servicebroker_v1alpha1_binding,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if parent is not None:
            _path_params['parent'] = parent
        if instance_id is not None:
            _path_params['instanceId'] = instance_id
        if binding_id is not None:
            _path_params['binding_id'] = binding_id
        # process the query parameters
        if upload_protocol is not None:
            
            _query_params.append(('upload_protocol', upload_protocol))
            
        if quota_user is not None:
            
            _query_params.append(('quotaUser', quota_user))
            
        if pretty_print is not None:
            
            _query_params.append(('prettyPrint', pretty_print))
            
        if upload_type is not None:
            
            _query_params.append(('uploadType', upload_type))
            
        if fields is not None:
            
            _query_params.append(('fields', fields))
            
        if param_callback is not None:
            
            _query_params.append(('callback', param_callback))
            
        if oauth_token is not None:
            
            _query_params.append(('oauth_token', oauth_token))
            
        if xgafv is not None:
            
            _query_params.append(('$.xgafv', xgafv))
            
        if alt is not None:
            
            _query_params.append(('alt', alt))
            
        if key is not None:
            
            _query_params.append(('key', key))
            
        if access_token is not None:
            
            _query_params.append(('access_token', access_token))
            
        if accepts_incomplete is not None:
            
            _query_params.append(('acceptsIncomplete', accepts_incomplete))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if google_cloud_servicebroker_v1alpha1_binding is not None:
            _body_params = google_cloud_servicebroker_v1alpha1_binding


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    '*/*'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'Oauth2c', 
            'Oauth2'
        ]

        return self.api_client.param_serialize(
            method='PUT',
            resource_path='/v1alpha1/{parent}/v2/service_instances/{instanceId}/service_bindings/{binding_id}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def servicebroker_projects_brokers_v2_service_instances_service_bindings_get(
        self,
        parent: Annotated[StrictStr, Field(description="Parent must match `projects/[PROJECT_ID]/brokers/[BROKER_ID]`.")],
        instance_id: Annotated[StrictStr, Field(description="Instance id to which the binding is bound.")],
        binding_id: Annotated[StrictStr, Field(description="The binding id.")],
        upload_protocol: Annotated[Optional[StrictStr], Field(description="Upload protocol for media (e.g. \"raw\", \"multipart\").")] = None,
        quota_user: Annotated[Optional[StrictStr], Field(description="Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.")] = None,
        pretty_print: Annotated[Optional[StrictBool], Field(description="Returns response with indentations and line breaks.")] = None,
        upload_type: Annotated[Optional[StrictStr], Field(description="Legacy upload protocol for media (e.g. \"media\", \"multipart\").")] = None,
        fields: Annotated[Optional[StrictStr], Field(description="Selector specifying which fields to include in a partial response.")] = None,
        param_callback: Annotated[Optional[StrictStr], Field(description="JSONP")] = None,
        oauth_token: Annotated[Optional[StrictStr], Field(description="OAuth 2.0 token for the current user.")] = None,
        xgafv: Annotated[Optional[StrictStr], Field(description="V1 error format.")] = None,
        alt: Annotated[Optional[StrictStr], Field(description="Data format for response.")] = None,
        key: Annotated[Optional[StrictStr], Field(description="API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.")] = None,
        access_token: Annotated[Optional[StrictStr], Field(description="OAuth access token.")] = None,
        plan_id: Annotated[Optional[StrictStr], Field(description="Plan id.")] = None,
        service_id: Annotated[Optional[StrictStr], Field(description="Service id.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> GoogleCloudServicebrokerV1alpha1GetBindingResponse:
        """servicebroker_projects_brokers_v2_service_instances_service_bindings_get

        GetBinding returns the binding information.

        :param parent: Parent must match `projects/[PROJECT_ID]/brokers/[BROKER_ID]`. (required)
        :type parent: str
        :param instance_id: Instance id to which the binding is bound. (required)
        :type instance_id: str
        :param binding_id: The binding id. (required)
        :type binding_id: str
        :param upload_protocol: Upload protocol for media (e.g. \"raw\", \"multipart\").
        :type upload_protocol: str
        :param quota_user: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
        :type quota_user: str
        :param pretty_print: Returns response with indentations and line breaks.
        :type pretty_print: bool
        :param upload_type: Legacy upload protocol for media (e.g. \"media\", \"multipart\").
        :type upload_type: str
        :param fields: Selector specifying which fields to include in a partial response.
        :type fields: str
        :param param_callback: JSONP
        :type param_callback: str
        :param oauth_token: OAuth 2.0 token for the current user.
        :type oauth_token: str
        :param xgafv: V1 error format.
        :type xgafv: str
        :param alt: Data format for response.
        :type alt: str
        :param key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
        :type key: str
        :param access_token: OAuth access token.
        :type access_token: str
        :param plan_id: Plan id.
        :type plan_id: str
        :param service_id: Service id.
        :type service_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._servicebroker_projects_brokers_v2_service_instances_service_bindings_get_serialize(
            parent=parent,
            instance_id=instance_id,
            binding_id=binding_id,
            upload_protocol=upload_protocol,
            quota_user=quota_user,
            pretty_print=pretty_print,
            upload_type=upload_type,
            fields=fields,
            param_callback=param_callback,
            oauth_token=oauth_token,
            xgafv=xgafv,
            alt=alt,
            key=key,
            access_token=access_token,
            plan_id=plan_id,
            service_id=service_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GoogleCloudServicebrokerV1alpha1GetBindingResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def servicebroker_projects_brokers_v2_service_instances_service_bindings_get_with_http_info(
        self,
        parent: Annotated[StrictStr, Field(description="Parent must match `projects/[PROJECT_ID]/brokers/[BROKER_ID]`.")],
        instance_id: Annotated[StrictStr, Field(description="Instance id to which the binding is bound.")],
        binding_id: Annotated[StrictStr, Field(description="The binding id.")],
        upload_protocol: Annotated[Optional[StrictStr], Field(description="Upload protocol for media (e.g. \"raw\", \"multipart\").")] = None,
        quota_user: Annotated[Optional[StrictStr], Field(description="Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.")] = None,
        pretty_print: Annotated[Optional[StrictBool], Field(description="Returns response with indentations and line breaks.")] = None,
        upload_type: Annotated[Optional[StrictStr], Field(description="Legacy upload protocol for media (e.g. \"media\", \"multipart\").")] = None,
        fields: Annotated[Optional[StrictStr], Field(description="Selector specifying which fields to include in a partial response.")] = None,
        param_callback: Annotated[Optional[StrictStr], Field(description="JSONP")] = None,
        oauth_token: Annotated[Optional[StrictStr], Field(description="OAuth 2.0 token for the current user.")] = None,
        xgafv: Annotated[Optional[StrictStr], Field(description="V1 error format.")] = None,
        alt: Annotated[Optional[StrictStr], Field(description="Data format for response.")] = None,
        key: Annotated[Optional[StrictStr], Field(description="API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.")] = None,
        access_token: Annotated[Optional[StrictStr], Field(description="OAuth access token.")] = None,
        plan_id: Annotated[Optional[StrictStr], Field(description="Plan id.")] = None,
        service_id: Annotated[Optional[StrictStr], Field(description="Service id.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[GoogleCloudServicebrokerV1alpha1GetBindingResponse]:
        """servicebroker_projects_brokers_v2_service_instances_service_bindings_get

        GetBinding returns the binding information.

        :param parent: Parent must match `projects/[PROJECT_ID]/brokers/[BROKER_ID]`. (required)
        :type parent: str
        :param instance_id: Instance id to which the binding is bound. (required)
        :type instance_id: str
        :param binding_id: The binding id. (required)
        :type binding_id: str
        :param upload_protocol: Upload protocol for media (e.g. \"raw\", \"multipart\").
        :type upload_protocol: str
        :param quota_user: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
        :type quota_user: str
        :param pretty_print: Returns response with indentations and line breaks.
        :type pretty_print: bool
        :param upload_type: Legacy upload protocol for media (e.g. \"media\", \"multipart\").
        :type upload_type: str
        :param fields: Selector specifying which fields to include in a partial response.
        :type fields: str
        :param param_callback: JSONP
        :type param_callback: str
        :param oauth_token: OAuth 2.0 token for the current user.
        :type oauth_token: str
        :param xgafv: V1 error format.
        :type xgafv: str
        :param alt: Data format for response.
        :type alt: str
        :param key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
        :type key: str
        :param access_token: OAuth access token.
        :type access_token: str
        :param plan_id: Plan id.
        :type plan_id: str
        :param service_id: Service id.
        :type service_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._servicebroker_projects_brokers_v2_service_instances_service_bindings_get_serialize(
            parent=parent,
            instance_id=instance_id,
            binding_id=binding_id,
            upload_protocol=upload_protocol,
            quota_user=quota_user,
            pretty_print=pretty_print,
            upload_type=upload_type,
            fields=fields,
            param_callback=param_callback,
            oauth_token=oauth_token,
            xgafv=xgafv,
            alt=alt,
            key=key,
            access_token=access_token,
            plan_id=plan_id,
            service_id=service_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GoogleCloudServicebrokerV1alpha1GetBindingResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def servicebroker_projects_brokers_v2_service_instances_service_bindings_get_without_preload_content(
        self,
        parent: Annotated[StrictStr, Field(description="Parent must match `projects/[PROJECT_ID]/brokers/[BROKER_ID]`.")],
        instance_id: Annotated[StrictStr, Field(description="Instance id to which the binding is bound.")],
        binding_id: Annotated[StrictStr, Field(description="The binding id.")],
        upload_protocol: Annotated[Optional[StrictStr], Field(description="Upload protocol for media (e.g. \"raw\", \"multipart\").")] = None,
        quota_user: Annotated[Optional[StrictStr], Field(description="Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.")] = None,
        pretty_print: Annotated[Optional[StrictBool], Field(description="Returns response with indentations and line breaks.")] = None,
        upload_type: Annotated[Optional[StrictStr], Field(description="Legacy upload protocol for media (e.g. \"media\", \"multipart\").")] = None,
        fields: Annotated[Optional[StrictStr], Field(description="Selector specifying which fields to include in a partial response.")] = None,
        param_callback: Annotated[Optional[StrictStr], Field(description="JSONP")] = None,
        oauth_token: Annotated[Optional[StrictStr], Field(description="OAuth 2.0 token for the current user.")] = None,
        xgafv: Annotated[Optional[StrictStr], Field(description="V1 error format.")] = None,
        alt: Annotated[Optional[StrictStr], Field(description="Data format for response.")] = None,
        key: Annotated[Optional[StrictStr], Field(description="API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.")] = None,
        access_token: Annotated[Optional[StrictStr], Field(description="OAuth access token.")] = None,
        plan_id: Annotated[Optional[StrictStr], Field(description="Plan id.")] = None,
        service_id: Annotated[Optional[StrictStr], Field(description="Service id.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """servicebroker_projects_brokers_v2_service_instances_service_bindings_get

        GetBinding returns the binding information.

        :param parent: Parent must match `projects/[PROJECT_ID]/brokers/[BROKER_ID]`. (required)
        :type parent: str
        :param instance_id: Instance id to which the binding is bound. (required)
        :type instance_id: str
        :param binding_id: The binding id. (required)
        :type binding_id: str
        :param upload_protocol: Upload protocol for media (e.g. \"raw\", \"multipart\").
        :type upload_protocol: str
        :param quota_user: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
        :type quota_user: str
        :param pretty_print: Returns response with indentations and line breaks.
        :type pretty_print: bool
        :param upload_type: Legacy upload protocol for media (e.g. \"media\", \"multipart\").
        :type upload_type: str
        :param fields: Selector specifying which fields to include in a partial response.
        :type fields: str
        :param param_callback: JSONP
        :type param_callback: str
        :param oauth_token: OAuth 2.0 token for the current user.
        :type oauth_token: str
        :param xgafv: V1 error format.
        :type xgafv: str
        :param alt: Data format for response.
        :type alt: str
        :param key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
        :type key: str
        :param access_token: OAuth access token.
        :type access_token: str
        :param plan_id: Plan id.
        :type plan_id: str
        :param service_id: Service id.
        :type service_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._servicebroker_projects_brokers_v2_service_instances_service_bindings_get_serialize(
            parent=parent,
            instance_id=instance_id,
            binding_id=binding_id,
            upload_protocol=upload_protocol,
            quota_user=quota_user,
            pretty_print=pretty_print,
            upload_type=upload_type,
            fields=fields,
            param_callback=param_callback,
            oauth_token=oauth_token,
            xgafv=xgafv,
            alt=alt,
            key=key,
            access_token=access_token,
            plan_id=plan_id,
            service_id=service_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GoogleCloudServicebrokerV1alpha1GetBindingResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _servicebroker_projects_brokers_v2_service_instances_service_bindings_get_serialize(
        self,
        parent,
        instance_id,
        binding_id,
        upload_protocol,
        quota_user,
        pretty_print,
        upload_type,
        fields,
        param_callback,
        oauth_token,
        xgafv,
        alt,
        key,
        access_token,
        plan_id,
        service_id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if parent is not None:
            _path_params['parent'] = parent
        if instance_id is not None:
            _path_params['instanceId'] = instance_id
        if binding_id is not None:
            _path_params['bindingId'] = binding_id
        # process the query parameters
        if upload_protocol is not None:
            
            _query_params.append(('upload_protocol', upload_protocol))
            
        if quota_user is not None:
            
            _query_params.append(('quotaUser', quota_user))
            
        if pretty_print is not None:
            
            _query_params.append(('prettyPrint', pretty_print))
            
        if upload_type is not None:
            
            _query_params.append(('uploadType', upload_type))
            
        if fields is not None:
            
            _query_params.append(('fields', fields))
            
        if param_callback is not None:
            
            _query_params.append(('callback', param_callback))
            
        if oauth_token is not None:
            
            _query_params.append(('oauth_token', oauth_token))
            
        if xgafv is not None:
            
            _query_params.append(('$.xgafv', xgafv))
            
        if alt is not None:
            
            _query_params.append(('alt', alt))
            
        if key is not None:
            
            _query_params.append(('key', key))
            
        if access_token is not None:
            
            _query_params.append(('access_token', access_token))
            
        if plan_id is not None:
            
            _query_params.append(('planId', plan_id))
            
        if service_id is not None:
            
            _query_params.append(('serviceId', service_id))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    '*/*'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'Oauth2c', 
            'Oauth2'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/v1alpha1/{parent}/v2/service_instances/{instanceId}/service_bindings/{bindingId}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def servicebroker_projects_brokers_v2_service_instances_service_bindings_get_last_operation(
        self,
        parent: Annotated[StrictStr, Field(description="Parent must match `projects/[PROJECT_ID]/brokers/[BROKER_ID]`.")],
        instance_id: Annotated[StrictStr, Field(description="The instance id that the binding is bound to.")],
        binding_id: Annotated[StrictStr, Field(description="The binding id for which to return the last operation")],
        upload_protocol: Annotated[Optional[StrictStr], Field(description="Upload protocol for media (e.g. \"raw\", \"multipart\").")] = None,
        quota_user: Annotated[Optional[StrictStr], Field(description="Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.")] = None,
        pretty_print: Annotated[Optional[StrictBool], Field(description="Returns response with indentations and line breaks.")] = None,
        upload_type: Annotated[Optional[StrictStr], Field(description="Legacy upload protocol for media (e.g. \"media\", \"multipart\").")] = None,
        fields: Annotated[Optional[StrictStr], Field(description="Selector specifying which fields to include in a partial response.")] = None,
        param_callback: Annotated[Optional[StrictStr], Field(description="JSONP")] = None,
        oauth_token: Annotated[Optional[StrictStr], Field(description="OAuth 2.0 token for the current user.")] = None,
        xgafv: Annotated[Optional[StrictStr], Field(description="V1 error format.")] = None,
        alt: Annotated[Optional[StrictStr], Field(description="Data format for response.")] = None,
        key: Annotated[Optional[StrictStr], Field(description="API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.")] = None,
        access_token: Annotated[Optional[StrictStr], Field(description="OAuth access token.")] = None,
        operation: Annotated[Optional[StrictStr], Field(description="If `operation` was returned during mutation operation, this field must be populated with the provided value.")] = None,
        plan_id: Annotated[Optional[StrictStr], Field(description="Plan id.")] = None,
        service_id: Annotated[Optional[StrictStr], Field(description="Service id.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> GoogleCloudServicebrokerV1alpha1Operation:
        """servicebroker_projects_brokers_v2_service_instances_service_bindings_get_last_operation

        Returns the state of the last operation for the binding. Only last (or current) operation can be polled.

        :param parent: Parent must match `projects/[PROJECT_ID]/brokers/[BROKER_ID]`. (required)
        :type parent: str
        :param instance_id: The instance id that the binding is bound to. (required)
        :type instance_id: str
        :param binding_id: The binding id for which to return the last operation (required)
        :type binding_id: str
        :param upload_protocol: Upload protocol for media (e.g. \"raw\", \"multipart\").
        :type upload_protocol: str
        :param quota_user: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
        :type quota_user: str
        :param pretty_print: Returns response with indentations and line breaks.
        :type pretty_print: bool
        :param upload_type: Legacy upload protocol for media (e.g. \"media\", \"multipart\").
        :type upload_type: str
        :param fields: Selector specifying which fields to include in a partial response.
        :type fields: str
        :param param_callback: JSONP
        :type param_callback: str
        :param oauth_token: OAuth 2.0 token for the current user.
        :type oauth_token: str
        :param xgafv: V1 error format.
        :type xgafv: str
        :param alt: Data format for response.
        :type alt: str
        :param key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
        :type key: str
        :param access_token: OAuth access token.
        :type access_token: str
        :param operation: If `operation` was returned during mutation operation, this field must be populated with the provided value.
        :type operation: str
        :param plan_id: Plan id.
        :type plan_id: str
        :param service_id: Service id.
        :type service_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._servicebroker_projects_brokers_v2_service_instances_service_bindings_get_last_operation_serialize(
            parent=parent,
            instance_id=instance_id,
            binding_id=binding_id,
            upload_protocol=upload_protocol,
            quota_user=quota_user,
            pretty_print=pretty_print,
            upload_type=upload_type,
            fields=fields,
            param_callback=param_callback,
            oauth_token=oauth_token,
            xgafv=xgafv,
            alt=alt,
            key=key,
            access_token=access_token,
            operation=operation,
            plan_id=plan_id,
            service_id=service_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GoogleCloudServicebrokerV1alpha1Operation",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def servicebroker_projects_brokers_v2_service_instances_service_bindings_get_last_operation_with_http_info(
        self,
        parent: Annotated[StrictStr, Field(description="Parent must match `projects/[PROJECT_ID]/brokers/[BROKER_ID]`.")],
        instance_id: Annotated[StrictStr, Field(description="The instance id that the binding is bound to.")],
        binding_id: Annotated[StrictStr, Field(description="The binding id for which to return the last operation")],
        upload_protocol: Annotated[Optional[StrictStr], Field(description="Upload protocol for media (e.g. \"raw\", \"multipart\").")] = None,
        quota_user: Annotated[Optional[StrictStr], Field(description="Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.")] = None,
        pretty_print: Annotated[Optional[StrictBool], Field(description="Returns response with indentations and line breaks.")] = None,
        upload_type: Annotated[Optional[StrictStr], Field(description="Legacy upload protocol for media (e.g. \"media\", \"multipart\").")] = None,
        fields: Annotated[Optional[StrictStr], Field(description="Selector specifying which fields to include in a partial response.")] = None,
        param_callback: Annotated[Optional[StrictStr], Field(description="JSONP")] = None,
        oauth_token: Annotated[Optional[StrictStr], Field(description="OAuth 2.0 token for the current user.")] = None,
        xgafv: Annotated[Optional[StrictStr], Field(description="V1 error format.")] = None,
        alt: Annotated[Optional[StrictStr], Field(description="Data format for response.")] = None,
        key: Annotated[Optional[StrictStr], Field(description="API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.")] = None,
        access_token: Annotated[Optional[StrictStr], Field(description="OAuth access token.")] = None,
        operation: Annotated[Optional[StrictStr], Field(description="If `operation` was returned during mutation operation, this field must be populated with the provided value.")] = None,
        plan_id: Annotated[Optional[StrictStr], Field(description="Plan id.")] = None,
        service_id: Annotated[Optional[StrictStr], Field(description="Service id.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[GoogleCloudServicebrokerV1alpha1Operation]:
        """servicebroker_projects_brokers_v2_service_instances_service_bindings_get_last_operation

        Returns the state of the last operation for the binding. Only last (or current) operation can be polled.

        :param parent: Parent must match `projects/[PROJECT_ID]/brokers/[BROKER_ID]`. (required)
        :type parent: str
        :param instance_id: The instance id that the binding is bound to. (required)
        :type instance_id: str
        :param binding_id: The binding id for which to return the last operation (required)
        :type binding_id: str
        :param upload_protocol: Upload protocol for media (e.g. \"raw\", \"multipart\").
        :type upload_protocol: str
        :param quota_user: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
        :type quota_user: str
        :param pretty_print: Returns response with indentations and line breaks.
        :type pretty_print: bool
        :param upload_type: Legacy upload protocol for media (e.g. \"media\", \"multipart\").
        :type upload_type: str
        :param fields: Selector specifying which fields to include in a partial response.
        :type fields: str
        :param param_callback: JSONP
        :type param_callback: str
        :param oauth_token: OAuth 2.0 token for the current user.
        :type oauth_token: str
        :param xgafv: V1 error format.
        :type xgafv: str
        :param alt: Data format for response.
        :type alt: str
        :param key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
        :type key: str
        :param access_token: OAuth access token.
        :type access_token: str
        :param operation: If `operation` was returned during mutation operation, this field must be populated with the provided value.
        :type operation: str
        :param plan_id: Plan id.
        :type plan_id: str
        :param service_id: Service id.
        :type service_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._servicebroker_projects_brokers_v2_service_instances_service_bindings_get_last_operation_serialize(
            parent=parent,
            instance_id=instance_id,
            binding_id=binding_id,
            upload_protocol=upload_protocol,
            quota_user=quota_user,
            pretty_print=pretty_print,
            upload_type=upload_type,
            fields=fields,
            param_callback=param_callback,
            oauth_token=oauth_token,
            xgafv=xgafv,
            alt=alt,
            key=key,
            access_token=access_token,
            operation=operation,
            plan_id=plan_id,
            service_id=service_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GoogleCloudServicebrokerV1alpha1Operation",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def servicebroker_projects_brokers_v2_service_instances_service_bindings_get_last_operation_without_preload_content(
        self,
        parent: Annotated[StrictStr, Field(description="Parent must match `projects/[PROJECT_ID]/brokers/[BROKER_ID]`.")],
        instance_id: Annotated[StrictStr, Field(description="The instance id that the binding is bound to.")],
        binding_id: Annotated[StrictStr, Field(description="The binding id for which to return the last operation")],
        upload_protocol: Annotated[Optional[StrictStr], Field(description="Upload protocol for media (e.g. \"raw\", \"multipart\").")] = None,
        quota_user: Annotated[Optional[StrictStr], Field(description="Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.")] = None,
        pretty_print: Annotated[Optional[StrictBool], Field(description="Returns response with indentations and line breaks.")] = None,
        upload_type: Annotated[Optional[StrictStr], Field(description="Legacy upload protocol for media (e.g. \"media\", \"multipart\").")] = None,
        fields: Annotated[Optional[StrictStr], Field(description="Selector specifying which fields to include in a partial response.")] = None,
        param_callback: Annotated[Optional[StrictStr], Field(description="JSONP")] = None,
        oauth_token: Annotated[Optional[StrictStr], Field(description="OAuth 2.0 token for the current user.")] = None,
        xgafv: Annotated[Optional[StrictStr], Field(description="V1 error format.")] = None,
        alt: Annotated[Optional[StrictStr], Field(description="Data format for response.")] = None,
        key: Annotated[Optional[StrictStr], Field(description="API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.")] = None,
        access_token: Annotated[Optional[StrictStr], Field(description="OAuth access token.")] = None,
        operation: Annotated[Optional[StrictStr], Field(description="If `operation` was returned during mutation operation, this field must be populated with the provided value.")] = None,
        plan_id: Annotated[Optional[StrictStr], Field(description="Plan id.")] = None,
        service_id: Annotated[Optional[StrictStr], Field(description="Service id.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """servicebroker_projects_brokers_v2_service_instances_service_bindings_get_last_operation

        Returns the state of the last operation for the binding. Only last (or current) operation can be polled.

        :param parent: Parent must match `projects/[PROJECT_ID]/brokers/[BROKER_ID]`. (required)
        :type parent: str
        :param instance_id: The instance id that the binding is bound to. (required)
        :type instance_id: str
        :param binding_id: The binding id for which to return the last operation (required)
        :type binding_id: str
        :param upload_protocol: Upload protocol for media (e.g. \"raw\", \"multipart\").
        :type upload_protocol: str
        :param quota_user: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
        :type quota_user: str
        :param pretty_print: Returns response with indentations and line breaks.
        :type pretty_print: bool
        :param upload_type: Legacy upload protocol for media (e.g. \"media\", \"multipart\").
        :type upload_type: str
        :param fields: Selector specifying which fields to include in a partial response.
        :type fields: str
        :param param_callback: JSONP
        :type param_callback: str
        :param oauth_token: OAuth 2.0 token for the current user.
        :type oauth_token: str
        :param xgafv: V1 error format.
        :type xgafv: str
        :param alt: Data format for response.
        :type alt: str
        :param key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
        :type key: str
        :param access_token: OAuth access token.
        :type access_token: str
        :param operation: If `operation` was returned during mutation operation, this field must be populated with the provided value.
        :type operation: str
        :param plan_id: Plan id.
        :type plan_id: str
        :param service_id: Service id.
        :type service_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._servicebroker_projects_brokers_v2_service_instances_service_bindings_get_last_operation_serialize(
            parent=parent,
            instance_id=instance_id,
            binding_id=binding_id,
            upload_protocol=upload_protocol,
            quota_user=quota_user,
            pretty_print=pretty_print,
            upload_type=upload_type,
            fields=fields,
            param_callback=param_callback,
            oauth_token=oauth_token,
            xgafv=xgafv,
            alt=alt,
            key=key,
            access_token=access_token,
            operation=operation,
            plan_id=plan_id,
            service_id=service_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GoogleCloudServicebrokerV1alpha1Operation",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _servicebroker_projects_brokers_v2_service_instances_service_bindings_get_last_operation_serialize(
        self,
        parent,
        instance_id,
        binding_id,
        upload_protocol,
        quota_user,
        pretty_print,
        upload_type,
        fields,
        param_callback,
        oauth_token,
        xgafv,
        alt,
        key,
        access_token,
        operation,
        plan_id,
        service_id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if parent is not None:
            _path_params['parent'] = parent
        if instance_id is not None:
            _path_params['instanceId'] = instance_id
        if binding_id is not None:
            _path_params['bindingId'] = binding_id
        # process the query parameters
        if upload_protocol is not None:
            
            _query_params.append(('upload_protocol', upload_protocol))
            
        if quota_user is not None:
            
            _query_params.append(('quotaUser', quota_user))
            
        if pretty_print is not None:
            
            _query_params.append(('prettyPrint', pretty_print))
            
        if upload_type is not None:
            
            _query_params.append(('uploadType', upload_type))
            
        if fields is not None:
            
            _query_params.append(('fields', fields))
            
        if param_callback is not None:
            
            _query_params.append(('callback', param_callback))
            
        if oauth_token is not None:
            
            _query_params.append(('oauth_token', oauth_token))
            
        if xgafv is not None:
            
            _query_params.append(('$.xgafv', xgafv))
            
        if alt is not None:
            
            _query_params.append(('alt', alt))
            
        if key is not None:
            
            _query_params.append(('key', key))
            
        if access_token is not None:
            
            _query_params.append(('access_token', access_token))
            
        if operation is not None:
            
            _query_params.append(('operation', operation))
            
        if plan_id is not None:
            
            _query_params.append(('planId', plan_id))
            
        if service_id is not None:
            
            _query_params.append(('serviceId', service_id))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    '*/*'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'Oauth2c', 
            'Oauth2'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/v1alpha1/{parent}/v2/service_instances/{instanceId}/service_bindings/{bindingId}/last_operation',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )



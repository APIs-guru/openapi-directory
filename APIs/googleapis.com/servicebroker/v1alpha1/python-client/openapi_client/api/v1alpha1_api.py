# coding: utf-8

"""
    Service Broker

    The Google Cloud Platform Service Broker API provides Google hosted implementation of the Open Service Broker API (https://www.openservicebrokerapi.org/). 

    The version of the OpenAPI document: v1alpha1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from pydantic import Field, StrictBool, StrictInt, StrictStr, field_validator
from typing import Optional
from typing_extensions import Annotated
from openapi_client.models.google_iam_v1_policy import GoogleIamV1Policy
from openapi_client.models.google_iam_v1_set_iam_policy_request import GoogleIamV1SetIamPolicyRequest
from openapi_client.models.google_iam_v1_test_iam_permissions_request import GoogleIamV1TestIamPermissionsRequest
from openapi_client.models.google_iam_v1_test_iam_permissions_response import GoogleIamV1TestIamPermissionsResponse

from openapi_client.api_client import ApiClient, RequestSerialized
from openapi_client.api_response import ApiResponse
from openapi_client.rest import RESTResponseType


class V1alpha1Api:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def servicebroker_get_iam_policy(
        self,
        resource: Annotated[StrictStr, Field(description="REQUIRED: The resource for which the policy is being requested. See the operation documentation for the appropriate value for this field.")],
        upload_protocol: Annotated[Optional[StrictStr], Field(description="Upload protocol for media (e.g. \"raw\", \"multipart\").")] = None,
        quota_user: Annotated[Optional[StrictStr], Field(description="Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.")] = None,
        pretty_print: Annotated[Optional[StrictBool], Field(description="Returns response with indentations and line breaks.")] = None,
        upload_type: Annotated[Optional[StrictStr], Field(description="Legacy upload protocol for media (e.g. \"media\", \"multipart\").")] = None,
        fields: Annotated[Optional[StrictStr], Field(description="Selector specifying which fields to include in a partial response.")] = None,
        param_callback: Annotated[Optional[StrictStr], Field(description="JSONP")] = None,
        oauth_token: Annotated[Optional[StrictStr], Field(description="OAuth 2.0 token for the current user.")] = None,
        xgafv: Annotated[Optional[StrictStr], Field(description="V1 error format.")] = None,
        alt: Annotated[Optional[StrictStr], Field(description="Data format for response.")] = None,
        key: Annotated[Optional[StrictStr], Field(description="API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.")] = None,
        access_token: Annotated[Optional[StrictStr], Field(description="OAuth access token.")] = None,
        options_requested_policy_version: Annotated[Optional[StrictInt], Field(description="Optional. The policy format version to be returned.  Valid values are 0, 1, and 3. Requests specifying an invalid value will be rejected.  Requests for policies with any conditional bindings must specify version 3. Policies without any conditional bindings may specify any valid value or leave the field unset.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> GoogleIamV1Policy:
        """servicebroker_get_iam_policy

        Gets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set.

        :param resource: REQUIRED: The resource for which the policy is being requested. See the operation documentation for the appropriate value for this field. (required)
        :type resource: str
        :param upload_protocol: Upload protocol for media (e.g. \"raw\", \"multipart\").
        :type upload_protocol: str
        :param quota_user: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
        :type quota_user: str
        :param pretty_print: Returns response with indentations and line breaks.
        :type pretty_print: bool
        :param upload_type: Legacy upload protocol for media (e.g. \"media\", \"multipart\").
        :type upload_type: str
        :param fields: Selector specifying which fields to include in a partial response.
        :type fields: str
        :param param_callback: JSONP
        :type param_callback: str
        :param oauth_token: OAuth 2.0 token for the current user.
        :type oauth_token: str
        :param xgafv: V1 error format.
        :type xgafv: str
        :param alt: Data format for response.
        :type alt: str
        :param key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
        :type key: str
        :param access_token: OAuth access token.
        :type access_token: str
        :param options_requested_policy_version: Optional. The policy format version to be returned.  Valid values are 0, 1, and 3. Requests specifying an invalid value will be rejected.  Requests for policies with any conditional bindings must specify version 3. Policies without any conditional bindings may specify any valid value or leave the field unset.
        :type options_requested_policy_version: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._servicebroker_get_iam_policy_serialize(
            resource=resource,
            upload_protocol=upload_protocol,
            quota_user=quota_user,
            pretty_print=pretty_print,
            upload_type=upload_type,
            fields=fields,
            param_callback=param_callback,
            oauth_token=oauth_token,
            xgafv=xgafv,
            alt=alt,
            key=key,
            access_token=access_token,
            options_requested_policy_version=options_requested_policy_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GoogleIamV1Policy",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def servicebroker_get_iam_policy_with_http_info(
        self,
        resource: Annotated[StrictStr, Field(description="REQUIRED: The resource for which the policy is being requested. See the operation documentation for the appropriate value for this field.")],
        upload_protocol: Annotated[Optional[StrictStr], Field(description="Upload protocol for media (e.g. \"raw\", \"multipart\").")] = None,
        quota_user: Annotated[Optional[StrictStr], Field(description="Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.")] = None,
        pretty_print: Annotated[Optional[StrictBool], Field(description="Returns response with indentations and line breaks.")] = None,
        upload_type: Annotated[Optional[StrictStr], Field(description="Legacy upload protocol for media (e.g. \"media\", \"multipart\").")] = None,
        fields: Annotated[Optional[StrictStr], Field(description="Selector specifying which fields to include in a partial response.")] = None,
        param_callback: Annotated[Optional[StrictStr], Field(description="JSONP")] = None,
        oauth_token: Annotated[Optional[StrictStr], Field(description="OAuth 2.0 token for the current user.")] = None,
        xgafv: Annotated[Optional[StrictStr], Field(description="V1 error format.")] = None,
        alt: Annotated[Optional[StrictStr], Field(description="Data format for response.")] = None,
        key: Annotated[Optional[StrictStr], Field(description="API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.")] = None,
        access_token: Annotated[Optional[StrictStr], Field(description="OAuth access token.")] = None,
        options_requested_policy_version: Annotated[Optional[StrictInt], Field(description="Optional. The policy format version to be returned.  Valid values are 0, 1, and 3. Requests specifying an invalid value will be rejected.  Requests for policies with any conditional bindings must specify version 3. Policies without any conditional bindings may specify any valid value or leave the field unset.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[GoogleIamV1Policy]:
        """servicebroker_get_iam_policy

        Gets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set.

        :param resource: REQUIRED: The resource for which the policy is being requested. See the operation documentation for the appropriate value for this field. (required)
        :type resource: str
        :param upload_protocol: Upload protocol for media (e.g. \"raw\", \"multipart\").
        :type upload_protocol: str
        :param quota_user: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
        :type quota_user: str
        :param pretty_print: Returns response with indentations and line breaks.
        :type pretty_print: bool
        :param upload_type: Legacy upload protocol for media (e.g. \"media\", \"multipart\").
        :type upload_type: str
        :param fields: Selector specifying which fields to include in a partial response.
        :type fields: str
        :param param_callback: JSONP
        :type param_callback: str
        :param oauth_token: OAuth 2.0 token for the current user.
        :type oauth_token: str
        :param xgafv: V1 error format.
        :type xgafv: str
        :param alt: Data format for response.
        :type alt: str
        :param key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
        :type key: str
        :param access_token: OAuth access token.
        :type access_token: str
        :param options_requested_policy_version: Optional. The policy format version to be returned.  Valid values are 0, 1, and 3. Requests specifying an invalid value will be rejected.  Requests for policies with any conditional bindings must specify version 3. Policies without any conditional bindings may specify any valid value or leave the field unset.
        :type options_requested_policy_version: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._servicebroker_get_iam_policy_serialize(
            resource=resource,
            upload_protocol=upload_protocol,
            quota_user=quota_user,
            pretty_print=pretty_print,
            upload_type=upload_type,
            fields=fields,
            param_callback=param_callback,
            oauth_token=oauth_token,
            xgafv=xgafv,
            alt=alt,
            key=key,
            access_token=access_token,
            options_requested_policy_version=options_requested_policy_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GoogleIamV1Policy",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def servicebroker_get_iam_policy_without_preload_content(
        self,
        resource: Annotated[StrictStr, Field(description="REQUIRED: The resource for which the policy is being requested. See the operation documentation for the appropriate value for this field.")],
        upload_protocol: Annotated[Optional[StrictStr], Field(description="Upload protocol for media (e.g. \"raw\", \"multipart\").")] = None,
        quota_user: Annotated[Optional[StrictStr], Field(description="Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.")] = None,
        pretty_print: Annotated[Optional[StrictBool], Field(description="Returns response with indentations and line breaks.")] = None,
        upload_type: Annotated[Optional[StrictStr], Field(description="Legacy upload protocol for media (e.g. \"media\", \"multipart\").")] = None,
        fields: Annotated[Optional[StrictStr], Field(description="Selector specifying which fields to include in a partial response.")] = None,
        param_callback: Annotated[Optional[StrictStr], Field(description="JSONP")] = None,
        oauth_token: Annotated[Optional[StrictStr], Field(description="OAuth 2.0 token for the current user.")] = None,
        xgafv: Annotated[Optional[StrictStr], Field(description="V1 error format.")] = None,
        alt: Annotated[Optional[StrictStr], Field(description="Data format for response.")] = None,
        key: Annotated[Optional[StrictStr], Field(description="API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.")] = None,
        access_token: Annotated[Optional[StrictStr], Field(description="OAuth access token.")] = None,
        options_requested_policy_version: Annotated[Optional[StrictInt], Field(description="Optional. The policy format version to be returned.  Valid values are 0, 1, and 3. Requests specifying an invalid value will be rejected.  Requests for policies with any conditional bindings must specify version 3. Policies without any conditional bindings may specify any valid value or leave the field unset.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """servicebroker_get_iam_policy

        Gets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set.

        :param resource: REQUIRED: The resource for which the policy is being requested. See the operation documentation for the appropriate value for this field. (required)
        :type resource: str
        :param upload_protocol: Upload protocol for media (e.g. \"raw\", \"multipart\").
        :type upload_protocol: str
        :param quota_user: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
        :type quota_user: str
        :param pretty_print: Returns response with indentations and line breaks.
        :type pretty_print: bool
        :param upload_type: Legacy upload protocol for media (e.g. \"media\", \"multipart\").
        :type upload_type: str
        :param fields: Selector specifying which fields to include in a partial response.
        :type fields: str
        :param param_callback: JSONP
        :type param_callback: str
        :param oauth_token: OAuth 2.0 token for the current user.
        :type oauth_token: str
        :param xgafv: V1 error format.
        :type xgafv: str
        :param alt: Data format for response.
        :type alt: str
        :param key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
        :type key: str
        :param access_token: OAuth access token.
        :type access_token: str
        :param options_requested_policy_version: Optional. The policy format version to be returned.  Valid values are 0, 1, and 3. Requests specifying an invalid value will be rejected.  Requests for policies with any conditional bindings must specify version 3. Policies without any conditional bindings may specify any valid value or leave the field unset.
        :type options_requested_policy_version: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._servicebroker_get_iam_policy_serialize(
            resource=resource,
            upload_protocol=upload_protocol,
            quota_user=quota_user,
            pretty_print=pretty_print,
            upload_type=upload_type,
            fields=fields,
            param_callback=param_callback,
            oauth_token=oauth_token,
            xgafv=xgafv,
            alt=alt,
            key=key,
            access_token=access_token,
            options_requested_policy_version=options_requested_policy_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GoogleIamV1Policy",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _servicebroker_get_iam_policy_serialize(
        self,
        resource,
        upload_protocol,
        quota_user,
        pretty_print,
        upload_type,
        fields,
        param_callback,
        oauth_token,
        xgafv,
        alt,
        key,
        access_token,
        options_requested_policy_version,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if resource is not None:
            _path_params['resource'] = resource
        # process the query parameters
        if upload_protocol is not None:
            
            _query_params.append(('upload_protocol', upload_protocol))
            
        if quota_user is not None:
            
            _query_params.append(('quotaUser', quota_user))
            
        if pretty_print is not None:
            
            _query_params.append(('prettyPrint', pretty_print))
            
        if upload_type is not None:
            
            _query_params.append(('uploadType', upload_type))
            
        if fields is not None:
            
            _query_params.append(('fields', fields))
            
        if param_callback is not None:
            
            _query_params.append(('callback', param_callback))
            
        if oauth_token is not None:
            
            _query_params.append(('oauth_token', oauth_token))
            
        if xgafv is not None:
            
            _query_params.append(('$.xgafv', xgafv))
            
        if alt is not None:
            
            _query_params.append(('alt', alt))
            
        if key is not None:
            
            _query_params.append(('key', key))
            
        if access_token is not None:
            
            _query_params.append(('access_token', access_token))
            
        if options_requested_policy_version is not None:
            
            _query_params.append(('options.requestedPolicyVersion', options_requested_policy_version))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    '*/*'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'Oauth2c', 
            'Oauth2'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/v1alpha1/{resource}:getIamPolicy',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def servicebroker_set_iam_policy(
        self,
        resource: Annotated[StrictStr, Field(description="REQUIRED: The resource for which the policy is being specified. See the operation documentation for the appropriate value for this field.")],
        upload_protocol: Annotated[Optional[StrictStr], Field(description="Upload protocol for media (e.g. \"raw\", \"multipart\").")] = None,
        quota_user: Annotated[Optional[StrictStr], Field(description="Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.")] = None,
        pretty_print: Annotated[Optional[StrictBool], Field(description="Returns response with indentations and line breaks.")] = None,
        upload_type: Annotated[Optional[StrictStr], Field(description="Legacy upload protocol for media (e.g. \"media\", \"multipart\").")] = None,
        fields: Annotated[Optional[StrictStr], Field(description="Selector specifying which fields to include in a partial response.")] = None,
        param_callback: Annotated[Optional[StrictStr], Field(description="JSONP")] = None,
        oauth_token: Annotated[Optional[StrictStr], Field(description="OAuth 2.0 token for the current user.")] = None,
        xgafv: Annotated[Optional[StrictStr], Field(description="V1 error format.")] = None,
        alt: Annotated[Optional[StrictStr], Field(description="Data format for response.")] = None,
        key: Annotated[Optional[StrictStr], Field(description="API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.")] = None,
        access_token: Annotated[Optional[StrictStr], Field(description="OAuth access token.")] = None,
        google_iam_v1_set_iam_policy_request: Optional[GoogleIamV1SetIamPolicyRequest] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> GoogleIamV1Policy:
        """servicebroker_set_iam_policy

        Sets the access control policy on the specified resource. Replaces any existing policy.  Can return Public Errors: NOT_FOUND, INVALID_ARGUMENT and PERMISSION_DENIED

        :param resource: REQUIRED: The resource for which the policy is being specified. See the operation documentation for the appropriate value for this field. (required)
        :type resource: str
        :param upload_protocol: Upload protocol for media (e.g. \"raw\", \"multipart\").
        :type upload_protocol: str
        :param quota_user: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
        :type quota_user: str
        :param pretty_print: Returns response with indentations and line breaks.
        :type pretty_print: bool
        :param upload_type: Legacy upload protocol for media (e.g. \"media\", \"multipart\").
        :type upload_type: str
        :param fields: Selector specifying which fields to include in a partial response.
        :type fields: str
        :param param_callback: JSONP
        :type param_callback: str
        :param oauth_token: OAuth 2.0 token for the current user.
        :type oauth_token: str
        :param xgafv: V1 error format.
        :type xgafv: str
        :param alt: Data format for response.
        :type alt: str
        :param key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
        :type key: str
        :param access_token: OAuth access token.
        :type access_token: str
        :param google_iam_v1_set_iam_policy_request:
        :type google_iam_v1_set_iam_policy_request: GoogleIamV1SetIamPolicyRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._servicebroker_set_iam_policy_serialize(
            resource=resource,
            upload_protocol=upload_protocol,
            quota_user=quota_user,
            pretty_print=pretty_print,
            upload_type=upload_type,
            fields=fields,
            param_callback=param_callback,
            oauth_token=oauth_token,
            xgafv=xgafv,
            alt=alt,
            key=key,
            access_token=access_token,
            google_iam_v1_set_iam_policy_request=google_iam_v1_set_iam_policy_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GoogleIamV1Policy",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def servicebroker_set_iam_policy_with_http_info(
        self,
        resource: Annotated[StrictStr, Field(description="REQUIRED: The resource for which the policy is being specified. See the operation documentation for the appropriate value for this field.")],
        upload_protocol: Annotated[Optional[StrictStr], Field(description="Upload protocol for media (e.g. \"raw\", \"multipart\").")] = None,
        quota_user: Annotated[Optional[StrictStr], Field(description="Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.")] = None,
        pretty_print: Annotated[Optional[StrictBool], Field(description="Returns response with indentations and line breaks.")] = None,
        upload_type: Annotated[Optional[StrictStr], Field(description="Legacy upload protocol for media (e.g. \"media\", \"multipart\").")] = None,
        fields: Annotated[Optional[StrictStr], Field(description="Selector specifying which fields to include in a partial response.")] = None,
        param_callback: Annotated[Optional[StrictStr], Field(description="JSONP")] = None,
        oauth_token: Annotated[Optional[StrictStr], Field(description="OAuth 2.0 token for the current user.")] = None,
        xgafv: Annotated[Optional[StrictStr], Field(description="V1 error format.")] = None,
        alt: Annotated[Optional[StrictStr], Field(description="Data format for response.")] = None,
        key: Annotated[Optional[StrictStr], Field(description="API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.")] = None,
        access_token: Annotated[Optional[StrictStr], Field(description="OAuth access token.")] = None,
        google_iam_v1_set_iam_policy_request: Optional[GoogleIamV1SetIamPolicyRequest] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[GoogleIamV1Policy]:
        """servicebroker_set_iam_policy

        Sets the access control policy on the specified resource. Replaces any existing policy.  Can return Public Errors: NOT_FOUND, INVALID_ARGUMENT and PERMISSION_DENIED

        :param resource: REQUIRED: The resource for which the policy is being specified. See the operation documentation for the appropriate value for this field. (required)
        :type resource: str
        :param upload_protocol: Upload protocol for media (e.g. \"raw\", \"multipart\").
        :type upload_protocol: str
        :param quota_user: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
        :type quota_user: str
        :param pretty_print: Returns response with indentations and line breaks.
        :type pretty_print: bool
        :param upload_type: Legacy upload protocol for media (e.g. \"media\", \"multipart\").
        :type upload_type: str
        :param fields: Selector specifying which fields to include in a partial response.
        :type fields: str
        :param param_callback: JSONP
        :type param_callback: str
        :param oauth_token: OAuth 2.0 token for the current user.
        :type oauth_token: str
        :param xgafv: V1 error format.
        :type xgafv: str
        :param alt: Data format for response.
        :type alt: str
        :param key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
        :type key: str
        :param access_token: OAuth access token.
        :type access_token: str
        :param google_iam_v1_set_iam_policy_request:
        :type google_iam_v1_set_iam_policy_request: GoogleIamV1SetIamPolicyRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._servicebroker_set_iam_policy_serialize(
            resource=resource,
            upload_protocol=upload_protocol,
            quota_user=quota_user,
            pretty_print=pretty_print,
            upload_type=upload_type,
            fields=fields,
            param_callback=param_callback,
            oauth_token=oauth_token,
            xgafv=xgafv,
            alt=alt,
            key=key,
            access_token=access_token,
            google_iam_v1_set_iam_policy_request=google_iam_v1_set_iam_policy_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GoogleIamV1Policy",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def servicebroker_set_iam_policy_without_preload_content(
        self,
        resource: Annotated[StrictStr, Field(description="REQUIRED: The resource for which the policy is being specified. See the operation documentation for the appropriate value for this field.")],
        upload_protocol: Annotated[Optional[StrictStr], Field(description="Upload protocol for media (e.g. \"raw\", \"multipart\").")] = None,
        quota_user: Annotated[Optional[StrictStr], Field(description="Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.")] = None,
        pretty_print: Annotated[Optional[StrictBool], Field(description="Returns response with indentations and line breaks.")] = None,
        upload_type: Annotated[Optional[StrictStr], Field(description="Legacy upload protocol for media (e.g. \"media\", \"multipart\").")] = None,
        fields: Annotated[Optional[StrictStr], Field(description="Selector specifying which fields to include in a partial response.")] = None,
        param_callback: Annotated[Optional[StrictStr], Field(description="JSONP")] = None,
        oauth_token: Annotated[Optional[StrictStr], Field(description="OAuth 2.0 token for the current user.")] = None,
        xgafv: Annotated[Optional[StrictStr], Field(description="V1 error format.")] = None,
        alt: Annotated[Optional[StrictStr], Field(description="Data format for response.")] = None,
        key: Annotated[Optional[StrictStr], Field(description="API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.")] = None,
        access_token: Annotated[Optional[StrictStr], Field(description="OAuth access token.")] = None,
        google_iam_v1_set_iam_policy_request: Optional[GoogleIamV1SetIamPolicyRequest] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """servicebroker_set_iam_policy

        Sets the access control policy on the specified resource. Replaces any existing policy.  Can return Public Errors: NOT_FOUND, INVALID_ARGUMENT and PERMISSION_DENIED

        :param resource: REQUIRED: The resource for which the policy is being specified. See the operation documentation for the appropriate value for this field. (required)
        :type resource: str
        :param upload_protocol: Upload protocol for media (e.g. \"raw\", \"multipart\").
        :type upload_protocol: str
        :param quota_user: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
        :type quota_user: str
        :param pretty_print: Returns response with indentations and line breaks.
        :type pretty_print: bool
        :param upload_type: Legacy upload protocol for media (e.g. \"media\", \"multipart\").
        :type upload_type: str
        :param fields: Selector specifying which fields to include in a partial response.
        :type fields: str
        :param param_callback: JSONP
        :type param_callback: str
        :param oauth_token: OAuth 2.0 token for the current user.
        :type oauth_token: str
        :param xgafv: V1 error format.
        :type xgafv: str
        :param alt: Data format for response.
        :type alt: str
        :param key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
        :type key: str
        :param access_token: OAuth access token.
        :type access_token: str
        :param google_iam_v1_set_iam_policy_request:
        :type google_iam_v1_set_iam_policy_request: GoogleIamV1SetIamPolicyRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._servicebroker_set_iam_policy_serialize(
            resource=resource,
            upload_protocol=upload_protocol,
            quota_user=quota_user,
            pretty_print=pretty_print,
            upload_type=upload_type,
            fields=fields,
            param_callback=param_callback,
            oauth_token=oauth_token,
            xgafv=xgafv,
            alt=alt,
            key=key,
            access_token=access_token,
            google_iam_v1_set_iam_policy_request=google_iam_v1_set_iam_policy_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GoogleIamV1Policy",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _servicebroker_set_iam_policy_serialize(
        self,
        resource,
        upload_protocol,
        quota_user,
        pretty_print,
        upload_type,
        fields,
        param_callback,
        oauth_token,
        xgafv,
        alt,
        key,
        access_token,
        google_iam_v1_set_iam_policy_request,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if resource is not None:
            _path_params['resource'] = resource
        # process the query parameters
        if upload_protocol is not None:
            
            _query_params.append(('upload_protocol', upload_protocol))
            
        if quota_user is not None:
            
            _query_params.append(('quotaUser', quota_user))
            
        if pretty_print is not None:
            
            _query_params.append(('prettyPrint', pretty_print))
            
        if upload_type is not None:
            
            _query_params.append(('uploadType', upload_type))
            
        if fields is not None:
            
            _query_params.append(('fields', fields))
            
        if param_callback is not None:
            
            _query_params.append(('callback', param_callback))
            
        if oauth_token is not None:
            
            _query_params.append(('oauth_token', oauth_token))
            
        if xgafv is not None:
            
            _query_params.append(('$.xgafv', xgafv))
            
        if alt is not None:
            
            _query_params.append(('alt', alt))
            
        if key is not None:
            
            _query_params.append(('key', key))
            
        if access_token is not None:
            
            _query_params.append(('access_token', access_token))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if google_iam_v1_set_iam_policy_request is not None:
            _body_params = google_iam_v1_set_iam_policy_request


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    '*/*'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'Oauth2c', 
            'Oauth2'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/v1alpha1/{resource}:setIamPolicy',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def servicebroker_test_iam_permissions(
        self,
        resource: Annotated[StrictStr, Field(description="REQUIRED: The resource for which the policy detail is being requested. See the operation documentation for the appropriate value for this field.")],
        upload_protocol: Annotated[Optional[StrictStr], Field(description="Upload protocol for media (e.g. \"raw\", \"multipart\").")] = None,
        quota_user: Annotated[Optional[StrictStr], Field(description="Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.")] = None,
        pretty_print: Annotated[Optional[StrictBool], Field(description="Returns response with indentations and line breaks.")] = None,
        upload_type: Annotated[Optional[StrictStr], Field(description="Legacy upload protocol for media (e.g. \"media\", \"multipart\").")] = None,
        fields: Annotated[Optional[StrictStr], Field(description="Selector specifying which fields to include in a partial response.")] = None,
        param_callback: Annotated[Optional[StrictStr], Field(description="JSONP")] = None,
        oauth_token: Annotated[Optional[StrictStr], Field(description="OAuth 2.0 token for the current user.")] = None,
        xgafv: Annotated[Optional[StrictStr], Field(description="V1 error format.")] = None,
        alt: Annotated[Optional[StrictStr], Field(description="Data format for response.")] = None,
        key: Annotated[Optional[StrictStr], Field(description="API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.")] = None,
        access_token: Annotated[Optional[StrictStr], Field(description="OAuth access token.")] = None,
        google_iam_v1_test_iam_permissions_request: Optional[GoogleIamV1TestIamPermissionsRequest] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> GoogleIamV1TestIamPermissionsResponse:
        """servicebroker_test_iam_permissions

        Returns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a NOT_FOUND error.  Note: This operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may \"fail open\" without warning.

        :param resource: REQUIRED: The resource for which the policy detail is being requested. See the operation documentation for the appropriate value for this field. (required)
        :type resource: str
        :param upload_protocol: Upload protocol for media (e.g. \"raw\", \"multipart\").
        :type upload_protocol: str
        :param quota_user: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
        :type quota_user: str
        :param pretty_print: Returns response with indentations and line breaks.
        :type pretty_print: bool
        :param upload_type: Legacy upload protocol for media (e.g. \"media\", \"multipart\").
        :type upload_type: str
        :param fields: Selector specifying which fields to include in a partial response.
        :type fields: str
        :param param_callback: JSONP
        :type param_callback: str
        :param oauth_token: OAuth 2.0 token for the current user.
        :type oauth_token: str
        :param xgafv: V1 error format.
        :type xgafv: str
        :param alt: Data format for response.
        :type alt: str
        :param key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
        :type key: str
        :param access_token: OAuth access token.
        :type access_token: str
        :param google_iam_v1_test_iam_permissions_request:
        :type google_iam_v1_test_iam_permissions_request: GoogleIamV1TestIamPermissionsRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._servicebroker_test_iam_permissions_serialize(
            resource=resource,
            upload_protocol=upload_protocol,
            quota_user=quota_user,
            pretty_print=pretty_print,
            upload_type=upload_type,
            fields=fields,
            param_callback=param_callback,
            oauth_token=oauth_token,
            xgafv=xgafv,
            alt=alt,
            key=key,
            access_token=access_token,
            google_iam_v1_test_iam_permissions_request=google_iam_v1_test_iam_permissions_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GoogleIamV1TestIamPermissionsResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def servicebroker_test_iam_permissions_with_http_info(
        self,
        resource: Annotated[StrictStr, Field(description="REQUIRED: The resource for which the policy detail is being requested. See the operation documentation for the appropriate value for this field.")],
        upload_protocol: Annotated[Optional[StrictStr], Field(description="Upload protocol for media (e.g. \"raw\", \"multipart\").")] = None,
        quota_user: Annotated[Optional[StrictStr], Field(description="Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.")] = None,
        pretty_print: Annotated[Optional[StrictBool], Field(description="Returns response with indentations and line breaks.")] = None,
        upload_type: Annotated[Optional[StrictStr], Field(description="Legacy upload protocol for media (e.g. \"media\", \"multipart\").")] = None,
        fields: Annotated[Optional[StrictStr], Field(description="Selector specifying which fields to include in a partial response.")] = None,
        param_callback: Annotated[Optional[StrictStr], Field(description="JSONP")] = None,
        oauth_token: Annotated[Optional[StrictStr], Field(description="OAuth 2.0 token for the current user.")] = None,
        xgafv: Annotated[Optional[StrictStr], Field(description="V1 error format.")] = None,
        alt: Annotated[Optional[StrictStr], Field(description="Data format for response.")] = None,
        key: Annotated[Optional[StrictStr], Field(description="API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.")] = None,
        access_token: Annotated[Optional[StrictStr], Field(description="OAuth access token.")] = None,
        google_iam_v1_test_iam_permissions_request: Optional[GoogleIamV1TestIamPermissionsRequest] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[GoogleIamV1TestIamPermissionsResponse]:
        """servicebroker_test_iam_permissions

        Returns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a NOT_FOUND error.  Note: This operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may \"fail open\" without warning.

        :param resource: REQUIRED: The resource for which the policy detail is being requested. See the operation documentation for the appropriate value for this field. (required)
        :type resource: str
        :param upload_protocol: Upload protocol for media (e.g. \"raw\", \"multipart\").
        :type upload_protocol: str
        :param quota_user: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
        :type quota_user: str
        :param pretty_print: Returns response with indentations and line breaks.
        :type pretty_print: bool
        :param upload_type: Legacy upload protocol for media (e.g. \"media\", \"multipart\").
        :type upload_type: str
        :param fields: Selector specifying which fields to include in a partial response.
        :type fields: str
        :param param_callback: JSONP
        :type param_callback: str
        :param oauth_token: OAuth 2.0 token for the current user.
        :type oauth_token: str
        :param xgafv: V1 error format.
        :type xgafv: str
        :param alt: Data format for response.
        :type alt: str
        :param key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
        :type key: str
        :param access_token: OAuth access token.
        :type access_token: str
        :param google_iam_v1_test_iam_permissions_request:
        :type google_iam_v1_test_iam_permissions_request: GoogleIamV1TestIamPermissionsRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._servicebroker_test_iam_permissions_serialize(
            resource=resource,
            upload_protocol=upload_protocol,
            quota_user=quota_user,
            pretty_print=pretty_print,
            upload_type=upload_type,
            fields=fields,
            param_callback=param_callback,
            oauth_token=oauth_token,
            xgafv=xgafv,
            alt=alt,
            key=key,
            access_token=access_token,
            google_iam_v1_test_iam_permissions_request=google_iam_v1_test_iam_permissions_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GoogleIamV1TestIamPermissionsResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def servicebroker_test_iam_permissions_without_preload_content(
        self,
        resource: Annotated[StrictStr, Field(description="REQUIRED: The resource for which the policy detail is being requested. See the operation documentation for the appropriate value for this field.")],
        upload_protocol: Annotated[Optional[StrictStr], Field(description="Upload protocol for media (e.g. \"raw\", \"multipart\").")] = None,
        quota_user: Annotated[Optional[StrictStr], Field(description="Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.")] = None,
        pretty_print: Annotated[Optional[StrictBool], Field(description="Returns response with indentations and line breaks.")] = None,
        upload_type: Annotated[Optional[StrictStr], Field(description="Legacy upload protocol for media (e.g. \"media\", \"multipart\").")] = None,
        fields: Annotated[Optional[StrictStr], Field(description="Selector specifying which fields to include in a partial response.")] = None,
        param_callback: Annotated[Optional[StrictStr], Field(description="JSONP")] = None,
        oauth_token: Annotated[Optional[StrictStr], Field(description="OAuth 2.0 token for the current user.")] = None,
        xgafv: Annotated[Optional[StrictStr], Field(description="V1 error format.")] = None,
        alt: Annotated[Optional[StrictStr], Field(description="Data format for response.")] = None,
        key: Annotated[Optional[StrictStr], Field(description="API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.")] = None,
        access_token: Annotated[Optional[StrictStr], Field(description="OAuth access token.")] = None,
        google_iam_v1_test_iam_permissions_request: Optional[GoogleIamV1TestIamPermissionsRequest] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """servicebroker_test_iam_permissions

        Returns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a NOT_FOUND error.  Note: This operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may \"fail open\" without warning.

        :param resource: REQUIRED: The resource for which the policy detail is being requested. See the operation documentation for the appropriate value for this field. (required)
        :type resource: str
        :param upload_protocol: Upload protocol for media (e.g. \"raw\", \"multipart\").
        :type upload_protocol: str
        :param quota_user: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
        :type quota_user: str
        :param pretty_print: Returns response with indentations and line breaks.
        :type pretty_print: bool
        :param upload_type: Legacy upload protocol for media (e.g. \"media\", \"multipart\").
        :type upload_type: str
        :param fields: Selector specifying which fields to include in a partial response.
        :type fields: str
        :param param_callback: JSONP
        :type param_callback: str
        :param oauth_token: OAuth 2.0 token for the current user.
        :type oauth_token: str
        :param xgafv: V1 error format.
        :type xgafv: str
        :param alt: Data format for response.
        :type alt: str
        :param key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
        :type key: str
        :param access_token: OAuth access token.
        :type access_token: str
        :param google_iam_v1_test_iam_permissions_request:
        :type google_iam_v1_test_iam_permissions_request: GoogleIamV1TestIamPermissionsRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._servicebroker_test_iam_permissions_serialize(
            resource=resource,
            upload_protocol=upload_protocol,
            quota_user=quota_user,
            pretty_print=pretty_print,
            upload_type=upload_type,
            fields=fields,
            param_callback=param_callback,
            oauth_token=oauth_token,
            xgafv=xgafv,
            alt=alt,
            key=key,
            access_token=access_token,
            google_iam_v1_test_iam_permissions_request=google_iam_v1_test_iam_permissions_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GoogleIamV1TestIamPermissionsResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _servicebroker_test_iam_permissions_serialize(
        self,
        resource,
        upload_protocol,
        quota_user,
        pretty_print,
        upload_type,
        fields,
        param_callback,
        oauth_token,
        xgafv,
        alt,
        key,
        access_token,
        google_iam_v1_test_iam_permissions_request,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if resource is not None:
            _path_params['resource'] = resource
        # process the query parameters
        if upload_protocol is not None:
            
            _query_params.append(('upload_protocol', upload_protocol))
            
        if quota_user is not None:
            
            _query_params.append(('quotaUser', quota_user))
            
        if pretty_print is not None:
            
            _query_params.append(('prettyPrint', pretty_print))
            
        if upload_type is not None:
            
            _query_params.append(('uploadType', upload_type))
            
        if fields is not None:
            
            _query_params.append(('fields', fields))
            
        if param_callback is not None:
            
            _query_params.append(('callback', param_callback))
            
        if oauth_token is not None:
            
            _query_params.append(('oauth_token', oauth_token))
            
        if xgafv is not None:
            
            _query_params.append(('$.xgafv', xgafv))
            
        if alt is not None:
            
            _query_params.append(('alt', alt))
            
        if key is not None:
            
            _query_params.append(('key', key))
            
        if access_token is not None:
            
            _query_params.append(('access_token', access_token))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if google_iam_v1_test_iam_permissions_request is not None:
            _body_params = google_iam_v1_test_iam_permissions_request


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    '*/*'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'Oauth2c', 
            'Oauth2'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/v1alpha1/{resource}:testIamPermissions',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )



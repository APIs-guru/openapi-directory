# coding: utf-8

"""
    Firebase Cloud Messaging Data API

    Provides additional information about Firebase Cloud Messaging (FCM) message sends and deliveries.

    The version of the OpenAPI document: v1beta1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_firebase_fcm_data_v1beta1_data import GoogleFirebaseFcmDataV1beta1Data
from openapi_client.models.google_type_date import GoogleTypeDate
from typing import Optional, Set
from typing_extensions import Self

class GoogleFirebaseFcmDataV1beta1AndroidDeliveryData(BaseModel):
    """
    Message delivery data for a given date, app, and analytics label combination.
    """ # noqa: E501
    analytics_label: Optional[StrictStr] = Field(default=None, description="The analytics label associated with the messages sent. All messages sent without an analytics label will be grouped together in a single entry.", alias="analyticsLabel")
    app_id: Optional[StrictStr] = Field(default=None, description="The app ID to which the messages were sent.", alias="appId")
    data: Optional[GoogleFirebaseFcmDataV1beta1Data] = None
    var_date: Optional[GoogleTypeDate] = Field(default=None, alias="date")
    __properties: ClassVar[List[str]] = ["analyticsLabel", "appId", "data", "date"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleFirebaseFcmDataV1beta1AndroidDeliveryData from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of data
        if self.data:
            _dict['data'] = self.data.to_dict()
        # override the default output from pydantic by calling `to_dict()` of var_date
        if self.var_date:
            _dict['date'] = self.var_date.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleFirebaseFcmDataV1beta1AndroidDeliveryData from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "analyticsLabel": obj.get("analyticsLabel"),
            "appId": obj.get("appId"),
            "data": GoogleFirebaseFcmDataV1beta1Data.from_dict(obj["data"]) if obj.get("data") is not None else None,
            "date": GoogleTypeDate.from_dict(obj["date"]) if obj.get("date") is not None else None
        })
        return _obj



# coding: utf-8

"""
    Firebase Cloud Messaging Data API

    Provides additional information about Firebase Cloud Messaging (FCM) message sends and deliveries.

    The version of the OpenAPI document: v1beta1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class GoogleFirebaseFcmDataV1beta1DeliveryPerformancePercents(BaseModel):
    """
    Overview of delivery performance for messages that were successfully delivered. All percentages are calculated with countMessagesAccepted as the denominator. These categories are not mutually exclusive; a message can be delayed for multiple reasons.
    """ # noqa: E501
    delayed_device_doze: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The percentage of accepted messages that were delayed because the device was in doze mode. Only [normal priority messages](https://firebase.google.com/docs/cloud-messaging/concept-options#setting-the-priority-of-a-message) should be delayed due to doze mode.", alias="delayedDeviceDoze")
    delayed_device_offline: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The percentage of accepted messages that were delayed because the target device was not connected at the time of sending. These messages were eventually delivered when the device reconnected.", alias="delayedDeviceOffline")
    delayed_message_throttled: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The percentage of accepted messages that were delayed due to message throttling, such as [collapsible message throttling](https://firebase.google.com/docs/cloud-messaging/concept-options#collapsible_throttling) or [maximum message rate throttling](https://firebase.google.com/docs/cloud-messaging/concept-options#device_throttling).", alias="delayedMessageThrottled")
    delayed_user_stopped: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The percentage of accepted messages that were delayed because the intended device user-profile was [stopped](https://firebase.google.com/docs/cloud-messaging/android/receive#handling_messages) on the target device at the time of the send. The messages were eventually delivered when the user-profile was started again.", alias="delayedUserStopped")
    delivered_no_delay: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The percentage of accepted messages that were delivered to the device without delay from the FCM system.", alias="deliveredNoDelay")
    __properties: ClassVar[List[str]] = ["delayedDeviceDoze", "delayedDeviceOffline", "delayedMessageThrottled", "delayedUserStopped", "deliveredNoDelay"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleFirebaseFcmDataV1beta1DeliveryPerformancePercents from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleFirebaseFcmDataV1beta1DeliveryPerformancePercents from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "delayedDeviceDoze": obj.get("delayedDeviceDoze"),
            "delayedDeviceOffline": obj.get("delayedDeviceOffline"),
            "delayedMessageThrottled": obj.get("delayedMessageThrottled"),
            "delayedUserStopped": obj.get("delayedUserStopped"),
            "deliveredNoDelay": obj.get("deliveredNoDelay")
        })
        return _obj



# coding: utf-8

"""
    Firebase Cloud Messaging Data API

    Provides additional information about Firebase Cloud Messaging (FCM) message sends and deliveries.

    The version of the OpenAPI document: v1beta1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class GoogleFirebaseFcmDataV1beta1MessageOutcomePercents(BaseModel):
    """
    Percentage breakdown of message delivery outcomes. These categories are mutually exclusive. All percentages are calculated with countMessagesAccepted as the denominator. These categories may not account for all message outcomes.
    """ # noqa: E501
    delivered: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The percentage of all accepted messages that were successfully delivered to the device.")
    dropped_app_force_stopped: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The percentage of accepted messages that were dropped because the application was force stopped on the device at the time of delivery and retries were unsuccessful.", alias="droppedAppForceStopped")
    dropped_device_inactive: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The percentage of accepted messages that were dropped because the target device is inactive. FCM will drop messages if the target device is deemed inactive by our servers. If a device does reconnect, we call [OnDeletedMessages()](https://firebase.google.com/docs/cloud-messaging/android/receive#override-ondeletedmessages) in our SDK instead of delivering the messages.", alias="droppedDeviceInactive")
    dropped_too_many_pending_messages: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The percentage of accepted messages that were dropped due to [too many undelivered non-collapsible messages](https://firebase.google.com/docs/cloud-messaging/concept-options#collapsible_and_non-collapsible_messages). Specifically, each app instance can only have 100 pending messages stored on our servers for a device which is disconnected. When that device reconnects, those messages are delivered. When there are more than the maximum pending messages, we call [OnDeletedMessages()](https://firebase.google.com/docs/cloud-messaging/android/receive#override-ondeletedmessages) in our SDK instead of delivering the messages.", alias="droppedTooManyPendingMessages")
    pending: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The percentage of messages accepted on this day that were not dropped and not delivered, due to the device being disconnected (as of the end of the America/Los_Angeles day when the message was sent to FCM). A portion of these messages will be delivered the next day when the device connects but others may be destined to devices that ultimately never reconnect.")
    __properties: ClassVar[List[str]] = ["delivered", "droppedAppForceStopped", "droppedDeviceInactive", "droppedTooManyPendingMessages", "pending"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleFirebaseFcmDataV1beta1MessageOutcomePercents from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleFirebaseFcmDataV1beta1MessageOutcomePercents from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "delivered": obj.get("delivered"),
            "droppedAppForceStopped": obj.get("droppedAppForceStopped"),
            "droppedDeviceInactive": obj.get("droppedDeviceInactive"),
            "droppedTooManyPendingMessages": obj.get("droppedTooManyPendingMessages"),
            "pending": obj.get("pending")
        })
        return _obj



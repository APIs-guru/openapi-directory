# coding: utf-8

"""
    YouTube Reporting API

    Schedules reporting jobs containing your YouTube Analytics data and downloads the resulting bulk data reports in the form of CSV files.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBytes, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from openapi_client.models.gdata_blobstore2_info import GdataBlobstore2Info
from openapi_client.models.gdata_object_id import GdataObjectId
from typing import Optional, Set
from typing_extensions import Self

class GdataCompositeMedia(BaseModel):
    """
    gdata
    """ # noqa: E501
    blob_ref: Optional[Union[StrictBytes, StrictStr]] = Field(default=None, description="gdata", alias="blobRef")
    blobstore2_info: Optional[GdataBlobstore2Info] = Field(default=None, alias="blobstore2Info")
    cosmo_binary_reference: Optional[Union[StrictBytes, StrictStr]] = Field(default=None, description="gdata", alias="cosmoBinaryReference")
    crc32c_hash: Optional[StrictInt] = Field(default=None, description="gdata", alias="crc32cHash")
    inline: Optional[Union[StrictBytes, StrictStr]] = Field(default=None, description="gdata")
    length: Optional[StrictStr] = Field(default=None, description="gdata")
    md5_hash: Optional[Union[StrictBytes, StrictStr]] = Field(default=None, description="gdata", alias="md5Hash")
    object_id: Optional[GdataObjectId] = Field(default=None, alias="objectId")
    path: Optional[StrictStr] = Field(default=None, description="gdata")
    reference_type: Optional[StrictStr] = Field(default=None, description="gdata", alias="referenceType")
    sha1_hash: Optional[Union[StrictBytes, StrictStr]] = Field(default=None, description="gdata", alias="sha1Hash")
    __properties: ClassVar[List[str]] = ["blobRef", "blobstore2Info", "cosmoBinaryReference", "crc32cHash", "inline", "length", "md5Hash", "objectId", "path", "referenceType", "sha1Hash"]

    @field_validator('reference_type')
    def reference_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['PATH', 'BLOB_REF', 'INLINE', 'BIGSTORE_REF', 'COSMO_BINARY_REFERENCE']):
            raise ValueError("must be one of enum values ('PATH', 'BLOB_REF', 'INLINE', 'BIGSTORE_REF', 'COSMO_BINARY_REFERENCE')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GdataCompositeMedia from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of blobstore2_info
        if self.blobstore2_info:
            _dict['blobstore2Info'] = self.blobstore2_info.to_dict()
        # override the default output from pydantic by calling `to_dict()` of object_id
        if self.object_id:
            _dict['objectId'] = self.object_id.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GdataCompositeMedia from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "blobRef": obj.get("blobRef"),
            "blobstore2Info": GdataBlobstore2Info.from_dict(obj["blobstore2Info"]) if obj.get("blobstore2Info") is not None else None,
            "cosmoBinaryReference": obj.get("cosmoBinaryReference"),
            "crc32cHash": obj.get("crc32cHash"),
            "inline": obj.get("inline"),
            "length": obj.get("length"),
            "md5Hash": obj.get("md5Hash"),
            "objectId": GdataObjectId.from_dict(obj["objectId"]) if obj.get("objectId") is not None else None,
            "path": obj.get("path"),
            "referenceType": obj.get("referenceType"),
            "sha1Hash": obj.get("sha1Hash")
        })
        return _obj



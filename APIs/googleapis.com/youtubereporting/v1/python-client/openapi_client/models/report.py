# coding: utf-8

"""
    YouTube Reporting API

    Schedules reporting jobs containing your YouTube Analytics data and downloads the resulting bulk data reports in the form of CSV files.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class Report(BaseModel):
    """
    A report's metadata including the URL from which the report itself can be downloaded.
    """ # noqa: E501
    create_time: Optional[StrictStr] = Field(default=None, description="The date/time when this report was created.", alias="createTime")
    download_url: Optional[StrictStr] = Field(default=None, description="The URL from which the report can be downloaded (max. 1000 characters).", alias="downloadUrl")
    end_time: Optional[StrictStr] = Field(default=None, description="The end of the time period that the report instance covers. The value is exclusive.", alias="endTime")
    id: Optional[StrictStr] = Field(default=None, description="The server-generated ID of the report.")
    job_expire_time: Optional[StrictStr] = Field(default=None, description="The date/time when the job this report belongs to will expire/expired.", alias="jobExpireTime")
    job_id: Optional[StrictStr] = Field(default=None, description="The ID of the job that created this report.", alias="jobId")
    start_time: Optional[StrictStr] = Field(default=None, description="The start of the time period that the report instance covers. The value is inclusive.", alias="startTime")
    __properties: ClassVar[List[str]] = ["createTime", "downloadUrl", "endTime", "id", "jobExpireTime", "jobId", "startTime"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Report from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Report from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "createTime": obj.get("createTime"),
            "downloadUrl": obj.get("downloadUrl"),
            "endTime": obj.get("endTime"),
            "id": obj.get("id"),
            "jobExpireTime": obj.get("jobExpireTime"),
            "jobId": obj.get("jobId"),
            "startTime": obj.get("startTime")
        })
        return _obj



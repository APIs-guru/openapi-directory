# coding: utf-8

"""
    YouTube Reporting API

    Schedules reporting jobs containing your YouTube Analytics data and downloads the resulting bulk data reports in the form of CSV files.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictBytes, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from openapi_client.models.gdata_blobstore2_info import GdataBlobstore2Info
from openapi_client.models.gdata_composite_media import GdataCompositeMedia
from openapi_client.models.gdata_content_type_info import GdataContentTypeInfo
from openapi_client.models.gdata_diff_checksums_response import GdataDiffChecksumsResponse
from openapi_client.models.gdata_diff_download_response import GdataDiffDownloadResponse
from openapi_client.models.gdata_diff_upload_request import GdataDiffUploadRequest
from openapi_client.models.gdata_diff_upload_response import GdataDiffUploadResponse
from openapi_client.models.gdata_diff_version_response import GdataDiffVersionResponse
from openapi_client.models.gdata_download_parameters import GdataDownloadParameters
from openapi_client.models.gdata_object_id import GdataObjectId
from typing import Optional, Set
from typing_extensions import Self

class GdataMedia(BaseModel):
    """
    gdata
    """ # noqa: E501
    algorithm: Optional[StrictStr] = Field(default=None, description="gdata")
    bigstore_object_ref: Optional[Union[StrictBytes, StrictStr]] = Field(default=None, description="gdata", alias="bigstoreObjectRef")
    blob_ref: Optional[Union[StrictBytes, StrictStr]] = Field(default=None, description="gdata", alias="blobRef")
    blobstore2_info: Optional[GdataBlobstore2Info] = Field(default=None, alias="blobstore2Info")
    composite_media: Optional[List[GdataCompositeMedia]] = Field(default=None, description="gdata", alias="compositeMedia")
    content_type: Optional[StrictStr] = Field(default=None, description="gdata", alias="contentType")
    content_type_info: Optional[GdataContentTypeInfo] = Field(default=None, alias="contentTypeInfo")
    cosmo_binary_reference: Optional[Union[StrictBytes, StrictStr]] = Field(default=None, description="gdata", alias="cosmoBinaryReference")
    crc32c_hash: Optional[StrictInt] = Field(default=None, description="gdata", alias="crc32cHash")
    diff_checksums_response: Optional[GdataDiffChecksumsResponse] = Field(default=None, alias="diffChecksumsResponse")
    diff_download_response: Optional[GdataDiffDownloadResponse] = Field(default=None, alias="diffDownloadResponse")
    diff_upload_request: Optional[GdataDiffUploadRequest] = Field(default=None, alias="diffUploadRequest")
    diff_upload_response: Optional[GdataDiffUploadResponse] = Field(default=None, alias="diffUploadResponse")
    diff_version_response: Optional[GdataDiffVersionResponse] = Field(default=None, alias="diffVersionResponse")
    download_parameters: Optional[GdataDownloadParameters] = Field(default=None, alias="downloadParameters")
    filename: Optional[StrictStr] = Field(default=None, description="gdata")
    hash: Optional[StrictStr] = Field(default=None, description="gdata")
    hash_verified: Optional[StrictBool] = Field(default=None, description="gdata", alias="hashVerified")
    inline: Optional[Union[StrictBytes, StrictStr]] = Field(default=None, description="gdata")
    is_potential_retry: Optional[StrictBool] = Field(default=None, description="gdata", alias="isPotentialRetry")
    length: Optional[StrictStr] = Field(default=None, description="gdata")
    md5_hash: Optional[Union[StrictBytes, StrictStr]] = Field(default=None, description="gdata", alias="md5Hash")
    media_id: Optional[Union[StrictBytes, StrictStr]] = Field(default=None, description="gdata", alias="mediaId")
    object_id: Optional[GdataObjectId] = Field(default=None, alias="objectId")
    path: Optional[StrictStr] = Field(default=None, description="gdata")
    reference_type: Optional[StrictStr] = Field(default=None, description="gdata", alias="referenceType")
    sha1_hash: Optional[Union[StrictBytes, StrictStr]] = Field(default=None, description="gdata", alias="sha1Hash")
    sha256_hash: Optional[Union[StrictBytes, StrictStr]] = Field(default=None, description="gdata", alias="sha256Hash")
    timestamp: Optional[StrictStr] = Field(default=None, description="gdata")
    token: Optional[StrictStr] = Field(default=None, description="gdata")
    __properties: ClassVar[List[str]] = ["algorithm", "bigstoreObjectRef", "blobRef", "blobstore2Info", "compositeMedia", "contentType", "contentTypeInfo", "cosmoBinaryReference", "crc32cHash", "diffChecksumsResponse", "diffDownloadResponse", "diffUploadRequest", "diffUploadResponse", "diffVersionResponse", "downloadParameters", "filename", "hash", "hashVerified", "inline", "isPotentialRetry", "length", "md5Hash", "mediaId", "objectId", "path", "referenceType", "sha1Hash", "sha256Hash", "timestamp", "token"]

    @field_validator('reference_type')
    def reference_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['PATH', 'BLOB_REF', 'INLINE', 'GET_MEDIA', 'COMPOSITE_MEDIA', 'BIGSTORE_REF', 'DIFF_VERSION_RESPONSE', 'DIFF_CHECKSUMS_RESPONSE', 'DIFF_DOWNLOAD_RESPONSE', 'DIFF_UPLOAD_REQUEST', 'DIFF_UPLOAD_RESPONSE', 'COSMO_BINARY_REFERENCE', 'ARBITRARY_BYTES']):
            raise ValueError("must be one of enum values ('PATH', 'BLOB_REF', 'INLINE', 'GET_MEDIA', 'COMPOSITE_MEDIA', 'BIGSTORE_REF', 'DIFF_VERSION_RESPONSE', 'DIFF_CHECKSUMS_RESPONSE', 'DIFF_DOWNLOAD_RESPONSE', 'DIFF_UPLOAD_REQUEST', 'DIFF_UPLOAD_RESPONSE', 'COSMO_BINARY_REFERENCE', 'ARBITRARY_BYTES')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GdataMedia from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of blobstore2_info
        if self.blobstore2_info:
            _dict['blobstore2Info'] = self.blobstore2_info.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in composite_media (list)
        _items = []
        if self.composite_media:
            for _item_composite_media in self.composite_media:
                if _item_composite_media:
                    _items.append(_item_composite_media.to_dict())
            _dict['compositeMedia'] = _items
        # override the default output from pydantic by calling `to_dict()` of content_type_info
        if self.content_type_info:
            _dict['contentTypeInfo'] = self.content_type_info.to_dict()
        # override the default output from pydantic by calling `to_dict()` of diff_checksums_response
        if self.diff_checksums_response:
            _dict['diffChecksumsResponse'] = self.diff_checksums_response.to_dict()
        # override the default output from pydantic by calling `to_dict()` of diff_download_response
        if self.diff_download_response:
            _dict['diffDownloadResponse'] = self.diff_download_response.to_dict()
        # override the default output from pydantic by calling `to_dict()` of diff_upload_request
        if self.diff_upload_request:
            _dict['diffUploadRequest'] = self.diff_upload_request.to_dict()
        # override the default output from pydantic by calling `to_dict()` of diff_upload_response
        if self.diff_upload_response:
            _dict['diffUploadResponse'] = self.diff_upload_response.to_dict()
        # override the default output from pydantic by calling `to_dict()` of diff_version_response
        if self.diff_version_response:
            _dict['diffVersionResponse'] = self.diff_version_response.to_dict()
        # override the default output from pydantic by calling `to_dict()` of download_parameters
        if self.download_parameters:
            _dict['downloadParameters'] = self.download_parameters.to_dict()
        # override the default output from pydantic by calling `to_dict()` of object_id
        if self.object_id:
            _dict['objectId'] = self.object_id.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GdataMedia from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "algorithm": obj.get("algorithm"),
            "bigstoreObjectRef": obj.get("bigstoreObjectRef"),
            "blobRef": obj.get("blobRef"),
            "blobstore2Info": GdataBlobstore2Info.from_dict(obj["blobstore2Info"]) if obj.get("blobstore2Info") is not None else None,
            "compositeMedia": [GdataCompositeMedia.from_dict(_item) for _item in obj["compositeMedia"]] if obj.get("compositeMedia") is not None else None,
            "contentType": obj.get("contentType"),
            "contentTypeInfo": GdataContentTypeInfo.from_dict(obj["contentTypeInfo"]) if obj.get("contentTypeInfo") is not None else None,
            "cosmoBinaryReference": obj.get("cosmoBinaryReference"),
            "crc32cHash": obj.get("crc32cHash"),
            "diffChecksumsResponse": GdataDiffChecksumsResponse.from_dict(obj["diffChecksumsResponse"]) if obj.get("diffChecksumsResponse") is not None else None,
            "diffDownloadResponse": GdataDiffDownloadResponse.from_dict(obj["diffDownloadResponse"]) if obj.get("diffDownloadResponse") is not None else None,
            "diffUploadRequest": GdataDiffUploadRequest.from_dict(obj["diffUploadRequest"]) if obj.get("diffUploadRequest") is not None else None,
            "diffUploadResponse": GdataDiffUploadResponse.from_dict(obj["diffUploadResponse"]) if obj.get("diffUploadResponse") is not None else None,
            "diffVersionResponse": GdataDiffVersionResponse.from_dict(obj["diffVersionResponse"]) if obj.get("diffVersionResponse") is not None else None,
            "downloadParameters": GdataDownloadParameters.from_dict(obj["downloadParameters"]) if obj.get("downloadParameters") is not None else None,
            "filename": obj.get("filename"),
            "hash": obj.get("hash"),
            "hashVerified": obj.get("hashVerified"),
            "inline": obj.get("inline"),
            "isPotentialRetry": obj.get("isPotentialRetry"),
            "length": obj.get("length"),
            "md5Hash": obj.get("md5Hash"),
            "mediaId": obj.get("mediaId"),
            "objectId": GdataObjectId.from_dict(obj["objectId"]) if obj.get("objectId") is not None else None,
            "path": obj.get("path"),
            "referenceType": obj.get("referenceType"),
            "sha1Hash": obj.get("sha1Hash"),
            "sha256Hash": obj.get("sha256Hash"),
            "timestamp": obj.get("timestamp"),
            "token": obj.get("token")
        })
        return _obj



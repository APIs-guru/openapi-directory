# coding: utf-8

"""
    API Keys API

    Manages the API keys associated with developer projects.

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.v2_restrictions import V2Restrictions
from typing import Optional, Set
from typing_extensions import Self

class V2Key(BaseModel):
    """
    The representation of a key managed by the API Keys API.
    """ # noqa: E501
    annotations: Optional[Dict[str, StrictStr]] = Field(default=None, description="Annotations is an unstructured key-value map stored with a policy that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects.")
    create_time: Optional[StrictStr] = Field(default=None, description="Output only. A timestamp identifying the time this key was originally created.", alias="createTime")
    delete_time: Optional[StrictStr] = Field(default=None, description="Output only. A timestamp when this key was deleted. If the resource is not deleted, this must be empty.", alias="deleteTime")
    display_name: Optional[StrictStr] = Field(default=None, description="Human-readable display name of this key that you can modify. The maximum length is 63 characters.", alias="displayName")
    etag: Optional[StrictStr] = Field(default=None, description="Output only. A checksum computed by the server based on the current value of the Key resource. This may be sent on update and delete requests to ensure the client has an up-to-date value before proceeding. See https://google.aip.dev/154.")
    key_string: Optional[StrictStr] = Field(default=None, description="Output only. An encrypted and signed value held by this key. This field can be accessed only through the `GetKeyString` method.", alias="keyString")
    name: Optional[StrictStr] = Field(default=None, description="Output only. The resource name of the key. The `name` has the form: `projects//locations/global/keys/`. For example: `projects/123456867718/locations/global/keys/b7ff1f9f-8275-410a-94dd-3855ee9b5dd2` NOTE: Key is a global resource; hence the only supported value for location is `global`.")
    restrictions: Optional[V2Restrictions] = None
    uid: Optional[StrictStr] = Field(default=None, description="Output only. Unique id in UUID4 format.")
    update_time: Optional[StrictStr] = Field(default=None, description="Output only. A timestamp identifying the time this key was last updated.", alias="updateTime")
    __properties: ClassVar[List[str]] = ["annotations", "createTime", "deleteTime", "displayName", "etag", "keyString", "name", "restrictions", "uid", "updateTime"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of V2Key from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "create_time",
            "delete_time",
            "etag",
            "key_string",
            "name",
            "uid",
            "update_time",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of restrictions
        if self.restrictions:
            _dict['restrictions'] = self.restrictions.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of V2Key from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "annotations": obj.get("annotations"),
            "createTime": obj.get("createTime"),
            "deleteTime": obj.get("deleteTime"),
            "displayName": obj.get("displayName"),
            "etag": obj.get("etag"),
            "keyString": obj.get("keyString"),
            "name": obj.get("name"),
            "restrictions": V2Restrictions.from_dict(obj["restrictions"]) if obj.get("restrictions") is not None else None,
            "uid": obj.get("uid"),
            "updateTime": obj.get("updateTime")
        })
        return _obj



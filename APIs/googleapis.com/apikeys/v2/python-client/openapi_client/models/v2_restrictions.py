# coding: utf-8

"""
    API Keys API

    Manages the API keys associated with developer projects.

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.v2_android_key_restrictions import V2AndroidKeyRestrictions
from openapi_client.models.v2_api_target import V2ApiTarget
from openapi_client.models.v2_browser_key_restrictions import V2BrowserKeyRestrictions
from openapi_client.models.v2_ios_key_restrictions import V2IosKeyRestrictions
from openapi_client.models.v2_server_key_restrictions import V2ServerKeyRestrictions
from typing import Optional, Set
from typing_extensions import Self

class V2Restrictions(BaseModel):
    """
    Describes the restrictions on the key.
    """ # noqa: E501
    android_key_restrictions: Optional[V2AndroidKeyRestrictions] = Field(default=None, alias="androidKeyRestrictions")
    api_targets: Optional[List[V2ApiTarget]] = Field(default=None, description="A restriction for a specific service and optionally one or more specific methods. Requests are allowed if they match any of these restrictions. If no restrictions are specified, all targets are allowed.", alias="apiTargets")
    browser_key_restrictions: Optional[V2BrowserKeyRestrictions] = Field(default=None, alias="browserKeyRestrictions")
    ios_key_restrictions: Optional[V2IosKeyRestrictions] = Field(default=None, alias="iosKeyRestrictions")
    server_key_restrictions: Optional[V2ServerKeyRestrictions] = Field(default=None, alias="serverKeyRestrictions")
    __properties: ClassVar[List[str]] = ["androidKeyRestrictions", "apiTargets", "browserKeyRestrictions", "iosKeyRestrictions", "serverKeyRestrictions"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of V2Restrictions from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of android_key_restrictions
        if self.android_key_restrictions:
            _dict['androidKeyRestrictions'] = self.android_key_restrictions.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in api_targets (list)
        _items = []
        if self.api_targets:
            for _item_api_targets in self.api_targets:
                if _item_api_targets:
                    _items.append(_item_api_targets.to_dict())
            _dict['apiTargets'] = _items
        # override the default output from pydantic by calling `to_dict()` of browser_key_restrictions
        if self.browser_key_restrictions:
            _dict['browserKeyRestrictions'] = self.browser_key_restrictions.to_dict()
        # override the default output from pydantic by calling `to_dict()` of ios_key_restrictions
        if self.ios_key_restrictions:
            _dict['iosKeyRestrictions'] = self.ios_key_restrictions.to_dict()
        # override the default output from pydantic by calling `to_dict()` of server_key_restrictions
        if self.server_key_restrictions:
            _dict['serverKeyRestrictions'] = self.server_key_restrictions.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of V2Restrictions from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "androidKeyRestrictions": V2AndroidKeyRestrictions.from_dict(obj["androidKeyRestrictions"]) if obj.get("androidKeyRestrictions") is not None else None,
            "apiTargets": [V2ApiTarget.from_dict(_item) for _item in obj["apiTargets"]] if obj.get("apiTargets") is not None else None,
            "browserKeyRestrictions": V2BrowserKeyRestrictions.from_dict(obj["browserKeyRestrictions"]) if obj.get("browserKeyRestrictions") is not None else None,
            "iosKeyRestrictions": V2IosKeyRestrictions.from_dict(obj["iosKeyRestrictions"]) if obj.get("iosKeyRestrictions") is not None else None,
            "serverKeyRestrictions": V2ServerKeyRestrictions.from_dict(obj["serverKeyRestrictions"]) if obj.get("serverKeyRestrictions") is not None else None
        })
        return _obj



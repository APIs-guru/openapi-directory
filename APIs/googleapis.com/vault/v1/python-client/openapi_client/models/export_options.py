# coding: utf-8

"""
    Google Vault API

    Retention and eDiscovery for Google Workspace. To work with Vault resources, the account must have the [required Vault privileges](https://support.google.com/vault/answer/2799699) and access to the matter. To access a matter, the account must have created the matter, have the matter shared with them, or have the **View All Matters** privilege. For example, to download an export, an account needs the **Manage Exports** privilege and the matter shared with them. 

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.calendar_export_options import CalendarExportOptions
from openapi_client.models.drive_export_options import DriveExportOptions
from openapi_client.models.groups_export_options import GroupsExportOptions
from openapi_client.models.hangouts_chat_export_options import HangoutsChatExportOptions
from openapi_client.models.mail_export_options import MailExportOptions
from openapi_client.models.voice_export_options import VoiceExportOptions
from typing import Optional, Set
from typing_extensions import Self

class ExportOptions(BaseModel):
    """
    Additional options for exports
    """ # noqa: E501
    calendar_options: Optional[CalendarExportOptions] = Field(default=None, alias="calendarOptions")
    drive_options: Optional[DriveExportOptions] = Field(default=None, alias="driveOptions")
    groups_options: Optional[GroupsExportOptions] = Field(default=None, alias="groupsOptions")
    hangouts_chat_options: Optional[HangoutsChatExportOptions] = Field(default=None, alias="hangoutsChatOptions")
    mail_options: Optional[MailExportOptions] = Field(default=None, alias="mailOptions")
    region: Optional[StrictStr] = Field(default=None, description="The requested data region for the export.")
    voice_options: Optional[VoiceExportOptions] = Field(default=None, alias="voiceOptions")
    __properties: ClassVar[List[str]] = ["calendarOptions", "driveOptions", "groupsOptions", "hangoutsChatOptions", "mailOptions", "region", "voiceOptions"]

    @field_validator('region')
    def region_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['EXPORT_REGION_UNSPECIFIED', 'ANY', 'US', 'EUROPE']):
            raise ValueError("must be one of enum values ('EXPORT_REGION_UNSPECIFIED', 'ANY', 'US', 'EUROPE')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ExportOptions from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of calendar_options
        if self.calendar_options:
            _dict['calendarOptions'] = self.calendar_options.to_dict()
        # override the default output from pydantic by calling `to_dict()` of drive_options
        if self.drive_options:
            _dict['driveOptions'] = self.drive_options.to_dict()
        # override the default output from pydantic by calling `to_dict()` of groups_options
        if self.groups_options:
            _dict['groupsOptions'] = self.groups_options.to_dict()
        # override the default output from pydantic by calling `to_dict()` of hangouts_chat_options
        if self.hangouts_chat_options:
            _dict['hangoutsChatOptions'] = self.hangouts_chat_options.to_dict()
        # override the default output from pydantic by calling `to_dict()` of mail_options
        if self.mail_options:
            _dict['mailOptions'] = self.mail_options.to_dict()
        # override the default output from pydantic by calling `to_dict()` of voice_options
        if self.voice_options:
            _dict['voiceOptions'] = self.voice_options.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ExportOptions from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "calendarOptions": CalendarExportOptions.from_dict(obj["calendarOptions"]) if obj.get("calendarOptions") is not None else None,
            "driveOptions": DriveExportOptions.from_dict(obj["driveOptions"]) if obj.get("driveOptions") is not None else None,
            "groupsOptions": GroupsExportOptions.from_dict(obj["groupsOptions"]) if obj.get("groupsOptions") is not None else None,
            "hangoutsChatOptions": HangoutsChatExportOptions.from_dict(obj["hangoutsChatOptions"]) if obj.get("hangoutsChatOptions") is not None else None,
            "mailOptions": MailExportOptions.from_dict(obj["mailOptions"]) if obj.get("mailOptions") is not None else None,
            "region": obj.get("region"),
            "voiceOptions": VoiceExportOptions.from_dict(obj["voiceOptions"]) if obj.get("voiceOptions") is not None else None
        })
        return _obj



# coding: utf-8

"""
    Google Vault API

    Retention and eDiscovery for Google Workspace. To work with Vault resources, the account must have the [required Vault privileges](https://support.google.com/vault/answer/2799699) and access to the matter. To access a matter, the account must have created the matter, have the matter shared with them, or have the **View All Matters** privilege. For example, to download an export, an account needs the **Manage Exports** privilege and the matter shared with them. 

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class DriveOptions(BaseModel):
    """
    Additional options for Drive search
    """ # noqa: E501
    client_side_encrypted_option: Optional[StrictStr] = Field(default=None, description="Set whether the results include only content encrypted with [Google Workspace Client-side encryption](https://support.google.com/a?p=cse_ov) content, only unencrypted content, or both. Defaults to both. Currently supported for Drive.", alias="clientSideEncryptedOption")
    include_shared_drives: Optional[StrictBool] = Field(default=None, description="Set to **true** to include shared drives.", alias="includeSharedDrives")
    include_team_drives: Optional[StrictBool] = Field(default=None, description="Set to true to include Team Drive.", alias="includeTeamDrives")
    version_date: Optional[StrictStr] = Field(default=None, description="Search the current version of the Drive file, but export the contents of the last version saved before 12:00 AM UTC on the specified date. Enter the date in UTC.", alias="versionDate")
    __properties: ClassVar[List[str]] = ["clientSideEncryptedOption", "includeSharedDrives", "includeTeamDrives", "versionDate"]

    @field_validator('client_side_encrypted_option')
    def client_side_encrypted_option_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['CLIENT_SIDE_ENCRYPTED_OPTION_UNSPECIFIED', 'CLIENT_SIDE_ENCRYPTED_OPTION_ANY', 'CLIENT_SIDE_ENCRYPTED_OPTION_ENCRYPTED', 'CLIENT_SIDE_ENCRYPTED_OPTION_UNENCRYPTED']):
            raise ValueError("must be one of enum values ('CLIENT_SIDE_ENCRYPTED_OPTION_UNSPECIFIED', 'CLIENT_SIDE_ENCRYPTED_OPTION_ANY', 'CLIENT_SIDE_ENCRYPTED_OPTION_ENCRYPTED', 'CLIENT_SIDE_ENCRYPTED_OPTION_UNENCRYPTED')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DriveOptions from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DriveOptions from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "clientSideEncryptedOption": obj.get("clientSideEncryptedOption"),
            "includeSharedDrives": obj.get("includeSharedDrives"),
            "includeTeamDrives": obj.get("includeTeamDrives"),
            "versionDate": obj.get("versionDate")
        })
        return _obj



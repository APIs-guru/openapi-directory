# coding: utf-8

"""
    Google Vault API

    Retention and eDiscovery for Google Workspace. To work with Vault resources, the account must have the [required Vault privileges](https://support.google.com/vault/answer/2799699) and access to the matter. To access a matter, the account must have created the matter, have the matter shared with them, or have the **View All Matters** privilege. For example, to download an export, an account needs the **Manage Exports** privilege and the matter shared with them. 

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.account_count import AccountCount
from openapi_client.models.account_count_error import AccountCountError
from typing import Optional, Set
from typing_extensions import Self

class GroupsCountResult(BaseModel):
    """
    Groups specific count metrics.
    """ # noqa: E501
    account_count_errors: Optional[List[AccountCountError]] = Field(default=None, description="Error occurred when querying these accounts.", alias="accountCountErrors")
    account_counts: Optional[List[AccountCount]] = Field(default=None, description="Subtotal count per matching account that have more than zero messages.", alias="accountCounts")
    matching_accounts_count: Optional[StrictStr] = Field(default=None, description="Total number of accounts that can be queried and have more than zero messages.", alias="matchingAccountsCount")
    non_queryable_accounts: Optional[List[StrictStr]] = Field(default=None, description="When **DataScope** is **HELD_DATA**, these accounts in the request are not queried because they are not on hold. For other data scope, this field is not set.", alias="nonQueryableAccounts")
    queried_accounts_count: Optional[StrictStr] = Field(default=None, description="Total number of accounts involved in this count operation.", alias="queriedAccountsCount")
    __properties: ClassVar[List[str]] = ["accountCountErrors", "accountCounts", "matchingAccountsCount", "nonQueryableAccounts", "queriedAccountsCount"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GroupsCountResult from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in account_count_errors (list)
        _items = []
        if self.account_count_errors:
            for _item_account_count_errors in self.account_count_errors:
                if _item_account_count_errors:
                    _items.append(_item_account_count_errors.to_dict())
            _dict['accountCountErrors'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in account_counts (list)
        _items = []
        if self.account_counts:
            for _item_account_counts in self.account_counts:
                if _item_account_counts:
                    _items.append(_item_account_counts.to_dict())
            _dict['accountCounts'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GroupsCountResult from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "accountCountErrors": [AccountCountError.from_dict(_item) for _item in obj["accountCountErrors"]] if obj.get("accountCountErrors") is not None else None,
            "accountCounts": [AccountCount.from_dict(_item) for _item in obj["accountCounts"]] if obj.get("accountCounts") is not None else None,
            "matchingAccountsCount": obj.get("matchingAccountsCount"),
            "nonQueryableAccounts": obj.get("nonQueryableAccounts"),
            "queriedAccountsCount": obj.get("queriedAccountsCount")
        })
        return _obj



# coding: utf-8

"""
    Google Vault API

    Retention and eDiscovery for Google Workspace. To work with Vault resources, the account must have the [required Vault privileges](https://support.google.com/vault/answer/2799699) and access to the matter. To access a matter, the account must have created the matter, have the matter shared with them, or have the **View All Matters** privilege. For example, to download an export, an account needs the **Manage Exports** privilege and the matter shared with them. 

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.matter_permission import MatterPermission
from typing import Optional, Set
from typing_extensions import Self

class AddMatterPermissionsRequest(BaseModel):
    """
    Add an account with the permission specified. The role cannot be owner. If an account already has a role in the matter, the existing role is overwritten.
    """ # noqa: E501
    cc_me: Optional[StrictBool] = Field(default=None, description="Only relevant if **sendEmails** is **true**. To CC the requestor in the email message, set to **true**. To not CC requestor, set to **false**.", alias="ccMe")
    matter_permission: Optional[MatterPermission] = Field(default=None, alias="matterPermission")
    send_emails: Optional[StrictBool] = Field(default=None, description="To send a notification email to the added account, set to **true**. To not send a notification email, set to **false**.", alias="sendEmails")
    __properties: ClassVar[List[str]] = ["ccMe", "matterPermission", "sendEmails"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AddMatterPermissionsRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of matter_permission
        if self.matter_permission:
            _dict['matterPermission'] = self.matter_permission.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AddMatterPermissionsRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "ccMe": obj.get("ccMe"),
            "matterPermission": MatterPermission.from_dict(obj["matterPermission"]) if obj.get("matterPermission") is not None else None,
            "sendEmails": obj.get("sendEmails")
        })
        return _obj



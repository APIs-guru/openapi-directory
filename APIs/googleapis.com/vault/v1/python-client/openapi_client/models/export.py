# coding: utf-8

"""
    Google Vault API

    Retention and eDiscovery for Google Workspace. To work with Vault resources, the account must have the [required Vault privileges](https://support.google.com/vault/answer/2799699) and access to the matter. To access a matter, the account must have created the matter, have the matter shared with them, or have the **View All Matters** privilege. For example, to download an export, an account needs the **Manage Exports** privilege and the matter shared with them. 

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.cloud_storage_sink import CloudStorageSink
from openapi_client.models.export_options import ExportOptions
from openapi_client.models.export_stats import ExportStats
from openapi_client.models.query import Query
from openapi_client.models.user_info import UserInfo
from typing import Optional, Set
from typing_extensions import Self

class Export(BaseModel):
    """
    An export. To work with Vault resources, the account must have the [required Vault privileges](https://support.google.com/vault/answer/2799699) and access to the matter. To access a matter, the account must have created the matter, have the matter shared with them, or have the **View All Matters** privilege.
    """ # noqa: E501
    cloud_storage_sink: Optional[CloudStorageSink] = Field(default=None, alias="cloudStorageSink")
    create_time: Optional[StrictStr] = Field(default=None, description="Output only. The time when the export was created.", alias="createTime")
    export_options: Optional[ExportOptions] = Field(default=None, alias="exportOptions")
    id: Optional[StrictStr] = Field(default=None, description="Output only. The generated export ID.")
    matter_id: Optional[StrictStr] = Field(default=None, description="Output only. The matter ID.", alias="matterId")
    name: Optional[StrictStr] = Field(default=None, description="The export name. Don't use special characters (~!$'(),;@:/?) in the name, they can prevent you from downloading exports.")
    parent_export_id: Optional[StrictStr] = Field(default=None, description="Output only. Identifies the parent export that spawned this child export. This is only set on child exports.", alias="parentExportId")
    query: Optional[Query] = None
    requester: Optional[UserInfo] = None
    stats: Optional[ExportStats] = None
    status: Optional[StrictStr] = Field(default=None, description="Output only. The status of the export.")
    __properties: ClassVar[List[str]] = ["cloudStorageSink", "createTime", "exportOptions", "id", "matterId", "name", "parentExportId", "query", "requester", "stats", "status"]

    @field_validator('status')
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['EXPORT_STATUS_UNSPECIFIED', 'COMPLETED', 'FAILED', 'IN_PROGRESS']):
            raise ValueError("must be one of enum values ('EXPORT_STATUS_UNSPECIFIED', 'COMPLETED', 'FAILED', 'IN_PROGRESS')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Export from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "parent_export_id",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of cloud_storage_sink
        if self.cloud_storage_sink:
            _dict['cloudStorageSink'] = self.cloud_storage_sink.to_dict()
        # override the default output from pydantic by calling `to_dict()` of export_options
        if self.export_options:
            _dict['exportOptions'] = self.export_options.to_dict()
        # override the default output from pydantic by calling `to_dict()` of query
        if self.query:
            _dict['query'] = self.query.to_dict()
        # override the default output from pydantic by calling `to_dict()` of requester
        if self.requester:
            _dict['requester'] = self.requester.to_dict()
        # override the default output from pydantic by calling `to_dict()` of stats
        if self.stats:
            _dict['stats'] = self.stats.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Export from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "cloudStorageSink": CloudStorageSink.from_dict(obj["cloudStorageSink"]) if obj.get("cloudStorageSink") is not None else None,
            "createTime": obj.get("createTime"),
            "exportOptions": ExportOptions.from_dict(obj["exportOptions"]) if obj.get("exportOptions") is not None else None,
            "id": obj.get("id"),
            "matterId": obj.get("matterId"),
            "name": obj.get("name"),
            "parentExportId": obj.get("parentExportId"),
            "query": Query.from_dict(obj["query"]) if obj.get("query") is not None else None,
            "requester": UserInfo.from_dict(obj["requester"]) if obj.get("requester") is not None else None,
            "stats": ExportStats.from_dict(obj["stats"]) if obj.get("stats") is not None else None,
            "status": obj.get("status")
        })
        return _obj



# coding: utf-8

"""
    Google Vault API

    Retention and eDiscovery for Google Workspace. To work with Vault resources, the account must have the [required Vault privileges](https://support.google.com/vault/answer/2799699) and access to the matter. To access a matter, the account must have created the matter, have the matter shared with them, or have the **View All Matters** privilege. For example, to download an export, an account needs the **Manage Exports** privilege and the matter shared with them. 

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.corpus_query import CorpusQuery
from openapi_client.models.held_account import HeldAccount
from openapi_client.models.held_org_unit import HeldOrgUnit
from typing import Optional, Set
from typing_extensions import Self

class Hold(BaseModel):
    """
    A hold. A hold prevents the specified Google Workspace service from purging data for specific accounts or all members of an organizational unit. To work with Vault resources, the account must have the [required Vault privileges] (https://support.google.com/vault/answer/2799699) and access to the matter. To access a matter, the account must have created the matter, have the matter shared with them, or have the **View All Matters** privilege.
    """ # noqa: E501
    accounts: Optional[List[HeldAccount]] = Field(default=None, description="If set, the hold applies to the specified accounts and **orgUnit** must be empty.")
    corpus: Optional[StrictStr] = Field(default=None, description="The service to be searched.")
    hold_id: Optional[StrictStr] = Field(default=None, description="The unique immutable ID of the hold. Assigned during creation.", alias="holdId")
    name: Optional[StrictStr] = Field(default=None, description="The name of the hold.")
    org_unit: Optional[HeldOrgUnit] = Field(default=None, alias="orgUnit")
    query: Optional[CorpusQuery] = None
    update_time: Optional[StrictStr] = Field(default=None, description="The last time this hold was modified.", alias="updateTime")
    __properties: ClassVar[List[str]] = ["accounts", "corpus", "holdId", "name", "orgUnit", "query", "updateTime"]

    @field_validator('corpus')
    def corpus_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['CORPUS_TYPE_UNSPECIFIED', 'DRIVE', 'MAIL', 'GROUPS', 'HANGOUTS_CHAT', 'VOICE', 'CALENDAR']):
            raise ValueError("must be one of enum values ('CORPUS_TYPE_UNSPECIFIED', 'DRIVE', 'MAIL', 'GROUPS', 'HANGOUTS_CHAT', 'VOICE', 'CALENDAR')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Hold from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in accounts (list)
        _items = []
        if self.accounts:
            for _item_accounts in self.accounts:
                if _item_accounts:
                    _items.append(_item_accounts.to_dict())
            _dict['accounts'] = _items
        # override the default output from pydantic by calling `to_dict()` of org_unit
        if self.org_unit:
            _dict['orgUnit'] = self.org_unit.to_dict()
        # override the default output from pydantic by calling `to_dict()` of query
        if self.query:
            _dict['query'] = self.query.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Hold from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "accounts": [HeldAccount.from_dict(_item) for _item in obj["accounts"]] if obj.get("accounts") is not None else None,
            "corpus": obj.get("corpus"),
            "holdId": obj.get("holdId"),
            "name": obj.get("name"),
            "orgUnit": HeldOrgUnit.from_dict(obj["orgUnit"]) if obj.get("orgUnit") is not None else None,
            "query": CorpusQuery.from_dict(obj["query"]) if obj.get("query") is not None else None,
            "updateTime": obj.get("updateTime")
        })
        return _obj



# coding: utf-8

"""
    Google Vault API

    Retention and eDiscovery for Google Workspace. To work with Vault resources, the account must have the [required Vault privileges](https://support.google.com/vault/answer/2799699) and access to the matter. To access a matter, the account must have created the matter, have the matter shared with them, or have the **View All Matters** privilege. For example, to download an export, an account needs the **Manage Exports** privilege and the matter shared with them. 

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.matter_permission import MatterPermission
from typing import Optional, Set
from typing_extensions import Self

class Matter(BaseModel):
    """
    Represents a matter. To work with Vault resources, the account must have the [required Vault privileges] (https://support.google.com/vault/answer/2799699) and access to the matter. To access a matter, the account must have created the matter, have the matter shared with them, or have the **View All Matters** privilege.
    """ # noqa: E501
    description: Optional[StrictStr] = Field(default=None, description="An optional description for the matter.")
    matter_id: Optional[StrictStr] = Field(default=None, description="The matter ID, which is generated by the server. Leave blank when creating a matter.", alias="matterId")
    matter_permissions: Optional[List[MatterPermission]] = Field(default=None, description="Lists the users and their permission for the matter. Currently there is no programmer defined limit on the number of permissions a matter can have.", alias="matterPermissions")
    name: Optional[StrictStr] = Field(default=None, description="The name of the matter.")
    state: Optional[StrictStr] = Field(default=None, description="The state of the matter.")
    __properties: ClassVar[List[str]] = ["description", "matterId", "matterPermissions", "name", "state"]

    @field_validator('state')
    def state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['STATE_UNSPECIFIED', 'OPEN', 'CLOSED', 'DELETED']):
            raise ValueError("must be one of enum values ('STATE_UNSPECIFIED', 'OPEN', 'CLOSED', 'DELETED')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Matter from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in matter_permissions (list)
        _items = []
        if self.matter_permissions:
            for _item_matter_permissions in self.matter_permissions:
                if _item_matter_permissions:
                    _items.append(_item_matter_permissions.to_dict())
            _dict['matterPermissions'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Matter from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "description": obj.get("description"),
            "matterId": obj.get("matterId"),
            "matterPermissions": [MatterPermission.from_dict(_item) for _item in obj["matterPermissions"]] if obj.get("matterPermissions") is not None else None,
            "name": obj.get("name"),
            "state": obj.get("state")
        })
        return _obj



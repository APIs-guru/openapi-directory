# coding: utf-8

"""
    Google Vault API

    Retention and eDiscovery for Google Workspace. To work with Vault resources, the account must have the [required Vault privileges](https://support.google.com/vault/answer/2799699) and access to the matter. To access a matter, the account must have created the matter, have the matter shared with them, or have the **View All Matters** privilege. For example, to download an export, an account needs the **Manage Exports** privilege and the matter shared with them. 

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class CalendarOptions(BaseModel):
    """
    Additional options for Calendar search
    """ # noqa: E501
    location_query: Optional[List[StrictStr]] = Field(default=None, description="Matches only those events whose location contains all of the words in the given set. If the string contains quoted phrases, this method only matches those events whose location contain the exact phrase. Entries in the set are considered in \"and\". Word splitting example: [\"New Zealand\"] vs [\"New\",\"Zealand\"] \"New Zealand\": matched by both \"New and better Zealand\": only matched by the later", alias="locationQuery")
    minus_words: Optional[List[StrictStr]] = Field(default=None, description="Matches only those events that do not contain any of the words in the given set in title, description, location, or attendees. Entries in the set are considered in \"or\".", alias="minusWords")
    people_query: Optional[List[StrictStr]] = Field(default=None, description="Matches only those events whose attendees contain all of the words in the given set. Entries in the set are considered in \"and\".", alias="peopleQuery")
    response_statuses: Optional[List[StrictStr]] = Field(default=None, description="Matches only events for which the custodian gave one of these responses. If the set is empty or contains ATTENDEE_RESPONSE_UNSPECIFIED there will be no filtering on responses.", alias="responseStatuses")
    version_date: Optional[StrictStr] = Field(default=None, description="Search the current version of the Calendar event, but export the contents of the last version saved before 12:00 AM UTC on the specified date. Enter the date in UTC.", alias="versionDate")
    __properties: ClassVar[List[str]] = ["locationQuery", "minusWords", "peopleQuery", "responseStatuses", "versionDate"]

    @field_validator('response_statuses')
    def response_statuses_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        for i in value:
            if i not in set(['ATTENDEE_RESPONSE_UNSPECIFIED', 'ATTENDEE_RESPONSE_NEEDS_ACTION', 'ATTENDEE_RESPONSE_ACCEPTED', 'ATTENDEE_RESPONSE_DECLINED', 'ATTENDEE_RESPONSE_TENTATIVE']):
                raise ValueError("each list item must be one of ('ATTENDEE_RESPONSE_UNSPECIFIED', 'ATTENDEE_RESPONSE_NEEDS_ACTION', 'ATTENDEE_RESPONSE_ACCEPTED', 'ATTENDEE_RESPONSE_DECLINED', 'ATTENDEE_RESPONSE_TENTATIVE')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CalendarOptions from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CalendarOptions from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "locationQuery": obj.get("locationQuery"),
            "minusWords": obj.get("minusWords"),
            "peopleQuery": obj.get("peopleQuery"),
            "responseStatuses": obj.get("responseStatuses"),
            "versionDate": obj.get("versionDate")
        })
        return _obj



# coding: utf-8

"""
    Google Vault API

    Retention and eDiscovery for Google Workspace. To work with Vault resources, the account must have the [required Vault privileges](https://support.google.com/vault/answer/2799699) and access to the matter. To access a matter, the account must have created the matter, have the matter shared with them, or have the **View All Matters** privilege. For example, to download an export, an account needs the **Manage Exports** privilege and the matter shared with them. 

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.held_drive_query import HeldDriveQuery
from openapi_client.models.held_groups_query import HeldGroupsQuery
from openapi_client.models.held_hangouts_chat_query import HeldHangoutsChatQuery
from openapi_client.models.held_mail_query import HeldMailQuery
from openapi_client.models.held_voice_query import HeldVoiceQuery
from typing import Optional, Set
from typing_extensions import Self

class CorpusQuery(BaseModel):
    """
    Service-specific options for holds.
    """ # noqa: E501
    drive_query: Optional[HeldDriveQuery] = Field(default=None, alias="driveQuery")
    groups_query: Optional[HeldGroupsQuery] = Field(default=None, alias="groupsQuery")
    hangouts_chat_query: Optional[HeldHangoutsChatQuery] = Field(default=None, alias="hangoutsChatQuery")
    mail_query: Optional[HeldMailQuery] = Field(default=None, alias="mailQuery")
    voice_query: Optional[HeldVoiceQuery] = Field(default=None, alias="voiceQuery")
    __properties: ClassVar[List[str]] = ["driveQuery", "groupsQuery", "hangoutsChatQuery", "mailQuery", "voiceQuery"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CorpusQuery from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of drive_query
        if self.drive_query:
            _dict['driveQuery'] = self.drive_query.to_dict()
        # override the default output from pydantic by calling `to_dict()` of groups_query
        if self.groups_query:
            _dict['groupsQuery'] = self.groups_query.to_dict()
        # override the default output from pydantic by calling `to_dict()` of hangouts_chat_query
        if self.hangouts_chat_query:
            _dict['hangoutsChatQuery'] = self.hangouts_chat_query.to_dict()
        # override the default output from pydantic by calling `to_dict()` of mail_query
        if self.mail_query:
            _dict['mailQuery'] = self.mail_query.to_dict()
        # override the default output from pydantic by calling `to_dict()` of voice_query
        if self.voice_query:
            _dict['voiceQuery'] = self.voice_query.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CorpusQuery from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "driveQuery": HeldDriveQuery.from_dict(obj["driveQuery"]) if obj.get("driveQuery") is not None else None,
            "groupsQuery": HeldGroupsQuery.from_dict(obj["groupsQuery"]) if obj.get("groupsQuery") is not None else None,
            "hangoutsChatQuery": HeldHangoutsChatQuery.from_dict(obj["hangoutsChatQuery"]) if obj.get("hangoutsChatQuery") is not None else None,
            "mailQuery": HeldMailQuery.from_dict(obj["mailQuery"]) if obj.get("mailQuery") is not None else None,
            "voiceQuery": HeldVoiceQuery.from_dict(obj["voiceQuery"]) if obj.get("voiceQuery") is not None else None
        })
        return _obj



# coding: utf-8

"""
    Google Vault API

    Retention and eDiscovery for Google Workspace. To work with Vault resources, the account must have the [required Vault privileges](https://support.google.com/vault/answer/2799699) and access to the matter. To access a matter, the account must have created the matter, have the matter shared with them, or have the **View All Matters** privilege. For example, to download an export, an account needs the **Manage Exports** privilege and the matter shared with them. 

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.list_saved_queries_response import ListSavedQueriesResponse

class TestListSavedQueriesResponse(unittest.TestCase):
    """ListSavedQueriesResponse unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> ListSavedQueriesResponse:
        """Test ListSavedQueriesResponse
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `ListSavedQueriesResponse`
        """
        model = ListSavedQueriesResponse()
        if include_optional:
            return ListSavedQueriesResponse(
                next_page_token = '',
                saved_queries = [
                    openapi_client.models.saved_query.SavedQuery(
                        create_time = '', 
                        display_name = '', 
                        matter_id = '', 
                        query = openapi_client.models.query.Query(
                            account_info = openapi_client.models.account_info.AccountInfo(
                                emails = [
                                    ''
                                    ], ), 
                            calendar_options = openapi_client.models.calendar_options.CalendarOptions(
                                location_query = [
                                    ''
                                    ], 
                                minus_words = [
                                    ''
                                    ], 
                                people_query = [
                                    ''
                                    ], 
                                response_statuses = [
                                    'ATTENDEE_RESPONSE_UNSPECIFIED'
                                    ], 
                                version_date = '', ), 
                            corpus = 'CORPUS_TYPE_UNSPECIFIED', 
                            data_scope = 'DATA_SCOPE_UNSPECIFIED', 
                            drive_options = openapi_client.models.drive_options.DriveOptions(
                                client_side_encrypted_option = 'CLIENT_SIDE_ENCRYPTED_OPTION_UNSPECIFIED', 
                                include_shared_drives = True, 
                                include_team_drives = True, 
                                version_date = '', ), 
                            end_time = '', 
                            hangouts_chat_info = openapi_client.models.hangouts_chat_info.HangoutsChatInfo(
                                room_id = [
                                    ''
                                    ], ), 
                            hangouts_chat_options = openapi_client.models.hangouts_chat_options.HangoutsChatOptions(
                                include_rooms = True, ), 
                            mail_options = openapi_client.models.mail_options.MailOptions(
                                client_side_encrypted_option = 'CLIENT_SIDE_ENCRYPTED_OPTION_UNSPECIFIED', 
                                exclude_drafts = True, ), 
                            method = 'SEARCH_METHOD_UNSPECIFIED', 
                            org_unit_info = openapi_client.models.org_unit_info.OrgUnitInfo(
                                org_unit_id = '', ), 
                            search_method = 'SEARCH_METHOD_UNSPECIFIED', 
                            shared_drive_info = openapi_client.models.shared_drive_info.SharedDriveInfo(
                                shared_drive_ids = [
                                    ''
                                    ], ), 
                            sites_url_info = openapi_client.models.sites_url_info.SitesUrlInfo(
                                urls = [
                                    ''
                                    ], ), 
                            start_time = '', 
                            team_drive_info = openapi_client.models.team_drive_info.TeamDriveInfo(
                                team_drive_ids = [
                                    ''
                                    ], ), 
                            terms = '', 
                            time_zone = '', 
                            voice_options = openapi_client.models.voice_options.VoiceOptions(
                                covered_data = [
                                    'COVERED_DATA_UNSPECIFIED'
                                    ], ), ), 
                        saved_query_id = '', )
                    ]
            )
        else:
            return ListSavedQueriesResponse(
        )
        """

    def testListSavedQueriesResponse(self):
        """Test ListSavedQueriesResponse"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

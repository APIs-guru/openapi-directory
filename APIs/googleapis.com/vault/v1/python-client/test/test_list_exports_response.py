# coding: utf-8

"""
    Google Vault API

    Retention and eDiscovery for Google Workspace. To work with Vault resources, the account must have the [required Vault privileges](https://support.google.com/vault/answer/2799699) and access to the matter. To access a matter, the account must have created the matter, have the matter shared with them, or have the **View All Matters** privilege. For example, to download an export, an account needs the **Manage Exports** privilege and the matter shared with them. 

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.list_exports_response import ListExportsResponse

class TestListExportsResponse(unittest.TestCase):
    """ListExportsResponse unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> ListExportsResponse:
        """Test ListExportsResponse
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `ListExportsResponse`
        """
        model = ListExportsResponse()
        if include_optional:
            return ListExportsResponse(
                exports = [
                    openapi_client.models.export.Export(
                        cloud_storage_sink = openapi_client.models.cloud_storage_sink.CloudStorageSink(
                            files = [
                                openapi_client.models.cloud_storage_file.CloudStorageFile(
                                    bucket_name = '', 
                                    md5_hash = '', 
                                    object_name = '', 
                                    size = '', )
                                ], ), 
                        create_time = '', 
                        export_options = openapi_client.models.export_options.ExportOptions(
                            calendar_options = openapi_client.models.calendar_export_options.CalendarExportOptions(
                                export_format = 'EXPORT_FORMAT_UNSPECIFIED', ), 
                            drive_options = openapi_client.models.drive_export_options.DriveExportOptions(
                                include_access_info = True, ), 
                            groups_options = openapi_client.models.groups_export_options.GroupsExportOptions(
                                export_format = 'EXPORT_FORMAT_UNSPECIFIED', ), 
                            hangouts_chat_options = openapi_client.models.hangouts_chat_export_options.HangoutsChatExportOptions(
                                export_format = 'EXPORT_FORMAT_UNSPECIFIED', ), 
                            mail_options = openapi_client.models.mail_export_options.MailExportOptions(
                                export_format = 'EXPORT_FORMAT_UNSPECIFIED', 
                                export_linked_drive_files = True, 
                                show_confidential_mode_content = True, 
                                use_new_export = True, ), 
                            region = 'EXPORT_REGION_UNSPECIFIED', 
                            voice_options = openapi_client.models.voice_export_options.VoiceExportOptions(
                                export_format = 'EXPORT_FORMAT_UNSPECIFIED', ), ), 
                        id = '', 
                        matter_id = '', 
                        name = '', 
                        parent_export_id = '', 
                        query = openapi_client.models.query.Query(
                            account_info = openapi_client.models.account_info.AccountInfo(
                                emails = [
                                    ''
                                    ], ), 
                            corpus = 'CORPUS_TYPE_UNSPECIFIED', 
                            data_scope = 'DATA_SCOPE_UNSPECIFIED', 
                            end_time = '', 
                            hangouts_chat_info = openapi_client.models.hangouts_chat_info.HangoutsChatInfo(
                                room_id = [
                                    ''
                                    ], ), 
                            method = 'SEARCH_METHOD_UNSPECIFIED', 
                            org_unit_info = openapi_client.models.org_unit_info.OrgUnitInfo(
                                org_unit_id = '', ), 
                            search_method = 'SEARCH_METHOD_UNSPECIFIED', 
                            shared_drive_info = openapi_client.models.shared_drive_info.SharedDriveInfo(
                                shared_drive_ids = [
                                    ''
                                    ], ), 
                            sites_url_info = openapi_client.models.sites_url_info.SitesUrlInfo(
                                urls = [
                                    ''
                                    ], ), 
                            start_time = '', 
                            team_drive_info = openapi_client.models.team_drive_info.TeamDriveInfo(
                                team_drive_ids = [
                                    ''
                                    ], ), 
                            terms = '', 
                            time_zone = '', ), 
                        requester = openapi_client.models.user_info.UserInfo(
                            display_name = '', 
                            email = '', ), 
                        stats = openapi_client.models.export_stats.ExportStats(
                            exported_artifact_count = '', 
                            size_in_bytes = '', 
                            total_artifact_count = '', ), 
                        status = 'EXPORT_STATUS_UNSPECIFIED', )
                    ],
                next_page_token = ''
            )
        else:
            return ListExportsResponse(
        )
        """

    def testListExportsResponse(self):
        """Test ListExportsResponse"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

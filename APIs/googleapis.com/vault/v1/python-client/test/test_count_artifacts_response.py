# coding: utf-8

"""
    Google Vault API

    Retention and eDiscovery for Google Workspace. To work with Vault resources, the account must have the [required Vault privileges](https://support.google.com/vault/answer/2799699) and access to the matter. To access a matter, the account must have created the matter, have the matter shared with them, or have the **View All Matters** privilege. For example, to download an export, an account needs the **Manage Exports** privilege and the matter shared with them. 

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.count_artifacts_response import CountArtifactsResponse

class TestCountArtifactsResponse(unittest.TestCase):
    """CountArtifactsResponse unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> CountArtifactsResponse:
        """Test CountArtifactsResponse
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `CountArtifactsResponse`
        """
        model = CountArtifactsResponse()
        if include_optional:
            return CountArtifactsResponse(
                groups_count_result = openapi_client.models.groups_count_result.GroupsCountResult(
                    account_count_errors = [
                        openapi_client.models.account_count_error.AccountCountError(
                            account = openapi_client.models.user_info.UserInfo(
                                display_name = '', 
                                email = '', ), 
                            error_type = 'ERROR_TYPE_UNSPECIFIED', )
                        ], 
                    account_counts = [
                        openapi_client.models.account_count.AccountCount(
                            count = '', )
                        ], 
                    matching_accounts_count = '', 
                    non_queryable_accounts = [
                        ''
                        ], 
                    queried_accounts_count = '', ),
                mail_count_result = openapi_client.models.mail_count_result.MailCountResult(
                    account_count_errors = [
                        openapi_client.models.account_count_error.AccountCountError(
                            account = openapi_client.models.user_info.UserInfo(
                                display_name = '', 
                                email = '', ), 
                            error_type = 'ERROR_TYPE_UNSPECIFIED', )
                        ], 
                    account_counts = [
                        openapi_client.models.account_count.AccountCount(
                            count = '', )
                        ], 
                    matching_accounts_count = '', 
                    non_queryable_accounts = [
                        ''
                        ], 
                    queried_accounts_count = '', ),
                total_count = ''
            )
        else:
            return CountArtifactsResponse(
        )
        """

    def testCountArtifactsResponse(self):
        """Test CountArtifactsResponse"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

# coding: utf-8

"""
    Essential Contacts API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudEssentialcontactsV1Contact(BaseModel):
    """
    A contact that will receive notifications from Google Cloud.
    """ # noqa: E501
    email: Optional[StrictStr] = Field(default=None, description="Required. The email address to send notifications to. The email address does not need to be a Google Account.")
    language_tag: Optional[StrictStr] = Field(default=None, description="Required. The preferred language for notifications, as a ISO 639-1 language code. See [Supported languages](https://cloud.google.com/resource-manager/docs/managing-notification-contacts#supported-languages) for a list of supported languages.", alias="languageTag")
    name: Optional[StrictStr] = Field(default=None, description="Output only. The identifier for the contact. Format: {resource_type}/{resource_id}/contacts/{contact_id}")
    notification_category_subscriptions: Optional[List[StrictStr]] = Field(default=None, description="Required. The categories of notifications that the contact will receive communications for.", alias="notificationCategorySubscriptions")
    validate_time: Optional[StrictStr] = Field(default=None, description="The last time the validation_state was updated, either manually or automatically. A contact is considered stale if its validation state was updated more than 1 year ago.", alias="validateTime")
    validation_state: Optional[StrictStr] = Field(default=None, description="The validity of the contact. A contact is considered valid if it is the correct recipient for notifications for a particular resource.", alias="validationState")
    __properties: ClassVar[List[str]] = ["email", "languageTag", "name", "notificationCategorySubscriptions", "validateTime", "validationState"]

    @field_validator('notification_category_subscriptions')
    def notification_category_subscriptions_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        for i in value:
            if i not in set(['NOTIFICATION_CATEGORY_UNSPECIFIED', 'ALL', 'SUSPENSION', 'SECURITY', 'TECHNICAL', 'BILLING', 'LEGAL', 'PRODUCT_UPDATES', 'TECHNICAL_INCIDENTS']):
                raise ValueError("each list item must be one of ('NOTIFICATION_CATEGORY_UNSPECIFIED', 'ALL', 'SUSPENSION', 'SECURITY', 'TECHNICAL', 'BILLING', 'LEGAL', 'PRODUCT_UPDATES', 'TECHNICAL_INCIDENTS')")
        return value

    @field_validator('validation_state')
    def validation_state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['VALIDATION_STATE_UNSPECIFIED', 'VALID', 'INVALID']):
            raise ValueError("must be one of enum values ('VALIDATION_STATE_UNSPECIFIED', 'VALID', 'INVALID')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudEssentialcontactsV1Contact from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "name",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudEssentialcontactsV1Contact from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "email": obj.get("email"),
            "languageTag": obj.get("languageTag"),
            "name": obj.get("name"),
            "notificationCategorySubscriptions": obj.get("notificationCategorySubscriptions"),
            "validateTime": obj.get("validateTime"),
            "validationState": obj.get("validationState")
        })
        return _obj



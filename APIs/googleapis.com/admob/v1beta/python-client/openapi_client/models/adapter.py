# coding: utf-8

"""
    AdMob API

    The AdMob API allows publishers to programmatically get information about their AdMob account. 

    The version of the OpenAPI document: v1beta
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.adapter_adapter_config_metadata import AdapterAdapterConfigMetadata
from typing import Optional, Set
from typing_extensions import Self

class Adapter(BaseModel):
    """
    Describes adapters supported by each mediation ad source. Adapters correspond to a specific SDK implementation of the ad source, and are each associated with a single platform and a list of supported ad unit formats. Adapters may also require setting some configurations to perform ad requests. Configurations can be specified in the AdUnitMapping by setting the [ad_unit_configurations](#AdUnitMapping.ad_unit_configurations) key/value pairs. For example, the ad_unit_configurations can be used to pass various IDs to the adapter's third-party SDK.
    """ # noqa: E501
    adapter_config_metadata: Optional[List[AdapterAdapterConfigMetadata]] = Field(default=None, description="Output only. Configuration metadata associated with this adapter.", alias="adapterConfigMetadata")
    adapter_id: Optional[StrictStr] = Field(default=None, description="Output only. ID of this adapter. It is used to set [adapter_id](#AdUnitMapping.adapter_id).", alias="adapterId")
    formats: Optional[List[StrictStr]] = Field(default=None, description="Output only. Indicates the formats of the ad units supported by this adapter.")
    name: Optional[StrictStr] = Field(default=None, description="Output only. Resource name of the adapter. Format is: accounts/{publisher_id}/adSources/{ad_source_id}/adapters/{adapter_id}.")
    platform: Optional[StrictStr] = Field(default=None, description="Output only. Mobile application platform supported by this adapter. Supported values are: IOS, ANDROID, WINDOWS_PHONE")
    title: Optional[StrictStr] = Field(default=None, description="Output only. The display name of this adapter.")
    __properties: ClassVar[List[str]] = ["adapterConfigMetadata", "adapterId", "formats", "name", "platform", "title"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Adapter from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "adapter_config_metadata",
            "adapter_id",
            "formats",
            "name",
            "platform",
            "title",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in adapter_config_metadata (list)
        _items = []
        if self.adapter_config_metadata:
            for _item_adapter_config_metadata in self.adapter_config_metadata:
                if _item_adapter_config_metadata:
                    _items.append(_item_adapter_config_metadata.to_dict())
            _dict['adapterConfigMetadata'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Adapter from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "adapterConfigMetadata": [AdapterAdapterConfigMetadata.from_dict(_item) for _item in obj["adapterConfigMetadata"]] if obj.get("adapterConfigMetadata") is not None else None,
            "adapterId": obj.get("adapterId"),
            "formats": obj.get("formats"),
            "name": obj.get("name"),
            "platform": obj.get("platform"),
            "title": obj.get("title")
        })
        return _obj



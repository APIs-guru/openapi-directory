# coding: utf-8

"""
    AdMob API

    The AdMob API allows publishers to programmatically get information about their AdMob account. 

    The version of the OpenAPI document: v1beta
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class MediationGroupTargeting(BaseModel):
    """
    Set of criteria targeted by this mediation group. For example, a mediation group can target specific ad unit IDs, platform, format and geo location.
    """ # noqa: E501
    ad_unit_ids: Optional[List[StrictStr]] = Field(default=None, description="Ad units targeted by this mediation group. Example: \"ca-app-pub-1234/8790\".", alias="adUnitIds")
    excluded_region_codes: Optional[List[StrictStr]] = Field(default=None, description="The Unicode country/region code (CLDR) of a location, such as \"US\". Unset if this mediation group does not exclude any region.", alias="excludedRegionCodes")
    format: Optional[StrictStr] = Field(default=None, description="Ad format targeted by this mediation group. Examples: \"banner\", \"native\".")
    idfa_targeting: Optional[StrictStr] = Field(default=None, description="The parameter can be used to target ad requests based on the availability of the IDFA. If set to ALL, the mediation group applies to all ad requests (with or without IDFA). If set to AVAILABLE, the mediation group applies to ad requests with IDFA. If set to NOT_AVAILABLE, the mediation group applies to ad requests without IDFA. Doesn't need to be specified for an ANDROID device.", alias="idfaTargeting")
    platform: Optional[StrictStr] = Field(default=None, description="Describes the platform of the app. Examples: \"IOS\", \"Android\".")
    targeted_region_codes: Optional[List[StrictStr]] = Field(default=None, description="The Unicode country/region code (CLDR) of a location, such as \"US\". Unset if this mediation group targets all available regions. For more information, see http://www.unicode.org/reports/tr35/#unicode_region_subtag.", alias="targetedRegionCodes")
    __properties: ClassVar[List[str]] = ["adUnitIds", "excludedRegionCodes", "format", "idfaTargeting", "platform", "targetedRegionCodes"]

    @field_validator('idfa_targeting')
    def idfa_targeting_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['IDFA_TARGETING_UNSPECIFIED', 'ALL', 'AVAILABLE', 'NOT_AVAILABLE']):
            raise ValueError("must be one of enum values ('IDFA_TARGETING_UNSPECIFIED', 'ALL', 'AVAILABLE', 'NOT_AVAILABLE')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of MediationGroupTargeting from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of MediationGroupTargeting from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "adUnitIds": obj.get("adUnitIds"),
            "excludedRegionCodes": obj.get("excludedRegionCodes"),
            "format": obj.get("format"),
            "idfaTargeting": obj.get("idfaTargeting"),
            "platform": obj.get("platform"),
            "targetedRegionCodes": obj.get("targetedRegionCodes")
        })
        return _obj



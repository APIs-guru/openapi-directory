# coding: utf-8

"""
    AdMob API

    The AdMob API allows publishers to programmatically get information about their AdMob account. 

    The version of the OpenAPI document: v1beta
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.report_row_dimension_value import ReportRowDimensionValue
from openapi_client.models.report_row_metric_value import ReportRowMetricValue
from typing import Optional, Set
from typing_extensions import Self

class ReportRow(BaseModel):
    """
    A row of the returning report.
    """ # noqa: E501
    dimension_values: Optional[Dict[str, ReportRowDimensionValue]] = Field(default=None, description="Map of dimension values in a row, with keys as enum name of the dimensions.", alias="dimensionValues")
    metric_values: Optional[Dict[str, ReportRowMetricValue]] = Field(default=None, description="Map of metric values in a row, with keys as enum name of the metrics. If a metric being requested has no value returned, the map will not include it.", alias="metricValues")
    __properties: ClassVar[List[str]] = ["dimensionValues", "metricValues"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ReportRow from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each value in dimension_values (dict)
        _field_dict = {}
        if self.dimension_values:
            for _key_dimension_values in self.dimension_values:
                if self.dimension_values[_key_dimension_values]:
                    _field_dict[_key_dimension_values] = self.dimension_values[_key_dimension_values].to_dict()
            _dict['dimensionValues'] = _field_dict
        # override the default output from pydantic by calling `to_dict()` of each value in metric_values (dict)
        _field_dict = {}
        if self.metric_values:
            for _key_metric_values in self.metric_values:
                if self.metric_values[_key_metric_values]:
                    _field_dict[_key_metric_values] = self.metric_values[_key_metric_values].to_dict()
            _dict['metricValues'] = _field_dict
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ReportRow from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "dimensionValues": dict(
                (_k, ReportRowDimensionValue.from_dict(_v))
                for _k, _v in obj["dimensionValues"].items()
            )
            if obj.get("dimensionValues") is not None
            else None,
            "metricValues": dict(
                (_k, ReportRowMetricValue.from_dict(_v))
                for _k, _v in obj["metricValues"].items()
            )
            if obj.get("metricValues") is not None
            else None
        })
        return _obj



# coding: utf-8

"""
    AdMob API

    The AdMob API allows publishers to programmatically get information about their AdMob account. 

    The version of the OpenAPI document: v1beta
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.ad_unit_reward_settings import AdUnitRewardSettings
from typing import Optional, Set
from typing_extensions import Self

class AdUnit(BaseModel):
    """
    Describes an AdMob ad unit.
    """ # noqa: E501
    ad_format: Optional[StrictStr] = Field(default=None, description="AdFormat of the ad unit. Possible values are as follows: \"APP_OPEN\" - App Open ad format. \"BANNER\" - Banner ad format. \"BANNER_INTERSTITIAL\" - Legacy format that can be used as either banner or interstitial. This format can no longer be created but can be targeted by mediation groups. \"INTERSTITIAL\" - A full screen ad. Supported ad types are \"RICH_MEDIA\" and \"VIDEO\". \"NATIVE\" - Native ad format. \"REWARDED\" - An ad that, once viewed, gets a callback verifying the view so that a reward can be given to the user. Supported ad types are \"RICH_MEDIA\" (interactive) and video where video can not be excluded. \"REWARDED_INTERSTITIAL\" - Rewarded Interstitial ad format. Only supports video ad type. See https://support.google.com/admob/answer/9884467.", alias="adFormat")
    ad_types: Optional[List[StrictStr]] = Field(default=None, description="Ad media type supported by this ad unit. Possible values as follows: \"RICH_MEDIA\" - Text, image, and other non-video media. \"VIDEO\" - Video media.", alias="adTypes")
    ad_unit_id: Optional[StrictStr] = Field(default=None, description="The externally visible ID of the ad unit which can be used to integrate with the AdMob SDK. This is a read only property. Example: ca-app-pub-9876543210987654/0123456789", alias="adUnitId")
    app_id: Optional[StrictStr] = Field(default=None, description="The externally visible ID of the app this ad unit is associated with. Example: ca-app-pub-9876543210987654~0123456789", alias="appId")
    display_name: Optional[StrictStr] = Field(default=None, description="The display name of the ad unit as shown in the AdMob UI, which is provided by the user. The maximum length allowed is 80 characters.", alias="displayName")
    name: Optional[StrictStr] = Field(default=None, description="Resource name for this ad unit. Format is accounts/{publisher_id}/adUnits/{ad_unit_id_fragment} Example: accounts/pub-9876543210987654/adUnits/0123456789")
    reward_settings: Optional[AdUnitRewardSettings] = Field(default=None, alias="rewardSettings")
    __properties: ClassVar[List[str]] = ["adFormat", "adTypes", "adUnitId", "appId", "displayName", "name", "rewardSettings"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AdUnit from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of reward_settings
        if self.reward_settings:
            _dict['rewardSettings'] = self.reward_settings.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AdUnit from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "adFormat": obj.get("adFormat"),
            "adTypes": obj.get("adTypes"),
            "adUnitId": obj.get("adUnitId"),
            "appId": obj.get("appId"),
            "displayName": obj.get("displayName"),
            "name": obj.get("name"),
            "rewardSettings": AdUnitRewardSettings.from_dict(obj["rewardSettings"]) if obj.get("rewardSettings") is not None else None
        })
        return _obj



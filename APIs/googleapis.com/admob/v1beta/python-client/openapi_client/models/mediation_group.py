# coding: utf-8

"""
    AdMob API

    The AdMob API allows publishers to programmatically get information about their AdMob account. 

    The version of the OpenAPI document: v1beta
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.mediation_group_mediation_group_line import MediationGroupMediationGroupLine
from openapi_client.models.mediation_group_targeting import MediationGroupTargeting
from typing import Optional, Set
from typing_extensions import Self

class MediationGroup(BaseModel):
    """
    Describes an AdMob mediation group.
    """ # noqa: E501
    display_name: Optional[StrictStr] = Field(default=None, description="User provided name for the mediation group. The maximum length allowed is 120 characters.", alias="displayName")
    mediation_ab_experiment_state: Optional[StrictStr] = Field(default=None, description="Output only. The state of the mediation a/b experiment that belongs to this mediation group.", alias="mediationAbExperimentState")
    mediation_group_id: Optional[StrictStr] = Field(default=None, description="The ID of the mediation group. Example: \"0123456789\". This is a read only property.", alias="mediationGroupId")
    mediation_group_lines: Optional[Dict[str, MediationGroupMediationGroupLine]] = Field(default=None, description="The mediation lines used for serving for this mediation group. Key is the ID of the mediation group line. For creation, use distinct negative values as placeholder.", alias="mediationGroupLines")
    name: Optional[StrictStr] = Field(default=None, description="Resource name for this mediation group. Format is: accounts/{publisher_id}/mediationGroups/{mediation_group_id} Example: accounts/pub-9876543210987654/mediationGroups/0123456789")
    state: Optional[StrictStr] = Field(default=None, description="The status of the mediation group. Only enabled mediation groups will be served.")
    targeting: Optional[MediationGroupTargeting] = None
    __properties: ClassVar[List[str]] = ["displayName", "mediationAbExperimentState", "mediationGroupId", "mediationGroupLines", "name", "state", "targeting"]

    @field_validator('mediation_ab_experiment_state')
    def mediation_ab_experiment_state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['EXPERIMENT_STATE_UNSPECIFIED', 'RUNNING', 'NOT_RUNNING']):
            raise ValueError("must be one of enum values ('EXPERIMENT_STATE_UNSPECIFIED', 'RUNNING', 'NOT_RUNNING')")
        return value

    @field_validator('state')
    def state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['STATE_UNSPECIFIED', 'ENABLED', 'DISABLED']):
            raise ValueError("must be one of enum values ('STATE_UNSPECIFIED', 'ENABLED', 'DISABLED')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of MediationGroup from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "mediation_ab_experiment_state",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each value in mediation_group_lines (dict)
        _field_dict = {}
        if self.mediation_group_lines:
            for _key_mediation_group_lines in self.mediation_group_lines:
                if self.mediation_group_lines[_key_mediation_group_lines]:
                    _field_dict[_key_mediation_group_lines] = self.mediation_group_lines[_key_mediation_group_lines].to_dict()
            _dict['mediationGroupLines'] = _field_dict
        # override the default output from pydantic by calling `to_dict()` of targeting
        if self.targeting:
            _dict['targeting'] = self.targeting.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of MediationGroup from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "displayName": obj.get("displayName"),
            "mediationAbExperimentState": obj.get("mediationAbExperimentState"),
            "mediationGroupId": obj.get("mediationGroupId"),
            "mediationGroupLines": dict(
                (_k, MediationGroupMediationGroupLine.from_dict(_v))
                for _k, _v in obj["mediationGroupLines"].items()
            )
            if obj.get("mediationGroupLines") is not None
            else None,
            "name": obj.get("name"),
            "state": obj.get("state"),
            "targeting": MediationGroupTargeting.from_dict(obj["targeting"]) if obj.get("targeting") is not None else None
        })
        return _obj



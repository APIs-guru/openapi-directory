# coding: utf-8

"""
    AdMob API

    The AdMob API allows publishers to programmatically get information about their AdMob account. 

    The version of the OpenAPI document: v1beta
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.date_range import DateRange
from openapi_client.models.localization_settings import LocalizationSettings
from openapi_client.models.network_report_spec_dimension_filter import NetworkReportSpecDimensionFilter
from openapi_client.models.network_report_spec_sort_condition import NetworkReportSpecSortCondition
from typing import Optional, Set
from typing_extensions import Self

class NetworkReportSpec(BaseModel):
    """
    The specification for generating an AdMob Network report. For example, the specification to get clicks and estimated earnings for only the 'US' and 'CN' countries can look like the following example: { 'date_range': { 'start_date': {'year': 2021, 'month': 9, 'day': 1}, 'end_date': {'year': 2021, 'month': 9, 'day': 30} }, 'dimensions': ['DATE', 'APP', 'COUNTRY'], 'metrics': ['CLICKS', 'ESTIMATED_EARNINGS'], 'dimension_filters': [ { 'dimension': 'COUNTRY', 'matches_any': {'values': [{'value': 'US', 'value': 'CN'}]} } ], 'sort_conditions': [ {'dimension':'APP', order: 'ASCENDING'}, {'metric':'CLICKS', order: 'DESCENDING'} ], 'localization_settings': { 'currency_code': 'USD', 'language_code': 'en-US' } } For a better understanding, you can treat the preceding specification like the following pseudo SQL: SELECT DATE, APP, COUNTRY, CLICKS, ESTIMATED_EARNINGS FROM NETWORK_REPORT WHERE DATE >= '2021-09-01' AND DATE <= '2021-09-30' AND COUNTRY IN ('US', 'CN') GROUP BY DATE, APP, COUNTRY ORDER BY APP ASC, CLICKS DESC;
    """ # noqa: E501
    date_range: Optional[DateRange] = Field(default=None, alias="dateRange")
    dimension_filters: Optional[List[NetworkReportSpecDimensionFilter]] = Field(default=None, description="Describes which report rows to match based on their dimension values.", alias="dimensionFilters")
    dimensions: Optional[List[StrictStr]] = Field(default=None, description="List of dimensions of the report. The value combination of these dimensions determines the row of the report. If no dimensions are specified, the report returns a single row of requested metrics for the entire account.")
    localization_settings: Optional[LocalizationSettings] = Field(default=None, alias="localizationSettings")
    max_report_rows: Optional[StrictInt] = Field(default=None, description="Maximum number of report data rows to return. If the value is not set, the API returns as many rows as possible, up to 100000. Acceptable values are 1-100000, inclusive. Values larger than 100000 return an error.", alias="maxReportRows")
    metrics: Optional[List[StrictStr]] = Field(default=None, description="List of metrics of the report. A report must specify at least one metric.")
    sort_conditions: Optional[List[NetworkReportSpecSortCondition]] = Field(default=None, description="Describes the sorting of report rows. The order of the condition in the list defines its precedence; the earlier the condition, the higher its precedence. If no sort conditions are specified, the row ordering is undefined.", alias="sortConditions")
    time_zone: Optional[StrictStr] = Field(default=None, description="A report time zone. Accepts an IANA TZ name values, such as \"America/Los_Angeles.\" If no time zone is defined, the account default takes effect. Check default value by the get account action. **Warning:** The \"America/Los_Angeles\" is the only supported value at the moment.", alias="timeZone")
    __properties: ClassVar[List[str]] = ["dateRange", "dimensionFilters", "dimensions", "localizationSettings", "maxReportRows", "metrics", "sortConditions", "timeZone"]

    @field_validator('dimensions')
    def dimensions_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        for i in value:
            if i not in set(['DIMENSION_UNSPECIFIED', 'DATE', 'MONTH', 'WEEK', 'AD_UNIT', 'APP', 'AD_TYPE', 'COUNTRY', 'FORMAT', 'PLATFORM', 'MOBILE_OS_VERSION', 'GMA_SDK_VERSION', 'APP_VERSION_NAME', 'SERVING_RESTRICTION']):
                raise ValueError("each list item must be one of ('DIMENSION_UNSPECIFIED', 'DATE', 'MONTH', 'WEEK', 'AD_UNIT', 'APP', 'AD_TYPE', 'COUNTRY', 'FORMAT', 'PLATFORM', 'MOBILE_OS_VERSION', 'GMA_SDK_VERSION', 'APP_VERSION_NAME', 'SERVING_RESTRICTION')")
        return value

    @field_validator('metrics')
    def metrics_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        for i in value:
            if i not in set(['METRIC_UNSPECIFIED', 'AD_REQUESTS', 'CLICKS', 'ESTIMATED_EARNINGS', 'IMPRESSIONS', 'IMPRESSION_CTR', 'IMPRESSION_RPM', 'MATCHED_REQUESTS', 'MATCH_RATE', 'SHOW_RATE']):
                raise ValueError("each list item must be one of ('METRIC_UNSPECIFIED', 'AD_REQUESTS', 'CLICKS', 'ESTIMATED_EARNINGS', 'IMPRESSIONS', 'IMPRESSION_CTR', 'IMPRESSION_RPM', 'MATCHED_REQUESTS', 'MATCH_RATE', 'SHOW_RATE')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of NetworkReportSpec from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of date_range
        if self.date_range:
            _dict['dateRange'] = self.date_range.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in dimension_filters (list)
        _items = []
        if self.dimension_filters:
            for _item_dimension_filters in self.dimension_filters:
                if _item_dimension_filters:
                    _items.append(_item_dimension_filters.to_dict())
            _dict['dimensionFilters'] = _items
        # override the default output from pydantic by calling `to_dict()` of localization_settings
        if self.localization_settings:
            _dict['localizationSettings'] = self.localization_settings.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in sort_conditions (list)
        _items = []
        if self.sort_conditions:
            for _item_sort_conditions in self.sort_conditions:
                if _item_sort_conditions:
                    _items.append(_item_sort_conditions.to_dict())
            _dict['sortConditions'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of NetworkReportSpec from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "dateRange": DateRange.from_dict(obj["dateRange"]) if obj.get("dateRange") is not None else None,
            "dimensionFilters": [NetworkReportSpecDimensionFilter.from_dict(_item) for _item in obj["dimensionFilters"]] if obj.get("dimensionFilters") is not None else None,
            "dimensions": obj.get("dimensions"),
            "localizationSettings": LocalizationSettings.from_dict(obj["localizationSettings"]) if obj.get("localizationSettings") is not None else None,
            "maxReportRows": obj.get("maxReportRows"),
            "metrics": obj.get("metrics"),
            "sortConditions": [NetworkReportSpecSortCondition.from_dict(_item) for _item in obj["sortConditions"]] if obj.get("sortConditions") is not None else None,
            "timeZone": obj.get("timeZone")
        })
        return _obj



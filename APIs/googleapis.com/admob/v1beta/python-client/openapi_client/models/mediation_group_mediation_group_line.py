# coding: utf-8

"""
    AdMob API

    The AdMob API allows publishers to programmatically get information about their AdMob account. 

    The version of the OpenAPI document: v1beta
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class MediationGroupMediationGroupLine(BaseModel):
    """
    Settings for an ad network used by a mediation group.
    """ # noqa: E501
    ad_source_id: Optional[StrictStr] = Field(default=None, description="The ID of the ad source this mediation line is associated with.", alias="adSourceId")
    ad_unit_mappings: Optional[Dict[str, StrictStr]] = Field(default=None, description="References of the ad unit mappings for each ad unit associated with this mediation line. Key is the ad unit ID, value is resource name of the ad unit mapping. For mediation lines where the ad source id is the AdMob Network, ad unit mappings will be ignored.", alias="adUnitMappings")
    cpm_micros: Optional[StrictStr] = Field(default=None, description="The CPM for this allocation line. $0.01 is the minimum allowed amount. For LIVE CPM modes, the default amount is $0.01. This value is ignored if `cpm_mode` is `LIVE`. **Warning:** \"USD\" is the only supported currency at the moment. The unit is in micros.", alias="cpmMicros")
    cpm_mode: Optional[StrictStr] = Field(default=None, description="Indicates how the CPM for this mediation line is provided. Note that `MANUAL` and `LIVE` are the only fully-supported mode at the moment. Please use the AdMob UI (https://admob.google.com) if you wish to create or update to other cpm modes.", alias="cpmMode")
    display_name: Optional[StrictStr] = Field(default=None, description="User-provided label for this mediation line. The maximum length allowed is 255 characters.", alias="displayName")
    experiment_variant: Optional[StrictStr] = Field(default=None, description="Output only. The Mediation A/B experiment variant to which the mediation group line belongs to.", alias="experimentVariant")
    id: Optional[StrictStr] = Field(default=None, description="The 16 digit ID for this mediation line e.g. 0123456789012345. When creating a new mediation group line, use a distinct negative integer as the ID place holder.")
    state: Optional[StrictStr] = Field(default=None, description="The status of the mediation group line. Only enabled mediation group lines will be served.")
    __properties: ClassVar[List[str]] = ["adSourceId", "adUnitMappings", "cpmMicros", "cpmMode", "displayName", "experimentVariant", "id", "state"]

    @field_validator('cpm_mode')
    def cpm_mode_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['CPM_MODE_UNSPECIFIED', 'LIVE', 'MANUAL', 'ANO']):
            raise ValueError("must be one of enum values ('CPM_MODE_UNSPECIFIED', 'LIVE', 'MANUAL', 'ANO')")
        return value

    @field_validator('experiment_variant')
    def experiment_variant_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['VARIANT_UNSPECIFIED', 'VARIANT_A', 'VARIANT_B', 'ORIGINAL']):
            raise ValueError("must be one of enum values ('VARIANT_UNSPECIFIED', 'VARIANT_A', 'VARIANT_B', 'ORIGINAL')")
        return value

    @field_validator('state')
    def state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['STATE_UNSPECIFIED', 'ENABLED', 'DISABLED', 'REMOVED']):
            raise ValueError("must be one of enum values ('STATE_UNSPECIFIED', 'ENABLED', 'DISABLED', 'REMOVED')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of MediationGroupMediationGroupLine from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "experiment_variant",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of MediationGroupMediationGroupLine from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "adSourceId": obj.get("adSourceId"),
            "adUnitMappings": obj.get("adUnitMappings"),
            "cpmMicros": obj.get("cpmMicros"),
            "cpmMode": obj.get("cpmMode"),
            "displayName": obj.get("displayName"),
            "experimentVariant": obj.get("experimentVariant"),
            "id": obj.get("id"),
            "state": obj.get("state")
        })
        return _obj



# coding: utf-8

"""
    AdMob API

    The AdMob API allows publishers to programmatically get information about their AdMob account. 

    The version of the OpenAPI document: v1beta
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.date_range import DateRange
from typing import Optional, Set
from typing_extensions import Self

class CampaignReportSpec(BaseModel):
    """
    The specification for generating a Campaign report. For example, the specification to get IMPRESSIONS and CLICKS sliced by CAMPAIGN_ID can look like the following example: { \"date_range\": { \"start_date\": {\"year\": 2021, \"month\": 12, \"day\": 1}, \"end_date\": {\"year\": 2021, \"month\": 12, \"day\": 30} }, \"dimensions\": [\"CAMPAIGN_ID\"], \"metrics\": [\"IMPRESSIONS\", \"CLICKS\"], }
    """ # noqa: E501
    date_range: Optional[DateRange] = Field(default=None, alias="dateRange")
    dimensions: Optional[List[StrictStr]] = Field(default=None, description="List of dimensions of the report. The value combination of these dimensions determines the row of the report. If no dimensions are specified, the report returns a single row of requested metrics for the entire account.")
    language_code: Optional[StrictStr] = Field(default=None, description="Language used for any localized text, such as certain applicable dimension values. The language tag is defined in the IETF BCP47. Defaults to 'en-US' if unspecified or invalid.", alias="languageCode")
    metrics: Optional[List[StrictStr]] = Field(default=None, description="List of metrics of the report. A report must specify at least one metric.")
    __properties: ClassVar[List[str]] = ["dateRange", "dimensions", "languageCode", "metrics"]

    @field_validator('dimensions')
    def dimensions_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        for i in value:
            if i not in set(['DIMENSION_UNSPECIFIED', 'DATE', 'CAMPAIGN_ID', 'CAMPAIGN_NAME', 'AD_ID', 'AD_NAME', 'PLACEMENT_ID', 'PLACEMENT_NAME', 'PLACEMENT_PLATFORM', 'COUNTRY', 'FORMAT']):
                raise ValueError("each list item must be one of ('DIMENSION_UNSPECIFIED', 'DATE', 'CAMPAIGN_ID', 'CAMPAIGN_NAME', 'AD_ID', 'AD_NAME', 'PLACEMENT_ID', 'PLACEMENT_NAME', 'PLACEMENT_PLATFORM', 'COUNTRY', 'FORMAT')")
        return value

    @field_validator('metrics')
    def metrics_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        for i in value:
            if i not in set(['METRIC_UNSPECIFIED', 'IMPRESSIONS', 'CLICKS', 'CLICK_THROUGH_RATE', 'INSTALLS', 'ESTIMATED_COST', 'AVERAGE_CPI', 'INTERACTIONS']):
                raise ValueError("each list item must be one of ('METRIC_UNSPECIFIED', 'IMPRESSIONS', 'CLICKS', 'CLICK_THROUGH_RATE', 'INSTALLS', 'ESTIMATED_COST', 'AVERAGE_CPI', 'INTERACTIONS')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CampaignReportSpec from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of date_range
        if self.date_range:
            _dict['dateRange'] = self.date_range.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CampaignReportSpec from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "dateRange": DateRange.from_dict(obj["dateRange"]) if obj.get("dateRange") is not None else None,
            "dimensions": obj.get("dimensions"),
            "languageCode": obj.get("languageCode"),
            "metrics": obj.get("metrics")
        })
        return _obj



# coding: utf-8

"""
    AdMob API

    The AdMob API allows publishers to programmatically get information about their AdMob account. 

    The version of the OpenAPI document: v1beta
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.mediation_ab_experiment_experiment_mediation_line import MediationAbExperimentExperimentMediationLine
from typing import Optional, Set
from typing_extensions import Self

class MediationAbExperiment(BaseModel):
    """
    The mediation A/B experiment.
    """ # noqa: E501
    control_mediation_lines: Optional[List[MediationAbExperimentExperimentMediationLine]] = Field(default=None, description="Output only. The experiment mediation lines for control. They are inherited from the parent mediation group. It is an output only field.", alias="controlMediationLines")
    display_name: Optional[StrictStr] = Field(default=None, description="The display name for the mediation A/B experiment.", alias="displayName")
    end_time: Optional[StrictStr] = Field(default=None, description="Output only. The time at which the experiment was ended or target to end (in UTC).", alias="endTime")
    experiment_id: Optional[StrictStr] = Field(default=None, description="Output only. Unique identifier for the mediation A/B experiment. It is an output only property.", alias="experimentId")
    mediation_group_id: Optional[StrictStr] = Field(default=None, description="Output only. The mediation group id this experiment belongs to. This can be used for filtering the experiments in the list experiments API.", alias="mediationGroupId")
    name: Optional[StrictStr] = Field(default=None, description="Resource name for this experiment. The format is accounts/{publisher_id}/ mediationGroups/{mediation_group_id}/mediationAbExperiment/ {mediation_group_experiment_id}. For example: accounts/pub-9876543210987654/mediationGroups/0123456789/ mediationAbExperiment/12345")
    start_time: Optional[StrictStr] = Field(default=None, description="Output only. The time at which the experiment was started (in UTC).", alias="startTime")
    state: Optional[StrictStr] = Field(default=None, description="Output only. The state of the experiment. It is an output only field.")
    treatment_mediation_lines: Optional[List[MediationAbExperimentExperimentMediationLine]] = Field(default=None, description="The experiment mediation lines created for the treatment. They will be used for serving when the experiment status is RUNNING.", alias="treatmentMediationLines")
    treatment_traffic_percentage: Optional[StrictStr] = Field(default=None, description="The percentage of the mediation A/B experiment traffic that will be send to the treatment (variant B). The remainder is sent to the control (variant A). The percentage is expressed as an integer in the inclusive range of [1,99]. See https://support.google.com/admob/answer/9572326 for details.", alias="treatmentTrafficPercentage")
    variant_leader: Optional[StrictStr] = Field(default=None, description="Output only. The variant leader for the experiment according to some key metrics.", alias="variantLeader")
    __properties: ClassVar[List[str]] = ["controlMediationLines", "displayName", "endTime", "experimentId", "mediationGroupId", "name", "startTime", "state", "treatmentMediationLines", "treatmentTrafficPercentage", "variantLeader"]

    @field_validator('state')
    def state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['EXPERIMENT_STATE_UNSPECIFIED', 'EXPIRED', 'RUNNING', 'ENDED']):
            raise ValueError("must be one of enum values ('EXPERIMENT_STATE_UNSPECIFIED', 'EXPIRED', 'RUNNING', 'ENDED')")
        return value

    @field_validator('variant_leader')
    def variant_leader_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['VARIANT_LEADER_UNSPECIFIED', 'CONTROL', 'TREATMENT', 'INSUFFICIENT_DATA', 'TOO_EARLY_TO_CALL', 'NO_VARIANT_LEADER']):
            raise ValueError("must be one of enum values ('VARIANT_LEADER_UNSPECIFIED', 'CONTROL', 'TREATMENT', 'INSUFFICIENT_DATA', 'TOO_EARLY_TO_CALL', 'NO_VARIANT_LEADER')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of MediationAbExperiment from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "control_mediation_lines",
            "end_time",
            "experiment_id",
            "mediation_group_id",
            "start_time",
            "state",
            "variant_leader",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in control_mediation_lines (list)
        _items = []
        if self.control_mediation_lines:
            for _item_control_mediation_lines in self.control_mediation_lines:
                if _item_control_mediation_lines:
                    _items.append(_item_control_mediation_lines.to_dict())
            _dict['controlMediationLines'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in treatment_mediation_lines (list)
        _items = []
        if self.treatment_mediation_lines:
            for _item_treatment_mediation_lines in self.treatment_mediation_lines:
                if _item_treatment_mediation_lines:
                    _items.append(_item_treatment_mediation_lines.to_dict())
            _dict['treatmentMediationLines'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of MediationAbExperiment from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "controlMediationLines": [MediationAbExperimentExperimentMediationLine.from_dict(_item) for _item in obj["controlMediationLines"]] if obj.get("controlMediationLines") is not None else None,
            "displayName": obj.get("displayName"),
            "endTime": obj.get("endTime"),
            "experimentId": obj.get("experimentId"),
            "mediationGroupId": obj.get("mediationGroupId"),
            "name": obj.get("name"),
            "startTime": obj.get("startTime"),
            "state": obj.get("state"),
            "treatmentMediationLines": [MediationAbExperimentExperimentMediationLine.from_dict(_item) for _item in obj["treatmentMediationLines"]] if obj.get("treatmentMediationLines") is not None else None,
            "treatmentTrafficPercentage": obj.get("treatmentTrafficPercentage"),
            "variantLeader": obj.get("variantLeader")
        })
        return _obj



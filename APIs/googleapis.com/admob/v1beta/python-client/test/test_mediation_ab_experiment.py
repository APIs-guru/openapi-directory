# coding: utf-8

"""
    AdMob API

    The AdMob API allows publishers to programmatically get information about their AdMob account. 

    The version of the OpenAPI document: v1beta
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.mediation_ab_experiment import MediationAbExperiment

class TestMediationAbExperiment(unittest.TestCase):
    """MediationAbExperiment unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> MediationAbExperiment:
        """Test MediationAbExperiment
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `MediationAbExperiment`
        """
        model = MediationAbExperiment()
        if include_optional:
            return MediationAbExperiment(
                control_mediation_lines = [
                    openapi_client.models.mediation_ab_experiment_experiment_mediation_line.MediationAbExperimentExperimentMediationLine(
                        mediation_group_line = openapi_client.models.mediation_group_mediation_group_line.MediationGroupMediationGroupLine(
                            ad_source_id = '', 
                            ad_unit_mappings = {
                                'key' : ''
                                }, 
                            cpm_micros = '', 
                            cpm_mode = 'CPM_MODE_UNSPECIFIED', 
                            display_name = '', 
                            experiment_variant = 'VARIANT_UNSPECIFIED', 
                            id = '', 
                            state = 'STATE_UNSPECIFIED', ), )
                    ],
                display_name = '',
                end_time = '',
                experiment_id = '',
                mediation_group_id = '',
                name = '',
                start_time = '',
                state = 'EXPERIMENT_STATE_UNSPECIFIED',
                treatment_mediation_lines = [
                    openapi_client.models.mediation_ab_experiment_experiment_mediation_line.MediationAbExperimentExperimentMediationLine(
                        mediation_group_line = openapi_client.models.mediation_group_mediation_group_line.MediationGroupMediationGroupLine(
                            ad_source_id = '', 
                            ad_unit_mappings = {
                                'key' : ''
                                }, 
                            cpm_micros = '', 
                            cpm_mode = 'CPM_MODE_UNSPECIFIED', 
                            display_name = '', 
                            experiment_variant = 'VARIANT_UNSPECIFIED', 
                            id = '', 
                            state = 'STATE_UNSPECIFIED', ), )
                    ],
                treatment_traffic_percentage = '',
                variant_leader = 'VARIANT_LEADER_UNSPECIFIED'
            )
        else:
            return MediationAbExperiment(
        )
        """

    def testMediationAbExperiment(self):
        """Test MediationAbExperiment"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

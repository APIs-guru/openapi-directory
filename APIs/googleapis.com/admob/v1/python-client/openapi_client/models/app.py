# coding: utf-8

"""
    AdMob API

    The AdMob API allows publishers to programmatically get information about their AdMob account. 

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.app_linked_app_info import AppLinkedAppInfo
from openapi_client.models.app_manual_app_info import AppManualAppInfo
from typing import Optional, Set
from typing_extensions import Self

class App(BaseModel):
    """
    Describes an AdMob app for a specific platform (For example: Android or iOS).
    """ # noqa: E501
    app_approval_state: Optional[StrictStr] = Field(default=None, description="Output only. The approval state for the app. The field is read-only.", alias="appApprovalState")
    app_id: Optional[StrictStr] = Field(default=None, description="The externally visible ID of the app which can be used to integrate with the AdMob SDK. This is a read only property. Example: ca-app-pub-9876543210987654~0123456789", alias="appId")
    linked_app_info: Optional[AppLinkedAppInfo] = Field(default=None, alias="linkedAppInfo")
    manual_app_info: Optional[AppManualAppInfo] = Field(default=None, alias="manualAppInfo")
    name: Optional[StrictStr] = Field(default=None, description="Resource name for this app. Format is accounts/{publisher_id}/apps/{app_id_fragment} Example: accounts/pub-9876543210987654/apps/0123456789")
    platform: Optional[StrictStr] = Field(default=None, description="Describes the platform of the app. Limited to \"IOS\" and \"ANDROID\".")
    __properties: ClassVar[List[str]] = ["appApprovalState", "appId", "linkedAppInfo", "manualAppInfo", "name", "platform"]

    @field_validator('app_approval_state')
    def app_approval_state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['APP_APPROVAL_STATE_UNSPECIFIED', 'ACTION_REQUIRED', 'IN_REVIEW', 'APPROVED']):
            raise ValueError("must be one of enum values ('APP_APPROVAL_STATE_UNSPECIFIED', 'ACTION_REQUIRED', 'IN_REVIEW', 'APPROVED')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of App from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "app_approval_state",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of linked_app_info
        if self.linked_app_info:
            _dict['linkedAppInfo'] = self.linked_app_info.to_dict()
        # override the default output from pydantic by calling `to_dict()` of manual_app_info
        if self.manual_app_info:
            _dict['manualAppInfo'] = self.manual_app_info.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of App from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "appApprovalState": obj.get("appApprovalState"),
            "appId": obj.get("appId"),
            "linkedAppInfo": AppLinkedAppInfo.from_dict(obj["linkedAppInfo"]) if obj.get("linkedAppInfo") is not None else None,
            "manualAppInfo": AppManualAppInfo.from_dict(obj["manualAppInfo"]) if obj.get("manualAppInfo") is not None else None,
            "name": obj.get("name"),
            "platform": obj.get("platform")
        })
        return _obj



# coding: utf-8

"""
    Safe Browsing API

    Enables client applications to check web resources (most commonly URLs) against Google-generated lists of unsafe web resources. The Safe Browsing APIs are for non-commercial use only. If you need to use APIs to detect malicious URLs for commercial purposes – meaning “for sale or revenue-generating purposes” – please refer to the Web Risk API.

    The version of the OpenAPI document: v4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_security_safebrowsing_v4_fetch_threat_list_updates_response_list_update_response import GoogleSecuritySafebrowsingV4FetchThreatListUpdatesResponseListUpdateResponse
from typing import Optional, Set
from typing_extensions import Self

class GoogleSecuritySafebrowsingV4FetchThreatListUpdatesResponse(BaseModel):
    """
    GoogleSecuritySafebrowsingV4FetchThreatListUpdatesResponse
    """ # noqa: E501
    list_update_responses: Optional[List[GoogleSecuritySafebrowsingV4FetchThreatListUpdatesResponseListUpdateResponse]] = Field(default=None, description="The list updates requested by the clients. The number of responses here may be less than the number of requests sent by clients. This is the case, for example, if the server has no updates for a particular list.", alias="listUpdateResponses")
    minimum_wait_duration: Optional[StrictStr] = Field(default=None, description="The minimum duration the client must wait before issuing any update request. If this field is not set clients may update as soon as they want.", alias="minimumWaitDuration")
    __properties: ClassVar[List[str]] = ["listUpdateResponses", "minimumWaitDuration"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleSecuritySafebrowsingV4FetchThreatListUpdatesResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in list_update_responses (list)
        _items = []
        if self.list_update_responses:
            for _item_list_update_responses in self.list_update_responses:
                if _item_list_update_responses:
                    _items.append(_item_list_update_responses.to_dict())
            _dict['listUpdateResponses'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleSecuritySafebrowsingV4FetchThreatListUpdatesResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "listUpdateResponses": [GoogleSecuritySafebrowsingV4FetchThreatListUpdatesResponseListUpdateResponse.from_dict(_item) for _item in obj["listUpdateResponses"]] if obj.get("listUpdateResponses") is not None else None,
            "minimumWaitDuration": obj.get("minimumWaitDuration")
        })
        return _obj



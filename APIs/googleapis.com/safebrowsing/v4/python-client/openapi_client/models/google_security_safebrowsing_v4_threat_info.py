# coding: utf-8

"""
    Safe Browsing API

    Enables client applications to check web resources (most commonly URLs) against Google-generated lists of unsafe web resources. The Safe Browsing APIs are for non-commercial use only. If you need to use APIs to detect malicious URLs for commercial purposes – meaning “for sale or revenue-generating purposes” – please refer to the Web Risk API.

    The version of the OpenAPI document: v4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_security_safebrowsing_v4_threat_entry import GoogleSecuritySafebrowsingV4ThreatEntry
from typing import Optional, Set
from typing_extensions import Self

class GoogleSecuritySafebrowsingV4ThreatInfo(BaseModel):
    """
    The information regarding one or more threats that a client submits when checking for matches in threat lists.
    """ # noqa: E501
    platform_types: Optional[List[StrictStr]] = Field(default=None, description="The platform types to be checked.", alias="platformTypes")
    threat_entries: Optional[List[GoogleSecuritySafebrowsingV4ThreatEntry]] = Field(default=None, description="The threat entries to be checked.", alias="threatEntries")
    threat_entry_types: Optional[List[StrictStr]] = Field(default=None, description="The entry types to be checked.", alias="threatEntryTypes")
    threat_types: Optional[List[StrictStr]] = Field(default=None, description="The threat types to be checked.", alias="threatTypes")
    __properties: ClassVar[List[str]] = ["platformTypes", "threatEntries", "threatEntryTypes", "threatTypes"]

    @field_validator('platform_types')
    def platform_types_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        for i in value:
            if i not in set(['PLATFORM_TYPE_UNSPECIFIED', 'WINDOWS', 'LINUX', 'ANDROID', 'OSX', 'IOS', 'ANY_PLATFORM', 'ALL_PLATFORMS', 'CHROME']):
                raise ValueError("each list item must be one of ('PLATFORM_TYPE_UNSPECIFIED', 'WINDOWS', 'LINUX', 'ANDROID', 'OSX', 'IOS', 'ANY_PLATFORM', 'ALL_PLATFORMS', 'CHROME')")
        return value

    @field_validator('threat_entry_types')
    def threat_entry_types_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        for i in value:
            if i not in set(['THREAT_ENTRY_TYPE_UNSPECIFIED', 'URL', 'EXECUTABLE', 'IP_RANGE', 'CHROME_EXTENSION', 'FILENAME', 'CERT']):
                raise ValueError("each list item must be one of ('THREAT_ENTRY_TYPE_UNSPECIFIED', 'URL', 'EXECUTABLE', 'IP_RANGE', 'CHROME_EXTENSION', 'FILENAME', 'CERT')")
        return value

    @field_validator('threat_types')
    def threat_types_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        for i in value:
            if i not in set(['THREAT_TYPE_UNSPECIFIED', 'MALWARE', 'SOCIAL_ENGINEERING', 'UNWANTED_SOFTWARE', 'POTENTIALLY_HARMFUL_APPLICATION', 'SOCIAL_ENGINEERING_INTERNAL', 'API_ABUSE', 'MALICIOUS_BINARY', 'CSD_WHITELIST', 'CSD_DOWNLOAD_WHITELIST', 'CLIENT_INCIDENT', 'CLIENT_INCIDENT_WHITELIST', 'APK_MALWARE_OFFLINE', 'SUBRESOURCE_FILTER', 'SUSPICIOUS', 'TRICK_TO_BILL', 'HIGH_CONFIDENCE_ALLOWLIST', 'ACCURACY_TIPS']):
                raise ValueError("each list item must be one of ('THREAT_TYPE_UNSPECIFIED', 'MALWARE', 'SOCIAL_ENGINEERING', 'UNWANTED_SOFTWARE', 'POTENTIALLY_HARMFUL_APPLICATION', 'SOCIAL_ENGINEERING_INTERNAL', 'API_ABUSE', 'MALICIOUS_BINARY', 'CSD_WHITELIST', 'CSD_DOWNLOAD_WHITELIST', 'CLIENT_INCIDENT', 'CLIENT_INCIDENT_WHITELIST', 'APK_MALWARE_OFFLINE', 'SUBRESOURCE_FILTER', 'SUSPICIOUS', 'TRICK_TO_BILL', 'HIGH_CONFIDENCE_ALLOWLIST', 'ACCURACY_TIPS')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleSecuritySafebrowsingV4ThreatInfo from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in threat_entries (list)
        _items = []
        if self.threat_entries:
            for _item_threat_entries in self.threat_entries:
                if _item_threat_entries:
                    _items.append(_item_threat_entries.to_dict())
            _dict['threatEntries'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleSecuritySafebrowsingV4ThreatInfo from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "platformTypes": obj.get("platformTypes"),
            "threatEntries": [GoogleSecuritySafebrowsingV4ThreatEntry.from_dict(_item) for _item in obj["threatEntries"]] if obj.get("threatEntries") is not None else None,
            "threatEntryTypes": obj.get("threatEntryTypes"),
            "threatTypes": obj.get("threatTypes")
        })
        return _obj



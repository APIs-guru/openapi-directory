# coding: utf-8

"""
    Safe Browsing API

    Enables client applications to check web resources (most commonly URLs) against Google-generated lists of unsafe web resources. The Safe Browsing APIs are for non-commercial use only. If you need to use APIs to detect malicious URLs for commercial purposes – meaning “for sale or revenue-generating purposes” – please refer to the Web Risk API.

    The version of the OpenAPI document: v4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_security_safebrowsing_v4_raw_hashes import GoogleSecuritySafebrowsingV4RawHashes
from openapi_client.models.google_security_safebrowsing_v4_raw_indices import GoogleSecuritySafebrowsingV4RawIndices
from openapi_client.models.google_security_safebrowsing_v4_rice_delta_encoding import GoogleSecuritySafebrowsingV4RiceDeltaEncoding
from typing import Optional, Set
from typing_extensions import Self

class GoogleSecuritySafebrowsingV4ThreatEntrySet(BaseModel):
    """
    A set of threats that should be added or removed from a client's local database.
    """ # noqa: E501
    compression_type: Optional[StrictStr] = Field(default=None, description="The compression type for the entries in this set.", alias="compressionType")
    raw_hashes: Optional[GoogleSecuritySafebrowsingV4RawHashes] = Field(default=None, alias="rawHashes")
    raw_indices: Optional[GoogleSecuritySafebrowsingV4RawIndices] = Field(default=None, alias="rawIndices")
    rice_hashes: Optional[GoogleSecuritySafebrowsingV4RiceDeltaEncoding] = Field(default=None, alias="riceHashes")
    rice_indices: Optional[GoogleSecuritySafebrowsingV4RiceDeltaEncoding] = Field(default=None, alias="riceIndices")
    __properties: ClassVar[List[str]] = ["compressionType", "rawHashes", "rawIndices", "riceHashes", "riceIndices"]

    @field_validator('compression_type')
    def compression_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['COMPRESSION_TYPE_UNSPECIFIED', 'RAW', 'RICE']):
            raise ValueError("must be one of enum values ('COMPRESSION_TYPE_UNSPECIFIED', 'RAW', 'RICE')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleSecuritySafebrowsingV4ThreatEntrySet from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of raw_hashes
        if self.raw_hashes:
            _dict['rawHashes'] = self.raw_hashes.to_dict()
        # override the default output from pydantic by calling `to_dict()` of raw_indices
        if self.raw_indices:
            _dict['rawIndices'] = self.raw_indices.to_dict()
        # override the default output from pydantic by calling `to_dict()` of rice_hashes
        if self.rice_hashes:
            _dict['riceHashes'] = self.rice_hashes.to_dict()
        # override the default output from pydantic by calling `to_dict()` of rice_indices
        if self.rice_indices:
            _dict['riceIndices'] = self.rice_indices.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleSecuritySafebrowsingV4ThreatEntrySet from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "compressionType": obj.get("compressionType"),
            "rawHashes": GoogleSecuritySafebrowsingV4RawHashes.from_dict(obj["rawHashes"]) if obj.get("rawHashes") is not None else None,
            "rawIndices": GoogleSecuritySafebrowsingV4RawIndices.from_dict(obj["rawIndices"]) if obj.get("rawIndices") is not None else None,
            "riceHashes": GoogleSecuritySafebrowsingV4RiceDeltaEncoding.from_dict(obj["riceHashes"]) if obj.get("riceHashes") is not None else None,
            "riceIndices": GoogleSecuritySafebrowsingV4RiceDeltaEncoding.from_dict(obj["riceIndices"]) if obj.get("riceIndices") is not None else None
        })
        return _obj



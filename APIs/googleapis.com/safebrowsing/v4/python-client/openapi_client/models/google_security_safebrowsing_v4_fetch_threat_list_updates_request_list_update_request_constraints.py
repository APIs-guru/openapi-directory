# coding: utf-8

"""
    Safe Browsing API

    Enables client applications to check web resources (most commonly URLs) against Google-generated lists of unsafe web resources. The Safe Browsing APIs are for non-commercial use only. If you need to use APIs to detect malicious URLs for commercial purposes – meaning “for sale or revenue-generating purposes” – please refer to the Web Risk API.

    The version of the OpenAPI document: v4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class GoogleSecuritySafebrowsingV4FetchThreatListUpdatesRequestListUpdateRequestConstraints(BaseModel):
    """
    The constraints for this update.
    """ # noqa: E501
    device_location: Optional[StrictStr] = Field(default=None, description="A client's physical location, expressed as a ISO 31166-1 alpha-2 region code.", alias="deviceLocation")
    language: Optional[StrictStr] = Field(default=None, description="Requests the lists for a specific language. Expects ISO 639 alpha-2 format.")
    max_database_entries: Optional[StrictInt] = Field(default=None, description="Sets the maximum number of entries that the client is willing to have in the local database for the specified list. This should be a power of 2 between 2**10 and 2**20. If zero, no database size limit is set.", alias="maxDatabaseEntries")
    max_update_entries: Optional[StrictInt] = Field(default=None, description="The maximum size in number of entries. The update will not contain more entries than this value. This should be a power of 2 between 2**10 and 2**20. If zero, no update size limit is set.", alias="maxUpdateEntries")
    region: Optional[StrictStr] = Field(default=None, description="Requests the list for a specific geographic location. If not set the server may pick that value based on the user's IP address. Expects ISO 3166-1 alpha-2 format.")
    supported_compressions: Optional[List[StrictStr]] = Field(default=None, description="The compression types supported by the client.", alias="supportedCompressions")
    __properties: ClassVar[List[str]] = ["deviceLocation", "language", "maxDatabaseEntries", "maxUpdateEntries", "region", "supportedCompressions"]

    @field_validator('supported_compressions')
    def supported_compressions_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        for i in value:
            if i not in set(['COMPRESSION_TYPE_UNSPECIFIED', 'RAW', 'RICE']):
                raise ValueError("each list item must be one of ('COMPRESSION_TYPE_UNSPECIFIED', 'RAW', 'RICE')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleSecuritySafebrowsingV4FetchThreatListUpdatesRequestListUpdateRequestConstraints from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleSecuritySafebrowsingV4FetchThreatListUpdatesRequestListUpdateRequestConstraints from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "deviceLocation": obj.get("deviceLocation"),
            "language": obj.get("language"),
            "maxDatabaseEntries": obj.get("maxDatabaseEntries"),
            "maxUpdateEntries": obj.get("maxUpdateEntries"),
            "region": obj.get("region"),
            "supportedCompressions": obj.get("supportedCompressions")
        })
        return _obj



# coding: utf-8

"""
    Safe Browsing API

    Enables client applications to check web resources (most commonly URLs) against Google-generated lists of unsafe web resources. The Safe Browsing APIs are for non-commercial use only. If you need to use APIs to detect malicious URLs for commercial purposes – meaning “for sale or revenue-generating purposes” – please refer to the Web Risk API.

    The version of the OpenAPI document: v4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class GoogleSecuritySafebrowsingV4ThreatHitThreatSource(BaseModel):
    """
    A single resource related to a threat hit.
    """ # noqa: E501
    referrer: Optional[StrictStr] = Field(default=None, description="Referrer of the resource. Only set if the referrer is available.")
    remote_ip: Optional[StrictStr] = Field(default=None, description="The remote IP of the resource in ASCII format. Either IPv4 or IPv6.", alias="remoteIp")
    type: Optional[StrictStr] = Field(default=None, description="The type of source reported.")
    url: Optional[StrictStr] = Field(default=None, description="The URL of the resource.")
    __properties: ClassVar[List[str]] = ["referrer", "remoteIp", "type", "url"]

    @field_validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['THREAT_SOURCE_TYPE_UNSPECIFIED', 'MATCHING_URL', 'TAB_URL', 'TAB_REDIRECT', 'TAB_RESOURCE']):
            raise ValueError("must be one of enum values ('THREAT_SOURCE_TYPE_UNSPECIFIED', 'MATCHING_URL', 'TAB_URL', 'TAB_REDIRECT', 'TAB_RESOURCE')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleSecuritySafebrowsingV4ThreatHitThreatSource from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleSecuritySafebrowsingV4ThreatHitThreatSource from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "referrer": obj.get("referrer"),
            "remoteIp": obj.get("remoteIp"),
            "type": obj.get("type"),
            "url": obj.get("url")
        })
        return _obj



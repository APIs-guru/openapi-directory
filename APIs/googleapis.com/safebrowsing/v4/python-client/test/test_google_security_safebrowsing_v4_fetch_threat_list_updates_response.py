# coding: utf-8

"""
    Safe Browsing API

    Enables client applications to check web resources (most commonly URLs) against Google-generated lists of unsafe web resources. The Safe Browsing APIs are for non-commercial use only. If you need to use APIs to detect malicious URLs for commercial purposes – meaning “for sale or revenue-generating purposes” – please refer to the Web Risk API.

    The version of the OpenAPI document: v4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.google_security_safebrowsing_v4_fetch_threat_list_updates_response import GoogleSecuritySafebrowsingV4FetchThreatListUpdatesResponse

class TestGoogleSecuritySafebrowsingV4FetchThreatListUpdatesResponse(unittest.TestCase):
    """GoogleSecuritySafebrowsingV4FetchThreatListUpdatesResponse unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> GoogleSecuritySafebrowsingV4FetchThreatListUpdatesResponse:
        """Test GoogleSecuritySafebrowsingV4FetchThreatListUpdatesResponse
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `GoogleSecuritySafebrowsingV4FetchThreatListUpdatesResponse`
        """
        model = GoogleSecuritySafebrowsingV4FetchThreatListUpdatesResponse()
        if include_optional:
            return GoogleSecuritySafebrowsingV4FetchThreatListUpdatesResponse(
                list_update_responses = [
                    openapi_client.models.google_security_safebrowsing_v4_fetch_threat_list_updates_response_list_update_response.GoogleSecuritySafebrowsingV4FetchThreatListUpdatesResponseListUpdateResponse(
                        additions = [
                            openapi_client.models.google_security_safebrowsing_v4_threat_entry_set.GoogleSecuritySafebrowsingV4ThreatEntrySet(
                                compression_type = 'COMPRESSION_TYPE_UNSPECIFIED', 
                                raw_hashes = openapi_client.models.google_security_safebrowsing_v4_raw_hashes.GoogleSecuritySafebrowsingV4RawHashes(
                                    prefix_size = 56, ), 
                                raw_indices = openapi_client.models.google_security_safebrowsing_v4_raw_indices.GoogleSecuritySafebrowsingV4RawIndices(
                                    indices = [
                                        56
                                        ], ), 
                                rice_hashes = openapi_client.models.google_security_safebrowsing_v4_rice_delta_encoding.GoogleSecuritySafebrowsingV4RiceDeltaEncoding(
                                    encoded_data = 'YQ==', 
                                    first_value = '', 
                                    num_entries = 56, 
                                    rice_parameter = 56, ), 
                                rice_indices = openapi_client.models.google_security_safebrowsing_v4_rice_delta_encoding.GoogleSecuritySafebrowsingV4RiceDeltaEncoding(
                                    encoded_data = 'YQ==', 
                                    first_value = '', 
                                    num_entries = 56, 
                                    rice_parameter = 56, ), )
                            ], 
                        checksum = openapi_client.models.google_security_safebrowsing_v4_checksum.GoogleSecuritySafebrowsingV4Checksum(
                            sha256 = 'YQ==', ), 
                        new_client_state = 'YQ==', 
                        platform_type = 'PLATFORM_TYPE_UNSPECIFIED', 
                        removals = [
                            openapi_client.models.google_security_safebrowsing_v4_threat_entry_set.GoogleSecuritySafebrowsingV4ThreatEntrySet(
                                compression_type = 'COMPRESSION_TYPE_UNSPECIFIED', )
                            ], 
                        response_type = 'RESPONSE_TYPE_UNSPECIFIED', 
                        threat_entry_type = 'THREAT_ENTRY_TYPE_UNSPECIFIED', 
                        threat_type = 'THREAT_TYPE_UNSPECIFIED', )
                    ],
                minimum_wait_duration = ''
            )
        else:
            return GoogleSecuritySafebrowsingV4FetchThreatListUpdatesResponse(
        )
        """

    def testGoogleSecuritySafebrowsingV4FetchThreatListUpdatesResponse(self):
        """Test GoogleSecuritySafebrowsingV4FetchThreatListUpdatesResponse"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

# coding: utf-8

"""
    Safe Browsing API

    Enables client applications to check web resources (most commonly URLs) against Google-generated lists of unsafe web resources. The Safe Browsing APIs are for non-commercial use only. If you need to use APIs to detect malicious URLs for commercial purposes – meaning “for sale or revenue-generating purposes” – please refer to the Web Risk API.

    The version of the OpenAPI document: v4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.google_security_safebrowsing_v4_find_threat_matches_request import GoogleSecuritySafebrowsingV4FindThreatMatchesRequest

class TestGoogleSecuritySafebrowsingV4FindThreatMatchesRequest(unittest.TestCase):
    """GoogleSecuritySafebrowsingV4FindThreatMatchesRequest unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> GoogleSecuritySafebrowsingV4FindThreatMatchesRequest:
        """Test GoogleSecuritySafebrowsingV4FindThreatMatchesRequest
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `GoogleSecuritySafebrowsingV4FindThreatMatchesRequest`
        """
        model = GoogleSecuritySafebrowsingV4FindThreatMatchesRequest()
        if include_optional:
            return GoogleSecuritySafebrowsingV4FindThreatMatchesRequest(
                client = openapi_client.models.google_security_safebrowsing_v4_client_info.GoogleSecuritySafebrowsingV4ClientInfo(
                    client_id = '', 
                    client_version = '', ),
                threat_info = openapi_client.models.google_security_safebrowsing_v4_threat_info.GoogleSecuritySafebrowsingV4ThreatInfo(
                    platform_types = [
                        'PLATFORM_TYPE_UNSPECIFIED'
                        ], 
                    threat_entries = [
                        openapi_client.models.google_security_safebrowsing_v4_threat_entry.GoogleSecuritySafebrowsingV4ThreatEntry(
                            digest = 'YQ==', 
                            hash = 'YQ==', 
                            url = '', )
                        ], 
                    threat_entry_types = [
                        'THREAT_ENTRY_TYPE_UNSPECIFIED'
                        ], 
                    threat_types = [
                        'THREAT_TYPE_UNSPECIFIED'
                        ], )
            )
        else:
            return GoogleSecuritySafebrowsingV4FindThreatMatchesRequest(
        )
        """

    def testGoogleSecuritySafebrowsingV4FindThreatMatchesRequest(self):
        """Test GoogleSecuritySafebrowsingV4FindThreatMatchesRequest"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

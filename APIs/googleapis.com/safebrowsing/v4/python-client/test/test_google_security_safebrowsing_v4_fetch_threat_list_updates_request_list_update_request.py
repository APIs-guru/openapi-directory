# coding: utf-8

"""
    Safe Browsing API

    Enables client applications to check web resources (most commonly URLs) against Google-generated lists of unsafe web resources. The Safe Browsing APIs are for non-commercial use only. If you need to use APIs to detect malicious URLs for commercial purposes – meaning “for sale or revenue-generating purposes” – please refer to the Web Risk API.

    The version of the OpenAPI document: v4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.google_security_safebrowsing_v4_fetch_threat_list_updates_request_list_update_request import GoogleSecuritySafebrowsingV4FetchThreatListUpdatesRequestListUpdateRequest

class TestGoogleSecuritySafebrowsingV4FetchThreatListUpdatesRequestListUpdateRequest(unittest.TestCase):
    """GoogleSecuritySafebrowsingV4FetchThreatListUpdatesRequestListUpdateRequest unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> GoogleSecuritySafebrowsingV4FetchThreatListUpdatesRequestListUpdateRequest:
        """Test GoogleSecuritySafebrowsingV4FetchThreatListUpdatesRequestListUpdateRequest
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `GoogleSecuritySafebrowsingV4FetchThreatListUpdatesRequestListUpdateRequest`
        """
        model = GoogleSecuritySafebrowsingV4FetchThreatListUpdatesRequestListUpdateRequest()
        if include_optional:
            return GoogleSecuritySafebrowsingV4FetchThreatListUpdatesRequestListUpdateRequest(
                constraints = openapi_client.models.google_security_safebrowsing_v4_fetch_threat_list_updates_request_list_update_request_constraints.GoogleSecuritySafebrowsingV4FetchThreatListUpdatesRequestListUpdateRequestConstraints(
                    device_location = '', 
                    language = '', 
                    max_database_entries = 56, 
                    max_update_entries = 56, 
                    region = '', 
                    supported_compressions = [
                        'COMPRESSION_TYPE_UNSPECIFIED'
                        ], ),
                platform_type = 'PLATFORM_TYPE_UNSPECIFIED',
                state = 'YQ==',
                threat_entry_type = 'THREAT_ENTRY_TYPE_UNSPECIFIED',
                threat_type = 'THREAT_TYPE_UNSPECIFIED'
            )
        else:
            return GoogleSecuritySafebrowsingV4FetchThreatListUpdatesRequestListUpdateRequest(
        )
        """

    def testGoogleSecuritySafebrowsingV4FetchThreatListUpdatesRequestListUpdateRequest(self):
        """Test GoogleSecuritySafebrowsingV4FetchThreatListUpdatesRequestListUpdateRequest"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

# coding: utf-8

"""
    Safe Browsing API

    Enables client applications to check web resources (most commonly URLs) against Google-generated lists of unsafe web resources. The Safe Browsing APIs are for non-commercial use only. If you need to use APIs to detect malicious URLs for commercial purposes – meaning “for sale or revenue-generating purposes” – please refer to the Web Risk API.

    The version of the OpenAPI document: v4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.google_security_safebrowsing_v4_threat_hit_threat_source import GoogleSecuritySafebrowsingV4ThreatHitThreatSource

class TestGoogleSecuritySafebrowsingV4ThreatHitThreatSource(unittest.TestCase):
    """GoogleSecuritySafebrowsingV4ThreatHitThreatSource unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> GoogleSecuritySafebrowsingV4ThreatHitThreatSource:
        """Test GoogleSecuritySafebrowsingV4ThreatHitThreatSource
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `GoogleSecuritySafebrowsingV4ThreatHitThreatSource`
        """
        model = GoogleSecuritySafebrowsingV4ThreatHitThreatSource()
        if include_optional:
            return GoogleSecuritySafebrowsingV4ThreatHitThreatSource(
                referrer = '',
                remote_ip = '',
                type = 'THREAT_SOURCE_TYPE_UNSPECIFIED',
                url = ''
            )
        else:
            return GoogleSecuritySafebrowsingV4ThreatHitThreatSource(
        )
        """

    def testGoogleSecuritySafebrowsingV4ThreatHitThreatSource(self):
        """Test GoogleSecuritySafebrowsingV4ThreatHitThreatSource"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

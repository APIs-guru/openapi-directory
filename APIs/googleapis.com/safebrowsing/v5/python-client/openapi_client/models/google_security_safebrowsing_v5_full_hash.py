# coding: utf-8

"""
    Safe Browsing API

    Enables client applications to check web resources (most commonly URLs) against Google-generated lists of unsafe web resources. The Safe Browsing APIs are for non-commercial use only. If you need to use APIs to detect malicious URLs for commercial purposes – meaning “for sale or revenue-generating purposes” – please refer to the Web Risk API.

    The version of the OpenAPI document: v5
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBytes, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from openapi_client.models.google_security_safebrowsing_v5_full_hash_full_hash_detail import GoogleSecuritySafebrowsingV5FullHashFullHashDetail
from typing import Optional, Set
from typing_extensions import Self

class GoogleSecuritySafebrowsingV5FullHash(BaseModel):
    """
    The full hash identified with one or more matches.
    """ # noqa: E501
    full_hash: Optional[Union[StrictBytes, StrictStr]] = Field(default=None, description="The matching full hash. This is the SHA256 hash. The length will be exactly 32 bytes.", alias="fullHash")
    full_hash_details: Optional[List[GoogleSecuritySafebrowsingV5FullHashFullHashDetail]] = Field(default=None, description="Unordered list. A repeated field identifying the details relevant to this full hash.", alias="fullHashDetails")
    __properties: ClassVar[List[str]] = ["fullHash", "fullHashDetails"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleSecuritySafebrowsingV5FullHash from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in full_hash_details (list)
        _items = []
        if self.full_hash_details:
            for _item_full_hash_details in self.full_hash_details:
                if _item_full_hash_details:
                    _items.append(_item_full_hash_details.to_dict())
            _dict['fullHashDetails'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleSecuritySafebrowsingV5FullHash from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "fullHash": obj.get("fullHash"),
            "fullHashDetails": [GoogleSecuritySafebrowsingV5FullHashFullHashDetail.from_dict(_item) for _item in obj["fullHashDetails"]] if obj.get("fullHashDetails") is not None else None
        })
        return _obj



# coding: utf-8

"""
    Google Drive API

    The Google Drive API allows clients to access resources from Google Drive.

    The version of the OpenAPI document: v3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class TeamDriveRestrictions(BaseModel):
    """
    A set of restrictions that apply to this Team Drive or items inside this Team Drive.
    """ # noqa: E501
    admin_managed_restrictions: Optional[StrictBool] = Field(default=None, description="Whether administrative privileges on this Team Drive are required to modify restrictions.", alias="adminManagedRestrictions")
    copy_requires_writer_permission: Optional[StrictBool] = Field(default=None, description="Whether the options to copy, print, or download files inside this Team Drive, should be disabled for readers and commenters. When this restriction is set to `true`, it will override the similarly named field to `true` for any file inside this Team Drive.", alias="copyRequiresWriterPermission")
    domain_users_only: Optional[StrictBool] = Field(default=None, description="Whether access to this Team Drive and items inside this Team Drive is restricted to users of the domain to which this Team Drive belongs. This restriction may be overridden by other sharing policies controlled outside of this Team Drive.", alias="domainUsersOnly")
    sharing_folders_requires_organizer_permission: Optional[StrictBool] = Field(default=None, description="If true, only users with the organizer role can share folders. If false, users with either the organizer role or the file organizer role can share folders.", alias="sharingFoldersRequiresOrganizerPermission")
    team_members_only: Optional[StrictBool] = Field(default=None, description="Whether access to items inside this Team Drive is restricted to members of this Team Drive.", alias="teamMembersOnly")
    __properties: ClassVar[List[str]] = ["adminManagedRestrictions", "copyRequiresWriterPermission", "domainUsersOnly", "sharingFoldersRequiresOrganizerPermission", "teamMembersOnly"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of TeamDriveRestrictions from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of TeamDriveRestrictions from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "adminManagedRestrictions": obj.get("adminManagedRestrictions"),
            "copyRequiresWriterPermission": obj.get("copyRequiresWriterPermission"),
            "domainUsersOnly": obj.get("domainUsersOnly"),
            "sharingFoldersRequiresOrganizerPermission": obj.get("sharingFoldersRequiresOrganizerPermission"),
            "teamMembersOnly": obj.get("teamMembersOnly")
        })
        return _obj



# coding: utf-8

"""
    Google Drive API

    The Google Drive API allows clients to access resources from Google Drive.

    The version of the OpenAPI document: v3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.comment_quoted_file_content import CommentQuotedFileContent
from openapi_client.models.reply import Reply
from openapi_client.models.user import User
from typing import Optional, Set
from typing_extensions import Self

class Comment(BaseModel):
    """
    A comment on a file. Some resource methods (such as `comments.update`) require a `commentId`. Use the `comments.list` method to retrieve the ID for a comment in a file.
    """ # noqa: E501
    anchor: Optional[StrictStr] = Field(default=None, description="A region of the document represented as a JSON string. For details on defining anchor properties, refer to [Manage comments and replies](https://developers.google.com/drive/api/v3/manage-comments).")
    author: Optional[User] = None
    content: Optional[StrictStr] = Field(default=None, description="The plain text content of the comment. This field is used for setting the content, while `htmlContent` should be displayed.")
    created_time: Optional[datetime] = Field(default=None, description="The time at which the comment was created (RFC 3339 date-time).", alias="createdTime")
    deleted: Optional[StrictBool] = Field(default=None, description="Output only. Whether the comment has been deleted. A deleted comment has no content.")
    html_content: Optional[StrictStr] = Field(default=None, description="Output only. The content of the comment with HTML formatting.", alias="htmlContent")
    id: Optional[StrictStr] = Field(default=None, description="Output only. The ID of the comment.")
    kind: Optional[StrictStr] = Field(default='drive#comment', description="Output only. Identifies what kind of resource this is. Value: the fixed string `\"drive#comment\"`.")
    modified_time: Optional[datetime] = Field(default=None, description="The last time the comment or any of its replies was modified (RFC 3339 date-time).", alias="modifiedTime")
    quoted_file_content: Optional[CommentQuotedFileContent] = Field(default=None, alias="quotedFileContent")
    replies: Optional[List[Reply]] = Field(default=None, description="Output only. The full list of replies to the comment in chronological order.")
    resolved: Optional[StrictBool] = Field(default=None, description="Output only. Whether the comment has been resolved by one of its replies.")
    __properties: ClassVar[List[str]] = ["anchor", "author", "content", "createdTime", "deleted", "htmlContent", "id", "kind", "modifiedTime", "quotedFileContent", "replies", "resolved"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Comment from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of author
        if self.author:
            _dict['author'] = self.author.to_dict()
        # override the default output from pydantic by calling `to_dict()` of quoted_file_content
        if self.quoted_file_content:
            _dict['quotedFileContent'] = self.quoted_file_content.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in replies (list)
        _items = []
        if self.replies:
            for _item_replies in self.replies:
                if _item_replies:
                    _items.append(_item_replies.to_dict())
            _dict['replies'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Comment from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "anchor": obj.get("anchor"),
            "author": User.from_dict(obj["author"]) if obj.get("author") is not None else None,
            "content": obj.get("content"),
            "createdTime": obj.get("createdTime"),
            "deleted": obj.get("deleted"),
            "htmlContent": obj.get("htmlContent"),
            "id": obj.get("id"),
            "kind": obj.get("kind") if obj.get("kind") is not None else 'drive#comment',
            "modifiedTime": obj.get("modifiedTime"),
            "quotedFileContent": CommentQuotedFileContent.from_dict(obj["quotedFileContent"]) if obj.get("quotedFileContent") is not None else None,
            "replies": [Reply.from_dict(_item) for _item in obj["replies"]] if obj.get("replies") is not None else None,
            "resolved": obj.get("resolved")
        })
        return _obj



# coding: utf-8

"""
    Google Drive API

    The Google Drive API allows clients to access resources from Google Drive.

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from pydantic import Field, StrictBool, StrictStr, field_validator
from typing import Optional
from typing_extensions import Annotated
from openapi_client.models.change import Change
from openapi_client.models.change_list import ChangeList
from openapi_client.models.channel import Channel
from openapi_client.models.start_page_token import StartPageToken

from openapi_client.api_client import ApiClient, RequestSerialized
from openapi_client.api_response import ApiResponse
from openapi_client.rest import RESTResponseType


class ChangesApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def drive_changes_get(
        self,
        change_id: Annotated[StrictStr, Field(description="The ID of the change.")],
        xgafv: Annotated[Optional[StrictStr], Field(description="V1 error format.")] = None,
        access_token: Annotated[Optional[StrictStr], Field(description="OAuth access token.")] = None,
        alt: Annotated[Optional[StrictStr], Field(description="Data format for response.")] = None,
        param_callback: Annotated[Optional[StrictStr], Field(description="JSONP")] = None,
        fields: Annotated[Optional[StrictStr], Field(description="Selector specifying which fields to include in a partial response.")] = None,
        key: Annotated[Optional[StrictStr], Field(description="API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.")] = None,
        oauth_token: Annotated[Optional[StrictStr], Field(description="OAuth 2.0 token for the current user.")] = None,
        pretty_print: Annotated[Optional[StrictBool], Field(description="Returns response with indentations and line breaks.")] = None,
        quota_user: Annotated[Optional[StrictStr], Field(description="Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.")] = None,
        upload_protocol: Annotated[Optional[StrictStr], Field(description="Upload protocol for media (e.g. \"raw\", \"multipart\").")] = None,
        upload_type: Annotated[Optional[StrictStr], Field(description="Legacy upload protocol for media (e.g. \"media\", \"multipart\").")] = None,
        drive_id: Annotated[Optional[StrictStr], Field(description="The shared drive from which the change will be returned.")] = None,
        supports_all_drives: Annotated[Optional[StrictBool], Field(description="Whether the requesting application supports both My Drives and shared drives.")] = None,
        supports_team_drives: Annotated[Optional[StrictBool], Field(description="Deprecated: Use `supportsAllDrives` instead.")] = None,
        team_drive_id: Annotated[Optional[StrictStr], Field(description="Deprecated: Use `driveId` instead.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> Change:
        """drive_changes_get

        Deprecated: Use `changes.getStartPageToken` and `changes.list` to retrieve recent changes.

        :param change_id: The ID of the change. (required)
        :type change_id: str
        :param xgafv: V1 error format.
        :type xgafv: str
        :param access_token: OAuth access token.
        :type access_token: str
        :param alt: Data format for response.
        :type alt: str
        :param param_callback: JSONP
        :type param_callback: str
        :param fields: Selector specifying which fields to include in a partial response.
        :type fields: str
        :param key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
        :type key: str
        :param oauth_token: OAuth 2.0 token for the current user.
        :type oauth_token: str
        :param pretty_print: Returns response with indentations and line breaks.
        :type pretty_print: bool
        :param quota_user: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
        :type quota_user: str
        :param upload_protocol: Upload protocol for media (e.g. \"raw\", \"multipart\").
        :type upload_protocol: str
        :param upload_type: Legacy upload protocol for media (e.g. \"media\", \"multipart\").
        :type upload_type: str
        :param drive_id: The shared drive from which the change will be returned.
        :type drive_id: str
        :param supports_all_drives: Whether the requesting application supports both My Drives and shared drives.
        :type supports_all_drives: bool
        :param supports_team_drives: Deprecated: Use `supportsAllDrives` instead.
        :type supports_team_drives: bool
        :param team_drive_id: Deprecated: Use `driveId` instead.
        :type team_drive_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._drive_changes_get_serialize(
            change_id=change_id,
            xgafv=xgafv,
            access_token=access_token,
            alt=alt,
            param_callback=param_callback,
            fields=fields,
            key=key,
            oauth_token=oauth_token,
            pretty_print=pretty_print,
            quota_user=quota_user,
            upload_protocol=upload_protocol,
            upload_type=upload_type,
            drive_id=drive_id,
            supports_all_drives=supports_all_drives,
            supports_team_drives=supports_team_drives,
            team_drive_id=team_drive_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Change",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def drive_changes_get_with_http_info(
        self,
        change_id: Annotated[StrictStr, Field(description="The ID of the change.")],
        xgafv: Annotated[Optional[StrictStr], Field(description="V1 error format.")] = None,
        access_token: Annotated[Optional[StrictStr], Field(description="OAuth access token.")] = None,
        alt: Annotated[Optional[StrictStr], Field(description="Data format for response.")] = None,
        param_callback: Annotated[Optional[StrictStr], Field(description="JSONP")] = None,
        fields: Annotated[Optional[StrictStr], Field(description="Selector specifying which fields to include in a partial response.")] = None,
        key: Annotated[Optional[StrictStr], Field(description="API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.")] = None,
        oauth_token: Annotated[Optional[StrictStr], Field(description="OAuth 2.0 token for the current user.")] = None,
        pretty_print: Annotated[Optional[StrictBool], Field(description="Returns response with indentations and line breaks.")] = None,
        quota_user: Annotated[Optional[StrictStr], Field(description="Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.")] = None,
        upload_protocol: Annotated[Optional[StrictStr], Field(description="Upload protocol for media (e.g. \"raw\", \"multipart\").")] = None,
        upload_type: Annotated[Optional[StrictStr], Field(description="Legacy upload protocol for media (e.g. \"media\", \"multipart\").")] = None,
        drive_id: Annotated[Optional[StrictStr], Field(description="The shared drive from which the change will be returned.")] = None,
        supports_all_drives: Annotated[Optional[StrictBool], Field(description="Whether the requesting application supports both My Drives and shared drives.")] = None,
        supports_team_drives: Annotated[Optional[StrictBool], Field(description="Deprecated: Use `supportsAllDrives` instead.")] = None,
        team_drive_id: Annotated[Optional[StrictStr], Field(description="Deprecated: Use `driveId` instead.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[Change]:
        """drive_changes_get

        Deprecated: Use `changes.getStartPageToken` and `changes.list` to retrieve recent changes.

        :param change_id: The ID of the change. (required)
        :type change_id: str
        :param xgafv: V1 error format.
        :type xgafv: str
        :param access_token: OAuth access token.
        :type access_token: str
        :param alt: Data format for response.
        :type alt: str
        :param param_callback: JSONP
        :type param_callback: str
        :param fields: Selector specifying which fields to include in a partial response.
        :type fields: str
        :param key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
        :type key: str
        :param oauth_token: OAuth 2.0 token for the current user.
        :type oauth_token: str
        :param pretty_print: Returns response with indentations and line breaks.
        :type pretty_print: bool
        :param quota_user: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
        :type quota_user: str
        :param upload_protocol: Upload protocol for media (e.g. \"raw\", \"multipart\").
        :type upload_protocol: str
        :param upload_type: Legacy upload protocol for media (e.g. \"media\", \"multipart\").
        :type upload_type: str
        :param drive_id: The shared drive from which the change will be returned.
        :type drive_id: str
        :param supports_all_drives: Whether the requesting application supports both My Drives and shared drives.
        :type supports_all_drives: bool
        :param supports_team_drives: Deprecated: Use `supportsAllDrives` instead.
        :type supports_team_drives: bool
        :param team_drive_id: Deprecated: Use `driveId` instead.
        :type team_drive_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._drive_changes_get_serialize(
            change_id=change_id,
            xgafv=xgafv,
            access_token=access_token,
            alt=alt,
            param_callback=param_callback,
            fields=fields,
            key=key,
            oauth_token=oauth_token,
            pretty_print=pretty_print,
            quota_user=quota_user,
            upload_protocol=upload_protocol,
            upload_type=upload_type,
            drive_id=drive_id,
            supports_all_drives=supports_all_drives,
            supports_team_drives=supports_team_drives,
            team_drive_id=team_drive_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Change",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def drive_changes_get_without_preload_content(
        self,
        change_id: Annotated[StrictStr, Field(description="The ID of the change.")],
        xgafv: Annotated[Optional[StrictStr], Field(description="V1 error format.")] = None,
        access_token: Annotated[Optional[StrictStr], Field(description="OAuth access token.")] = None,
        alt: Annotated[Optional[StrictStr], Field(description="Data format for response.")] = None,
        param_callback: Annotated[Optional[StrictStr], Field(description="JSONP")] = None,
        fields: Annotated[Optional[StrictStr], Field(description="Selector specifying which fields to include in a partial response.")] = None,
        key: Annotated[Optional[StrictStr], Field(description="API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.")] = None,
        oauth_token: Annotated[Optional[StrictStr], Field(description="OAuth 2.0 token for the current user.")] = None,
        pretty_print: Annotated[Optional[StrictBool], Field(description="Returns response with indentations and line breaks.")] = None,
        quota_user: Annotated[Optional[StrictStr], Field(description="Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.")] = None,
        upload_protocol: Annotated[Optional[StrictStr], Field(description="Upload protocol for media (e.g. \"raw\", \"multipart\").")] = None,
        upload_type: Annotated[Optional[StrictStr], Field(description="Legacy upload protocol for media (e.g. \"media\", \"multipart\").")] = None,
        drive_id: Annotated[Optional[StrictStr], Field(description="The shared drive from which the change will be returned.")] = None,
        supports_all_drives: Annotated[Optional[StrictBool], Field(description="Whether the requesting application supports both My Drives and shared drives.")] = None,
        supports_team_drives: Annotated[Optional[StrictBool], Field(description="Deprecated: Use `supportsAllDrives` instead.")] = None,
        team_drive_id: Annotated[Optional[StrictStr], Field(description="Deprecated: Use `driveId` instead.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """drive_changes_get

        Deprecated: Use `changes.getStartPageToken` and `changes.list` to retrieve recent changes.

        :param change_id: The ID of the change. (required)
        :type change_id: str
        :param xgafv: V1 error format.
        :type xgafv: str
        :param access_token: OAuth access token.
        :type access_token: str
        :param alt: Data format for response.
        :type alt: str
        :param param_callback: JSONP
        :type param_callback: str
        :param fields: Selector specifying which fields to include in a partial response.
        :type fields: str
        :param key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
        :type key: str
        :param oauth_token: OAuth 2.0 token for the current user.
        :type oauth_token: str
        :param pretty_print: Returns response with indentations and line breaks.
        :type pretty_print: bool
        :param quota_user: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
        :type quota_user: str
        :param upload_protocol: Upload protocol for media (e.g. \"raw\", \"multipart\").
        :type upload_protocol: str
        :param upload_type: Legacy upload protocol for media (e.g. \"media\", \"multipart\").
        :type upload_type: str
        :param drive_id: The shared drive from which the change will be returned.
        :type drive_id: str
        :param supports_all_drives: Whether the requesting application supports both My Drives and shared drives.
        :type supports_all_drives: bool
        :param supports_team_drives: Deprecated: Use `supportsAllDrives` instead.
        :type supports_team_drives: bool
        :param team_drive_id: Deprecated: Use `driveId` instead.
        :type team_drive_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._drive_changes_get_serialize(
            change_id=change_id,
            xgafv=xgafv,
            access_token=access_token,
            alt=alt,
            param_callback=param_callback,
            fields=fields,
            key=key,
            oauth_token=oauth_token,
            pretty_print=pretty_print,
            quota_user=quota_user,
            upload_protocol=upload_protocol,
            upload_type=upload_type,
            drive_id=drive_id,
            supports_all_drives=supports_all_drives,
            supports_team_drives=supports_team_drives,
            team_drive_id=team_drive_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Change",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _drive_changes_get_serialize(
        self,
        change_id,
        xgafv,
        access_token,
        alt,
        param_callback,
        fields,
        key,
        oauth_token,
        pretty_print,
        quota_user,
        upload_protocol,
        upload_type,
        drive_id,
        supports_all_drives,
        supports_team_drives,
        team_drive_id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if change_id is not None:
            _path_params['changeId'] = change_id
        # process the query parameters
        if xgafv is not None:
            
            _query_params.append(('$.xgafv', xgafv))
            
        if access_token is not None:
            
            _query_params.append(('access_token', access_token))
            
        if alt is not None:
            
            _query_params.append(('alt', alt))
            
        if param_callback is not None:
            
            _query_params.append(('callback', param_callback))
            
        if fields is not None:
            
            _query_params.append(('fields', fields))
            
        if key is not None:
            
            _query_params.append(('key', key))
            
        if oauth_token is not None:
            
            _query_params.append(('oauth_token', oauth_token))
            
        if pretty_print is not None:
            
            _query_params.append(('prettyPrint', pretty_print))
            
        if quota_user is not None:
            
            _query_params.append(('quotaUser', quota_user))
            
        if upload_protocol is not None:
            
            _query_params.append(('upload_protocol', upload_protocol))
            
        if upload_type is not None:
            
            _query_params.append(('uploadType', upload_type))
            
        if drive_id is not None:
            
            _query_params.append(('driveId', drive_id))
            
        if supports_all_drives is not None:
            
            _query_params.append(('supportsAllDrives', supports_all_drives))
            
        if supports_team_drives is not None:
            
            _query_params.append(('supportsTeamDrives', supports_team_drives))
            
        if team_drive_id is not None:
            
            _query_params.append(('teamDriveId', team_drive_id))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'Oauth2c', 
            'Oauth2'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/changes/{changeId}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def drive_changes_get_start_page_token(
        self,
        xgafv: Annotated[Optional[StrictStr], Field(description="V1 error format.")] = None,
        access_token: Annotated[Optional[StrictStr], Field(description="OAuth access token.")] = None,
        alt: Annotated[Optional[StrictStr], Field(description="Data format for response.")] = None,
        param_callback: Annotated[Optional[StrictStr], Field(description="JSONP")] = None,
        fields: Annotated[Optional[StrictStr], Field(description="Selector specifying which fields to include in a partial response.")] = None,
        key: Annotated[Optional[StrictStr], Field(description="API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.")] = None,
        oauth_token: Annotated[Optional[StrictStr], Field(description="OAuth 2.0 token for the current user.")] = None,
        pretty_print: Annotated[Optional[StrictBool], Field(description="Returns response with indentations and line breaks.")] = None,
        quota_user: Annotated[Optional[StrictStr], Field(description="Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.")] = None,
        upload_protocol: Annotated[Optional[StrictStr], Field(description="Upload protocol for media (e.g. \"raw\", \"multipart\").")] = None,
        upload_type: Annotated[Optional[StrictStr], Field(description="Legacy upload protocol for media (e.g. \"media\", \"multipart\").")] = None,
        drive_id: Annotated[Optional[StrictStr], Field(description="The ID of the shared drive for which the starting pageToken for listing future changes from that shared drive will be returned.")] = None,
        supports_all_drives: Annotated[Optional[StrictBool], Field(description="Whether the requesting application supports both My Drives and shared drives.")] = None,
        supports_team_drives: Annotated[Optional[StrictBool], Field(description="Deprecated: Use `supportsAllDrives` instead.")] = None,
        team_drive_id: Annotated[Optional[StrictStr], Field(description="Deprecated: Use `driveId` instead.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> StartPageToken:
        """drive_changes_get_start_page_token

        Gets the starting pageToken for listing future changes.

        :param xgafv: V1 error format.
        :type xgafv: str
        :param access_token: OAuth access token.
        :type access_token: str
        :param alt: Data format for response.
        :type alt: str
        :param param_callback: JSONP
        :type param_callback: str
        :param fields: Selector specifying which fields to include in a partial response.
        :type fields: str
        :param key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
        :type key: str
        :param oauth_token: OAuth 2.0 token for the current user.
        :type oauth_token: str
        :param pretty_print: Returns response with indentations and line breaks.
        :type pretty_print: bool
        :param quota_user: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
        :type quota_user: str
        :param upload_protocol: Upload protocol for media (e.g. \"raw\", \"multipart\").
        :type upload_protocol: str
        :param upload_type: Legacy upload protocol for media (e.g. \"media\", \"multipart\").
        :type upload_type: str
        :param drive_id: The ID of the shared drive for which the starting pageToken for listing future changes from that shared drive will be returned.
        :type drive_id: str
        :param supports_all_drives: Whether the requesting application supports both My Drives and shared drives.
        :type supports_all_drives: bool
        :param supports_team_drives: Deprecated: Use `supportsAllDrives` instead.
        :type supports_team_drives: bool
        :param team_drive_id: Deprecated: Use `driveId` instead.
        :type team_drive_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._drive_changes_get_start_page_token_serialize(
            xgafv=xgafv,
            access_token=access_token,
            alt=alt,
            param_callback=param_callback,
            fields=fields,
            key=key,
            oauth_token=oauth_token,
            pretty_print=pretty_print,
            quota_user=quota_user,
            upload_protocol=upload_protocol,
            upload_type=upload_type,
            drive_id=drive_id,
            supports_all_drives=supports_all_drives,
            supports_team_drives=supports_team_drives,
            team_drive_id=team_drive_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "StartPageToken",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def drive_changes_get_start_page_token_with_http_info(
        self,
        xgafv: Annotated[Optional[StrictStr], Field(description="V1 error format.")] = None,
        access_token: Annotated[Optional[StrictStr], Field(description="OAuth access token.")] = None,
        alt: Annotated[Optional[StrictStr], Field(description="Data format for response.")] = None,
        param_callback: Annotated[Optional[StrictStr], Field(description="JSONP")] = None,
        fields: Annotated[Optional[StrictStr], Field(description="Selector specifying which fields to include in a partial response.")] = None,
        key: Annotated[Optional[StrictStr], Field(description="API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.")] = None,
        oauth_token: Annotated[Optional[StrictStr], Field(description="OAuth 2.0 token for the current user.")] = None,
        pretty_print: Annotated[Optional[StrictBool], Field(description="Returns response with indentations and line breaks.")] = None,
        quota_user: Annotated[Optional[StrictStr], Field(description="Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.")] = None,
        upload_protocol: Annotated[Optional[StrictStr], Field(description="Upload protocol for media (e.g. \"raw\", \"multipart\").")] = None,
        upload_type: Annotated[Optional[StrictStr], Field(description="Legacy upload protocol for media (e.g. \"media\", \"multipart\").")] = None,
        drive_id: Annotated[Optional[StrictStr], Field(description="The ID of the shared drive for which the starting pageToken for listing future changes from that shared drive will be returned.")] = None,
        supports_all_drives: Annotated[Optional[StrictBool], Field(description="Whether the requesting application supports both My Drives and shared drives.")] = None,
        supports_team_drives: Annotated[Optional[StrictBool], Field(description="Deprecated: Use `supportsAllDrives` instead.")] = None,
        team_drive_id: Annotated[Optional[StrictStr], Field(description="Deprecated: Use `driveId` instead.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[StartPageToken]:
        """drive_changes_get_start_page_token

        Gets the starting pageToken for listing future changes.

        :param xgafv: V1 error format.
        :type xgafv: str
        :param access_token: OAuth access token.
        :type access_token: str
        :param alt: Data format for response.
        :type alt: str
        :param param_callback: JSONP
        :type param_callback: str
        :param fields: Selector specifying which fields to include in a partial response.
        :type fields: str
        :param key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
        :type key: str
        :param oauth_token: OAuth 2.0 token for the current user.
        :type oauth_token: str
        :param pretty_print: Returns response with indentations and line breaks.
        :type pretty_print: bool
        :param quota_user: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
        :type quota_user: str
        :param upload_protocol: Upload protocol for media (e.g. \"raw\", \"multipart\").
        :type upload_protocol: str
        :param upload_type: Legacy upload protocol for media (e.g. \"media\", \"multipart\").
        :type upload_type: str
        :param drive_id: The ID of the shared drive for which the starting pageToken for listing future changes from that shared drive will be returned.
        :type drive_id: str
        :param supports_all_drives: Whether the requesting application supports both My Drives and shared drives.
        :type supports_all_drives: bool
        :param supports_team_drives: Deprecated: Use `supportsAllDrives` instead.
        :type supports_team_drives: bool
        :param team_drive_id: Deprecated: Use `driveId` instead.
        :type team_drive_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._drive_changes_get_start_page_token_serialize(
            xgafv=xgafv,
            access_token=access_token,
            alt=alt,
            param_callback=param_callback,
            fields=fields,
            key=key,
            oauth_token=oauth_token,
            pretty_print=pretty_print,
            quota_user=quota_user,
            upload_protocol=upload_protocol,
            upload_type=upload_type,
            drive_id=drive_id,
            supports_all_drives=supports_all_drives,
            supports_team_drives=supports_team_drives,
            team_drive_id=team_drive_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "StartPageToken",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def drive_changes_get_start_page_token_without_preload_content(
        self,
        xgafv: Annotated[Optional[StrictStr], Field(description="V1 error format.")] = None,
        access_token: Annotated[Optional[StrictStr], Field(description="OAuth access token.")] = None,
        alt: Annotated[Optional[StrictStr], Field(description="Data format for response.")] = None,
        param_callback: Annotated[Optional[StrictStr], Field(description="JSONP")] = None,
        fields: Annotated[Optional[StrictStr], Field(description="Selector specifying which fields to include in a partial response.")] = None,
        key: Annotated[Optional[StrictStr], Field(description="API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.")] = None,
        oauth_token: Annotated[Optional[StrictStr], Field(description="OAuth 2.0 token for the current user.")] = None,
        pretty_print: Annotated[Optional[StrictBool], Field(description="Returns response with indentations and line breaks.")] = None,
        quota_user: Annotated[Optional[StrictStr], Field(description="Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.")] = None,
        upload_protocol: Annotated[Optional[StrictStr], Field(description="Upload protocol for media (e.g. \"raw\", \"multipart\").")] = None,
        upload_type: Annotated[Optional[StrictStr], Field(description="Legacy upload protocol for media (e.g. \"media\", \"multipart\").")] = None,
        drive_id: Annotated[Optional[StrictStr], Field(description="The ID of the shared drive for which the starting pageToken for listing future changes from that shared drive will be returned.")] = None,
        supports_all_drives: Annotated[Optional[StrictBool], Field(description="Whether the requesting application supports both My Drives and shared drives.")] = None,
        supports_team_drives: Annotated[Optional[StrictBool], Field(description="Deprecated: Use `supportsAllDrives` instead.")] = None,
        team_drive_id: Annotated[Optional[StrictStr], Field(description="Deprecated: Use `driveId` instead.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """drive_changes_get_start_page_token

        Gets the starting pageToken for listing future changes.

        :param xgafv: V1 error format.
        :type xgafv: str
        :param access_token: OAuth access token.
        :type access_token: str
        :param alt: Data format for response.
        :type alt: str
        :param param_callback: JSONP
        :type param_callback: str
        :param fields: Selector specifying which fields to include in a partial response.
        :type fields: str
        :param key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
        :type key: str
        :param oauth_token: OAuth 2.0 token for the current user.
        :type oauth_token: str
        :param pretty_print: Returns response with indentations and line breaks.
        :type pretty_print: bool
        :param quota_user: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
        :type quota_user: str
        :param upload_protocol: Upload protocol for media (e.g. \"raw\", \"multipart\").
        :type upload_protocol: str
        :param upload_type: Legacy upload protocol for media (e.g. \"media\", \"multipart\").
        :type upload_type: str
        :param drive_id: The ID of the shared drive for which the starting pageToken for listing future changes from that shared drive will be returned.
        :type drive_id: str
        :param supports_all_drives: Whether the requesting application supports both My Drives and shared drives.
        :type supports_all_drives: bool
        :param supports_team_drives: Deprecated: Use `supportsAllDrives` instead.
        :type supports_team_drives: bool
        :param team_drive_id: Deprecated: Use `driveId` instead.
        :type team_drive_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._drive_changes_get_start_page_token_serialize(
            xgafv=xgafv,
            access_token=access_token,
            alt=alt,
            param_callback=param_callback,
            fields=fields,
            key=key,
            oauth_token=oauth_token,
            pretty_print=pretty_print,
            quota_user=quota_user,
            upload_protocol=upload_protocol,
            upload_type=upload_type,
            drive_id=drive_id,
            supports_all_drives=supports_all_drives,
            supports_team_drives=supports_team_drives,
            team_drive_id=team_drive_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "StartPageToken",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _drive_changes_get_start_page_token_serialize(
        self,
        xgafv,
        access_token,
        alt,
        param_callback,
        fields,
        key,
        oauth_token,
        pretty_print,
        quota_user,
        upload_protocol,
        upload_type,
        drive_id,
        supports_all_drives,
        supports_team_drives,
        team_drive_id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if xgafv is not None:
            
            _query_params.append(('$.xgafv', xgafv))
            
        if access_token is not None:
            
            _query_params.append(('access_token', access_token))
            
        if alt is not None:
            
            _query_params.append(('alt', alt))
            
        if param_callback is not None:
            
            _query_params.append(('callback', param_callback))
            
        if fields is not None:
            
            _query_params.append(('fields', fields))
            
        if key is not None:
            
            _query_params.append(('key', key))
            
        if oauth_token is not None:
            
            _query_params.append(('oauth_token', oauth_token))
            
        if pretty_print is not None:
            
            _query_params.append(('prettyPrint', pretty_print))
            
        if quota_user is not None:
            
            _query_params.append(('quotaUser', quota_user))
            
        if upload_protocol is not None:
            
            _query_params.append(('upload_protocol', upload_protocol))
            
        if upload_type is not None:
            
            _query_params.append(('uploadType', upload_type))
            
        if drive_id is not None:
            
            _query_params.append(('driveId', drive_id))
            
        if supports_all_drives is not None:
            
            _query_params.append(('supportsAllDrives', supports_all_drives))
            
        if supports_team_drives is not None:
            
            _query_params.append(('supportsTeamDrives', supports_team_drives))
            
        if team_drive_id is not None:
            
            _query_params.append(('teamDriveId', team_drive_id))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'Oauth2c', 
            'Oauth2'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/changes/startPageToken',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def drive_changes_list(
        self,
        xgafv: Annotated[Optional[StrictStr], Field(description="V1 error format.")] = None,
        access_token: Annotated[Optional[StrictStr], Field(description="OAuth access token.")] = None,
        alt: Annotated[Optional[StrictStr], Field(description="Data format for response.")] = None,
        param_callback: Annotated[Optional[StrictStr], Field(description="JSONP")] = None,
        fields: Annotated[Optional[StrictStr], Field(description="Selector specifying which fields to include in a partial response.")] = None,
        key: Annotated[Optional[StrictStr], Field(description="API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.")] = None,
        oauth_token: Annotated[Optional[StrictStr], Field(description="OAuth 2.0 token for the current user.")] = None,
        pretty_print: Annotated[Optional[StrictBool], Field(description="Returns response with indentations and line breaks.")] = None,
        quota_user: Annotated[Optional[StrictStr], Field(description="Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.")] = None,
        upload_protocol: Annotated[Optional[StrictStr], Field(description="Upload protocol for media (e.g. \"raw\", \"multipart\").")] = None,
        upload_type: Annotated[Optional[StrictStr], Field(description="Legacy upload protocol for media (e.g. \"media\", \"multipart\").")] = None,
        drive_id: Annotated[Optional[StrictStr], Field(description="The shared drive from which changes will be returned. If specified the change IDs will be reflective of the shared drive; use the combined drive ID and change ID as an identifier.")] = None,
        include_corpus_removals: Annotated[Optional[StrictBool], Field(description="Whether changes should include the file resource if the file is still accessible by the user at the time of the request, even when a file was removed from the list of changes and there will be no further change entries for this file.")] = None,
        include_deleted: Annotated[Optional[StrictBool], Field(description="Whether to include changes indicating that items have been removed from the list of changes, for example by deletion or loss of access.")] = None,
        include_items_from_all_drives: Annotated[Optional[StrictBool], Field(description="Whether both My Drive and shared drive items should be included in results.")] = None,
        include_labels: Annotated[Optional[StrictStr], Field(description="A comma-separated list of IDs of labels to include in the `labelInfo` part of the response.")] = None,
        include_permissions_for_view: Annotated[Optional[StrictStr], Field(description="Specifies which additional view's permissions to include in the response. Only `published` is supported.")] = None,
        include_subscribed: Annotated[Optional[StrictBool], Field(description="Whether to include changes outside the My Drive hierarchy in the result. When set to false, changes to files such as those in the Application Data folder or shared files which have not been added to My Drive will be omitted from the result.")] = None,
        include_team_drive_items: Annotated[Optional[StrictBool], Field(description="Deprecated: Use `includeItemsFromAllDrives` instead.")] = None,
        max_results: Annotated[Optional[Annotated[int, Field(strict=True, ge=1)]], Field(description="Maximum number of changes to return.")] = None,
        page_token: Annotated[Optional[StrictStr], Field(description="The token for continuing a previous list request on the next page. This should be set to the value of `nextPageToken` from the previous response or to the response from the getStartPageToken method.")] = None,
        spaces: Annotated[Optional[StrictStr], Field(description="A comma-separated list of spaces to query. Supported values are `drive`, `appDataFolder` and `photos`.")] = None,
        start_change_id: Annotated[Optional[StrictStr], Field(description="Deprecated: Use `pageToken` instead.")] = None,
        supports_all_drives: Annotated[Optional[StrictBool], Field(description="Whether the requesting application supports both My Drives and shared drives.")] = None,
        supports_team_drives: Annotated[Optional[StrictBool], Field(description="Deprecated: Use `supportsAllDrives` instead.")] = None,
        team_drive_id: Annotated[Optional[StrictStr], Field(description="Deprecated: Use `driveId` instead.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ChangeList:
        """drive_changes_list

        Lists the changes for a user or shared drive.

        :param xgafv: V1 error format.
        :type xgafv: str
        :param access_token: OAuth access token.
        :type access_token: str
        :param alt: Data format for response.
        :type alt: str
        :param param_callback: JSONP
        :type param_callback: str
        :param fields: Selector specifying which fields to include in a partial response.
        :type fields: str
        :param key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
        :type key: str
        :param oauth_token: OAuth 2.0 token for the current user.
        :type oauth_token: str
        :param pretty_print: Returns response with indentations and line breaks.
        :type pretty_print: bool
        :param quota_user: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
        :type quota_user: str
        :param upload_protocol: Upload protocol for media (e.g. \"raw\", \"multipart\").
        :type upload_protocol: str
        :param upload_type: Legacy upload protocol for media (e.g. \"media\", \"multipart\").
        :type upload_type: str
        :param drive_id: The shared drive from which changes will be returned. If specified the change IDs will be reflective of the shared drive; use the combined drive ID and change ID as an identifier.
        :type drive_id: str
        :param include_corpus_removals: Whether changes should include the file resource if the file is still accessible by the user at the time of the request, even when a file was removed from the list of changes and there will be no further change entries for this file.
        :type include_corpus_removals: bool
        :param include_deleted: Whether to include changes indicating that items have been removed from the list of changes, for example by deletion or loss of access.
        :type include_deleted: bool
        :param include_items_from_all_drives: Whether both My Drive and shared drive items should be included in results.
        :type include_items_from_all_drives: bool
        :param include_labels: A comma-separated list of IDs of labels to include in the `labelInfo` part of the response.
        :type include_labels: str
        :param include_permissions_for_view: Specifies which additional view's permissions to include in the response. Only `published` is supported.
        :type include_permissions_for_view: str
        :param include_subscribed: Whether to include changes outside the My Drive hierarchy in the result. When set to false, changes to files such as those in the Application Data folder or shared files which have not been added to My Drive will be omitted from the result.
        :type include_subscribed: bool
        :param include_team_drive_items: Deprecated: Use `includeItemsFromAllDrives` instead.
        :type include_team_drive_items: bool
        :param max_results: Maximum number of changes to return.
        :type max_results: int
        :param page_token: The token for continuing a previous list request on the next page. This should be set to the value of `nextPageToken` from the previous response or to the response from the getStartPageToken method.
        :type page_token: str
        :param spaces: A comma-separated list of spaces to query. Supported values are `drive`, `appDataFolder` and `photos`.
        :type spaces: str
        :param start_change_id: Deprecated: Use `pageToken` instead.
        :type start_change_id: str
        :param supports_all_drives: Whether the requesting application supports both My Drives and shared drives.
        :type supports_all_drives: bool
        :param supports_team_drives: Deprecated: Use `supportsAllDrives` instead.
        :type supports_team_drives: bool
        :param team_drive_id: Deprecated: Use `driveId` instead.
        :type team_drive_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._drive_changes_list_serialize(
            xgafv=xgafv,
            access_token=access_token,
            alt=alt,
            param_callback=param_callback,
            fields=fields,
            key=key,
            oauth_token=oauth_token,
            pretty_print=pretty_print,
            quota_user=quota_user,
            upload_protocol=upload_protocol,
            upload_type=upload_type,
            drive_id=drive_id,
            include_corpus_removals=include_corpus_removals,
            include_deleted=include_deleted,
            include_items_from_all_drives=include_items_from_all_drives,
            include_labels=include_labels,
            include_permissions_for_view=include_permissions_for_view,
            include_subscribed=include_subscribed,
            include_team_drive_items=include_team_drive_items,
            max_results=max_results,
            page_token=page_token,
            spaces=spaces,
            start_change_id=start_change_id,
            supports_all_drives=supports_all_drives,
            supports_team_drives=supports_team_drives,
            team_drive_id=team_drive_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ChangeList",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def drive_changes_list_with_http_info(
        self,
        xgafv: Annotated[Optional[StrictStr], Field(description="V1 error format.")] = None,
        access_token: Annotated[Optional[StrictStr], Field(description="OAuth access token.")] = None,
        alt: Annotated[Optional[StrictStr], Field(description="Data format for response.")] = None,
        param_callback: Annotated[Optional[StrictStr], Field(description="JSONP")] = None,
        fields: Annotated[Optional[StrictStr], Field(description="Selector specifying which fields to include in a partial response.")] = None,
        key: Annotated[Optional[StrictStr], Field(description="API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.")] = None,
        oauth_token: Annotated[Optional[StrictStr], Field(description="OAuth 2.0 token for the current user.")] = None,
        pretty_print: Annotated[Optional[StrictBool], Field(description="Returns response with indentations and line breaks.")] = None,
        quota_user: Annotated[Optional[StrictStr], Field(description="Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.")] = None,
        upload_protocol: Annotated[Optional[StrictStr], Field(description="Upload protocol for media (e.g. \"raw\", \"multipart\").")] = None,
        upload_type: Annotated[Optional[StrictStr], Field(description="Legacy upload protocol for media (e.g. \"media\", \"multipart\").")] = None,
        drive_id: Annotated[Optional[StrictStr], Field(description="The shared drive from which changes will be returned. If specified the change IDs will be reflective of the shared drive; use the combined drive ID and change ID as an identifier.")] = None,
        include_corpus_removals: Annotated[Optional[StrictBool], Field(description="Whether changes should include the file resource if the file is still accessible by the user at the time of the request, even when a file was removed from the list of changes and there will be no further change entries for this file.")] = None,
        include_deleted: Annotated[Optional[StrictBool], Field(description="Whether to include changes indicating that items have been removed from the list of changes, for example by deletion or loss of access.")] = None,
        include_items_from_all_drives: Annotated[Optional[StrictBool], Field(description="Whether both My Drive and shared drive items should be included in results.")] = None,
        include_labels: Annotated[Optional[StrictStr], Field(description="A comma-separated list of IDs of labels to include in the `labelInfo` part of the response.")] = None,
        include_permissions_for_view: Annotated[Optional[StrictStr], Field(description="Specifies which additional view's permissions to include in the response. Only `published` is supported.")] = None,
        include_subscribed: Annotated[Optional[StrictBool], Field(description="Whether to include changes outside the My Drive hierarchy in the result. When set to false, changes to files such as those in the Application Data folder or shared files which have not been added to My Drive will be omitted from the result.")] = None,
        include_team_drive_items: Annotated[Optional[StrictBool], Field(description="Deprecated: Use `includeItemsFromAllDrives` instead.")] = None,
        max_results: Annotated[Optional[Annotated[int, Field(strict=True, ge=1)]], Field(description="Maximum number of changes to return.")] = None,
        page_token: Annotated[Optional[StrictStr], Field(description="The token for continuing a previous list request on the next page. This should be set to the value of `nextPageToken` from the previous response or to the response from the getStartPageToken method.")] = None,
        spaces: Annotated[Optional[StrictStr], Field(description="A comma-separated list of spaces to query. Supported values are `drive`, `appDataFolder` and `photos`.")] = None,
        start_change_id: Annotated[Optional[StrictStr], Field(description="Deprecated: Use `pageToken` instead.")] = None,
        supports_all_drives: Annotated[Optional[StrictBool], Field(description="Whether the requesting application supports both My Drives and shared drives.")] = None,
        supports_team_drives: Annotated[Optional[StrictBool], Field(description="Deprecated: Use `supportsAllDrives` instead.")] = None,
        team_drive_id: Annotated[Optional[StrictStr], Field(description="Deprecated: Use `driveId` instead.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[ChangeList]:
        """drive_changes_list

        Lists the changes for a user or shared drive.

        :param xgafv: V1 error format.
        :type xgafv: str
        :param access_token: OAuth access token.
        :type access_token: str
        :param alt: Data format for response.
        :type alt: str
        :param param_callback: JSONP
        :type param_callback: str
        :param fields: Selector specifying which fields to include in a partial response.
        :type fields: str
        :param key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
        :type key: str
        :param oauth_token: OAuth 2.0 token for the current user.
        :type oauth_token: str
        :param pretty_print: Returns response with indentations and line breaks.
        :type pretty_print: bool
        :param quota_user: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
        :type quota_user: str
        :param upload_protocol: Upload protocol for media (e.g. \"raw\", \"multipart\").
        :type upload_protocol: str
        :param upload_type: Legacy upload protocol for media (e.g. \"media\", \"multipart\").
        :type upload_type: str
        :param drive_id: The shared drive from which changes will be returned. If specified the change IDs will be reflective of the shared drive; use the combined drive ID and change ID as an identifier.
        :type drive_id: str
        :param include_corpus_removals: Whether changes should include the file resource if the file is still accessible by the user at the time of the request, even when a file was removed from the list of changes and there will be no further change entries for this file.
        :type include_corpus_removals: bool
        :param include_deleted: Whether to include changes indicating that items have been removed from the list of changes, for example by deletion or loss of access.
        :type include_deleted: bool
        :param include_items_from_all_drives: Whether both My Drive and shared drive items should be included in results.
        :type include_items_from_all_drives: bool
        :param include_labels: A comma-separated list of IDs of labels to include in the `labelInfo` part of the response.
        :type include_labels: str
        :param include_permissions_for_view: Specifies which additional view's permissions to include in the response. Only `published` is supported.
        :type include_permissions_for_view: str
        :param include_subscribed: Whether to include changes outside the My Drive hierarchy in the result. When set to false, changes to files such as those in the Application Data folder or shared files which have not been added to My Drive will be omitted from the result.
        :type include_subscribed: bool
        :param include_team_drive_items: Deprecated: Use `includeItemsFromAllDrives` instead.
        :type include_team_drive_items: bool
        :param max_results: Maximum number of changes to return.
        :type max_results: int
        :param page_token: The token for continuing a previous list request on the next page. This should be set to the value of `nextPageToken` from the previous response or to the response from the getStartPageToken method.
        :type page_token: str
        :param spaces: A comma-separated list of spaces to query. Supported values are `drive`, `appDataFolder` and `photos`.
        :type spaces: str
        :param start_change_id: Deprecated: Use `pageToken` instead.
        :type start_change_id: str
        :param supports_all_drives: Whether the requesting application supports both My Drives and shared drives.
        :type supports_all_drives: bool
        :param supports_team_drives: Deprecated: Use `supportsAllDrives` instead.
        :type supports_team_drives: bool
        :param team_drive_id: Deprecated: Use `driveId` instead.
        :type team_drive_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._drive_changes_list_serialize(
            xgafv=xgafv,
            access_token=access_token,
            alt=alt,
            param_callback=param_callback,
            fields=fields,
            key=key,
            oauth_token=oauth_token,
            pretty_print=pretty_print,
            quota_user=quota_user,
            upload_protocol=upload_protocol,
            upload_type=upload_type,
            drive_id=drive_id,
            include_corpus_removals=include_corpus_removals,
            include_deleted=include_deleted,
            include_items_from_all_drives=include_items_from_all_drives,
            include_labels=include_labels,
            include_permissions_for_view=include_permissions_for_view,
            include_subscribed=include_subscribed,
            include_team_drive_items=include_team_drive_items,
            max_results=max_results,
            page_token=page_token,
            spaces=spaces,
            start_change_id=start_change_id,
            supports_all_drives=supports_all_drives,
            supports_team_drives=supports_team_drives,
            team_drive_id=team_drive_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ChangeList",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def drive_changes_list_without_preload_content(
        self,
        xgafv: Annotated[Optional[StrictStr], Field(description="V1 error format.")] = None,
        access_token: Annotated[Optional[StrictStr], Field(description="OAuth access token.")] = None,
        alt: Annotated[Optional[StrictStr], Field(description="Data format for response.")] = None,
        param_callback: Annotated[Optional[StrictStr], Field(description="JSONP")] = None,
        fields: Annotated[Optional[StrictStr], Field(description="Selector specifying which fields to include in a partial response.")] = None,
        key: Annotated[Optional[StrictStr], Field(description="API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.")] = None,
        oauth_token: Annotated[Optional[StrictStr], Field(description="OAuth 2.0 token for the current user.")] = None,
        pretty_print: Annotated[Optional[StrictBool], Field(description="Returns response with indentations and line breaks.")] = None,
        quota_user: Annotated[Optional[StrictStr], Field(description="Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.")] = None,
        upload_protocol: Annotated[Optional[StrictStr], Field(description="Upload protocol for media (e.g. \"raw\", \"multipart\").")] = None,
        upload_type: Annotated[Optional[StrictStr], Field(description="Legacy upload protocol for media (e.g. \"media\", \"multipart\").")] = None,
        drive_id: Annotated[Optional[StrictStr], Field(description="The shared drive from which changes will be returned. If specified the change IDs will be reflective of the shared drive; use the combined drive ID and change ID as an identifier.")] = None,
        include_corpus_removals: Annotated[Optional[StrictBool], Field(description="Whether changes should include the file resource if the file is still accessible by the user at the time of the request, even when a file was removed from the list of changes and there will be no further change entries for this file.")] = None,
        include_deleted: Annotated[Optional[StrictBool], Field(description="Whether to include changes indicating that items have been removed from the list of changes, for example by deletion or loss of access.")] = None,
        include_items_from_all_drives: Annotated[Optional[StrictBool], Field(description="Whether both My Drive and shared drive items should be included in results.")] = None,
        include_labels: Annotated[Optional[StrictStr], Field(description="A comma-separated list of IDs of labels to include in the `labelInfo` part of the response.")] = None,
        include_permissions_for_view: Annotated[Optional[StrictStr], Field(description="Specifies which additional view's permissions to include in the response. Only `published` is supported.")] = None,
        include_subscribed: Annotated[Optional[StrictBool], Field(description="Whether to include changes outside the My Drive hierarchy in the result. When set to false, changes to files such as those in the Application Data folder or shared files which have not been added to My Drive will be omitted from the result.")] = None,
        include_team_drive_items: Annotated[Optional[StrictBool], Field(description="Deprecated: Use `includeItemsFromAllDrives` instead.")] = None,
        max_results: Annotated[Optional[Annotated[int, Field(strict=True, ge=1)]], Field(description="Maximum number of changes to return.")] = None,
        page_token: Annotated[Optional[StrictStr], Field(description="The token for continuing a previous list request on the next page. This should be set to the value of `nextPageToken` from the previous response or to the response from the getStartPageToken method.")] = None,
        spaces: Annotated[Optional[StrictStr], Field(description="A comma-separated list of spaces to query. Supported values are `drive`, `appDataFolder` and `photos`.")] = None,
        start_change_id: Annotated[Optional[StrictStr], Field(description="Deprecated: Use `pageToken` instead.")] = None,
        supports_all_drives: Annotated[Optional[StrictBool], Field(description="Whether the requesting application supports both My Drives and shared drives.")] = None,
        supports_team_drives: Annotated[Optional[StrictBool], Field(description="Deprecated: Use `supportsAllDrives` instead.")] = None,
        team_drive_id: Annotated[Optional[StrictStr], Field(description="Deprecated: Use `driveId` instead.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """drive_changes_list

        Lists the changes for a user or shared drive.

        :param xgafv: V1 error format.
        :type xgafv: str
        :param access_token: OAuth access token.
        :type access_token: str
        :param alt: Data format for response.
        :type alt: str
        :param param_callback: JSONP
        :type param_callback: str
        :param fields: Selector specifying which fields to include in a partial response.
        :type fields: str
        :param key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
        :type key: str
        :param oauth_token: OAuth 2.0 token for the current user.
        :type oauth_token: str
        :param pretty_print: Returns response with indentations and line breaks.
        :type pretty_print: bool
        :param quota_user: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
        :type quota_user: str
        :param upload_protocol: Upload protocol for media (e.g. \"raw\", \"multipart\").
        :type upload_protocol: str
        :param upload_type: Legacy upload protocol for media (e.g. \"media\", \"multipart\").
        :type upload_type: str
        :param drive_id: The shared drive from which changes will be returned. If specified the change IDs will be reflective of the shared drive; use the combined drive ID and change ID as an identifier.
        :type drive_id: str
        :param include_corpus_removals: Whether changes should include the file resource if the file is still accessible by the user at the time of the request, even when a file was removed from the list of changes and there will be no further change entries for this file.
        :type include_corpus_removals: bool
        :param include_deleted: Whether to include changes indicating that items have been removed from the list of changes, for example by deletion or loss of access.
        :type include_deleted: bool
        :param include_items_from_all_drives: Whether both My Drive and shared drive items should be included in results.
        :type include_items_from_all_drives: bool
        :param include_labels: A comma-separated list of IDs of labels to include in the `labelInfo` part of the response.
        :type include_labels: str
        :param include_permissions_for_view: Specifies which additional view's permissions to include in the response. Only `published` is supported.
        :type include_permissions_for_view: str
        :param include_subscribed: Whether to include changes outside the My Drive hierarchy in the result. When set to false, changes to files such as those in the Application Data folder or shared files which have not been added to My Drive will be omitted from the result.
        :type include_subscribed: bool
        :param include_team_drive_items: Deprecated: Use `includeItemsFromAllDrives` instead.
        :type include_team_drive_items: bool
        :param max_results: Maximum number of changes to return.
        :type max_results: int
        :param page_token: The token for continuing a previous list request on the next page. This should be set to the value of `nextPageToken` from the previous response or to the response from the getStartPageToken method.
        :type page_token: str
        :param spaces: A comma-separated list of spaces to query. Supported values are `drive`, `appDataFolder` and `photos`.
        :type spaces: str
        :param start_change_id: Deprecated: Use `pageToken` instead.
        :type start_change_id: str
        :param supports_all_drives: Whether the requesting application supports both My Drives and shared drives.
        :type supports_all_drives: bool
        :param supports_team_drives: Deprecated: Use `supportsAllDrives` instead.
        :type supports_team_drives: bool
        :param team_drive_id: Deprecated: Use `driveId` instead.
        :type team_drive_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._drive_changes_list_serialize(
            xgafv=xgafv,
            access_token=access_token,
            alt=alt,
            param_callback=param_callback,
            fields=fields,
            key=key,
            oauth_token=oauth_token,
            pretty_print=pretty_print,
            quota_user=quota_user,
            upload_protocol=upload_protocol,
            upload_type=upload_type,
            drive_id=drive_id,
            include_corpus_removals=include_corpus_removals,
            include_deleted=include_deleted,
            include_items_from_all_drives=include_items_from_all_drives,
            include_labels=include_labels,
            include_permissions_for_view=include_permissions_for_view,
            include_subscribed=include_subscribed,
            include_team_drive_items=include_team_drive_items,
            max_results=max_results,
            page_token=page_token,
            spaces=spaces,
            start_change_id=start_change_id,
            supports_all_drives=supports_all_drives,
            supports_team_drives=supports_team_drives,
            team_drive_id=team_drive_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ChangeList",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _drive_changes_list_serialize(
        self,
        xgafv,
        access_token,
        alt,
        param_callback,
        fields,
        key,
        oauth_token,
        pretty_print,
        quota_user,
        upload_protocol,
        upload_type,
        drive_id,
        include_corpus_removals,
        include_deleted,
        include_items_from_all_drives,
        include_labels,
        include_permissions_for_view,
        include_subscribed,
        include_team_drive_items,
        max_results,
        page_token,
        spaces,
        start_change_id,
        supports_all_drives,
        supports_team_drives,
        team_drive_id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if xgafv is not None:
            
            _query_params.append(('$.xgafv', xgafv))
            
        if access_token is not None:
            
            _query_params.append(('access_token', access_token))
            
        if alt is not None:
            
            _query_params.append(('alt', alt))
            
        if param_callback is not None:
            
            _query_params.append(('callback', param_callback))
            
        if fields is not None:
            
            _query_params.append(('fields', fields))
            
        if key is not None:
            
            _query_params.append(('key', key))
            
        if oauth_token is not None:
            
            _query_params.append(('oauth_token', oauth_token))
            
        if pretty_print is not None:
            
            _query_params.append(('prettyPrint', pretty_print))
            
        if quota_user is not None:
            
            _query_params.append(('quotaUser', quota_user))
            
        if upload_protocol is not None:
            
            _query_params.append(('upload_protocol', upload_protocol))
            
        if upload_type is not None:
            
            _query_params.append(('uploadType', upload_type))
            
        if drive_id is not None:
            
            _query_params.append(('driveId', drive_id))
            
        if include_corpus_removals is not None:
            
            _query_params.append(('includeCorpusRemovals', include_corpus_removals))
            
        if include_deleted is not None:
            
            _query_params.append(('includeDeleted', include_deleted))
            
        if include_items_from_all_drives is not None:
            
            _query_params.append(('includeItemsFromAllDrives', include_items_from_all_drives))
            
        if include_labels is not None:
            
            _query_params.append(('includeLabels', include_labels))
            
        if include_permissions_for_view is not None:
            
            _query_params.append(('includePermissionsForView', include_permissions_for_view))
            
        if include_subscribed is not None:
            
            _query_params.append(('includeSubscribed', include_subscribed))
            
        if include_team_drive_items is not None:
            
            _query_params.append(('includeTeamDriveItems', include_team_drive_items))
            
        if max_results is not None:
            
            _query_params.append(('maxResults', max_results))
            
        if page_token is not None:
            
            _query_params.append(('pageToken', page_token))
            
        if spaces is not None:
            
            _query_params.append(('spaces', spaces))
            
        if start_change_id is not None:
            
            _query_params.append(('startChangeId', start_change_id))
            
        if supports_all_drives is not None:
            
            _query_params.append(('supportsAllDrives', supports_all_drives))
            
        if supports_team_drives is not None:
            
            _query_params.append(('supportsTeamDrives', supports_team_drives))
            
        if team_drive_id is not None:
            
            _query_params.append(('teamDriveId', team_drive_id))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'Oauth2c', 
            'Oauth2'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/changes',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def drive_changes_watch(
        self,
        xgafv: Annotated[Optional[StrictStr], Field(description="V1 error format.")] = None,
        access_token: Annotated[Optional[StrictStr], Field(description="OAuth access token.")] = None,
        alt: Annotated[Optional[StrictStr], Field(description="Data format for response.")] = None,
        param_callback: Annotated[Optional[StrictStr], Field(description="JSONP")] = None,
        fields: Annotated[Optional[StrictStr], Field(description="Selector specifying which fields to include in a partial response.")] = None,
        key: Annotated[Optional[StrictStr], Field(description="API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.")] = None,
        oauth_token: Annotated[Optional[StrictStr], Field(description="OAuth 2.0 token for the current user.")] = None,
        pretty_print: Annotated[Optional[StrictBool], Field(description="Returns response with indentations and line breaks.")] = None,
        quota_user: Annotated[Optional[StrictStr], Field(description="Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.")] = None,
        upload_protocol: Annotated[Optional[StrictStr], Field(description="Upload protocol for media (e.g. \"raw\", \"multipart\").")] = None,
        upload_type: Annotated[Optional[StrictStr], Field(description="Legacy upload protocol for media (e.g. \"media\", \"multipart\").")] = None,
        drive_id: Annotated[Optional[StrictStr], Field(description="The shared drive from which changes will be returned. If specified the change IDs will be reflective of the shared drive; use the combined drive ID and change ID as an identifier.")] = None,
        include_corpus_removals: Annotated[Optional[StrictBool], Field(description="Whether changes should include the file resource if the file is still accessible by the user at the time of the request, even when a file was removed from the list of changes and there will be no further change entries for this file.")] = None,
        include_deleted: Annotated[Optional[StrictBool], Field(description="Whether to include changes indicating that items have been removed from the list of changes, for example by deletion or loss of access.")] = None,
        include_items_from_all_drives: Annotated[Optional[StrictBool], Field(description="Whether both My Drive and shared drive items should be included in results.")] = None,
        include_labels: Annotated[Optional[StrictStr], Field(description="A comma-separated list of IDs of labels to include in the `labelInfo` part of the response.")] = None,
        include_permissions_for_view: Annotated[Optional[StrictStr], Field(description="Specifies which additional view's permissions to include in the response. Only `published` is supported.")] = None,
        include_subscribed: Annotated[Optional[StrictBool], Field(description="Whether to include changes outside the My Drive hierarchy in the result. When set to false, changes to files such as those in the Application Data folder or shared files which have not been added to My Drive will be omitted from the result.")] = None,
        include_team_drive_items: Annotated[Optional[StrictBool], Field(description="Deprecated: Use `includeItemsFromAllDrives` instead.")] = None,
        max_results: Annotated[Optional[Annotated[int, Field(strict=True, ge=1)]], Field(description="Maximum number of changes to return.")] = None,
        page_token: Annotated[Optional[StrictStr], Field(description="The token for continuing a previous list request on the next page. This should be set to the value of `nextPageToken` from the previous response or to the response from the getStartPageToken method.")] = None,
        spaces: Annotated[Optional[StrictStr], Field(description="A comma-separated list of spaces to query. Supported values are `drive`, `appDataFolder` and `photos`.")] = None,
        start_change_id: Annotated[Optional[StrictStr], Field(description="Deprecated: Use `pageToken` instead.")] = None,
        supports_all_drives: Annotated[Optional[StrictBool], Field(description="Whether the requesting application supports both My Drives and shared drives.")] = None,
        supports_team_drives: Annotated[Optional[StrictBool], Field(description="Deprecated: Use `supportsAllDrives` instead.")] = None,
        team_drive_id: Annotated[Optional[StrictStr], Field(description="Deprecated: Use `driveId` instead.")] = None,
        channel: Optional[Channel] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> Channel:
        """drive_changes_watch

        Subscribe to changes for a user.

        :param xgafv: V1 error format.
        :type xgafv: str
        :param access_token: OAuth access token.
        :type access_token: str
        :param alt: Data format for response.
        :type alt: str
        :param param_callback: JSONP
        :type param_callback: str
        :param fields: Selector specifying which fields to include in a partial response.
        :type fields: str
        :param key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
        :type key: str
        :param oauth_token: OAuth 2.0 token for the current user.
        :type oauth_token: str
        :param pretty_print: Returns response with indentations and line breaks.
        :type pretty_print: bool
        :param quota_user: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
        :type quota_user: str
        :param upload_protocol: Upload protocol for media (e.g. \"raw\", \"multipart\").
        :type upload_protocol: str
        :param upload_type: Legacy upload protocol for media (e.g. \"media\", \"multipart\").
        :type upload_type: str
        :param drive_id: The shared drive from which changes will be returned. If specified the change IDs will be reflective of the shared drive; use the combined drive ID and change ID as an identifier.
        :type drive_id: str
        :param include_corpus_removals: Whether changes should include the file resource if the file is still accessible by the user at the time of the request, even when a file was removed from the list of changes and there will be no further change entries for this file.
        :type include_corpus_removals: bool
        :param include_deleted: Whether to include changes indicating that items have been removed from the list of changes, for example by deletion or loss of access.
        :type include_deleted: bool
        :param include_items_from_all_drives: Whether both My Drive and shared drive items should be included in results.
        :type include_items_from_all_drives: bool
        :param include_labels: A comma-separated list of IDs of labels to include in the `labelInfo` part of the response.
        :type include_labels: str
        :param include_permissions_for_view: Specifies which additional view's permissions to include in the response. Only `published` is supported.
        :type include_permissions_for_view: str
        :param include_subscribed: Whether to include changes outside the My Drive hierarchy in the result. When set to false, changes to files such as those in the Application Data folder or shared files which have not been added to My Drive will be omitted from the result.
        :type include_subscribed: bool
        :param include_team_drive_items: Deprecated: Use `includeItemsFromAllDrives` instead.
        :type include_team_drive_items: bool
        :param max_results: Maximum number of changes to return.
        :type max_results: int
        :param page_token: The token for continuing a previous list request on the next page. This should be set to the value of `nextPageToken` from the previous response or to the response from the getStartPageToken method.
        :type page_token: str
        :param spaces: A comma-separated list of spaces to query. Supported values are `drive`, `appDataFolder` and `photos`.
        :type spaces: str
        :param start_change_id: Deprecated: Use `pageToken` instead.
        :type start_change_id: str
        :param supports_all_drives: Whether the requesting application supports both My Drives and shared drives.
        :type supports_all_drives: bool
        :param supports_team_drives: Deprecated: Use `supportsAllDrives` instead.
        :type supports_team_drives: bool
        :param team_drive_id: Deprecated: Use `driveId` instead.
        :type team_drive_id: str
        :param channel:
        :type channel: Channel
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._drive_changes_watch_serialize(
            xgafv=xgafv,
            access_token=access_token,
            alt=alt,
            param_callback=param_callback,
            fields=fields,
            key=key,
            oauth_token=oauth_token,
            pretty_print=pretty_print,
            quota_user=quota_user,
            upload_protocol=upload_protocol,
            upload_type=upload_type,
            drive_id=drive_id,
            include_corpus_removals=include_corpus_removals,
            include_deleted=include_deleted,
            include_items_from_all_drives=include_items_from_all_drives,
            include_labels=include_labels,
            include_permissions_for_view=include_permissions_for_view,
            include_subscribed=include_subscribed,
            include_team_drive_items=include_team_drive_items,
            max_results=max_results,
            page_token=page_token,
            spaces=spaces,
            start_change_id=start_change_id,
            supports_all_drives=supports_all_drives,
            supports_team_drives=supports_team_drives,
            team_drive_id=team_drive_id,
            channel=channel,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Channel",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def drive_changes_watch_with_http_info(
        self,
        xgafv: Annotated[Optional[StrictStr], Field(description="V1 error format.")] = None,
        access_token: Annotated[Optional[StrictStr], Field(description="OAuth access token.")] = None,
        alt: Annotated[Optional[StrictStr], Field(description="Data format for response.")] = None,
        param_callback: Annotated[Optional[StrictStr], Field(description="JSONP")] = None,
        fields: Annotated[Optional[StrictStr], Field(description="Selector specifying which fields to include in a partial response.")] = None,
        key: Annotated[Optional[StrictStr], Field(description="API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.")] = None,
        oauth_token: Annotated[Optional[StrictStr], Field(description="OAuth 2.0 token for the current user.")] = None,
        pretty_print: Annotated[Optional[StrictBool], Field(description="Returns response with indentations and line breaks.")] = None,
        quota_user: Annotated[Optional[StrictStr], Field(description="Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.")] = None,
        upload_protocol: Annotated[Optional[StrictStr], Field(description="Upload protocol for media (e.g. \"raw\", \"multipart\").")] = None,
        upload_type: Annotated[Optional[StrictStr], Field(description="Legacy upload protocol for media (e.g. \"media\", \"multipart\").")] = None,
        drive_id: Annotated[Optional[StrictStr], Field(description="The shared drive from which changes will be returned. If specified the change IDs will be reflective of the shared drive; use the combined drive ID and change ID as an identifier.")] = None,
        include_corpus_removals: Annotated[Optional[StrictBool], Field(description="Whether changes should include the file resource if the file is still accessible by the user at the time of the request, even when a file was removed from the list of changes and there will be no further change entries for this file.")] = None,
        include_deleted: Annotated[Optional[StrictBool], Field(description="Whether to include changes indicating that items have been removed from the list of changes, for example by deletion or loss of access.")] = None,
        include_items_from_all_drives: Annotated[Optional[StrictBool], Field(description="Whether both My Drive and shared drive items should be included in results.")] = None,
        include_labels: Annotated[Optional[StrictStr], Field(description="A comma-separated list of IDs of labels to include in the `labelInfo` part of the response.")] = None,
        include_permissions_for_view: Annotated[Optional[StrictStr], Field(description="Specifies which additional view's permissions to include in the response. Only `published` is supported.")] = None,
        include_subscribed: Annotated[Optional[StrictBool], Field(description="Whether to include changes outside the My Drive hierarchy in the result. When set to false, changes to files such as those in the Application Data folder or shared files which have not been added to My Drive will be omitted from the result.")] = None,
        include_team_drive_items: Annotated[Optional[StrictBool], Field(description="Deprecated: Use `includeItemsFromAllDrives` instead.")] = None,
        max_results: Annotated[Optional[Annotated[int, Field(strict=True, ge=1)]], Field(description="Maximum number of changes to return.")] = None,
        page_token: Annotated[Optional[StrictStr], Field(description="The token for continuing a previous list request on the next page. This should be set to the value of `nextPageToken` from the previous response or to the response from the getStartPageToken method.")] = None,
        spaces: Annotated[Optional[StrictStr], Field(description="A comma-separated list of spaces to query. Supported values are `drive`, `appDataFolder` and `photos`.")] = None,
        start_change_id: Annotated[Optional[StrictStr], Field(description="Deprecated: Use `pageToken` instead.")] = None,
        supports_all_drives: Annotated[Optional[StrictBool], Field(description="Whether the requesting application supports both My Drives and shared drives.")] = None,
        supports_team_drives: Annotated[Optional[StrictBool], Field(description="Deprecated: Use `supportsAllDrives` instead.")] = None,
        team_drive_id: Annotated[Optional[StrictStr], Field(description="Deprecated: Use `driveId` instead.")] = None,
        channel: Optional[Channel] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[Channel]:
        """drive_changes_watch

        Subscribe to changes for a user.

        :param xgafv: V1 error format.
        :type xgafv: str
        :param access_token: OAuth access token.
        :type access_token: str
        :param alt: Data format for response.
        :type alt: str
        :param param_callback: JSONP
        :type param_callback: str
        :param fields: Selector specifying which fields to include in a partial response.
        :type fields: str
        :param key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
        :type key: str
        :param oauth_token: OAuth 2.0 token for the current user.
        :type oauth_token: str
        :param pretty_print: Returns response with indentations and line breaks.
        :type pretty_print: bool
        :param quota_user: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
        :type quota_user: str
        :param upload_protocol: Upload protocol for media (e.g. \"raw\", \"multipart\").
        :type upload_protocol: str
        :param upload_type: Legacy upload protocol for media (e.g. \"media\", \"multipart\").
        :type upload_type: str
        :param drive_id: The shared drive from which changes will be returned. If specified the change IDs will be reflective of the shared drive; use the combined drive ID and change ID as an identifier.
        :type drive_id: str
        :param include_corpus_removals: Whether changes should include the file resource if the file is still accessible by the user at the time of the request, even when a file was removed from the list of changes and there will be no further change entries for this file.
        :type include_corpus_removals: bool
        :param include_deleted: Whether to include changes indicating that items have been removed from the list of changes, for example by deletion or loss of access.
        :type include_deleted: bool
        :param include_items_from_all_drives: Whether both My Drive and shared drive items should be included in results.
        :type include_items_from_all_drives: bool
        :param include_labels: A comma-separated list of IDs of labels to include in the `labelInfo` part of the response.
        :type include_labels: str
        :param include_permissions_for_view: Specifies which additional view's permissions to include in the response. Only `published` is supported.
        :type include_permissions_for_view: str
        :param include_subscribed: Whether to include changes outside the My Drive hierarchy in the result. When set to false, changes to files such as those in the Application Data folder or shared files which have not been added to My Drive will be omitted from the result.
        :type include_subscribed: bool
        :param include_team_drive_items: Deprecated: Use `includeItemsFromAllDrives` instead.
        :type include_team_drive_items: bool
        :param max_results: Maximum number of changes to return.
        :type max_results: int
        :param page_token: The token for continuing a previous list request on the next page. This should be set to the value of `nextPageToken` from the previous response or to the response from the getStartPageToken method.
        :type page_token: str
        :param spaces: A comma-separated list of spaces to query. Supported values are `drive`, `appDataFolder` and `photos`.
        :type spaces: str
        :param start_change_id: Deprecated: Use `pageToken` instead.
        :type start_change_id: str
        :param supports_all_drives: Whether the requesting application supports both My Drives and shared drives.
        :type supports_all_drives: bool
        :param supports_team_drives: Deprecated: Use `supportsAllDrives` instead.
        :type supports_team_drives: bool
        :param team_drive_id: Deprecated: Use `driveId` instead.
        :type team_drive_id: str
        :param channel:
        :type channel: Channel
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._drive_changes_watch_serialize(
            xgafv=xgafv,
            access_token=access_token,
            alt=alt,
            param_callback=param_callback,
            fields=fields,
            key=key,
            oauth_token=oauth_token,
            pretty_print=pretty_print,
            quota_user=quota_user,
            upload_protocol=upload_protocol,
            upload_type=upload_type,
            drive_id=drive_id,
            include_corpus_removals=include_corpus_removals,
            include_deleted=include_deleted,
            include_items_from_all_drives=include_items_from_all_drives,
            include_labels=include_labels,
            include_permissions_for_view=include_permissions_for_view,
            include_subscribed=include_subscribed,
            include_team_drive_items=include_team_drive_items,
            max_results=max_results,
            page_token=page_token,
            spaces=spaces,
            start_change_id=start_change_id,
            supports_all_drives=supports_all_drives,
            supports_team_drives=supports_team_drives,
            team_drive_id=team_drive_id,
            channel=channel,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Channel",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def drive_changes_watch_without_preload_content(
        self,
        xgafv: Annotated[Optional[StrictStr], Field(description="V1 error format.")] = None,
        access_token: Annotated[Optional[StrictStr], Field(description="OAuth access token.")] = None,
        alt: Annotated[Optional[StrictStr], Field(description="Data format for response.")] = None,
        param_callback: Annotated[Optional[StrictStr], Field(description="JSONP")] = None,
        fields: Annotated[Optional[StrictStr], Field(description="Selector specifying which fields to include in a partial response.")] = None,
        key: Annotated[Optional[StrictStr], Field(description="API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.")] = None,
        oauth_token: Annotated[Optional[StrictStr], Field(description="OAuth 2.0 token for the current user.")] = None,
        pretty_print: Annotated[Optional[StrictBool], Field(description="Returns response with indentations and line breaks.")] = None,
        quota_user: Annotated[Optional[StrictStr], Field(description="Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.")] = None,
        upload_protocol: Annotated[Optional[StrictStr], Field(description="Upload protocol for media (e.g. \"raw\", \"multipart\").")] = None,
        upload_type: Annotated[Optional[StrictStr], Field(description="Legacy upload protocol for media (e.g. \"media\", \"multipart\").")] = None,
        drive_id: Annotated[Optional[StrictStr], Field(description="The shared drive from which changes will be returned. If specified the change IDs will be reflective of the shared drive; use the combined drive ID and change ID as an identifier.")] = None,
        include_corpus_removals: Annotated[Optional[StrictBool], Field(description="Whether changes should include the file resource if the file is still accessible by the user at the time of the request, even when a file was removed from the list of changes and there will be no further change entries for this file.")] = None,
        include_deleted: Annotated[Optional[StrictBool], Field(description="Whether to include changes indicating that items have been removed from the list of changes, for example by deletion or loss of access.")] = None,
        include_items_from_all_drives: Annotated[Optional[StrictBool], Field(description="Whether both My Drive and shared drive items should be included in results.")] = None,
        include_labels: Annotated[Optional[StrictStr], Field(description="A comma-separated list of IDs of labels to include in the `labelInfo` part of the response.")] = None,
        include_permissions_for_view: Annotated[Optional[StrictStr], Field(description="Specifies which additional view's permissions to include in the response. Only `published` is supported.")] = None,
        include_subscribed: Annotated[Optional[StrictBool], Field(description="Whether to include changes outside the My Drive hierarchy in the result. When set to false, changes to files such as those in the Application Data folder or shared files which have not been added to My Drive will be omitted from the result.")] = None,
        include_team_drive_items: Annotated[Optional[StrictBool], Field(description="Deprecated: Use `includeItemsFromAllDrives` instead.")] = None,
        max_results: Annotated[Optional[Annotated[int, Field(strict=True, ge=1)]], Field(description="Maximum number of changes to return.")] = None,
        page_token: Annotated[Optional[StrictStr], Field(description="The token for continuing a previous list request on the next page. This should be set to the value of `nextPageToken` from the previous response or to the response from the getStartPageToken method.")] = None,
        spaces: Annotated[Optional[StrictStr], Field(description="A comma-separated list of spaces to query. Supported values are `drive`, `appDataFolder` and `photos`.")] = None,
        start_change_id: Annotated[Optional[StrictStr], Field(description="Deprecated: Use `pageToken` instead.")] = None,
        supports_all_drives: Annotated[Optional[StrictBool], Field(description="Whether the requesting application supports both My Drives and shared drives.")] = None,
        supports_team_drives: Annotated[Optional[StrictBool], Field(description="Deprecated: Use `supportsAllDrives` instead.")] = None,
        team_drive_id: Annotated[Optional[StrictStr], Field(description="Deprecated: Use `driveId` instead.")] = None,
        channel: Optional[Channel] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """drive_changes_watch

        Subscribe to changes for a user.

        :param xgafv: V1 error format.
        :type xgafv: str
        :param access_token: OAuth access token.
        :type access_token: str
        :param alt: Data format for response.
        :type alt: str
        :param param_callback: JSONP
        :type param_callback: str
        :param fields: Selector specifying which fields to include in a partial response.
        :type fields: str
        :param key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
        :type key: str
        :param oauth_token: OAuth 2.0 token for the current user.
        :type oauth_token: str
        :param pretty_print: Returns response with indentations and line breaks.
        :type pretty_print: bool
        :param quota_user: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
        :type quota_user: str
        :param upload_protocol: Upload protocol for media (e.g. \"raw\", \"multipart\").
        :type upload_protocol: str
        :param upload_type: Legacy upload protocol for media (e.g. \"media\", \"multipart\").
        :type upload_type: str
        :param drive_id: The shared drive from which changes will be returned. If specified the change IDs will be reflective of the shared drive; use the combined drive ID and change ID as an identifier.
        :type drive_id: str
        :param include_corpus_removals: Whether changes should include the file resource if the file is still accessible by the user at the time of the request, even when a file was removed from the list of changes and there will be no further change entries for this file.
        :type include_corpus_removals: bool
        :param include_deleted: Whether to include changes indicating that items have been removed from the list of changes, for example by deletion or loss of access.
        :type include_deleted: bool
        :param include_items_from_all_drives: Whether both My Drive and shared drive items should be included in results.
        :type include_items_from_all_drives: bool
        :param include_labels: A comma-separated list of IDs of labels to include in the `labelInfo` part of the response.
        :type include_labels: str
        :param include_permissions_for_view: Specifies which additional view's permissions to include in the response. Only `published` is supported.
        :type include_permissions_for_view: str
        :param include_subscribed: Whether to include changes outside the My Drive hierarchy in the result. When set to false, changes to files such as those in the Application Data folder or shared files which have not been added to My Drive will be omitted from the result.
        :type include_subscribed: bool
        :param include_team_drive_items: Deprecated: Use `includeItemsFromAllDrives` instead.
        :type include_team_drive_items: bool
        :param max_results: Maximum number of changes to return.
        :type max_results: int
        :param page_token: The token for continuing a previous list request on the next page. This should be set to the value of `nextPageToken` from the previous response or to the response from the getStartPageToken method.
        :type page_token: str
        :param spaces: A comma-separated list of spaces to query. Supported values are `drive`, `appDataFolder` and `photos`.
        :type spaces: str
        :param start_change_id: Deprecated: Use `pageToken` instead.
        :type start_change_id: str
        :param supports_all_drives: Whether the requesting application supports both My Drives and shared drives.
        :type supports_all_drives: bool
        :param supports_team_drives: Deprecated: Use `supportsAllDrives` instead.
        :type supports_team_drives: bool
        :param team_drive_id: Deprecated: Use `driveId` instead.
        :type team_drive_id: str
        :param channel:
        :type channel: Channel
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._drive_changes_watch_serialize(
            xgafv=xgafv,
            access_token=access_token,
            alt=alt,
            param_callback=param_callback,
            fields=fields,
            key=key,
            oauth_token=oauth_token,
            pretty_print=pretty_print,
            quota_user=quota_user,
            upload_protocol=upload_protocol,
            upload_type=upload_type,
            drive_id=drive_id,
            include_corpus_removals=include_corpus_removals,
            include_deleted=include_deleted,
            include_items_from_all_drives=include_items_from_all_drives,
            include_labels=include_labels,
            include_permissions_for_view=include_permissions_for_view,
            include_subscribed=include_subscribed,
            include_team_drive_items=include_team_drive_items,
            max_results=max_results,
            page_token=page_token,
            spaces=spaces,
            start_change_id=start_change_id,
            supports_all_drives=supports_all_drives,
            supports_team_drives=supports_team_drives,
            team_drive_id=team_drive_id,
            channel=channel,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Channel",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _drive_changes_watch_serialize(
        self,
        xgafv,
        access_token,
        alt,
        param_callback,
        fields,
        key,
        oauth_token,
        pretty_print,
        quota_user,
        upload_protocol,
        upload_type,
        drive_id,
        include_corpus_removals,
        include_deleted,
        include_items_from_all_drives,
        include_labels,
        include_permissions_for_view,
        include_subscribed,
        include_team_drive_items,
        max_results,
        page_token,
        spaces,
        start_change_id,
        supports_all_drives,
        supports_team_drives,
        team_drive_id,
        channel,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if xgafv is not None:
            
            _query_params.append(('$.xgafv', xgafv))
            
        if access_token is not None:
            
            _query_params.append(('access_token', access_token))
            
        if alt is not None:
            
            _query_params.append(('alt', alt))
            
        if param_callback is not None:
            
            _query_params.append(('callback', param_callback))
            
        if fields is not None:
            
            _query_params.append(('fields', fields))
            
        if key is not None:
            
            _query_params.append(('key', key))
            
        if oauth_token is not None:
            
            _query_params.append(('oauth_token', oauth_token))
            
        if pretty_print is not None:
            
            _query_params.append(('prettyPrint', pretty_print))
            
        if quota_user is not None:
            
            _query_params.append(('quotaUser', quota_user))
            
        if upload_protocol is not None:
            
            _query_params.append(('upload_protocol', upload_protocol))
            
        if upload_type is not None:
            
            _query_params.append(('uploadType', upload_type))
            
        if drive_id is not None:
            
            _query_params.append(('driveId', drive_id))
            
        if include_corpus_removals is not None:
            
            _query_params.append(('includeCorpusRemovals', include_corpus_removals))
            
        if include_deleted is not None:
            
            _query_params.append(('includeDeleted', include_deleted))
            
        if include_items_from_all_drives is not None:
            
            _query_params.append(('includeItemsFromAllDrives', include_items_from_all_drives))
            
        if include_labels is not None:
            
            _query_params.append(('includeLabels', include_labels))
            
        if include_permissions_for_view is not None:
            
            _query_params.append(('includePermissionsForView', include_permissions_for_view))
            
        if include_subscribed is not None:
            
            _query_params.append(('includeSubscribed', include_subscribed))
            
        if include_team_drive_items is not None:
            
            _query_params.append(('includeTeamDriveItems', include_team_drive_items))
            
        if max_results is not None:
            
            _query_params.append(('maxResults', max_results))
            
        if page_token is not None:
            
            _query_params.append(('pageToken', page_token))
            
        if spaces is not None:
            
            _query_params.append(('spaces', spaces))
            
        if start_change_id is not None:
            
            _query_params.append(('startChangeId', start_change_id))
            
        if supports_all_drives is not None:
            
            _query_params.append(('supportsAllDrives', supports_all_drives))
            
        if supports_team_drives is not None:
            
            _query_params.append(('supportsTeamDrives', supports_team_drives))
            
        if team_drive_id is not None:
            
            _query_params.append(('teamDriveId', team_drive_id))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if channel is not None:
            _body_params = channel


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'Oauth2c', 
            'Oauth2'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/changes/watch',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )



# coding: utf-8

"""
    Google Drive API

    The Google Drive API allows clients to access resources from Google Drive.

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class LabelFieldModification(BaseModel):
    """
    A modification to a label's field.
    """ # noqa: E501
    field_id: Optional[StrictStr] = Field(default=None, description="The ID of the field to be modified.", alias="fieldId")
    kind: Optional[StrictStr] = Field(default='drive#labelFieldModification', description="This is always `drive#labelFieldModification`.")
    set_date_values: Optional[List[date]] = Field(default=None, description="Replaces the value of a dateString Field with these new values. The string must be in the RFC 3339 full-date format: YYYY-MM-DD.", alias="setDateValues")
    set_integer_values: Optional[List[StrictStr]] = Field(default=None, description="Replaces the value of an `integer` field with these new values.", alias="setIntegerValues")
    set_selection_values: Optional[List[StrictStr]] = Field(default=None, description="Replaces a `selection` field with these new values.", alias="setSelectionValues")
    set_text_values: Optional[List[StrictStr]] = Field(default=None, description="Sets the value of a `text` field.", alias="setTextValues")
    set_user_values: Optional[List[StrictStr]] = Field(default=None, description="Replaces a `user` field with these new values. The values must be valid email addresses.", alias="setUserValues")
    unset_values: Optional[StrictBool] = Field(default=None, description="Unsets the values for this field.", alias="unsetValues")
    __properties: ClassVar[List[str]] = ["fieldId", "kind", "setDateValues", "setIntegerValues", "setSelectionValues", "setTextValues", "setUserValues", "unsetValues"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of LabelFieldModification from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of LabelFieldModification from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "fieldId": obj.get("fieldId"),
            "kind": obj.get("kind") if obj.get("kind") is not None else 'drive#labelFieldModification',
            "setDateValues": obj.get("setDateValues"),
            "setIntegerValues": obj.get("setIntegerValues"),
            "setSelectionValues": obj.get("setSelectionValues"),
            "setTextValues": obj.get("setTextValues"),
            "setUserValues": obj.get("setUserValues"),
            "unsetValues": obj.get("unsetValues")
        })
        return _obj



# coding: utf-8

"""
    Google Drive API

    The Google Drive API allows clients to access resources from Google Drive.

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class FileLabels(BaseModel):
    """
    A group of labels for the file.
    """ # noqa: E501
    hidden: Optional[StrictBool] = Field(default=None, description="Output only. Deprecated.")
    modified: Optional[StrictBool] = Field(default=None, description="Output only. Whether the file has been modified by this user.")
    restricted: Optional[StrictBool] = Field(default=None, description="Output only. Deprecated: Use `copyRequiresWriterPermission` instead.")
    starred: Optional[StrictBool] = Field(default=None, description="Whether this file is starred by the user.")
    trashed: Optional[StrictBool] = Field(default=None, description="Whether this file has been trashed. This label applies to all users accessing the file; however, only owners are allowed to see and untrash files.")
    viewed: Optional[StrictBool] = Field(default=None, description="Whether this file has been viewed by this user.")
    __properties: ClassVar[List[str]] = ["hidden", "modified", "restricted", "starred", "trashed", "viewed"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of FileLabels from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of FileLabels from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "hidden": obj.get("hidden"),
            "modified": obj.get("modified"),
            "restricted": obj.get("restricted"),
            "starred": obj.get("starred"),
            "trashed": obj.get("trashed"),
            "viewed": obj.get("viewed")
        })
        return _obj



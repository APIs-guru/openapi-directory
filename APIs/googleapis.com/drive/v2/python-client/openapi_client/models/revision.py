# coding: utf-8

"""
    Google Drive API

    The Google Drive API allows clients to access resources from Google Drive.

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.user import User
from typing import Optional, Set
from typing_extensions import Self

class Revision(BaseModel):
    """
    A revision of a file. Some resource methods (such as `revisions.update`) require a `revisionId`. Use the `revisions.list` method to retrieve the ID for a revision.
    """ # noqa: E501
    download_url: Optional[StrictStr] = Field(default=None, description="Output only. Short term download URL for the file. This will only be populated on files with content stored in Drive.", alias="downloadUrl")
    etag: Optional[StrictStr] = Field(default=None, description="Output only. The ETag of the revision.")
    export_links: Optional[Dict[str, StrictStr]] = Field(default=None, description="Output only. Links for exporting Docs Editors files to specific formats.", alias="exportLinks")
    file_size: Optional[StrictStr] = Field(default=None, description="Output only. The size of the revision in bytes. This will only be populated on files with content stored in Drive.", alias="fileSize")
    id: Optional[StrictStr] = Field(default=None, description="Output only. The ID of the revision.")
    kind: Optional[StrictStr] = Field(default='drive#revision', description="Output only. This is always `drive#revision`.")
    last_modifying_user: Optional[User] = Field(default=None, alias="lastModifyingUser")
    last_modifying_user_name: Optional[StrictStr] = Field(default=None, description="Output only. Name of the last user to modify this revision.", alias="lastModifyingUserName")
    md5_checksum: Optional[StrictStr] = Field(default=None, description="Output only. An MD5 checksum for the content of this revision. This will only be populated on files with content stored in Drive.", alias="md5Checksum")
    mime_type: Optional[StrictStr] = Field(default=None, description="Output only. The MIME type of the revision.", alias="mimeType")
    modified_date: Optional[datetime] = Field(default=None, description="Last time this revision was modified (formatted RFC 3339 timestamp).", alias="modifiedDate")
    original_filename: Optional[StrictStr] = Field(default=None, description="Output only. The original filename when this revision was created. This will only be populated on files with content stored in Drive.", alias="originalFilename")
    pinned: Optional[StrictBool] = Field(default=None, description="Whether this revision is pinned to prevent automatic purging. If not set, the revision is automatically purged 30 days after newer content is uploaded. This field can only be modified on files with content stored in Drive, excluding Docs Editors files. Revisions can also be pinned when they are created through the drive.files.insert/update/copy by using the pinned query parameter. Pinned revisions are stored indefinitely using additional storage quota, up to a maximum of 200 revisions.")
    publish_auto: Optional[StrictBool] = Field(default=None, description="Whether subsequent revisions will be automatically republished. This is only populated and can only be modified for Docs Editors files.", alias="publishAuto")
    published: Optional[StrictBool] = Field(default=None, description="Whether this revision is published. This is only populated and can only be modified for Docs Editors files.")
    published_link: Optional[StrictStr] = Field(default=None, description="Output only. A link to the published revision. This is only populated for Google Sites files.", alias="publishedLink")
    published_outside_domain: Optional[StrictBool] = Field(default=None, description="Whether this revision is published outside the domain. This is only populated and can only be modified for Docs Editors files.", alias="publishedOutsideDomain")
    self_link: Optional[StrictStr] = Field(default=None, description="Output only. A link back to this revision.", alias="selfLink")
    __properties: ClassVar[List[str]] = ["downloadUrl", "etag", "exportLinks", "fileSize", "id", "kind", "lastModifyingUser", "lastModifyingUserName", "md5Checksum", "mimeType", "modifiedDate", "originalFilename", "pinned", "publishAuto", "published", "publishedLink", "publishedOutsideDomain", "selfLink"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Revision from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of last_modifying_user
        if self.last_modifying_user:
            _dict['lastModifyingUser'] = self.last_modifying_user.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Revision from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "downloadUrl": obj.get("downloadUrl"),
            "etag": obj.get("etag"),
            "exportLinks": obj.get("exportLinks"),
            "fileSize": obj.get("fileSize"),
            "id": obj.get("id"),
            "kind": obj.get("kind") if obj.get("kind") is not None else 'drive#revision',
            "lastModifyingUser": User.from_dict(obj["lastModifyingUser"]) if obj.get("lastModifyingUser") is not None else None,
            "lastModifyingUserName": obj.get("lastModifyingUserName"),
            "md5Checksum": obj.get("md5Checksum"),
            "mimeType": obj.get("mimeType"),
            "modifiedDate": obj.get("modifiedDate"),
            "originalFilename": obj.get("originalFilename"),
            "pinned": obj.get("pinned"),
            "publishAuto": obj.get("publishAuto"),
            "published": obj.get("published"),
            "publishedLink": obj.get("publishedLink"),
            "publishedOutsideDomain": obj.get("publishedOutsideDomain"),
            "selfLink": obj.get("selfLink")
        })
        return _obj



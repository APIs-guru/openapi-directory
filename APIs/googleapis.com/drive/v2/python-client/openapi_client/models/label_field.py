# coding: utf-8

"""
    Google Drive API

    The Google Drive API allows clients to access resources from Google Drive.

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date
from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.user import User
from typing import Optional, Set
from typing_extensions import Self

class LabelField(BaseModel):
    """
    Representation of field, which is a typed key-value pair.
    """ # noqa: E501
    date_string: Optional[List[date]] = Field(default=None, description="Only present if valueType is dateString. RFC 3339 formatted date: YYYY-MM-DD.", alias="dateString")
    id: Optional[StrictStr] = Field(default=None, description="The identifier of this label field.")
    integer: Optional[List[StrictStr]] = Field(default=None, description="Only present if `valueType` is `integer`.")
    kind: Optional[StrictStr] = Field(default='drive#labelField', description="This is always `drive#labelField`.")
    selection: Optional[List[StrictStr]] = Field(default=None, description="Only present if `valueType` is `selection`")
    text: Optional[List[StrictStr]] = Field(default=None, description="Only present if `valueType` is `text`.")
    user: Optional[List[User]] = Field(default=None, description="Only present if `valueType` is `user`.")
    value_type: Optional[StrictStr] = Field(default=None, description="The field type. While new values may be supported in the future, the following are currently allowed: * `dateString` * `integer` * `selection` * `text` * `user`", alias="valueType")
    __properties: ClassVar[List[str]] = ["dateString", "id", "integer", "kind", "selection", "text", "user", "valueType"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of LabelField from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in user (list)
        _items = []
        if self.user:
            for _item_user in self.user:
                if _item_user:
                    _items.append(_item_user.to_dict())
            _dict['user'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of LabelField from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "dateString": obj.get("dateString"),
            "id": obj.get("id"),
            "integer": obj.get("integer"),
            "kind": obj.get("kind") if obj.get("kind") is not None else 'drive#labelField',
            "selection": obj.get("selection"),
            "text": obj.get("text"),
            "user": [User.from_dict(_item) for _item in obj["user"]] if obj.get("user") is not None else None,
            "valueType": obj.get("valueType")
        })
        return _obj



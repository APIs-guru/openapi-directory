# coding: utf-8

"""
    Google Drive API

    The Google Drive API allows clients to access resources from Google Drive.

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.about_additional_role_info_inner import AboutAdditionalRoleInfoInner
from openapi_client.models.about_drive_themes_inner import AboutDriveThemesInner
from openapi_client.models.about_export_formats_inner import AboutExportFormatsInner
from openapi_client.models.about_features_inner import AboutFeaturesInner
from openapi_client.models.about_import_formats_inner import AboutImportFormatsInner
from openapi_client.models.about_max_upload_sizes_inner import AboutMaxUploadSizesInner
from openapi_client.models.about_quota_bytes_by_service_inner import AboutQuotaBytesByServiceInner
from openapi_client.models.about_team_drive_themes_inner import AboutTeamDriveThemesInner
from openapi_client.models.user import User
from typing import Optional, Set
from typing_extensions import Self

class About(BaseModel):
    """
    An item with user information and settings.
    """ # noqa: E501
    additional_role_info: Optional[List[AboutAdditionalRoleInfoInner]] = Field(default=None, description="Information about supported additional roles per file type. The most specific type takes precedence.", alias="additionalRoleInfo")
    can_create_drives: Optional[StrictBool] = Field(default=None, description="Whether the user can create shared drives.", alias="canCreateDrives")
    can_create_team_drives: Optional[StrictBool] = Field(default=None, description="Deprecated: Use `canCreateDrives` instead.", alias="canCreateTeamDrives")
    domain_sharing_policy: Optional[StrictStr] = Field(default=None, description="The domain sharing policy for the current user. Possible values are: * `allowed` * `allowedWithWarning` * `incomingOnly` * `disallowed`", alias="domainSharingPolicy")
    drive_themes: Optional[List[AboutDriveThemesInner]] = Field(default=None, description="A list of themes that are supported for shared drives.", alias="driveThemes")
    etag: Optional[StrictStr] = Field(default=None, description="The ETag of the item.")
    export_formats: Optional[List[AboutExportFormatsInner]] = Field(default=None, description="The allowable export formats.", alias="exportFormats")
    features: Optional[List[AboutFeaturesInner]] = Field(default=None, description="List of additional features enabled on this account.")
    folder_color_palette: Optional[List[StrictStr]] = Field(default=None, description="The palette of allowable folder colors as RGB hex strings.", alias="folderColorPalette")
    import_formats: Optional[List[AboutImportFormatsInner]] = Field(default=None, description="The allowable import formats.", alias="importFormats")
    is_current_app_installed: Optional[StrictBool] = Field(default=None, description="A boolean indicating whether the authenticated app is installed by the authenticated user.", alias="isCurrentAppInstalled")
    kind: Optional[StrictStr] = Field(default='drive#about', description="This is always `drive#about`.")
    language_code: Optional[StrictStr] = Field(default=None, description="The user's language or locale code, as defined by BCP 47, with some extensions from Unicode's LDML format (http://www.unicode.org/reports/tr35/).", alias="languageCode")
    largest_change_id: Optional[StrictStr] = Field(default=None, description="The largest change id.", alias="largestChangeId")
    max_upload_sizes: Optional[List[AboutMaxUploadSizesInner]] = Field(default=None, description="List of max upload sizes for each file type. The most specific type takes precedence.", alias="maxUploadSizes")
    name: Optional[StrictStr] = Field(default=None, description="The name of the current user.")
    permission_id: Optional[StrictStr] = Field(default=None, description="The current user's ID as visible in the permissions collection.", alias="permissionId")
    quota_bytes_by_service: Optional[List[AboutQuotaBytesByServiceInner]] = Field(default=None, description="The amount of storage quota used by different Google services.", alias="quotaBytesByService")
    quota_bytes_total: Optional[StrictStr] = Field(default=None, description="The total number of quota bytes. This is only relevant when quotaType is LIMITED.", alias="quotaBytesTotal")
    quota_bytes_used: Optional[StrictStr] = Field(default=None, description="The number of quota bytes used by Google Drive.", alias="quotaBytesUsed")
    quota_bytes_used_aggregate: Optional[StrictStr] = Field(default=None, description="The number of quota bytes used by all Google apps (Drive, Picasa, etc.).", alias="quotaBytesUsedAggregate")
    quota_bytes_used_in_trash: Optional[StrictStr] = Field(default=None, description="The number of quota bytes used by trashed items.", alias="quotaBytesUsedInTrash")
    quota_type: Optional[StrictStr] = Field(default=None, description="The type of the user's storage quota. Possible values are: * `LIMITED` * `UNLIMITED`", alias="quotaType")
    remaining_change_ids: Optional[StrictStr] = Field(default=None, description="The number of remaining change ids, limited to no more than 2500.", alias="remainingChangeIds")
    root_folder_id: Optional[StrictStr] = Field(default=None, description="The id of the root folder.", alias="rootFolderId")
    self_link: Optional[StrictStr] = Field(default=None, description="A link back to this item.", alias="selfLink")
    team_drive_themes: Optional[List[AboutTeamDriveThemesInner]] = Field(default=None, description="Deprecated: Use `driveThemes` instead.", alias="teamDriveThemes")
    user: Optional[User] = None
    __properties: ClassVar[List[str]] = ["additionalRoleInfo", "canCreateDrives", "canCreateTeamDrives", "domainSharingPolicy", "driveThemes", "etag", "exportFormats", "features", "folderColorPalette", "importFormats", "isCurrentAppInstalled", "kind", "languageCode", "largestChangeId", "maxUploadSizes", "name", "permissionId", "quotaBytesByService", "quotaBytesTotal", "quotaBytesUsed", "quotaBytesUsedAggregate", "quotaBytesUsedInTrash", "quotaType", "remainingChangeIds", "rootFolderId", "selfLink", "teamDriveThemes", "user"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of About from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in additional_role_info (list)
        _items = []
        if self.additional_role_info:
            for _item_additional_role_info in self.additional_role_info:
                if _item_additional_role_info:
                    _items.append(_item_additional_role_info.to_dict())
            _dict['additionalRoleInfo'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in drive_themes (list)
        _items = []
        if self.drive_themes:
            for _item_drive_themes in self.drive_themes:
                if _item_drive_themes:
                    _items.append(_item_drive_themes.to_dict())
            _dict['driveThemes'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in export_formats (list)
        _items = []
        if self.export_formats:
            for _item_export_formats in self.export_formats:
                if _item_export_formats:
                    _items.append(_item_export_formats.to_dict())
            _dict['exportFormats'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in features (list)
        _items = []
        if self.features:
            for _item_features in self.features:
                if _item_features:
                    _items.append(_item_features.to_dict())
            _dict['features'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in import_formats (list)
        _items = []
        if self.import_formats:
            for _item_import_formats in self.import_formats:
                if _item_import_formats:
                    _items.append(_item_import_formats.to_dict())
            _dict['importFormats'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in max_upload_sizes (list)
        _items = []
        if self.max_upload_sizes:
            for _item_max_upload_sizes in self.max_upload_sizes:
                if _item_max_upload_sizes:
                    _items.append(_item_max_upload_sizes.to_dict())
            _dict['maxUploadSizes'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in quota_bytes_by_service (list)
        _items = []
        if self.quota_bytes_by_service:
            for _item_quota_bytes_by_service in self.quota_bytes_by_service:
                if _item_quota_bytes_by_service:
                    _items.append(_item_quota_bytes_by_service.to_dict())
            _dict['quotaBytesByService'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in team_drive_themes (list)
        _items = []
        if self.team_drive_themes:
            for _item_team_drive_themes in self.team_drive_themes:
                if _item_team_drive_themes:
                    _items.append(_item_team_drive_themes.to_dict())
            _dict['teamDriveThemes'] = _items
        # override the default output from pydantic by calling `to_dict()` of user
        if self.user:
            _dict['user'] = self.user.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of About from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "additionalRoleInfo": [AboutAdditionalRoleInfoInner.from_dict(_item) for _item in obj["additionalRoleInfo"]] if obj.get("additionalRoleInfo") is not None else None,
            "canCreateDrives": obj.get("canCreateDrives"),
            "canCreateTeamDrives": obj.get("canCreateTeamDrives"),
            "domainSharingPolicy": obj.get("domainSharingPolicy"),
            "driveThemes": [AboutDriveThemesInner.from_dict(_item) for _item in obj["driveThemes"]] if obj.get("driveThemes") is not None else None,
            "etag": obj.get("etag"),
            "exportFormats": [AboutExportFormatsInner.from_dict(_item) for _item in obj["exportFormats"]] if obj.get("exportFormats") is not None else None,
            "features": [AboutFeaturesInner.from_dict(_item) for _item in obj["features"]] if obj.get("features") is not None else None,
            "folderColorPalette": obj.get("folderColorPalette"),
            "importFormats": [AboutImportFormatsInner.from_dict(_item) for _item in obj["importFormats"]] if obj.get("importFormats") is not None else None,
            "isCurrentAppInstalled": obj.get("isCurrentAppInstalled"),
            "kind": obj.get("kind") if obj.get("kind") is not None else 'drive#about',
            "languageCode": obj.get("languageCode"),
            "largestChangeId": obj.get("largestChangeId"),
            "maxUploadSizes": [AboutMaxUploadSizesInner.from_dict(_item) for _item in obj["maxUploadSizes"]] if obj.get("maxUploadSizes") is not None else None,
            "name": obj.get("name"),
            "permissionId": obj.get("permissionId"),
            "quotaBytesByService": [AboutQuotaBytesByServiceInner.from_dict(_item) for _item in obj["quotaBytesByService"]] if obj.get("quotaBytesByService") is not None else None,
            "quotaBytesTotal": obj.get("quotaBytesTotal"),
            "quotaBytesUsed": obj.get("quotaBytesUsed"),
            "quotaBytesUsedAggregate": obj.get("quotaBytesUsedAggregate"),
            "quotaBytesUsedInTrash": obj.get("quotaBytesUsedInTrash"),
            "quotaType": obj.get("quotaType"),
            "remainingChangeIds": obj.get("remainingChangeIds"),
            "rootFolderId": obj.get("rootFolderId"),
            "selfLink": obj.get("selfLink"),
            "teamDriveThemes": [AboutTeamDriveThemesInner.from_dict(_item) for _item in obj["teamDriveThemes"]] if obj.get("teamDriveThemes") is not None else None,
            "user": User.from_dict(obj["user"]) if obj.get("user") is not None else None
        })
        return _obj



# coding: utf-8

"""
    Google Drive API

    The Google Drive API allows clients to access resources from Google Drive.

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class PermissionPermissionDetailsInner(BaseModel):
    """
    PermissionPermissionDetailsInner
    """ # noqa: E501
    additional_roles: Optional[List[StrictStr]] = Field(default=None, description="Output only. Additional roles for this user. Only `commenter` is currently possible, though more may be supported in the future.", alias="additionalRoles")
    inherited: Optional[StrictBool] = Field(default=None, description="Output only. Whether this permission is inherited. This field is always populated. This is an output-only field.")
    inherited_from: Optional[StrictStr] = Field(default=None, description="Output only. The ID of the item from which this permission is inherited. This is an output-only field.", alias="inheritedFrom")
    permission_type: Optional[StrictStr] = Field(default=None, description="Output only. The permission type for this user. While new values may be added in future, the following are currently possible: * `file` * `member`", alias="permissionType")
    role: Optional[StrictStr] = Field(default=None, description="Output only. The primary role for this user. While new values may be added in the future, the following are currently possible: * `organizer` * `fileOrganizer` * `writer` * `reader`")
    __properties: ClassVar[List[str]] = ["additionalRoles", "inherited", "inheritedFrom", "permissionType", "role"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PermissionPermissionDetailsInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PermissionPermissionDetailsInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "additionalRoles": obj.get("additionalRoles"),
            "inherited": obj.get("inherited"),
            "inheritedFrom": obj.get("inheritedFrom"),
            "permissionType": obj.get("permissionType"),
            "role": obj.get("role")
        })
        return _obj



# coding: utf-8

"""
    Google Drive API

    The Google Drive API allows clients to access resources from Google Drive.

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.permission_permission_details_inner import PermissionPermissionDetailsInner
from openapi_client.models.permission_team_drive_permission_details_inner import PermissionTeamDrivePermissionDetailsInner
from typing import Optional, Set
from typing_extensions import Self

class Permission(BaseModel):
    """
    A permission for a file. A permission grants a user, group, domain, or the world access to a file or a folder hierarchy. Some resource methods (such as `permissions.update`) require a `permissionId`. Use the `permissions.list` method to retrieve the ID for a file, folder, or shared drive.
    """ # noqa: E501
    additional_roles: Optional[List[StrictStr]] = Field(default=None, description="Additional roles for this user. Only `commenter` is currently allowed, though more may be supported in the future.", alias="additionalRoles")
    auth_key: Optional[StrictStr] = Field(default=None, description="Output only. Deprecated.", alias="authKey")
    deleted: Optional[StrictBool] = Field(default=None, description="Output only. Whether the account associated with this permission has been deleted. This field only pertains to user and group permissions.")
    domain: Optional[StrictStr] = Field(default=None, description="Output only. The domain name of the entity this permission refers to. This is an output-only field which is present when the permission type is `user`, `group` or `domain`.")
    email_address: Optional[StrictStr] = Field(default=None, description="Output only. The email address of the user or group this permission refers to. This is an output-only field which is present when the permission type is `user` or `group`.", alias="emailAddress")
    etag: Optional[StrictStr] = Field(default=None, description="Output only. The ETag of the permission.")
    expiration_date: Optional[datetime] = Field(default=None, description="The time at which this permission will expire (RFC 3339 date-time). Expiration dates have the following restrictions: - They can only be set on user and group permissions - The date must be in the future - The date cannot be more than a year in the future - The date can only be set on drive.permissions.update or drive.permissions.patch requests", alias="expirationDate")
    id: Optional[StrictStr] = Field(default=None, description="The ID of the user this permission refers to, and identical to the `permissionId` in the About and Files resources. When making a `drive.permissions.insert` request, exactly one of the `id` or `value` fields must be specified unless the permission type is `anyone`, in which case both `id` and `value` are ignored.")
    kind: Optional[StrictStr] = Field(default='drive#permission', description="Output only. This is always `drive#permission`.")
    name: Optional[StrictStr] = Field(default=None, description="Output only. The name for this permission.")
    pending_owner: Optional[StrictBool] = Field(default=None, description="Whether the account associated with this permission is a pending owner. Only populated for `user` type permissions for files that are not in a shared drive.", alias="pendingOwner")
    permission_details: Optional[List[PermissionPermissionDetailsInner]] = Field(default=None, description="Output only. Details of whether the permissions on this shared drive item are inherited or directly on this item. This is an output-only field which is present only for shared drive items.", alias="permissionDetails")
    photo_link: Optional[StrictStr] = Field(default=None, description="Output only. A link to the profile photo, if available.", alias="photoLink")
    role: Optional[StrictStr] = Field(default=None, description="The primary role for this user. While new values may be supported in the future, the following are currently allowed: * `owner` * `organizer` * `fileOrganizer` * `writer` * `reader`")
    self_link: Optional[StrictStr] = Field(default=None, description="Output only. A link back to this permission.", alias="selfLink")
    team_drive_permission_details: Optional[List[PermissionTeamDrivePermissionDetailsInner]] = Field(default=None, description="Output only. Deprecated: Use `permissionDetails` instead.", alias="teamDrivePermissionDetails")
    type: Optional[StrictStr] = Field(default=None, description="The account type. Allowed values are: * `user` * `group` * `domain` * `anyone`")
    value: Optional[StrictStr] = Field(default=None, description="The email address or domain name for the entity. This is used during inserts and is not populated in responses. When making a `drive.permissions.insert` request, exactly one of the `id` or `value` fields must be specified unless the permission type is `anyone`, in which case both `id` and `value` are ignored.")
    view: Optional[StrictStr] = Field(default=None, description="Indicates the view for this permission. Only populated for permissions that belong to a view. `published` is the only supported value.")
    with_link: Optional[StrictBool] = Field(default=None, description="Whether the link is required for this permission.", alias="withLink")
    __properties: ClassVar[List[str]] = ["additionalRoles", "authKey", "deleted", "domain", "emailAddress", "etag", "expirationDate", "id", "kind", "name", "pendingOwner", "permissionDetails", "photoLink", "role", "selfLink", "teamDrivePermissionDetails", "type", "value", "view", "withLink"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Permission from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "permission_details",
            "team_drive_permission_details",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in permission_details (list)
        _items = []
        if self.permission_details:
            for _item_permission_details in self.permission_details:
                if _item_permission_details:
                    _items.append(_item_permission_details.to_dict())
            _dict['permissionDetails'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in team_drive_permission_details (list)
        _items = []
        if self.team_drive_permission_details:
            for _item_team_drive_permission_details in self.team_drive_permission_details:
                if _item_team_drive_permission_details:
                    _items.append(_item_team_drive_permission_details.to_dict())
            _dict['teamDrivePermissionDetails'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Permission from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "additionalRoles": obj.get("additionalRoles"),
            "authKey": obj.get("authKey"),
            "deleted": obj.get("deleted"),
            "domain": obj.get("domain"),
            "emailAddress": obj.get("emailAddress"),
            "etag": obj.get("etag"),
            "expirationDate": obj.get("expirationDate"),
            "id": obj.get("id"),
            "kind": obj.get("kind") if obj.get("kind") is not None else 'drive#permission',
            "name": obj.get("name"),
            "pendingOwner": obj.get("pendingOwner"),
            "permissionDetails": [PermissionPermissionDetailsInner.from_dict(_item) for _item in obj["permissionDetails"]] if obj.get("permissionDetails") is not None else None,
            "photoLink": obj.get("photoLink"),
            "role": obj.get("role"),
            "selfLink": obj.get("selfLink"),
            "teamDrivePermissionDetails": [PermissionTeamDrivePermissionDetailsInner.from_dict(_item) for _item in obj["teamDrivePermissionDetails"]] if obj.get("teamDrivePermissionDetails") is not None else None,
            "type": obj.get("type"),
            "value": obj.get("value"),
            "view": obj.get("view"),
            "withLink": obj.get("withLink")
        })
        return _obj



# coding: utf-8

"""
    Google Drive API

    The Google Drive API allows clients to access resources from Google Drive.

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.change import Change
from typing import Optional, Set
from typing_extensions import Self

class ChangeList(BaseModel):
    """
    A list of changes for a user.
    """ # noqa: E501
    etag: Optional[StrictStr] = Field(default=None, description="The ETag of the list.")
    items: Optional[List[Change]] = Field(default=None, description="The list of changes. If nextPageToken is populated, then this list may be incomplete and an additional page of results should be fetched.")
    kind: Optional[StrictStr] = Field(default='drive#changeList', description="This is always `drive#changeList`.")
    largest_change_id: Optional[StrictStr] = Field(default=None, description="The current largest change ID.", alias="largestChangeId")
    new_start_page_token: Optional[StrictStr] = Field(default=None, description="The starting page token for future changes. This will be present only if the end of the current changes list has been reached.", alias="newStartPageToken")
    next_link: Optional[StrictStr] = Field(default=None, description="A link to the next page of changes.", alias="nextLink")
    next_page_token: Optional[StrictStr] = Field(default=None, description="The page token for the next page of changes. This will be absent if the end of the changes list has been reached. If the token is rejected for any reason, it should be discarded, and pagination should be restarted from the first page of results.", alias="nextPageToken")
    self_link: Optional[StrictStr] = Field(default=None, description="A link back to this list.", alias="selfLink")
    __properties: ClassVar[List[str]] = ["etag", "items", "kind", "largestChangeId", "newStartPageToken", "nextLink", "nextPageToken", "selfLink"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ChangeList from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in items (list)
        _items = []
        if self.items:
            for _item_items in self.items:
                if _item_items:
                    _items.append(_item_items.to_dict())
            _dict['items'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ChangeList from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "etag": obj.get("etag"),
            "items": [Change.from_dict(_item) for _item in obj["items"]] if obj.get("items") is not None else None,
            "kind": obj.get("kind") if obj.get("kind") is not None else 'drive#changeList',
            "largestChangeId": obj.get("largestChangeId"),
            "newStartPageToken": obj.get("newStartPageToken"),
            "nextLink": obj.get("nextLink"),
            "nextPageToken": obj.get("nextPageToken"),
            "selfLink": obj.get("selfLink")
        })
        return _obj



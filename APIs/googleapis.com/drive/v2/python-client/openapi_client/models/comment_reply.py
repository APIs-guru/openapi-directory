# coding: utf-8

"""
    Google Drive API

    The Google Drive API allows clients to access resources from Google Drive.

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.user import User
from typing import Optional, Set
from typing_extensions import Self

class CommentReply(BaseModel):
    """
    A comment on a file in Google Drive. Some resource methods (such as `replies.update`) require a `replyId`. Use the `replies.list` method to retrieve the ID for a reply.
    """ # noqa: E501
    author: Optional[User] = None
    content: Optional[StrictStr] = Field(default=None, description="The plain text content used to create this reply. This is not HTML safe and should only be used as a starting point to make edits to a reply's content. This field is required on inserts if no verb is specified (resolve/reopen).")
    created_date: Optional[datetime] = Field(default=None, description="The date when this reply was first created.", alias="createdDate")
    deleted: Optional[StrictBool] = Field(default=None, description="Output only. Whether this reply has been deleted. If a reply has been deleted the content will be cleared and this will only represent a reply that once existed.")
    html_content: Optional[StrictStr] = Field(default=None, description="Output only. HTML formatted content for this reply.", alias="htmlContent")
    kind: Optional[StrictStr] = Field(default='drive#commentReply', description="Output only. This is always `drive#commentReply`.")
    modified_date: Optional[datetime] = Field(default=None, description="The date when this reply was last modified.", alias="modifiedDate")
    reply_id: Optional[StrictStr] = Field(default=None, description="Output only. The ID of the reply.", alias="replyId")
    verb: Optional[StrictStr] = Field(default=None, description="The action this reply performed to the parent comment. When creating a new reply this is the action to be perform to the parent comment. Possible values are: * `resolve` - To resolve a comment. * `reopen` - To reopen (un-resolve) a comment.")
    __properties: ClassVar[List[str]] = ["author", "content", "createdDate", "deleted", "htmlContent", "kind", "modifiedDate", "replyId", "verb"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CommentReply from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of author
        if self.author:
            _dict['author'] = self.author.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CommentReply from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "author": User.from_dict(obj["author"]) if obj.get("author") is not None else None,
            "content": obj.get("content"),
            "createdDate": obj.get("createdDate"),
            "deleted": obj.get("deleted"),
            "htmlContent": obj.get("htmlContent"),
            "kind": obj.get("kind") if obj.get("kind") is not None else 'drive#commentReply',
            "modifiedDate": obj.get("modifiedDate"),
            "replyId": obj.get("replyId"),
            "verb": obj.get("verb")
        })
        return _obj



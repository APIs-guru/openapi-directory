# coding: utf-8

"""
    Drive Activity API

    Provides a historical view of activity in Google Drive.

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.comment import Comment

class TestComment(unittest.TestCase):
    """Comment unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> Comment:
        """Test Comment
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `Comment`
        """
        model = Comment()
        if include_optional:
            return Comment(
                assignment = openapi_client.models.assignment.Assignment(
                    assigned_user = openapi_client.models.user.User(
                        deleted_user = openapi_client.models.deleted_user.DeletedUser(), 
                        known_user = openapi_client.models.known_user.KnownUser(
                            is_current_user = True, 
                            person_name = '', ), 
                        unknown_user = openapi_client.models.unknown_user.UnknownUser(), ), 
                    subtype = 'SUBTYPE_UNSPECIFIED', ),
                mentioned_users = [
                    openapi_client.models.user.User(
                        deleted_user = openapi_client.models.deleted_user.DeletedUser(), 
                        known_user = openapi_client.models.known_user.KnownUser(
                            is_current_user = True, 
                            person_name = '', ), 
                        unknown_user = openapi_client.models.unknown_user.UnknownUser(), )
                    ],
                post = openapi_client.models.post.Post(
                    subtype = 'SUBTYPE_UNSPECIFIED', ),
                suggestion = openapi_client.models.suggestion.Suggestion(
                    subtype = 'SUBTYPE_UNSPECIFIED', )
            )
        else:
            return Comment(
        )
        """

    def testComment(self):
        """Test Comment"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

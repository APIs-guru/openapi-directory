# coding: utf-8

"""
    Drive Activity API

    Provides a historical view of activity in Google Drive.

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.drive_activity import DriveActivity

class TestDriveActivity(unittest.TestCase):
    """DriveActivity unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> DriveActivity:
        """Test DriveActivity
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `DriveActivity`
        """
        model = DriveActivity()
        if include_optional:
            return DriveActivity(
                actions = [
                    openapi_client.models.action.Action(
                        actor = openapi_client.models.actor.Actor(
                            administrator = openapi_client.models.administrator.Administrator(), 
                            anonymous = openapi_client.models.anonymous_user.AnonymousUser(), 
                            impersonation = openapi_client.models.impersonation.Impersonation(
                                impersonated_user = openapi_client.models.user.User(
                                    deleted_user = openapi_client.models.deleted_user.DeletedUser(), 
                                    known_user = openapi_client.models.known_user.KnownUser(
                                        is_current_user = True, 
                                        person_name = '', ), 
                                    unknown_user = openapi_client.models.unknown_user.UnknownUser(), ), ), 
                            system = openapi_client.models.system_event.SystemEvent(
                                type = 'TYPE_UNSPECIFIED', ), 
                            user = openapi_client.models.user.User(), ), 
                        detail = openapi_client.models.action_detail.ActionDetail(
                            applied_label_change = openapi_client.models.applied_label_change.AppliedLabelChange(
                                changes = [
                                    openapi_client.models.applied_label_change_detail.AppliedLabelChangeDetail(
                                        field_changes = [
                                            openapi_client.models.field_value_change.FieldValueChange(
                                                display_name = '', 
                                                field_id = '', 
                                                new_value = openapi_client.models.field_value.FieldValue(
                                                    date = openapi_client.models.date.Date(
                                                        value = '', ), 
                                                    integer = openapi_client.models.integer.Integer(
                                                        value = '', ), 
                                                    selection = openapi_client.models.selection.Selection(
                                                        display_name = '', 
                                                        value = '', ), 
                                                    selection_list = openapi_client.models.selection_list.SelectionList(
                                                        values = [
                                                            openapi_client.models.selection.Selection(
                                                                display_name = '', 
                                                                value = '', )
                                                            ], ), 
                                                    text = openapi_client.models.text.Text(
                                                        value = '', ), 
                                                    text_list = openapi_client.models.text_list.TextList(), 
                                                    user_list = openapi_client.models.user_list.UserList(), ), 
                                                old_value = openapi_client.models.field_value.FieldValue(), )
                                            ], 
                                        label = '', 
                                        title = '', 
                                        types = [
                                            'TYPE_UNSPECIFIED'
                                            ], )
                                    ], ), 
                            comment = openapi_client.models.comment.Comment(
                                assignment = openapi_client.models.assignment.Assignment(
                                    assigned_user = , 
                                    subtype = 'SUBTYPE_UNSPECIFIED', ), 
                                mentioned_users = [
                                    
                                    ], 
                                post = openapi_client.models.post.Post(
                                    subtype = 'SUBTYPE_UNSPECIFIED', ), 
                                suggestion = openapi_client.models.suggestion.Suggestion(
                                    subtype = 'SUBTYPE_UNSPECIFIED', ), ), 
                            create = openapi_client.models.create.Create(
                                copy = openapi_client.models.copy.Copy(
                                    original_object = openapi_client.models.target_reference.TargetReference(
                                        drive = openapi_client.models.drive_reference.DriveReference(
                                            name = '', 
                                            title = '', ), 
                                        drive_item = openapi_client.models.drive_item_reference.DriveItemReference(
                                            drive_file = openapi_client.models.drive_file.DriveFile(), 
                                            drive_folder = openapi_client.models.drive_folder.DriveFolder(
                                                type = 'TYPE_UNSPECIFIED', ), 
                                            file = openapi_client.models.file.File(), 
                                            folder = openapi_client.models.folder.Folder(
                                                type = 'TYPE_UNSPECIFIED', ), 
                                            name = '', 
                                            title = '', ), 
                                        team_drive = openapi_client.models.team_drive_reference.TeamDriveReference(
                                            name = '', 
                                            title = '', ), ), ), 
                                new = openapi_client.models.new.New(), 
                                upload = openapi_client.models.upload.Upload(), ), 
                            delete = openapi_client.models.delete.Delete(
                                type = 'TYPE_UNSPECIFIED', ), 
                            dlp_change = openapi_client.models.data_leak_prevention_change.DataLeakPreventionChange(
                                type = 'TYPE_UNSPECIFIED', ), 
                            edit = openapi_client.models.edit.Edit(), 
                            move = openapi_client.models.move.Move(
                                added_parents = [
                                    openapi_client.models.target_reference.TargetReference()
                                    ], 
                                removed_parents = [
                                    
                                    ], ), 
                            permission_change = openapi_client.models.permission_change.PermissionChange(
                                added_permissions = [
                                    openapi_client.models.permission.Permission(
                                        allow_discovery = True, 
                                        anyone = openapi_client.models.anyone.Anyone(), 
                                        domain = openapi_client.models.domain.Domain(
                                            legacy_id = '', 
                                            name = '', ), 
                                        group = openapi_client.models.group.Group(
                                            email = '', 
                                            title = '', ), 
                                        role = 'ROLE_UNSPECIFIED', )
                                    ], 
                                removed_permissions = [
                                    openapi_client.models.permission.Permission(
                                        allow_discovery = True, 
                                        role = 'ROLE_UNSPECIFIED', )
                                    ], ), 
                            reference = openapi_client.models.application_reference.ApplicationReference(
                                type = 'UNSPECIFIED_REFERENCE_TYPE', ), 
                            rename = openapi_client.models.rename.Rename(
                                new_title = '', 
                                old_title = '', ), 
                            restore = openapi_client.models.restore.Restore(
                                type = 'TYPE_UNSPECIFIED', ), 
                            settings_change = openapi_client.models.settings_change.SettingsChange(
                                restriction_changes = [
                                    openapi_client.models.restriction_change.RestrictionChange(
                                        feature = 'FEATURE_UNSPECIFIED', 
                                        new_restriction = 'RESTRICTION_UNSPECIFIED', )
                                    ], ), ), 
                        target = openapi_client.models.target.Target(
                            file_comment = openapi_client.models.file_comment.FileComment(
                                legacy_comment_id = '', 
                                legacy_discussion_id = '', 
                                link_to_discussion = '', 
                                parent = openapi_client.models.drive_item.DriveItem(
                                    mime_type = '', 
                                    name = '', 
                                    owner = openapi_client.models.owner.Owner(), 
                                    title = '', ), ), ), 
                        time_range = openapi_client.models.time_range.TimeRange(
                            end_time = '', 
                            start_time = '', ), 
                        timestamp = '', )
                    ],
                actors = [
                    openapi_client.models.actor.Actor(
                        administrator = openapi_client.models.administrator.Administrator(), 
                        anonymous = openapi_client.models.anonymous_user.AnonymousUser(), 
                        impersonation = openapi_client.models.impersonation.Impersonation(
                            impersonated_user = openapi_client.models.user.User(
                                deleted_user = openapi_client.models.deleted_user.DeletedUser(), 
                                known_user = openapi_client.models.known_user.KnownUser(
                                    is_current_user = True, 
                                    person_name = '', ), 
                                unknown_user = openapi_client.models.unknown_user.UnknownUser(), ), ), 
                        system = openapi_client.models.system_event.SystemEvent(
                            type = 'TYPE_UNSPECIFIED', ), 
                        user = openapi_client.models.user.User(), )
                    ],
                primary_action_detail = openapi_client.models.action_detail.ActionDetail(
                    applied_label_change = openapi_client.models.applied_label_change.AppliedLabelChange(
                        changes = [
                            openapi_client.models.applied_label_change_detail.AppliedLabelChangeDetail(
                                field_changes = [
                                    openapi_client.models.field_value_change.FieldValueChange(
                                        display_name = '', 
                                        field_id = '', 
                                        new_value = openapi_client.models.field_value.FieldValue(
                                            date = openapi_client.models.date.Date(
                                                value = '', ), 
                                            integer = openapi_client.models.integer.Integer(
                                                value = '', ), 
                                            selection = openapi_client.models.selection.Selection(
                                                display_name = '', 
                                                value = '', ), 
                                            selection_list = openapi_client.models.selection_list.SelectionList(
                                                values = [
                                                    openapi_client.models.selection.Selection(
                                                        display_name = '', 
                                                        value = '', )
                                                    ], ), 
                                            text = openapi_client.models.text.Text(
                                                value = '', ), 
                                            text_list = openapi_client.models.text_list.TextList(), 
                                            user = openapi_client.models.single_user.SingleUser(
                                                value = '', ), 
                                            user_list = openapi_client.models.user_list.UserList(), ), 
                                        old_value = openapi_client.models.field_value.FieldValue(), )
                                    ], 
                                label = '', 
                                title = '', 
                                types = [
                                    'TYPE_UNSPECIFIED'
                                    ], )
                            ], ), 
                    comment = openapi_client.models.comment.Comment(
                        assignment = openapi_client.models.assignment.Assignment(
                            assigned_user = openapi_client.models.user.User(
                                deleted_user = openapi_client.models.deleted_user.DeletedUser(), 
                                known_user = openapi_client.models.known_user.KnownUser(
                                    is_current_user = True, 
                                    person_name = '', ), 
                                unknown_user = openapi_client.models.unknown_user.UnknownUser(), ), 
                            subtype = 'SUBTYPE_UNSPECIFIED', ), 
                        mentioned_users = [
                            openapi_client.models.user.User()
                            ], 
                        post = openapi_client.models.post.Post(
                            subtype = 'SUBTYPE_UNSPECIFIED', ), 
                        suggestion = openapi_client.models.suggestion.Suggestion(
                            subtype = 'SUBTYPE_UNSPECIFIED', ), ), 
                    create = openapi_client.models.create.Create(
                        copy = openapi_client.models.copy.Copy(
                            original_object = openapi_client.models.target_reference.TargetReference(
                                drive = openapi_client.models.drive_reference.DriveReference(
                                    name = '', 
                                    title = '', ), 
                                drive_item = openapi_client.models.drive_item_reference.DriveItemReference(
                                    drive_file = openapi_client.models.drive_file.DriveFile(), 
                                    drive_folder = openapi_client.models.drive_folder.DriveFolder(
                                        type = 'TYPE_UNSPECIFIED', ), 
                                    file = openapi_client.models.file.File(), 
                                    folder = openapi_client.models.folder.Folder(
                                        type = 'TYPE_UNSPECIFIED', ), 
                                    name = '', 
                                    title = '', ), 
                                team_drive = openapi_client.models.team_drive_reference.TeamDriveReference(
                                    name = '', 
                                    title = '', ), ), ), 
                        new = openapi_client.models.new.New(), 
                        upload = openapi_client.models.upload.Upload(), ), 
                    delete = openapi_client.models.delete.Delete(
                        type = 'TYPE_UNSPECIFIED', ), 
                    dlp_change = openapi_client.models.data_leak_prevention_change.DataLeakPreventionChange(
                        type = 'TYPE_UNSPECIFIED', ), 
                    edit = openapi_client.models.edit.Edit(), 
                    move = openapi_client.models.move.Move(
                        added_parents = [
                            openapi_client.models.target_reference.TargetReference()
                            ], 
                        removed_parents = [
                            
                            ], ), 
                    permission_change = openapi_client.models.permission_change.PermissionChange(
                        added_permissions = [
                            openapi_client.models.permission.Permission(
                                allow_discovery = True, 
                                anyone = openapi_client.models.anyone.Anyone(), 
                                domain = openapi_client.models.domain.Domain(
                                    legacy_id = '', 
                                    name = '', ), 
                                group = openapi_client.models.group.Group(
                                    email = '', 
                                    title = '', ), 
                                role = 'ROLE_UNSPECIFIED', )
                            ], 
                        removed_permissions = [
                            openapi_client.models.permission.Permission(
                                allow_discovery = True, 
                                role = 'ROLE_UNSPECIFIED', )
                            ], ), 
                    reference = openapi_client.models.application_reference.ApplicationReference(
                        type = 'UNSPECIFIED_REFERENCE_TYPE', ), 
                    rename = openapi_client.models.rename.Rename(
                        new_title = '', 
                        old_title = '', ), 
                    restore = openapi_client.models.restore.Restore(
                        type = 'TYPE_UNSPECIFIED', ), 
                    settings_change = openapi_client.models.settings_change.SettingsChange(
                        restriction_changes = [
                            openapi_client.models.restriction_change.RestrictionChange(
                                feature = 'FEATURE_UNSPECIFIED', 
                                new_restriction = 'RESTRICTION_UNSPECIFIED', )
                            ], ), ),
                targets = [
                    openapi_client.models.target.Target(
                        drive = openapi_client.models.drive.Drive(
                            name = '', 
                            root = openapi_client.models.drive_item.DriveItem(
                                drive_file = openapi_client.models.drive_file.DriveFile(), 
                                drive_folder = openapi_client.models.drive_folder.DriveFolder(
                                    type = 'TYPE_UNSPECIFIED', ), 
                                file = openapi_client.models.file.File(), 
                                folder = openapi_client.models.folder.Folder(
                                    type = 'TYPE_UNSPECIFIED', ), 
                                mime_type = '', 
                                name = '', 
                                owner = openapi_client.models.owner.Owner(
                                    domain = openapi_client.models.domain.Domain(
                                        legacy_id = '', 
                                        name = '', ), 
                                    team_drive = openapi_client.models.team_drive_reference.TeamDriveReference(
                                        name = '', 
                                        title = '', ), 
                                    user = openapi_client.models.user.User(
                                        deleted_user = openapi_client.models.deleted_user.DeletedUser(), 
                                        known_user = openapi_client.models.known_user.KnownUser(
                                            is_current_user = True, 
                                            person_name = '', ), 
                                        unknown_user = openapi_client.models.unknown_user.UnknownUser(), ), ), 
                                title = '', ), 
                            title = '', ), 
                        drive_item = openapi_client.models.drive_item.DriveItem(
                            mime_type = '', 
                            name = '', 
                            title = '', ), 
                        file_comment = openapi_client.models.file_comment.FileComment(
                            legacy_comment_id = '', 
                            legacy_discussion_id = '', 
                            link_to_discussion = '', 
                            parent = , ), 
                        team_drive = openapi_client.models.team_drive.TeamDrive(
                            name = '', 
                            title = '', ), )
                    ],
                time_range = openapi_client.models.time_range.TimeRange(
                    end_time = '', 
                    start_time = '', ),
                timestamp = ''
            )
        else:
            return DriveActivity(
        )
        """

    def testDriveActivity(self):
        """Test DriveActivity"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

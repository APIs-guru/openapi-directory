# coding: utf-8

"""
    Drive Activity API

    Provides a historical view of activity in Google Drive.

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.application_reference import ApplicationReference
from openapi_client.models.applied_label_change import AppliedLabelChange
from openapi_client.models.comment import Comment
from openapi_client.models.create import Create
from openapi_client.models.data_leak_prevention_change import DataLeakPreventionChange
from openapi_client.models.delete import Delete
from openapi_client.models.move import Move
from openapi_client.models.permission_change import PermissionChange
from openapi_client.models.rename import Rename
from openapi_client.models.restore import Restore
from openapi_client.models.settings_change import SettingsChange
from typing import Optional, Set
from typing_extensions import Self

class ActionDetail(BaseModel):
    """
    Data describing the type and additional information of an action.
    """ # noqa: E501
    applied_label_change: Optional[AppliedLabelChange] = Field(default=None, alias="appliedLabelChange")
    comment: Optional[Comment] = None
    create: Optional[Create] = None
    delete: Optional[Delete] = None
    dlp_change: Optional[DataLeakPreventionChange] = Field(default=None, alias="dlpChange")
    edit: Optional[Dict[str, Any]] = Field(default=None, description="An empty message indicating an object was edited.")
    move: Optional[Move] = None
    permission_change: Optional[PermissionChange] = Field(default=None, alias="permissionChange")
    reference: Optional[ApplicationReference] = None
    rename: Optional[Rename] = None
    restore: Optional[Restore] = None
    settings_change: Optional[SettingsChange] = Field(default=None, alias="settingsChange")
    __properties: ClassVar[List[str]] = ["appliedLabelChange", "comment", "create", "delete", "dlpChange", "edit", "move", "permissionChange", "reference", "rename", "restore", "settingsChange"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ActionDetail from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of applied_label_change
        if self.applied_label_change:
            _dict['appliedLabelChange'] = self.applied_label_change.to_dict()
        # override the default output from pydantic by calling `to_dict()` of comment
        if self.comment:
            _dict['comment'] = self.comment.to_dict()
        # override the default output from pydantic by calling `to_dict()` of create
        if self.create:
            _dict['create'] = self.create.to_dict()
        # override the default output from pydantic by calling `to_dict()` of delete
        if self.delete:
            _dict['delete'] = self.delete.to_dict()
        # override the default output from pydantic by calling `to_dict()` of dlp_change
        if self.dlp_change:
            _dict['dlpChange'] = self.dlp_change.to_dict()
        # override the default output from pydantic by calling `to_dict()` of move
        if self.move:
            _dict['move'] = self.move.to_dict()
        # override the default output from pydantic by calling `to_dict()` of permission_change
        if self.permission_change:
            _dict['permissionChange'] = self.permission_change.to_dict()
        # override the default output from pydantic by calling `to_dict()` of reference
        if self.reference:
            _dict['reference'] = self.reference.to_dict()
        # override the default output from pydantic by calling `to_dict()` of rename
        if self.rename:
            _dict['rename'] = self.rename.to_dict()
        # override the default output from pydantic by calling `to_dict()` of restore
        if self.restore:
            _dict['restore'] = self.restore.to_dict()
        # override the default output from pydantic by calling `to_dict()` of settings_change
        if self.settings_change:
            _dict['settingsChange'] = self.settings_change.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ActionDetail from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "appliedLabelChange": AppliedLabelChange.from_dict(obj["appliedLabelChange"]) if obj.get("appliedLabelChange") is not None else None,
            "comment": Comment.from_dict(obj["comment"]) if obj.get("comment") is not None else None,
            "create": Create.from_dict(obj["create"]) if obj.get("create") is not None else None,
            "delete": Delete.from_dict(obj["delete"]) if obj.get("delete") is not None else None,
            "dlpChange": DataLeakPreventionChange.from_dict(obj["dlpChange"]) if obj.get("dlpChange") is not None else None,
            "edit": obj.get("edit"),
            "move": Move.from_dict(obj["move"]) if obj.get("move") is not None else None,
            "permissionChange": PermissionChange.from_dict(obj["permissionChange"]) if obj.get("permissionChange") is not None else None,
            "reference": ApplicationReference.from_dict(obj["reference"]) if obj.get("reference") is not None else None,
            "rename": Rename.from_dict(obj["rename"]) if obj.get("rename") is not None else None,
            "restore": Restore.from_dict(obj["restore"]) if obj.get("restore") is not None else None,
            "settingsChange": SettingsChange.from_dict(obj["settingsChange"]) if obj.get("settingsChange") is not None else None
        })
        return _obj



# coding: utf-8

"""
    Drive Activity API

    Provides a historical view of activity in Google Drive.

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.field_value_change import FieldValueChange
from typing import Optional, Set
from typing_extensions import Self

class AppliedLabelChangeDetail(BaseModel):
    """
    A change made to a Label on the Target.
    """ # noqa: E501
    field_changes: Optional[List[FieldValueChange]] = Field(default=None, description="Field Changes. Only present if `types` contains `LABEL_FIELD_VALUE_CHANGED`.", alias="fieldChanges")
    label: Optional[StrictStr] = Field(default=None, description="The Label name representing the Label that changed. This name always contains the revision of the Label that was used when this Action occurred. The format is `labels/id@revision`.")
    title: Optional[StrictStr] = Field(default=None, description="The human-readable title of the label that changed.")
    types: Optional[List[StrictStr]] = Field(default=None, description="The types of changes made to the Label on the Target.")
    __properties: ClassVar[List[str]] = ["fieldChanges", "label", "title", "types"]

    @field_validator('types')
    def types_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        for i in value:
            if i not in set(['TYPE_UNSPECIFIED', 'LABEL_ADDED', 'LABEL_REMOVED', 'LABEL_FIELD_VALUE_CHANGED', 'LABEL_APPLIED_BY_ITEM_CREATE']):
                raise ValueError("each list item must be one of ('TYPE_UNSPECIFIED', 'LABEL_ADDED', 'LABEL_REMOVED', 'LABEL_FIELD_VALUE_CHANGED', 'LABEL_APPLIED_BY_ITEM_CREATE')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AppliedLabelChangeDetail from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in field_changes (list)
        _items = []
        if self.field_changes:
            for _item_field_changes in self.field_changes:
                if _item_field_changes:
                    _items.append(_item_field_changes.to_dict())
            _dict['fieldChanges'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AppliedLabelChangeDetail from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "fieldChanges": [FieldValueChange.from_dict(_item) for _item in obj["fieldChanges"]] if obj.get("fieldChanges") is not None else None,
            "label": obj.get("label"),
            "title": obj.get("title"),
            "types": obj.get("types")
        })
        return _obj



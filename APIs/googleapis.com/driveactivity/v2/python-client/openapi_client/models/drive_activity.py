# coding: utf-8

"""
    Drive Activity API

    Provides a historical view of activity in Google Drive.

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.action import Action
from openapi_client.models.action_detail import ActionDetail
from openapi_client.models.actor import Actor
from openapi_client.models.target import Target
from openapi_client.models.time_range import TimeRange
from typing import Optional, Set
from typing_extensions import Self

class DriveActivity(BaseModel):
    """
    A single Drive activity comprising one or more Actions by one or more Actors on one or more Targets. Some Action groupings occur spontaneously, such as moving an item into a shared folder triggering a permission change. Other groupings of related Actions, such as multiple Actors editing one item or moving multiple files into a new folder, are controlled by the selection of a ConsolidationStrategy in the QueryDriveActivityRequest.
    """ # noqa: E501
    actions: Optional[List[Action]] = Field(default=None, description="Details on all actions in this activity.")
    actors: Optional[List[Actor]] = Field(default=None, description="All actor(s) responsible for the activity.")
    primary_action_detail: Optional[ActionDetail] = Field(default=None, alias="primaryActionDetail")
    targets: Optional[List[Target]] = Field(default=None, description="All Google Drive objects this activity is about (e.g. file, folder, drive). This represents the state of the target immediately after the actions occurred.")
    time_range: Optional[TimeRange] = Field(default=None, alias="timeRange")
    timestamp: Optional[StrictStr] = Field(default=None, description="The activity occurred at this specific time.")
    __properties: ClassVar[List[str]] = ["actions", "actors", "primaryActionDetail", "targets", "timeRange", "timestamp"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DriveActivity from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in actions (list)
        _items = []
        if self.actions:
            for _item_actions in self.actions:
                if _item_actions:
                    _items.append(_item_actions.to_dict())
            _dict['actions'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in actors (list)
        _items = []
        if self.actors:
            for _item_actors in self.actors:
                if _item_actors:
                    _items.append(_item_actors.to_dict())
            _dict['actors'] = _items
        # override the default output from pydantic by calling `to_dict()` of primary_action_detail
        if self.primary_action_detail:
            _dict['primaryActionDetail'] = self.primary_action_detail.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in targets (list)
        _items = []
        if self.targets:
            for _item_targets in self.targets:
                if _item_targets:
                    _items.append(_item_targets.to_dict())
            _dict['targets'] = _items
        # override the default output from pydantic by calling `to_dict()` of time_range
        if self.time_range:
            _dict['timeRange'] = self.time_range.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DriveActivity from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "actions": [Action.from_dict(_item) for _item in obj["actions"]] if obj.get("actions") is not None else None,
            "actors": [Actor.from_dict(_item) for _item in obj["actors"]] if obj.get("actors") is not None else None,
            "primaryActionDetail": ActionDetail.from_dict(obj["primaryActionDetail"]) if obj.get("primaryActionDetail") is not None else None,
            "targets": [Target.from_dict(_item) for _item in obj["targets"]] if obj.get("targets") is not None else None,
            "timeRange": TimeRange.from_dict(obj["timeRange"]) if obj.get("timeRange") is not None else None,
            "timestamp": obj.get("timestamp")
        })
        return _obj



# coding: utf-8

"""
    Drive Activity API

    Provides a historical view of activity in Google Drive.

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.domain import Domain
from openapi_client.models.group import Group
from openapi_client.models.user import User
from typing import Optional, Set
from typing_extensions import Self

class Permission(BaseModel):
    """
    The permission setting of an object.
    """ # noqa: E501
    allow_discovery: Optional[StrictBool] = Field(default=None, description="If true, the item can be discovered (e.g. in the user's \"Shared with me\" collection) without needing a link to the item.", alias="allowDiscovery")
    anyone: Optional[Dict[str, Any]] = Field(default=None, description="Represents any user (including a logged out user).")
    domain: Optional[Domain] = None
    group: Optional[Group] = None
    role: Optional[StrictStr] = Field(default=None, description="Indicates the [Google Drive permissions role](https://developers.google.com/drive/web/manage-sharing#roles). The role determines a user's ability to read, write, and comment on items.")
    user: Optional[User] = None
    __properties: ClassVar[List[str]] = ["allowDiscovery", "anyone", "domain", "group", "role", "user"]

    @field_validator('role')
    def role_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['ROLE_UNSPECIFIED', 'OWNER', 'ORGANIZER', 'FILE_ORGANIZER', 'EDITOR', 'COMMENTER', 'VIEWER', 'PUBLISHED_VIEWER']):
            raise ValueError("must be one of enum values ('ROLE_UNSPECIFIED', 'OWNER', 'ORGANIZER', 'FILE_ORGANIZER', 'EDITOR', 'COMMENTER', 'VIEWER', 'PUBLISHED_VIEWER')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Permission from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of domain
        if self.domain:
            _dict['domain'] = self.domain.to_dict()
        # override the default output from pydantic by calling `to_dict()` of group
        if self.group:
            _dict['group'] = self.group.to_dict()
        # override the default output from pydantic by calling `to_dict()` of user
        if self.user:
            _dict['user'] = self.user.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Permission from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "allowDiscovery": obj.get("allowDiscovery"),
            "anyone": obj.get("anyone"),
            "domain": Domain.from_dict(obj["domain"]) if obj.get("domain") is not None else None,
            "group": Group.from_dict(obj["group"]) if obj.get("group") is not None else None,
            "role": obj.get("role"),
            "user": User.from_dict(obj["user"]) if obj.get("user") is not None else None
        })
        return _obj



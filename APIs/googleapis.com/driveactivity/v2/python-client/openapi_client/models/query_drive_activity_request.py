# coding: utf-8

"""
    Drive Activity API

    Provides a historical view of activity in Google Drive.

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.consolidation_strategy import ConsolidationStrategy
from typing import Optional, Set
from typing_extensions import Self

class QueryDriveActivityRequest(BaseModel):
    """
    The request message for querying Drive activity.
    """ # noqa: E501
    ancestor_name: Optional[StrictStr] = Field(default=None, description="Return activities for this Drive folder, plus all children and descendants. The format is `items/ITEM_ID`.", alias="ancestorName")
    consolidation_strategy: Optional[ConsolidationStrategy] = Field(default=None, alias="consolidationStrategy")
    filter: Optional[StrictStr] = Field(default=None, description="The filtering for items returned from this query request. The format of the filter string is a sequence of expressions, joined by an optional \"AND\", where each expression is of the form \"field operator value\". Supported fields: - `time`: Uses numerical operators on date values either in terms of milliseconds since Jan 1, 1970 or in RFC 3339 format. Examples: - `time > 1452409200000 AND time <= 1492812924310` - `time >= \"2016-01-10T01:02:03-05:00\"` - `detail.action_detail_case`: Uses the \"has\" operator (:) and either a singular value or a list of allowed action types enclosed in parentheses, separated by a space. To exclude a result from the response, prepend a hyphen (`-`) to the beginning of the filter string. Examples: - `detail.action_detail_case:RENAME` - `detail.action_detail_case:(CREATE RESTORE)` - `-detail.action_detail_case:MOVE` ")
    item_name: Optional[StrictStr] = Field(default=None, description="Return activities for this Drive item. The format is `items/ITEM_ID`.", alias="itemName")
    page_size: Optional[StrictInt] = Field(default=None, description="The minimum number of activities desired in the response; the server attempts to return at least this quantity. The server may also return fewer activities if it has a partial response ready before the request times out. If not set, a default value is used.", alias="pageSize")
    page_token: Optional[StrictStr] = Field(default=None, description="The token identifies which page of results to return. Set this to the next_page_token value returned from a previous query to obtain the following page of results. If not set, the first page of results is returned.", alias="pageToken")
    __properties: ClassVar[List[str]] = ["ancestorName", "consolidationStrategy", "filter", "itemName", "pageSize", "pageToken"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of QueryDriveActivityRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of consolidation_strategy
        if self.consolidation_strategy:
            _dict['consolidationStrategy'] = self.consolidation_strategy.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of QueryDriveActivityRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "ancestorName": obj.get("ancestorName"),
            "consolidationStrategy": ConsolidationStrategy.from_dict(obj["consolidationStrategy"]) if obj.get("consolidationStrategy") is not None else None,
            "filter": obj.get("filter"),
            "itemName": obj.get("itemName"),
            "pageSize": obj.get("pageSize"),
            "pageToken": obj.get("pageToken")
        })
        return _obj



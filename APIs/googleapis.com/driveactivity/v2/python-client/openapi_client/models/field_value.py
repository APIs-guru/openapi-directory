# coding: utf-8

"""
    Drive Activity API

    Provides a historical view of activity in Google Drive.

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.integer import Integer
from openapi_client.models.model_date import ModelDate
from openapi_client.models.selection import Selection
from openapi_client.models.selection_list import SelectionList
from openapi_client.models.single_user import SingleUser
from openapi_client.models.text import Text
from openapi_client.models.text_list import TextList
from openapi_client.models.user_list import UserList
from typing import Optional, Set
from typing_extensions import Self

class FieldValue(BaseModel):
    """
    Contains a value of a Field.
    """ # noqa: E501
    var_date: Optional[ModelDate] = Field(default=None, alias="date")
    integer: Optional[Integer] = None
    selection: Optional[Selection] = None
    selection_list: Optional[SelectionList] = Field(default=None, alias="selectionList")
    text: Optional[Text] = None
    text_list: Optional[TextList] = Field(default=None, alias="textList")
    user: Optional[SingleUser] = None
    user_list: Optional[UserList] = Field(default=None, alias="userList")
    __properties: ClassVar[List[str]] = ["date", "integer", "selection", "selectionList", "text", "textList", "user", "userList"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of FieldValue from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of var_date
        if self.var_date:
            _dict['date'] = self.var_date.to_dict()
        # override the default output from pydantic by calling `to_dict()` of integer
        if self.integer:
            _dict['integer'] = self.integer.to_dict()
        # override the default output from pydantic by calling `to_dict()` of selection
        if self.selection:
            _dict['selection'] = self.selection.to_dict()
        # override the default output from pydantic by calling `to_dict()` of selection_list
        if self.selection_list:
            _dict['selectionList'] = self.selection_list.to_dict()
        # override the default output from pydantic by calling `to_dict()` of text
        if self.text:
            _dict['text'] = self.text.to_dict()
        # override the default output from pydantic by calling `to_dict()` of text_list
        if self.text_list:
            _dict['textList'] = self.text_list.to_dict()
        # override the default output from pydantic by calling `to_dict()` of user
        if self.user:
            _dict['user'] = self.user.to_dict()
        # override the default output from pydantic by calling `to_dict()` of user_list
        if self.user_list:
            _dict['userList'] = self.user_list.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of FieldValue from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "date": ModelDate.from_dict(obj["date"]) if obj.get("date") is not None else None,
            "integer": Integer.from_dict(obj["integer"]) if obj.get("integer") is not None else None,
            "selection": Selection.from_dict(obj["selection"]) if obj.get("selection") is not None else None,
            "selectionList": SelectionList.from_dict(obj["selectionList"]) if obj.get("selectionList") is not None else None,
            "text": Text.from_dict(obj["text"]) if obj.get("text") is not None else None,
            "textList": TextList.from_dict(obj["textList"]) if obj.get("textList") is not None else None,
            "user": SingleUser.from_dict(obj["user"]) if obj.get("user") is not None else None,
            "userList": UserList.from_dict(obj["userList"]) if obj.get("userList") is not None else None
        })
        return _obj



# coding: utf-8

"""
    Drive Activity API

    Provides a historical view of activity in Google Drive.

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.drive_folder import DriveFolder
from openapi_client.models.folder import Folder
from typing import Optional, Set
from typing_extensions import Self

class DriveItemReference(BaseModel):
    """
    A lightweight reference to a Drive item, such as a file or folder.
    """ # noqa: E501
    drive_file: Optional[Dict[str, Any]] = Field(default=None, description="A Drive item which is a file.", alias="driveFile")
    drive_folder: Optional[DriveFolder] = Field(default=None, alias="driveFolder")
    file: Optional[Dict[str, Any]] = Field(default=None, description="This item is deprecated; please see `DriveFile` instead.")
    folder: Optional[Folder] = None
    name: Optional[StrictStr] = Field(default=None, description="The target Drive item. The format is `items/ITEM_ID`.")
    title: Optional[StrictStr] = Field(default=None, description="The title of the Drive item.")
    __properties: ClassVar[List[str]] = ["driveFile", "driveFolder", "file", "folder", "name", "title"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DriveItemReference from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of drive_folder
        if self.drive_folder:
            _dict['driveFolder'] = self.drive_folder.to_dict()
        # override the default output from pydantic by calling `to_dict()` of folder
        if self.folder:
            _dict['folder'] = self.folder.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DriveItemReference from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "driveFile": obj.get("driveFile"),
            "driveFolder": DriveFolder.from_dict(obj["driveFolder"]) if obj.get("driveFolder") is not None else None,
            "file": obj.get("file"),
            "folder": Folder.from_dict(obj["folder"]) if obj.get("folder") is not None else None,
            "name": obj.get("name"),
            "title": obj.get("title")
        })
        return _obj



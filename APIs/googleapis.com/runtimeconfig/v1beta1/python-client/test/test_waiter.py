# coding: utf-8

"""
    Cloud Runtime Configuration API

    The Runtime Configurator allows you to dynamically configure and expose variables through Google Cloud Platform. In addition, you can also set Watchers and Waiters that will watch for changes to your data and return based on certain conditions.

    The version of the OpenAPI document: v1beta1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.waiter import Waiter

class TestWaiter(unittest.TestCase):
    """Waiter unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> Waiter:
        """Test Waiter
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `Waiter`
        """
        model = Waiter()
        if include_optional:
            return Waiter(
                create_time = '',
                done = True,
                error = openapi_client.models.status.Status(
                    code = 56, 
                    details = [
                        {
                            'key' : null
                            }
                        ], 
                    message = '', ),
                failure = openapi_client.models.end_condition.EndCondition(
                    cardinality = openapi_client.models.cardinality.Cardinality(
                        number = 56, 
                        path = '', ), ),
                name = '',
                success = openapi_client.models.end_condition.EndCondition(
                    cardinality = openapi_client.models.cardinality.Cardinality(
                        number = 56, 
                        path = '', ), ),
                timeout = ''
            )
        else:
            return Waiter(
        )
        """

    def testWaiter(self):
        """Test Waiter"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

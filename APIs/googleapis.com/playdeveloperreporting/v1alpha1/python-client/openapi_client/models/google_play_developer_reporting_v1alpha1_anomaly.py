# coding: utf-8

"""
    Google Play Developer Reporting API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v1alpha1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_play_developer_reporting_v1alpha1_dimension_value import GooglePlayDeveloperReportingV1alpha1DimensionValue
from openapi_client.models.google_play_developer_reporting_v1alpha1_metric_value import GooglePlayDeveloperReportingV1alpha1MetricValue
from openapi_client.models.google_play_developer_reporting_v1alpha1_timeline_spec import GooglePlayDeveloperReportingV1alpha1TimelineSpec
from typing import Optional, Set
from typing_extensions import Self

class GooglePlayDeveloperReportingV1alpha1Anomaly(BaseModel):
    """
    Represents an anomaly detected in a dataset. Our anomaly detection systems flag datapoints in a time series that fall outside of and expected range derived from historical data. Although those expected ranges have an upper and a lower bound, we only flag anomalies when the data has become unexpectedly _worse_, which usually corresponds to the case where the metric crosses the upper bound. Multiple contiguous datapoints in a timeline outside of the expected range will be grouped into a single anomaly. Therefore, an anomaly represents effectively a segment of a metric's timeline. The information stored in the `timeline_spec`, `dimensions` and `metric` can be used to fetch a full timeline with extended ragne for context. **Required permissions**: to access this resource, the calling user needs the _View app information (read-only)_ permission for the app.
    """ # noqa: E501
    dimensions: Optional[List[GooglePlayDeveloperReportingV1alpha1DimensionValue]] = Field(default=None, description="Combination of dimensions in which the anomaly was detected.")
    metric: Optional[GooglePlayDeveloperReportingV1alpha1MetricValue] = None
    metric_set: Optional[StrictStr] = Field(default=None, description="Metric set resource where the anomaly was detected.", alias="metricSet")
    name: Optional[StrictStr] = Field(default=None, description="Identifier. Name of the anomaly. Format: apps/{app}/anomalies/{anomaly}")
    timeline_spec: Optional[GooglePlayDeveloperReportingV1alpha1TimelineSpec] = Field(default=None, alias="timelineSpec")
    __properties: ClassVar[List[str]] = ["dimensions", "metric", "metricSet", "name", "timelineSpec"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GooglePlayDeveloperReportingV1alpha1Anomaly from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in dimensions (list)
        _items = []
        if self.dimensions:
            for _item_dimensions in self.dimensions:
                if _item_dimensions:
                    _items.append(_item_dimensions.to_dict())
            _dict['dimensions'] = _items
        # override the default output from pydantic by calling `to_dict()` of metric
        if self.metric:
            _dict['metric'] = self.metric.to_dict()
        # override the default output from pydantic by calling `to_dict()` of timeline_spec
        if self.timeline_spec:
            _dict['timelineSpec'] = self.timeline_spec.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GooglePlayDeveloperReportingV1alpha1Anomaly from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "dimensions": [GooglePlayDeveloperReportingV1alpha1DimensionValue.from_dict(_item) for _item in obj["dimensions"]] if obj.get("dimensions") is not None else None,
            "metric": GooglePlayDeveloperReportingV1alpha1MetricValue.from_dict(obj["metric"]) if obj.get("metric") is not None else None,
            "metricSet": obj.get("metricSet"),
            "name": obj.get("name"),
            "timelineSpec": GooglePlayDeveloperReportingV1alpha1TimelineSpec.from_dict(obj["timelineSpec"]) if obj.get("timelineSpec") is not None else None
        })
        return _obj



# coding: utf-8

"""
    Google Play Developer Reporting API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v1alpha1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_play_developer_reporting_v1alpha1_app_version import GooglePlayDeveloperReportingV1alpha1AppVersion
from openapi_client.models.google_play_developer_reporting_v1alpha1_os_version import GooglePlayDeveloperReportingV1alpha1OsVersion
from openapi_client.models.google_type_decimal import GoogleTypeDecimal
from typing import Optional, Set
from typing_extensions import Self

class GooglePlayDeveloperReportingV1alpha1ErrorIssue(BaseModel):
    """
    A group of related ErrorReports received for an app. Similar error reports are grouped together into issues with a likely identical root cause. **Please note:** this resource is currently in Alpha. There could be changes to the issue grouping that would result in similar but more recent error reports being assigned to different issues. This could also cause some issues disappearing entirely and being replaced by new ones. **Required permissions**: to access this resource, the calling user needs the _View app information (read-only)_ permission for the app.
    """ # noqa: E501
    cause: Optional[StrictStr] = Field(default=None, description="Cause of the issue. Depending on the type this can be either: * APPLICATION_NOT_RESPONDING: the type of ANR that occurred, e.g., 'Input dispatching timed out'. * CRASH: for Java unhandled exception errors, the type of the innermost exception that was thrown, e.g., IllegalArgumentException. For signals in native code, the signal that was raised, e.g. SIGSEGV.")
    distinct_users: Optional[StrictStr] = Field(default=None, description="An estimate of the number of unique users who have experienced this issue (only considering occurrences matching the filters and within the requested time period).", alias="distinctUsers")
    distinct_users_percent: Optional[GoogleTypeDecimal] = Field(default=None, alias="distinctUsersPercent")
    error_report_count: Optional[StrictStr] = Field(default=None, description="The total number of error reports in this issue (only considering occurrences matching the filters and within the requested time period).", alias="errorReportCount")
    first_app_version: Optional[GooglePlayDeveloperReportingV1alpha1AppVersion] = Field(default=None, alias="firstAppVersion")
    first_os_version: Optional[GooglePlayDeveloperReportingV1alpha1OsVersion] = Field(default=None, alias="firstOsVersion")
    issue_uri: Optional[StrictStr] = Field(default=None, description="Link to the issue in Android vitals in the Play Console.", alias="issueUri")
    last_app_version: Optional[GooglePlayDeveloperReportingV1alpha1AppVersion] = Field(default=None, alias="lastAppVersion")
    last_error_report_time: Optional[StrictStr] = Field(default=None, description="Start of the hour during which the last error report in this issue occurred.", alias="lastErrorReportTime")
    last_os_version: Optional[GooglePlayDeveloperReportingV1alpha1OsVersion] = Field(default=None, alias="lastOsVersion")
    location: Optional[StrictStr] = Field(default=None, description="Location where the issue happened. Depending on the type this can be either: * APPLICATION_NOT_RESPONDING: the name of the activity or service that stopped responding. * CRASH: the likely method name that caused the error.")
    name: Optional[StrictStr] = Field(default=None, description="Identifier. The resource name of the issue. Format: apps/{app}/{issue}")
    type: Optional[StrictStr] = Field(default=None, description="Type of the errors grouped in this issue.")
    __properties: ClassVar[List[str]] = ["cause", "distinctUsers", "distinctUsersPercent", "errorReportCount", "firstAppVersion", "firstOsVersion", "issueUri", "lastAppVersion", "lastErrorReportTime", "lastOsVersion", "location", "name", "type"]

    @field_validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['ERROR_TYPE_UNSPECIFIED', 'APPLICATION_NOT_RESPONDING', 'CRASH']):
            raise ValueError("must be one of enum values ('ERROR_TYPE_UNSPECIFIED', 'APPLICATION_NOT_RESPONDING', 'CRASH')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GooglePlayDeveloperReportingV1alpha1ErrorIssue from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of distinct_users_percent
        if self.distinct_users_percent:
            _dict['distinctUsersPercent'] = self.distinct_users_percent.to_dict()
        # override the default output from pydantic by calling `to_dict()` of first_app_version
        if self.first_app_version:
            _dict['firstAppVersion'] = self.first_app_version.to_dict()
        # override the default output from pydantic by calling `to_dict()` of first_os_version
        if self.first_os_version:
            _dict['firstOsVersion'] = self.first_os_version.to_dict()
        # override the default output from pydantic by calling `to_dict()` of last_app_version
        if self.last_app_version:
            _dict['lastAppVersion'] = self.last_app_version.to_dict()
        # override the default output from pydantic by calling `to_dict()` of last_os_version
        if self.last_os_version:
            _dict['lastOsVersion'] = self.last_os_version.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GooglePlayDeveloperReportingV1alpha1ErrorIssue from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "cause": obj.get("cause"),
            "distinctUsers": obj.get("distinctUsers"),
            "distinctUsersPercent": GoogleTypeDecimal.from_dict(obj["distinctUsersPercent"]) if obj.get("distinctUsersPercent") is not None else None,
            "errorReportCount": obj.get("errorReportCount"),
            "firstAppVersion": GooglePlayDeveloperReportingV1alpha1AppVersion.from_dict(obj["firstAppVersion"]) if obj.get("firstAppVersion") is not None else None,
            "firstOsVersion": GooglePlayDeveloperReportingV1alpha1OsVersion.from_dict(obj["firstOsVersion"]) if obj.get("firstOsVersion") is not None else None,
            "issueUri": obj.get("issueUri"),
            "lastAppVersion": GooglePlayDeveloperReportingV1alpha1AppVersion.from_dict(obj["lastAppVersion"]) if obj.get("lastAppVersion") is not None else None,
            "lastErrorReportTime": obj.get("lastErrorReportTime"),
            "lastOsVersion": GooglePlayDeveloperReportingV1alpha1OsVersion.from_dict(obj["lastOsVersion"]) if obj.get("lastOsVersion") is not None else None,
            "location": obj.get("location"),
            "name": obj.get("name"),
            "type": obj.get("type")
        })
        return _obj



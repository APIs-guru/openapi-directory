# coding: utf-8

"""
    Google Play Developer Reporting API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v1alpha1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_type_time_zone import GoogleTypeTimeZone
from typing import Optional, Set
from typing_extensions import Self

class GoogleTypeDateTime(BaseModel):
    """
    Represents civil time (or occasionally physical time). This type can represent a civil time in one of a few possible ways: * When utc_offset is set and time_zone is unset: a civil time on a calendar day with a particular offset from UTC. * When time_zone is set and utc_offset is unset: a civil time on a calendar day in a particular time zone. * When neither time_zone nor utc_offset is set: a civil time on a calendar day in local time. The date is relative to the Proleptic Gregorian Calendar. If year, month, or day are 0, the DateTime is considered not to have a specific year, month, or day respectively. This type may also be used to represent a physical time if all the date and time fields are set and either case of the `time_offset` oneof is set. Consider using `Timestamp` message for physical time instead. If your use case also would like to store the user's timezone, that can be done in another field. This type is more flexible than some applications may want. Make sure to document and validate your application's limitations.
    """ # noqa: E501
    day: Optional[StrictInt] = Field(default=None, description="Optional. Day of month. Must be from 1 to 31 and valid for the year and month, or 0 if specifying a datetime without a day.")
    hours: Optional[StrictInt] = Field(default=None, description="Optional. Hours of day in 24 hour format. Should be from 0 to 23, defaults to 0 (midnight). An API may choose to allow the value \"24:00:00\" for scenarios like business closing time.")
    minutes: Optional[StrictInt] = Field(default=None, description="Optional. Minutes of hour of day. Must be from 0 to 59, defaults to 0.")
    month: Optional[StrictInt] = Field(default=None, description="Optional. Month of year. Must be from 1 to 12, or 0 if specifying a datetime without a month.")
    nanos: Optional[StrictInt] = Field(default=None, description="Optional. Fractions of seconds in nanoseconds. Must be from 0 to 999,999,999, defaults to 0.")
    seconds: Optional[StrictInt] = Field(default=None, description="Optional. Seconds of minutes of the time. Must normally be from 0 to 59, defaults to 0. An API may allow the value 60 if it allows leap-seconds.")
    time_zone: Optional[GoogleTypeTimeZone] = Field(default=None, alias="timeZone")
    utc_offset: Optional[StrictStr] = Field(default=None, description="UTC offset. Must be whole seconds, between -18 hours and +18 hours. For example, a UTC offset of -4:00 would be represented as { seconds: -14400 }.", alias="utcOffset")
    year: Optional[StrictInt] = Field(default=None, description="Optional. Year of date. Must be from 1 to 9999, or 0 if specifying a datetime without a year.")
    __properties: ClassVar[List[str]] = ["day", "hours", "minutes", "month", "nanos", "seconds", "timeZone", "utcOffset", "year"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleTypeDateTime from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of time_zone
        if self.time_zone:
            _dict['timeZone'] = self.time_zone.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleTypeDateTime from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "day": obj.get("day"),
            "hours": obj.get("hours"),
            "minutes": obj.get("minutes"),
            "month": obj.get("month"),
            "nanos": obj.get("nanos"),
            "seconds": obj.get("seconds"),
            "timeZone": GoogleTypeTimeZone.from_dict(obj["timeZone"]) if obj.get("timeZone") is not None else None,
            "utcOffset": obj.get("utcOffset"),
            "year": obj.get("year")
        })
        return _obj



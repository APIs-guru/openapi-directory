# coding: utf-8

"""
    Google Play Developer Reporting API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v1beta1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_play_developer_reporting_v1beta1_dimension_value import GooglePlayDeveloperReportingV1beta1DimensionValue
from openapi_client.models.google_play_developer_reporting_v1beta1_metric_value import GooglePlayDeveloperReportingV1beta1MetricValue
from openapi_client.models.google_type_date_time import GoogleTypeDateTime
from typing import Optional, Set
from typing_extensions import Self

class GooglePlayDeveloperReportingV1beta1MetricsRow(BaseModel):
    """
    Represents a row of dimensions and metrics.
    """ # noqa: E501
    aggregation_period: Optional[StrictStr] = Field(default=None, description="Granularity of the aggregation period of the row.", alias="aggregationPeriod")
    dimensions: Optional[List[GooglePlayDeveloperReportingV1beta1DimensionValue]] = Field(default=None, description="Dimension columns in the row.")
    metrics: Optional[List[GooglePlayDeveloperReportingV1beta1MetricValue]] = Field(default=None, description="Metric columns in the row.")
    start_time: Optional[GoogleTypeDateTime] = Field(default=None, alias="startTime")
    __properties: ClassVar[List[str]] = ["aggregationPeriod", "dimensions", "metrics", "startTime"]

    @field_validator('aggregation_period')
    def aggregation_period_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['AGGREGATION_PERIOD_UNSPECIFIED', 'HOURLY', 'DAILY', 'FULL_RANGE']):
            raise ValueError("must be one of enum values ('AGGREGATION_PERIOD_UNSPECIFIED', 'HOURLY', 'DAILY', 'FULL_RANGE')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GooglePlayDeveloperReportingV1beta1MetricsRow from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in dimensions (list)
        _items = []
        if self.dimensions:
            for _item_dimensions in self.dimensions:
                if _item_dimensions:
                    _items.append(_item_dimensions.to_dict())
            _dict['dimensions'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in metrics (list)
        _items = []
        if self.metrics:
            for _item_metrics in self.metrics:
                if _item_metrics:
                    _items.append(_item_metrics.to_dict())
            _dict['metrics'] = _items
        # override the default output from pydantic by calling `to_dict()` of start_time
        if self.start_time:
            _dict['startTime'] = self.start_time.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GooglePlayDeveloperReportingV1beta1MetricsRow from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "aggregationPeriod": obj.get("aggregationPeriod"),
            "dimensions": [GooglePlayDeveloperReportingV1beta1DimensionValue.from_dict(_item) for _item in obj["dimensions"]] if obj.get("dimensions") is not None else None,
            "metrics": [GooglePlayDeveloperReportingV1beta1MetricValue.from_dict(_item) for _item in obj["metrics"]] if obj.get("metrics") is not None else None,
            "startTime": GoogleTypeDateTime.from_dict(obj["startTime"]) if obj.get("startTime") is not None else None
        })
        return _obj



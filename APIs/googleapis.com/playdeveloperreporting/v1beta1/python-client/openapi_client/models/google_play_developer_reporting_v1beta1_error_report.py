# coding: utf-8

"""
    Google Play Developer Reporting API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v1beta1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_play_developer_reporting_v1beta1_app_version import GooglePlayDeveloperReportingV1beta1AppVersion
from openapi_client.models.google_play_developer_reporting_v1beta1_device_model_summary import GooglePlayDeveloperReportingV1beta1DeviceModelSummary
from openapi_client.models.google_play_developer_reporting_v1beta1_os_version import GooglePlayDeveloperReportingV1beta1OsVersion
from typing import Optional, Set
from typing_extensions import Self

class GooglePlayDeveloperReportingV1beta1ErrorReport(BaseModel):
    """
    An error report received for an app. There reports are produced by the Android platform code when a (potentially fatal) error condition is detected. Identical reports from many users will be deduplicated and coalesced into a single ErrorReport. **Required permissions**: to access this resource, the calling user needs the _View app information (read-only)_ permission for the app.
    """ # noqa: E501
    app_version: Optional[GooglePlayDeveloperReportingV1beta1AppVersion] = Field(default=None, alias="appVersion")
    device_model: Optional[GooglePlayDeveloperReportingV1beta1DeviceModelSummary] = Field(default=None, alias="deviceModel")
    event_time: Optional[StrictStr] = Field(default=None, description="Start of the hour during which the latest event in this error report occurred.", alias="eventTime")
    issue: Optional[StrictStr] = Field(default=None, description="The issue this report was associated with. **Please note:** this resource is currently in Alpha. There could be changes to the issue grouping that would result in similar but more recent error reports being assigned to a different issue.")
    name: Optional[StrictStr] = Field(default=None, description="The resource name of the report. Format: apps/{app}/{report}")
    os_version: Optional[GooglePlayDeveloperReportingV1beta1OsVersion] = Field(default=None, alias="osVersion")
    report_text: Optional[StrictStr] = Field(default=None, description="Textual representation of the error report. These textual reports are produced by the platform. The reports are then sanitized and filtered to remove any potentially sensitive information. Although their format is fairly stable, they are not entirely meant for machine consumption and we cannot guarantee that there won't be subtle changes to the formatting that may break systems trying to parse information out of the reports.", alias="reportText")
    type: Optional[StrictStr] = Field(default=None, description="Type of the error for which this report was generated.")
    vcs_information: Optional[StrictStr] = Field(default=None, description="Version control system information from BUNDLE-METADATA/version-control-info.textproto or META-INF/version-control-info.textproto of the app bundle or APK, respectively.", alias="vcsInformation")
    __properties: ClassVar[List[str]] = ["appVersion", "deviceModel", "eventTime", "issue", "name", "osVersion", "reportText", "type", "vcsInformation"]

    @field_validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['ERROR_TYPE_UNSPECIFIED', 'APPLICATION_NOT_RESPONDING', 'CRASH']):
            raise ValueError("must be one of enum values ('ERROR_TYPE_UNSPECIFIED', 'APPLICATION_NOT_RESPONDING', 'CRASH')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GooglePlayDeveloperReportingV1beta1ErrorReport from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of app_version
        if self.app_version:
            _dict['appVersion'] = self.app_version.to_dict()
        # override the default output from pydantic by calling `to_dict()` of device_model
        if self.device_model:
            _dict['deviceModel'] = self.device_model.to_dict()
        # override the default output from pydantic by calling `to_dict()` of os_version
        if self.os_version:
            _dict['osVersion'] = self.os_version.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GooglePlayDeveloperReportingV1beta1ErrorReport from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "appVersion": GooglePlayDeveloperReportingV1beta1AppVersion.from_dict(obj["appVersion"]) if obj.get("appVersion") is not None else None,
            "deviceModel": GooglePlayDeveloperReportingV1beta1DeviceModelSummary.from_dict(obj["deviceModel"]) if obj.get("deviceModel") is not None else None,
            "eventTime": obj.get("eventTime"),
            "issue": obj.get("issue"),
            "name": obj.get("name"),
            "osVersion": GooglePlayDeveloperReportingV1beta1OsVersion.from_dict(obj["osVersion"]) if obj.get("osVersion") is not None else None,
            "reportText": obj.get("reportText"),
            "type": obj.get("type"),
            "vcsInformation": obj.get("vcsInformation")
        })
        return _obj



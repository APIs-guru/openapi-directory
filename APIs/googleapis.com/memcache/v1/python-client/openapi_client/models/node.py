# coding: utf-8

"""
    Cloud Memorystore for Memcached API

    Google Cloud Memorystore for Memcached API is used for creating and managing Memcached instances in GCP.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.memcache_parameters import MemcacheParameters
from typing import Optional, Set
from typing_extensions import Self

class Node(BaseModel):
    """
    Node
    """ # noqa: E501
    host: Optional[StrictStr] = Field(default=None, description="Output only. Hostname or IP address of the Memcached node used by the clients to connect to the Memcached server on this node.")
    memcache_full_version: Optional[StrictStr] = Field(default=None, description="Output only. The full version of memcached server running on this node. e.g. - memcached-1.5.16", alias="memcacheFullVersion")
    memcache_version: Optional[StrictStr] = Field(default=None, description="Output only. Major version of memcached server running on this node, e.g. MEMCACHE_1_5", alias="memcacheVersion")
    node_id: Optional[StrictStr] = Field(default=None, description="Output only. Identifier of the Memcached node. The node id does not include project or location like the Memcached instance name.", alias="nodeId")
    parameters: Optional[MemcacheParameters] = None
    port: Optional[StrictInt] = Field(default=None, description="Output only. The port number of the Memcached server on this node.")
    state: Optional[StrictStr] = Field(default=None, description="Output only. Current state of the Memcached node.")
    zone: Optional[StrictStr] = Field(default=None, description="Output only. Location (GCP Zone) for the Memcached node.")
    __properties: ClassVar[List[str]] = ["host", "memcacheFullVersion", "memcacheVersion", "nodeId", "parameters", "port", "state", "zone"]

    @field_validator('memcache_version')
    def memcache_version_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['MEMCACHE_VERSION_UNSPECIFIED', 'MEMCACHE_1_5', 'MEMCACHE_1_6_15']):
            raise ValueError("must be one of enum values ('MEMCACHE_VERSION_UNSPECIFIED', 'MEMCACHE_1_5', 'MEMCACHE_1_6_15')")
        return value

    @field_validator('state')
    def state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['STATE_UNSPECIFIED', 'CREATING', 'READY', 'DELETING', 'UPDATING']):
            raise ValueError("must be one of enum values ('STATE_UNSPECIFIED', 'CREATING', 'READY', 'DELETING', 'UPDATING')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Node from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "host",
            "memcache_full_version",
            "memcache_version",
            "node_id",
            "port",
            "state",
            "zone",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of parameters
        if self.parameters:
            _dict['parameters'] = self.parameters.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Node from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "host": obj.get("host"),
            "memcacheFullVersion": obj.get("memcacheFullVersion"),
            "memcacheVersion": obj.get("memcacheVersion"),
            "nodeId": obj.get("nodeId"),
            "parameters": MemcacheParameters.from_dict(obj["parameters"]) if obj.get("parameters") is not None else None,
            "port": obj.get("port"),
            "state": obj.get("state"),
            "zone": obj.get("zone")
        })
        return _obj



# coding: utf-8

"""
    Cloud Memorystore for Memcached API

    Google Cloud Memorystore for Memcached API is used for creating and managing Memcached instances in GCP.

    The version of the OpenAPI document: v1beta2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.instance import Instance

class TestInstance(unittest.TestCase):
    """Instance unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> Instance:
        """Test Instance
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `Instance`
        """
        model = Instance()
        if include_optional:
            return Instance(
                authorized_network = '',
                create_time = '',
                discovery_endpoint = '',
                display_name = '',
                instance_messages = [
                    openapi_client.models.instance_message.InstanceMessage(
                        code = 'CODE_UNSPECIFIED', 
                        message = '', )
                    ],
                labels = {
                    'key' : ''
                    },
                maintenance_policy = openapi_client.models.google_cloud_memcache_v1beta2_maintenance_policy.GoogleCloudMemcacheV1beta2MaintenancePolicy(
                    create_time = '', 
                    description = '', 
                    update_time = '', 
                    weekly_maintenance_window = [
                        openapi_client.models.weekly_maintenance_window.WeeklyMaintenanceWindow(
                            day = 'DAY_OF_WEEK_UNSPECIFIED', 
                            duration = '', 
                            start_time = openapi_client.models.time_of_day.TimeOfDay(
                                hours = 56, 
                                minutes = 56, 
                                nanos = 56, 
                                seconds = 56, ), )
                        ], ),
                maintenance_schedule = openapi_client.models.maintenance_schedule.MaintenanceSchedule(
                    end_time = '', 
                    schedule_deadline_time = '', 
                    start_time = '', ),
                memcache_full_version = '',
                memcache_nodes = [
                    openapi_client.models.node.Node(
                        host = '', 
                        memcache_full_version = '', 
                        memcache_version = 'MEMCACHE_VERSION_UNSPECIFIED', 
                        node_id = '', 
                        parameters = openapi_client.models.memcache_parameters.MemcacheParameters(
                            id = '', 
                            params = {
                                'key' : ''
                                }, ), 
                        port = 56, 
                        state = 'STATE_UNSPECIFIED', 
                        update_available = True, 
                        zone = '', )
                    ],
                memcache_version = 'MEMCACHE_VERSION_UNSPECIFIED',
                name = '',
                node_config = openapi_client.models.node_config.NodeConfig(
                    cpu_count = 56, 
                    memory_size_mb = 56, ),
                node_count = 56,
                parameters = openapi_client.models.memcache_parameters.MemcacheParameters(
                    id = '', 
                    params = {
                        'key' : ''
                        }, ),
                reserved_ip_range_id = [
                    ''
                    ],
                state = 'STATE_UNSPECIFIED',
                update_available = True,
                update_time = '',
                zones = [
                    ''
                    ]
            )
        else:
            return Instance(
        )
        """

    def testInstance(self):
        """Test Instance"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

# coding: utf-8

"""
    VMware Engine API

    The Google VMware Engine API lets you programmatically manage VMware environments.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.network_service import NetworkService
from typing import Optional, Set
from typing_extensions import Self

class NetworkPolicy(BaseModel):
    """
    Represents a network policy resource. Network policies are regional resources. You can use a network policy to enable or disable internet access and external IP access. Network policies are associated with a VMware Engine network, which might span across regions. For a given region, a network policy applies to all private clouds in the VMware Engine network associated with the policy.
    """ # noqa: E501
    create_time: Optional[StrictStr] = Field(default=None, description="Output only. Creation time of this resource.", alias="createTime")
    description: Optional[StrictStr] = Field(default=None, description="Optional. User-provided description for this network policy.")
    edge_services_cidr: Optional[StrictStr] = Field(default=None, description="Required. IP address range in CIDR notation used to create internet access and external IP access. An RFC 1918 CIDR block, with a \"/26\" prefix, is required. The range cannot overlap with any prefixes either in the consumer VPC network or in use by the private clouds attached to that VPC network.", alias="edgeServicesCidr")
    external_ip: Optional[NetworkService] = Field(default=None, alias="externalIp")
    internet_access: Optional[NetworkService] = Field(default=None, alias="internetAccess")
    name: Optional[StrictStr] = Field(default=None, description="Output only. The resource name of this network policy. Resource names are schemeless URIs that follow the conventions in https://cloud.google.com/apis/design/resource_names. For example: `projects/my-project/locations/us-central1/networkPolicies/my-network-policy`")
    uid: Optional[StrictStr] = Field(default=None, description="Output only. System-generated unique identifier for the resource.")
    update_time: Optional[StrictStr] = Field(default=None, description="Output only. Last update time of this resource.", alias="updateTime")
    vmware_engine_network: Optional[StrictStr] = Field(default=None, description="Optional. The relative resource name of the VMware Engine network. Specify the name in the following form: `projects/{project}/locations/{location}/vmwareEngineNetworks/{vmware_engine_network_id}` where `{project}` can either be a project number or a project ID.", alias="vmwareEngineNetwork")
    vmware_engine_network_canonical: Optional[StrictStr] = Field(default=None, description="Output only. The canonical name of the VMware Engine network in the form: `projects/{project_number}/locations/{location}/vmwareEngineNetworks/{vmware_engine_network_id}`", alias="vmwareEngineNetworkCanonical")
    __properties: ClassVar[List[str]] = ["createTime", "description", "edgeServicesCidr", "externalIp", "internetAccess", "name", "uid", "updateTime", "vmwareEngineNetwork", "vmwareEngineNetworkCanonical"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of NetworkPolicy from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "create_time",
            "name",
            "uid",
            "update_time",
            "vmware_engine_network_canonical",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of external_ip
        if self.external_ip:
            _dict['externalIp'] = self.external_ip.to_dict()
        # override the default output from pydantic by calling `to_dict()` of internet_access
        if self.internet_access:
            _dict['internetAccess'] = self.internet_access.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of NetworkPolicy from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "createTime": obj.get("createTime"),
            "description": obj.get("description"),
            "edgeServicesCidr": obj.get("edgeServicesCidr"),
            "externalIp": NetworkService.from_dict(obj["externalIp"]) if obj.get("externalIp") is not None else None,
            "internetAccess": NetworkService.from_dict(obj["internetAccess"]) if obj.get("internetAccess") is not None else None,
            "name": obj.get("name"),
            "uid": obj.get("uid"),
            "updateTime": obj.get("updateTime"),
            "vmwareEngineNetwork": obj.get("vmwareEngineNetwork"),
            "vmwareEngineNetworkCanonical": obj.get("vmwareEngineNetworkCanonical")
        })
        return _obj



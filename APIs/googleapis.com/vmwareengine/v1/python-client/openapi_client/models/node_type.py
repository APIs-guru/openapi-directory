# coding: utf-8

"""
    VMware Engine API

    The Google VMware Engine API lets you programmatically manage VMware environments.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class NodeType(BaseModel):
    """
    Describes node type.
    """ # noqa: E501
    available_custom_core_counts: Optional[List[StrictInt]] = Field(default=None, description="Output only. List of possible values of custom core count.", alias="availableCustomCoreCounts")
    capabilities: Optional[List[StrictStr]] = Field(default=None, description="Output only. Capabilities of this node type.")
    disk_size_gb: Optional[StrictInt] = Field(default=None, description="Output only. The amount of storage available, defined in GB.", alias="diskSizeGb")
    display_name: Optional[StrictStr] = Field(default=None, description="Output only. The friendly name for this node type. For example: ve1-standard-72", alias="displayName")
    families: Optional[List[StrictStr]] = Field(default=None, description="Output only. Families of the node type. For node types to be in the same cluster they must share at least one element in the `families`.")
    kind: Optional[StrictStr] = Field(default=None, description="Output only. The type of the resource.")
    memory_gb: Optional[StrictInt] = Field(default=None, description="Output only. The amount of physical memory available, defined in GB.", alias="memoryGb")
    name: Optional[StrictStr] = Field(default=None, description="Output only. The resource name of this node type. Resource names are schemeless URIs that follow the conventions in https://cloud.google.com/apis/design/resource_names. For example: `projects/my-proj/locations/us-central1-a/nodeTypes/standard-72`")
    node_type_id: Optional[StrictStr] = Field(default=None, description="Output only. The canonical identifier of the node type (corresponds to the `NodeType`). For example: standard-72.", alias="nodeTypeId")
    total_core_count: Optional[StrictInt] = Field(default=None, description="Output only. The total number of CPU cores in a single node.", alias="totalCoreCount")
    virtual_cpu_count: Optional[StrictInt] = Field(default=None, description="Output only. The total number of virtual CPUs in a single node.", alias="virtualCpuCount")
    __properties: ClassVar[List[str]] = ["availableCustomCoreCounts", "capabilities", "diskSizeGb", "displayName", "families", "kind", "memoryGb", "name", "nodeTypeId", "totalCoreCount", "virtualCpuCount"]

    @field_validator('capabilities')
    def capabilities_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        for i in value:
            if i not in set(['CAPABILITY_UNSPECIFIED', 'STRETCHED_CLUSTERS']):
                raise ValueError("each list item must be one of ('CAPABILITY_UNSPECIFIED', 'STRETCHED_CLUSTERS')")
        return value

    @field_validator('kind')
    def kind_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['KIND_UNSPECIFIED', 'STANDARD', 'STORAGE_ONLY']):
            raise ValueError("must be one of enum values ('KIND_UNSPECIFIED', 'STANDARD', 'STORAGE_ONLY')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of NodeType from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "available_custom_core_counts",
            "capabilities",
            "disk_size_gb",
            "display_name",
            "families",
            "kind",
            "memory_gb",
            "name",
            "node_type_id",
            "total_core_count",
            "virtual_cpu_count",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of NodeType from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "availableCustomCoreCounts": obj.get("availableCustomCoreCounts"),
            "capabilities": obj.get("capabilities"),
            "diskSizeGb": obj.get("diskSizeGb"),
            "displayName": obj.get("displayName"),
            "families": obj.get("families"),
            "kind": obj.get("kind"),
            "memoryGb": obj.get("memoryGb"),
            "name": obj.get("name"),
            "nodeTypeId": obj.get("nodeTypeId"),
            "totalCoreCount": obj.get("totalCoreCount"),
            "virtualCpuCount": obj.get("virtualCpuCount")
        })
        return _obj



# coding: utf-8

"""
    VMware Engine API

    The Google VMware Engine API lets you programmatically manage VMware environments.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class PeeringRoute(BaseModel):
    """
    Exchanged network peering route.
    """ # noqa: E501
    dest_range: Optional[StrictStr] = Field(default=None, description="Output only. Destination range of the peering route in CIDR notation.", alias="destRange")
    direction: Optional[StrictStr] = Field(default=None, description="Output only. Direction of the routes exchanged with the peer network, from the VMware Engine network perspective: * Routes of direction `INCOMING` are imported from the peer network. * Routes of direction `OUTGOING` are exported from the intranet VPC network of the VMware Engine network.")
    imported: Optional[StrictBool] = Field(default=None, description="Output only. True if the peering route has been imported from a peered VPC network; false otherwise. The import happens if the field `NetworkPeering.importCustomRoutes` is true for this network, `NetworkPeering.exportCustomRoutes` is true for the peer VPC network, and the import does not result in a route conflict.")
    next_hop_region: Optional[StrictStr] = Field(default=None, description="Output only. Region containing the next hop of the peering route. This field only applies to dynamic routes in the peer VPC network.", alias="nextHopRegion")
    priority: Optional[StrictStr] = Field(default=None, description="Output only. The priority of the peering route.")
    type: Optional[StrictStr] = Field(default=None, description="Output only. Type of the route in the peer VPC network.")
    __properties: ClassVar[List[str]] = ["destRange", "direction", "imported", "nextHopRegion", "priority", "type"]

    @field_validator('direction')
    def direction_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['DIRECTION_UNSPECIFIED', 'INCOMING', 'OUTGOING']):
            raise ValueError("must be one of enum values ('DIRECTION_UNSPECIFIED', 'INCOMING', 'OUTGOING')")
        return value

    @field_validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['TYPE_UNSPECIFIED', 'DYNAMIC_PEERING_ROUTE', 'STATIC_PEERING_ROUTE', 'SUBNET_PEERING_ROUTE']):
            raise ValueError("must be one of enum values ('TYPE_UNSPECIFIED', 'DYNAMIC_PEERING_ROUTE', 'STATIC_PEERING_ROUTE', 'SUBNET_PEERING_ROUTE')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PeeringRoute from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "dest_range",
            "direction",
            "imported",
            "next_hop_region",
            "priority",
            "type",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PeeringRoute from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "destRange": obj.get("destRange"),
            "direction": obj.get("direction"),
            "imported": obj.get("imported"),
            "nextHopRegion": obj.get("nextHopRegion"),
            "priority": obj.get("priority"),
            "type": obj.get("type")
        })
        return _obj



# coding: utf-8

"""
    VMware Engine API

    The Google VMware Engine API lets you programmatically manage VMware environments.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.node_type_config import NodeTypeConfig
from openapi_client.models.stretched_cluster_config import StretchedClusterConfig
from typing import Optional, Set
from typing_extensions import Self

class ManagementCluster(BaseModel):
    """
    Management cluster configuration.
    """ # noqa: E501
    cluster_id: Optional[StrictStr] = Field(default=None, description="Required. The user-provided identifier of the new `Cluster`. The identifier must meet the following requirements: * Only contains 1-63 alphanumeric characters and hyphens * Begins with an alphabetical character * Ends with a non-hyphen character * Not formatted as a UUID * Complies with [RFC 1034](https://datatracker.ietf.org/doc/html/rfc1034) (section 3.5)", alias="clusterId")
    node_type_configs: Optional[Dict[str, NodeTypeConfig]] = Field(default=None, description="Required. The map of cluster node types in this cluster, where the key is canonical identifier of the node type (corresponds to the `NodeType`).", alias="nodeTypeConfigs")
    stretched_cluster_config: Optional[StretchedClusterConfig] = Field(default=None, alias="stretchedClusterConfig")
    __properties: ClassVar[List[str]] = ["clusterId", "nodeTypeConfigs", "stretchedClusterConfig"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ManagementCluster from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each value in node_type_configs (dict)
        _field_dict = {}
        if self.node_type_configs:
            for _key_node_type_configs in self.node_type_configs:
                if self.node_type_configs[_key_node_type_configs]:
                    _field_dict[_key_node_type_configs] = self.node_type_configs[_key_node_type_configs].to_dict()
            _dict['nodeTypeConfigs'] = _field_dict
        # override the default output from pydantic by calling `to_dict()` of stretched_cluster_config
        if self.stretched_cluster_config:
            _dict['stretchedClusterConfig'] = self.stretched_cluster_config.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ManagementCluster from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "clusterId": obj.get("clusterId"),
            "nodeTypeConfigs": dict(
                (_k, NodeTypeConfig.from_dict(_v))
                for _k, _v in obj["nodeTypeConfigs"].items()
            )
            if obj.get("nodeTypeConfigs") is not None
            else None,
            "stretchedClusterConfig": StretchedClusterConfig.from_dict(obj["stretchedClusterConfig"]) if obj.get("stretchedClusterConfig") is not None else None
        })
        return _obj



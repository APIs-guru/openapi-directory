# coding: utf-8

"""
    VMware Engine API

    The Google VMware Engine API lets you programmatically manage VMware environments.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.hcx import Hcx
from openapi_client.models.management_cluster import ManagementCluster
from openapi_client.models.network_config import NetworkConfig
from openapi_client.models.nsx import Nsx
from openapi_client.models.vcenter import Vcenter
from typing import Optional, Set
from typing_extensions import Self

class PrivateCloud(BaseModel):
    """
    Represents a private cloud resource. Private clouds of type `STANDARD` and `TIME_LIMITED` are zonal resources, `STRETCHED` private clouds are regional.
    """ # noqa: E501
    create_time: Optional[StrictStr] = Field(default=None, description="Output only. Creation time of this resource.", alias="createTime")
    delete_time: Optional[StrictStr] = Field(default=None, description="Output only. Time when the resource was scheduled for deletion.", alias="deleteTime")
    description: Optional[StrictStr] = Field(default=None, description="User-provided description for this private cloud.")
    expire_time: Optional[StrictStr] = Field(default=None, description="Output only. Time when the resource will be irreversibly deleted.", alias="expireTime")
    hcx: Optional[Hcx] = None
    management_cluster: Optional[ManagementCluster] = Field(default=None, alias="managementCluster")
    name: Optional[StrictStr] = Field(default=None, description="Output only. The resource name of this private cloud. Resource names are schemeless URIs that follow the conventions in https://cloud.google.com/apis/design/resource_names. For example: `projects/my-project/locations/us-central1-a/privateClouds/my-cloud`")
    network_config: Optional[NetworkConfig] = Field(default=None, alias="networkConfig")
    nsx: Optional[Nsx] = None
    state: Optional[StrictStr] = Field(default=None, description="Output only. State of the resource. New values may be added to this enum when appropriate.")
    type: Optional[StrictStr] = Field(default=None, description="Optional. Type of the private cloud. Defaults to STANDARD.")
    uid: Optional[StrictStr] = Field(default=None, description="Output only. System-generated unique identifier for the resource.")
    update_time: Optional[StrictStr] = Field(default=None, description="Output only. Last update time of this resource.", alias="updateTime")
    vcenter: Optional[Vcenter] = None
    __properties: ClassVar[List[str]] = ["createTime", "deleteTime", "description", "expireTime", "hcx", "managementCluster", "name", "networkConfig", "nsx", "state", "type", "uid", "updateTime", "vcenter"]

    @field_validator('state')
    def state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['STATE_UNSPECIFIED', 'ACTIVE', 'CREATING', 'UPDATING', 'FAILED', 'DELETED', 'PURGING']):
            raise ValueError("must be one of enum values ('STATE_UNSPECIFIED', 'ACTIVE', 'CREATING', 'UPDATING', 'FAILED', 'DELETED', 'PURGING')")
        return value

    @field_validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['STANDARD', 'TIME_LIMITED', 'STRETCHED']):
            raise ValueError("must be one of enum values ('STANDARD', 'TIME_LIMITED', 'STRETCHED')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PrivateCloud from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "create_time",
            "delete_time",
            "expire_time",
            "name",
            "state",
            "uid",
            "update_time",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of hcx
        if self.hcx:
            _dict['hcx'] = self.hcx.to_dict()
        # override the default output from pydantic by calling `to_dict()` of management_cluster
        if self.management_cluster:
            _dict['managementCluster'] = self.management_cluster.to_dict()
        # override the default output from pydantic by calling `to_dict()` of network_config
        if self.network_config:
            _dict['networkConfig'] = self.network_config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of nsx
        if self.nsx:
            _dict['nsx'] = self.nsx.to_dict()
        # override the default output from pydantic by calling `to_dict()` of vcenter
        if self.vcenter:
            _dict['vcenter'] = self.vcenter.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PrivateCloud from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "createTime": obj.get("createTime"),
            "deleteTime": obj.get("deleteTime"),
            "description": obj.get("description"),
            "expireTime": obj.get("expireTime"),
            "hcx": Hcx.from_dict(obj["hcx"]) if obj.get("hcx") is not None else None,
            "managementCluster": ManagementCluster.from_dict(obj["managementCluster"]) if obj.get("managementCluster") is not None else None,
            "name": obj.get("name"),
            "networkConfig": NetworkConfig.from_dict(obj["networkConfig"]) if obj.get("networkConfig") is not None else None,
            "nsx": Nsx.from_dict(obj["nsx"]) if obj.get("nsx") is not None else None,
            "state": obj.get("state"),
            "type": obj.get("type"),
            "uid": obj.get("uid"),
            "updateTime": obj.get("updateTime"),
            "vcenter": Vcenter.from_dict(obj["vcenter"]) if obj.get("vcenter") is not None else None
        })
        return _obj



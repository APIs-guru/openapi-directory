# coding: utf-8

"""
    VMware Engine API

    The Google VMware Engine API lets you programmatically manage VMware environments.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.ip_range import IpRange
from typing import Optional, Set
from typing_extensions import Self

class ExternalAccessRule(BaseModel):
    """
    External access firewall rules for filtering incoming traffic destined to `ExternalAddress` resources.
    """ # noqa: E501
    action: Optional[StrictStr] = Field(default=None, description="The action that the external access rule performs.")
    create_time: Optional[StrictStr] = Field(default=None, description="Output only. Creation time of this resource.", alias="createTime")
    description: Optional[StrictStr] = Field(default=None, description="User-provided description for this external access rule.")
    destination_ip_ranges: Optional[List[IpRange]] = Field(default=None, description="If destination ranges are specified, the external access rule applies only to the traffic that has a destination IP address in these ranges. The specified IP addresses must have reserved external IP addresses in the scope of the parent network policy. To match all external IP addresses in the scope of the parent network policy, specify `0.0.0.0/0`. To match a specific external IP address, specify it using the `IpRange.external_address` property.", alias="destinationIpRanges")
    destination_ports: Optional[List[StrictStr]] = Field(default=None, description="A list of destination ports to which the external access rule applies. This field is only applicable for the UDP or TCP protocol. Each entry must be either an integer or a range. For example: `[\"22\"]`, `[\"80\",\"443\"]`, or `[\"12345-12349\"]`. To match all destination ports, specify `[\"0-65535\"]`.", alias="destinationPorts")
    ip_protocol: Optional[StrictStr] = Field(default=None, description="The IP protocol to which the external access rule applies. This value can be one of the following three protocol strings (not case-sensitive): `tcp`, `udp`, or `icmp`.", alias="ipProtocol")
    name: Optional[StrictStr] = Field(default=None, description="Output only. The resource name of this external access rule. Resource names are schemeless URIs that follow the conventions in https://cloud.google.com/apis/design/resource_names. For example: `projects/my-project/locations/us-central1/networkPolicies/my-policy/externalAccessRules/my-rule`")
    priority: Optional[StrictInt] = Field(default=None, description="External access rule priority, which determines the external access rule to use when multiple rules apply. If multiple rules have the same priority, their ordering is non-deterministic. If specific ordering is required, assign unique priorities to enforce such ordering. The external access rule priority is an integer from 100 to 4096, both inclusive. Lower integers indicate higher precedence. For example, a rule with priority `100` has higher precedence than a rule with priority `101`.")
    source_ip_ranges: Optional[List[IpRange]] = Field(default=None, description="If source ranges are specified, the external access rule applies only to traffic that has a source IP address in these ranges. These ranges can either be expressed in the CIDR format or as an IP address. As only inbound rules are supported, `ExternalAddress` resources cannot be the source IP addresses of an external access rule. To match all source addresses, specify `0.0.0.0/0`.", alias="sourceIpRanges")
    source_ports: Optional[List[StrictStr]] = Field(default=None, description="A list of source ports to which the external access rule applies. This field is only applicable for the UDP or TCP protocol. Each entry must be either an integer or a range. For example: `[\"22\"]`, `[\"80\",\"443\"]`, or `[\"12345-12349\"]`. To match all source ports, specify `[\"0-65535\"]`.", alias="sourcePorts")
    state: Optional[StrictStr] = Field(default=None, description="Output only. The state of the resource.")
    uid: Optional[StrictStr] = Field(default=None, description="Output only. System-generated unique identifier for the resource.")
    update_time: Optional[StrictStr] = Field(default=None, description="Output only. Last update time of this resource.", alias="updateTime")
    __properties: ClassVar[List[str]] = ["action", "createTime", "description", "destinationIpRanges", "destinationPorts", "ipProtocol", "name", "priority", "sourceIpRanges", "sourcePorts", "state", "uid", "updateTime"]

    @field_validator('action')
    def action_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['ACTION_UNSPECIFIED', 'ALLOW', 'DENY']):
            raise ValueError("must be one of enum values ('ACTION_UNSPECIFIED', 'ALLOW', 'DENY')")
        return value

    @field_validator('state')
    def state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['STATE_UNSPECIFIED', 'ACTIVE', 'CREATING', 'UPDATING', 'DELETING']):
            raise ValueError("must be one of enum values ('STATE_UNSPECIFIED', 'ACTIVE', 'CREATING', 'UPDATING', 'DELETING')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ExternalAccessRule from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "create_time",
            "name",
            "state",
            "uid",
            "update_time",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in destination_ip_ranges (list)
        _items = []
        if self.destination_ip_ranges:
            for _item_destination_ip_ranges in self.destination_ip_ranges:
                if _item_destination_ip_ranges:
                    _items.append(_item_destination_ip_ranges.to_dict())
            _dict['destinationIpRanges'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in source_ip_ranges (list)
        _items = []
        if self.source_ip_ranges:
            for _item_source_ip_ranges in self.source_ip_ranges:
                if _item_source_ip_ranges:
                    _items.append(_item_source_ip_ranges.to_dict())
            _dict['sourceIpRanges'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ExternalAccessRule from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "action": obj.get("action"),
            "createTime": obj.get("createTime"),
            "description": obj.get("description"),
            "destinationIpRanges": [IpRange.from_dict(_item) for _item in obj["destinationIpRanges"]] if obj.get("destinationIpRanges") is not None else None,
            "destinationPorts": obj.get("destinationPorts"),
            "ipProtocol": obj.get("ipProtocol"),
            "name": obj.get("name"),
            "priority": obj.get("priority"),
            "sourceIpRanges": [IpRange.from_dict(_item) for _item in obj["sourceIpRanges"]] if obj.get("sourceIpRanges") is not None else None,
            "sourcePorts": obj.get("sourcePorts"),
            "state": obj.get("state"),
            "uid": obj.get("uid"),
            "updateTime": obj.get("updateTime")
        })
        return _obj



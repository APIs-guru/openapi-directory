# coding: utf-8

"""
    VMware Engine API

    The Google VMware Engine API lets you programmatically manage VMware environments.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class PrivateConnection(BaseModel):
    """
    Private connection resource that provides connectivity for VMware Engine private clouds.
    """ # noqa: E501
    create_time: Optional[StrictStr] = Field(default=None, description="Output only. Creation time of this resource.", alias="createTime")
    description: Optional[StrictStr] = Field(default=None, description="Optional. User-provided description for this private connection.")
    name: Optional[StrictStr] = Field(default=None, description="Output only. The resource name of the private connection. Resource names are schemeless URIs that follow the conventions in https://cloud.google.com/apis/design/resource_names. For example: `projects/my-project/locations/us-central1/privateConnections/my-connection`")
    peering_id: Optional[StrictStr] = Field(default=None, description="Output only. VPC network peering id between given network VPC and VMwareEngineNetwork.", alias="peeringId")
    peering_state: Optional[StrictStr] = Field(default=None, description="Output only. Peering state between service network and VMware Engine network.", alias="peeringState")
    routing_mode: Optional[StrictStr] = Field(default=None, description="Optional. Routing Mode. Default value is set to GLOBAL. For type = PRIVATE_SERVICE_ACCESS, this field can be set to GLOBAL or REGIONAL, for other types only GLOBAL is supported.", alias="routingMode")
    service_network: Optional[StrictStr] = Field(default=None, description="Required. Service network to create private connection. Specify the name in the following form: `projects/{project}/global/networks/{network_id}` For type = PRIVATE_SERVICE_ACCESS, this field represents servicenetworking VPC, e.g. projects/project-tp/global/networks/servicenetworking. For type = NETAPP_CLOUD_VOLUME, this field represents NetApp service VPC, e.g. projects/project-tp/global/networks/netapp-tenant-vpc. For type = DELL_POWERSCALE, this field represent Dell service VPC, e.g. projects/project-tp/global/networks/dell-tenant-vpc. For type= THIRD_PARTY_SERVICE, this field could represent a consumer VPC or any other producer VPC to which the VMware Engine Network needs to be connected, e.g. projects/project/global/networks/vpc.", alias="serviceNetwork")
    state: Optional[StrictStr] = Field(default=None, description="Output only. State of the private connection.")
    type: Optional[StrictStr] = Field(default=None, description="Required. Private connection type.")
    uid: Optional[StrictStr] = Field(default=None, description="Output only. System-generated unique identifier for the resource.")
    update_time: Optional[StrictStr] = Field(default=None, description="Output only. Last update time of this resource.", alias="updateTime")
    vmware_engine_network: Optional[StrictStr] = Field(default=None, description="Required. The relative resource name of Legacy VMware Engine network. Specify the name in the following form: `projects/{project}/locations/{location}/vmwareEngineNetworks/{vmware_engine_network_id}` where `{project}`, `{location}` will be same as specified in private connection resource name and `{vmware_engine_network_id}` will be in the form of `{location}`-default e.g. projects/project/locations/us-central1/vmwareEngineNetworks/us-central1-default.", alias="vmwareEngineNetwork")
    vmware_engine_network_canonical: Optional[StrictStr] = Field(default=None, description="Output only. The canonical name of the VMware Engine network in the form: `projects/{project_number}/locations/{location}/vmwareEngineNetworks/{vmware_engine_network_id}`", alias="vmwareEngineNetworkCanonical")
    __properties: ClassVar[List[str]] = ["createTime", "description", "name", "peeringId", "peeringState", "routingMode", "serviceNetwork", "state", "type", "uid", "updateTime", "vmwareEngineNetwork", "vmwareEngineNetworkCanonical"]

    @field_validator('peering_state')
    def peering_state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['PEERING_STATE_UNSPECIFIED', 'PEERING_ACTIVE', 'PEERING_INACTIVE']):
            raise ValueError("must be one of enum values ('PEERING_STATE_UNSPECIFIED', 'PEERING_ACTIVE', 'PEERING_INACTIVE')")
        return value

    @field_validator('routing_mode')
    def routing_mode_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['ROUTING_MODE_UNSPECIFIED', 'GLOBAL', 'REGIONAL']):
            raise ValueError("must be one of enum values ('ROUTING_MODE_UNSPECIFIED', 'GLOBAL', 'REGIONAL')")
        return value

    @field_validator('state')
    def state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['STATE_UNSPECIFIED', 'CREATING', 'ACTIVE', 'UPDATING', 'DELETING', 'UNPROVISIONED', 'FAILED']):
            raise ValueError("must be one of enum values ('STATE_UNSPECIFIED', 'CREATING', 'ACTIVE', 'UPDATING', 'DELETING', 'UNPROVISIONED', 'FAILED')")
        return value

    @field_validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['TYPE_UNSPECIFIED', 'PRIVATE_SERVICE_ACCESS', 'NETAPP_CLOUD_VOLUMES', 'DELL_POWERSCALE', 'THIRD_PARTY_SERVICE']):
            raise ValueError("must be one of enum values ('TYPE_UNSPECIFIED', 'PRIVATE_SERVICE_ACCESS', 'NETAPP_CLOUD_VOLUMES', 'DELL_POWERSCALE', 'THIRD_PARTY_SERVICE')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PrivateConnection from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "create_time",
            "name",
            "peering_id",
            "peering_state",
            "state",
            "uid",
            "update_time",
            "vmware_engine_network_canonical",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PrivateConnection from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "createTime": obj.get("createTime"),
            "description": obj.get("description"),
            "name": obj.get("name"),
            "peeringId": obj.get("peeringId"),
            "peeringState": obj.get("peeringState"),
            "routingMode": obj.get("routingMode"),
            "serviceNetwork": obj.get("serviceNetwork"),
            "state": obj.get("state"),
            "type": obj.get("type"),
            "uid": obj.get("uid"),
            "updateTime": obj.get("updateTime"),
            "vmwareEngineNetwork": obj.get("vmwareEngineNetwork"),
            "vmwareEngineNetworkCanonical": obj.get("vmwareEngineNetworkCanonical")
        })
        return _obj



# coding: utf-8

"""
    VMware Engine API

    The Google VMware Engine API lets you programmatically manage VMware environments.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class NetworkPeering(BaseModel):
    """
    Details of a network peering.
    """ # noqa: E501
    create_time: Optional[StrictStr] = Field(default=None, description="Output only. Creation time of this resource.", alias="createTime")
    description: Optional[StrictStr] = Field(default=None, description="Optional. User-provided description for this network peering.")
    exchange_subnet_routes: Optional[StrictBool] = Field(default=None, description="Optional. True if full mesh connectivity is created and managed automatically between peered networks; false otherwise. Currently this field is always true because Google Compute Engine automatically creates and manages subnetwork routes between two VPC networks when peering state is 'ACTIVE'.", alias="exchangeSubnetRoutes")
    export_custom_routes: Optional[StrictBool] = Field(default=None, description="Optional. True if custom routes are exported to the peered network; false otherwise. The default value is true.", alias="exportCustomRoutes")
    export_custom_routes_with_public_ip: Optional[StrictBool] = Field(default=None, description="Optional. True if all subnet routes with a public IP address range are exported; false otherwise. The default value is true. IPv4 special-use ranges (https://en.wikipedia.org/wiki/IPv4#Special_addresses) are always exported to peers and are not controlled by this field.", alias="exportCustomRoutesWithPublicIp")
    import_custom_routes: Optional[StrictBool] = Field(default=None, description="Optional. True if custom routes are imported from the peered network; false otherwise. The default value is true.", alias="importCustomRoutes")
    import_custom_routes_with_public_ip: Optional[StrictBool] = Field(default=None, description="Optional. True if all subnet routes with public IP address range are imported; false otherwise. The default value is true. IPv4 special-use ranges (https://en.wikipedia.org/wiki/IPv4#Special_addresses) are always imported to peers and are not controlled by this field.", alias="importCustomRoutesWithPublicIp")
    name: Optional[StrictStr] = Field(default=None, description="Output only. The resource name of the network peering. NetworkPeering is a global resource and location can only be global. Resource names are scheme-less URIs that follow the conventions in https://cloud.google.com/apis/design/resource_names. For example: `projects/my-project/locations/global/networkPeerings/my-peering`")
    peer_mtu: Optional[StrictInt] = Field(default=None, description="Optional. Maximum transmission unit (MTU) in bytes. The default value is `1500`. If a value of `0` is provided for this field, VMware Engine uses the default value instead.", alias="peerMtu")
    peer_network: Optional[StrictStr] = Field(default=None, description="Required. The relative resource name of the network to peer with a standard VMware Engine network. The provided network can be a consumer VPC network or another standard VMware Engine network. If the `peer_network_type` is VMWARE_ENGINE_NETWORK, specify the name in the form: `projects/{project}/locations/global/vmwareEngineNetworks/{vmware_engine_network_id}`. Otherwise specify the name in the form: `projects/{project}/global/networks/{network_id}`, where `{project}` can either be a project number or a project ID.", alias="peerNetwork")
    peer_network_type: Optional[StrictStr] = Field(default=None, description="Required. The type of the network to peer with the VMware Engine network.", alias="peerNetworkType")
    state: Optional[StrictStr] = Field(default=None, description="Output only. State of the network peering. This field has a value of 'ACTIVE' when there's a matching configuration in the peer network. New values may be added to this enum when appropriate.")
    state_details: Optional[StrictStr] = Field(default=None, description="Output only. Output Only. Details about the current state of the network peering.", alias="stateDetails")
    uid: Optional[StrictStr] = Field(default=None, description="Output only. System-generated unique identifier for the resource.")
    update_time: Optional[StrictStr] = Field(default=None, description="Output only. Last update time of this resource.", alias="updateTime")
    vmware_engine_network: Optional[StrictStr] = Field(default=None, description="Required. The relative resource name of the VMware Engine network. Specify the name in the following form: `projects/{project}/locations/{location}/vmwareEngineNetworks/{vmware_engine_network_id}` where `{project}` can either be a project number or a project ID.", alias="vmwareEngineNetwork")
    __properties: ClassVar[List[str]] = ["createTime", "description", "exchangeSubnetRoutes", "exportCustomRoutes", "exportCustomRoutesWithPublicIp", "importCustomRoutes", "importCustomRoutesWithPublicIp", "name", "peerMtu", "peerNetwork", "peerNetworkType", "state", "stateDetails", "uid", "updateTime", "vmwareEngineNetwork"]

    @field_validator('peer_network_type')
    def peer_network_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['PEER_NETWORK_TYPE_UNSPECIFIED', 'STANDARD', 'VMWARE_ENGINE_NETWORK', 'PRIVATE_SERVICES_ACCESS', 'NETAPP_CLOUD_VOLUMES', 'THIRD_PARTY_SERVICE', 'DELL_POWERSCALE']):
            raise ValueError("must be one of enum values ('PEER_NETWORK_TYPE_UNSPECIFIED', 'STANDARD', 'VMWARE_ENGINE_NETWORK', 'PRIVATE_SERVICES_ACCESS', 'NETAPP_CLOUD_VOLUMES', 'THIRD_PARTY_SERVICE', 'DELL_POWERSCALE')")
        return value

    @field_validator('state')
    def state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['STATE_UNSPECIFIED', 'INACTIVE', 'ACTIVE', 'CREATING', 'DELETING']):
            raise ValueError("must be one of enum values ('STATE_UNSPECIFIED', 'INACTIVE', 'ACTIVE', 'CREATING', 'DELETING')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of NetworkPeering from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "create_time",
            "name",
            "state",
            "state_details",
            "uid",
            "update_time",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of NetworkPeering from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "createTime": obj.get("createTime"),
            "description": obj.get("description"),
            "exchangeSubnetRoutes": obj.get("exchangeSubnetRoutes"),
            "exportCustomRoutes": obj.get("exportCustomRoutes"),
            "exportCustomRoutesWithPublicIp": obj.get("exportCustomRoutesWithPublicIp"),
            "importCustomRoutes": obj.get("importCustomRoutes"),
            "importCustomRoutesWithPublicIp": obj.get("importCustomRoutesWithPublicIp"),
            "name": obj.get("name"),
            "peerMtu": obj.get("peerMtu"),
            "peerNetwork": obj.get("peerNetwork"),
            "peerNetworkType": obj.get("peerNetworkType"),
            "state": obj.get("state"),
            "stateDetails": obj.get("stateDetails"),
            "uid": obj.get("uid"),
            "updateTime": obj.get("updateTime"),
            "vmwareEngineNetwork": obj.get("vmwareEngineNetwork")
        })
        return _obj



# coding: utf-8

"""
    VMware Engine API

    The Google VMware Engine API lets you programmatically manage VMware environments.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class ManagementDnsZoneBinding(BaseModel):
    """
    Represents a binding between a network and the management DNS zone. A management DNS zone is the Cloud DNS cross-project binding zone that VMware Engine creates for each private cloud. It contains FQDNs and corresponding IP addresses for the private cloud's ESXi hosts and management VM appliances like vCenter and NSX Manager.
    """ # noqa: E501
    create_time: Optional[StrictStr] = Field(default=None, description="Output only. Creation time of this resource.", alias="createTime")
    description: Optional[StrictStr] = Field(default=None, description="User-provided description for this resource.")
    name: Optional[StrictStr] = Field(default=None, description="Output only. The resource name of this binding. Resource names are schemeless URIs that follow the conventions in https://cloud.google.com/apis/design/resource_names. For example: `projects/my-project/locations/us-central1-a/privateClouds/my-cloud/managementDnsZoneBindings/my-management-dns-zone-binding`")
    state: Optional[StrictStr] = Field(default=None, description="Output only. The state of the resource.")
    uid: Optional[StrictStr] = Field(default=None, description="Output only. System-generated unique identifier for the resource.")
    update_time: Optional[StrictStr] = Field(default=None, description="Output only. Last update time of this resource.", alias="updateTime")
    vmware_engine_network: Optional[StrictStr] = Field(default=None, description="Network to bind is a VMware Engine network. Specify the name in the following form for VMware engine network: `projects/{project}/locations/global/vmwareEngineNetworks/{vmware_engine_network_id}`. `{project}` can either be a project number or a project ID.", alias="vmwareEngineNetwork")
    vpc_network: Optional[StrictStr] = Field(default=None, description="Network to bind is a standard consumer VPC. Specify the name in the following form for consumer VPC network: `projects/{project}/global/networks/{network_id}`. `{project}` can either be a project number or a project ID.", alias="vpcNetwork")
    __properties: ClassVar[List[str]] = ["createTime", "description", "name", "state", "uid", "updateTime", "vmwareEngineNetwork", "vpcNetwork"]

    @field_validator('state')
    def state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['STATE_UNSPECIFIED', 'ACTIVE', 'CREATING', 'UPDATING', 'DELETING', 'FAILED']):
            raise ValueError("must be one of enum values ('STATE_UNSPECIFIED', 'ACTIVE', 'CREATING', 'UPDATING', 'DELETING', 'FAILED')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ManagementDnsZoneBinding from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "create_time",
            "name",
            "state",
            "uid",
            "update_time",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ManagementDnsZoneBinding from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "createTime": obj.get("createTime"),
            "description": obj.get("description"),
            "name": obj.get("name"),
            "state": obj.get("state"),
            "uid": obj.get("uid"),
            "updateTime": obj.get("updateTime"),
            "vmwareEngineNetwork": obj.get("vmwareEngineNetwork"),
            "vpcNetwork": obj.get("vpcNetwork")
        })
        return _obj



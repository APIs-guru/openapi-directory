# coding: utf-8

"""
    VMware Engine API

    The Google VMware Engine API lets you programmatically manage VMware environments.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class NetworkConfig(BaseModel):
    """
    Network configuration in the consumer project with which the peering has to be done.
    """ # noqa: E501
    dns_server_ip: Optional[StrictStr] = Field(default=None, description="Output only. DNS Server IP of the Private Cloud. All DNS queries can be forwarded to this address for name resolution of Private Cloud's management entities like vCenter, NSX-T Manager and ESXi hosts.", alias="dnsServerIp")
    management_cidr: Optional[StrictStr] = Field(default=None, description="Required. Management CIDR used by VMware management appliances.", alias="managementCidr")
    management_ip_address_layout_version: Optional[StrictInt] = Field(default=None, description="Output only. The IP address layout version of the management IP address range. Possible versions include: * `managementIpAddressLayoutVersion=1`: Indicates the legacy IP address layout used by some existing private clouds. This is no longer supported for new private clouds as it does not support all features. * `managementIpAddressLayoutVersion=2`: Indicates the latest IP address layout used by all newly created private clouds. This version supports all current features.", alias="managementIpAddressLayoutVersion")
    vmware_engine_network: Optional[StrictStr] = Field(default=None, description="Optional. The relative resource name of the VMware Engine network attached to the private cloud. Specify the name in the following form: `projects/{project}/locations/{location}/vmwareEngineNetworks/{vmware_engine_network_id}` where `{project}` can either be a project number or a project ID.", alias="vmwareEngineNetwork")
    vmware_engine_network_canonical: Optional[StrictStr] = Field(default=None, description="Output only. The canonical name of the VMware Engine network in the form: `projects/{project_number}/locations/{location}/vmwareEngineNetworks/{vmware_engine_network_id}`", alias="vmwareEngineNetworkCanonical")
    __properties: ClassVar[List[str]] = ["dnsServerIp", "managementCidr", "managementIpAddressLayoutVersion", "vmwareEngineNetwork", "vmwareEngineNetworkCanonical"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of NetworkConfig from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "dns_server_ip",
            "management_ip_address_layout_version",
            "vmware_engine_network_canonical",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of NetworkConfig from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "dnsServerIp": obj.get("dnsServerIp"),
            "managementCidr": obj.get("managementCidr"),
            "managementIpAddressLayoutVersion": obj.get("managementIpAddressLayoutVersion"),
            "vmwareEngineNetwork": obj.get("vmwareEngineNetwork"),
            "vmwareEngineNetworkCanonical": obj.get("vmwareEngineNetworkCanonical")
        })
        return _obj



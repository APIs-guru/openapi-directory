# coding: utf-8

"""
    VMware Engine API

    The Google VMware Engine API lets you programmatically manage VMware environments.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.vpc_network import VpcNetwork
from typing import Optional, Set
from typing_extensions import Self

class VmwareEngineNetwork(BaseModel):
    """
    VMware Engine network resource that provides connectivity for VMware Engine private clouds.
    """ # noqa: E501
    create_time: Optional[StrictStr] = Field(default=None, description="Output only. Creation time of this resource.", alias="createTime")
    description: Optional[StrictStr] = Field(default=None, description="User-provided description for this VMware Engine network.")
    etag: Optional[StrictStr] = Field(default=None, description="Checksum that may be sent on update and delete requests to ensure that the user-provided value is up to date before the server processes a request. The server computes checksums based on the value of other fields in the request.")
    name: Optional[StrictStr] = Field(default=None, description="Output only. The resource name of the VMware Engine network. Resource names are schemeless URIs that follow the conventions in https://cloud.google.com/apis/design/resource_names. For example: `projects/my-project/locations/global/vmwareEngineNetworks/my-network`")
    state: Optional[StrictStr] = Field(default=None, description="Output only. State of the VMware Engine network.")
    type: Optional[StrictStr] = Field(default=None, description="Required. VMware Engine network type.")
    uid: Optional[StrictStr] = Field(default=None, description="Output only. System-generated unique identifier for the resource.")
    update_time: Optional[StrictStr] = Field(default=None, description="Output only. Last update time of this resource.", alias="updateTime")
    vpc_networks: Optional[List[VpcNetwork]] = Field(default=None, description="Output only. VMware Engine service VPC networks that provide connectivity from a private cloud to customer projects, the internet, and other Google Cloud services.", alias="vpcNetworks")
    __properties: ClassVar[List[str]] = ["createTime", "description", "etag", "name", "state", "type", "uid", "updateTime", "vpcNetworks"]

    @field_validator('state')
    def state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['STATE_UNSPECIFIED', 'CREATING', 'ACTIVE', 'UPDATING', 'DELETING']):
            raise ValueError("must be one of enum values ('STATE_UNSPECIFIED', 'CREATING', 'ACTIVE', 'UPDATING', 'DELETING')")
        return value

    @field_validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['TYPE_UNSPECIFIED', 'LEGACY', 'STANDARD']):
            raise ValueError("must be one of enum values ('TYPE_UNSPECIFIED', 'LEGACY', 'STANDARD')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of VmwareEngineNetwork from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "create_time",
            "name",
            "state",
            "uid",
            "update_time",
            "vpc_networks",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in vpc_networks (list)
        _items = []
        if self.vpc_networks:
            for _item_vpc_networks in self.vpc_networks:
                if _item_vpc_networks:
                    _items.append(_item_vpc_networks.to_dict())
            _dict['vpcNetworks'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of VmwareEngineNetwork from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "createTime": obj.get("createTime"),
            "description": obj.get("description"),
            "etag": obj.get("etag"),
            "name": obj.get("name"),
            "state": obj.get("state"),
            "type": obj.get("type"),
            "uid": obj.get("uid"),
            "updateTime": obj.get("updateTime"),
            "vpcNetworks": [VpcNetwork.from_dict(_item) for _item in obj["vpcNetworks"]] if obj.get("vpcNetworks") is not None else None
        })
        return _obj



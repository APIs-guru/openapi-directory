# coding: utf-8

"""
    VMware Engine API

    The Google VMware Engine API lets you programmatically manage VMware environments.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.list_private_clouds_response import ListPrivateCloudsResponse

class TestListPrivateCloudsResponse(unittest.TestCase):
    """ListPrivateCloudsResponse unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> ListPrivateCloudsResponse:
        """Test ListPrivateCloudsResponse
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `ListPrivateCloudsResponse`
        """
        model = ListPrivateCloudsResponse()
        if include_optional:
            return ListPrivateCloudsResponse(
                next_page_token = '',
                private_clouds = [
                    openapi_client.models.private_cloud.PrivateCloud(
                        create_time = '', 
                        delete_time = '', 
                        description = '', 
                        expire_time = '', 
                        hcx = openapi_client.models.hcx.Hcx(
                            fqdn = '', 
                            internal_ip = '', 
                            state = 'STATE_UNSPECIFIED', 
                            version = '', ), 
                        management_cluster = openapi_client.models.management_cluster.ManagementCluster(
                            cluster_id = '', 
                            node_type_configs = {
                                'key' : openapi_client.models.node_type_config.NodeTypeConfig(
                                    custom_core_count = 56, 
                                    node_count = 56, )
                                }, 
                            stretched_cluster_config = openapi_client.models.stretched_cluster_config.StretchedClusterConfig(
                                preferred_location = '', 
                                secondary_location = '', ), ), 
                        name = '', 
                        network_config = openapi_client.models.network_config.NetworkConfig(
                            dns_server_ip = '', 
                            management_cidr = '', 
                            management_ip_address_layout_version = 56, 
                            vmware_engine_network = '', 
                            vmware_engine_network_canonical = '', ), 
                        nsx = openapi_client.models.nsx.Nsx(
                            fqdn = '', 
                            internal_ip = '', 
                            state = 'STATE_UNSPECIFIED', 
                            version = '', ), 
                        state = 'STATE_UNSPECIFIED', 
                        type = 'STANDARD', 
                        uid = '', 
                        update_time = '', 
                        vcenter = openapi_client.models.vcenter.Vcenter(
                            fqdn = '', 
                            internal_ip = '', 
                            state = 'STATE_UNSPECIFIED', 
                            version = '', ), )
                    ],
                unreachable = [
                    ''
                    ]
            )
        else:
            return ListPrivateCloudsResponse(
        )
        """

    def testListPrivateCloudsResponse(self):
        """Test ListPrivateCloudsResponse"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

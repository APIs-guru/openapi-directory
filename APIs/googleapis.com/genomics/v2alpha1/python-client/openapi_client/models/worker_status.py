# coding: utf-8

"""
    Genomics API

    Uploads, processes, queries, and searches Genomics data in the cloud.

    The version of the OpenAPI document: v2alpha1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.disk_status import DiskStatus
from typing import Optional, Set
from typing_extensions import Self

class WorkerStatus(BaseModel):
    """
    The status of the worker VM.
    """ # noqa: E501
    attached_disks: Optional[Dict[str, DiskStatus]] = Field(default=None, description="Status of attached disks.", alias="attachedDisks")
    boot_disk: Optional[DiskStatus] = Field(default=None, alias="bootDisk")
    free_ram_bytes: Optional[StrictStr] = Field(default=None, description="Free RAM.", alias="freeRamBytes")
    total_ram_bytes: Optional[StrictStr] = Field(default=None, description="Total RAM.", alias="totalRamBytes")
    uptime_seconds: Optional[StrictStr] = Field(default=None, description="System uptime.", alias="uptimeSeconds")
    __properties: ClassVar[List[str]] = ["attachedDisks", "bootDisk", "freeRamBytes", "totalRamBytes", "uptimeSeconds"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of WorkerStatus from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each value in attached_disks (dict)
        _field_dict = {}
        if self.attached_disks:
            for _key_attached_disks in self.attached_disks:
                if self.attached_disks[_key_attached_disks]:
                    _field_dict[_key_attached_disks] = self.attached_disks[_key_attached_disks].to_dict()
            _dict['attachedDisks'] = _field_dict
        # override the default output from pydantic by calling `to_dict()` of boot_disk
        if self.boot_disk:
            _dict['bootDisk'] = self.boot_disk.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of WorkerStatus from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "attachedDisks": dict(
                (_k, DiskStatus.from_dict(_v))
                for _k, _v in obj["attachedDisks"].items()
            )
            if obj.get("attachedDisks") is not None
            else None,
            "bootDisk": DiskStatus.from_dict(obj["bootDisk"]) if obj.get("bootDisk") is not None else None,
            "freeRamBytes": obj.get("freeRamBytes"),
            "totalRamBytes": obj.get("totalRamBytes"),
            "uptimeSeconds": obj.get("uptimeSeconds")
        })
        return _obj



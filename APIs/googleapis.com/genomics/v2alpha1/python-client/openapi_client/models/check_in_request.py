# coding: utf-8

"""
    Genomics API

    Uploads, processes, queries, and searches Genomics data in the cloud.

    The version of the OpenAPI document: v2alpha1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBytes, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from openapi_client.models.status import Status
from openapi_client.models.timestamped_event import TimestampedEvent
from openapi_client.models.worker_status import WorkerStatus
from typing import Optional, Set
from typing_extensions import Self

class CheckInRequest(BaseModel):
    """
    The parameters to the CheckIn method.
    """ # noqa: E501
    deadline_expired: Optional[Dict[str, Any]] = Field(default=None, description="A generic empty message that you can re-use to avoid defining duplicated empty messages in your APIs. A typical example is to use it as the request or the response type of an API method. For instance: service Foo { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty); }", alias="deadlineExpired")
    event: Optional[Dict[str, Any]] = Field(default=None, description="A workflow specific event occurred.")
    events: Optional[List[TimestampedEvent]] = Field(default=None, description="A list of timestamped events.")
    result: Optional[Status] = None
    sos_report: Optional[Union[StrictBytes, StrictStr]] = Field(default=None, description="An SOS report for an unexpected VM failure.", alias="sosReport")
    worker_status: Optional[WorkerStatus] = Field(default=None, alias="workerStatus")
    __properties: ClassVar[List[str]] = ["deadlineExpired", "event", "events", "result", "sosReport", "workerStatus"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CheckInRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in events (list)
        _items = []
        if self.events:
            for _item_events in self.events:
                if _item_events:
                    _items.append(_item_events.to_dict())
            _dict['events'] = _items
        # override the default output from pydantic by calling `to_dict()` of result
        if self.result:
            _dict['result'] = self.result.to_dict()
        # override the default output from pydantic by calling `to_dict()` of worker_status
        if self.worker_status:
            _dict['workerStatus'] = self.worker_status.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CheckInRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "deadlineExpired": obj.get("deadlineExpired"),
            "event": obj.get("event"),
            "events": [TimestampedEvent.from_dict(_item) for _item in obj["events"]] if obj.get("events") is not None else None,
            "result": Status.from_dict(obj["result"]) if obj.get("result") is not None else None,
            "sosReport": obj.get("sosReport"),
            "workerStatus": WorkerStatus.from_dict(obj["workerStatus"]) if obj.get("workerStatus") is not None else None
        })
        return _obj



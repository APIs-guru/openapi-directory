# coding: utf-8

"""
    Cloud AutoML API

    Train high-quality custom machine learning models with minimum effort and machine learning expertise.

    The version of the OpenAPI document: v1beta1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.list_model_evaluations_response import ListModelEvaluationsResponse

class TestListModelEvaluationsResponse(unittest.TestCase):
    """ListModelEvaluationsResponse unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> ListModelEvaluationsResponse:
        """Test ListModelEvaluationsResponse
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `ListModelEvaluationsResponse`
        """
        model = ListModelEvaluationsResponse()
        if include_optional:
            return ListModelEvaluationsResponse(
                model_evaluation = [
                    openapi_client.models.model_evaluation.ModelEvaluation(
                        annotation_spec_id = '', 
                        classification_evaluation_metrics = openapi_client.models.classification_evaluation_metrics.ClassificationEvaluationMetrics(
                            annotation_spec_id = [
                                ''
                                ], 
                            au_prc = 1.337, 
                            au_roc = 1.337, 
                            base_au_prc = 1.337, 
                            confidence_metrics_entry = [
                                openapi_client.models.classification_evaluation_metrics_confidence_metrics_entry.ClassificationEvaluationMetricsConfidenceMetricsEntry(
                                    confidence_threshold = 1.337, 
                                    f1_score = 1.337, 
                                    f1_score_at1 = 1.337, 
                                    false_negative_count = '', 
                                    false_positive_count = '', 
                                    false_positive_rate = 1.337, 
                                    false_positive_rate_at1 = 1.337, 
                                    position_threshold = 56, 
                                    precision = 1.337, 
                                    precision_at1 = 1.337, 
                                    recall = 1.337, 
                                    recall_at1 = 1.337, 
                                    true_negative_count = '', 
                                    true_positive_count = '', )
                                ], 
                            confusion_matrix = openapi_client.models.confusion_matrix.ConfusionMatrix(
                                display_name = [
                                    ''
                                    ], 
                                row = [
                                    openapi_client.models.classification_evaluation_metrics_confusion_matrix_row.ClassificationEvaluationMetricsConfusionMatrixRow(
                                        example_count = [
                                            56
                                            ], )
                                    ], ), 
                            log_loss = 1.337, ), 
                        create_time = '', 
                        display_name = '', 
                        evaluated_example_count = 56, 
                        image_object_detection_evaluation_metrics = openapi_client.models.image_object_detection_evaluation_metrics.ImageObjectDetectionEvaluationMetrics(
                            bounding_box_mean_average_precision = 1.337, 
                            bounding_box_metrics_entries = [
                                openapi_client.models.bounding_box_metrics_entry.BoundingBoxMetricsEntry(
                                    confidence_metrics_entries = [
                                        openapi_client.models.bounding_box_metrics_entry_confidence_metrics_entry.BoundingBoxMetricsEntryConfidenceMetricsEntry(
                                            confidence_threshold = 1.337, 
                                            f1_score = 1.337, 
                                            precision = 1.337, 
                                            recall = 1.337, )
                                        ], 
                                    iou_threshold = 1.337, 
                                    mean_average_precision = 1.337, )
                                ], 
                            evaluated_bounding_box_count = 56, ), 
                        name = '', 
                        regression_evaluation_metrics = openapi_client.models.regression_evaluation_metrics.RegressionEvaluationMetrics(
                            mean_absolute_error = 1.337, 
                            mean_absolute_percentage_error = 1.337, 
                            r_squared = 1.337, 
                            root_mean_squared_error = 1.337, 
                            root_mean_squared_log_error = 1.337, ), 
                        text_extraction_evaluation_metrics = openapi_client.models.text_extraction_evaluation_metrics.TextExtractionEvaluationMetrics(
                            au_prc = 1.337, ), 
                        text_sentiment_evaluation_metrics = openapi_client.models.text_sentiment_evaluation_metrics.TextSentimentEvaluationMetrics(
                            f1_score = 1.337, 
                            linear_kappa = 1.337, 
                            mean_absolute_error = 1.337, 
                            mean_squared_error = 1.337, 
                            precision = 1.337, 
                            quadratic_kappa = 1.337, 
                            recall = 1.337, ), 
                        translation_evaluation_metrics = openapi_client.models.translation_evaluation_metrics.TranslationEvaluationMetrics(
                            base_bleu_score = 1.337, 
                            bleu_score = 1.337, ), 
                        video_object_tracking_evaluation_metrics = openapi_client.models.video_object_tracking_evaluation_metrics.VideoObjectTrackingEvaluationMetrics(
                            bounding_box_mean_average_precision = 1.337, 
                            evaluated_bounding_box_count = 56, 
                            evaluated_frame_count = 56, ), )
                    ],
                next_page_token = ''
            )
        else:
            return ListModelEvaluationsResponse(
        )
        """

    def testListModelEvaluationsResponse(self):
        """Test ListModelEvaluationsResponse"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

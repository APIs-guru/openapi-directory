# coding: utf-8

"""
    Cloud AutoML API

    Train high-quality custom machine learning models with minimum effort and machine learning expertise.

    The version of the OpenAPI document: v1beta1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.predict_response import PredictResponse

class TestPredictResponse(unittest.TestCase):
    """PredictResponse unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> PredictResponse:
        """Test PredictResponse
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `PredictResponse`
        """
        model = PredictResponse()
        if include_optional:
            return PredictResponse(
                metadata = {
                    'key' : ''
                    },
                payload = [
                    openapi_client.models.annotation_payload.AnnotationPayload(
                        annotation_spec_id = '', 
                        classification = openapi_client.models.classification_annotation.ClassificationAnnotation(
                            score = 1.337, ), 
                        display_name = '', 
                        image_object_detection = openapi_client.models.image_object_detection_annotation.ImageObjectDetectionAnnotation(
                            bounding_box = openapi_client.models.bounding_poly.BoundingPoly(
                                normalized_vertices = [
                                    openapi_client.models.normalized_vertex.NormalizedVertex(
                                        x = 1.337, 
                                        y = 1.337, )
                                    ], ), 
                            score = 1.337, ), 
                        tables = openapi_client.models.tables_annotation.TablesAnnotation(
                            baseline_score = 1.337, 
                            prediction_interval = openapi_client.models.double_range.DoubleRange(
                                end = 1.337, 
                                start = 1.337, ), 
                            score = 1.337, 
                            tables_model_column_info = [
                                openapi_client.models.tables_model_column_info.TablesModelColumnInfo(
                                    column_display_name = '', 
                                    column_spec_name = '', 
                                    feature_importance = 1.337, )
                                ], 
                            value = null, ), 
                        text_extraction = openapi_client.models.text_extraction_annotation.TextExtractionAnnotation(
                            score = 1.337, 
                            text_segment = openapi_client.models.text_segment.TextSegment(
                                content = '', 
                                end_offset = '', 
                                start_offset = '', ), ), 
                        text_sentiment = openapi_client.models.text_sentiment_annotation.TextSentimentAnnotation(
                            sentiment = 56, ), 
                        translation = openapi_client.models.translation_annotation.TranslationAnnotation(
                            translated_content = openapi_client.models.text_snippet.TextSnippet(
                                content = '', 
                                content_uri = '', 
                                mime_type = '', ), ), 
                        video_classification = openapi_client.models.video_classification_annotation.VideoClassificationAnnotation(
                            classification_annotation = openapi_client.models.classification_annotation.ClassificationAnnotation(
                                score = 1.337, ), 
                            time_segment = openapi_client.models.time_segment.TimeSegment(
                                end_time_offset = '', 
                                start_time_offset = '', ), 
                            type = '', ), 
                        video_object_tracking = openapi_client.models.video_object_tracking_annotation.VideoObjectTrackingAnnotation(
                            instance_id = '', 
                            score = 1.337, 
                            time_offset = '', ), )
                    ],
                preprocessed_input = openapi_client.models.example_payload.ExamplePayload(
                    document = openapi_client.models.document.Document(
                        document_dimensions = openapi_client.models.document_dimensions.DocumentDimensions(
                            height = 1.337, 
                            unit = 'DOCUMENT_DIMENSION_UNIT_UNSPECIFIED', 
                            width = 1.337, ), 
                        document_text = openapi_client.models.text_snippet.TextSnippet(
                            content = '', 
                            content_uri = '', 
                            mime_type = '', ), 
                        input_config = openapi_client.models.document_input_config.DocumentInputConfig(
                            gcs_source = openapi_client.models.gcs_source.GcsSource(
                                input_uris = [
                                    ''
                                    ], ), ), 
                        layout = [
                            openapi_client.models.layout.Layout(
                                bounding_poly = openapi_client.models.bounding_poly.BoundingPoly(
                                    normalized_vertices = [
                                        openapi_client.models.normalized_vertex.NormalizedVertex(
                                            x = 1.337, 
                                            y = 1.337, )
                                        ], ), 
                                page_number = 56, 
                                text_segment = openapi_client.models.text_segment.TextSegment(
                                    content = '', 
                                    end_offset = '', 
                                    start_offset = '', ), 
                                text_segment_type = 'TEXT_SEGMENT_TYPE_UNSPECIFIED', )
                            ], 
                        page_count = 56, ), 
                    image = openapi_client.models.image.Image(
                        image_bytes = 'YQ==', 
                        thumbnail_uri = '', ), 
                    row = openapi_client.models.row.Row(
                        column_spec_ids = [
                            ''
                            ], 
                        values = [
                            null
                            ], ), 
                    text_snippet = openapi_client.models.text_snippet.TextSnippet(
                        content = '', 
                        content_uri = '', 
                        mime_type = '', ), )
            )
        else:
            return PredictResponse(
        )
        """

    def testPredictResponse(self):
        """Test PredictResponse"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

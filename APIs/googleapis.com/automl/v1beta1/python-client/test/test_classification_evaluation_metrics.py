# coding: utf-8

"""
    Cloud AutoML API

    Train high-quality custom machine learning models with minimum effort and machine learning expertise.

    The version of the OpenAPI document: v1beta1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.classification_evaluation_metrics import ClassificationEvaluationMetrics

class TestClassificationEvaluationMetrics(unittest.TestCase):
    """ClassificationEvaluationMetrics unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> ClassificationEvaluationMetrics:
        """Test ClassificationEvaluationMetrics
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `ClassificationEvaluationMetrics`
        """
        model = ClassificationEvaluationMetrics()
        if include_optional:
            return ClassificationEvaluationMetrics(
                annotation_spec_id = [
                    ''
                    ],
                au_prc = 1.337,
                au_roc = 1.337,
                base_au_prc = 1.337,
                confidence_metrics_entry = [
                    openapi_client.models.classification_evaluation_metrics_confidence_metrics_entry.ClassificationEvaluationMetricsConfidenceMetricsEntry(
                        confidence_threshold = 1.337, 
                        f1_score = 1.337, 
                        f1_score_at1 = 1.337, 
                        false_negative_count = '', 
                        false_positive_count = '', 
                        false_positive_rate = 1.337, 
                        false_positive_rate_at1 = 1.337, 
                        position_threshold = 56, 
                        precision = 1.337, 
                        precision_at1 = 1.337, 
                        recall = 1.337, 
                        recall_at1 = 1.337, 
                        true_negative_count = '', 
                        true_positive_count = '', )
                    ],
                confusion_matrix = openapi_client.models.confusion_matrix.ConfusionMatrix(
                    annotation_spec_id = [
                        ''
                        ], 
                    display_name = [
                        ''
                        ], 
                    row = [
                        openapi_client.models.classification_evaluation_metrics_confusion_matrix_row.ClassificationEvaluationMetricsConfusionMatrixRow(
                            example_count = [
                                56
                                ], )
                        ], ),
                log_loss = 1.337
            )
        else:
            return ClassificationEvaluationMetrics(
        )
        """

    def testClassificationEvaluationMetrics(self):
        """Test ClassificationEvaluationMetrics"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

# coding: utf-8

"""
    Cloud AutoML API

    Train high-quality custom machine learning models with minimum effort and machine learning expertise.

    The version of the OpenAPI document: v1beta1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.example_payload import ExamplePayload

class TestExamplePayload(unittest.TestCase):
    """ExamplePayload unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> ExamplePayload:
        """Test ExamplePayload
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `ExamplePayload`
        """
        model = ExamplePayload()
        if include_optional:
            return ExamplePayload(
                document = openapi_client.models.document.Document(
                    document_dimensions = openapi_client.models.document_dimensions.DocumentDimensions(
                        height = 1.337, 
                        unit = 'DOCUMENT_DIMENSION_UNIT_UNSPECIFIED', 
                        width = 1.337, ), 
                    document_text = openapi_client.models.text_snippet.TextSnippet(
                        content = '', 
                        content_uri = '', 
                        mime_type = '', ), 
                    input_config = openapi_client.models.document_input_config.DocumentInputConfig(
                        gcs_source = openapi_client.models.gcs_source.GcsSource(
                            input_uris = [
                                ''
                                ], ), ), 
                    layout = [
                        openapi_client.models.layout.Layout(
                            bounding_poly = openapi_client.models.bounding_poly.BoundingPoly(
                                normalized_vertices = [
                                    openapi_client.models.normalized_vertex.NormalizedVertex(
                                        x = 1.337, 
                                        y = 1.337, )
                                    ], ), 
                            page_number = 56, 
                            text_segment = openapi_client.models.text_segment.TextSegment(
                                content = '', 
                                end_offset = '', 
                                start_offset = '', ), 
                            text_segment_type = 'TEXT_SEGMENT_TYPE_UNSPECIFIED', )
                        ], 
                    page_count = 56, ),
                image = openapi_client.models.image.Image(
                    image_bytes = 'YQ==', 
                    input_config = openapi_client.models.input_config.InputConfig(
                        bigquery_source = openapi_client.models.big_query_source.BigQuerySource(
                            input_uri = '', ), 
                        gcs_source = openapi_client.models.gcs_source.GcsSource(
                            input_uris = [
                                ''
                                ], ), 
                        params = {
                            'key' : ''
                            }, ), 
                    thumbnail_uri = '', ),
                row = openapi_client.models.row.Row(
                    column_spec_ids = [
                        ''
                        ], 
                    values = [
                        null
                        ], ),
                text_snippet = openapi_client.models.text_snippet.TextSnippet(
                    content = '', 
                    content_uri = '', 
                    mime_type = '', )
            )
        else:
            return ExamplePayload(
        )
        """

    def testExamplePayload(self):
        """Test ExamplePayload"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

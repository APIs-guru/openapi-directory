# coding: utf-8

"""
    Cloud AutoML API

    Train high-quality custom machine learning models with minimum effort and machine learning expertise.

    The version of the OpenAPI document: v1beta1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.correlated_column import CorrelatedColumn
from openapi_client.models.data_stats import DataStats
from openapi_client.models.data_type import DataType
from typing import Optional, Set
from typing_extensions import Self

class ColumnSpec(BaseModel):
    """
    A representation of a column in a relational table. When listing them, column specs are returned in the same order in which they were given on import . Used by: * Tables
    """ # noqa: E501
    data_stats: Optional[DataStats] = Field(default=None, alias="dataStats")
    data_type: Optional[DataType] = Field(default=None, alias="dataType")
    display_name: Optional[StrictStr] = Field(default=None, description="Output only. The name of the column to show in the interface. The name can be up to 100 characters long and can consist only of ASCII Latin letters A-Z and a-z, ASCII digits 0-9, underscores(_), and forward slashes(/), and must start with a letter or a digit.", alias="displayName")
    etag: Optional[StrictStr] = Field(default=None, description="Used to perform consistent read-modify-write updates. If not set, a blind \"overwrite\" update happens.")
    name: Optional[StrictStr] = Field(default=None, description="Output only. The resource name of the column specs. Form: `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/tableSpecs/{table_spec_id}/columnSpecs/{column_spec_id}`")
    top_correlated_columns: Optional[List[CorrelatedColumn]] = Field(default=None, description="Deprecated.", alias="topCorrelatedColumns")
    __properties: ClassVar[List[str]] = ["dataStats", "dataType", "displayName", "etag", "name", "topCorrelatedColumns"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ColumnSpec from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of data_stats
        if self.data_stats:
            _dict['dataStats'] = self.data_stats.to_dict()
        # override the default output from pydantic by calling `to_dict()` of data_type
        if self.data_type:
            _dict['dataType'] = self.data_type.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in top_correlated_columns (list)
        _items = []
        if self.top_correlated_columns:
            for _item_top_correlated_columns in self.top_correlated_columns:
                if _item_top_correlated_columns:
                    _items.append(_item_top_correlated_columns.to_dict())
            _dict['topCorrelatedColumns'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ColumnSpec from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "dataStats": DataStats.from_dict(obj["dataStats"]) if obj.get("dataStats") is not None else None,
            "dataType": DataType.from_dict(obj["dataType"]) if obj.get("dataType") is not None else None,
            "displayName": obj.get("displayName"),
            "etag": obj.get("etag"),
            "name": obj.get("name"),
            "topCorrelatedColumns": [CorrelatedColumn.from_dict(_item) for _item in obj["topCorrelatedColumns"]] if obj.get("topCorrelatedColumns") is not None else None
        })
        return _obj



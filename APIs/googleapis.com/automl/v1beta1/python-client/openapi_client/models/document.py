# coding: utf-8

"""
    Cloud AutoML API

    Train high-quality custom machine learning models with minimum effort and machine learning expertise.

    The version of the OpenAPI document: v1beta1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.document_dimensions import DocumentDimensions
from openapi_client.models.document_input_config import DocumentInputConfig
from openapi_client.models.layout import Layout
from openapi_client.models.text_snippet import TextSnippet
from typing import Optional, Set
from typing_extensions import Self

class Document(BaseModel):
    """
    A structured text document e.g. a PDF.
    """ # noqa: E501
    document_dimensions: Optional[DocumentDimensions] = Field(default=None, alias="documentDimensions")
    document_text: Optional[TextSnippet] = Field(default=None, alias="documentText")
    input_config: Optional[DocumentInputConfig] = Field(default=None, alias="inputConfig")
    layout: Optional[List[Layout]] = Field(default=None, description="Describes the layout of the document. Sorted by page_number.")
    page_count: Optional[StrictInt] = Field(default=None, description="Number of pages in the document.", alias="pageCount")
    __properties: ClassVar[List[str]] = ["documentDimensions", "documentText", "inputConfig", "layout", "pageCount"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Document from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of document_dimensions
        if self.document_dimensions:
            _dict['documentDimensions'] = self.document_dimensions.to_dict()
        # override the default output from pydantic by calling `to_dict()` of document_text
        if self.document_text:
            _dict['documentText'] = self.document_text.to_dict()
        # override the default output from pydantic by calling `to_dict()` of input_config
        if self.input_config:
            _dict['inputConfig'] = self.input_config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in layout (list)
        _items = []
        if self.layout:
            for _item_layout in self.layout:
                if _item_layout:
                    _items.append(_item_layout.to_dict())
            _dict['layout'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Document from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "documentDimensions": DocumentDimensions.from_dict(obj["documentDimensions"]) if obj.get("documentDimensions") is not None else None,
            "documentText": TextSnippet.from_dict(obj["documentText"]) if obj.get("documentText") is not None else None,
            "inputConfig": DocumentInputConfig.from_dict(obj["inputConfig"]) if obj.get("inputConfig") is not None else None,
            "layout": [Layout.from_dict(_item) for _item in obj["layout"]] if obj.get("layout") is not None else None,
            "pageCount": obj.get("pageCount")
        })
        return _obj



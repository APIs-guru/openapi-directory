# coding: utf-8

"""
    Cloud AutoML API

    Train high-quality custom machine learning models with minimum effort and machine learning expertise.

    The version of the OpenAPI document: v1beta1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from openapi_client.models.column_spec import ColumnSpec
from openapi_client.models.tables_model_column_info import TablesModelColumnInfo
from typing import Optional, Set
from typing_extensions import Self

class TablesModelMetadata(BaseModel):
    """
    Model metadata specific to AutoML Tables.
    """ # noqa: E501
    disable_early_stopping: Optional[StrictBool] = Field(default=None, description="Use the entire training budget. This disables the early stopping feature. By default, the early stopping feature is enabled, which means that AutoML Tables might stop training before the entire training budget has been used.", alias="disableEarlyStopping")
    input_feature_column_specs: Optional[List[ColumnSpec]] = Field(default=None, description="Column specs of the dataset's primary table's columns, on which the model is trained and which are used as the input for predictions. The target_column as well as, according to dataset's state upon model creation, weight_column, and ml_use_column must never be included here. Only 3 fields are used: * name - May be set on CreateModel, if set only the columns specified are used, otherwise all primary table's columns (except the ones listed above) are used for the training and prediction input. * display_name - Output only. * data_type - Output only.", alias="inputFeatureColumnSpecs")
    optimization_objective: Optional[StrictStr] = Field(default=None, description="Objective function the model is optimizing towards. The training process creates a model that maximizes/minimizes the value of the objective function over the validation set. The supported optimization objectives depend on the prediction type. If the field is not set, a default objective function is used. CLASSIFICATION_BINARY: \"MAXIMIZE_AU_ROC\" (default) - Maximize the area under the receiver operating characteristic (ROC) curve. \"MINIMIZE_LOG_LOSS\" - Minimize log loss. \"MAXIMIZE_AU_PRC\" - Maximize the area under the precision-recall curve. \"MAXIMIZE_PRECISION_AT_RECALL\" - Maximize precision for a specified recall value. \"MAXIMIZE_RECALL_AT_PRECISION\" - Maximize recall for a specified precision value. CLASSIFICATION_MULTI_CLASS : \"MINIMIZE_LOG_LOSS\" (default) - Minimize log loss. REGRESSION: \"MINIMIZE_RMSE\" (default) - Minimize root-mean-squared error (RMSE). \"MINIMIZE_MAE\" - Minimize mean-absolute error (MAE). \"MINIMIZE_RMSLE\" - Minimize root-mean-squared log error (RMSLE).", alias="optimizationObjective")
    optimization_objective_precision_value: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Required when optimization_objective is \"MAXIMIZE_RECALL_AT_PRECISION\". Must be between 0 and 1, inclusive.", alias="optimizationObjectivePrecisionValue")
    optimization_objective_recall_value: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Required when optimization_objective is \"MAXIMIZE_PRECISION_AT_RECALL\". Must be between 0 and 1, inclusive.", alias="optimizationObjectiveRecallValue")
    tables_model_column_info: Optional[List[TablesModelColumnInfo]] = Field(default=None, description="Output only. Auxiliary information for each of the input_feature_column_specs with respect to this particular model.", alias="tablesModelColumnInfo")
    target_column_spec: Optional[ColumnSpec] = Field(default=None, alias="targetColumnSpec")
    train_budget_milli_node_hours: Optional[StrictStr] = Field(default=None, description="Required. The train budget of creating this model, expressed in milli node hours i.e. 1,000 value in this field means 1 node hour. The training cost of the model will not exceed this budget. The final cost will be attempted to be close to the budget, though may end up being (even) noticeably smaller - at the backend's discretion. This especially may happen when further model training ceases to provide any improvements. If the budget is set to a value known to be insufficient to train a model for the given dataset, the training won't be attempted and will error. The train budget must be between 1,000 and 72,000 milli node hours, inclusive.", alias="trainBudgetMilliNodeHours")
    train_cost_milli_node_hours: Optional[StrictStr] = Field(default=None, description="Output only. The actual training cost of the model, expressed in milli node hours, i.e. 1,000 value in this field means 1 node hour. Guaranteed to not exceed the train budget.", alias="trainCostMilliNodeHours")
    __properties: ClassVar[List[str]] = ["disableEarlyStopping", "inputFeatureColumnSpecs", "optimizationObjective", "optimizationObjectivePrecisionValue", "optimizationObjectiveRecallValue", "tablesModelColumnInfo", "targetColumnSpec", "trainBudgetMilliNodeHours", "trainCostMilliNodeHours"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of TablesModelMetadata from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in input_feature_column_specs (list)
        _items = []
        if self.input_feature_column_specs:
            for _item_input_feature_column_specs in self.input_feature_column_specs:
                if _item_input_feature_column_specs:
                    _items.append(_item_input_feature_column_specs.to_dict())
            _dict['inputFeatureColumnSpecs'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in tables_model_column_info (list)
        _items = []
        if self.tables_model_column_info:
            for _item_tables_model_column_info in self.tables_model_column_info:
                if _item_tables_model_column_info:
                    _items.append(_item_tables_model_column_info.to_dict())
            _dict['tablesModelColumnInfo'] = _items
        # override the default output from pydantic by calling `to_dict()` of target_column_spec
        if self.target_column_spec:
            _dict['targetColumnSpec'] = self.target_column_spec.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of TablesModelMetadata from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "disableEarlyStopping": obj.get("disableEarlyStopping"),
            "inputFeatureColumnSpecs": [ColumnSpec.from_dict(_item) for _item in obj["inputFeatureColumnSpecs"]] if obj.get("inputFeatureColumnSpecs") is not None else None,
            "optimizationObjective": obj.get("optimizationObjective"),
            "optimizationObjectivePrecisionValue": obj.get("optimizationObjectivePrecisionValue"),
            "optimizationObjectiveRecallValue": obj.get("optimizationObjectiveRecallValue"),
            "tablesModelColumnInfo": [TablesModelColumnInfo.from_dict(_item) for _item in obj["tablesModelColumnInfo"]] if obj.get("tablesModelColumnInfo") is not None else None,
            "targetColumnSpec": ColumnSpec.from_dict(obj["targetColumnSpec"]) if obj.get("targetColumnSpec") is not None else None,
            "trainBudgetMilliNodeHours": obj.get("trainBudgetMilliNodeHours"),
            "trainCostMilliNodeHours": obj.get("trainCostMilliNodeHours")
        })
        return _obj



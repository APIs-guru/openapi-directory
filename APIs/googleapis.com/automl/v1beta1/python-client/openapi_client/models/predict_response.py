# coding: utf-8

"""
    Cloud AutoML API

    Train high-quality custom machine learning models with minimum effort and machine learning expertise.

    The version of the OpenAPI document: v1beta1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.annotation_payload import AnnotationPayload
from openapi_client.models.example_payload import ExamplePayload
from typing import Optional, Set
from typing_extensions import Self

class PredictResponse(BaseModel):
    """
    Response message for PredictionService.Predict.
    """ # noqa: E501
    metadata: Optional[Dict[str, StrictStr]] = Field(default=None, description="Additional domain-specific prediction response metadata. * For Image Object Detection: `max_bounding_box_count` - (int64) At most that many bounding boxes per image could have been returned. * For Text Sentiment: `sentiment_score` - (float, deprecated) A value between -1 and 1, -1 maps to least positive sentiment, while 1 maps to the most positive one and the higher the score, the more positive the sentiment in the document is. Yet these values are relative to the training data, so e.g. if all data was positive then -1 will be also positive (though the least). The sentiment_score shouldn't be confused with \"score\" or \"magnitude\" from the previous Natural Language Sentiment Analysis API.")
    payload: Optional[List[AnnotationPayload]] = Field(default=None, description="Prediction result. Translation and Text Sentiment will return precisely one payload.")
    preprocessed_input: Optional[ExamplePayload] = Field(default=None, alias="preprocessedInput")
    __properties: ClassVar[List[str]] = ["metadata", "payload", "preprocessedInput"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PredictResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in payload (list)
        _items = []
        if self.payload:
            for _item_payload in self.payload:
                if _item_payload:
                    _items.append(_item_payload.to_dict())
            _dict['payload'] = _items
        # override the default output from pydantic by calling `to_dict()` of preprocessed_input
        if self.preprocessed_input:
            _dict['preprocessedInput'] = self.preprocessed_input.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PredictResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "metadata": obj.get("metadata"),
            "payload": [AnnotationPayload.from_dict(_item) for _item in obj["payload"]] if obj.get("payload") is not None else None,
            "preprocessedInput": ExamplePayload.from_dict(obj["preprocessedInput"]) if obj.get("preprocessedInput") is not None else None
        })
        return _obj



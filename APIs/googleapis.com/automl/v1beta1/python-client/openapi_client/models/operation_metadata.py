# coding: utf-8

"""
    Cloud AutoML API

    Train high-quality custom machine learning models with minimum effort and machine learning expertise.

    The version of the OpenAPI document: v1beta1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.batch_predict_operation_metadata import BatchPredictOperationMetadata
from openapi_client.models.export_data_operation_metadata import ExportDataOperationMetadata
from openapi_client.models.export_evaluated_examples_operation_metadata import ExportEvaluatedExamplesOperationMetadata
from openapi_client.models.export_model_operation_metadata import ExportModelOperationMetadata
from openapi_client.models.status import Status
from typing import Optional, Set
from typing_extensions import Self

class OperationMetadata(BaseModel):
    """
    Metadata used across all long running operations returned by AutoML API.
    """ # noqa: E501
    batch_predict_details: Optional[BatchPredictOperationMetadata] = Field(default=None, alias="batchPredictDetails")
    create_model_details: Optional[Dict[str, Any]] = Field(default=None, description="Details of CreateModel operation.", alias="createModelDetails")
    create_time: Optional[StrictStr] = Field(default=None, description="Output only. Time when the operation was created.", alias="createTime")
    delete_details: Optional[Dict[str, Any]] = Field(default=None, description="Details of operations that perform deletes of any entities.", alias="deleteDetails")
    deploy_model_details: Optional[Dict[str, Any]] = Field(default=None, description="Details of DeployModel operation.", alias="deployModelDetails")
    export_data_details: Optional[ExportDataOperationMetadata] = Field(default=None, alias="exportDataDetails")
    export_evaluated_examples_details: Optional[ExportEvaluatedExamplesOperationMetadata] = Field(default=None, alias="exportEvaluatedExamplesDetails")
    export_model_details: Optional[ExportModelOperationMetadata] = Field(default=None, alias="exportModelDetails")
    import_data_details: Optional[Dict[str, Any]] = Field(default=None, description="Details of ImportData operation.", alias="importDataDetails")
    partial_failures: Optional[List[Status]] = Field(default=None, description="Output only. Partial failures encountered. E.g. single files that couldn't be read. This field should never exceed 20 entries. Status details field will contain standard GCP error details.", alias="partialFailures")
    progress_percent: Optional[StrictInt] = Field(default=None, description="Output only. Progress of operation. Range: [0, 100]. Not used currently.", alias="progressPercent")
    undeploy_model_details: Optional[Dict[str, Any]] = Field(default=None, description="Details of UndeployModel operation.", alias="undeployModelDetails")
    update_time: Optional[StrictStr] = Field(default=None, description="Output only. Time when the operation was updated for the last time.", alias="updateTime")
    __properties: ClassVar[List[str]] = ["batchPredictDetails", "createModelDetails", "createTime", "deleteDetails", "deployModelDetails", "exportDataDetails", "exportEvaluatedExamplesDetails", "exportModelDetails", "importDataDetails", "partialFailures", "progressPercent", "undeployModelDetails", "updateTime"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of OperationMetadata from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of batch_predict_details
        if self.batch_predict_details:
            _dict['batchPredictDetails'] = self.batch_predict_details.to_dict()
        # override the default output from pydantic by calling `to_dict()` of export_data_details
        if self.export_data_details:
            _dict['exportDataDetails'] = self.export_data_details.to_dict()
        # override the default output from pydantic by calling `to_dict()` of export_evaluated_examples_details
        if self.export_evaluated_examples_details:
            _dict['exportEvaluatedExamplesDetails'] = self.export_evaluated_examples_details.to_dict()
        # override the default output from pydantic by calling `to_dict()` of export_model_details
        if self.export_model_details:
            _dict['exportModelDetails'] = self.export_model_details.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in partial_failures (list)
        _items = []
        if self.partial_failures:
            for _item_partial_failures in self.partial_failures:
                if _item_partial_failures:
                    _items.append(_item_partial_failures.to_dict())
            _dict['partialFailures'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of OperationMetadata from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "batchPredictDetails": BatchPredictOperationMetadata.from_dict(obj["batchPredictDetails"]) if obj.get("batchPredictDetails") is not None else None,
            "createModelDetails": obj.get("createModelDetails"),
            "createTime": obj.get("createTime"),
            "deleteDetails": obj.get("deleteDetails"),
            "deployModelDetails": obj.get("deployModelDetails"),
            "exportDataDetails": ExportDataOperationMetadata.from_dict(obj["exportDataDetails"]) if obj.get("exportDataDetails") is not None else None,
            "exportEvaluatedExamplesDetails": ExportEvaluatedExamplesOperationMetadata.from_dict(obj["exportEvaluatedExamplesDetails"]) if obj.get("exportEvaluatedExamplesDetails") is not None else None,
            "exportModelDetails": ExportModelOperationMetadata.from_dict(obj["exportModelDetails"]) if obj.get("exportModelDetails") is not None else None,
            "importDataDetails": obj.get("importDataDetails"),
            "partialFailures": [Status.from_dict(_item) for _item in obj["partialFailures"]] if obj.get("partialFailures") is not None else None,
            "progressPercent": obj.get("progressPercent"),
            "undeployModelDetails": obj.get("undeployModelDetails"),
            "updateTime": obj.get("updateTime")
        })
        return _obj



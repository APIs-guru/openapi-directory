# coding: utf-8

"""
    Cloud AutoML API

    Train high-quality custom machine learning models with minimum effort and machine learning expertise.

    The version of the OpenAPI document: v1beta1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.classification_annotation import ClassificationAnnotation
from openapi_client.models.image_object_detection_annotation import ImageObjectDetectionAnnotation
from openapi_client.models.tables_annotation import TablesAnnotation
from openapi_client.models.text_extraction_annotation import TextExtractionAnnotation
from openapi_client.models.text_sentiment_annotation import TextSentimentAnnotation
from openapi_client.models.translation_annotation import TranslationAnnotation
from openapi_client.models.video_classification_annotation import VideoClassificationAnnotation
from openapi_client.models.video_object_tracking_annotation import VideoObjectTrackingAnnotation
from typing import Optional, Set
from typing_extensions import Self

class AnnotationPayload(BaseModel):
    """
    Contains annotation information that is relevant to AutoML.
    """ # noqa: E501
    annotation_spec_id: Optional[StrictStr] = Field(default=None, description="Output only . The resource ID of the annotation spec that this annotation pertains to. The annotation spec comes from either an ancestor dataset, or the dataset that was used to train the model in use.", alias="annotationSpecId")
    classification: Optional[ClassificationAnnotation] = None
    display_name: Optional[StrictStr] = Field(default=None, description="Output only. The value of display_name when the model was trained. Because this field returns a value at model training time, for different models trained using the same dataset, the returned value could be different as model owner could update the `display_name` between any two model training.", alias="displayName")
    image_object_detection: Optional[ImageObjectDetectionAnnotation] = Field(default=None, alias="imageObjectDetection")
    tables: Optional[TablesAnnotation] = None
    text_extraction: Optional[TextExtractionAnnotation] = Field(default=None, alias="textExtraction")
    text_sentiment: Optional[TextSentimentAnnotation] = Field(default=None, alias="textSentiment")
    translation: Optional[TranslationAnnotation] = None
    video_classification: Optional[VideoClassificationAnnotation] = Field(default=None, alias="videoClassification")
    video_object_tracking: Optional[VideoObjectTrackingAnnotation] = Field(default=None, alias="videoObjectTracking")
    __properties: ClassVar[List[str]] = ["annotationSpecId", "classification", "displayName", "imageObjectDetection", "tables", "textExtraction", "textSentiment", "translation", "videoClassification", "videoObjectTracking"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AnnotationPayload from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of classification
        if self.classification:
            _dict['classification'] = self.classification.to_dict()
        # override the default output from pydantic by calling `to_dict()` of image_object_detection
        if self.image_object_detection:
            _dict['imageObjectDetection'] = self.image_object_detection.to_dict()
        # override the default output from pydantic by calling `to_dict()` of tables
        if self.tables:
            _dict['tables'] = self.tables.to_dict()
        # override the default output from pydantic by calling `to_dict()` of text_extraction
        if self.text_extraction:
            _dict['textExtraction'] = self.text_extraction.to_dict()
        # override the default output from pydantic by calling `to_dict()` of text_sentiment
        if self.text_sentiment:
            _dict['textSentiment'] = self.text_sentiment.to_dict()
        # override the default output from pydantic by calling `to_dict()` of translation
        if self.translation:
            _dict['translation'] = self.translation.to_dict()
        # override the default output from pydantic by calling `to_dict()` of video_classification
        if self.video_classification:
            _dict['videoClassification'] = self.video_classification.to_dict()
        # override the default output from pydantic by calling `to_dict()` of video_object_tracking
        if self.video_object_tracking:
            _dict['videoObjectTracking'] = self.video_object_tracking.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AnnotationPayload from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "annotationSpecId": obj.get("annotationSpecId"),
            "classification": ClassificationAnnotation.from_dict(obj["classification"]) if obj.get("classification") is not None else None,
            "displayName": obj.get("displayName"),
            "imageObjectDetection": ImageObjectDetectionAnnotation.from_dict(obj["imageObjectDetection"]) if obj.get("imageObjectDetection") is not None else None,
            "tables": TablesAnnotation.from_dict(obj["tables"]) if obj.get("tables") is not None else None,
            "textExtraction": TextExtractionAnnotation.from_dict(obj["textExtraction"]) if obj.get("textExtraction") is not None else None,
            "textSentiment": TextSentimentAnnotation.from_dict(obj["textSentiment"]) if obj.get("textSentiment") is not None else None,
            "translation": TranslationAnnotation.from_dict(obj["translation"]) if obj.get("translation") is not None else None,
            "videoClassification": VideoClassificationAnnotation.from_dict(obj["videoClassification"]) if obj.get("videoClassification") is not None else None,
            "videoObjectTracking": VideoObjectTrackingAnnotation.from_dict(obj["videoObjectTracking"]) if obj.get("videoObjectTracking") is not None else None
        })
        return _obj



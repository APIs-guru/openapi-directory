# coding: utf-8

"""
    Cloud AutoML API

    Train high-quality custom machine learning models with minimum effort and machine learning expertise.

    The version of the OpenAPI document: v1beta1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt
from typing import Any, ClassVar, Dict, List, Optional, Union
from openapi_client.models.double_range import DoubleRange
from openapi_client.models.tables_model_column_info import TablesModelColumnInfo
from typing import Optional, Set
from typing_extensions import Self

class TablesAnnotation(BaseModel):
    """
    Contains annotation details specific to Tables.
    """ # noqa: E501
    baseline_score: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Output only. Stores the prediction score for the baseline example, which is defined as the example with all values set to their baseline values. This is used as part of the Sampled Shapley explanation of the model's prediction. This field is populated only when feature importance is requested. For regression models, this holds the baseline prediction for the baseline example. For classification models, this holds the baseline prediction for the baseline example for the argmax class.", alias="baselineScore")
    prediction_interval: Optional[DoubleRange] = Field(default=None, alias="predictionInterval")
    score: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Output only. A confidence estimate between 0.0 and 1.0, inclusive. A higher value means greater confidence in the returned value. For target_column_spec of FLOAT64 data type the score is not populated.")
    tables_model_column_info: Optional[List[TablesModelColumnInfo]] = Field(default=None, description="Output only. Auxiliary information for each of the model's input_feature_column_specs with respect to this particular prediction. If no other fields than column_spec_name and column_display_name would be populated, then this whole field is not.", alias="tablesModelColumnInfo")
    value: Optional[Any] = Field(default=None, description="The predicted value of the row's target_column. The value depends on the column's DataType: * CATEGORY - the predicted (with the above confidence `score`) CATEGORY value. * FLOAT64 - the predicted (with above `prediction_interval`) FLOAT64 value.")
    __properties: ClassVar[List[str]] = ["baselineScore", "predictionInterval", "score", "tablesModelColumnInfo", "value"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of TablesAnnotation from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of prediction_interval
        if self.prediction_interval:
            _dict['predictionInterval'] = self.prediction_interval.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in tables_model_column_info (list)
        _items = []
        if self.tables_model_column_info:
            for _item_tables_model_column_info in self.tables_model_column_info:
                if _item_tables_model_column_info:
                    _items.append(_item_tables_model_column_info.to_dict())
            _dict['tablesModelColumnInfo'] = _items
        # set to None if value (nullable) is None
        # and model_fields_set contains the field
        if self.value is None and "value" in self.model_fields_set:
            _dict['value'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of TablesAnnotation from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "baselineScore": obj.get("baselineScore"),
            "predictionInterval": DoubleRange.from_dict(obj["predictionInterval"]) if obj.get("predictionInterval") is not None else None,
            "score": obj.get("score"),
            "tablesModelColumnInfo": [TablesModelColumnInfo.from_dict(_item) for _item in obj["tablesModelColumnInfo"]] if obj.get("tablesModelColumnInfo") is not None else None,
            "value": obj.get("value")
        })
        return _obj



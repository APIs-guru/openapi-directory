# coding: utf-8

"""
    Cloud AutoML API

    Train high-quality custom machine learning models with minimum effort and machine learning expertise.

    The version of the OpenAPI document: v1beta1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.image_classification_model_metadata import ImageClassificationModelMetadata
from openapi_client.models.image_object_detection_model_metadata import ImageObjectDetectionModelMetadata
from openapi_client.models.tables_model_metadata import TablesModelMetadata
from openapi_client.models.text_classification_model_metadata import TextClassificationModelMetadata
from openapi_client.models.text_extraction_model_metadata import TextExtractionModelMetadata
from openapi_client.models.translation_model_metadata import TranslationModelMetadata
from typing import Optional, Set
from typing_extensions import Self

class Model(BaseModel):
    """
    API proto representing a trained machine learning model.
    """ # noqa: E501
    create_time: Optional[StrictStr] = Field(default=None, description="Output only. Timestamp when the model training finished and can be used for prediction.", alias="createTime")
    dataset_id: Optional[StrictStr] = Field(default=None, description="Required. The resource ID of the dataset used to create the model. The dataset must come from the same ancestor project and location.", alias="datasetId")
    deployment_state: Optional[StrictStr] = Field(default=None, description="Output only. Deployment state of the model. A model can only serve prediction requests after it gets deployed.", alias="deploymentState")
    display_name: Optional[StrictStr] = Field(default=None, description="Required. The name of the model to show in the interface. The name can be up to 32 characters long and can consist only of ASCII Latin letters A-Z and a-z, underscores (_), and ASCII digits 0-9. It must start with a letter.", alias="displayName")
    image_classification_model_metadata: Optional[ImageClassificationModelMetadata] = Field(default=None, alias="imageClassificationModelMetadata")
    image_object_detection_model_metadata: Optional[ImageObjectDetectionModelMetadata] = Field(default=None, alias="imageObjectDetectionModelMetadata")
    name: Optional[StrictStr] = Field(default=None, description="Output only. Resource name of the model. Format: `projects/{project_id}/locations/{location_id}/models/{model_id}`")
    tables_model_metadata: Optional[TablesModelMetadata] = Field(default=None, alias="tablesModelMetadata")
    text_classification_model_metadata: Optional[TextClassificationModelMetadata] = Field(default=None, alias="textClassificationModelMetadata")
    text_extraction_model_metadata: Optional[TextExtractionModelMetadata] = Field(default=None, alias="textExtractionModelMetadata")
    text_sentiment_model_metadata: Optional[Dict[str, Any]] = Field(default=None, description="Model metadata that is specific to text sentiment.", alias="textSentimentModelMetadata")
    train_example_count: Optional[StrictInt] = Field(default=None, description="Output only. The number of examples in the training set used for the model creation.", alias="trainExampleCount")
    translation_model_metadata: Optional[TranslationModelMetadata] = Field(default=None, alias="translationModelMetadata")
    update_time: Optional[StrictStr] = Field(default=None, description="Output only. Timestamp when this model was last updated.", alias="updateTime")
    validate_example_count: Optional[StrictInt] = Field(default=None, description="Output only. The number of examples in the validation set used for the model creation.", alias="validateExampleCount")
    video_classification_model_metadata: Optional[Dict[str, Any]] = Field(default=None, description="Model metadata specific to video classification.", alias="videoClassificationModelMetadata")
    video_object_tracking_model_metadata: Optional[Dict[str, Any]] = Field(default=None, description="Model metadata specific to video object tracking.", alias="videoObjectTrackingModelMetadata")
    __properties: ClassVar[List[str]] = ["createTime", "datasetId", "deploymentState", "displayName", "imageClassificationModelMetadata", "imageObjectDetectionModelMetadata", "name", "tablesModelMetadata", "textClassificationModelMetadata", "textExtractionModelMetadata", "textSentimentModelMetadata", "trainExampleCount", "translationModelMetadata", "updateTime", "validateExampleCount", "videoClassificationModelMetadata", "videoObjectTrackingModelMetadata"]

    @field_validator('deployment_state')
    def deployment_state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['DEPLOYMENT_STATE_UNSPECIFIED', 'DEPLOYED', 'UNDEPLOYED']):
            raise ValueError("must be one of enum values ('DEPLOYMENT_STATE_UNSPECIFIED', 'DEPLOYED', 'UNDEPLOYED')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Model from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "train_example_count",
            "validate_example_count",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of image_classification_model_metadata
        if self.image_classification_model_metadata:
            _dict['imageClassificationModelMetadata'] = self.image_classification_model_metadata.to_dict()
        # override the default output from pydantic by calling `to_dict()` of image_object_detection_model_metadata
        if self.image_object_detection_model_metadata:
            _dict['imageObjectDetectionModelMetadata'] = self.image_object_detection_model_metadata.to_dict()
        # override the default output from pydantic by calling `to_dict()` of tables_model_metadata
        if self.tables_model_metadata:
            _dict['tablesModelMetadata'] = self.tables_model_metadata.to_dict()
        # override the default output from pydantic by calling `to_dict()` of text_classification_model_metadata
        if self.text_classification_model_metadata:
            _dict['textClassificationModelMetadata'] = self.text_classification_model_metadata.to_dict()
        # override the default output from pydantic by calling `to_dict()` of text_extraction_model_metadata
        if self.text_extraction_model_metadata:
            _dict['textExtractionModelMetadata'] = self.text_extraction_model_metadata.to_dict()
        # override the default output from pydantic by calling `to_dict()` of translation_model_metadata
        if self.translation_model_metadata:
            _dict['translationModelMetadata'] = self.translation_model_metadata.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Model from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "createTime": obj.get("createTime"),
            "datasetId": obj.get("datasetId"),
            "deploymentState": obj.get("deploymentState"),
            "displayName": obj.get("displayName"),
            "imageClassificationModelMetadata": ImageClassificationModelMetadata.from_dict(obj["imageClassificationModelMetadata"]) if obj.get("imageClassificationModelMetadata") is not None else None,
            "imageObjectDetectionModelMetadata": ImageObjectDetectionModelMetadata.from_dict(obj["imageObjectDetectionModelMetadata"]) if obj.get("imageObjectDetectionModelMetadata") is not None else None,
            "name": obj.get("name"),
            "tablesModelMetadata": TablesModelMetadata.from_dict(obj["tablesModelMetadata"]) if obj.get("tablesModelMetadata") is not None else None,
            "textClassificationModelMetadata": TextClassificationModelMetadata.from_dict(obj["textClassificationModelMetadata"]) if obj.get("textClassificationModelMetadata") is not None else None,
            "textExtractionModelMetadata": TextExtractionModelMetadata.from_dict(obj["textExtractionModelMetadata"]) if obj.get("textExtractionModelMetadata") is not None else None,
            "textSentimentModelMetadata": obj.get("textSentimentModelMetadata"),
            "trainExampleCount": obj.get("trainExampleCount"),
            "translationModelMetadata": TranslationModelMetadata.from_dict(obj["translationModelMetadata"]) if obj.get("translationModelMetadata") is not None else None,
            "updateTime": obj.get("updateTime"),
            "validateExampleCount": obj.get("validateExampleCount"),
            "videoClassificationModelMetadata": obj.get("videoClassificationModelMetadata"),
            "videoObjectTrackingModelMetadata": obj.get("videoObjectTrackingModelMetadata")
        })
        return _obj



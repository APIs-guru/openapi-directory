# coding: utf-8

"""
    Cloud AutoML API

    Train high-quality custom machine learning models with minimum effort and machine learning expertise.

    The version of the OpenAPI document: v1beta1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.image_classification_dataset_metadata import ImageClassificationDatasetMetadata
from openapi_client.models.tables_dataset_metadata import TablesDatasetMetadata
from openapi_client.models.text_classification_dataset_metadata import TextClassificationDatasetMetadata
from openapi_client.models.text_sentiment_dataset_metadata import TextSentimentDatasetMetadata
from openapi_client.models.translation_dataset_metadata import TranslationDatasetMetadata
from typing import Optional, Set
from typing_extensions import Self

class Dataset(BaseModel):
    """
    A workspace for solving a single, particular machine learning (ML) problem. A workspace contains examples that may be annotated.
    """ # noqa: E501
    create_time: Optional[StrictStr] = Field(default=None, description="Output only. Timestamp when this dataset was created.", alias="createTime")
    description: Optional[StrictStr] = Field(default=None, description="User-provided description of the dataset. The description can be up to 25000 characters long.")
    display_name: Optional[StrictStr] = Field(default=None, description="Required. The name of the dataset to show in the interface. The name can be up to 32 characters long and can consist only of ASCII Latin letters A-Z and a-z, underscores (_), and ASCII digits 0-9.", alias="displayName")
    etag: Optional[StrictStr] = Field(default=None, description="Used to perform consistent read-modify-write updates. If not set, a blind \"overwrite\" update happens.")
    example_count: Optional[StrictInt] = Field(default=None, description="Output only. The number of examples in the dataset.", alias="exampleCount")
    image_classification_dataset_metadata: Optional[ImageClassificationDatasetMetadata] = Field(default=None, alias="imageClassificationDatasetMetadata")
    image_object_detection_dataset_metadata: Optional[Dict[str, Any]] = Field(default=None, description="Dataset metadata specific to image object detection.", alias="imageObjectDetectionDatasetMetadata")
    name: Optional[StrictStr] = Field(default=None, description="Output only. The resource name of the dataset. Form: `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}`")
    tables_dataset_metadata: Optional[TablesDatasetMetadata] = Field(default=None, alias="tablesDatasetMetadata")
    text_classification_dataset_metadata: Optional[TextClassificationDatasetMetadata] = Field(default=None, alias="textClassificationDatasetMetadata")
    text_extraction_dataset_metadata: Optional[Dict[str, Any]] = Field(default=None, description="Dataset metadata that is specific to text extraction", alias="textExtractionDatasetMetadata")
    text_sentiment_dataset_metadata: Optional[TextSentimentDatasetMetadata] = Field(default=None, alias="textSentimentDatasetMetadata")
    translation_dataset_metadata: Optional[TranslationDatasetMetadata] = Field(default=None, alias="translationDatasetMetadata")
    video_classification_dataset_metadata: Optional[Dict[str, Any]] = Field(default=None, description="Dataset metadata specific to video classification. All Video Classification datasets are treated as multi label.", alias="videoClassificationDatasetMetadata")
    video_object_tracking_dataset_metadata: Optional[Dict[str, Any]] = Field(default=None, description="Dataset metadata specific to video object tracking.", alias="videoObjectTrackingDatasetMetadata")
    __properties: ClassVar[List[str]] = ["createTime", "description", "displayName", "etag", "exampleCount", "imageClassificationDatasetMetadata", "imageObjectDetectionDatasetMetadata", "name", "tablesDatasetMetadata", "textClassificationDatasetMetadata", "textExtractionDatasetMetadata", "textSentimentDatasetMetadata", "translationDatasetMetadata", "videoClassificationDatasetMetadata", "videoObjectTrackingDatasetMetadata"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Dataset from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of image_classification_dataset_metadata
        if self.image_classification_dataset_metadata:
            _dict['imageClassificationDatasetMetadata'] = self.image_classification_dataset_metadata.to_dict()
        # override the default output from pydantic by calling `to_dict()` of tables_dataset_metadata
        if self.tables_dataset_metadata:
            _dict['tablesDatasetMetadata'] = self.tables_dataset_metadata.to_dict()
        # override the default output from pydantic by calling `to_dict()` of text_classification_dataset_metadata
        if self.text_classification_dataset_metadata:
            _dict['textClassificationDatasetMetadata'] = self.text_classification_dataset_metadata.to_dict()
        # override the default output from pydantic by calling `to_dict()` of text_sentiment_dataset_metadata
        if self.text_sentiment_dataset_metadata:
            _dict['textSentimentDatasetMetadata'] = self.text_sentiment_dataset_metadata.to_dict()
        # override the default output from pydantic by calling `to_dict()` of translation_dataset_metadata
        if self.translation_dataset_metadata:
            _dict['translationDatasetMetadata'] = self.translation_dataset_metadata.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Dataset from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "createTime": obj.get("createTime"),
            "description": obj.get("description"),
            "displayName": obj.get("displayName"),
            "etag": obj.get("etag"),
            "exampleCount": obj.get("exampleCount"),
            "imageClassificationDatasetMetadata": ImageClassificationDatasetMetadata.from_dict(obj["imageClassificationDatasetMetadata"]) if obj.get("imageClassificationDatasetMetadata") is not None else None,
            "imageObjectDetectionDatasetMetadata": obj.get("imageObjectDetectionDatasetMetadata"),
            "name": obj.get("name"),
            "tablesDatasetMetadata": TablesDatasetMetadata.from_dict(obj["tablesDatasetMetadata"]) if obj.get("tablesDatasetMetadata") is not None else None,
            "textClassificationDatasetMetadata": TextClassificationDatasetMetadata.from_dict(obj["textClassificationDatasetMetadata"]) if obj.get("textClassificationDatasetMetadata") is not None else None,
            "textExtractionDatasetMetadata": obj.get("textExtractionDatasetMetadata"),
            "textSentimentDatasetMetadata": TextSentimentDatasetMetadata.from_dict(obj["textSentimentDatasetMetadata"]) if obj.get("textSentimentDatasetMetadata") is not None else None,
            "translationDatasetMetadata": TranslationDatasetMetadata.from_dict(obj["translationDatasetMetadata"]) if obj.get("translationDatasetMetadata") is not None else None,
            "videoClassificationDatasetMetadata": obj.get("videoClassificationDatasetMetadata"),
            "videoObjectTrackingDatasetMetadata": obj.get("videoObjectTrackingDatasetMetadata")
        })
        return _obj



# coding: utf-8

"""
    Cloud AutoML API

    Train high-quality custom machine learning models with minimum effort and machine learning expertise.

    The version of the OpenAPI document: v1beta1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.input_config import InputConfig
from typing import Optional, Set
from typing_extensions import Self

class TableSpec(BaseModel):
    """
    A specification of a relational table. The table's schema is represented via its child column specs. It is pre-populated as part of ImportData by schema inference algorithm, the version of which is a required parameter of ImportData InputConfig. Note: While working with a table, at times the schema may be inconsistent with the data in the table (e.g. string in a FLOAT64 column). The consistency validation is done upon creation of a model. Used by: * Tables
    """ # noqa: E501
    column_count: Optional[StrictStr] = Field(default=None, description="Output only. The number of columns of the table. That is, the number of child ColumnSpec-s.", alias="columnCount")
    etag: Optional[StrictStr] = Field(default=None, description="Used to perform consistent read-modify-write updates. If not set, a blind \"overwrite\" update happens.")
    input_configs: Optional[List[InputConfig]] = Field(default=None, description="Output only. Input configs via which data currently residing in the table had been imported.", alias="inputConfigs")
    name: Optional[StrictStr] = Field(default=None, description="Output only. The resource name of the table spec. Form: `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/tableSpecs/{table_spec_id}`")
    row_count: Optional[StrictStr] = Field(default=None, description="Output only. The number of rows (i.e. examples) in the table.", alias="rowCount")
    time_column_spec_id: Optional[StrictStr] = Field(default=None, description="column_spec_id of the time column. Only used if the parent dataset's ml_use_column_spec_id is not set. Used to split rows into TRAIN, VALIDATE and TEST sets such that oldest rows go to TRAIN set, newest to TEST, and those in between to VALIDATE. Required type: TIMESTAMP. If both this column and ml_use_column are not set, then ML use of all rows will be assigned by AutoML. NOTE: Updates of this field will instantly affect any other users concurrently working with the dataset.", alias="timeColumnSpecId")
    valid_row_count: Optional[StrictStr] = Field(default=None, description="Output only. The number of valid rows (i.e. without values that don't match DataType-s of their columns).", alias="validRowCount")
    __properties: ClassVar[List[str]] = ["columnCount", "etag", "inputConfigs", "name", "rowCount", "timeColumnSpecId", "validRowCount"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of TableSpec from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in input_configs (list)
        _items = []
        if self.input_configs:
            for _item_input_configs in self.input_configs:
                if _item_input_configs:
                    _items.append(_item_input_configs.to_dict())
            _dict['inputConfigs'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of TableSpec from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "columnCount": obj.get("columnCount"),
            "etag": obj.get("etag"),
            "inputConfigs": [InputConfig.from_dict(_item) for _item in obj["inputConfigs"]] if obj.get("inputConfigs") is not None else None,
            "name": obj.get("name"),
            "rowCount": obj.get("rowCount"),
            "timeColumnSpecId": obj.get("timeColumnSpecId"),
            "validRowCount": obj.get("validRowCount")
        })
        return _obj



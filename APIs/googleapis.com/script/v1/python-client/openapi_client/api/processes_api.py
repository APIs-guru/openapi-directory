# coding: utf-8

"""
    Apps Script API

    Manages and executes Google Apps Script projects. 

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from pydantic import Field, StrictBool, StrictInt, StrictStr, field_validator
from typing import List, Optional
from typing_extensions import Annotated
from openapi_client.models.list_script_processes_response import ListScriptProcessesResponse
from openapi_client.models.list_user_processes_response import ListUserProcessesResponse

from openapi_client.api_client import ApiClient, RequestSerialized
from openapi_client.api_response import ApiResponse
from openapi_client.rest import RESTResponseType


class ProcessesApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def script_processes_list(
        self,
        xgafv: Annotated[Optional[StrictStr], Field(description="V1 error format.")] = None,
        access_token: Annotated[Optional[StrictStr], Field(description="OAuth access token.")] = None,
        alt: Annotated[Optional[StrictStr], Field(description="Data format for response.")] = None,
        param_callback: Annotated[Optional[StrictStr], Field(description="JSONP")] = None,
        fields: Annotated[Optional[StrictStr], Field(description="Selector specifying which fields to include in a partial response.")] = None,
        key: Annotated[Optional[StrictStr], Field(description="API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.")] = None,
        oauth_token: Annotated[Optional[StrictStr], Field(description="OAuth 2.0 token for the current user.")] = None,
        pretty_print: Annotated[Optional[StrictBool], Field(description="Returns response with indentations and line breaks.")] = None,
        quota_user: Annotated[Optional[StrictStr], Field(description="Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.")] = None,
        upload_protocol: Annotated[Optional[StrictStr], Field(description="Upload protocol for media (e.g. \"raw\", \"multipart\").")] = None,
        upload_type: Annotated[Optional[StrictStr], Field(description="Legacy upload protocol for media (e.g. \"media\", \"multipart\").")] = None,
        page_size: Annotated[Optional[StrictInt], Field(description="The maximum number of returned processes per page of results. Defaults to 50.")] = None,
        page_token: Annotated[Optional[StrictStr], Field(description="The token for continuing a previous list request on the next page. This should be set to the value of `nextPageToken` from a previous response.")] = None,
        user_process_filter_deployment_id: Annotated[Optional[StrictStr], Field(description="Optional field used to limit returned processes to those originating from projects with a specific deployment ID.")] = None,
        user_process_filter_end_time: Annotated[Optional[StrictStr], Field(description="Optional field used to limit returned processes to those that completed on or before the given timestamp.")] = None,
        user_process_filter_function_name: Annotated[Optional[StrictStr], Field(description="Optional field used to limit returned processes to those originating from a script function with the given function name.")] = None,
        user_process_filter_project_name: Annotated[Optional[StrictStr], Field(description="Optional field used to limit returned processes to those originating from projects with project names containing a specific string.")] = None,
        user_process_filter_script_id: Annotated[Optional[StrictStr], Field(description="Optional field used to limit returned processes to those originating from projects with a specific script ID.")] = None,
        user_process_filter_start_time: Annotated[Optional[StrictStr], Field(description="Optional field used to limit returned processes to those that were started on or after the given timestamp.")] = None,
        user_process_filter_statuses: Annotated[Optional[List[StrictStr]], Field(description="Optional field used to limit returned processes to those having one of the specified process statuses.")] = None,
        user_process_filter_types: Annotated[Optional[List[StrictStr]], Field(description="Optional field used to limit returned processes to those having one of the specified process types.")] = None,
        user_process_filter_user_access_levels: Annotated[Optional[List[StrictStr]], Field(description="Optional field used to limit returned processes to those having one of the specified user access levels.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ListUserProcessesResponse:
        """script_processes_list

        List information about processes made by or on behalf of a user, such as process type and current status.

        :param xgafv: V1 error format.
        :type xgafv: str
        :param access_token: OAuth access token.
        :type access_token: str
        :param alt: Data format for response.
        :type alt: str
        :param param_callback: JSONP
        :type param_callback: str
        :param fields: Selector specifying which fields to include in a partial response.
        :type fields: str
        :param key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
        :type key: str
        :param oauth_token: OAuth 2.0 token for the current user.
        :type oauth_token: str
        :param pretty_print: Returns response with indentations and line breaks.
        :type pretty_print: bool
        :param quota_user: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
        :type quota_user: str
        :param upload_protocol: Upload protocol for media (e.g. \"raw\", \"multipart\").
        :type upload_protocol: str
        :param upload_type: Legacy upload protocol for media (e.g. \"media\", \"multipart\").
        :type upload_type: str
        :param page_size: The maximum number of returned processes per page of results. Defaults to 50.
        :type page_size: int
        :param page_token: The token for continuing a previous list request on the next page. This should be set to the value of `nextPageToken` from a previous response.
        :type page_token: str
        :param user_process_filter_deployment_id: Optional field used to limit returned processes to those originating from projects with a specific deployment ID.
        :type user_process_filter_deployment_id: str
        :param user_process_filter_end_time: Optional field used to limit returned processes to those that completed on or before the given timestamp.
        :type user_process_filter_end_time: str
        :param user_process_filter_function_name: Optional field used to limit returned processes to those originating from a script function with the given function name.
        :type user_process_filter_function_name: str
        :param user_process_filter_project_name: Optional field used to limit returned processes to those originating from projects with project names containing a specific string.
        :type user_process_filter_project_name: str
        :param user_process_filter_script_id: Optional field used to limit returned processes to those originating from projects with a specific script ID.
        :type user_process_filter_script_id: str
        :param user_process_filter_start_time: Optional field used to limit returned processes to those that were started on or after the given timestamp.
        :type user_process_filter_start_time: str
        :param user_process_filter_statuses: Optional field used to limit returned processes to those having one of the specified process statuses.
        :type user_process_filter_statuses: List[str]
        :param user_process_filter_types: Optional field used to limit returned processes to those having one of the specified process types.
        :type user_process_filter_types: List[str]
        :param user_process_filter_user_access_levels: Optional field used to limit returned processes to those having one of the specified user access levels.
        :type user_process_filter_user_access_levels: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._script_processes_list_serialize(
            xgafv=xgafv,
            access_token=access_token,
            alt=alt,
            param_callback=param_callback,
            fields=fields,
            key=key,
            oauth_token=oauth_token,
            pretty_print=pretty_print,
            quota_user=quota_user,
            upload_protocol=upload_protocol,
            upload_type=upload_type,
            page_size=page_size,
            page_token=page_token,
            user_process_filter_deployment_id=user_process_filter_deployment_id,
            user_process_filter_end_time=user_process_filter_end_time,
            user_process_filter_function_name=user_process_filter_function_name,
            user_process_filter_project_name=user_process_filter_project_name,
            user_process_filter_script_id=user_process_filter_script_id,
            user_process_filter_start_time=user_process_filter_start_time,
            user_process_filter_statuses=user_process_filter_statuses,
            user_process_filter_types=user_process_filter_types,
            user_process_filter_user_access_levels=user_process_filter_user_access_levels,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ListUserProcessesResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def script_processes_list_with_http_info(
        self,
        xgafv: Annotated[Optional[StrictStr], Field(description="V1 error format.")] = None,
        access_token: Annotated[Optional[StrictStr], Field(description="OAuth access token.")] = None,
        alt: Annotated[Optional[StrictStr], Field(description="Data format for response.")] = None,
        param_callback: Annotated[Optional[StrictStr], Field(description="JSONP")] = None,
        fields: Annotated[Optional[StrictStr], Field(description="Selector specifying which fields to include in a partial response.")] = None,
        key: Annotated[Optional[StrictStr], Field(description="API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.")] = None,
        oauth_token: Annotated[Optional[StrictStr], Field(description="OAuth 2.0 token for the current user.")] = None,
        pretty_print: Annotated[Optional[StrictBool], Field(description="Returns response with indentations and line breaks.")] = None,
        quota_user: Annotated[Optional[StrictStr], Field(description="Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.")] = None,
        upload_protocol: Annotated[Optional[StrictStr], Field(description="Upload protocol for media (e.g. \"raw\", \"multipart\").")] = None,
        upload_type: Annotated[Optional[StrictStr], Field(description="Legacy upload protocol for media (e.g. \"media\", \"multipart\").")] = None,
        page_size: Annotated[Optional[StrictInt], Field(description="The maximum number of returned processes per page of results. Defaults to 50.")] = None,
        page_token: Annotated[Optional[StrictStr], Field(description="The token for continuing a previous list request on the next page. This should be set to the value of `nextPageToken` from a previous response.")] = None,
        user_process_filter_deployment_id: Annotated[Optional[StrictStr], Field(description="Optional field used to limit returned processes to those originating from projects with a specific deployment ID.")] = None,
        user_process_filter_end_time: Annotated[Optional[StrictStr], Field(description="Optional field used to limit returned processes to those that completed on or before the given timestamp.")] = None,
        user_process_filter_function_name: Annotated[Optional[StrictStr], Field(description="Optional field used to limit returned processes to those originating from a script function with the given function name.")] = None,
        user_process_filter_project_name: Annotated[Optional[StrictStr], Field(description="Optional field used to limit returned processes to those originating from projects with project names containing a specific string.")] = None,
        user_process_filter_script_id: Annotated[Optional[StrictStr], Field(description="Optional field used to limit returned processes to those originating from projects with a specific script ID.")] = None,
        user_process_filter_start_time: Annotated[Optional[StrictStr], Field(description="Optional field used to limit returned processes to those that were started on or after the given timestamp.")] = None,
        user_process_filter_statuses: Annotated[Optional[List[StrictStr]], Field(description="Optional field used to limit returned processes to those having one of the specified process statuses.")] = None,
        user_process_filter_types: Annotated[Optional[List[StrictStr]], Field(description="Optional field used to limit returned processes to those having one of the specified process types.")] = None,
        user_process_filter_user_access_levels: Annotated[Optional[List[StrictStr]], Field(description="Optional field used to limit returned processes to those having one of the specified user access levels.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[ListUserProcessesResponse]:
        """script_processes_list

        List information about processes made by or on behalf of a user, such as process type and current status.

        :param xgafv: V1 error format.
        :type xgafv: str
        :param access_token: OAuth access token.
        :type access_token: str
        :param alt: Data format for response.
        :type alt: str
        :param param_callback: JSONP
        :type param_callback: str
        :param fields: Selector specifying which fields to include in a partial response.
        :type fields: str
        :param key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
        :type key: str
        :param oauth_token: OAuth 2.0 token for the current user.
        :type oauth_token: str
        :param pretty_print: Returns response with indentations and line breaks.
        :type pretty_print: bool
        :param quota_user: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
        :type quota_user: str
        :param upload_protocol: Upload protocol for media (e.g. \"raw\", \"multipart\").
        :type upload_protocol: str
        :param upload_type: Legacy upload protocol for media (e.g. \"media\", \"multipart\").
        :type upload_type: str
        :param page_size: The maximum number of returned processes per page of results. Defaults to 50.
        :type page_size: int
        :param page_token: The token for continuing a previous list request on the next page. This should be set to the value of `nextPageToken` from a previous response.
        :type page_token: str
        :param user_process_filter_deployment_id: Optional field used to limit returned processes to those originating from projects with a specific deployment ID.
        :type user_process_filter_deployment_id: str
        :param user_process_filter_end_time: Optional field used to limit returned processes to those that completed on or before the given timestamp.
        :type user_process_filter_end_time: str
        :param user_process_filter_function_name: Optional field used to limit returned processes to those originating from a script function with the given function name.
        :type user_process_filter_function_name: str
        :param user_process_filter_project_name: Optional field used to limit returned processes to those originating from projects with project names containing a specific string.
        :type user_process_filter_project_name: str
        :param user_process_filter_script_id: Optional field used to limit returned processes to those originating from projects with a specific script ID.
        :type user_process_filter_script_id: str
        :param user_process_filter_start_time: Optional field used to limit returned processes to those that were started on or after the given timestamp.
        :type user_process_filter_start_time: str
        :param user_process_filter_statuses: Optional field used to limit returned processes to those having one of the specified process statuses.
        :type user_process_filter_statuses: List[str]
        :param user_process_filter_types: Optional field used to limit returned processes to those having one of the specified process types.
        :type user_process_filter_types: List[str]
        :param user_process_filter_user_access_levels: Optional field used to limit returned processes to those having one of the specified user access levels.
        :type user_process_filter_user_access_levels: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._script_processes_list_serialize(
            xgafv=xgafv,
            access_token=access_token,
            alt=alt,
            param_callback=param_callback,
            fields=fields,
            key=key,
            oauth_token=oauth_token,
            pretty_print=pretty_print,
            quota_user=quota_user,
            upload_protocol=upload_protocol,
            upload_type=upload_type,
            page_size=page_size,
            page_token=page_token,
            user_process_filter_deployment_id=user_process_filter_deployment_id,
            user_process_filter_end_time=user_process_filter_end_time,
            user_process_filter_function_name=user_process_filter_function_name,
            user_process_filter_project_name=user_process_filter_project_name,
            user_process_filter_script_id=user_process_filter_script_id,
            user_process_filter_start_time=user_process_filter_start_time,
            user_process_filter_statuses=user_process_filter_statuses,
            user_process_filter_types=user_process_filter_types,
            user_process_filter_user_access_levels=user_process_filter_user_access_levels,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ListUserProcessesResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def script_processes_list_without_preload_content(
        self,
        xgafv: Annotated[Optional[StrictStr], Field(description="V1 error format.")] = None,
        access_token: Annotated[Optional[StrictStr], Field(description="OAuth access token.")] = None,
        alt: Annotated[Optional[StrictStr], Field(description="Data format for response.")] = None,
        param_callback: Annotated[Optional[StrictStr], Field(description="JSONP")] = None,
        fields: Annotated[Optional[StrictStr], Field(description="Selector specifying which fields to include in a partial response.")] = None,
        key: Annotated[Optional[StrictStr], Field(description="API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.")] = None,
        oauth_token: Annotated[Optional[StrictStr], Field(description="OAuth 2.0 token for the current user.")] = None,
        pretty_print: Annotated[Optional[StrictBool], Field(description="Returns response with indentations and line breaks.")] = None,
        quota_user: Annotated[Optional[StrictStr], Field(description="Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.")] = None,
        upload_protocol: Annotated[Optional[StrictStr], Field(description="Upload protocol for media (e.g. \"raw\", \"multipart\").")] = None,
        upload_type: Annotated[Optional[StrictStr], Field(description="Legacy upload protocol for media (e.g. \"media\", \"multipart\").")] = None,
        page_size: Annotated[Optional[StrictInt], Field(description="The maximum number of returned processes per page of results. Defaults to 50.")] = None,
        page_token: Annotated[Optional[StrictStr], Field(description="The token for continuing a previous list request on the next page. This should be set to the value of `nextPageToken` from a previous response.")] = None,
        user_process_filter_deployment_id: Annotated[Optional[StrictStr], Field(description="Optional field used to limit returned processes to those originating from projects with a specific deployment ID.")] = None,
        user_process_filter_end_time: Annotated[Optional[StrictStr], Field(description="Optional field used to limit returned processes to those that completed on or before the given timestamp.")] = None,
        user_process_filter_function_name: Annotated[Optional[StrictStr], Field(description="Optional field used to limit returned processes to those originating from a script function with the given function name.")] = None,
        user_process_filter_project_name: Annotated[Optional[StrictStr], Field(description="Optional field used to limit returned processes to those originating from projects with project names containing a specific string.")] = None,
        user_process_filter_script_id: Annotated[Optional[StrictStr], Field(description="Optional field used to limit returned processes to those originating from projects with a specific script ID.")] = None,
        user_process_filter_start_time: Annotated[Optional[StrictStr], Field(description="Optional field used to limit returned processes to those that were started on or after the given timestamp.")] = None,
        user_process_filter_statuses: Annotated[Optional[List[StrictStr]], Field(description="Optional field used to limit returned processes to those having one of the specified process statuses.")] = None,
        user_process_filter_types: Annotated[Optional[List[StrictStr]], Field(description="Optional field used to limit returned processes to those having one of the specified process types.")] = None,
        user_process_filter_user_access_levels: Annotated[Optional[List[StrictStr]], Field(description="Optional field used to limit returned processes to those having one of the specified user access levels.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """script_processes_list

        List information about processes made by or on behalf of a user, such as process type and current status.

        :param xgafv: V1 error format.
        :type xgafv: str
        :param access_token: OAuth access token.
        :type access_token: str
        :param alt: Data format for response.
        :type alt: str
        :param param_callback: JSONP
        :type param_callback: str
        :param fields: Selector specifying which fields to include in a partial response.
        :type fields: str
        :param key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
        :type key: str
        :param oauth_token: OAuth 2.0 token for the current user.
        :type oauth_token: str
        :param pretty_print: Returns response with indentations and line breaks.
        :type pretty_print: bool
        :param quota_user: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
        :type quota_user: str
        :param upload_protocol: Upload protocol for media (e.g. \"raw\", \"multipart\").
        :type upload_protocol: str
        :param upload_type: Legacy upload protocol for media (e.g. \"media\", \"multipart\").
        :type upload_type: str
        :param page_size: The maximum number of returned processes per page of results. Defaults to 50.
        :type page_size: int
        :param page_token: The token for continuing a previous list request on the next page. This should be set to the value of `nextPageToken` from a previous response.
        :type page_token: str
        :param user_process_filter_deployment_id: Optional field used to limit returned processes to those originating from projects with a specific deployment ID.
        :type user_process_filter_deployment_id: str
        :param user_process_filter_end_time: Optional field used to limit returned processes to those that completed on or before the given timestamp.
        :type user_process_filter_end_time: str
        :param user_process_filter_function_name: Optional field used to limit returned processes to those originating from a script function with the given function name.
        :type user_process_filter_function_name: str
        :param user_process_filter_project_name: Optional field used to limit returned processes to those originating from projects with project names containing a specific string.
        :type user_process_filter_project_name: str
        :param user_process_filter_script_id: Optional field used to limit returned processes to those originating from projects with a specific script ID.
        :type user_process_filter_script_id: str
        :param user_process_filter_start_time: Optional field used to limit returned processes to those that were started on or after the given timestamp.
        :type user_process_filter_start_time: str
        :param user_process_filter_statuses: Optional field used to limit returned processes to those having one of the specified process statuses.
        :type user_process_filter_statuses: List[str]
        :param user_process_filter_types: Optional field used to limit returned processes to those having one of the specified process types.
        :type user_process_filter_types: List[str]
        :param user_process_filter_user_access_levels: Optional field used to limit returned processes to those having one of the specified user access levels.
        :type user_process_filter_user_access_levels: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._script_processes_list_serialize(
            xgafv=xgafv,
            access_token=access_token,
            alt=alt,
            param_callback=param_callback,
            fields=fields,
            key=key,
            oauth_token=oauth_token,
            pretty_print=pretty_print,
            quota_user=quota_user,
            upload_protocol=upload_protocol,
            upload_type=upload_type,
            page_size=page_size,
            page_token=page_token,
            user_process_filter_deployment_id=user_process_filter_deployment_id,
            user_process_filter_end_time=user_process_filter_end_time,
            user_process_filter_function_name=user_process_filter_function_name,
            user_process_filter_project_name=user_process_filter_project_name,
            user_process_filter_script_id=user_process_filter_script_id,
            user_process_filter_start_time=user_process_filter_start_time,
            user_process_filter_statuses=user_process_filter_statuses,
            user_process_filter_types=user_process_filter_types,
            user_process_filter_user_access_levels=user_process_filter_user_access_levels,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ListUserProcessesResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _script_processes_list_serialize(
        self,
        xgafv,
        access_token,
        alt,
        param_callback,
        fields,
        key,
        oauth_token,
        pretty_print,
        quota_user,
        upload_protocol,
        upload_type,
        page_size,
        page_token,
        user_process_filter_deployment_id,
        user_process_filter_end_time,
        user_process_filter_function_name,
        user_process_filter_project_name,
        user_process_filter_script_id,
        user_process_filter_start_time,
        user_process_filter_statuses,
        user_process_filter_types,
        user_process_filter_user_access_levels,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'userProcessFilter.statuses': 'multi',
            'userProcessFilter.types': 'multi',
            'userProcessFilter.userAccessLevels': 'multi',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if xgafv is not None:
            
            _query_params.append(('$.xgafv', xgafv))
            
        if access_token is not None:
            
            _query_params.append(('access_token', access_token))
            
        if alt is not None:
            
            _query_params.append(('alt', alt))
            
        if param_callback is not None:
            
            _query_params.append(('callback', param_callback))
            
        if fields is not None:
            
            _query_params.append(('fields', fields))
            
        if key is not None:
            
            _query_params.append(('key', key))
            
        if oauth_token is not None:
            
            _query_params.append(('oauth_token', oauth_token))
            
        if pretty_print is not None:
            
            _query_params.append(('prettyPrint', pretty_print))
            
        if quota_user is not None:
            
            _query_params.append(('quotaUser', quota_user))
            
        if upload_protocol is not None:
            
            _query_params.append(('upload_protocol', upload_protocol))
            
        if upload_type is not None:
            
            _query_params.append(('uploadType', upload_type))
            
        if page_size is not None:
            
            _query_params.append(('pageSize', page_size))
            
        if page_token is not None:
            
            _query_params.append(('pageToken', page_token))
            
        if user_process_filter_deployment_id is not None:
            
            _query_params.append(('userProcessFilter.deploymentId', user_process_filter_deployment_id))
            
        if user_process_filter_end_time is not None:
            
            _query_params.append(('userProcessFilter.endTime', user_process_filter_end_time))
            
        if user_process_filter_function_name is not None:
            
            _query_params.append(('userProcessFilter.functionName', user_process_filter_function_name))
            
        if user_process_filter_project_name is not None:
            
            _query_params.append(('userProcessFilter.projectName', user_process_filter_project_name))
            
        if user_process_filter_script_id is not None:
            
            _query_params.append(('userProcessFilter.scriptId', user_process_filter_script_id))
            
        if user_process_filter_start_time is not None:
            
            _query_params.append(('userProcessFilter.startTime', user_process_filter_start_time))
            
        if user_process_filter_statuses is not None:
            
            _query_params.append(('userProcessFilter.statuses', user_process_filter_statuses))
            
        if user_process_filter_types is not None:
            
            _query_params.append(('userProcessFilter.types', user_process_filter_types))
            
        if user_process_filter_user_access_levels is not None:
            
            _query_params.append(('userProcessFilter.userAccessLevels', user_process_filter_user_access_levels))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'Oauth2c', 
            'Oauth2'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/v1/processes',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def script_processes_list_script_processes(
        self,
        xgafv: Annotated[Optional[StrictStr], Field(description="V1 error format.")] = None,
        access_token: Annotated[Optional[StrictStr], Field(description="OAuth access token.")] = None,
        alt: Annotated[Optional[StrictStr], Field(description="Data format for response.")] = None,
        param_callback: Annotated[Optional[StrictStr], Field(description="JSONP")] = None,
        fields: Annotated[Optional[StrictStr], Field(description="Selector specifying which fields to include in a partial response.")] = None,
        key: Annotated[Optional[StrictStr], Field(description="API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.")] = None,
        oauth_token: Annotated[Optional[StrictStr], Field(description="OAuth 2.0 token for the current user.")] = None,
        pretty_print: Annotated[Optional[StrictBool], Field(description="Returns response with indentations and line breaks.")] = None,
        quota_user: Annotated[Optional[StrictStr], Field(description="Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.")] = None,
        upload_protocol: Annotated[Optional[StrictStr], Field(description="Upload protocol for media (e.g. \"raw\", \"multipart\").")] = None,
        upload_type: Annotated[Optional[StrictStr], Field(description="Legacy upload protocol for media (e.g. \"media\", \"multipart\").")] = None,
        page_size: Annotated[Optional[StrictInt], Field(description="The maximum number of returned processes per page of results. Defaults to 50.")] = None,
        page_token: Annotated[Optional[StrictStr], Field(description="The token for continuing a previous list request on the next page. This should be set to the value of `nextPageToken` from a previous response.")] = None,
        script_id: Annotated[Optional[StrictStr], Field(description="The script ID of the project whose processes are listed.")] = None,
        script_process_filter_deployment_id: Annotated[Optional[StrictStr], Field(description="Optional field used to limit returned processes to those originating from projects with a specific deployment ID.")] = None,
        script_process_filter_end_time: Annotated[Optional[StrictStr], Field(description="Optional field used to limit returned processes to those that completed on or before the given timestamp.")] = None,
        script_process_filter_function_name: Annotated[Optional[StrictStr], Field(description="Optional field used to limit returned processes to those originating from a script function with the given function name.")] = None,
        script_process_filter_start_time: Annotated[Optional[StrictStr], Field(description="Optional field used to limit returned processes to those that were started on or after the given timestamp.")] = None,
        script_process_filter_statuses: Annotated[Optional[List[StrictStr]], Field(description="Optional field used to limit returned processes to those having one of the specified process statuses.")] = None,
        script_process_filter_types: Annotated[Optional[List[StrictStr]], Field(description="Optional field used to limit returned processes to those having one of the specified process types.")] = None,
        script_process_filter_user_access_levels: Annotated[Optional[List[StrictStr]], Field(description="Optional field used to limit returned processes to those having one of the specified user access levels.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ListScriptProcessesResponse:
        """script_processes_list_script_processes

        List information about a script's executed processes, such as process type and current status.

        :param xgafv: V1 error format.
        :type xgafv: str
        :param access_token: OAuth access token.
        :type access_token: str
        :param alt: Data format for response.
        :type alt: str
        :param param_callback: JSONP
        :type param_callback: str
        :param fields: Selector specifying which fields to include in a partial response.
        :type fields: str
        :param key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
        :type key: str
        :param oauth_token: OAuth 2.0 token for the current user.
        :type oauth_token: str
        :param pretty_print: Returns response with indentations and line breaks.
        :type pretty_print: bool
        :param quota_user: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
        :type quota_user: str
        :param upload_protocol: Upload protocol for media (e.g. \"raw\", \"multipart\").
        :type upload_protocol: str
        :param upload_type: Legacy upload protocol for media (e.g. \"media\", \"multipart\").
        :type upload_type: str
        :param page_size: The maximum number of returned processes per page of results. Defaults to 50.
        :type page_size: int
        :param page_token: The token for continuing a previous list request on the next page. This should be set to the value of `nextPageToken` from a previous response.
        :type page_token: str
        :param script_id: The script ID of the project whose processes are listed.
        :type script_id: str
        :param script_process_filter_deployment_id: Optional field used to limit returned processes to those originating from projects with a specific deployment ID.
        :type script_process_filter_deployment_id: str
        :param script_process_filter_end_time: Optional field used to limit returned processes to those that completed on or before the given timestamp.
        :type script_process_filter_end_time: str
        :param script_process_filter_function_name: Optional field used to limit returned processes to those originating from a script function with the given function name.
        :type script_process_filter_function_name: str
        :param script_process_filter_start_time: Optional field used to limit returned processes to those that were started on or after the given timestamp.
        :type script_process_filter_start_time: str
        :param script_process_filter_statuses: Optional field used to limit returned processes to those having one of the specified process statuses.
        :type script_process_filter_statuses: List[str]
        :param script_process_filter_types: Optional field used to limit returned processes to those having one of the specified process types.
        :type script_process_filter_types: List[str]
        :param script_process_filter_user_access_levels: Optional field used to limit returned processes to those having one of the specified user access levels.
        :type script_process_filter_user_access_levels: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._script_processes_list_script_processes_serialize(
            xgafv=xgafv,
            access_token=access_token,
            alt=alt,
            param_callback=param_callback,
            fields=fields,
            key=key,
            oauth_token=oauth_token,
            pretty_print=pretty_print,
            quota_user=quota_user,
            upload_protocol=upload_protocol,
            upload_type=upload_type,
            page_size=page_size,
            page_token=page_token,
            script_id=script_id,
            script_process_filter_deployment_id=script_process_filter_deployment_id,
            script_process_filter_end_time=script_process_filter_end_time,
            script_process_filter_function_name=script_process_filter_function_name,
            script_process_filter_start_time=script_process_filter_start_time,
            script_process_filter_statuses=script_process_filter_statuses,
            script_process_filter_types=script_process_filter_types,
            script_process_filter_user_access_levels=script_process_filter_user_access_levels,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ListScriptProcessesResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def script_processes_list_script_processes_with_http_info(
        self,
        xgafv: Annotated[Optional[StrictStr], Field(description="V1 error format.")] = None,
        access_token: Annotated[Optional[StrictStr], Field(description="OAuth access token.")] = None,
        alt: Annotated[Optional[StrictStr], Field(description="Data format for response.")] = None,
        param_callback: Annotated[Optional[StrictStr], Field(description="JSONP")] = None,
        fields: Annotated[Optional[StrictStr], Field(description="Selector specifying which fields to include in a partial response.")] = None,
        key: Annotated[Optional[StrictStr], Field(description="API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.")] = None,
        oauth_token: Annotated[Optional[StrictStr], Field(description="OAuth 2.0 token for the current user.")] = None,
        pretty_print: Annotated[Optional[StrictBool], Field(description="Returns response with indentations and line breaks.")] = None,
        quota_user: Annotated[Optional[StrictStr], Field(description="Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.")] = None,
        upload_protocol: Annotated[Optional[StrictStr], Field(description="Upload protocol for media (e.g. \"raw\", \"multipart\").")] = None,
        upload_type: Annotated[Optional[StrictStr], Field(description="Legacy upload protocol for media (e.g. \"media\", \"multipart\").")] = None,
        page_size: Annotated[Optional[StrictInt], Field(description="The maximum number of returned processes per page of results. Defaults to 50.")] = None,
        page_token: Annotated[Optional[StrictStr], Field(description="The token for continuing a previous list request on the next page. This should be set to the value of `nextPageToken` from a previous response.")] = None,
        script_id: Annotated[Optional[StrictStr], Field(description="The script ID of the project whose processes are listed.")] = None,
        script_process_filter_deployment_id: Annotated[Optional[StrictStr], Field(description="Optional field used to limit returned processes to those originating from projects with a specific deployment ID.")] = None,
        script_process_filter_end_time: Annotated[Optional[StrictStr], Field(description="Optional field used to limit returned processes to those that completed on or before the given timestamp.")] = None,
        script_process_filter_function_name: Annotated[Optional[StrictStr], Field(description="Optional field used to limit returned processes to those originating from a script function with the given function name.")] = None,
        script_process_filter_start_time: Annotated[Optional[StrictStr], Field(description="Optional field used to limit returned processes to those that were started on or after the given timestamp.")] = None,
        script_process_filter_statuses: Annotated[Optional[List[StrictStr]], Field(description="Optional field used to limit returned processes to those having one of the specified process statuses.")] = None,
        script_process_filter_types: Annotated[Optional[List[StrictStr]], Field(description="Optional field used to limit returned processes to those having one of the specified process types.")] = None,
        script_process_filter_user_access_levels: Annotated[Optional[List[StrictStr]], Field(description="Optional field used to limit returned processes to those having one of the specified user access levels.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[ListScriptProcessesResponse]:
        """script_processes_list_script_processes

        List information about a script's executed processes, such as process type and current status.

        :param xgafv: V1 error format.
        :type xgafv: str
        :param access_token: OAuth access token.
        :type access_token: str
        :param alt: Data format for response.
        :type alt: str
        :param param_callback: JSONP
        :type param_callback: str
        :param fields: Selector specifying which fields to include in a partial response.
        :type fields: str
        :param key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
        :type key: str
        :param oauth_token: OAuth 2.0 token for the current user.
        :type oauth_token: str
        :param pretty_print: Returns response with indentations and line breaks.
        :type pretty_print: bool
        :param quota_user: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
        :type quota_user: str
        :param upload_protocol: Upload protocol for media (e.g. \"raw\", \"multipart\").
        :type upload_protocol: str
        :param upload_type: Legacy upload protocol for media (e.g. \"media\", \"multipart\").
        :type upload_type: str
        :param page_size: The maximum number of returned processes per page of results. Defaults to 50.
        :type page_size: int
        :param page_token: The token for continuing a previous list request on the next page. This should be set to the value of `nextPageToken` from a previous response.
        :type page_token: str
        :param script_id: The script ID of the project whose processes are listed.
        :type script_id: str
        :param script_process_filter_deployment_id: Optional field used to limit returned processes to those originating from projects with a specific deployment ID.
        :type script_process_filter_deployment_id: str
        :param script_process_filter_end_time: Optional field used to limit returned processes to those that completed on or before the given timestamp.
        :type script_process_filter_end_time: str
        :param script_process_filter_function_name: Optional field used to limit returned processes to those originating from a script function with the given function name.
        :type script_process_filter_function_name: str
        :param script_process_filter_start_time: Optional field used to limit returned processes to those that were started on or after the given timestamp.
        :type script_process_filter_start_time: str
        :param script_process_filter_statuses: Optional field used to limit returned processes to those having one of the specified process statuses.
        :type script_process_filter_statuses: List[str]
        :param script_process_filter_types: Optional field used to limit returned processes to those having one of the specified process types.
        :type script_process_filter_types: List[str]
        :param script_process_filter_user_access_levels: Optional field used to limit returned processes to those having one of the specified user access levels.
        :type script_process_filter_user_access_levels: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._script_processes_list_script_processes_serialize(
            xgafv=xgafv,
            access_token=access_token,
            alt=alt,
            param_callback=param_callback,
            fields=fields,
            key=key,
            oauth_token=oauth_token,
            pretty_print=pretty_print,
            quota_user=quota_user,
            upload_protocol=upload_protocol,
            upload_type=upload_type,
            page_size=page_size,
            page_token=page_token,
            script_id=script_id,
            script_process_filter_deployment_id=script_process_filter_deployment_id,
            script_process_filter_end_time=script_process_filter_end_time,
            script_process_filter_function_name=script_process_filter_function_name,
            script_process_filter_start_time=script_process_filter_start_time,
            script_process_filter_statuses=script_process_filter_statuses,
            script_process_filter_types=script_process_filter_types,
            script_process_filter_user_access_levels=script_process_filter_user_access_levels,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ListScriptProcessesResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def script_processes_list_script_processes_without_preload_content(
        self,
        xgafv: Annotated[Optional[StrictStr], Field(description="V1 error format.")] = None,
        access_token: Annotated[Optional[StrictStr], Field(description="OAuth access token.")] = None,
        alt: Annotated[Optional[StrictStr], Field(description="Data format for response.")] = None,
        param_callback: Annotated[Optional[StrictStr], Field(description="JSONP")] = None,
        fields: Annotated[Optional[StrictStr], Field(description="Selector specifying which fields to include in a partial response.")] = None,
        key: Annotated[Optional[StrictStr], Field(description="API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.")] = None,
        oauth_token: Annotated[Optional[StrictStr], Field(description="OAuth 2.0 token for the current user.")] = None,
        pretty_print: Annotated[Optional[StrictBool], Field(description="Returns response with indentations and line breaks.")] = None,
        quota_user: Annotated[Optional[StrictStr], Field(description="Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.")] = None,
        upload_protocol: Annotated[Optional[StrictStr], Field(description="Upload protocol for media (e.g. \"raw\", \"multipart\").")] = None,
        upload_type: Annotated[Optional[StrictStr], Field(description="Legacy upload protocol for media (e.g. \"media\", \"multipart\").")] = None,
        page_size: Annotated[Optional[StrictInt], Field(description="The maximum number of returned processes per page of results. Defaults to 50.")] = None,
        page_token: Annotated[Optional[StrictStr], Field(description="The token for continuing a previous list request on the next page. This should be set to the value of `nextPageToken` from a previous response.")] = None,
        script_id: Annotated[Optional[StrictStr], Field(description="The script ID of the project whose processes are listed.")] = None,
        script_process_filter_deployment_id: Annotated[Optional[StrictStr], Field(description="Optional field used to limit returned processes to those originating from projects with a specific deployment ID.")] = None,
        script_process_filter_end_time: Annotated[Optional[StrictStr], Field(description="Optional field used to limit returned processes to those that completed on or before the given timestamp.")] = None,
        script_process_filter_function_name: Annotated[Optional[StrictStr], Field(description="Optional field used to limit returned processes to those originating from a script function with the given function name.")] = None,
        script_process_filter_start_time: Annotated[Optional[StrictStr], Field(description="Optional field used to limit returned processes to those that were started on or after the given timestamp.")] = None,
        script_process_filter_statuses: Annotated[Optional[List[StrictStr]], Field(description="Optional field used to limit returned processes to those having one of the specified process statuses.")] = None,
        script_process_filter_types: Annotated[Optional[List[StrictStr]], Field(description="Optional field used to limit returned processes to those having one of the specified process types.")] = None,
        script_process_filter_user_access_levels: Annotated[Optional[List[StrictStr]], Field(description="Optional field used to limit returned processes to those having one of the specified user access levels.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """script_processes_list_script_processes

        List information about a script's executed processes, such as process type and current status.

        :param xgafv: V1 error format.
        :type xgafv: str
        :param access_token: OAuth access token.
        :type access_token: str
        :param alt: Data format for response.
        :type alt: str
        :param param_callback: JSONP
        :type param_callback: str
        :param fields: Selector specifying which fields to include in a partial response.
        :type fields: str
        :param key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
        :type key: str
        :param oauth_token: OAuth 2.0 token for the current user.
        :type oauth_token: str
        :param pretty_print: Returns response with indentations and line breaks.
        :type pretty_print: bool
        :param quota_user: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
        :type quota_user: str
        :param upload_protocol: Upload protocol for media (e.g. \"raw\", \"multipart\").
        :type upload_protocol: str
        :param upload_type: Legacy upload protocol for media (e.g. \"media\", \"multipart\").
        :type upload_type: str
        :param page_size: The maximum number of returned processes per page of results. Defaults to 50.
        :type page_size: int
        :param page_token: The token for continuing a previous list request on the next page. This should be set to the value of `nextPageToken` from a previous response.
        :type page_token: str
        :param script_id: The script ID of the project whose processes are listed.
        :type script_id: str
        :param script_process_filter_deployment_id: Optional field used to limit returned processes to those originating from projects with a specific deployment ID.
        :type script_process_filter_deployment_id: str
        :param script_process_filter_end_time: Optional field used to limit returned processes to those that completed on or before the given timestamp.
        :type script_process_filter_end_time: str
        :param script_process_filter_function_name: Optional field used to limit returned processes to those originating from a script function with the given function name.
        :type script_process_filter_function_name: str
        :param script_process_filter_start_time: Optional field used to limit returned processes to those that were started on or after the given timestamp.
        :type script_process_filter_start_time: str
        :param script_process_filter_statuses: Optional field used to limit returned processes to those having one of the specified process statuses.
        :type script_process_filter_statuses: List[str]
        :param script_process_filter_types: Optional field used to limit returned processes to those having one of the specified process types.
        :type script_process_filter_types: List[str]
        :param script_process_filter_user_access_levels: Optional field used to limit returned processes to those having one of the specified user access levels.
        :type script_process_filter_user_access_levels: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._script_processes_list_script_processes_serialize(
            xgafv=xgafv,
            access_token=access_token,
            alt=alt,
            param_callback=param_callback,
            fields=fields,
            key=key,
            oauth_token=oauth_token,
            pretty_print=pretty_print,
            quota_user=quota_user,
            upload_protocol=upload_protocol,
            upload_type=upload_type,
            page_size=page_size,
            page_token=page_token,
            script_id=script_id,
            script_process_filter_deployment_id=script_process_filter_deployment_id,
            script_process_filter_end_time=script_process_filter_end_time,
            script_process_filter_function_name=script_process_filter_function_name,
            script_process_filter_start_time=script_process_filter_start_time,
            script_process_filter_statuses=script_process_filter_statuses,
            script_process_filter_types=script_process_filter_types,
            script_process_filter_user_access_levels=script_process_filter_user_access_levels,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ListScriptProcessesResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _script_processes_list_script_processes_serialize(
        self,
        xgafv,
        access_token,
        alt,
        param_callback,
        fields,
        key,
        oauth_token,
        pretty_print,
        quota_user,
        upload_protocol,
        upload_type,
        page_size,
        page_token,
        script_id,
        script_process_filter_deployment_id,
        script_process_filter_end_time,
        script_process_filter_function_name,
        script_process_filter_start_time,
        script_process_filter_statuses,
        script_process_filter_types,
        script_process_filter_user_access_levels,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'scriptProcessFilter.statuses': 'multi',
            'scriptProcessFilter.types': 'multi',
            'scriptProcessFilter.userAccessLevels': 'multi',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if xgafv is not None:
            
            _query_params.append(('$.xgafv', xgafv))
            
        if access_token is not None:
            
            _query_params.append(('access_token', access_token))
            
        if alt is not None:
            
            _query_params.append(('alt', alt))
            
        if param_callback is not None:
            
            _query_params.append(('callback', param_callback))
            
        if fields is not None:
            
            _query_params.append(('fields', fields))
            
        if key is not None:
            
            _query_params.append(('key', key))
            
        if oauth_token is not None:
            
            _query_params.append(('oauth_token', oauth_token))
            
        if pretty_print is not None:
            
            _query_params.append(('prettyPrint', pretty_print))
            
        if quota_user is not None:
            
            _query_params.append(('quotaUser', quota_user))
            
        if upload_protocol is not None:
            
            _query_params.append(('upload_protocol', upload_protocol))
            
        if upload_type is not None:
            
            _query_params.append(('uploadType', upload_type))
            
        if page_size is not None:
            
            _query_params.append(('pageSize', page_size))
            
        if page_token is not None:
            
            _query_params.append(('pageToken', page_token))
            
        if script_id is not None:
            
            _query_params.append(('scriptId', script_id))
            
        if script_process_filter_deployment_id is not None:
            
            _query_params.append(('scriptProcessFilter.deploymentId', script_process_filter_deployment_id))
            
        if script_process_filter_end_time is not None:
            
            _query_params.append(('scriptProcessFilter.endTime', script_process_filter_end_time))
            
        if script_process_filter_function_name is not None:
            
            _query_params.append(('scriptProcessFilter.functionName', script_process_filter_function_name))
            
        if script_process_filter_start_time is not None:
            
            _query_params.append(('scriptProcessFilter.startTime', script_process_filter_start_time))
            
        if script_process_filter_statuses is not None:
            
            _query_params.append(('scriptProcessFilter.statuses', script_process_filter_statuses))
            
        if script_process_filter_types is not None:
            
            _query_params.append(('scriptProcessFilter.types', script_process_filter_types))
            
        if script_process_filter_user_access_levels is not None:
            
            _query_params.append(('scriptProcessFilter.userAccessLevels', script_process_filter_user_access_levels))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'Oauth2c', 
            'Oauth2'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/v1/processes:listScriptProcesses',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )



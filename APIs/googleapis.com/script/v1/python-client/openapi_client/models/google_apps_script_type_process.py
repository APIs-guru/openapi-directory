# coding: utf-8

"""
    Apps Script API

    Manages and executes Google Apps Script projects. 

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class GoogleAppsScriptTypeProcess(BaseModel):
    """
    Representation of a single script process execution that was started from the script editor, a trigger, an application, or using the Apps Script API. This is distinct from the `Operation` resource, which only represents executions started via the Apps Script API.
    """ # noqa: E501
    duration: Optional[StrictStr] = Field(default=None, description="Duration the execution spent executing.")
    function_name: Optional[StrictStr] = Field(default=None, description="Name of the function the started the execution.", alias="functionName")
    process_status: Optional[StrictStr] = Field(default=None, description="The executions status.", alias="processStatus")
    process_type: Optional[StrictStr] = Field(default=None, description="The executions type.", alias="processType")
    project_name: Optional[StrictStr] = Field(default=None, description="Name of the script being executed.", alias="projectName")
    runtime_version: Optional[StrictStr] = Field(default=None, description="Which version of maestro to use to execute the script.", alias="runtimeVersion")
    start_time: Optional[StrictStr] = Field(default=None, description="Time the execution started.", alias="startTime")
    user_access_level: Optional[StrictStr] = Field(default=None, description="The executing users access level to the script.", alias="userAccessLevel")
    __properties: ClassVar[List[str]] = ["duration", "functionName", "processStatus", "processType", "projectName", "runtimeVersion", "startTime", "userAccessLevel"]

    @field_validator('process_status')
    def process_status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['PROCESS_STATUS_UNSPECIFIED', 'RUNNING', 'PAUSED', 'COMPLETED', 'CANCELED', 'FAILED', 'TIMED_OUT', 'UNKNOWN', 'DELAYED', 'EXECUTION_DISABLED']):
            raise ValueError("must be one of enum values ('PROCESS_STATUS_UNSPECIFIED', 'RUNNING', 'PAUSED', 'COMPLETED', 'CANCELED', 'FAILED', 'TIMED_OUT', 'UNKNOWN', 'DELAYED', 'EXECUTION_DISABLED')")
        return value

    @field_validator('process_type')
    def process_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['PROCESS_TYPE_UNSPECIFIED', 'ADD_ON', 'EXECUTION_API', 'TIME_DRIVEN', 'TRIGGER', 'WEBAPP', 'EDITOR', 'SIMPLE_TRIGGER', 'MENU', 'BATCH_TASK']):
            raise ValueError("must be one of enum values ('PROCESS_TYPE_UNSPECIFIED', 'ADD_ON', 'EXECUTION_API', 'TIME_DRIVEN', 'TRIGGER', 'WEBAPP', 'EDITOR', 'SIMPLE_TRIGGER', 'MENU', 'BATCH_TASK')")
        return value

    @field_validator('runtime_version')
    def runtime_version_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['RUNTIME_VERSION_UNSPECIFIED', 'DEPRECATED_ES5', 'V8']):
            raise ValueError("must be one of enum values ('RUNTIME_VERSION_UNSPECIFIED', 'DEPRECATED_ES5', 'V8')")
        return value

    @field_validator('user_access_level')
    def user_access_level_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['USER_ACCESS_LEVEL_UNSPECIFIED', 'NONE', 'READ', 'WRITE', 'OWNER']):
            raise ValueError("must be one of enum values ('USER_ACCESS_LEVEL_UNSPECIFIED', 'NONE', 'READ', 'WRITE', 'OWNER')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleAppsScriptTypeProcess from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleAppsScriptTypeProcess from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "duration": obj.get("duration"),
            "functionName": obj.get("functionName"),
            "processStatus": obj.get("processStatus"),
            "processType": obj.get("processType"),
            "projectName": obj.get("projectName"),
            "runtimeVersion": obj.get("runtimeVersion"),
            "startTime": obj.get("startTime"),
            "userAccessLevel": obj.get("userAccessLevel")
        })
        return _obj



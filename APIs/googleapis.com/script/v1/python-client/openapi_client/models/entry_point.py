# coding: utf-8

"""
    Apps Script API

    Manages and executes Google Apps Script projects. 

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_apps_script_type_add_on_entry_point import GoogleAppsScriptTypeAddOnEntryPoint
from openapi_client.models.google_apps_script_type_execution_api_entry_point import GoogleAppsScriptTypeExecutionApiEntryPoint
from openapi_client.models.google_apps_script_type_web_app_entry_point import GoogleAppsScriptTypeWebAppEntryPoint
from typing import Optional, Set
from typing_extensions import Self

class EntryPoint(BaseModel):
    """
    A configuration that defines how a deployment is accessed externally.
    """ # noqa: E501
    add_on: Optional[GoogleAppsScriptTypeAddOnEntryPoint] = Field(default=None, alias="addOn")
    entry_point_type: Optional[StrictStr] = Field(default=None, description="The type of the entry point.", alias="entryPointType")
    execution_api: Optional[GoogleAppsScriptTypeExecutionApiEntryPoint] = Field(default=None, alias="executionApi")
    web_app: Optional[GoogleAppsScriptTypeWebAppEntryPoint] = Field(default=None, alias="webApp")
    __properties: ClassVar[List[str]] = ["addOn", "entryPointType", "executionApi", "webApp"]

    @field_validator('entry_point_type')
    def entry_point_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['ENTRY_POINT_TYPE_UNSPECIFIED', 'WEB_APP', 'EXECUTION_API', 'ADD_ON']):
            raise ValueError("must be one of enum values ('ENTRY_POINT_TYPE_UNSPECIFIED', 'WEB_APP', 'EXECUTION_API', 'ADD_ON')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of EntryPoint from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of add_on
        if self.add_on:
            _dict['addOn'] = self.add_on.to_dict()
        # override the default output from pydantic by calling `to_dict()` of execution_api
        if self.execution_api:
            _dict['executionApi'] = self.execution_api.to_dict()
        # override the default output from pydantic by calling `to_dict()` of web_app
        if self.web_app:
            _dict['webApp'] = self.web_app.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of EntryPoint from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "addOn": GoogleAppsScriptTypeAddOnEntryPoint.from_dict(obj["addOn"]) if obj.get("addOn") is not None else None,
            "entryPointType": obj.get("entryPointType"),
            "executionApi": GoogleAppsScriptTypeExecutionApiEntryPoint.from_dict(obj["executionApi"]) if obj.get("executionApi") is not None else None,
            "webApp": GoogleAppsScriptTypeWebAppEntryPoint.from_dict(obj["webApp"]) if obj.get("webApp") is not None else None
        })
        return _obj



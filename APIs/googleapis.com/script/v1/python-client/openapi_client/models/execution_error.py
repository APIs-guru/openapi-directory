# coding: utf-8

"""
    Apps Script API

    Manages and executes Google Apps Script projects. 

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.script_stack_trace_element import ScriptStackTraceElement
from typing import Optional, Set
from typing_extensions import Self

class ExecutionError(BaseModel):
    """
    An object that provides information about the nature of an error resulting from an attempted execution of a script function using the Apps Script API. If a run call succeeds but the script function (or Apps Script itself) throws an exception, the response body's error field contains a Status object. The `Status` object's `details` field contains an array with a single one of these `ExecutionError` objects.
    """ # noqa: E501
    error_message: Optional[StrictStr] = Field(default=None, description="The error message thrown by Apps Script, usually localized into the user's language.", alias="errorMessage")
    error_type: Optional[StrictStr] = Field(default=None, description="The error type, for example `TypeError` or `ReferenceError`. If the error type is unavailable, this field is not included.", alias="errorType")
    script_stack_trace_elements: Optional[List[ScriptStackTraceElement]] = Field(default=None, description="An array of objects that provide a stack trace through the script to show where the execution failed, with the deepest call first.", alias="scriptStackTraceElements")
    __properties: ClassVar[List[str]] = ["errorMessage", "errorType", "scriptStackTraceElements"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ExecutionError from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in script_stack_trace_elements (list)
        _items = []
        if self.script_stack_trace_elements:
            for _item_script_stack_trace_elements in self.script_stack_trace_elements:
                if _item_script_stack_trace_elements:
                    _items.append(_item_script_stack_trace_elements.to_dict())
            _dict['scriptStackTraceElements'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ExecutionError from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "errorMessage": obj.get("errorMessage"),
            "errorType": obj.get("errorType"),
            "scriptStackTraceElements": [ScriptStackTraceElement.from_dict(_item) for _item in obj["scriptStackTraceElements"]] if obj.get("scriptStackTraceElements") is not None else None
        })
        return _obj



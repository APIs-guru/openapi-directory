# coding: utf-8

"""
    Apps Script API

    Manages and executes Google Apps Script projects. 

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_apps_script_type_user import GoogleAppsScriptTypeUser
from typing import Optional, Set
from typing_extensions import Self

class Project(BaseModel):
    """
    The script project resource.
    """ # noqa: E501
    create_time: Optional[StrictStr] = Field(default=None, description="When the script was created.", alias="createTime")
    creator: Optional[GoogleAppsScriptTypeUser] = None
    last_modify_user: Optional[GoogleAppsScriptTypeUser] = Field(default=None, alias="lastModifyUser")
    parent_id: Optional[StrictStr] = Field(default=None, description="The parent's Drive ID that the script will be attached to. This is usually the ID of a Google Document or Google Sheet. This filed is optional, and if not set, a stand-alone script will be created.", alias="parentId")
    script_id: Optional[StrictStr] = Field(default=None, description="The script project's Drive ID.", alias="scriptId")
    title: Optional[StrictStr] = Field(default=None, description="The title for the project.")
    update_time: Optional[StrictStr] = Field(default=None, description="When the script was last updated.", alias="updateTime")
    __properties: ClassVar[List[str]] = ["createTime", "creator", "lastModifyUser", "parentId", "scriptId", "title", "updateTime"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Project from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of creator
        if self.creator:
            _dict['creator'] = self.creator.to_dict()
        # override the default output from pydantic by calling `to_dict()` of last_modify_user
        if self.last_modify_user:
            _dict['lastModifyUser'] = self.last_modify_user.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Project from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "createTime": obj.get("createTime"),
            "creator": GoogleAppsScriptTypeUser.from_dict(obj["creator"]) if obj.get("creator") is not None else None,
            "lastModifyUser": GoogleAppsScriptTypeUser.from_dict(obj["lastModifyUser"]) if obj.get("lastModifyUser") is not None else None,
            "parentId": obj.get("parentId"),
            "scriptId": obj.get("scriptId"),
            "title": obj.get("title"),
            "updateTime": obj.get("updateTime")
        })
        return _obj



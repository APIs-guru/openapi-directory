# coding: utf-8

"""
    Apps Script API

    Manages and executes Google Apps Script projects. 

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictBytes, StrictFloat, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class Value(BaseModel):
    """
    `Value` represents a dynamically typed value which is the outcome of an executed script.
    """ # noqa: E501
    bool_value: Optional[StrictBool] = Field(default=None, description="Represents a boolean value.", alias="boolValue")
    bytes_value: Optional[Union[StrictBytes, StrictStr]] = Field(default=None, description="Represents raw byte values.", alias="bytesValue")
    date_value: Optional[StrictStr] = Field(default=None, description="Represents a date in ms since the epoch.", alias="dateValue")
    list_value: Optional[ListValue] = Field(default=None, alias="listValue")
    null_value: Optional[StrictStr] = Field(default=None, description="Represents a null value.", alias="nullValue")
    number_value: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Represents a double value.", alias="numberValue")
    proto_value: Optional[Dict[str, Any]] = Field(default=None, description="Represents a structured proto value.", alias="protoValue")
    string_value: Optional[StrictStr] = Field(default=None, description="Represents a string value.", alias="stringValue")
    struct_value: Optional[Struct] = Field(default=None, alias="structValue")
    __properties: ClassVar[List[str]] = ["boolValue", "bytesValue", "dateValue", "listValue", "nullValue", "numberValue", "protoValue", "stringValue", "structValue"]

    @field_validator('null_value')
    def null_value_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['NULL_VALUE']):
            raise ValueError("must be one of enum values ('NULL_VALUE')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Value from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of list_value
        if self.list_value:
            _dict['listValue'] = self.list_value.to_dict()
        # override the default output from pydantic by calling `to_dict()` of struct_value
        if self.struct_value:
            _dict['structValue'] = self.struct_value.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Value from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "boolValue": obj.get("boolValue"),
            "bytesValue": obj.get("bytesValue"),
            "dateValue": obj.get("dateValue"),
            "listValue": ListValue.from_dict(obj["listValue"]) if obj.get("listValue") is not None else None,
            "nullValue": obj.get("nullValue"),
            "numberValue": obj.get("numberValue"),
            "protoValue": obj.get("protoValue"),
            "stringValue": obj.get("stringValue"),
            "structValue": Struct.from_dict(obj["structValue"]) if obj.get("structValue") is not None else None
        })
        return _obj

from openapi_client.models.list_value import ListValue
from openapi_client.models.struct import Struct
# TODO: Rewrite to not use raise_errors
Value.model_rebuild(raise_errors=False)


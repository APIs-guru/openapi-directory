# coding: utf-8

"""
    Application Integration API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v1alpha
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.google_cloud_connectors_v1_auth_config_oauth2_jwt_bearer import GoogleCloudConnectorsV1AuthConfigOauth2JwtBearer

class TestGoogleCloudConnectorsV1AuthConfigOauth2JwtBearer(unittest.TestCase):
    """GoogleCloudConnectorsV1AuthConfigOauth2JwtBearer unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> GoogleCloudConnectorsV1AuthConfigOauth2JwtBearer:
        """Test GoogleCloudConnectorsV1AuthConfigOauth2JwtBearer
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `GoogleCloudConnectorsV1AuthConfigOauth2JwtBearer`
        """
        model = GoogleCloudConnectorsV1AuthConfigOauth2JwtBearer()
        if include_optional:
            return GoogleCloudConnectorsV1AuthConfigOauth2JwtBearer(
                client_key = openapi_client.models.google_cloud_connectors_v1_secret.GoogleCloudConnectorsV1Secret(
                    secret_version = '', ),
                jwt_claims = openapi_client.models.google_cloud_connectors_v1_auth_config_oauth2_jwt_bearer_jwt_claims.GoogleCloudConnectorsV1AuthConfigOauth2JwtBearerJwtClaims(
                    audience = '', 
                    issuer = '', 
                    subject = '', )
            )
        else:
            return GoogleCloudConnectorsV1AuthConfigOauth2JwtBearer(
        )
        """

    def testGoogleCloudConnectorsV1AuthConfigOauth2JwtBearer(self):
        """Test GoogleCloudConnectorsV1AuthConfigOauth2JwtBearer"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

# coding: utf-8

"""
    Application Integration API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v1alpha
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.enterprise_crm_logging_gws_field_limits import EnterpriseCrmLoggingGwsFieldLimits
from openapi_client.models.enterprise_crm_logging_gws_sanitize_options import EnterpriseCrmLoggingGwsSanitizeOptions
from typing import Optional, Set
from typing_extensions import Self

class EnterpriseCrmEventbusProtoLogSettings(BaseModel):
    """
    The LogSettings define the logging attributes for an event property. These attributes are used to map the property to the parameter in the log proto. Also used to define scrubbing/truncation behavior and PII information.
    """ # noqa: E501
    log_field_name: Optional[StrictStr] = Field(default=None, description="The name of corresponding logging field of the event property. If omitted, assumes the same name as the event property key.", alias="logFieldName")
    sanitize_options: Optional[EnterpriseCrmLoggingGwsSanitizeOptions] = Field(default=None, alias="sanitizeOptions")
    seed_period: Optional[StrictStr] = Field(default=None, alias="seedPeriod")
    seed_scope: Optional[StrictStr] = Field(default=None, alias="seedScope")
    shortening_limits: Optional[EnterpriseCrmLoggingGwsFieldLimits] = Field(default=None, alias="shorteningLimits")
    __properties: ClassVar[List[str]] = ["logFieldName", "sanitizeOptions", "seedPeriod", "seedScope", "shorteningLimits"]

    @field_validator('seed_period')
    def seed_period_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['SEED_PERIOD_UNSPECIFIED', 'DAY', 'WEEK', 'MONTH']):
            raise ValueError("must be one of enum values ('SEED_PERIOD_UNSPECIFIED', 'DAY', 'WEEK', 'MONTH')")
        return value

    @field_validator('seed_scope')
    def seed_scope_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['SEED_SCOPE_UNSPECIFIED', 'EVENT_NAME', 'TIME_PERIOD', 'PARAM_NAME']):
            raise ValueError("must be one of enum values ('SEED_SCOPE_UNSPECIFIED', 'EVENT_NAME', 'TIME_PERIOD', 'PARAM_NAME')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of EnterpriseCrmEventbusProtoLogSettings from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of sanitize_options
        if self.sanitize_options:
            _dict['sanitizeOptions'] = self.sanitize_options.to_dict()
        # override the default output from pydantic by calling `to_dict()` of shortening_limits
        if self.shortening_limits:
            _dict['shorteningLimits'] = self.shortening_limits.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of EnterpriseCrmEventbusProtoLogSettings from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "logFieldName": obj.get("logFieldName"),
            "sanitizeOptions": EnterpriseCrmLoggingGwsSanitizeOptions.from_dict(obj["sanitizeOptions"]) if obj.get("sanitizeOptions") is not None else None,
            "seedPeriod": obj.get("seedPeriod"),
            "seedScope": obj.get("seedScope"),
            "shorteningLimits": EnterpriseCrmLoggingGwsFieldLimits.from_dict(obj["shorteningLimits"]) if obj.get("shorteningLimits") is not None else None
        })
        return _obj



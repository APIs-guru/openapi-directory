# coding: utf-8

"""
    Application Integration API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v1alpha
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.enterprise_crm_eventbus_proto_task_metadata_admin import EnterpriseCrmEventbusProtoTaskMetadataAdmin
from typing import Optional, Set
from typing_extensions import Self

class EnterpriseCrmEventbusProtoTaskMetadata(BaseModel):
    """
    TaskMetadata are attributes that are associated to every common Task we have.
    """ # noqa: E501
    active_task_name: Optional[StrictStr] = Field(default=None, description="The new task name to replace the current task if it is deprecated. Otherwise, it is the same as the current task name.", alias="activeTaskName")
    admins: Optional[List[EnterpriseCrmEventbusProtoTaskMetadataAdmin]] = None
    category: Optional[StrictStr] = None
    code_search_link: Optional[StrictStr] = Field(default=None, description="The Code Search link to the Task Java file.", alias="codeSearchLink")
    default_json_validation_option: Optional[StrictStr] = Field(default=None, description="Controls whether JSON workflow parameters are validated against provided schemas before and/or after this task's execution.", alias="defaultJsonValidationOption")
    default_spec: Optional[StrictStr] = Field(default=None, description="Contains the initial configuration of the task with default values set. For now, The string should be compatible to an ASCII-proto format.", alias="defaultSpec")
    description: Optional[StrictStr] = Field(default=None, description="In a few sentences, describe the purpose and usage of the task.")
    descriptive_name: Optional[StrictStr] = Field(default=None, description="The string name to show on the task list on the Workflow editor screen. This should be a very short, one to two words name for the task. (e.g. \"Send Mail\")", alias="descriptiveName")
    doc_markdown: Optional[StrictStr] = Field(default=None, description="Snippet of markdown documentation to embed in the RHP for this task.", alias="docMarkdown")
    external_category: Optional[StrictStr] = Field(default=None, alias="externalCategory")
    external_category_sequence: Optional[StrictInt] = Field(default=None, description="Sequence with which the task in specific category to be displayed in task discovery panel for external users.", alias="externalCategorySequence")
    external_doc_html: Optional[StrictStr] = Field(default=None, description="External-facing documention embedded in the RHP for this task.", alias="externalDocHtml")
    external_doc_link: Optional[StrictStr] = Field(default=None, description="Doc link for external-facing documentation (separate from g3doc).", alias="externalDocLink")
    external_doc_markdown: Optional[StrictStr] = Field(default=None, description="DEPRECATED: Use external_doc_html.", alias="externalDocMarkdown")
    g3_doc_link: Optional[StrictStr] = Field(default=None, description="URL to the associated G3 Doc for the task if available", alias="g3DocLink")
    icon_link: Optional[StrictStr] = Field(default=None, description="URL to gstatic image icon for this task. This icon shows up on the task list panel along with the task name in the Workflow Editor screen. Use the 24p, 2x, gray color icon image format.", alias="iconLink")
    is_deprecated: Optional[StrictBool] = Field(default=None, description="The deprecation status of the current task. Default value is false;", alias="isDeprecated")
    name: Optional[StrictStr] = Field(default=None, description="The actual class name or the annotated name of the task. Task Author should initialize this field with value from the getName() method of the Task class.")
    standalone_external_doc_html: Optional[StrictStr] = Field(default=None, description="External-facing documention for standalone IP in pantheon embedded in the RHP for this task. Non null only if different from external_doc_html", alias="standaloneExternalDocHtml")
    status: Optional[StrictStr] = Field(default=None, description="Allows author to indicate if the task is ready to use or not. If not set, then it will default to INACTIVE.")
    system: Optional[StrictStr] = None
    tags: Optional[List[StrictStr]] = Field(default=None, description="A set of tags that pertain to a particular task. This can be used to improve the searchability of tasks with several names (\"REST Caller\" vs. \"Call REST Endpoint\") or to help users find tasks based on related words.")
    __properties: ClassVar[List[str]] = ["activeTaskName", "admins", "category", "codeSearchLink", "defaultJsonValidationOption", "defaultSpec", "description", "descriptiveName", "docMarkdown", "externalCategory", "externalCategorySequence", "externalDocHtml", "externalDocLink", "externalDocMarkdown", "g3DocLink", "iconLink", "isDeprecated", "name", "standaloneExternalDocHtml", "status", "system", "tags"]

    @field_validator('category')
    def category_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['UNSPECIFIED_CATEGORY', 'CUSTOM', 'FLOW_CONTROL', 'DATA_MANIPULATION', 'SCRIPTING', 'CONNECTOR', 'HIDDEN', 'CLOUD_SYSTEMS', 'CUSTOM_TASK_TEMPLATE', 'TASK_RECOMMENDATIONS']):
            raise ValueError("must be one of enum values ('UNSPECIFIED_CATEGORY', 'CUSTOM', 'FLOW_CONTROL', 'DATA_MANIPULATION', 'SCRIPTING', 'CONNECTOR', 'HIDDEN', 'CLOUD_SYSTEMS', 'CUSTOM_TASK_TEMPLATE', 'TASK_RECOMMENDATIONS')")
        return value

    @field_validator('default_json_validation_option')
    def default_json_validation_option_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['UNSPECIFIED_JSON_VALIDATION_OPTION', 'SKIP', 'PRE_EXECUTION', 'POST_EXECUTION', 'PRE_POST_EXECUTION']):
            raise ValueError("must be one of enum values ('UNSPECIFIED_JSON_VALIDATION_OPTION', 'SKIP', 'PRE_EXECUTION', 'POST_EXECUTION', 'PRE_POST_EXECUTION')")
        return value

    @field_validator('external_category')
    def external_category_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['UNSPECIFIED_EXTERNAL_CATEGORY', 'CORE', 'CONNECTORS', 'EXTERNAL_HTTP', 'EXTERNAL_INTEGRATION_SERVICES', 'EXTERNAL_CUSTOMER_ACTIONS', 'EXTERNAL_FLOW_CONTROL', 'EXTERNAL_WORKSPACE', 'EXTERNAL_SECURITY', 'EXTERNAL_DATABASES', 'EXTERNAL_ANALYTICS', 'EXTERNAL_BYOC', 'EXTERNAL_BYOT', 'EXTERNAL_ARTIFICIAL_INTELIGENCE', 'EXTERNAL_DATA_MANIPULATION']):
            raise ValueError("must be one of enum values ('UNSPECIFIED_EXTERNAL_CATEGORY', 'CORE', 'CONNECTORS', 'EXTERNAL_HTTP', 'EXTERNAL_INTEGRATION_SERVICES', 'EXTERNAL_CUSTOMER_ACTIONS', 'EXTERNAL_FLOW_CONTROL', 'EXTERNAL_WORKSPACE', 'EXTERNAL_SECURITY', 'EXTERNAL_DATABASES', 'EXTERNAL_ANALYTICS', 'EXTERNAL_BYOC', 'EXTERNAL_BYOT', 'EXTERNAL_ARTIFICIAL_INTELIGENCE', 'EXTERNAL_DATA_MANIPULATION')")
        return value

    @field_validator('status')
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['UNSPECIFIED_STATUS', 'DEFAULT_INACTIVE', 'ACTIVE']):
            raise ValueError("must be one of enum values ('UNSPECIFIED_STATUS', 'DEFAULT_INACTIVE', 'ACTIVE')")
        return value

    @field_validator('system')
    def system_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['UNSPECIFIED_SYSTEM', 'GENERIC', 'BUGANIZER', 'SALESFORCE', 'CLOUD_SQL', 'PLX', 'SHEETS', 'GOOGLE_GROUPS', 'EMAIL', 'SPANNER', 'DATA_BRIDGE']):
            raise ValueError("must be one of enum values ('UNSPECIFIED_SYSTEM', 'GENERIC', 'BUGANIZER', 'SALESFORCE', 'CLOUD_SQL', 'PLX', 'SHEETS', 'GOOGLE_GROUPS', 'EMAIL', 'SPANNER', 'DATA_BRIDGE')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of EnterpriseCrmEventbusProtoTaskMetadata from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in admins (list)
        _items = []
        if self.admins:
            for _item_admins in self.admins:
                if _item_admins:
                    _items.append(_item_admins.to_dict())
            _dict['admins'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of EnterpriseCrmEventbusProtoTaskMetadata from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "activeTaskName": obj.get("activeTaskName"),
            "admins": [EnterpriseCrmEventbusProtoTaskMetadataAdmin.from_dict(_item) for _item in obj["admins"]] if obj.get("admins") is not None else None,
            "category": obj.get("category"),
            "codeSearchLink": obj.get("codeSearchLink"),
            "defaultJsonValidationOption": obj.get("defaultJsonValidationOption"),
            "defaultSpec": obj.get("defaultSpec"),
            "description": obj.get("description"),
            "descriptiveName": obj.get("descriptiveName"),
            "docMarkdown": obj.get("docMarkdown"),
            "externalCategory": obj.get("externalCategory"),
            "externalCategorySequence": obj.get("externalCategorySequence"),
            "externalDocHtml": obj.get("externalDocHtml"),
            "externalDocLink": obj.get("externalDocLink"),
            "externalDocMarkdown": obj.get("externalDocMarkdown"),
            "g3DocLink": obj.get("g3DocLink"),
            "iconLink": obj.get("iconLink"),
            "isDeprecated": obj.get("isDeprecated"),
            "name": obj.get("name"),
            "standaloneExternalDocHtml": obj.get("standaloneExternalDocHtml"),
            "status": obj.get("status"),
            "system": obj.get("system"),
            "tags": obj.get("tags")
        })
        return _obj



# coding: utf-8

"""
    Application Integration API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v1alpha
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.enterprise_crm_eventbus_proto_event_execution_details_event_attempt_stats import EnterpriseCrmEventbusProtoEventExecutionDetailsEventAttemptStats
from openapi_client.models.enterprise_crm_eventbus_proto_event_execution_snapshot import EnterpriseCrmEventbusProtoEventExecutionSnapshot
from typing import Optional, Set
from typing_extensions import Self

class EnterpriseCrmEventbusProtoEventExecutionDetails(BaseModel):
    """
    Contains the details of the execution info of this event: this includes the tasks execution details plus the event execution statistics. Next available id: 10
    """ # noqa: E501
    event_attempt_stats: Optional[List[EnterpriseCrmEventbusProtoEventExecutionDetailsEventAttemptStats]] = Field(default=None, alias="eventAttemptStats")
    event_execution_snapshot: Optional[List[EnterpriseCrmEventbusProtoEventExecutionSnapshot]] = Field(default=None, alias="eventExecutionSnapshot")
    event_execution_state: Optional[StrictStr] = Field(default=None, alias="eventExecutionState")
    event_retries_from_beginning_count: Optional[StrictInt] = Field(default=None, description="Indicates the number of times the execution has restarted from the beginning.", alias="eventRetriesFromBeginningCount")
    log_file_path: Optional[StrictStr] = Field(default=None, description="The log file path (aka. cns address) for this event.", alias="logFilePath")
    network_address: Optional[StrictStr] = Field(default=None, description="The network address (aka. bns address) that indicates where the event executor is running.", alias="networkAddress")
    next_execution_time: Optional[StrictStr] = Field(default=None, description="Next scheduled execution time in case the execution status was RETRY_ON_HOLD.", alias="nextExecutionTime")
    rye_lock_unheld_count: Optional[StrictInt] = Field(default=None, description="Used internally and shouldn't be exposed to users. A counter for the cron job to record how many times this event is in in_process state but don't have a lock consecutively/", alias="ryeLockUnheldCount")
    __properties: ClassVar[List[str]] = ["eventAttemptStats", "eventExecutionSnapshot", "eventExecutionState", "eventRetriesFromBeginningCount", "logFilePath", "networkAddress", "nextExecutionTime", "ryeLockUnheldCount"]

    @field_validator('event_execution_state')
    def event_execution_state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['UNSPECIFIED', 'ON_HOLD', 'IN_PROCESS', 'SUCCEEDED', 'FAILED', 'CANCELED', 'RETRY_ON_HOLD', 'SUSPENDED']):
            raise ValueError("must be one of enum values ('UNSPECIFIED', 'ON_HOLD', 'IN_PROCESS', 'SUCCEEDED', 'FAILED', 'CANCELED', 'RETRY_ON_HOLD', 'SUSPENDED')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of EnterpriseCrmEventbusProtoEventExecutionDetails from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in event_attempt_stats (list)
        _items = []
        if self.event_attempt_stats:
            for _item_event_attempt_stats in self.event_attempt_stats:
                if _item_event_attempt_stats:
                    _items.append(_item_event_attempt_stats.to_dict())
            _dict['eventAttemptStats'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in event_execution_snapshot (list)
        _items = []
        if self.event_execution_snapshot:
            for _item_event_execution_snapshot in self.event_execution_snapshot:
                if _item_event_execution_snapshot:
                    _items.append(_item_event_execution_snapshot.to_dict())
            _dict['eventExecutionSnapshot'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of EnterpriseCrmEventbusProtoEventExecutionDetails from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "eventAttemptStats": [EnterpriseCrmEventbusProtoEventExecutionDetailsEventAttemptStats.from_dict(_item) for _item in obj["eventAttemptStats"]] if obj.get("eventAttemptStats") is not None else None,
            "eventExecutionSnapshot": [EnterpriseCrmEventbusProtoEventExecutionSnapshot.from_dict(_item) for _item in obj["eventExecutionSnapshot"]] if obj.get("eventExecutionSnapshot") is not None else None,
            "eventExecutionState": obj.get("eventExecutionState"),
            "eventRetriesFromBeginningCount": obj.get("eventRetriesFromBeginningCount"),
            "logFilePath": obj.get("logFilePath"),
            "networkAddress": obj.get("networkAddress"),
            "nextExecutionTime": obj.get("nextExecutionTime"),
            "ryeLockUnheldCount": obj.get("ryeLockUnheldCount")
        })
        return _obj



# coding: utf-8

"""
    Application Integration API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v1alpha
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.enterprise_crm_eventbus_proto_combined_condition import EnterpriseCrmEventbusProtoCombinedCondition
from typing import Optional, Set
from typing_extensions import Self

class EnterpriseCrmEventbusProtoNextTask(BaseModel):
    """
    The task that is next in line to be executed, if the condition specified evaluated to true.
    """ # noqa: E501
    combined_conditions: Optional[List[EnterpriseCrmEventbusProtoCombinedCondition]] = Field(default=None, description="Combined condition for this task to become an eligible next task. Each of these combined_conditions are joined with logical OR. DEPRECATED: use `condition`", alias="combinedConditions")
    condition: Optional[StrictStr] = Field(default=None, description="Standard filter expression for this task to become an eligible next task.")
    description: Optional[StrictStr] = Field(default=None, description="User-provided description intended to give more business context about the next task edge or condition.")
    label: Optional[StrictStr] = Field(default=None, description="User-provided label that is attached to this edge in the UI.")
    task_config_id: Optional[StrictStr] = Field(default=None, description="ID of the next task.", alias="taskConfigId")
    task_number: Optional[StrictStr] = Field(default=None, description="Task number of the next task.", alias="taskNumber")
    __properties: ClassVar[List[str]] = ["combinedConditions", "condition", "description", "label", "taskConfigId", "taskNumber"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of EnterpriseCrmEventbusProtoNextTask from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in combined_conditions (list)
        _items = []
        if self.combined_conditions:
            for _item_combined_conditions in self.combined_conditions:
                if _item_combined_conditions:
                    _items.append(_item_combined_conditions.to_dict())
            _dict['combinedConditions'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of EnterpriseCrmEventbusProtoNextTask from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "combinedConditions": [EnterpriseCrmEventbusProtoCombinedCondition.from_dict(_item) for _item in obj["combinedConditions"]] if obj.get("combinedConditions") is not None else None,
            "condition": obj.get("condition"),
            "description": obj.get("description"),
            "label": obj.get("label"),
            "taskConfigId": obj.get("taskConfigId"),
            "taskNumber": obj.get("taskNumber")
        })
        return _obj



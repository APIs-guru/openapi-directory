# coding: utf-8

"""
    Application Integration API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v1alpha
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_cloud_connectors_v1_secret import GoogleCloudConnectorsV1Secret
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudConnectorsV1AuthConfigSshPublicKey(BaseModel):
    """
    Parameters to support Ssh public key Authentication.
    """ # noqa: E501
    cert_type: Optional[StrictStr] = Field(default=None, description="Format of SSH Client cert.", alias="certType")
    ssh_client_cert: Optional[GoogleCloudConnectorsV1Secret] = Field(default=None, alias="sshClientCert")
    ssh_client_cert_pass: Optional[GoogleCloudConnectorsV1Secret] = Field(default=None, alias="sshClientCertPass")
    username: Optional[StrictStr] = Field(default=None, description="The user account used to authenticate.")
    __properties: ClassVar[List[str]] = ["certType", "sshClientCert", "sshClientCertPass", "username"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudConnectorsV1AuthConfigSshPublicKey from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of ssh_client_cert
        if self.ssh_client_cert:
            _dict['sshClientCert'] = self.ssh_client_cert.to_dict()
        # override the default output from pydantic by calling `to_dict()` of ssh_client_cert_pass
        if self.ssh_client_cert_pass:
            _dict['sshClientCertPass'] = self.ssh_client_cert_pass.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudConnectorsV1AuthConfigSshPublicKey from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "certType": obj.get("certType"),
            "sshClientCert": GoogleCloudConnectorsV1Secret.from_dict(obj["sshClientCert"]) if obj.get("sshClientCert") is not None else None,
            "sshClientCertPass": GoogleCloudConnectorsV1Secret.from_dict(obj["sshClientCertPass"]) if obj.get("sshClientCertPass") is not None else None,
            "username": obj.get("username")
        })
        return _obj



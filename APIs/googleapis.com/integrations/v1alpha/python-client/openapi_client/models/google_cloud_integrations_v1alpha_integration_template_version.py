# coding: utf-8

"""
    Application Integration API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v1alpha
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.enterprise_crm_eventbus_proto_teardown import EnterpriseCrmEventbusProtoTeardown
from openapi_client.models.enterprise_crm_frontends_eventbus_proto_task_config import EnterpriseCrmFrontendsEventbusProtoTaskConfig
from openapi_client.models.enterprise_crm_frontends_eventbus_proto_trigger_config import EnterpriseCrmFrontendsEventbusProtoTriggerConfig
from openapi_client.models.enterprise_crm_frontends_eventbus_proto_workflow_parameters import EnterpriseCrmFrontendsEventbusProtoWorkflowParameters
from openapi_client.models.google_cloud_integrations_v1alpha_error_catcher_config import GoogleCloudIntegrationsV1alphaErrorCatcherConfig
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudIntegrationsV1alphaIntegrationTemplateVersion(BaseModel):
    """
    IntegrationTemplateVersion definition. An IntegrationTemplateVersion provides configurations required to construct an IntegrationVersion. It cannot be executed directly like an Integration. Users can create IntegrationTemplateVersions using Integrations. These Templates can be shared by users across GCP projects.
    """ # noqa: E501
    create_time: Optional[StrictStr] = Field(default=None, description="Output only. Auto-generated.", alias="createTime")
    database_persistence_policy: Optional[StrictStr] = Field(default=None, description="Optional. Flag to disable database persistence for execution data, including event execution info, execution export info, execution metadata index and execution param index.", alias="databasePersistencePolicy")
    description: Optional[StrictStr] = Field(default=None, description="Optional. The templateversion description. Permitted format is alphanumeric with underscores and no spaces.")
    error_catcher_configs: Optional[List[GoogleCloudIntegrationsV1alphaErrorCatcherConfig]] = Field(default=None, description="Optional. Error Catch Task configuration for the IntegrationTemplateVersion. It's optional.", alias="errorCatcherConfigs")
    last_modifier_email: Optional[StrictStr] = Field(default=None, description="Optional. The last modifier's email address. Generated based on the End User Credentials/LOAS role of the user making the call.", alias="lastModifierEmail")
    name: Optional[StrictStr] = Field(default=None, description="Output only. Auto-generated primary key. Format: projects/{project}/locations/{location}/products/{product}/integrationtemplates/{integrationtemplate}/versions/{version}")
    parent_integration_version_id: Optional[StrictStr] = Field(default=None, description="Optional. ID of the IntegrationVersion that was used to create this IntegrationTemplateVersion", alias="parentIntegrationVersionId")
    snapshot_number: Optional[StrictStr] = Field(default=None, description="Output only. An increasing sequence that is set when a new snapshot is created.", alias="snapshotNumber")
    status: Optional[StrictStr] = Field(default=None, description="Optional. Generated by eventbus. User should not set it as an input.")
    task_configs: Optional[List[EnterpriseCrmFrontendsEventbusProtoTaskConfig]] = Field(default=None, description="Optional. Task configuration for the IntegrationTemplateVersion. It's optional, but the IntegrationTemplateVersion doesn't do anything without task_configs.", alias="taskConfigs")
    teardown: Optional[EnterpriseCrmEventbusProtoTeardown] = None
    template_parameters: Optional[EnterpriseCrmFrontendsEventbusProtoWorkflowParameters] = Field(default=None, alias="templateParameters")
    trigger_configs: Optional[List[EnterpriseCrmFrontendsEventbusProtoTriggerConfig]] = Field(default=None, description="Optional. Trigger configurations.", alias="triggerConfigs")
    update_time: Optional[StrictStr] = Field(default=None, description="Output only. Auto-generated.", alias="updateTime")
    user_label: Optional[StrictStr] = Field(default=None, description="Optional. A user-defined label that annotates an integration version. Typically, this is only set when the integration version is created.", alias="userLabel")
    __properties: ClassVar[List[str]] = ["createTime", "databasePersistencePolicy", "description", "errorCatcherConfigs", "lastModifierEmail", "name", "parentIntegrationVersionId", "snapshotNumber", "status", "taskConfigs", "teardown", "templateParameters", "triggerConfigs", "updateTime", "userLabel"]

    @field_validator('database_persistence_policy')
    def database_persistence_policy_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['DATABASE_PERSISTENCE_POLICY_UNSPECIFIED', 'DATABASE_PERSISTENCE_DISABLED']):
            raise ValueError("must be one of enum values ('DATABASE_PERSISTENCE_POLICY_UNSPECIFIED', 'DATABASE_PERSISTENCE_DISABLED')")
        return value

    @field_validator('status')
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['UNKNOWN', 'DRAFT', 'ACTIVE', 'ARCHIVED', 'SNAPSHOT']):
            raise ValueError("must be one of enum values ('UNKNOWN', 'DRAFT', 'ACTIVE', 'ARCHIVED', 'SNAPSHOT')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudIntegrationsV1alphaIntegrationTemplateVersion from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "create_time",
            "name",
            "snapshot_number",
            "update_time",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in error_catcher_configs (list)
        _items = []
        if self.error_catcher_configs:
            for _item_error_catcher_configs in self.error_catcher_configs:
                if _item_error_catcher_configs:
                    _items.append(_item_error_catcher_configs.to_dict())
            _dict['errorCatcherConfigs'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in task_configs (list)
        _items = []
        if self.task_configs:
            for _item_task_configs in self.task_configs:
                if _item_task_configs:
                    _items.append(_item_task_configs.to_dict())
            _dict['taskConfigs'] = _items
        # override the default output from pydantic by calling `to_dict()` of teardown
        if self.teardown:
            _dict['teardown'] = self.teardown.to_dict()
        # override the default output from pydantic by calling `to_dict()` of template_parameters
        if self.template_parameters:
            _dict['templateParameters'] = self.template_parameters.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in trigger_configs (list)
        _items = []
        if self.trigger_configs:
            for _item_trigger_configs in self.trigger_configs:
                if _item_trigger_configs:
                    _items.append(_item_trigger_configs.to_dict())
            _dict['triggerConfigs'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudIntegrationsV1alphaIntegrationTemplateVersion from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "createTime": obj.get("createTime"),
            "databasePersistencePolicy": obj.get("databasePersistencePolicy"),
            "description": obj.get("description"),
            "errorCatcherConfigs": [GoogleCloudIntegrationsV1alphaErrorCatcherConfig.from_dict(_item) for _item in obj["errorCatcherConfigs"]] if obj.get("errorCatcherConfigs") is not None else None,
            "lastModifierEmail": obj.get("lastModifierEmail"),
            "name": obj.get("name"),
            "parentIntegrationVersionId": obj.get("parentIntegrationVersionId"),
            "snapshotNumber": obj.get("snapshotNumber"),
            "status": obj.get("status"),
            "taskConfigs": [EnterpriseCrmFrontendsEventbusProtoTaskConfig.from_dict(_item) for _item in obj["taskConfigs"]] if obj.get("taskConfigs") is not None else None,
            "teardown": EnterpriseCrmEventbusProtoTeardown.from_dict(obj["teardown"]) if obj.get("teardown") is not None else None,
            "templateParameters": EnterpriseCrmFrontendsEventbusProtoWorkflowParameters.from_dict(obj["templateParameters"]) if obj.get("templateParameters") is not None else None,
            "triggerConfigs": [EnterpriseCrmFrontendsEventbusProtoTriggerConfig.from_dict(_item) for _item in obj["triggerConfigs"]] if obj.get("triggerConfigs") is not None else None,
            "updateTime": obj.get("updateTime"),
            "userLabel": obj.get("userLabel")
        })
        return _obj



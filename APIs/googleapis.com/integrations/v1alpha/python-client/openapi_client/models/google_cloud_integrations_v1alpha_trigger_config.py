# coding: utf-8

"""
    Application Integration API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v1alpha
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_cloud_integrations_v1alpha_cloud_scheduler_config import GoogleCloudIntegrationsV1alphaCloudSchedulerConfig
from openapi_client.models.google_cloud_integrations_v1alpha_coordinate import GoogleCloudIntegrationsV1alphaCoordinate
from openapi_client.models.google_cloud_integrations_v1alpha_integration_alert_config import GoogleCloudIntegrationsV1alphaIntegrationAlertConfig
from openapi_client.models.google_cloud_integrations_v1alpha_next_task import GoogleCloudIntegrationsV1alphaNextTask
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudIntegrationsV1alphaTriggerConfig(BaseModel):
    """
    Configuration detail of a trigger.
    """ # noqa: E501
    alert_config: Optional[List[GoogleCloudIntegrationsV1alphaIntegrationAlertConfig]] = Field(default=None, description="Optional. An alert threshold configuration for the [trigger + client + integration] tuple. If these values are not specified in the trigger config, default values will be populated by the system. Note that there must be exactly one alert threshold configured per [client + trigger + integration] when published.", alias="alertConfig")
    cloud_scheduler_config: Optional[GoogleCloudIntegrationsV1alphaCloudSchedulerConfig] = Field(default=None, alias="cloudSchedulerConfig")
    description: Optional[StrictStr] = Field(default=None, description="Optional. User-provided description intended to give additional business context about the task.")
    error_catcher_id: Optional[StrictStr] = Field(default=None, description="Optional. Optional Error catcher id of the error catch flow which will be executed when execution error happens in the task", alias="errorCatcherId")
    label: Optional[StrictStr] = Field(default=None, description="Optional. The user created label for a particular trigger.")
    next_tasks_execution_policy: Optional[StrictStr] = Field(default=None, description="Optional. Dictates how next tasks will be executed.", alias="nextTasksExecutionPolicy")
    position: Optional[GoogleCloudIntegrationsV1alphaCoordinate] = None
    properties: Optional[Dict[str, StrictStr]] = Field(default=None, description="Optional. Configurable properties of the trigger, not to be confused with integration parameters. E.g. \"name\" is a property for API triggers and \"subscription\" is a property for Pub/sub triggers.")
    start_tasks: Optional[List[GoogleCloudIntegrationsV1alphaNextTask]] = Field(default=None, description="Optional. Set of tasks numbers from where the integration execution is started by this trigger. If this is empty, then integration is executed with default start tasks. In the list of start tasks, none of two tasks can have direct ancestor-descendant relationships (i.e. in a same integration execution graph).", alias="startTasks")
    trigger_id: Optional[StrictStr] = Field(default=None, description="Optional. The backend trigger ID.", alias="triggerId")
    trigger_number: Optional[StrictStr] = Field(default=None, description="Required. A number to uniquely identify each trigger config within the integration on UI.", alias="triggerNumber")
    trigger_type: Optional[StrictStr] = Field(default=None, description="Optional. Type of trigger", alias="triggerType")
    __properties: ClassVar[List[str]] = ["alertConfig", "cloudSchedulerConfig", "description", "errorCatcherId", "label", "nextTasksExecutionPolicy", "position", "properties", "startTasks", "triggerId", "triggerNumber", "triggerType"]

    @field_validator('next_tasks_execution_policy')
    def next_tasks_execution_policy_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['NEXT_TASKS_EXECUTION_POLICY_UNSPECIFIED', 'RUN_ALL_MATCH', 'RUN_FIRST_MATCH']):
            raise ValueError("must be one of enum values ('NEXT_TASKS_EXECUTION_POLICY_UNSPECIFIED', 'RUN_ALL_MATCH', 'RUN_FIRST_MATCH')")
        return value

    @field_validator('trigger_type')
    def trigger_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['TRIGGER_TYPE_UNSPECIFIED', 'CRON', 'API', 'SFDC_CHANNEL', 'CLOUD_PUBSUB_EXTERNAL', 'SFDC_CDC_CHANNEL', 'CLOUD_SCHEDULER', 'INTEGRATION_CONNECTOR_TRIGGER']):
            raise ValueError("must be one of enum values ('TRIGGER_TYPE_UNSPECIFIED', 'CRON', 'API', 'SFDC_CHANNEL', 'CLOUD_PUBSUB_EXTERNAL', 'SFDC_CDC_CHANNEL', 'CLOUD_SCHEDULER', 'INTEGRATION_CONNECTOR_TRIGGER')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudIntegrationsV1alphaTriggerConfig from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in alert_config (list)
        _items = []
        if self.alert_config:
            for _item_alert_config in self.alert_config:
                if _item_alert_config:
                    _items.append(_item_alert_config.to_dict())
            _dict['alertConfig'] = _items
        # override the default output from pydantic by calling `to_dict()` of cloud_scheduler_config
        if self.cloud_scheduler_config:
            _dict['cloudSchedulerConfig'] = self.cloud_scheduler_config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of position
        if self.position:
            _dict['position'] = self.position.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in start_tasks (list)
        _items = []
        if self.start_tasks:
            for _item_start_tasks in self.start_tasks:
                if _item_start_tasks:
                    _items.append(_item_start_tasks.to_dict())
            _dict['startTasks'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudIntegrationsV1alphaTriggerConfig from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "alertConfig": [GoogleCloudIntegrationsV1alphaIntegrationAlertConfig.from_dict(_item) for _item in obj["alertConfig"]] if obj.get("alertConfig") is not None else None,
            "cloudSchedulerConfig": GoogleCloudIntegrationsV1alphaCloudSchedulerConfig.from_dict(obj["cloudSchedulerConfig"]) if obj.get("cloudSchedulerConfig") is not None else None,
            "description": obj.get("description"),
            "errorCatcherId": obj.get("errorCatcherId"),
            "label": obj.get("label"),
            "nextTasksExecutionPolicy": obj.get("nextTasksExecutionPolicy"),
            "position": GoogleCloudIntegrationsV1alphaCoordinate.from_dict(obj["position"]) if obj.get("position") is not None else None,
            "properties": obj.get("properties"),
            "startTasks": [GoogleCloudIntegrationsV1alphaNextTask.from_dict(_item) for _item in obj["startTasks"]] if obj.get("startTasks") is not None else None,
            "triggerId": obj.get("triggerId"),
            "triggerNumber": obj.get("triggerNumber"),
            "triggerType": obj.get("triggerType")
        })
        return _obj



# coding: utf-8

"""
    Application Integration API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v1alpha
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_cloud_integrations_v1alpha_client_certificate import GoogleCloudIntegrationsV1alphaClientCertificate
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudIntegrationsV1alphaCertificate(BaseModel):
    """
    The certificate definition
    """ # noqa: E501
    certificate_status: Optional[StrictStr] = Field(default=None, description="Status of the certificate", alias="certificateStatus")
    credential_id: Optional[StrictStr] = Field(default=None, description="Immutable. Credential id that will be used to register with trawler INTERNAL_ONLY", alias="credentialId")
    description: Optional[StrictStr] = Field(default=None, description="Description of the certificate")
    display_name: Optional[StrictStr] = Field(default=None, description="Name of the certificate", alias="displayName")
    name: Optional[StrictStr] = Field(default=None, description="Output only. Auto generated primary key")
    raw_certificate: Optional[GoogleCloudIntegrationsV1alphaClientCertificate] = Field(default=None, alias="rawCertificate")
    requestor_id: Optional[StrictStr] = Field(default=None, description="Immutable. Requestor ID to be used to register certificate with trawler", alias="requestorId")
    valid_end_time: Optional[StrictStr] = Field(default=None, description="Output only. The timestamp after which certificate will expire", alias="validEndTime")
    valid_start_time: Optional[StrictStr] = Field(default=None, description="Output only. The timestamp after which certificate will be valid", alias="validStartTime")
    __properties: ClassVar[List[str]] = ["certificateStatus", "credentialId", "description", "displayName", "name", "rawCertificate", "requestorId", "validEndTime", "validStartTime"]

    @field_validator('certificate_status')
    def certificate_status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['STATE_UNSPECIFIED', 'ACTIVE', 'EXPIRED']):
            raise ValueError("must be one of enum values ('STATE_UNSPECIFIED', 'ACTIVE', 'EXPIRED')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudIntegrationsV1alphaCertificate from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "name",
            "valid_end_time",
            "valid_start_time",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of raw_certificate
        if self.raw_certificate:
            _dict['rawCertificate'] = self.raw_certificate.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudIntegrationsV1alphaCertificate from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "certificateStatus": obj.get("certificateStatus"),
            "credentialId": obj.get("credentialId"),
            "description": obj.get("description"),
            "displayName": obj.get("displayName"),
            "name": obj.get("name"),
            "rawCertificate": GoogleCloudIntegrationsV1alphaClientCertificate.from_dict(obj["rawCertificate"]) if obj.get("rawCertificate") is not None else None,
            "requestorId": obj.get("requestorId"),
            "validEndTime": obj.get("validEndTime"),
            "validStartTime": obj.get("validStartTime")
        })
        return _obj



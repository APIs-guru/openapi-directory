# coding: utf-8

"""
    Application Integration API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v1alpha
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBytes, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from openapi_client.models.io_cloudevents_v1_cloud_event_cloud_event_attribute_value import IoCloudeventsV1CloudEventCloudEventAttributeValue
from typing import Optional, Set
from typing_extensions import Self

class IoCloudeventsV1CloudEvent(BaseModel):
    """
    -- CloudEvent Context Attributes
    """ # noqa: E501
    attributes: Optional[Dict[str, IoCloudeventsV1CloudEventCloudEventAttributeValue]] = Field(default=None, description="Optional & Extension Attributes")
    binary_data: Optional[Union[StrictBytes, StrictStr]] = Field(default=None, alias="binaryData")
    id: Optional[StrictStr] = Field(default=None, description="Required Attributes")
    proto_data: Optional[Dict[str, Any]] = Field(default=None, alias="protoData")
    source: Optional[StrictStr] = Field(default=None, description="URI-reference")
    spec_version: Optional[StrictStr] = Field(default=None, alias="specVersion")
    text_data: Optional[StrictStr] = Field(default=None, alias="textData")
    type: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = ["attributes", "binaryData", "id", "protoData", "source", "specVersion", "textData", "type"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of IoCloudeventsV1CloudEvent from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each value in attributes (dict)
        _field_dict = {}
        if self.attributes:
            for _key_attributes in self.attributes:
                if self.attributes[_key_attributes]:
                    _field_dict[_key_attributes] = self.attributes[_key_attributes].to_dict()
            _dict['attributes'] = _field_dict
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of IoCloudeventsV1CloudEvent from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "attributes": dict(
                (_k, IoCloudeventsV1CloudEventCloudEventAttributeValue.from_dict(_v))
                for _k, _v in obj["attributes"].items()
            )
            if obj.get("attributes") is not None
            else None,
            "binaryData": obj.get("binaryData"),
            "id": obj.get("id"),
            "protoData": obj.get("protoData"),
            "source": obj.get("source"),
            "specVersion": obj.get("specVersion"),
            "textData": obj.get("textData"),
            "type": obj.get("type")
        })
        return _obj



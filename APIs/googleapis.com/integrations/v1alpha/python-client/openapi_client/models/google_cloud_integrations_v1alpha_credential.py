# coding: utf-8

"""
    Application Integration API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v1alpha
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_cloud_integrations_v1alpha_auth_token import GoogleCloudIntegrationsV1alphaAuthToken
from openapi_client.models.google_cloud_integrations_v1alpha_jwt import GoogleCloudIntegrationsV1alphaJwt
from openapi_client.models.google_cloud_integrations_v1alpha_o_auth2_authorization_code import GoogleCloudIntegrationsV1alphaOAuth2AuthorizationCode
from openapi_client.models.google_cloud_integrations_v1alpha_o_auth2_client_credentials import GoogleCloudIntegrationsV1alphaOAuth2ClientCredentials
from openapi_client.models.google_cloud_integrations_v1alpha_o_auth2_resource_owner_credentials import GoogleCloudIntegrationsV1alphaOAuth2ResourceOwnerCredentials
from openapi_client.models.google_cloud_integrations_v1alpha_oidc_token import GoogleCloudIntegrationsV1alphaOidcToken
from openapi_client.models.google_cloud_integrations_v1alpha_service_account_credentials import GoogleCloudIntegrationsV1alphaServiceAccountCredentials
from openapi_client.models.google_cloud_integrations_v1alpha_username_and_password import GoogleCloudIntegrationsV1alphaUsernameAndPassword
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudIntegrationsV1alphaCredential(BaseModel):
    """
    Defines parameters for a single, canonical credential.
    """ # noqa: E501
    auth_token: Optional[GoogleCloudIntegrationsV1alphaAuthToken] = Field(default=None, alias="authToken")
    credential_type: Optional[StrictStr] = Field(default=None, description="Credential type associated with auth config.", alias="credentialType")
    jwt: Optional[GoogleCloudIntegrationsV1alphaJwt] = None
    oauth2_authorization_code: Optional[GoogleCloudIntegrationsV1alphaOAuth2AuthorizationCode] = Field(default=None, alias="oauth2AuthorizationCode")
    oauth2_client_credentials: Optional[GoogleCloudIntegrationsV1alphaOAuth2ClientCredentials] = Field(default=None, alias="oauth2ClientCredentials")
    oauth2_resource_owner_credentials: Optional[GoogleCloudIntegrationsV1alphaOAuth2ResourceOwnerCredentials] = Field(default=None, alias="oauth2ResourceOwnerCredentials")
    oidc_token: Optional[GoogleCloudIntegrationsV1alphaOidcToken] = Field(default=None, alias="oidcToken")
    service_account_credentials: Optional[GoogleCloudIntegrationsV1alphaServiceAccountCredentials] = Field(default=None, alias="serviceAccountCredentials")
    username_and_password: Optional[GoogleCloudIntegrationsV1alphaUsernameAndPassword] = Field(default=None, alias="usernameAndPassword")
    __properties: ClassVar[List[str]] = ["authToken", "credentialType", "jwt", "oauth2AuthorizationCode", "oauth2ClientCredentials", "oauth2ResourceOwnerCredentials", "oidcToken", "serviceAccountCredentials", "usernameAndPassword"]

    @field_validator('credential_type')
    def credential_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['CREDENTIAL_TYPE_UNSPECIFIED', 'USERNAME_AND_PASSWORD', 'API_KEY', 'OAUTH2_AUTHORIZATION_CODE', 'OAUTH2_IMPLICIT', 'OAUTH2_CLIENT_CREDENTIALS', 'OAUTH2_RESOURCE_OWNER_CREDENTIALS', 'JWT', 'AUTH_TOKEN', 'SERVICE_ACCOUNT', 'CLIENT_CERTIFICATE_ONLY', 'OIDC_TOKEN']):
            raise ValueError("must be one of enum values ('CREDENTIAL_TYPE_UNSPECIFIED', 'USERNAME_AND_PASSWORD', 'API_KEY', 'OAUTH2_AUTHORIZATION_CODE', 'OAUTH2_IMPLICIT', 'OAUTH2_CLIENT_CREDENTIALS', 'OAUTH2_RESOURCE_OWNER_CREDENTIALS', 'JWT', 'AUTH_TOKEN', 'SERVICE_ACCOUNT', 'CLIENT_CERTIFICATE_ONLY', 'OIDC_TOKEN')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudIntegrationsV1alphaCredential from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of auth_token
        if self.auth_token:
            _dict['authToken'] = self.auth_token.to_dict()
        # override the default output from pydantic by calling `to_dict()` of jwt
        if self.jwt:
            _dict['jwt'] = self.jwt.to_dict()
        # override the default output from pydantic by calling `to_dict()` of oauth2_authorization_code
        if self.oauth2_authorization_code:
            _dict['oauth2AuthorizationCode'] = self.oauth2_authorization_code.to_dict()
        # override the default output from pydantic by calling `to_dict()` of oauth2_client_credentials
        if self.oauth2_client_credentials:
            _dict['oauth2ClientCredentials'] = self.oauth2_client_credentials.to_dict()
        # override the default output from pydantic by calling `to_dict()` of oauth2_resource_owner_credentials
        if self.oauth2_resource_owner_credentials:
            _dict['oauth2ResourceOwnerCredentials'] = self.oauth2_resource_owner_credentials.to_dict()
        # override the default output from pydantic by calling `to_dict()` of oidc_token
        if self.oidc_token:
            _dict['oidcToken'] = self.oidc_token.to_dict()
        # override the default output from pydantic by calling `to_dict()` of service_account_credentials
        if self.service_account_credentials:
            _dict['serviceAccountCredentials'] = self.service_account_credentials.to_dict()
        # override the default output from pydantic by calling `to_dict()` of username_and_password
        if self.username_and_password:
            _dict['usernameAndPassword'] = self.username_and_password.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudIntegrationsV1alphaCredential from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "authToken": GoogleCloudIntegrationsV1alphaAuthToken.from_dict(obj["authToken"]) if obj.get("authToken") is not None else None,
            "credentialType": obj.get("credentialType"),
            "jwt": GoogleCloudIntegrationsV1alphaJwt.from_dict(obj["jwt"]) if obj.get("jwt") is not None else None,
            "oauth2AuthorizationCode": GoogleCloudIntegrationsV1alphaOAuth2AuthorizationCode.from_dict(obj["oauth2AuthorizationCode"]) if obj.get("oauth2AuthorizationCode") is not None else None,
            "oauth2ClientCredentials": GoogleCloudIntegrationsV1alphaOAuth2ClientCredentials.from_dict(obj["oauth2ClientCredentials"]) if obj.get("oauth2ClientCredentials") is not None else None,
            "oauth2ResourceOwnerCredentials": GoogleCloudIntegrationsV1alphaOAuth2ResourceOwnerCredentials.from_dict(obj["oauth2ResourceOwnerCredentials"]) if obj.get("oauth2ResourceOwnerCredentials") is not None else None,
            "oidcToken": GoogleCloudIntegrationsV1alphaOidcToken.from_dict(obj["oidcToken"]) if obj.get("oidcToken") is not None else None,
            "serviceAccountCredentials": GoogleCloudIntegrationsV1alphaServiceAccountCredentials.from_dict(obj["serviceAccountCredentials"]) if obj.get("serviceAccountCredentials") is not None else None,
            "usernameAndPassword": GoogleCloudIntegrationsV1alphaUsernameAndPassword.from_dict(obj["usernameAndPassword"]) if obj.get("usernameAndPassword") is not None else None
        })
        return _obj



# coding: utf-8

"""
    Application Integration API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v1alpha
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.enterprise_crm_eventbus_proto_base_function import EnterpriseCrmEventbusProtoBaseFunction
from openapi_client.models.enterprise_crm_eventbus_proto_boolean_array_function import EnterpriseCrmEventbusProtoBooleanArrayFunction
from openapi_client.models.enterprise_crm_eventbus_proto_boolean_function import EnterpriseCrmEventbusProtoBooleanFunction
from openapi_client.models.enterprise_crm_eventbus_proto_double_array_function import EnterpriseCrmEventbusProtoDoubleArrayFunction
from openapi_client.models.enterprise_crm_eventbus_proto_double_function import EnterpriseCrmEventbusProtoDoubleFunction
from openapi_client.models.enterprise_crm_eventbus_proto_int_array_function import EnterpriseCrmEventbusProtoIntArrayFunction
from openapi_client.models.enterprise_crm_eventbus_proto_int_function import EnterpriseCrmEventbusProtoIntFunction
from openapi_client.models.enterprise_crm_eventbus_proto_json_function import EnterpriseCrmEventbusProtoJsonFunction
from openapi_client.models.enterprise_crm_eventbus_proto_proto_array_function import EnterpriseCrmEventbusProtoProtoArrayFunction
from openapi_client.models.enterprise_crm_eventbus_proto_proto_function import EnterpriseCrmEventbusProtoProtoFunction
from openapi_client.models.enterprise_crm_eventbus_proto_string_array_function import EnterpriseCrmEventbusProtoStringArrayFunction
from openapi_client.models.enterprise_crm_eventbus_proto_string_function import EnterpriseCrmEventbusProtoStringFunction
from typing import Optional, Set
from typing_extensions import Self

class EnterpriseCrmEventbusProtoFunctionType(BaseModel):
    """
    EnterpriseCrmEventbusProtoFunctionType
    """ # noqa: E501
    base_function: Optional[EnterpriseCrmEventbusProtoBaseFunction] = Field(default=None, alias="baseFunction")
    boolean_array_function: Optional[EnterpriseCrmEventbusProtoBooleanArrayFunction] = Field(default=None, alias="booleanArrayFunction")
    boolean_function: Optional[EnterpriseCrmEventbusProtoBooleanFunction] = Field(default=None, alias="booleanFunction")
    double_array_function: Optional[EnterpriseCrmEventbusProtoDoubleArrayFunction] = Field(default=None, alias="doubleArrayFunction")
    double_function: Optional[EnterpriseCrmEventbusProtoDoubleFunction] = Field(default=None, alias="doubleFunction")
    int_array_function: Optional[EnterpriseCrmEventbusProtoIntArrayFunction] = Field(default=None, alias="intArrayFunction")
    int_function: Optional[EnterpriseCrmEventbusProtoIntFunction] = Field(default=None, alias="intFunction")
    json_function: Optional[EnterpriseCrmEventbusProtoJsonFunction] = Field(default=None, alias="jsonFunction")
    proto_array_function: Optional[EnterpriseCrmEventbusProtoProtoArrayFunction] = Field(default=None, alias="protoArrayFunction")
    proto_function: Optional[EnterpriseCrmEventbusProtoProtoFunction] = Field(default=None, alias="protoFunction")
    string_array_function: Optional[EnterpriseCrmEventbusProtoStringArrayFunction] = Field(default=None, alias="stringArrayFunction")
    string_function: Optional[EnterpriseCrmEventbusProtoStringFunction] = Field(default=None, alias="stringFunction")
    __properties: ClassVar[List[str]] = ["baseFunction", "booleanArrayFunction", "booleanFunction", "doubleArrayFunction", "doubleFunction", "intArrayFunction", "intFunction", "jsonFunction", "protoArrayFunction", "protoFunction", "stringArrayFunction", "stringFunction"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of EnterpriseCrmEventbusProtoFunctionType from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of base_function
        if self.base_function:
            _dict['baseFunction'] = self.base_function.to_dict()
        # override the default output from pydantic by calling `to_dict()` of boolean_array_function
        if self.boolean_array_function:
            _dict['booleanArrayFunction'] = self.boolean_array_function.to_dict()
        # override the default output from pydantic by calling `to_dict()` of boolean_function
        if self.boolean_function:
            _dict['booleanFunction'] = self.boolean_function.to_dict()
        # override the default output from pydantic by calling `to_dict()` of double_array_function
        if self.double_array_function:
            _dict['doubleArrayFunction'] = self.double_array_function.to_dict()
        # override the default output from pydantic by calling `to_dict()` of double_function
        if self.double_function:
            _dict['doubleFunction'] = self.double_function.to_dict()
        # override the default output from pydantic by calling `to_dict()` of int_array_function
        if self.int_array_function:
            _dict['intArrayFunction'] = self.int_array_function.to_dict()
        # override the default output from pydantic by calling `to_dict()` of int_function
        if self.int_function:
            _dict['intFunction'] = self.int_function.to_dict()
        # override the default output from pydantic by calling `to_dict()` of json_function
        if self.json_function:
            _dict['jsonFunction'] = self.json_function.to_dict()
        # override the default output from pydantic by calling `to_dict()` of proto_array_function
        if self.proto_array_function:
            _dict['protoArrayFunction'] = self.proto_array_function.to_dict()
        # override the default output from pydantic by calling `to_dict()` of proto_function
        if self.proto_function:
            _dict['protoFunction'] = self.proto_function.to_dict()
        # override the default output from pydantic by calling `to_dict()` of string_array_function
        if self.string_array_function:
            _dict['stringArrayFunction'] = self.string_array_function.to_dict()
        # override the default output from pydantic by calling `to_dict()` of string_function
        if self.string_function:
            _dict['stringFunction'] = self.string_function.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of EnterpriseCrmEventbusProtoFunctionType from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "baseFunction": EnterpriseCrmEventbusProtoBaseFunction.from_dict(obj["baseFunction"]) if obj.get("baseFunction") is not None else None,
            "booleanArrayFunction": EnterpriseCrmEventbusProtoBooleanArrayFunction.from_dict(obj["booleanArrayFunction"]) if obj.get("booleanArrayFunction") is not None else None,
            "booleanFunction": EnterpriseCrmEventbusProtoBooleanFunction.from_dict(obj["booleanFunction"]) if obj.get("booleanFunction") is not None else None,
            "doubleArrayFunction": EnterpriseCrmEventbusProtoDoubleArrayFunction.from_dict(obj["doubleArrayFunction"]) if obj.get("doubleArrayFunction") is not None else None,
            "doubleFunction": EnterpriseCrmEventbusProtoDoubleFunction.from_dict(obj["doubleFunction"]) if obj.get("doubleFunction") is not None else None,
            "intArrayFunction": EnterpriseCrmEventbusProtoIntArrayFunction.from_dict(obj["intArrayFunction"]) if obj.get("intArrayFunction") is not None else None,
            "intFunction": EnterpriseCrmEventbusProtoIntFunction.from_dict(obj["intFunction"]) if obj.get("intFunction") is not None else None,
            "jsonFunction": EnterpriseCrmEventbusProtoJsonFunction.from_dict(obj["jsonFunction"]) if obj.get("jsonFunction") is not None else None,
            "protoArrayFunction": EnterpriseCrmEventbusProtoProtoArrayFunction.from_dict(obj["protoArrayFunction"]) if obj.get("protoArrayFunction") is not None else None,
            "protoFunction": EnterpriseCrmEventbusProtoProtoFunction.from_dict(obj["protoFunction"]) if obj.get("protoFunction") is not None else None,
            "stringArrayFunction": EnterpriseCrmEventbusProtoStringArrayFunction.from_dict(obj["stringArrayFunction"]) if obj.get("stringArrayFunction") is not None else None,
            "stringFunction": EnterpriseCrmEventbusProtoStringFunction.from_dict(obj["stringFunction"]) if obj.get("stringFunction") is not None else None
        })
        return _obj



# coding: utf-8

"""
    Application Integration API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v1alpha
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.enterprise_crm_eventbus_proto_task_execution_details_task_attempt_stats import EnterpriseCrmEventbusProtoTaskExecutionDetailsTaskAttemptStats
from typing import Optional, Set
from typing_extensions import Self

class EnterpriseCrmEventbusProtoTaskExecutionDetails(BaseModel):
    """
    Contains the details of the execution of this task. Next available id: 11
    """ # noqa: E501
    task_attempt_stats: Optional[List[EnterpriseCrmEventbusProtoTaskExecutionDetailsTaskAttemptStats]] = Field(default=None, alias="taskAttemptStats")
    task_execution_state: Optional[StrictStr] = Field(default=None, alias="taskExecutionState")
    task_number: Optional[StrictStr] = Field(default=None, description="Pointer to the task config it used for execution.", alias="taskNumber")
    __properties: ClassVar[List[str]] = ["taskAttemptStats", "taskExecutionState", "taskNumber"]

    @field_validator('task_execution_state')
    def task_execution_state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['UNSPECIFIED', 'PENDING_EXECUTION', 'IN_PROCESS', 'SUCCEED', 'FAILED', 'FATAL', 'RETRY_ON_HOLD', 'SKIPPED', 'CANCELED', 'PENDING_ROLLBACK', 'ROLLBACK_IN_PROCESS', 'ROLLEDBACK', 'SUSPENDED']):
            raise ValueError("must be one of enum values ('UNSPECIFIED', 'PENDING_EXECUTION', 'IN_PROCESS', 'SUCCEED', 'FAILED', 'FATAL', 'RETRY_ON_HOLD', 'SKIPPED', 'CANCELED', 'PENDING_ROLLBACK', 'ROLLBACK_IN_PROCESS', 'ROLLEDBACK', 'SUSPENDED')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of EnterpriseCrmEventbusProtoTaskExecutionDetails from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in task_attempt_stats (list)
        _items = []
        if self.task_attempt_stats:
            for _item_task_attempt_stats in self.task_attempt_stats:
                if _item_task_attempt_stats:
                    _items.append(_item_task_attempt_stats.to_dict())
            _dict['taskAttemptStats'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of EnterpriseCrmEventbusProtoTaskExecutionDetails from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "taskAttemptStats": [EnterpriseCrmEventbusProtoTaskExecutionDetailsTaskAttemptStats.from_dict(_item) for _item in obj["taskAttemptStats"]] if obj.get("taskAttemptStats") is not None else None,
            "taskExecutionState": obj.get("taskExecutionState"),
            "taskNumber": obj.get("taskNumber")
        })
        return _obj



# coding: utf-8

"""
    Application Integration API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v1alpha
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_cloud_integrations_v1alpha_value_type import GoogleCloudIntegrationsV1alphaValueType
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudIntegrationsV1alphaIntegrationParameter(BaseModel):
    """
    Integration Parameter is defined in the integration config and are used to provide information about data types of the expected parameters and provide any default values if needed. They can also be used to add custom attributes. These are static in nature and should not be used for dynamic event definition.
    """ # noqa: E501
    data_type: Optional[StrictStr] = Field(default=None, description="Type of the parameter.", alias="dataType")
    default_value: Optional[GoogleCloudIntegrationsV1alphaValueType] = Field(default=None, alias="defaultValue")
    display_name: Optional[StrictStr] = Field(default=None, description="The name (without prefix) to be displayed in the UI for this parameter. E.g. if the key is \"foo.bar.myName\", then the name would be \"myName\".", alias="displayName")
    input_output_type: Optional[StrictStr] = Field(default=None, description="Specifies the input/output type for the parameter.", alias="inputOutputType")
    is_transient: Optional[StrictBool] = Field(default=None, description="Whether this parameter is a transient parameter.", alias="isTransient")
    json_schema: Optional[StrictStr] = Field(default=None, description="This schema will be used to validate runtime JSON-typed values of this parameter.", alias="jsonSchema")
    key: Optional[StrictStr] = Field(default=None, description="Key is used to retrieve the corresponding parameter value. This should be unique for a given fired event. These parameters must be predefined in the integration definition.")
    producer: Optional[StrictStr] = Field(default=None, description="The identifier of the node (TaskConfig/TriggerConfig) this parameter was produced by, if it is a transient param or a copy of an input param.")
    searchable: Optional[StrictBool] = Field(default=None, description="Searchable in the execution log or not.")
    __properties: ClassVar[List[str]] = ["dataType", "defaultValue", "displayName", "inputOutputType", "isTransient", "jsonSchema", "key", "producer", "searchable"]

    @field_validator('data_type')
    def data_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['INTEGRATION_PARAMETER_DATA_TYPE_UNSPECIFIED', 'STRING_VALUE', 'INT_VALUE', 'DOUBLE_VALUE', 'BOOLEAN_VALUE', 'STRING_ARRAY', 'INT_ARRAY', 'DOUBLE_ARRAY', 'BOOLEAN_ARRAY', 'JSON_VALUE', 'PROTO_VALUE', 'PROTO_ARRAY']):
            raise ValueError("must be one of enum values ('INTEGRATION_PARAMETER_DATA_TYPE_UNSPECIFIED', 'STRING_VALUE', 'INT_VALUE', 'DOUBLE_VALUE', 'BOOLEAN_VALUE', 'STRING_ARRAY', 'INT_ARRAY', 'DOUBLE_ARRAY', 'BOOLEAN_ARRAY', 'JSON_VALUE', 'PROTO_VALUE', 'PROTO_ARRAY')")
        return value

    @field_validator('input_output_type')
    def input_output_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['IN_OUT_TYPE_UNSPECIFIED', 'IN', 'OUT', 'IN_OUT']):
            raise ValueError("must be one of enum values ('IN_OUT_TYPE_UNSPECIFIED', 'IN', 'OUT', 'IN_OUT')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudIntegrationsV1alphaIntegrationParameter from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of default_value
        if self.default_value:
            _dict['defaultValue'] = self.default_value.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudIntegrationsV1alphaIntegrationParameter from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "dataType": obj.get("dataType"),
            "defaultValue": GoogleCloudIntegrationsV1alphaValueType.from_dict(obj["defaultValue"]) if obj.get("defaultValue") is not None else None,
            "displayName": obj.get("displayName"),
            "inputOutputType": obj.get("inputOutputType"),
            "isTransient": obj.get("isTransient"),
            "jsonSchema": obj.get("jsonSchema"),
            "key": obj.get("key"),
            "producer": obj.get("producer"),
            "searchable": obj.get("searchable")
        })
        return _obj



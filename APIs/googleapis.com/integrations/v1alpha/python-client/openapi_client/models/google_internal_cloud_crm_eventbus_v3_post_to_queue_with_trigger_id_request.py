# coding: utf-8

"""
    Application Integration API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v1alpha
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.enterprise_crm_eventbus_proto_event_parameters import EnterpriseCrmEventbusProtoEventParameters
from typing import Optional, Set
from typing_extensions import Self

class GoogleInternalCloudCrmEventbusV3PostToQueueWithTriggerIdRequest(BaseModel):
    """
    Use this request to post all workflows associated with a given trigger id. Next available id: 11
    """ # noqa: E501
    client_id: Optional[StrictStr] = Field(default=None, description="Optional. If the client id is provided, then the combination of trigger id and client id is matched across all the workflows. If the client id is not provided, then workflows with matching trigger id are executed for each client id in the {@link TriggerConfig}. For Api Trigger, the client id is required and will be validated against the allowed clients.", alias="clientId")
    ignore_error_if_no_active_workflow: Optional[StrictBool] = Field(default=None, description="Optional. Flag to determine whether clients would suppress a warning when no ACTIVE workflows are not found. If this flag is set to be true, an error will not be thrown if the requested trigger_id or client_id is not found in any ACTIVE workflow. Otherwise, the error is always thrown. The flag is set to be false by default.", alias="ignoreErrorIfNoActiveWorkflow")
    parameters: Optional[EnterpriseCrmEventbusProtoEventParameters] = None
    priority: Optional[StrictStr] = Field(default=None, description="The request priority this request should be processed at. For internal users:")
    request_id: Optional[StrictStr] = Field(default=None, description="Optional. This is used to de-dup incoming request: if the duplicate request was detected, the response from the previous execution is returned. Must have no more than 36 characters and contain only alphanumeric characters and hyphens.", alias="requestId")
    resource_name: Optional[StrictStr] = Field(default=None, description="This field is only required when using Admin Access. The resource name of target, or the parent resource name. For example: \"projects/*/locations/*/integrations/*\"", alias="resourceName")
    scheduled_time: Optional[StrictStr] = Field(default=None, description="Optional. Time in milliseconds since epoch when the given event would be scheduled.", alias="scheduledTime")
    test_mode: Optional[StrictBool] = Field(default=None, description="Optional. Sets test mode in {@link enterprise/crm/eventbus/event_message.proto}.", alias="testMode")
    trigger_id: Optional[StrictStr] = Field(default=None, description="Matched against all {@link TriggerConfig}s across all workflows. i.e. TriggerConfig.trigger_id.equals(trigger_id) Required.", alias="triggerId")
    workflow_name: Optional[StrictStr] = Field(default=None, description="Optional. If provided, the workflow_name is used to filter all the matched workflows having same trigger_id+client_id. A combination of trigger_id, client_id and workflow_name identifies a unique workflow.", alias="workflowName")
    __properties: ClassVar[List[str]] = ["clientId", "ignoreErrorIfNoActiveWorkflow", "parameters", "priority", "requestId", "resourceName", "scheduledTime", "testMode", "triggerId", "workflowName"]

    @field_validator('priority')
    def priority_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['UNSPCIFIED', 'SHEDDABLE', 'SHEDDABLE_PLUS', 'CRITICAL', 'CRITICAL_PLUS']):
            raise ValueError("must be one of enum values ('UNSPCIFIED', 'SHEDDABLE', 'SHEDDABLE_PLUS', 'CRITICAL', 'CRITICAL_PLUS')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleInternalCloudCrmEventbusV3PostToQueueWithTriggerIdRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of parameters
        if self.parameters:
            _dict['parameters'] = self.parameters.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleInternalCloudCrmEventbusV3PostToQueueWithTriggerIdRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "clientId": obj.get("clientId"),
            "ignoreErrorIfNoActiveWorkflow": obj.get("ignoreErrorIfNoActiveWorkflow"),
            "parameters": EnterpriseCrmEventbusProtoEventParameters.from_dict(obj["parameters"]) if obj.get("parameters") is not None else None,
            "priority": obj.get("priority"),
            "requestId": obj.get("requestId"),
            "resourceName": obj.get("resourceName"),
            "scheduledTime": obj.get("scheduledTime"),
            "testMode": obj.get("testMode"),
            "triggerId": obj.get("triggerId"),
            "workflowName": obj.get("workflowName")
        })
        return _obj



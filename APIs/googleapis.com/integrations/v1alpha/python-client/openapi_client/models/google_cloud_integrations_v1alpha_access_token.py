# coding: utf-8

"""
    Application Integration API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v1alpha
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudIntegrationsV1alphaAccessToken(BaseModel):
    """
    The access token represents the authorization of a specific application to access specific parts of a userâ€™s data.
    """ # noqa: E501
    access_token: Optional[StrictStr] = Field(default=None, description="The access token encapsulating the security identity of a process or thread.", alias="accessToken")
    access_token_expire_time: Optional[StrictStr] = Field(default=None, description="Required. The approximate time until the access token retrieved is valid.", alias="accessTokenExpireTime")
    refresh_token: Optional[StrictStr] = Field(default=None, description="If the access token will expire, use the refresh token to obtain another access token.", alias="refreshToken")
    refresh_token_expire_time: Optional[StrictStr] = Field(default=None, description="The approximate time until the refresh token retrieved is valid.", alias="refreshTokenExpireTime")
    token_type: Optional[StrictStr] = Field(default=None, description="Only support \"bearer\" token in v1 as bearer token is the predominant type used with OAuth 2.0.", alias="tokenType")
    __properties: ClassVar[List[str]] = ["accessToken", "accessTokenExpireTime", "refreshToken", "refreshTokenExpireTime", "tokenType"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudIntegrationsV1alphaAccessToken from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudIntegrationsV1alphaAccessToken from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "accessToken": obj.get("accessToken"),
            "accessTokenExpireTime": obj.get("accessTokenExpireTime"),
            "refreshToken": obj.get("refreshToken"),
            "refreshTokenExpireTime": obj.get("refreshTokenExpireTime"),
            "tokenType": obj.get("tokenType")
        })
        return _obj



# coding: utf-8

"""
    Application Integration API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v1alpha
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.enterprise_crm_eventbus_proto_param_spec_entry_config import EnterpriseCrmEventbusProtoParamSpecEntryConfig
from openapi_client.models.enterprise_crm_eventbus_proto_param_spec_entry_proto_definition import EnterpriseCrmEventbusProtoParamSpecEntryProtoDefinition
from openapi_client.models.enterprise_crm_eventbus_proto_param_spec_entry_validation_rule import EnterpriseCrmEventbusProtoParamSpecEntryValidationRule
from openapi_client.models.enterprise_crm_frontends_eventbus_proto_parameter_value_type import EnterpriseCrmFrontendsEventbusProtoParameterValueType
from typing import Optional, Set
from typing_extensions import Self

class EnterpriseCrmFrontendsEventbusProtoParamSpecEntry(BaseModel):
    """
    Key-value pair of EventBus task parameters. Next id: 13
    """ # noqa: E501
    class_name: Optional[StrictStr] = Field(default=None, description="The FQCN of the Java object this represents. A string, for example, would be \"java.lang.String\". If this is \"java.lang.Object\", the parameter can be of any type.", alias="className")
    collection_element_class_name: Optional[StrictStr] = Field(default=None, description="If it is a collection of objects, this would be the FCQN of every individual element in the collection. If this is \"java.lang.Object\", the parameter is a collection of any type.", alias="collectionElementClassName")
    config: Optional[EnterpriseCrmEventbusProtoParamSpecEntryConfig] = None
    data_type: Optional[StrictStr] = Field(default=None, description="The data type of the parameter.", alias="dataType")
    default_value: Optional[EnterpriseCrmFrontendsEventbusProtoParameterValueType] = Field(default=None, alias="defaultValue")
    is_deprecated: Optional[StrictBool] = Field(default=None, description="If set, this entry is deprecated, so further use of this parameter should be prohibited.", alias="isDeprecated")
    is_output: Optional[StrictBool] = Field(default=None, alias="isOutput")
    json_schema: Optional[StrictStr] = Field(default=None, description="If the data_type is JSON_VALUE, then this will define its schema.", alias="jsonSchema")
    key: Optional[StrictStr] = Field(default=None, description="Key is used to retrieve the corresponding parameter value. This should be unique for a given task. These parameters must be predefined in the workflow definition.")
    proto_def: Optional[EnterpriseCrmEventbusProtoParamSpecEntryProtoDefinition] = Field(default=None, alias="protoDef")
    required: Optional[StrictBool] = Field(default=None, description="If set, the user must provide an input value for this parameter.")
    validation_rule: Optional[EnterpriseCrmEventbusProtoParamSpecEntryValidationRule] = Field(default=None, alias="validationRule")
    __properties: ClassVar[List[str]] = ["className", "collectionElementClassName", "config", "dataType", "defaultValue", "isDeprecated", "isOutput", "jsonSchema", "key", "protoDef", "required", "validationRule"]

    @field_validator('data_type')
    def data_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['DATA_TYPE_UNSPECIFIED', 'STRING_VALUE', 'INT_VALUE', 'DOUBLE_VALUE', 'BOOLEAN_VALUE', 'PROTO_VALUE', 'SERIALIZED_OBJECT_VALUE', 'STRING_ARRAY', 'INT_ARRAY', 'DOUBLE_ARRAY', 'PROTO_ARRAY', 'PROTO_ENUM', 'BOOLEAN_ARRAY', 'PROTO_ENUM_ARRAY', 'BYTES', 'BYTES_ARRAY', 'NON_SERIALIZABLE_OBJECT', 'JSON_VALUE']):
            raise ValueError("must be one of enum values ('DATA_TYPE_UNSPECIFIED', 'STRING_VALUE', 'INT_VALUE', 'DOUBLE_VALUE', 'BOOLEAN_VALUE', 'PROTO_VALUE', 'SERIALIZED_OBJECT_VALUE', 'STRING_ARRAY', 'INT_ARRAY', 'DOUBLE_ARRAY', 'PROTO_ARRAY', 'PROTO_ENUM', 'BOOLEAN_ARRAY', 'PROTO_ENUM_ARRAY', 'BYTES', 'BYTES_ARRAY', 'NON_SERIALIZABLE_OBJECT', 'JSON_VALUE')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of EnterpriseCrmFrontendsEventbusProtoParamSpecEntry from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of config
        if self.config:
            _dict['config'] = self.config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of default_value
        if self.default_value:
            _dict['defaultValue'] = self.default_value.to_dict()
        # override the default output from pydantic by calling `to_dict()` of proto_def
        if self.proto_def:
            _dict['protoDef'] = self.proto_def.to_dict()
        # override the default output from pydantic by calling `to_dict()` of validation_rule
        if self.validation_rule:
            _dict['validationRule'] = self.validation_rule.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of EnterpriseCrmFrontendsEventbusProtoParamSpecEntry from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "className": obj.get("className"),
            "collectionElementClassName": obj.get("collectionElementClassName"),
            "config": EnterpriseCrmEventbusProtoParamSpecEntryConfig.from_dict(obj["config"]) if obj.get("config") is not None else None,
            "dataType": obj.get("dataType"),
            "defaultValue": EnterpriseCrmFrontendsEventbusProtoParameterValueType.from_dict(obj["defaultValue"]) if obj.get("defaultValue") is not None else None,
            "isDeprecated": obj.get("isDeprecated"),
            "isOutput": obj.get("isOutput"),
            "jsonSchema": obj.get("jsonSchema"),
            "key": obj.get("key"),
            "protoDef": EnterpriseCrmEventbusProtoParamSpecEntryProtoDefinition.from_dict(obj["protoDef"]) if obj.get("protoDef") is not None else None,
            "required": obj.get("required"),
            "validationRule": EnterpriseCrmEventbusProtoParamSpecEntryValidationRule.from_dict(obj["validationRule"]) if obj.get("validationRule") is not None else None
        })
        return _obj



# coding: utf-8

"""
    Application Integration API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v1alpha
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.enterprise_crm_eventbus_proto_condition_result import EnterpriseCrmEventbusProtoConditionResult
from openapi_client.models.enterprise_crm_eventbus_proto_event_execution_snapshot_event_execution_snapshot_metadata import EnterpriseCrmEventbusProtoEventExecutionSnapshotEventExecutionSnapshotMetadata
from openapi_client.models.enterprise_crm_eventbus_proto_task_execution_details import EnterpriseCrmEventbusProtoTaskExecutionDetails
from openapi_client.models.enterprise_crm_frontends_eventbus_proto_event_parameters import EnterpriseCrmFrontendsEventbusProtoEventParameters
from typing import Optional, Set
from typing_extensions import Self

class EnterpriseCrmFrontendsEventbusProtoEventExecutionSnapshot(BaseModel):
    """
    EnterpriseCrmFrontendsEventbusProtoEventExecutionSnapshot
    """ # noqa: E501
    checkpoint_task_number: Optional[StrictStr] = Field(default=None, description="Indicates \"right after which checkpoint task's execution\" this snapshot is taken.", alias="checkpointTaskNumber")
    condition_results: Optional[List[EnterpriseCrmEventbusProtoConditionResult]] = Field(default=None, description="All of the computed conditions that been calculated.", alias="conditionResults")
    diff_params: Optional[EnterpriseCrmFrontendsEventbusProtoEventParameters] = Field(default=None, alias="diffParams")
    event_execution_info_id: Optional[StrictStr] = Field(default=None, description="Points to the event execution info this snapshot belongs to.", alias="eventExecutionInfoId")
    event_execution_snapshot_id: Optional[StrictStr] = Field(default=None, description="Auto-generated. Used as primary key for EventExecutionSnapshots table.", alias="eventExecutionSnapshotId")
    event_execution_snapshot_metadata: Optional[EnterpriseCrmEventbusProtoEventExecutionSnapshotEventExecutionSnapshotMetadata] = Field(default=None, alias="eventExecutionSnapshotMetadata")
    event_params: Optional[EnterpriseCrmFrontendsEventbusProtoEventParameters] = Field(default=None, alias="eventParams")
    snapshot_time: Optional[StrictStr] = Field(default=None, description="Indicates when this snapshot is taken.", alias="snapshotTime")
    task_execution_details: Optional[List[EnterpriseCrmEventbusProtoTaskExecutionDetails]] = Field(default=None, description="All of the task execution details at the given point of time.", alias="taskExecutionDetails")
    task_name: Optional[StrictStr] = Field(default=None, description="The task name associated with this snapshot. Could be empty.", alias="taskName")
    __properties: ClassVar[List[str]] = ["checkpointTaskNumber", "conditionResults", "diffParams", "eventExecutionInfoId", "eventExecutionSnapshotId", "eventExecutionSnapshotMetadata", "eventParams", "snapshotTime", "taskExecutionDetails", "taskName"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of EnterpriseCrmFrontendsEventbusProtoEventExecutionSnapshot from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in condition_results (list)
        _items = []
        if self.condition_results:
            for _item_condition_results in self.condition_results:
                if _item_condition_results:
                    _items.append(_item_condition_results.to_dict())
            _dict['conditionResults'] = _items
        # override the default output from pydantic by calling `to_dict()` of diff_params
        if self.diff_params:
            _dict['diffParams'] = self.diff_params.to_dict()
        # override the default output from pydantic by calling `to_dict()` of event_execution_snapshot_metadata
        if self.event_execution_snapshot_metadata:
            _dict['eventExecutionSnapshotMetadata'] = self.event_execution_snapshot_metadata.to_dict()
        # override the default output from pydantic by calling `to_dict()` of event_params
        if self.event_params:
            _dict['eventParams'] = self.event_params.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in task_execution_details (list)
        _items = []
        if self.task_execution_details:
            for _item_task_execution_details in self.task_execution_details:
                if _item_task_execution_details:
                    _items.append(_item_task_execution_details.to_dict())
            _dict['taskExecutionDetails'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of EnterpriseCrmFrontendsEventbusProtoEventExecutionSnapshot from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "checkpointTaskNumber": obj.get("checkpointTaskNumber"),
            "conditionResults": [EnterpriseCrmEventbusProtoConditionResult.from_dict(_item) for _item in obj["conditionResults"]] if obj.get("conditionResults") is not None else None,
            "diffParams": EnterpriseCrmFrontendsEventbusProtoEventParameters.from_dict(obj["diffParams"]) if obj.get("diffParams") is not None else None,
            "eventExecutionInfoId": obj.get("eventExecutionInfoId"),
            "eventExecutionSnapshotId": obj.get("eventExecutionSnapshotId"),
            "eventExecutionSnapshotMetadata": EnterpriseCrmEventbusProtoEventExecutionSnapshotEventExecutionSnapshotMetadata.from_dict(obj["eventExecutionSnapshotMetadata"]) if obj.get("eventExecutionSnapshotMetadata") is not None else None,
            "eventParams": EnterpriseCrmFrontendsEventbusProtoEventParameters.from_dict(obj["eventParams"]) if obj.get("eventParams") is not None else None,
            "snapshotTime": obj.get("snapshotTime"),
            "taskExecutionDetails": [EnterpriseCrmEventbusProtoTaskExecutionDetails.from_dict(_item) for _item in obj["taskExecutionDetails"]] if obj.get("taskExecutionDetails") is not None else None,
            "taskName": obj.get("taskName")
        })
        return _obj



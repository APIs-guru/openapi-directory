# coding: utf-8

"""
    Application Integration API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v1alpha
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class EnterpriseCrmEventbusStatsDimensions(BaseModel):
    """
    EnterpriseCrmEventbusStatsDimensions
    """ # noqa: E501
    client_id: Optional[StrictStr] = Field(default=None, alias="clientId")
    enum_filter_type: Optional[StrictStr] = Field(default=None, description="Whether to include or exclude the enums matching the regex.", alias="enumFilterType")
    error_enum_string: Optional[StrictStr] = Field(default=None, alias="errorEnumString")
    retry_attempt: Optional[StrictStr] = Field(default=None, alias="retryAttempt")
    task_name: Optional[StrictStr] = Field(default=None, alias="taskName")
    task_number: Optional[StrictStr] = Field(default=None, alias="taskNumber")
    trigger_id: Optional[StrictStr] = Field(default=None, description="Stats have been or will be aggregated on set fields for any semantically-meaningful combination.", alias="triggerId")
    warning_enum_string: Optional[StrictStr] = Field(default=None, alias="warningEnumString")
    workflow_id: Optional[StrictStr] = Field(default=None, alias="workflowId")
    workflow_name: Optional[StrictStr] = Field(default=None, alias="workflowName")
    __properties: ClassVar[List[str]] = ["clientId", "enumFilterType", "errorEnumString", "retryAttempt", "taskName", "taskNumber", "triggerId", "warningEnumString", "workflowId", "workflowName"]

    @field_validator('enum_filter_type')
    def enum_filter_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['DEFAULT_INCLUSIVE', 'EXCLUSIVE']):
            raise ValueError("must be one of enum values ('DEFAULT_INCLUSIVE', 'EXCLUSIVE')")
        return value

    @field_validator('retry_attempt')
    def retry_attempt_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['UNSPECIFIED', 'FINAL', 'RETRYABLE', 'CANCELED']):
            raise ValueError("must be one of enum values ('UNSPECIFIED', 'FINAL', 'RETRYABLE', 'CANCELED')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of EnterpriseCrmEventbusStatsDimensions from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of EnterpriseCrmEventbusStatsDimensions from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "clientId": obj.get("clientId"),
            "enumFilterType": obj.get("enumFilterType"),
            "errorEnumString": obj.get("errorEnumString"),
            "retryAttempt": obj.get("retryAttempt"),
            "taskName": obj.get("taskName"),
            "taskNumber": obj.get("taskNumber"),
            "triggerId": obj.get("triggerId"),
            "warningEnumString": obj.get("warningEnumString"),
            "workflowId": obj.get("workflowId"),
            "workflowName": obj.get("workflowName")
        })
        return _obj



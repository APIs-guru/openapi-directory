# coding: utf-8

"""
    Application Integration API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v1alpha
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_cloud_integrations_v1alpha_access_token import GoogleCloudIntegrationsV1alphaAccessToken
from openapi_client.models.google_cloud_integrations_v1alpha_parameter_map import GoogleCloudIntegrationsV1alphaParameterMap
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudIntegrationsV1alphaOAuth2ClientCredentials(BaseModel):
    """
    For client credentials grant, the client sends a POST request with grant_type as 'client_credentials' to the authorization server. The authorization server will respond with a JSON object containing the access token.
    """ # noqa: E501
    access_token: Optional[GoogleCloudIntegrationsV1alphaAccessToken] = Field(default=None, alias="accessToken")
    client_id: Optional[StrictStr] = Field(default=None, description="The client's ID.", alias="clientId")
    client_secret: Optional[StrictStr] = Field(default=None, description="The client's secret.", alias="clientSecret")
    request_type: Optional[StrictStr] = Field(default=None, description="Represent how to pass parameters to fetch access token", alias="requestType")
    scope: Optional[StrictStr] = Field(default=None, description="A space-delimited list of requested scope permissions.")
    token_endpoint: Optional[StrictStr] = Field(default=None, description="The token endpoint is used by the client to obtain an access token by presenting its authorization grant or refresh token.", alias="tokenEndpoint")
    token_params: Optional[GoogleCloudIntegrationsV1alphaParameterMap] = Field(default=None, alias="tokenParams")
    __properties: ClassVar[List[str]] = ["accessToken", "clientId", "clientSecret", "requestType", "scope", "tokenEndpoint", "tokenParams"]

    @field_validator('request_type')
    def request_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['REQUEST_TYPE_UNSPECIFIED', 'REQUEST_BODY', 'QUERY_PARAMETERS', 'ENCODED_HEADER']):
            raise ValueError("must be one of enum values ('REQUEST_TYPE_UNSPECIFIED', 'REQUEST_BODY', 'QUERY_PARAMETERS', 'ENCODED_HEADER')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudIntegrationsV1alphaOAuth2ClientCredentials from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of access_token
        if self.access_token:
            _dict['accessToken'] = self.access_token.to_dict()
        # override the default output from pydantic by calling `to_dict()` of token_params
        if self.token_params:
            _dict['tokenParams'] = self.token_params.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudIntegrationsV1alphaOAuth2ClientCredentials from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "accessToken": GoogleCloudIntegrationsV1alphaAccessToken.from_dict(obj["accessToken"]) if obj.get("accessToken") is not None else None,
            "clientId": obj.get("clientId"),
            "clientSecret": obj.get("clientSecret"),
            "requestType": obj.get("requestType"),
            "scope": obj.get("scope"),
            "tokenEndpoint": obj.get("tokenEndpoint"),
            "tokenParams": GoogleCloudIntegrationsV1alphaParameterMap.from_dict(obj["tokenParams"]) if obj.get("tokenParams") is not None else None
        })
        return _obj



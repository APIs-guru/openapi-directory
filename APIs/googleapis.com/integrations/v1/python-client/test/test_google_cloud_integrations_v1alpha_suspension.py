# coding: utf-8

"""
    Application Integration API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.google_cloud_integrations_v1alpha_suspension import GoogleCloudIntegrationsV1alphaSuspension

class TestGoogleCloudIntegrationsV1alphaSuspension(unittest.TestCase):
    """GoogleCloudIntegrationsV1alphaSuspension unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> GoogleCloudIntegrationsV1alphaSuspension:
        """Test GoogleCloudIntegrationsV1alphaSuspension
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `GoogleCloudIntegrationsV1alphaSuspension`
        """
        model = GoogleCloudIntegrationsV1alphaSuspension()
        if include_optional:
            return GoogleCloudIntegrationsV1alphaSuspension(
                approval_config = openapi_client.models.google_cloud_integrations_v1alpha_suspension_approval_config.GoogleCloudIntegrationsV1alphaSuspensionApprovalConfig(
                    custom_message = '', 
                    email_addresses = [
                        ''
                        ], 
                    expiration = openapi_client.models.google_cloud_integrations_v1alpha_suspension_approval_expiration.GoogleCloudIntegrationsV1alphaSuspensionApprovalExpiration(
                        expire_time = '', 
                        lift_when_expired = True, 
                        remind_time = '', ), ),
                audit = openapi_client.models.google_cloud_integrations_v1alpha_suspension_audit.GoogleCloudIntegrationsV1alphaSuspensionAudit(
                    resolve_time = '', 
                    resolver = '', ),
                create_time = '',
                event_execution_info_id = '',
                integration = '',
                last_modify_time = '',
                name = '',
                state = 'RESOLUTION_STATE_UNSPECIFIED',
                suspension_config = openapi_client.models.enterprise_crm_eventbus_proto_suspension_config.EnterpriseCrmEventbusProtoSuspensionConfig(
                    custom_message = '', 
                    notifications = [
                        openapi_client.models.enterprise_crm_eventbus_proto_notification.EnterpriseCrmEventbusProtoNotification(
                            buganizer_notification = openapi_client.models.enterprise_crm_eventbus_proto_buganizer_notification.EnterpriseCrmEventbusProtoBuganizerNotification(
                                assignee_email_address = '', 
                                component_id = '', 
                                template_id = '', 
                                title = '', ), 
                            email_address = openapi_client.models.enterprise_crm_eventbus_proto_address.EnterpriseCrmEventbusProtoAddress(
                                email = '', 
                                name = '', 
                                tokens = [
                                    openapi_client.models.enterprise_crm_eventbus_proto_token.EnterpriseCrmEventbusProtoToken(
                                        name = '', 
                                        value = '', )
                                    ], ), 
                            escalator_queue = '', 
                            pubsub_topic = '', 
                            request = openapi_client.models.enterprise_crm_eventbus_proto_custom_suspension_request.EnterpriseCrmEventbusProtoCustomSuspensionRequest(
                                post_to_queue_with_trigger_id_request = openapi_client.models.google_internal_cloud_crm_eventbus_v3_post_to_queue_with_trigger_id_request.GoogleInternalCloudCrmEventbusV3PostToQueueWithTriggerIdRequest(
                                    client_id = '', 
                                    ignore_error_if_no_active_workflow = True, 
                                    parameters = openapi_client.models.enterprise_crm_eventbus_proto_event_parameters.EnterpriseCrmEventbusProtoEventParameters(), 
                                    priority = 'UNSPCIFIED', 
                                    request_id = '', 
                                    resource_name = '', 
                                    scheduled_time = '', 
                                    test_mode = True, 
                                    trigger_id = '', 
                                    workflow_name = '', ), 
                                suspension_info_event_parameter_key = '', ), )
                        ], 
                    suspension_expiration = openapi_client.models.enterprise_crm_eventbus_proto_suspension_expiration.EnterpriseCrmEventbusProtoSuspensionExpiration(
                        expire_after_ms = 56, 
                        lift_when_expired = True, 
                        remind_after_ms = 56, ), 
                    who_may_resolve = [
                        openapi_client.models.enterprise_crm_eventbus_proto_suspension_auth_permissions.EnterpriseCrmEventbusProtoSuspensionAuthPermissions(
                            gaia_identity = openapi_client.models.enterprise_crm_eventbus_proto_suspension_auth_permissions_gaia_identity.EnterpriseCrmEventbusProtoSuspensionAuthPermissionsGaiaIdentity(
                                gaia_id = '', ), 
                            google_group = openapi_client.models.enterprise_crm_eventbus_proto_suspension_auth_permissions_gaia_identity.EnterpriseCrmEventbusProtoSuspensionAuthPermissionsGaiaIdentity(
                                gaia_id = '', ), 
                            loas_role = '', 
                            mdb_group = '', )
                        ], ),
                task_id = ''
            )
        else:
            return GoogleCloudIntegrationsV1alphaSuspension(
        )
        """

    def testGoogleCloudIntegrationsV1alphaSuspension(self):
        """Test GoogleCloudIntegrationsV1alphaSuspension"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

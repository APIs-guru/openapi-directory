# coding: utf-8

"""
    Application Integration API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.google_cloud_connectors_v1_auth_config import GoogleCloudConnectorsV1AuthConfig

class TestGoogleCloudConnectorsV1AuthConfig(unittest.TestCase):
    """GoogleCloudConnectorsV1AuthConfig unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> GoogleCloudConnectorsV1AuthConfig:
        """Test GoogleCloudConnectorsV1AuthConfig
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `GoogleCloudConnectorsV1AuthConfig`
        """
        model = GoogleCloudConnectorsV1AuthConfig()
        if include_optional:
            return GoogleCloudConnectorsV1AuthConfig(
                additional_variables = [
                    openapi_client.models.google_cloud_connectors_v1_config_variable.GoogleCloudConnectorsV1ConfigVariable(
                        bool_value = True, 
                        encryption_key_value = openapi_client.models.google_cloud_connectors_v1_encryption_key.GoogleCloudConnectorsV1EncryptionKey(
                            kms_key_name = '', 
                            type = 'TYPE_UNSPECIFIED', ), 
                        int_value = '', 
                        key = '', 
                        secret_value = openapi_client.models.google_cloud_connectors_v1_secret.GoogleCloudConnectorsV1Secret(
                            secret_version = '', ), 
                        string_value = '', )
                    ],
                auth_key = '',
                auth_type = 'AUTH_TYPE_UNSPECIFIED',
                oauth2_auth_code_flow = openapi_client.models.google_cloud_connectors_v1_auth_config_oauth2_auth_code_flow.GoogleCloudConnectorsV1AuthConfigOauth2AuthCodeFlow(
                    auth_code = '', 
                    auth_uri = '', 
                    client_id = '', 
                    client_secret = openapi_client.models.google_cloud_connectors_v1_secret.GoogleCloudConnectorsV1Secret(
                        secret_version = '', ), 
                    enable_pkce = True, 
                    pkce_verifier = '', 
                    redirect_uri = '', 
                    scopes = [
                        ''
                        ], ),
                oauth2_client_credentials = openapi_client.models.google_cloud_connectors_v1_auth_config_oauth2_client_credentials.GoogleCloudConnectorsV1AuthConfigOauth2ClientCredentials(
                    client_id = '', 
                    client_secret = openapi_client.models.google_cloud_connectors_v1_secret.GoogleCloudConnectorsV1Secret(
                        secret_version = '', ), ),
                oauth2_jwt_bearer = openapi_client.models.google_cloud_connectors_v1_auth_config_oauth2_jwt_bearer.GoogleCloudConnectorsV1AuthConfigOauth2JwtBearer(
                    client_key = openapi_client.models.google_cloud_connectors_v1_secret.GoogleCloudConnectorsV1Secret(
                        secret_version = '', ), 
                    jwt_claims = openapi_client.models.google_cloud_connectors_v1_auth_config_oauth2_jwt_bearer_jwt_claims.GoogleCloudConnectorsV1AuthConfigOauth2JwtBearerJwtClaims(
                        audience = '', 
                        issuer = '', 
                        subject = '', ), ),
                ssh_public_key = openapi_client.models.google_cloud_connectors_v1_auth_config_ssh_public_key.GoogleCloudConnectorsV1AuthConfigSshPublicKey(
                    cert_type = '', 
                    ssh_client_cert = openapi_client.models.google_cloud_connectors_v1_secret.GoogleCloudConnectorsV1Secret(
                        secret_version = '', ), 
                    ssh_client_cert_pass = openapi_client.models.google_cloud_connectors_v1_secret.GoogleCloudConnectorsV1Secret(
                        secret_version = '', ), 
                    username = '', ),
                user_password = openapi_client.models.google_cloud_connectors_v1_auth_config_user_password.GoogleCloudConnectorsV1AuthConfigUserPassword(
                    password = openapi_client.models.google_cloud_connectors_v1_secret.GoogleCloudConnectorsV1Secret(
                        secret_version = '', ), 
                    username = '', )
            )
        else:
            return GoogleCloudConnectorsV1AuthConfig(
        )
        """

    def testGoogleCloudConnectorsV1AuthConfig(self):
        """Test GoogleCloudConnectorsV1AuthConfig"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

# coding: utf-8

"""
    Application Integration API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class EnterpriseCrmEventbusProtoCloudKmsConfig(BaseModel):
    """
    EnterpriseCrmEventbusProtoCloudKmsConfig
    """ # noqa: E501
    gcp_project_id: Optional[StrictStr] = Field(default=None, description="Optional. The id of GCP project where the KMS key is stored. If not provided, assume the key is stored in the same GCP project defined in Client (tag 14).", alias="gcpProjectId")
    key_name: Optional[StrictStr] = Field(default=None, description="A Cloud KMS key is a named object containing one or more key versions, along with metadata for the key. A key exists on exactly one key ring tied to a specific location.", alias="keyName")
    key_ring_name: Optional[StrictStr] = Field(default=None, description="A key ring organizes keys in a specific Google Cloud location and allows you to manage access control on groups of keys. A key ring's name does not need to be unique across a Google Cloud project, but must be unique within a given location.", alias="keyRingName")
    key_version_name: Optional[StrictStr] = Field(default=None, description="Optional. Each version of a key contains key material used for encryption or signing. A key's version is represented by an integer, starting at 1. To decrypt data or verify a signature, you must use the same key version that was used to encrypt or sign the data.", alias="keyVersionName")
    location_name: Optional[StrictStr] = Field(default=None, description="Location name of the key ring, e.g. \"us-west1\".", alias="locationName")
    service_account: Optional[StrictStr] = Field(default=None, description="Optional. The service account used for authentication of this KMS key. If this is not provided, the service account in Client.clientSource will be used.", alias="serviceAccount")
    __properties: ClassVar[List[str]] = ["gcpProjectId", "keyName", "keyRingName", "keyVersionName", "locationName", "serviceAccount"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of EnterpriseCrmEventbusProtoCloudKmsConfig from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of EnterpriseCrmEventbusProtoCloudKmsConfig from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "gcpProjectId": obj.get("gcpProjectId"),
            "keyName": obj.get("keyName"),
            "keyRingName": obj.get("keyRingName"),
            "keyVersionName": obj.get("keyVersionName"),
            "locationName": obj.get("locationName"),
            "serviceAccount": obj.get("serviceAccount")
        })
        return _obj



# coding: utf-8

"""
    Application Integration API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.enterprise_crm_eventbus_proto_teardown import EnterpriseCrmEventbusProtoTeardown
from openapi_client.models.enterprise_crm_frontends_eventbus_proto_task_config import EnterpriseCrmFrontendsEventbusProtoTaskConfig
from openapi_client.models.enterprise_crm_frontends_eventbus_proto_trigger_config import EnterpriseCrmFrontendsEventbusProtoTriggerConfig
from openapi_client.models.enterprise_crm_frontends_eventbus_proto_workflow_parameters import EnterpriseCrmFrontendsEventbusProtoWorkflowParameters
from openapi_client.models.google_cloud_integrations_v1alpha_error_catcher_config import GoogleCloudIntegrationsV1alphaErrorCatcherConfig
from openapi_client.models.google_cloud_integrations_v1alpha_integration_parameter import GoogleCloudIntegrationsV1alphaIntegrationParameter
from openapi_client.models.google_cloud_integrations_v1alpha_task_config import GoogleCloudIntegrationsV1alphaTaskConfig
from openapi_client.models.google_cloud_integrations_v1alpha_trigger_config import GoogleCloudIntegrationsV1alphaTriggerConfig
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudIntegrationsV1alphaIntegrationVersion(BaseModel):
    """
    The integration version definition.
    """ # noqa: E501
    create_time: Optional[StrictStr] = Field(default=None, description="Output only. Auto-generated.", alias="createTime")
    database_persistence_policy: Optional[StrictStr] = Field(default=None, description="Optional. Flag to disable database persistence for execution data, including event execution info, execution export info, execution metadata index and execution param index.", alias="databasePersistencePolicy")
    description: Optional[StrictStr] = Field(default=None, description="Optional. The integration description.")
    error_catcher_configs: Optional[List[GoogleCloudIntegrationsV1alphaErrorCatcherConfig]] = Field(default=None, description="Optional. Error Catch Task configuration for the integration. It's optional.", alias="errorCatcherConfigs")
    integration_parameters: Optional[List[GoogleCloudIntegrationsV1alphaIntegrationParameter]] = Field(default=None, description="Optional. Parameters that are expected to be passed to the integration when an event is triggered. This consists of all the parameters that are expected in the integration execution. This gives the user the ability to provide default values, add information like PII and also provide data types of each parameter.", alias="integrationParameters")
    integration_parameters_internal: Optional[EnterpriseCrmFrontendsEventbusProtoWorkflowParameters] = Field(default=None, alias="integrationParametersInternal")
    last_modifier_email: Optional[StrictStr] = Field(default=None, description="Optional. The last modifier's email address. Generated based on the End User Credentials/LOAS role of the user making the call.", alias="lastModifierEmail")
    lock_holder: Optional[StrictStr] = Field(default=None, description="Optional. The edit lock holder's email address. Generated based on the End User Credentials/LOAS role of the user making the call.", alias="lockHolder")
    name: Optional[StrictStr] = Field(default=None, description="Output only. Auto-generated primary key.")
    origin: Optional[StrictStr] = Field(default=None, description="Optional. The origin that indicates where this integration is coming from.")
    parent_template_id: Optional[StrictStr] = Field(default=None, description="Optional. The id of the template which was used to create this integration_version.", alias="parentTemplateId")
    run_as_service_account: Optional[StrictStr] = Field(default=None, description="Optional. The run-as service account email, if set and auth config is not configured, that will be used to generate auth token to be used in Connector task, Rest caller task and Cloud function task.", alias="runAsServiceAccount")
    snapshot_number: Optional[StrictStr] = Field(default=None, description="Optional. An increasing sequence that is set when a new snapshot is created. The last created snapshot can be identified by [workflow_name, org_id latest(snapshot_number)]. However, last created snapshot need not be same as the HEAD. So users should always use \"HEAD\" tag to identify the head.", alias="snapshotNumber")
    state: Optional[StrictStr] = Field(default=None, description="Output only. User should not set it as an input.")
    status: Optional[StrictStr] = Field(default=None, description="Output only. Generated by eventbus. User should not set it as an input.")
    task_configs: Optional[List[GoogleCloudIntegrationsV1alphaTaskConfig]] = Field(default=None, description="Optional. Task configuration for the integration. It's optional, but the integration doesn't do anything without task_configs.", alias="taskConfigs")
    task_configs_internal: Optional[List[EnterpriseCrmFrontendsEventbusProtoTaskConfig]] = Field(default=None, description="Optional. Task configuration for the integration. It's optional, but the integration doesn't do anything without task_configs.", alias="taskConfigsInternal")
    teardown: Optional[EnterpriseCrmEventbusProtoTeardown] = None
    trigger_configs: Optional[List[GoogleCloudIntegrationsV1alphaTriggerConfig]] = Field(default=None, description="Optional. Trigger configurations.", alias="triggerConfigs")
    trigger_configs_internal: Optional[List[EnterpriseCrmFrontendsEventbusProtoTriggerConfig]] = Field(default=None, description="Optional. Trigger configurations.", alias="triggerConfigsInternal")
    update_time: Optional[StrictStr] = Field(default=None, description="Output only. Auto-generated.", alias="updateTime")
    user_label: Optional[StrictStr] = Field(default=None, description="Optional. A user-defined label that annotates an integration version. Typically, this is only set when the integration version is created.", alias="userLabel")
    __properties: ClassVar[List[str]] = ["createTime", "databasePersistencePolicy", "description", "errorCatcherConfigs", "integrationParameters", "integrationParametersInternal", "lastModifierEmail", "lockHolder", "name", "origin", "parentTemplateId", "runAsServiceAccount", "snapshotNumber", "state", "status", "taskConfigs", "taskConfigsInternal", "teardown", "triggerConfigs", "triggerConfigsInternal", "updateTime", "userLabel"]

    @field_validator('database_persistence_policy')
    def database_persistence_policy_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['DATABASE_PERSISTENCE_POLICY_UNSPECIFIED', 'DATABASE_PERSISTENCE_DISABLED']):
            raise ValueError("must be one of enum values ('DATABASE_PERSISTENCE_POLICY_UNSPECIFIED', 'DATABASE_PERSISTENCE_DISABLED')")
        return value

    @field_validator('origin')
    def origin_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['UNSPECIFIED', 'UI', 'PIPER_V2', 'PIPER_V3', 'APPLICATION_IP_PROVISIONING']):
            raise ValueError("must be one of enum values ('UNSPECIFIED', 'UI', 'PIPER_V2', 'PIPER_V3', 'APPLICATION_IP_PROVISIONING')")
        return value

    @field_validator('state')
    def state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['INTEGRATION_STATE_UNSPECIFIED', 'DRAFT', 'ACTIVE', 'ARCHIVED', 'SNAPSHOT']):
            raise ValueError("must be one of enum values ('INTEGRATION_STATE_UNSPECIFIED', 'DRAFT', 'ACTIVE', 'ARCHIVED', 'SNAPSHOT')")
        return value

    @field_validator('status')
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['UNKNOWN', 'DRAFT', 'ACTIVE', 'ARCHIVED', 'SNAPSHOT']):
            raise ValueError("must be one of enum values ('UNKNOWN', 'DRAFT', 'ACTIVE', 'ARCHIVED', 'SNAPSHOT')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudIntegrationsV1alphaIntegrationVersion from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "create_time",
            "name",
            "state",
            "status",
            "update_time",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in error_catcher_configs (list)
        _items = []
        if self.error_catcher_configs:
            for _item_error_catcher_configs in self.error_catcher_configs:
                if _item_error_catcher_configs:
                    _items.append(_item_error_catcher_configs.to_dict())
            _dict['errorCatcherConfigs'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in integration_parameters (list)
        _items = []
        if self.integration_parameters:
            for _item_integration_parameters in self.integration_parameters:
                if _item_integration_parameters:
                    _items.append(_item_integration_parameters.to_dict())
            _dict['integrationParameters'] = _items
        # override the default output from pydantic by calling `to_dict()` of integration_parameters_internal
        if self.integration_parameters_internal:
            _dict['integrationParametersInternal'] = self.integration_parameters_internal.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in task_configs (list)
        _items = []
        if self.task_configs:
            for _item_task_configs in self.task_configs:
                if _item_task_configs:
                    _items.append(_item_task_configs.to_dict())
            _dict['taskConfigs'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in task_configs_internal (list)
        _items = []
        if self.task_configs_internal:
            for _item_task_configs_internal in self.task_configs_internal:
                if _item_task_configs_internal:
                    _items.append(_item_task_configs_internal.to_dict())
            _dict['taskConfigsInternal'] = _items
        # override the default output from pydantic by calling `to_dict()` of teardown
        if self.teardown:
            _dict['teardown'] = self.teardown.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in trigger_configs (list)
        _items = []
        if self.trigger_configs:
            for _item_trigger_configs in self.trigger_configs:
                if _item_trigger_configs:
                    _items.append(_item_trigger_configs.to_dict())
            _dict['triggerConfigs'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in trigger_configs_internal (list)
        _items = []
        if self.trigger_configs_internal:
            for _item_trigger_configs_internal in self.trigger_configs_internal:
                if _item_trigger_configs_internal:
                    _items.append(_item_trigger_configs_internal.to_dict())
            _dict['triggerConfigsInternal'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudIntegrationsV1alphaIntegrationVersion from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "createTime": obj.get("createTime"),
            "databasePersistencePolicy": obj.get("databasePersistencePolicy"),
            "description": obj.get("description"),
            "errorCatcherConfigs": [GoogleCloudIntegrationsV1alphaErrorCatcherConfig.from_dict(_item) for _item in obj["errorCatcherConfigs"]] if obj.get("errorCatcherConfigs") is not None else None,
            "integrationParameters": [GoogleCloudIntegrationsV1alphaIntegrationParameter.from_dict(_item) for _item in obj["integrationParameters"]] if obj.get("integrationParameters") is not None else None,
            "integrationParametersInternal": EnterpriseCrmFrontendsEventbusProtoWorkflowParameters.from_dict(obj["integrationParametersInternal"]) if obj.get("integrationParametersInternal") is not None else None,
            "lastModifierEmail": obj.get("lastModifierEmail"),
            "lockHolder": obj.get("lockHolder"),
            "name": obj.get("name"),
            "origin": obj.get("origin"),
            "parentTemplateId": obj.get("parentTemplateId"),
            "runAsServiceAccount": obj.get("runAsServiceAccount"),
            "snapshotNumber": obj.get("snapshotNumber"),
            "state": obj.get("state"),
            "status": obj.get("status"),
            "taskConfigs": [GoogleCloudIntegrationsV1alphaTaskConfig.from_dict(_item) for _item in obj["taskConfigs"]] if obj.get("taskConfigs") is not None else None,
            "taskConfigsInternal": [EnterpriseCrmFrontendsEventbusProtoTaskConfig.from_dict(_item) for _item in obj["taskConfigsInternal"]] if obj.get("taskConfigsInternal") is not None else None,
            "teardown": EnterpriseCrmEventbusProtoTeardown.from_dict(obj["teardown"]) if obj.get("teardown") is not None else None,
            "triggerConfigs": [GoogleCloudIntegrationsV1alphaTriggerConfig.from_dict(_item) for _item in obj["triggerConfigs"]] if obj.get("triggerConfigs") is not None else None,
            "triggerConfigsInternal": [EnterpriseCrmFrontendsEventbusProtoTriggerConfig.from_dict(_item) for _item in obj["triggerConfigsInternal"]] if obj.get("triggerConfigsInternal") is not None else None,
            "updateTime": obj.get("updateTime"),
            "userLabel": obj.get("userLabel")
        })
        return _obj



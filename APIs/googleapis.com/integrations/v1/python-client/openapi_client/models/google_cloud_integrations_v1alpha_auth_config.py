# coding: utf-8

"""
    Application Integration API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBytes, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from openapi_client.models.google_cloud_integrations_v1alpha_credential import GoogleCloudIntegrationsV1alphaCredential
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudIntegrationsV1alphaAuthConfig(BaseModel):
    """
    The AuthConfig resource use to hold channels and connection config data.
    """ # noqa: E501
    certificate_id: Optional[StrictStr] = Field(default=None, description="Certificate id for client certificate", alias="certificateId")
    create_time: Optional[StrictStr] = Field(default=None, description="Output only. The timestamp when the auth config is created.", alias="createTime")
    creator_email: Optional[StrictStr] = Field(default=None, description="The creator's email address. Generated based on the End User Credentials/LOAS role of the user making the call.", alias="creatorEmail")
    credential_type: Optional[StrictStr] = Field(default=None, description="Credential type of the encrypted credential.", alias="credentialType")
    decrypted_credential: Optional[GoogleCloudIntegrationsV1alphaCredential] = Field(default=None, alias="decryptedCredential")
    description: Optional[StrictStr] = Field(default=None, description="A description of the auth config.")
    display_name: Optional[StrictStr] = Field(default=None, description="The name of the auth config.", alias="displayName")
    encrypted_credential: Optional[Union[StrictBytes, StrictStr]] = Field(default=None, description="Auth credential encrypted by Cloud KMS. Can be decrypted as Credential with proper KMS key.", alias="encryptedCredential")
    expiry_notification_duration: Optional[List[StrictStr]] = Field(default=None, description="User can define the time to receive notification after which the auth config becomes invalid. Support up to 30 days. Support granularity in hours.", alias="expiryNotificationDuration")
    last_modifier_email: Optional[StrictStr] = Field(default=None, description="The last modifier's email address. Generated based on the End User Credentials/LOAS role of the user making the call.", alias="lastModifierEmail")
    name: Optional[StrictStr] = Field(default=None, description="Resource name of the SFDC instance projects/{project}/locations/{location}/authConfigs/{authConfig}.")
    override_valid_time: Optional[StrictStr] = Field(default=None, description="User provided expiry time to override. For the example of Salesforce, username/password credentials can be valid for 6 months depending on the instance settings.", alias="overrideValidTime")
    reason: Optional[StrictStr] = Field(default=None, description="The reason / details of the current status.")
    state: Optional[StrictStr] = Field(default=None, description="The status of the auth config.")
    update_time: Optional[StrictStr] = Field(default=None, description="Output only. The timestamp when the auth config is modified.", alias="updateTime")
    valid_time: Optional[StrictStr] = Field(default=None, description="The time until the auth config is valid. Empty or max value is considered the auth config won't expire.", alias="validTime")
    visibility: Optional[StrictStr] = Field(default=None, description="The visibility of the auth config.")
    __properties: ClassVar[List[str]] = ["certificateId", "createTime", "creatorEmail", "credentialType", "decryptedCredential", "description", "displayName", "encryptedCredential", "expiryNotificationDuration", "lastModifierEmail", "name", "overrideValidTime", "reason", "state", "updateTime", "validTime", "visibility"]

    @field_validator('credential_type')
    def credential_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['CREDENTIAL_TYPE_UNSPECIFIED', 'USERNAME_AND_PASSWORD', 'API_KEY', 'OAUTH2_AUTHORIZATION_CODE', 'OAUTH2_IMPLICIT', 'OAUTH2_CLIENT_CREDENTIALS', 'OAUTH2_RESOURCE_OWNER_CREDENTIALS', 'JWT', 'AUTH_TOKEN', 'SERVICE_ACCOUNT', 'CLIENT_CERTIFICATE_ONLY', 'OIDC_TOKEN']):
            raise ValueError("must be one of enum values ('CREDENTIAL_TYPE_UNSPECIFIED', 'USERNAME_AND_PASSWORD', 'API_KEY', 'OAUTH2_AUTHORIZATION_CODE', 'OAUTH2_IMPLICIT', 'OAUTH2_CLIENT_CREDENTIALS', 'OAUTH2_RESOURCE_OWNER_CREDENTIALS', 'JWT', 'AUTH_TOKEN', 'SERVICE_ACCOUNT', 'CLIENT_CERTIFICATE_ONLY', 'OIDC_TOKEN')")
        return value

    @field_validator('state')
    def state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['STATE_UNSPECIFIED', 'VALID', 'INVALID', 'SOFT_DELETED', 'EXPIRED', 'UNAUTHORIZED', 'UNSUPPORTED']):
            raise ValueError("must be one of enum values ('STATE_UNSPECIFIED', 'VALID', 'INVALID', 'SOFT_DELETED', 'EXPIRED', 'UNAUTHORIZED', 'UNSUPPORTED')")
        return value

    @field_validator('visibility')
    def visibility_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['AUTH_CONFIG_VISIBILITY_UNSPECIFIED', 'PRIVATE', 'CLIENT_VISIBLE']):
            raise ValueError("must be one of enum values ('AUTH_CONFIG_VISIBILITY_UNSPECIFIED', 'PRIVATE', 'CLIENT_VISIBLE')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudIntegrationsV1alphaAuthConfig from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "create_time",
            "update_time",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of decrypted_credential
        if self.decrypted_credential:
            _dict['decryptedCredential'] = self.decrypted_credential.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudIntegrationsV1alphaAuthConfig from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "certificateId": obj.get("certificateId"),
            "createTime": obj.get("createTime"),
            "creatorEmail": obj.get("creatorEmail"),
            "credentialType": obj.get("credentialType"),
            "decryptedCredential": GoogleCloudIntegrationsV1alphaCredential.from_dict(obj["decryptedCredential"]) if obj.get("decryptedCredential") is not None else None,
            "description": obj.get("description"),
            "displayName": obj.get("displayName"),
            "encryptedCredential": obj.get("encryptedCredential"),
            "expiryNotificationDuration": obj.get("expiryNotificationDuration"),
            "lastModifierEmail": obj.get("lastModifierEmail"),
            "name": obj.get("name"),
            "overrideValidTime": obj.get("overrideValidTime"),
            "reason": obj.get("reason"),
            "state": obj.get("state"),
            "updateTime": obj.get("updateTime"),
            "validTime": obj.get("validTime"),
            "visibility": obj.get("visibility")
        })
        return _obj



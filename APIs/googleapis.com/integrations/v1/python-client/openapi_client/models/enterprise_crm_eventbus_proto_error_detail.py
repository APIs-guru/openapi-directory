# coding: utf-8

"""
    Application Integration API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.crmlog_error_code import CrmlogErrorCode
from typing import Optional, Set
from typing_extensions import Self

class EnterpriseCrmEventbusProtoErrorDetail(BaseModel):
    """
    An error, warning, or information message associated with a workflow.
    """ # noqa: E501
    error_code: Optional[CrmlogErrorCode] = Field(default=None, alias="errorCode")
    error_message: Optional[StrictStr] = Field(default=None, description="The full text of the error message, including any parameters that were thrown along with the exception.", alias="errorMessage")
    severity: Optional[StrictStr] = Field(default=None, description="The severity of the error: ERROR|WARN|INFO.")
    task_number: Optional[StrictInt] = Field(default=None, description="The task try-number, in which, the error occurred. If zero, the error happened at the event level.", alias="taskNumber")
    __properties: ClassVar[List[str]] = ["errorCode", "errorMessage", "severity", "taskNumber"]

    @field_validator('severity')
    def severity_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['SEVERITY_UNSPECIFIED', 'ERROR', 'WARN', 'INFO']):
            raise ValueError("must be one of enum values ('SEVERITY_UNSPECIFIED', 'ERROR', 'WARN', 'INFO')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of EnterpriseCrmEventbusProtoErrorDetail from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of error_code
        if self.error_code:
            _dict['errorCode'] = self.error_code.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of EnterpriseCrmEventbusProtoErrorDetail from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "errorCode": CrmlogErrorCode.from_dict(obj["errorCode"]) if obj.get("errorCode") is not None else None,
            "errorMessage": obj.get("errorMessage"),
            "severity": obj.get("severity"),
            "taskNumber": obj.get("taskNumber")
        })
        return _obj



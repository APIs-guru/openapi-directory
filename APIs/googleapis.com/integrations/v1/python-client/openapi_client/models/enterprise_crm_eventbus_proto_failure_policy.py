# coding: utf-8

"""
    Application Integration API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class EnterpriseCrmEventbusProtoFailurePolicy(BaseModel):
    """
    Policy that defines the task retry logic and failure type. If no FailurePolicy is defined for a task, all its dependent tasks will not be executed (i.e, a `retry_strategy` of NONE will be applied).
    """ # noqa: E501
    interval_in_seconds: Optional[StrictStr] = Field(default=None, description="Required if retry_strategy is FIXED_INTERVAL or LINEAR/EXPONENTIAL_BACKOFF/RESTART_WORKFLOW_WITH_BACKOFF. Defines the initial interval for backoff.", alias="intervalInSeconds")
    max_num_retries: Optional[StrictInt] = Field(default=None, description="Required if retry_strategy is FIXED_INTERVAL or LINEAR/EXPONENTIAL_BACKOFF/RESTART_WORKFLOW_WITH_BACKOFF. Defines the number of times the task will be retried if failed.", alias="maxNumRetries")
    retry_strategy: Optional[StrictStr] = Field(default=None, description="Defines what happens to the task upon failure.", alias="retryStrategy")
    __properties: ClassVar[List[str]] = ["intervalInSeconds", "maxNumRetries", "retryStrategy"]

    @field_validator('retry_strategy')
    def retry_strategy_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['UNSPECIFIED', 'IGNORE', 'NONE', 'FATAL', 'FIXED_INTERVAL', 'LINEAR_BACKOFF', 'EXPONENTIAL_BACKOFF', 'RESTART_WORKFLOW_WITH_BACKOFF']):
            raise ValueError("must be one of enum values ('UNSPECIFIED', 'IGNORE', 'NONE', 'FATAL', 'FIXED_INTERVAL', 'LINEAR_BACKOFF', 'EXPONENTIAL_BACKOFF', 'RESTART_WORKFLOW_WITH_BACKOFF')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of EnterpriseCrmEventbusProtoFailurePolicy from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of EnterpriseCrmEventbusProtoFailurePolicy from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "intervalInSeconds": obj.get("intervalInSeconds"),
            "maxNumRetries": obj.get("maxNumRetries"),
            "retryStrategy": obj.get("retryStrategy")
        })
        return _obj



# coding: utf-8

"""
    Application Integration API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.enterprise_crm_eventbus_proto_parameter_entry import EnterpriseCrmEventbusProtoParameterEntry
from openapi_client.models.enterprise_crm_eventbus_proto_parameter_value_type import EnterpriseCrmEventbusProtoParameterValueType
from typing import Optional, Set
from typing_extensions import Self

class EnterpriseCrmEventbusProtoScatterResponse(BaseModel):
    """
    EnterpriseCrmEventbusProtoScatterResponse
    """ # noqa: E501
    error_msg: Optional[StrictStr] = Field(default=None, description="The error message of the failure if applicable.", alias="errorMsg")
    execution_ids: Optional[List[StrictStr]] = Field(default=None, description="The execution ids of each Subworkflow fired by this scatter.", alias="executionIds")
    is_successful: Optional[StrictBool] = Field(default=None, description="If execution is sync, this is true if the execution passed and false if it failed. If the execution is async, this is true if the WF was fired off successfully, and false if it failed to execute. The success or failure of the subworkflows executed are not captured.", alias="isSuccessful")
    response_params: Optional[List[EnterpriseCrmEventbusProtoParameterEntry]] = Field(default=None, description="A list of all the response parameters in the aggregtorMap stored with the remapped key.", alias="responseParams")
    scatter_element: Optional[EnterpriseCrmEventbusProtoParameterValueType] = Field(default=None, alias="scatterElement")
    __properties: ClassVar[List[str]] = ["errorMsg", "executionIds", "isSuccessful", "responseParams", "scatterElement"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of EnterpriseCrmEventbusProtoScatterResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in response_params (list)
        _items = []
        if self.response_params:
            for _item_response_params in self.response_params:
                if _item_response_params:
                    _items.append(_item_response_params.to_dict())
            _dict['responseParams'] = _items
        # override the default output from pydantic by calling `to_dict()` of scatter_element
        if self.scatter_element:
            _dict['scatterElement'] = self.scatter_element.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of EnterpriseCrmEventbusProtoScatterResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "errorMsg": obj.get("errorMsg"),
            "executionIds": obj.get("executionIds"),
            "isSuccessful": obj.get("isSuccessful"),
            "responseParams": [EnterpriseCrmEventbusProtoParameterEntry.from_dict(_item) for _item in obj["responseParams"]] if obj.get("responseParams") is not None else None,
            "scatterElement": EnterpriseCrmEventbusProtoParameterValueType.from_dict(obj["scatterElement"]) if obj.get("scatterElement") is not None else None
        })
        return _obj



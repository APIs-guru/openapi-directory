# coding: utf-8

"""
    Application Integration API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.enterprise_crm_eventbus_proto_coordinate import EnterpriseCrmEventbusProtoCoordinate
from openapi_client.models.enterprise_crm_eventbus_proto_failure_policy import EnterpriseCrmEventbusProtoFailurePolicy
from openapi_client.models.enterprise_crm_eventbus_proto_next_task import EnterpriseCrmEventbusProtoNextTask
from openapi_client.models.enterprise_crm_eventbus_proto_success_policy import EnterpriseCrmEventbusProtoSuccessPolicy
from openapi_client.models.enterprise_crm_eventbus_proto_task_alert_config import EnterpriseCrmEventbusProtoTaskAlertConfig
from openapi_client.models.enterprise_crm_frontends_eventbus_proto_parameter_entry import EnterpriseCrmFrontendsEventbusProtoParameterEntry
from openapi_client.models.enterprise_crm_frontends_eventbus_proto_rollback_strategy import EnterpriseCrmFrontendsEventbusProtoRollbackStrategy
from openapi_client.models.enterprise_crm_frontends_eventbus_proto_task_entity import EnterpriseCrmFrontendsEventbusProtoTaskEntity
from typing import Optional, Set
from typing_extensions import Self

class EnterpriseCrmFrontendsEventbusProtoTaskConfig(BaseModel):
    """
    The task configuration details. This is not the implementation of Task. There might be multiple TaskConfigs for the same Task.
    """ # noqa: E501
    alert_configs: Optional[List[EnterpriseCrmEventbusProtoTaskAlertConfig]] = Field(default=None, description="Alert configurations on error rate, warning rate, number of runs, durations, etc.", alias="alertConfigs")
    create_time: Optional[StrictStr] = Field(default=None, description="Auto-generated.", alias="createTime")
    creator_email: Optional[StrictStr] = Field(default=None, description="The creator's email address. Auto-generated from the user's email.", alias="creatorEmail")
    description: Optional[StrictStr] = Field(default=None, description="User-provided description intended to give more business context about the task.")
    disable_strict_type_validation: Optional[StrictBool] = Field(default=None, description="If this config contains a TypedTask, allow validation to succeed if an input is read from the output of another TypedTask whose output type is declared as a superclass of the requested input type. For instance, if the previous task declares an output of type Message, any task with this flag enabled will pass validation when attempting to read any proto Message type from the resultant Event parameter.", alias="disableStrictTypeValidation")
    error_catcher_id: Optional[StrictStr] = Field(default=None, description="Optional Error catcher id of the error catch flow which will be executed when execution error happens in the task", alias="errorCatcherId")
    external_task_type: Optional[StrictStr] = Field(default=None, alias="externalTaskType")
    failure_policy: Optional[EnterpriseCrmEventbusProtoFailurePolicy] = Field(default=None, alias="failurePolicy")
    incoming_edge_count: Optional[StrictInt] = Field(default=None, description="The number of edges leading into this TaskConfig.", alias="incomingEdgeCount")
    json_validation_option: Optional[StrictStr] = Field(default=None, description="If set, overrides the option configured in the Task implementation class.", alias="jsonValidationOption")
    label: Optional[StrictStr] = Field(default=None, description="User-provided label that is attached to this TaskConfig in the UI.")
    last_modified_time: Optional[StrictStr] = Field(default=None, description="Auto-generated.", alias="lastModifiedTime")
    next_tasks: Optional[List[EnterpriseCrmEventbusProtoNextTask]] = Field(default=None, description="The set of tasks that are next in line to be executed as per the execution graph defined for the parent event, specified by `event_config_id`. Each of these next tasks are executed only if the condition associated with them evaluates to true.", alias="nextTasks")
    next_tasks_execution_policy: Optional[StrictStr] = Field(default=None, description="The policy dictating the execution of the next set of tasks for the current task.", alias="nextTasksExecutionPolicy")
    parameters: Optional[Dict[str, EnterpriseCrmFrontendsEventbusProtoParameterEntry]] = Field(default=None, description="The customized parameters the user can pass to this task.")
    position: Optional[EnterpriseCrmEventbusProtoCoordinate] = None
    precondition: Optional[StrictStr] = Field(default=None, description="Optional. Standard filter expression evaluated before execution. Independent of other conditions and tasks. Can be used to enable rollout. e.g. \"rollout(5)\" will only allow 5% of incoming traffic to task.")
    precondition_label: Optional[StrictStr] = Field(default=None, description="Optional. User-provided label that is attached to precondition in the UI.", alias="preconditionLabel")
    rollback_strategy: Optional[EnterpriseCrmFrontendsEventbusProtoRollbackStrategy] = Field(default=None, alias="rollbackStrategy")
    success_policy: Optional[EnterpriseCrmEventbusProtoSuccessPolicy] = Field(default=None, alias="successPolicy")
    synchronous_call_failure_policy: Optional[EnterpriseCrmEventbusProtoFailurePolicy] = Field(default=None, alias="synchronousCallFailurePolicy")
    task_entity: Optional[EnterpriseCrmFrontendsEventbusProtoTaskEntity] = Field(default=None, alias="taskEntity")
    task_execution_strategy: Optional[StrictStr] = Field(default=None, description="The policy dictating the execution strategy of this task.", alias="taskExecutionStrategy")
    task_name: Optional[StrictStr] = Field(default=None, description="The name for the task.", alias="taskName")
    task_number: Optional[StrictStr] = Field(default=None, description="REQUIRED: the identifier of this task within its parent event config, specified by the client. This should be unique among all the tasks belong to the same event config. We use this field as the identifier to find next tasks (via field `next_tasks.task_number`).", alias="taskNumber")
    task_spec: Optional[StrictStr] = Field(default=None, description="A string template that allows user to configure task parameters (with either literal default values or tokens which will be resolved at execution time) for the task. It will eventually replace the old \"parameters\" field.", alias="taskSpec")
    task_template_name: Optional[StrictStr] = Field(default=None, description="Used to define task-template name if task is of type task-template", alias="taskTemplateName")
    task_type: Optional[StrictStr] = Field(default=None, description="Defines the type of the task", alias="taskType")
    __properties: ClassVar[List[str]] = ["alertConfigs", "createTime", "creatorEmail", "description", "disableStrictTypeValidation", "errorCatcherId", "externalTaskType", "failurePolicy", "incomingEdgeCount", "jsonValidationOption", "label", "lastModifiedTime", "nextTasks", "nextTasksExecutionPolicy", "parameters", "position", "precondition", "preconditionLabel", "rollbackStrategy", "successPolicy", "synchronousCallFailurePolicy", "taskEntity", "taskExecutionStrategy", "taskName", "taskNumber", "taskSpec", "taskTemplateName", "taskType"]

    @field_validator('external_task_type')
    def external_task_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['EXTERNAL_TASK_TYPE_UNSPECIFIED', 'NORMAL_TASK', 'ERROR_TASK']):
            raise ValueError("must be one of enum values ('EXTERNAL_TASK_TYPE_UNSPECIFIED', 'NORMAL_TASK', 'ERROR_TASK')")
        return value

    @field_validator('json_validation_option')
    def json_validation_option_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['UNSPECIFIED_JSON_VALIDATION_OPTION', 'SKIP', 'PRE_EXECUTION', 'POST_EXECUTION', 'PRE_POST_EXECUTION']):
            raise ValueError("must be one of enum values ('UNSPECIFIED_JSON_VALIDATION_OPTION', 'SKIP', 'PRE_EXECUTION', 'POST_EXECUTION', 'PRE_POST_EXECUTION')")
        return value

    @field_validator('next_tasks_execution_policy')
    def next_tasks_execution_policy_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['UNSPECIFIED', 'RUN_ALL_MATCH', 'RUN_FIRST_MATCH']):
            raise ValueError("must be one of enum values ('UNSPECIFIED', 'RUN_ALL_MATCH', 'RUN_FIRST_MATCH')")
        return value

    @field_validator('task_execution_strategy')
    def task_execution_strategy_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['WHEN_ALL_SUCCEED', 'WHEN_ANY_SUCCEED', 'WHEN_ALL_TASKS_AND_CONDITIONS_SUCCEED']):
            raise ValueError("must be one of enum values ('WHEN_ALL_SUCCEED', 'WHEN_ANY_SUCCEED', 'WHEN_ALL_TASKS_AND_CONDITIONS_SUCCEED')")
        return value

    @field_validator('task_type')
    def task_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['TASK', 'ASIS_TEMPLATE', 'IO_TEMPLATE']):
            raise ValueError("must be one of enum values ('TASK', 'ASIS_TEMPLATE', 'IO_TEMPLATE')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of EnterpriseCrmFrontendsEventbusProtoTaskConfig from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in alert_configs (list)
        _items = []
        if self.alert_configs:
            for _item_alert_configs in self.alert_configs:
                if _item_alert_configs:
                    _items.append(_item_alert_configs.to_dict())
            _dict['alertConfigs'] = _items
        # override the default output from pydantic by calling `to_dict()` of failure_policy
        if self.failure_policy:
            _dict['failurePolicy'] = self.failure_policy.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in next_tasks (list)
        _items = []
        if self.next_tasks:
            for _item_next_tasks in self.next_tasks:
                if _item_next_tasks:
                    _items.append(_item_next_tasks.to_dict())
            _dict['nextTasks'] = _items
        # override the default output from pydantic by calling `to_dict()` of each value in parameters (dict)
        _field_dict = {}
        if self.parameters:
            for _key_parameters in self.parameters:
                if self.parameters[_key_parameters]:
                    _field_dict[_key_parameters] = self.parameters[_key_parameters].to_dict()
            _dict['parameters'] = _field_dict
        # override the default output from pydantic by calling `to_dict()` of position
        if self.position:
            _dict['position'] = self.position.to_dict()
        # override the default output from pydantic by calling `to_dict()` of rollback_strategy
        if self.rollback_strategy:
            _dict['rollbackStrategy'] = self.rollback_strategy.to_dict()
        # override the default output from pydantic by calling `to_dict()` of success_policy
        if self.success_policy:
            _dict['successPolicy'] = self.success_policy.to_dict()
        # override the default output from pydantic by calling `to_dict()` of synchronous_call_failure_policy
        if self.synchronous_call_failure_policy:
            _dict['synchronousCallFailurePolicy'] = self.synchronous_call_failure_policy.to_dict()
        # override the default output from pydantic by calling `to_dict()` of task_entity
        if self.task_entity:
            _dict['taskEntity'] = self.task_entity.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of EnterpriseCrmFrontendsEventbusProtoTaskConfig from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "alertConfigs": [EnterpriseCrmEventbusProtoTaskAlertConfig.from_dict(_item) for _item in obj["alertConfigs"]] if obj.get("alertConfigs") is not None else None,
            "createTime": obj.get("createTime"),
            "creatorEmail": obj.get("creatorEmail"),
            "description": obj.get("description"),
            "disableStrictTypeValidation": obj.get("disableStrictTypeValidation"),
            "errorCatcherId": obj.get("errorCatcherId"),
            "externalTaskType": obj.get("externalTaskType"),
            "failurePolicy": EnterpriseCrmEventbusProtoFailurePolicy.from_dict(obj["failurePolicy"]) if obj.get("failurePolicy") is not None else None,
            "incomingEdgeCount": obj.get("incomingEdgeCount"),
            "jsonValidationOption": obj.get("jsonValidationOption"),
            "label": obj.get("label"),
            "lastModifiedTime": obj.get("lastModifiedTime"),
            "nextTasks": [EnterpriseCrmEventbusProtoNextTask.from_dict(_item) for _item in obj["nextTasks"]] if obj.get("nextTasks") is not None else None,
            "nextTasksExecutionPolicy": obj.get("nextTasksExecutionPolicy"),
            "parameters": dict(
                (_k, EnterpriseCrmFrontendsEventbusProtoParameterEntry.from_dict(_v))
                for _k, _v in obj["parameters"].items()
            )
            if obj.get("parameters") is not None
            else None,
            "position": EnterpriseCrmEventbusProtoCoordinate.from_dict(obj["position"]) if obj.get("position") is not None else None,
            "precondition": obj.get("precondition"),
            "preconditionLabel": obj.get("preconditionLabel"),
            "rollbackStrategy": EnterpriseCrmFrontendsEventbusProtoRollbackStrategy.from_dict(obj["rollbackStrategy"]) if obj.get("rollbackStrategy") is not None else None,
            "successPolicy": EnterpriseCrmEventbusProtoSuccessPolicy.from_dict(obj["successPolicy"]) if obj.get("successPolicy") is not None else None,
            "synchronousCallFailurePolicy": EnterpriseCrmEventbusProtoFailurePolicy.from_dict(obj["synchronousCallFailurePolicy"]) if obj.get("synchronousCallFailurePolicy") is not None else None,
            "taskEntity": EnterpriseCrmFrontendsEventbusProtoTaskEntity.from_dict(obj["taskEntity"]) if obj.get("taskEntity") is not None else None,
            "taskExecutionStrategy": obj.get("taskExecutionStrategy"),
            "taskName": obj.get("taskName"),
            "taskNumber": obj.get("taskNumber"),
            "taskSpec": obj.get("taskSpec"),
            "taskTemplateName": obj.get("taskTemplateName"),
            "taskType": obj.get("taskType")
        })
        return _obj



# coding: utf-8

"""
    Application Integration API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.enterprise_crm_eventbus_proto_event_execution_details import EnterpriseCrmEventbusProtoEventExecutionDetails
from openapi_client.models.enterprise_crm_frontends_eventbus_proto_parameter_entry import EnterpriseCrmFrontendsEventbusProtoParameterEntry
from openapi_client.models.google_cloud_integrations_v1alpha_execution_details import GoogleCloudIntegrationsV1alphaExecutionDetails
from openapi_client.models.google_cloud_integrations_v1alpha_value_type import GoogleCloudIntegrationsV1alphaValueType
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudIntegrationsV1alphaExecution(BaseModel):
    """
    The Execution resource contains detailed information of an individual integration execution.
    """ # noqa: E501
    create_time: Optional[StrictStr] = Field(default=None, description="Output only. Created time of the execution.", alias="createTime")
    direct_sub_executions: Optional[List[GoogleCloudIntegrationsV1alphaExecution]] = Field(default=None, description="Direct sub executions of the following Execution.", alias="directSubExecutions")
    event_execution_details: Optional[EnterpriseCrmEventbusProtoEventExecutionDetails] = Field(default=None, alias="eventExecutionDetails")
    execution_details: Optional[GoogleCloudIntegrationsV1alphaExecutionDetails] = Field(default=None, alias="executionDetails")
    execution_method: Optional[StrictStr] = Field(default=None, description="The ways user posts this event.", alias="executionMethod")
    name: Optional[StrictStr] = Field(default=None, description="Auto-generated primary key.")
    request_parameters: Optional[Dict[str, GoogleCloudIntegrationsV1alphaValueType]] = Field(default=None, description="Event parameters come in as part of the request.", alias="requestParameters")
    request_params: Optional[List[EnterpriseCrmFrontendsEventbusProtoParameterEntry]] = Field(default=None, description="Event parameters come in as part of the request.", alias="requestParams")
    response_parameters: Optional[Dict[str, GoogleCloudIntegrationsV1alphaValueType]] = Field(default=None, description="Event parameters returned as part of the response.", alias="responseParameters")
    response_params: Optional[List[EnterpriseCrmFrontendsEventbusProtoParameterEntry]] = Field(default=None, description="Event parameters come out as part of the response.", alias="responseParams")
    trigger_id: Optional[StrictStr] = Field(default=None, description="The trigger id of the integration trigger config. If both trigger_id and client_id is present, the integration is executed from the start tasks provided by the matching trigger config otherwise it is executed from the default start tasks.", alias="triggerId")
    update_time: Optional[StrictStr] = Field(default=None, description="Output only. Last modified time of the execution.", alias="updateTime")
    __properties: ClassVar[List[str]] = ["createTime", "directSubExecutions", "eventExecutionDetails", "executionDetails", "executionMethod", "name", "requestParameters", "requestParams", "responseParameters", "responseParams", "triggerId", "updateTime"]

    @field_validator('execution_method')
    def execution_method_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['EXECUTION_METHOD_UNSPECIFIED', 'POST', 'POST_TO_QUEUE', 'SCHEDULE']):
            raise ValueError("must be one of enum values ('EXECUTION_METHOD_UNSPECIFIED', 'POST', 'POST_TO_QUEUE', 'SCHEDULE')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudIntegrationsV1alphaExecution from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "create_time",
            "update_time",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in direct_sub_executions (list)
        _items = []
        if self.direct_sub_executions:
            for _item_direct_sub_executions in self.direct_sub_executions:
                if _item_direct_sub_executions:
                    _items.append(_item_direct_sub_executions.to_dict())
            _dict['directSubExecutions'] = _items
        # override the default output from pydantic by calling `to_dict()` of event_execution_details
        if self.event_execution_details:
            _dict['eventExecutionDetails'] = self.event_execution_details.to_dict()
        # override the default output from pydantic by calling `to_dict()` of execution_details
        if self.execution_details:
            _dict['executionDetails'] = self.execution_details.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each value in request_parameters (dict)
        _field_dict = {}
        if self.request_parameters:
            for _key_request_parameters in self.request_parameters:
                if self.request_parameters[_key_request_parameters]:
                    _field_dict[_key_request_parameters] = self.request_parameters[_key_request_parameters].to_dict()
            _dict['requestParameters'] = _field_dict
        # override the default output from pydantic by calling `to_dict()` of each item in request_params (list)
        _items = []
        if self.request_params:
            for _item_request_params in self.request_params:
                if _item_request_params:
                    _items.append(_item_request_params.to_dict())
            _dict['requestParams'] = _items
        # override the default output from pydantic by calling `to_dict()` of each value in response_parameters (dict)
        _field_dict = {}
        if self.response_parameters:
            for _key_response_parameters in self.response_parameters:
                if self.response_parameters[_key_response_parameters]:
                    _field_dict[_key_response_parameters] = self.response_parameters[_key_response_parameters].to_dict()
            _dict['responseParameters'] = _field_dict
        # override the default output from pydantic by calling `to_dict()` of each item in response_params (list)
        _items = []
        if self.response_params:
            for _item_response_params in self.response_params:
                if _item_response_params:
                    _items.append(_item_response_params.to_dict())
            _dict['responseParams'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudIntegrationsV1alphaExecution from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "createTime": obj.get("createTime"),
            "directSubExecutions": [GoogleCloudIntegrationsV1alphaExecution.from_dict(_item) for _item in obj["directSubExecutions"]] if obj.get("directSubExecutions") is not None else None,
            "eventExecutionDetails": EnterpriseCrmEventbusProtoEventExecutionDetails.from_dict(obj["eventExecutionDetails"]) if obj.get("eventExecutionDetails") is not None else None,
            "executionDetails": GoogleCloudIntegrationsV1alphaExecutionDetails.from_dict(obj["executionDetails"]) if obj.get("executionDetails") is not None else None,
            "executionMethod": obj.get("executionMethod"),
            "name": obj.get("name"),
            "requestParameters": dict(
                (_k, GoogleCloudIntegrationsV1alphaValueType.from_dict(_v))
                for _k, _v in obj["requestParameters"].items()
            )
            if obj.get("requestParameters") is not None
            else None,
            "requestParams": [EnterpriseCrmFrontendsEventbusProtoParameterEntry.from_dict(_item) for _item in obj["requestParams"]] if obj.get("requestParams") is not None else None,
            "responseParameters": dict(
                (_k, GoogleCloudIntegrationsV1alphaValueType.from_dict(_v))
                for _k, _v in obj["responseParameters"].items()
            )
            if obj.get("responseParameters") is not None
            else None,
            "responseParams": [EnterpriseCrmFrontendsEventbusProtoParameterEntry.from_dict(_item) for _item in obj["responseParams"]] if obj.get("responseParams") is not None else None,
            "triggerId": obj.get("triggerId"),
            "updateTime": obj.get("updateTime")
        })
        return _obj

# TODO: Rewrite to not use raise_errors
GoogleCloudIntegrationsV1alphaExecution.model_rebuild(raise_errors=False)


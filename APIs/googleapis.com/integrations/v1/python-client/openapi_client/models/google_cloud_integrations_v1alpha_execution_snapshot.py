# coding: utf-8

"""
    Application Integration API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_cloud_integrations_v1alpha_execution_snapshot_execution_snapshot_metadata import GoogleCloudIntegrationsV1alphaExecutionSnapshotExecutionSnapshotMetadata
from openapi_client.models.google_cloud_integrations_v1alpha_task_execution_details import GoogleCloudIntegrationsV1alphaTaskExecutionDetails
from openapi_client.models.google_cloud_integrations_v1alpha_value_type import GoogleCloudIntegrationsV1alphaValueType
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudIntegrationsV1alphaExecutionSnapshot(BaseModel):
    """
    Contains the snapshot of the execution for a given checkpoint.
    """ # noqa: E501
    checkpoint_task_number: Optional[StrictStr] = Field(default=None, description="Indicates \"after which checkpoint task's execution\" this snapshot is taken.", alias="checkpointTaskNumber")
    execution_snapshot_metadata: Optional[GoogleCloudIntegrationsV1alphaExecutionSnapshotExecutionSnapshotMetadata] = Field(default=None, alias="executionSnapshotMetadata")
    params: Optional[Dict[str, GoogleCloudIntegrationsV1alphaValueType]] = Field(default=None, description="Parameters used during the execution.")
    task_execution_details: Optional[List[GoogleCloudIntegrationsV1alphaTaskExecutionDetails]] = Field(default=None, description="All of the task execution details at the given point of time.", alias="taskExecutionDetails")
    __properties: ClassVar[List[str]] = ["checkpointTaskNumber", "executionSnapshotMetadata", "params", "taskExecutionDetails"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudIntegrationsV1alphaExecutionSnapshot from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of execution_snapshot_metadata
        if self.execution_snapshot_metadata:
            _dict['executionSnapshotMetadata'] = self.execution_snapshot_metadata.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each value in params (dict)
        _field_dict = {}
        if self.params:
            for _key_params in self.params:
                if self.params[_key_params]:
                    _field_dict[_key_params] = self.params[_key_params].to_dict()
            _dict['params'] = _field_dict
        # override the default output from pydantic by calling `to_dict()` of each item in task_execution_details (list)
        _items = []
        if self.task_execution_details:
            for _item_task_execution_details in self.task_execution_details:
                if _item_task_execution_details:
                    _items.append(_item_task_execution_details.to_dict())
            _dict['taskExecutionDetails'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudIntegrationsV1alphaExecutionSnapshot from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "checkpointTaskNumber": obj.get("checkpointTaskNumber"),
            "executionSnapshotMetadata": GoogleCloudIntegrationsV1alphaExecutionSnapshotExecutionSnapshotMetadata.from_dict(obj["executionSnapshotMetadata"]) if obj.get("executionSnapshotMetadata") is not None else None,
            "params": dict(
                (_k, GoogleCloudIntegrationsV1alphaValueType.from_dict(_v))
                for _k, _v in obj["params"].items()
            )
            if obj.get("params") is not None
            else None,
            "taskExecutionDetails": [GoogleCloudIntegrationsV1alphaTaskExecutionDetails.from_dict(_item) for _item in obj["taskExecutionDetails"]] if obj.get("taskExecutionDetails") is not None else None
        })
        return _obj



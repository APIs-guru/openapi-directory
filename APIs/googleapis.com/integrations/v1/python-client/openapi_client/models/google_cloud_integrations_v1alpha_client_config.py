# coding: utf-8

"""
    Application Integration API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_cloud_integrations_v1alpha_cloud_kms_config import GoogleCloudIntegrationsV1alphaCloudKmsConfig
from openapi_client.models.google_cloud_integrations_v1alpha_cloud_logging_config import GoogleCloudIntegrationsV1alphaCloudLoggingConfig
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudIntegrationsV1alphaClientConfig(BaseModel):
    """
    The configuration information for the Client
    """ # noqa: E501
    billing_type: Optional[StrictStr] = Field(default=None, description="Indicates the billing type of the client", alias="billingType")
    client_state: Optional[StrictStr] = Field(default=None, description="Indicates the activity state the client", alias="clientState")
    cloud_kms_config: Optional[GoogleCloudIntegrationsV1alphaCloudKmsConfig] = Field(default=None, alias="cloudKmsConfig")
    cloud_logging_config: Optional[GoogleCloudIntegrationsV1alphaCloudLoggingConfig] = Field(default=None, alias="cloudLoggingConfig")
    create_time: Optional[StrictStr] = Field(default=None, description="The timestamp when the client was first created.", alias="createTime")
    description: Optional[StrictStr] = Field(default=None, description="Description of what the client is used for")
    id: Optional[StrictStr] = Field(default=None, description="Globally unique ID (project_id + region)")
    p4_service_account: Optional[StrictStr] = Field(default=None, description="The service agent associated with this client", alias="p4ServiceAccount")
    project_id: Optional[StrictStr] = Field(default=None, description="The GCP project id of the client associated with", alias="projectId")
    region: Optional[StrictStr] = Field(default=None, description="The region the client is linked to.")
    __properties: ClassVar[List[str]] = ["billingType", "clientState", "cloudKmsConfig", "cloudLoggingConfig", "createTime", "description", "id", "p4ServiceAccount", "projectId", "region"]

    @field_validator('billing_type')
    def billing_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['BILLING_TYPE_UNSPECIFIED', 'BILLING_TYPE_APIGEE_TRIALS', 'BILLING_TYPE_APIGEE_SUBSCRIPTION', 'BILLING_TYPE_PAYG']):
            raise ValueError("must be one of enum values ('BILLING_TYPE_UNSPECIFIED', 'BILLING_TYPE_APIGEE_TRIALS', 'BILLING_TYPE_APIGEE_SUBSCRIPTION', 'BILLING_TYPE_PAYG')")
        return value

    @field_validator('client_state')
    def client_state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['CLIENT_STATE_UNSPECIFIED', 'CLIENT_STATE_ACTIVE', 'CLIENT_STATE_DISABLED']):
            raise ValueError("must be one of enum values ('CLIENT_STATE_UNSPECIFIED', 'CLIENT_STATE_ACTIVE', 'CLIENT_STATE_DISABLED')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudIntegrationsV1alphaClientConfig from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of cloud_kms_config
        if self.cloud_kms_config:
            _dict['cloudKmsConfig'] = self.cloud_kms_config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of cloud_logging_config
        if self.cloud_logging_config:
            _dict['cloudLoggingConfig'] = self.cloud_logging_config.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudIntegrationsV1alphaClientConfig from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "billingType": obj.get("billingType"),
            "clientState": obj.get("clientState"),
            "cloudKmsConfig": GoogleCloudIntegrationsV1alphaCloudKmsConfig.from_dict(obj["cloudKmsConfig"]) if obj.get("cloudKmsConfig") is not None else None,
            "cloudLoggingConfig": GoogleCloudIntegrationsV1alphaCloudLoggingConfig.from_dict(obj["cloudLoggingConfig"]) if obj.get("cloudLoggingConfig") is not None else None,
            "createTime": obj.get("createTime"),
            "description": obj.get("description"),
            "id": obj.get("id"),
            "p4ServiceAccount": obj.get("p4ServiceAccount"),
            "projectId": obj.get("projectId"),
            "region": obj.get("region")
        })
        return _obj



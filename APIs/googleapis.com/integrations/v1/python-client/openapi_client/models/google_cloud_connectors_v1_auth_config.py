# coding: utf-8

"""
    Application Integration API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_cloud_connectors_v1_auth_config_oauth2_auth_code_flow import GoogleCloudConnectorsV1AuthConfigOauth2AuthCodeFlow
from openapi_client.models.google_cloud_connectors_v1_auth_config_oauth2_client_credentials import GoogleCloudConnectorsV1AuthConfigOauth2ClientCredentials
from openapi_client.models.google_cloud_connectors_v1_auth_config_oauth2_jwt_bearer import GoogleCloudConnectorsV1AuthConfigOauth2JwtBearer
from openapi_client.models.google_cloud_connectors_v1_auth_config_ssh_public_key import GoogleCloudConnectorsV1AuthConfigSshPublicKey
from openapi_client.models.google_cloud_connectors_v1_auth_config_user_password import GoogleCloudConnectorsV1AuthConfigUserPassword
from openapi_client.models.google_cloud_connectors_v1_config_variable import GoogleCloudConnectorsV1ConfigVariable
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudConnectorsV1AuthConfig(BaseModel):
    """
    AuthConfig defines details of a authentication type.
    """ # noqa: E501
    additional_variables: Optional[List[GoogleCloudConnectorsV1ConfigVariable]] = Field(default=None, description="List containing additional auth configs.", alias="additionalVariables")
    auth_key: Optional[StrictStr] = Field(default=None, description="Identifier key for auth config", alias="authKey")
    auth_type: Optional[StrictStr] = Field(default=None, description="The type of authentication configured.", alias="authType")
    oauth2_auth_code_flow: Optional[GoogleCloudConnectorsV1AuthConfigOauth2AuthCodeFlow] = Field(default=None, alias="oauth2AuthCodeFlow")
    oauth2_client_credentials: Optional[GoogleCloudConnectorsV1AuthConfigOauth2ClientCredentials] = Field(default=None, alias="oauth2ClientCredentials")
    oauth2_jwt_bearer: Optional[GoogleCloudConnectorsV1AuthConfigOauth2JwtBearer] = Field(default=None, alias="oauth2JwtBearer")
    ssh_public_key: Optional[GoogleCloudConnectorsV1AuthConfigSshPublicKey] = Field(default=None, alias="sshPublicKey")
    user_password: Optional[GoogleCloudConnectorsV1AuthConfigUserPassword] = Field(default=None, alias="userPassword")
    __properties: ClassVar[List[str]] = ["additionalVariables", "authKey", "authType", "oauth2AuthCodeFlow", "oauth2ClientCredentials", "oauth2JwtBearer", "sshPublicKey", "userPassword"]

    @field_validator('auth_type')
    def auth_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['AUTH_TYPE_UNSPECIFIED', 'USER_PASSWORD', 'OAUTH2_JWT_BEARER', 'OAUTH2_CLIENT_CREDENTIALS', 'SSH_PUBLIC_KEY', 'OAUTH2_AUTH_CODE_FLOW']):
            raise ValueError("must be one of enum values ('AUTH_TYPE_UNSPECIFIED', 'USER_PASSWORD', 'OAUTH2_JWT_BEARER', 'OAUTH2_CLIENT_CREDENTIALS', 'SSH_PUBLIC_KEY', 'OAUTH2_AUTH_CODE_FLOW')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudConnectorsV1AuthConfig from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in additional_variables (list)
        _items = []
        if self.additional_variables:
            for _item_additional_variables in self.additional_variables:
                if _item_additional_variables:
                    _items.append(_item_additional_variables.to_dict())
            _dict['additionalVariables'] = _items
        # override the default output from pydantic by calling `to_dict()` of oauth2_auth_code_flow
        if self.oauth2_auth_code_flow:
            _dict['oauth2AuthCodeFlow'] = self.oauth2_auth_code_flow.to_dict()
        # override the default output from pydantic by calling `to_dict()` of oauth2_client_credentials
        if self.oauth2_client_credentials:
            _dict['oauth2ClientCredentials'] = self.oauth2_client_credentials.to_dict()
        # override the default output from pydantic by calling `to_dict()` of oauth2_jwt_bearer
        if self.oauth2_jwt_bearer:
            _dict['oauth2JwtBearer'] = self.oauth2_jwt_bearer.to_dict()
        # override the default output from pydantic by calling `to_dict()` of ssh_public_key
        if self.ssh_public_key:
            _dict['sshPublicKey'] = self.ssh_public_key.to_dict()
        # override the default output from pydantic by calling `to_dict()` of user_password
        if self.user_password:
            _dict['userPassword'] = self.user_password.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudConnectorsV1AuthConfig from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "additionalVariables": [GoogleCloudConnectorsV1ConfigVariable.from_dict(_item) for _item in obj["additionalVariables"]] if obj.get("additionalVariables") is not None else None,
            "authKey": obj.get("authKey"),
            "authType": obj.get("authType"),
            "oauth2AuthCodeFlow": GoogleCloudConnectorsV1AuthConfigOauth2AuthCodeFlow.from_dict(obj["oauth2AuthCodeFlow"]) if obj.get("oauth2AuthCodeFlow") is not None else None,
            "oauth2ClientCredentials": GoogleCloudConnectorsV1AuthConfigOauth2ClientCredentials.from_dict(obj["oauth2ClientCredentials"]) if obj.get("oauth2ClientCredentials") is not None else None,
            "oauth2JwtBearer": GoogleCloudConnectorsV1AuthConfigOauth2JwtBearer.from_dict(obj["oauth2JwtBearer"]) if obj.get("oauth2JwtBearer") is not None else None,
            "sshPublicKey": GoogleCloudConnectorsV1AuthConfigSshPublicKey.from_dict(obj["sshPublicKey"]) if obj.get("sshPublicKey") is not None else None,
            "userPassword": GoogleCloudConnectorsV1AuthConfigUserPassword.from_dict(obj["userPassword"]) if obj.get("userPassword") is not None else None
        })
        return _obj



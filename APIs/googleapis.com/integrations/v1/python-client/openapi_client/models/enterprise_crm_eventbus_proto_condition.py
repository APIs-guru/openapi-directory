# coding: utf-8

"""
    Application Integration API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.enterprise_crm_eventbus_proto_value_type import EnterpriseCrmEventbusProtoValueType
from typing import Optional, Set
from typing_extensions import Self

class EnterpriseCrmEventbusProtoCondition(BaseModel):
    """
    Condition that uses `operator` to evaluate the key against the value.
    """ # noqa: E501
    event_property_key: Optional[StrictStr] = Field(default=None, description="Key that's evaluated against the `value`. Please note the data type of the runtime value associated with the key should match the data type of `value`, else an IllegalArgumentException is thrown.", alias="eventPropertyKey")
    operator: Optional[StrictStr] = Field(default=None, description="Operator used to evaluate the condition. Please note that an operator with an inappropriate key/value operand will result in IllegalArgumentException, e.g. CONTAINS with boolean key/value pair.")
    value: Optional[EnterpriseCrmEventbusProtoValueType] = None
    __properties: ClassVar[List[str]] = ["eventPropertyKey", "operator", "value"]

    @field_validator('operator')
    def operator_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['UNSET', 'EQUALS', 'CONTAINS', 'LESS_THAN', 'GREATER_THAN', 'EXISTS', 'DOES_NOT_EXIST', 'IS_EMPTY', 'IS_NOT_EMPTY']):
            raise ValueError("must be one of enum values ('UNSET', 'EQUALS', 'CONTAINS', 'LESS_THAN', 'GREATER_THAN', 'EXISTS', 'DOES_NOT_EXIST', 'IS_EMPTY', 'IS_NOT_EMPTY')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of EnterpriseCrmEventbusProtoCondition from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of value
        if self.value:
            _dict['value'] = self.value.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of EnterpriseCrmEventbusProtoCondition from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "eventPropertyKey": obj.get("eventPropertyKey"),
            "operator": obj.get("operator"),
            "value": EnterpriseCrmEventbusProtoValueType.from_dict(obj["value"]) if obj.get("value") is not None else None
        })
        return _obj



# coding: utf-8

"""
    Application Integration API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class EnterpriseCrmLoggingGwsFieldLimits(BaseModel):
    """
    Describes string and array limits when writing to logs. When a limit is exceeded the *shortener_type* describes how to shorten the field. next_id: 6
    """ # noqa: E501
    log_action: Optional[StrictStr] = Field(default=None, alias="logAction")
    log_type: Optional[List[StrictStr]] = Field(default=None, description="To which type(s) of logs the limits apply.", alias="logType")
    max_array_size: Optional[StrictInt] = Field(default=None, description="maximum array size. If the array exceds this size, the field (list) is truncated.", alias="maxArraySize")
    max_string_length: Optional[StrictInt] = Field(default=None, description="maximum string length. If the field exceeds this amount the field is shortened.", alias="maxStringLength")
    shortener_type: Optional[StrictStr] = Field(default=None, alias="shortenerType")
    __properties: ClassVar[List[str]] = ["logAction", "logType", "maxArraySize", "maxStringLength", "shortenerType"]

    @field_validator('log_action')
    def log_action_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['LOG_ACTION_UNSPECIFIED', 'DONT_LOG', 'LOG']):
            raise ValueError("must be one of enum values ('LOG_ACTION_UNSPECIFIED', 'DONT_LOG', 'LOG')")
        return value

    @field_validator('log_type')
    def log_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        for i in value:
            if i not in set(['LOG_TYPE_UNSPECIFIED', 'GWS', 'GTS', 'ALL']):
                raise ValueError("each list item must be one of ('LOG_TYPE_UNSPECIFIED', 'GWS', 'GTS', 'ALL')")
        return value

    @field_validator('shortener_type')
    def shortener_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['SHORTENER_TYPE_UNSPECIFIED', 'SHORTEN', 'HASH', 'SHORTEN_WITH_HASH', 'SHORTEN_EMAIL', 'SHORTEN_EMAIL_WITH_HASH', 'SHORTEN_DOMAIN']):
            raise ValueError("must be one of enum values ('SHORTENER_TYPE_UNSPECIFIED', 'SHORTEN', 'HASH', 'SHORTEN_WITH_HASH', 'SHORTEN_EMAIL', 'SHORTEN_EMAIL_WITH_HASH', 'SHORTEN_DOMAIN')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of EnterpriseCrmLoggingGwsFieldLimits from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of EnterpriseCrmLoggingGwsFieldLimits from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "logAction": obj.get("logAction"),
            "logType": obj.get("logType"),
            "maxArraySize": obj.get("maxArraySize"),
            "maxStringLength": obj.get("maxStringLength"),
            "shortenerType": obj.get("shortenerType")
        })
        return _obj



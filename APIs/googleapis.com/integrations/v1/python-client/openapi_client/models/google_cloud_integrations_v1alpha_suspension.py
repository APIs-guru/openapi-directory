# coding: utf-8

"""
    Application Integration API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.enterprise_crm_eventbus_proto_suspension_config import EnterpriseCrmEventbusProtoSuspensionConfig
from openapi_client.models.google_cloud_integrations_v1alpha_suspension_approval_config import GoogleCloudIntegrationsV1alphaSuspensionApprovalConfig
from openapi_client.models.google_cloud_integrations_v1alpha_suspension_audit import GoogleCloudIntegrationsV1alphaSuspensionAudit
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudIntegrationsV1alphaSuspension(BaseModel):
    """
    A record representing a suspension.
    """ # noqa: E501
    approval_config: Optional[GoogleCloudIntegrationsV1alphaSuspensionApprovalConfig] = Field(default=None, alias="approvalConfig")
    audit: Optional[GoogleCloudIntegrationsV1alphaSuspensionAudit] = None
    create_time: Optional[StrictStr] = Field(default=None, description="Output only. Auto-generated.", alias="createTime")
    event_execution_info_id: Optional[StrictStr] = Field(default=None, description="Required. ID of the associated execution.", alias="eventExecutionInfoId")
    integration: Optional[StrictStr] = Field(default=None, description="Required. The name of the originating integration.")
    last_modify_time: Optional[StrictStr] = Field(default=None, description="Output only. Auto-generated.", alias="lastModifyTime")
    name: Optional[StrictStr] = Field(default=None, description="Resource name for suspensions suspension/{suspension_id}")
    state: Optional[StrictStr] = Field(default=None, description="Required. State of this suspension, indicating what action a resolver has taken.")
    suspension_config: Optional[EnterpriseCrmEventbusProtoSuspensionConfig] = Field(default=None, alias="suspensionConfig")
    task_id: Optional[StrictStr] = Field(default=None, description="Required. Task id of the associated SuspensionTask.", alias="taskId")
    __properties: ClassVar[List[str]] = ["approvalConfig", "audit", "createTime", "eventExecutionInfoId", "integration", "lastModifyTime", "name", "state", "suspensionConfig", "taskId"]

    @field_validator('state')
    def state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['RESOLUTION_STATE_UNSPECIFIED', 'PENDING', 'REJECTED', 'LIFTED']):
            raise ValueError("must be one of enum values ('RESOLUTION_STATE_UNSPECIFIED', 'PENDING', 'REJECTED', 'LIFTED')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudIntegrationsV1alphaSuspension from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "create_time",
            "last_modify_time",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of approval_config
        if self.approval_config:
            _dict['approvalConfig'] = self.approval_config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of audit
        if self.audit:
            _dict['audit'] = self.audit.to_dict()
        # override the default output from pydantic by calling `to_dict()` of suspension_config
        if self.suspension_config:
            _dict['suspensionConfig'] = self.suspension_config.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudIntegrationsV1alphaSuspension from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "approvalConfig": GoogleCloudIntegrationsV1alphaSuspensionApprovalConfig.from_dict(obj["approvalConfig"]) if obj.get("approvalConfig") is not None else None,
            "audit": GoogleCloudIntegrationsV1alphaSuspensionAudit.from_dict(obj["audit"]) if obj.get("audit") is not None else None,
            "createTime": obj.get("createTime"),
            "eventExecutionInfoId": obj.get("eventExecutionInfoId"),
            "integration": obj.get("integration"),
            "lastModifyTime": obj.get("lastModifyTime"),
            "name": obj.get("name"),
            "state": obj.get("state"),
            "suspensionConfig": EnterpriseCrmEventbusProtoSuspensionConfig.from_dict(obj["suspensionConfig"]) if obj.get("suspensionConfig") is not None else None,
            "taskId": obj.get("taskId")
        })
        return _obj



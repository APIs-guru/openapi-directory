# coding: utf-8

"""
    Application Integration API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_cloud_integrations_v1alpha_coordinate import GoogleCloudIntegrationsV1alphaCoordinate
from openapi_client.models.google_cloud_integrations_v1alpha_next_task import GoogleCloudIntegrationsV1alphaNextTask
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudIntegrationsV1alphaErrorCatcherConfig(BaseModel):
    """
    Configuration detail of a error catch task
    """ # noqa: E501
    description: Optional[StrictStr] = Field(default=None, description="Optional. User-provided description intended to give more business context about the error catcher config.")
    error_catcher_id: Optional[StrictStr] = Field(default=None, description="Required. An error catcher id is string representation for the error catcher config. Within a workflow, error_catcher_id uniquely identifies an error catcher config among all error catcher configs for the workflow", alias="errorCatcherId")
    error_catcher_number: Optional[StrictStr] = Field(default=None, description="Required. A number to uniquely identify each error catcher config within the workflow on UI.", alias="errorCatcherNumber")
    label: Optional[StrictStr] = Field(default=None, description="Optional. The user created label for a particular error catcher. Optional.")
    position: Optional[GoogleCloudIntegrationsV1alphaCoordinate] = None
    start_error_tasks: Optional[List[GoogleCloudIntegrationsV1alphaNextTask]] = Field(default=None, description="Required. The set of start tasks that are to be executed for the error catch flow", alias="startErrorTasks")
    __properties: ClassVar[List[str]] = ["description", "errorCatcherId", "errorCatcherNumber", "label", "position", "startErrorTasks"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudIntegrationsV1alphaErrorCatcherConfig from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of position
        if self.position:
            _dict['position'] = self.position.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in start_error_tasks (list)
        _items = []
        if self.start_error_tasks:
            for _item_start_error_tasks in self.start_error_tasks:
                if _item_start_error_tasks:
                    _items.append(_item_start_error_tasks.to_dict())
            _dict['startErrorTasks'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudIntegrationsV1alphaErrorCatcherConfig from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "description": obj.get("description"),
            "errorCatcherId": obj.get("errorCatcherId"),
            "errorCatcherNumber": obj.get("errorCatcherNumber"),
            "label": obj.get("label"),
            "position": GoogleCloudIntegrationsV1alphaCoordinate.from_dict(obj["position"]) if obj.get("position") is not None else None,
            "startErrorTasks": [GoogleCloudIntegrationsV1alphaNextTask.from_dict(_item) for _item in obj["startErrorTasks"]] if obj.get("startErrorTasks") is not None else None
        })
        return _obj



# coding: utf-8

"""
    Application Integration API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.enterprise_crm_eventbus_proto_suspension_auth_permissions_gaia_identity import EnterpriseCrmEventbusProtoSuspensionAuthPermissionsGaiaIdentity
from typing import Optional, Set
from typing_extensions import Self

class EnterpriseCrmEventbusProtoSuspensionAuthPermissions(BaseModel):
    """
    LINT.IfChange
    """ # noqa: E501
    gaia_identity: Optional[EnterpriseCrmEventbusProtoSuspensionAuthPermissionsGaiaIdentity] = Field(default=None, alias="gaiaIdentity")
    google_group: Optional[EnterpriseCrmEventbusProtoSuspensionAuthPermissionsGaiaIdentity] = Field(default=None, alias="googleGroup")
    loas_role: Optional[StrictStr] = Field(default=None, alias="loasRole")
    mdb_group: Optional[StrictStr] = Field(default=None, alias="mdbGroup")
    __properties: ClassVar[List[str]] = ["gaiaIdentity", "googleGroup", "loasRole", "mdbGroup"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of EnterpriseCrmEventbusProtoSuspensionAuthPermissions from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of gaia_identity
        if self.gaia_identity:
            _dict['gaiaIdentity'] = self.gaia_identity.to_dict()
        # override the default output from pydantic by calling `to_dict()` of google_group
        if self.google_group:
            _dict['googleGroup'] = self.google_group.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of EnterpriseCrmEventbusProtoSuspensionAuthPermissions from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "gaiaIdentity": EnterpriseCrmEventbusProtoSuspensionAuthPermissionsGaiaIdentity.from_dict(obj["gaiaIdentity"]) if obj.get("gaiaIdentity") is not None else None,
            "googleGroup": EnterpriseCrmEventbusProtoSuspensionAuthPermissionsGaiaIdentity.from_dict(obj["googleGroup"]) if obj.get("googleGroup") is not None else None,
            "loasRole": obj.get("loasRole"),
            "mdbGroup": obj.get("mdbGroup")
        })
        return _obj



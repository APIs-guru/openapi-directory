# coding: utf-8

"""
    Application Integration API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.enterprise_crm_eventbus_proto_parameter_value_type import EnterpriseCrmEventbusProtoParameterValueType
from openapi_client.models.enterprise_crm_eventbus_proto_transform_expression import EnterpriseCrmEventbusProtoTransformExpression
from typing import Optional, Set
from typing_extensions import Self

class EnterpriseCrmEventbusProtoField(BaseModel):
    """
    Information about the value and type of the field.
    """ # noqa: E501
    cardinality: Optional[StrictStr] = Field(default=None, description="By default, if the cardinality is unspecified the field is considered required while mapping.")
    default_value: Optional[EnterpriseCrmEventbusProtoParameterValueType] = Field(default=None, alias="defaultValue")
    field_type: Optional[StrictStr] = Field(default=None, description="Specifies the data type of the field.", alias="fieldType")
    proto_def_path: Optional[StrictStr] = Field(default=None, description="Optional. The fully qualified proto name (e.g. enterprise.crm.storage.Account). Required for output field of type PROTO_VALUE or PROTO_ARRAY. For e.g., if input field_type is BYTES and output field_type is PROTO_VALUE, then fully qualified proto type url should be provided to parse the input bytes. If field_type is *_ARRAY, then all the converted protos are of the same type.", alias="protoDefPath")
    reference_key: Optional[StrictStr] = Field(default=None, description="This holds the reference key of the workflow or task parameter. 1. Any workflow parameter, for e.g. $workflowParam1$. 2. Any task input or output parameter, for e.g. $task1_param1$. 3. Any workflow or task parameters with subfield references, for e.g., $task1_param1.employee.id$", alias="referenceKey")
    transform_expression: Optional[EnterpriseCrmEventbusProtoTransformExpression] = Field(default=None, alias="transformExpression")
    __properties: ClassVar[List[str]] = ["cardinality", "defaultValue", "fieldType", "protoDefPath", "referenceKey", "transformExpression"]

    @field_validator('cardinality')
    def cardinality_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['UNSPECIFIED', 'OPTIONAL']):
            raise ValueError("must be one of enum values ('UNSPECIFIED', 'OPTIONAL')")
        return value

    @field_validator('field_type')
    def field_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['DATA_TYPE_UNSPECIFIED', 'STRING_VALUE', 'INT_VALUE', 'DOUBLE_VALUE', 'BOOLEAN_VALUE', 'PROTO_VALUE', 'SERIALIZED_OBJECT_VALUE', 'STRING_ARRAY', 'INT_ARRAY', 'DOUBLE_ARRAY', 'PROTO_ARRAY', 'PROTO_ENUM', 'BOOLEAN_ARRAY', 'PROTO_ENUM_ARRAY', 'BYTES', 'BYTES_ARRAY', 'NON_SERIALIZABLE_OBJECT', 'JSON_VALUE']):
            raise ValueError("must be one of enum values ('DATA_TYPE_UNSPECIFIED', 'STRING_VALUE', 'INT_VALUE', 'DOUBLE_VALUE', 'BOOLEAN_VALUE', 'PROTO_VALUE', 'SERIALIZED_OBJECT_VALUE', 'STRING_ARRAY', 'INT_ARRAY', 'DOUBLE_ARRAY', 'PROTO_ARRAY', 'PROTO_ENUM', 'BOOLEAN_ARRAY', 'PROTO_ENUM_ARRAY', 'BYTES', 'BYTES_ARRAY', 'NON_SERIALIZABLE_OBJECT', 'JSON_VALUE')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of EnterpriseCrmEventbusProtoField from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of default_value
        if self.default_value:
            _dict['defaultValue'] = self.default_value.to_dict()
        # override the default output from pydantic by calling `to_dict()` of transform_expression
        if self.transform_expression:
            _dict['transformExpression'] = self.transform_expression.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of EnterpriseCrmEventbusProtoField from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "cardinality": obj.get("cardinality"),
            "defaultValue": EnterpriseCrmEventbusProtoParameterValueType.from_dict(obj["defaultValue"]) if obj.get("defaultValue") is not None else None,
            "fieldType": obj.get("fieldType"),
            "protoDefPath": obj.get("protoDefPath"),
            "referenceKey": obj.get("referenceKey"),
            "transformExpression": EnterpriseCrmEventbusProtoTransformExpression.from_dict(obj["transformExpression"]) if obj.get("transformExpression") is not None else None
        })
        return _obj



# coding: utf-8

"""
    Application Integration API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class EnterpriseCrmEventbusProtoParamSpecEntryConfig(BaseModel):
    """
    EnterpriseCrmEventbusProtoParamSpecEntryConfig
    """ # noqa: E501
    descriptive_phrase: Optional[StrictStr] = Field(default=None, description="A short phrase to describe what this parameter contains.", alias="descriptivePhrase")
    help_text: Optional[StrictStr] = Field(default=None, description="Detailed help text for this parameter containing information not provided elsewhere. For example, instructions on how to migrate from a deprecated parameter.", alias="helpText")
    hide_default_value: Optional[StrictBool] = Field(default=None, description="Whether the default value is hidden in the UI.", alias="hideDefaultValue")
    input_display_option: Optional[StrictStr] = Field(default=None, alias="inputDisplayOption")
    is_hidden: Optional[StrictBool] = Field(default=None, description="Whether this field is hidden in the UI.", alias="isHidden")
    label: Optional[StrictStr] = Field(default=None, description="A user-friendly label for the parameter.")
    parameter_name_option: Optional[StrictStr] = Field(default=None, alias="parameterNameOption")
    sub_section_label: Optional[StrictStr] = Field(default=None, description="A user-friendly label for subSection under which the parameter will be displayed.", alias="subSectionLabel")
    ui_placeholder_text: Optional[StrictStr] = Field(default=None, description="Placeholder text which will appear in the UI input form for this parameter.", alias="uiPlaceholderText")
    __properties: ClassVar[List[str]] = ["descriptivePhrase", "helpText", "hideDefaultValue", "inputDisplayOption", "isHidden", "label", "parameterNameOption", "subSectionLabel", "uiPlaceholderText"]

    @field_validator('input_display_option')
    def input_display_option_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['DEFAULT', 'STRING_MULTI_LINE', 'NUMBER_SLIDER', 'BOOLEAN_TOGGLE']):
            raise ValueError("must be one of enum values ('DEFAULT', 'STRING_MULTI_LINE', 'NUMBER_SLIDER', 'BOOLEAN_TOGGLE')")
        return value

    @field_validator('parameter_name_option')
    def parameter_name_option_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['DEFAULT_NOT_PARAMETER_NAME', 'IS_PARAMETER_NAME', 'KEY_IS_PARAMETER_NAME', 'VALUE_IS_PARAMETER_NAME']):
            raise ValueError("must be one of enum values ('DEFAULT_NOT_PARAMETER_NAME', 'IS_PARAMETER_NAME', 'KEY_IS_PARAMETER_NAME', 'VALUE_IS_PARAMETER_NAME')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of EnterpriseCrmEventbusProtoParamSpecEntryConfig from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of EnterpriseCrmEventbusProtoParamSpecEntryConfig from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "descriptivePhrase": obj.get("descriptivePhrase"),
            "helpText": obj.get("helpText"),
            "hideDefaultValue": obj.get("hideDefaultValue"),
            "inputDisplayOption": obj.get("inputDisplayOption"),
            "isHidden": obj.get("isHidden"),
            "label": obj.get("label"),
            "parameterNameOption": obj.get("parameterNameOption"),
            "subSectionLabel": obj.get("subSectionLabel"),
            "uiPlaceholderText": obj.get("uiPlaceholderText")
        })
        return _obj



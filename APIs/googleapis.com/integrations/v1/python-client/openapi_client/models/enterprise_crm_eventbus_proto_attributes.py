# coding: utf-8

"""
    Application Integration API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.enterprise_crm_eventbus_proto_log_settings import EnterpriseCrmEventbusProtoLogSettings
from openapi_client.models.enterprise_crm_eventbus_proto_value_type import EnterpriseCrmEventbusProtoValueType
from typing import Optional, Set
from typing_extensions import Self

class EnterpriseCrmEventbusProtoAttributes(BaseModel):
    """
    Attributes are additional options that can be associated with each event property. For more information, see
    """ # noqa: E501
    data_type: Optional[StrictStr] = Field(default=None, description="Things like URL, Email, Currency, Timestamp (rather than string, int64...)", alias="dataType")
    default_value: Optional[EnterpriseCrmEventbusProtoValueType] = Field(default=None, alias="defaultValue")
    is_required: Optional[StrictBool] = Field(default=None, description="Required for event execution. The validation will be done by the event bus when the event is triggered.", alias="isRequired")
    is_searchable: Optional[StrictBool] = Field(default=None, description="Used to indicate if a ParameterEntry should be converted to ParamIndexes for ST-Spanner full-text search. DEPRECATED: use searchable.", alias="isSearchable")
    log_settings: Optional[EnterpriseCrmEventbusProtoLogSettings] = Field(default=None, alias="logSettings")
    searchable: Optional[StrictStr] = None
    task_visibility: Optional[List[StrictStr]] = Field(default=None, description="List of tasks that can view this property, if empty then all.", alias="taskVisibility")
    __properties: ClassVar[List[str]] = ["dataType", "defaultValue", "isRequired", "isSearchable", "logSettings", "searchable", "taskVisibility"]

    @field_validator('data_type')
    def data_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['DATA_TYPE_UNSPECIFIED', 'EMAIL', 'URL', 'CURRENCY', 'TIMESTAMP', 'DOMAIN_NAME']):
            raise ValueError("must be one of enum values ('DATA_TYPE_UNSPECIFIED', 'EMAIL', 'URL', 'CURRENCY', 'TIMESTAMP', 'DOMAIN_NAME')")
        return value

    @field_validator('searchable')
    def searchable_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['UNSPECIFIED', 'true', 'false']):
            raise ValueError("must be one of enum values ('UNSPECIFIED', 'true', 'false')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of EnterpriseCrmEventbusProtoAttributes from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of default_value
        if self.default_value:
            _dict['defaultValue'] = self.default_value.to_dict()
        # override the default output from pydantic by calling `to_dict()` of log_settings
        if self.log_settings:
            _dict['logSettings'] = self.log_settings.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of EnterpriseCrmEventbusProtoAttributes from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "dataType": obj.get("dataType"),
            "defaultValue": EnterpriseCrmEventbusProtoValueType.from_dict(obj["defaultValue"]) if obj.get("defaultValue") is not None else None,
            "isRequired": obj.get("isRequired"),
            "isSearchable": obj.get("isSearchable"),
            "logSettings": EnterpriseCrmEventbusProtoLogSettings.from_dict(obj["logSettings"]) if obj.get("logSettings") is not None else None,
            "searchable": obj.get("searchable"),
            "taskVisibility": obj.get("taskVisibility")
        })
        return _obj



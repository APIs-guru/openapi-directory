# coding: utf-8

"""
    Application Integration API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudIntegrationsV1alphaSfdcInstance(BaseModel):
    """
    The SfdcInstance resource use to hold channels and connection config data.
    """ # noqa: E501
    auth_config_id: Optional[List[StrictStr]] = Field(default=None, description="A list of AuthConfigs that can be tried to open the channel to SFDC", alias="authConfigId")
    create_time: Optional[StrictStr] = Field(default=None, description="Output only. Time when the instance is created", alias="createTime")
    delete_time: Optional[StrictStr] = Field(default=None, description="Output only. Time when the instance was deleted. Empty if not deleted.", alias="deleteTime")
    description: Optional[StrictStr] = Field(default=None, description="A description of the sfdc instance.")
    display_name: Optional[StrictStr] = Field(default=None, description="User selected unique name/alias to easily reference an instance.", alias="displayName")
    name: Optional[StrictStr] = Field(default=None, description="Resource name of the SFDC instance projects/{project}/locations/{location}/sfdcInstances/{sfdcInstance}.")
    service_authority: Optional[StrictStr] = Field(default=None, description="URL used for API calls after authentication (the login authority is configured within the referenced AuthConfig).", alias="serviceAuthority")
    sfdc_org_id: Optional[StrictStr] = Field(default=None, description="The SFDC Org Id. This is defined in salesforce.", alias="sfdcOrgId")
    update_time: Optional[StrictStr] = Field(default=None, description="Output only. Time when the instance was last updated", alias="updateTime")
    __properties: ClassVar[List[str]] = ["authConfigId", "createTime", "deleteTime", "description", "displayName", "name", "serviceAuthority", "sfdcOrgId", "updateTime"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudIntegrationsV1alphaSfdcInstance from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "create_time",
            "delete_time",
            "update_time",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudIntegrationsV1alphaSfdcInstance from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "authConfigId": obj.get("authConfigId"),
            "createTime": obj.get("createTime"),
            "deleteTime": obj.get("deleteTime"),
            "description": obj.get("description"),
            "displayName": obj.get("displayName"),
            "name": obj.get("name"),
            "serviceAuthority": obj.get("serviceAuthority"),
            "sfdcOrgId": obj.get("sfdcOrgId"),
            "updateTime": obj.get("updateTime")
        })
        return _obj



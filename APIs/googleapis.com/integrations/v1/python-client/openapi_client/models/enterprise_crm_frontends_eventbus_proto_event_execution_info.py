# coding: utf-8

"""
    Application Integration API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.crmlog_error_code import CrmlogErrorCode
from openapi_client.models.enterprise_crm_eventbus_proto_error_detail import EnterpriseCrmEventbusProtoErrorDetail
from openapi_client.models.enterprise_crm_eventbus_proto_execution_trace_info import EnterpriseCrmEventbusProtoExecutionTraceInfo
from openapi_client.models.enterprise_crm_frontends_eventbus_proto_event_execution_details import EnterpriseCrmFrontendsEventbusProtoEventExecutionDetails
from openapi_client.models.enterprise_crm_frontends_eventbus_proto_event_parameters import EnterpriseCrmFrontendsEventbusProtoEventParameters
from typing import Optional, Set
from typing_extensions import Self

class EnterpriseCrmFrontendsEventbusProtoEventExecutionInfo(BaseModel):
    """
    Contains all the execution details for a workflow instance. Next available id: 24
    """ # noqa: E501
    client_id: Optional[StrictStr] = Field(default=None, description="The event data user sends as request.", alias="clientId")
    create_time: Optional[StrictStr] = Field(default=None, description="Auto-generated.", alias="createTime")
    error_code: Optional[CrmlogErrorCode] = Field(default=None, alias="errorCode")
    errors: Optional[List[EnterpriseCrmEventbusProtoErrorDetail]] = Field(default=None, description="Errors, warnings, and informationals associated with the workflow/task. The order in which the errors were added by the workflow/task is maintained.")
    event_execution_details: Optional[EnterpriseCrmFrontendsEventbusProtoEventExecutionDetails] = Field(default=None, alias="eventExecutionDetails")
    event_execution_info_id: Optional[StrictStr] = Field(default=None, description="Auto-generated primary key.", alias="eventExecutionInfoId")
    execution_trace_info: Optional[EnterpriseCrmEventbusProtoExecutionTraceInfo] = Field(default=None, alias="executionTraceInfo")
    last_modified_time: Optional[StrictStr] = Field(default=None, description="Auto-generated.", alias="lastModifiedTime")
    post_method: Optional[StrictStr] = Field(default=None, description="The ways user posts this event.", alias="postMethod")
    product: Optional[StrictStr] = Field(default=None, description="Which Google product the execution_info belongs to. If not set, the execution_info belongs to Integration Platform by default.")
    request_id: Optional[StrictStr] = Field(default=None, description="Optional. This is used to de-dup incoming request.", alias="requestId")
    request_params: Optional[EnterpriseCrmFrontendsEventbusProtoEventParameters] = Field(default=None, alias="requestParams")
    response_params: Optional[EnterpriseCrmFrontendsEventbusProtoEventParameters] = Field(default=None, alias="responseParams")
    snapshot_number: Optional[StrictStr] = Field(default=None, description="Workflow snapshot number.", alias="snapshotNumber")
    tenant: Optional[StrictStr] = Field(default=None, description="Tenant this event is created. Used to reschedule the event to correct tenant.")
    trigger_id: Optional[StrictStr] = Field(default=None, description="The trigger id of the workflow trigger config. If both trigger_id and client_id is present, the workflow is executed from the start tasks provided by the matching trigger config otherwise it is executed from the default start tasks.", alias="triggerId")
    workflow_id: Optional[StrictStr] = Field(default=None, description="Required. Pointer to the workflow it is executing.", alias="workflowId")
    workflow_name: Optional[StrictStr] = Field(default=None, description="Name of the workflow.", alias="workflowName")
    workflow_retry_backoff_interval_seconds: Optional[StrictStr] = Field(default=None, description="Time interval in seconds to schedule retry of workflow in manifold when workflow is already running", alias="workflowRetryBackoffIntervalSeconds")
    __properties: ClassVar[List[str]] = ["clientId", "createTime", "errorCode", "errors", "eventExecutionDetails", "eventExecutionInfoId", "executionTraceInfo", "lastModifiedTime", "postMethod", "product", "requestId", "requestParams", "responseParams", "snapshotNumber", "tenant", "triggerId", "workflowId", "workflowName", "workflowRetryBackoffIntervalSeconds"]

    @field_validator('post_method')
    def post_method_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['UNSPECIFIED', 'POST', 'POST_TO_QUEUE', 'SCHEDULE', 'POST_BY_EVENT_CONFIG_ID', 'POST_WITH_EVENT_DETAILS']):
            raise ValueError("must be one of enum values ('UNSPECIFIED', 'POST', 'POST_TO_QUEUE', 'SCHEDULE', 'POST_BY_EVENT_CONFIG_ID', 'POST_WITH_EVENT_DETAILS')")
        return value

    @field_validator('product')
    def product_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['UNSPECIFIED_PRODUCT', 'IP', 'APIGEE', 'SECURITY']):
            raise ValueError("must be one of enum values ('UNSPECIFIED_PRODUCT', 'IP', 'APIGEE', 'SECURITY')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of EnterpriseCrmFrontendsEventbusProtoEventExecutionInfo from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of error_code
        if self.error_code:
            _dict['errorCode'] = self.error_code.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in errors (list)
        _items = []
        if self.errors:
            for _item_errors in self.errors:
                if _item_errors:
                    _items.append(_item_errors.to_dict())
            _dict['errors'] = _items
        # override the default output from pydantic by calling `to_dict()` of event_execution_details
        if self.event_execution_details:
            _dict['eventExecutionDetails'] = self.event_execution_details.to_dict()
        # override the default output from pydantic by calling `to_dict()` of execution_trace_info
        if self.execution_trace_info:
            _dict['executionTraceInfo'] = self.execution_trace_info.to_dict()
        # override the default output from pydantic by calling `to_dict()` of request_params
        if self.request_params:
            _dict['requestParams'] = self.request_params.to_dict()
        # override the default output from pydantic by calling `to_dict()` of response_params
        if self.response_params:
            _dict['responseParams'] = self.response_params.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of EnterpriseCrmFrontendsEventbusProtoEventExecutionInfo from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "clientId": obj.get("clientId"),
            "createTime": obj.get("createTime"),
            "errorCode": CrmlogErrorCode.from_dict(obj["errorCode"]) if obj.get("errorCode") is not None else None,
            "errors": [EnterpriseCrmEventbusProtoErrorDetail.from_dict(_item) for _item in obj["errors"]] if obj.get("errors") is not None else None,
            "eventExecutionDetails": EnterpriseCrmFrontendsEventbusProtoEventExecutionDetails.from_dict(obj["eventExecutionDetails"]) if obj.get("eventExecutionDetails") is not None else None,
            "eventExecutionInfoId": obj.get("eventExecutionInfoId"),
            "executionTraceInfo": EnterpriseCrmEventbusProtoExecutionTraceInfo.from_dict(obj["executionTraceInfo"]) if obj.get("executionTraceInfo") is not None else None,
            "lastModifiedTime": obj.get("lastModifiedTime"),
            "postMethod": obj.get("postMethod"),
            "product": obj.get("product"),
            "requestId": obj.get("requestId"),
            "requestParams": EnterpriseCrmFrontendsEventbusProtoEventParameters.from_dict(obj["requestParams"]) if obj.get("requestParams") is not None else None,
            "responseParams": EnterpriseCrmFrontendsEventbusProtoEventParameters.from_dict(obj["responseParams"]) if obj.get("responseParams") is not None else None,
            "snapshotNumber": obj.get("snapshotNumber"),
            "tenant": obj.get("tenant"),
            "triggerId": obj.get("triggerId"),
            "workflowId": obj.get("workflowId"),
            "workflowName": obj.get("workflowName"),
            "workflowRetryBackoffIntervalSeconds": obj.get("workflowRetryBackoffIntervalSeconds")
        })
        return _obj



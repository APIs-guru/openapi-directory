# coding: utf-8

"""
    Application Integration API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_cloud_connectors_v1_config_variable import GoogleCloudConnectorsV1ConfigVariable
from openapi_client.models.google_cloud_connectors_v1_secret import GoogleCloudConnectorsV1Secret
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudConnectorsV1SslConfig(BaseModel):
    """
    SSL Configuration of a connection
    """ # noqa: E501
    additional_variables: Optional[List[GoogleCloudConnectorsV1ConfigVariable]] = Field(default=None, description="Additional SSL related field values", alias="additionalVariables")
    client_cert_type: Optional[StrictStr] = Field(default=None, description="Type of Client Cert (PEM/JKS/.. etc.)", alias="clientCertType")
    client_certificate: Optional[GoogleCloudConnectorsV1Secret] = Field(default=None, alias="clientCertificate")
    client_private_key: Optional[GoogleCloudConnectorsV1Secret] = Field(default=None, alias="clientPrivateKey")
    client_private_key_pass: Optional[GoogleCloudConnectorsV1Secret] = Field(default=None, alias="clientPrivateKeyPass")
    private_server_certificate: Optional[GoogleCloudConnectorsV1Secret] = Field(default=None, alias="privateServerCertificate")
    server_cert_type: Optional[StrictStr] = Field(default=None, description="Type of Server Cert (PEM/JKS/.. etc.)", alias="serverCertType")
    trust_model: Optional[StrictStr] = Field(default=None, description="Trust Model of the SSL connection", alias="trustModel")
    type: Optional[StrictStr] = Field(default=None, description="Controls the ssl type for the given connector version.")
    use_ssl: Optional[StrictBool] = Field(default=None, description="Bool for enabling SSL", alias="useSsl")
    __properties: ClassVar[List[str]] = ["additionalVariables", "clientCertType", "clientCertificate", "clientPrivateKey", "clientPrivateKeyPass", "privateServerCertificate", "serverCertType", "trustModel", "type", "useSsl"]

    @field_validator('client_cert_type')
    def client_cert_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['CERT_TYPE_UNSPECIFIED', 'PEM']):
            raise ValueError("must be one of enum values ('CERT_TYPE_UNSPECIFIED', 'PEM')")
        return value

    @field_validator('server_cert_type')
    def server_cert_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['CERT_TYPE_UNSPECIFIED', 'PEM']):
            raise ValueError("must be one of enum values ('CERT_TYPE_UNSPECIFIED', 'PEM')")
        return value

    @field_validator('trust_model')
    def trust_model_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['PUBLIC', 'PRIVATE', 'INSECURE']):
            raise ValueError("must be one of enum values ('PUBLIC', 'PRIVATE', 'INSECURE')")
        return value

    @field_validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['SSL_TYPE_UNSPECIFIED', 'TLS', 'MTLS']):
            raise ValueError("must be one of enum values ('SSL_TYPE_UNSPECIFIED', 'TLS', 'MTLS')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudConnectorsV1SslConfig from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in additional_variables (list)
        _items = []
        if self.additional_variables:
            for _item_additional_variables in self.additional_variables:
                if _item_additional_variables:
                    _items.append(_item_additional_variables.to_dict())
            _dict['additionalVariables'] = _items
        # override the default output from pydantic by calling `to_dict()` of client_certificate
        if self.client_certificate:
            _dict['clientCertificate'] = self.client_certificate.to_dict()
        # override the default output from pydantic by calling `to_dict()` of client_private_key
        if self.client_private_key:
            _dict['clientPrivateKey'] = self.client_private_key.to_dict()
        # override the default output from pydantic by calling `to_dict()` of client_private_key_pass
        if self.client_private_key_pass:
            _dict['clientPrivateKeyPass'] = self.client_private_key_pass.to_dict()
        # override the default output from pydantic by calling `to_dict()` of private_server_certificate
        if self.private_server_certificate:
            _dict['privateServerCertificate'] = self.private_server_certificate.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudConnectorsV1SslConfig from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "additionalVariables": [GoogleCloudConnectorsV1ConfigVariable.from_dict(_item) for _item in obj["additionalVariables"]] if obj.get("additionalVariables") is not None else None,
            "clientCertType": obj.get("clientCertType"),
            "clientCertificate": GoogleCloudConnectorsV1Secret.from_dict(obj["clientCertificate"]) if obj.get("clientCertificate") is not None else None,
            "clientPrivateKey": GoogleCloudConnectorsV1Secret.from_dict(obj["clientPrivateKey"]) if obj.get("clientPrivateKey") is not None else None,
            "clientPrivateKeyPass": GoogleCloudConnectorsV1Secret.from_dict(obj["clientPrivateKeyPass"]) if obj.get("clientPrivateKeyPass") is not None else None,
            "privateServerCertificate": GoogleCloudConnectorsV1Secret.from_dict(obj["privateServerCertificate"]) if obj.get("privateServerCertificate") is not None else None,
            "serverCertType": obj.get("serverCertType"),
            "trustModel": obj.get("trustModel"),
            "type": obj.get("type"),
            "useSsl": obj.get("useSsl")
        })
        return _obj



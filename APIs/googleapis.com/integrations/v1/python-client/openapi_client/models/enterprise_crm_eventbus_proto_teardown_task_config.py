# coding: utf-8

"""
    Application Integration API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.enterprise_crm_eventbus_proto_event_bus_properties import EnterpriseCrmEventbusProtoEventBusProperties
from openapi_client.models.enterprise_crm_eventbus_proto_event_parameters import EnterpriseCrmEventbusProtoEventParameters
from openapi_client.models.enterprise_crm_eventbus_proto_next_teardown_task import EnterpriseCrmEventbusProtoNextTeardownTask
from typing import Optional, Set
from typing_extensions import Self

class EnterpriseCrmEventbusProtoTeardownTaskConfig(BaseModel):
    """
    EnterpriseCrmEventbusProtoTeardownTaskConfig
    """ # noqa: E501
    creator_email: Optional[StrictStr] = Field(default=None, description="The creator's email address.", alias="creatorEmail")
    name: Optional[StrictStr] = Field(default=None, description="Required. Unique identifier of the teardown task within this Config. We use this field as the identifier to find next teardown tasks.")
    next_teardown_task: Optional[EnterpriseCrmEventbusProtoNextTeardownTask] = Field(default=None, alias="nextTeardownTask")
    parameters: Optional[EnterpriseCrmEventbusProtoEventParameters] = None
    properties: Optional[EnterpriseCrmEventbusProtoEventBusProperties] = None
    teardown_task_implementation_class_name: Optional[StrictStr] = Field(default=None, description="Required. Implementation class name.", alias="teardownTaskImplementationClassName")
    __properties: ClassVar[List[str]] = ["creatorEmail", "name", "nextTeardownTask", "parameters", "properties", "teardownTaskImplementationClassName"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of EnterpriseCrmEventbusProtoTeardownTaskConfig from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of next_teardown_task
        if self.next_teardown_task:
            _dict['nextTeardownTask'] = self.next_teardown_task.to_dict()
        # override the default output from pydantic by calling `to_dict()` of parameters
        if self.parameters:
            _dict['parameters'] = self.parameters.to_dict()
        # override the default output from pydantic by calling `to_dict()` of properties
        if self.properties:
            _dict['properties'] = self.properties.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of EnterpriseCrmEventbusProtoTeardownTaskConfig from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "creatorEmail": obj.get("creatorEmail"),
            "name": obj.get("name"),
            "nextTeardownTask": EnterpriseCrmEventbusProtoNextTeardownTask.from_dict(obj["nextTeardownTask"]) if obj.get("nextTeardownTask") is not None else None,
            "parameters": EnterpriseCrmEventbusProtoEventParameters.from_dict(obj["parameters"]) if obj.get("parameters") is not None else None,
            "properties": EnterpriseCrmEventbusProtoEventBusProperties.from_dict(obj["properties"]) if obj.get("properties") is not None else None,
            "teardownTaskImplementationClassName": obj.get("teardownTaskImplementationClassName")
        })
        return _obj



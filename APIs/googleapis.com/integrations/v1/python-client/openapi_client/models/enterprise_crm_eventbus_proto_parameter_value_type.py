# coding: utf-8

"""
    Application Integration API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from openapi_client.models.enterprise_crm_eventbus_proto_boolean_parameter_array import EnterpriseCrmEventbusProtoBooleanParameterArray
from openapi_client.models.enterprise_crm_eventbus_proto_double_parameter_array import EnterpriseCrmEventbusProtoDoubleParameterArray
from openapi_client.models.enterprise_crm_eventbus_proto_int_parameter_array import EnterpriseCrmEventbusProtoIntParameterArray
from openapi_client.models.enterprise_crm_eventbus_proto_proto_parameter_array import EnterpriseCrmEventbusProtoProtoParameterArray
from openapi_client.models.enterprise_crm_eventbus_proto_serialized_object_parameter import EnterpriseCrmEventbusProtoSerializedObjectParameter
from openapi_client.models.enterprise_crm_eventbus_proto_string_parameter_array import EnterpriseCrmEventbusProtoStringParameterArray
from typing import Optional, Set
from typing_extensions import Self

class EnterpriseCrmEventbusProtoParameterValueType(BaseModel):
    """
    LINT.IfChange To support various types of parameter values. Next available id: 14
    """ # noqa: E501
    boolean_array: Optional[EnterpriseCrmEventbusProtoBooleanParameterArray] = Field(default=None, alias="booleanArray")
    boolean_value: Optional[StrictBool] = Field(default=None, alias="booleanValue")
    double_array: Optional[EnterpriseCrmEventbusProtoDoubleParameterArray] = Field(default=None, alias="doubleArray")
    double_value: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="doubleValue")
    int_array: Optional[EnterpriseCrmEventbusProtoIntParameterArray] = Field(default=None, alias="intArray")
    int_value: Optional[StrictStr] = Field(default=None, alias="intValue")
    proto_array: Optional[EnterpriseCrmEventbusProtoProtoParameterArray] = Field(default=None, alias="protoArray")
    proto_value: Optional[Dict[str, Any]] = Field(default=None, alias="protoValue")
    serialized_object_value: Optional[EnterpriseCrmEventbusProtoSerializedObjectParameter] = Field(default=None, alias="serializedObjectValue")
    string_array: Optional[EnterpriseCrmEventbusProtoStringParameterArray] = Field(default=None, alias="stringArray")
    string_value: Optional[StrictStr] = Field(default=None, alias="stringValue")
    __properties: ClassVar[List[str]] = ["booleanArray", "booleanValue", "doubleArray", "doubleValue", "intArray", "intValue", "protoArray", "protoValue", "serializedObjectValue", "stringArray", "stringValue"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of EnterpriseCrmEventbusProtoParameterValueType from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of boolean_array
        if self.boolean_array:
            _dict['booleanArray'] = self.boolean_array.to_dict()
        # override the default output from pydantic by calling `to_dict()` of double_array
        if self.double_array:
            _dict['doubleArray'] = self.double_array.to_dict()
        # override the default output from pydantic by calling `to_dict()` of int_array
        if self.int_array:
            _dict['intArray'] = self.int_array.to_dict()
        # override the default output from pydantic by calling `to_dict()` of proto_array
        if self.proto_array:
            _dict['protoArray'] = self.proto_array.to_dict()
        # override the default output from pydantic by calling `to_dict()` of serialized_object_value
        if self.serialized_object_value:
            _dict['serializedObjectValue'] = self.serialized_object_value.to_dict()
        # override the default output from pydantic by calling `to_dict()` of string_array
        if self.string_array:
            _dict['stringArray'] = self.string_array.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of EnterpriseCrmEventbusProtoParameterValueType from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "booleanArray": EnterpriseCrmEventbusProtoBooleanParameterArray.from_dict(obj["booleanArray"]) if obj.get("booleanArray") is not None else None,
            "booleanValue": obj.get("booleanValue"),
            "doubleArray": EnterpriseCrmEventbusProtoDoubleParameterArray.from_dict(obj["doubleArray"]) if obj.get("doubleArray") is not None else None,
            "doubleValue": obj.get("doubleValue"),
            "intArray": EnterpriseCrmEventbusProtoIntParameterArray.from_dict(obj["intArray"]) if obj.get("intArray") is not None else None,
            "intValue": obj.get("intValue"),
            "protoArray": EnterpriseCrmEventbusProtoProtoParameterArray.from_dict(obj["protoArray"]) if obj.get("protoArray") is not None else None,
            "protoValue": obj.get("protoValue"),
            "serializedObjectValue": EnterpriseCrmEventbusProtoSerializedObjectParameter.from_dict(obj["serializedObjectValue"]) if obj.get("serializedObjectValue") is not None else None,
            "stringArray": EnterpriseCrmEventbusProtoStringParameterArray.from_dict(obj["stringArray"]) if obj.get("stringArray") is not None else None,
            "stringValue": obj.get("stringValue")
        })
        return _obj



# coding: utf-8

"""
    Application Integration API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBytes, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from openapi_client.models.enterprise_crm_eventbus_proto_cloud_kms_config import EnterpriseCrmEventbusProtoCloudKmsConfig
from openapi_client.models.enterprise_crm_eventbus_proto_external_traffic import EnterpriseCrmEventbusProtoExternalTraffic
from openapi_client.models.enterprise_crm_eventbus_proto_suspension_config import EnterpriseCrmEventbusProtoSuspensionConfig
from openapi_client.models.enterprise_crm_eventbus_proto_suspension_resolution_info_audit import EnterpriseCrmEventbusProtoSuspensionResolutionInfoAudit
from typing import Optional, Set
from typing_extensions import Self

class EnterpriseCrmEventbusProtoSuspensionResolutionInfo(BaseModel):
    """
    EnterpriseCrmEventbusProtoSuspensionResolutionInfo
    """ # noqa: E501
    audit: Optional[EnterpriseCrmEventbusProtoSuspensionResolutionInfoAudit] = None
    client_id: Optional[StrictStr] = Field(default=None, description="The event data user sends as request.", alias="clientId")
    cloud_kms_config: Optional[EnterpriseCrmEventbusProtoCloudKmsConfig] = Field(default=None, alias="cloudKmsConfig")
    created_timestamp: Optional[StrictStr] = Field(default=None, description="Auto-generated.", alias="createdTimestamp")
    encrypted_suspension_resolution_info: Optional[Union[StrictBytes, StrictStr]] = Field(default=None, description="Encrypted SuspensionResolutionInfo", alias="encryptedSuspensionResolutionInfo")
    event_execution_info_id: Optional[StrictStr] = Field(default=None, description="Required. ID of the associated execution.", alias="eventExecutionInfoId")
    external_traffic: Optional[EnterpriseCrmEventbusProtoExternalTraffic] = Field(default=None, alias="externalTraffic")
    last_modified_timestamp: Optional[StrictStr] = Field(default=None, description="Auto-generated.", alias="lastModifiedTimestamp")
    product: Optional[StrictStr] = Field(default=None, description="Which Google product the suspension belongs to. If not set, the suspension belongs to Integration Platform by default.")
    status: Optional[StrictStr] = None
    suspension_config: Optional[EnterpriseCrmEventbusProtoSuspensionConfig] = Field(default=None, alias="suspensionConfig")
    suspension_id: Optional[StrictStr] = Field(default=None, description="Primary key for the SuspensionResolutionInfoTable.", alias="suspensionId")
    task_number: Optional[StrictStr] = Field(default=None, description="Required. Task number of the associated SuspensionTask.", alias="taskNumber")
    workflow_name: Optional[StrictStr] = Field(default=None, description="Required. The name of the originating workflow.", alias="workflowName")
    wrapped_dek: Optional[Union[StrictBytes, StrictStr]] = Field(default=None, description="Wrapped dek", alias="wrappedDek")
    __properties: ClassVar[List[str]] = ["audit", "clientId", "cloudKmsConfig", "createdTimestamp", "encryptedSuspensionResolutionInfo", "eventExecutionInfoId", "externalTraffic", "lastModifiedTimestamp", "product", "status", "suspensionConfig", "suspensionId", "taskNumber", "workflowName", "wrappedDek"]

    @field_validator('product')
    def product_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['UNSPECIFIED_PRODUCT', 'IP', 'APIGEE', 'SECURITY']):
            raise ValueError("must be one of enum values ('UNSPECIFIED_PRODUCT', 'IP', 'APIGEE', 'SECURITY')")
        return value

    @field_validator('status')
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['PENDING_UNSPECIFIED', 'REJECTED', 'LIFTED', 'CANCELED']):
            raise ValueError("must be one of enum values ('PENDING_UNSPECIFIED', 'REJECTED', 'LIFTED', 'CANCELED')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of EnterpriseCrmEventbusProtoSuspensionResolutionInfo from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of audit
        if self.audit:
            _dict['audit'] = self.audit.to_dict()
        # override the default output from pydantic by calling `to_dict()` of cloud_kms_config
        if self.cloud_kms_config:
            _dict['cloudKmsConfig'] = self.cloud_kms_config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of external_traffic
        if self.external_traffic:
            _dict['externalTraffic'] = self.external_traffic.to_dict()
        # override the default output from pydantic by calling `to_dict()` of suspension_config
        if self.suspension_config:
            _dict['suspensionConfig'] = self.suspension_config.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of EnterpriseCrmEventbusProtoSuspensionResolutionInfo from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "audit": EnterpriseCrmEventbusProtoSuspensionResolutionInfoAudit.from_dict(obj["audit"]) if obj.get("audit") is not None else None,
            "clientId": obj.get("clientId"),
            "cloudKmsConfig": EnterpriseCrmEventbusProtoCloudKmsConfig.from_dict(obj["cloudKmsConfig"]) if obj.get("cloudKmsConfig") is not None else None,
            "createdTimestamp": obj.get("createdTimestamp"),
            "encryptedSuspensionResolutionInfo": obj.get("encryptedSuspensionResolutionInfo"),
            "eventExecutionInfoId": obj.get("eventExecutionInfoId"),
            "externalTraffic": EnterpriseCrmEventbusProtoExternalTraffic.from_dict(obj["externalTraffic"]) if obj.get("externalTraffic") is not None else None,
            "lastModifiedTimestamp": obj.get("lastModifiedTimestamp"),
            "product": obj.get("product"),
            "status": obj.get("status"),
            "suspensionConfig": EnterpriseCrmEventbusProtoSuspensionConfig.from_dict(obj["suspensionConfig"]) if obj.get("suspensionConfig") is not None else None,
            "suspensionId": obj.get("suspensionId"),
            "taskNumber": obj.get("taskNumber"),
            "workflowName": obj.get("workflowName"),
            "wrappedDek": obj.get("wrappedDek")
        })
        return _obj



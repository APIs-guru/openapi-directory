# coding: utf-8

"""
    Application Integration API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class CrmlogErrorCode(BaseModel):
    """
    Registered ids for errors, as \"oneof\" enums. Each task or logical grouping of tasks may share the same enum.
    """ # noqa: E501
    common_error_code: Optional[StrictStr] = Field(default=None, alias="commonErrorCode")
    __properties: ClassVar[List[str]] = ["commonErrorCode"]

    @field_validator('common_error_code')
    def common_error_code_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['COMMON_ERROR_CODE_UNSPECIFIED', 'INVALID_CREDENTIALS', 'REQUIRED_FIELDS_MISSING', 'INVALID_FIELDS', 'BACKEND', 'GENERAL', 'INTERNAL', 'IO_ERROR', 'NOT_FOUND', 'EVENT_BUS', 'ALREADY_EXISTS', 'CONCORD', 'CONVERSION', 'FLUME', 'PERMISSION', 'SALES_FORCE', 'SPANNER', 'UNIMPLEMENTED', 'RELTIO', 'WORKFLOW_NOT_FOUND', 'QUOTA_THROTTLED', 'QUOTA_ENQUEUED', 'INVALID_QUOTA_CONFIGURATION', 'TASK_NOT_FOUND', 'EXECUTION_TIMEOUT', 'INVALID_EVENT_EXECUTION_STATE', 'INVALID_ATTRIBUTE', 'MISSING_ATTRIBUTE', 'CLIENT_UNAUTHORIZED_FOR_WORKFLOW', 'INVALID_PARAMETER', 'MISSING_PARAMETER', 'UNAUTHROIZED_WORKFLOW_EDITOR_ACTION', 'FAILED_PRECONDITION', 'INVALID_CLIENT', 'MISSING_CLIENT', 'INVALID_WORKFLOW', 'MISSING_QUOTA_CONFIGURATION', 'UNHANDLED_TASK_ERROR', 'SCRIPT_TASK_RUNTIME_ERROR', 'RPC', 'INVALID_PROTO', 'UNHANDLED_EVENTBUS_ERROR', 'INVALID_TASK_STATE', 'TYPED_TASK_INVALID_INPUT_OPERATION', 'TYPED_TASK_INVALID_OUTPUT_OPERATION', 'VALIDATION_ERROR', 'RESUME_ERROR', 'APPS_SCRIPT_EXECUTION_ERROR', 'INVALID_VECTOR_USER', 'INFORMATICA', 'RETRYABLE_TASK_ERROR', 'INVALID_TENANT', 'WRONG_TENANT', 'INFORMATICA_BACKEND_UNAVAILABLE', 'RPC_PERMISSION_DENIED', 'SYNC_EVENTBUS_EXECUTION_TIMEOUT', 'ASYNC_EVENTBUS_EXECUTION_TIMEOUT', 'NOT_SUPPORTED_DATA_TYPE', 'UNSANITIZED_USER_INPUT', 'TRANSFORM_EXPRESSION_EVALUATION_ERROR', 'HTTP_EXCEPTION', 'EXECUTION_CANCELLED']):
            raise ValueError("must be one of enum values ('COMMON_ERROR_CODE_UNSPECIFIED', 'INVALID_CREDENTIALS', 'REQUIRED_FIELDS_MISSING', 'INVALID_FIELDS', 'BACKEND', 'GENERAL', 'INTERNAL', 'IO_ERROR', 'NOT_FOUND', 'EVENT_BUS', 'ALREADY_EXISTS', 'CONCORD', 'CONVERSION', 'FLUME', 'PERMISSION', 'SALES_FORCE', 'SPANNER', 'UNIMPLEMENTED', 'RELTIO', 'WORKFLOW_NOT_FOUND', 'QUOTA_THROTTLED', 'QUOTA_ENQUEUED', 'INVALID_QUOTA_CONFIGURATION', 'TASK_NOT_FOUND', 'EXECUTION_TIMEOUT', 'INVALID_EVENT_EXECUTION_STATE', 'INVALID_ATTRIBUTE', 'MISSING_ATTRIBUTE', 'CLIENT_UNAUTHORIZED_FOR_WORKFLOW', 'INVALID_PARAMETER', 'MISSING_PARAMETER', 'UNAUTHROIZED_WORKFLOW_EDITOR_ACTION', 'FAILED_PRECONDITION', 'INVALID_CLIENT', 'MISSING_CLIENT', 'INVALID_WORKFLOW', 'MISSING_QUOTA_CONFIGURATION', 'UNHANDLED_TASK_ERROR', 'SCRIPT_TASK_RUNTIME_ERROR', 'RPC', 'INVALID_PROTO', 'UNHANDLED_EVENTBUS_ERROR', 'INVALID_TASK_STATE', 'TYPED_TASK_INVALID_INPUT_OPERATION', 'TYPED_TASK_INVALID_OUTPUT_OPERATION', 'VALIDATION_ERROR', 'RESUME_ERROR', 'APPS_SCRIPT_EXECUTION_ERROR', 'INVALID_VECTOR_USER', 'INFORMATICA', 'RETRYABLE_TASK_ERROR', 'INVALID_TENANT', 'WRONG_TENANT', 'INFORMATICA_BACKEND_UNAVAILABLE', 'RPC_PERMISSION_DENIED', 'SYNC_EVENTBUS_EXECUTION_TIMEOUT', 'ASYNC_EVENTBUS_EXECUTION_TIMEOUT', 'NOT_SUPPORTED_DATA_TYPE', 'UNSANITIZED_USER_INPUT', 'TRANSFORM_EXPRESSION_EVALUATION_ERROR', 'HTTP_EXCEPTION', 'EXECUTION_CANCELLED')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CrmlogErrorCode from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CrmlogErrorCode from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "commonErrorCode": obj.get("commonErrorCode")
        })
        return _obj



# coding: utf-8

"""
    Application Integration API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.enterprise_crm_eventbus_proto_event_parameters import EnterpriseCrmEventbusProtoEventParameters
from openapi_client.models.enterprise_crm_frontends_eventbus_proto_parameter_entry import EnterpriseCrmFrontendsEventbusProtoParameterEntry
from openapi_client.models.google_cloud_integrations_v1alpha_value_type import GoogleCloudIntegrationsV1alphaValueType
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudIntegrationsV1alphaScheduleIntegrationsRequest(BaseModel):
    """
    The request for scheduling an integration.
    """ # noqa: E501
    input_parameters: Optional[Dict[str, GoogleCloudIntegrationsV1alphaValueType]] = Field(default=None, description="Optional. Input parameters used by integration execution.", alias="inputParameters")
    parameter_entries: Optional[List[EnterpriseCrmFrontendsEventbusProtoParameterEntry]] = Field(default=None, description="Parameters are a part of Event and can be used to communicate between different tasks that are part of the same integration execution.", alias="parameterEntries")
    parameters: Optional[EnterpriseCrmEventbusProtoEventParameters] = None
    request_id: Optional[StrictStr] = Field(default=None, description="This is used to de-dup incoming request: if the duplicate request was detected, the response from the previous execution is returned.", alias="requestId")
    schedule_time: Optional[StrictStr] = Field(default=None, description="The time that the integration should be executed. If the time is less or equal to the current time, the integration is executed immediately.", alias="scheduleTime")
    trigger_id: Optional[StrictStr] = Field(default=None, description="Required. Matched against all {@link TriggerConfig}s across all integrations. i.e. TriggerConfig.trigger_id.equals(trigger_id)", alias="triggerId")
    __properties: ClassVar[List[str]] = ["inputParameters", "parameterEntries", "parameters", "requestId", "scheduleTime", "triggerId"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudIntegrationsV1alphaScheduleIntegrationsRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each value in input_parameters (dict)
        _field_dict = {}
        if self.input_parameters:
            for _key_input_parameters in self.input_parameters:
                if self.input_parameters[_key_input_parameters]:
                    _field_dict[_key_input_parameters] = self.input_parameters[_key_input_parameters].to_dict()
            _dict['inputParameters'] = _field_dict
        # override the default output from pydantic by calling `to_dict()` of each item in parameter_entries (list)
        _items = []
        if self.parameter_entries:
            for _item_parameter_entries in self.parameter_entries:
                if _item_parameter_entries:
                    _items.append(_item_parameter_entries.to_dict())
            _dict['parameterEntries'] = _items
        # override the default output from pydantic by calling `to_dict()` of parameters
        if self.parameters:
            _dict['parameters'] = self.parameters.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudIntegrationsV1alphaScheduleIntegrationsRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "inputParameters": dict(
                (_k, GoogleCloudIntegrationsV1alphaValueType.from_dict(_v))
                for _k, _v in obj["inputParameters"].items()
            )
            if obj.get("inputParameters") is not None
            else None,
            "parameterEntries": [EnterpriseCrmFrontendsEventbusProtoParameterEntry.from_dict(_item) for _item in obj["parameterEntries"]] if obj.get("parameterEntries") is not None else None,
            "parameters": EnterpriseCrmEventbusProtoEventParameters.from_dict(obj["parameters"]) if obj.get("parameters") is not None else None,
            "requestId": obj.get("requestId"),
            "scheduleTime": obj.get("scheduleTime"),
            "triggerId": obj.get("triggerId")
        })
        return _obj



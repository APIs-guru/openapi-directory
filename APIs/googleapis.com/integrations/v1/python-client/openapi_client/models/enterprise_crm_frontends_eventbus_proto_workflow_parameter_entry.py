# coding: utf-8

"""
    Application Integration API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.enterprise_crm_eventbus_proto_attributes import EnterpriseCrmEventbusProtoAttributes
from openapi_client.models.enterprise_crm_eventbus_proto_node_identifier import EnterpriseCrmEventbusProtoNodeIdentifier
from openapi_client.models.enterprise_crm_frontends_eventbus_proto_parameter_value_type import EnterpriseCrmFrontendsEventbusProtoParameterValueType
from typing import Optional, Set
from typing_extensions import Self

class EnterpriseCrmFrontendsEventbusProtoWorkflowParameterEntry(BaseModel):
    """
    EnterpriseCrmFrontendsEventbusProtoWorkflowParameterEntry
    """ # noqa: E501
    attributes: Optional[EnterpriseCrmEventbusProtoAttributes] = None
    children: Optional[List[EnterpriseCrmFrontendsEventbusProtoWorkflowParameterEntry]] = Field(default=None, description="Child parameters nested within this parameter. This field only applies to protobuf parameters")
    data_type: Optional[StrictStr] = Field(default=None, description="The data type of the parameter.", alias="dataType")
    default_value: Optional[EnterpriseCrmFrontendsEventbusProtoParameterValueType] = Field(default=None, alias="defaultValue")
    in_out_type: Optional[StrictStr] = Field(default=None, description="Specifies the input/output type for the parameter.", alias="inOutType")
    is_transient: Optional[StrictBool] = Field(default=None, description="Whether this parameter is a transient parameter.", alias="isTransient")
    json_schema: Optional[StrictStr] = Field(default=None, description="This schema will be used to validate runtime JSON-typed values of this parameter.", alias="jsonSchema")
    key: Optional[StrictStr] = Field(default=None, description="Key is used to retrieve the corresponding parameter value. This should be unique for a given fired event. These parameters must be predefined in the workflow definition.")
    name: Optional[StrictStr] = Field(default=None, description="The name (without prefix) to be displayed in the UI for this parameter. E.g. if the key is \"foo.bar.myName\", then the name would be \"myName\".")
    produced_by: Optional[EnterpriseCrmEventbusProtoNodeIdentifier] = Field(default=None, alias="producedBy")
    producer: Optional[StrictStr] = None
    proto_def_name: Optional[StrictStr] = Field(default=None, description="The name of the protobuf type if the parameter has a protobuf data type.", alias="protoDefName")
    proto_def_path: Optional[StrictStr] = Field(default=None, description="If the data type is of type proto or proto array, this field needs to be populated with the fully qualified proto name. This message, for example, would be \"enterprise.crm.frontends.eventbus.proto.WorkflowParameterEntry\".", alias="protoDefPath")
    __properties: ClassVar[List[str]] = ["attributes", "children", "dataType", "defaultValue", "inOutType", "isTransient", "jsonSchema", "key", "name", "producedBy", "producer", "protoDefName", "protoDefPath"]

    @field_validator('data_type')
    def data_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['DATA_TYPE_UNSPECIFIED', 'STRING_VALUE', 'INT_VALUE', 'DOUBLE_VALUE', 'BOOLEAN_VALUE', 'PROTO_VALUE', 'SERIALIZED_OBJECT_VALUE', 'STRING_ARRAY', 'INT_ARRAY', 'DOUBLE_ARRAY', 'PROTO_ARRAY', 'PROTO_ENUM', 'BOOLEAN_ARRAY', 'PROTO_ENUM_ARRAY', 'BYTES', 'BYTES_ARRAY', 'NON_SERIALIZABLE_OBJECT', 'JSON_VALUE']):
            raise ValueError("must be one of enum values ('DATA_TYPE_UNSPECIFIED', 'STRING_VALUE', 'INT_VALUE', 'DOUBLE_VALUE', 'BOOLEAN_VALUE', 'PROTO_VALUE', 'SERIALIZED_OBJECT_VALUE', 'STRING_ARRAY', 'INT_ARRAY', 'DOUBLE_ARRAY', 'PROTO_ARRAY', 'PROTO_ENUM', 'BOOLEAN_ARRAY', 'PROTO_ENUM_ARRAY', 'BYTES', 'BYTES_ARRAY', 'NON_SERIALIZABLE_OBJECT', 'JSON_VALUE')")
        return value

    @field_validator('in_out_type')
    def in_out_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['IN_OUT_TYPE_UNSPECIFIED', 'IN', 'OUT', 'IN_OUT']):
            raise ValueError("must be one of enum values ('IN_OUT_TYPE_UNSPECIFIED', 'IN', 'OUT', 'IN_OUT')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of EnterpriseCrmFrontendsEventbusProtoWorkflowParameterEntry from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of attributes
        if self.attributes:
            _dict['attributes'] = self.attributes.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in children (list)
        _items = []
        if self.children:
            for _item_children in self.children:
                if _item_children:
                    _items.append(_item_children.to_dict())
            _dict['children'] = _items
        # override the default output from pydantic by calling `to_dict()` of default_value
        if self.default_value:
            _dict['defaultValue'] = self.default_value.to_dict()
        # override the default output from pydantic by calling `to_dict()` of produced_by
        if self.produced_by:
            _dict['producedBy'] = self.produced_by.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of EnterpriseCrmFrontendsEventbusProtoWorkflowParameterEntry from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "attributes": EnterpriseCrmEventbusProtoAttributes.from_dict(obj["attributes"]) if obj.get("attributes") is not None else None,
            "children": [EnterpriseCrmFrontendsEventbusProtoWorkflowParameterEntry.from_dict(_item) for _item in obj["children"]] if obj.get("children") is not None else None,
            "dataType": obj.get("dataType"),
            "defaultValue": EnterpriseCrmFrontendsEventbusProtoParameterValueType.from_dict(obj["defaultValue"]) if obj.get("defaultValue") is not None else None,
            "inOutType": obj.get("inOutType"),
            "isTransient": obj.get("isTransient"),
            "jsonSchema": obj.get("jsonSchema"),
            "key": obj.get("key"),
            "name": obj.get("name"),
            "producedBy": EnterpriseCrmEventbusProtoNodeIdentifier.from_dict(obj["producedBy"]) if obj.get("producedBy") is not None else None,
            "producer": obj.get("producer"),
            "protoDefName": obj.get("protoDefName"),
            "protoDefPath": obj.get("protoDefPath")
        })
        return _obj

# TODO: Rewrite to not use raise_errors
EnterpriseCrmFrontendsEventbusProtoWorkflowParameterEntry.model_rebuild(raise_errors=False)


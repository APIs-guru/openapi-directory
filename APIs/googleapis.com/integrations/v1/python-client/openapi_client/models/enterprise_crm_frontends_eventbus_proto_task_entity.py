# coding: utf-8

"""
    Application Integration API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.enterprise_crm_eventbus_proto_task_metadata import EnterpriseCrmEventbusProtoTaskMetadata
from openapi_client.models.enterprise_crm_eventbus_proto_task_ui_config import EnterpriseCrmEventbusProtoTaskUiConfig
from openapi_client.models.enterprise_crm_eventbus_stats import EnterpriseCrmEventbusStats
from openapi_client.models.enterprise_crm_frontends_eventbus_proto_param_specs_message import EnterpriseCrmFrontendsEventbusProtoParamSpecsMessage
from typing import Optional, Set
from typing_extensions import Self

class EnterpriseCrmFrontendsEventbusProtoTaskEntity(BaseModel):
    """
    Contains a task's metadata and associated information. Next available id: 7
    """ # noqa: E501
    disabled_for_vpc_sc: Optional[StrictBool] = Field(default=None, description="True if the task has conflict with vpcsc", alias="disabledForVpcSc")
    metadata: Optional[EnterpriseCrmEventbusProtoTaskMetadata] = None
    param_specs: Optional[EnterpriseCrmFrontendsEventbusProtoParamSpecsMessage] = Field(default=None, alias="paramSpecs")
    stats: Optional[EnterpriseCrmEventbusStats] = None
    task_type: Optional[StrictStr] = Field(default=None, description="Defines the type of the task", alias="taskType")
    ui_config: Optional[EnterpriseCrmEventbusProtoTaskUiConfig] = Field(default=None, alias="uiConfig")
    __properties: ClassVar[List[str]] = ["disabledForVpcSc", "metadata", "paramSpecs", "stats", "taskType", "uiConfig"]

    @field_validator('task_type')
    def task_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['TASK', 'ASIS_TEMPLATE', 'IO_TEMPLATE']):
            raise ValueError("must be one of enum values ('TASK', 'ASIS_TEMPLATE', 'IO_TEMPLATE')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of EnterpriseCrmFrontendsEventbusProtoTaskEntity from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of metadata
        if self.metadata:
            _dict['metadata'] = self.metadata.to_dict()
        # override the default output from pydantic by calling `to_dict()` of param_specs
        if self.param_specs:
            _dict['paramSpecs'] = self.param_specs.to_dict()
        # override the default output from pydantic by calling `to_dict()` of stats
        if self.stats:
            _dict['stats'] = self.stats.to_dict()
        # override the default output from pydantic by calling `to_dict()` of ui_config
        if self.ui_config:
            _dict['uiConfig'] = self.ui_config.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of EnterpriseCrmFrontendsEventbusProtoTaskEntity from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "disabledForVpcSc": obj.get("disabledForVpcSc"),
            "metadata": EnterpriseCrmEventbusProtoTaskMetadata.from_dict(obj["metadata"]) if obj.get("metadata") is not None else None,
            "paramSpecs": EnterpriseCrmFrontendsEventbusProtoParamSpecsMessage.from_dict(obj["paramSpecs"]) if obj.get("paramSpecs") is not None else None,
            "stats": EnterpriseCrmEventbusStats.from_dict(obj["stats"]) if obj.get("stats") is not None else None,
            "taskType": obj.get("taskType"),
            "uiConfig": EnterpriseCrmEventbusProtoTaskUiConfig.from_dict(obj["uiConfig"]) if obj.get("uiConfig") is not None else None
        })
        return _obj



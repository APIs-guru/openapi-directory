# coding: utf-8

"""
    Application Integration API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_cloud_integrations_v1alpha_integration_alert_config_threshold_value import GoogleCloudIntegrationsV1alphaIntegrationAlertConfigThresholdValue
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudIntegrationsV1alphaIntegrationAlertConfig(BaseModel):
    """
    Message to be used to configure custom alerting in the {@code EventConfig} protos for an event.
    """ # noqa: E501
    aggregation_period: Optional[StrictStr] = Field(default=None, description="The period over which the metric value should be aggregated and evaluated. Format is , where integer should be a positive integer and unit should be one of (s,m,h,d,w) meaning (second, minute, hour, day, week). For an EXPECTED_MIN threshold, this aggregation_period must be lesser than 24 hours.", alias="aggregationPeriod")
    alert_threshold: Optional[StrictInt] = Field(default=None, description="For how many contiguous aggregation periods should the expected min or max be violated for the alert to be fired.", alias="alertThreshold")
    disable_alert: Optional[StrictBool] = Field(default=None, description="Set to false by default. When set to true, the metrics are not aggregated or pushed to Monarch for this integration alert.", alias="disableAlert")
    display_name: Optional[StrictStr] = Field(default=None, description="Name of the alert. This will be displayed in the alert subject. If set, this name should be unique within the scope of the integration.", alias="displayName")
    duration_threshold: Optional[StrictStr] = Field(default=None, description="Should be specified only for *AVERAGE_DURATION and *PERCENTILE_DURATION metrics. This member should be used to specify what duration value the metrics should exceed for the alert to trigger.", alias="durationThreshold")
    metric_type: Optional[StrictStr] = Field(default=None, description="The type of metric.", alias="metricType")
    only_final_attempt: Optional[StrictBool] = Field(default=None, description="For either events or tasks, depending on the type of alert, count only final attempts, not retries.", alias="onlyFinalAttempt")
    threshold_type: Optional[StrictStr] = Field(default=None, description="The threshold type, whether lower(expected_min) or upper(expected_max), for which this alert is being configured. If value falls below expected_min or exceeds expected_max, an alert will be fired.", alias="thresholdType")
    threshold_value: Optional[GoogleCloudIntegrationsV1alphaIntegrationAlertConfigThresholdValue] = Field(default=None, alias="thresholdValue")
    __properties: ClassVar[List[str]] = ["aggregationPeriod", "alertThreshold", "disableAlert", "displayName", "durationThreshold", "metricType", "onlyFinalAttempt", "thresholdType", "thresholdValue"]

    @field_validator('metric_type')
    def metric_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['METRIC_TYPE_UNSPECIFIED', 'EVENT_ERROR_RATE', 'EVENT_WARNING_RATE', 'TASK_ERROR_RATE', 'TASK_WARNING_RATE', 'TASK_RATE', 'EVENT_RATE', 'EVENT_AVERAGE_DURATION', 'EVENT_PERCENTILE_DURATION', 'TASK_AVERAGE_DURATION', 'TASK_PERCENTILE_DURATION']):
            raise ValueError("must be one of enum values ('METRIC_TYPE_UNSPECIFIED', 'EVENT_ERROR_RATE', 'EVENT_WARNING_RATE', 'TASK_ERROR_RATE', 'TASK_WARNING_RATE', 'TASK_RATE', 'EVENT_RATE', 'EVENT_AVERAGE_DURATION', 'EVENT_PERCENTILE_DURATION', 'TASK_AVERAGE_DURATION', 'TASK_PERCENTILE_DURATION')")
        return value

    @field_validator('threshold_type')
    def threshold_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['THRESHOLD_TYPE_UNSPECIFIED', 'EXPECTED_MIN', 'EXPECTED_MAX']):
            raise ValueError("must be one of enum values ('THRESHOLD_TYPE_UNSPECIFIED', 'EXPECTED_MIN', 'EXPECTED_MAX')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudIntegrationsV1alphaIntegrationAlertConfig from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of threshold_value
        if self.threshold_value:
            _dict['thresholdValue'] = self.threshold_value.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudIntegrationsV1alphaIntegrationAlertConfig from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "aggregationPeriod": obj.get("aggregationPeriod"),
            "alertThreshold": obj.get("alertThreshold"),
            "disableAlert": obj.get("disableAlert"),
            "displayName": obj.get("displayName"),
            "durationThreshold": obj.get("durationThreshold"),
            "metricType": obj.get("metricType"),
            "onlyFinalAttempt": obj.get("onlyFinalAttempt"),
            "thresholdType": obj.get("thresholdType"),
            "thresholdValue": GoogleCloudIntegrationsV1alphaIntegrationAlertConfigThresholdValue.from_dict(obj["thresholdValue"]) if obj.get("thresholdValue") is not None else None
        })
        return _obj



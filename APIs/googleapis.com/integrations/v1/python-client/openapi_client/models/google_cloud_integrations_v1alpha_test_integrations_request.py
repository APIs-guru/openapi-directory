# coding: utf-8

"""
    Application Integration API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.enterprise_crm_frontends_eventbus_proto_event_parameters import EnterpriseCrmFrontendsEventbusProtoEventParameters
from openapi_client.models.google_cloud_integrations_v1alpha_integration_version import GoogleCloudIntegrationsV1alphaIntegrationVersion
from openapi_client.models.google_cloud_integrations_v1alpha_value_type import GoogleCloudIntegrationsV1alphaValueType
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudIntegrationsV1alphaTestIntegrationsRequest(BaseModel):
    """
    The request for testing an integration.
    """ # noqa: E501
    client_id: Optional[StrictStr] = Field(default=None, description="Required. This is used to identify the client on whose behalf the event will be executed.", alias="clientId")
    deadline_seconds_time: Optional[StrictStr] = Field(default=None, description="Optional. custom deadline of the rpc", alias="deadlineSecondsTime")
    input_parameters: Optional[Dict[str, GoogleCloudIntegrationsV1alphaValueType]] = Field(default=None, description="Optional. Input parameters used during integration execution.", alias="inputParameters")
    integration_version: Optional[GoogleCloudIntegrationsV1alphaIntegrationVersion] = Field(default=None, alias="integrationVersion")
    parameters: Optional[EnterpriseCrmFrontendsEventbusProtoEventParameters] = None
    test_mode: Optional[StrictBool] = Field(default=None, description="Optional. Can be specified in the event request, otherwise false (default). If true, enables tasks with condition \"test_mode = true\". If false, disables tasks with condition \"test_mode = true\" if global test mode (set by platform) is also false {@link EventBusConfig}.", alias="testMode")
    trigger_id: Optional[StrictStr] = Field(default=None, description="Required. The trigger id of the integration trigger config. If both trigger_id and client_id is present, the integration is executed from the start tasks provided by the matching trigger config otherwise it is executed from the default start tasks.", alias="triggerId")
    __properties: ClassVar[List[str]] = ["clientId", "deadlineSecondsTime", "inputParameters", "integrationVersion", "parameters", "testMode", "triggerId"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudIntegrationsV1alphaTestIntegrationsRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each value in input_parameters (dict)
        _field_dict = {}
        if self.input_parameters:
            for _key_input_parameters in self.input_parameters:
                if self.input_parameters[_key_input_parameters]:
                    _field_dict[_key_input_parameters] = self.input_parameters[_key_input_parameters].to_dict()
            _dict['inputParameters'] = _field_dict
        # override the default output from pydantic by calling `to_dict()` of integration_version
        if self.integration_version:
            _dict['integrationVersion'] = self.integration_version.to_dict()
        # override the default output from pydantic by calling `to_dict()` of parameters
        if self.parameters:
            _dict['parameters'] = self.parameters.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudIntegrationsV1alphaTestIntegrationsRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "clientId": obj.get("clientId"),
            "deadlineSecondsTime": obj.get("deadlineSecondsTime"),
            "inputParameters": dict(
                (_k, GoogleCloudIntegrationsV1alphaValueType.from_dict(_v))
                for _k, _v in obj["inputParameters"].items()
            )
            if obj.get("inputParameters") is not None
            else None,
            "integrationVersion": GoogleCloudIntegrationsV1alphaIntegrationVersion.from_dict(obj["integrationVersion"]) if obj.get("integrationVersion") is not None else None,
            "parameters": EnterpriseCrmFrontendsEventbusProtoEventParameters.from_dict(obj["parameters"]) if obj.get("parameters") is not None else None,
            "testMode": obj.get("testMode"),
            "triggerId": obj.get("triggerId")
        })
        return _obj



# coding: utf-8

"""
    Android Device Provisioning Partner API

    Automates Android zero-touch enrollment for device resellers, customers, and EMMs.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class DevicesLongRunningOperationMetadata(BaseModel):
    """
    Tracks the status of a long-running operation to asynchronously update a batch of reseller metadata attached to devices. To learn more, read [Long‑running batch operations](/zero-touch/guides/how-it-works#operations).
    """ # noqa: E501
    devices_count: Optional[StrictInt] = Field(default=None, description="The number of metadata updates in the operation. This might be different from the number of updates in the request if the API can't parse some of the updates.", alias="devicesCount")
    processing_status: Optional[StrictStr] = Field(default=None, description="The processing status of the operation.", alias="processingStatus")
    progress: Optional[StrictInt] = Field(default=None, description="The processing progress of the operation. Measured as a number from 0 to 100. A value of 10O doesn't always mean the operation completed—check for the inclusion of a `done` field.")
    __properties: ClassVar[List[str]] = ["devicesCount", "processingStatus", "progress"]

    @field_validator('processing_status')
    def processing_status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['BATCH_PROCESS_STATUS_UNSPECIFIED', 'BATCH_PROCESS_PENDING', 'BATCH_PROCESS_IN_PROGRESS', 'BATCH_PROCESS_PROCESSED']):
            raise ValueError("must be one of enum values ('BATCH_PROCESS_STATUS_UNSPECIFIED', 'BATCH_PROCESS_PENDING', 'BATCH_PROCESS_IN_PROGRESS', 'BATCH_PROCESS_PROCESSED')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DevicesLongRunningOperationMetadata from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DevicesLongRunningOperationMetadata from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "devicesCount": obj.get("devicesCount"),
            "processingStatus": obj.get("processingStatus"),
            "progress": obj.get("progress")
        })
        return _obj



# coding: utf-8

"""
    Android Device Provisioning Partner API

    Automates Android zero-touch enrollment for device resellers, customers, and EMMs.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.device_claim import DeviceClaim
from openapi_client.models.device_identifier import DeviceIdentifier
from openapi_client.models.device_metadata import DeviceMetadata
from typing import Optional, Set
from typing_extensions import Self

class Device(BaseModel):
    """
    An Android or Chrome OS device registered for zero-touch enrollment.
    """ # noqa: E501
    claims: Optional[List[DeviceClaim]] = Field(default=None, description="Output only. The provisioning claims for a device. Devices claimed for zero-touch enrollment have a claim with the type `SECTION_TYPE_ZERO_TOUCH`. Call `partners.devices.unclaim` or `partners.devices.unclaimAsync` to remove the device from zero-touch enrollment.")
    configuration: Optional[StrictStr] = Field(default=None, description="Not available to resellers.")
    device_id: Optional[StrictStr] = Field(default=None, description="Output only. The ID of the device. Assigned by the server.", alias="deviceId")
    device_identifier: Optional[DeviceIdentifier] = Field(default=None, alias="deviceIdentifier")
    device_metadata: Optional[DeviceMetadata] = Field(default=None, alias="deviceMetadata")
    name: Optional[StrictStr] = Field(default=None, description="Output only. The API resource name in the format `partners/[PARTNER_ID]/devices/[DEVICE_ID]`. Assigned by the server.")
    __properties: ClassVar[List[str]] = ["claims", "configuration", "deviceId", "deviceIdentifier", "deviceMetadata", "name"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Device from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "claims",
            "device_id",
            "name",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in claims (list)
        _items = []
        if self.claims:
            for _item_claims in self.claims:
                if _item_claims:
                    _items.append(_item_claims.to_dict())
            _dict['claims'] = _items
        # override the default output from pydantic by calling `to_dict()` of device_identifier
        if self.device_identifier:
            _dict['deviceIdentifier'] = self.device_identifier.to_dict()
        # override the default output from pydantic by calling `to_dict()` of device_metadata
        if self.device_metadata:
            _dict['deviceMetadata'] = self.device_metadata.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Device from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "claims": [DeviceClaim.from_dict(_item) for _item in obj["claims"]] if obj.get("claims") is not None else None,
            "configuration": obj.get("configuration"),
            "deviceId": obj.get("deviceId"),
            "deviceIdentifier": DeviceIdentifier.from_dict(obj["deviceIdentifier"]) if obj.get("deviceIdentifier") is not None else None,
            "deviceMetadata": DeviceMetadata.from_dict(obj["deviceMetadata"]) if obj.get("deviceMetadata") is not None else None,
            "name": obj.get("name")
        })
        return _obj



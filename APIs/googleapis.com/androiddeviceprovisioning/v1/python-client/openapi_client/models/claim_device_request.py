# coding: utf-8

"""
    Android Device Provisioning Partner API

    Automates Android zero-touch enrollment for device resellers, customers, and EMMs.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.device_identifier import DeviceIdentifier
from openapi_client.models.device_metadata import DeviceMetadata
from typing import Optional, Set
from typing_extensions import Self

class ClaimDeviceRequest(BaseModel):
    """
    Request message to claim a device on behalf of a customer.
    """ # noqa: E501
    configuration_id: Optional[StrictStr] = Field(default=None, description="Optional. The ID of the configuration applied to the device section.", alias="configurationId")
    customer_id: Optional[StrictStr] = Field(default=None, description="The ID of the customer for whom the device is being claimed.", alias="customerId")
    device_identifier: Optional[DeviceIdentifier] = Field(default=None, alias="deviceIdentifier")
    device_metadata: Optional[DeviceMetadata] = Field(default=None, alias="deviceMetadata")
    google_workspace_customer_id: Optional[StrictStr] = Field(default=None, description="The Google Workspace customer ID.", alias="googleWorkspaceCustomerId")
    pre_provisioning_token: Optional[StrictStr] = Field(default=None, description="Optional. Must and can only be set for Chrome OS devices.", alias="preProvisioningToken")
    section_type: Optional[StrictStr] = Field(default=None, description="Required. The section type of the device's provisioning record.", alias="sectionType")
    simlock_profile_id: Optional[StrictStr] = Field(default=None, description="Optional. Must and can only be set when DeviceProvisioningSectionType is SECTION_TYPE_SIM_LOCK. The unique identifier of the SimLock profile.", alias="simlockProfileId")
    __properties: ClassVar[List[str]] = ["configurationId", "customerId", "deviceIdentifier", "deviceMetadata", "googleWorkspaceCustomerId", "preProvisioningToken", "sectionType", "simlockProfileId"]

    @field_validator('section_type')
    def section_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['SECTION_TYPE_UNSPECIFIED', 'SECTION_TYPE_SIM_LOCK', 'SECTION_TYPE_ZERO_TOUCH']):
            raise ValueError("must be one of enum values ('SECTION_TYPE_UNSPECIFIED', 'SECTION_TYPE_SIM_LOCK', 'SECTION_TYPE_ZERO_TOUCH')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ClaimDeviceRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of device_identifier
        if self.device_identifier:
            _dict['deviceIdentifier'] = self.device_identifier.to_dict()
        # override the default output from pydantic by calling `to_dict()` of device_metadata
        if self.device_metadata:
            _dict['deviceMetadata'] = self.device_metadata.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ClaimDeviceRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "configurationId": obj.get("configurationId"),
            "customerId": obj.get("customerId"),
            "deviceIdentifier": DeviceIdentifier.from_dict(obj["deviceIdentifier"]) if obj.get("deviceIdentifier") is not None else None,
            "deviceMetadata": DeviceMetadata.from_dict(obj["deviceMetadata"]) if obj.get("deviceMetadata") is not None else None,
            "googleWorkspaceCustomerId": obj.get("googleWorkspaceCustomerId"),
            "preProvisioningToken": obj.get("preProvisioningToken"),
            "sectionType": obj.get("sectionType"),
            "simlockProfileId": obj.get("simlockProfileId")
        })
        return _obj



# coding: utf-8

"""
    Android Device Provisioning Partner API

    Automates Android zero-touch enrollment for device resellers, customers, and EMMs.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class DeviceIdentifier(BaseModel):
    """
    Encapsulates hardware and product IDs to identify a manufactured device. To understand requirements on identifier sets, read [Identifiers](https://developers.google.com/zero-touch/guides/identifiers).
    """ # noqa: E501
    chrome_os_attested_device_id: Optional[StrictStr] = Field(default=None, description="An identifier provided by OEMs, carried through the production and sales process. Only applicable to Chrome OS devices.", alias="chromeOsAttestedDeviceId")
    device_type: Optional[StrictStr] = Field(default=None, description="The type of the device", alias="deviceType")
    imei: Optional[StrictStr] = Field(default=None, description="The device’s IMEI number. Validated on input.")
    manufacturer: Optional[StrictStr] = Field(default=None, description="The device manufacturer’s name. Matches the device's built-in value returned from `android.os.Build.MANUFACTURER`. Allowed values are listed in [Android manufacturers](/zero-touch/resources/manufacturer-names#manufacturers-names).")
    meid: Optional[StrictStr] = Field(default=None, description="The device’s MEID number.")
    model: Optional[StrictStr] = Field(default=None, description="The device model's name. Allowed values are listed in [Android models](/zero-touch/resources/manufacturer-names#model-names) and [Chrome OS models](https://support.google.com/chrome/a/answer/10130175#identify_compatible).")
    serial_number: Optional[StrictStr] = Field(default=None, description="The manufacturer's serial number for the device. This value might not be unique across different device models.", alias="serialNumber")
    __properties: ClassVar[List[str]] = ["chromeOsAttestedDeviceId", "deviceType", "imei", "manufacturer", "meid", "model", "serialNumber"]

    @field_validator('device_type')
    def device_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['DEVICE_TYPE_UNSPECIFIED', 'DEVICE_TYPE_ANDROID', 'DEVICE_TYPE_CHROME_OS']):
            raise ValueError("must be one of enum values ('DEVICE_TYPE_UNSPECIFIED', 'DEVICE_TYPE_ANDROID', 'DEVICE_TYPE_CHROME_OS')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DeviceIdentifier from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DeviceIdentifier from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "chromeOsAttestedDeviceId": obj.get("chromeOsAttestedDeviceId"),
            "deviceType": obj.get("deviceType"),
            "imei": obj.get("imei"),
            "manufacturer": obj.get("manufacturer"),
            "meid": obj.get("meid"),
            "model": obj.get("model"),
            "serialNumber": obj.get("serialNumber")
        })
        return _obj



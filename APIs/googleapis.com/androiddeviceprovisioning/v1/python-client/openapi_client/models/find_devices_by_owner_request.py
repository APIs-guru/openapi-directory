# coding: utf-8

"""
    Android Device Provisioning Partner API

    Automates Android zero-touch enrollment for device resellers, customers, and EMMs.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class FindDevicesByOwnerRequest(BaseModel):
    """
    Request to find devices by customers.
    """ # noqa: E501
    customer_id: Optional[List[StrictStr]] = Field(default=None, description="The list of customer IDs to search for.", alias="customerId")
    google_workspace_customer_id: Optional[List[StrictStr]] = Field(default=None, description="The list of IDs of Google Workspace accounts to search for.", alias="googleWorkspaceCustomerId")
    limit: Optional[StrictStr] = Field(default=None, description="Required. The maximum number of devices to show in a page of results. Must be between 1 and 100 inclusive.")
    page_token: Optional[StrictStr] = Field(default=None, description="A token specifying which result page to return.", alias="pageToken")
    section_type: Optional[StrictStr] = Field(default=None, description="Required. The section type of the device's provisioning record.", alias="sectionType")
    __properties: ClassVar[List[str]] = ["customerId", "googleWorkspaceCustomerId", "limit", "pageToken", "sectionType"]

    @field_validator('section_type')
    def section_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['SECTION_TYPE_UNSPECIFIED', 'SECTION_TYPE_SIM_LOCK', 'SECTION_TYPE_ZERO_TOUCH']):
            raise ValueError("must be one of enum values ('SECTION_TYPE_UNSPECIFIED', 'SECTION_TYPE_SIM_LOCK', 'SECTION_TYPE_ZERO_TOUCH')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of FindDevicesByOwnerRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of FindDevicesByOwnerRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "customerId": obj.get("customerId"),
            "googleWorkspaceCustomerId": obj.get("googleWorkspaceCustomerId"),
            "limit": obj.get("limit"),
            "pageToken": obj.get("pageToken"),
            "sectionType": obj.get("sectionType")
        })
        return _obj



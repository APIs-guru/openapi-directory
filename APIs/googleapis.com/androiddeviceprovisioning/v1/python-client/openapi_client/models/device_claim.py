# coding: utf-8

"""
    Android Device Provisioning Partner API

    Automates Android zero-touch enrollment for device resellers, customers, and EMMs.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class DeviceClaim(BaseModel):
    """
    A record of a device claimed by a reseller for a customer. Devices claimed for zero-touch enrollment have a claim with the type `SECTION_TYPE_ZERO_TOUCH`. To learn more, read [Claim devices for customers](/zero-touch/guides/how-it-works#claim).
    """ # noqa: E501
    additional_service: Optional[StrictStr] = Field(default=None, description="The Additional service registered for the device.", alias="additionalService")
    google_workspace_customer_id: Optional[StrictStr] = Field(default=None, description="The ID of the Google Workspace account that owns the Chrome OS device.", alias="googleWorkspaceCustomerId")
    owner_company_id: Optional[StrictStr] = Field(default=None, description="The ID of the Customer that purchased the device.", alias="ownerCompanyId")
    reseller_id: Optional[StrictStr] = Field(default=None, description="The ID of the reseller that claimed the device.", alias="resellerId")
    section_type: Optional[StrictStr] = Field(default=None, description="Output only. The type of claim made on the device.", alias="sectionType")
    vacation_mode_expire_time: Optional[StrictStr] = Field(default=None, description="The timestamp when the device will exit ‘vacation mode’. This value is present iff the device is in 'vacation mode'.", alias="vacationModeExpireTime")
    vacation_mode_start_time: Optional[StrictStr] = Field(default=None, description="The timestamp when the device was put into ‘vacation mode’. This value is present iff the device is in 'vacation mode'.", alias="vacationModeStartTime")
    __properties: ClassVar[List[str]] = ["additionalService", "googleWorkspaceCustomerId", "ownerCompanyId", "resellerId", "sectionType", "vacationModeExpireTime", "vacationModeStartTime"]

    @field_validator('additional_service')
    def additional_service_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['ADDITIONAL_SERVICE_UNSPECIFIED', 'DEVICE_PROTECTION']):
            raise ValueError("must be one of enum values ('ADDITIONAL_SERVICE_UNSPECIFIED', 'DEVICE_PROTECTION')")
        return value

    @field_validator('section_type')
    def section_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['SECTION_TYPE_UNSPECIFIED', 'SECTION_TYPE_SIM_LOCK', 'SECTION_TYPE_ZERO_TOUCH']):
            raise ValueError("must be one of enum values ('SECTION_TYPE_UNSPECIFIED', 'SECTION_TYPE_SIM_LOCK', 'SECTION_TYPE_ZERO_TOUCH')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DeviceClaim from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "section_type",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DeviceClaim from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "additionalService": obj.get("additionalService"),
            "googleWorkspaceCustomerId": obj.get("googleWorkspaceCustomerId"),
            "ownerCompanyId": obj.get("ownerCompanyId"),
            "resellerId": obj.get("resellerId"),
            "sectionType": obj.get("sectionType"),
            "vacationModeExpireTime": obj.get("vacationModeExpireTime"),
            "vacationModeStartTime": obj.get("vacationModeStartTime")
        })
        return _obj



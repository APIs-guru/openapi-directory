# coding: utf-8

"""
    Android Device Provisioning Partner API

    Automates Android zero-touch enrollment for device resellers, customers, and EMMs.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class Configuration(BaseModel):
    """
    A configuration collects the provisioning options for Android devices. Each configuration combines the following: * The EMM device policy controller (DPC) installed on the devices. * EMM policies enforced on the devices. * Metadata displayed on the device to help users during setup. Customers can add as many configurations as they need. However, zero-touch enrollment works best when a customer sets a default configuration that's applied to any new devices the organization purchases.
    """ # noqa: E501
    company_name: Optional[StrictStr] = Field(default=None, description="Required. The name of the organization. Zero-touch enrollment shows this organization name to device users during device provisioning.", alias="companyName")
    configuration_id: Optional[StrictStr] = Field(default=None, description="Output only. The ID of the configuration. Assigned by the server.", alias="configurationId")
    configuration_name: Optional[StrictStr] = Field(default=None, description="Required. A short name that describes the configuration's purpose. For example, _Sales team_ or _Temporary employees_. The zero-touch enrollment portal displays this name to IT admins.", alias="configurationName")
    contact_email: Optional[StrictStr] = Field(default=None, description="Required. The email address that device users can contact to get help. Zero-touch enrollment shows this email address to device users before device provisioning. The value is validated on input.", alias="contactEmail")
    contact_phone: Optional[StrictStr] = Field(default=None, description="Required. The telephone number that device users can call, using another device, to get help. Zero-touch enrollment shows this number to device users before device provisioning. Accepts numerals, spaces, the plus sign, hyphens, and parentheses.", alias="contactPhone")
    custom_message: Optional[StrictStr] = Field(default=None, description="A message, containing one or two sentences, to help device users get help or give them more details about whatâ€™s happening to their device. Zero-touch enrollment shows this message before the device is provisioned.", alias="customMessage")
    dpc_extras: Optional[StrictStr] = Field(default=None, description="The JSON-formatted EMM provisioning extras that are passed to the DPC.", alias="dpcExtras")
    dpc_resource_path: Optional[StrictStr] = Field(default=None, description="Required. The resource name of the selected DPC (device policy controller) in the format `customers/[CUSTOMER_ID]/dpcs/*`. To list the supported DPCs, call `customers.dpcs.list`.", alias="dpcResourcePath")
    forced_reset_time: Optional[StrictStr] = Field(default=None, description="Optional. The timeout before forcing factory reset the device if the device doesn't go through provisioning in the setup wizard, usually due to lack of network connectivity during setup wizard. Ranges from 0-6 hours, with 2 hours being the default if unset.", alias="forcedResetTime")
    is_default: Optional[StrictBool] = Field(default=None, description="Required. Whether this is the default configuration that zero-touch enrollment applies to any new devices the organization purchases in the future. Only one customer configuration can be the default. Setting this value to `true`, changes the previous default configuration's `isDefault` value to `false`.", alias="isDefault")
    name: Optional[StrictStr] = Field(default=None, description="Output only. The API resource name in the format `customers/[CUSTOMER_ID]/configurations/[CONFIGURATION_ID]`. Assigned by the server.")
    __properties: ClassVar[List[str]] = ["companyName", "configurationId", "configurationName", "contactEmail", "contactPhone", "customMessage", "dpcExtras", "dpcResourcePath", "forcedResetTime", "isDefault", "name"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Configuration from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "configuration_id",
            "name",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Configuration from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "companyName": obj.get("companyName"),
            "configurationId": obj.get("configurationId"),
            "configurationName": obj.get("configurationName"),
            "contactEmail": obj.get("contactEmail"),
            "contactPhone": obj.get("contactPhone"),
            "customMessage": obj.get("customMessage"),
            "dpcExtras": obj.get("dpcExtras"),
            "dpcResourcePath": obj.get("dpcResourcePath"),
            "forcedResetTime": obj.get("forcedResetTime"),
            "isDefault": obj.get("isDefault"),
            "name": obj.get("name")
        })
        return _obj



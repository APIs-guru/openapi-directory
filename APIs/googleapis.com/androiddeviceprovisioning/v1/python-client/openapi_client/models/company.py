# coding: utf-8

"""
    Android Device Provisioning Partner API

    Automates Android zero-touch enrollment for device resellers, customers, and EMMs.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_workspace_account import GoogleWorkspaceAccount
from typing import Optional, Set
from typing_extensions import Self

class Company(BaseModel):
    """
    A reseller, vendor, or customer in the zero-touch reseller and customer APIs.
    """ # noqa: E501
    admin_emails: Optional[List[StrictStr]] = Field(default=None, description="Optional. Email address of customer's users in the admin role. Each email address must be associated with a Google Account.", alias="adminEmails")
    company_id: Optional[StrictStr] = Field(default=None, description="Output only. The ID of the company. Assigned by the server.", alias="companyId")
    company_name: Optional[StrictStr] = Field(default=None, description="Required. The name of the company. For example _XYZ Corp_. Displayed to the company's employees in the zero-touch enrollment portal.", alias="companyName")
    google_workspace_account: Optional[GoogleWorkspaceAccount] = Field(default=None, alias="googleWorkspaceAccount")
    language_code: Optional[StrictStr] = Field(default=None, description="Input only. The preferred locale of the customer represented as a BCP47 language code. This field is validated on input and requests containing unsupported language codes will be rejected. Supported language codes: Arabic (ar) Chinese (Hong Kong) (zh-HK) Chinese (Simplified) (zh-CN) Chinese (Traditional) (zh-TW) Czech (cs) Danish (da) Dutch (nl) English (UK) (en-GB) English (US) (en-US) Filipino (fil) Finnish (fi) French (fr) German (de) Hebrew (iw) Hindi (hi) Hungarian (hu) Indonesian (id) Italian (it) Japanese (ja) Korean (ko) Norwegian (Bokmal) (no) Polish (pl) Portuguese (Brazil) (pt-BR) Portuguese (Portugal) (pt-PT) Russian (ru) Spanish (es) Spanish (Latin America) (es-419) Swedish (sv) Thai (th) Turkish (tr) Ukrainian (uk) Vietnamese (vi)", alias="languageCode")
    name: Optional[StrictStr] = Field(default=None, description="Output only. The API resource name of the company. The resource name is one of the following formats: * `partners/[PARTNER_ID]/customers/[CUSTOMER_ID]` * `partners/[PARTNER_ID]/vendors/[VENDOR_ID]` * `partners/[PARTNER_ID]/vendors/[VENDOR_ID]/customers/[CUSTOMER_ID]` Assigned by the server.")
    owner_emails: Optional[List[StrictStr]] = Field(default=None, description="Required. Input only. Email address of customer's users in the owner role. At least one `owner_email` is required. Owners share the same access as admins but can also add, delete, and edit your organization's portal users.", alias="ownerEmails")
    skip_welcome_email: Optional[StrictBool] = Field(default=None, description="Input only. If set to true, welcome email will not be sent to the customer. It is recommended to skip the welcome email if devices will be claimed with additional DEVICE_PROTECTION service, as the customer will receive separate emails at device claim time. This field is ignored if this is not a Zero-touch customer.", alias="skipWelcomeEmail")
    terms_status: Optional[StrictStr] = Field(default=None, description="Output only. Whether any user from the company has accepted the latest Terms of Service (ToS). See TermsStatus.", alias="termsStatus")
    __properties: ClassVar[List[str]] = ["adminEmails", "companyId", "companyName", "googleWorkspaceAccount", "languageCode", "name", "ownerEmails", "skipWelcomeEmail", "termsStatus"]

    @field_validator('terms_status')
    def terms_status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['TERMS_STATUS_UNSPECIFIED', 'TERMS_STATUS_NOT_ACCEPTED', 'TERMS_STATUS_ACCEPTED', 'TERMS_STATUS_STALE']):
            raise ValueError("must be one of enum values ('TERMS_STATUS_UNSPECIFIED', 'TERMS_STATUS_NOT_ACCEPTED', 'TERMS_STATUS_ACCEPTED', 'TERMS_STATUS_STALE')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Company from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "company_id",
            "name",
            "terms_status",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of google_workspace_account
        if self.google_workspace_account:
            _dict['googleWorkspaceAccount'] = self.google_workspace_account.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Company from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "adminEmails": obj.get("adminEmails"),
            "companyId": obj.get("companyId"),
            "companyName": obj.get("companyName"),
            "googleWorkspaceAccount": GoogleWorkspaceAccount.from_dict(obj["googleWorkspaceAccount"]) if obj.get("googleWorkspaceAccount") is not None else None,
            "languageCode": obj.get("languageCode"),
            "name": obj.get("name"),
            "ownerEmails": obj.get("ownerEmails"),
            "skipWelcomeEmail": obj.get("skipWelcomeEmail"),
            "termsStatus": obj.get("termsStatus")
        })
        return _obj



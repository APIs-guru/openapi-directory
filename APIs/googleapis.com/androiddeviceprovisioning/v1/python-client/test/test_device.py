# coding: utf-8

"""
    Android Device Provisioning Partner API

    Automates Android zero-touch enrollment for device resellers, customers, and EMMs.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.device import Device

class TestDevice(unittest.TestCase):
    """Device unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> Device:
        """Test Device
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `Device`
        """
        model = Device()
        if include_optional:
            return Device(
                claims = [
                    openapi_client.models.device_claim.DeviceClaim(
                        additional_service = 'ADDITIONAL_SERVICE_UNSPECIFIED', 
                        google_workspace_customer_id = '', 
                        owner_company_id = '', 
                        reseller_id = '', 
                        section_type = 'SECTION_TYPE_UNSPECIFIED', 
                        vacation_mode_expire_time = '', 
                        vacation_mode_start_time = '', )
                    ],
                configuration = '',
                device_id = '',
                device_identifier = openapi_client.models.device_identifier.DeviceIdentifier(
                    chrome_os_attested_device_id = '', 
                    device_type = 'DEVICE_TYPE_UNSPECIFIED', 
                    imei = '', 
                    manufacturer = '', 
                    meid = '', 
                    model = '', 
                    serial_number = '', ),
                device_metadata = openapi_client.models.device_metadata.DeviceMetadata(
                    entries = {
                        'key' : ''
                        }, ),
                name = ''
            )
        else:
            return Device(
        )
        """

    def testDevice(self):
        """Test Device"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

# coding: utf-8

"""
    Cloud TPU API

    TPU API provides customers with access to Google TPU technology.

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.node_spec import NodeSpec

class TestNodeSpec(unittest.TestCase):
    """NodeSpec unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> NodeSpec:
        """Test NodeSpec
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `NodeSpec`
        """
        model = NodeSpec()
        if include_optional:
            return NodeSpec(
                multislice_params = openapi_client.models.multislice_params.MultisliceParams(
                    node_count = 56, 
                    node_id_prefix = '', ),
                node = openapi_client.models.node.Node(
                    accelerator_config = openapi_client.models.accelerator_config.AcceleratorConfig(
                        topology = '', 
                        type = 'TYPE_UNSPECIFIED', ), 
                    accelerator_type = '', 
                    api_version = 'API_VERSION_UNSPECIFIED', 
                    cidr_block = '', 
                    create_time = '', 
                    data_disks = [
                        openapi_client.models.attached_disk.AttachedDisk(
                            mode = 'DISK_MODE_UNSPECIFIED', 
                            source_disk = '', )
                        ], 
                    description = '', 
                    health = 'HEALTH_UNSPECIFIED', 
                    health_description = '', 
                    id = '', 
                    labels = {
                        'key' : ''
                        }, 
                    metadata = {
                        'key' : ''
                        }, 
                    multislice_node = True, 
                    name = '', 
                    network_config = openapi_client.models.network_config.NetworkConfig(
                        can_ip_forward = True, 
                        enable_external_ips = True, 
                        network = '', 
                        queue_count = 56, 
                        subnetwork = '', ), 
                    network_endpoints = [
                        openapi_client.models.network_endpoint.NetworkEndpoint(
                            access_config = openapi_client.models.access_config.AccessConfig(
                                external_ip = '', ), 
                            ip_address = '', 
                            port = 56, )
                        ], 
                    queued_resource = '', 
                    runtime_version = '', 
                    scheduling_config = openapi_client.models.scheduling_config.SchedulingConfig(
                        preemptible = True, 
                        reserved = True, 
                        spot = True, ), 
                    service_account = openapi_client.models.service_account.ServiceAccount(
                        email = '', 
                        scope = [
                            ''
                            ], ), 
                    shielded_instance_config = openapi_client.models.shielded_instance_config.ShieldedInstanceConfig(
                        enable_secure_boot = True, ), 
                    state = 'STATE_UNSPECIFIED', 
                    symptoms = [
                        openapi_client.models.symptom.Symptom(
                            create_time = '', 
                            details = '', 
                            symptom_type = 'SYMPTOM_TYPE_UNSPECIFIED', 
                            worker_id = '', )
                        ], 
                    tags = [
                        ''
                        ], ),
                node_id = '',
                parent = ''
            )
        else:
            return NodeSpec(
        )
        """

    def testNodeSpec(self):
        """Test NodeSpec"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

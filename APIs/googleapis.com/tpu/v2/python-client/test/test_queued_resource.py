# coding: utf-8

"""
    Cloud TPU API

    TPU API provides customers with access to Google TPU technology.

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.queued_resource import QueuedResource

class TestQueuedResource(unittest.TestCase):
    """QueuedResource unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> QueuedResource:
        """Test QueuedResource
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `QueuedResource`
        """
        model = QueuedResource()
        if include_optional:
            return QueuedResource(
                create_time = '',
                guaranteed = openapi_client.models.guaranteed.Guaranteed(
                    min_duration = '', ),
                name = '',
                queueing_policy = openapi_client.models.queueing_policy.QueueingPolicy(
                    valid_after_duration = '', 
                    valid_after_time = '', 
                    valid_interval = openapi_client.models.interval.Interval(
                        end_time = '', 
                        start_time = '', ), 
                    valid_until_duration = '', 
                    valid_until_time = '', ),
                reservation_name = '',
                spot = openapi_client.models.spot.Spot(),
                state = openapi_client.models.queued_resource_state.QueuedResourceState(
                    accepted_data = openapi_client.models.accepted_data.AcceptedData(), 
                    active_data = openapi_client.models.active_data.ActiveData(), 
                    creating_data = openapi_client.models.creating_data.CreatingData(), 
                    deleting_data = openapi_client.models.deleting_data.DeletingData(), 
                    failed_data = openapi_client.models.failed_data.FailedData(
                        error = openapi_client.models.status.Status(
                            code = 56, 
                            details = [
                                {
                                    'key' : null
                                    }
                                ], 
                            message = '', ), ), 
                    provisioning_data = openapi_client.models.provisioning_data.ProvisioningData(), 
                    state_initiator = 'STATE_INITIATOR_UNSPECIFIED', 
                    suspended_data = openapi_client.models.suspended_data.SuspendedData(), 
                    suspending_data = openapi_client.models.suspending_data.SuspendingData(), ),
                tpu = openapi_client.models.tpu.Tpu(
                    node_spec = [
                        openapi_client.models.node_spec.NodeSpec(
                            multislice_params = openapi_client.models.multislice_params.MultisliceParams(
                                node_count = 56, 
                                node_id_prefix = '', ), 
                            node = openapi_client.models.node.Node(
                                accelerator_config = openapi_client.models.accelerator_config.AcceleratorConfig(
                                    topology = '', 
                                    type = 'TYPE_UNSPECIFIED', ), 
                                accelerator_type = '', 
                                api_version = 'API_VERSION_UNSPECIFIED', 
                                cidr_block = '', 
                                create_time = '', 
                                data_disks = [
                                    openapi_client.models.attached_disk.AttachedDisk(
                                        mode = 'DISK_MODE_UNSPECIFIED', 
                                        source_disk = '', )
                                    ], 
                                description = '', 
                                health = 'HEALTH_UNSPECIFIED', 
                                health_description = '', 
                                id = '', 
                                labels = {
                                    'key' : ''
                                    }, 
                                metadata = {
                                    'key' : ''
                                    }, 
                                multislice_node = True, 
                                name = '', 
                                network_config = openapi_client.models.network_config.NetworkConfig(
                                    can_ip_forward = True, 
                                    enable_external_ips = True, 
                                    network = '', 
                                    queue_count = 56, 
                                    subnetwork = '', ), 
                                network_endpoints = [
                                    openapi_client.models.network_endpoint.NetworkEndpoint(
                                        access_config = openapi_client.models.access_config.AccessConfig(
                                            external_ip = '', ), 
                                        ip_address = '', 
                                        port = 56, )
                                    ], 
                                queued_resource = '', 
                                runtime_version = '', 
                                scheduling_config = openapi_client.models.scheduling_config.SchedulingConfig(
                                    preemptible = True, 
                                    reserved = True, 
                                    spot = True, ), 
                                service_account = openapi_client.models.service_account.ServiceAccount(
                                    email = '', 
                                    scope = [
                                        ''
                                        ], ), 
                                shielded_instance_config = openapi_client.models.shielded_instance_config.ShieldedInstanceConfig(
                                    enable_secure_boot = True, ), 
                                state = 'STATE_UNSPECIFIED', 
                                symptoms = [
                                    openapi_client.models.symptom.Symptom(
                                        create_time = '', 
                                        details = '', 
                                        symptom_type = 'SYMPTOM_TYPE_UNSPECIFIED', 
                                        worker_id = '', )
                                    ], 
                                tags = [
                                    ''
                                    ], ), 
                            node_id = '', 
                            parent = '', )
                        ], )
            )
        else:
            return QueuedResource(
        )
        """

    def testQueuedResource(self):
        """Test QueuedResource"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

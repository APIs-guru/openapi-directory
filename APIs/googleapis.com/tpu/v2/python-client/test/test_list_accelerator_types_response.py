# coding: utf-8

"""
    Cloud TPU API

    TPU API provides customers with access to Google TPU technology.

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.list_accelerator_types_response import ListAcceleratorTypesResponse

class TestListAcceleratorTypesResponse(unittest.TestCase):
    """ListAcceleratorTypesResponse unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> ListAcceleratorTypesResponse:
        """Test ListAcceleratorTypesResponse
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `ListAcceleratorTypesResponse`
        """
        model = ListAcceleratorTypesResponse()
        if include_optional:
            return ListAcceleratorTypesResponse(
                accelerator_types = [
                    openapi_client.models.accelerator_type.AcceleratorType(
                        accelerator_configs = [
                            openapi_client.models.accelerator_config.AcceleratorConfig(
                                topology = '', 
                                type = 'TYPE_UNSPECIFIED', )
                            ], 
                        name = '', 
                        type = '', )
                    ],
                next_page_token = '',
                unreachable = [
                    ''
                    ]
            )
        else:
            return ListAcceleratorTypesResponse(
        )
        """

    def testListAcceleratorTypesResponse(self):
        """Test ListAcceleratorTypesResponse"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

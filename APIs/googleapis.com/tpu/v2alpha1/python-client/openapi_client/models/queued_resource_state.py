# coding: utf-8

"""
    Cloud TPU API

    TPU API provides customers with access to Google TPU technology.

    The version of the OpenAPI document: v2alpha1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.failed_data import FailedData
from typing import Optional, Set
from typing_extensions import Self

class QueuedResourceState(BaseModel):
    """
    QueuedResourceState defines the details of the QueuedResource request.
    """ # noqa: E501
    accepted_data: Optional[Dict[str, Any]] = Field(default=None, description="Further data for the accepted state.", alias="acceptedData")
    active_data: Optional[Dict[str, Any]] = Field(default=None, description="Further data for the active state.", alias="activeData")
    creating_data: Optional[Dict[str, Any]] = Field(default=None, description="Further data for the creating state.", alias="creatingData")
    deleting_data: Optional[Dict[str, Any]] = Field(default=None, description="Further data for the deleting state.", alias="deletingData")
    failed_data: Optional[FailedData] = Field(default=None, alias="failedData")
    provisioning_data: Optional[Dict[str, Any]] = Field(default=None, description="Further data for the provisioning state.", alias="provisioningData")
    state: Optional[StrictStr] = Field(default=None, description="State of the QueuedResource request.")
    state_initiator: Optional[StrictStr] = Field(default=None, description="Output only. The initiator of the QueuedResources's current state. Used to indicate whether the SUSPENDING/SUSPENDED state was initiated by the user or the service.", alias="stateInitiator")
    suspended_data: Optional[Dict[str, Any]] = Field(default=None, description="Further data for the suspended state.", alias="suspendedData")
    suspending_data: Optional[Dict[str, Any]] = Field(default=None, description="Further data for the suspending state.", alias="suspendingData")
    __properties: ClassVar[List[str]] = ["acceptedData", "activeData", "creatingData", "deletingData", "failedData", "provisioningData", "state", "stateInitiator", "suspendedData", "suspendingData"]

    @field_validator('state')
    def state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['STATE_UNSPECIFIED', 'CREATING', 'ACCEPTED', 'PROVISIONING', 'FAILED', 'DELETING', 'ACTIVE', 'SUSPENDING', 'SUSPENDED', 'WAITING_FOR_RESOURCES']):
            raise ValueError("must be one of enum values ('STATE_UNSPECIFIED', 'CREATING', 'ACCEPTED', 'PROVISIONING', 'FAILED', 'DELETING', 'ACTIVE', 'SUSPENDING', 'SUSPENDED', 'WAITING_FOR_RESOURCES')")
        return value

    @field_validator('state_initiator')
    def state_initiator_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['STATE_INITIATOR_UNSPECIFIED', 'USER', 'SERVICE']):
            raise ValueError("must be one of enum values ('STATE_INITIATOR_UNSPECIFIED', 'USER', 'SERVICE')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of QueuedResourceState from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "state_initiator",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of failed_data
        if self.failed_data:
            _dict['failedData'] = self.failed_data.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of QueuedResourceState from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "acceptedData": obj.get("acceptedData"),
            "activeData": obj.get("activeData"),
            "creatingData": obj.get("creatingData"),
            "deletingData": obj.get("deletingData"),
            "failedData": FailedData.from_dict(obj["failedData"]) if obj.get("failedData") is not None else None,
            "provisioningData": obj.get("provisioningData"),
            "state": obj.get("state"),
            "stateInitiator": obj.get("stateInitiator"),
            "suspendedData": obj.get("suspendedData"),
            "suspendingData": obj.get("suspendingData")
        })
        return _obj



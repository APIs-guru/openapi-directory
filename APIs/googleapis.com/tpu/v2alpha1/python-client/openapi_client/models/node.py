# coding: utf-8

"""
    Cloud TPU API

    TPU API provides customers with access to Google TPU technology.

    The version of the OpenAPI document: v2alpha1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.accelerator_config import AcceleratorConfig
from openapi_client.models.attached_disk import AttachedDisk
from openapi_client.models.boot_disk_config import BootDiskConfig
from openapi_client.models.network_config import NetworkConfig
from openapi_client.models.network_endpoint import NetworkEndpoint
from openapi_client.models.scheduling_config import SchedulingConfig
from openapi_client.models.service_account import ServiceAccount
from openapi_client.models.shielded_instance_config import ShieldedInstanceConfig
from openapi_client.models.symptom import Symptom
from typing import Optional, Set
from typing_extensions import Self

class Node(BaseModel):
    """
    A TPU instance.
    """ # noqa: E501
    accelerator_config: Optional[AcceleratorConfig] = Field(default=None, alias="acceleratorConfig")
    accelerator_type: Optional[StrictStr] = Field(default=None, description="The type of hardware accelerators associated with this node.", alias="acceleratorType")
    api_version: Optional[StrictStr] = Field(default=None, description="Output only. The API version that created this Node.", alias="apiVersion")
    autocheckpoint_enabled: Optional[StrictBool] = Field(default=None, description="Optional. Whether Autocheckpoint is enabled.", alias="autocheckpointEnabled")
    boot_disk_config: Optional[BootDiskConfig] = Field(default=None, alias="bootDiskConfig")
    cidr_block: Optional[StrictStr] = Field(default=None, description="The CIDR block that the TPU node will use when selecting an IP address. This CIDR block must be a /29 block; the Compute Engine networks API forbids a smaller block, and using a larger block would be wasteful (a node can only consume one IP address). Errors will occur if the CIDR block has already been used for a currently existing TPU node, the CIDR block conflicts with any subnetworks in the user's provided network, or the provided network is peered with another network that is using that CIDR block.", alias="cidrBlock")
    create_time: Optional[StrictStr] = Field(default=None, description="Output only. The time when the node was created.", alias="createTime")
    data_disks: Optional[List[AttachedDisk]] = Field(default=None, description="The additional data disks for the Node.", alias="dataDisks")
    description: Optional[StrictStr] = Field(default=None, description="The user-supplied description of the TPU. Maximum of 512 characters.")
    health: Optional[StrictStr] = Field(default=None, description="The health status of the TPU node.")
    health_description: Optional[StrictStr] = Field(default=None, description="Output only. If this field is populated, it contains a description of why the TPU Node is unhealthy.", alias="healthDescription")
    id: Optional[StrictStr] = Field(default=None, description="Output only. The unique identifier for the TPU Node.")
    labels: Optional[Dict[str, StrictStr]] = Field(default=None, description="Resource labels to represent user-provided metadata.")
    metadata: Optional[Dict[str, StrictStr]] = Field(default=None, description="Custom metadata to apply to the TPU Node. Can set startup-script and shutdown-script")
    multislice_node: Optional[StrictBool] = Field(default=None, description="Output only. Whether the Node belongs to a Multislice group.", alias="multisliceNode")
    name: Optional[StrictStr] = Field(default=None, description="Output only. Immutable. The name of the TPU.")
    network_config: Optional[NetworkConfig] = Field(default=None, alias="networkConfig")
    network_endpoints: Optional[List[NetworkEndpoint]] = Field(default=None, description="Output only. The network endpoints where TPU workers can be accessed and sent work. It is recommended that runtime clients of the node reach out to the 0th entry in this map first.", alias="networkEndpoints")
    queued_resource: Optional[StrictStr] = Field(default=None, description="Output only. The qualified name of the QueuedResource that requested this Node.", alias="queuedResource")
    runtime_version: Optional[StrictStr] = Field(default=None, description="Required. The runtime version running in the Node.", alias="runtimeVersion")
    scheduling_config: Optional[SchedulingConfig] = Field(default=None, alias="schedulingConfig")
    service_account: Optional[ServiceAccount] = Field(default=None, alias="serviceAccount")
    shielded_instance_config: Optional[ShieldedInstanceConfig] = Field(default=None, alias="shieldedInstanceConfig")
    state: Optional[StrictStr] = Field(default=None, description="Output only. The current state for the TPU Node.")
    symptoms: Optional[List[Symptom]] = Field(default=None, description="Output only. The Symptoms that have occurred to the TPU Node.")
    tags: Optional[List[StrictStr]] = Field(default=None, description="Tags to apply to the TPU Node. Tags are used to identify valid sources or targets for network firewalls.")
    __properties: ClassVar[List[str]] = ["acceleratorConfig", "acceleratorType", "apiVersion", "autocheckpointEnabled", "bootDiskConfig", "cidrBlock", "createTime", "dataDisks", "description", "health", "healthDescription", "id", "labels", "metadata", "multisliceNode", "name", "networkConfig", "networkEndpoints", "queuedResource", "runtimeVersion", "schedulingConfig", "serviceAccount", "shieldedInstanceConfig", "state", "symptoms", "tags"]

    @field_validator('api_version')
    def api_version_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['API_VERSION_UNSPECIFIED', 'V1_ALPHA1', 'V1', 'V2_ALPHA1']):
            raise ValueError("must be one of enum values ('API_VERSION_UNSPECIFIED', 'V1_ALPHA1', 'V1', 'V2_ALPHA1')")
        return value

    @field_validator('health')
    def health_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['HEALTH_UNSPECIFIED', 'HEALTHY', 'TIMEOUT', 'UNHEALTHY_TENSORFLOW', 'UNHEALTHY_MAINTENANCE']):
            raise ValueError("must be one of enum values ('HEALTH_UNSPECIFIED', 'HEALTHY', 'TIMEOUT', 'UNHEALTHY_TENSORFLOW', 'UNHEALTHY_MAINTENANCE')")
        return value

    @field_validator('state')
    def state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['STATE_UNSPECIFIED', 'CREATING', 'READY', 'RESTARTING', 'REIMAGING', 'DELETING', 'REPAIRING', 'STOPPED', 'STOPPING', 'STARTING', 'PREEMPTED', 'TERMINATED', 'HIDING', 'HIDDEN', 'UNHIDING']):
            raise ValueError("must be one of enum values ('STATE_UNSPECIFIED', 'CREATING', 'READY', 'RESTARTING', 'REIMAGING', 'DELETING', 'REPAIRING', 'STOPPED', 'STOPPING', 'STARTING', 'PREEMPTED', 'TERMINATED', 'HIDING', 'HIDDEN', 'UNHIDING')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Node from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "api_version",
            "create_time",
            "health_description",
            "id",
            "multislice_node",
            "name",
            "network_endpoints",
            "queued_resource",
            "state",
            "symptoms",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of accelerator_config
        if self.accelerator_config:
            _dict['acceleratorConfig'] = self.accelerator_config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of boot_disk_config
        if self.boot_disk_config:
            _dict['bootDiskConfig'] = self.boot_disk_config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in data_disks (list)
        _items = []
        if self.data_disks:
            for _item_data_disks in self.data_disks:
                if _item_data_disks:
                    _items.append(_item_data_disks.to_dict())
            _dict['dataDisks'] = _items
        # override the default output from pydantic by calling `to_dict()` of network_config
        if self.network_config:
            _dict['networkConfig'] = self.network_config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in network_endpoints (list)
        _items = []
        if self.network_endpoints:
            for _item_network_endpoints in self.network_endpoints:
                if _item_network_endpoints:
                    _items.append(_item_network_endpoints.to_dict())
            _dict['networkEndpoints'] = _items
        # override the default output from pydantic by calling `to_dict()` of scheduling_config
        if self.scheduling_config:
            _dict['schedulingConfig'] = self.scheduling_config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of service_account
        if self.service_account:
            _dict['serviceAccount'] = self.service_account.to_dict()
        # override the default output from pydantic by calling `to_dict()` of shielded_instance_config
        if self.shielded_instance_config:
            _dict['shieldedInstanceConfig'] = self.shielded_instance_config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in symptoms (list)
        _items = []
        if self.symptoms:
            for _item_symptoms in self.symptoms:
                if _item_symptoms:
                    _items.append(_item_symptoms.to_dict())
            _dict['symptoms'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Node from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "acceleratorConfig": AcceleratorConfig.from_dict(obj["acceleratorConfig"]) if obj.get("acceleratorConfig") is not None else None,
            "acceleratorType": obj.get("acceleratorType"),
            "apiVersion": obj.get("apiVersion"),
            "autocheckpointEnabled": obj.get("autocheckpointEnabled"),
            "bootDiskConfig": BootDiskConfig.from_dict(obj["bootDiskConfig"]) if obj.get("bootDiskConfig") is not None else None,
            "cidrBlock": obj.get("cidrBlock"),
            "createTime": obj.get("createTime"),
            "dataDisks": [AttachedDisk.from_dict(_item) for _item in obj["dataDisks"]] if obj.get("dataDisks") is not None else None,
            "description": obj.get("description"),
            "health": obj.get("health"),
            "healthDescription": obj.get("healthDescription"),
            "id": obj.get("id"),
            "labels": obj.get("labels"),
            "metadata": obj.get("metadata"),
            "multisliceNode": obj.get("multisliceNode"),
            "name": obj.get("name"),
            "networkConfig": NetworkConfig.from_dict(obj["networkConfig"]) if obj.get("networkConfig") is not None else None,
            "networkEndpoints": [NetworkEndpoint.from_dict(_item) for _item in obj["networkEndpoints"]] if obj.get("networkEndpoints") is not None else None,
            "queuedResource": obj.get("queuedResource"),
            "runtimeVersion": obj.get("runtimeVersion"),
            "schedulingConfig": SchedulingConfig.from_dict(obj["schedulingConfig"]) if obj.get("schedulingConfig") is not None else None,
            "serviceAccount": ServiceAccount.from_dict(obj["serviceAccount"]) if obj.get("serviceAccount") is not None else None,
            "shieldedInstanceConfig": ShieldedInstanceConfig.from_dict(obj["shieldedInstanceConfig"]) if obj.get("shieldedInstanceConfig") is not None else None,
            "state": obj.get("state"),
            "symptoms": [Symptom.from_dict(_item) for _item in obj["symptoms"]] if obj.get("symptoms") is not None else None,
            "tags": obj.get("tags")
        })
        return _obj



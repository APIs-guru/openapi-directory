# coding: utf-8

"""
    Cloud TPU API

    TPU API provides customers with access to Google TPU technology.

    The version of the OpenAPI document: v2alpha1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.guaranteed import Guaranteed
from openapi_client.models.queued_resource_state import QueuedResourceState
from openapi_client.models.queueing_policy import QueueingPolicy
from openapi_client.models.tpu import Tpu
from typing import Optional, Set
from typing_extensions import Self

class QueuedResource(BaseModel):
    """
    A QueuedResource represents a request for resources that will be placed in a queue and fulfilled when the necessary resources are available.
    """ # noqa: E501
    best_effort: Optional[Dict[str, Any]] = Field(default=None, description="BestEffort tier definition.", alias="bestEffort")
    create_time: Optional[StrictStr] = Field(default=None, description="Output only. The time when the QueuedResource was created.", alias="createTime")
    guaranteed: Optional[Guaranteed] = None
    name: Optional[StrictStr] = Field(default=None, description="Output only. Immutable. The name of the QueuedResource.")
    queueing_policy: Optional[QueueingPolicy] = Field(default=None, alias="queueingPolicy")
    reservation_name: Optional[StrictStr] = Field(default=None, description="Name of the reservation in which the resource should be provisioned. Format: projects/{project}/locations/{zone}/reservations/{reservation}", alias="reservationName")
    spot: Optional[Dict[str, Any]] = Field(default=None, description="Spot tier definition.")
    state: Optional[QueuedResourceState] = None
    tpu: Optional[Tpu] = None
    __properties: ClassVar[List[str]] = ["bestEffort", "createTime", "guaranteed", "name", "queueingPolicy", "reservationName", "spot", "state", "tpu"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of QueuedResource from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "create_time",
            "name",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of guaranteed
        if self.guaranteed:
            _dict['guaranteed'] = self.guaranteed.to_dict()
        # override the default output from pydantic by calling `to_dict()` of queueing_policy
        if self.queueing_policy:
            _dict['queueingPolicy'] = self.queueing_policy.to_dict()
        # override the default output from pydantic by calling `to_dict()` of state
        if self.state:
            _dict['state'] = self.state.to_dict()
        # override the default output from pydantic by calling `to_dict()` of tpu
        if self.tpu:
            _dict['tpu'] = self.tpu.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of QueuedResource from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "bestEffort": obj.get("bestEffort"),
            "createTime": obj.get("createTime"),
            "guaranteed": Guaranteed.from_dict(obj["guaranteed"]) if obj.get("guaranteed") is not None else None,
            "name": obj.get("name"),
            "queueingPolicy": QueueingPolicy.from_dict(obj["queueingPolicy"]) if obj.get("queueingPolicy") is not None else None,
            "reservationName": obj.get("reservationName"),
            "spot": obj.get("spot"),
            "state": QueuedResourceState.from_dict(obj["state"]) if obj.get("state") is not None else None,
            "tpu": Tpu.from_dict(obj["tpu"]) if obj.get("tpu") is not None else None
        })
        return _obj



# coding: utf-8

"""
    Certificate Authority API

    The Certificate Authority Service API is a highly-available, scalable service that enables you to simplify and automate the management of private certificate authorities (CAs) while staying in control of your private keys. 

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.ca_pool import CaPool

class TestCaPool(unittest.TestCase):
    """CaPool unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> CaPool:
        """Test CaPool
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `CaPool`
        """
        model = CaPool()
        if include_optional:
            return CaPool(
                issuance_policy = openapi_client.models.issuance_policy.IssuancePolicy(
                    allowed_issuance_modes = openapi_client.models.issuance_modes.IssuanceModes(
                        allow_config_based_issuance = True, 
                        allow_csr_based_issuance = True, ), 
                    allowed_key_types = [
                        openapi_client.models.allowed_key_type.AllowedKeyType(
                            elliptic_curve = openapi_client.models.ec_key_type.EcKeyType(
                                signature_algorithm = 'EC_SIGNATURE_ALGORITHM_UNSPECIFIED', ), 
                            rsa = openapi_client.models.rsa_key_type.RsaKeyType(
                                max_modulus_size = '', 
                                min_modulus_size = '', ), )
                        ], 
                    baseline_values = openapi_client.models.x509_parameters.X509Parameters(
                        additional_extensions = [
                            openapi_client.models.x509_extension.X509Extension(
                                critical = True, 
                                object_id = openapi_client.models.object_id.ObjectId(
                                    object_id_path = [
                                        56
                                        ], ), 
                                value = 'YQ==', )
                            ], 
                        aia_ocsp_servers = [
                            ''
                            ], 
                        ca_options = openapi_client.models.ca_options.CaOptions(
                            is_ca = True, 
                            max_issuer_path_length = 56, ), 
                        key_usage = openapi_client.models.key_usage.KeyUsage(
                            base_key_usage = openapi_client.models.key_usage_options.KeyUsageOptions(
                                cert_sign = True, 
                                content_commitment = True, 
                                crl_sign = True, 
                                data_encipherment = True, 
                                decipher_only = True, 
                                digital_signature = True, 
                                encipher_only = True, 
                                key_agreement = True, 
                                key_encipherment = True, ), 
                            extended_key_usage = openapi_client.models.extended_key_usage_options.ExtendedKeyUsageOptions(
                                client_auth = True, 
                                code_signing = True, 
                                email_protection = True, 
                                ocsp_signing = True, 
                                server_auth = True, 
                                time_stamping = True, ), 
                            unknown_extended_key_usages = [
                                openapi_client.models.object_id.ObjectId()
                                ], ), 
                        name_constraints = openapi_client.models.name_constraints.NameConstraints(
                            critical = True, 
                            excluded_dns_names = [
                                ''
                                ], 
                            excluded_email_addresses = [
                                ''
                                ], 
                            excluded_ip_ranges = [
                                ''
                                ], 
                            excluded_uris = [
                                ''
                                ], 
                            permitted_dns_names = [
                                ''
                                ], 
                            permitted_email_addresses = [
                                ''
                                ], 
                            permitted_ip_ranges = [
                                ''
                                ], 
                            permitted_uris = [
                                ''
                                ], ), 
                        policy_ids = [
                            
                            ], ), 
                    identity_constraints = openapi_client.models.certificate_identity_constraints.CertificateIdentityConstraints(
                        allow_subject_alt_names_passthrough = True, 
                        allow_subject_passthrough = True, 
                        cel_expression = openapi_client.models.expr.Expr(
                            description = '', 
                            expression = '', 
                            location = '', 
                            title = '', ), ), 
                    maximum_lifetime = '', 
                    passthrough_extensions = openapi_client.models.certificate_extension_constraints.CertificateExtensionConstraints(
                        known_extensions = [
                            'KNOWN_CERTIFICATE_EXTENSION_UNSPECIFIED'
                            ], ), ),
                labels = {
                    'key' : ''
                    },
                name = '',
                publishing_options = openapi_client.models.publishing_options.PublishingOptions(
                    encoding_format = 'ENCODING_FORMAT_UNSPECIFIED', 
                    publish_ca_cert = True, 
                    publish_crl = True, ),
                tier = 'TIER_UNSPECIFIED'
            )
        else:
            return CaPool(
        )
        """

    def testCaPool(self):
        """Test CaPool"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

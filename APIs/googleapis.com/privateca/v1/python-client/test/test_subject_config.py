# coding: utf-8

"""
    Certificate Authority API

    The Certificate Authority Service API is a highly-available, scalable service that enables you to simplify and automate the management of private certificate authorities (CAs) while staying in control of your private keys. 

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.subject_config import SubjectConfig

class TestSubjectConfig(unittest.TestCase):
    """SubjectConfig unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> SubjectConfig:
        """Test SubjectConfig
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `SubjectConfig`
        """
        model = SubjectConfig()
        if include_optional:
            return SubjectConfig(
                subject = openapi_client.models.subject.Subject(
                    common_name = '', 
                    country_code = '', 
                    locality = '', 
                    organization = '', 
                    organizational_unit = '', 
                    postal_code = '', 
                    province = '', 
                    street_address = '', ),
                subject_alt_name = openapi_client.models.subject_alt_names.SubjectAltNames(
                    custom_sans = [
                        openapi_client.models.x509_extension.X509Extension(
                            critical = True, 
                            object_id = openapi_client.models.object_id.ObjectId(
                                object_id_path = [
                                    56
                                    ], ), 
                            value = 'YQ==', )
                        ], 
                    dns_names = [
                        ''
                        ], 
                    email_addresses = [
                        ''
                        ], 
                    ip_addresses = [
                        ''
                        ], 
                    uris = [
                        ''
                        ], )
            )
        else:
            return SubjectConfig(
        )
        """

    def testSubjectConfig(self):
        """Test SubjectConfig"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

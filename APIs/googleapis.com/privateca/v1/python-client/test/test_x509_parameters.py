# coding: utf-8

"""
    Certificate Authority API

    The Certificate Authority Service API is a highly-available, scalable service that enables you to simplify and automate the management of private certificate authorities (CAs) while staying in control of your private keys. 

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.x509_parameters import X509Parameters

class TestX509Parameters(unittest.TestCase):
    """X509Parameters unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> X509Parameters:
        """Test X509Parameters
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `X509Parameters`
        """
        model = X509Parameters()
        if include_optional:
            return X509Parameters(
                additional_extensions = [
                    openapi_client.models.x509_extension.X509Extension(
                        critical = True, 
                        object_id = openapi_client.models.object_id.ObjectId(
                            object_id_path = [
                                56
                                ], ), 
                        value = 'YQ==', )
                    ],
                aia_ocsp_servers = [
                    ''
                    ],
                ca_options = openapi_client.models.ca_options.CaOptions(
                    is_ca = True, 
                    max_issuer_path_length = 56, ),
                key_usage = openapi_client.models.key_usage.KeyUsage(
                    base_key_usage = openapi_client.models.key_usage_options.KeyUsageOptions(
                        cert_sign = True, 
                        content_commitment = True, 
                        crl_sign = True, 
                        data_encipherment = True, 
                        decipher_only = True, 
                        digital_signature = True, 
                        encipher_only = True, 
                        key_agreement = True, 
                        key_encipherment = True, ), 
                    extended_key_usage = openapi_client.models.extended_key_usage_options.ExtendedKeyUsageOptions(
                        client_auth = True, 
                        code_signing = True, 
                        email_protection = True, 
                        ocsp_signing = True, 
                        server_auth = True, 
                        time_stamping = True, ), 
                    unknown_extended_key_usages = [
                        openapi_client.models.object_id.ObjectId(
                            object_id_path = [
                                56
                                ], )
                        ], ),
                name_constraints = openapi_client.models.name_constraints.NameConstraints(
                    critical = True, 
                    excluded_dns_names = [
                        ''
                        ], 
                    excluded_email_addresses = [
                        ''
                        ], 
                    excluded_ip_ranges = [
                        ''
                        ], 
                    excluded_uris = [
                        ''
                        ], 
                    permitted_dns_names = [
                        ''
                        ], 
                    permitted_email_addresses = [
                        ''
                        ], 
                    permitted_ip_ranges = [
                        ''
                        ], 
                    permitted_uris = [
                        ''
                        ], ),
                policy_ids = [
                    openapi_client.models.object_id.ObjectId(
                        object_id_path = [
                            56
                            ], )
                    ]
            )
        else:
            return X509Parameters(
        )
        """

    def testX509Parameters(self):
        """Test X509Parameters"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

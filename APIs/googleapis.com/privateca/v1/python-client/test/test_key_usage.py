# coding: utf-8

"""
    Certificate Authority API

    The Certificate Authority Service API is a highly-available, scalable service that enables you to simplify and automate the management of private certificate authorities (CAs) while staying in control of your private keys. 

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.key_usage import KeyUsage

class TestKeyUsage(unittest.TestCase):
    """KeyUsage unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> KeyUsage:
        """Test KeyUsage
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `KeyUsage`
        """
        model = KeyUsage()
        if include_optional:
            return KeyUsage(
                base_key_usage = openapi_client.models.key_usage_options.KeyUsageOptions(
                    cert_sign = True, 
                    content_commitment = True, 
                    crl_sign = True, 
                    data_encipherment = True, 
                    decipher_only = True, 
                    digital_signature = True, 
                    encipher_only = True, 
                    key_agreement = True, 
                    key_encipherment = True, ),
                extended_key_usage = openapi_client.models.extended_key_usage_options.ExtendedKeyUsageOptions(
                    client_auth = True, 
                    code_signing = True, 
                    email_protection = True, 
                    ocsp_signing = True, 
                    server_auth = True, 
                    time_stamping = True, ),
                unknown_extended_key_usages = [
                    openapi_client.models.object_id.ObjectId(
                        object_id_path = [
                            56
                            ], )
                    ]
            )
        else:
            return KeyUsage(
        )
        """

    def testKeyUsage(self):
        """Test KeyUsage"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

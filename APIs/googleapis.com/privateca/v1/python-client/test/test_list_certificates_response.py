# coding: utf-8

"""
    Certificate Authority API

    The Certificate Authority Service API is a highly-available, scalable service that enables you to simplify and automate the management of private certificate authorities (CAs) while staying in control of your private keys. 

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.list_certificates_response import ListCertificatesResponse

class TestListCertificatesResponse(unittest.TestCase):
    """ListCertificatesResponse unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> ListCertificatesResponse:
        """Test ListCertificatesResponse
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `ListCertificatesResponse`
        """
        model = ListCertificatesResponse()
        if include_optional:
            return ListCertificatesResponse(
                certificates = [
                    openapi_client.models.certificate.Certificate(
                        certificate_description = openapi_client.models.certificate_description.CertificateDescription(
                            aia_issuing_certificate_urls = [
                                ''
                                ], 
                            authority_key_id = openapi_client.models.key_id.KeyId(
                                key_id = '', ), 
                            cert_fingerprint = openapi_client.models.certificate_fingerprint.CertificateFingerprint(
                                sha256_hash = '', ), 
                            crl_distribution_points = [
                                ''
                                ], 
                            public_key = openapi_client.models.public_key.PublicKey(
                                format = 'KEY_FORMAT_UNSPECIFIED', 
                                key = 'YQ==', ), 
                            subject_description = openapi_client.models.subject_description.SubjectDescription(
                                hex_serial_number = '', 
                                lifetime = '', 
                                not_after_time = '', 
                                not_before_time = '', 
                                subject = openapi_client.models.subject.Subject(
                                    common_name = '', 
                                    country_code = '', 
                                    locality = '', 
                                    organization = '', 
                                    organizational_unit = '', 
                                    postal_code = '', 
                                    province = '', 
                                    street_address = '', ), 
                                subject_alt_name = openapi_client.models.subject_alt_names.SubjectAltNames(
                                    custom_sans = [
                                        openapi_client.models.x509_extension.X509Extension(
                                            critical = True, 
                                            object_id = openapi_client.models.object_id.ObjectId(
                                                object_id_path = [
                                                    56
                                                    ], ), 
                                            value = 'YQ==', )
                                        ], 
                                    dns_names = [
                                        ''
                                        ], 
                                    email_addresses = [
                                        ''
                                        ], 
                                    ip_addresses = [
                                        ''
                                        ], 
                                    uris = [
                                        ''
                                        ], ), ), 
                            subject_key_id = openapi_client.models.key_id.KeyId(
                                key_id = '', ), 
                            x509_description = openapi_client.models.x509_parameters.X509Parameters(
                                additional_extensions = [
                                    openapi_client.models.x509_extension.X509Extension(
                                        critical = True, 
                                        value = 'YQ==', )
                                    ], 
                                aia_ocsp_servers = [
                                    ''
                                    ], 
                                ca_options = openapi_client.models.ca_options.CaOptions(
                                    is_ca = True, 
                                    max_issuer_path_length = 56, ), 
                                key_usage = openapi_client.models.key_usage.KeyUsage(
                                    base_key_usage = openapi_client.models.key_usage_options.KeyUsageOptions(
                                        cert_sign = True, 
                                        content_commitment = True, 
                                        crl_sign = True, 
                                        data_encipherment = True, 
                                        decipher_only = True, 
                                        digital_signature = True, 
                                        encipher_only = True, 
                                        key_agreement = True, 
                                        key_encipherment = True, ), 
                                    extended_key_usage = openapi_client.models.extended_key_usage_options.ExtendedKeyUsageOptions(
                                        client_auth = True, 
                                        code_signing = True, 
                                        email_protection = True, 
                                        ocsp_signing = True, 
                                        server_auth = True, 
                                        time_stamping = True, ), 
                                    unknown_extended_key_usages = [
                                        openapi_client.models.object_id.ObjectId()
                                        ], ), 
                                name_constraints = openapi_client.models.name_constraints.NameConstraints(
                                    critical = True, 
                                    excluded_dns_names = [
                                        ''
                                        ], 
                                    excluded_email_addresses = [
                                        ''
                                        ], 
                                    excluded_ip_ranges = [
                                        ''
                                        ], 
                                    excluded_uris = [
                                        ''
                                        ], 
                                    permitted_dns_names = [
                                        ''
                                        ], 
                                    permitted_email_addresses = [
                                        ''
                                        ], 
                                    permitted_ip_ranges = [
                                        ''
                                        ], 
                                    permitted_uris = [
                                        ''
                                        ], ), 
                                policy_ids = [
                                    
                                    ], ), ), 
                        certificate_template = '', 
                        config = openapi_client.models.certificate_config.CertificateConfig(
                            subject_config = openapi_client.models.subject_config.SubjectConfig(), 
                            x509_config = openapi_client.models.x509_parameters.X509Parameters(), ), 
                        create_time = '', 
                        issuer_certificate_authority = '', 
                        labels = {
                            'key' : ''
                            }, 
                        lifetime = '', 
                        name = '', 
                        pem_certificate = '', 
                        pem_certificate_chain = [
                            ''
                            ], 
                        pem_csr = '', 
                        revocation_details = openapi_client.models.revocation_details.RevocationDetails(
                            revocation_state = 'REVOCATION_REASON_UNSPECIFIED', 
                            revocation_time = '', ), 
                        subject_mode = 'SUBJECT_REQUEST_MODE_UNSPECIFIED', 
                        update_time = '', )
                    ],
                next_page_token = '',
                unreachable = [
                    ''
                    ]
            )
        else:
            return ListCertificatesResponse(
        )
        """

    def testListCertificatesResponse(self):
        """Test ListCertificatesResponse"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

# coding: utf-8

"""
    Certificate Authority API

    The Certificate Authority Service API is a highly-available, scalable service that enables you to simplify and automate the management of private certificate authorities (CAs) while staying in control of your private keys. 

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.x509_extension import X509Extension
from typing import Optional, Set
from typing_extensions import Self

class SubjectAltNames(BaseModel):
    """
    SubjectAltNames corresponds to a more modern way of listing what the asserted identity is in a certificate (i.e., compared to the \"common name\" in the distinguished name).
    """ # noqa: E501
    custom_sans: Optional[List[X509Extension]] = Field(default=None, description="Contains additional subject alternative name values. For each custom_san, the `value` field must contain an ASN.1 encoded UTF8String.", alias="customSans")
    dns_names: Optional[List[StrictStr]] = Field(default=None, description="Contains only valid, fully-qualified host names.", alias="dnsNames")
    email_addresses: Optional[List[StrictStr]] = Field(default=None, description="Contains only valid RFC 2822 E-mail addresses.", alias="emailAddresses")
    ip_addresses: Optional[List[StrictStr]] = Field(default=None, description="Contains only valid 32-bit IPv4 addresses or RFC 4291 IPv6 addresses.", alias="ipAddresses")
    uris: Optional[List[StrictStr]] = Field(default=None, description="Contains only valid RFC 3986 URIs.")
    __properties: ClassVar[List[str]] = ["customSans", "dnsNames", "emailAddresses", "ipAddresses", "uris"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SubjectAltNames from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in custom_sans (list)
        _items = []
        if self.custom_sans:
            for _item_custom_sans in self.custom_sans:
                if _item_custom_sans:
                    _items.append(_item_custom_sans.to_dict())
            _dict['customSans'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SubjectAltNames from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "customSans": [X509Extension.from_dict(_item) for _item in obj["customSans"]] if obj.get("customSans") is not None else None,
            "dnsNames": obj.get("dnsNames"),
            "emailAddresses": obj.get("emailAddresses"),
            "ipAddresses": obj.get("ipAddresses"),
            "uris": obj.get("uris")
        })
        return _obj



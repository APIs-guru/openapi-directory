# coding: utf-8

"""
    Certificate Authority API

    The Certificate Authority Service API is a highly-available, scalable service that enables you to simplify and automate the management of private certificate authorities (CAs) while staying in control of your private keys. 

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.extended_key_usage_options import ExtendedKeyUsageOptions
from openapi_client.models.key_usage_options import KeyUsageOptions
from openapi_client.models.object_id import ObjectId
from typing import Optional, Set
from typing_extensions import Self

class KeyUsage(BaseModel):
    """
    A KeyUsage describes key usage values that may appear in an X.509 certificate.
    """ # noqa: E501
    base_key_usage: Optional[KeyUsageOptions] = Field(default=None, alias="baseKeyUsage")
    extended_key_usage: Optional[ExtendedKeyUsageOptions] = Field(default=None, alias="extendedKeyUsage")
    unknown_extended_key_usages: Optional[List[ObjectId]] = Field(default=None, description="Used to describe extended key usages that are not listed in the KeyUsage.ExtendedKeyUsageOptions message.", alias="unknownExtendedKeyUsages")
    __properties: ClassVar[List[str]] = ["baseKeyUsage", "extendedKeyUsage", "unknownExtendedKeyUsages"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of KeyUsage from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of base_key_usage
        if self.base_key_usage:
            _dict['baseKeyUsage'] = self.base_key_usage.to_dict()
        # override the default output from pydantic by calling `to_dict()` of extended_key_usage
        if self.extended_key_usage:
            _dict['extendedKeyUsage'] = self.extended_key_usage.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in unknown_extended_key_usages (list)
        _items = []
        if self.unknown_extended_key_usages:
            for _item_unknown_extended_key_usages in self.unknown_extended_key_usages:
                if _item_unknown_extended_key_usages:
                    _items.append(_item_unknown_extended_key_usages.to_dict())
            _dict['unknownExtendedKeyUsages'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of KeyUsage from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "baseKeyUsage": KeyUsageOptions.from_dict(obj["baseKeyUsage"]) if obj.get("baseKeyUsage") is not None else None,
            "extendedKeyUsage": ExtendedKeyUsageOptions.from_dict(obj["extendedKeyUsage"]) if obj.get("extendedKeyUsage") is not None else None,
            "unknownExtendedKeyUsages": [ObjectId.from_dict(_item) for _item in obj["unknownExtendedKeyUsages"]] if obj.get("unknownExtendedKeyUsages") is not None else None
        })
        return _obj



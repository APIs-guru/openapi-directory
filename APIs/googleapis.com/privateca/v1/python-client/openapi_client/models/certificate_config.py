# coding: utf-8

"""
    Certificate Authority API

    The Certificate Authority Service API is a highly-available, scalable service that enables you to simplify and automate the management of private certificate authorities (CAs) while staying in control of your private keys. 

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.certificate_config_key_id import CertificateConfigKeyId
from openapi_client.models.public_key import PublicKey
from openapi_client.models.subject_config import SubjectConfig
from openapi_client.models.x509_parameters import X509Parameters
from typing import Optional, Set
from typing_extensions import Self

class CertificateConfig(BaseModel):
    """
    A CertificateConfig describes an X.509 certificate or CSR that is to be created, as an alternative to using ASN.1.
    """ # noqa: E501
    public_key: Optional[PublicKey] = Field(default=None, alias="publicKey")
    subject_config: Optional[SubjectConfig] = Field(default=None, alias="subjectConfig")
    subject_key_id: Optional[CertificateConfigKeyId] = Field(default=None, alias="subjectKeyId")
    x509_config: Optional[X509Parameters] = Field(default=None, alias="x509Config")
    __properties: ClassVar[List[str]] = ["publicKey", "subjectConfig", "subjectKeyId", "x509Config"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CertificateConfig from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of public_key
        if self.public_key:
            _dict['publicKey'] = self.public_key.to_dict()
        # override the default output from pydantic by calling `to_dict()` of subject_config
        if self.subject_config:
            _dict['subjectConfig'] = self.subject_config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of subject_key_id
        if self.subject_key_id:
            _dict['subjectKeyId'] = self.subject_key_id.to_dict()
        # override the default output from pydantic by calling `to_dict()` of x509_config
        if self.x509_config:
            _dict['x509Config'] = self.x509_config.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CertificateConfig from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "publicKey": PublicKey.from_dict(obj["publicKey"]) if obj.get("publicKey") is not None else None,
            "subjectConfig": SubjectConfig.from_dict(obj["subjectConfig"]) if obj.get("subjectConfig") is not None else None,
            "subjectKeyId": CertificateConfigKeyId.from_dict(obj["subjectKeyId"]) if obj.get("subjectKeyId") is not None else None,
            "x509Config": X509Parameters.from_dict(obj["x509Config"]) if obj.get("x509Config") is not None else None
        })
        return _obj



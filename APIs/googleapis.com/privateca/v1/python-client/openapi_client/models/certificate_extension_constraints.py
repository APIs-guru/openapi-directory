# coding: utf-8

"""
    Certificate Authority API

    The Certificate Authority Service API is a highly-available, scalable service that enables you to simplify and automate the management of private certificate authorities (CAs) while staying in control of your private keys. 

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.object_id import ObjectId
from typing import Optional, Set
from typing_extensions import Self

class CertificateExtensionConstraints(BaseModel):
    """
    Describes a set of X.509 extensions that may be part of some certificate issuance controls.
    """ # noqa: E501
    additional_extensions: Optional[List[ObjectId]] = Field(default=None, description="Optional. A set of ObjectIds identifying custom X.509 extensions. Will be combined with known_extensions to determine the full set of X.509 extensions.", alias="additionalExtensions")
    known_extensions: Optional[List[StrictStr]] = Field(default=None, description="Optional. A set of named X.509 extensions. Will be combined with additional_extensions to determine the full set of X.509 extensions.", alias="knownExtensions")
    __properties: ClassVar[List[str]] = ["additionalExtensions", "knownExtensions"]

    @field_validator('known_extensions')
    def known_extensions_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        for i in value:
            if i not in set(['KNOWN_CERTIFICATE_EXTENSION_UNSPECIFIED', 'BASE_KEY_USAGE', 'EXTENDED_KEY_USAGE', 'CA_OPTIONS', 'POLICY_IDS', 'AIA_OCSP_SERVERS', 'NAME_CONSTRAINTS']):
                raise ValueError("each list item must be one of ('KNOWN_CERTIFICATE_EXTENSION_UNSPECIFIED', 'BASE_KEY_USAGE', 'EXTENDED_KEY_USAGE', 'CA_OPTIONS', 'POLICY_IDS', 'AIA_OCSP_SERVERS', 'NAME_CONSTRAINTS')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CertificateExtensionConstraints from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in additional_extensions (list)
        _items = []
        if self.additional_extensions:
            for _item_additional_extensions in self.additional_extensions:
                if _item_additional_extensions:
                    _items.append(_item_additional_extensions.to_dict())
            _dict['additionalExtensions'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CertificateExtensionConstraints from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "additionalExtensions": [ObjectId.from_dict(_item) for _item in obj["additionalExtensions"]] if obj.get("additionalExtensions") is not None else None,
            "knownExtensions": obj.get("knownExtensions")
        })
        return _obj



# coding: utf-8

"""
    Certificate Authority API

    The Certificate Authority Service API is a highly-available, scalable service that enables you to simplify and automate the management of private certificate authorities (CAs) while staying in control of your private keys. 

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.revoked_certificate import RevokedCertificate
from typing import Optional, Set
from typing_extensions import Self

class CertificateRevocationList(BaseModel):
    """
    A CertificateRevocationList corresponds to a signed X.509 certificate Revocation List (CRL). A CRL contains the serial numbers of certificates that should no longer be trusted.
    """ # noqa: E501
    access_url: Optional[StrictStr] = Field(default=None, description="Output only. The location where 'pem_crl' can be accessed.", alias="accessUrl")
    create_time: Optional[StrictStr] = Field(default=None, description="Output only. The time at which this CertificateRevocationList was created.", alias="createTime")
    labels: Optional[Dict[str, StrictStr]] = Field(default=None, description="Optional. Labels with user-defined metadata.")
    name: Optional[StrictStr] = Field(default=None, description="Output only. The resource name for this CertificateRevocationList in the format `projects/*/locations/*/caPools/*certificateAuthorities/*/ certificateRevocationLists/*`.")
    pem_crl: Optional[StrictStr] = Field(default=None, description="Output only. The PEM-encoded X.509 CRL.", alias="pemCrl")
    revision_id: Optional[StrictStr] = Field(default=None, description="Output only. The revision ID of this CertificateRevocationList. A new revision is committed whenever a new CRL is published. The format is an 8-character hexadecimal string.", alias="revisionId")
    revoked_certificates: Optional[List[RevokedCertificate]] = Field(default=None, description="Output only. The revoked serial numbers that appear in pem_crl.", alias="revokedCertificates")
    sequence_number: Optional[StrictStr] = Field(default=None, description="Output only. The CRL sequence number that appears in pem_crl.", alias="sequenceNumber")
    state: Optional[StrictStr] = Field(default=None, description="Output only. The State for this CertificateRevocationList.")
    update_time: Optional[StrictStr] = Field(default=None, description="Output only. The time at which this CertificateRevocationList was updated.", alias="updateTime")
    __properties: ClassVar[List[str]] = ["accessUrl", "createTime", "labels", "name", "pemCrl", "revisionId", "revokedCertificates", "sequenceNumber", "state", "updateTime"]

    @field_validator('state')
    def state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['STATE_UNSPECIFIED', 'ACTIVE', 'SUPERSEDED']):
            raise ValueError("must be one of enum values ('STATE_UNSPECIFIED', 'ACTIVE', 'SUPERSEDED')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CertificateRevocationList from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "access_url",
            "create_time",
            "name",
            "pem_crl",
            "revision_id",
            "revoked_certificates",
            "sequence_number",
            "state",
            "update_time",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in revoked_certificates (list)
        _items = []
        if self.revoked_certificates:
            for _item_revoked_certificates in self.revoked_certificates:
                if _item_revoked_certificates:
                    _items.append(_item_revoked_certificates.to_dict())
            _dict['revokedCertificates'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CertificateRevocationList from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "accessUrl": obj.get("accessUrl"),
            "createTime": obj.get("createTime"),
            "labels": obj.get("labels"),
            "name": obj.get("name"),
            "pemCrl": obj.get("pemCrl"),
            "revisionId": obj.get("revisionId"),
            "revokedCertificates": [RevokedCertificate.from_dict(_item) for _item in obj["revokedCertificates"]] if obj.get("revokedCertificates") is not None else None,
            "sequenceNumber": obj.get("sequenceNumber"),
            "state": obj.get("state"),
            "updateTime": obj.get("updateTime")
        })
        return _obj



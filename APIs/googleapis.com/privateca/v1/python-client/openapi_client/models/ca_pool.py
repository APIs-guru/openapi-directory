# coding: utf-8

"""
    Certificate Authority API

    The Certificate Authority Service API is a highly-available, scalable service that enables you to simplify and automate the management of private certificate authorities (CAs) while staying in control of your private keys. 

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.issuance_policy import IssuancePolicy
from openapi_client.models.publishing_options import PublishingOptions
from typing import Optional, Set
from typing_extensions import Self

class CaPool(BaseModel):
    """
    A CaPool represents a group of CertificateAuthorities that form a trust anchor. A CaPool can be used to manage issuance policies for one or more CertificateAuthority resources and to rotate CA certificates in and out of the trust anchor.
    """ # noqa: E501
    issuance_policy: Optional[IssuancePolicy] = Field(default=None, alias="issuancePolicy")
    labels: Optional[Dict[str, StrictStr]] = Field(default=None, description="Optional. Labels with user-defined metadata.")
    name: Optional[StrictStr] = Field(default=None, description="Output only. The resource name for this CaPool in the format `projects/*/locations/*/caPools/*`.")
    publishing_options: Optional[PublishingOptions] = Field(default=None, alias="publishingOptions")
    tier: Optional[StrictStr] = Field(default=None, description="Required. Immutable. The Tier of this CaPool.")
    __properties: ClassVar[List[str]] = ["issuancePolicy", "labels", "name", "publishingOptions", "tier"]

    @field_validator('tier')
    def tier_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['TIER_UNSPECIFIED', 'ENTERPRISE', 'DEVOPS']):
            raise ValueError("must be one of enum values ('TIER_UNSPECIFIED', 'ENTERPRISE', 'DEVOPS')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CaPool from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "name",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of issuance_policy
        if self.issuance_policy:
            _dict['issuancePolicy'] = self.issuance_policy.to_dict()
        # override the default output from pydantic by calling `to_dict()` of publishing_options
        if self.publishing_options:
            _dict['publishingOptions'] = self.publishing_options.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CaPool from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "issuancePolicy": IssuancePolicy.from_dict(obj["issuancePolicy"]) if obj.get("issuancePolicy") is not None else None,
            "labels": obj.get("labels"),
            "name": obj.get("name"),
            "publishingOptions": PublishingOptions.from_dict(obj["publishingOptions"]) if obj.get("publishingOptions") is not None else None,
            "tier": obj.get("tier")
        })
        return _obj



# coding: utf-8

"""
    Certificate Authority API

    The Certificate Authority Service API is a highly-available, scalable service that enables you to simplify and automate the management of private certificate authorities (CAs) while staying in control of your private keys. 

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class KeyUsageOptions(BaseModel):
    """
    KeyUsage.KeyUsageOptions corresponds to the key usage values described in https://tools.ietf.org/html/rfc5280#section-4.2.1.3.
    """ # noqa: E501
    cert_sign: Optional[StrictBool] = Field(default=None, description="The key may be used to sign certificates.", alias="certSign")
    content_commitment: Optional[StrictBool] = Field(default=None, description="The key may be used for cryptographic commitments. Note that this may also be referred to as \"non-repudiation\".", alias="contentCommitment")
    crl_sign: Optional[StrictBool] = Field(default=None, description="The key may be used sign certificate revocation lists.", alias="crlSign")
    data_encipherment: Optional[StrictBool] = Field(default=None, description="The key may be used to encipher data.", alias="dataEncipherment")
    decipher_only: Optional[StrictBool] = Field(default=None, description="The key may be used to decipher only.", alias="decipherOnly")
    digital_signature: Optional[StrictBool] = Field(default=None, description="The key may be used for digital signatures.", alias="digitalSignature")
    encipher_only: Optional[StrictBool] = Field(default=None, description="The key may be used to encipher only.", alias="encipherOnly")
    key_agreement: Optional[StrictBool] = Field(default=None, description="The key may be used in a key agreement protocol.", alias="keyAgreement")
    key_encipherment: Optional[StrictBool] = Field(default=None, description="The key may be used to encipher other keys.", alias="keyEncipherment")
    __properties: ClassVar[List[str]] = ["certSign", "contentCommitment", "crlSign", "dataEncipherment", "decipherOnly", "digitalSignature", "encipherOnly", "keyAgreement", "keyEncipherment"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of KeyUsageOptions from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of KeyUsageOptions from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "certSign": obj.get("certSign"),
            "contentCommitment": obj.get("contentCommitment"),
            "crlSign": obj.get("crlSign"),
            "dataEncipherment": obj.get("dataEncipherment"),
            "decipherOnly": obj.get("decipherOnly"),
            "digitalSignature": obj.get("digitalSignature"),
            "encipherOnly": obj.get("encipherOnly"),
            "keyAgreement": obj.get("keyAgreement"),
            "keyEncipherment": obj.get("keyEncipherment")
        })
        return _obj



# coding: utf-8

"""
    Certificate Authority API

    The Certificate Authority Service API is a highly-available, scalable service that enables you to simplify and automate the management of private certificate authorities (CAs) while staying in control of your private keys. 

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.subject import Subject
from openapi_client.models.subject_alt_names import SubjectAltNames
from typing import Optional, Set
from typing_extensions import Self

class SubjectDescription(BaseModel):
    """
    These values describe fields in an issued X.509 certificate such as the distinguished name, subject alternative names, serial number, and lifetime.
    """ # noqa: E501
    hex_serial_number: Optional[StrictStr] = Field(default=None, description="The serial number encoded in lowercase hexadecimal.", alias="hexSerialNumber")
    lifetime: Optional[StrictStr] = Field(default=None, description="For convenience, the actual lifetime of an issued certificate.")
    not_after_time: Optional[StrictStr] = Field(default=None, description="The time after which the certificate is expired. Per RFC 5280, the validity period for a certificate is the period of time from not_before_time through not_after_time, inclusive. Corresponds to 'not_before_time' + 'lifetime' - 1 second.", alias="notAfterTime")
    not_before_time: Optional[StrictStr] = Field(default=None, description="The time at which the certificate becomes valid.", alias="notBeforeTime")
    subject: Optional[Subject] = None
    subject_alt_name: Optional[SubjectAltNames] = Field(default=None, alias="subjectAltName")
    __properties: ClassVar[List[str]] = ["hexSerialNumber", "lifetime", "notAfterTime", "notBeforeTime", "subject", "subjectAltName"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SubjectDescription from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of subject
        if self.subject:
            _dict['subject'] = self.subject.to_dict()
        # override the default output from pydantic by calling `to_dict()` of subject_alt_name
        if self.subject_alt_name:
            _dict['subjectAltName'] = self.subject_alt_name.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SubjectDescription from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "hexSerialNumber": obj.get("hexSerialNumber"),
            "lifetime": obj.get("lifetime"),
            "notAfterTime": obj.get("notAfterTime"),
            "notBeforeTime": obj.get("notBeforeTime"),
            "subject": Subject.from_dict(obj["subject"]) if obj.get("subject") is not None else None,
            "subjectAltName": SubjectAltNames.from_dict(obj["subjectAltName"]) if obj.get("subjectAltName") is not None else None
        })
        return _obj



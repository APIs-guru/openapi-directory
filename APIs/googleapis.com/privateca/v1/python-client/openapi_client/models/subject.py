# coding: utf-8

"""
    Certificate Authority API

    The Certificate Authority Service API is a highly-available, scalable service that enables you to simplify and automate the management of private certificate authorities (CAs) while staying in control of your private keys. 

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class Subject(BaseModel):
    """
    Subject describes parts of a distinguished name that, in turn, describes the subject of the certificate.
    """ # noqa: E501
    common_name: Optional[StrictStr] = Field(default=None, description="The \"common name\" of the subject.", alias="commonName")
    country_code: Optional[StrictStr] = Field(default=None, description="The country code of the subject.", alias="countryCode")
    locality: Optional[StrictStr] = Field(default=None, description="The locality or city of the subject.")
    organization: Optional[StrictStr] = Field(default=None, description="The organization of the subject.")
    organizational_unit: Optional[StrictStr] = Field(default=None, description="The organizational_unit of the subject.", alias="organizationalUnit")
    postal_code: Optional[StrictStr] = Field(default=None, description="The postal code of the subject.", alias="postalCode")
    province: Optional[StrictStr] = Field(default=None, description="The province, territory, or regional state of the subject.")
    street_address: Optional[StrictStr] = Field(default=None, description="The street address of the subject.", alias="streetAddress")
    __properties: ClassVar[List[str]] = ["commonName", "countryCode", "locality", "organization", "organizationalUnit", "postalCode", "province", "streetAddress"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Subject from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Subject from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "commonName": obj.get("commonName"),
            "countryCode": obj.get("countryCode"),
            "locality": obj.get("locality"),
            "organization": obj.get("organization"),
            "organizationalUnit": obj.get("organizationalUnit"),
            "postalCode": obj.get("postalCode"),
            "province": obj.get("province"),
            "streetAddress": obj.get("streetAddress")
        })
        return _obj



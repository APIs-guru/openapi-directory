# coding: utf-8

"""
    Certificate Authority API

    The Certificate Authority Service API is a highly-available, scalable service that enables you to simplify and automate the management of private certificate authorities (CAs) while staying in control of your private keys. 

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.access_urls import AccessUrls
from openapi_client.models.certificate_config import CertificateConfig
from openapi_client.models.certificate_description import CertificateDescription
from openapi_client.models.key_version_spec import KeyVersionSpec
from openapi_client.models.subordinate_config import SubordinateConfig
from typing import Optional, Set
from typing_extensions import Self

class CertificateAuthority(BaseModel):
    """
    A CertificateAuthority represents an individual Certificate Authority. A CertificateAuthority can be used to create Certificates.
    """ # noqa: E501
    access_urls: Optional[AccessUrls] = Field(default=None, alias="accessUrls")
    ca_certificate_descriptions: Optional[List[CertificateDescription]] = Field(default=None, description="Output only. A structured description of this CertificateAuthority's CA certificate and its issuers. Ordered as self-to-root.", alias="caCertificateDescriptions")
    config: Optional[CertificateConfig] = None
    create_time: Optional[StrictStr] = Field(default=None, description="Output only. The time at which this CertificateAuthority was created.", alias="createTime")
    delete_time: Optional[StrictStr] = Field(default=None, description="Output only. The time at which this CertificateAuthority was soft deleted, if it is in the DELETED state.", alias="deleteTime")
    expire_time: Optional[StrictStr] = Field(default=None, description="Output only. The time at which this CertificateAuthority will be permanently purged, if it is in the DELETED state.", alias="expireTime")
    gcs_bucket: Optional[StrictStr] = Field(default=None, description="Immutable. The name of a Cloud Storage bucket where this CertificateAuthority will publish content, such as the CA certificate and CRLs. This must be a bucket name, without any prefixes (such as `gs://`) or suffixes (such as `.googleapis.com`). For example, to use a bucket named `my-bucket`, you would simply specify `my-bucket`. If not specified, a managed bucket will be created.", alias="gcsBucket")
    key_spec: Optional[KeyVersionSpec] = Field(default=None, alias="keySpec")
    labels: Optional[Dict[str, StrictStr]] = Field(default=None, description="Optional. Labels with user-defined metadata.")
    lifetime: Optional[StrictStr] = Field(default=None, description="Required. Immutable. The desired lifetime of the CA certificate. Used to create the \"not_before_time\" and \"not_after_time\" fields inside an X.509 certificate.")
    name: Optional[StrictStr] = Field(default=None, description="Output only. The resource name for this CertificateAuthority in the format `projects/*/locations/*/caPools/*/certificateAuthorities/*`.")
    pem_ca_certificates: Optional[List[StrictStr]] = Field(default=None, description="Output only. This CertificateAuthority's certificate chain, including the current CertificateAuthority's certificate. Ordered such that the root issuer is the final element (consistent with RFC 5246). For a self-signed CA, this will only list the current CertificateAuthority's certificate.", alias="pemCaCertificates")
    state: Optional[StrictStr] = Field(default=None, description="Output only. The State for this CertificateAuthority.")
    subordinate_config: Optional[SubordinateConfig] = Field(default=None, alias="subordinateConfig")
    tier: Optional[StrictStr] = Field(default=None, description="Output only. The CaPool.Tier of the CaPool that includes this CertificateAuthority.")
    type: Optional[StrictStr] = Field(default=None, description="Required. Immutable. The Type of this CertificateAuthority.")
    update_time: Optional[StrictStr] = Field(default=None, description="Output only. The time at which this CertificateAuthority was last updated.", alias="updateTime")
    __properties: ClassVar[List[str]] = ["accessUrls", "caCertificateDescriptions", "config", "createTime", "deleteTime", "expireTime", "gcsBucket", "keySpec", "labels", "lifetime", "name", "pemCaCertificates", "state", "subordinateConfig", "tier", "type", "updateTime"]

    @field_validator('state')
    def state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['STATE_UNSPECIFIED', 'ENABLED', 'DISABLED', 'STAGED', 'AWAITING_USER_ACTIVATION', 'DELETED']):
            raise ValueError("must be one of enum values ('STATE_UNSPECIFIED', 'ENABLED', 'DISABLED', 'STAGED', 'AWAITING_USER_ACTIVATION', 'DELETED')")
        return value

    @field_validator('tier')
    def tier_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['TIER_UNSPECIFIED', 'ENTERPRISE', 'DEVOPS']):
            raise ValueError("must be one of enum values ('TIER_UNSPECIFIED', 'ENTERPRISE', 'DEVOPS')")
        return value

    @field_validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['TYPE_UNSPECIFIED', 'SELF_SIGNED', 'SUBORDINATE']):
            raise ValueError("must be one of enum values ('TYPE_UNSPECIFIED', 'SELF_SIGNED', 'SUBORDINATE')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CertificateAuthority from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "ca_certificate_descriptions",
            "create_time",
            "delete_time",
            "expire_time",
            "name",
            "pem_ca_certificates",
            "state",
            "tier",
            "update_time",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of access_urls
        if self.access_urls:
            _dict['accessUrls'] = self.access_urls.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in ca_certificate_descriptions (list)
        _items = []
        if self.ca_certificate_descriptions:
            for _item_ca_certificate_descriptions in self.ca_certificate_descriptions:
                if _item_ca_certificate_descriptions:
                    _items.append(_item_ca_certificate_descriptions.to_dict())
            _dict['caCertificateDescriptions'] = _items
        # override the default output from pydantic by calling `to_dict()` of config
        if self.config:
            _dict['config'] = self.config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of key_spec
        if self.key_spec:
            _dict['keySpec'] = self.key_spec.to_dict()
        # override the default output from pydantic by calling `to_dict()` of subordinate_config
        if self.subordinate_config:
            _dict['subordinateConfig'] = self.subordinate_config.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CertificateAuthority from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "accessUrls": AccessUrls.from_dict(obj["accessUrls"]) if obj.get("accessUrls") is not None else None,
            "caCertificateDescriptions": [CertificateDescription.from_dict(_item) for _item in obj["caCertificateDescriptions"]] if obj.get("caCertificateDescriptions") is not None else None,
            "config": CertificateConfig.from_dict(obj["config"]) if obj.get("config") is not None else None,
            "createTime": obj.get("createTime"),
            "deleteTime": obj.get("deleteTime"),
            "expireTime": obj.get("expireTime"),
            "gcsBucket": obj.get("gcsBucket"),
            "keySpec": KeyVersionSpec.from_dict(obj["keySpec"]) if obj.get("keySpec") is not None else None,
            "labels": obj.get("labels"),
            "lifetime": obj.get("lifetime"),
            "name": obj.get("name"),
            "pemCaCertificates": obj.get("pemCaCertificates"),
            "state": obj.get("state"),
            "subordinateConfig": SubordinateConfig.from_dict(obj["subordinateConfig"]) if obj.get("subordinateConfig") is not None else None,
            "tier": obj.get("tier"),
            "type": obj.get("type"),
            "updateTime": obj.get("updateTime")
        })
        return _obj



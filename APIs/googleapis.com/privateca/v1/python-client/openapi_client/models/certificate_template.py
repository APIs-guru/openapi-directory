# coding: utf-8

"""
    Certificate Authority API

    The Certificate Authority Service API is a highly-available, scalable service that enables you to simplify and automate the management of private certificate authorities (CAs) while staying in control of your private keys. 

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.certificate_extension_constraints import CertificateExtensionConstraints
from openapi_client.models.certificate_identity_constraints import CertificateIdentityConstraints
from openapi_client.models.x509_parameters import X509Parameters
from typing import Optional, Set
from typing_extensions import Self

class CertificateTemplate(BaseModel):
    """
    A CertificateTemplate refers to a managed template for certificate issuance.
    """ # noqa: E501
    create_time: Optional[StrictStr] = Field(default=None, description="Output only. The time at which this CertificateTemplate was created.", alias="createTime")
    description: Optional[StrictStr] = Field(default=None, description="Optional. A human-readable description of scenarios this template is intended for.")
    identity_constraints: Optional[CertificateIdentityConstraints] = Field(default=None, alias="identityConstraints")
    labels: Optional[Dict[str, StrictStr]] = Field(default=None, description="Optional. Labels with user-defined metadata.")
    maximum_lifetime: Optional[StrictStr] = Field(default=None, description="Optional. The maximum lifetime allowed for issued Certificates that use this template. If the issuing CaPool's IssuancePolicy specifies a maximum_lifetime the minimum of the two durations will be the maximum lifetime for issued Certificates. Note that if the issuing CertificateAuthority expires before a Certificate's requested maximum_lifetime, the effective lifetime will be explicitly truncated to match it.", alias="maximumLifetime")
    name: Optional[StrictStr] = Field(default=None, description="Output only. The resource name for this CertificateTemplate in the format `projects/*/locations/*/certificateTemplates/*`.")
    passthrough_extensions: Optional[CertificateExtensionConstraints] = Field(default=None, alias="passthroughExtensions")
    predefined_values: Optional[X509Parameters] = Field(default=None, alias="predefinedValues")
    update_time: Optional[StrictStr] = Field(default=None, description="Output only. The time at which this CertificateTemplate was updated.", alias="updateTime")
    __properties: ClassVar[List[str]] = ["createTime", "description", "identityConstraints", "labels", "maximumLifetime", "name", "passthroughExtensions", "predefinedValues", "updateTime"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CertificateTemplate from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "create_time",
            "name",
            "update_time",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of identity_constraints
        if self.identity_constraints:
            _dict['identityConstraints'] = self.identity_constraints.to_dict()
        # override the default output from pydantic by calling `to_dict()` of passthrough_extensions
        if self.passthrough_extensions:
            _dict['passthroughExtensions'] = self.passthrough_extensions.to_dict()
        # override the default output from pydantic by calling `to_dict()` of predefined_values
        if self.predefined_values:
            _dict['predefinedValues'] = self.predefined_values.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CertificateTemplate from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "createTime": obj.get("createTime"),
            "description": obj.get("description"),
            "identityConstraints": CertificateIdentityConstraints.from_dict(obj["identityConstraints"]) if obj.get("identityConstraints") is not None else None,
            "labels": obj.get("labels"),
            "maximumLifetime": obj.get("maximumLifetime"),
            "name": obj.get("name"),
            "passthroughExtensions": CertificateExtensionConstraints.from_dict(obj["passthroughExtensions"]) if obj.get("passthroughExtensions") is not None else None,
            "predefinedValues": X509Parameters.from_dict(obj["predefinedValues"]) if obj.get("predefinedValues") is not None else None,
            "updateTime": obj.get("updateTime")
        })
        return _obj



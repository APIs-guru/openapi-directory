# coding: utf-8

"""
    Certificate Authority API

    The Certificate Authority Service API is a highly-available, scalable service that enables you to simplify and automate the management of private certificate authorities (CAs) while staying in control of your private keys. 

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class NameConstraints(BaseModel):
    """
    Describes the X.509 name constraints extension, per https://tools.ietf.org/html/rfc5280#section-4.2.1.10
    """ # noqa: E501
    critical: Optional[StrictBool] = Field(default=None, description="Indicates whether or not the name constraints are marked critical.")
    excluded_dns_names: Optional[List[StrictStr]] = Field(default=None, description="Contains excluded DNS names. Any DNS name that can be constructed by simply adding zero or more labels to the left-hand side of the name satisfies the name constraint. For example, `example.com`, `www.example.com`, `www.sub.example.com` would satisfy `example.com` while `example1.com` does not.", alias="excludedDnsNames")
    excluded_email_addresses: Optional[List[StrictStr]] = Field(default=None, description="Contains the excluded email addresses. The value can be a particular email address, a hostname to indicate all email addresses on that host or a domain with a leading period (e.g. `.example.com`) to indicate all email addresses in that domain.", alias="excludedEmailAddresses")
    excluded_ip_ranges: Optional[List[StrictStr]] = Field(default=None, description="Contains the excluded IP ranges. For IPv4 addresses, the ranges are expressed using CIDR notation as specified in RFC 4632. For IPv6 addresses, the ranges are expressed in similar encoding as IPv4 addresses.", alias="excludedIpRanges")
    excluded_uris: Optional[List[StrictStr]] = Field(default=None, description="Contains the excluded URIs that apply to the host part of the name. The value can be a hostname or a domain with a leading period (like `.example.com`)", alias="excludedUris")
    permitted_dns_names: Optional[List[StrictStr]] = Field(default=None, description="Contains permitted DNS names. Any DNS name that can be constructed by simply adding zero or more labels to the left-hand side of the name satisfies the name constraint. For example, `example.com`, `www.example.com`, `www.sub.example.com` would satisfy `example.com` while `example1.com` does not.", alias="permittedDnsNames")
    permitted_email_addresses: Optional[List[StrictStr]] = Field(default=None, description="Contains the permitted email addresses. The value can be a particular email address, a hostname to indicate all email addresses on that host or a domain with a leading period (e.g. `.example.com`) to indicate all email addresses in that domain.", alias="permittedEmailAddresses")
    permitted_ip_ranges: Optional[List[StrictStr]] = Field(default=None, description="Contains the permitted IP ranges. For IPv4 addresses, the ranges are expressed using CIDR notation as specified in RFC 4632. For IPv6 addresses, the ranges are expressed in similar encoding as IPv4 addresses.", alias="permittedIpRanges")
    permitted_uris: Optional[List[StrictStr]] = Field(default=None, description="Contains the permitted URIs that apply to the host part of the name. The value can be a hostname or a domain with a leading period (like `.example.com`)", alias="permittedUris")
    __properties: ClassVar[List[str]] = ["critical", "excludedDnsNames", "excludedEmailAddresses", "excludedIpRanges", "excludedUris", "permittedDnsNames", "permittedEmailAddresses", "permittedIpRanges", "permittedUris"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of NameConstraints from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of NameConstraints from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "critical": obj.get("critical"),
            "excludedDnsNames": obj.get("excludedDnsNames"),
            "excludedEmailAddresses": obj.get("excludedEmailAddresses"),
            "excludedIpRanges": obj.get("excludedIpRanges"),
            "excludedUris": obj.get("excludedUris"),
            "permittedDnsNames": obj.get("permittedDnsNames"),
            "permittedEmailAddresses": obj.get("permittedEmailAddresses"),
            "permittedIpRanges": obj.get("permittedIpRanges"),
            "permittedUris": obj.get("permittedUris")
        })
        return _obj



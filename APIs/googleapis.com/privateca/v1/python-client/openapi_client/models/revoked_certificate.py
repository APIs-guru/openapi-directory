# coding: utf-8

"""
    Certificate Authority API

    The Certificate Authority Service API is a highly-available, scalable service that enables you to simplify and automate the management of private certificate authorities (CAs) while staying in control of your private keys. 

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class RevokedCertificate(BaseModel):
    """
    Describes a revoked Certificate.
    """ # noqa: E501
    certificate: Optional[StrictStr] = Field(default=None, description="The resource name for the Certificate in the format `projects/*/locations/*/caPools/*/certificates/*`.")
    hex_serial_number: Optional[StrictStr] = Field(default=None, description="The serial number of the Certificate.", alias="hexSerialNumber")
    revocation_reason: Optional[StrictStr] = Field(default=None, description="The reason the Certificate was revoked.", alias="revocationReason")
    __properties: ClassVar[List[str]] = ["certificate", "hexSerialNumber", "revocationReason"]

    @field_validator('revocation_reason')
    def revocation_reason_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['REVOCATION_REASON_UNSPECIFIED', 'KEY_COMPROMISE', 'CERTIFICATE_AUTHORITY_COMPROMISE', 'AFFILIATION_CHANGED', 'SUPERSEDED', 'CESSATION_OF_OPERATION', 'CERTIFICATE_HOLD', 'PRIVILEGE_WITHDRAWN', 'ATTRIBUTE_AUTHORITY_COMPROMISE']):
            raise ValueError("must be one of enum values ('REVOCATION_REASON_UNSPECIFIED', 'KEY_COMPROMISE', 'CERTIFICATE_AUTHORITY_COMPROMISE', 'AFFILIATION_CHANGED', 'SUPERSEDED', 'CESSATION_OF_OPERATION', 'CERTIFICATE_HOLD', 'PRIVILEGE_WITHDRAWN', 'ATTRIBUTE_AUTHORITY_COMPROMISE')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of RevokedCertificate from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of RevokedCertificate from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "certificate": obj.get("certificate"),
            "hexSerialNumber": obj.get("hexSerialNumber"),
            "revocationReason": obj.get("revocationReason")
        })
        return _obj



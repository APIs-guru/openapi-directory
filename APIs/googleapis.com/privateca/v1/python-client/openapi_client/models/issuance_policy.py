# coding: utf-8

"""
    Certificate Authority API

    The Certificate Authority Service API is a highly-available, scalable service that enables you to simplify and automate the management of private certificate authorities (CAs) while staying in control of your private keys. 

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.allowed_key_type import AllowedKeyType
from openapi_client.models.certificate_extension_constraints import CertificateExtensionConstraints
from openapi_client.models.certificate_identity_constraints import CertificateIdentityConstraints
from openapi_client.models.issuance_modes import IssuanceModes
from openapi_client.models.x509_parameters import X509Parameters
from typing import Optional, Set
from typing_extensions import Self

class IssuancePolicy(BaseModel):
    """
    Defines controls over all certificate issuance within a CaPool.
    """ # noqa: E501
    allowed_issuance_modes: Optional[IssuanceModes] = Field(default=None, alias="allowedIssuanceModes")
    allowed_key_types: Optional[List[AllowedKeyType]] = Field(default=None, description="Optional. If any AllowedKeyType is specified, then the certificate request's public key must match one of the key types listed here. Otherwise, any key may be used.", alias="allowedKeyTypes")
    baseline_values: Optional[X509Parameters] = Field(default=None, alias="baselineValues")
    identity_constraints: Optional[CertificateIdentityConstraints] = Field(default=None, alias="identityConstraints")
    maximum_lifetime: Optional[StrictStr] = Field(default=None, description="Optional. The maximum lifetime allowed for issued Certificates. Note that if the issuing CertificateAuthority expires before a Certificate's requested maximum_lifetime, the effective lifetime will be explicitly truncated to match it.", alias="maximumLifetime")
    passthrough_extensions: Optional[CertificateExtensionConstraints] = Field(default=None, alias="passthroughExtensions")
    __properties: ClassVar[List[str]] = ["allowedIssuanceModes", "allowedKeyTypes", "baselineValues", "identityConstraints", "maximumLifetime", "passthroughExtensions"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of IssuancePolicy from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of allowed_issuance_modes
        if self.allowed_issuance_modes:
            _dict['allowedIssuanceModes'] = self.allowed_issuance_modes.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in allowed_key_types (list)
        _items = []
        if self.allowed_key_types:
            for _item_allowed_key_types in self.allowed_key_types:
                if _item_allowed_key_types:
                    _items.append(_item_allowed_key_types.to_dict())
            _dict['allowedKeyTypes'] = _items
        # override the default output from pydantic by calling `to_dict()` of baseline_values
        if self.baseline_values:
            _dict['baselineValues'] = self.baseline_values.to_dict()
        # override the default output from pydantic by calling `to_dict()` of identity_constraints
        if self.identity_constraints:
            _dict['identityConstraints'] = self.identity_constraints.to_dict()
        # override the default output from pydantic by calling `to_dict()` of passthrough_extensions
        if self.passthrough_extensions:
            _dict['passthroughExtensions'] = self.passthrough_extensions.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of IssuancePolicy from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "allowedIssuanceModes": IssuanceModes.from_dict(obj["allowedIssuanceModes"]) if obj.get("allowedIssuanceModes") is not None else None,
            "allowedKeyTypes": [AllowedKeyType.from_dict(_item) for _item in obj["allowedKeyTypes"]] if obj.get("allowedKeyTypes") is not None else None,
            "baselineValues": X509Parameters.from_dict(obj["baselineValues"]) if obj.get("baselineValues") is not None else None,
            "identityConstraints": CertificateIdentityConstraints.from_dict(obj["identityConstraints"]) if obj.get("identityConstraints") is not None else None,
            "maximumLifetime": obj.get("maximumLifetime"),
            "passthroughExtensions": CertificateExtensionConstraints.from_dict(obj["passthroughExtensions"]) if obj.get("passthroughExtensions") is not None else None
        })
        return _obj



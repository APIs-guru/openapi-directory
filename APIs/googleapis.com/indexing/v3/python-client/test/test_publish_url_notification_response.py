# coding: utf-8

"""
    Web Search Indexing API

    Notifies Google Web Search when your web pages change.

    The version of the OpenAPI document: v3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.publish_url_notification_response import PublishUrlNotificationResponse

class TestPublishUrlNotificationResponse(unittest.TestCase):
    """PublishUrlNotificationResponse unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> PublishUrlNotificationResponse:
        """Test PublishUrlNotificationResponse
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `PublishUrlNotificationResponse`
        """
        model = PublishUrlNotificationResponse()
        if include_optional:
            return PublishUrlNotificationResponse(
                url_notification_metadata = openapi_client.models.url_notification_metadata.UrlNotificationMetadata(
                    latest_remove = openapi_client.models.url_notification.UrlNotification(
                        notify_time = '', 
                        type = 'URL_NOTIFICATION_TYPE_UNSPECIFIED', 
                        url = '', ), 
                    latest_update = openapi_client.models.url_notification.UrlNotification(
                        notify_time = '', 
                        type = 'URL_NOTIFICATION_TYPE_UNSPECIFIED', 
                        url = '', ), 
                    url = '', )
            )
        else:
            return PublishUrlNotificationResponse(
        )
        """

    def testPublishUrlNotificationResponse(self):
        """Test PublishUrlNotificationResponse"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

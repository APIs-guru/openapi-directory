# coding: utf-8

"""
    BigLake API

    The BigLake API provides access to BigLake Metastore, a serverless, fully managed, and highly available metastore for open-source data that can be used for querying Apache Iceberg tables in BigQuery.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.list_tables_response import ListTablesResponse

class TestListTablesResponse(unittest.TestCase):
    """ListTablesResponse unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> ListTablesResponse:
        """Test ListTablesResponse
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `ListTablesResponse`
        """
        model = ListTablesResponse()
        if include_optional:
            return ListTablesResponse(
                next_page_token = '',
                tables = [
                    openapi_client.models.table.Table(
                        create_time = '', 
                        delete_time = '', 
                        etag = '', 
                        expire_time = '', 
                        hive_options = openapi_client.models.hive_table_options.HiveTableOptions(
                            parameters = {
                                'key' : ''
                                }, 
                            storage_descriptor = openapi_client.models.storage_descriptor.StorageDescriptor(
                                input_format = '', 
                                location_uri = '', 
                                output_format = '', 
                                serde_info = openapi_client.models.ser_de_info.SerDeInfo(
                                    serialization_lib = '', ), ), 
                            table_type = '', ), 
                        name = '', 
                        type = 'TYPE_UNSPECIFIED', 
                        update_time = '', )
                    ]
            )
        else:
            return ListTablesResponse(
        )
        """

    def testListTablesResponse(self):
        """Test ListTablesResponse"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

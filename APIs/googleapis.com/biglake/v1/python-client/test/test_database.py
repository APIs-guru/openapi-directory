# coding: utf-8

"""
    BigLake API

    The BigLake API provides access to BigLake Metastore, a serverless, fully managed, and highly available metastore for open-source data that can be used for querying Apache Iceberg tables in BigQuery.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.database import Database

class TestDatabase(unittest.TestCase):
    """Database unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> Database:
        """Test Database
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `Database`
        """
        model = Database()
        if include_optional:
            return Database(
                create_time = '',
                delete_time = '',
                expire_time = '',
                hive_options = openapi_client.models.hive_database_options.HiveDatabaseOptions(
                    location_uri = '', 
                    parameters = {
                        'key' : ''
                        }, ),
                name = '',
                type = 'TYPE_UNSPECIFIED',
                update_time = ''
            )
        else:
            return Database(
        )
        """

    def testDatabase(self):
        """Test Database"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

# coding: utf-8

"""
    BigLake API

    The BigLake API provides access to BigLake Metastore, a serverless, fully managed, and highly available metastore for open-source data that can be used for querying Apache Iceberg tables in BigQuery.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.hive_table_options import HiveTableOptions
from typing import Optional, Set
from typing_extensions import Self

class Table(BaseModel):
    """
    Represents a table.
    """ # noqa: E501
    create_time: Optional[StrictStr] = Field(default=None, description="Output only. The creation time of the table.", alias="createTime")
    delete_time: Optional[StrictStr] = Field(default=None, description="Output only. The deletion time of the table. Only set after the table is deleted.", alias="deleteTime")
    etag: Optional[StrictStr] = Field(default=None, description="The checksum of a table object computed by the server based on the value of other fields. It may be sent on update requests to ensure the client has an up-to-date value before proceeding. It is only checked for update table operations.")
    expire_time: Optional[StrictStr] = Field(default=None, description="Output only. The time when this table is considered expired. Only set after the table is deleted.", alias="expireTime")
    hive_options: Optional[HiveTableOptions] = Field(default=None, alias="hiveOptions")
    name: Optional[StrictStr] = Field(default=None, description="Output only. The resource name. Format: projects/{project_id_or_number}/locations/{location_id}/catalogs/{catalog_id}/databases/{database_id}/tables/{table_id}")
    type: Optional[StrictStr] = Field(default=None, description="The table type.")
    update_time: Optional[StrictStr] = Field(default=None, description="Output only. The last modification time of the table.", alias="updateTime")
    __properties: ClassVar[List[str]] = ["createTime", "deleteTime", "etag", "expireTime", "hiveOptions", "name", "type", "updateTime"]

    @field_validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['TYPE_UNSPECIFIED', 'HIVE']):
            raise ValueError("must be one of enum values ('TYPE_UNSPECIFIED', 'HIVE')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Table from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "create_time",
            "delete_time",
            "expire_time",
            "name",
            "update_time",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of hive_options
        if self.hive_options:
            _dict['hiveOptions'] = self.hive_options.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Table from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "createTime": obj.get("createTime"),
            "deleteTime": obj.get("deleteTime"),
            "etag": obj.get("etag"),
            "expireTime": obj.get("expireTime"),
            "hiveOptions": HiveTableOptions.from_dict(obj["hiveOptions"]) if obj.get("hiveOptions") is not None else None,
            "name": obj.get("name"),
            "type": obj.get("type"),
            "updateTime": obj.get("updateTime")
        })
        return _obj



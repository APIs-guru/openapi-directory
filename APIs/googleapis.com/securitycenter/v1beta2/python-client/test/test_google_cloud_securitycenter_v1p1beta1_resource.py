# coding: utf-8

"""
    Security Command Center API

    Security Command Center API provides access to temporal views of assets and findings within an organization.

    The version of the OpenAPI document: v1beta2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.google_cloud_securitycenter_v1p1beta1_resource import GoogleCloudSecuritycenterV1p1beta1Resource

class TestGoogleCloudSecuritycenterV1p1beta1Resource(unittest.TestCase):
    """GoogleCloudSecuritycenterV1p1beta1Resource unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> GoogleCloudSecuritycenterV1p1beta1Resource:
        """Test GoogleCloudSecuritycenterV1p1beta1Resource
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `GoogleCloudSecuritycenterV1p1beta1Resource`
        """
        model = GoogleCloudSecuritycenterV1p1beta1Resource()
        if include_optional:
            return GoogleCloudSecuritycenterV1p1beta1Resource(
                folders = [
                    openapi_client.models.google_cloud_securitycenter_v1p1beta1_folder.GoogleCloudSecuritycenterV1p1beta1Folder(
                        resource_folder = '', 
                        resource_folder_display_name = '', )
                    ],
                name = '',
                parent = '',
                parent_display_name = '',
                project = '',
                project_display_name = ''
            )
        else:
            return GoogleCloudSecuritycenterV1p1beta1Resource(
        )
        """

    def testGoogleCloudSecuritycenterV1p1beta1Resource(self):
        """Test GoogleCloudSecuritycenterV1p1beta1Resource"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

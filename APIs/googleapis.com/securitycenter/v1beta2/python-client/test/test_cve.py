# coding: utf-8

"""
    Security Command Center API

    Security Command Center API provides access to temporal views of assets and findings within an organization.

    The version of the OpenAPI document: v1beta2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.cve import Cve

class TestCve(unittest.TestCase):
    """Cve unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> Cve:
        """Test Cve
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `Cve`
        """
        model = Cve()
        if include_optional:
            return Cve(
                cvssv3 = openapi_client.models.cvssv3.Cvssv3(
                    attack_complexity = 'ATTACK_COMPLEXITY_UNSPECIFIED', 
                    attack_vector = 'ATTACK_VECTOR_UNSPECIFIED', 
                    availability_impact = 'IMPACT_UNSPECIFIED', 
                    base_score = 1.337, 
                    confidentiality_impact = 'IMPACT_UNSPECIFIED', 
                    integrity_impact = 'IMPACT_UNSPECIFIED', 
                    privileges_required = 'PRIVILEGES_REQUIRED_UNSPECIFIED', 
                    scope = 'SCOPE_UNSPECIFIED', 
                    user_interaction = 'USER_INTERACTION_UNSPECIFIED', ),
                exploitation_activity = 'EXPLOITATION_ACTIVITY_UNSPECIFIED',
                id = '',
                impact = 'RISK_RATING_UNSPECIFIED',
                observed_in_the_wild = True,
                references = [
                    openapi_client.models.reference.Reference(
                        source = '', 
                        uri = '', )
                    ],
                upstream_fix_available = True,
                zero_day = True
            )
        else:
            return Cve(
        )
        """

    def testCve(self):
        """Test Cve"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

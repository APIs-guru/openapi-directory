# coding: utf-8

"""
    Security Command Center API

    Security Command Center API provides access to temporal views of assets and findings within an organization.

    The version of the OpenAPI document: v1beta2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.google_cloud_securitycenter_v2_binding import GoogleCloudSecuritycenterV2Binding

class TestGoogleCloudSecuritycenterV2Binding(unittest.TestCase):
    """GoogleCloudSecuritycenterV2Binding unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> GoogleCloudSecuritycenterV2Binding:
        """Test GoogleCloudSecuritycenterV2Binding
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `GoogleCloudSecuritycenterV2Binding`
        """
        model = GoogleCloudSecuritycenterV2Binding()
        if include_optional:
            return GoogleCloudSecuritycenterV2Binding(
                name = '',
                ns = '',
                role = openapi_client.models.google_cloud_securitycenter_v2_role.GoogleCloudSecuritycenterV2Role(
                    kind = 'KIND_UNSPECIFIED', 
                    name = '', 
                    ns = '', ),
                subjects = [
                    openapi_client.models.google_cloud_securitycenter_v2_subject.GoogleCloudSecuritycenterV2Subject(
                        kind = 'AUTH_TYPE_UNSPECIFIED', 
                        name = '', 
                        ns = '', )
                    ]
            )
        else:
            return GoogleCloudSecuritycenterV2Binding(
        )
        """

    def testGoogleCloudSecuritycenterV2Binding(self):
        """Test GoogleCloudSecuritycenterV2Binding"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

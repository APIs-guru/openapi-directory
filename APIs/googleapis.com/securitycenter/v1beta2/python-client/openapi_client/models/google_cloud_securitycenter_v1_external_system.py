# coding: utf-8

"""
    Security Command Center API

    Security Command Center API provides access to temporal views of assets and findings within an organization.

    The version of the OpenAPI document: v1beta2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.ticket_info import TicketInfo
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudSecuritycenterV1ExternalSystem(BaseModel):
    """
    Representation of third party SIEM/SOAR fields within SCC.
    """ # noqa: E501
    assignees: Optional[List[StrictStr]] = Field(default=None, description="References primary/secondary etc assignees in the external system.")
    case_close_time: Optional[StrictStr] = Field(default=None, description="The time when the case was closed, as reported by the external system.", alias="caseCloseTime")
    case_create_time: Optional[StrictStr] = Field(default=None, description="The time when the case was created, as reported by the external system.", alias="caseCreateTime")
    case_priority: Optional[StrictStr] = Field(default=None, description="The priority of the finding's corresponding case in the external system.", alias="casePriority")
    case_sla: Optional[StrictStr] = Field(default=None, description="The SLA of the finding's corresponding case in the external system.", alias="caseSla")
    case_uri: Optional[StrictStr] = Field(default=None, description="The link to the finding's corresponding case in the external system.", alias="caseUri")
    external_system_update_time: Optional[StrictStr] = Field(default=None, description="The time when the case was last updated, as reported by the external system.", alias="externalSystemUpdateTime")
    external_uid: Optional[StrictStr] = Field(default=None, description="The identifier that's used to track the finding's corresponding case in the external system.", alias="externalUid")
    name: Optional[StrictStr] = Field(default=None, description="Full resource name of the external system, for example: \"organizations/1234/sources/5678/findings/123456/externalSystems/jira\", \"folders/1234/sources/5678/findings/123456/externalSystems/jira\", \"projects/1234/sources/5678/findings/123456/externalSystems/jira\"")
    status: Optional[StrictStr] = Field(default=None, description="The most recent status of the finding's corresponding case, as reported by the external system.")
    ticket_info: Optional[TicketInfo] = Field(default=None, alias="ticketInfo")
    __properties: ClassVar[List[str]] = ["assignees", "caseCloseTime", "caseCreateTime", "casePriority", "caseSla", "caseUri", "externalSystemUpdateTime", "externalUid", "name", "status", "ticketInfo"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudSecuritycenterV1ExternalSystem from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of ticket_info
        if self.ticket_info:
            _dict['ticketInfo'] = self.ticket_info.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudSecuritycenterV1ExternalSystem from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "assignees": obj.get("assignees"),
            "caseCloseTime": obj.get("caseCloseTime"),
            "caseCreateTime": obj.get("caseCreateTime"),
            "casePriority": obj.get("casePriority"),
            "caseSla": obj.get("caseSla"),
            "caseUri": obj.get("caseUri"),
            "externalSystemUpdateTime": obj.get("externalSystemUpdateTime"),
            "externalUid": obj.get("externalUid"),
            "name": obj.get("name"),
            "status": obj.get("status"),
            "ticketInfo": TicketInfo.from_dict(obj["ticketInfo"]) if obj.get("ticketInfo") is not None else None
        })
        return _obj



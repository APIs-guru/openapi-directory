# coding: utf-8

"""
    Security Command Center API

    Security Command Center API provides access to temporal views of assets and findings within an organization.

    The version of the OpenAPI document: v1beta2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.expr import Expr
from openapi_client.models.google_cloud_securitycenter_v1_custom_output_spec import GoogleCloudSecuritycenterV1CustomOutputSpec
from openapi_client.models.google_cloud_securitycenter_v1_resource_selector import GoogleCloudSecuritycenterV1ResourceSelector
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudSecuritycenterV1CustomConfig(BaseModel):
    """
    Defines the properties in a custom module configuration for Security Health Analytics. Use the custom module configuration to create custom detectors that generate custom findings for resources that you specify.
    """ # noqa: E501
    custom_output: Optional[GoogleCloudSecuritycenterV1CustomOutputSpec] = Field(default=None, alias="customOutput")
    description: Optional[StrictStr] = Field(default=None, description="Text that describes the vulnerability or misconfiguration that the custom module detects. This explanation is returned with each finding instance to help investigators understand the detected issue. The text must be enclosed in quotation marks.")
    predicate: Optional[Expr] = None
    recommendation: Optional[StrictStr] = Field(default=None, description="An explanation of the recommended steps that security teams can take to resolve the detected issue. This explanation is returned with each finding generated by this module in the `nextSteps` property of the finding JSON.")
    resource_selector: Optional[GoogleCloudSecuritycenterV1ResourceSelector] = Field(default=None, alias="resourceSelector")
    severity: Optional[StrictStr] = Field(default=None, description="The severity to assign to findings generated by the module.")
    __properties: ClassVar[List[str]] = ["customOutput", "description", "predicate", "recommendation", "resourceSelector", "severity"]

    @field_validator('severity')
    def severity_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['SEVERITY_UNSPECIFIED', 'CRITICAL', 'HIGH', 'MEDIUM', 'LOW']):
            raise ValueError("must be one of enum values ('SEVERITY_UNSPECIFIED', 'CRITICAL', 'HIGH', 'MEDIUM', 'LOW')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudSecuritycenterV1CustomConfig from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of custom_output
        if self.custom_output:
            _dict['customOutput'] = self.custom_output.to_dict()
        # override the default output from pydantic by calling `to_dict()` of predicate
        if self.predicate:
            _dict['predicate'] = self.predicate.to_dict()
        # override the default output from pydantic by calling `to_dict()` of resource_selector
        if self.resource_selector:
            _dict['resourceSelector'] = self.resource_selector.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudSecuritycenterV1CustomConfig from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "customOutput": GoogleCloudSecuritycenterV1CustomOutputSpec.from_dict(obj["customOutput"]) if obj.get("customOutput") is not None else None,
            "description": obj.get("description"),
            "predicate": Expr.from_dict(obj["predicate"]) if obj.get("predicate") is not None else None,
            "recommendation": obj.get("recommendation"),
            "resourceSelector": GoogleCloudSecuritycenterV1ResourceSelector.from_dict(obj["resourceSelector"]) if obj.get("resourceSelector") is not None else None,
            "severity": obj.get("severity")
        })
        return _obj



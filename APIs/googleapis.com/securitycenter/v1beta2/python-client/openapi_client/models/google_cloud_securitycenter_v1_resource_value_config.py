# coding: utf-8

"""
    Security Command Center API

    Security Command Center API provides access to temporal views of assets and findings within an organization.

    The version of the OpenAPI document: v1beta2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_cloud_securitycenter_v1_sensitive_data_protection_mapping import GoogleCloudSecuritycenterV1SensitiveDataProtectionMapping
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudSecuritycenterV1ResourceValueConfig(BaseModel):
    """
    A resource value config (RVC) is a mapping configuration of user's resources to resource values. Used in Attack path simulations.
    """ # noqa: E501
    create_time: Optional[StrictStr] = Field(default=None, description="Output only. Timestamp this resource value config was created.", alias="createTime")
    description: Optional[StrictStr] = Field(default=None, description="Description of the resource value config.")
    name: Optional[StrictStr] = Field(default=None, description="Name for the resource value config")
    resource_labels_selector: Optional[Dict[str, StrictStr]] = Field(default=None, description="List of resource labels to search for, evaluated with AND. E.g. \"resource_labels_selector\": {\"key\": \"value\", \"env\": \"prod\"} will match resources with labels \"key\": \"value\" AND \"env\": \"prod\" https://cloud.google.com/resource-manager/docs/creating-managing-labels", alias="resourceLabelsSelector")
    resource_type: Optional[StrictStr] = Field(default=None, description="Apply resource_value only to resources that match resource_type. resource_type will be checked with \"AND\" of other resources. E.g. \"storage.googleapis.com/Bucket\" with resource_value \"HIGH\" will apply \"HIGH\" value only to \"storage.googleapis.com/Bucket\" resources.", alias="resourceType")
    resource_value: Optional[StrictStr] = Field(default=None, description="Required. Resource value level this expression represents", alias="resourceValue")
    scope: Optional[StrictStr] = Field(default=None, description="Project or folder to scope this config to. For example, \"project/456\" would apply this config only to resources in \"project/456\" scope will be checked with \"AND\" of other resources.")
    sensitive_data_protection_mapping: Optional[GoogleCloudSecuritycenterV1SensitiveDataProtectionMapping] = Field(default=None, alias="sensitiveDataProtectionMapping")
    tag_values: Optional[List[StrictStr]] = Field(default=None, description="Required. Tag values combined with AND to check against. Values in the form \"tagValues/123\" E.g. [ \"tagValues/123\", \"tagValues/456\", \"tagValues/789\" ] https://cloud.google.com/resource-manager/docs/tags/tags-creating-and-managing", alias="tagValues")
    update_time: Optional[StrictStr] = Field(default=None, description="Output only. Timestamp this resource value config was last updated.", alias="updateTime")
    __properties: ClassVar[List[str]] = ["createTime", "description", "name", "resourceLabelsSelector", "resourceType", "resourceValue", "scope", "sensitiveDataProtectionMapping", "tagValues", "updateTime"]

    @field_validator('resource_value')
    def resource_value_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['RESOURCE_VALUE_UNSPECIFIED', 'HIGH', 'MEDIUM', 'LOW', 'NONE']):
            raise ValueError("must be one of enum values ('RESOURCE_VALUE_UNSPECIFIED', 'HIGH', 'MEDIUM', 'LOW', 'NONE')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudSecuritycenterV1ResourceValueConfig from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "create_time",
            "update_time",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of sensitive_data_protection_mapping
        if self.sensitive_data_protection_mapping:
            _dict['sensitiveDataProtectionMapping'] = self.sensitive_data_protection_mapping.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudSecuritycenterV1ResourceValueConfig from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "createTime": obj.get("createTime"),
            "description": obj.get("description"),
            "name": obj.get("name"),
            "resourceLabelsSelector": obj.get("resourceLabelsSelector"),
            "resourceType": obj.get("resourceType"),
            "resourceValue": obj.get("resourceValue"),
            "scope": obj.get("scope"),
            "sensitiveDataProtectionMapping": GoogleCloudSecuritycenterV1SensitiveDataProtectionMapping.from_dict(obj["sensitiveDataProtectionMapping"]) if obj.get("sensitiveDataProtectionMapping") is not None else None,
            "tagValues": obj.get("tagValues"),
            "updateTime": obj.get("updateTime")
        })
        return _obj



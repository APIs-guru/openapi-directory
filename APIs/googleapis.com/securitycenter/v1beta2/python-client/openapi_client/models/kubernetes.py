# coding: utf-8

"""
    Security Command Center API

    Security Command Center API provides access to temporal views of assets and findings within an organization.

    The version of the OpenAPI document: v1beta2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.access_review import AccessReview
from openapi_client.models.google_cloud_securitycenter_v1_binding import GoogleCloudSecuritycenterV1Binding
from openapi_client.models.node import Node
from openapi_client.models.node_pool import NodePool
from openapi_client.models.object import Object
from openapi_client.models.pod import Pod
from openapi_client.models.role import Role
from typing import Optional, Set
from typing_extensions import Self

class Kubernetes(BaseModel):
    """
    Kubernetes-related attributes.
    """ # noqa: E501
    access_reviews: Optional[List[AccessReview]] = Field(default=None, description="Provides information on any Kubernetes access reviews (privilege checks) relevant to the finding.", alias="accessReviews")
    bindings: Optional[List[GoogleCloudSecuritycenterV1Binding]] = Field(default=None, description="Provides Kubernetes role binding information for findings that involve [RoleBindings or ClusterRoleBindings](https://cloud.google.com/kubernetes-engine/docs/how-to/role-based-access-control).")
    node_pools: Optional[List[NodePool]] = Field(default=None, description="GKE [node pools](https://cloud.google.com/kubernetes-engine/docs/concepts/node-pools) associated with the finding. This field contains node pool information for each node, when it is available.", alias="nodePools")
    nodes: Optional[List[Node]] = Field(default=None, description="Provides Kubernetes [node](https://cloud.google.com/kubernetes-engine/docs/concepts/cluster-architecture#nodes) information.")
    objects: Optional[List[Object]] = Field(default=None, description="Kubernetes objects related to the finding.")
    pods: Optional[List[Pod]] = Field(default=None, description="Kubernetes [Pods](https://cloud.google.com/kubernetes-engine/docs/concepts/pod) associated with the finding. This field contains Pod records for each container that is owned by a Pod.")
    roles: Optional[List[Role]] = Field(default=None, description="Provides Kubernetes role information for findings that involve [Roles or ClusterRoles](https://cloud.google.com/kubernetes-engine/docs/how-to/role-based-access-control).")
    __properties: ClassVar[List[str]] = ["accessReviews", "bindings", "nodePools", "nodes", "objects", "pods", "roles"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Kubernetes from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in access_reviews (list)
        _items = []
        if self.access_reviews:
            for _item_access_reviews in self.access_reviews:
                if _item_access_reviews:
                    _items.append(_item_access_reviews.to_dict())
            _dict['accessReviews'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in bindings (list)
        _items = []
        if self.bindings:
            for _item_bindings in self.bindings:
                if _item_bindings:
                    _items.append(_item_bindings.to_dict())
            _dict['bindings'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in node_pools (list)
        _items = []
        if self.node_pools:
            for _item_node_pools in self.node_pools:
                if _item_node_pools:
                    _items.append(_item_node_pools.to_dict())
            _dict['nodePools'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in nodes (list)
        _items = []
        if self.nodes:
            for _item_nodes in self.nodes:
                if _item_nodes:
                    _items.append(_item_nodes.to_dict())
            _dict['nodes'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in objects (list)
        _items = []
        if self.objects:
            for _item_objects in self.objects:
                if _item_objects:
                    _items.append(_item_objects.to_dict())
            _dict['objects'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in pods (list)
        _items = []
        if self.pods:
            for _item_pods in self.pods:
                if _item_pods:
                    _items.append(_item_pods.to_dict())
            _dict['pods'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in roles (list)
        _items = []
        if self.roles:
            for _item_roles in self.roles:
                if _item_roles:
                    _items.append(_item_roles.to_dict())
            _dict['roles'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Kubernetes from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "accessReviews": [AccessReview.from_dict(_item) for _item in obj["accessReviews"]] if obj.get("accessReviews") is not None else None,
            "bindings": [GoogleCloudSecuritycenterV1Binding.from_dict(_item) for _item in obj["bindings"]] if obj.get("bindings") is not None else None,
            "nodePools": [NodePool.from_dict(_item) for _item in obj["nodePools"]] if obj.get("nodePools") is not None else None,
            "nodes": [Node.from_dict(_item) for _item in obj["nodes"]] if obj.get("nodes") is not None else None,
            "objects": [Object.from_dict(_item) for _item in obj["objects"]] if obj.get("objects") is not None else None,
            "pods": [Pod.from_dict(_item) for _item in obj["pods"]] if obj.get("pods") is not None else None,
            "roles": [Role.from_dict(_item) for _item in obj["roles"]] if obj.get("roles") is not None else None
        })
        return _obj



# coding: utf-8

"""
    Security Command Center API

    Security Command Center API provides access to temporal views of assets and findings within an organization.

    The version of the OpenAPI document: v1beta2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.config import Config
from typing import Optional, Set
from typing_extensions import Self

class ContainerThreatDetectionSettings(BaseModel):
    """
    Resource capturing the settings for the Container Threat Detection service.
    """ # noqa: E501
    modules: Optional[Dict[str, Config]] = Field(default=None, description="The configurations including the state of enablement for the service's different modules. The absence of a module in the map implies its configuration is inherited from its parent's.")
    name: Optional[StrictStr] = Field(default=None, description="The resource name of the ContainerThreatDetectionSettings. Formats: * organizations/{organization}/containerThreatDetectionSettings * folders/{folder}/containerThreatDetectionSettings * projects/{project}/containerThreatDetectionSettings * projects/{project}/locations/{location}/clusters/{cluster}/containerThreatDetectionSettings")
    service_account: Optional[StrictStr] = Field(default=None, description="Output only. The service account used by Container Threat Detection for scanning. Service accounts are scoped at the project level meaning this field will be empty at any level above a project.", alias="serviceAccount")
    service_enablement_state: Optional[StrictStr] = Field(default=None, description="The state of enablement for the service at its level of the resource hierarchy. A DISABLED state will override all module enablement_states to DISABLED.", alias="serviceEnablementState")
    update_time: Optional[StrictStr] = Field(default=None, description="Output only. The time the settings were last updated.", alias="updateTime")
    __properties: ClassVar[List[str]] = ["modules", "name", "serviceAccount", "serviceEnablementState", "updateTime"]

    @field_validator('service_enablement_state')
    def service_enablement_state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['ENABLEMENT_STATE_UNSPECIFIED', 'INHERITED', 'ENABLED', 'DISABLED']):
            raise ValueError("must be one of enum values ('ENABLEMENT_STATE_UNSPECIFIED', 'INHERITED', 'ENABLED', 'DISABLED')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ContainerThreatDetectionSettings from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "service_account",
            "update_time",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each value in modules (dict)
        _field_dict = {}
        if self.modules:
            for _key_modules in self.modules:
                if self.modules[_key_modules]:
                    _field_dict[_key_modules] = self.modules[_key_modules].to_dict()
            _dict['modules'] = _field_dict
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ContainerThreatDetectionSettings from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "modules": dict(
                (_k, Config.from_dict(_v))
                for _k, _v in obj["modules"].items()
            )
            if obj.get("modules") is not None
            else None,
            "name": obj.get("name"),
            "serviceAccount": obj.get("serviceAccount"),
            "serviceEnablementState": obj.get("serviceEnablementState"),
            "updateTime": obj.get("updateTime")
        })
        return _obj



# coding: utf-8

"""
    Security Command Center API

    Security Command Center API provides access to temporal views of assets and findings within an organization.

    The version of the OpenAPI document: v1beta2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_cloud_securitycenter_v2_geolocation import GoogleCloudSecuritycenterV2Geolocation
from openapi_client.models.google_cloud_securitycenter_v2_service_account_delegation_info import GoogleCloudSecuritycenterV2ServiceAccountDelegationInfo
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudSecuritycenterV2Access(BaseModel):
    """
    Represents an access event.
    """ # noqa: E501
    caller_ip: Optional[StrictStr] = Field(default=None, description="Caller's IP address, such as \"1.1.1.1\".", alias="callerIp")
    caller_ip_geo: Optional[GoogleCloudSecuritycenterV2Geolocation] = Field(default=None, alias="callerIpGeo")
    method_name: Optional[StrictStr] = Field(default=None, description="The method that the service account called, e.g. \"SetIamPolicy\".", alias="methodName")
    principal_email: Optional[StrictStr] = Field(default=None, description="Associated email, such as \"foo@google.com\". The email address of the authenticated user or a service account acting on behalf of a third party principal making the request. For third party identity callers, the `principal_subject` field is populated instead of this field. For privacy reasons, the principal email address is sometimes redacted. For more information, see [Caller identities in audit logs](https://cloud.google.com/logging/docs/audit#user-id).", alias="principalEmail")
    principal_subject: Optional[StrictStr] = Field(default=None, description="A string that represents the principal_subject that is associated with the identity. Unlike `principal_email`, `principal_subject` supports principals that aren't associated with email addresses, such as third party principals. For most identities, the format is `principal://iam.googleapis.com/{identity pool name}/subject/{subject}`. Some GKE identities, such as GKE_WORKLOAD, FREEFORM, and GKE_HUB_WORKLOAD, still use the legacy format `serviceAccount:{identity pool name}[{subject}]`.", alias="principalSubject")
    service_account_delegation_info: Optional[List[GoogleCloudSecuritycenterV2ServiceAccountDelegationInfo]] = Field(default=None, description="The identity delegation history of an authenticated service account that made the request. The `serviceAccountDelegationInfo[]` object contains information about the real authorities that try to access Google Cloud resources by delegating on a service account. When multiple authorities are present, they are guaranteed to be sorted based on the original ordering of the identity delegation events.", alias="serviceAccountDelegationInfo")
    service_account_key_name: Optional[StrictStr] = Field(default=None, description="The name of the service account key that was used to create or exchange credentials when authenticating the service account that made the request. This is a scheme-less URI full resource name. For example: \"//iam.googleapis.com/projects/{PROJECT_ID}/serviceAccounts/{ACCOUNT}/keys/{key}\". ", alias="serviceAccountKeyName")
    service_name: Optional[StrictStr] = Field(default=None, description="This is the API service that the service account made a call to, e.g. \"iam.googleapis.com\"", alias="serviceName")
    user_agent: Optional[StrictStr] = Field(default=None, description="The caller's user agent string associated with the finding.", alias="userAgent")
    user_agent_family: Optional[StrictStr] = Field(default=None, description="Type of user agent associated with the finding. For example, an operating system shell or an embedded or standalone application.", alias="userAgentFamily")
    user_name: Optional[StrictStr] = Field(default=None, description="A string that represents a username. The username provided depends on the type of the finding and is likely not an IAM principal. For example, this can be a system username if the finding is related to a virtual machine, or it can be an application login username.", alias="userName")
    __properties: ClassVar[List[str]] = ["callerIp", "callerIpGeo", "methodName", "principalEmail", "principalSubject", "serviceAccountDelegationInfo", "serviceAccountKeyName", "serviceName", "userAgent", "userAgentFamily", "userName"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudSecuritycenterV2Access from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of caller_ip_geo
        if self.caller_ip_geo:
            _dict['callerIpGeo'] = self.caller_ip_geo.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in service_account_delegation_info (list)
        _items = []
        if self.service_account_delegation_info:
            for _item_service_account_delegation_info in self.service_account_delegation_info:
                if _item_service_account_delegation_info:
                    _items.append(_item_service_account_delegation_info.to_dict())
            _dict['serviceAccountDelegationInfo'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudSecuritycenterV2Access from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "callerIp": obj.get("callerIp"),
            "callerIpGeo": GoogleCloudSecuritycenterV2Geolocation.from_dict(obj["callerIpGeo"]) if obj.get("callerIpGeo") is not None else None,
            "methodName": obj.get("methodName"),
            "principalEmail": obj.get("principalEmail"),
            "principalSubject": obj.get("principalSubject"),
            "serviceAccountDelegationInfo": [GoogleCloudSecuritycenterV2ServiceAccountDelegationInfo.from_dict(_item) for _item in obj["serviceAccountDelegationInfo"]] if obj.get("serviceAccountDelegationInfo") is not None else None,
            "serviceAccountKeyName": obj.get("serviceAccountKeyName"),
            "serviceName": obj.get("serviceName"),
            "userAgent": obj.get("userAgent"),
            "userAgentFamily": obj.get("userAgentFamily"),
            "userName": obj.get("userName")
        })
        return _obj



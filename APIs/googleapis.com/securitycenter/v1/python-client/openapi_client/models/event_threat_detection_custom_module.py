# coding: utf-8

"""
    Security Command Center API

    Security Command Center API provides access to temporal views of assets and findings within an organization.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class EventThreatDetectionCustomModule(BaseModel):
    """
    Represents an instance of an Event Threat Detection custom module, including its full module name, display name, enablement state, and last updated time. You can create a custom module at the organization, folder, or project level. Custom modules that you create at the organization or folder level are inherited by child folders and projects.
    """ # noqa: E501
    ancestor_module: Optional[StrictStr] = Field(default=None, description="Output only. The closest ancestor module that this module inherits the enablement state from. The format is the same as the EventThreatDetectionCustomModule resource name.", alias="ancestorModule")
    config: Optional[Dict[str, Any]] = Field(default=None, description="Config for the module. For the resident module, its config value is defined at this level. For the inherited module, its config value is inherited from the ancestor module.")
    description: Optional[StrictStr] = Field(default=None, description="The description for the module.")
    display_name: Optional[StrictStr] = Field(default=None, description="The human readable name to be displayed for the module.", alias="displayName")
    enablement_state: Optional[StrictStr] = Field(default=None, description="The state of enablement for the module at the given level of the hierarchy.", alias="enablementState")
    last_editor: Optional[StrictStr] = Field(default=None, description="Output only. The editor the module was last updated by.", alias="lastEditor")
    name: Optional[StrictStr] = Field(default=None, description="Immutable. The resource name of the Event Threat Detection custom module. Its format is: * \"organizations/{organization}/eventThreatDetectionSettings/customModules/{module}\". * \"folders/{folder}/eventThreatDetectionSettings/customModules/{module}\". * \"projects/{project}/eventThreatDetectionSettings/customModules/{module}\".")
    type: Optional[StrictStr] = Field(default=None, description="Type for the module. e.g. CONFIGURABLE_BAD_IP.")
    update_time: Optional[StrictStr] = Field(default=None, description="Output only. The time the module was last updated.", alias="updateTime")
    __properties: ClassVar[List[str]] = ["ancestorModule", "config", "description", "displayName", "enablementState", "lastEditor", "name", "type", "updateTime"]

    @field_validator('enablement_state')
    def enablement_state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['ENABLEMENT_STATE_UNSPECIFIED', 'ENABLED', 'DISABLED', 'INHERITED']):
            raise ValueError("must be one of enum values ('ENABLEMENT_STATE_UNSPECIFIED', 'ENABLED', 'DISABLED', 'INHERITED')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of EventThreatDetectionCustomModule from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "ancestor_module",
            "last_editor",
            "update_time",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of EventThreatDetectionCustomModule from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "ancestorModule": obj.get("ancestorModule"),
            "config": obj.get("config"),
            "description": obj.get("description"),
            "displayName": obj.get("displayName"),
            "enablementState": obj.get("enablementState"),
            "lastEditor": obj.get("lastEditor"),
            "name": obj.get("name"),
            "type": obj.get("type"),
            "updateTime": obj.get("updateTime")
        })
        return _obj



# coding: utf-8

"""
    Security Command Center API

    Security Command Center API provides access to temporal views of assets and findings within an organization.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.cvssv3 import Cvssv3
from openapi_client.models.reference import Reference
from typing import Optional, Set
from typing_extensions import Self

class Cve(BaseModel):
    """
    CVE stands for Common Vulnerabilities and Exposures. Information from the [CVE record](https://www.cve.org/ResourcesSupport/Glossary) that describes this vulnerability.
    """ # noqa: E501
    cvssv3: Optional[Cvssv3] = None
    exploitation_activity: Optional[StrictStr] = Field(default=None, description="The exploitation activity of the vulnerability in the wild.", alias="exploitationActivity")
    id: Optional[StrictStr] = Field(default=None, description="The unique identifier for the vulnerability. e.g. CVE-2021-34527")
    impact: Optional[StrictStr] = Field(default=None, description="The potential impact of the vulnerability if it was to be exploited.")
    observed_in_the_wild: Optional[StrictBool] = Field(default=None, description="Whether or not the vulnerability has been observed in the wild.", alias="observedInTheWild")
    references: Optional[List[Reference]] = Field(default=None, description="Additional information about the CVE. e.g. https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-34527")
    upstream_fix_available: Optional[StrictBool] = Field(default=None, description="Whether upstream fix is available for the CVE.", alias="upstreamFixAvailable")
    zero_day: Optional[StrictBool] = Field(default=None, description="Whether or not the vulnerability was zero day when the finding was published.", alias="zeroDay")
    __properties: ClassVar[List[str]] = ["cvssv3", "exploitationActivity", "id", "impact", "observedInTheWild", "references", "upstreamFixAvailable", "zeroDay"]

    @field_validator('exploitation_activity')
    def exploitation_activity_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['EXPLOITATION_ACTIVITY_UNSPECIFIED', 'WIDE', 'CONFIRMED', 'AVAILABLE', 'ANTICIPATED', 'NO_KNOWN']):
            raise ValueError("must be one of enum values ('EXPLOITATION_ACTIVITY_UNSPECIFIED', 'WIDE', 'CONFIRMED', 'AVAILABLE', 'ANTICIPATED', 'NO_KNOWN')")
        return value

    @field_validator('impact')
    def impact_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['RISK_RATING_UNSPECIFIED', 'LOW', 'MEDIUM', 'HIGH', 'CRITICAL']):
            raise ValueError("must be one of enum values ('RISK_RATING_UNSPECIFIED', 'LOW', 'MEDIUM', 'HIGH', 'CRITICAL')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Cve from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of cvssv3
        if self.cvssv3:
            _dict['cvssv3'] = self.cvssv3.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in references (list)
        _items = []
        if self.references:
            for _item_references in self.references:
                if _item_references:
                    _items.append(_item_references.to_dict())
            _dict['references'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Cve from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "cvssv3": Cvssv3.from_dict(obj["cvssv3"]) if obj.get("cvssv3") is not None else None,
            "exploitationActivity": obj.get("exploitationActivity"),
            "id": obj.get("id"),
            "impact": obj.get("impact"),
            "observedInTheWild": obj.get("observedInTheWild"),
            "references": [Reference.from_dict(_item) for _item in obj["references"]] if obj.get("references") is not None else None,
            "upstreamFixAvailable": obj.get("upstreamFixAvailable"),
            "zeroDay": obj.get("zeroDay")
        })
        return _obj



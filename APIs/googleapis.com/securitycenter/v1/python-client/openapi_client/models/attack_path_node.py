# coding: utf-8

"""
    Security Command Center API

    Security Command Center API provides access to temporal views of assets and findings within an organization.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.attack_step_node import AttackStepNode
from openapi_client.models.path_node_associated_finding import PathNodeAssociatedFinding
from typing import Optional, Set
from typing_extensions import Self

class AttackPathNode(BaseModel):
    """
    Represents one point that an attacker passes through in this attack path.
    """ # noqa: E501
    associated_findings: Optional[List[PathNodeAssociatedFinding]] = Field(default=None, description="The findings associated with this node in the attack path.", alias="associatedFindings")
    attack_steps: Optional[List[AttackStepNode]] = Field(default=None, description="A list of attack step nodes that exist in this attack path node.", alias="attackSteps")
    display_name: Optional[StrictStr] = Field(default=None, description="Human-readable name of this resource.", alias="displayName")
    resource: Optional[StrictStr] = Field(default=None, description="The name of the resource at this point in the attack path. The format of the name follows the Cloud Asset Inventory [resource name format](\"https://cloud.google.com/asset-inventory/docs/resource-name-format\")")
    resource_type: Optional[StrictStr] = Field(default=None, description="The [supported resource type](https://cloud.google.com/asset-inventory/docs/supported-asset-types\")", alias="resourceType")
    uuid: Optional[StrictStr] = Field(default=None, description="Unique id of the attack path node.")
    __properties: ClassVar[List[str]] = ["associatedFindings", "attackSteps", "displayName", "resource", "resourceType", "uuid"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AttackPathNode from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in associated_findings (list)
        _items = []
        if self.associated_findings:
            for _item_associated_findings in self.associated_findings:
                if _item_associated_findings:
                    _items.append(_item_associated_findings.to_dict())
            _dict['associatedFindings'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in attack_steps (list)
        _items = []
        if self.attack_steps:
            for _item_attack_steps in self.attack_steps:
                if _item_attack_steps:
                    _items.append(_item_attack_steps.to_dict())
            _dict['attackSteps'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AttackPathNode from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "associatedFindings": [PathNodeAssociatedFinding.from_dict(_item) for _item in obj["associatedFindings"]] if obj.get("associatedFindings") is not None else None,
            "attackSteps": [AttackStepNode.from_dict(_item) for _item in obj["attackSteps"]] if obj.get("attackSteps") is not None else None,
            "displayName": obj.get("displayName"),
            "resource": obj.get("resource"),
            "resourceType": obj.get("resourceType"),
            "uuid": obj.get("uuid")
        })
        return _obj



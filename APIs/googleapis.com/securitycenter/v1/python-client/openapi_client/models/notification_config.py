# coding: utf-8

"""
    Security Command Center API

    Security Command Center API provides access to temporal views of assets and findings within an organization.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.streaming_config import StreamingConfig
from typing import Optional, Set
from typing_extensions import Self

class NotificationConfig(BaseModel):
    """
    Cloud Security Command Center (Cloud SCC) notification configs. A notification config is a Cloud SCC resource that contains the configuration to send notifications for create/update events of findings, assets and etc.
    """ # noqa: E501
    description: Optional[StrictStr] = Field(default=None, description="The description of the notification config (max of 1024 characters).")
    name: Optional[StrictStr] = Field(default=None, description="The relative resource name of this notification config. See: https://cloud.google.com/apis/design/resource_names#relative_resource_name Example: \"organizations/{organization_id}/notificationConfigs/notify_public_bucket\", \"folders/{folder_id}/notificationConfigs/notify_public_bucket\", or \"projects/{project_id}/notificationConfigs/notify_public_bucket\".")
    pubsub_topic: Optional[StrictStr] = Field(default=None, description="The Pub/Sub topic to send notifications to. Its format is \"projects/[project_id]/topics/[topic]\".", alias="pubsubTopic")
    service_account: Optional[StrictStr] = Field(default=None, description="Output only. The service account that needs \"pubsub.topics.publish\" permission to publish to the Pub/Sub topic.", alias="serviceAccount")
    streaming_config: Optional[StreamingConfig] = Field(default=None, alias="streamingConfig")
    __properties: ClassVar[List[str]] = ["description", "name", "pubsubTopic", "serviceAccount", "streamingConfig"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of NotificationConfig from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "service_account",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of streaming_config
        if self.streaming_config:
            _dict['streamingConfig'] = self.streaming_config.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of NotificationConfig from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "description": obj.get("description"),
            "name": obj.get("name"),
            "pubsubTopic": obj.get("pubsubTopic"),
            "serviceAccount": obj.get("serviceAccount"),
            "streamingConfig": StreamingConfig.from_dict(obj["streamingConfig"]) if obj.get("streamingConfig") is not None else None
        })
        return _obj



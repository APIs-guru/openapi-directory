# coding: utf-8

"""
    Security Command Center API

    Security Command Center API provides access to temporal views of assets and findings within an organization.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from openapi_client.models.resource_value_config_metadata import ResourceValueConfigMetadata
from typing import Optional, Set
from typing_extensions import Self

class ValuedResource(BaseModel):
    """
    A resource that is determined to have value to a user's system
    """ # noqa: E501
    display_name: Optional[StrictStr] = Field(default=None, description="Human-readable name of the valued resource.", alias="displayName")
    exposed_score: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Exposed score for this valued resource. A value of 0 means no exposure was detected exposure.", alias="exposedScore")
    name: Optional[StrictStr] = Field(default=None, description="Valued resource name, for example, e.g.: `organizations/123/simulations/456/valuedResources/789`")
    resource: Optional[StrictStr] = Field(default=None, description="The [full resource name](https://cloud.google.com/apis/design/resource_names#full_resource_name) of the valued resource.")
    resource_type: Optional[StrictStr] = Field(default=None, description="The [resource type](https://cloud.google.com/asset-inventory/docs/supported-asset-types) of the valued resource.", alias="resourceType")
    resource_value: Optional[StrictStr] = Field(default=None, description="How valuable this resource is.", alias="resourceValue")
    resource_value_configs_used: Optional[List[ResourceValueConfigMetadata]] = Field(default=None, description="List of resource value configurations' metadata used to determine the value of this resource. Maximum of 100.", alias="resourceValueConfigsUsed")
    __properties: ClassVar[List[str]] = ["displayName", "exposedScore", "name", "resource", "resourceType", "resourceValue", "resourceValueConfigsUsed"]

    @field_validator('resource_value')
    def resource_value_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['RESOURCE_VALUE_UNSPECIFIED', 'RESOURCE_VALUE_LOW', 'RESOURCE_VALUE_MEDIUM', 'RESOURCE_VALUE_HIGH']):
            raise ValueError("must be one of enum values ('RESOURCE_VALUE_UNSPECIFIED', 'RESOURCE_VALUE_LOW', 'RESOURCE_VALUE_MEDIUM', 'RESOURCE_VALUE_HIGH')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ValuedResource from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in resource_value_configs_used (list)
        _items = []
        if self.resource_value_configs_used:
            for _item_resource_value_configs_used in self.resource_value_configs_used:
                if _item_resource_value_configs_used:
                    _items.append(_item_resource_value_configs_used.to_dict())
            _dict['resourceValueConfigsUsed'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ValuedResource from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "displayName": obj.get("displayName"),
            "exposedScore": obj.get("exposedScore"),
            "name": obj.get("name"),
            "resource": obj.get("resource"),
            "resourceType": obj.get("resourceType"),
            "resourceValue": obj.get("resourceValue"),
            "resourceValueConfigsUsed": [ResourceValueConfigMetadata.from_dict(_item) for _item in obj["resourceValueConfigsUsed"]] if obj.get("resourceValueConfigsUsed") is not None else None
        })
        return _obj



# coding: utf-8

"""
    Security Command Center API

    Security Command Center API provides access to temporal views of assets and findings within an organization.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_cloud_securitycenter_v2_exfil_resource import GoogleCloudSecuritycenterV2ExfilResource
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudSecuritycenterV2Exfiltration(BaseModel):
    """
    Exfiltration represents a data exfiltration attempt from one or more sources to one or more targets. The `sources` attribute lists the sources of the exfiltrated data. The `targets` attribute lists the destinations the data was copied to.
    """ # noqa: E501
    sources: Optional[List[GoogleCloudSecuritycenterV2ExfilResource]] = Field(default=None, description="If there are multiple sources, then the data is considered \"joined\" between them. For instance, BigQuery can join multiple tables, and each table would be considered a source.")
    targets: Optional[List[GoogleCloudSecuritycenterV2ExfilResource]] = Field(default=None, description="If there are multiple targets, each target would get a complete copy of the \"joined\" source data.")
    total_exfiltrated_bytes: Optional[StrictStr] = Field(default=None, description="Total exfiltrated bytes processed for the entire job.", alias="totalExfiltratedBytes")
    __properties: ClassVar[List[str]] = ["sources", "targets", "totalExfiltratedBytes"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudSecuritycenterV2Exfiltration from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in sources (list)
        _items = []
        if self.sources:
            for _item_sources in self.sources:
                if _item_sources:
                    _items.append(_item_sources.to_dict())
            _dict['sources'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in targets (list)
        _items = []
        if self.targets:
            for _item_targets in self.targets:
                if _item_targets:
                    _items.append(_item_targets.to_dict())
            _dict['targets'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudSecuritycenterV2Exfiltration from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "sources": [GoogleCloudSecuritycenterV2ExfilResource.from_dict(_item) for _item in obj["sources"]] if obj.get("sources") is not None else None,
            "targets": [GoogleCloudSecuritycenterV2ExfilResource.from_dict(_item) for _item in obj["targets"]] if obj.get("targets") is not None else None,
            "totalExfiltratedBytes": obj.get("totalExfiltratedBytes")
        })
        return _obj



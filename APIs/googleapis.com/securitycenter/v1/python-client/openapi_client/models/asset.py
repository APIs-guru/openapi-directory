# coding: utf-8

"""
    Security Command Center API

    Security Command Center API provides access to temporal views of assets and findings within an organization.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.iam_policy import IamPolicy
from openapi_client.models.security_center_properties import SecurityCenterProperties
from openapi_client.models.security_marks import SecurityMarks
from typing import Optional, Set
from typing_extensions import Self

class Asset(BaseModel):
    """
    Security Command Center representation of a Google Cloud resource. The Asset is a Security Command Center resource that captures information about a single Google Cloud resource. All modifications to an Asset are only within the context of Security Command Center and don't affect the referenced Google Cloud resource.
    """ # noqa: E501
    canonical_name: Optional[StrictStr] = Field(default=None, description="The canonical name of the resource. It's either \"organizations/{organization_id}/assets/{asset_id}\", \"folders/{folder_id}/assets/{asset_id}\" or \"projects/{project_number}/assets/{asset_id}\", depending on the closest CRM ancestor of the resource.", alias="canonicalName")
    create_time: Optional[StrictStr] = Field(default=None, description="The time at which the asset was created in Security Command Center.", alias="createTime")
    iam_policy: Optional[IamPolicy] = Field(default=None, alias="iamPolicy")
    name: Optional[StrictStr] = Field(default=None, description="The relative resource name of this asset. See: https://cloud.google.com/apis/design/resource_names#relative_resource_name Example: \"organizations/{organization_id}/assets/{asset_id}\".")
    resource_properties: Optional[Dict[str, Any]] = Field(default=None, description="Resource managed properties. These properties are managed and defined by the Google Cloud resource and cannot be modified by the user.", alias="resourceProperties")
    security_center_properties: Optional[SecurityCenterProperties] = Field(default=None, alias="securityCenterProperties")
    security_marks: Optional[SecurityMarks] = Field(default=None, alias="securityMarks")
    update_time: Optional[StrictStr] = Field(default=None, description="The time at which the asset was last updated or added in Cloud SCC.", alias="updateTime")
    __properties: ClassVar[List[str]] = ["canonicalName", "createTime", "iamPolicy", "name", "resourceProperties", "securityCenterProperties", "securityMarks", "updateTime"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Asset from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of iam_policy
        if self.iam_policy:
            _dict['iamPolicy'] = self.iam_policy.to_dict()
        # override the default output from pydantic by calling `to_dict()` of security_center_properties
        if self.security_center_properties:
            _dict['securityCenterProperties'] = self.security_center_properties.to_dict()
        # override the default output from pydantic by calling `to_dict()` of security_marks
        if self.security_marks:
            _dict['securityMarks'] = self.security_marks.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Asset from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "canonicalName": obj.get("canonicalName"),
            "createTime": obj.get("createTime"),
            "iamPolicy": IamPolicy.from_dict(obj["iamPolicy"]) if obj.get("iamPolicy") is not None else None,
            "name": obj.get("name"),
            "resourceProperties": obj.get("resourceProperties"),
            "securityCenterProperties": SecurityCenterProperties.from_dict(obj["securityCenterProperties"]) if obj.get("securityCenterProperties") is not None else None,
            "securityMarks": SecurityMarks.from_dict(obj["securityMarks"]) if obj.get("securityMarks") is not None else None,
            "updateTime": obj.get("updateTime")
        })
        return _obj



# coding: utf-8

"""
    Security Command Center API

    Security Command Center API provides access to temporal views of assets and findings within an organization.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.policy import Policy
from typing import Optional, Set
from typing_extensions import Self

class SimulatedResource(BaseModel):
    """
    Manually constructed resource name. If the custom module evaluates against only the resource data, you can omit the `iam_policy_data` field. If it evaluates only the `iam_policy_data` field, you can omit the resource data.
    """ # noqa: E501
    iam_policy_data: Optional[Policy] = Field(default=None, alias="iamPolicyData")
    resource_data: Optional[Dict[str, Any]] = Field(default=None, description="Optional. A representation of the Google Cloud resource. Should match the Google Cloud resource JSON format.", alias="resourceData")
    resource_type: Optional[StrictStr] = Field(default=None, description="Required. The type of the resource, for example, `compute.googleapis.com/Disk`.", alias="resourceType")
    __properties: ClassVar[List[str]] = ["iamPolicyData", "resourceData", "resourceType"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SimulatedResource from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of iam_policy_data
        if self.iam_policy_data:
            _dict['iamPolicyData'] = self.iam_policy_data.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SimulatedResource from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "iamPolicyData": Policy.from_dict(obj["iamPolicyData"]) if obj.get("iamPolicyData") is not None else None,
            "resourceData": obj.get("resourceData"),
            "resourceType": obj.get("resourceType")
        })
        return _obj



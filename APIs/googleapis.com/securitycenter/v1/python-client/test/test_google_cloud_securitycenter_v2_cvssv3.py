# coding: utf-8

"""
    Security Command Center API

    Security Command Center API provides access to temporal views of assets and findings within an organization.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.google_cloud_securitycenter_v2_cvssv3 import GoogleCloudSecuritycenterV2Cvssv3

class TestGoogleCloudSecuritycenterV2Cvssv3(unittest.TestCase):
    """GoogleCloudSecuritycenterV2Cvssv3 unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> GoogleCloudSecuritycenterV2Cvssv3:
        """Test GoogleCloudSecuritycenterV2Cvssv3
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `GoogleCloudSecuritycenterV2Cvssv3`
        """
        model = GoogleCloudSecuritycenterV2Cvssv3()
        if include_optional:
            return GoogleCloudSecuritycenterV2Cvssv3(
                attack_complexity = 'ATTACK_COMPLEXITY_UNSPECIFIED',
                attack_vector = 'ATTACK_VECTOR_UNSPECIFIED',
                availability_impact = 'IMPACT_UNSPECIFIED',
                base_score = 1.337,
                confidentiality_impact = 'IMPACT_UNSPECIFIED',
                integrity_impact = 'IMPACT_UNSPECIFIED',
                privileges_required = 'PRIVILEGES_REQUIRED_UNSPECIFIED',
                scope = 'SCOPE_UNSPECIFIED',
                user_interaction = 'USER_INTERACTION_UNSPECIFIED'
            )
        else:
            return GoogleCloudSecuritycenterV2Cvssv3(
        )
        """

    def testGoogleCloudSecuritycenterV2Cvssv3(self):
        """Test GoogleCloudSecuritycenterV2Cvssv3"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

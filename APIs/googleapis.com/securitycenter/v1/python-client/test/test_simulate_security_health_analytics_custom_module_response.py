# coding: utf-8

"""
    Security Command Center API

    Security Command Center API provides access to temporal views of assets and findings within an organization.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.simulate_security_health_analytics_custom_module_response import SimulateSecurityHealthAnalyticsCustomModuleResponse

class TestSimulateSecurityHealthAnalyticsCustomModuleResponse(unittest.TestCase):
    """SimulateSecurityHealthAnalyticsCustomModuleResponse unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> SimulateSecurityHealthAnalyticsCustomModuleResponse:
        """Test SimulateSecurityHealthAnalyticsCustomModuleResponse
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `SimulateSecurityHealthAnalyticsCustomModuleResponse`
        """
        model = SimulateSecurityHealthAnalyticsCustomModuleResponse()
        if include_optional:
            return SimulateSecurityHealthAnalyticsCustomModuleResponse(
                result = openapi_client.models.simulated_result.SimulatedResult(
                    error = openapi_client.models.status.Status(
                        code = 56, 
                        details = [
                            {
                                'key' : null
                                }
                            ], 
                        message = '', ), 
                    finding = openapi_client.models.finding.Finding(
                        access = openapi_client.models.access.Access(
                            caller_ip = '', 
                            caller_ip_geo = openapi_client.models.geolocation.Geolocation(
                                region_code = '', ), 
                            method_name = '', 
                            principal_email = '', 
                            principal_subject = '', 
                            service_account_delegation_info = [
                                openapi_client.models.service_account_delegation_info.ServiceAccountDelegationInfo(
                                    principal_email = '', 
                                    principal_subject = '', )
                                ], 
                            service_account_key_name = '', 
                            service_name = '', 
                            user_agent = '', 
                            user_agent_family = '', 
                            user_name = '', ), 
                        application = openapi_client.models.application.Application(
                            base_uri = '', 
                            full_uri = '', ), 
                        attack_exposure = openapi_client.models.attack_exposure.AttackExposure(
                            attack_exposure_result = '', 
                            exposed_high_value_resources_count = 56, 
                            exposed_low_value_resources_count = 56, 
                            exposed_medium_value_resources_count = 56, 
                            latest_calculation_time = '', 
                            score = 1.337, 
                            state = 'STATE_UNSPECIFIED', ), 
                        backup_disaster_recovery = openapi_client.models.backup_disaster_recovery.BackupDisasterRecovery(
                            appliance = '', 
                            applications = [
                                ''
                                ], 
                            backup_create_time = '', 
                            backup_template = '', 
                            backup_type = '', 
                            host = '', 
                            policies = [
                                ''
                                ], 
                            policy_options = [
                                ''
                                ], 
                            profile = '', 
                            storage_pool = '', ), 
                        canonical_name = '', 
                        category = '', 
                        cloud_dlp_data_profile = openapi_client.models.cloud_dlp_data_profile.CloudDlpDataProfile(
                            data_profile = '', 
                            parent_type = 'PARENT_TYPE_UNSPECIFIED', ), 
                        cloud_dlp_inspection = openapi_client.models.cloud_dlp_inspection.CloudDlpInspection(
                            full_scan = True, 
                            info_type = '', 
                            info_type_count = '', 
                            inspect_job = '', ), 
                        compliances = [
                            openapi_client.models.compliance.Compliance(
                                ids = [
                                    ''
                                    ], 
                                standard = '', 
                                version = '', )
                            ], 
                        connections = [
                            openapi_client.models.connection.Connection(
                                destination_ip = '', 
                                destination_port = 56, 
                                protocol = 'PROTOCOL_UNSPECIFIED', 
                                source_ip = '', 
                                source_port = 56, )
                            ], 
                        contacts = {
                            'key' : openapi_client.models.contact_details.ContactDetails()
                            }, 
                        containers = [
                            openapi_client.models.container.Container(
                                create_time = '', 
                                image_id = '', 
                                labels = [
                                    openapi_client.models.label.Label(
                                        name = '', 
                                        value = '', )
                                    ], 
                                name = '', 
                                uri = '', )
                            ], 
                        create_time = '', 
                        database = openapi_client.models.database.Database(
                            display_name = '', 
                            grantees = [
                                ''
                                ], 
                            name = '', 
                            query = '', 
                            user_name = '', 
                            version = '', ), 
                        description = '', 
                        event_time = '', 
                        exfiltration = openapi_client.models.exfiltration.Exfiltration(
                            sources = [
                                openapi_client.models.exfil_resource.ExfilResource(
                                    components = [
                                        ''
                                        ], 
                                    name = '', )
                                ], 
                            targets = [
                                openapi_client.models.exfil_resource.ExfilResource(
                                    name = '', )
                                ], 
                            total_exfiltrated_bytes = '', ), 
                        external_systems = {
                            'key' : openapi_client.models.google_cloud_securitycenter_v1_external_system.GoogleCloudSecuritycenterV1ExternalSystem(
                                assignees = [
                                    ''
                                    ], 
                                case_close_time = '', 
                                case_create_time = '', 
                                case_priority = '', 
                                case_sla = '', 
                                case_uri = '', 
                                external_system_update_time = '', 
                                external_uid = '', 
                                name = '', 
                                status = '', 
                                ticket_info = openapi_client.models.ticket_info.TicketInfo(
                                    assignee = '', 
                                    description = '', 
                                    id = '', 
                                    status = '', 
                                    update_time = '', 
                                    uri = '', ), )
                            }, 
                        external_uri = '', 
                        files = [
                            openapi_client.models.file.File(
                                contents = '', 
                                disk_path = openapi_client.models.disk_path.DiskPath(
                                    partition_uuid = '', 
                                    relative_path = '', ), 
                                hashed_size = '', 
                                partially_hashed = True, 
                                path = '', 
                                sha256 = '', 
                                size = '', )
                            ], 
                        finding_class = 'FINDING_CLASS_UNSPECIFIED', 
                        iam_bindings = [
                            openapi_client.models.iam_binding.IamBinding(
                                action = 'ACTION_UNSPECIFIED', 
                                member = '', 
                                role = '', )
                            ], 
                        indicator = openapi_client.models.indicator.Indicator(
                            domains = [
                                ''
                                ], 
                            ip_addresses = [
                                ''
                                ], 
                            signatures = [
                                openapi_client.models.process_signature.ProcessSignature(
                                    memory_hash_signature = openapi_client.models.memory_hash_signature.MemoryHashSignature(
                                        binary_family = '', 
                                        detections = [
                                            openapi_client.models.detection.Detection(
                                                binary = '', 
                                                percent_pages_matched = 1.337, )
                                            ], ), 
                                    signature_type = 'SIGNATURE_TYPE_UNSPECIFIED', 
                                    yara_rule_signature = openapi_client.models.yara_rule_signature.YaraRuleSignature(
                                        yara_rule = '', ), )
                                ], 
                            uris = [
                                ''
                                ], ), 
                        kernel_rootkit = openapi_client.models.kernel_rootkit.KernelRootkit(
                            name = '', 
                            unexpected_code_modification = True, 
                            unexpected_ftrace_handler = True, 
                            unexpected_interrupt_handler = True, 
                            unexpected_kernel_code_pages = True, 
                            unexpected_kprobe_handler = True, 
                            unexpected_processes_in_runqueue = True, 
                            unexpected_read_only_data_modification = True, 
                            unexpected_system_call_handler = True, ), 
                        kubernetes = openapi_client.models.kubernetes.Kubernetes(
                            access_reviews = [
                                openapi_client.models.access_review.AccessReview(
                                    group = '', 
                                    name = '', 
                                    ns = '', 
                                    resource = '', 
                                    subresource = '', 
                                    verb = '', 
                                    version = '', )
                                ], 
                            bindings = [
                                openapi_client.models.google_cloud_securitycenter_v1_binding.GoogleCloudSecuritycenterV1Binding(
                                    name = '', 
                                    ns = '', 
                                    role = openapi_client.models.role.Role(
                                        kind = 'KIND_UNSPECIFIED', 
                                        name = '', 
                                        ns = '', ), 
                                    subjects = [
                                        openapi_client.models.subject.Subject(
                                            kind = 'AUTH_TYPE_UNSPECIFIED', 
                                            name = '', 
                                            ns = '', )
                                        ], )
                                ], 
                            node_pools = [
                                openapi_client.models.node_pool.NodePool(
                                    name = '', 
                                    nodes = [
                                        openapi_client.models.node.Node(
                                            name = '', )
                                        ], )
                                ], 
                            nodes = [
                                openapi_client.models.node.Node(
                                    name = '', )
                                ], 
                            objects = [
                                openapi_client.models.object.Object(
                                    group = '', 
                                    kind = '', 
                                    name = '', 
                                    ns = '', )
                                ], 
                            pods = [
                                openapi_client.models.pod.Pod(
                                    name = '', 
                                    ns = '', )
                                ], 
                            roles = [
                                openapi_client.models.role.Role(
                                    kind = 'KIND_UNSPECIFIED', 
                                    name = '', 
                                    ns = '', )
                                ], ), 
                        load_balancers = [
                            openapi_client.models.load_balancer.LoadBalancer(
                                name = '', )
                            ], 
                        log_entries = [
                            openapi_client.models.log_entry.LogEntry(
                                cloud_logging_entry = openapi_client.models.cloud_logging_entry.CloudLoggingEntry(
                                    insert_id = '', 
                                    log_id = '', 
                                    resource_container = '', 
                                    timestamp = '', ), )
                            ], 
                        mitre_attack = openapi_client.models.mitre_attack.MitreAttack(
                            additional_tactics = [
                                'TACTIC_UNSPECIFIED'
                                ], 
                            additional_techniques = [
                                'TECHNIQUE_UNSPECIFIED'
                                ], 
                            primary_tactic = 'TACTIC_UNSPECIFIED', 
                            primary_techniques = [
                                'TECHNIQUE_UNSPECIFIED'
                                ], 
                            version = '', ), 
                        module_name = '', 
                        mute = 'MUTE_UNSPECIFIED', 
                        mute_initiator = '', 
                        mute_update_time = '', 
                        name = '', 
                        next_steps = '', 
                        org_policies = [
                            openapi_client.models.org_policy.OrgPolicy(
                                name = '', )
                            ], 
                        parent = '', 
                        parent_display_name = '', 
                        processes = [
                            openapi_client.models.process.Process(
                                args = [
                                    ''
                                    ], 
                                arguments_truncated = True, 
                                binary = openapi_client.models.file.File(
                                    contents = '', 
                                    hashed_size = '', 
                                    partially_hashed = True, 
                                    path = '', 
                                    sha256 = '', 
                                    size = '', ), 
                                env_variables = [
                                    openapi_client.models.environment_variable.EnvironmentVariable(
                                        name = '', 
                                        val = '', )
                                    ], 
                                env_variables_truncated = True, 
                                libraries = [
                                    
                                    ], 
                                name = '', 
                                parent_pid = '', 
                                pid = '', 
                                script = , )
                            ], 
                        resource_name = '', 
                        security_marks = openapi_client.models.security_marks.SecurityMarks(
                            canonical_name = '', 
                            marks = {
                                'key' : ''
                                }, 
                            name = '', ), 
                        security_posture = openapi_client.models.security_posture.SecurityPosture(
                            changed_policy = '', 
                            name = '', 
                            policy = '', 
                            policy_drift_details = [
                                openapi_client.models.policy_drift_details.PolicyDriftDetails(
                                    detected_value = '', 
                                    expected_value = '', 
                                    field = '', )
                                ], 
                            policy_set = '', 
                            posture_deployment = '', 
                            posture_deployment_resource = '', 
                            revision_id = '', ), 
                        severity = 'SEVERITY_UNSPECIFIED', 
                        source_properties = {
                            'key' : null
                            }, 
                        state = 'STATE_UNSPECIFIED', 
                        vulnerability = openapi_client.models.vulnerability.Vulnerability(
                            cve = openapi_client.models.cve.Cve(
                                cvssv3 = openapi_client.models.cvssv3.Cvssv3(
                                    attack_complexity = 'ATTACK_COMPLEXITY_UNSPECIFIED', 
                                    attack_vector = 'ATTACK_VECTOR_UNSPECIFIED', 
                                    availability_impact = 'IMPACT_UNSPECIFIED', 
                                    base_score = 1.337, 
                                    confidentiality_impact = 'IMPACT_UNSPECIFIED', 
                                    integrity_impact = 'IMPACT_UNSPECIFIED', 
                                    privileges_required = 'PRIVILEGES_REQUIRED_UNSPECIFIED', 
                                    scope = 'SCOPE_UNSPECIFIED', 
                                    user_interaction = 'USER_INTERACTION_UNSPECIFIED', ), 
                                exploitation_activity = 'EXPLOITATION_ACTIVITY_UNSPECIFIED', 
                                id = '', 
                                impact = 'RISK_RATING_UNSPECIFIED', 
                                observed_in_the_wild = True, 
                                references = [
                                    openapi_client.models.reference.Reference(
                                        source = '', 
                                        uri = '', )
                                    ], 
                                upstream_fix_available = True, 
                                zero_day = True, ), 
                            fixed_package = openapi_client.models.package.Package(
                                cpe_uri = '', 
                                package_name = '', 
                                package_type = '', 
                                package_version = '', ), 
                            offending_package = openapi_client.models.package.Package(
                                cpe_uri = '', 
                                package_name = '', 
                                package_type = '', 
                                package_version = '', ), 
                            security_bulletin = openapi_client.models.security_bulletin.SecurityBulletin(
                                bulletin_id = '', 
                                submission_time = '', 
                                suggested_upgrade_version = '', ), ), ), 
                    no_violation = openapi_client.models.empty.Empty(), )
            )
        else:
            return SimulateSecurityHealthAnalyticsCustomModuleResponse(
        )
        """

    def testSimulateSecurityHealthAnalyticsCustomModuleResponse(self):
        """Test SimulateSecurityHealthAnalyticsCustomModuleResponse"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

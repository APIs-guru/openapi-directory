# coding: utf-8

"""
    Security Command Center API

    Security Command Center API provides access to temporal views of assets and findings within an organization.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.attack_path_node import AttackPathNode

class TestAttackPathNode(unittest.TestCase):
    """AttackPathNode unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> AttackPathNode:
        """Test AttackPathNode
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `AttackPathNode`
        """
        model = AttackPathNode()
        if include_optional:
            return AttackPathNode(
                associated_findings = [
                    openapi_client.models.path_node_associated_finding.PathNodeAssociatedFinding(
                        canonical_finding = '', 
                        finding_category = '', 
                        name = '', )
                    ],
                attack_steps = [
                    openapi_client.models.attack_step_node.AttackStepNode(
                        description = '', 
                        display_name = '', 
                        labels = {
                            'key' : ''
                            }, 
                        type = 'NODE_TYPE_UNSPECIFIED', 
                        uuid = '', )
                    ],
                display_name = '',
                resource = '',
                resource_type = '',
                uuid = ''
            )
        else:
            return AttackPathNode(
        )
        """

    def testAttackPathNode(self):
        """Test AttackPathNode"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

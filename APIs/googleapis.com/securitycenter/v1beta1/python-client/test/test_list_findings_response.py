# coding: utf-8

"""
    Security Command Center API

    Security Command Center API provides access to temporal views of assets and findings within an organization.

    The version of the OpenAPI document: v1beta1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.list_findings_response import ListFindingsResponse

class TestListFindingsResponse(unittest.TestCase):
    """ListFindingsResponse unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> ListFindingsResponse:
        """Test ListFindingsResponse
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `ListFindingsResponse`
        """
        model = ListFindingsResponse()
        if include_optional:
            return ListFindingsResponse(
                findings = [
                    openapi_client.models.google_cloud_securitycenter_v1beta1_finding.GoogleCloudSecuritycenterV1beta1Finding(
                        category = '', 
                        create_time = '', 
                        event_time = '', 
                        external_uri = '', 
                        name = '', 
                        parent = '', 
                        resource_name = '', 
                        security_marks = openapi_client.models.google_cloud_securitycenter_v1beta1_security_marks.GoogleCloudSecuritycenterV1beta1SecurityMarks(
                            marks = {
                                'key' : ''
                                }, 
                            name = '', ), 
                        source_properties = {
                            'key' : null
                            }, 
                        state = 'STATE_UNSPECIFIED', )
                    ],
                next_page_token = '',
                read_time = '',
                total_size = 56
            )
        else:
            return ListFindingsResponse(
        )
        """

    def testListFindingsResponse(self):
        """Test ListFindingsResponse"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

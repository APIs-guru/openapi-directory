# coding: utf-8

"""
    Security Command Center API

    Security Command Center API provides access to temporal views of assets and findings within an organization.

    The version of the OpenAPI document: v1beta1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.asset import Asset

class TestAsset(unittest.TestCase):
    """Asset unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> Asset:
        """Test Asset
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `Asset`
        """
        model = Asset()
        if include_optional:
            return Asset(
                create_time = '',
                name = '',
                resource_properties = {
                    'key' : null
                    },
                security_center_properties = openapi_client.models.security_center_properties.SecurityCenterProperties(
                    resource_name = '', 
                    resource_owners = [
                        ''
                        ], 
                    resource_parent = '', 
                    resource_project = '', 
                    resource_type = '', ),
                security_marks = openapi_client.models.google_cloud_securitycenter_v1beta1_security_marks.GoogleCloudSecuritycenterV1beta1SecurityMarks(
                    marks = {
                        'key' : ''
                        }, 
                    name = '', ),
                update_time = ''
            )
        else:
            return Asset(
        )
        """

    def testAsset(self):
        """Test Asset"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

# coding: utf-8

"""
    Security Command Center API

    Security Command Center API provides access to temporal views of assets and findings within an organization.

    The version of the OpenAPI document: v1beta1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class MitreAttack(BaseModel):
    """
    MITRE ATT&CK tactics and techniques related to this finding. See: https://attack.mitre.org
    """ # noqa: E501
    additional_tactics: Optional[List[StrictStr]] = Field(default=None, description="Additional MITRE ATT&CK tactics related to this finding, if any.", alias="additionalTactics")
    additional_techniques: Optional[List[StrictStr]] = Field(default=None, description="Additional MITRE ATT&CK techniques related to this finding, if any, along with any of their respective parent techniques.", alias="additionalTechniques")
    primary_tactic: Optional[StrictStr] = Field(default=None, description="The MITRE ATT&CK tactic most closely represented by this finding, if any.", alias="primaryTactic")
    primary_techniques: Optional[List[StrictStr]] = Field(default=None, description="The MITRE ATT&CK technique most closely represented by this finding, if any. primary_techniques is a repeated field because there are multiple levels of MITRE ATT&CK techniques. If the technique most closely represented by this finding is a sub-technique (e.g. `SCANNING_IP_BLOCKS`), both the sub-technique and its parent technique(s) will be listed (e.g. `SCANNING_IP_BLOCKS`, `ACTIVE_SCANNING`).", alias="primaryTechniques")
    version: Optional[StrictStr] = Field(default=None, description="The MITRE ATT&CK version referenced by the above fields. E.g. \"8\".")
    __properties: ClassVar[List[str]] = ["additionalTactics", "additionalTechniques", "primaryTactic", "primaryTechniques", "version"]

    @field_validator('additional_tactics')
    def additional_tactics_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        for i in value:
            if i not in set(['TACTIC_UNSPECIFIED', 'RECONNAISSANCE', 'RESOURCE_DEVELOPMENT', 'INITIAL_ACCESS', 'EXECUTION', 'PERSISTENCE', 'PRIVILEGE_ESCALATION', 'DEFENSE_EVASION', 'CREDENTIAL_ACCESS', 'DISCOVERY', 'LATERAL_MOVEMENT', 'COLLECTION', 'COMMAND_AND_CONTROL', 'EXFILTRATION', 'IMPACT']):
                raise ValueError("each list item must be one of ('TACTIC_UNSPECIFIED', 'RECONNAISSANCE', 'RESOURCE_DEVELOPMENT', 'INITIAL_ACCESS', 'EXECUTION', 'PERSISTENCE', 'PRIVILEGE_ESCALATION', 'DEFENSE_EVASION', 'CREDENTIAL_ACCESS', 'DISCOVERY', 'LATERAL_MOVEMENT', 'COLLECTION', 'COMMAND_AND_CONTROL', 'EXFILTRATION', 'IMPACT')")
        return value

    @field_validator('additional_techniques')
    def additional_techniques_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        for i in value:
            if i not in set(['TECHNIQUE_UNSPECIFIED', 'MASQUERADING', 'MATCH_LEGITIMATE_NAME_OR_LOCATION', 'BOOT_OR_LOGON_INITIALIZATION_SCRIPTS', 'STARTUP_ITEMS', 'NETWORK_SERVICE_DISCOVERY', 'PROCESS_DISCOVERY', 'COMMAND_AND_SCRIPTING_INTERPRETER', 'UNIX_SHELL', 'PERMISSION_GROUPS_DISCOVERY', 'CLOUD_GROUPS', 'APPLICATION_LAYER_PROTOCOL', 'DNS', 'SOFTWARE_DEPLOYMENT_TOOLS', 'VALID_ACCOUNTS', 'DEFAULT_ACCOUNTS', 'LOCAL_ACCOUNTS', 'CLOUD_ACCOUNTS', 'PROXY', 'EXTERNAL_PROXY', 'MULTI_HOP_PROXY', 'ACCOUNT_MANIPULATION', 'ADDITIONAL_CLOUD_CREDENTIALS', 'SSH_AUTHORIZED_KEYS', 'ADDITIONAL_CONTAINER_CLUSTER_ROLES', 'INGRESS_TOOL_TRANSFER', 'NATIVE_API', 'BRUTE_FORCE', 'SHARED_MODULES', 'ACCESS_TOKEN_MANIPULATION', 'TOKEN_IMPERSONATION_OR_THEFT', 'EXPLOIT_PUBLIC_FACING_APPLICATION', 'DOMAIN_POLICY_MODIFICATION', 'DATA_DESTRUCTION', 'SERVICE_STOP', 'INHIBIT_SYSTEM_RECOVERY', 'RESOURCE_HIJACKING', 'NETWORK_DENIAL_OF_SERVICE', 'CLOUD_SERVICE_DISCOVERY', 'STEAL_APPLICATION_ACCESS_TOKEN', 'ACCOUNT_ACCESS_REMOVAL', 'STEAL_WEB_SESSION_COOKIE', 'CREATE_OR_MODIFY_SYSTEM_PROCESS', 'ABUSE_ELEVATION_CONTROL_MECHANISM', 'UNSECURED_CREDENTIALS', 'MODIFY_AUTHENTICATION_PROCESS', 'IMPAIR_DEFENSES', 'DISABLE_OR_MODIFY_TOOLS', 'EXFILTRATION_OVER_WEB_SERVICE', 'EXFILTRATION_TO_CLOUD_STORAGE', 'DYNAMIC_RESOLUTION', 'LATERAL_TOOL_TRANSFER', 'MODIFY_CLOUD_COMPUTE_INFRASTRUCTURE', 'CREATE_SNAPSHOT', 'CLOUD_INFRASTRUCTURE_DISCOVERY', 'OBTAIN_CAPABILITIES', 'ACTIVE_SCANNING', 'SCANNING_IP_BLOCKS', 'CONTAINER_AND_RESOURCE_DISCOVERY']):
                raise ValueError("each list item must be one of ('TECHNIQUE_UNSPECIFIED', 'MASQUERADING', 'MATCH_LEGITIMATE_NAME_OR_LOCATION', 'BOOT_OR_LOGON_INITIALIZATION_SCRIPTS', 'STARTUP_ITEMS', 'NETWORK_SERVICE_DISCOVERY', 'PROCESS_DISCOVERY', 'COMMAND_AND_SCRIPTING_INTERPRETER', 'UNIX_SHELL', 'PERMISSION_GROUPS_DISCOVERY', 'CLOUD_GROUPS', 'APPLICATION_LAYER_PROTOCOL', 'DNS', 'SOFTWARE_DEPLOYMENT_TOOLS', 'VALID_ACCOUNTS', 'DEFAULT_ACCOUNTS', 'LOCAL_ACCOUNTS', 'CLOUD_ACCOUNTS', 'PROXY', 'EXTERNAL_PROXY', 'MULTI_HOP_PROXY', 'ACCOUNT_MANIPULATION', 'ADDITIONAL_CLOUD_CREDENTIALS', 'SSH_AUTHORIZED_KEYS', 'ADDITIONAL_CONTAINER_CLUSTER_ROLES', 'INGRESS_TOOL_TRANSFER', 'NATIVE_API', 'BRUTE_FORCE', 'SHARED_MODULES', 'ACCESS_TOKEN_MANIPULATION', 'TOKEN_IMPERSONATION_OR_THEFT', 'EXPLOIT_PUBLIC_FACING_APPLICATION', 'DOMAIN_POLICY_MODIFICATION', 'DATA_DESTRUCTION', 'SERVICE_STOP', 'INHIBIT_SYSTEM_RECOVERY', 'RESOURCE_HIJACKING', 'NETWORK_DENIAL_OF_SERVICE', 'CLOUD_SERVICE_DISCOVERY', 'STEAL_APPLICATION_ACCESS_TOKEN', 'ACCOUNT_ACCESS_REMOVAL', 'STEAL_WEB_SESSION_COOKIE', 'CREATE_OR_MODIFY_SYSTEM_PROCESS', 'ABUSE_ELEVATION_CONTROL_MECHANISM', 'UNSECURED_CREDENTIALS', 'MODIFY_AUTHENTICATION_PROCESS', 'IMPAIR_DEFENSES', 'DISABLE_OR_MODIFY_TOOLS', 'EXFILTRATION_OVER_WEB_SERVICE', 'EXFILTRATION_TO_CLOUD_STORAGE', 'DYNAMIC_RESOLUTION', 'LATERAL_TOOL_TRANSFER', 'MODIFY_CLOUD_COMPUTE_INFRASTRUCTURE', 'CREATE_SNAPSHOT', 'CLOUD_INFRASTRUCTURE_DISCOVERY', 'OBTAIN_CAPABILITIES', 'ACTIVE_SCANNING', 'SCANNING_IP_BLOCKS', 'CONTAINER_AND_RESOURCE_DISCOVERY')")
        return value

    @field_validator('primary_tactic')
    def primary_tactic_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['TACTIC_UNSPECIFIED', 'RECONNAISSANCE', 'RESOURCE_DEVELOPMENT', 'INITIAL_ACCESS', 'EXECUTION', 'PERSISTENCE', 'PRIVILEGE_ESCALATION', 'DEFENSE_EVASION', 'CREDENTIAL_ACCESS', 'DISCOVERY', 'LATERAL_MOVEMENT', 'COLLECTION', 'COMMAND_AND_CONTROL', 'EXFILTRATION', 'IMPACT']):
            raise ValueError("must be one of enum values ('TACTIC_UNSPECIFIED', 'RECONNAISSANCE', 'RESOURCE_DEVELOPMENT', 'INITIAL_ACCESS', 'EXECUTION', 'PERSISTENCE', 'PRIVILEGE_ESCALATION', 'DEFENSE_EVASION', 'CREDENTIAL_ACCESS', 'DISCOVERY', 'LATERAL_MOVEMENT', 'COLLECTION', 'COMMAND_AND_CONTROL', 'EXFILTRATION', 'IMPACT')")
        return value

    @field_validator('primary_techniques')
    def primary_techniques_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        for i in value:
            if i not in set(['TECHNIQUE_UNSPECIFIED', 'MASQUERADING', 'MATCH_LEGITIMATE_NAME_OR_LOCATION', 'BOOT_OR_LOGON_INITIALIZATION_SCRIPTS', 'STARTUP_ITEMS', 'NETWORK_SERVICE_DISCOVERY', 'PROCESS_DISCOVERY', 'COMMAND_AND_SCRIPTING_INTERPRETER', 'UNIX_SHELL', 'PERMISSION_GROUPS_DISCOVERY', 'CLOUD_GROUPS', 'APPLICATION_LAYER_PROTOCOL', 'DNS', 'SOFTWARE_DEPLOYMENT_TOOLS', 'VALID_ACCOUNTS', 'DEFAULT_ACCOUNTS', 'LOCAL_ACCOUNTS', 'CLOUD_ACCOUNTS', 'PROXY', 'EXTERNAL_PROXY', 'MULTI_HOP_PROXY', 'ACCOUNT_MANIPULATION', 'ADDITIONAL_CLOUD_CREDENTIALS', 'SSH_AUTHORIZED_KEYS', 'ADDITIONAL_CONTAINER_CLUSTER_ROLES', 'INGRESS_TOOL_TRANSFER', 'NATIVE_API', 'BRUTE_FORCE', 'SHARED_MODULES', 'ACCESS_TOKEN_MANIPULATION', 'TOKEN_IMPERSONATION_OR_THEFT', 'EXPLOIT_PUBLIC_FACING_APPLICATION', 'DOMAIN_POLICY_MODIFICATION', 'DATA_DESTRUCTION', 'SERVICE_STOP', 'INHIBIT_SYSTEM_RECOVERY', 'RESOURCE_HIJACKING', 'NETWORK_DENIAL_OF_SERVICE', 'CLOUD_SERVICE_DISCOVERY', 'STEAL_APPLICATION_ACCESS_TOKEN', 'ACCOUNT_ACCESS_REMOVAL', 'STEAL_WEB_SESSION_COOKIE', 'CREATE_OR_MODIFY_SYSTEM_PROCESS', 'ABUSE_ELEVATION_CONTROL_MECHANISM', 'UNSECURED_CREDENTIALS', 'MODIFY_AUTHENTICATION_PROCESS', 'IMPAIR_DEFENSES', 'DISABLE_OR_MODIFY_TOOLS', 'EXFILTRATION_OVER_WEB_SERVICE', 'EXFILTRATION_TO_CLOUD_STORAGE', 'DYNAMIC_RESOLUTION', 'LATERAL_TOOL_TRANSFER', 'MODIFY_CLOUD_COMPUTE_INFRASTRUCTURE', 'CREATE_SNAPSHOT', 'CLOUD_INFRASTRUCTURE_DISCOVERY', 'OBTAIN_CAPABILITIES', 'ACTIVE_SCANNING', 'SCANNING_IP_BLOCKS', 'CONTAINER_AND_RESOURCE_DISCOVERY']):
                raise ValueError("each list item must be one of ('TECHNIQUE_UNSPECIFIED', 'MASQUERADING', 'MATCH_LEGITIMATE_NAME_OR_LOCATION', 'BOOT_OR_LOGON_INITIALIZATION_SCRIPTS', 'STARTUP_ITEMS', 'NETWORK_SERVICE_DISCOVERY', 'PROCESS_DISCOVERY', 'COMMAND_AND_SCRIPTING_INTERPRETER', 'UNIX_SHELL', 'PERMISSION_GROUPS_DISCOVERY', 'CLOUD_GROUPS', 'APPLICATION_LAYER_PROTOCOL', 'DNS', 'SOFTWARE_DEPLOYMENT_TOOLS', 'VALID_ACCOUNTS', 'DEFAULT_ACCOUNTS', 'LOCAL_ACCOUNTS', 'CLOUD_ACCOUNTS', 'PROXY', 'EXTERNAL_PROXY', 'MULTI_HOP_PROXY', 'ACCOUNT_MANIPULATION', 'ADDITIONAL_CLOUD_CREDENTIALS', 'SSH_AUTHORIZED_KEYS', 'ADDITIONAL_CONTAINER_CLUSTER_ROLES', 'INGRESS_TOOL_TRANSFER', 'NATIVE_API', 'BRUTE_FORCE', 'SHARED_MODULES', 'ACCESS_TOKEN_MANIPULATION', 'TOKEN_IMPERSONATION_OR_THEFT', 'EXPLOIT_PUBLIC_FACING_APPLICATION', 'DOMAIN_POLICY_MODIFICATION', 'DATA_DESTRUCTION', 'SERVICE_STOP', 'INHIBIT_SYSTEM_RECOVERY', 'RESOURCE_HIJACKING', 'NETWORK_DENIAL_OF_SERVICE', 'CLOUD_SERVICE_DISCOVERY', 'STEAL_APPLICATION_ACCESS_TOKEN', 'ACCOUNT_ACCESS_REMOVAL', 'STEAL_WEB_SESSION_COOKIE', 'CREATE_OR_MODIFY_SYSTEM_PROCESS', 'ABUSE_ELEVATION_CONTROL_MECHANISM', 'UNSECURED_CREDENTIALS', 'MODIFY_AUTHENTICATION_PROCESS', 'IMPAIR_DEFENSES', 'DISABLE_OR_MODIFY_TOOLS', 'EXFILTRATION_OVER_WEB_SERVICE', 'EXFILTRATION_TO_CLOUD_STORAGE', 'DYNAMIC_RESOLUTION', 'LATERAL_TOOL_TRANSFER', 'MODIFY_CLOUD_COMPUTE_INFRASTRUCTURE', 'CREATE_SNAPSHOT', 'CLOUD_INFRASTRUCTURE_DISCOVERY', 'OBTAIN_CAPABILITIES', 'ACTIVE_SCANNING', 'SCANNING_IP_BLOCKS', 'CONTAINER_AND_RESOURCE_DISCOVERY')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of MitreAttack from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of MitreAttack from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "additionalTactics": obj.get("additionalTactics"),
            "additionalTechniques": obj.get("additionalTechniques"),
            "primaryTactic": obj.get("primaryTactic"),
            "primaryTechniques": obj.get("primaryTechniques"),
            "version": obj.get("version")
        })
        return _obj



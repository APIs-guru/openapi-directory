# coding: utf-8

"""
    Security Command Center API

    Security Command Center API provides access to temporal views of assets and findings within an organization.

    The version of the OpenAPI document: v1beta1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.disk_path import DiskPath
from typing import Optional, Set
from typing_extensions import Self

class File(BaseModel):
    """
    File information about the related binary/library used by an executable, or the script used by a script interpreter
    """ # noqa: E501
    contents: Optional[StrictStr] = Field(default=None, description="Prefix of the file contents as a JSON-encoded string.")
    disk_path: Optional[DiskPath] = Field(default=None, alias="diskPath")
    hashed_size: Optional[StrictStr] = Field(default=None, description="The length in bytes of the file prefix that was hashed. If hashed_size == size, any hashes reported represent the entire file.", alias="hashedSize")
    partially_hashed: Optional[StrictBool] = Field(default=None, description="True when the hash covers only a prefix of the file.", alias="partiallyHashed")
    path: Optional[StrictStr] = Field(default=None, description="Absolute path of the file as a JSON encoded string.")
    sha256: Optional[StrictStr] = Field(default=None, description="SHA256 hash of the first hashed_size bytes of the file encoded as a hex string. If hashed_size == size, sha256 represents the SHA256 hash of the entire file.")
    size: Optional[StrictStr] = Field(default=None, description="Size of the file in bytes.")
    __properties: ClassVar[List[str]] = ["contents", "diskPath", "hashedSize", "partiallyHashed", "path", "sha256", "size"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of File from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of disk_path
        if self.disk_path:
            _dict['diskPath'] = self.disk_path.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of File from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "contents": obj.get("contents"),
            "diskPath": DiskPath.from_dict(obj["diskPath"]) if obj.get("diskPath") is not None else None,
            "hashedSize": obj.get("hashedSize"),
            "partiallyHashed": obj.get("partiallyHashed"),
            "path": obj.get("path"),
            "sha256": obj.get("sha256"),
            "size": obj.get("size")
        })
        return _obj



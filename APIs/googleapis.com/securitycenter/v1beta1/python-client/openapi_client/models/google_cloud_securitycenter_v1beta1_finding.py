# coding: utf-8

"""
    Security Command Center API

    Security Command Center API provides access to temporal views of assets and findings within an organization.

    The version of the OpenAPI document: v1beta1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_cloud_securitycenter_v1beta1_security_marks import GoogleCloudSecuritycenterV1beta1SecurityMarks
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudSecuritycenterV1beta1Finding(BaseModel):
    """
    Security Command Center finding. A finding is a record of assessment data (security, risk, health or privacy) ingested into Security Command Center for presentation, notification, analysis, policy testing, and enforcement. For example, an XSS vulnerability in an App Engine application is a finding.
    """ # noqa: E501
    category: Optional[StrictStr] = Field(default=None, description="The additional taxonomy group within findings from a given source. This field is immutable after creation time. Example: \"XSS_FLASH_INJECTION\"")
    create_time: Optional[StrictStr] = Field(default=None, description="The time at which the finding was created in Security Command Center.", alias="createTime")
    event_time: Optional[StrictStr] = Field(default=None, description="The time at which the event took place, or when an update to the finding occurred. For example, if the finding represents an open firewall it would capture the time the detector believes the firewall became open. The accuracy is determined by the detector. If the finding were to be resolved afterward, this time would reflect when the finding was resolved.", alias="eventTime")
    external_uri: Optional[StrictStr] = Field(default=None, description="The URI that, if available, points to a web page outside of Security Command Center where additional information about the finding can be found. This field is guaranteed to be either empty or a well formed URL.", alias="externalUri")
    name: Optional[StrictStr] = Field(default=None, description="The relative resource name of this finding. See: https://cloud.google.com/apis/design/resource_names#relative_resource_name Example: \"organizations/{organization_id}/sources/{source_id}/findings/{finding_id}\"")
    parent: Optional[StrictStr] = Field(default=None, description="Immutable. The relative resource name of the source the finding belongs to. See: https://cloud.google.com/apis/design/resource_names#relative_resource_name This field is immutable after creation time. For example: \"organizations/{organization_id}/sources/{source_id}\"")
    resource_name: Optional[StrictStr] = Field(default=None, description="For findings on Google Cloud resources, the full resource name of the Google Cloud resource this finding is for. See: https://cloud.google.com/apis/design/resource_names#full_resource_name When the finding is for a non-Google Cloud resource, the resourceName can be a customer or partner defined string. This field is immutable after creation time.", alias="resourceName")
    security_marks: Optional[GoogleCloudSecuritycenterV1beta1SecurityMarks] = Field(default=None, alias="securityMarks")
    source_properties: Optional[Dict[str, Any]] = Field(default=None, description="Source specific properties. These properties are managed by the source that writes the finding. The key names in the source_properties map must be between 1 and 255 characters, and must start with a letter and contain alphanumeric characters or underscores only.", alias="sourceProperties")
    state: Optional[StrictStr] = Field(default=None, description="The state of the finding.")
    __properties: ClassVar[List[str]] = ["category", "createTime", "eventTime", "externalUri", "name", "parent", "resourceName", "securityMarks", "sourceProperties", "state"]

    @field_validator('state')
    def state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['STATE_UNSPECIFIED', 'ACTIVE', 'INACTIVE']):
            raise ValueError("must be one of enum values ('STATE_UNSPECIFIED', 'ACTIVE', 'INACTIVE')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudSecuritycenterV1beta1Finding from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of security_marks
        if self.security_marks:
            _dict['securityMarks'] = self.security_marks.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudSecuritycenterV1beta1Finding from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "category": obj.get("category"),
            "createTime": obj.get("createTime"),
            "eventTime": obj.get("eventTime"),
            "externalUri": obj.get("externalUri"),
            "name": obj.get("name"),
            "parent": obj.get("parent"),
            "resourceName": obj.get("resourceName"),
            "securityMarks": GoogleCloudSecuritycenterV1beta1SecurityMarks.from_dict(obj["securityMarks"]) if obj.get("securityMarks") is not None else None,
            "sourceProperties": obj.get("sourceProperties"),
            "state": obj.get("state")
        })
        return _obj



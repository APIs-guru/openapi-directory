# coding: utf-8

"""
    Security Command Center API

    Security Command Center API provides access to temporal views of assets and findings within an organization.

    The version of the OpenAPI document: v1beta1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_cloud_securitycenter_v2_policy_drift_details import GoogleCloudSecuritycenterV2PolicyDriftDetails
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudSecuritycenterV2SecurityPosture(BaseModel):
    """
    Represents a posture that is deployed on Google Cloud by the Security Command Center Posture Management service. A posture contains one or more policy sets. A policy set is a group of policies that enforce a set of security rules on Google Cloud.
    """ # noqa: E501
    changed_policy: Optional[StrictStr] = Field(default=None, description="The name of the updated policy, for example, `projects/{project_id}/policies/{constraint_name}`.", alias="changedPolicy")
    name: Optional[StrictStr] = Field(default=None, description="Name of the posture, for example, `CIS-Posture`.")
    policy: Optional[StrictStr] = Field(default=None, description="The ID of the updated policy, for example, `compute-policy-1`.")
    policy_drift_details: Optional[List[GoogleCloudSecuritycenterV2PolicyDriftDetails]] = Field(default=None, description="The details about a change in an updated policy that violates the deployed posture.", alias="policyDriftDetails")
    policy_set: Optional[StrictStr] = Field(default=None, description="The name of the updated policy set, for example, `cis-policyset`.", alias="policySet")
    posture_deployment: Optional[StrictStr] = Field(default=None, description="The name of the posture deployment, for example, `organizations/{org_id}/posturedeployments/{posture_deployment_id}`.", alias="postureDeployment")
    posture_deployment_resource: Optional[StrictStr] = Field(default=None, description="The project, folder, or organization on which the posture is deployed, for example, `projects/{project_number}`.", alias="postureDeploymentResource")
    revision_id: Optional[StrictStr] = Field(default=None, description="The version of the posture, for example, `c7cfa2a8`.", alias="revisionId")
    __properties: ClassVar[List[str]] = ["changedPolicy", "name", "policy", "policyDriftDetails", "policySet", "postureDeployment", "postureDeploymentResource", "revisionId"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudSecuritycenterV2SecurityPosture from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in policy_drift_details (list)
        _items = []
        if self.policy_drift_details:
            for _item_policy_drift_details in self.policy_drift_details:
                if _item_policy_drift_details:
                    _items.append(_item_policy_drift_details.to_dict())
            _dict['policyDriftDetails'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudSecuritycenterV2SecurityPosture from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "changedPolicy": obj.get("changedPolicy"),
            "name": obj.get("name"),
            "policy": obj.get("policy"),
            "policyDriftDetails": [GoogleCloudSecuritycenterV2PolicyDriftDetails.from_dict(_item) for _item in obj["policyDriftDetails"]] if obj.get("policyDriftDetails") is not None else None,
            "policySet": obj.get("policySet"),
            "postureDeployment": obj.get("postureDeployment"),
            "postureDeploymentResource": obj.get("postureDeploymentResource"),
            "revisionId": obj.get("revisionId")
        })
        return _obj



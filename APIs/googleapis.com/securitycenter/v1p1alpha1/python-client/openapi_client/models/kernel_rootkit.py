# coding: utf-8

"""
    Security Command Center API

    Security Command Center API provides access to temporal views of assets and findings within an organization.

    The version of the OpenAPI document: v1p1alpha1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class KernelRootkit(BaseModel):
    """
    Kernel mode rootkit signatures.
    """ # noqa: E501
    name: Optional[StrictStr] = Field(default=None, description="Rootkit name, when available.")
    unexpected_code_modification: Optional[StrictBool] = Field(default=None, description="True if unexpected modifications of kernel code memory are present.", alias="unexpectedCodeModification")
    unexpected_ftrace_handler: Optional[StrictBool] = Field(default=None, description="True if `ftrace` points are present with callbacks pointing to regions that are not in the expected kernel or module code range.", alias="unexpectedFtraceHandler")
    unexpected_interrupt_handler: Optional[StrictBool] = Field(default=None, description="True if interrupt handlers that are are not in the expected kernel or module code regions are present.", alias="unexpectedInterruptHandler")
    unexpected_kernel_code_pages: Optional[StrictBool] = Field(default=None, description="True if kernel code pages that are not in the expected kernel or module code regions are present.", alias="unexpectedKernelCodePages")
    unexpected_kprobe_handler: Optional[StrictBool] = Field(default=None, description="True if `kprobe` points are present with callbacks pointing to regions that are not in the expected kernel or module code range.", alias="unexpectedKprobeHandler")
    unexpected_processes_in_runqueue: Optional[StrictBool] = Field(default=None, description="True if unexpected processes in the scheduler run queue are present. Such processes are in the run queue, but not in the process task list.", alias="unexpectedProcessesInRunqueue")
    unexpected_read_only_data_modification: Optional[StrictBool] = Field(default=None, description="True if unexpected modifications of kernel read-only data memory are present.", alias="unexpectedReadOnlyDataModification")
    unexpected_system_call_handler: Optional[StrictBool] = Field(default=None, description="True if system call handlers that are are not in the expected kernel or module code regions are present.", alias="unexpectedSystemCallHandler")
    __properties: ClassVar[List[str]] = ["name", "unexpectedCodeModification", "unexpectedFtraceHandler", "unexpectedInterruptHandler", "unexpectedKernelCodePages", "unexpectedKprobeHandler", "unexpectedProcessesInRunqueue", "unexpectedReadOnlyDataModification", "unexpectedSystemCallHandler"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of KernelRootkit from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of KernelRootkit from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "name": obj.get("name"),
            "unexpectedCodeModification": obj.get("unexpectedCodeModification"),
            "unexpectedFtraceHandler": obj.get("unexpectedFtraceHandler"),
            "unexpectedInterruptHandler": obj.get("unexpectedInterruptHandler"),
            "unexpectedKernelCodePages": obj.get("unexpectedKernelCodePages"),
            "unexpectedKprobeHandler": obj.get("unexpectedKprobeHandler"),
            "unexpectedProcessesInRunqueue": obj.get("unexpectedProcessesInRunqueue"),
            "unexpectedReadOnlyDataModification": obj.get("unexpectedReadOnlyDataModification"),
            "unexpectedSystemCallHandler": obj.get("unexpectedSystemCallHandler")
        })
        return _obj



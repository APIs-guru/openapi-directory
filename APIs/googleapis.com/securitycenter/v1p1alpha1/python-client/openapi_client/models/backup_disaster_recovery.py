# coding: utf-8

"""
    Security Command Center API

    Security Command Center API provides access to temporal views of assets and findings within an organization.

    The version of the OpenAPI document: v1p1alpha1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class BackupDisasterRecovery(BaseModel):
    """
    Information related to Google Cloud Backup and DR Service findings.
    """ # noqa: E501
    appliance: Optional[StrictStr] = Field(default=None, description="The name of the Backup and DR appliance that captures, moves, and manages the lifecycle of backup data. For example, `backup-server-57137`.")
    applications: Optional[List[StrictStr]] = Field(default=None, description="The names of Backup and DR applications. An application is a VM, database, or file system on a managed host monitored by a backup and recovery appliance. For example, `centos7-01-vol00`, `centos7-01-vol01`, `centos7-01-vol02`.")
    backup_create_time: Optional[StrictStr] = Field(default=None, description="The timestamp at which the Backup and DR backup was created.", alias="backupCreateTime")
    backup_template: Optional[StrictStr] = Field(default=None, description="The name of a Backup and DR template which comprises one or more backup policies. See the [Backup and DR documentation](https://cloud.google.com/backup-disaster-recovery/docs/concepts/backup-plan#temp) for more information. For example, `snap-ov`.", alias="backupTemplate")
    backup_type: Optional[StrictStr] = Field(default=None, description="The backup type of the Backup and DR image. For example, `Snapshot`, `Remote Snapshot`, `OnVault`.", alias="backupType")
    host: Optional[StrictStr] = Field(default=None, description="The name of a Backup and DR host, which is managed by the backup and recovery appliance and known to the management console. The host can be of type Generic (for example, Compute Engine, SQL Server, Oracle DB, SMB file system, etc.), vCenter, or an ESX server. See the [Backup and DR documentation on hosts](https://cloud.google.com/backup-disaster-recovery/docs/configuration/manage-hosts-and-their-applications) for more information. For example, `centos7-01`.")
    policies: Optional[List[StrictStr]] = Field(default=None, description="The names of Backup and DR policies that are associated with a template and that define when to run a backup, how frequently to run a backup, and how long to retain the backup image. For example, `onvaults`.")
    policy_options: Optional[List[StrictStr]] = Field(default=None, description="The names of Backup and DR advanced policy options of a policy applying to an application. See the [Backup and DR documentation on policy options](https://cloud.google.com/backup-disaster-recovery/docs/create-plan/policy-settings). For example, `skipofflineappsincongrp, nounmap`.", alias="policyOptions")
    profile: Optional[StrictStr] = Field(default=None, description="The name of the Backup and DR resource profile that specifies the storage media for backups of application and VM data. See the [Backup and DR documentation on profiles](https://cloud.google.com/backup-disaster-recovery/docs/concepts/backup-plan#profile). For example, `GCP`.")
    storage_pool: Optional[StrictStr] = Field(default=None, description="The name of the Backup and DR storage pool that the backup and recovery appliance is storing data in. The storage pool could be of type Cloud, Primary, Snapshot, or OnVault. See the [Backup and DR documentation on storage pools](https://cloud.google.com/backup-disaster-recovery/docs/concepts/storage-pools). For example, `DiskPoolOne`.", alias="storagePool")
    __properties: ClassVar[List[str]] = ["appliance", "applications", "backupCreateTime", "backupTemplate", "backupType", "host", "policies", "policyOptions", "profile", "storagePool"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of BackupDisasterRecovery from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of BackupDisasterRecovery from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "appliance": obj.get("appliance"),
            "applications": obj.get("applications"),
            "backupCreateTime": obj.get("backupCreateTime"),
            "backupTemplate": obj.get("backupTemplate"),
            "backupType": obj.get("backupType"),
            "host": obj.get("host"),
            "policies": obj.get("policies"),
            "policyOptions": obj.get("policyOptions"),
            "profile": obj.get("profile"),
            "storagePool": obj.get("storagePool")
        })
        return _obj



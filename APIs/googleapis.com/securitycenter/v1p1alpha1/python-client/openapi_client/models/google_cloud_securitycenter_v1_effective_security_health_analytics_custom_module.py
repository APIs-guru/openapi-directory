# coding: utf-8

"""
    Security Command Center API

    Security Command Center API provides access to temporal views of assets and findings within an organization.

    The version of the OpenAPI document: v1p1alpha1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_cloud_securitycenter_v1_custom_config import GoogleCloudSecuritycenterV1CustomConfig
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudSecuritycenterV1EffectiveSecurityHealthAnalyticsCustomModule(BaseModel):
    """
    An EffectiveSecurityHealthAnalyticsCustomModule is the representation of a Security Health Analytics custom module at a specified level of the resource hierarchy: organization, folder, or project. If a custom module is inherited from a parent organization or folder, the value of the `enablementState` property in EffectiveSecurityHealthAnalyticsCustomModule is set to the value that is effective in the parent, instead of `INHERITED`. For example, if the module is enabled in a parent organization or folder, the effective enablement_state for the module in all child folders or projects is also `enabled`. EffectiveSecurityHealthAnalyticsCustomModule is read-only.
    """ # noqa: E501
    custom_config: Optional[GoogleCloudSecuritycenterV1CustomConfig] = Field(default=None, alias="customConfig")
    display_name: Optional[StrictStr] = Field(default=None, description="Output only. The display name for the custom module. The name must be between 1 and 128 characters, start with a lowercase letter, and contain alphanumeric characters or underscores only.", alias="displayName")
    enablement_state: Optional[StrictStr] = Field(default=None, description="Output only. The effective state of enablement for the module at the given level of the hierarchy.", alias="enablementState")
    name: Optional[StrictStr] = Field(default=None, description="Output only. The resource name of the custom module. Its format is \"organizations/{organization}/securityHealthAnalyticsSettings/effectiveCustomModules/{customModule}\", or \"folders/{folder}/securityHealthAnalyticsSettings/effectiveCustomModules/{customModule}\", or \"projects/{project}/securityHealthAnalyticsSettings/effectiveCustomModules/{customModule}\"")
    __properties: ClassVar[List[str]] = ["customConfig", "displayName", "enablementState", "name"]

    @field_validator('enablement_state')
    def enablement_state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['ENABLEMENT_STATE_UNSPECIFIED', 'ENABLED', 'DISABLED']):
            raise ValueError("must be one of enum values ('ENABLEMENT_STATE_UNSPECIFIED', 'ENABLED', 'DISABLED')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudSecuritycenterV1EffectiveSecurityHealthAnalyticsCustomModule from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "display_name",
            "enablement_state",
            "name",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of custom_config
        if self.custom_config:
            _dict['customConfig'] = self.custom_config.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudSecuritycenterV1EffectiveSecurityHealthAnalyticsCustomModule from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "customConfig": GoogleCloudSecuritycenterV1CustomConfig.from_dict(obj["customConfig"]) if obj.get("customConfig") is not None else None,
            "displayName": obj.get("displayName"),
            "enablementState": obj.get("enablementState"),
            "name": obj.get("name")
        })
        return _obj



# coding: utf-8

"""
    Security Command Center API

    Security Command Center API provides access to temporal views of assets and findings within an organization.

    The version of the OpenAPI document: v1p1alpha1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.environment_variable import EnvironmentVariable
from openapi_client.models.file import File
from typing import Optional, Set
from typing_extensions import Self

class Process(BaseModel):
    """
    Represents an operating system process.
    """ # noqa: E501
    args: Optional[List[StrictStr]] = Field(default=None, description="Process arguments as JSON encoded strings.")
    arguments_truncated: Optional[StrictBool] = Field(default=None, description="True if `args` is incomplete.", alias="argumentsTruncated")
    binary: Optional[File] = None
    env_variables: Optional[List[EnvironmentVariable]] = Field(default=None, description="Process environment variables.", alias="envVariables")
    env_variables_truncated: Optional[StrictBool] = Field(default=None, description="True if `env_variables` is incomplete.", alias="envVariablesTruncated")
    libraries: Optional[List[File]] = Field(default=None, description="File information for libraries loaded by the process.")
    name: Optional[StrictStr] = Field(default=None, description="The process name, as displayed in utilities like `top` and `ps`. This name can be accessed through `/proc/[pid]/comm` and changed with `prctl(PR_SET_NAME)`.")
    parent_pid: Optional[StrictStr] = Field(default=None, description="The parent process ID.", alias="parentPid")
    pid: Optional[StrictStr] = Field(default=None, description="The process ID.")
    script: Optional[File] = None
    __properties: ClassVar[List[str]] = ["args", "argumentsTruncated", "binary", "envVariables", "envVariablesTruncated", "libraries", "name", "parentPid", "pid", "script"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Process from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of binary
        if self.binary:
            _dict['binary'] = self.binary.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in env_variables (list)
        _items = []
        if self.env_variables:
            for _item_env_variables in self.env_variables:
                if _item_env_variables:
                    _items.append(_item_env_variables.to_dict())
            _dict['envVariables'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in libraries (list)
        _items = []
        if self.libraries:
            for _item_libraries in self.libraries:
                if _item_libraries:
                    _items.append(_item_libraries.to_dict())
            _dict['libraries'] = _items
        # override the default output from pydantic by calling `to_dict()` of script
        if self.script:
            _dict['script'] = self.script.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Process from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "args": obj.get("args"),
            "argumentsTruncated": obj.get("argumentsTruncated"),
            "binary": File.from_dict(obj["binary"]) if obj.get("binary") is not None else None,
            "envVariables": [EnvironmentVariable.from_dict(_item) for _item in obj["envVariables"]] if obj.get("envVariables") is not None else None,
            "envVariablesTruncated": obj.get("envVariablesTruncated"),
            "libraries": [File.from_dict(_item) for _item in obj["libraries"]] if obj.get("libraries") is not None else None,
            "name": obj.get("name"),
            "parentPid": obj.get("parentPid"),
            "pid": obj.get("pid"),
            "script": File.from_dict(obj["script"]) if obj.get("script") is not None else None
        })
        return _obj



# coding: utf-8

"""
    Security Command Center API

    Security Command Center API provides access to temporal views of assets and findings within an organization.

    The version of the OpenAPI document: v1p1alpha1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class ComplianceSnapshot(BaseModel):
    """
    Result containing the properties and count of a ComplianceSnapshot request.
    """ # noqa: E501
    category: Optional[StrictStr] = Field(default=None, description="The category of Findings matching.")
    compliance_standard: Optional[StrictStr] = Field(default=None, description="The compliance standard (ie CIS).", alias="complianceStandard")
    compliance_version: Optional[StrictStr] = Field(default=None, description="The compliance version (ie 1.3) in CIS 1.3.", alias="complianceVersion")
    count: Optional[StrictStr] = Field(default=None, description="Total count of findings for the given properties.")
    leaf_container_resource: Optional[StrictStr] = Field(default=None, description="The leaf container resource name that is closest to the snapshot.", alias="leafContainerResource")
    name: Optional[StrictStr] = Field(default=None, description="The compliance snapshot name. Format: //sources//complianceSnapshots/")
    project_display_name: Optional[StrictStr] = Field(default=None, description="The CRM resource display name that is closest to the snapshot the Findings belong to.", alias="projectDisplayName")
    snapshot_time: Optional[StrictStr] = Field(default=None, description="The snapshot time of the snapshot.", alias="snapshotTime")
    __properties: ClassVar[List[str]] = ["category", "complianceStandard", "complianceVersion", "count", "leafContainerResource", "name", "projectDisplayName", "snapshotTime"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ComplianceSnapshot from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ComplianceSnapshot from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "category": obj.get("category"),
            "complianceStandard": obj.get("complianceStandard"),
            "complianceVersion": obj.get("complianceVersion"),
            "count": obj.get("count"),
            "leafContainerResource": obj.get("leafContainerResource"),
            "name": obj.get("name"),
            "projectDisplayName": obj.get("projectDisplayName"),
            "snapshotTime": obj.get("snapshotTime")
        })
        return _obj



# coding: utf-8

"""
    Security Command Center API

    Security Command Center API provides access to temporal views of assets and findings within an organization.

    The version of the OpenAPI document: v1p1alpha1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_cloud_securitycenter_v1_custom_config import GoogleCloudSecuritycenterV1CustomConfig
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudSecuritycenterV1SecurityHealthAnalyticsCustomModule(BaseModel):
    """
    Represents an instance of a Security Health Analytics custom module, including its full module name, display name, enablement state, and last updated time. You can create a custom module at the organization, folder, or project level. Custom modules that you create at the organization or folder level are inherited by the child folders and projects.
    """ # noqa: E501
    ancestor_module: Optional[StrictStr] = Field(default=None, description="Output only. If empty, indicates that the custom module was created in the organization, folder, or project in which you are viewing the custom module. Otherwise, `ancestor_module` specifies the organization or folder from which the custom module is inherited.", alias="ancestorModule")
    custom_config: Optional[GoogleCloudSecuritycenterV1CustomConfig] = Field(default=None, alias="customConfig")
    display_name: Optional[StrictStr] = Field(default=None, description="The display name of the Security Health Analytics custom module. This display name becomes the finding category for all findings that are returned by this custom module. The display name must be between 1 and 128 characters, start with a lowercase letter, and contain alphanumeric characters or underscores only.", alias="displayName")
    enablement_state: Optional[StrictStr] = Field(default=None, description="The enablement state of the custom module.", alias="enablementState")
    last_editor: Optional[StrictStr] = Field(default=None, description="Output only. The editor that last updated the custom module.", alias="lastEditor")
    name: Optional[StrictStr] = Field(default=None, description="Immutable. The resource name of the custom module. Its format is \"organizations/{organization}/securityHealthAnalyticsSettings/customModules/{customModule}\", or \"folders/{folder}/securityHealthAnalyticsSettings/customModules/{customModule}\", or \"projects/{project}/securityHealthAnalyticsSettings/customModules/{customModule}\" The id {customModule} is server-generated and is not user settable. It will be a numeric id containing 1-20 digits.")
    update_time: Optional[StrictStr] = Field(default=None, description="Output only. The time at which the custom module was last updated.", alias="updateTime")
    __properties: ClassVar[List[str]] = ["ancestorModule", "customConfig", "displayName", "enablementState", "lastEditor", "name", "updateTime"]

    @field_validator('enablement_state')
    def enablement_state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['ENABLEMENT_STATE_UNSPECIFIED', 'ENABLED', 'DISABLED', 'INHERITED']):
            raise ValueError("must be one of enum values ('ENABLEMENT_STATE_UNSPECIFIED', 'ENABLED', 'DISABLED', 'INHERITED')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudSecuritycenterV1SecurityHealthAnalyticsCustomModule from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "ancestor_module",
            "last_editor",
            "update_time",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of custom_config
        if self.custom_config:
            _dict['customConfig'] = self.custom_config.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudSecuritycenterV1SecurityHealthAnalyticsCustomModule from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "ancestorModule": obj.get("ancestorModule"),
            "customConfig": GoogleCloudSecuritycenterV1CustomConfig.from_dict(obj["customConfig"]) if obj.get("customConfig") is not None else None,
            "displayName": obj.get("displayName"),
            "enablementState": obj.get("enablementState"),
            "lastEditor": obj.get("lastEditor"),
            "name": obj.get("name"),
            "updateTime": obj.get("updateTime")
        })
        return _obj



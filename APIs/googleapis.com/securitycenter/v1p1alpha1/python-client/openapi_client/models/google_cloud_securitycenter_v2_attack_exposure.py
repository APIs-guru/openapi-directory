# coding: utf-8

"""
    Security Command Center API

    Security Command Center API provides access to temporal views of assets and findings within an organization.

    The version of the OpenAPI document: v1p1alpha1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudSecuritycenterV2AttackExposure(BaseModel):
    """
    An attack exposure contains the results of an attack path simulation run.
    """ # noqa: E501
    attack_exposure_result: Optional[StrictStr] = Field(default=None, description="The resource name of the attack path simulation result that contains the details regarding this attack exposure score. Example: organizations/123/simulations/456/attackExposureResults/789", alias="attackExposureResult")
    exposed_high_value_resources_count: Optional[StrictInt] = Field(default=None, description="The number of high value resources that are exposed as a result of this finding.", alias="exposedHighValueResourcesCount")
    exposed_low_value_resources_count: Optional[StrictInt] = Field(default=None, description="The number of high value resources that are exposed as a result of this finding.", alias="exposedLowValueResourcesCount")
    exposed_medium_value_resources_count: Optional[StrictInt] = Field(default=None, description="The number of medium value resources that are exposed as a result of this finding.", alias="exposedMediumValueResourcesCount")
    latest_calculation_time: Optional[StrictStr] = Field(default=None, description="The most recent time the attack exposure was updated on this finding.", alias="latestCalculationTime")
    score: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="A number between 0 (inclusive) and infinity that represents how important this finding is to remediate. The higher the score, the more important it is to remediate.")
    state: Optional[StrictStr] = Field(default=None, description="Output only. What state this AttackExposure is in. This captures whether or not an attack exposure has been calculated or not.")
    __properties: ClassVar[List[str]] = ["attackExposureResult", "exposedHighValueResourcesCount", "exposedLowValueResourcesCount", "exposedMediumValueResourcesCount", "latestCalculationTime", "score", "state"]

    @field_validator('state')
    def state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['STATE_UNSPECIFIED', 'CALCULATED', 'NOT_CALCULATED']):
            raise ValueError("must be one of enum values ('STATE_UNSPECIFIED', 'CALCULATED', 'NOT_CALCULATED')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudSecuritycenterV2AttackExposure from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "state",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudSecuritycenterV2AttackExposure from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "attackExposureResult": obj.get("attackExposureResult"),
            "exposedHighValueResourcesCount": obj.get("exposedHighValueResourcesCount"),
            "exposedLowValueResourcesCount": obj.get("exposedLowValueResourcesCount"),
            "exposedMediumValueResourcesCount": obj.get("exposedMediumValueResourcesCount"),
            "latestCalculationTime": obj.get("latestCalculationTime"),
            "score": obj.get("score"),
            "state": obj.get("state")
        })
        return _obj



# coding: utf-8

"""
    Managed Service for Microsoft Active Directory API

    The Managed Service for Microsoft Active Directory API is used for managing a highly available, hardened service running Microsoft Active Directory (AD).

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_cloud_saasaccelerator_management_providers_v1_per_sli_slo_eligibility import GoogleCloudSaasacceleratorManagementProvidersV1PerSliSloEligibility
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudSaasacceleratorManagementProvidersV1NodeSloMetadata(BaseModel):
    """
    Node information for custom per-node SLO implementations. SSA does not support per-node SLO, but producers can populate per-node information in SloMetadata for custom precomputations. SSA Eligibility Exporter will emit per-node metric based on this information.
    """ # noqa: E501
    location: Optional[StrictStr] = Field(default=None, description="The location of the node, if different from instance location.")
    node_id: Optional[StrictStr] = Field(default=None, description="The id of the node. This should be equal to SaasInstanceNode.node_id.", alias="nodeId")
    per_sli_eligibility: Optional[GoogleCloudSaasacceleratorManagementProvidersV1PerSliSloEligibility] = Field(default=None, alias="perSliEligibility")
    __properties: ClassVar[List[str]] = ["location", "nodeId", "perSliEligibility"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudSaasacceleratorManagementProvidersV1NodeSloMetadata from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of per_sli_eligibility
        if self.per_sli_eligibility:
            _dict['perSliEligibility'] = self.per_sli_eligibility.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudSaasacceleratorManagementProvidersV1NodeSloMetadata from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "location": obj.get("location"),
            "nodeId": obj.get("nodeId"),
            "perSliEligibility": GoogleCloudSaasacceleratorManagementProvidersV1PerSliSloEligibility.from_dict(obj["perSliEligibility"]) if obj.get("perSliEligibility") is not None else None
        })
        return _obj



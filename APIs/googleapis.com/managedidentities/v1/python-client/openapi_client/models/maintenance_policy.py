# coding: utf-8

"""
    Managed Service for Microsoft Active Directory API

    The Managed Service for Microsoft Active Directory API is used for managing a highly available, hardened service running Microsoft Active Directory (AD).

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.update_policy import UpdatePolicy
from typing import Optional, Set
from typing_extensions import Self

class MaintenancePolicy(BaseModel):
    """
    LINT.IfChange Defines policies to service maintenance events.
    """ # noqa: E501
    create_time: Optional[StrictStr] = Field(default=None, description="Output only. The time when the resource was created.", alias="createTime")
    description: Optional[StrictStr] = Field(default=None, description="Optional. Description of what this policy is for. Create/Update methods return INVALID_ARGUMENT if the length is greater than 512.")
    labels: Optional[Dict[str, StrictStr]] = Field(default=None, description="Optional. Resource labels to represent user provided metadata. Each label is a key-value pair, where both the key and the value are arbitrary strings provided by the user.")
    name: Optional[StrictStr] = Field(default=None, description="Required. MaintenancePolicy name using the form: `projects/{project_id}/locations/{location_id}/maintenancePolicies/{maintenance_policy_id}` where {project_id} refers to a GCP consumer project ID, {location_id} refers to a GCP region/zone, {maintenance_policy_id} must be 1-63 characters long and match the regular expression `[a-z0-9]([-a-z0-9]*[a-z0-9])?`.")
    state: Optional[StrictStr] = Field(default=None, description="Optional. The state of the policy.")
    update_policy: Optional[UpdatePolicy] = Field(default=None, alias="updatePolicy")
    update_time: Optional[StrictStr] = Field(default=None, description="Output only. The time when the resource was updated.", alias="updateTime")
    __properties: ClassVar[List[str]] = ["createTime", "description", "labels", "name", "state", "updatePolicy", "updateTime"]

    @field_validator('state')
    def state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['STATE_UNSPECIFIED', 'READY', 'DELETING']):
            raise ValueError("must be one of enum values ('STATE_UNSPECIFIED', 'READY', 'DELETING')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of MaintenancePolicy from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of update_policy
        if self.update_policy:
            _dict['updatePolicy'] = self.update_policy.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of MaintenancePolicy from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "createTime": obj.get("createTime"),
            "description": obj.get("description"),
            "labels": obj.get("labels"),
            "name": obj.get("name"),
            "state": obj.get("state"),
            "updatePolicy": UpdatePolicy.from_dict(obj["updatePolicy"]) if obj.get("updatePolicy") is not None else None,
            "updateTime": obj.get("updateTime")
        })
        return _obj



# coding: utf-8

"""
    Managed Service for Microsoft Active Directory API

    The Managed Service for Microsoft Active Directory API is used for managing a highly available, hardened service running Microsoft Active Directory (AD).

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudSaasacceleratorManagementProvidersV1MaintenanceSchedule(BaseModel):
    """
    Maintenance schedule which is exposed to customer and potentially end user, indicating published upcoming future maintenance schedule
    """ # noqa: E501
    can_reschedule: Optional[StrictBool] = Field(default=None, description="This field is deprecated, and will be always set to true since reschedule can happen multiple times now. This field should not be removed until all service producers remove this for their customers.", alias="canReschedule")
    end_time: Optional[StrictStr] = Field(default=None, description="The scheduled end time for the maintenance.", alias="endTime")
    rollout_management_policy: Optional[StrictStr] = Field(default=None, description="The rollout management policy this maintenance schedule is associated with. When doing reschedule update request, the reschedule should be against this given policy.", alias="rolloutManagementPolicy")
    schedule_deadline_time: Optional[StrictStr] = Field(default=None, description="schedule_deadline_time is the time deadline any schedule start time cannot go beyond, including reschedule. It's normally the initial schedule start time plus maintenance window length (1 day or 1 week). Maintenance cannot be scheduled to start beyond this deadline.", alias="scheduleDeadlineTime")
    start_time: Optional[StrictStr] = Field(default=None, description="The scheduled start time for the maintenance.", alias="startTime")
    __properties: ClassVar[List[str]] = ["canReschedule", "endTime", "rolloutManagementPolicy", "scheduleDeadlineTime", "startTime"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudSaasacceleratorManagementProvidersV1MaintenanceSchedule from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudSaasacceleratorManagementProvidersV1MaintenanceSchedule from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "canReschedule": obj.get("canReschedule"),
            "endTime": obj.get("endTime"),
            "rolloutManagementPolicy": obj.get("rolloutManagementPolicy"),
            "scheduleDeadlineTime": obj.get("scheduleDeadlineTime"),
            "startTime": obj.get("startTime")
        })
        return _obj



# coding: utf-8

"""
    Managed Service for Microsoft Active Directory API

    The Managed Service for Microsoft Active Directory API is used for managing a highly available, hardened service running Microsoft Active Directory (AD).

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.ldaps_settings import LDAPSSettings

class TestLDAPSSettings(unittest.TestCase):
    """LDAPSSettings unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> LDAPSSettings:
        """Test LDAPSSettings
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `LDAPSSettings`
        """
        model = LDAPSSettings()
        if include_optional:
            return LDAPSSettings(
                certificate = openapi_client.models.certificate.Certificate(
                    expire_time = '', 
                    issuing_certificate = openapi_client.models.certificate.Certificate(
                        expire_time = '', 
                        subject = '', 
                        subject_alternative_name = [
                            ''
                            ], 
                        thumbprint = '', ), 
                    subject = '', 
                    subject_alternative_name = [
                        ''
                        ], 
                    thumbprint = '', ),
                certificate_password = '',
                certificate_pfx = 'YQ==',
                name = '',
                state = 'STATE_UNSPECIFIED',
                update_time = ''
            )
        else:
            return LDAPSSettings(
        )
        """

    def testLDAPSSettings(self):
        """Test LDAPSSettings"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

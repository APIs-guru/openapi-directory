# coding: utf-8

"""
    Managed Service for Microsoft Active Directory API

    The Managed Service for Microsoft Active Directory API is used for managing a highly available, hardened service running Microsoft Active Directory (AD).

    The version of the OpenAPI document: v1alpha1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_cloud_saasaccelerator_management_providers_v1_maintenance_schedule import GoogleCloudSaasacceleratorManagementProvidersV1MaintenanceSchedule
from openapi_client.models.google_cloud_saasaccelerator_management_providers_v1_maintenance_settings import GoogleCloudSaasacceleratorManagementProvidersV1MaintenanceSettings
from openapi_client.models.google_cloud_saasaccelerator_management_providers_v1_notification_parameter import GoogleCloudSaasacceleratorManagementProvidersV1NotificationParameter
from openapi_client.models.google_cloud_saasaccelerator_management_providers_v1_provisioned_resource import GoogleCloudSaasacceleratorManagementProvidersV1ProvisionedResource
from openapi_client.models.google_cloud_saasaccelerator_management_providers_v1_slo_metadata import GoogleCloudSaasacceleratorManagementProvidersV1SloMetadata
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudSaasacceleratorManagementProvidersV1Instance(BaseModel):
    """
    Instance represents the interface for SLM services to actuate the state of control plane resources. Example Instance in JSON, where consumer-project-number=123456, producer-project-id=cloud-sql: ```json Instance: { \"name\": \"projects/123456/locations/us-east1/instances/prod-instance\", \"create_time\": { \"seconds\": 1526406431, }, \"labels\": { \"env\": \"prod\", \"foo\": \"bar\" }, \"state\": READY, \"software_versions\": { \"software_update\": \"cloud-sql-09-28-2018\", }, \"maintenance_policy_names\": { \"UpdatePolicy\": \"projects/123456/locations/us-east1/maintenancePolicies/prod-update-policy\", } \"tenant_project_id\": \"cloud-sql-test-tenant\", \"producer_metadata\": { \"cloud-sql-tier\": \"basic\", \"cloud-sql-instance-size\": \"1G\", }, \"provisioned_resources\": [ { \"resource-type\": \"compute-instance\", \"resource-url\": \"https://www.googleapis.com/compute/v1/projects/cloud-sql/zones/us-east1-b/instances/vm-1\", } ], \"maintenance_schedules\": { \"csa_rollout\": { \"start_time\": { \"seconds\": 1526406431, }, \"end_time\": { \"seconds\": 1535406431, }, }, \"ncsa_rollout\": { \"start_time\": { \"seconds\": 1526406431, }, \"end_time\": { \"seconds\": 1535406431, }, } }, \"consumer_defined_name\": \"my-sql-instance1\", } ``` LINT.IfChange
    """ # noqa: E501
    consumer_defined_name: Optional[StrictStr] = Field(default=None, description="consumer_defined_name is the name of the instance set by the service consumers. Generally this is different from the `name` field which reperesents the system-assigned id of the instance which the service consumers do not recognize. This is a required field for tenants onboarding to Maintenance Window notifications (go/slm-rollout-maintenance-policies#prerequisites).", alias="consumerDefinedName")
    create_time: Optional[StrictStr] = Field(default=None, description="Output only. Timestamp when the resource was created.", alias="createTime")
    instance_type: Optional[StrictStr] = Field(default=None, description="Optional. The instance_type of this instance of format: projects/{project_number}/locations/{location_id}/instanceTypes/{instance_type_id}. Instance Type represents a high-level tier or SKU of the service that this instance belong to. When enabled(eg: Maintenance Rollout), Rollout uses 'instance_type' along with 'software_versions' to determine whether instance needs an update or not.", alias="instanceType")
    labels: Optional[Dict[str, StrictStr]] = Field(default=None, description="Optional. Resource labels to represent user provided metadata. Each label is a key-value pair, where both the key and the value are arbitrary strings provided by the user.")
    maintenance_policy_names: Optional[Dict[str, StrictStr]] = Field(default=None, description="Optional. The MaintenancePolicies that have been attached to the instance. The key must be of the type name of the oneof policy name defined in MaintenancePolicy, and the referenced policy must define the same policy type. For details, please refer to go/mr-user-guide. Should not be set if maintenance_settings.maintenance_policies is set.", alias="maintenancePolicyNames")
    maintenance_schedules: Optional[Dict[str, GoogleCloudSaasacceleratorManagementProvidersV1MaintenanceSchedule]] = Field(default=None, description="The MaintenanceSchedule contains the scheduling information of published maintenance schedule with same key as software_versions.", alias="maintenanceSchedules")
    maintenance_settings: Optional[GoogleCloudSaasacceleratorManagementProvidersV1MaintenanceSettings] = Field(default=None, alias="maintenanceSettings")
    name: Optional[StrictStr] = Field(default=None, description="Unique name of the resource. It uses the form: `projects/{project_number}/locations/{location_id}/instances/{instance_id}` Note: This name is passed, stored and logged across the rollout system. So use of consumer project_id or any other consumer PII in the name is strongly discouraged for wipeout (go/wipeout) compliance. See go/elysium/project_ids#storage-guidance for more details.")
    notification_parameters: Optional[Dict[str, GoogleCloudSaasacceleratorManagementProvidersV1NotificationParameter]] = Field(default=None, description="Optional. notification_parameter are information that service producers may like to include that is not relevant to Rollout. This parameter will only be passed to Gamma and Cloud Logging for notification/logging purpose.", alias="notificationParameters")
    producer_metadata: Optional[Dict[str, StrictStr]] = Field(default=None, description="Output only. Custom string attributes used primarily to expose producer-specific information in monitoring dashboards. See go/get-instance-metadata.", alias="producerMetadata")
    provisioned_resources: Optional[List[GoogleCloudSaasacceleratorManagementProvidersV1ProvisionedResource]] = Field(default=None, description="Output only. The list of data plane resources provisioned for this instance, e.g. compute VMs. See go/get-instance-metadata.", alias="provisionedResources")
    slm_instance_template: Optional[StrictStr] = Field(default=None, description="Link to the SLM instance template. Only populated when updating SLM instances via SSA's Actuation service adaptor. Service producers with custom control plane (e.g. Cloud SQL) doesn't need to populate this field. Instead they should use software_versions.", alias="slmInstanceTemplate")
    slo_metadata: Optional[GoogleCloudSaasacceleratorManagementProvidersV1SloMetadata] = Field(default=None, alias="sloMetadata")
    software_versions: Optional[Dict[str, StrictStr]] = Field(default=None, description="Software versions that are used to deploy this instance. This can be mutated by rollout services.", alias="softwareVersions")
    state: Optional[StrictStr] = Field(default=None, description="Output only. Current lifecycle state of the resource (e.g. if it's being created or ready to use).")
    tenant_project_id: Optional[StrictStr] = Field(default=None, description="Output only. ID of the associated GCP tenant project. See go/get-instance-metadata.", alias="tenantProjectId")
    update_time: Optional[StrictStr] = Field(default=None, description="Output only. Timestamp when the resource was last modified.", alias="updateTime")
    __properties: ClassVar[List[str]] = ["consumerDefinedName", "createTime", "instanceType", "labels", "maintenancePolicyNames", "maintenanceSchedules", "maintenanceSettings", "name", "notificationParameters", "producerMetadata", "provisionedResources", "slmInstanceTemplate", "sloMetadata", "softwareVersions", "state", "tenantProjectId", "updateTime"]

    @field_validator('state')
    def state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['STATE_UNSPECIFIED', 'CREATING', 'READY', 'UPDATING', 'REPAIRING', 'DELETING', 'ERROR']):
            raise ValueError("must be one of enum values ('STATE_UNSPECIFIED', 'CREATING', 'READY', 'UPDATING', 'REPAIRING', 'DELETING', 'ERROR')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudSaasacceleratorManagementProvidersV1Instance from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "create_time",
            "producer_metadata",
            "provisioned_resources",
            "state",
            "tenant_project_id",
            "update_time",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each value in maintenance_schedules (dict)
        _field_dict = {}
        if self.maintenance_schedules:
            for _key_maintenance_schedules in self.maintenance_schedules:
                if self.maintenance_schedules[_key_maintenance_schedules]:
                    _field_dict[_key_maintenance_schedules] = self.maintenance_schedules[_key_maintenance_schedules].to_dict()
            _dict['maintenanceSchedules'] = _field_dict
        # override the default output from pydantic by calling `to_dict()` of maintenance_settings
        if self.maintenance_settings:
            _dict['maintenanceSettings'] = self.maintenance_settings.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each value in notification_parameters (dict)
        _field_dict = {}
        if self.notification_parameters:
            for _key_notification_parameters in self.notification_parameters:
                if self.notification_parameters[_key_notification_parameters]:
                    _field_dict[_key_notification_parameters] = self.notification_parameters[_key_notification_parameters].to_dict()
            _dict['notificationParameters'] = _field_dict
        # override the default output from pydantic by calling `to_dict()` of each item in provisioned_resources (list)
        _items = []
        if self.provisioned_resources:
            for _item_provisioned_resources in self.provisioned_resources:
                if _item_provisioned_resources:
                    _items.append(_item_provisioned_resources.to_dict())
            _dict['provisionedResources'] = _items
        # override the default output from pydantic by calling `to_dict()` of slo_metadata
        if self.slo_metadata:
            _dict['sloMetadata'] = self.slo_metadata.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudSaasacceleratorManagementProvidersV1Instance from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "consumerDefinedName": obj.get("consumerDefinedName"),
            "createTime": obj.get("createTime"),
            "instanceType": obj.get("instanceType"),
            "labels": obj.get("labels"),
            "maintenancePolicyNames": obj.get("maintenancePolicyNames"),
            "maintenanceSchedules": dict(
                (_k, GoogleCloudSaasacceleratorManagementProvidersV1MaintenanceSchedule.from_dict(_v))
                for _k, _v in obj["maintenanceSchedules"].items()
            )
            if obj.get("maintenanceSchedules") is not None
            else None,
            "maintenanceSettings": GoogleCloudSaasacceleratorManagementProvidersV1MaintenanceSettings.from_dict(obj["maintenanceSettings"]) if obj.get("maintenanceSettings") is not None else None,
            "name": obj.get("name"),
            "notificationParameters": dict(
                (_k, GoogleCloudSaasacceleratorManagementProvidersV1NotificationParameter.from_dict(_v))
                for _k, _v in obj["notificationParameters"].items()
            )
            if obj.get("notificationParameters") is not None
            else None,
            "producerMetadata": obj.get("producerMetadata"),
            "provisionedResources": [GoogleCloudSaasacceleratorManagementProvidersV1ProvisionedResource.from_dict(_item) for _item in obj["provisionedResources"]] if obj.get("provisionedResources") is not None else None,
            "slmInstanceTemplate": obj.get("slmInstanceTemplate"),
            "sloMetadata": GoogleCloudSaasacceleratorManagementProvidersV1SloMetadata.from_dict(obj["sloMetadata"]) if obj.get("sloMetadata") is not None else None,
            "softwareVersions": obj.get("softwareVersions"),
            "state": obj.get("state"),
            "tenantProjectId": obj.get("tenantProjectId"),
            "updateTime": obj.get("updateTime")
        })
        return _obj



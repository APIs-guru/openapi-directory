# coding: utf-8

"""
    Managed Service for Microsoft Active Directory API

    The Managed Service for Microsoft Active Directory API is used for managing a highly available, hardened service running Microsoft Active Directory (AD).

    The version of the OpenAPI document: v1beta1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.list_peerings_response import ListPeeringsResponse

class TestListPeeringsResponse(unittest.TestCase):
    """ListPeeringsResponse unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> ListPeeringsResponse:
        """Test ListPeeringsResponse
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `ListPeeringsResponse`
        """
        model = ListPeeringsResponse()
        if include_optional:
            return ListPeeringsResponse(
                next_page_token = '',
                peerings = [
                    openapi_client.models.peering.Peering(
                        authorized_network = '', 
                        create_time = '', 
                        domain_resource = '', 
                        labels = {
                            'key' : ''
                            }, 
                        name = '', 
                        state = 'STATE_UNSPECIFIED', 
                        status_message = '', 
                        update_time = '', )
                    ],
                unreachable = [
                    ''
                    ]
            )
        else:
            return ListPeeringsResponse(
        )
        """

    def testListPeeringsResponse(self):
        """Test ListPeeringsResponse"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

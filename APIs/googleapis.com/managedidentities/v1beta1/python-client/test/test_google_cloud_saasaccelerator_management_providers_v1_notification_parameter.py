# coding: utf-8

"""
    Managed Service for Microsoft Active Directory API

    The Managed Service for Microsoft Active Directory API is used for managing a highly available, hardened service running Microsoft Active Directory (AD).

    The version of the OpenAPI document: v1beta1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.google_cloud_saasaccelerator_management_providers_v1_notification_parameter import GoogleCloudSaasacceleratorManagementProvidersV1NotificationParameter

class TestGoogleCloudSaasacceleratorManagementProvidersV1NotificationParameter(unittest.TestCase):
    """GoogleCloudSaasacceleratorManagementProvidersV1NotificationParameter unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> GoogleCloudSaasacceleratorManagementProvidersV1NotificationParameter:
        """Test GoogleCloudSaasacceleratorManagementProvidersV1NotificationParameter
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `GoogleCloudSaasacceleratorManagementProvidersV1NotificationParameter`
        """
        model = GoogleCloudSaasacceleratorManagementProvidersV1NotificationParameter()
        if include_optional:
            return GoogleCloudSaasacceleratorManagementProvidersV1NotificationParameter(
                values = [
                    ''
                    ]
            )
        else:
            return GoogleCloudSaasacceleratorManagementProvidersV1NotificationParameter(
        )
        """

    def testGoogleCloudSaasacceleratorManagementProvidersV1NotificationParameter(self):
        """Test GoogleCloudSaasacceleratorManagementProvidersV1NotificationParameter"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

# coding: utf-8

"""
    Managed Service for Microsoft Active Directory API

    The Managed Service for Microsoft Active Directory API is used for managing a highly available, hardened service running Microsoft Active Directory (AD).

    The version of the OpenAPI document: v1beta1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.google_cloud_saasaccelerator_management_providers_v1_maintenance_settings import GoogleCloudSaasacceleratorManagementProvidersV1MaintenanceSettings

class TestGoogleCloudSaasacceleratorManagementProvidersV1MaintenanceSettings(unittest.TestCase):
    """GoogleCloudSaasacceleratorManagementProvidersV1MaintenanceSettings unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> GoogleCloudSaasacceleratorManagementProvidersV1MaintenanceSettings:
        """Test GoogleCloudSaasacceleratorManagementProvidersV1MaintenanceSettings
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `GoogleCloudSaasacceleratorManagementProvidersV1MaintenanceSettings`
        """
        model = GoogleCloudSaasacceleratorManagementProvidersV1MaintenanceSettings()
        if include_optional:
            return GoogleCloudSaasacceleratorManagementProvidersV1MaintenanceSettings(
                exclude = True,
                is_rollback = True,
                maintenance_policies = {
                    'key' : openapi_client.models.maintenance_policy.MaintenancePolicy(
                        create_time = '', 
                        description = '', 
                        labels = {
                            'key' : ''
                            }, 
                        name = '', 
                        state = 'STATE_UNSPECIFIED', 
                        update_policy = openapi_client.models.update_policy.UpdatePolicy(
                            channel = 'UPDATE_CHANNEL_UNSPECIFIED', 
                            deny_maintenance_periods = [
                                openapi_client.models.deny_maintenance_period.DenyMaintenancePeriod(
                                    end_date = openapi_client.models.date.Date(
                                        day = 56, 
                                        month = 56, 
                                        year = 56, ), 
                                    start_date = openapi_client.models.date.Date(
                                        day = 56, 
                                        month = 56, 
                                        year = 56, ), 
                                    time = openapi_client.models.time_of_day.TimeOfDay(
                                        hours = 56, 
                                        minutes = 56, 
                                        nanos = 56, 
                                        seconds = 56, ), )
                                ], 
                            window = openapi_client.models.maintenance_window.MaintenanceWindow(
                                daily_cycle = openapi_client.models.daily_cycle.DailyCycle(
                                    duration = '', 
                                    start_time = openapi_client.models.time_of_day.TimeOfDay(
                                        hours = 56, 
                                        minutes = 56, 
                                        nanos = 56, 
                                        seconds = 56, ), ), 
                                weekly_cycle = openapi_client.models.weekly_cycle.WeeklyCycle(
                                    schedule = [
                                        openapi_client.models.schedule.Schedule(
                                            day = 'DAY_OF_WEEK_UNSPECIFIED', 
                                            duration = '', )
                                        ], ), ), ), 
                        update_time = '', )
                    }
            )
        else:
            return GoogleCloudSaasacceleratorManagementProvidersV1MaintenanceSettings(
        )
        """

    def testGoogleCloudSaasacceleratorManagementProvidersV1MaintenanceSettings(self):
        """Test GoogleCloudSaasacceleratorManagementProvidersV1MaintenanceSettings"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

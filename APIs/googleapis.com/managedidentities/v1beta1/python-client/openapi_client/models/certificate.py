# coding: utf-8

"""
    Managed Service for Microsoft Active Directory API

    The Managed Service for Microsoft Active Directory API is used for managing a highly available, hardened service running Microsoft Active Directory (AD).

    The version of the OpenAPI document: v1beta1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class Certificate(BaseModel):
    """
    Certificate used to configure LDAPS.
    """ # noqa: E501
    expire_time: Optional[StrictStr] = Field(default=None, description="The certificate expire time.", alias="expireTime")
    issuing_certificate: Optional[Certificate] = Field(default=None, alias="issuingCertificate")
    subject: Optional[StrictStr] = Field(default=None, description="The certificate subject.")
    subject_alternative_name: Optional[List[StrictStr]] = Field(default=None, description="The additional hostnames for the domain.", alias="subjectAlternativeName")
    thumbprint: Optional[StrictStr] = Field(default=None, description="The certificate thumbprint which uniquely identifies the certificate.")
    __properties: ClassVar[List[str]] = ["expireTime", "issuingCertificate", "subject", "subjectAlternativeName", "thumbprint"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Certificate from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of issuing_certificate
        if self.issuing_certificate:
            _dict['issuingCertificate'] = self.issuing_certificate.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Certificate from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "expireTime": obj.get("expireTime"),
            "issuingCertificate": Certificate.from_dict(obj["issuingCertificate"]) if obj.get("issuingCertificate") is not None else None,
            "subject": obj.get("subject"),
            "subjectAlternativeName": obj.get("subjectAlternativeName"),
            "thumbprint": obj.get("thumbprint")
        })
        return _obj

# TODO: Rewrite to not use raise_errors
Certificate.model_rebuild(raise_errors=False)


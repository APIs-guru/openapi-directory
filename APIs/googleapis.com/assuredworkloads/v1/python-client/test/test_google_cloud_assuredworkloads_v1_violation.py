# coding: utf-8

"""
    Assured Workloads API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.google_cloud_assuredworkloads_v1_violation import GoogleCloudAssuredworkloadsV1Violation

class TestGoogleCloudAssuredworkloadsV1Violation(unittest.TestCase):
    """GoogleCloudAssuredworkloadsV1Violation unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> GoogleCloudAssuredworkloadsV1Violation:
        """Test GoogleCloudAssuredworkloadsV1Violation
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `GoogleCloudAssuredworkloadsV1Violation`
        """
        model = GoogleCloudAssuredworkloadsV1Violation()
        if include_optional:
            return GoogleCloudAssuredworkloadsV1Violation(
                acknowledged = True,
                acknowledgement_time = '',
                associated_org_policy_violation_id = '',
                audit_log_link = '',
                begin_time = '',
                category = '',
                description = '',
                exception_audit_log_link = '',
                exception_contexts = [
                    openapi_client.models.google_cloud_assuredworkloads_v1_violation_exception_context.GoogleCloudAssuredworkloadsV1ViolationExceptionContext(
                        acknowledgement_time = '', 
                        comment = '', 
                        user_name = '', )
                    ],
                name = '',
                non_compliant_org_policy = '',
                org_policy_constraint = '',
                parent_project_number = '',
                remediation = openapi_client.models.google_cloud_assuredworkloads_v1_violation_remediation.GoogleCloudAssuredworkloadsV1ViolationRemediation(
                    compliant_values = [
                        ''
                        ], 
                    instructions = openapi_client.models.google_cloud_assuredworkloads_v1_violation_remediation_instructions.GoogleCloudAssuredworkloadsV1ViolationRemediationInstructions(
                        console_instructions = openapi_client.models.google_cloud_assuredworkloads_v1_violation_remediation_instructions_console.GoogleCloudAssuredworkloadsV1ViolationRemediationInstructionsConsole(
                            additional_links = [
                                ''
                                ], 
                            console_uris = [
                                ''
                                ], 
                            steps = [
                                ''
                                ], ), 
                        gcloud_instructions = openapi_client.models.google_cloud_assuredworkloads_v1_violation_remediation_instructions_gcloud.GoogleCloudAssuredworkloadsV1ViolationRemediationInstructionsGcloud(
                            gcloud_commands = [
                                ''
                                ], ), ), 
                    remediation_type = 'REMEDIATION_TYPE_UNSPECIFIED', ),
                resolve_time = '',
                resource_name = '',
                resource_type = '',
                state = 'STATE_UNSPECIFIED',
                update_time = '',
                violation_type = 'VIOLATION_TYPE_UNSPECIFIED'
            )
        else:
            return GoogleCloudAssuredworkloadsV1Violation(
        )
        """

    def testGoogleCloudAssuredworkloadsV1Violation(self):
        """Test GoogleCloudAssuredworkloadsV1Violation"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

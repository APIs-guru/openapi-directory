# coding: utf-8

"""
    Assured Workloads API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_cloud_assuredworkloads_v1_violation_remediation_instructions import GoogleCloudAssuredworkloadsV1ViolationRemediationInstructions
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudAssuredworkloadsV1ViolationRemediation(BaseModel):
    """
    Represents remediation guidance to resolve compliance violation for AssuredWorkload
    """ # noqa: E501
    compliant_values: Optional[List[StrictStr]] = Field(default=None, description="Values that can resolve the violation For example: for list org policy violations, this will either be the list of allowed or denied values", alias="compliantValues")
    instructions: Optional[GoogleCloudAssuredworkloadsV1ViolationRemediationInstructions] = None
    remediation_type: Optional[StrictStr] = Field(default=None, description="Output only. Reemediation type based on the type of org policy values violated", alias="remediationType")
    __properties: ClassVar[List[str]] = ["compliantValues", "instructions", "remediationType"]

    @field_validator('remediation_type')
    def remediation_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['REMEDIATION_TYPE_UNSPECIFIED', 'REMEDIATION_BOOLEAN_ORG_POLICY_VIOLATION', 'REMEDIATION_LIST_ALLOWED_VALUES_ORG_POLICY_VIOLATION', 'REMEDIATION_LIST_DENIED_VALUES_ORG_POLICY_VIOLATION', 'REMEDIATION_RESTRICT_CMEK_CRYPTO_KEY_PROJECTS_ORG_POLICY_VIOLATION', 'REMEDIATION_RESOURCE_VIOLATION']):
            raise ValueError("must be one of enum values ('REMEDIATION_TYPE_UNSPECIFIED', 'REMEDIATION_BOOLEAN_ORG_POLICY_VIOLATION', 'REMEDIATION_LIST_ALLOWED_VALUES_ORG_POLICY_VIOLATION', 'REMEDIATION_LIST_DENIED_VALUES_ORG_POLICY_VIOLATION', 'REMEDIATION_RESTRICT_CMEK_CRYPTO_KEY_PROJECTS_ORG_POLICY_VIOLATION', 'REMEDIATION_RESOURCE_VIOLATION')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudAssuredworkloadsV1ViolationRemediation from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "remediation_type",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of instructions
        if self.instructions:
            _dict['instructions'] = self.instructions.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudAssuredworkloadsV1ViolationRemediation from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "compliantValues": obj.get("compliantValues"),
            "instructions": GoogleCloudAssuredworkloadsV1ViolationRemediationInstructions.from_dict(obj["instructions"]) if obj.get("instructions") is not None else None,
            "remediationType": obj.get("remediationType")
        })
        return _obj



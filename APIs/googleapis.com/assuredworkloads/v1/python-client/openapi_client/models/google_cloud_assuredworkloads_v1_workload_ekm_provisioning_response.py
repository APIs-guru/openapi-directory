# coding: utf-8

"""
    Assured Workloads API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudAssuredworkloadsV1WorkloadEkmProvisioningResponse(BaseModel):
    """
    External key management systems(EKM) Provisioning response
    """ # noqa: E501
    ekm_provisioning_error_domain: Optional[StrictStr] = Field(default=None, description="Indicates Ekm provisioning error if any.", alias="ekmProvisioningErrorDomain")
    ekm_provisioning_error_mapping: Optional[StrictStr] = Field(default=None, description="Detailed error message if Ekm provisioning fails", alias="ekmProvisioningErrorMapping")
    ekm_provisioning_state: Optional[StrictStr] = Field(default=None, description="Indicates Ekm enrollment Provisioning of a given workload.", alias="ekmProvisioningState")
    __properties: ClassVar[List[str]] = ["ekmProvisioningErrorDomain", "ekmProvisioningErrorMapping", "ekmProvisioningState"]

    @field_validator('ekm_provisioning_error_domain')
    def ekm_provisioning_error_domain_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['EKM_PROVISIONING_ERROR_DOMAIN_UNSPECIFIED', 'UNSPECIFIED_ERROR', 'GOOGLE_SERVER_ERROR', 'EXTERNAL_USER_ERROR', 'EXTERNAL_PARTNER_ERROR', 'TIMEOUT_ERROR']):
            raise ValueError("must be one of enum values ('EKM_PROVISIONING_ERROR_DOMAIN_UNSPECIFIED', 'UNSPECIFIED_ERROR', 'GOOGLE_SERVER_ERROR', 'EXTERNAL_USER_ERROR', 'EXTERNAL_PARTNER_ERROR', 'TIMEOUT_ERROR')")
        return value

    @field_validator('ekm_provisioning_error_mapping')
    def ekm_provisioning_error_mapping_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['EKM_PROVISIONING_ERROR_MAPPING_UNSPECIFIED', 'INVALID_SERVICE_ACCOUNT', 'MISSING_METRICS_SCOPE_ADMIN_PERMISSION', 'MISSING_EKM_CONNECTION_ADMIN_PERMISSION']):
            raise ValueError("must be one of enum values ('EKM_PROVISIONING_ERROR_MAPPING_UNSPECIFIED', 'INVALID_SERVICE_ACCOUNT', 'MISSING_METRICS_SCOPE_ADMIN_PERMISSION', 'MISSING_EKM_CONNECTION_ADMIN_PERMISSION')")
        return value

    @field_validator('ekm_provisioning_state')
    def ekm_provisioning_state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['EKM_PROVISIONING_STATE_UNSPECIFIED', 'EKM_PROVISIONING_STATE_PENDING', 'EKM_PROVISIONING_STATE_FAILED', 'EKM_PROVISIONING_STATE_COMPLETED']):
            raise ValueError("must be one of enum values ('EKM_PROVISIONING_STATE_UNSPECIFIED', 'EKM_PROVISIONING_STATE_PENDING', 'EKM_PROVISIONING_STATE_FAILED', 'EKM_PROVISIONING_STATE_COMPLETED')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudAssuredworkloadsV1WorkloadEkmProvisioningResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudAssuredworkloadsV1WorkloadEkmProvisioningResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "ekmProvisioningErrorDomain": obj.get("ekmProvisioningErrorDomain"),
            "ekmProvisioningErrorMapping": obj.get("ekmProvisioningErrorMapping"),
            "ekmProvisioningState": obj.get("ekmProvisioningState")
        })
        return _obj



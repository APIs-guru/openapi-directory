# coding: utf-8

"""
    Assured Workloads API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_cloud_assuredworkloads_v1_workload_compliance_status import GoogleCloudAssuredworkloadsV1WorkloadComplianceStatus
from openapi_client.models.google_cloud_assuredworkloads_v1_workload_ekm_provisioning_response import GoogleCloudAssuredworkloadsV1WorkloadEkmProvisioningResponse
from openapi_client.models.google_cloud_assuredworkloads_v1_workload_kms_settings import GoogleCloudAssuredworkloadsV1WorkloadKMSSettings
from openapi_client.models.google_cloud_assuredworkloads_v1_workload_partner_permissions import GoogleCloudAssuredworkloadsV1WorkloadPartnerPermissions
from openapi_client.models.google_cloud_assuredworkloads_v1_workload_resource_info import GoogleCloudAssuredworkloadsV1WorkloadResourceInfo
from openapi_client.models.google_cloud_assuredworkloads_v1_workload_resource_settings import GoogleCloudAssuredworkloadsV1WorkloadResourceSettings
from openapi_client.models.google_cloud_assuredworkloads_v1_workload_saa_enrollment_response import GoogleCloudAssuredworkloadsV1WorkloadSaaEnrollmentResponse
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudAssuredworkloadsV1Workload(BaseModel):
    """
    A Workload object for managing highly regulated workloads of cloud customers.
    """ # noqa: E501
    billing_account: Optional[StrictStr] = Field(default=None, description="Optional. The billing account used for the resources which are direct children of workload. This billing account is initially associated with the resources created as part of Workload creation. After the initial creation of these resources, the customer can change the assigned billing account. The resource name has the form `billingAccounts/{billing_account_id}`. For example, `billingAccounts/012345-567890-ABCDEF`.", alias="billingAccount")
    compliance_regime: Optional[StrictStr] = Field(default=None, description="Required. Immutable. Compliance Regime associated with this workload.", alias="complianceRegime")
    compliance_status: Optional[GoogleCloudAssuredworkloadsV1WorkloadComplianceStatus] = Field(default=None, alias="complianceStatus")
    compliant_but_disallowed_services: Optional[List[StrictStr]] = Field(default=None, description="Output only. Urls for services which are compliant for this Assured Workload, but which are currently disallowed by the ResourceUsageRestriction org policy. Invoke RestrictAllowedResources endpoint to allow your project developers to use these services in their environment.", alias="compliantButDisallowedServices")
    create_time: Optional[StrictStr] = Field(default=None, description="Output only. Immutable. The Workload creation timestamp.", alias="createTime")
    display_name: Optional[StrictStr] = Field(default=None, description="Required. The user-assigned display name of the Workload. When present it must be between 4 to 30 characters. Allowed characters are: lowercase and uppercase letters, numbers, hyphen, and spaces. Example: My Workload", alias="displayName")
    ekm_provisioning_response: Optional[GoogleCloudAssuredworkloadsV1WorkloadEkmProvisioningResponse] = Field(default=None, alias="ekmProvisioningResponse")
    enable_sovereign_controls: Optional[StrictBool] = Field(default=None, description="Optional. Indicates the sovereignty status of the given workload. Currently meant to be used by Europe/Canada customers.", alias="enableSovereignControls")
    etag: Optional[StrictStr] = Field(default=None, description="Optional. ETag of the workload, it is calculated on the basis of the Workload contents. It will be used in Update & Delete operations.")
    kaj_enrollment_state: Optional[StrictStr] = Field(default=None, description="Output only. Represents the KAJ enrollment state of the given workload.", alias="kajEnrollmentState")
    kms_settings: Optional[GoogleCloudAssuredworkloadsV1WorkloadKMSSettings] = Field(default=None, alias="kmsSettings")
    labels: Optional[Dict[str, StrictStr]] = Field(default=None, description="Optional. Labels applied to the workload.")
    name: Optional[StrictStr] = Field(default=None, description="Optional. The resource name of the workload. Format: organizations/{organization}/locations/{location}/workloads/{workload} Read-only.")
    partner: Optional[StrictStr] = Field(default=None, description="Optional. Partner regime associated with this workload.")
    partner_permissions: Optional[GoogleCloudAssuredworkloadsV1WorkloadPartnerPermissions] = Field(default=None, alias="partnerPermissions")
    provisioned_resources_parent: Optional[StrictStr] = Field(default=None, description="Input only. The parent resource for the resources managed by this Assured Workload. May be either empty or a folder resource which is a child of the Workload parent. If not specified all resources are created under the parent organization. Format: folders/{folder_id}", alias="provisionedResourcesParent")
    resource_monitoring_enabled: Optional[StrictBool] = Field(default=None, description="Output only. Indicates whether resource monitoring is enabled for workload or not. It is true when Resource feed is subscribed to AWM topic and AWM Service Agent Role is binded to AW Service Account for resource Assured workload.", alias="resourceMonitoringEnabled")
    resource_settings: Optional[List[GoogleCloudAssuredworkloadsV1WorkloadResourceSettings]] = Field(default=None, description="Input only. Resource properties that are used to customize workload resources. These properties (such as custom project id) will be used to create workload resources if possible. This field is optional.", alias="resourceSettings")
    resources: Optional[List[GoogleCloudAssuredworkloadsV1WorkloadResourceInfo]] = Field(default=None, description="Output only. The resources associated with this workload. These resources will be created when creating the workload. If any of the projects already exist, the workload creation will fail. Always read only.")
    saa_enrollment_response: Optional[GoogleCloudAssuredworkloadsV1WorkloadSaaEnrollmentResponse] = Field(default=None, alias="saaEnrollmentResponse")
    violation_notifications_enabled: Optional[StrictBool] = Field(default=None, description="Optional. Indicates whether the e-mail notification for a violation is enabled for a workload. This value will be by default True, and if not present will be considered as true. This should only be updated via updateWorkload call. Any Changes to this field during the createWorkload call will not be honored. This will always be true while creating the workload.", alias="violationNotificationsEnabled")
    __properties: ClassVar[List[str]] = ["billingAccount", "complianceRegime", "complianceStatus", "compliantButDisallowedServices", "createTime", "displayName", "ekmProvisioningResponse", "enableSovereignControls", "etag", "kajEnrollmentState", "kmsSettings", "labels", "name", "partner", "partnerPermissions", "provisionedResourcesParent", "resourceMonitoringEnabled", "resourceSettings", "resources", "saaEnrollmentResponse", "violationNotificationsEnabled"]

    @field_validator('compliance_regime')
    def compliance_regime_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['COMPLIANCE_REGIME_UNSPECIFIED', 'IL4', 'CJIS', 'FEDRAMP_HIGH', 'FEDRAMP_MODERATE', 'US_REGIONAL_ACCESS', 'HIPAA', 'HITRUST', 'EU_REGIONS_AND_SUPPORT', 'CA_REGIONS_AND_SUPPORT', 'ITAR', 'AU_REGIONS_AND_US_SUPPORT', 'ASSURED_WORKLOADS_FOR_PARTNERS', 'ISR_REGIONS', 'ISR_REGIONS_AND_SUPPORT', 'CA_PROTECTED_B', 'IL5', 'IL2', 'JP_REGIONS_AND_SUPPORT']):
            raise ValueError("must be one of enum values ('COMPLIANCE_REGIME_UNSPECIFIED', 'IL4', 'CJIS', 'FEDRAMP_HIGH', 'FEDRAMP_MODERATE', 'US_REGIONAL_ACCESS', 'HIPAA', 'HITRUST', 'EU_REGIONS_AND_SUPPORT', 'CA_REGIONS_AND_SUPPORT', 'ITAR', 'AU_REGIONS_AND_US_SUPPORT', 'ASSURED_WORKLOADS_FOR_PARTNERS', 'ISR_REGIONS', 'ISR_REGIONS_AND_SUPPORT', 'CA_PROTECTED_B', 'IL5', 'IL2', 'JP_REGIONS_AND_SUPPORT')")
        return value

    @field_validator('kaj_enrollment_state')
    def kaj_enrollment_state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['KAJ_ENROLLMENT_STATE_UNSPECIFIED', 'KAJ_ENROLLMENT_STATE_PENDING', 'KAJ_ENROLLMENT_STATE_COMPLETE']):
            raise ValueError("must be one of enum values ('KAJ_ENROLLMENT_STATE_UNSPECIFIED', 'KAJ_ENROLLMENT_STATE_PENDING', 'KAJ_ENROLLMENT_STATE_COMPLETE')")
        return value

    @field_validator('partner')
    def partner_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['PARTNER_UNSPECIFIED', 'LOCAL_CONTROLS_BY_S3NS', 'SOVEREIGN_CONTROLS_BY_T_SYSTEMS', 'SOVEREIGN_CONTROLS_BY_SIA_MINSAIT', 'SOVEREIGN_CONTROLS_BY_PSN']):
            raise ValueError("must be one of enum values ('PARTNER_UNSPECIFIED', 'LOCAL_CONTROLS_BY_S3NS', 'SOVEREIGN_CONTROLS_BY_T_SYSTEMS', 'SOVEREIGN_CONTROLS_BY_SIA_MINSAIT', 'SOVEREIGN_CONTROLS_BY_PSN')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudAssuredworkloadsV1Workload from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "compliant_but_disallowed_services",
            "create_time",
            "kaj_enrollment_state",
            "resource_monitoring_enabled",
            "resources",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of compliance_status
        if self.compliance_status:
            _dict['complianceStatus'] = self.compliance_status.to_dict()
        # override the default output from pydantic by calling `to_dict()` of ekm_provisioning_response
        if self.ekm_provisioning_response:
            _dict['ekmProvisioningResponse'] = self.ekm_provisioning_response.to_dict()
        # override the default output from pydantic by calling `to_dict()` of kms_settings
        if self.kms_settings:
            _dict['kmsSettings'] = self.kms_settings.to_dict()
        # override the default output from pydantic by calling `to_dict()` of partner_permissions
        if self.partner_permissions:
            _dict['partnerPermissions'] = self.partner_permissions.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in resource_settings (list)
        _items = []
        if self.resource_settings:
            for _item_resource_settings in self.resource_settings:
                if _item_resource_settings:
                    _items.append(_item_resource_settings.to_dict())
            _dict['resourceSettings'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in resources (list)
        _items = []
        if self.resources:
            for _item_resources in self.resources:
                if _item_resources:
                    _items.append(_item_resources.to_dict())
            _dict['resources'] = _items
        # override the default output from pydantic by calling `to_dict()` of saa_enrollment_response
        if self.saa_enrollment_response:
            _dict['saaEnrollmentResponse'] = self.saa_enrollment_response.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudAssuredworkloadsV1Workload from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "billingAccount": obj.get("billingAccount"),
            "complianceRegime": obj.get("complianceRegime"),
            "complianceStatus": GoogleCloudAssuredworkloadsV1WorkloadComplianceStatus.from_dict(obj["complianceStatus"]) if obj.get("complianceStatus") is not None else None,
            "compliantButDisallowedServices": obj.get("compliantButDisallowedServices"),
            "createTime": obj.get("createTime"),
            "displayName": obj.get("displayName"),
            "ekmProvisioningResponse": GoogleCloudAssuredworkloadsV1WorkloadEkmProvisioningResponse.from_dict(obj["ekmProvisioningResponse"]) if obj.get("ekmProvisioningResponse") is not None else None,
            "enableSovereignControls": obj.get("enableSovereignControls"),
            "etag": obj.get("etag"),
            "kajEnrollmentState": obj.get("kajEnrollmentState"),
            "kmsSettings": GoogleCloudAssuredworkloadsV1WorkloadKMSSettings.from_dict(obj["kmsSettings"]) if obj.get("kmsSettings") is not None else None,
            "labels": obj.get("labels"),
            "name": obj.get("name"),
            "partner": obj.get("partner"),
            "partnerPermissions": GoogleCloudAssuredworkloadsV1WorkloadPartnerPermissions.from_dict(obj["partnerPermissions"]) if obj.get("partnerPermissions") is not None else None,
            "provisionedResourcesParent": obj.get("provisionedResourcesParent"),
            "resourceMonitoringEnabled": obj.get("resourceMonitoringEnabled"),
            "resourceSettings": [GoogleCloudAssuredworkloadsV1WorkloadResourceSettings.from_dict(_item) for _item in obj["resourceSettings"]] if obj.get("resourceSettings") is not None else None,
            "resources": [GoogleCloudAssuredworkloadsV1WorkloadResourceInfo.from_dict(_item) for _item in obj["resources"]] if obj.get("resources") is not None else None,
            "saaEnrollmentResponse": GoogleCloudAssuredworkloadsV1WorkloadSaaEnrollmentResponse.from_dict(obj["saaEnrollmentResponse"]) if obj.get("saaEnrollmentResponse") is not None else None,
            "violationNotificationsEnabled": obj.get("violationNotificationsEnabled")
        })
        return _obj



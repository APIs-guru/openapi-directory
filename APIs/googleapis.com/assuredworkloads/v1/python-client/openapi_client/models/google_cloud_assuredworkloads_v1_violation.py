# coding: utf-8

"""
    Assured Workloads API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_cloud_assuredworkloads_v1_violation_exception_context import GoogleCloudAssuredworkloadsV1ViolationExceptionContext
from openapi_client.models.google_cloud_assuredworkloads_v1_violation_remediation import GoogleCloudAssuredworkloadsV1ViolationRemediation
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudAssuredworkloadsV1Violation(BaseModel):
    """
    Workload monitoring Violation.
    """ # noqa: E501
    acknowledged: Optional[StrictBool] = Field(default=None, description="A boolean that indicates if the violation is acknowledged")
    acknowledgement_time: Optional[StrictStr] = Field(default=None, description="Optional. Timestamp when this violation was acknowledged first. Check exception_contexts to find the last time the violation was acknowledged when there are more than one violations. This field will be absent when acknowledged field is marked as false.", alias="acknowledgementTime")
    associated_org_policy_violation_id: Optional[StrictStr] = Field(default=None, description="Optional. Output only. Violation Id of the org-policy violation due to which the resource violation is caused. Empty for org-policy violations.", alias="associatedOrgPolicyViolationId")
    audit_log_link: Optional[StrictStr] = Field(default=None, description="Output only. Immutable. Audit Log Link for violated resource Format: https://console.cloud.google.com/logs/query;query={logName}{protoPayload.resourceName}{timeRange}{folder}", alias="auditLogLink")
    begin_time: Optional[StrictStr] = Field(default=None, description="Output only. Time of the event which triggered the Violation.", alias="beginTime")
    category: Optional[StrictStr] = Field(default=None, description="Output only. Category under which this violation is mapped. e.g. Location, Service Usage, Access, Encryption, etc.")
    description: Optional[StrictStr] = Field(default=None, description="Output only. Description for the Violation. e.g. OrgPolicy gcp.resourceLocations has non compliant value.")
    exception_audit_log_link: Optional[StrictStr] = Field(default=None, description="Output only. Immutable. Audit Log link to find business justification provided for violation exception. Format: https://console.cloud.google.com/logs/query;query={logName}{protoPayload.resourceName}{protoPayload.methodName}{timeRange}{organization}", alias="exceptionAuditLogLink")
    exception_contexts: Optional[List[GoogleCloudAssuredworkloadsV1ViolationExceptionContext]] = Field(default=None, description="Output only. List of all the exception detail added for the violation.", alias="exceptionContexts")
    name: Optional[StrictStr] = Field(default=None, description="Output only. Immutable. Name of the Violation. Format: organizations/{organization}/locations/{location}/workloads/{workload_id}/violations/{violations_id}")
    non_compliant_org_policy: Optional[StrictStr] = Field(default=None, description="Output only. Immutable. Name of the OrgPolicy which was modified with non-compliant change and resulted this violation. Format: projects/{project_number}/policies/{constraint_name} folders/{folder_id}/policies/{constraint_name} organizations/{organization_id}/policies/{constraint_name}", alias="nonCompliantOrgPolicy")
    org_policy_constraint: Optional[StrictStr] = Field(default=None, description="Output only. Immutable. The org-policy-constraint that was incorrectly changed, which resulted in this violation.", alias="orgPolicyConstraint")
    parent_project_number: Optional[StrictStr] = Field(default=None, description="Optional. Output only. Parent project number where resource is present. Empty for org-policy violations.", alias="parentProjectNumber")
    remediation: Optional[GoogleCloudAssuredworkloadsV1ViolationRemediation] = None
    resolve_time: Optional[StrictStr] = Field(default=None, description="Output only. Time of the event which fixed the Violation. If the violation is ACTIVE this will be empty.", alias="resolveTime")
    resource_name: Optional[StrictStr] = Field(default=None, description="Optional. Output only. Name of the resource like //storage.googleapis.com/myprojectxyz-testbucket. Empty for org-policy violations.", alias="resourceName")
    resource_type: Optional[StrictStr] = Field(default=None, description="Optional. Output only. Type of the resource like compute.googleapis.com/Disk, etc. Empty for org-policy violations.", alias="resourceType")
    state: Optional[StrictStr] = Field(default=None, description="Output only. State of the violation")
    update_time: Optional[StrictStr] = Field(default=None, description="Output only. The last time when the Violation record was updated.", alias="updateTime")
    violation_type: Optional[StrictStr] = Field(default=None, description="Output only. Type of the violation", alias="violationType")
    __properties: ClassVar[List[str]] = ["acknowledged", "acknowledgementTime", "associatedOrgPolicyViolationId", "auditLogLink", "beginTime", "category", "description", "exceptionAuditLogLink", "exceptionContexts", "name", "nonCompliantOrgPolicy", "orgPolicyConstraint", "parentProjectNumber", "remediation", "resolveTime", "resourceName", "resourceType", "state", "updateTime", "violationType"]

    @field_validator('state')
    def state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['STATE_UNSPECIFIED', 'RESOLVED', 'UNRESOLVED', 'EXCEPTION']):
            raise ValueError("must be one of enum values ('STATE_UNSPECIFIED', 'RESOLVED', 'UNRESOLVED', 'EXCEPTION')")
        return value

    @field_validator('violation_type')
    def violation_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['VIOLATION_TYPE_UNSPECIFIED', 'ORG_POLICY', 'RESOURCE']):
            raise ValueError("must be one of enum values ('VIOLATION_TYPE_UNSPECIFIED', 'ORG_POLICY', 'RESOURCE')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudAssuredworkloadsV1Violation from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "associated_org_policy_violation_id",
            "audit_log_link",
            "begin_time",
            "category",
            "description",
            "exception_audit_log_link",
            "exception_contexts",
            "name",
            "non_compliant_org_policy",
            "org_policy_constraint",
            "parent_project_number",
            "resolve_time",
            "resource_name",
            "resource_type",
            "state",
            "update_time",
            "violation_type",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in exception_contexts (list)
        _items = []
        if self.exception_contexts:
            for _item_exception_contexts in self.exception_contexts:
                if _item_exception_contexts:
                    _items.append(_item_exception_contexts.to_dict())
            _dict['exceptionContexts'] = _items
        # override the default output from pydantic by calling `to_dict()` of remediation
        if self.remediation:
            _dict['remediation'] = self.remediation.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudAssuredworkloadsV1Violation from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "acknowledged": obj.get("acknowledged"),
            "acknowledgementTime": obj.get("acknowledgementTime"),
            "associatedOrgPolicyViolationId": obj.get("associatedOrgPolicyViolationId"),
            "auditLogLink": obj.get("auditLogLink"),
            "beginTime": obj.get("beginTime"),
            "category": obj.get("category"),
            "description": obj.get("description"),
            "exceptionAuditLogLink": obj.get("exceptionAuditLogLink"),
            "exceptionContexts": [GoogleCloudAssuredworkloadsV1ViolationExceptionContext.from_dict(_item) for _item in obj["exceptionContexts"]] if obj.get("exceptionContexts") is not None else None,
            "name": obj.get("name"),
            "nonCompliantOrgPolicy": obj.get("nonCompliantOrgPolicy"),
            "orgPolicyConstraint": obj.get("orgPolicyConstraint"),
            "parentProjectNumber": obj.get("parentProjectNumber"),
            "remediation": GoogleCloudAssuredworkloadsV1ViolationRemediation.from_dict(obj["remediation"]) if obj.get("remediation") is not None else None,
            "resolveTime": obj.get("resolveTime"),
            "resourceName": obj.get("resourceName"),
            "resourceType": obj.get("resourceType"),
            "state": obj.get("state"),
            "updateTime": obj.get("updateTime"),
            "violationType": obj.get("violationType")
        })
        return _obj



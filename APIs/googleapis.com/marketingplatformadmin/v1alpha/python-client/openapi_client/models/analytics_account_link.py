# coding: utf-8

"""
    Google Marketing Platform Admin API

    marketingplatformadmin.googleapis.com API.

    The version of the OpenAPI document: v1alpha
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class AnalyticsAccountLink(BaseModel):
    """
    A resource message representing the link between a Google Analytics account and a Google Marketing Platform organization.
    """ # noqa: E501
    analytics_account: Optional[StrictStr] = Field(default=None, description="Required. Immutable. The resource name of the AnalyticsAdmin API account. The account ID will be used as the ID of this AnalyticsAccountLink resource, which will become the final component of the resource name. Format: analyticsadmin.googleapis.com/accounts/{account_id}", alias="analyticsAccount")
    display_name: Optional[StrictStr] = Field(default=None, description="Output only. The human-readable name for the Analytics account.", alias="displayName")
    link_verification_state: Optional[StrictStr] = Field(default=None, description="Output only. The verification state of the link between the Analytics account and the parent organization.", alias="linkVerificationState")
    name: Optional[StrictStr] = Field(default=None, description="Identifier. Resource name of this AnalyticsAccountLink. Note the resource ID is the same as the ID of the Analtyics account. Format: organizations/{org_id}/analyticsAccountLinks/{analytics_account_link_id} Example: \"organizations/xyz/analyticsAccountLinks/1234\"")
    __properties: ClassVar[List[str]] = ["analyticsAccount", "displayName", "linkVerificationState", "name"]

    @field_validator('link_verification_state')
    def link_verification_state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['LINK_VERIFICATION_STATE_UNSPECIFIED', 'LINK_VERIFICATION_STATE_VERIFIED', 'LINK_VERIFICATION_STATE_NOT_VERIFIED']):
            raise ValueError("must be one of enum values ('LINK_VERIFICATION_STATE_UNSPECIFIED', 'LINK_VERIFICATION_STATE_VERIFIED', 'LINK_VERIFICATION_STATE_NOT_VERIFIED')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AnalyticsAccountLink from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "display_name",
            "link_verification_state",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AnalyticsAccountLink from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "analyticsAccount": obj.get("analyticsAccount"),
            "displayName": obj.get("displayName"),
            "linkVerificationState": obj.get("linkVerificationState"),
            "name": obj.get("name")
        })
        return _obj



# coding: utf-8

"""
    Google Slides API

    Reads and writes Google Slides presentations.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.table_border_row import TableBorderRow
from openapi_client.models.table_column_properties import TableColumnProperties
from openapi_client.models.table_row import TableRow
from typing import Optional, Set
from typing_extensions import Self

class Table(BaseModel):
    """
    A PageElement kind representing a table.
    """ # noqa: E501
    columns: Optional[StrictInt] = Field(default=None, description="Number of columns in the table.")
    horizontal_border_rows: Optional[List[TableBorderRow]] = Field(default=None, description="Properties of horizontal cell borders. A table's horizontal cell borders are represented as a grid. The grid has one more row than the number of rows in the table and the same number of columns as the table. For example, if the table is 3 x 3, its horizontal borders will be represented as a grid with 4 rows and 3 columns.", alias="horizontalBorderRows")
    rows: Optional[StrictInt] = Field(default=None, description="Number of rows in the table.")
    table_columns: Optional[List[TableColumnProperties]] = Field(default=None, description="Properties of each column.", alias="tableColumns")
    table_rows: Optional[List[TableRow]] = Field(default=None, description="Properties and contents of each row. Cells that span multiple rows are contained in only one of these rows and have a row_span greater than 1.", alias="tableRows")
    vertical_border_rows: Optional[List[TableBorderRow]] = Field(default=None, description="Properties of vertical cell borders. A table's vertical cell borders are represented as a grid. The grid has the same number of rows as the table and one more column than the number of columns in the table. For example, if the table is 3 x 3, its vertical borders will be represented as a grid with 3 rows and 4 columns.", alias="verticalBorderRows")
    __properties: ClassVar[List[str]] = ["columns", "horizontalBorderRows", "rows", "tableColumns", "tableRows", "verticalBorderRows"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Table from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in horizontal_border_rows (list)
        _items = []
        if self.horizontal_border_rows:
            for _item_horizontal_border_rows in self.horizontal_border_rows:
                if _item_horizontal_border_rows:
                    _items.append(_item_horizontal_border_rows.to_dict())
            _dict['horizontalBorderRows'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in table_columns (list)
        _items = []
        if self.table_columns:
            for _item_table_columns in self.table_columns:
                if _item_table_columns:
                    _items.append(_item_table_columns.to_dict())
            _dict['tableColumns'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in table_rows (list)
        _items = []
        if self.table_rows:
            for _item_table_rows in self.table_rows:
                if _item_table_rows:
                    _items.append(_item_table_rows.to_dict())
            _dict['tableRows'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in vertical_border_rows (list)
        _items = []
        if self.vertical_border_rows:
            for _item_vertical_border_rows in self.vertical_border_rows:
                if _item_vertical_border_rows:
                    _items.append(_item_vertical_border_rows.to_dict())
            _dict['verticalBorderRows'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Table from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "columns": obj.get("columns"),
            "horizontalBorderRows": [TableBorderRow.from_dict(_item) for _item in obj["horizontalBorderRows"]] if obj.get("horizontalBorderRows") is not None else None,
            "rows": obj.get("rows"),
            "tableColumns": [TableColumnProperties.from_dict(_item) for _item in obj["tableColumns"]] if obj.get("tableColumns") is not None else None,
            "tableRows": [TableRow.from_dict(_item) for _item in obj["tableRows"]] if obj.get("tableRows") is not None else None,
            "verticalBorderRows": [TableBorderRow.from_dict(_item) for _item in obj["verticalBorderRows"]] if obj.get("verticalBorderRows") is not None else None
        })
        return _obj



# coding: utf-8

"""
    Google Slides API

    Reads and writes Google Slides presentations.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt
from typing import Any, ClassVar, Dict, List, Optional, Union
from openapi_client.models.crop_properties import CropProperties
from openapi_client.models.link import Link
from openapi_client.models.outline import Outline
from openapi_client.models.recolor import Recolor
from openapi_client.models.shadow import Shadow
from typing import Optional, Set
from typing_extensions import Self

class ImageProperties(BaseModel):
    """
    The properties of the Image.
    """ # noqa: E501
    brightness: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The brightness effect of the image. The value should be in the interval [-1.0, 1.0], where 0 means no effect. This property is read-only.")
    contrast: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The contrast effect of the image. The value should be in the interval [-1.0, 1.0], where 0 means no effect. This property is read-only.")
    crop_properties: Optional[CropProperties] = Field(default=None, alias="cropProperties")
    link: Optional[Link] = None
    outline: Optional[Outline] = None
    recolor: Optional[Recolor] = None
    shadow: Optional[Shadow] = None
    transparency: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The transparency effect of the image. The value should be in the interval [0.0, 1.0], where 0 means no effect and 1 means completely transparent. This property is read-only.")
    __properties: ClassVar[List[str]] = ["brightness", "contrast", "cropProperties", "link", "outline", "recolor", "shadow", "transparency"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ImageProperties from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of crop_properties
        if self.crop_properties:
            _dict['cropProperties'] = self.crop_properties.to_dict()
        # override the default output from pydantic by calling `to_dict()` of link
        if self.link:
            _dict['link'] = self.link.to_dict()
        # override the default output from pydantic by calling `to_dict()` of outline
        if self.outline:
            _dict['outline'] = self.outline.to_dict()
        # override the default output from pydantic by calling `to_dict()` of recolor
        if self.recolor:
            _dict['recolor'] = self.recolor.to_dict()
        # override the default output from pydantic by calling `to_dict()` of shadow
        if self.shadow:
            _dict['shadow'] = self.shadow.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ImageProperties from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "brightness": obj.get("brightness"),
            "contrast": obj.get("contrast"),
            "cropProperties": CropProperties.from_dict(obj["cropProperties"]) if obj.get("cropProperties") is not None else None,
            "link": Link.from_dict(obj["link"]) if obj.get("link") is not None else None,
            "outline": Outline.from_dict(obj["outline"]) if obj.get("outline") is not None else None,
            "recolor": Recolor.from_dict(obj["recolor"]) if obj.get("recolor") is not None else None,
            "shadow": Shadow.from_dict(obj["shadow"]) if obj.get("shadow") is not None else None,
            "transparency": obj.get("transparency")
        })
        return _obj



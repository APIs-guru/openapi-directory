# coding: utf-8

"""
    Google Slides API

    Reads and writes Google Slides presentations.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.create_image_request import CreateImageRequest
from openapi_client.models.create_line_request import CreateLineRequest
from openapi_client.models.create_paragraph_bullets_request import CreateParagraphBulletsRequest
from openapi_client.models.create_shape_request import CreateShapeRequest
from openapi_client.models.create_sheets_chart_request import CreateSheetsChartRequest
from openapi_client.models.create_slide_request import CreateSlideRequest
from openapi_client.models.create_table_request import CreateTableRequest
from openapi_client.models.create_video_request import CreateVideoRequest
from openapi_client.models.delete_object_request import DeleteObjectRequest
from openapi_client.models.delete_paragraph_bullets_request import DeleteParagraphBulletsRequest
from openapi_client.models.delete_table_column_request import DeleteTableColumnRequest
from openapi_client.models.delete_table_row_request import DeleteTableRowRequest
from openapi_client.models.delete_text_request import DeleteTextRequest
from openapi_client.models.duplicate_object_request import DuplicateObjectRequest
from openapi_client.models.group_objects_request import GroupObjectsRequest
from openapi_client.models.insert_table_columns_request import InsertTableColumnsRequest
from openapi_client.models.insert_table_rows_request import InsertTableRowsRequest
from openapi_client.models.insert_text_request import InsertTextRequest
from openapi_client.models.merge_table_cells_request import MergeTableCellsRequest
from openapi_client.models.refresh_sheets_chart_request import RefreshSheetsChartRequest
from openapi_client.models.replace_all_shapes_with_image_request import ReplaceAllShapesWithImageRequest
from openapi_client.models.replace_all_shapes_with_sheets_chart_request import ReplaceAllShapesWithSheetsChartRequest
from openapi_client.models.replace_all_text_request import ReplaceAllTextRequest
from openapi_client.models.replace_image_request import ReplaceImageRequest
from openapi_client.models.reroute_line_request import RerouteLineRequest
from openapi_client.models.ungroup_objects_request import UngroupObjectsRequest
from openapi_client.models.unmerge_table_cells_request import UnmergeTableCellsRequest
from openapi_client.models.update_image_properties_request import UpdateImagePropertiesRequest
from openapi_client.models.update_line_category_request import UpdateLineCategoryRequest
from openapi_client.models.update_line_properties_request import UpdateLinePropertiesRequest
from openapi_client.models.update_page_element_alt_text_request import UpdatePageElementAltTextRequest
from openapi_client.models.update_page_element_transform_request import UpdatePageElementTransformRequest
from openapi_client.models.update_page_elements_z_order_request import UpdatePageElementsZOrderRequest
from openapi_client.models.update_page_properties_request import UpdatePagePropertiesRequest
from openapi_client.models.update_paragraph_style_request import UpdateParagraphStyleRequest
from openapi_client.models.update_shape_properties_request import UpdateShapePropertiesRequest
from openapi_client.models.update_slide_properties_request import UpdateSlidePropertiesRequest
from openapi_client.models.update_slides_position_request import UpdateSlidesPositionRequest
from openapi_client.models.update_table_border_properties_request import UpdateTableBorderPropertiesRequest
from openapi_client.models.update_table_cell_properties_request import UpdateTableCellPropertiesRequest
from openapi_client.models.update_table_column_properties_request import UpdateTableColumnPropertiesRequest
from openapi_client.models.update_table_row_properties_request import UpdateTableRowPropertiesRequest
from openapi_client.models.update_text_style_request import UpdateTextStyleRequest
from openapi_client.models.update_video_properties_request import UpdateVideoPropertiesRequest
from typing import Optional, Set
from typing_extensions import Self

class Request(BaseModel):
    """
    A single kind of update to apply to a presentation.
    """ # noqa: E501
    create_image: Optional[CreateImageRequest] = Field(default=None, alias="createImage")
    create_line: Optional[CreateLineRequest] = Field(default=None, alias="createLine")
    create_paragraph_bullets: Optional[CreateParagraphBulletsRequest] = Field(default=None, alias="createParagraphBullets")
    create_shape: Optional[CreateShapeRequest] = Field(default=None, alias="createShape")
    create_sheets_chart: Optional[CreateSheetsChartRequest] = Field(default=None, alias="createSheetsChart")
    create_slide: Optional[CreateSlideRequest] = Field(default=None, alias="createSlide")
    create_table: Optional[CreateTableRequest] = Field(default=None, alias="createTable")
    create_video: Optional[CreateVideoRequest] = Field(default=None, alias="createVideo")
    delete_object: Optional[DeleteObjectRequest] = Field(default=None, alias="deleteObject")
    delete_paragraph_bullets: Optional[DeleteParagraphBulletsRequest] = Field(default=None, alias="deleteParagraphBullets")
    delete_table_column: Optional[DeleteTableColumnRequest] = Field(default=None, alias="deleteTableColumn")
    delete_table_row: Optional[DeleteTableRowRequest] = Field(default=None, alias="deleteTableRow")
    delete_text: Optional[DeleteTextRequest] = Field(default=None, alias="deleteText")
    duplicate_object: Optional[DuplicateObjectRequest] = Field(default=None, alias="duplicateObject")
    group_objects: Optional[GroupObjectsRequest] = Field(default=None, alias="groupObjects")
    insert_table_columns: Optional[InsertTableColumnsRequest] = Field(default=None, alias="insertTableColumns")
    insert_table_rows: Optional[InsertTableRowsRequest] = Field(default=None, alias="insertTableRows")
    insert_text: Optional[InsertTextRequest] = Field(default=None, alias="insertText")
    merge_table_cells: Optional[MergeTableCellsRequest] = Field(default=None, alias="mergeTableCells")
    refresh_sheets_chart: Optional[RefreshSheetsChartRequest] = Field(default=None, alias="refreshSheetsChart")
    replace_all_shapes_with_image: Optional[ReplaceAllShapesWithImageRequest] = Field(default=None, alias="replaceAllShapesWithImage")
    replace_all_shapes_with_sheets_chart: Optional[ReplaceAllShapesWithSheetsChartRequest] = Field(default=None, alias="replaceAllShapesWithSheetsChart")
    replace_all_text: Optional[ReplaceAllTextRequest] = Field(default=None, alias="replaceAllText")
    replace_image: Optional[ReplaceImageRequest] = Field(default=None, alias="replaceImage")
    reroute_line: Optional[RerouteLineRequest] = Field(default=None, alias="rerouteLine")
    ungroup_objects: Optional[UngroupObjectsRequest] = Field(default=None, alias="ungroupObjects")
    unmerge_table_cells: Optional[UnmergeTableCellsRequest] = Field(default=None, alias="unmergeTableCells")
    update_image_properties: Optional[UpdateImagePropertiesRequest] = Field(default=None, alias="updateImageProperties")
    update_line_category: Optional[UpdateLineCategoryRequest] = Field(default=None, alias="updateLineCategory")
    update_line_properties: Optional[UpdateLinePropertiesRequest] = Field(default=None, alias="updateLineProperties")
    update_page_element_alt_text: Optional[UpdatePageElementAltTextRequest] = Field(default=None, alias="updatePageElementAltText")
    update_page_element_transform: Optional[UpdatePageElementTransformRequest] = Field(default=None, alias="updatePageElementTransform")
    update_page_elements_z_order: Optional[UpdatePageElementsZOrderRequest] = Field(default=None, alias="updatePageElementsZOrder")
    update_page_properties: Optional[UpdatePagePropertiesRequest] = Field(default=None, alias="updatePageProperties")
    update_paragraph_style: Optional[UpdateParagraphStyleRequest] = Field(default=None, alias="updateParagraphStyle")
    update_shape_properties: Optional[UpdateShapePropertiesRequest] = Field(default=None, alias="updateShapeProperties")
    update_slide_properties: Optional[UpdateSlidePropertiesRequest] = Field(default=None, alias="updateSlideProperties")
    update_slides_position: Optional[UpdateSlidesPositionRequest] = Field(default=None, alias="updateSlidesPosition")
    update_table_border_properties: Optional[UpdateTableBorderPropertiesRequest] = Field(default=None, alias="updateTableBorderProperties")
    update_table_cell_properties: Optional[UpdateTableCellPropertiesRequest] = Field(default=None, alias="updateTableCellProperties")
    update_table_column_properties: Optional[UpdateTableColumnPropertiesRequest] = Field(default=None, alias="updateTableColumnProperties")
    update_table_row_properties: Optional[UpdateTableRowPropertiesRequest] = Field(default=None, alias="updateTableRowProperties")
    update_text_style: Optional[UpdateTextStyleRequest] = Field(default=None, alias="updateTextStyle")
    update_video_properties: Optional[UpdateVideoPropertiesRequest] = Field(default=None, alias="updateVideoProperties")
    __properties: ClassVar[List[str]] = ["createImage", "createLine", "createParagraphBullets", "createShape", "createSheetsChart", "createSlide", "createTable", "createVideo", "deleteObject", "deleteParagraphBullets", "deleteTableColumn", "deleteTableRow", "deleteText", "duplicateObject", "groupObjects", "insertTableColumns", "insertTableRows", "insertText", "mergeTableCells", "refreshSheetsChart", "replaceAllShapesWithImage", "replaceAllShapesWithSheetsChart", "replaceAllText", "replaceImage", "rerouteLine", "ungroupObjects", "unmergeTableCells", "updateImageProperties", "updateLineCategory", "updateLineProperties", "updatePageElementAltText", "updatePageElementTransform", "updatePageElementsZOrder", "updatePageProperties", "updateParagraphStyle", "updateShapeProperties", "updateSlideProperties", "updateSlidesPosition", "updateTableBorderProperties", "updateTableCellProperties", "updateTableColumnProperties", "updateTableRowProperties", "updateTextStyle", "updateVideoProperties"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Request from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of create_image
        if self.create_image:
            _dict['createImage'] = self.create_image.to_dict()
        # override the default output from pydantic by calling `to_dict()` of create_line
        if self.create_line:
            _dict['createLine'] = self.create_line.to_dict()
        # override the default output from pydantic by calling `to_dict()` of create_paragraph_bullets
        if self.create_paragraph_bullets:
            _dict['createParagraphBullets'] = self.create_paragraph_bullets.to_dict()
        # override the default output from pydantic by calling `to_dict()` of create_shape
        if self.create_shape:
            _dict['createShape'] = self.create_shape.to_dict()
        # override the default output from pydantic by calling `to_dict()` of create_sheets_chart
        if self.create_sheets_chart:
            _dict['createSheetsChart'] = self.create_sheets_chart.to_dict()
        # override the default output from pydantic by calling `to_dict()` of create_slide
        if self.create_slide:
            _dict['createSlide'] = self.create_slide.to_dict()
        # override the default output from pydantic by calling `to_dict()` of create_table
        if self.create_table:
            _dict['createTable'] = self.create_table.to_dict()
        # override the default output from pydantic by calling `to_dict()` of create_video
        if self.create_video:
            _dict['createVideo'] = self.create_video.to_dict()
        # override the default output from pydantic by calling `to_dict()` of delete_object
        if self.delete_object:
            _dict['deleteObject'] = self.delete_object.to_dict()
        # override the default output from pydantic by calling `to_dict()` of delete_paragraph_bullets
        if self.delete_paragraph_bullets:
            _dict['deleteParagraphBullets'] = self.delete_paragraph_bullets.to_dict()
        # override the default output from pydantic by calling `to_dict()` of delete_table_column
        if self.delete_table_column:
            _dict['deleteTableColumn'] = self.delete_table_column.to_dict()
        # override the default output from pydantic by calling `to_dict()` of delete_table_row
        if self.delete_table_row:
            _dict['deleteTableRow'] = self.delete_table_row.to_dict()
        # override the default output from pydantic by calling `to_dict()` of delete_text
        if self.delete_text:
            _dict['deleteText'] = self.delete_text.to_dict()
        # override the default output from pydantic by calling `to_dict()` of duplicate_object
        if self.duplicate_object:
            _dict['duplicateObject'] = self.duplicate_object.to_dict()
        # override the default output from pydantic by calling `to_dict()` of group_objects
        if self.group_objects:
            _dict['groupObjects'] = self.group_objects.to_dict()
        # override the default output from pydantic by calling `to_dict()` of insert_table_columns
        if self.insert_table_columns:
            _dict['insertTableColumns'] = self.insert_table_columns.to_dict()
        # override the default output from pydantic by calling `to_dict()` of insert_table_rows
        if self.insert_table_rows:
            _dict['insertTableRows'] = self.insert_table_rows.to_dict()
        # override the default output from pydantic by calling `to_dict()` of insert_text
        if self.insert_text:
            _dict['insertText'] = self.insert_text.to_dict()
        # override the default output from pydantic by calling `to_dict()` of merge_table_cells
        if self.merge_table_cells:
            _dict['mergeTableCells'] = self.merge_table_cells.to_dict()
        # override the default output from pydantic by calling `to_dict()` of refresh_sheets_chart
        if self.refresh_sheets_chart:
            _dict['refreshSheetsChart'] = self.refresh_sheets_chart.to_dict()
        # override the default output from pydantic by calling `to_dict()` of replace_all_shapes_with_image
        if self.replace_all_shapes_with_image:
            _dict['replaceAllShapesWithImage'] = self.replace_all_shapes_with_image.to_dict()
        # override the default output from pydantic by calling `to_dict()` of replace_all_shapes_with_sheets_chart
        if self.replace_all_shapes_with_sheets_chart:
            _dict['replaceAllShapesWithSheetsChart'] = self.replace_all_shapes_with_sheets_chart.to_dict()
        # override the default output from pydantic by calling `to_dict()` of replace_all_text
        if self.replace_all_text:
            _dict['replaceAllText'] = self.replace_all_text.to_dict()
        # override the default output from pydantic by calling `to_dict()` of replace_image
        if self.replace_image:
            _dict['replaceImage'] = self.replace_image.to_dict()
        # override the default output from pydantic by calling `to_dict()` of reroute_line
        if self.reroute_line:
            _dict['rerouteLine'] = self.reroute_line.to_dict()
        # override the default output from pydantic by calling `to_dict()` of ungroup_objects
        if self.ungroup_objects:
            _dict['ungroupObjects'] = self.ungroup_objects.to_dict()
        # override the default output from pydantic by calling `to_dict()` of unmerge_table_cells
        if self.unmerge_table_cells:
            _dict['unmergeTableCells'] = self.unmerge_table_cells.to_dict()
        # override the default output from pydantic by calling `to_dict()` of update_image_properties
        if self.update_image_properties:
            _dict['updateImageProperties'] = self.update_image_properties.to_dict()
        # override the default output from pydantic by calling `to_dict()` of update_line_category
        if self.update_line_category:
            _dict['updateLineCategory'] = self.update_line_category.to_dict()
        # override the default output from pydantic by calling `to_dict()` of update_line_properties
        if self.update_line_properties:
            _dict['updateLineProperties'] = self.update_line_properties.to_dict()
        # override the default output from pydantic by calling `to_dict()` of update_page_element_alt_text
        if self.update_page_element_alt_text:
            _dict['updatePageElementAltText'] = self.update_page_element_alt_text.to_dict()
        # override the default output from pydantic by calling `to_dict()` of update_page_element_transform
        if self.update_page_element_transform:
            _dict['updatePageElementTransform'] = self.update_page_element_transform.to_dict()
        # override the default output from pydantic by calling `to_dict()` of update_page_elements_z_order
        if self.update_page_elements_z_order:
            _dict['updatePageElementsZOrder'] = self.update_page_elements_z_order.to_dict()
        # override the default output from pydantic by calling `to_dict()` of update_page_properties
        if self.update_page_properties:
            _dict['updatePageProperties'] = self.update_page_properties.to_dict()
        # override the default output from pydantic by calling `to_dict()` of update_paragraph_style
        if self.update_paragraph_style:
            _dict['updateParagraphStyle'] = self.update_paragraph_style.to_dict()
        # override the default output from pydantic by calling `to_dict()` of update_shape_properties
        if self.update_shape_properties:
            _dict['updateShapeProperties'] = self.update_shape_properties.to_dict()
        # override the default output from pydantic by calling `to_dict()` of update_slide_properties
        if self.update_slide_properties:
            _dict['updateSlideProperties'] = self.update_slide_properties.to_dict()
        # override the default output from pydantic by calling `to_dict()` of update_slides_position
        if self.update_slides_position:
            _dict['updateSlidesPosition'] = self.update_slides_position.to_dict()
        # override the default output from pydantic by calling `to_dict()` of update_table_border_properties
        if self.update_table_border_properties:
            _dict['updateTableBorderProperties'] = self.update_table_border_properties.to_dict()
        # override the default output from pydantic by calling `to_dict()` of update_table_cell_properties
        if self.update_table_cell_properties:
            _dict['updateTableCellProperties'] = self.update_table_cell_properties.to_dict()
        # override the default output from pydantic by calling `to_dict()` of update_table_column_properties
        if self.update_table_column_properties:
            _dict['updateTableColumnProperties'] = self.update_table_column_properties.to_dict()
        # override the default output from pydantic by calling `to_dict()` of update_table_row_properties
        if self.update_table_row_properties:
            _dict['updateTableRowProperties'] = self.update_table_row_properties.to_dict()
        # override the default output from pydantic by calling `to_dict()` of update_text_style
        if self.update_text_style:
            _dict['updateTextStyle'] = self.update_text_style.to_dict()
        # override the default output from pydantic by calling `to_dict()` of update_video_properties
        if self.update_video_properties:
            _dict['updateVideoProperties'] = self.update_video_properties.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Request from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "createImage": CreateImageRequest.from_dict(obj["createImage"]) if obj.get("createImage") is not None else None,
            "createLine": CreateLineRequest.from_dict(obj["createLine"]) if obj.get("createLine") is not None else None,
            "createParagraphBullets": CreateParagraphBulletsRequest.from_dict(obj["createParagraphBullets"]) if obj.get("createParagraphBullets") is not None else None,
            "createShape": CreateShapeRequest.from_dict(obj["createShape"]) if obj.get("createShape") is not None else None,
            "createSheetsChart": CreateSheetsChartRequest.from_dict(obj["createSheetsChart"]) if obj.get("createSheetsChart") is not None else None,
            "createSlide": CreateSlideRequest.from_dict(obj["createSlide"]) if obj.get("createSlide") is not None else None,
            "createTable": CreateTableRequest.from_dict(obj["createTable"]) if obj.get("createTable") is not None else None,
            "createVideo": CreateVideoRequest.from_dict(obj["createVideo"]) if obj.get("createVideo") is not None else None,
            "deleteObject": DeleteObjectRequest.from_dict(obj["deleteObject"]) if obj.get("deleteObject") is not None else None,
            "deleteParagraphBullets": DeleteParagraphBulletsRequest.from_dict(obj["deleteParagraphBullets"]) if obj.get("deleteParagraphBullets") is not None else None,
            "deleteTableColumn": DeleteTableColumnRequest.from_dict(obj["deleteTableColumn"]) if obj.get("deleteTableColumn") is not None else None,
            "deleteTableRow": DeleteTableRowRequest.from_dict(obj["deleteTableRow"]) if obj.get("deleteTableRow") is not None else None,
            "deleteText": DeleteTextRequest.from_dict(obj["deleteText"]) if obj.get("deleteText") is not None else None,
            "duplicateObject": DuplicateObjectRequest.from_dict(obj["duplicateObject"]) if obj.get("duplicateObject") is not None else None,
            "groupObjects": GroupObjectsRequest.from_dict(obj["groupObjects"]) if obj.get("groupObjects") is not None else None,
            "insertTableColumns": InsertTableColumnsRequest.from_dict(obj["insertTableColumns"]) if obj.get("insertTableColumns") is not None else None,
            "insertTableRows": InsertTableRowsRequest.from_dict(obj["insertTableRows"]) if obj.get("insertTableRows") is not None else None,
            "insertText": InsertTextRequest.from_dict(obj["insertText"]) if obj.get("insertText") is not None else None,
            "mergeTableCells": MergeTableCellsRequest.from_dict(obj["mergeTableCells"]) if obj.get("mergeTableCells") is not None else None,
            "refreshSheetsChart": RefreshSheetsChartRequest.from_dict(obj["refreshSheetsChart"]) if obj.get("refreshSheetsChart") is not None else None,
            "replaceAllShapesWithImage": ReplaceAllShapesWithImageRequest.from_dict(obj["replaceAllShapesWithImage"]) if obj.get("replaceAllShapesWithImage") is not None else None,
            "replaceAllShapesWithSheetsChart": ReplaceAllShapesWithSheetsChartRequest.from_dict(obj["replaceAllShapesWithSheetsChart"]) if obj.get("replaceAllShapesWithSheetsChart") is not None else None,
            "replaceAllText": ReplaceAllTextRequest.from_dict(obj["replaceAllText"]) if obj.get("replaceAllText") is not None else None,
            "replaceImage": ReplaceImageRequest.from_dict(obj["replaceImage"]) if obj.get("replaceImage") is not None else None,
            "rerouteLine": RerouteLineRequest.from_dict(obj["rerouteLine"]) if obj.get("rerouteLine") is not None else None,
            "ungroupObjects": UngroupObjectsRequest.from_dict(obj["ungroupObjects"]) if obj.get("ungroupObjects") is not None else None,
            "unmergeTableCells": UnmergeTableCellsRequest.from_dict(obj["unmergeTableCells"]) if obj.get("unmergeTableCells") is not None else None,
            "updateImageProperties": UpdateImagePropertiesRequest.from_dict(obj["updateImageProperties"]) if obj.get("updateImageProperties") is not None else None,
            "updateLineCategory": UpdateLineCategoryRequest.from_dict(obj["updateLineCategory"]) if obj.get("updateLineCategory") is not None else None,
            "updateLineProperties": UpdateLinePropertiesRequest.from_dict(obj["updateLineProperties"]) if obj.get("updateLineProperties") is not None else None,
            "updatePageElementAltText": UpdatePageElementAltTextRequest.from_dict(obj["updatePageElementAltText"]) if obj.get("updatePageElementAltText") is not None else None,
            "updatePageElementTransform": UpdatePageElementTransformRequest.from_dict(obj["updatePageElementTransform"]) if obj.get("updatePageElementTransform") is not None else None,
            "updatePageElementsZOrder": UpdatePageElementsZOrderRequest.from_dict(obj["updatePageElementsZOrder"]) if obj.get("updatePageElementsZOrder") is not None else None,
            "updatePageProperties": UpdatePagePropertiesRequest.from_dict(obj["updatePageProperties"]) if obj.get("updatePageProperties") is not None else None,
            "updateParagraphStyle": UpdateParagraphStyleRequest.from_dict(obj["updateParagraphStyle"]) if obj.get("updateParagraphStyle") is not None else None,
            "updateShapeProperties": UpdateShapePropertiesRequest.from_dict(obj["updateShapeProperties"]) if obj.get("updateShapeProperties") is not None else None,
            "updateSlideProperties": UpdateSlidePropertiesRequest.from_dict(obj["updateSlideProperties"]) if obj.get("updateSlideProperties") is not None else None,
            "updateSlidesPosition": UpdateSlidesPositionRequest.from_dict(obj["updateSlidesPosition"]) if obj.get("updateSlidesPosition") is not None else None,
            "updateTableBorderProperties": UpdateTableBorderPropertiesRequest.from_dict(obj["updateTableBorderProperties"]) if obj.get("updateTableBorderProperties") is not None else None,
            "updateTableCellProperties": UpdateTableCellPropertiesRequest.from_dict(obj["updateTableCellProperties"]) if obj.get("updateTableCellProperties") is not None else None,
            "updateTableColumnProperties": UpdateTableColumnPropertiesRequest.from_dict(obj["updateTableColumnProperties"]) if obj.get("updateTableColumnProperties") is not None else None,
            "updateTableRowProperties": UpdateTableRowPropertiesRequest.from_dict(obj["updateTableRowProperties"]) if obj.get("updateTableRowProperties") is not None else None,
            "updateTextStyle": UpdateTextStyleRequest.from_dict(obj["updateTextStyle"]) if obj.get("updateTextStyle") is not None else None,
            "updateVideoProperties": UpdateVideoPropertiesRequest.from_dict(obj["updateVideoProperties"]) if obj.get("updateVideoProperties") is not None else None
        })
        return _obj



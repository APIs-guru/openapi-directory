# coding: utf-8

"""
    Google Slides API

    Reads and writes Google Slides presentations.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from openapi_client.models.dimension import Dimension
from typing import Optional, Set
from typing_extensions import Self

class ParagraphStyle(BaseModel):
    """
    Styles that apply to a whole paragraph. If this text is contained in a shape with a parent placeholder, then these paragraph styles may be inherited from the parent. Which paragraph styles are inherited depend on the nesting level of lists: * A paragraph not in a list will inherit its paragraph style from the paragraph at the 0 nesting level of the list inside the parent placeholder. * A paragraph in a list will inherit its paragraph style from the paragraph at its corresponding nesting level of the list inside the parent placeholder. Inherited paragraph styles are represented as unset fields in this message.
    """ # noqa: E501
    alignment: Optional[StrictStr] = Field(default=None, description="The text alignment for this paragraph.")
    direction: Optional[StrictStr] = Field(default=None, description="The text direction of this paragraph. If unset, the value defaults to LEFT_TO_RIGHT since text direction is not inherited.")
    indent_end: Optional[Dimension] = Field(default=None, alias="indentEnd")
    indent_first_line: Optional[Dimension] = Field(default=None, alias="indentFirstLine")
    indent_start: Optional[Dimension] = Field(default=None, alias="indentStart")
    line_spacing: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The amount of space between lines, as a percentage of normal, where normal is represented as 100.0. If unset, the value is inherited from the parent.", alias="lineSpacing")
    space_above: Optional[Dimension] = Field(default=None, alias="spaceAbove")
    space_below: Optional[Dimension] = Field(default=None, alias="spaceBelow")
    spacing_mode: Optional[StrictStr] = Field(default=None, description="The spacing mode for the paragraph.", alias="spacingMode")
    __properties: ClassVar[List[str]] = ["alignment", "direction", "indentEnd", "indentFirstLine", "indentStart", "lineSpacing", "spaceAbove", "spaceBelow", "spacingMode"]

    @field_validator('alignment')
    def alignment_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['ALIGNMENT_UNSPECIFIED', 'START', 'CENTER', 'END', 'JUSTIFIED']):
            raise ValueError("must be one of enum values ('ALIGNMENT_UNSPECIFIED', 'START', 'CENTER', 'END', 'JUSTIFIED')")
        return value

    @field_validator('direction')
    def direction_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['TEXT_DIRECTION_UNSPECIFIED', 'LEFT_TO_RIGHT', 'RIGHT_TO_LEFT']):
            raise ValueError("must be one of enum values ('TEXT_DIRECTION_UNSPECIFIED', 'LEFT_TO_RIGHT', 'RIGHT_TO_LEFT')")
        return value

    @field_validator('spacing_mode')
    def spacing_mode_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['SPACING_MODE_UNSPECIFIED', 'NEVER_COLLAPSE', 'COLLAPSE_LISTS']):
            raise ValueError("must be one of enum values ('SPACING_MODE_UNSPECIFIED', 'NEVER_COLLAPSE', 'COLLAPSE_LISTS')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ParagraphStyle from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of indent_end
        if self.indent_end:
            _dict['indentEnd'] = self.indent_end.to_dict()
        # override the default output from pydantic by calling `to_dict()` of indent_first_line
        if self.indent_first_line:
            _dict['indentFirstLine'] = self.indent_first_line.to_dict()
        # override the default output from pydantic by calling `to_dict()` of indent_start
        if self.indent_start:
            _dict['indentStart'] = self.indent_start.to_dict()
        # override the default output from pydantic by calling `to_dict()` of space_above
        if self.space_above:
            _dict['spaceAbove'] = self.space_above.to_dict()
        # override the default output from pydantic by calling `to_dict()` of space_below
        if self.space_below:
            _dict['spaceBelow'] = self.space_below.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ParagraphStyle from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "alignment": obj.get("alignment"),
            "direction": obj.get("direction"),
            "indentEnd": Dimension.from_dict(obj["indentEnd"]) if obj.get("indentEnd") is not None else None,
            "indentFirstLine": Dimension.from_dict(obj["indentFirstLine"]) if obj.get("indentFirstLine") is not None else None,
            "indentStart": Dimension.from_dict(obj["indentStart"]) if obj.get("indentStart") is not None else None,
            "lineSpacing": obj.get("lineSpacing"),
            "spaceAbove": Dimension.from_dict(obj["spaceAbove"]) if obj.get("spaceAbove") is not None else None,
            "spaceBelow": Dimension.from_dict(obj["spaceBelow"]) if obj.get("spaceBelow") is not None else None,
            "spacingMode": obj.get("spacingMode")
        })
        return _obj



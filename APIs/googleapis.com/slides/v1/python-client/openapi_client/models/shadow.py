# coding: utf-8

"""
    Google Slides API

    Reads and writes Google Slides presentations.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from openapi_client.models.affine_transform import AffineTransform
from openapi_client.models.dimension import Dimension
from openapi_client.models.opaque_color import OpaqueColor
from typing import Optional, Set
from typing_extensions import Self

class Shadow(BaseModel):
    """
    The shadow properties of a page element. If these fields are unset, they may be inherited from a parent placeholder if it exists. If there is no parent, the fields will default to the value used for new page elements created in the Slides editor, which may depend on the page element kind.
    """ # noqa: E501
    alignment: Optional[StrictStr] = Field(default=None, description="The alignment point of the shadow, that sets the origin for translate, scale and skew of the shadow. This property is read-only.")
    alpha: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The alpha of the shadow's color, from 0.0 to 1.0.")
    blur_radius: Optional[Dimension] = Field(default=None, alias="blurRadius")
    color: Optional[OpaqueColor] = None
    property_state: Optional[StrictStr] = Field(default=None, description="The shadow property state. Updating the shadow on a page element will implicitly update this field to `RENDERED`, unless another value is specified in the same request. To have no shadow on a page element, set this field to `NOT_RENDERED`. In this case, any other shadow fields set in the same request will be ignored.", alias="propertyState")
    rotate_with_shape: Optional[StrictBool] = Field(default=None, description="Whether the shadow should rotate with the shape. This property is read-only.", alias="rotateWithShape")
    transform: Optional[AffineTransform] = None
    type: Optional[StrictStr] = Field(default=None, description="The type of the shadow. This property is read-only.")
    __properties: ClassVar[List[str]] = ["alignment", "alpha", "blurRadius", "color", "propertyState", "rotateWithShape", "transform", "type"]

    @field_validator('alignment')
    def alignment_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['RECTANGLE_POSITION_UNSPECIFIED', 'TOP_LEFT', 'TOP_CENTER', 'TOP_RIGHT', 'LEFT_CENTER', 'CENTER', 'RIGHT_CENTER', 'BOTTOM_LEFT', 'BOTTOM_CENTER', 'BOTTOM_RIGHT']):
            raise ValueError("must be one of enum values ('RECTANGLE_POSITION_UNSPECIFIED', 'TOP_LEFT', 'TOP_CENTER', 'TOP_RIGHT', 'LEFT_CENTER', 'CENTER', 'RIGHT_CENTER', 'BOTTOM_LEFT', 'BOTTOM_CENTER', 'BOTTOM_RIGHT')")
        return value

    @field_validator('property_state')
    def property_state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['RENDERED', 'NOT_RENDERED', 'INHERIT']):
            raise ValueError("must be one of enum values ('RENDERED', 'NOT_RENDERED', 'INHERIT')")
        return value

    @field_validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['SHADOW_TYPE_UNSPECIFIED', 'OUTER']):
            raise ValueError("must be one of enum values ('SHADOW_TYPE_UNSPECIFIED', 'OUTER')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Shadow from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of blur_radius
        if self.blur_radius:
            _dict['blurRadius'] = self.blur_radius.to_dict()
        # override the default output from pydantic by calling `to_dict()` of color
        if self.color:
            _dict['color'] = self.color.to_dict()
        # override the default output from pydantic by calling `to_dict()` of transform
        if self.transform:
            _dict['transform'] = self.transform.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Shadow from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "alignment": obj.get("alignment"),
            "alpha": obj.get("alpha"),
            "blurRadius": Dimension.from_dict(obj["blurRadius"]) if obj.get("blurRadius") is not None else None,
            "color": OpaqueColor.from_dict(obj["color"]) if obj.get("color") is not None else None,
            "propertyState": obj.get("propertyState"),
            "rotateWithShape": obj.get("rotateWithShape"),
            "transform": AffineTransform.from_dict(obj["transform"]) if obj.get("transform") is not None else None,
            "type": obj.get("type")
        })
        return _obj



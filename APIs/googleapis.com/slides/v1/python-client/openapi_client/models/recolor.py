# coding: utf-8

"""
    Google Slides API

    Reads and writes Google Slides presentations.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.color_stop import ColorStop
from typing import Optional, Set
from typing_extensions import Self

class Recolor(BaseModel):
    """
    A recolor effect applied on an image.
    """ # noqa: E501
    name: Optional[StrictStr] = Field(default=None, description="The name of the recolor effect. The name is determined from the `recolor_stops` by matching the gradient against the colors in the page's current color scheme. This property is read-only.")
    recolor_stops: Optional[List[ColorStop]] = Field(default=None, description="The recolor effect is represented by a gradient, which is a list of color stops. The colors in the gradient will replace the corresponding colors at the same position in the color palette and apply to the image. This property is read-only.", alias="recolorStops")
    __properties: ClassVar[List[str]] = ["name", "recolorStops"]

    @field_validator('name')
    def name_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['NONE', 'LIGHT1', 'LIGHT2', 'LIGHT3', 'LIGHT4', 'LIGHT5', 'LIGHT6', 'LIGHT7', 'LIGHT8', 'LIGHT9', 'LIGHT10', 'DARK1', 'DARK2', 'DARK3', 'DARK4', 'DARK5', 'DARK6', 'DARK7', 'DARK8', 'DARK9', 'DARK10', 'GRAYSCALE', 'NEGATIVE', 'SEPIA', 'CUSTOM']):
            raise ValueError("must be one of enum values ('NONE', 'LIGHT1', 'LIGHT2', 'LIGHT3', 'LIGHT4', 'LIGHT5', 'LIGHT6', 'LIGHT7', 'LIGHT8', 'LIGHT9', 'LIGHT10', 'DARK1', 'DARK2', 'DARK3', 'DARK4', 'DARK5', 'DARK6', 'DARK7', 'DARK8', 'DARK9', 'DARK10', 'GRAYSCALE', 'NEGATIVE', 'SEPIA', 'CUSTOM')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Recolor from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in recolor_stops (list)
        _items = []
        if self.recolor_stops:
            for _item_recolor_stops in self.recolor_stops:
                if _item_recolor_stops:
                    _items.append(_item_recolor_stops.to_dict())
            _dict['recolorStops'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Recolor from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "name": obj.get("name"),
            "recolorStops": [ColorStop.from_dict(_item) for _item in obj["recolorStops"]] if obj.get("recolorStops") is not None else None
        })
        return _obj



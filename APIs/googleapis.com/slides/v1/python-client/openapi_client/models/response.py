# coding: utf-8

"""
    Google Slides API

    Reads and writes Google Slides presentations.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.create_image_response import CreateImageResponse
from openapi_client.models.create_line_response import CreateLineResponse
from openapi_client.models.create_shape_response import CreateShapeResponse
from openapi_client.models.create_sheets_chart_response import CreateSheetsChartResponse
from openapi_client.models.create_slide_response import CreateSlideResponse
from openapi_client.models.create_table_response import CreateTableResponse
from openapi_client.models.create_video_response import CreateVideoResponse
from openapi_client.models.duplicate_object_response import DuplicateObjectResponse
from openapi_client.models.group_objects_response import GroupObjectsResponse
from openapi_client.models.replace_all_shapes_with_image_response import ReplaceAllShapesWithImageResponse
from openapi_client.models.replace_all_shapes_with_sheets_chart_response import ReplaceAllShapesWithSheetsChartResponse
from openapi_client.models.replace_all_text_response import ReplaceAllTextResponse
from typing import Optional, Set
from typing_extensions import Self

class Response(BaseModel):
    """
    A single response from an update.
    """ # noqa: E501
    create_image: Optional[CreateImageResponse] = Field(default=None, alias="createImage")
    create_line: Optional[CreateLineResponse] = Field(default=None, alias="createLine")
    create_shape: Optional[CreateShapeResponse] = Field(default=None, alias="createShape")
    create_sheets_chart: Optional[CreateSheetsChartResponse] = Field(default=None, alias="createSheetsChart")
    create_slide: Optional[CreateSlideResponse] = Field(default=None, alias="createSlide")
    create_table: Optional[CreateTableResponse] = Field(default=None, alias="createTable")
    create_video: Optional[CreateVideoResponse] = Field(default=None, alias="createVideo")
    duplicate_object: Optional[DuplicateObjectResponse] = Field(default=None, alias="duplicateObject")
    group_objects: Optional[GroupObjectsResponse] = Field(default=None, alias="groupObjects")
    replace_all_shapes_with_image: Optional[ReplaceAllShapesWithImageResponse] = Field(default=None, alias="replaceAllShapesWithImage")
    replace_all_shapes_with_sheets_chart: Optional[ReplaceAllShapesWithSheetsChartResponse] = Field(default=None, alias="replaceAllShapesWithSheetsChart")
    replace_all_text: Optional[ReplaceAllTextResponse] = Field(default=None, alias="replaceAllText")
    __properties: ClassVar[List[str]] = ["createImage", "createLine", "createShape", "createSheetsChart", "createSlide", "createTable", "createVideo", "duplicateObject", "groupObjects", "replaceAllShapesWithImage", "replaceAllShapesWithSheetsChart", "replaceAllText"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Response from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of create_image
        if self.create_image:
            _dict['createImage'] = self.create_image.to_dict()
        # override the default output from pydantic by calling `to_dict()` of create_line
        if self.create_line:
            _dict['createLine'] = self.create_line.to_dict()
        # override the default output from pydantic by calling `to_dict()` of create_shape
        if self.create_shape:
            _dict['createShape'] = self.create_shape.to_dict()
        # override the default output from pydantic by calling `to_dict()` of create_sheets_chart
        if self.create_sheets_chart:
            _dict['createSheetsChart'] = self.create_sheets_chart.to_dict()
        # override the default output from pydantic by calling `to_dict()` of create_slide
        if self.create_slide:
            _dict['createSlide'] = self.create_slide.to_dict()
        # override the default output from pydantic by calling `to_dict()` of create_table
        if self.create_table:
            _dict['createTable'] = self.create_table.to_dict()
        # override the default output from pydantic by calling `to_dict()` of create_video
        if self.create_video:
            _dict['createVideo'] = self.create_video.to_dict()
        # override the default output from pydantic by calling `to_dict()` of duplicate_object
        if self.duplicate_object:
            _dict['duplicateObject'] = self.duplicate_object.to_dict()
        # override the default output from pydantic by calling `to_dict()` of group_objects
        if self.group_objects:
            _dict['groupObjects'] = self.group_objects.to_dict()
        # override the default output from pydantic by calling `to_dict()` of replace_all_shapes_with_image
        if self.replace_all_shapes_with_image:
            _dict['replaceAllShapesWithImage'] = self.replace_all_shapes_with_image.to_dict()
        # override the default output from pydantic by calling `to_dict()` of replace_all_shapes_with_sheets_chart
        if self.replace_all_shapes_with_sheets_chart:
            _dict['replaceAllShapesWithSheetsChart'] = self.replace_all_shapes_with_sheets_chart.to_dict()
        # override the default output from pydantic by calling `to_dict()` of replace_all_text
        if self.replace_all_text:
            _dict['replaceAllText'] = self.replace_all_text.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Response from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "createImage": CreateImageResponse.from_dict(obj["createImage"]) if obj.get("createImage") is not None else None,
            "createLine": CreateLineResponse.from_dict(obj["createLine"]) if obj.get("createLine") is not None else None,
            "createShape": CreateShapeResponse.from_dict(obj["createShape"]) if obj.get("createShape") is not None else None,
            "createSheetsChart": CreateSheetsChartResponse.from_dict(obj["createSheetsChart"]) if obj.get("createSheetsChart") is not None else None,
            "createSlide": CreateSlideResponse.from_dict(obj["createSlide"]) if obj.get("createSlide") is not None else None,
            "createTable": CreateTableResponse.from_dict(obj["createTable"]) if obj.get("createTable") is not None else None,
            "createVideo": CreateVideoResponse.from_dict(obj["createVideo"]) if obj.get("createVideo") is not None else None,
            "duplicateObject": DuplicateObjectResponse.from_dict(obj["duplicateObject"]) if obj.get("duplicateObject") is not None else None,
            "groupObjects": GroupObjectsResponse.from_dict(obj["groupObjects"]) if obj.get("groupObjects") is not None else None,
            "replaceAllShapesWithImage": ReplaceAllShapesWithImageResponse.from_dict(obj["replaceAllShapesWithImage"]) if obj.get("replaceAllShapesWithImage") is not None else None,
            "replaceAllShapesWithSheetsChart": ReplaceAllShapesWithSheetsChartResponse.from_dict(obj["replaceAllShapesWithSheetsChart"]) if obj.get("replaceAllShapesWithSheetsChart") is not None else None,
            "replaceAllText": ReplaceAllTextResponse.from_dict(obj["replaceAllText"]) if obj.get("replaceAllText") is not None else None
        })
        return _obj



# coding: utf-8

"""
    Google Slides API

    Reads and writes Google Slides presentations.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class SlideProperties(BaseModel):
    """
    The properties of Page that are only relevant for pages with page_type SLIDE.
    """ # noqa: E501
    is_skipped: Optional[StrictBool] = Field(default=None, description="Whether the slide is skipped in the presentation mode. Defaults to false.", alias="isSkipped")
    layout_object_id: Optional[StrictStr] = Field(default=None, description="The object ID of the layout that this slide is based on. This property is read-only.", alias="layoutObjectId")
    master_object_id: Optional[StrictStr] = Field(default=None, description="The object ID of the master that this slide is based on. This property is read-only.", alias="masterObjectId")
    notes_page: Optional[Page] = Field(default=None, alias="notesPage")
    __properties: ClassVar[List[str]] = ["isSkipped", "layoutObjectId", "masterObjectId", "notesPage"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SlideProperties from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of notes_page
        if self.notes_page:
            _dict['notesPage'] = self.notes_page.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SlideProperties from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "isSkipped": obj.get("isSkipped"),
            "layoutObjectId": obj.get("layoutObjectId"),
            "masterObjectId": obj.get("masterObjectId"),
            "notesPage": Page.from_dict(obj["notesPage"]) if obj.get("notesPage") is not None else None
        })
        return _obj

from openapi_client.models.page import Page
# TODO: Rewrite to not use raise_errors
SlideProperties.model_rebuild(raise_errors=False)


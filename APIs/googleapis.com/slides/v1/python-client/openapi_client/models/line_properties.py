# coding: utf-8

"""
    Google Slides API

    Reads and writes Google Slides presentations.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.dimension import Dimension
from openapi_client.models.line_connection import LineConnection
from openapi_client.models.line_fill import LineFill
from openapi_client.models.link import Link
from typing import Optional, Set
from typing_extensions import Self

class LineProperties(BaseModel):
    """
    The properties of the Line. When unset, these fields default to values that match the appearance of new lines created in the Slides editor.
    """ # noqa: E501
    dash_style: Optional[StrictStr] = Field(default=None, description="The dash style of the line.", alias="dashStyle")
    end_arrow: Optional[StrictStr] = Field(default=None, description="The style of the arrow at the end of the line.", alias="endArrow")
    end_connection: Optional[LineConnection] = Field(default=None, alias="endConnection")
    line_fill: Optional[LineFill] = Field(default=None, alias="lineFill")
    link: Optional[Link] = None
    start_arrow: Optional[StrictStr] = Field(default=None, description="The style of the arrow at the beginning of the line.", alias="startArrow")
    start_connection: Optional[LineConnection] = Field(default=None, alias="startConnection")
    weight: Optional[Dimension] = None
    __properties: ClassVar[List[str]] = ["dashStyle", "endArrow", "endConnection", "lineFill", "link", "startArrow", "startConnection", "weight"]

    @field_validator('dash_style')
    def dash_style_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['DASH_STYLE_UNSPECIFIED', 'SOLID', 'DOT', 'DASH', 'DASH_DOT', 'LONG_DASH', 'LONG_DASH_DOT']):
            raise ValueError("must be one of enum values ('DASH_STYLE_UNSPECIFIED', 'SOLID', 'DOT', 'DASH', 'DASH_DOT', 'LONG_DASH', 'LONG_DASH_DOT')")
        return value

    @field_validator('end_arrow')
    def end_arrow_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['ARROW_STYLE_UNSPECIFIED', 'NONE', 'STEALTH_ARROW', 'FILL_ARROW', 'FILL_CIRCLE', 'FILL_SQUARE', 'FILL_DIAMOND', 'OPEN_ARROW', 'OPEN_CIRCLE', 'OPEN_SQUARE', 'OPEN_DIAMOND']):
            raise ValueError("must be one of enum values ('ARROW_STYLE_UNSPECIFIED', 'NONE', 'STEALTH_ARROW', 'FILL_ARROW', 'FILL_CIRCLE', 'FILL_SQUARE', 'FILL_DIAMOND', 'OPEN_ARROW', 'OPEN_CIRCLE', 'OPEN_SQUARE', 'OPEN_DIAMOND')")
        return value

    @field_validator('start_arrow')
    def start_arrow_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['ARROW_STYLE_UNSPECIFIED', 'NONE', 'STEALTH_ARROW', 'FILL_ARROW', 'FILL_CIRCLE', 'FILL_SQUARE', 'FILL_DIAMOND', 'OPEN_ARROW', 'OPEN_CIRCLE', 'OPEN_SQUARE', 'OPEN_DIAMOND']):
            raise ValueError("must be one of enum values ('ARROW_STYLE_UNSPECIFIED', 'NONE', 'STEALTH_ARROW', 'FILL_ARROW', 'FILL_CIRCLE', 'FILL_SQUARE', 'FILL_DIAMOND', 'OPEN_ARROW', 'OPEN_CIRCLE', 'OPEN_SQUARE', 'OPEN_DIAMOND')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of LineProperties from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of end_connection
        if self.end_connection:
            _dict['endConnection'] = self.end_connection.to_dict()
        # override the default output from pydantic by calling `to_dict()` of line_fill
        if self.line_fill:
            _dict['lineFill'] = self.line_fill.to_dict()
        # override the default output from pydantic by calling `to_dict()` of link
        if self.link:
            _dict['link'] = self.link.to_dict()
        # override the default output from pydantic by calling `to_dict()` of start_connection
        if self.start_connection:
            _dict['startConnection'] = self.start_connection.to_dict()
        # override the default output from pydantic by calling `to_dict()` of weight
        if self.weight:
            _dict['weight'] = self.weight.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of LineProperties from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "dashStyle": obj.get("dashStyle"),
            "endArrow": obj.get("endArrow"),
            "endConnection": LineConnection.from_dict(obj["endConnection"]) if obj.get("endConnection") is not None else None,
            "lineFill": LineFill.from_dict(obj["lineFill"]) if obj.get("lineFill") is not None else None,
            "link": Link.from_dict(obj["link"]) if obj.get("link") is not None else None,
            "startArrow": obj.get("startArrow"),
            "startConnection": LineConnection.from_dict(obj["startConnection"]) if obj.get("startConnection") is not None else None,
            "weight": Dimension.from_dict(obj["weight"]) if obj.get("weight") is not None else None
        })
        return _obj



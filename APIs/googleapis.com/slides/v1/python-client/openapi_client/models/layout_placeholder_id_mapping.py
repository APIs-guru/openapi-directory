# coding: utf-8

"""
    Google Slides API

    Reads and writes Google Slides presentations.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.placeholder import Placeholder
from typing import Optional, Set
from typing_extensions import Self

class LayoutPlaceholderIdMapping(BaseModel):
    """
    The user-specified ID mapping for a placeholder that will be created on a slide from a specified layout.
    """ # noqa: E501
    layout_placeholder: Optional[Placeholder] = Field(default=None, alias="layoutPlaceholder")
    layout_placeholder_object_id: Optional[StrictStr] = Field(default=None, description="The object ID of the placeholder on a layout that will be applied to a slide.", alias="layoutPlaceholderObjectId")
    object_id: Optional[StrictStr] = Field(default=None, description="A user-supplied object ID for the placeholder identified above that to be created onto a slide. If you specify an ID, it must be unique among all pages and page elements in the presentation. The ID must start with an alphanumeric character or an underscore (matches regex `[a-zA-Z0-9_]`); remaining characters may include those as well as a hyphen or colon (matches regex `[a-zA-Z0-9_-:]`). The length of the ID must not be less than 5 or greater than 50. If you don't specify an ID, a unique one is generated.", alias="objectId")
    __properties: ClassVar[List[str]] = ["layoutPlaceholder", "layoutPlaceholderObjectId", "objectId"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of LayoutPlaceholderIdMapping from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of layout_placeholder
        if self.layout_placeholder:
            _dict['layoutPlaceholder'] = self.layout_placeholder.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of LayoutPlaceholderIdMapping from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "layoutPlaceholder": Placeholder.from_dict(obj["layoutPlaceholder"]) if obj.get("layoutPlaceholder") is not None else None,
            "layoutPlaceholderObjectId": obj.get("layoutPlaceholderObjectId"),
            "objectId": obj.get("objectId")
        })
        return _obj



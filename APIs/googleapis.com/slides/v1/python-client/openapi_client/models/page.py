# coding: utf-8

"""
    Google Slides API

    Reads and writes Google Slides presentations.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.layout_properties import LayoutProperties
from openapi_client.models.master_properties import MasterProperties
from openapi_client.models.notes_properties import NotesProperties
from openapi_client.models.page_element import PageElement
from openapi_client.models.page_properties import PageProperties
from typing import Optional, Set
from typing_extensions import Self

class Page(BaseModel):
    """
    A page in a presentation.
    """ # noqa: E501
    layout_properties: Optional[LayoutProperties] = Field(default=None, alias="layoutProperties")
    master_properties: Optional[MasterProperties] = Field(default=None, alias="masterProperties")
    notes_properties: Optional[NotesProperties] = Field(default=None, alias="notesProperties")
    object_id: Optional[StrictStr] = Field(default=None, description="The object ID for this page. Object IDs used by Page and PageElement share the same namespace.", alias="objectId")
    page_elements: Optional[List[PageElement]] = Field(default=None, description="The page elements rendered on the page.", alias="pageElements")
    page_properties: Optional[PageProperties] = Field(default=None, alias="pageProperties")
    page_type: Optional[StrictStr] = Field(default=None, description="The type of the page.", alias="pageType")
    revision_id: Optional[StrictStr] = Field(default=None, description="Output only. The revision ID of the presentation. Can be used in update requests to assert the presentation revision hasn't changed since the last read operation. Only populated if the user has edit access to the presentation. The revision ID is not a sequential number but an opaque string. The format of the revision ID might change over time. A returned revision ID is only guaranteed to be valid for 24 hours after it has been returned and cannot be shared across users. If the revision ID is unchanged between calls, then the presentation has not changed. Conversely, a changed ID (for the same presentation and user) usually means the presentation has been updated. However, a changed ID can also be due to internal factors such as ID format changes.", alias="revisionId")
    slide_properties: Optional[SlideProperties] = Field(default=None, alias="slideProperties")
    __properties: ClassVar[List[str]] = ["layoutProperties", "masterProperties", "notesProperties", "objectId", "pageElements", "pageProperties", "pageType", "revisionId", "slideProperties"]

    @field_validator('page_type')
    def page_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['SLIDE', 'MASTER', 'LAYOUT', 'NOTES', 'NOTES_MASTER']):
            raise ValueError("must be one of enum values ('SLIDE', 'MASTER', 'LAYOUT', 'NOTES', 'NOTES_MASTER')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Page from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of layout_properties
        if self.layout_properties:
            _dict['layoutProperties'] = self.layout_properties.to_dict()
        # override the default output from pydantic by calling `to_dict()` of master_properties
        if self.master_properties:
            _dict['masterProperties'] = self.master_properties.to_dict()
        # override the default output from pydantic by calling `to_dict()` of notes_properties
        if self.notes_properties:
            _dict['notesProperties'] = self.notes_properties.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in page_elements (list)
        _items = []
        if self.page_elements:
            for _item_page_elements in self.page_elements:
                if _item_page_elements:
                    _items.append(_item_page_elements.to_dict())
            _dict['pageElements'] = _items
        # override the default output from pydantic by calling `to_dict()` of page_properties
        if self.page_properties:
            _dict['pageProperties'] = self.page_properties.to_dict()
        # override the default output from pydantic by calling `to_dict()` of slide_properties
        if self.slide_properties:
            _dict['slideProperties'] = self.slide_properties.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Page from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "layoutProperties": LayoutProperties.from_dict(obj["layoutProperties"]) if obj.get("layoutProperties") is not None else None,
            "masterProperties": MasterProperties.from_dict(obj["masterProperties"]) if obj.get("masterProperties") is not None else None,
            "notesProperties": NotesProperties.from_dict(obj["notesProperties"]) if obj.get("notesProperties") is not None else None,
            "objectId": obj.get("objectId"),
            "pageElements": [PageElement.from_dict(_item) for _item in obj["pageElements"]] if obj.get("pageElements") is not None else None,
            "pageProperties": PageProperties.from_dict(obj["pageProperties"]) if obj.get("pageProperties") is not None else None,
            "pageType": obj.get("pageType"),
            "revisionId": obj.get("revisionId"),
            "slideProperties": SlideProperties.from_dict(obj["slideProperties"]) if obj.get("slideProperties") is not None else None
        })
        return _obj

from openapi_client.models.slide_properties import SlideProperties
# TODO: Rewrite to not use raise_errors
Page.model_rebuild(raise_errors=False)


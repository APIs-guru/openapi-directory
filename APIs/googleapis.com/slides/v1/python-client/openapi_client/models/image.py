# coding: utf-8

"""
    Google Slides API

    Reads and writes Google Slides presentations.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.image_properties import ImageProperties
from openapi_client.models.placeholder import Placeholder
from typing import Optional, Set
from typing_extensions import Self

class Image(BaseModel):
    """
    A PageElement kind representing an image.
    """ # noqa: E501
    content_url: Optional[StrictStr] = Field(default=None, description="An URL to an image with a default lifetime of 30 minutes. This URL is tagged with the account of the requester. Anyone with the URL effectively accesses the image as the original requester. Access to the image may be lost if the presentation's sharing settings change.", alias="contentUrl")
    image_properties: Optional[ImageProperties] = Field(default=None, alias="imageProperties")
    placeholder: Optional[Placeholder] = None
    source_url: Optional[StrictStr] = Field(default=None, description="The source URL is the URL used to insert the image. The source URL can be empty.", alias="sourceUrl")
    __properties: ClassVar[List[str]] = ["contentUrl", "imageProperties", "placeholder", "sourceUrl"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Image from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of image_properties
        if self.image_properties:
            _dict['imageProperties'] = self.image_properties.to_dict()
        # override the default output from pydantic by calling `to_dict()` of placeholder
        if self.placeholder:
            _dict['placeholder'] = self.placeholder.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Image from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "contentUrl": obj.get("contentUrl"),
            "imageProperties": ImageProperties.from_dict(obj["imageProperties"]) if obj.get("imageProperties") is not None else None,
            "placeholder": Placeholder.from_dict(obj["placeholder"]) if obj.get("placeholder") is not None else None,
            "sourceUrl": obj.get("sourceUrl")
        })
        return _obj



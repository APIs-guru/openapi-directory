# coding: utf-8

"""
    Google Slides API

    Reads and writes Google Slides presentations.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.substring_match_criteria import SubstringMatchCriteria
from typing import Optional, Set
from typing_extensions import Self

class ReplaceAllShapesWithImageRequest(BaseModel):
    """
    Replaces all shapes that match the given criteria with the provided image. The images replacing the shapes are rectangular after being inserted into the presentation and do not take on the forms of the shapes.
    """ # noqa: E501
    contains_text: Optional[SubstringMatchCriteria] = Field(default=None, alias="containsText")
    image_replace_method: Optional[StrictStr] = Field(default=None, description="The image replace method. If you specify both a `replace_method` and an `image_replace_method`, the `image_replace_method` takes precedence. If you do not specify a value for `image_replace_method`, but specify a value for `replace_method`, then the specified `replace_method` value is used. If you do not specify either, then CENTER_INSIDE is used.", alias="imageReplaceMethod")
    image_url: Optional[StrictStr] = Field(default=None, description="The image URL. The image is fetched once at insertion time and a copy is stored for display inside the presentation. Images must be less than 50MB in size, cannot exceed 25 megapixels, and must be in one of PNG, JPEG, or GIF format. The provided URL can be at most 2 kB in length. The URL itself is saved with the image, and exposed via the Image.source_url field.", alias="imageUrl")
    page_object_ids: Optional[List[StrictStr]] = Field(default=None, description="If non-empty, limits the matches to page elements only on the given pages. Returns a 400 bad request error if given the page object ID of a notes page or a notes master, or if a page with that object ID doesn't exist in the presentation.", alias="pageObjectIds")
    replace_method: Optional[StrictStr] = Field(default=None, description="The replace method. *Deprecated*: use `image_replace_method` instead. If you specify both a `replace_method` and an `image_replace_method`, the `image_replace_method` takes precedence.", alias="replaceMethod")
    __properties: ClassVar[List[str]] = ["containsText", "imageReplaceMethod", "imageUrl", "pageObjectIds", "replaceMethod"]

    @field_validator('image_replace_method')
    def image_replace_method_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['IMAGE_REPLACE_METHOD_UNSPECIFIED', 'CENTER_INSIDE', 'CENTER_CROP']):
            raise ValueError("must be one of enum values ('IMAGE_REPLACE_METHOD_UNSPECIFIED', 'CENTER_INSIDE', 'CENTER_CROP')")
        return value

    @field_validator('replace_method')
    def replace_method_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['CENTER_INSIDE', 'CENTER_CROP']):
            raise ValueError("must be one of enum values ('CENTER_INSIDE', 'CENTER_CROP')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ReplaceAllShapesWithImageRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of contains_text
        if self.contains_text:
            _dict['containsText'] = self.contains_text.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ReplaceAllShapesWithImageRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "containsText": SubstringMatchCriteria.from_dict(obj["containsText"]) if obj.get("containsText") is not None else None,
            "imageReplaceMethod": obj.get("imageReplaceMethod"),
            "imageUrl": obj.get("imageUrl"),
            "pageObjectIds": obj.get("pageObjectIds"),
            "replaceMethod": obj.get("replaceMethod")
        })
        return _obj



# coding: utf-8

"""
    Google Slides API

    Reads and writes Google Slides presentations.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class AffineTransform(BaseModel):
    """
    AffineTransform uses a 3x3 matrix with an implied last row of [ 0 0 1 ] to transform source coordinates (x,y) into destination coordinates (x', y') according to: x' x = shear_y scale_y translate_y 1 [ 1 ] After transformation, x' = scale_x * x + shear_x * y + translate_x; y' = scale_y * y + shear_y * x + translate_y; This message is therefore composed of these six matrix elements.
    """ # noqa: E501
    scale_x: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The X coordinate scaling element.", alias="scaleX")
    scale_y: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The Y coordinate scaling element.", alias="scaleY")
    shear_x: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The X coordinate shearing element.", alias="shearX")
    shear_y: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The Y coordinate shearing element.", alias="shearY")
    translate_x: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The X coordinate translation element.", alias="translateX")
    translate_y: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The Y coordinate translation element.", alias="translateY")
    unit: Optional[StrictStr] = Field(default=None, description="The units for translate elements.")
    __properties: ClassVar[List[str]] = ["scaleX", "scaleY", "shearX", "shearY", "translateX", "translateY", "unit"]

    @field_validator('unit')
    def unit_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['UNIT_UNSPECIFIED', 'EMU', 'PT']):
            raise ValueError("must be one of enum values ('UNIT_UNSPECIFIED', 'EMU', 'PT')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AffineTransform from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AffineTransform from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "scaleX": obj.get("scaleX"),
            "scaleY": obj.get("scaleY"),
            "shearX": obj.get("shearX"),
            "shearY": obj.get("shearY"),
            "translateX": obj.get("translateX"),
            "translateY": obj.get("translateY"),
            "unit": obj.get("unit")
        })
        return _obj



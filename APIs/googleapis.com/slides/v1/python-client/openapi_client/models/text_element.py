# coding: utf-8

"""
    Google Slides API

    Reads and writes Google Slides presentations.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.auto_text import AutoText
from openapi_client.models.paragraph_marker import ParagraphMarker
from openapi_client.models.text_run import TextRun
from typing import Optional, Set
from typing_extensions import Self

class TextElement(BaseModel):
    """
    A TextElement describes the content of a range of indices in the text content of a Shape or TableCell.
    """ # noqa: E501
    auto_text: Optional[AutoText] = Field(default=None, alias="autoText")
    end_index: Optional[StrictInt] = Field(default=None, description="The zero-based end index of this text element, exclusive, in Unicode code units.", alias="endIndex")
    paragraph_marker: Optional[ParagraphMarker] = Field(default=None, alias="paragraphMarker")
    start_index: Optional[StrictInt] = Field(default=None, description="The zero-based start index of this text element, in Unicode code units.", alias="startIndex")
    text_run: Optional[TextRun] = Field(default=None, alias="textRun")
    __properties: ClassVar[List[str]] = ["autoText", "endIndex", "paragraphMarker", "startIndex", "textRun"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of TextElement from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of auto_text
        if self.auto_text:
            _dict['autoText'] = self.auto_text.to_dict()
        # override the default output from pydantic by calling `to_dict()` of paragraph_marker
        if self.paragraph_marker:
            _dict['paragraphMarker'] = self.paragraph_marker.to_dict()
        # override the default output from pydantic by calling `to_dict()` of text_run
        if self.text_run:
            _dict['textRun'] = self.text_run.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of TextElement from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "autoText": AutoText.from_dict(obj["autoText"]) if obj.get("autoText") is not None else None,
            "endIndex": obj.get("endIndex"),
            "paragraphMarker": ParagraphMarker.from_dict(obj["paragraphMarker"]) if obj.get("paragraphMarker") is not None else None,
            "startIndex": obj.get("startIndex"),
            "textRun": TextRun.from_dict(obj["textRun"]) if obj.get("textRun") is not None else None
        })
        return _obj



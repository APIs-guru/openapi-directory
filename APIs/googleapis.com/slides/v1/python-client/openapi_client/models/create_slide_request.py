# coding: utf-8

"""
    Google Slides API

    Reads and writes Google Slides presentations.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.layout_placeholder_id_mapping import LayoutPlaceholderIdMapping
from openapi_client.models.layout_reference import LayoutReference
from typing import Optional, Set
from typing_extensions import Self

class CreateSlideRequest(BaseModel):
    """
    Creates a slide.
    """ # noqa: E501
    insertion_index: Optional[StrictInt] = Field(default=None, description="The optional zero-based index indicating where to insert the slides. If you don't specify an index, the slide is created at the end.", alias="insertionIndex")
    object_id: Optional[StrictStr] = Field(default=None, description="A user-supplied object ID. If you specify an ID, it must be unique among all pages and page elements in the presentation. The ID must start with an alphanumeric character or an underscore (matches regex `[a-zA-Z0-9_]`); remaining characters may include those as well as a hyphen or colon (matches regex `[a-zA-Z0-9_-:]`). The ID length must be between 5 and 50 characters, inclusive. If you don't specify an ID, a unique one is generated.", alias="objectId")
    placeholder_id_mappings: Optional[List[LayoutPlaceholderIdMapping]] = Field(default=None, description="An optional list of object ID mappings from the placeholder(s) on the layout to the placeholders that are created on the slide from the specified layout. Can only be used when `slide_layout_reference` is specified.", alias="placeholderIdMappings")
    slide_layout_reference: Optional[LayoutReference] = Field(default=None, alias="slideLayoutReference")
    __properties: ClassVar[List[str]] = ["insertionIndex", "objectId", "placeholderIdMappings", "slideLayoutReference"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CreateSlideRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in placeholder_id_mappings (list)
        _items = []
        if self.placeholder_id_mappings:
            for _item_placeholder_id_mappings in self.placeholder_id_mappings:
                if _item_placeholder_id_mappings:
                    _items.append(_item_placeholder_id_mappings.to_dict())
            _dict['placeholderIdMappings'] = _items
        # override the default output from pydantic by calling `to_dict()` of slide_layout_reference
        if self.slide_layout_reference:
            _dict['slideLayoutReference'] = self.slide_layout_reference.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CreateSlideRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "insertionIndex": obj.get("insertionIndex"),
            "objectId": obj.get("objectId"),
            "placeholderIdMappings": [LayoutPlaceholderIdMapping.from_dict(_item) for _item in obj["placeholderIdMappings"]] if obj.get("placeholderIdMappings") is not None else None,
            "slideLayoutReference": LayoutReference.from_dict(obj["slideLayoutReference"]) if obj.get("slideLayoutReference") is not None else None
        })
        return _obj



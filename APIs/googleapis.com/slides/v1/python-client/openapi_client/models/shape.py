# coding: utf-8

"""
    Google Slides API

    Reads and writes Google Slides presentations.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.placeholder import Placeholder
from openapi_client.models.shape_properties import ShapeProperties
from openapi_client.models.text_content import TextContent
from typing import Optional, Set
from typing_extensions import Self

class Shape(BaseModel):
    """
    A PageElement kind representing a generic shape that does not have a more specific classification.
    """ # noqa: E501
    placeholder: Optional[Placeholder] = None
    shape_properties: Optional[ShapeProperties] = Field(default=None, alias="shapeProperties")
    shape_type: Optional[StrictStr] = Field(default=None, description="The type of the shape.", alias="shapeType")
    text: Optional[TextContent] = None
    __properties: ClassVar[List[str]] = ["placeholder", "shapeProperties", "shapeType", "text"]

    @field_validator('shape_type')
    def shape_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['TYPE_UNSPECIFIED', 'TEXT_BOX', 'RECTANGLE', 'ROUND_RECTANGLE', 'ELLIPSE', 'ARC', 'BENT_ARROW', 'BENT_UP_ARROW', 'BEVEL', 'BLOCK_ARC', 'BRACE_PAIR', 'BRACKET_PAIR', 'CAN', 'CHEVRON', 'CHORD', 'CLOUD', 'CORNER', 'CUBE', 'CURVED_DOWN_ARROW', 'CURVED_LEFT_ARROW', 'CURVED_RIGHT_ARROW', 'CURVED_UP_ARROW', 'DECAGON', 'DIAGONAL_STRIPE', 'DIAMOND', 'DODECAGON', 'DONUT', 'DOUBLE_WAVE', 'DOWN_ARROW', 'DOWN_ARROW_CALLOUT', 'FOLDED_CORNER', 'FRAME', 'HALF_FRAME', 'HEART', 'HEPTAGON', 'HEXAGON', 'HOME_PLATE', 'HORIZONTAL_SCROLL', 'IRREGULAR_SEAL_1', 'IRREGULAR_SEAL_2', 'LEFT_ARROW', 'LEFT_ARROW_CALLOUT', 'LEFT_BRACE', 'LEFT_BRACKET', 'LEFT_RIGHT_ARROW', 'LEFT_RIGHT_ARROW_CALLOUT', 'LEFT_RIGHT_UP_ARROW', 'LEFT_UP_ARROW', 'LIGHTNING_BOLT', 'MATH_DIVIDE', 'MATH_EQUAL', 'MATH_MINUS', 'MATH_MULTIPLY', 'MATH_NOT_EQUAL', 'MATH_PLUS', 'MOON', 'NO_SMOKING', 'NOTCHED_RIGHT_ARROW', 'OCTAGON', 'PARALLELOGRAM', 'PENTAGON', 'PIE', 'PLAQUE', 'PLUS', 'QUAD_ARROW', 'QUAD_ARROW_CALLOUT', 'RIBBON', 'RIBBON_2', 'RIGHT_ARROW', 'RIGHT_ARROW_CALLOUT', 'RIGHT_BRACE', 'RIGHT_BRACKET', 'ROUND_1_RECTANGLE', 'ROUND_2_DIAGONAL_RECTANGLE', 'ROUND_2_SAME_RECTANGLE', 'RIGHT_TRIANGLE', 'SMILEY_FACE', 'SNIP_1_RECTANGLE', 'SNIP_2_DIAGONAL_RECTANGLE', 'SNIP_2_SAME_RECTANGLE', 'SNIP_ROUND_RECTANGLE', 'STAR_10', 'STAR_12', 'STAR_16', 'STAR_24', 'STAR_32', 'STAR_4', 'STAR_5', 'STAR_6', 'STAR_7', 'STAR_8', 'STRIPED_RIGHT_ARROW', 'SUN', 'TRAPEZOID', 'TRIANGLE', 'UP_ARROW', 'UP_ARROW_CALLOUT', 'UP_DOWN_ARROW', 'UTURN_ARROW', 'VERTICAL_SCROLL', 'WAVE', 'WEDGE_ELLIPSE_CALLOUT', 'WEDGE_RECTANGLE_CALLOUT', 'WEDGE_ROUND_RECTANGLE_CALLOUT', 'FLOW_CHART_ALTERNATE_PROCESS', 'FLOW_CHART_COLLATE', 'FLOW_CHART_CONNECTOR', 'FLOW_CHART_DECISION', 'FLOW_CHART_DELAY', 'FLOW_CHART_DISPLAY', 'FLOW_CHART_DOCUMENT', 'FLOW_CHART_EXTRACT', 'FLOW_CHART_INPUT_OUTPUT', 'FLOW_CHART_INTERNAL_STORAGE', 'FLOW_CHART_MAGNETIC_DISK', 'FLOW_CHART_MAGNETIC_DRUM', 'FLOW_CHART_MAGNETIC_TAPE', 'FLOW_CHART_MANUAL_INPUT', 'FLOW_CHART_MANUAL_OPERATION', 'FLOW_CHART_MERGE', 'FLOW_CHART_MULTIDOCUMENT', 'FLOW_CHART_OFFLINE_STORAGE', 'FLOW_CHART_OFFPAGE_CONNECTOR', 'FLOW_CHART_ONLINE_STORAGE', 'FLOW_CHART_OR', 'FLOW_CHART_PREDEFINED_PROCESS', 'FLOW_CHART_PREPARATION', 'FLOW_CHART_PROCESS', 'FLOW_CHART_PUNCHED_CARD', 'FLOW_CHART_PUNCHED_TAPE', 'FLOW_CHART_SORT', 'FLOW_CHART_SUMMING_JUNCTION', 'FLOW_CHART_TERMINATOR', 'ARROW_EAST', 'ARROW_NORTH_EAST', 'ARROW_NORTH', 'SPEECH', 'STARBURST', 'TEARDROP', 'ELLIPSE_RIBBON', 'ELLIPSE_RIBBON_2', 'CLOUD_CALLOUT', 'CUSTOM']):
            raise ValueError("must be one of enum values ('TYPE_UNSPECIFIED', 'TEXT_BOX', 'RECTANGLE', 'ROUND_RECTANGLE', 'ELLIPSE', 'ARC', 'BENT_ARROW', 'BENT_UP_ARROW', 'BEVEL', 'BLOCK_ARC', 'BRACE_PAIR', 'BRACKET_PAIR', 'CAN', 'CHEVRON', 'CHORD', 'CLOUD', 'CORNER', 'CUBE', 'CURVED_DOWN_ARROW', 'CURVED_LEFT_ARROW', 'CURVED_RIGHT_ARROW', 'CURVED_UP_ARROW', 'DECAGON', 'DIAGONAL_STRIPE', 'DIAMOND', 'DODECAGON', 'DONUT', 'DOUBLE_WAVE', 'DOWN_ARROW', 'DOWN_ARROW_CALLOUT', 'FOLDED_CORNER', 'FRAME', 'HALF_FRAME', 'HEART', 'HEPTAGON', 'HEXAGON', 'HOME_PLATE', 'HORIZONTAL_SCROLL', 'IRREGULAR_SEAL_1', 'IRREGULAR_SEAL_2', 'LEFT_ARROW', 'LEFT_ARROW_CALLOUT', 'LEFT_BRACE', 'LEFT_BRACKET', 'LEFT_RIGHT_ARROW', 'LEFT_RIGHT_ARROW_CALLOUT', 'LEFT_RIGHT_UP_ARROW', 'LEFT_UP_ARROW', 'LIGHTNING_BOLT', 'MATH_DIVIDE', 'MATH_EQUAL', 'MATH_MINUS', 'MATH_MULTIPLY', 'MATH_NOT_EQUAL', 'MATH_PLUS', 'MOON', 'NO_SMOKING', 'NOTCHED_RIGHT_ARROW', 'OCTAGON', 'PARALLELOGRAM', 'PENTAGON', 'PIE', 'PLAQUE', 'PLUS', 'QUAD_ARROW', 'QUAD_ARROW_CALLOUT', 'RIBBON', 'RIBBON_2', 'RIGHT_ARROW', 'RIGHT_ARROW_CALLOUT', 'RIGHT_BRACE', 'RIGHT_BRACKET', 'ROUND_1_RECTANGLE', 'ROUND_2_DIAGONAL_RECTANGLE', 'ROUND_2_SAME_RECTANGLE', 'RIGHT_TRIANGLE', 'SMILEY_FACE', 'SNIP_1_RECTANGLE', 'SNIP_2_DIAGONAL_RECTANGLE', 'SNIP_2_SAME_RECTANGLE', 'SNIP_ROUND_RECTANGLE', 'STAR_10', 'STAR_12', 'STAR_16', 'STAR_24', 'STAR_32', 'STAR_4', 'STAR_5', 'STAR_6', 'STAR_7', 'STAR_8', 'STRIPED_RIGHT_ARROW', 'SUN', 'TRAPEZOID', 'TRIANGLE', 'UP_ARROW', 'UP_ARROW_CALLOUT', 'UP_DOWN_ARROW', 'UTURN_ARROW', 'VERTICAL_SCROLL', 'WAVE', 'WEDGE_ELLIPSE_CALLOUT', 'WEDGE_RECTANGLE_CALLOUT', 'WEDGE_ROUND_RECTANGLE_CALLOUT', 'FLOW_CHART_ALTERNATE_PROCESS', 'FLOW_CHART_COLLATE', 'FLOW_CHART_CONNECTOR', 'FLOW_CHART_DECISION', 'FLOW_CHART_DELAY', 'FLOW_CHART_DISPLAY', 'FLOW_CHART_DOCUMENT', 'FLOW_CHART_EXTRACT', 'FLOW_CHART_INPUT_OUTPUT', 'FLOW_CHART_INTERNAL_STORAGE', 'FLOW_CHART_MAGNETIC_DISK', 'FLOW_CHART_MAGNETIC_DRUM', 'FLOW_CHART_MAGNETIC_TAPE', 'FLOW_CHART_MANUAL_INPUT', 'FLOW_CHART_MANUAL_OPERATION', 'FLOW_CHART_MERGE', 'FLOW_CHART_MULTIDOCUMENT', 'FLOW_CHART_OFFLINE_STORAGE', 'FLOW_CHART_OFFPAGE_CONNECTOR', 'FLOW_CHART_ONLINE_STORAGE', 'FLOW_CHART_OR', 'FLOW_CHART_PREDEFINED_PROCESS', 'FLOW_CHART_PREPARATION', 'FLOW_CHART_PROCESS', 'FLOW_CHART_PUNCHED_CARD', 'FLOW_CHART_PUNCHED_TAPE', 'FLOW_CHART_SORT', 'FLOW_CHART_SUMMING_JUNCTION', 'FLOW_CHART_TERMINATOR', 'ARROW_EAST', 'ARROW_NORTH_EAST', 'ARROW_NORTH', 'SPEECH', 'STARBURST', 'TEARDROP', 'ELLIPSE_RIBBON', 'ELLIPSE_RIBBON_2', 'CLOUD_CALLOUT', 'CUSTOM')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Shape from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of placeholder
        if self.placeholder:
            _dict['placeholder'] = self.placeholder.to_dict()
        # override the default output from pydantic by calling `to_dict()` of shape_properties
        if self.shape_properties:
            _dict['shapeProperties'] = self.shape_properties.to_dict()
        # override the default output from pydantic by calling `to_dict()` of text
        if self.text:
            _dict['text'] = self.text.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Shape from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "placeholder": Placeholder.from_dict(obj["placeholder"]) if obj.get("placeholder") is not None else None,
            "shapeProperties": ShapeProperties.from_dict(obj["shapeProperties"]) if obj.get("shapeProperties") is not None else None,
            "shapeType": obj.get("shapeType"),
            "text": TextContent.from_dict(obj["text"]) if obj.get("text") is not None else None
        })
        return _obj



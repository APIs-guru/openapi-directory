# coding: utf-8

"""
    Google Slides API

    Reads and writes Google Slides presentations.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.affine_transform import AffineTransform
from openapi_client.models.image import Image
from openapi_client.models.line import Line
from openapi_client.models.shape import Shape
from openapi_client.models.sheets_chart import SheetsChart
from openapi_client.models.size import Size
from openapi_client.models.table import Table
from openapi_client.models.video import Video
from openapi_client.models.word_art import WordArt
from typing import Optional, Set
from typing_extensions import Self

class PageElement(BaseModel):
    """
    A visual element rendered on a page.
    """ # noqa: E501
    description: Optional[StrictStr] = Field(default=None, description="The description of the page element. Combined with title to display alt text. The field is not supported for Group elements.")
    element_group: Optional[Group] = Field(default=None, alias="elementGroup")
    image: Optional[Image] = None
    line: Optional[Line] = None
    object_id: Optional[StrictStr] = Field(default=None, description="The object ID for this page element. Object IDs used by google.apps.slides.v1.Page and google.apps.slides.v1.PageElement share the same namespace.", alias="objectId")
    shape: Optional[Shape] = None
    sheets_chart: Optional[SheetsChart] = Field(default=None, alias="sheetsChart")
    size: Optional[Size] = None
    table: Optional[Table] = None
    title: Optional[StrictStr] = Field(default=None, description="The title of the page element. Combined with description to display alt text. The field is not supported for Group elements.")
    transform: Optional[AffineTransform] = None
    video: Optional[Video] = None
    word_art: Optional[WordArt] = Field(default=None, alias="wordArt")
    __properties: ClassVar[List[str]] = ["description", "elementGroup", "image", "line", "objectId", "shape", "sheetsChart", "size", "table", "title", "transform", "video", "wordArt"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PageElement from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of element_group
        if self.element_group:
            _dict['elementGroup'] = self.element_group.to_dict()
        # override the default output from pydantic by calling `to_dict()` of image
        if self.image:
            _dict['image'] = self.image.to_dict()
        # override the default output from pydantic by calling `to_dict()` of line
        if self.line:
            _dict['line'] = self.line.to_dict()
        # override the default output from pydantic by calling `to_dict()` of shape
        if self.shape:
            _dict['shape'] = self.shape.to_dict()
        # override the default output from pydantic by calling `to_dict()` of sheets_chart
        if self.sheets_chart:
            _dict['sheetsChart'] = self.sheets_chart.to_dict()
        # override the default output from pydantic by calling `to_dict()` of size
        if self.size:
            _dict['size'] = self.size.to_dict()
        # override the default output from pydantic by calling `to_dict()` of table
        if self.table:
            _dict['table'] = self.table.to_dict()
        # override the default output from pydantic by calling `to_dict()` of transform
        if self.transform:
            _dict['transform'] = self.transform.to_dict()
        # override the default output from pydantic by calling `to_dict()` of video
        if self.video:
            _dict['video'] = self.video.to_dict()
        # override the default output from pydantic by calling `to_dict()` of word_art
        if self.word_art:
            _dict['wordArt'] = self.word_art.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PageElement from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "description": obj.get("description"),
            "elementGroup": Group.from_dict(obj["elementGroup"]) if obj.get("elementGroup") is not None else None,
            "image": Image.from_dict(obj["image"]) if obj.get("image") is not None else None,
            "line": Line.from_dict(obj["line"]) if obj.get("line") is not None else None,
            "objectId": obj.get("objectId"),
            "shape": Shape.from_dict(obj["shape"]) if obj.get("shape") is not None else None,
            "sheetsChart": SheetsChart.from_dict(obj["sheetsChart"]) if obj.get("sheetsChart") is not None else None,
            "size": Size.from_dict(obj["size"]) if obj.get("size") is not None else None,
            "table": Table.from_dict(obj["table"]) if obj.get("table") is not None else None,
            "title": obj.get("title"),
            "transform": AffineTransform.from_dict(obj["transform"]) if obj.get("transform") is not None else None,
            "video": Video.from_dict(obj["video"]) if obj.get("video") is not None else None,
            "wordArt": WordArt.from_dict(obj["wordArt"]) if obj.get("wordArt") is not None else None
        })
        return _obj

from openapi_client.models.group import Group
# TODO: Rewrite to not use raise_errors
PageElement.model_rebuild(raise_errors=False)


# coding: utf-8

"""
    Google Slides API

    Reads and writes Google Slides presentations.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.range import Range
from openapi_client.models.table_cell_location import TableCellLocation
from typing import Optional, Set
from typing_extensions import Self

class DeleteParagraphBulletsRequest(BaseModel):
    """
    Deletes bullets from all of the paragraphs that overlap with the given text index range. The nesting level of each paragraph will be visually preserved by adding indent to the start of the corresponding paragraph.
    """ # noqa: E501
    cell_location: Optional[TableCellLocation] = Field(default=None, alias="cellLocation")
    object_id: Optional[StrictStr] = Field(default=None, description="The object ID of the shape or table containing the text to delete bullets from.", alias="objectId")
    text_range: Optional[Range] = Field(default=None, alias="textRange")
    __properties: ClassVar[List[str]] = ["cellLocation", "objectId", "textRange"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DeleteParagraphBulletsRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of cell_location
        if self.cell_location:
            _dict['cellLocation'] = self.cell_location.to_dict()
        # override the default output from pydantic by calling `to_dict()` of text_range
        if self.text_range:
            _dict['textRange'] = self.text_range.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DeleteParagraphBulletsRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "cellLocation": TableCellLocation.from_dict(obj["cellLocation"]) if obj.get("cellLocation") is not None else None,
            "objectId": obj.get("objectId"),
            "textRange": Range.from_dict(obj["textRange"]) if obj.get("textRange") is not None else None
        })
        return _obj



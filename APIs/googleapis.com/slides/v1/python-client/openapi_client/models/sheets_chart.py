# coding: utf-8

"""
    Google Slides API

    Reads and writes Google Slides presentations.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.sheets_chart_properties import SheetsChartProperties
from typing import Optional, Set
from typing_extensions import Self

class SheetsChart(BaseModel):
    """
    A PageElement kind representing a linked chart embedded from Google Sheets.
    """ # noqa: E501
    chart_id: Optional[StrictInt] = Field(default=None, description="The ID of the specific chart in the Google Sheets spreadsheet that is embedded.", alias="chartId")
    content_url: Optional[StrictStr] = Field(default=None, description="The URL of an image of the embedded chart, with a default lifetime of 30 minutes. This URL is tagged with the account of the requester. Anyone with the URL effectively accesses the image as the original requester. Access to the image may be lost if the presentation's sharing settings change.", alias="contentUrl")
    sheets_chart_properties: Optional[SheetsChartProperties] = Field(default=None, alias="sheetsChartProperties")
    spreadsheet_id: Optional[StrictStr] = Field(default=None, description="The ID of the Google Sheets spreadsheet that contains the source chart.", alias="spreadsheetId")
    __properties: ClassVar[List[str]] = ["chartId", "contentUrl", "sheetsChartProperties", "spreadsheetId"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SheetsChart from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of sheets_chart_properties
        if self.sheets_chart_properties:
            _dict['sheetsChartProperties'] = self.sheets_chart_properties.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SheetsChart from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "chartId": obj.get("chartId"),
            "contentUrl": obj.get("contentUrl"),
            "sheetsChartProperties": SheetsChartProperties.from_dict(obj["sheetsChartProperties"]) if obj.get("sheetsChartProperties") is not None else None,
            "spreadsheetId": obj.get("spreadsheetId")
        })
        return _obj



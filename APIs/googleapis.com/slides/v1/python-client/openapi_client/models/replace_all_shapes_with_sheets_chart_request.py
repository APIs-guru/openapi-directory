# coding: utf-8

"""
    Google Slides API

    Reads and writes Google Slides presentations.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.substring_match_criteria import SubstringMatchCriteria
from typing import Optional, Set
from typing_extensions import Self

class ReplaceAllShapesWithSheetsChartRequest(BaseModel):
    """
    Replaces all shapes that match the given criteria with the provided Google Sheets chart. The chart will be scaled and centered to fit within the bounds of the original shape. NOTE: Replacing shapes with a chart requires at least one of the spreadsheets.readonly, spreadsheets, drive.readonly, or drive OAuth scopes.
    """ # noqa: E501
    chart_id: Optional[StrictInt] = Field(default=None, description="The ID of the specific chart in the Google Sheets spreadsheet.", alias="chartId")
    contains_text: Optional[SubstringMatchCriteria] = Field(default=None, alias="containsText")
    linking_mode: Optional[StrictStr] = Field(default=None, description="The mode with which the chart is linked to the source spreadsheet. When not specified, the chart will be an image that is not linked.", alias="linkingMode")
    page_object_ids: Optional[List[StrictStr]] = Field(default=None, description="If non-empty, limits the matches to page elements only on the given pages. Returns a 400 bad request error if given the page object ID of a notes page or a notes master, or if a page with that object ID doesn't exist in the presentation.", alias="pageObjectIds")
    spreadsheet_id: Optional[StrictStr] = Field(default=None, description="The ID of the Google Sheets spreadsheet that contains the chart.", alias="spreadsheetId")
    __properties: ClassVar[List[str]] = ["chartId", "containsText", "linkingMode", "pageObjectIds", "spreadsheetId"]

    @field_validator('linking_mode')
    def linking_mode_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['NOT_LINKED_IMAGE', 'LINKED']):
            raise ValueError("must be one of enum values ('NOT_LINKED_IMAGE', 'LINKED')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ReplaceAllShapesWithSheetsChartRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of contains_text
        if self.contains_text:
            _dict['containsText'] = self.contains_text.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ReplaceAllShapesWithSheetsChartRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "chartId": obj.get("chartId"),
            "containsText": SubstringMatchCriteria.from_dict(obj["containsText"]) if obj.get("containsText") is not None else None,
            "linkingMode": obj.get("linkingMode"),
            "pageObjectIds": obj.get("pageObjectIds"),
            "spreadsheetId": obj.get("spreadsheetId")
        })
        return _obj



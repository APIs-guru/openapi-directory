# coding: utf-8

"""
    Google Slides API

    Reads and writes Google Slides presentations.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.page import Page
from openapi_client.models.size import Size
from typing import Optional, Set
from typing_extensions import Self

class Presentation(BaseModel):
    """
    A Google Slides presentation.
    """ # noqa: E501
    layouts: Optional[List[Page]] = Field(default=None, description="The layouts in the presentation. A layout is a template that determines how content is arranged and styled on the slides that inherit from that layout.")
    locale: Optional[StrictStr] = Field(default=None, description="The locale of the presentation, as an IETF BCP 47 language tag.")
    masters: Optional[List[Page]] = Field(default=None, description="The slide masters in the presentation. A slide master contains all common page elements and the common properties for a set of layouts. They serve three purposes: - Placeholder shapes on a master contain the default text styles and shape properties of all placeholder shapes on pages that use that master. - The master page properties define the common page properties inherited by its layouts. - Any other shapes on the master slide appear on all slides using that master, regardless of their layout.")
    notes_master: Optional[Page] = Field(default=None, alias="notesMaster")
    page_size: Optional[Size] = Field(default=None, alias="pageSize")
    presentation_id: Optional[StrictStr] = Field(default=None, description="The ID of the presentation.", alias="presentationId")
    revision_id: Optional[StrictStr] = Field(default=None, description="Output only. The revision ID of the presentation. Can be used in update requests to assert the presentation revision hasn't changed since the last read operation. Only populated if the user has edit access to the presentation. The revision ID is not a sequential number but a nebulous string. The format of the revision ID may change over time, so it should be treated opaquely. A returned revision ID is only guaranteed to be valid for 24 hours after it has been returned and cannot be shared across users. If the revision ID is unchanged between calls, then the presentation has not changed. Conversely, a changed ID (for the same presentation and user) usually means the presentation has been updated. However, a changed ID can also be due to internal factors such as ID format changes.", alias="revisionId")
    slides: Optional[List[Page]] = Field(default=None, description="The slides in the presentation. A slide inherits properties from a slide layout.")
    title: Optional[StrictStr] = Field(default=None, description="The title of the presentation.")
    __properties: ClassVar[List[str]] = ["layouts", "locale", "masters", "notesMaster", "pageSize", "presentationId", "revisionId", "slides", "title"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Presentation from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in layouts (list)
        _items = []
        if self.layouts:
            for _item_layouts in self.layouts:
                if _item_layouts:
                    _items.append(_item_layouts.to_dict())
            _dict['layouts'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in masters (list)
        _items = []
        if self.masters:
            for _item_masters in self.masters:
                if _item_masters:
                    _items.append(_item_masters.to_dict())
            _dict['masters'] = _items
        # override the default output from pydantic by calling `to_dict()` of notes_master
        if self.notes_master:
            _dict['notesMaster'] = self.notes_master.to_dict()
        # override the default output from pydantic by calling `to_dict()` of page_size
        if self.page_size:
            _dict['pageSize'] = self.page_size.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in slides (list)
        _items = []
        if self.slides:
            for _item_slides in self.slides:
                if _item_slides:
                    _items.append(_item_slides.to_dict())
            _dict['slides'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Presentation from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "layouts": [Page.from_dict(_item) for _item in obj["layouts"]] if obj.get("layouts") is not None else None,
            "locale": obj.get("locale"),
            "masters": [Page.from_dict(_item) for _item in obj["masters"]] if obj.get("masters") is not None else None,
            "notesMaster": Page.from_dict(obj["notesMaster"]) if obj.get("notesMaster") is not None else None,
            "pageSize": Size.from_dict(obj["pageSize"]) if obj.get("pageSize") is not None else None,
            "presentationId": obj.get("presentationId"),
            "revisionId": obj.get("revisionId"),
            "slides": [Page.from_dict(_item) for _item in obj["slides"]] if obj.get("slides") is not None else None,
            "title": obj.get("title")
        })
        return _obj



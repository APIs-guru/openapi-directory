# coding: utf-8

"""
    Google Slides API

    Reads and writes Google Slides presentations.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.autofit import Autofit
from openapi_client.models.link import Link
from openapi_client.models.outline import Outline
from openapi_client.models.shadow import Shadow
from openapi_client.models.shape_background_fill import ShapeBackgroundFill
from typing import Optional, Set
from typing_extensions import Self

class ShapeProperties(BaseModel):
    """
    The properties of a Shape. If the shape is a placeholder shape as determined by the placeholder field, then these properties may be inherited from a parent placeholder shape. Determining the rendered value of the property depends on the corresponding property_state field value. Any text autofit settings on the shape are automatically deactivated by requests that can impact how text fits in the shape.
    """ # noqa: E501
    autofit: Optional[Autofit] = None
    content_alignment: Optional[StrictStr] = Field(default=None, description="The alignment of the content in the shape. If unspecified, the alignment is inherited from a parent placeholder if it exists. If the shape has no parent, the default alignment matches the alignment for new shapes created in the Slides editor.", alias="contentAlignment")
    link: Optional[Link] = None
    outline: Optional[Outline] = None
    shadow: Optional[Shadow] = None
    shape_background_fill: Optional[ShapeBackgroundFill] = Field(default=None, alias="shapeBackgroundFill")
    __properties: ClassVar[List[str]] = ["autofit", "contentAlignment", "link", "outline", "shadow", "shapeBackgroundFill"]

    @field_validator('content_alignment')
    def content_alignment_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['CONTENT_ALIGNMENT_UNSPECIFIED', 'CONTENT_ALIGNMENT_UNSUPPORTED', 'TOP', 'MIDDLE', 'BOTTOM']):
            raise ValueError("must be one of enum values ('CONTENT_ALIGNMENT_UNSPECIFIED', 'CONTENT_ALIGNMENT_UNSUPPORTED', 'TOP', 'MIDDLE', 'BOTTOM')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ShapeProperties from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of autofit
        if self.autofit:
            _dict['autofit'] = self.autofit.to_dict()
        # override the default output from pydantic by calling `to_dict()` of link
        if self.link:
            _dict['link'] = self.link.to_dict()
        # override the default output from pydantic by calling `to_dict()` of outline
        if self.outline:
            _dict['outline'] = self.outline.to_dict()
        # override the default output from pydantic by calling `to_dict()` of shadow
        if self.shadow:
            _dict['shadow'] = self.shadow.to_dict()
        # override the default output from pydantic by calling `to_dict()` of shape_background_fill
        if self.shape_background_fill:
            _dict['shapeBackgroundFill'] = self.shape_background_fill.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ShapeProperties from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "autofit": Autofit.from_dict(obj["autofit"]) if obj.get("autofit") is not None else None,
            "contentAlignment": obj.get("contentAlignment"),
            "link": Link.from_dict(obj["link"]) if obj.get("link") is not None else None,
            "outline": Outline.from_dict(obj["outline"]) if obj.get("outline") is not None else None,
            "shadow": Shadow.from_dict(obj["shadow"]) if obj.get("shadow") is not None else None,
            "shapeBackgroundFill": ShapeBackgroundFill.from_dict(obj["shapeBackgroundFill"]) if obj.get("shapeBackgroundFill") is not None else None
        })
        return _obj



# coding: utf-8

"""
    Google Slides API

    Reads and writes Google Slides presentations.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.dimension import Dimension
from openapi_client.models.outline_fill import OutlineFill
from typing import Optional, Set
from typing_extensions import Self

class Outline(BaseModel):
    """
    The outline of a PageElement. If these fields are unset, they may be inherited from a parent placeholder if it exists. If there is no parent, the fields will default to the value used for new page elements created in the Slides editor, which may depend on the page element kind.
    """ # noqa: E501
    dash_style: Optional[StrictStr] = Field(default=None, description="The dash style of the outline.", alias="dashStyle")
    outline_fill: Optional[OutlineFill] = Field(default=None, alias="outlineFill")
    property_state: Optional[StrictStr] = Field(default=None, description="The outline property state. Updating the outline on a page element will implicitly update this field to `RENDERED`, unless another value is specified in the same request. To have no outline on a page element, set this field to `NOT_RENDERED`. In this case, any other outline fields set in the same request will be ignored.", alias="propertyState")
    weight: Optional[Dimension] = None
    __properties: ClassVar[List[str]] = ["dashStyle", "outlineFill", "propertyState", "weight"]

    @field_validator('dash_style')
    def dash_style_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['DASH_STYLE_UNSPECIFIED', 'SOLID', 'DOT', 'DASH', 'DASH_DOT', 'LONG_DASH', 'LONG_DASH_DOT']):
            raise ValueError("must be one of enum values ('DASH_STYLE_UNSPECIFIED', 'SOLID', 'DOT', 'DASH', 'DASH_DOT', 'LONG_DASH', 'LONG_DASH_DOT')")
        return value

    @field_validator('property_state')
    def property_state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['RENDERED', 'NOT_RENDERED', 'INHERIT']):
            raise ValueError("must be one of enum values ('RENDERED', 'NOT_RENDERED', 'INHERIT')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Outline from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of outline_fill
        if self.outline_fill:
            _dict['outlineFill'] = self.outline_fill.to_dict()
        # override the default output from pydantic by calling `to_dict()` of weight
        if self.weight:
            _dict['weight'] = self.weight.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Outline from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "dashStyle": obj.get("dashStyle"),
            "outlineFill": OutlineFill.from_dict(obj["outlineFill"]) if obj.get("outlineFill") is not None else None,
            "propertyState": obj.get("propertyState"),
            "weight": Dimension.from_dict(obj["weight"]) if obj.get("weight") is not None else None
        })
        return _obj



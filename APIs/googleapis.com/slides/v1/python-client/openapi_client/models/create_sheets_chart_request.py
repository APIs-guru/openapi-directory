# coding: utf-8

"""
    Google Slides API

    Reads and writes Google Slides presentations.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.page_element_properties import PageElementProperties
from typing import Optional, Set
from typing_extensions import Self

class CreateSheetsChartRequest(BaseModel):
    """
    Creates an embedded Google Sheets chart. NOTE: Chart creation requires at least one of the spreadsheets.readonly, spreadsheets, drive.readonly, drive.file, or drive OAuth scopes.
    """ # noqa: E501
    chart_id: Optional[StrictInt] = Field(default=None, description="The ID of the specific chart in the Google Sheets spreadsheet.", alias="chartId")
    element_properties: Optional[PageElementProperties] = Field(default=None, alias="elementProperties")
    linking_mode: Optional[StrictStr] = Field(default=None, description="The mode with which the chart is linked to the source spreadsheet. When not specified, the chart will be an image that is not linked.", alias="linkingMode")
    object_id: Optional[StrictStr] = Field(default=None, description="A user-supplied object ID. If specified, the ID must be unique among all pages and page elements in the presentation. The ID should start with a word character [a-zA-Z0-9_] and then followed by any number of the following characters [a-zA-Z0-9_-:]. The length of the ID should not be less than 5 or greater than 50. If empty, a unique identifier will be generated.", alias="objectId")
    spreadsheet_id: Optional[StrictStr] = Field(default=None, description="The ID of the Google Sheets spreadsheet that contains the chart. You might need to add a resource key to the HTTP header for a subset of old files. For more information, see [Access link-shared files using resource keys](https://developers.google.com/drive/api/v3/resource-keys).", alias="spreadsheetId")
    __properties: ClassVar[List[str]] = ["chartId", "elementProperties", "linkingMode", "objectId", "spreadsheetId"]

    @field_validator('linking_mode')
    def linking_mode_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['NOT_LINKED_IMAGE', 'LINKED']):
            raise ValueError("must be one of enum values ('NOT_LINKED_IMAGE', 'LINKED')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CreateSheetsChartRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of element_properties
        if self.element_properties:
            _dict['elementProperties'] = self.element_properties.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CreateSheetsChartRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "chartId": obj.get("chartId"),
            "elementProperties": PageElementProperties.from_dict(obj["elementProperties"]) if obj.get("elementProperties") is not None else None,
            "linkingMode": obj.get("linkingMode"),
            "objectId": obj.get("objectId"),
            "spreadsheetId": obj.get("spreadsheetId")
        })
        return _obj



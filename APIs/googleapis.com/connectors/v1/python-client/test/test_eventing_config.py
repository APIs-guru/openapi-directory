# coding: utf-8

"""
    Connectors API

    Enables users to create and manage connections to Google Cloud services and third-party business applications using the Connectors interface.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.eventing_config import EventingConfig

class TestEventingConfig(unittest.TestCase):
    """EventingConfig unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> EventingConfig:
        """Test EventingConfig
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `EventingConfig`
        """
        model = EventingConfig()
        if include_optional:
            return EventingConfig(
                additional_variables = [
                    openapi_client.models.config_variable.ConfigVariable(
                        bool_value = True, 
                        encryption_key_value = openapi_client.models.encryption_key.EncryptionKey(
                            kms_key_name = '', 
                            type = 'TYPE_UNSPECIFIED', ), 
                        int_value = '', 
                        key = '', 
                        secret_value = openapi_client.models.secret.Secret(
                            secret_version = '', ), 
                        string_value = '', )
                    ],
                auth_config = openapi_client.models.auth_config.AuthConfig(
                    additional_variables = [
                        openapi_client.models.config_variable.ConfigVariable(
                            bool_value = True, 
                            encryption_key_value = openapi_client.models.encryption_key.EncryptionKey(
                                kms_key_name = '', 
                                type = 'TYPE_UNSPECIFIED', ), 
                            int_value = '', 
                            key = '', 
                            secret_value = openapi_client.models.secret.Secret(
                                secret_version = '', ), 
                            string_value = '', )
                        ], 
                    auth_key = '', 
                    auth_type = 'AUTH_TYPE_UNSPECIFIED', 
                    oauth2_auth_code_flow = openapi_client.models.oauth2_auth_code_flow.Oauth2AuthCodeFlow(
                        auth_code = '', 
                        auth_uri = '', 
                        client_id = '', 
                        client_secret = openapi_client.models.secret.Secret(
                            secret_version = '', ), 
                        enable_pkce = True, 
                        pkce_verifier = '', 
                        redirect_uri = '', 
                        scopes = [
                            ''
                            ], ), 
                    oauth2_client_credentials = openapi_client.models.oauth2_client_credentials.Oauth2ClientCredentials(
                        client_id = '', ), 
                    oauth2_jwt_bearer = openapi_client.models.oauth2_jwt_bearer.Oauth2JwtBearer(
                        client_key = , 
                        jwt_claims = openapi_client.models.jwt_claims.JwtClaims(
                            audience = '', 
                            issuer = '', 
                            subject = '', ), ), 
                    ssh_public_key = openapi_client.models.ssh_public_key.SshPublicKey(
                        cert_type = '', 
                        ssh_client_cert = , 
                        ssh_client_cert_pass = , 
                        username = '', ), 
                    user_password = openapi_client.models.user_password.UserPassword(
                        password = , 
                        username = '', ), ),
                dead_letter_config = openapi_client.models.dead_letter_config.DeadLetterConfig(
                    project_id = '', 
                    topic = '', ),
                enrichment_enabled = True,
                events_listener_ingress_endpoint = '',
                listener_auth_config = openapi_client.models.auth_config.AuthConfig(
                    additional_variables = [
                        openapi_client.models.config_variable.ConfigVariable(
                            bool_value = True, 
                            encryption_key_value = openapi_client.models.encryption_key.EncryptionKey(
                                kms_key_name = '', 
                                type = 'TYPE_UNSPECIFIED', ), 
                            int_value = '', 
                            key = '', 
                            secret_value = openapi_client.models.secret.Secret(
                                secret_version = '', ), 
                            string_value = '', )
                        ], 
                    auth_key = '', 
                    auth_type = 'AUTH_TYPE_UNSPECIFIED', 
                    oauth2_auth_code_flow = openapi_client.models.oauth2_auth_code_flow.Oauth2AuthCodeFlow(
                        auth_code = '', 
                        auth_uri = '', 
                        client_id = '', 
                        client_secret = openapi_client.models.secret.Secret(
                            secret_version = '', ), 
                        enable_pkce = True, 
                        pkce_verifier = '', 
                        redirect_uri = '', 
                        scopes = [
                            ''
                            ], ), 
                    oauth2_client_credentials = openapi_client.models.oauth2_client_credentials.Oauth2ClientCredentials(
                        client_id = '', ), 
                    oauth2_jwt_bearer = openapi_client.models.oauth2_jwt_bearer.Oauth2JwtBearer(
                        client_key = , 
                        jwt_claims = openapi_client.models.jwt_claims.JwtClaims(
                            audience = '', 
                            issuer = '', 
                            subject = '', ), ), 
                    ssh_public_key = openapi_client.models.ssh_public_key.SshPublicKey(
                        cert_type = '', 
                        ssh_client_cert = , 
                        ssh_client_cert_pass = , 
                        username = '', ), 
                    user_password = openapi_client.models.user_password.UserPassword(
                        password = , 
                        username = '', ), ),
                private_connectivity_enabled = True,
                proxy_destination_config = openapi_client.models.destination_config.DestinationConfig(
                    destinations = [
                        openapi_client.models.destination.Destination(
                            host = '', 
                            port = 56, 
                            service_attachment = '', )
                        ], 
                    key = '', ),
                registration_destination_config = openapi_client.models.destination_config.DestinationConfig(
                    destinations = [
                        openapi_client.models.destination.Destination(
                            host = '', 
                            port = 56, 
                            service_attachment = '', )
                        ], 
                    key = '', ),
                trigger_config_variables = [
                    openapi_client.models.config_variable.ConfigVariable(
                        bool_value = True, 
                        encryption_key_value = openapi_client.models.encryption_key.EncryptionKey(
                            kms_key_name = '', 
                            type = 'TYPE_UNSPECIFIED', ), 
                        int_value = '', 
                        key = '', 
                        secret_value = openapi_client.models.secret.Secret(
                            secret_version = '', ), 
                        string_value = '', )
                    ]
            )
        else:
            return EventingConfig(
        )
        """

    def testEventingConfig(self):
        """Test EventingConfig"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

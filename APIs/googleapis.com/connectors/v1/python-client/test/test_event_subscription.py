# coding: utf-8

"""
    Connectors API

    Enables users to create and manage connections to Google Cloud services and third-party business applications using the Connectors interface.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.event_subscription import EventSubscription

class TestEventSubscription(unittest.TestCase):
    """EventSubscription unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> EventSubscription:
        """Test EventSubscription
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `EventSubscription`
        """
        model = EventSubscription()
        if include_optional:
            return EventSubscription(
                create_time = '',
                destinations = openapi_client.models.event_subscription_destination.EventSubscriptionDestination(
                    endpoint = openapi_client.models.end_point.EndPoint(
                        endpoint_uri = '', 
                        headers = [
                            openapi_client.models.header.Header(
                                key = '', 
                                value = '', )
                            ], ), 
                    service_account = '', 
                    type = 'TYPE_UNSPECIFIED', ),
                event_type_id = '',
                jms = openapi_client.models.jms.JMS(
                    name = '', 
                    type = 'TYPE_UNSPECIFIED', ),
                name = '',
                status = openapi_client.models.event_subscription_status.EventSubscriptionStatus(
                    description = '', 
                    state = 'STATE_UNSPECIFIED', ),
                subscriber = '',
                subscriber_link = '',
                update_time = ''
            )
        else:
            return EventSubscription(
        )
        """

    def testEventSubscription(self):
        """Test EventSubscription"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

# coding: utf-8

"""
    Connectors API

    Enables users to create and manage connections to Google Cloud services and third-party business applications using the Connectors interface.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.auth_config import AuthConfig

class TestAuthConfig(unittest.TestCase):
    """AuthConfig unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> AuthConfig:
        """Test AuthConfig
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `AuthConfig`
        """
        model = AuthConfig()
        if include_optional:
            return AuthConfig(
                additional_variables = [
                    openapi_client.models.config_variable.ConfigVariable(
                        bool_value = True, 
                        encryption_key_value = openapi_client.models.encryption_key.EncryptionKey(
                            kms_key_name = '', 
                            type = 'TYPE_UNSPECIFIED', ), 
                        int_value = '', 
                        key = '', 
                        secret_value = openapi_client.models.secret.Secret(
                            secret_version = '', ), 
                        string_value = '', )
                    ],
                auth_key = '',
                auth_type = 'AUTH_TYPE_UNSPECIFIED',
                oauth2_auth_code_flow = openapi_client.models.oauth2_auth_code_flow.Oauth2AuthCodeFlow(
                    auth_code = '', 
                    auth_uri = '', 
                    client_id = '', 
                    client_secret = openapi_client.models.secret.Secret(
                        secret_version = '', ), 
                    enable_pkce = True, 
                    pkce_verifier = '', 
                    redirect_uri = '', 
                    scopes = [
                        ''
                        ], ),
                oauth2_client_credentials = openapi_client.models.oauth2_client_credentials.Oauth2ClientCredentials(
                    client_id = '', 
                    client_secret = openapi_client.models.secret.Secret(
                        secret_version = '', ), ),
                oauth2_jwt_bearer = openapi_client.models.oauth2_jwt_bearer.Oauth2JwtBearer(
                    client_key = openapi_client.models.secret.Secret(
                        secret_version = '', ), 
                    jwt_claims = openapi_client.models.jwt_claims.JwtClaims(
                        audience = '', 
                        issuer = '', 
                        subject = '', ), ),
                ssh_public_key = openapi_client.models.ssh_public_key.SshPublicKey(
                    cert_type = '', 
                    ssh_client_cert = openapi_client.models.secret.Secret(
                        secret_version = '', ), 
                    ssh_client_cert_pass = openapi_client.models.secret.Secret(
                        secret_version = '', ), 
                    username = '', ),
                user_password = openapi_client.models.user_password.UserPassword(
                    password = openapi_client.models.secret.Secret(
                        secret_version = '', ), 
                    username = '', )
            )
        else:
            return AuthConfig(
        )
        """

    def testAuthConfig(self):
        """Test AuthConfig"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

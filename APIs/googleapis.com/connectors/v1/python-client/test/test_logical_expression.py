# coding: utf-8

"""
    Connectors API

    Enables users to create and manage connections to Google Cloud services and third-party business applications using the Connectors interface.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.logical_expression import LogicalExpression

class TestLogicalExpression(unittest.TestCase):
    """LogicalExpression unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> LogicalExpression:
        """Test LogicalExpression
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `LogicalExpression`
        """
        model = LogicalExpression()
        if include_optional:
            return LogicalExpression(
                field_comparisons = [
                    openapi_client.models.field_comparison.FieldComparison(
                        bool_value = True, 
                        comparator = 'COMPARATOR_UNSPECIFIED', 
                        int_value = '', 
                        key = '', 
                        string_value = '', )
                    ],
                logical_expressions = [
                    openapi_client.models.logical_expression.LogicalExpression(
                        field_comparisons = [
                            openapi_client.models.field_comparison.FieldComparison(
                                bool_value = True, 
                                comparator = 'COMPARATOR_UNSPECIFIED', 
                                int_value = '', 
                                key = '', 
                                string_value = '', )
                            ], 
                        logical_operator = 'OPERATOR_UNSPECIFIED', )
                    ],
                logical_operator = 'OPERATOR_UNSPECIFIED'
            )
        else:
            return LogicalExpression(
        )
        """

    def testLogicalExpression(self):
        """Test LogicalExpression"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

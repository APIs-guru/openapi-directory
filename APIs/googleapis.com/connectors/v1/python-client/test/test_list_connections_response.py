# coding: utf-8

"""
    Connectors API

    Enables users to create and manage connections to Google Cloud services and third-party business applications using the Connectors interface.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.list_connections_response import ListConnectionsResponse

class TestListConnectionsResponse(unittest.TestCase):
    """ListConnectionsResponse unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> ListConnectionsResponse:
        """Test ListConnectionsResponse
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `ListConnectionsResponse`
        """
        model = ListConnectionsResponse()
        if include_optional:
            return ListConnectionsResponse(
                connections = [
                    openapi_client.models.connection.Connection(
                        auth_config = openapi_client.models.auth_config.AuthConfig(
                            additional_variables = [
                                openapi_client.models.config_variable.ConfigVariable(
                                    bool_value = True, 
                                    encryption_key_value = openapi_client.models.encryption_key.EncryptionKey(
                                        kms_key_name = '', 
                                        type = 'TYPE_UNSPECIFIED', ), 
                                    int_value = '', 
                                    key = '', 
                                    secret_value = openapi_client.models.secret.Secret(
                                        secret_version = '', ), 
                                    string_value = '', )
                                ], 
                            auth_key = '', 
                            auth_type = 'AUTH_TYPE_UNSPECIFIED', 
                            oauth2_auth_code_flow = openapi_client.models.oauth2_auth_code_flow.Oauth2AuthCodeFlow(
                                auth_code = '', 
                                auth_uri = '', 
                                client_id = '', 
                                client_secret = openapi_client.models.secret.Secret(
                                    secret_version = '', ), 
                                enable_pkce = True, 
                                pkce_verifier = '', 
                                redirect_uri = '', 
                                scopes = [
                                    ''
                                    ], ), 
                            oauth2_client_credentials = openapi_client.models.oauth2_client_credentials.Oauth2ClientCredentials(
                                client_id = '', ), 
                            oauth2_jwt_bearer = openapi_client.models.oauth2_jwt_bearer.Oauth2JwtBearer(
                                client_key = , 
                                jwt_claims = openapi_client.models.jwt_claims.JwtClaims(
                                    audience = '', 
                                    issuer = '', 
                                    subject = '', ), ), 
                            ssh_public_key = openapi_client.models.ssh_public_key.SshPublicKey(
                                cert_type = '', 
                                ssh_client_cert = , 
                                ssh_client_cert_pass = , 
                                username = '', ), 
                            user_password = openapi_client.models.user_password.UserPassword(
                                password = , 
                                username = '', ), ), 
                        config_variables = [
                            openapi_client.models.config_variable.ConfigVariable(
                                bool_value = True, 
                                int_value = '', 
                                key = '', 
                                string_value = '', )
                            ], 
                        connection_revision = '', 
                        connector_version = '', 
                        connector_version_infra_config = openapi_client.models.connector_version_infra_config.ConnectorVersionInfraConfig(
                            connection_ratelimit_window_seconds = '', 
                            deployment_model = 'DEPLOYMENT_MODEL_UNSPECIFIED', 
                            hpa_config = openapi_client.models.hpa_config.HPAConfig(
                                cpu_utilization_threshold = '', 
                                memory_utilization_threshold = '', ), 
                            internalclient_ratelimit_threshold = '', 
                            ratelimit_threshold = '', 
                            resource_limits = openapi_client.models.resource_limits.ResourceLimits(
                                cpu = '', 
                                memory = '', ), 
                            resource_requests = openapi_client.models.resource_requests.ResourceRequests(
                                cpu = '', 
                                memory = '', ), 
                            shared_deployment = '', ), 
                        connector_version_launch_stage = 'LAUNCH_STAGE_UNSPECIFIED', 
                        create_time = '', 
                        description = '', 
                        destination_configs = [
                            openapi_client.models.destination_config.DestinationConfig(
                                destinations = [
                                    openapi_client.models.destination.Destination(
                                        host = '', 
                                        port = 56, 
                                        service_attachment = '', )
                                    ], 
                                key = '', )
                            ], 
                        envoy_image_location = '', 
                        eventing_config = openapi_client.models.eventing_config.EventingConfig(
                            dead_letter_config = openapi_client.models.dead_letter_config.DeadLetterConfig(
                                project_id = '', 
                                topic = '', ), 
                            enrichment_enabled = True, 
                            events_listener_ingress_endpoint = '', 
                            listener_auth_config = openapi_client.models.auth_config.AuthConfig(
                                auth_key = '', 
                                auth_type = 'AUTH_TYPE_UNSPECIFIED', ), 
                            private_connectivity_enabled = True, 
                            proxy_destination_config = openapi_client.models.destination_config.DestinationConfig(
                                key = '', ), 
                            registration_destination_config = , 
                            trigger_config_variables = [
                                
                                ], ), 
                        eventing_enablement_type = 'EVENTING_ENABLEMENT_TYPE_UNSPECIFIED', 
                        eventing_runtime_data = openapi_client.models.eventing_runtime_data.EventingRuntimeData(
                            events_listener_endpoint = '', 
                            events_listener_psc_sa = '', 
                            status = openapi_client.models.eventing_status.EventingStatus(
                                description = '', 
                                state = 'STATE_UNSPECIFIED', ), ), 
                        image_location = '', 
                        is_trusted_tester = True, 
                        labels = {
                            'key' : ''
                            }, 
                        lock_config = openapi_client.models.lock_config.LockConfig(
                            locked = True, 
                            reason = '', ), 
                        log_config = openapi_client.models.connectors_log_config.ConnectorsLogConfig(
                            enabled = True, ), 
                        name = '', 
                        node_config = openapi_client.models.node_config.NodeConfig(
                            max_node_count = 56, 
                            min_node_count = 56, ), 
                        service_account = '', 
                        service_directory = '', 
                        ssl_config = openapi_client.models.ssl_config.SslConfig(
                            client_cert_type = 'CERT_TYPE_UNSPECIFIED', 
                            client_certificate = , 
                            client_private_key = , 
                            client_private_key_pass = , 
                            private_server_certificate = , 
                            server_cert_type = 'CERT_TYPE_UNSPECIFIED', 
                            trust_model = 'PUBLIC', 
                            type = 'SSL_TYPE_UNSPECIFIED', 
                            use_ssl = True, ), 
                        status = openapi_client.models.connection_status.ConnectionStatus(
                            description = '', 
                            state = 'STATE_UNSPECIFIED', ), 
                        subscription_type = 'SUBSCRIPTION_TYPE_UNSPECIFIED', 
                        suspended = True, 
                        update_time = '', )
                    ],
                next_page_token = '',
                unreachable = [
                    ''
                    ]
            )
        else:
            return ListConnectionsResponse(
        )
        """

    def testListConnectionsResponse(self):
        """Test ListConnectionsResponse"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

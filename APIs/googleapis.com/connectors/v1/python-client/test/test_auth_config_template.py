# coding: utf-8

"""
    Connectors API

    Enables users to create and manage connections to Google Cloud services and third-party business applications using the Connectors interface.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.auth_config_template import AuthConfigTemplate

class TestAuthConfigTemplate(unittest.TestCase):
    """AuthConfigTemplate unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> AuthConfigTemplate:
        """Test AuthConfigTemplate
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `AuthConfigTemplate`
        """
        model = AuthConfigTemplate()
        if include_optional:
            return AuthConfigTemplate(
                auth_key = '',
                auth_type = 'AUTH_TYPE_UNSPECIFIED',
                config_variable_templates = [
                    openapi_client.models.config_variable_template.ConfigVariableTemplate(
                        authorization_code_link = openapi_client.models.authorization_code_link.AuthorizationCodeLink(
                            client_id = '', 
                            enable_pkce = True, 
                            scopes = [
                                ''
                                ], 
                            uri = '', ), 
                        description = '', 
                        display_name = '', 
                        enum_options = [
                            openapi_client.models.enum_option.EnumOption(
                                display_name = '', 
                                id = '', )
                            ], 
                        is_advanced = True, 
                        key = '', 
                        location_type = 'LOCATION_TYPE_UNSPECIFIED', 
                        required = True, 
                        required_condition = openapi_client.models.logical_expression.LogicalExpression(
                            field_comparisons = [
                                openapi_client.models.field_comparison.FieldComparison(
                                    bool_value = True, 
                                    comparator = 'COMPARATOR_UNSPECIFIED', 
                                    int_value = '', 
                                    key = '', 
                                    string_value = '', )
                                ], 
                            logical_expressions = [
                                openapi_client.models.logical_expression.LogicalExpression(
                                    logical_operator = 'OPERATOR_UNSPECIFIED', )
                                ], 
                            logical_operator = 'OPERATOR_UNSPECIFIED', ), 
                        role_grant = openapi_client.models.role_grant.RoleGrant(
                            helper_text_template = '', 
                            principal = 'PRINCIPAL_UNSPECIFIED', 
                            resource = openapi_client.models.resource.Resource(
                                path_template = '', 
                                type = 'TYPE_UNSPECIFIED', ), 
                            roles = [
                                ''
                                ], ), 
                        state = 'STATE_UNSPECIFIED', 
                        validation_regex = '', 
                        value_type = 'VALUE_TYPE_UNSPECIFIED', )
                    ],
                description = '',
                display_name = ''
            )
        else:
            return AuthConfigTemplate(
        )
        """

    def testAuthConfigTemplate(self):
        """Test AuthConfigTemplate"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

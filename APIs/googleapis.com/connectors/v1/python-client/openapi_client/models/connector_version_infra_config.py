# coding: utf-8

"""
    Connectors API

    Enables users to create and manage connections to Google Cloud services and third-party business applications using the Connectors interface.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.hpa_config import HPAConfig
from openapi_client.models.resource_limits import ResourceLimits
from openapi_client.models.resource_requests import ResourceRequests
from typing import Optional, Set
from typing_extensions import Self

class ConnectorVersionInfraConfig(BaseModel):
    """
    This cofiguration provides infra configs like rate limit threshold which need to be configurable for every connector version
    """ # noqa: E501
    connection_ratelimit_window_seconds: Optional[StrictStr] = Field(default=None, description="Output only. The window used for ratelimiting runtime requests to connections.", alias="connectionRatelimitWindowSeconds")
    deployment_model: Optional[StrictStr] = Field(default=None, description="Optional. Indicates whether connector is deployed on GKE/CloudRun", alias="deploymentModel")
    hpa_config: Optional[HPAConfig] = Field(default=None, alias="hpaConfig")
    internalclient_ratelimit_threshold: Optional[StrictStr] = Field(default=None, description="Output only. Max QPS supported for internal requests originating from Connd.", alias="internalclientRatelimitThreshold")
    ratelimit_threshold: Optional[StrictStr] = Field(default=None, description="Output only. Max QPS supported by the connector version before throttling of requests.", alias="ratelimitThreshold")
    resource_limits: Optional[ResourceLimits] = Field(default=None, alias="resourceLimits")
    resource_requests: Optional[ResourceRequests] = Field(default=None, alias="resourceRequests")
    shared_deployment: Optional[StrictStr] = Field(default=None, description="Output only. The name of shared connector deployment.", alias="sharedDeployment")
    __properties: ClassVar[List[str]] = ["connectionRatelimitWindowSeconds", "deploymentModel", "hpaConfig", "internalclientRatelimitThreshold", "ratelimitThreshold", "resourceLimits", "resourceRequests", "sharedDeployment"]

    @field_validator('deployment_model')
    def deployment_model_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['DEPLOYMENT_MODEL_UNSPECIFIED', 'GKE_MST', 'CLOUD_RUN_MST']):
            raise ValueError("must be one of enum values ('DEPLOYMENT_MODEL_UNSPECIFIED', 'GKE_MST', 'CLOUD_RUN_MST')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ConnectorVersionInfraConfig from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "connection_ratelimit_window_seconds",
            "internalclient_ratelimit_threshold",
            "ratelimit_threshold",
            "shared_deployment",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of hpa_config
        if self.hpa_config:
            _dict['hpaConfig'] = self.hpa_config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of resource_limits
        if self.resource_limits:
            _dict['resourceLimits'] = self.resource_limits.to_dict()
        # override the default output from pydantic by calling `to_dict()` of resource_requests
        if self.resource_requests:
            _dict['resourceRequests'] = self.resource_requests.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ConnectorVersionInfraConfig from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "connectionRatelimitWindowSeconds": obj.get("connectionRatelimitWindowSeconds"),
            "deploymentModel": obj.get("deploymentModel"),
            "hpaConfig": HPAConfig.from_dict(obj["hpaConfig"]) if obj.get("hpaConfig") is not None else None,
            "internalclientRatelimitThreshold": obj.get("internalclientRatelimitThreshold"),
            "ratelimitThreshold": obj.get("ratelimitThreshold"),
            "resourceLimits": ResourceLimits.from_dict(obj["resourceLimits"]) if obj.get("resourceLimits") is not None else None,
            "resourceRequests": ResourceRequests.from_dict(obj["resourceRequests"]) if obj.get("resourceRequests") is not None else None,
            "sharedDeployment": obj.get("sharedDeployment")
        })
        return _obj



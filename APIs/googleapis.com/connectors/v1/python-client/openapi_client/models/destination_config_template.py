# coding: utf-8

"""
    Connectors API

    Enables users to create and manage connections to Google Cloud services and third-party business applications using the Connectors interface.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class DestinationConfigTemplate(BaseModel):
    """
    DestinationConfigTemplate defines required destinations supported by the Connector.
    """ # noqa: E501
    default_port: Optional[StrictInt] = Field(default=None, description="The default port.", alias="defaultPort")
    description: Optional[StrictStr] = Field(default=None, description="Description.")
    display_name: Optional[StrictStr] = Field(default=None, description="Display name of the parameter.", alias="displayName")
    is_advanced: Optional[StrictBool] = Field(default=None, description="Whether the current destination tempalate is part of Advanced settings", alias="isAdvanced")
    key: Optional[StrictStr] = Field(default=None, description="Key of the destination.")
    max: Optional[StrictInt] = Field(default=None, description="The maximum number of destinations supported for this key.")
    min: Optional[StrictInt] = Field(default=None, description="The minimum number of destinations supported for this key.")
    port_field_type: Optional[StrictStr] = Field(default=None, description="Whether port number should be provided by customers.", alias="portFieldType")
    regex_pattern: Optional[StrictStr] = Field(default=None, description="Regex pattern for host.", alias="regexPattern")
    __properties: ClassVar[List[str]] = ["defaultPort", "description", "displayName", "isAdvanced", "key", "max", "min", "portFieldType", "regexPattern"]

    @field_validator('port_field_type')
    def port_field_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['FIELD_TYPE_UNSPECIFIED', 'REQUIRED', 'OPTIONAL', 'NOT_USED']):
            raise ValueError("must be one of enum values ('FIELD_TYPE_UNSPECIFIED', 'REQUIRED', 'OPTIONAL', 'NOT_USED')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DestinationConfigTemplate from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DestinationConfigTemplate from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "defaultPort": obj.get("defaultPort"),
            "description": obj.get("description"),
            "displayName": obj.get("displayName"),
            "isAdvanced": obj.get("isAdvanced"),
            "key": obj.get("key"),
            "max": obj.get("max"),
            "min": obj.get("min"),
            "portFieldType": obj.get("portFieldType"),
            "regexPattern": obj.get("regexPattern")
        })
        return _obj



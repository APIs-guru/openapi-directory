# coding: utf-8

"""
    Connectors API

    Enables users to create and manage connections to Google Cloud services and third-party business applications using the Connectors interface.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.resource import Resource
from typing import Optional, Set
from typing_extensions import Self

class RoleGrant(BaseModel):
    """
    This configuration defines all the Cloud IAM roles that needs to be granted to a particular Google Cloud resource for the selected principal like service account. These configurations will let UI display to customers what IAM roles need to be granted by them. Or these configurations can be used by the UI to render a 'grant' button to do the same on behalf of the user.
    """ # noqa: E501
    helper_text_template: Optional[StrictStr] = Field(default=None, description="Template that UI can use to provide helper text to customers.", alias="helperTextTemplate")
    principal: Optional[StrictStr] = Field(default=None, description="Prinicipal/Identity for whom the role need to assigned.")
    resource: Optional[Resource] = None
    roles: Optional[List[StrictStr]] = Field(default=None, description="List of roles that need to be granted.")
    __properties: ClassVar[List[str]] = ["helperTextTemplate", "principal", "resource", "roles"]

    @field_validator('principal')
    def principal_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['PRINCIPAL_UNSPECIFIED', 'CONNECTOR_SA']):
            raise ValueError("must be one of enum values ('PRINCIPAL_UNSPECIFIED', 'CONNECTOR_SA')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of RoleGrant from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of resource
        if self.resource:
            _dict['resource'] = self.resource.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of RoleGrant from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "helperTextTemplate": obj.get("helperTextTemplate"),
            "principal": obj.get("principal"),
            "resource": Resource.from_dict(obj["resource"]) if obj.get("resource") is not None else None,
            "roles": obj.get("roles")
        })
        return _obj



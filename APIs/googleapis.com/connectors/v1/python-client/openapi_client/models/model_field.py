# coding: utf-8

"""
    Connectors API

    Enables users to create and manage connections to Google Cloud services and third-party business applications using the Connectors interface.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.json_schema import JsonSchema
from typing import Optional, Set
from typing_extensions import Self

class ModelField(BaseModel):
    """
    Metadata of an entity field.
    """ # noqa: E501
    additional_details: Optional[Dict[str, Any]] = Field(default=None, description="The following map contains fields that are not explicitly mentioned above,this give connectors the flexibility to add new metadata fields.", alias="additionalDetails")
    data_type: Optional[StrictStr] = Field(default=None, description="The data type of the Field.", alias="dataType")
    default_value: Optional[Any] = Field(default=None, description="The following field specifies the default value of the Field provided by the external system if a value is not provided.", alias="defaultValue")
    description: Optional[StrictStr] = Field(default=None, description="A brief description of the Field.")
    var_field: Optional[StrictStr] = Field(default=None, description="Name of the Field.", alias="field")
    json_schema: Optional[JsonSchema] = Field(default=None, alias="jsonSchema")
    key: Optional[StrictBool] = Field(default=None, description="The following boolean field specifies if the current Field acts as a primary key or id if the parent is of type entity.")
    nullable: Optional[StrictBool] = Field(default=None, description="Specifies whether a null value is allowed.")
    readonly: Optional[StrictBool] = Field(default=None, description="Specifies if the Field is readonly.")
    __properties: ClassVar[List[str]] = ["additionalDetails", "dataType", "defaultValue", "description", "field", "jsonSchema", "key", "nullable", "readonly"]

    @field_validator('data_type')
    def data_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['DATA_TYPE_UNSPECIFIED', 'DATA_TYPE_INT', 'DATA_TYPE_SMALLINT', 'DATA_TYPE_DOUBLE', 'DATA_TYPE_DATE', 'DATA_TYPE_DATETIME', 'DATA_TYPE_TIME', 'DATA_TYPE_STRING', 'DATA_TYPE_LONG', 'DATA_TYPE_BOOLEAN', 'DATA_TYPE_DECIMAL', 'DATA_TYPE_UUID', 'DATA_TYPE_BLOB', 'DATA_TYPE_BIT', 'DATA_TYPE_TINYINT', 'DATA_TYPE_INTEGER', 'DATA_TYPE_BIGINT', 'DATA_TYPE_FLOAT', 'DATA_TYPE_REAL', 'DATA_TYPE_NUMERIC', 'DATA_TYPE_CHAR', 'DATA_TYPE_VARCHAR', 'DATA_TYPE_LONGVARCHAR', 'DATA_TYPE_TIMESTAMP', 'DATA_TYPE_NCHAR', 'DATA_TYPE_NVARCHAR', 'DATA_TYPE_LONGNVARCHAR', 'DATA_TYPE_NULL', 'DATA_TYPE_OTHER', 'DATA_TYPE_JAVA_OBJECT', 'DATA_TYPE_DISTINCT', 'DATA_TYPE_STRUCT', 'DATA_TYPE_ARRAY', 'DATA_TYPE_CLOB', 'DATA_TYPE_REF', 'DATA_TYPE_DATALINK', 'DATA_TYPE_ROWID', 'DATA_TYPE_BINARY', 'DATA_TYPE_VARBINARY', 'DATA_TYPE_LONGVARBINARY', 'DATA_TYPE_NCLOB', 'DATA_TYPE_SQLXML', 'DATA_TYPE_REF_CURSOR', 'DATA_TYPE_TIME_WITH_TIMEZONE', 'DATA_TYPE_TIMESTAMP_WITH_TIMEZONE']):
            raise ValueError("must be one of enum values ('DATA_TYPE_UNSPECIFIED', 'DATA_TYPE_INT', 'DATA_TYPE_SMALLINT', 'DATA_TYPE_DOUBLE', 'DATA_TYPE_DATE', 'DATA_TYPE_DATETIME', 'DATA_TYPE_TIME', 'DATA_TYPE_STRING', 'DATA_TYPE_LONG', 'DATA_TYPE_BOOLEAN', 'DATA_TYPE_DECIMAL', 'DATA_TYPE_UUID', 'DATA_TYPE_BLOB', 'DATA_TYPE_BIT', 'DATA_TYPE_TINYINT', 'DATA_TYPE_INTEGER', 'DATA_TYPE_BIGINT', 'DATA_TYPE_FLOAT', 'DATA_TYPE_REAL', 'DATA_TYPE_NUMERIC', 'DATA_TYPE_CHAR', 'DATA_TYPE_VARCHAR', 'DATA_TYPE_LONGVARCHAR', 'DATA_TYPE_TIMESTAMP', 'DATA_TYPE_NCHAR', 'DATA_TYPE_NVARCHAR', 'DATA_TYPE_LONGNVARCHAR', 'DATA_TYPE_NULL', 'DATA_TYPE_OTHER', 'DATA_TYPE_JAVA_OBJECT', 'DATA_TYPE_DISTINCT', 'DATA_TYPE_STRUCT', 'DATA_TYPE_ARRAY', 'DATA_TYPE_CLOB', 'DATA_TYPE_REF', 'DATA_TYPE_DATALINK', 'DATA_TYPE_ROWID', 'DATA_TYPE_BINARY', 'DATA_TYPE_VARBINARY', 'DATA_TYPE_LONGVARBINARY', 'DATA_TYPE_NCLOB', 'DATA_TYPE_SQLXML', 'DATA_TYPE_REF_CURSOR', 'DATA_TYPE_TIME_WITH_TIMEZONE', 'DATA_TYPE_TIMESTAMP_WITH_TIMEZONE')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ModelField from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of json_schema
        if self.json_schema:
            _dict['jsonSchema'] = self.json_schema.to_dict()
        # set to None if default_value (nullable) is None
        # and model_fields_set contains the field
        if self.default_value is None and "default_value" in self.model_fields_set:
            _dict['defaultValue'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ModelField from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "additionalDetails": obj.get("additionalDetails"),
            "dataType": obj.get("dataType"),
            "defaultValue": obj.get("defaultValue"),
            "description": obj.get("description"),
            "field": obj.get("field"),
            "jsonSchema": JsonSchema.from_dict(obj["jsonSchema"]) if obj.get("jsonSchema") is not None else None,
            "key": obj.get("key"),
            "nullable": obj.get("nullable"),
            "readonly": obj.get("readonly")
        })
        return _obj



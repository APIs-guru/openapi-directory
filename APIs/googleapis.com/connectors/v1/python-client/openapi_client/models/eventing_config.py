# coding: utf-8

"""
    Connectors API

    Enables users to create and manage connections to Google Cloud services and third-party business applications using the Connectors interface.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.auth_config import AuthConfig
from openapi_client.models.config_variable import ConfigVariable
from openapi_client.models.dead_letter_config import DeadLetterConfig
from openapi_client.models.destination_config import DestinationConfig
from typing import Optional, Set
from typing_extensions import Self

class EventingConfig(BaseModel):
    """
    Eventing Configuration of a connection
    """ # noqa: E501
    additional_variables: Optional[List[ConfigVariable]] = Field(default=None, description="Additional eventing related field values", alias="additionalVariables")
    auth_config: Optional[AuthConfig] = Field(default=None, alias="authConfig")
    dead_letter_config: Optional[DeadLetterConfig] = Field(default=None, alias="deadLetterConfig")
    enrichment_enabled: Optional[StrictBool] = Field(default=None, description="Enrichment Enabled.", alias="enrichmentEnabled")
    events_listener_ingress_endpoint: Optional[StrictStr] = Field(default=None, description="Optional. Ingress endpoint of the event listener. This is used only when private connectivity is enabled.", alias="eventsListenerIngressEndpoint")
    listener_auth_config: Optional[AuthConfig] = Field(default=None, alias="listenerAuthConfig")
    private_connectivity_enabled: Optional[StrictBool] = Field(default=None, description="Optional. Private Connectivity Enabled.", alias="privateConnectivityEnabled")
    proxy_destination_config: Optional[DestinationConfig] = Field(default=None, alias="proxyDestinationConfig")
    registration_destination_config: Optional[DestinationConfig] = Field(default=None, alias="registrationDestinationConfig")
    trigger_config_variables: Optional[List[ConfigVariable]] = Field(default=None, description="Optional. Additional eventing related field values", alias="triggerConfigVariables")
    __properties: ClassVar[List[str]] = ["additionalVariables", "authConfig", "deadLetterConfig", "enrichmentEnabled", "eventsListenerIngressEndpoint", "listenerAuthConfig", "privateConnectivityEnabled", "proxyDestinationConfig", "registrationDestinationConfig", "triggerConfigVariables"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of EventingConfig from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in additional_variables (list)
        _items = []
        if self.additional_variables:
            for _item_additional_variables in self.additional_variables:
                if _item_additional_variables:
                    _items.append(_item_additional_variables.to_dict())
            _dict['additionalVariables'] = _items
        # override the default output from pydantic by calling `to_dict()` of auth_config
        if self.auth_config:
            _dict['authConfig'] = self.auth_config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of dead_letter_config
        if self.dead_letter_config:
            _dict['deadLetterConfig'] = self.dead_letter_config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of listener_auth_config
        if self.listener_auth_config:
            _dict['listenerAuthConfig'] = self.listener_auth_config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of proxy_destination_config
        if self.proxy_destination_config:
            _dict['proxyDestinationConfig'] = self.proxy_destination_config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of registration_destination_config
        if self.registration_destination_config:
            _dict['registrationDestinationConfig'] = self.registration_destination_config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in trigger_config_variables (list)
        _items = []
        if self.trigger_config_variables:
            for _item_trigger_config_variables in self.trigger_config_variables:
                if _item_trigger_config_variables:
                    _items.append(_item_trigger_config_variables.to_dict())
            _dict['triggerConfigVariables'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of EventingConfig from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "additionalVariables": [ConfigVariable.from_dict(_item) for _item in obj["additionalVariables"]] if obj.get("additionalVariables") is not None else None,
            "authConfig": AuthConfig.from_dict(obj["authConfig"]) if obj.get("authConfig") is not None else None,
            "deadLetterConfig": DeadLetterConfig.from_dict(obj["deadLetterConfig"]) if obj.get("deadLetterConfig") is not None else None,
            "enrichmentEnabled": obj.get("enrichmentEnabled"),
            "eventsListenerIngressEndpoint": obj.get("eventsListenerIngressEndpoint"),
            "listenerAuthConfig": AuthConfig.from_dict(obj["listenerAuthConfig"]) if obj.get("listenerAuthConfig") is not None else None,
            "privateConnectivityEnabled": obj.get("privateConnectivityEnabled"),
            "proxyDestinationConfig": DestinationConfig.from_dict(obj["proxyDestinationConfig"]) if obj.get("proxyDestinationConfig") is not None else None,
            "registrationDestinationConfig": DestinationConfig.from_dict(obj["registrationDestinationConfig"]) if obj.get("registrationDestinationConfig") is not None else None,
            "triggerConfigVariables": [ConfigVariable.from_dict(_item) for _item in obj["triggerConfigVariables"]] if obj.get("triggerConfigVariables") is not None else None
        })
        return _obj



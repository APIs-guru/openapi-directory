# coding: utf-8

"""
    Connectors API

    Enables users to create and manage connections to Google Cloud services and third-party business applications using the Connectors interface.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.eventing_details import EventingDetails
from typing import Optional, Set
from typing_extensions import Self

class Connector(BaseModel):
    """
    Connectors indicates a specific connector type, e.x. Salesforce, SAP etc.
    """ # noqa: E501
    create_time: Optional[StrictStr] = Field(default=None, description="Output only. Created time.", alias="createTime")
    description: Optional[StrictStr] = Field(default=None, description="Output only. Description of the resource.")
    display_name: Optional[StrictStr] = Field(default=None, description="Output only. Display name.", alias="displayName")
    documentation_uri: Optional[StrictStr] = Field(default=None, description="Output only. Link to documentation page.", alias="documentationUri")
    eventing_details: Optional[EventingDetails] = Field(default=None, alias="eventingDetails")
    external_uri: Optional[StrictStr] = Field(default=None, description="Output only. Link to external page.", alias="externalUri")
    labels: Optional[Dict[str, StrictStr]] = Field(default=None, description="Output only. Resource labels to represent user-provided metadata. Refer to cloud documentation on labels for more details. https://cloud.google.com/compute/docs/labeling-resources")
    launch_stage: Optional[StrictStr] = Field(default=None, description="Output only. Flag to mark the version indicating the launch stage.", alias="launchStage")
    name: Optional[StrictStr] = Field(default=None, description="Output only. Resource name of the Connector. Format: projects/{project}/locations/{location}/providers/{provider}/connectors/{connector} Only global location is supported for Connector resource.")
    update_time: Optional[StrictStr] = Field(default=None, description="Output only. Updated time.", alias="updateTime")
    web_assets_location: Optional[StrictStr] = Field(default=None, description="Output only. Cloud storage location of icons etc consumed by UI.", alias="webAssetsLocation")
    __properties: ClassVar[List[str]] = ["createTime", "description", "displayName", "documentationUri", "eventingDetails", "externalUri", "labels", "launchStage", "name", "updateTime", "webAssetsLocation"]

    @field_validator('launch_stage')
    def launch_stage_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['LAUNCH_STAGE_UNSPECIFIED', 'PREVIEW', 'GA', 'DEPRECATED', 'PRIVATE_PREVIEW']):
            raise ValueError("must be one of enum values ('LAUNCH_STAGE_UNSPECIFIED', 'PREVIEW', 'GA', 'DEPRECATED', 'PRIVATE_PREVIEW')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Connector from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "create_time",
            "description",
            "display_name",
            "documentation_uri",
            "external_uri",
            "labels",
            "launch_stage",
            "name",
            "update_time",
            "web_assets_location",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of eventing_details
        if self.eventing_details:
            _dict['eventingDetails'] = self.eventing_details.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Connector from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "createTime": obj.get("createTime"),
            "description": obj.get("description"),
            "displayName": obj.get("displayName"),
            "documentationUri": obj.get("documentationUri"),
            "eventingDetails": EventingDetails.from_dict(obj["eventingDetails"]) if obj.get("eventingDetails") is not None else None,
            "externalUri": obj.get("externalUri"),
            "labels": obj.get("labels"),
            "launchStage": obj.get("launchStage"),
            "name": obj.get("name"),
            "updateTime": obj.get("updateTime"),
            "webAssetsLocation": obj.get("webAssetsLocation")
        })
        return _obj



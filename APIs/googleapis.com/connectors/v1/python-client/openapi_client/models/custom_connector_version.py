# coding: utf-8

"""
    Connectors API

    Enables users to create and manage connections to Google Cloud services and third-party business applications using the Connectors interface.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.auth_config import AuthConfig
from openapi_client.models.config_variable_template import ConfigVariableTemplate
from openapi_client.models.destination_config import DestinationConfig
from typing import Optional, Set
from typing_extensions import Self

class CustomConnectorVersion(BaseModel):
    """
    CustomConnectorVersion indicates a specific version of a connector.
    """ # noqa: E501
    auth_config: Optional[AuthConfig] = Field(default=None, alias="authConfig")
    backend_variable_templates: Optional[List[ConfigVariableTemplate]] = Field(default=None, description="Optional. Backend variables config templates. This translates to additional variable templates in connection.", alias="backendVariableTemplates")
    create_time: Optional[StrictStr] = Field(default=None, description="Output only. Created time.", alias="createTime")
    destination_configs: Optional[List[DestinationConfig]] = Field(default=None, description="Optional. Destination config(s) for accessing connector facade/ proxy. This is used only when enable_backend_destination_config is true.", alias="destinationConfigs")
    enable_backend_destination_config: Optional[StrictBool] = Field(default=None, description="Optional. When enabled, the connector will be a facade/ proxy, and connects to the destination provided during connection creation.", alias="enableBackendDestinationConfig")
    labels: Optional[Dict[str, StrictStr]] = Field(default=None, description="Optional. Resource labels to represent user-provided metadata. Refer to cloud documentation on labels for more details. https://cloud.google.com/compute/docs/labeling-resources")
    name: Optional[StrictStr] = Field(default=None, description="Output only. Identifier. Resource name of the Version. Format: projects/{project}/locations/{location}/customConnectors/{custom_connector}/customConnectorVersions/{custom_connector_version}")
    service_account: Optional[StrictStr] = Field(default=None, description="Optional. Service account used by runtime plane to access auth config secrets.", alias="serviceAccount")
    spec_location: Optional[StrictStr] = Field(default=None, description="Optional. Location of the custom connector spec. The location can be either a public url like `https://public-url.com/spec` Or a Google Cloud Storage location like `gs:///`", alias="specLocation")
    state: Optional[StrictStr] = Field(default=None, description="Output only. State of the custom connector version.")
    update_time: Optional[StrictStr] = Field(default=None, description="Output only. Updated time.", alias="updateTime")
    __properties: ClassVar[List[str]] = ["authConfig", "backendVariableTemplates", "createTime", "destinationConfigs", "enableBackendDestinationConfig", "labels", "name", "serviceAccount", "specLocation", "state", "updateTime"]

    @field_validator('state')
    def state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['STATE_UNSPECIFIED', 'ACTIVE', 'DEPRECATED']):
            raise ValueError("must be one of enum values ('STATE_UNSPECIFIED', 'ACTIVE', 'DEPRECATED')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CustomConnectorVersion from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "create_time",
            "name",
            "state",
            "update_time",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of auth_config
        if self.auth_config:
            _dict['authConfig'] = self.auth_config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in backend_variable_templates (list)
        _items = []
        if self.backend_variable_templates:
            for _item_backend_variable_templates in self.backend_variable_templates:
                if _item_backend_variable_templates:
                    _items.append(_item_backend_variable_templates.to_dict())
            _dict['backendVariableTemplates'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in destination_configs (list)
        _items = []
        if self.destination_configs:
            for _item_destination_configs in self.destination_configs:
                if _item_destination_configs:
                    _items.append(_item_destination_configs.to_dict())
            _dict['destinationConfigs'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CustomConnectorVersion from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "authConfig": AuthConfig.from_dict(obj["authConfig"]) if obj.get("authConfig") is not None else None,
            "backendVariableTemplates": [ConfigVariableTemplate.from_dict(_item) for _item in obj["backendVariableTemplates"]] if obj.get("backendVariableTemplates") is not None else None,
            "createTime": obj.get("createTime"),
            "destinationConfigs": [DestinationConfig.from_dict(_item) for _item in obj["destinationConfigs"]] if obj.get("destinationConfigs") is not None else None,
            "enableBackendDestinationConfig": obj.get("enableBackendDestinationConfig"),
            "labels": obj.get("labels"),
            "name": obj.get("name"),
            "serviceAccount": obj.get("serviceAccount"),
            "specLocation": obj.get("specLocation"),
            "state": obj.get("state"),
            "updateTime": obj.get("updateTime")
        })
        return _obj



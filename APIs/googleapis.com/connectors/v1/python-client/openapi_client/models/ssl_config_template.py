# coding: utf-8

"""
    Connectors API

    Enables users to create and manage connections to Google Cloud services and third-party business applications using the Connectors interface.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.config_variable_template import ConfigVariableTemplate
from typing import Optional, Set
from typing_extensions import Self

class SslConfigTemplate(BaseModel):
    """
    Ssl config details of a connector version
    """ # noqa: E501
    additional_variables: Optional[List[ConfigVariableTemplate]] = Field(default=None, description="Any additional fields that need to be rendered", alias="additionalVariables")
    client_cert_type: Optional[List[StrictStr]] = Field(default=None, description="List of supported Client Cert Types", alias="clientCertType")
    is_tls_mandatory: Optional[StrictBool] = Field(default=None, description="Boolean for determining if the connector version mandates TLS.", alias="isTlsMandatory")
    server_cert_type: Optional[List[StrictStr]] = Field(default=None, description="List of supported Server Cert Types", alias="serverCertType")
    ssl_type: Optional[StrictStr] = Field(default=None, description="Controls the ssl type for the given connector version", alias="sslType")
    __properties: ClassVar[List[str]] = ["additionalVariables", "clientCertType", "isTlsMandatory", "serverCertType", "sslType"]

    @field_validator('client_cert_type')
    def client_cert_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        for i in value:
            if i not in set(['CERT_TYPE_UNSPECIFIED', 'PEM']):
                raise ValueError("each list item must be one of ('CERT_TYPE_UNSPECIFIED', 'PEM')")
        return value

    @field_validator('server_cert_type')
    def server_cert_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        for i in value:
            if i not in set(['CERT_TYPE_UNSPECIFIED', 'PEM']):
                raise ValueError("each list item must be one of ('CERT_TYPE_UNSPECIFIED', 'PEM')")
        return value

    @field_validator('ssl_type')
    def ssl_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['SSL_TYPE_UNSPECIFIED', 'TLS', 'MTLS']):
            raise ValueError("must be one of enum values ('SSL_TYPE_UNSPECIFIED', 'TLS', 'MTLS')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SslConfigTemplate from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in additional_variables (list)
        _items = []
        if self.additional_variables:
            for _item_additional_variables in self.additional_variables:
                if _item_additional_variables:
                    _items.append(_item_additional_variables.to_dict())
            _dict['additionalVariables'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SslConfigTemplate from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "additionalVariables": [ConfigVariableTemplate.from_dict(_item) for _item in obj["additionalVariables"]] if obj.get("additionalVariables") is not None else None,
            "clientCertType": obj.get("clientCertType"),
            "isTlsMandatory": obj.get("isTlsMandatory"),
            "serverCertType": obj.get("serverCertType"),
            "sslType": obj.get("sslType")
        })
        return _obj



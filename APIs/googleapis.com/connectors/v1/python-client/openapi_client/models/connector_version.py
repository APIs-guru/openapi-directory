# coding: utf-8

"""
    Connectors API

    Enables users to create and manage connections to Google Cloud services and third-party business applications using the Connectors interface.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.auth_config_template import AuthConfigTemplate
from openapi_client.models.config_variable_template import ConfigVariableTemplate
from openapi_client.models.connector_infra_config import ConnectorInfraConfig
from openapi_client.models.destination_config_template import DestinationConfigTemplate
from openapi_client.models.egress_control_config import EgressControlConfig
from openapi_client.models.eventing_config_template import EventingConfigTemplate
from openapi_client.models.role_grant import RoleGrant
from openapi_client.models.ssl_config_template import SslConfigTemplate
from openapi_client.models.supported_runtime_features import SupportedRuntimeFeatures
from typing import Optional, Set
from typing_extensions import Self

class ConnectorVersion(BaseModel):
    """
    ConnectorVersion indicates a specific version of a connector.
    """ # noqa: E501
    auth_config_templates: Optional[List[AuthConfigTemplate]] = Field(default=None, description="Output only. List of auth configs supported by the Connector Version.", alias="authConfigTemplates")
    config_variable_templates: Optional[List[ConfigVariableTemplate]] = Field(default=None, description="Output only. List of config variables needed to create a connection.", alias="configVariableTemplates")
    connector_infra_config: Optional[ConnectorInfraConfig] = Field(default=None, alias="connectorInfraConfig")
    create_time: Optional[StrictStr] = Field(default=None, description="Output only. Created time.", alias="createTime")
    destination_config_templates: Optional[List[DestinationConfigTemplate]] = Field(default=None, description="Output only. List of destination configs needed to create a connection.", alias="destinationConfigTemplates")
    display_name: Optional[StrictStr] = Field(default=None, description="Output only. Display name.", alias="displayName")
    egress_control_config: Optional[EgressControlConfig] = Field(default=None, alias="egressControlConfig")
    eventing_config_template: Optional[EventingConfigTemplate] = Field(default=None, alias="eventingConfigTemplate")
    labels: Optional[Dict[str, StrictStr]] = Field(default=None, description="Output only. Resource labels to represent user-provided metadata. Refer to cloud documentation on labels for more details. https://cloud.google.com/compute/docs/labeling-resources")
    launch_stage: Optional[StrictStr] = Field(default=None, description="Output only. Flag to mark the version indicating the launch stage.", alias="launchStage")
    name: Optional[StrictStr] = Field(default=None, description="Output only. Resource name of the Version. Format: projects/{project}/locations/{location}/providers/{provider}/connectors/{connector}/versions/{version} Only global location is supported for Connector resource.")
    release_version: Optional[StrictStr] = Field(default=None, description="Output only. ReleaseVersion of the connector, for example: \"1.0.1-alpha\".", alias="releaseVersion")
    role_grant: Optional[RoleGrant] = Field(default=None, alias="roleGrant")
    role_grants: Optional[List[RoleGrant]] = Field(default=None, description="Output only. Role grant configurations for this connector version.", alias="roleGrants")
    ssl_config_template: Optional[SslConfigTemplate] = Field(default=None, alias="sslConfigTemplate")
    supported_runtime_features: Optional[SupportedRuntimeFeatures] = Field(default=None, alias="supportedRuntimeFeatures")
    unsupported_connection_types: Optional[List[StrictStr]] = Field(default=None, description="Output only. Unsupported connection types.", alias="unsupportedConnectionTypes")
    update_time: Optional[StrictStr] = Field(default=None, description="Output only. Updated time.", alias="updateTime")
    __properties: ClassVar[List[str]] = ["authConfigTemplates", "configVariableTemplates", "connectorInfraConfig", "createTime", "destinationConfigTemplates", "displayName", "egressControlConfig", "eventingConfigTemplate", "labels", "launchStage", "name", "releaseVersion", "roleGrant", "roleGrants", "sslConfigTemplate", "supportedRuntimeFeatures", "unsupportedConnectionTypes", "updateTime"]

    @field_validator('launch_stage')
    def launch_stage_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['LAUNCH_STAGE_UNSPECIFIED', 'PREVIEW', 'GA', 'DEPRECATED', 'PRIVATE_PREVIEW']):
            raise ValueError("must be one of enum values ('LAUNCH_STAGE_UNSPECIFIED', 'PREVIEW', 'GA', 'DEPRECATED', 'PRIVATE_PREVIEW')")
        return value

    @field_validator('unsupported_connection_types')
    def unsupported_connection_types_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        for i in value:
            if i not in set(['CONNECTION_TYPE_UNSPECIFIED', 'CONNECTION_WITH_EVENTING', 'ONLY_CONNECTION', 'ONLY_EVENTING']):
                raise ValueError("each list item must be one of ('CONNECTION_TYPE_UNSPECIFIED', 'CONNECTION_WITH_EVENTING', 'ONLY_CONNECTION', 'ONLY_EVENTING')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ConnectorVersion from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "auth_config_templates",
            "config_variable_templates",
            "create_time",
            "destination_config_templates",
            "display_name",
            "labels",
            "launch_stage",
            "name",
            "release_version",
            "role_grants",
            "unsupported_connection_types",
            "update_time",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in auth_config_templates (list)
        _items = []
        if self.auth_config_templates:
            for _item_auth_config_templates in self.auth_config_templates:
                if _item_auth_config_templates:
                    _items.append(_item_auth_config_templates.to_dict())
            _dict['authConfigTemplates'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in config_variable_templates (list)
        _items = []
        if self.config_variable_templates:
            for _item_config_variable_templates in self.config_variable_templates:
                if _item_config_variable_templates:
                    _items.append(_item_config_variable_templates.to_dict())
            _dict['configVariableTemplates'] = _items
        # override the default output from pydantic by calling `to_dict()` of connector_infra_config
        if self.connector_infra_config:
            _dict['connectorInfraConfig'] = self.connector_infra_config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in destination_config_templates (list)
        _items = []
        if self.destination_config_templates:
            for _item_destination_config_templates in self.destination_config_templates:
                if _item_destination_config_templates:
                    _items.append(_item_destination_config_templates.to_dict())
            _dict['destinationConfigTemplates'] = _items
        # override the default output from pydantic by calling `to_dict()` of egress_control_config
        if self.egress_control_config:
            _dict['egressControlConfig'] = self.egress_control_config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of eventing_config_template
        if self.eventing_config_template:
            _dict['eventingConfigTemplate'] = self.eventing_config_template.to_dict()
        # override the default output from pydantic by calling `to_dict()` of role_grant
        if self.role_grant:
            _dict['roleGrant'] = self.role_grant.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in role_grants (list)
        _items = []
        if self.role_grants:
            for _item_role_grants in self.role_grants:
                if _item_role_grants:
                    _items.append(_item_role_grants.to_dict())
            _dict['roleGrants'] = _items
        # override the default output from pydantic by calling `to_dict()` of ssl_config_template
        if self.ssl_config_template:
            _dict['sslConfigTemplate'] = self.ssl_config_template.to_dict()
        # override the default output from pydantic by calling `to_dict()` of supported_runtime_features
        if self.supported_runtime_features:
            _dict['supportedRuntimeFeatures'] = self.supported_runtime_features.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ConnectorVersion from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "authConfigTemplates": [AuthConfigTemplate.from_dict(_item) for _item in obj["authConfigTemplates"]] if obj.get("authConfigTemplates") is not None else None,
            "configVariableTemplates": [ConfigVariableTemplate.from_dict(_item) for _item in obj["configVariableTemplates"]] if obj.get("configVariableTemplates") is not None else None,
            "connectorInfraConfig": ConnectorInfraConfig.from_dict(obj["connectorInfraConfig"]) if obj.get("connectorInfraConfig") is not None else None,
            "createTime": obj.get("createTime"),
            "destinationConfigTemplates": [DestinationConfigTemplate.from_dict(_item) for _item in obj["destinationConfigTemplates"]] if obj.get("destinationConfigTemplates") is not None else None,
            "displayName": obj.get("displayName"),
            "egressControlConfig": EgressControlConfig.from_dict(obj["egressControlConfig"]) if obj.get("egressControlConfig") is not None else None,
            "eventingConfigTemplate": EventingConfigTemplate.from_dict(obj["eventingConfigTemplate"]) if obj.get("eventingConfigTemplate") is not None else None,
            "labels": obj.get("labels"),
            "launchStage": obj.get("launchStage"),
            "name": obj.get("name"),
            "releaseVersion": obj.get("releaseVersion"),
            "roleGrant": RoleGrant.from_dict(obj["roleGrant"]) if obj.get("roleGrant") is not None else None,
            "roleGrants": [RoleGrant.from_dict(_item) for _item in obj["roleGrants"]] if obj.get("roleGrants") is not None else None,
            "sslConfigTemplate": SslConfigTemplate.from_dict(obj["sslConfigTemplate"]) if obj.get("sslConfigTemplate") is not None else None,
            "supportedRuntimeFeatures": SupportedRuntimeFeatures.from_dict(obj["supportedRuntimeFeatures"]) if obj.get("supportedRuntimeFeatures") is not None else None,
            "unsupportedConnectionTypes": obj.get("unsupportedConnectionTypes"),
            "updateTime": obj.get("updateTime")
        })
        return _obj



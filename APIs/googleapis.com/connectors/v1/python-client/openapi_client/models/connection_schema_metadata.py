# coding: utf-8

"""
    Connectors API

    Enables users to create and manage connections to Google Cloud services and third-party business applications using the Connectors interface.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class ConnectionSchemaMetadata(BaseModel):
    """
    ConnectionSchemaMetadata is the singleton resource of each connection. It includes the entity and action names of runtime resources exposed by a connection backend.
    """ # noqa: E501
    actions: Optional[List[StrictStr]] = Field(default=None, description="Output only. List of actions.")
    entities: Optional[List[StrictStr]] = Field(default=None, description="Output only. List of entity names.")
    error_message: Optional[StrictStr] = Field(default=None, description="Error message for users.", alias="errorMessage")
    name: Optional[StrictStr] = Field(default=None, description="Output only. Resource name. Format: projects/{project}/locations/{location}/connections/{connection}/connectionSchemaMetadata")
    refresh_time: Optional[StrictStr] = Field(default=None, description="Output only. Timestamp when the connection runtime schema refresh was triggered.", alias="refreshTime")
    state: Optional[StrictStr] = Field(default=None, description="Output only. The current state of runtime schema.")
    update_time: Optional[StrictStr] = Field(default=None, description="Output only. Timestamp when the connection runtime schema was updated.", alias="updateTime")
    __properties: ClassVar[List[str]] = ["actions", "entities", "errorMessage", "name", "refreshTime", "state", "updateTime"]

    @field_validator('state')
    def state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['STATE_UNSPECIFIED', 'REFRESHING', 'UPDATED', 'REFRESHING_SCHEMA_METADATA', 'UPDATED_SCHEMA_METADATA', 'REFRESH_SCHEMA_METADATA_FAILED', 'REFRESHING_FULL_SCHEMA', 'UPDATED_FULL_SCHEMA']):
            raise ValueError("must be one of enum values ('STATE_UNSPECIFIED', 'REFRESHING', 'UPDATED', 'REFRESHING_SCHEMA_METADATA', 'UPDATED_SCHEMA_METADATA', 'REFRESH_SCHEMA_METADATA_FAILED', 'REFRESHING_FULL_SCHEMA', 'UPDATED_FULL_SCHEMA')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ConnectionSchemaMetadata from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "actions",
            "entities",
            "name",
            "refresh_time",
            "state",
            "update_time",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ConnectionSchemaMetadata from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "actions": obj.get("actions"),
            "entities": obj.get("entities"),
            "errorMessage": obj.get("errorMessage"),
            "name": obj.get("name"),
            "refreshTime": obj.get("refreshTime"),
            "state": obj.get("state"),
            "updateTime": obj.get("updateTime")
        })
        return _obj



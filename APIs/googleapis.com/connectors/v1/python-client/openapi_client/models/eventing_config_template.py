# coding: utf-8

"""
    Connectors API

    Enables users to create and manage connections to Google Cloud services and third-party business applications using the Connectors interface.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.auth_config_template import AuthConfigTemplate
from openapi_client.models.config_variable_template import ConfigVariableTemplate
from openapi_client.models.destination_config_template import DestinationConfigTemplate
from typing import Optional, Set
from typing_extensions import Self

class EventingConfigTemplate(BaseModel):
    """
    Eventing Config details of a connector version.
    """ # noqa: E501
    additional_variables: Optional[List[ConfigVariableTemplate]] = Field(default=None, description="Additional fields that need to be rendered.", alias="additionalVariables")
    auth_config_templates: Optional[List[AuthConfigTemplate]] = Field(default=None, description="AuthConfigTemplates represents the auth values for the webhook adapter.", alias="authConfigTemplates")
    auto_refresh: Optional[StrictBool] = Field(default=None, description="Auto refresh to extend webhook life.", alias="autoRefresh")
    auto_registration_supported: Optional[StrictBool] = Field(default=None, description="Auto Registration supported.", alias="autoRegistrationSupported")
    encryption_key_template: Optional[ConfigVariableTemplate] = Field(default=None, alias="encryptionKeyTemplate")
    enrichment_supported: Optional[StrictBool] = Field(default=None, description="Enrichment Supported.", alias="enrichmentSupported")
    event_listener_type: Optional[StrictStr] = Field(default=None, description="The type of the event listener for a specific connector.", alias="eventListenerType")
    is_eventing_supported: Optional[StrictBool] = Field(default=None, description="Is Eventing Supported.", alias="isEventingSupported")
    listener_auth_config_templates: Optional[List[AuthConfigTemplate]] = Field(default=None, description="ListenerAuthConfigTemplates represents the auth values for the event listener.", alias="listenerAuthConfigTemplates")
    proxy_destination_config: Optional[DestinationConfigTemplate] = Field(default=None, alias="proxyDestinationConfig")
    registration_destination_config: Optional[DestinationConfigTemplate] = Field(default=None, alias="registrationDestinationConfig")
    trigger_config_variables: Optional[List[ConfigVariableTemplate]] = Field(default=None, description="Trigger Config fields that needs to be rendered", alias="triggerConfigVariables")
    __properties: ClassVar[List[str]] = ["additionalVariables", "authConfigTemplates", "autoRefresh", "autoRegistrationSupported", "encryptionKeyTemplate", "enrichmentSupported", "eventListenerType", "isEventingSupported", "listenerAuthConfigTemplates", "proxyDestinationConfig", "registrationDestinationConfig", "triggerConfigVariables"]

    @field_validator('event_listener_type')
    def event_listener_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['EVENT_LISTENER_TYPE_UNSPECIFIED', 'WEBHOOK_LISTENER', 'JMS_LISTENER']):
            raise ValueError("must be one of enum values ('EVENT_LISTENER_TYPE_UNSPECIFIED', 'WEBHOOK_LISTENER', 'JMS_LISTENER')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of EventingConfigTemplate from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in additional_variables (list)
        _items = []
        if self.additional_variables:
            for _item_additional_variables in self.additional_variables:
                if _item_additional_variables:
                    _items.append(_item_additional_variables.to_dict())
            _dict['additionalVariables'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in auth_config_templates (list)
        _items = []
        if self.auth_config_templates:
            for _item_auth_config_templates in self.auth_config_templates:
                if _item_auth_config_templates:
                    _items.append(_item_auth_config_templates.to_dict())
            _dict['authConfigTemplates'] = _items
        # override the default output from pydantic by calling `to_dict()` of encryption_key_template
        if self.encryption_key_template:
            _dict['encryptionKeyTemplate'] = self.encryption_key_template.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in listener_auth_config_templates (list)
        _items = []
        if self.listener_auth_config_templates:
            for _item_listener_auth_config_templates in self.listener_auth_config_templates:
                if _item_listener_auth_config_templates:
                    _items.append(_item_listener_auth_config_templates.to_dict())
            _dict['listenerAuthConfigTemplates'] = _items
        # override the default output from pydantic by calling `to_dict()` of proxy_destination_config
        if self.proxy_destination_config:
            _dict['proxyDestinationConfig'] = self.proxy_destination_config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of registration_destination_config
        if self.registration_destination_config:
            _dict['registrationDestinationConfig'] = self.registration_destination_config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in trigger_config_variables (list)
        _items = []
        if self.trigger_config_variables:
            for _item_trigger_config_variables in self.trigger_config_variables:
                if _item_trigger_config_variables:
                    _items.append(_item_trigger_config_variables.to_dict())
            _dict['triggerConfigVariables'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of EventingConfigTemplate from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "additionalVariables": [ConfigVariableTemplate.from_dict(_item) for _item in obj["additionalVariables"]] if obj.get("additionalVariables") is not None else None,
            "authConfigTemplates": [AuthConfigTemplate.from_dict(_item) for _item in obj["authConfigTemplates"]] if obj.get("authConfigTemplates") is not None else None,
            "autoRefresh": obj.get("autoRefresh"),
            "autoRegistrationSupported": obj.get("autoRegistrationSupported"),
            "encryptionKeyTemplate": ConfigVariableTemplate.from_dict(obj["encryptionKeyTemplate"]) if obj.get("encryptionKeyTemplate") is not None else None,
            "enrichmentSupported": obj.get("enrichmentSupported"),
            "eventListenerType": obj.get("eventListenerType"),
            "isEventingSupported": obj.get("isEventingSupported"),
            "listenerAuthConfigTemplates": [AuthConfigTemplate.from_dict(_item) for _item in obj["listenerAuthConfigTemplates"]] if obj.get("listenerAuthConfigTemplates") is not None else None,
            "proxyDestinationConfig": DestinationConfigTemplate.from_dict(obj["proxyDestinationConfig"]) if obj.get("proxyDestinationConfig") is not None else None,
            "registrationDestinationConfig": DestinationConfigTemplate.from_dict(obj["registrationDestinationConfig"]) if obj.get("registrationDestinationConfig") is not None else None,
            "triggerConfigVariables": [ConfigVariableTemplate.from_dict(_item) for _item in obj["triggerConfigVariables"]] if obj.get("triggerConfigVariables") is not None else None
        })
        return _obj



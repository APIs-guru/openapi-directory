# coding: utf-8

"""
    Connectors API

    Enables users to create and manage connections to Google Cloud services and third-party business applications using the Connectors interface.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.event_subscription_destination import EventSubscriptionDestination
from openapi_client.models.event_subscription_status import EventSubscriptionStatus
from openapi_client.models.jms import JMS
from typing import Optional, Set
from typing_extensions import Self

class EventSubscription(BaseModel):
    """
    represents the Connector's EventSubscription resource
    """ # noqa: E501
    create_time: Optional[StrictStr] = Field(default=None, description="Output only. Created time.", alias="createTime")
    destinations: Optional[EventSubscriptionDestination] = None
    event_type_id: Optional[StrictStr] = Field(default=None, description="Optional. Event type id of the event of current EventSubscription.", alias="eventTypeId")
    jms: Optional[JMS] = None
    name: Optional[StrictStr] = Field(default=None, description="Required. Resource name of the EventSubscription. Format: projects/{project}/locations/{location}/connections/{connection}/eventSubscriptions/{event_subscription}")
    status: Optional[EventSubscriptionStatus] = None
    subscriber: Optional[StrictStr] = Field(default=None, description="Optional. name of the Subscriber for the current EventSubscription.")
    subscriber_link: Optional[StrictStr] = Field(default=None, description="Optional. Link for Subscriber of the current EventSubscription.", alias="subscriberLink")
    update_time: Optional[StrictStr] = Field(default=None, description="Output only. Updated time.", alias="updateTime")
    __properties: ClassVar[List[str]] = ["createTime", "destinations", "eventTypeId", "jms", "name", "status", "subscriber", "subscriberLink", "updateTime"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of EventSubscription from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "create_time",
            "update_time",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of destinations
        if self.destinations:
            _dict['destinations'] = self.destinations.to_dict()
        # override the default output from pydantic by calling `to_dict()` of jms
        if self.jms:
            _dict['jms'] = self.jms.to_dict()
        # override the default output from pydantic by calling `to_dict()` of status
        if self.status:
            _dict['status'] = self.status.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of EventSubscription from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "createTime": obj.get("createTime"),
            "destinations": EventSubscriptionDestination.from_dict(obj["destinations"]) if obj.get("destinations") is not None else None,
            "eventTypeId": obj.get("eventTypeId"),
            "jms": JMS.from_dict(obj["jms"]) if obj.get("jms") is not None else None,
            "name": obj.get("name"),
            "status": EventSubscriptionStatus.from_dict(obj["status"]) if obj.get("status") is not None else None,
            "subscriber": obj.get("subscriber"),
            "subscriberLink": obj.get("subscriberLink"),
            "updateTime": obj.get("updateTime")
        })
        return _obj



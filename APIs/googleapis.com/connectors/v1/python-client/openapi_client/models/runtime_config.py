# coding: utf-8

"""
    Connectors API

    Enables users to create and manage connections to Google Cloud services and third-party business applications using the Connectors interface.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class RuntimeConfig(BaseModel):
    """
    RuntimeConfig is the singleton resource of each location. It includes generic resource configs consumed by control plane and runtime plane like: pub/sub topic/subscription resource name, Cloud Storage location storing schema etc.
    """ # noqa: E501
    connd_subscription: Optional[StrictStr] = Field(default=None, description="Output only. Pub/Sub subscription for connd to receive message. E.g. projects/{project-id}/subscriptions/{topic-id}", alias="conndSubscription")
    connd_topic: Optional[StrictStr] = Field(default=None, description="Output only. Pub/Sub topic for connd to send message. E.g. projects/{project-id}/topics/{topic-id}", alias="conndTopic")
    control_plane_subscription: Optional[StrictStr] = Field(default=None, description="Output only. Pub/Sub subscription for control plane to receive message. E.g. projects/{project-id}/subscriptions/{topic-id}", alias="controlPlaneSubscription")
    control_plane_topic: Optional[StrictStr] = Field(default=None, description="Output only. Pub/Sub topic for control plne to send message. communication. E.g. projects/{project-id}/topics/{topic-id}", alias="controlPlaneTopic")
    location_id: Optional[StrictStr] = Field(default=None, description="Output only. location_id of the runtime location. E.g. \"us-west1\".", alias="locationId")
    name: Optional[StrictStr] = Field(default=None, description="Output only. Name of the runtimeConfig resource. Format: projects/{project}/locations/{location}/runtimeConfig")
    runtime_endpoint: Optional[StrictStr] = Field(default=None, description="Output only. The endpoint of the connectors runtime ingress.", alias="runtimeEndpoint")
    schema_gcs_bucket: Optional[StrictStr] = Field(default=None, description="Output only. The Cloud Storage bucket that stores connector's schema reports.", alias="schemaGcsBucket")
    service_directory: Optional[StrictStr] = Field(default=None, description="Output only. The name of the Service Directory service name.", alias="serviceDirectory")
    state: Optional[StrictStr] = Field(default=None, description="Output only. The state of the location.")
    __properties: ClassVar[List[str]] = ["conndSubscription", "conndTopic", "controlPlaneSubscription", "controlPlaneTopic", "locationId", "name", "runtimeEndpoint", "schemaGcsBucket", "serviceDirectory", "state"]

    @field_validator('state')
    def state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['STATE_UNSPECIFIED', 'INACTIVE', 'ACTIVATING', 'ACTIVE', 'CREATING', 'DELETING', 'UPDATING']):
            raise ValueError("must be one of enum values ('STATE_UNSPECIFIED', 'INACTIVE', 'ACTIVATING', 'ACTIVE', 'CREATING', 'DELETING', 'UPDATING')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of RuntimeConfig from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "connd_subscription",
            "connd_topic",
            "control_plane_subscription",
            "control_plane_topic",
            "location_id",
            "name",
            "runtime_endpoint",
            "schema_gcs_bucket",
            "service_directory",
            "state",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of RuntimeConfig from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "conndSubscription": obj.get("conndSubscription"),
            "conndTopic": obj.get("conndTopic"),
            "controlPlaneSubscription": obj.get("controlPlaneSubscription"),
            "controlPlaneTopic": obj.get("controlPlaneTopic"),
            "locationId": obj.get("locationId"),
            "name": obj.get("name"),
            "runtimeEndpoint": obj.get("runtimeEndpoint"),
            "schemaGcsBucket": obj.get("schemaGcsBucket"),
            "serviceDirectory": obj.get("serviceDirectory"),
            "state": obj.get("state")
        })
        return _obj



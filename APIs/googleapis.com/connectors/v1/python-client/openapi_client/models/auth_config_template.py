# coding: utf-8

"""
    Connectors API

    Enables users to create and manage connections to Google Cloud services and third-party business applications using the Connectors interface.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.config_variable_template import ConfigVariableTemplate
from typing import Optional, Set
from typing_extensions import Self

class AuthConfigTemplate(BaseModel):
    """
    AuthConfigTemplate defines required field over an authentication type.
    """ # noqa: E501
    auth_key: Optional[StrictStr] = Field(default=None, description="Identifier key for auth config", alias="authKey")
    auth_type: Optional[StrictStr] = Field(default=None, description="The type of authentication configured.", alias="authType")
    config_variable_templates: Optional[List[ConfigVariableTemplate]] = Field(default=None, description="Config variables to describe an `AuthConfig` for a `Connection`.", alias="configVariableTemplates")
    description: Optional[StrictStr] = Field(default=None, description="Connector specific description for an authentication template.")
    display_name: Optional[StrictStr] = Field(default=None, description="Display name for authentication template.", alias="displayName")
    __properties: ClassVar[List[str]] = ["authKey", "authType", "configVariableTemplates", "description", "displayName"]

    @field_validator('auth_type')
    def auth_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['AUTH_TYPE_UNSPECIFIED', 'USER_PASSWORD', 'OAUTH2_JWT_BEARER', 'OAUTH2_CLIENT_CREDENTIALS', 'SSH_PUBLIC_KEY', 'OAUTH2_AUTH_CODE_FLOW', 'GOOGLE_AUTHENTICATION']):
            raise ValueError("must be one of enum values ('AUTH_TYPE_UNSPECIFIED', 'USER_PASSWORD', 'OAUTH2_JWT_BEARER', 'OAUTH2_CLIENT_CREDENTIALS', 'SSH_PUBLIC_KEY', 'OAUTH2_AUTH_CODE_FLOW', 'GOOGLE_AUTHENTICATION')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AuthConfigTemplate from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in config_variable_templates (list)
        _items = []
        if self.config_variable_templates:
            for _item_config_variable_templates in self.config_variable_templates:
                if _item_config_variable_templates:
                    _items.append(_item_config_variable_templates.to_dict())
            _dict['configVariableTemplates'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AuthConfigTemplate from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "authKey": obj.get("authKey"),
            "authType": obj.get("authType"),
            "configVariableTemplates": [ConfigVariableTemplate.from_dict(_item) for _item in obj["configVariableTemplates"]] if obj.get("configVariableTemplates") is not None else None,
            "description": obj.get("description"),
            "displayName": obj.get("displayName")
        })
        return _obj



# coding: utf-8

"""
    Connectors API

    Enables users to create and manage connections to Google Cloud services and third-party business applications using the Connectors interface.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.input_parameter import InputParameter
from openapi_client.models.json_schema import JsonSchema
from openapi_client.models.result_metadata import ResultMetadata
from typing import Optional, Set
from typing_extensions import Self

class RuntimeActionSchema(BaseModel):
    """
    Schema of a runtime action.
    """ # noqa: E501
    action: Optional[StrictStr] = Field(default=None, description="Output only. Name of the action.")
    description: Optional[StrictStr] = Field(default=None, description="Output only. Brief Description of action")
    display_name: Optional[StrictStr] = Field(default=None, description="Output only. Display Name of action to be shown on client side", alias="displayName")
    input_json_schema: Optional[JsonSchema] = Field(default=None, alias="inputJsonSchema")
    input_parameters: Optional[List[InputParameter]] = Field(default=None, description="Output only. List of input parameter metadata for the action.", alias="inputParameters")
    result_json_schema: Optional[JsonSchema] = Field(default=None, alias="resultJsonSchema")
    result_metadata: Optional[List[ResultMetadata]] = Field(default=None, description="Output only. List of result field metadata.", alias="resultMetadata")
    __properties: ClassVar[List[str]] = ["action", "description", "displayName", "inputJsonSchema", "inputParameters", "resultJsonSchema", "resultMetadata"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of RuntimeActionSchema from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "action",
            "description",
            "display_name",
            "input_parameters",
            "result_metadata",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of input_json_schema
        if self.input_json_schema:
            _dict['inputJsonSchema'] = self.input_json_schema.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in input_parameters (list)
        _items = []
        if self.input_parameters:
            for _item_input_parameters in self.input_parameters:
                if _item_input_parameters:
                    _items.append(_item_input_parameters.to_dict())
            _dict['inputParameters'] = _items
        # override the default output from pydantic by calling `to_dict()` of result_json_schema
        if self.result_json_schema:
            _dict['resultJsonSchema'] = self.result_json_schema.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in result_metadata (list)
        _items = []
        if self.result_metadata:
            for _item_result_metadata in self.result_metadata:
                if _item_result_metadata:
                    _items.append(_item_result_metadata.to_dict())
            _dict['resultMetadata'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of RuntimeActionSchema from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "action": obj.get("action"),
            "description": obj.get("description"),
            "displayName": obj.get("displayName"),
            "inputJsonSchema": JsonSchema.from_dict(obj["inputJsonSchema"]) if obj.get("inputJsonSchema") is not None else None,
            "inputParameters": [InputParameter.from_dict(_item) for _item in obj["inputParameters"]] if obj.get("inputParameters") is not None else None,
            "resultJsonSchema": JsonSchema.from_dict(obj["resultJsonSchema"]) if obj.get("resultJsonSchema") is not None else None,
            "resultMetadata": [ResultMetadata.from_dict(_item) for _item in obj["resultMetadata"]] if obj.get("resultMetadata") is not None else None
        })
        return _obj



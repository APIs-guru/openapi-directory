# coding: utf-8

"""
    Connectors API

    Enables users to create and manage connections to Google Cloud services and third-party business applications using the Connectors interface.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.authorization_code_link import AuthorizationCodeLink
from openapi_client.models.enum_option import EnumOption
from openapi_client.models.logical_expression import LogicalExpression
from openapi_client.models.role_grant import RoleGrant
from typing import Optional, Set
from typing_extensions import Self

class ConfigVariableTemplate(BaseModel):
    """
    ConfigVariableTemplate provides metadata about a `ConfigVariable` that is used in a Connection.
    """ # noqa: E501
    authorization_code_link: Optional[AuthorizationCodeLink] = Field(default=None, alias="authorizationCodeLink")
    description: Optional[StrictStr] = Field(default=None, description="Description.")
    display_name: Optional[StrictStr] = Field(default=None, description="Display name of the parameter.", alias="displayName")
    enum_options: Optional[List[EnumOption]] = Field(default=None, description="Enum options. To be populated if `ValueType` is `ENUM`", alias="enumOptions")
    is_advanced: Optional[StrictBool] = Field(default=None, description="Indicates if current template is part of advanced settings", alias="isAdvanced")
    key: Optional[StrictStr] = Field(default=None, description="Key of the config variable.")
    location_type: Optional[StrictStr] = Field(default=None, description="Optional. Location Tyep denotes where this value should be sent in BYOC connections.", alias="locationType")
    required: Optional[StrictBool] = Field(default=None, description="Flag represents that this `ConfigVariable` must be provided for a connection.")
    required_condition: Optional[LogicalExpression] = Field(default=None, alias="requiredCondition")
    role_grant: Optional[RoleGrant] = Field(default=None, alias="roleGrant")
    state: Optional[StrictStr] = Field(default=None, description="State of the config variable.")
    validation_regex: Optional[StrictStr] = Field(default=None, description="Regular expression in RE2 syntax used for validating the `value` of a `ConfigVariable`.", alias="validationRegex")
    value_type: Optional[StrictStr] = Field(default=None, description="Type of the parameter: string, int, bool etc. consider custom type for the benefit for the validation.", alias="valueType")
    __properties: ClassVar[List[str]] = ["authorizationCodeLink", "description", "displayName", "enumOptions", "isAdvanced", "key", "locationType", "required", "requiredCondition", "roleGrant", "state", "validationRegex", "valueType"]

    @field_validator('location_type')
    def location_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['LOCATION_TYPE_UNSPECIFIED', 'HEADER', 'PAYLOAD', 'QUERY_PARAM', 'PATH_PARAM']):
            raise ValueError("must be one of enum values ('LOCATION_TYPE_UNSPECIFIED', 'HEADER', 'PAYLOAD', 'QUERY_PARAM', 'PATH_PARAM')")
        return value

    @field_validator('state')
    def state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['STATE_UNSPECIFIED', 'ACTIVE', 'DEPRECATED']):
            raise ValueError("must be one of enum values ('STATE_UNSPECIFIED', 'ACTIVE', 'DEPRECATED')")
        return value

    @field_validator('value_type')
    def value_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['VALUE_TYPE_UNSPECIFIED', 'STRING', 'INT', 'BOOL', 'SECRET', 'ENUM', 'AUTHORIZATION_CODE', 'ENCRYPTION_KEY']):
            raise ValueError("must be one of enum values ('VALUE_TYPE_UNSPECIFIED', 'STRING', 'INT', 'BOOL', 'SECRET', 'ENUM', 'AUTHORIZATION_CODE', 'ENCRYPTION_KEY')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ConfigVariableTemplate from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of authorization_code_link
        if self.authorization_code_link:
            _dict['authorizationCodeLink'] = self.authorization_code_link.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in enum_options (list)
        _items = []
        if self.enum_options:
            for _item_enum_options in self.enum_options:
                if _item_enum_options:
                    _items.append(_item_enum_options.to_dict())
            _dict['enumOptions'] = _items
        # override the default output from pydantic by calling `to_dict()` of required_condition
        if self.required_condition:
            _dict['requiredCondition'] = self.required_condition.to_dict()
        # override the default output from pydantic by calling `to_dict()` of role_grant
        if self.role_grant:
            _dict['roleGrant'] = self.role_grant.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ConfigVariableTemplate from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "authorizationCodeLink": AuthorizationCodeLink.from_dict(obj["authorizationCodeLink"]) if obj.get("authorizationCodeLink") is not None else None,
            "description": obj.get("description"),
            "displayName": obj.get("displayName"),
            "enumOptions": [EnumOption.from_dict(_item) for _item in obj["enumOptions"]] if obj.get("enumOptions") is not None else None,
            "isAdvanced": obj.get("isAdvanced"),
            "key": obj.get("key"),
            "locationType": obj.get("locationType"),
            "required": obj.get("required"),
            "requiredCondition": LogicalExpression.from_dict(obj["requiredCondition"]) if obj.get("requiredCondition") is not None else None,
            "roleGrant": RoleGrant.from_dict(obj["roleGrant"]) if obj.get("roleGrant") is not None else None,
            "state": obj.get("state"),
            "validationRegex": obj.get("validationRegex"),
            "valueType": obj.get("valueType")
        })
        return _obj



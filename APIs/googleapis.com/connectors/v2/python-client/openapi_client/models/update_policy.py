# coding: utf-8

"""
    Connectors API

    Enables users to create and manage connections to Google Cloud services and third-party business applications using the Connectors interface.

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.deny_maintenance_period import DenyMaintenancePeriod
from openapi_client.models.maintenance_window import MaintenanceWindow
from typing import Optional, Set
from typing_extensions import Self

class UpdatePolicy(BaseModel):
    """
    Maintenance policy applicable to instance updates.
    """ # noqa: E501
    channel: Optional[StrictStr] = Field(default=None, description="Optional. Relative scheduling channel applied to resource.")
    deny_maintenance_periods: Optional[List[DenyMaintenancePeriod]] = Field(default=None, description="Deny Maintenance Period that is applied to resource to indicate when maintenance is forbidden. The protocol supports zero-to-many such periods, but the current SLM Rollout implementation only supports zero-to-one.", alias="denyMaintenancePeriods")
    window: Optional[MaintenanceWindow] = None
    __properties: ClassVar[List[str]] = ["channel", "denyMaintenancePeriods", "window"]

    @field_validator('channel')
    def channel_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['UPDATE_CHANNEL_UNSPECIFIED', 'EARLIER', 'LATER', 'WEEK1', 'WEEK2', 'WEEK5']):
            raise ValueError("must be one of enum values ('UPDATE_CHANNEL_UNSPECIFIED', 'EARLIER', 'LATER', 'WEEK1', 'WEEK2', 'WEEK5')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of UpdatePolicy from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in deny_maintenance_periods (list)
        _items = []
        if self.deny_maintenance_periods:
            for _item_deny_maintenance_periods in self.deny_maintenance_periods:
                if _item_deny_maintenance_periods:
                    _items.append(_item_deny_maintenance_periods.to_dict())
            _dict['denyMaintenancePeriods'] = _items
        # override the default output from pydantic by calling `to_dict()` of window
        if self.window:
            _dict['window'] = self.window.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of UpdatePolicy from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "channel": obj.get("channel"),
            "denyMaintenancePeriods": [DenyMaintenancePeriod.from_dict(_item) for _item in obj["denyMaintenancePeriods"]] if obj.get("denyMaintenancePeriods") is not None else None,
            "window": MaintenanceWindow.from_dict(obj["window"]) if obj.get("window") is not None else None
        })
        return _obj



# coding: utf-8

"""
    Connectors API

    Enables users to create and manage connections to Google Cloud services and third-party business applications using the Connectors interface.

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class JsonSchema(BaseModel):
    """
    JsonSchema representation of schema metadata
    """ # noqa: E501
    additional_details: Optional[Dict[str, Any]] = Field(default=None, description="Additional details apart from standard json schema fields, this gives flexibility to store metadata about the schema", alias="additionalDetails")
    description: Optional[StrictStr] = Field(default=None, description="A description of this schema.")
    enum: Optional[List[Any]] = Field(default=None, description="Possible values for an enumeration. This works in conjunction with `type` to represent types with a fixed set of legal values")
    format: Optional[StrictStr] = Field(default=None, description="Format of the value as per https://json-schema.org/understanding-json-schema/reference/string.html#format")
    items: Optional[JsonSchema] = None
    jdbc_type: Optional[StrictStr] = Field(default=None, description="JDBC datatype of the field.", alias="jdbcType")
    properties: Optional[Dict[str, JsonSchema]] = Field(default=None, description="The child schemas, applicable only if this is of type `object`. The key is the name of the property and the value is the json schema that describes that property")
    required: Optional[List[StrictStr]] = Field(default=None, description="Whether this property is required.")
    type: Optional[List[StrictStr]] = Field(default=None, description="JSON Schema Validation: A Vocabulary for Structural Validation of JSON")
    __properties: ClassVar[List[str]] = ["additionalDetails", "description", "enum", "format", "items", "jdbcType", "properties", "required", "type"]

    @field_validator('jdbc_type')
    def jdbc_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['DATA_TYPE_UNSPECIFIED', 'INT', 'SMALLINT', 'DOUBLE', 'DATE', 'DATETIME', 'TIME', 'STRING', 'LONG', 'BOOLEAN', 'DECIMAL', 'UUID', 'BLOB', 'BIT', 'TINYINT', 'INTEGER', 'BIGINT', 'FLOAT', 'REAL', 'NUMERIC', 'CHAR', 'VARCHAR', 'LONGVARCHAR', 'TIMESTAMP', 'NCHAR', 'NVARCHAR', 'LONGNVARCHAR', 'NULL', 'OTHER', 'JAVA_OBJECT', 'DISTINCT', 'STRUCT', 'ARRAY', 'CLOB', 'REF', 'DATALINK', 'ROWID', 'BINARY', 'VARBINARY', 'LONGVARBINARY', 'NCLOB', 'SQLXML', 'REF_CURSOR', 'TIME_WITH_TIMEZONE', 'TIMESTAMP_WITH_TIMEZONE']):
            raise ValueError("must be one of enum values ('DATA_TYPE_UNSPECIFIED', 'INT', 'SMALLINT', 'DOUBLE', 'DATE', 'DATETIME', 'TIME', 'STRING', 'LONG', 'BOOLEAN', 'DECIMAL', 'UUID', 'BLOB', 'BIT', 'TINYINT', 'INTEGER', 'BIGINT', 'FLOAT', 'REAL', 'NUMERIC', 'CHAR', 'VARCHAR', 'LONGVARCHAR', 'TIMESTAMP', 'NCHAR', 'NVARCHAR', 'LONGNVARCHAR', 'NULL', 'OTHER', 'JAVA_OBJECT', 'DISTINCT', 'STRUCT', 'ARRAY', 'CLOB', 'REF', 'DATALINK', 'ROWID', 'BINARY', 'VARBINARY', 'LONGVARBINARY', 'NCLOB', 'SQLXML', 'REF_CURSOR', 'TIME_WITH_TIMEZONE', 'TIMESTAMP_WITH_TIMEZONE')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of JsonSchema from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of items
        if self.items:
            _dict['items'] = self.items.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each value in properties (dict)
        _field_dict = {}
        if self.properties:
            for _key_properties in self.properties:
                if self.properties[_key_properties]:
                    _field_dict[_key_properties] = self.properties[_key_properties].to_dict()
            _dict['properties'] = _field_dict
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of JsonSchema from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "additionalDetails": obj.get("additionalDetails"),
            "description": obj.get("description"),
            "enum": obj.get("enum"),
            "format": obj.get("format"),
            "items": JsonSchema.from_dict(obj["items"]) if obj.get("items") is not None else None,
            "jdbcType": obj.get("jdbcType"),
            "properties": dict(
                (_k, JsonSchema.from_dict(_v))
                for _k, _v in obj["properties"].items()
            )
            if obj.get("properties") is not None
            else None,
            "required": obj.get("required"),
            "type": obj.get("type")
        })
        return _obj

# TODO: Rewrite to not use raise_errors
JsonSchema.model_rebuild(raise_errors=False)


# coding: utf-8

"""
    Connectors API

    Enables users to create and manage connections to Google Cloud services and third-party business applications using the Connectors interface.

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.result_metadata import ResultMetadata

class TestResultMetadata(unittest.TestCase):
    """ResultMetadata unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> ResultMetadata:
        """Test ResultMetadata
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `ResultMetadata`
        """
        model = ResultMetadata()
        if include_optional:
            return ResultMetadata(
                data_type = 'DATA_TYPE_UNSPECIFIED',
                description = '',
                json_schema = openapi_client.models.json_schema.JsonSchema(
                    additional_details = {
                        'key' : null
                        }, 
                    description = '', 
                    enum = [
                        null
                        ], 
                    format = '', 
                    items = openapi_client.models.json_schema.JsonSchema(
                        description = '', 
                        format = '', 
                        jdbc_type = 'DATA_TYPE_UNSPECIFIED', 
                        properties = {
                            'key' : 
                            }, 
                        required = [
                            ''
                            ], 
                        type = [
                            ''
                            ], ), 
                    jdbc_type = 'DATA_TYPE_UNSPECIFIED', 
                    properties = {
                        'key' : 
                        }, 
                    required = [
                        ''
                        ], 
                    type = [
                        ''
                        ], ),
                name = ''
            )
        else:
            return ResultMetadata(
        )
        """

    def testResultMetadata(self):
        """Test ResultMetadata"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

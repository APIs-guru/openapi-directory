# coding: utf-8

"""
    My Business Place Actions API

    The My Business Place Actions API provides an interface for managing place action links of a location on Google. Note - If you have a quota of 0 after enabling the API, please request for GBP API access.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class PlaceActionLink(BaseModel):
    """
    Represents a place action link and its attributes.
    """ # noqa: E501
    create_time: Optional[StrictStr] = Field(default=None, description="Output only. The time when the place action link was created.", alias="createTime")
    is_editable: Optional[StrictBool] = Field(default=None, description="Output only. Indicates whether this link can be edited by the client.", alias="isEditable")
    is_preferred: Optional[StrictBool] = Field(default=None, description="Optional. Whether this link is preferred by the merchant. Only one link can be marked as preferred per place action type at a location. If a future request marks a different link as preferred for the same place action type, then the current preferred link (if any exists) will lose its preference.", alias="isPreferred")
    name: Optional[StrictStr] = Field(default=None, description="Optional. The resource name, in the format `locations/{location_id}/placeActionLinks/{place_action_link_id}`. The name field will only be considered in UpdatePlaceActionLink and DeletePlaceActionLink requests for updating and deleting links respectively. However, it will be ignored in CreatePlaceActionLink request, where `place_action_link_id` will be assigned by the server on successful creation of a new link and returned as part of the response.")
    place_action_type: Optional[StrictStr] = Field(default=None, description="Required. The type of place action that can be performed using this link.", alias="placeActionType")
    provider_type: Optional[StrictStr] = Field(default=None, description="Output only. Specifies the provider type.", alias="providerType")
    update_time: Optional[StrictStr] = Field(default=None, description="Output only. The time when the place action link was last modified.", alias="updateTime")
    uri: Optional[StrictStr] = Field(default=None, description="Required. The link uri. The same uri can be reused for different action types across different locations. However, only one place action link is allowed for each unique combination of (uri, place action type, location).")
    __properties: ClassVar[List[str]] = ["createTime", "isEditable", "isPreferred", "name", "placeActionType", "providerType", "updateTime", "uri"]

    @field_validator('place_action_type')
    def place_action_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['PLACE_ACTION_TYPE_UNSPECIFIED', 'APPOINTMENT', 'ONLINE_APPOINTMENT', 'DINING_RESERVATION', 'FOOD_ORDERING', 'FOOD_DELIVERY', 'FOOD_TAKEOUT', 'SHOP_ONLINE']):
            raise ValueError("must be one of enum values ('PLACE_ACTION_TYPE_UNSPECIFIED', 'APPOINTMENT', 'ONLINE_APPOINTMENT', 'DINING_RESERVATION', 'FOOD_ORDERING', 'FOOD_DELIVERY', 'FOOD_TAKEOUT', 'SHOP_ONLINE')")
        return value

    @field_validator('provider_type')
    def provider_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['PROVIDER_TYPE_UNSPECIFIED', 'MERCHANT', 'AGGREGATOR_3P']):
            raise ValueError("must be one of enum values ('PROVIDER_TYPE_UNSPECIFIED', 'MERCHANT', 'AGGREGATOR_3P')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PlaceActionLink from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "create_time",
            "is_editable",
            "provider_type",
            "update_time",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PlaceActionLink from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "createTime": obj.get("createTime"),
            "isEditable": obj.get("isEditable"),
            "isPreferred": obj.get("isPreferred"),
            "name": obj.get("name"),
            "placeActionType": obj.get("placeActionType"),
            "providerType": obj.get("providerType"),
            "updateTime": obj.get("updateTime"),
            "uri": obj.get("uri")
        })
        return _obj



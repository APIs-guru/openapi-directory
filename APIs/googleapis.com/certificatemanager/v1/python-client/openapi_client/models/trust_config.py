# coding: utf-8

"""
    Certificate Manager API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.trust_store import TrustStore
from typing import Optional, Set
from typing_extensions import Self

class TrustConfig(BaseModel):
    """
    Defines a trust config.
    """ # noqa: E501
    create_time: Optional[StrictStr] = Field(default=None, description="Output only. The creation timestamp of a TrustConfig.", alias="createTime")
    description: Optional[StrictStr] = Field(default=None, description="One or more paragraphs of text description of a TrustConfig.")
    etag: Optional[StrictStr] = Field(default=None, description="This checksum is computed by the server based on the value of other fields, and may be sent on update and delete requests to ensure the client has an up-to-date value before proceeding.")
    labels: Optional[Dict[str, StrictStr]] = Field(default=None, description="Set of labels associated with a TrustConfig.")
    name: Optional[StrictStr] = Field(default=None, description="A user-defined name of the trust config. TrustConfig names must be unique globally and match pattern `projects/*/locations/*/trustConfigs/*`.")
    trust_stores: Optional[List[TrustStore]] = Field(default=None, description="Set of trust stores to perform validation against. This field is supported when TrustConfig is configured with Load Balancers, currently not supported for SPIFFE certificate validation. Only one TrustStore specified is currently allowed.", alias="trustStores")
    update_time: Optional[StrictStr] = Field(default=None, description="Output only. The last update timestamp of a TrustConfig.", alias="updateTime")
    __properties: ClassVar[List[str]] = ["createTime", "description", "etag", "labels", "name", "trustStores", "updateTime"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of TrustConfig from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "create_time",
            "update_time",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in trust_stores (list)
        _items = []
        if self.trust_stores:
            for _item_trust_stores in self.trust_stores:
                if _item_trust_stores:
                    _items.append(_item_trust_stores.to_dict())
            _dict['trustStores'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of TrustConfig from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "createTime": obj.get("createTime"),
            "description": obj.get("description"),
            "etag": obj.get("etag"),
            "labels": obj.get("labels"),
            "name": obj.get("name"),
            "trustStores": [TrustStore.from_dict(_item) for _item in obj["trustStores"]] if obj.get("trustStores") is not None else None,
            "updateTime": obj.get("updateTime")
        })
        return _obj



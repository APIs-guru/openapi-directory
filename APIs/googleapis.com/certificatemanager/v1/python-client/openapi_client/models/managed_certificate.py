# coding: utf-8

"""
    Certificate Manager API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.authorization_attempt_info import AuthorizationAttemptInfo
from openapi_client.models.provisioning_issue import ProvisioningIssue
from typing import Optional, Set
from typing_extensions import Self

class ManagedCertificate(BaseModel):
    """
    Configuration and state of a Managed Certificate. Certificate Manager provisions and renews Managed Certificates automatically, for as long as it's authorized to do so.
    """ # noqa: E501
    authorization_attempt_info: Optional[List[AuthorizationAttemptInfo]] = Field(default=None, description="Output only. Detailed state of the latest authorization attempt for each domain specified for managed certificate resource.", alias="authorizationAttemptInfo")
    dns_authorizations: Optional[List[StrictStr]] = Field(default=None, description="Immutable. Authorizations that will be used for performing domain authorization.", alias="dnsAuthorizations")
    domains: Optional[List[StrictStr]] = Field(default=None, description="Immutable. The domains for which a managed SSL certificate will be generated. Wildcard domains are only supported with DNS challenge resolution.")
    issuance_config: Optional[StrictStr] = Field(default=None, description="Immutable. The resource name for a CertificateIssuanceConfig used to configure private PKI certificates in the format `projects/*/locations/*/certificateIssuanceConfigs/*`. If this field is not set, the certificates will instead be publicly signed as documented at https://cloud.google.com/load-balancing/docs/ssl-certificates/google-managed-certs#caa.", alias="issuanceConfig")
    provisioning_issue: Optional[ProvisioningIssue] = Field(default=None, alias="provisioningIssue")
    state: Optional[StrictStr] = Field(default=None, description="Output only. State of the managed certificate resource.")
    __properties: ClassVar[List[str]] = ["authorizationAttemptInfo", "dnsAuthorizations", "domains", "issuanceConfig", "provisioningIssue", "state"]

    @field_validator('state')
    def state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['STATE_UNSPECIFIED', 'PROVISIONING', 'FAILED', 'ACTIVE']):
            raise ValueError("must be one of enum values ('STATE_UNSPECIFIED', 'PROVISIONING', 'FAILED', 'ACTIVE')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ManagedCertificate from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "authorization_attempt_info",
            "state",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in authorization_attempt_info (list)
        _items = []
        if self.authorization_attempt_info:
            for _item_authorization_attempt_info in self.authorization_attempt_info:
                if _item_authorization_attempt_info:
                    _items.append(_item_authorization_attempt_info.to_dict())
            _dict['authorizationAttemptInfo'] = _items
        # override the default output from pydantic by calling `to_dict()` of provisioning_issue
        if self.provisioning_issue:
            _dict['provisioningIssue'] = self.provisioning_issue.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ManagedCertificate from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "authorizationAttemptInfo": [AuthorizationAttemptInfo.from_dict(_item) for _item in obj["authorizationAttemptInfo"]] if obj.get("authorizationAttemptInfo") is not None else None,
            "dnsAuthorizations": obj.get("dnsAuthorizations"),
            "domains": obj.get("domains"),
            "issuanceConfig": obj.get("issuanceConfig"),
            "provisioningIssue": ProvisioningIssue.from_dict(obj["provisioningIssue"]) if obj.get("provisioningIssue") is not None else None,
            "state": obj.get("state")
        })
        return _obj



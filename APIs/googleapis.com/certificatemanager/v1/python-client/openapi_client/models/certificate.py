# coding: utf-8

"""
    Certificate Manager API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.managed_certificate import ManagedCertificate
from openapi_client.models.self_managed_certificate import SelfManagedCertificate
from typing import Optional, Set
from typing_extensions import Self

class Certificate(BaseModel):
    """
    Defines TLS certificate.
    """ # noqa: E501
    create_time: Optional[StrictStr] = Field(default=None, description="Output only. The creation timestamp of a Certificate.", alias="createTime")
    description: Optional[StrictStr] = Field(default=None, description="One or more paragraphs of text description of a certificate.")
    expire_time: Optional[StrictStr] = Field(default=None, description="Output only. The expiry timestamp of a Certificate.", alias="expireTime")
    labels: Optional[Dict[str, StrictStr]] = Field(default=None, description="Set of labels associated with a Certificate.")
    managed: Optional[ManagedCertificate] = None
    name: Optional[StrictStr] = Field(default=None, description="A user-defined name of the certificate. Certificate names must be unique globally and match pattern `projects/*/locations/*/certificates/*`.")
    pem_certificate: Optional[StrictStr] = Field(default=None, description="Output only. The PEM-encoded certificate chain.", alias="pemCertificate")
    san_dnsnames: Optional[List[StrictStr]] = Field(default=None, description="Output only. The list of Subject Alternative Names of dnsName type defined in the certificate (see RFC 5280 4.2.1.6). Managed certificates that haven't been provisioned yet have this field populated with a value of the managed.domains field.", alias="sanDnsnames")
    scope: Optional[StrictStr] = Field(default=None, description="Immutable. The scope of the certificate.")
    self_managed: Optional[SelfManagedCertificate] = Field(default=None, alias="selfManaged")
    update_time: Optional[StrictStr] = Field(default=None, description="Output only. The last update timestamp of a Certificate.", alias="updateTime")
    __properties: ClassVar[List[str]] = ["createTime", "description", "expireTime", "labels", "managed", "name", "pemCertificate", "sanDnsnames", "scope", "selfManaged", "updateTime"]

    @field_validator('scope')
    def scope_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['DEFAULT', 'EDGE_CACHE', 'ALL_REGIONS']):
            raise ValueError("must be one of enum values ('DEFAULT', 'EDGE_CACHE', 'ALL_REGIONS')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Certificate from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "create_time",
            "expire_time",
            "pem_certificate",
            "san_dnsnames",
            "update_time",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of managed
        if self.managed:
            _dict['managed'] = self.managed.to_dict()
        # override the default output from pydantic by calling `to_dict()` of self_managed
        if self.self_managed:
            _dict['selfManaged'] = self.self_managed.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Certificate from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "createTime": obj.get("createTime"),
            "description": obj.get("description"),
            "expireTime": obj.get("expireTime"),
            "labels": obj.get("labels"),
            "managed": ManagedCertificate.from_dict(obj["managed"]) if obj.get("managed") is not None else None,
            "name": obj.get("name"),
            "pemCertificate": obj.get("pemCertificate"),
            "sanDnsnames": obj.get("sanDnsnames"),
            "scope": obj.get("scope"),
            "selfManaged": SelfManagedCertificate.from_dict(obj["selfManaged"]) if obj.get("selfManaged") is not None else None,
            "updateTime": obj.get("updateTime")
        })
        return _obj



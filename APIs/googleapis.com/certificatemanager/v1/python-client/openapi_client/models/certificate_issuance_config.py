# coding: utf-8

"""
    Certificate Manager API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.certificate_authority_config import CertificateAuthorityConfig
from typing import Optional, Set
from typing_extensions import Self

class CertificateIssuanceConfig(BaseModel):
    """
    CertificateIssuanceConfig specifies how to issue and manage a certificate.
    """ # noqa: E501
    certificate_authority_config: Optional[CertificateAuthorityConfig] = Field(default=None, alias="certificateAuthorityConfig")
    create_time: Optional[StrictStr] = Field(default=None, description="Output only. The creation timestamp of a CertificateIssuanceConfig.", alias="createTime")
    description: Optional[StrictStr] = Field(default=None, description="One or more paragraphs of text description of a CertificateIssuanceConfig.")
    key_algorithm: Optional[StrictStr] = Field(default=None, description="Required. The key algorithm to use when generating the private key.", alias="keyAlgorithm")
    labels: Optional[Dict[str, StrictStr]] = Field(default=None, description="Set of labels associated with a CertificateIssuanceConfig.")
    lifetime: Optional[StrictStr] = Field(default=None, description="Required. Workload certificate lifetime requested.")
    name: Optional[StrictStr] = Field(default=None, description="A user-defined name of the certificate issuance config. CertificateIssuanceConfig names must be unique globally and match pattern `projects/*/locations/*/certificateIssuanceConfigs/*`.")
    rotation_window_percentage: Optional[StrictInt] = Field(default=None, description="Required. Specifies the percentage of elapsed time of the certificate lifetime to wait before renewing the certificate. Must be a number between 1-99, inclusive.", alias="rotationWindowPercentage")
    update_time: Optional[StrictStr] = Field(default=None, description="Output only. The last update timestamp of a CertificateIssuanceConfig.", alias="updateTime")
    __properties: ClassVar[List[str]] = ["certificateAuthorityConfig", "createTime", "description", "keyAlgorithm", "labels", "lifetime", "name", "rotationWindowPercentage", "updateTime"]

    @field_validator('key_algorithm')
    def key_algorithm_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['KEY_ALGORITHM_UNSPECIFIED', 'RSA_2048', 'ECDSA_P256']):
            raise ValueError("must be one of enum values ('KEY_ALGORITHM_UNSPECIFIED', 'RSA_2048', 'ECDSA_P256')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CertificateIssuanceConfig from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "create_time",
            "update_time",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of certificate_authority_config
        if self.certificate_authority_config:
            _dict['certificateAuthorityConfig'] = self.certificate_authority_config.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CertificateIssuanceConfig from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "certificateAuthorityConfig": CertificateAuthorityConfig.from_dict(obj["certificateAuthorityConfig"]) if obj.get("certificateAuthorityConfig") is not None else None,
            "createTime": obj.get("createTime"),
            "description": obj.get("description"),
            "keyAlgorithm": obj.get("keyAlgorithm"),
            "labels": obj.get("labels"),
            "lifetime": obj.get("lifetime"),
            "name": obj.get("name"),
            "rotationWindowPercentage": obj.get("rotationWindowPercentage"),
            "updateTime": obj.get("updateTime")
        })
        return _obj



# coding: utf-8

"""
    Cloud Debugger API (Deprecated)

    Examines the call stack and variables of a running application without stopping or slowing it down. (Deprecated) 

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.format_message import FormatMessage
from typing import Optional, Set
from typing_extensions import Self

class StatusMessage(BaseModel):
    """
    Represents a contextual status message. The message can indicate an error or informational status, and refer to specific parts of the containing object. For example, the `Breakpoint.status` field can indicate an error referring to the `BREAKPOINT_SOURCE_LOCATION` with the message `Location not found`.
    """ # noqa: E501
    description: Optional[FormatMessage] = None
    is_error: Optional[StrictBool] = Field(default=None, description="Distinguishes errors from informational messages.", alias="isError")
    refers_to: Optional[StrictStr] = Field(default=None, description="Reference to which the message applies.", alias="refersTo")
    __properties: ClassVar[List[str]] = ["description", "isError", "refersTo"]

    @field_validator('refers_to')
    def refers_to_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['UNSPECIFIED', 'BREAKPOINT_SOURCE_LOCATION', 'BREAKPOINT_CONDITION', 'BREAKPOINT_EXPRESSION', 'BREAKPOINT_AGE', 'BREAKPOINT_CANARY_FAILED', 'VARIABLE_NAME', 'VARIABLE_VALUE']):
            raise ValueError("must be one of enum values ('UNSPECIFIED', 'BREAKPOINT_SOURCE_LOCATION', 'BREAKPOINT_CONDITION', 'BREAKPOINT_EXPRESSION', 'BREAKPOINT_AGE', 'BREAKPOINT_CANARY_FAILED', 'VARIABLE_NAME', 'VARIABLE_VALUE')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of StatusMessage from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of description
        if self.description:
            _dict['description'] = self.description.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of StatusMessage from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "description": FormatMessage.from_dict(obj["description"]) if obj.get("description") is not None else None,
            "isError": obj.get("isError"),
            "refersTo": obj.get("refersTo")
        })
        return _obj



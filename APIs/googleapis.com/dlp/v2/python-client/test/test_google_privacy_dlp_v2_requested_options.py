# coding: utf-8

"""
    Sensitive Data Protection (DLP)

    Discover and protect your sensitive data. A fully managed service designed to help you discover, classify, and protect your valuable data assets with ease.

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.google_privacy_dlp_v2_requested_options import GooglePrivacyDlpV2RequestedOptions

class TestGooglePrivacyDlpV2RequestedOptions(unittest.TestCase):
    """GooglePrivacyDlpV2RequestedOptions unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> GooglePrivacyDlpV2RequestedOptions:
        """Test GooglePrivacyDlpV2RequestedOptions
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `GooglePrivacyDlpV2RequestedOptions`
        """
        model = GooglePrivacyDlpV2RequestedOptions()
        if include_optional:
            return GooglePrivacyDlpV2RequestedOptions(
                job_config = openapi_client.models.google_privacy_dlp_v2_inspect_job_config.GooglePrivacyDlpV2InspectJobConfig(
                    actions = [
                        openapi_client.models.google_privacy_dlp_v2_action.GooglePrivacyDlpV2Action(
                            deidentify = openapi_client.models.google_privacy_dlp_v2_deidentify.GooglePrivacyDlpV2Deidentify(
                                cloud_storage_output = '', 
                                file_types_to_transform = [
                                    'FILE_TYPE_UNSPECIFIED'
                                    ], 
                                transformation_config = openapi_client.models.google_privacy_dlp_v2_transformation_config.GooglePrivacyDlpV2TransformationConfig(
                                    deidentify_template = '', 
                                    image_redact_template = '', 
                                    structured_deidentify_template = '', ), 
                                transformation_details_storage_config = openapi_client.models.google_privacy_dlp_v2_transformation_details_storage_config.GooglePrivacyDlpV2TransformationDetailsStorageConfig(
                                    table = openapi_client.models.google_privacy_dlp_v2_big_query_table.GooglePrivacyDlpV2BigQueryTable(
                                        dataset_id = '', 
                                        project_id = '', 
                                        table_id = '', ), ), ), 
                            job_notification_emails = openapi_client.models.job_notification_emails.jobNotificationEmails(), 
                            pub_sub = openapi_client.models.google_privacy_dlp_v2_publish_to_pub_sub.GooglePrivacyDlpV2PublishToPubSub(
                                topic = '', ), 
                            publish_findings_to_cloud_data_catalog = openapi_client.models.publish_findings_to_cloud_data_catalog.publishFindingsToCloudDataCatalog(), 
                            publish_summary_to_cscc = openapi_client.models.publish_summary_to_cscc.publishSummaryToCscc(), 
                            publish_to_stackdriver = openapi_client.models.publish_to_stackdriver.publishToStackdriver(), 
                            save_findings = openapi_client.models.google_privacy_dlp_v2_save_findings.GooglePrivacyDlpV2SaveFindings(
                                output_config = openapi_client.models.google_privacy_dlp_v2_output_storage_config.GooglePrivacyDlpV2OutputStorageConfig(
                                    output_schema = 'OUTPUT_SCHEMA_UNSPECIFIED', ), ), )
                        ], 
                    inspect_config = openapi_client.models.google_privacy_dlp_v2_inspect_config.GooglePrivacyDlpV2InspectConfig(
                        content_options = [
                            'CONTENT_UNSPECIFIED'
                            ], 
                        custom_info_types = [
                            openapi_client.models.google_privacy_dlp_v2_custom_info_type.GooglePrivacyDlpV2CustomInfoType(
                                detection_rules = [
                                    openapi_client.models.google_privacy_dlp_v2_detection_rule.GooglePrivacyDlpV2DetectionRule(
                                        hotword_rule = openapi_client.models.google_privacy_dlp_v2_hotword_rule.GooglePrivacyDlpV2HotwordRule(
                                            hotword_regex = openapi_client.models.google_privacy_dlp_v2_regex.GooglePrivacyDlpV2Regex(
                                                group_indexes = [
                                                    56
                                                    ], 
                                                pattern = '', ), 
                                            likelihood_adjustment = openapi_client.models.google_privacy_dlp_v2_likelihood_adjustment.GooglePrivacyDlpV2LikelihoodAdjustment(
                                                fixed_likelihood = 'LIKELIHOOD_UNSPECIFIED', 
                                                relative_likelihood = 56, ), 
                                            proximity = openapi_client.models.google_privacy_dlp_v2_proximity.GooglePrivacyDlpV2Proximity(
                                                window_after = 56, 
                                                window_before = 56, ), ), )
                                    ], 
                                dictionary = openapi_client.models.google_privacy_dlp_v2_dictionary.GooglePrivacyDlpV2Dictionary(
                                    cloud_storage_path = openapi_client.models.google_privacy_dlp_v2_cloud_storage_path.GooglePrivacyDlpV2CloudStoragePath(
                                        path = '', ), 
                                    word_list = openapi_client.models.google_privacy_dlp_v2_word_list.GooglePrivacyDlpV2WordList(
                                        words = [
                                            ''
                                            ], ), ), 
                                exclusion_type = 'EXCLUSION_TYPE_UNSPECIFIED', 
                                info_type = openapi_client.models.google_privacy_dlp_v2_info_type.GooglePrivacyDlpV2InfoType(
                                    name = '', 
                                    sensitivity_score = openapi_client.models.google_privacy_dlp_v2_sensitivity_score.GooglePrivacyDlpV2SensitivityScore(
                                        score = 'SENSITIVITY_SCORE_UNSPECIFIED', ), 
                                    version = '', ), 
                                likelihood = 'LIKELIHOOD_UNSPECIFIED', 
                                regex = openapi_client.models.google_privacy_dlp_v2_regex.GooglePrivacyDlpV2Regex(
                                    pattern = '', ), 
                                sensitivity_score = openapi_client.models.google_privacy_dlp_v2_sensitivity_score.GooglePrivacyDlpV2SensitivityScore(
                                    score = 'SENSITIVITY_SCORE_UNSPECIFIED', ), 
                                stored_type = openapi_client.models.google_privacy_dlp_v2_stored_type.GooglePrivacyDlpV2StoredType(
                                    create_time = '', 
                                    name = '', ), 
                                surrogate_type = openapi_client.models.google_privacy_dlp_v2_surrogate_type.GooglePrivacyDlpV2SurrogateType(), )
                            ], 
                        exclude_info_types = True, 
                        include_quote = True, 
                        info_types = [
                            openapi_client.models.google_privacy_dlp_v2_info_type.GooglePrivacyDlpV2InfoType(
                                name = '', 
                                version = '', )
                            ], 
                        limits = openapi_client.models.google_privacy_dlp_v2_finding_limits.GooglePrivacyDlpV2FindingLimits(
                            max_findings_per_info_type = [
                                openapi_client.models.google_privacy_dlp_v2_info_type_limit.GooglePrivacyDlpV2InfoTypeLimit(
                                    max_findings = 56, )
                                ], 
                            max_findings_per_item = 56, 
                            max_findings_per_request = 56, ), 
                        min_likelihood = 'LIKELIHOOD_UNSPECIFIED', 
                        min_likelihood_per_info_type = [
                            openapi_client.models.google_privacy_dlp_v2_info_type_likelihood.GooglePrivacyDlpV2InfoTypeLikelihood(
                                min_likelihood = 'LIKELIHOOD_UNSPECIFIED', )
                            ], 
                        rule_set = [
                            openapi_client.models.google_privacy_dlp_v2_inspection_rule_set.GooglePrivacyDlpV2InspectionRuleSet(
                                rules = [
                                    openapi_client.models.google_privacy_dlp_v2_inspection_rule.GooglePrivacyDlpV2InspectionRule(
                                        exclusion_rule = openapi_client.models.google_privacy_dlp_v2_exclusion_rule.GooglePrivacyDlpV2ExclusionRule(
                                            exclude_by_hotword = openapi_client.models.google_privacy_dlp_v2_exclude_by_hotword.GooglePrivacyDlpV2ExcludeByHotword(), 
                                            exclude_info_types = openapi_client.models.google_privacy_dlp_v2_exclude_info_types.GooglePrivacyDlpV2ExcludeInfoTypes(), 
                                            matching_type = 'MATCHING_TYPE_UNSPECIFIED', ), )
                                    ], )
                            ], ), 
                    inspect_template_name = '', 
                    storage_config = openapi_client.models.google_privacy_dlp_v2_storage_config.GooglePrivacyDlpV2StorageConfig(
                        big_query_options = openapi_client.models.google_privacy_dlp_v2_big_query_options.GooglePrivacyDlpV2BigQueryOptions(
                            excluded_fields = [
                                openapi_client.models.google_privacy_dlp_v2_field_id.GooglePrivacyDlpV2FieldId(
                                    name = '', )
                                ], 
                            identifying_fields = [
                                openapi_client.models.google_privacy_dlp_v2_field_id.GooglePrivacyDlpV2FieldId(
                                    name = '', )
                                ], 
                            included_fields = [
                                
                                ], 
                            rows_limit = '', 
                            rows_limit_percent = 56, 
                            sample_method = 'SAMPLE_METHOD_UNSPECIFIED', 
                            table_reference = openapi_client.models.google_privacy_dlp_v2_big_query_table.GooglePrivacyDlpV2BigQueryTable(
                                dataset_id = '', 
                                project_id = '', 
                                table_id = '', ), ), 
                        cloud_storage_options = openapi_client.models.google_privacy_dlp_v2_cloud_storage_options.GooglePrivacyDlpV2CloudStorageOptions(
                            bytes_limit_per_file = '', 
                            bytes_limit_per_file_percent = 56, 
                            file_set = openapi_client.models.google_privacy_dlp_v2_file_set.GooglePrivacyDlpV2FileSet(
                                regex_file_set = openapi_client.models.google_privacy_dlp_v2_cloud_storage_regex_file_set.GooglePrivacyDlpV2CloudStorageRegexFileSet(
                                    bucket_name = '', 
                                    exclude_regex = [
                                        ''
                                        ], 
                                    include_regex = [
                                        ''
                                        ], ), 
                                url = '', ), 
                            file_types = [
                                'FILE_TYPE_UNSPECIFIED'
                                ], 
                            files_limit_percent = 56, 
                            sample_method = 'SAMPLE_METHOD_UNSPECIFIED', ), 
                        datastore_options = openapi_client.models.google_privacy_dlp_v2_datastore_options.GooglePrivacyDlpV2DatastoreOptions(
                            kind = openapi_client.models.google_privacy_dlp_v2_kind_expression.GooglePrivacyDlpV2KindExpression(
                                name = '', ), 
                            partition_id = openapi_client.models.google_privacy_dlp_v2_partition_id.GooglePrivacyDlpV2PartitionId(
                                namespace_id = '', 
                                project_id = '', ), ), 
                        hybrid_options = openapi_client.models.google_privacy_dlp_v2_hybrid_options.GooglePrivacyDlpV2HybridOptions(
                            description = '', 
                            labels = {
                                'key' : ''
                                }, 
                            required_finding_label_keys = [
                                ''
                                ], 
                            table_options = openapi_client.models.google_privacy_dlp_v2_table_options.GooglePrivacyDlpV2TableOptions(), ), 
                        timespan_config = openapi_client.models.google_privacy_dlp_v2_timespan_config.GooglePrivacyDlpV2TimespanConfig(
                            enable_auto_population_of_timespan_config = True, 
                            end_time = '', 
                            start_time = '', 
                            timestamp_field = , ), ), ),
                snapshot_inspect_template = openapi_client.models.google_privacy_dlp_v2_inspect_template.GooglePrivacyDlpV2InspectTemplate(
                    create_time = '', 
                    description = '', 
                    display_name = '', 
                    inspect_config = openapi_client.models.google_privacy_dlp_v2_inspect_config.GooglePrivacyDlpV2InspectConfig(
                        content_options = [
                            'CONTENT_UNSPECIFIED'
                            ], 
                        custom_info_types = [
                            openapi_client.models.google_privacy_dlp_v2_custom_info_type.GooglePrivacyDlpV2CustomInfoType(
                                detection_rules = [
                                    openapi_client.models.google_privacy_dlp_v2_detection_rule.GooglePrivacyDlpV2DetectionRule(
                                        hotword_rule = openapi_client.models.google_privacy_dlp_v2_hotword_rule.GooglePrivacyDlpV2HotwordRule(
                                            hotword_regex = openapi_client.models.google_privacy_dlp_v2_regex.GooglePrivacyDlpV2Regex(
                                                group_indexes = [
                                                    56
                                                    ], 
                                                pattern = '', ), 
                                            likelihood_adjustment = openapi_client.models.google_privacy_dlp_v2_likelihood_adjustment.GooglePrivacyDlpV2LikelihoodAdjustment(
                                                fixed_likelihood = 'LIKELIHOOD_UNSPECIFIED', 
                                                relative_likelihood = 56, ), 
                                            proximity = openapi_client.models.google_privacy_dlp_v2_proximity.GooglePrivacyDlpV2Proximity(
                                                window_after = 56, 
                                                window_before = 56, ), ), )
                                    ], 
                                dictionary = openapi_client.models.google_privacy_dlp_v2_dictionary.GooglePrivacyDlpV2Dictionary(
                                    cloud_storage_path = openapi_client.models.google_privacy_dlp_v2_cloud_storage_path.GooglePrivacyDlpV2CloudStoragePath(
                                        path = '', ), 
                                    word_list = openapi_client.models.google_privacy_dlp_v2_word_list.GooglePrivacyDlpV2WordList(
                                        words = [
                                            ''
                                            ], ), ), 
                                exclusion_type = 'EXCLUSION_TYPE_UNSPECIFIED', 
                                info_type = openapi_client.models.google_privacy_dlp_v2_info_type.GooglePrivacyDlpV2InfoType(
                                    name = '', 
                                    sensitivity_score = openapi_client.models.google_privacy_dlp_v2_sensitivity_score.GooglePrivacyDlpV2SensitivityScore(
                                        score = 'SENSITIVITY_SCORE_UNSPECIFIED', ), 
                                    version = '', ), 
                                likelihood = 'LIKELIHOOD_UNSPECIFIED', 
                                regex = openapi_client.models.google_privacy_dlp_v2_regex.GooglePrivacyDlpV2Regex(
                                    pattern = '', ), 
                                sensitivity_score = openapi_client.models.google_privacy_dlp_v2_sensitivity_score.GooglePrivacyDlpV2SensitivityScore(
                                    score = 'SENSITIVITY_SCORE_UNSPECIFIED', ), 
                                stored_type = openapi_client.models.google_privacy_dlp_v2_stored_type.GooglePrivacyDlpV2StoredType(
                                    create_time = '', 
                                    name = '', ), 
                                surrogate_type = openapi_client.models.google_privacy_dlp_v2_surrogate_type.GooglePrivacyDlpV2SurrogateType(), )
                            ], 
                        exclude_info_types = True, 
                        include_quote = True, 
                        info_types = [
                            openapi_client.models.google_privacy_dlp_v2_info_type.GooglePrivacyDlpV2InfoType(
                                name = '', 
                                version = '', )
                            ], 
                        limits = openapi_client.models.google_privacy_dlp_v2_finding_limits.GooglePrivacyDlpV2FindingLimits(
                            max_findings_per_info_type = [
                                openapi_client.models.google_privacy_dlp_v2_info_type_limit.GooglePrivacyDlpV2InfoTypeLimit(
                                    max_findings = 56, )
                                ], 
                            max_findings_per_item = 56, 
                            max_findings_per_request = 56, ), 
                        min_likelihood = 'LIKELIHOOD_UNSPECIFIED', 
                        min_likelihood_per_info_type = [
                            openapi_client.models.google_privacy_dlp_v2_info_type_likelihood.GooglePrivacyDlpV2InfoTypeLikelihood(
                                min_likelihood = 'LIKELIHOOD_UNSPECIFIED', )
                            ], 
                        rule_set = [
                            openapi_client.models.google_privacy_dlp_v2_inspection_rule_set.GooglePrivacyDlpV2InspectionRuleSet(
                                rules = [
                                    openapi_client.models.google_privacy_dlp_v2_inspection_rule.GooglePrivacyDlpV2InspectionRule(
                                        exclusion_rule = openapi_client.models.google_privacy_dlp_v2_exclusion_rule.GooglePrivacyDlpV2ExclusionRule(
                                            exclude_by_hotword = openapi_client.models.google_privacy_dlp_v2_exclude_by_hotword.GooglePrivacyDlpV2ExcludeByHotword(), 
                                            exclude_info_types = openapi_client.models.google_privacy_dlp_v2_exclude_info_types.GooglePrivacyDlpV2ExcludeInfoTypes(), 
                                            matching_type = 'MATCHING_TYPE_UNSPECIFIED', ), )
                                    ], )
                            ], ), 
                    name = '', 
                    update_time = '', )
            )
        else:
            return GooglePrivacyDlpV2RequestedOptions(
        )
        """

    def testGooglePrivacyDlpV2RequestedOptions(self):
        """Test GooglePrivacyDlpV2RequestedOptions"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

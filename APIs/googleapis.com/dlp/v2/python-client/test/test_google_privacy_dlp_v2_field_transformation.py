# coding: utf-8

"""
    Sensitive Data Protection (DLP)

    Discover and protect your sensitive data. A fully managed service designed to help you discover, classify, and protect your valuable data assets with ease.

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.google_privacy_dlp_v2_field_transformation import GooglePrivacyDlpV2FieldTransformation

class TestGooglePrivacyDlpV2FieldTransformation(unittest.TestCase):
    """GooglePrivacyDlpV2FieldTransformation unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> GooglePrivacyDlpV2FieldTransformation:
        """Test GooglePrivacyDlpV2FieldTransformation
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `GooglePrivacyDlpV2FieldTransformation`
        """
        model = GooglePrivacyDlpV2FieldTransformation()
        if include_optional:
            return GooglePrivacyDlpV2FieldTransformation(
                condition = openapi_client.models.google_privacy_dlp_v2_record_condition.GooglePrivacyDlpV2RecordCondition(
                    expressions = openapi_client.models.google_privacy_dlp_v2_expressions.GooglePrivacyDlpV2Expressions(
                        conditions = openapi_client.models.google_privacy_dlp_v2_conditions.GooglePrivacyDlpV2Conditions(), 
                        logical_operator = 'LOGICAL_OPERATOR_UNSPECIFIED', ), ),
                fields = [
                    openapi_client.models.google_privacy_dlp_v2_field_id.GooglePrivacyDlpV2FieldId(
                        name = '', )
                    ],
                info_type_transformations = openapi_client.models.google_privacy_dlp_v2_info_type_transformations.GooglePrivacyDlpV2InfoTypeTransformations(
                    transformations = [
                        openapi_client.models.google_privacy_dlp_v2_info_type_transformation.GooglePrivacyDlpV2InfoTypeTransformation(
                            info_types = [
                                openapi_client.models.google_privacy_dlp_v2_info_type.GooglePrivacyDlpV2InfoType(
                                    name = '', 
                                    sensitivity_score = openapi_client.models.google_privacy_dlp_v2_sensitivity_score.GooglePrivacyDlpV2SensitivityScore(
                                        score = 'SENSITIVITY_SCORE_UNSPECIFIED', ), 
                                    version = '', )
                                ], 
                            primitive_transformation = openapi_client.models.google_privacy_dlp_v2_primitive_transformation.GooglePrivacyDlpV2PrimitiveTransformation(
                                bucketing_config = openapi_client.models.google_privacy_dlp_v2_bucketing_config.GooglePrivacyDlpV2BucketingConfig(
                                    buckets = [
                                        openapi_client.models.google_privacy_dlp_v2_bucket.GooglePrivacyDlpV2Bucket(
                                            max = openapi_client.models.google_privacy_dlp_v2_value.GooglePrivacyDlpV2Value(
                                                boolean_value = True, 
                                                date_value = openapi_client.models.google_type_date.GoogleTypeDate(
                                                    day = 56, 
                                                    month = 56, 
                                                    year = 56, ), 
                                                day_of_week_value = 'DAY_OF_WEEK_UNSPECIFIED', 
                                                float_value = 1.337, 
                                                integer_value = '', 
                                                string_value = '', 
                                                time_value = openapi_client.models.google_type_time_of_day.GoogleTypeTimeOfDay(
                                                    hours = 56, 
                                                    minutes = 56, 
                                                    nanos = 56, 
                                                    seconds = 56, ), 
                                                timestamp_value = '', ), 
                                            min = openapi_client.models.google_privacy_dlp_v2_value.GooglePrivacyDlpV2Value(
                                                boolean_value = True, 
                                                day_of_week_value = 'DAY_OF_WEEK_UNSPECIFIED', 
                                                float_value = 1.337, 
                                                integer_value = '', 
                                                string_value = '', 
                                                timestamp_value = '', ), 
                                            replacement_value = , )
                                        ], ), 
                                character_mask_config = openapi_client.models.google_privacy_dlp_v2_character_mask_config.GooglePrivacyDlpV2CharacterMaskConfig(
                                    characters_to_ignore = [
                                        openapi_client.models.google_privacy_dlp_v2_chars_to_ignore.GooglePrivacyDlpV2CharsToIgnore(
                                            characters_to_skip = '', 
                                            common_characters_to_ignore = 'COMMON_CHARS_TO_IGNORE_UNSPECIFIED', )
                                        ], 
                                    masking_character = '', 
                                    number_to_mask = 56, 
                                    reverse_order = True, ), 
                                crypto_deterministic_config = openapi_client.models.google_privacy_dlp_v2_crypto_deterministic_config.GooglePrivacyDlpV2CryptoDeterministicConfig(
                                    context = openapi_client.models.google_privacy_dlp_v2_field_id.GooglePrivacyDlpV2FieldId(
                                        name = '', ), 
                                    crypto_key = openapi_client.models.google_privacy_dlp_v2_crypto_key.GooglePrivacyDlpV2CryptoKey(
                                        kms_wrapped = openapi_client.models.google_privacy_dlp_v2_kms_wrapped_crypto_key.GooglePrivacyDlpV2KmsWrappedCryptoKey(
                                            crypto_key_name = '', 
                                            wrapped_key = 'YQ==', ), 
                                        transient = openapi_client.models.google_privacy_dlp_v2_transient_crypto_key.GooglePrivacyDlpV2TransientCryptoKey(
                                            name = '', ), 
                                        unwrapped = openapi_client.models.google_privacy_dlp_v2_unwrapped_crypto_key.GooglePrivacyDlpV2UnwrappedCryptoKey(
                                            key = 'YQ==', ), ), 
                                    surrogate_info_type = openapi_client.models.google_privacy_dlp_v2_info_type.GooglePrivacyDlpV2InfoType(
                                        name = '', 
                                        version = '', ), ), 
                                crypto_hash_config = openapi_client.models.google_privacy_dlp_v2_crypto_hash_config.GooglePrivacyDlpV2CryptoHashConfig(), 
                                crypto_replace_ffx_fpe_config = openapi_client.models.google_privacy_dlp_v2_crypto_replace_ffx_fpe_config.GooglePrivacyDlpV2CryptoReplaceFfxFpeConfig(
                                    common_alphabet = 'FFX_COMMON_NATIVE_ALPHABET_UNSPECIFIED', 
                                    custom_alphabet = '', 
                                    radix = 56, ), 
                                date_shift_config = openapi_client.models.google_privacy_dlp_v2_date_shift_config.GooglePrivacyDlpV2DateShiftConfig(
                                    lower_bound_days = 56, 
                                    upper_bound_days = 56, ), 
                                fixed_size_bucketing_config = openapi_client.models.google_privacy_dlp_v2_fixed_size_bucketing_config.GooglePrivacyDlpV2FixedSizeBucketingConfig(
                                    bucket_size = 1.337, 
                                    lower_bound = , 
                                    upper_bound = , ), 
                                redact_config = openapi_client.models.google_privacy_dlp_v2_redact_config.GooglePrivacyDlpV2RedactConfig(), 
                                replace_config = openapi_client.models.google_privacy_dlp_v2_replace_value_config.GooglePrivacyDlpV2ReplaceValueConfig(
                                    new_value = , ), 
                                replace_dictionary_config = openapi_client.models.google_privacy_dlp_v2_replace_dictionary_config.GooglePrivacyDlpV2ReplaceDictionaryConfig(
                                    word_list = openapi_client.models.google_privacy_dlp_v2_word_list.GooglePrivacyDlpV2WordList(
                                        words = [
                                            ''
                                            ], ), ), 
                                replace_with_info_type_config = openapi_client.models.google_privacy_dlp_v2_replace_with_info_type_config.GooglePrivacyDlpV2ReplaceWithInfoTypeConfig(), 
                                time_part_config = openapi_client.models.google_privacy_dlp_v2_time_part_config.GooglePrivacyDlpV2TimePartConfig(
                                    part_to_extract = 'TIME_PART_UNSPECIFIED', ), ), )
                        ], ),
                primitive_transformation = openapi_client.models.google_privacy_dlp_v2_primitive_transformation.GooglePrivacyDlpV2PrimitiveTransformation(
                    bucketing_config = openapi_client.models.google_privacy_dlp_v2_bucketing_config.GooglePrivacyDlpV2BucketingConfig(
                        buckets = [
                            openapi_client.models.google_privacy_dlp_v2_bucket.GooglePrivacyDlpV2Bucket(
                                max = openapi_client.models.google_privacy_dlp_v2_value.GooglePrivacyDlpV2Value(
                                    boolean_value = True, 
                                    date_value = openapi_client.models.google_type_date.GoogleTypeDate(
                                        day = 56, 
                                        month = 56, 
                                        year = 56, ), 
                                    day_of_week_value = 'DAY_OF_WEEK_UNSPECIFIED', 
                                    float_value = 1.337, 
                                    integer_value = '', 
                                    string_value = '', 
                                    time_value = openapi_client.models.google_type_time_of_day.GoogleTypeTimeOfDay(
                                        hours = 56, 
                                        minutes = 56, 
                                        nanos = 56, 
                                        seconds = 56, ), 
                                    timestamp_value = '', ), 
                                min = openapi_client.models.google_privacy_dlp_v2_value.GooglePrivacyDlpV2Value(
                                    boolean_value = True, 
                                    day_of_week_value = 'DAY_OF_WEEK_UNSPECIFIED', 
                                    float_value = 1.337, 
                                    integer_value = '', 
                                    string_value = '', 
                                    timestamp_value = '', ), 
                                replacement_value = , )
                            ], ), 
                    character_mask_config = openapi_client.models.google_privacy_dlp_v2_character_mask_config.GooglePrivacyDlpV2CharacterMaskConfig(
                        characters_to_ignore = [
                            openapi_client.models.google_privacy_dlp_v2_chars_to_ignore.GooglePrivacyDlpV2CharsToIgnore(
                                characters_to_skip = '', 
                                common_characters_to_ignore = 'COMMON_CHARS_TO_IGNORE_UNSPECIFIED', )
                            ], 
                        masking_character = '', 
                        number_to_mask = 56, 
                        reverse_order = True, ), 
                    crypto_deterministic_config = openapi_client.models.google_privacy_dlp_v2_crypto_deterministic_config.GooglePrivacyDlpV2CryptoDeterministicConfig(
                        context = openapi_client.models.google_privacy_dlp_v2_field_id.GooglePrivacyDlpV2FieldId(
                            name = '', ), 
                        crypto_key = openapi_client.models.google_privacy_dlp_v2_crypto_key.GooglePrivacyDlpV2CryptoKey(
                            kms_wrapped = openapi_client.models.google_privacy_dlp_v2_kms_wrapped_crypto_key.GooglePrivacyDlpV2KmsWrappedCryptoKey(
                                crypto_key_name = '', 
                                wrapped_key = 'YQ==', ), 
                            transient = openapi_client.models.google_privacy_dlp_v2_transient_crypto_key.GooglePrivacyDlpV2TransientCryptoKey(
                                name = '', ), 
                            unwrapped = openapi_client.models.google_privacy_dlp_v2_unwrapped_crypto_key.GooglePrivacyDlpV2UnwrappedCryptoKey(
                                key = 'YQ==', ), ), 
                        surrogate_info_type = openapi_client.models.google_privacy_dlp_v2_info_type.GooglePrivacyDlpV2InfoType(
                            name = '', 
                            sensitivity_score = openapi_client.models.google_privacy_dlp_v2_sensitivity_score.GooglePrivacyDlpV2SensitivityScore(
                                score = 'SENSITIVITY_SCORE_UNSPECIFIED', ), 
                            version = '', ), ), 
                    crypto_hash_config = openapi_client.models.google_privacy_dlp_v2_crypto_hash_config.GooglePrivacyDlpV2CryptoHashConfig(), 
                    crypto_replace_ffx_fpe_config = openapi_client.models.google_privacy_dlp_v2_crypto_replace_ffx_fpe_config.GooglePrivacyDlpV2CryptoReplaceFfxFpeConfig(
                        common_alphabet = 'FFX_COMMON_NATIVE_ALPHABET_UNSPECIFIED', 
                        custom_alphabet = '', 
                        radix = 56, ), 
                    date_shift_config = openapi_client.models.google_privacy_dlp_v2_date_shift_config.GooglePrivacyDlpV2DateShiftConfig(
                        lower_bound_days = 56, 
                        upper_bound_days = 56, ), 
                    fixed_size_bucketing_config = openapi_client.models.google_privacy_dlp_v2_fixed_size_bucketing_config.GooglePrivacyDlpV2FixedSizeBucketingConfig(
                        bucket_size = 1.337, 
                        lower_bound = , 
                        upper_bound = , ), 
                    redact_config = openapi_client.models.google_privacy_dlp_v2_redact_config.GooglePrivacyDlpV2RedactConfig(), 
                    replace_config = openapi_client.models.google_privacy_dlp_v2_replace_value_config.GooglePrivacyDlpV2ReplaceValueConfig(
                        new_value = , ), 
                    replace_dictionary_config = openapi_client.models.google_privacy_dlp_v2_replace_dictionary_config.GooglePrivacyDlpV2ReplaceDictionaryConfig(
                        word_list = openapi_client.models.google_privacy_dlp_v2_word_list.GooglePrivacyDlpV2WordList(
                            words = [
                                ''
                                ], ), ), 
                    replace_with_info_type_config = openapi_client.models.google_privacy_dlp_v2_replace_with_info_type_config.GooglePrivacyDlpV2ReplaceWithInfoTypeConfig(), 
                    time_part_config = openapi_client.models.google_privacy_dlp_v2_time_part_config.GooglePrivacyDlpV2TimePartConfig(
                        part_to_extract = 'TIME_PART_UNSPECIFIED', ), )
            )
        else:
            return GooglePrivacyDlpV2FieldTransformation(
        )
        """

    def testGooglePrivacyDlpV2FieldTransformation(self):
        """Test GooglePrivacyDlpV2FieldTransformation"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

# coding: utf-8

"""
    Sensitive Data Protection (DLP)

    Discover and protect your sensitive data. A fully managed service designed to help you discover, classify, and protect your valuable data assets with ease.

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.google_privacy_dlp_v2_custom_info_type import GooglePrivacyDlpV2CustomInfoType

class TestGooglePrivacyDlpV2CustomInfoType(unittest.TestCase):
    """GooglePrivacyDlpV2CustomInfoType unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> GooglePrivacyDlpV2CustomInfoType:
        """Test GooglePrivacyDlpV2CustomInfoType
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `GooglePrivacyDlpV2CustomInfoType`
        """
        model = GooglePrivacyDlpV2CustomInfoType()
        if include_optional:
            return GooglePrivacyDlpV2CustomInfoType(
                detection_rules = [
                    openapi_client.models.google_privacy_dlp_v2_detection_rule.GooglePrivacyDlpV2DetectionRule(
                        hotword_rule = openapi_client.models.google_privacy_dlp_v2_hotword_rule.GooglePrivacyDlpV2HotwordRule(
                            hotword_regex = openapi_client.models.google_privacy_dlp_v2_regex.GooglePrivacyDlpV2Regex(
                                group_indexes = [
                                    56
                                    ], 
                                pattern = '', ), 
                            likelihood_adjustment = openapi_client.models.google_privacy_dlp_v2_likelihood_adjustment.GooglePrivacyDlpV2LikelihoodAdjustment(
                                fixed_likelihood = 'LIKELIHOOD_UNSPECIFIED', 
                                relative_likelihood = 56, ), 
                            proximity = openapi_client.models.google_privacy_dlp_v2_proximity.GooglePrivacyDlpV2Proximity(
                                window_after = 56, 
                                window_before = 56, ), ), )
                    ],
                dictionary = openapi_client.models.google_privacy_dlp_v2_dictionary.GooglePrivacyDlpV2Dictionary(
                    cloud_storage_path = openapi_client.models.google_privacy_dlp_v2_cloud_storage_path.GooglePrivacyDlpV2CloudStoragePath(
                        path = '', ), 
                    word_list = openapi_client.models.google_privacy_dlp_v2_word_list.GooglePrivacyDlpV2WordList(
                        words = [
                            ''
                            ], ), ),
                exclusion_type = 'EXCLUSION_TYPE_UNSPECIFIED',
                info_type = openapi_client.models.google_privacy_dlp_v2_info_type.GooglePrivacyDlpV2InfoType(
                    name = '', 
                    sensitivity_score = openapi_client.models.google_privacy_dlp_v2_sensitivity_score.GooglePrivacyDlpV2SensitivityScore(
                        score = 'SENSITIVITY_SCORE_UNSPECIFIED', ), 
                    version = '', ),
                likelihood = 'LIKELIHOOD_UNSPECIFIED',
                regex = openapi_client.models.google_privacy_dlp_v2_regex.GooglePrivacyDlpV2Regex(
                    group_indexes = [
                        56
                        ], 
                    pattern = '', ),
                sensitivity_score = openapi_client.models.google_privacy_dlp_v2_sensitivity_score.GooglePrivacyDlpV2SensitivityScore(
                    score = 'SENSITIVITY_SCORE_UNSPECIFIED', ),
                stored_type = openapi_client.models.google_privacy_dlp_v2_stored_type.GooglePrivacyDlpV2StoredType(
                    create_time = '', 
                    name = '', ),
                surrogate_type = openapi_client.models.google_privacy_dlp_v2_surrogate_type.GooglePrivacyDlpV2SurrogateType()
            )
        else:
            return GooglePrivacyDlpV2CustomInfoType(
        )
        """

    def testGooglePrivacyDlpV2CustomInfoType(self):
        """Test GooglePrivacyDlpV2CustomInfoType"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

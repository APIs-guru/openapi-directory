# coding: utf-8

"""
    Sensitive Data Protection (DLP)

    Discover and protect your sensitive data. A fully managed service designed to help you discover, classify, and protect your valuable data assets with ease.

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.google_privacy_dlp_v2_stored_info_type_version import GooglePrivacyDlpV2StoredInfoTypeVersion

class TestGooglePrivacyDlpV2StoredInfoTypeVersion(unittest.TestCase):
    """GooglePrivacyDlpV2StoredInfoTypeVersion unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> GooglePrivacyDlpV2StoredInfoTypeVersion:
        """Test GooglePrivacyDlpV2StoredInfoTypeVersion
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `GooglePrivacyDlpV2StoredInfoTypeVersion`
        """
        model = GooglePrivacyDlpV2StoredInfoTypeVersion()
        if include_optional:
            return GooglePrivacyDlpV2StoredInfoTypeVersion(
                config = openapi_client.models.google_privacy_dlp_v2_stored_info_type_config.GooglePrivacyDlpV2StoredInfoTypeConfig(
                    description = '', 
                    dictionary = openapi_client.models.google_privacy_dlp_v2_dictionary.GooglePrivacyDlpV2Dictionary(
                        cloud_storage_path = openapi_client.models.google_privacy_dlp_v2_cloud_storage_path.GooglePrivacyDlpV2CloudStoragePath(
                            path = '', ), 
                        word_list = openapi_client.models.google_privacy_dlp_v2_word_list.GooglePrivacyDlpV2WordList(
                            words = [
                                ''
                                ], ), ), 
                    display_name = '', 
                    large_custom_dictionary = openapi_client.models.google_privacy_dlp_v2_large_custom_dictionary_config.GooglePrivacyDlpV2LargeCustomDictionaryConfig(
                        big_query_field = openapi_client.models.google_privacy_dlp_v2_big_query_field.GooglePrivacyDlpV2BigQueryField(
                            field = openapi_client.models.google_privacy_dlp_v2_field_id.GooglePrivacyDlpV2FieldId(
                                name = '', ), 
                            table = openapi_client.models.google_privacy_dlp_v2_big_query_table.GooglePrivacyDlpV2BigQueryTable(
                                dataset_id = '', 
                                project_id = '', 
                                table_id = '', ), ), 
                        cloud_storage_file_set = openapi_client.models.google_privacy_dlp_v2_cloud_storage_file_set.GooglePrivacyDlpV2CloudStorageFileSet(
                            url = '', ), 
                        output_path = openapi_client.models.google_privacy_dlp_v2_cloud_storage_path.GooglePrivacyDlpV2CloudStoragePath(
                            path = '', ), ), 
                    regex = openapi_client.models.google_privacy_dlp_v2_regex.GooglePrivacyDlpV2Regex(
                        group_indexes = [
                            56
                            ], 
                        pattern = '', ), ),
                create_time = '',
                errors = [
                    openapi_client.models.google_privacy_dlp_v2_error.GooglePrivacyDlpV2Error(
                        details = openapi_client.models.google_rpc_status.GoogleRpcStatus(
                            code = 56, 
                            message = '', ), 
                        timestamps = [
                            ''
                            ], )
                    ],
                state = 'STORED_INFO_TYPE_STATE_UNSPECIFIED',
                stats = openapi_client.models.google_privacy_dlp_v2_stored_info_type_stats.GooglePrivacyDlpV2StoredInfoTypeStats(
                    large_custom_dictionary = openapi_client.models.google_privacy_dlp_v2_large_custom_dictionary_stats.GooglePrivacyDlpV2LargeCustomDictionaryStats(
                        approx_num_phrases = '', ), )
            )
        else:
            return GooglePrivacyDlpV2StoredInfoTypeVersion(
        )
        """

    def testGooglePrivacyDlpV2StoredInfoTypeVersion(self):
        """Test GooglePrivacyDlpV2StoredInfoTypeVersion"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

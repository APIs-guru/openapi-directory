# coding: utf-8

"""
    Sensitive Data Protection (DLP)

    Discover and protect your sensitive data. A fully managed service designed to help you discover, classify, and protect your valuable data assets with ease.

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.google_privacy_dlp_v2_big_query_discovery_target import GooglePrivacyDlpV2BigQueryDiscoveryTarget

class TestGooglePrivacyDlpV2BigQueryDiscoveryTarget(unittest.TestCase):
    """GooglePrivacyDlpV2BigQueryDiscoveryTarget unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> GooglePrivacyDlpV2BigQueryDiscoveryTarget:
        """Test GooglePrivacyDlpV2BigQueryDiscoveryTarget
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `GooglePrivacyDlpV2BigQueryDiscoveryTarget`
        """
        model = GooglePrivacyDlpV2BigQueryDiscoveryTarget()
        if include_optional:
            return GooglePrivacyDlpV2BigQueryDiscoveryTarget(
                cadence = openapi_client.models.google_privacy_dlp_v2_discovery_generation_cadence.GooglePrivacyDlpV2DiscoveryGenerationCadence(
                    schema_modified_cadence = openapi_client.models.google_privacy_dlp_v2_discovery_schema_modified_cadence.GooglePrivacyDlpV2DiscoverySchemaModifiedCadence(
                        frequency = 'UPDATE_FREQUENCY_UNSPECIFIED', 
                        types = [
                            'SCHEMA_MODIFICATION_UNSPECIFIED'
                            ], ), 
                    table_modified_cadence = openapi_client.models.google_privacy_dlp_v2_discovery_table_modified_cadence.GooglePrivacyDlpV2DiscoveryTableModifiedCadence(
                        frequency = 'UPDATE_FREQUENCY_UNSPECIFIED', ), ),
                conditions = openapi_client.models.google_privacy_dlp_v2_discovery_big_query_conditions.GooglePrivacyDlpV2DiscoveryBigQueryConditions(
                    created_after = '', 
                    or_conditions = openapi_client.models.google_privacy_dlp_v2_or_conditions.GooglePrivacyDlpV2OrConditions(
                        min_age = '', 
                        min_row_count = 56, ), 
                    type_collection = 'BIG_QUERY_COLLECTION_UNSPECIFIED', 
                    types = openapi_client.models.google_privacy_dlp_v2_big_query_table_types.GooglePrivacyDlpV2BigQueryTableTypes(), ),
                disabled = None,
                filter = openapi_client.models.google_privacy_dlp_v2_discovery_big_query_filter.GooglePrivacyDlpV2DiscoveryBigQueryFilter(
                    other_tables = openapi_client.models.google_privacy_dlp_v2_all_other_big_query_tables.GooglePrivacyDlpV2AllOtherBigQueryTables(), 
                    tables = openapi_client.models.google_privacy_dlp_v2_big_query_table_collection.GooglePrivacyDlpV2BigQueryTableCollection(
                        include_regexes = openapi_client.models.google_privacy_dlp_v2_big_query_regexes.GooglePrivacyDlpV2BigQueryRegexes(
                            patterns = [
                                openapi_client.models.google_privacy_dlp_v2_big_query_regex.GooglePrivacyDlpV2BigQueryRegex(
                                    dataset_id_regex = '', 
                                    project_id_regex = '', 
                                    table_id_regex = '', )
                                ], ), ), )
            )
        else:
            return GooglePrivacyDlpV2BigQueryDiscoveryTarget(
        )
        """

    def testGooglePrivacyDlpV2BigQueryDiscoveryTarget(self):
        """Test GooglePrivacyDlpV2BigQueryDiscoveryTarget"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

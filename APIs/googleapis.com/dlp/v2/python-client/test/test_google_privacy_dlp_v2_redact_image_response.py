# coding: utf-8

"""
    Sensitive Data Protection (DLP)

    Discover and protect your sensitive data. A fully managed service designed to help you discover, classify, and protect your valuable data assets with ease.

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.google_privacy_dlp_v2_redact_image_response import GooglePrivacyDlpV2RedactImageResponse

class TestGooglePrivacyDlpV2RedactImageResponse(unittest.TestCase):
    """GooglePrivacyDlpV2RedactImageResponse unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> GooglePrivacyDlpV2RedactImageResponse:
        """Test GooglePrivacyDlpV2RedactImageResponse
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `GooglePrivacyDlpV2RedactImageResponse`
        """
        model = GooglePrivacyDlpV2RedactImageResponse()
        if include_optional:
            return GooglePrivacyDlpV2RedactImageResponse(
                extracted_text = '',
                inspect_result = openapi_client.models.google_privacy_dlp_v2_inspect_result.GooglePrivacyDlpV2InspectResult(
                    findings = [
                        openapi_client.models.google_privacy_dlp_v2_finding.GooglePrivacyDlpV2Finding(
                            create_time = '', 
                            finding_id = '', 
                            info_type = openapi_client.models.google_privacy_dlp_v2_info_type.GooglePrivacyDlpV2InfoType(
                                name = '', 
                                sensitivity_score = openapi_client.models.google_privacy_dlp_v2_sensitivity_score.GooglePrivacyDlpV2SensitivityScore(
                                    score = 'SENSITIVITY_SCORE_UNSPECIFIED', ), 
                                version = '', ), 
                            job_create_time = '', 
                            job_name = '', 
                            labels = {
                                'key' : ''
                                }, 
                            likelihood = 'LIKELIHOOD_UNSPECIFIED', 
                            location = openapi_client.models.google_privacy_dlp_v2_location.GooglePrivacyDlpV2Location(
                                byte_range = openapi_client.models.google_privacy_dlp_v2_range.GooglePrivacyDlpV2Range(
                                    end = '', 
                                    start = '', ), 
                                codepoint_range = openapi_client.models.google_privacy_dlp_v2_range.GooglePrivacyDlpV2Range(
                                    end = '', 
                                    start = '', ), 
                                container = openapi_client.models.google_privacy_dlp_v2_container.GooglePrivacyDlpV2Container(
                                    full_path = '', 
                                    project_id = '', 
                                    relative_path = '', 
                                    root_path = '', 
                                    type = '', 
                                    update_time = '', 
                                    version = '', ), 
                                content_locations = [
                                    openapi_client.models.google_privacy_dlp_v2_content_location.GooglePrivacyDlpV2ContentLocation(
                                        container_name = '', 
                                        container_timestamp = '', 
                                        container_version = '', 
                                        document_location = openapi_client.models.google_privacy_dlp_v2_document_location.GooglePrivacyDlpV2DocumentLocation(
                                            file_offset = '', ), 
                                        image_location = openapi_client.models.google_privacy_dlp_v2_image_location.GooglePrivacyDlpV2ImageLocation(
                                            bounding_boxes = [
                                                openapi_client.models.google_privacy_dlp_v2_bounding_box.GooglePrivacyDlpV2BoundingBox(
                                                    height = 56, 
                                                    left = 56, 
                                                    top = 56, 
                                                    width = 56, )
                                                ], ), 
                                        metadata_location = openapi_client.models.google_privacy_dlp_v2_metadata_location.GooglePrivacyDlpV2MetadataLocation(
                                            storage_label = openapi_client.models.google_privacy_dlp_v2_storage_metadata_label.GooglePrivacyDlpV2StorageMetadataLabel(
                                                key = '', ), 
                                            type = 'METADATATYPE_UNSPECIFIED', ), 
                                        record_location = openapi_client.models.google_privacy_dlp_v2_record_location.GooglePrivacyDlpV2RecordLocation(
                                            field_id = openapi_client.models.google_privacy_dlp_v2_field_id.GooglePrivacyDlpV2FieldId(
                                                name = '', ), 
                                            record_key = openapi_client.models.google_privacy_dlp_v2_record_key.GooglePrivacyDlpV2RecordKey(
                                                big_query_key = openapi_client.models.google_privacy_dlp_v2_big_query_key.GooglePrivacyDlpV2BigQueryKey(
                                                    row_number = '', 
                                                    table_reference = openapi_client.models.google_privacy_dlp_v2_big_query_table.GooglePrivacyDlpV2BigQueryTable(
                                                        dataset_id = '', 
                                                        project_id = '', 
                                                        table_id = '', ), ), 
                                                datastore_key = openapi_client.models.google_privacy_dlp_v2_datastore_key.GooglePrivacyDlpV2DatastoreKey(
                                                    entity_key = openapi_client.models.google_privacy_dlp_v2_key.GooglePrivacyDlpV2Key(
                                                        partition_id = openapi_client.models.google_privacy_dlp_v2_partition_id.GooglePrivacyDlpV2PartitionId(
                                                            namespace_id = '', 
                                                            project_id = '', ), 
                                                        path = [
                                                            openapi_client.models.google_privacy_dlp_v2_path_element.GooglePrivacyDlpV2PathElement(
                                                                id = '', 
                                                                kind = '', 
                                                                name = '', )
                                                            ], ), ), 
                                                id_values = [
                                                    ''
                                                    ], ), 
                                            table_location = openapi_client.models.google_privacy_dlp_v2_table_location.GooglePrivacyDlpV2TableLocation(
                                                row_index = '', ), ), )
                                    ], ), 
                            name = '', 
                            quote = '', 
                            quote_info = openapi_client.models.google_privacy_dlp_v2_quote_info.GooglePrivacyDlpV2QuoteInfo(
                                date_time = openapi_client.models.google_privacy_dlp_v2_date_time.GooglePrivacyDlpV2DateTime(
                                    date = openapi_client.models.google_type_date.GoogleTypeDate(
                                        day = 56, 
                                        month = 56, 
                                        year = 56, ), 
                                    day_of_week = 'DAY_OF_WEEK_UNSPECIFIED', 
                                    time = openapi_client.models.google_type_time_of_day.GoogleTypeTimeOfDay(
                                        hours = 56, 
                                        minutes = 56, 
                                        nanos = 56, 
                                        seconds = 56, ), 
                                    time_zone = openapi_client.models.google_privacy_dlp_v2_time_zone.GooglePrivacyDlpV2TimeZone(
                                        offset_minutes = 56, ), ), ), 
                            resource_name = '', 
                            trigger_name = '', )
                        ], 
                    findings_truncated = True, ),
                redacted_image = 'YQ=='
            )
        else:
            return GooglePrivacyDlpV2RedactImageResponse(
        )
        """

    def testGooglePrivacyDlpV2RedactImageResponse(self):
        """Test GooglePrivacyDlpV2RedactImageResponse"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

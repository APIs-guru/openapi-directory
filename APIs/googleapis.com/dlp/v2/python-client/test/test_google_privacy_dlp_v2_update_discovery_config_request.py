# coding: utf-8

"""
    Sensitive Data Protection (DLP)

    Discover and protect your sensitive data. A fully managed service designed to help you discover, classify, and protect your valuable data assets with ease.

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.google_privacy_dlp_v2_update_discovery_config_request import GooglePrivacyDlpV2UpdateDiscoveryConfigRequest

class TestGooglePrivacyDlpV2UpdateDiscoveryConfigRequest(unittest.TestCase):
    """GooglePrivacyDlpV2UpdateDiscoveryConfigRequest unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> GooglePrivacyDlpV2UpdateDiscoveryConfigRequest:
        """Test GooglePrivacyDlpV2UpdateDiscoveryConfigRequest
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `GooglePrivacyDlpV2UpdateDiscoveryConfigRequest`
        """
        model = GooglePrivacyDlpV2UpdateDiscoveryConfigRequest()
        if include_optional:
            return GooglePrivacyDlpV2UpdateDiscoveryConfigRequest(
                discovery_config = openapi_client.models.google_privacy_dlp_v2_discovery_config.GooglePrivacyDlpV2DiscoveryConfig(
                    actions = [
                        openapi_client.models.google_privacy_dlp_v2_data_profile_action.GooglePrivacyDlpV2DataProfileAction(
                            export_data = openapi_client.models.google_privacy_dlp_v2_export.GooglePrivacyDlpV2Export(
                                profile_table = openapi_client.models.google_privacy_dlp_v2_big_query_table.GooglePrivacyDlpV2BigQueryTable(
                                    dataset_id = '', 
                                    project_id = '', 
                                    table_id = '', ), ), 
                            pub_sub_notification = openapi_client.models.google_privacy_dlp_v2_pub_sub_notification.GooglePrivacyDlpV2PubSubNotification(
                                detail_of_message = 'DETAIL_LEVEL_UNSPECIFIED', 
                                event = 'EVENT_TYPE_UNSPECIFIED', 
                                pubsub_condition = openapi_client.models.google_privacy_dlp_v2_data_profile_pub_sub_condition.GooglePrivacyDlpV2DataProfilePubSubCondition(
                                    expressions = openapi_client.models.google_privacy_dlp_v2_pub_sub_expressions.GooglePrivacyDlpV2PubSubExpressions(
                                        conditions = [
                                            openapi_client.models.google_privacy_dlp_v2_pub_sub_condition.GooglePrivacyDlpV2PubSubCondition(
                                                minimum_risk_score = 'PROFILE_SCORE_BUCKET_UNSPECIFIED', 
                                                minimum_sensitivity_score = 'PROFILE_SCORE_BUCKET_UNSPECIFIED', )
                                            ], 
                                        logical_operator = 'LOGICAL_OPERATOR_UNSPECIFIED', ), ), 
                                topic = '', ), )
                        ], 
                    create_time = '', 
                    display_name = '', 
                    errors = [
                        openapi_client.models.google_privacy_dlp_v2_error.GooglePrivacyDlpV2Error(
                            details = openapi_client.models.google_rpc_status.GoogleRpcStatus(
                                code = 56, 
                                message = '', ), 
                            timestamps = [
                                ''
                                ], )
                        ], 
                    inspect_templates = [
                        ''
                        ], 
                    last_run_time = '', 
                    name = '', 
                    org_config = openapi_client.models.google_privacy_dlp_v2_org_config.GooglePrivacyDlpV2OrgConfig(
                        location = openapi_client.models.google_privacy_dlp_v2_discovery_starting_location.GooglePrivacyDlpV2DiscoveryStartingLocation(
                            folder_id = '', 
                            organization_id = '', ), 
                        project_id = '', ), 
                    status = 'STATUS_UNSPECIFIED', 
                    targets = [
                        openapi_client.models.google_privacy_dlp_v2_discovery_target.GooglePrivacyDlpV2DiscoveryTarget(
                            big_query_target = openapi_client.models.google_privacy_dlp_v2_big_query_discovery_target.GooglePrivacyDlpV2BigQueryDiscoveryTarget(
                                cadence = openapi_client.models.google_privacy_dlp_v2_discovery_generation_cadence.GooglePrivacyDlpV2DiscoveryGenerationCadence(
                                    schema_modified_cadence = openapi_client.models.google_privacy_dlp_v2_discovery_schema_modified_cadence.GooglePrivacyDlpV2DiscoverySchemaModifiedCadence(
                                        frequency = 'UPDATE_FREQUENCY_UNSPECIFIED', 
                                        types = [
                                            'SCHEMA_MODIFICATION_UNSPECIFIED'
                                            ], ), 
                                    table_modified_cadence = openapi_client.models.google_privacy_dlp_v2_discovery_table_modified_cadence.GooglePrivacyDlpV2DiscoveryTableModifiedCadence(
                                        frequency = 'UPDATE_FREQUENCY_UNSPECIFIED', ), ), 
                                disabled = openapi_client.models.disabled.disabled(), 
                                filter = openapi_client.models.google_privacy_dlp_v2_discovery_big_query_filter.GooglePrivacyDlpV2DiscoveryBigQueryFilter(
                                    other_tables = openapi_client.models.google_privacy_dlp_v2_all_other_big_query_tables.GooglePrivacyDlpV2AllOtherBigQueryTables(), 
                                    tables = openapi_client.models.google_privacy_dlp_v2_big_query_table_collection.GooglePrivacyDlpV2BigQueryTableCollection(
                                        include_regexes = openapi_client.models.google_privacy_dlp_v2_big_query_regexes.GooglePrivacyDlpV2BigQueryRegexes(
                                            patterns = [
                                                openapi_client.models.google_privacy_dlp_v2_big_query_regex.GooglePrivacyDlpV2BigQueryRegex(
                                                    dataset_id_regex = '', 
                                                    project_id_regex = '', 
                                                    table_id_regex = '', )
                                                ], ), ), ), ), )
                        ], 
                    update_time = '', ),
                update_mask = ''
            )
        else:
            return GooglePrivacyDlpV2UpdateDiscoveryConfigRequest(
        )
        """

    def testGooglePrivacyDlpV2UpdateDiscoveryConfigRequest(self):
        """Test GooglePrivacyDlpV2UpdateDiscoveryConfigRequest"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

# coding: utf-8

"""
    Sensitive Data Protection (DLP)

    Discover and protect your sensitive data. A fully managed service designed to help you discover, classify, and protect your valuable data assets with ease.

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.google_privacy_dlp_v2_discovery_big_query_filter import GooglePrivacyDlpV2DiscoveryBigQueryFilter

class TestGooglePrivacyDlpV2DiscoveryBigQueryFilter(unittest.TestCase):
    """GooglePrivacyDlpV2DiscoveryBigQueryFilter unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> GooglePrivacyDlpV2DiscoveryBigQueryFilter:
        """Test GooglePrivacyDlpV2DiscoveryBigQueryFilter
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `GooglePrivacyDlpV2DiscoveryBigQueryFilter`
        """
        model = GooglePrivacyDlpV2DiscoveryBigQueryFilter()
        if include_optional:
            return GooglePrivacyDlpV2DiscoveryBigQueryFilter(
                other_tables = openapi_client.models.google_privacy_dlp_v2_all_other_big_query_tables.GooglePrivacyDlpV2AllOtherBigQueryTables(),
                tables = openapi_client.models.google_privacy_dlp_v2_big_query_table_collection.GooglePrivacyDlpV2BigQueryTableCollection(
                    include_regexes = openapi_client.models.google_privacy_dlp_v2_big_query_regexes.GooglePrivacyDlpV2BigQueryRegexes(
                        patterns = [
                            openapi_client.models.google_privacy_dlp_v2_big_query_regex.GooglePrivacyDlpV2BigQueryRegex(
                                dataset_id_regex = '', 
                                project_id_regex = '', 
                                table_id_regex = '', )
                            ], ), )
            )
        else:
            return GooglePrivacyDlpV2DiscoveryBigQueryFilter(
        )
        """

    def testGooglePrivacyDlpV2DiscoveryBigQueryFilter(self):
        """Test GooglePrivacyDlpV2DiscoveryBigQueryFilter"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

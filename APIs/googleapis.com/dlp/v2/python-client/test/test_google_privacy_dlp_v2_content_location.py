# coding: utf-8

"""
    Sensitive Data Protection (DLP)

    Discover and protect your sensitive data. A fully managed service designed to help you discover, classify, and protect your valuable data assets with ease.

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.google_privacy_dlp_v2_content_location import GooglePrivacyDlpV2ContentLocation

class TestGooglePrivacyDlpV2ContentLocation(unittest.TestCase):
    """GooglePrivacyDlpV2ContentLocation unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> GooglePrivacyDlpV2ContentLocation:
        """Test GooglePrivacyDlpV2ContentLocation
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `GooglePrivacyDlpV2ContentLocation`
        """
        model = GooglePrivacyDlpV2ContentLocation()
        if include_optional:
            return GooglePrivacyDlpV2ContentLocation(
                container_name = '',
                container_timestamp = '',
                container_version = '',
                document_location = openapi_client.models.google_privacy_dlp_v2_document_location.GooglePrivacyDlpV2DocumentLocation(
                    file_offset = '', ),
                image_location = openapi_client.models.google_privacy_dlp_v2_image_location.GooglePrivacyDlpV2ImageLocation(
                    bounding_boxes = [
                        openapi_client.models.google_privacy_dlp_v2_bounding_box.GooglePrivacyDlpV2BoundingBox(
                            height = 56, 
                            left = 56, 
                            top = 56, 
                            width = 56, )
                        ], ),
                metadata_location = openapi_client.models.google_privacy_dlp_v2_metadata_location.GooglePrivacyDlpV2MetadataLocation(
                    storage_label = openapi_client.models.google_privacy_dlp_v2_storage_metadata_label.GooglePrivacyDlpV2StorageMetadataLabel(
                        key = '', ), 
                    type = 'METADATATYPE_UNSPECIFIED', ),
                record_location = openapi_client.models.google_privacy_dlp_v2_record_location.GooglePrivacyDlpV2RecordLocation(
                    field_id = openapi_client.models.google_privacy_dlp_v2_field_id.GooglePrivacyDlpV2FieldId(
                        name = '', ), 
                    record_key = openapi_client.models.google_privacy_dlp_v2_record_key.GooglePrivacyDlpV2RecordKey(
                        big_query_key = openapi_client.models.google_privacy_dlp_v2_big_query_key.GooglePrivacyDlpV2BigQueryKey(
                            row_number = '', 
                            table_reference = openapi_client.models.google_privacy_dlp_v2_big_query_table.GooglePrivacyDlpV2BigQueryTable(
                                dataset_id = '', 
                                project_id = '', 
                                table_id = '', ), ), 
                        datastore_key = openapi_client.models.google_privacy_dlp_v2_datastore_key.GooglePrivacyDlpV2DatastoreKey(
                            entity_key = openapi_client.models.google_privacy_dlp_v2_key.GooglePrivacyDlpV2Key(
                                partition_id = openapi_client.models.google_privacy_dlp_v2_partition_id.GooglePrivacyDlpV2PartitionId(
                                    namespace_id = '', 
                                    project_id = '', ), 
                                path = [
                                    openapi_client.models.google_privacy_dlp_v2_path_element.GooglePrivacyDlpV2PathElement(
                                        id = '', 
                                        kind = '', 
                                        name = '', )
                                    ], ), ), 
                        id_values = [
                            ''
                            ], ), 
                    table_location = openapi_client.models.google_privacy_dlp_v2_table_location.GooglePrivacyDlpV2TableLocation(
                        row_index = '', ), )
            )
        else:
            return GooglePrivacyDlpV2ContentLocation(
        )
        """

    def testGooglePrivacyDlpV2ContentLocation(self):
        """Test GooglePrivacyDlpV2ContentLocation"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

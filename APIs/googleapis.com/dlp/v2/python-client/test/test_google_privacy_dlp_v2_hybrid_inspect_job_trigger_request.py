# coding: utf-8

"""
    Sensitive Data Protection (DLP)

    Discover and protect your sensitive data. A fully managed service designed to help you discover, classify, and protect your valuable data assets with ease.

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.google_privacy_dlp_v2_hybrid_inspect_job_trigger_request import GooglePrivacyDlpV2HybridInspectJobTriggerRequest

class TestGooglePrivacyDlpV2HybridInspectJobTriggerRequest(unittest.TestCase):
    """GooglePrivacyDlpV2HybridInspectJobTriggerRequest unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> GooglePrivacyDlpV2HybridInspectJobTriggerRequest:
        """Test GooglePrivacyDlpV2HybridInspectJobTriggerRequest
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `GooglePrivacyDlpV2HybridInspectJobTriggerRequest`
        """
        model = GooglePrivacyDlpV2HybridInspectJobTriggerRequest()
        if include_optional:
            return GooglePrivacyDlpV2HybridInspectJobTriggerRequest(
                hybrid_item = openapi_client.models.google_privacy_dlp_v2_hybrid_content_item.GooglePrivacyDlpV2HybridContentItem(
                    finding_details = openapi_client.models.google_privacy_dlp_v2_hybrid_finding_details.GooglePrivacyDlpV2HybridFindingDetails(
                        container_details = openapi_client.models.google_privacy_dlp_v2_container.GooglePrivacyDlpV2Container(
                            full_path = '', 
                            project_id = '', 
                            relative_path = '', 
                            root_path = '', 
                            type = '', 
                            update_time = '', 
                            version = '', ), 
                        file_offset = '', 
                        labels = {
                            'key' : ''
                            }, 
                        row_offset = '', 
                        table_options = openapi_client.models.google_privacy_dlp_v2_table_options.GooglePrivacyDlpV2TableOptions(
                            identifying_fields = [
                                openapi_client.models.google_privacy_dlp_v2_field_id.GooglePrivacyDlpV2FieldId(
                                    name = '', )
                                ], ), ), 
                    item = openapi_client.models.google_privacy_dlp_v2_content_item.GooglePrivacyDlpV2ContentItem(
                        byte_item = openapi_client.models.google_privacy_dlp_v2_byte_content_item.GooglePrivacyDlpV2ByteContentItem(
                            data = 'YQ==', 
                            type = 'BYTES_TYPE_UNSPECIFIED', ), 
                        table = openapi_client.models.google_privacy_dlp_v2_table.GooglePrivacyDlpV2Table(
                            headers = [
                                openapi_client.models.google_privacy_dlp_v2_field_id.GooglePrivacyDlpV2FieldId(
                                    name = '', )
                                ], 
                            rows = [
                                openapi_client.models.google_privacy_dlp_v2_row.GooglePrivacyDlpV2Row(
                                    values = [
                                        openapi_client.models.google_privacy_dlp_v2_value.GooglePrivacyDlpV2Value(
                                            boolean_value = True, 
                                            date_value = openapi_client.models.google_type_date.GoogleTypeDate(
                                                day = 56, 
                                                month = 56, 
                                                year = 56, ), 
                                            day_of_week_value = 'DAY_OF_WEEK_UNSPECIFIED', 
                                            float_value = 1.337, 
                                            integer_value = '', 
                                            string_value = '', 
                                            time_value = openapi_client.models.google_type_time_of_day.GoogleTypeTimeOfDay(
                                                hours = 56, 
                                                minutes = 56, 
                                                nanos = 56, 
                                                seconds = 56, ), 
                                            timestamp_value = '', )
                                        ], )
                                ], ), 
                        value = '', ), )
            )
        else:
            return GooglePrivacyDlpV2HybridInspectJobTriggerRequest(
        )
        """

    def testGooglePrivacyDlpV2HybridInspectJobTriggerRequest(self):
        """Test GooglePrivacyDlpV2HybridInspectJobTriggerRequest"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

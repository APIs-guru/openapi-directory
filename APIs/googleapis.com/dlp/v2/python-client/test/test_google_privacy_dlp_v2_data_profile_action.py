# coding: utf-8

"""
    Sensitive Data Protection (DLP)

    Discover and protect your sensitive data. A fully managed service designed to help you discover, classify, and protect your valuable data assets with ease.

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.google_privacy_dlp_v2_data_profile_action import GooglePrivacyDlpV2DataProfileAction

class TestGooglePrivacyDlpV2DataProfileAction(unittest.TestCase):
    """GooglePrivacyDlpV2DataProfileAction unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> GooglePrivacyDlpV2DataProfileAction:
        """Test GooglePrivacyDlpV2DataProfileAction
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `GooglePrivacyDlpV2DataProfileAction`
        """
        model = GooglePrivacyDlpV2DataProfileAction()
        if include_optional:
            return GooglePrivacyDlpV2DataProfileAction(
                export_data = openapi_client.models.google_privacy_dlp_v2_export.GooglePrivacyDlpV2Export(
                    profile_table = openapi_client.models.google_privacy_dlp_v2_big_query_table.GooglePrivacyDlpV2BigQueryTable(
                        dataset_id = '', 
                        project_id = '', 
                        table_id = '', ), ),
                pub_sub_notification = openapi_client.models.google_privacy_dlp_v2_pub_sub_notification.GooglePrivacyDlpV2PubSubNotification(
                    detail_of_message = 'DETAIL_LEVEL_UNSPECIFIED', 
                    event = 'EVENT_TYPE_UNSPECIFIED', 
                    pubsub_condition = openapi_client.models.google_privacy_dlp_v2_data_profile_pub_sub_condition.GooglePrivacyDlpV2DataProfilePubSubCondition(
                        expressions = openapi_client.models.google_privacy_dlp_v2_pub_sub_expressions.GooglePrivacyDlpV2PubSubExpressions(
                            conditions = [
                                openapi_client.models.google_privacy_dlp_v2_pub_sub_condition.GooglePrivacyDlpV2PubSubCondition(
                                    minimum_risk_score = 'PROFILE_SCORE_BUCKET_UNSPECIFIED', 
                                    minimum_sensitivity_score = 'PROFILE_SCORE_BUCKET_UNSPECIFIED', )
                                ], 
                            logical_operator = 'LOGICAL_OPERATOR_UNSPECIFIED', ), ), 
                    topic = '', )
            )
        else:
            return GooglePrivacyDlpV2DataProfileAction(
        )
        """

    def testGooglePrivacyDlpV2DataProfileAction(self):
        """Test GooglePrivacyDlpV2DataProfileAction"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

# coding: utf-8

"""
    Sensitive Data Protection (DLP)

    Discover and protect your sensitive data. A fully managed service designed to help you discover, classify, and protect your valuable data assets with ease.

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.google_privacy_dlp_v2_k_map_estimation_config import GooglePrivacyDlpV2KMapEstimationConfig

class TestGooglePrivacyDlpV2KMapEstimationConfig(unittest.TestCase):
    """GooglePrivacyDlpV2KMapEstimationConfig unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> GooglePrivacyDlpV2KMapEstimationConfig:
        """Test GooglePrivacyDlpV2KMapEstimationConfig
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `GooglePrivacyDlpV2KMapEstimationConfig`
        """
        model = GooglePrivacyDlpV2KMapEstimationConfig()
        if include_optional:
            return GooglePrivacyDlpV2KMapEstimationConfig(
                auxiliary_tables = [
                    openapi_client.models.google_privacy_dlp_v2_auxiliary_table.GooglePrivacyDlpV2AuxiliaryTable(
                        quasi_ids = [
                            openapi_client.models.google_privacy_dlp_v2_quasi_id_field.GooglePrivacyDlpV2QuasiIdField(
                                custom_tag = '', 
                                field = openapi_client.models.google_privacy_dlp_v2_field_id.GooglePrivacyDlpV2FieldId(
                                    name = '', ), )
                            ], 
                        relative_frequency = openapi_client.models.google_privacy_dlp_v2_field_id.GooglePrivacyDlpV2FieldId(
                            name = '', ), 
                        table = openapi_client.models.google_privacy_dlp_v2_big_query_table.GooglePrivacyDlpV2BigQueryTable(
                            dataset_id = '', 
                            project_id = '', 
                            table_id = '', ), )
                    ],
                quasi_ids = [
                    openapi_client.models.google_privacy_dlp_v2_tagged_field.GooglePrivacyDlpV2TaggedField(
                        custom_tag = '', 
                        field = openapi_client.models.google_privacy_dlp_v2_field_id.GooglePrivacyDlpV2FieldId(
                            name = '', ), 
                        inferred = openapi_client.models.google_protobuf_empty.GoogleProtobufEmpty(), 
                        info_type = openapi_client.models.google_privacy_dlp_v2_info_type.GooglePrivacyDlpV2InfoType(
                            name = '', 
                            sensitivity_score = openapi_client.models.google_privacy_dlp_v2_sensitivity_score.GooglePrivacyDlpV2SensitivityScore(
                                score = 'SENSITIVITY_SCORE_UNSPECIFIED', ), 
                            version = '', ), )
                    ],
                region_code = ''
            )
        else:
            return GooglePrivacyDlpV2KMapEstimationConfig(
        )
        """

    def testGooglePrivacyDlpV2KMapEstimationConfig(self):
        """Test GooglePrivacyDlpV2KMapEstimationConfig"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

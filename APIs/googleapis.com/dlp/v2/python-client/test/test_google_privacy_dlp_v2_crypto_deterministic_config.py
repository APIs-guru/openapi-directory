# coding: utf-8

"""
    Sensitive Data Protection (DLP)

    Discover and protect your sensitive data. A fully managed service designed to help you discover, classify, and protect your valuable data assets with ease.

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.google_privacy_dlp_v2_crypto_deterministic_config import GooglePrivacyDlpV2CryptoDeterministicConfig

class TestGooglePrivacyDlpV2CryptoDeterministicConfig(unittest.TestCase):
    """GooglePrivacyDlpV2CryptoDeterministicConfig unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> GooglePrivacyDlpV2CryptoDeterministicConfig:
        """Test GooglePrivacyDlpV2CryptoDeterministicConfig
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `GooglePrivacyDlpV2CryptoDeterministicConfig`
        """
        model = GooglePrivacyDlpV2CryptoDeterministicConfig()
        if include_optional:
            return GooglePrivacyDlpV2CryptoDeterministicConfig(
                context = openapi_client.models.google_privacy_dlp_v2_field_id.GooglePrivacyDlpV2FieldId(
                    name = '', ),
                crypto_key = openapi_client.models.google_privacy_dlp_v2_crypto_key.GooglePrivacyDlpV2CryptoKey(
                    kms_wrapped = openapi_client.models.google_privacy_dlp_v2_kms_wrapped_crypto_key.GooglePrivacyDlpV2KmsWrappedCryptoKey(
                        crypto_key_name = '', 
                        wrapped_key = 'YQ==', ), 
                    transient = openapi_client.models.google_privacy_dlp_v2_transient_crypto_key.GooglePrivacyDlpV2TransientCryptoKey(
                        name = '', ), 
                    unwrapped = openapi_client.models.google_privacy_dlp_v2_unwrapped_crypto_key.GooglePrivacyDlpV2UnwrappedCryptoKey(
                        key = 'YQ==', ), ),
                surrogate_info_type = openapi_client.models.google_privacy_dlp_v2_info_type.GooglePrivacyDlpV2InfoType(
                    name = '', 
                    sensitivity_score = openapi_client.models.google_privacy_dlp_v2_sensitivity_score.GooglePrivacyDlpV2SensitivityScore(
                        score = 'SENSITIVITY_SCORE_UNSPECIFIED', ), 
                    version = '', )
            )
        else:
            return GooglePrivacyDlpV2CryptoDeterministicConfig(
        )
        """

    def testGooglePrivacyDlpV2CryptoDeterministicConfig(self):
        """Test GooglePrivacyDlpV2CryptoDeterministicConfig"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

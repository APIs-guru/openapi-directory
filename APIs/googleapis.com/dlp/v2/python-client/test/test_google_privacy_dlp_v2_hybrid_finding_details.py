# coding: utf-8

"""
    Sensitive Data Protection (DLP)

    Discover and protect your sensitive data. A fully managed service designed to help you discover, classify, and protect your valuable data assets with ease.

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.google_privacy_dlp_v2_hybrid_finding_details import GooglePrivacyDlpV2HybridFindingDetails

class TestGooglePrivacyDlpV2HybridFindingDetails(unittest.TestCase):
    """GooglePrivacyDlpV2HybridFindingDetails unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> GooglePrivacyDlpV2HybridFindingDetails:
        """Test GooglePrivacyDlpV2HybridFindingDetails
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `GooglePrivacyDlpV2HybridFindingDetails`
        """
        model = GooglePrivacyDlpV2HybridFindingDetails()
        if include_optional:
            return GooglePrivacyDlpV2HybridFindingDetails(
                container_details = openapi_client.models.google_privacy_dlp_v2_container.GooglePrivacyDlpV2Container(
                    full_path = '', 
                    project_id = '', 
                    relative_path = '', 
                    root_path = '', 
                    type = '', 
                    update_time = '', 
                    version = '', ),
                file_offset = '',
                labels = {
                    'key' : ''
                    },
                row_offset = '',
                table_options = openapi_client.models.google_privacy_dlp_v2_table_options.GooglePrivacyDlpV2TableOptions(
                    identifying_fields = [
                        openapi_client.models.google_privacy_dlp_v2_field_id.GooglePrivacyDlpV2FieldId(
                            name = '', )
                        ], )
            )
        else:
            return GooglePrivacyDlpV2HybridFindingDetails(
        )
        """

    def testGooglePrivacyDlpV2HybridFindingDetails(self):
        """Test GooglePrivacyDlpV2HybridFindingDetails"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

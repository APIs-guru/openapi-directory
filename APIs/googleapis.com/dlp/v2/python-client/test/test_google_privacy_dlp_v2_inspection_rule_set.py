# coding: utf-8

"""
    Sensitive Data Protection (DLP)

    Discover and protect your sensitive data. A fully managed service designed to help you discover, classify, and protect your valuable data assets with ease.

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.google_privacy_dlp_v2_inspection_rule_set import GooglePrivacyDlpV2InspectionRuleSet

class TestGooglePrivacyDlpV2InspectionRuleSet(unittest.TestCase):
    """GooglePrivacyDlpV2InspectionRuleSet unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> GooglePrivacyDlpV2InspectionRuleSet:
        """Test GooglePrivacyDlpV2InspectionRuleSet
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `GooglePrivacyDlpV2InspectionRuleSet`
        """
        model = GooglePrivacyDlpV2InspectionRuleSet()
        if include_optional:
            return GooglePrivacyDlpV2InspectionRuleSet(
                info_types = [
                    openapi_client.models.google_privacy_dlp_v2_info_type.GooglePrivacyDlpV2InfoType(
                        name = '', 
                        sensitivity_score = openapi_client.models.google_privacy_dlp_v2_sensitivity_score.GooglePrivacyDlpV2SensitivityScore(
                            score = 'SENSITIVITY_SCORE_UNSPECIFIED', ), 
                        version = '', )
                    ],
                rules = [
                    openapi_client.models.google_privacy_dlp_v2_inspection_rule.GooglePrivacyDlpV2InspectionRule(
                        exclusion_rule = openapi_client.models.google_privacy_dlp_v2_exclusion_rule.GooglePrivacyDlpV2ExclusionRule(
                            dictionary = openapi_client.models.google_privacy_dlp_v2_dictionary.GooglePrivacyDlpV2Dictionary(
                                cloud_storage_path = openapi_client.models.google_privacy_dlp_v2_cloud_storage_path.GooglePrivacyDlpV2CloudStoragePath(
                                    path = '', ), 
                                word_list = openapi_client.models.google_privacy_dlp_v2_word_list.GooglePrivacyDlpV2WordList(
                                    words = [
                                        ''
                                        ], ), ), 
                            exclude_by_hotword = openapi_client.models.google_privacy_dlp_v2_exclude_by_hotword.GooglePrivacyDlpV2ExcludeByHotword(
                                hotword_regex = openapi_client.models.google_privacy_dlp_v2_regex.GooglePrivacyDlpV2Regex(
                                    group_indexes = [
                                        56
                                        ], 
                                    pattern = '', ), 
                                proximity = openapi_client.models.google_privacy_dlp_v2_proximity.GooglePrivacyDlpV2Proximity(
                                    window_after = 56, 
                                    window_before = 56, ), ), 
                            exclude_info_types = openapi_client.models.google_privacy_dlp_v2_exclude_info_types.GooglePrivacyDlpV2ExcludeInfoTypes(
                                info_types = [
                                    openapi_client.models.google_privacy_dlp_v2_info_type.GooglePrivacyDlpV2InfoType(
                                        name = '', 
                                        sensitivity_score = openapi_client.models.google_privacy_dlp_v2_sensitivity_score.GooglePrivacyDlpV2SensitivityScore(
                                            score = 'SENSITIVITY_SCORE_UNSPECIFIED', ), 
                                        version = '', )
                                    ], ), 
                            matching_type = 'MATCHING_TYPE_UNSPECIFIED', 
                            regex = openapi_client.models.google_privacy_dlp_v2_regex.GooglePrivacyDlpV2Regex(
                                pattern = '', ), ), 
                        hotword_rule = openapi_client.models.google_privacy_dlp_v2_hotword_rule.GooglePrivacyDlpV2HotwordRule(
                            likelihood_adjustment = openapi_client.models.google_privacy_dlp_v2_likelihood_adjustment.GooglePrivacyDlpV2LikelihoodAdjustment(
                                fixed_likelihood = 'LIKELIHOOD_UNSPECIFIED', 
                                relative_likelihood = 56, ), ), )
                    ]
            )
        else:
            return GooglePrivacyDlpV2InspectionRuleSet(
        )
        """

    def testGooglePrivacyDlpV2InspectionRuleSet(self):
        """Test GooglePrivacyDlpV2InspectionRuleSet"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

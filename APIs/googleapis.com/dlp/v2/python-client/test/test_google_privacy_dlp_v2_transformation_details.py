# coding: utf-8

"""
    Sensitive Data Protection (DLP)

    Discover and protect your sensitive data. A fully managed service designed to help you discover, classify, and protect your valuable data assets with ease.

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.google_privacy_dlp_v2_transformation_details import GooglePrivacyDlpV2TransformationDetails

class TestGooglePrivacyDlpV2TransformationDetails(unittest.TestCase):
    """GooglePrivacyDlpV2TransformationDetails unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> GooglePrivacyDlpV2TransformationDetails:
        """Test GooglePrivacyDlpV2TransformationDetails
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `GooglePrivacyDlpV2TransformationDetails`
        """
        model = GooglePrivacyDlpV2TransformationDetails()
        if include_optional:
            return GooglePrivacyDlpV2TransformationDetails(
                container_name = '',
                resource_name = '',
                status_details = openapi_client.models.google_privacy_dlp_v2_transformation_result_status.GooglePrivacyDlpV2TransformationResultStatus(
                    details = openapi_client.models.google_rpc_status.GoogleRpcStatus(
                        code = 56, 
                        message = '', ), 
                    result_status_type = 'STATE_TYPE_UNSPECIFIED', ),
                transformation = [
                    openapi_client.models.google_privacy_dlp_v2_transformation_description.GooglePrivacyDlpV2TransformationDescription(
                        condition = '', 
                        description = '', 
                        info_type = openapi_client.models.google_privacy_dlp_v2_info_type.GooglePrivacyDlpV2InfoType(
                            name = '', 
                            sensitivity_score = openapi_client.models.google_privacy_dlp_v2_sensitivity_score.GooglePrivacyDlpV2SensitivityScore(
                                score = 'SENSITIVITY_SCORE_UNSPECIFIED', ), 
                            version = '', ), 
                        type = 'TRANSFORMATION_TYPE_UNSPECIFIED', )
                    ],
                transformation_location = openapi_client.models.google_privacy_dlp_v2_transformation_location.GooglePrivacyDlpV2TransformationLocation(
                    container_type = 'TRANSFORM_UNKNOWN_CONTAINER', 
                    finding_id = '', 
                    record_transformation = openapi_client.models.google_privacy_dlp_v2_record_transformation.GooglePrivacyDlpV2RecordTransformation(
                        container_timestamp = '', 
                        container_version = '', 
                        field_id = openapi_client.models.google_privacy_dlp_v2_field_id.GooglePrivacyDlpV2FieldId(
                            name = '', ), ), ),
                transformed_bytes = ''
            )
        else:
            return GooglePrivacyDlpV2TransformationDetails(
        )
        """

    def testGooglePrivacyDlpV2TransformationDetails(self):
        """Test GooglePrivacyDlpV2TransformationDetails"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

# coding: utf-8

"""
    Sensitive Data Protection (DLP)

    Discover and protect your sensitive data. A fully managed service designed to help you discover, classify, and protect your valuable data assets with ease.

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.google_privacy_dlp_v2_privacy_metric import GooglePrivacyDlpV2PrivacyMetric

class TestGooglePrivacyDlpV2PrivacyMetric(unittest.TestCase):
    """GooglePrivacyDlpV2PrivacyMetric unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> GooglePrivacyDlpV2PrivacyMetric:
        """Test GooglePrivacyDlpV2PrivacyMetric
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `GooglePrivacyDlpV2PrivacyMetric`
        """
        model = GooglePrivacyDlpV2PrivacyMetric()
        if include_optional:
            return GooglePrivacyDlpV2PrivacyMetric(
                categorical_stats_config = openapi_client.models.google_privacy_dlp_v2_categorical_stats_config.GooglePrivacyDlpV2CategoricalStatsConfig(
                    field = openapi_client.models.google_privacy_dlp_v2_field_id.GooglePrivacyDlpV2FieldId(
                        name = '', ), ),
                delta_presence_estimation_config = openapi_client.models.google_privacy_dlp_v2_delta_presence_estimation_config.GooglePrivacyDlpV2DeltaPresenceEstimationConfig(
                    auxiliary_tables = [
                        openapi_client.models.google_privacy_dlp_v2_statistical_table.GooglePrivacyDlpV2StatisticalTable(
                            quasi_ids = [
                                openapi_client.models.google_privacy_dlp_v2_quasi_identifier_field.GooglePrivacyDlpV2QuasiIdentifierField(
                                    custom_tag = '', 
                                    field = openapi_client.models.google_privacy_dlp_v2_field_id.GooglePrivacyDlpV2FieldId(
                                        name = '', ), )
                                ], 
                            relative_frequency = openapi_client.models.google_privacy_dlp_v2_field_id.GooglePrivacyDlpV2FieldId(
                                name = '', ), 
                            table = openapi_client.models.google_privacy_dlp_v2_big_query_table.GooglePrivacyDlpV2BigQueryTable(
                                dataset_id = '', 
                                project_id = '', 
                                table_id = '', ), )
                        ], 
                    quasi_ids = [
                        openapi_client.models.google_privacy_dlp_v2_quasi_id.GooglePrivacyDlpV2QuasiId(
                            custom_tag = '', 
                            inferred = openapi_client.models.google_protobuf_empty.GoogleProtobufEmpty(), 
                            info_type = openapi_client.models.google_privacy_dlp_v2_info_type.GooglePrivacyDlpV2InfoType(
                                name = '', 
                                sensitivity_score = openapi_client.models.google_privacy_dlp_v2_sensitivity_score.GooglePrivacyDlpV2SensitivityScore(
                                    score = 'SENSITIVITY_SCORE_UNSPECIFIED', ), 
                                version = '', ), )
                        ], 
                    region_code = '', ),
                k_anonymity_config = openapi_client.models.google_privacy_dlp_v2_k_anonymity_config.GooglePrivacyDlpV2KAnonymityConfig(
                    entity_id = openapi_client.models.google_privacy_dlp_v2_entity_id.GooglePrivacyDlpV2EntityId(
                        field = openapi_client.models.google_privacy_dlp_v2_field_id.GooglePrivacyDlpV2FieldId(
                            name = '', ), ), 
                    quasi_ids = [
                        openapi_client.models.google_privacy_dlp_v2_field_id.GooglePrivacyDlpV2FieldId(
                            name = '', )
                        ], ),
                k_map_estimation_config = openapi_client.models.google_privacy_dlp_v2_k_map_estimation_config.GooglePrivacyDlpV2KMapEstimationConfig(
                    auxiliary_tables = [
                        openapi_client.models.google_privacy_dlp_v2_auxiliary_table.GooglePrivacyDlpV2AuxiliaryTable(
                            quasi_ids = [
                                openapi_client.models.google_privacy_dlp_v2_quasi_id_field.GooglePrivacyDlpV2QuasiIdField(
                                    custom_tag = '', 
                                    field = openapi_client.models.google_privacy_dlp_v2_field_id.GooglePrivacyDlpV2FieldId(
                                        name = '', ), )
                                ], 
                            relative_frequency = openapi_client.models.google_privacy_dlp_v2_field_id.GooglePrivacyDlpV2FieldId(
                                name = '', ), 
                            table = openapi_client.models.google_privacy_dlp_v2_big_query_table.GooglePrivacyDlpV2BigQueryTable(
                                dataset_id = '', 
                                project_id = '', 
                                table_id = '', ), )
                        ], 
                    quasi_ids = [
                        openapi_client.models.google_privacy_dlp_v2_tagged_field.GooglePrivacyDlpV2TaggedField(
                            custom_tag = '', 
                            inferred = openapi_client.models.google_protobuf_empty.GoogleProtobufEmpty(), 
                            info_type = openapi_client.models.google_privacy_dlp_v2_info_type.GooglePrivacyDlpV2InfoType(
                                name = '', 
                                sensitivity_score = openapi_client.models.google_privacy_dlp_v2_sensitivity_score.GooglePrivacyDlpV2SensitivityScore(
                                    score = 'SENSITIVITY_SCORE_UNSPECIFIED', ), 
                                version = '', ), )
                        ], 
                    region_code = '', ),
                l_diversity_config = openapi_client.models.google_privacy_dlp_v2_l_diversity_config.GooglePrivacyDlpV2LDiversityConfig(
                    quasi_ids = [
                        openapi_client.models.google_privacy_dlp_v2_field_id.GooglePrivacyDlpV2FieldId(
                            name = '', )
                        ], 
                    sensitive_attribute = openapi_client.models.google_privacy_dlp_v2_field_id.GooglePrivacyDlpV2FieldId(
                        name = '', ), ),
                numerical_stats_config = openapi_client.models.google_privacy_dlp_v2_numerical_stats_config.GooglePrivacyDlpV2NumericalStatsConfig(
                    field = openapi_client.models.google_privacy_dlp_v2_field_id.GooglePrivacyDlpV2FieldId(
                        name = '', ), )
            )
        else:
            return GooglePrivacyDlpV2PrivacyMetric(
        )
        """

    def testGooglePrivacyDlpV2PrivacyMetric(self):
        """Test GooglePrivacyDlpV2PrivacyMetric"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

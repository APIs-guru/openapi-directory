# coding: utf-8

"""
    Sensitive Data Protection (DLP)

    Discover and protect your sensitive data. A fully managed service designed to help you discover, classify, and protect your valuable data assets with ease.

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.google_privacy_dlp_v2_cloud_storage_options import GooglePrivacyDlpV2CloudStorageOptions

class TestGooglePrivacyDlpV2CloudStorageOptions(unittest.TestCase):
    """GooglePrivacyDlpV2CloudStorageOptions unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> GooglePrivacyDlpV2CloudStorageOptions:
        """Test GooglePrivacyDlpV2CloudStorageOptions
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `GooglePrivacyDlpV2CloudStorageOptions`
        """
        model = GooglePrivacyDlpV2CloudStorageOptions()
        if include_optional:
            return GooglePrivacyDlpV2CloudStorageOptions(
                bytes_limit_per_file = '',
                bytes_limit_per_file_percent = 56,
                file_set = openapi_client.models.google_privacy_dlp_v2_file_set.GooglePrivacyDlpV2FileSet(
                    regex_file_set = openapi_client.models.google_privacy_dlp_v2_cloud_storage_regex_file_set.GooglePrivacyDlpV2CloudStorageRegexFileSet(
                        bucket_name = '', 
                        exclude_regex = [
                            ''
                            ], 
                        include_regex = [
                            ''
                            ], ), 
                    url = '', ),
                file_types = [
                    'FILE_TYPE_UNSPECIFIED'
                    ],
                files_limit_percent = 56,
                sample_method = 'SAMPLE_METHOD_UNSPECIFIED'
            )
        else:
            return GooglePrivacyDlpV2CloudStorageOptions(
        )
        """

    def testGooglePrivacyDlpV2CloudStorageOptions(self):
        """Test GooglePrivacyDlpV2CloudStorageOptions"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

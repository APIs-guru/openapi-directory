# coding: utf-8

"""
    Sensitive Data Protection (DLP)

    Discover and protect your sensitive data. A fully managed service designed to help you discover, classify, and protect your valuable data assets with ease.

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.google_privacy_dlp_v2_redact_image_request import GooglePrivacyDlpV2RedactImageRequest

class TestGooglePrivacyDlpV2RedactImageRequest(unittest.TestCase):
    """GooglePrivacyDlpV2RedactImageRequest unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> GooglePrivacyDlpV2RedactImageRequest:
        """Test GooglePrivacyDlpV2RedactImageRequest
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `GooglePrivacyDlpV2RedactImageRequest`
        """
        model = GooglePrivacyDlpV2RedactImageRequest()
        if include_optional:
            return GooglePrivacyDlpV2RedactImageRequest(
                byte_item = openapi_client.models.google_privacy_dlp_v2_byte_content_item.GooglePrivacyDlpV2ByteContentItem(
                    data = 'YQ==', 
                    type = 'BYTES_TYPE_UNSPECIFIED', ),
                image_redaction_configs = [
                    openapi_client.models.google_privacy_dlp_v2_image_redaction_config.GooglePrivacyDlpV2ImageRedactionConfig(
                        info_type = openapi_client.models.google_privacy_dlp_v2_info_type.GooglePrivacyDlpV2InfoType(
                            name = '', 
                            sensitivity_score = openapi_client.models.google_privacy_dlp_v2_sensitivity_score.GooglePrivacyDlpV2SensitivityScore(
                                score = 'SENSITIVITY_SCORE_UNSPECIFIED', ), 
                            version = '', ), 
                        redact_all_text = True, 
                        redaction_color = openapi_client.models.google_privacy_dlp_v2_color.GooglePrivacyDlpV2Color(
                            blue = 1.337, 
                            green = 1.337, 
                            red = 1.337, ), )
                    ],
                include_findings = True,
                inspect_config = openapi_client.models.google_privacy_dlp_v2_inspect_config.GooglePrivacyDlpV2InspectConfig(
                    content_options = [
                        'CONTENT_UNSPECIFIED'
                        ], 
                    custom_info_types = [
                        openapi_client.models.google_privacy_dlp_v2_custom_info_type.GooglePrivacyDlpV2CustomInfoType(
                            detection_rules = [
                                openapi_client.models.google_privacy_dlp_v2_detection_rule.GooglePrivacyDlpV2DetectionRule(
                                    hotword_rule = openapi_client.models.google_privacy_dlp_v2_hotword_rule.GooglePrivacyDlpV2HotwordRule(
                                        hotword_regex = openapi_client.models.google_privacy_dlp_v2_regex.GooglePrivacyDlpV2Regex(
                                            group_indexes = [
                                                56
                                                ], 
                                            pattern = '', ), 
                                        likelihood_adjustment = openapi_client.models.google_privacy_dlp_v2_likelihood_adjustment.GooglePrivacyDlpV2LikelihoodAdjustment(
                                            fixed_likelihood = 'LIKELIHOOD_UNSPECIFIED', 
                                            relative_likelihood = 56, ), 
                                        proximity = openapi_client.models.google_privacy_dlp_v2_proximity.GooglePrivacyDlpV2Proximity(
                                            window_after = 56, 
                                            window_before = 56, ), ), )
                                ], 
                            dictionary = openapi_client.models.google_privacy_dlp_v2_dictionary.GooglePrivacyDlpV2Dictionary(
                                cloud_storage_path = openapi_client.models.google_privacy_dlp_v2_cloud_storage_path.GooglePrivacyDlpV2CloudStoragePath(
                                    path = '', ), 
                                word_list = openapi_client.models.google_privacy_dlp_v2_word_list.GooglePrivacyDlpV2WordList(
                                    words = [
                                        ''
                                        ], ), ), 
                            exclusion_type = 'EXCLUSION_TYPE_UNSPECIFIED', 
                            info_type = openapi_client.models.google_privacy_dlp_v2_info_type.GooglePrivacyDlpV2InfoType(
                                name = '', 
                                sensitivity_score = openapi_client.models.google_privacy_dlp_v2_sensitivity_score.GooglePrivacyDlpV2SensitivityScore(
                                    score = 'SENSITIVITY_SCORE_UNSPECIFIED', ), 
                                version = '', ), 
                            likelihood = 'LIKELIHOOD_UNSPECIFIED', 
                            regex = openapi_client.models.google_privacy_dlp_v2_regex.GooglePrivacyDlpV2Regex(
                                pattern = '', ), 
                            sensitivity_score = openapi_client.models.google_privacy_dlp_v2_sensitivity_score.GooglePrivacyDlpV2SensitivityScore(
                                score = 'SENSITIVITY_SCORE_UNSPECIFIED', ), 
                            stored_type = openapi_client.models.google_privacy_dlp_v2_stored_type.GooglePrivacyDlpV2StoredType(
                                create_time = '', 
                                name = '', ), 
                            surrogate_type = openapi_client.models.google_privacy_dlp_v2_surrogate_type.GooglePrivacyDlpV2SurrogateType(), )
                        ], 
                    exclude_info_types = True, 
                    include_quote = True, 
                    info_types = [
                        openapi_client.models.google_privacy_dlp_v2_info_type.GooglePrivacyDlpV2InfoType(
                            name = '', 
                            version = '', )
                        ], 
                    limits = openapi_client.models.google_privacy_dlp_v2_finding_limits.GooglePrivacyDlpV2FindingLimits(
                        max_findings_per_info_type = [
                            openapi_client.models.google_privacy_dlp_v2_info_type_limit.GooglePrivacyDlpV2InfoTypeLimit(
                                max_findings = 56, )
                            ], 
                        max_findings_per_item = 56, 
                        max_findings_per_request = 56, ), 
                    min_likelihood = 'LIKELIHOOD_UNSPECIFIED', 
                    min_likelihood_per_info_type = [
                        openapi_client.models.google_privacy_dlp_v2_info_type_likelihood.GooglePrivacyDlpV2InfoTypeLikelihood(
                            min_likelihood = 'LIKELIHOOD_UNSPECIFIED', )
                        ], 
                    rule_set = [
                        openapi_client.models.google_privacy_dlp_v2_inspection_rule_set.GooglePrivacyDlpV2InspectionRuleSet(
                            rules = [
                                openapi_client.models.google_privacy_dlp_v2_inspection_rule.GooglePrivacyDlpV2InspectionRule(
                                    exclusion_rule = openapi_client.models.google_privacy_dlp_v2_exclusion_rule.GooglePrivacyDlpV2ExclusionRule(
                                        exclude_by_hotword = openapi_client.models.google_privacy_dlp_v2_exclude_by_hotword.GooglePrivacyDlpV2ExcludeByHotword(), 
                                        exclude_info_types = openapi_client.models.google_privacy_dlp_v2_exclude_info_types.GooglePrivacyDlpV2ExcludeInfoTypes(), 
                                        matching_type = 'MATCHING_TYPE_UNSPECIFIED', ), )
                                ], )
                        ], ),
                location_id = ''
            )
        else:
            return GooglePrivacyDlpV2RedactImageRequest(
        )
        """

    def testGooglePrivacyDlpV2RedactImageRequest(self):
        """Test GooglePrivacyDlpV2RedactImageRequest"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

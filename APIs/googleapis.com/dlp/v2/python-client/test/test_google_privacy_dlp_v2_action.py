# coding: utf-8

"""
    Sensitive Data Protection (DLP)

    Discover and protect your sensitive data. A fully managed service designed to help you discover, classify, and protect your valuable data assets with ease.

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.google_privacy_dlp_v2_action import GooglePrivacyDlpV2Action

class TestGooglePrivacyDlpV2Action(unittest.TestCase):
    """GooglePrivacyDlpV2Action unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> GooglePrivacyDlpV2Action:
        """Test GooglePrivacyDlpV2Action
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `GooglePrivacyDlpV2Action`
        """
        model = GooglePrivacyDlpV2Action()
        if include_optional:
            return GooglePrivacyDlpV2Action(
                deidentify = openapi_client.models.google_privacy_dlp_v2_deidentify.GooglePrivacyDlpV2Deidentify(
                    cloud_storage_output = '', 
                    file_types_to_transform = [
                        'FILE_TYPE_UNSPECIFIED'
                        ], 
                    transformation_config = openapi_client.models.google_privacy_dlp_v2_transformation_config.GooglePrivacyDlpV2TransformationConfig(
                        deidentify_template = '', 
                        image_redact_template = '', 
                        structured_deidentify_template = '', ), 
                    transformation_details_storage_config = openapi_client.models.google_privacy_dlp_v2_transformation_details_storage_config.GooglePrivacyDlpV2TransformationDetailsStorageConfig(
                        table = openapi_client.models.google_privacy_dlp_v2_big_query_table.GooglePrivacyDlpV2BigQueryTable(
                            dataset_id = '', 
                            project_id = '', 
                            table_id = '', ), ), ),
                job_notification_emails = None,
                pub_sub = openapi_client.models.google_privacy_dlp_v2_publish_to_pub_sub.GooglePrivacyDlpV2PublishToPubSub(
                    topic = '', ),
                publish_findings_to_cloud_data_catalog = None,
                publish_summary_to_cscc = None,
                publish_to_stackdriver = None,
                save_findings = openapi_client.models.google_privacy_dlp_v2_save_findings.GooglePrivacyDlpV2SaveFindings(
                    output_config = openapi_client.models.google_privacy_dlp_v2_output_storage_config.GooglePrivacyDlpV2OutputStorageConfig(
                        output_schema = 'OUTPUT_SCHEMA_UNSPECIFIED', 
                        table = openapi_client.models.google_privacy_dlp_v2_big_query_table.GooglePrivacyDlpV2BigQueryTable(
                            dataset_id = '', 
                            project_id = '', 
                            table_id = '', ), ), )
            )
        else:
            return GooglePrivacyDlpV2Action(
        )
        """

    def testGooglePrivacyDlpV2Action(self):
        """Test GooglePrivacyDlpV2Action"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

# coding: utf-8

"""
    Sensitive Data Protection (DLP)

    Discover and protect your sensitive data. A fully managed service designed to help you discover, classify, and protect your valuable data assets with ease.

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.google_privacy_dlp_v2_storage_config import GooglePrivacyDlpV2StorageConfig

class TestGooglePrivacyDlpV2StorageConfig(unittest.TestCase):
    """GooglePrivacyDlpV2StorageConfig unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> GooglePrivacyDlpV2StorageConfig:
        """Test GooglePrivacyDlpV2StorageConfig
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `GooglePrivacyDlpV2StorageConfig`
        """
        model = GooglePrivacyDlpV2StorageConfig()
        if include_optional:
            return GooglePrivacyDlpV2StorageConfig(
                big_query_options = openapi_client.models.google_privacy_dlp_v2_big_query_options.GooglePrivacyDlpV2BigQueryOptions(
                    excluded_fields = [
                        openapi_client.models.google_privacy_dlp_v2_field_id.GooglePrivacyDlpV2FieldId(
                            name = '', )
                        ], 
                    identifying_fields = [
                        openapi_client.models.google_privacy_dlp_v2_field_id.GooglePrivacyDlpV2FieldId(
                            name = '', )
                        ], 
                    included_fields = [
                        
                        ], 
                    rows_limit = '', 
                    rows_limit_percent = 56, 
                    sample_method = 'SAMPLE_METHOD_UNSPECIFIED', 
                    table_reference = openapi_client.models.google_privacy_dlp_v2_big_query_table.GooglePrivacyDlpV2BigQueryTable(
                        dataset_id = '', 
                        project_id = '', 
                        table_id = '', ), ),
                cloud_storage_options = openapi_client.models.google_privacy_dlp_v2_cloud_storage_options.GooglePrivacyDlpV2CloudStorageOptions(
                    bytes_limit_per_file = '', 
                    bytes_limit_per_file_percent = 56, 
                    file_set = openapi_client.models.google_privacy_dlp_v2_file_set.GooglePrivacyDlpV2FileSet(
                        regex_file_set = openapi_client.models.google_privacy_dlp_v2_cloud_storage_regex_file_set.GooglePrivacyDlpV2CloudStorageRegexFileSet(
                            bucket_name = '', 
                            exclude_regex = [
                                ''
                                ], 
                            include_regex = [
                                ''
                                ], ), 
                        url = '', ), 
                    file_types = [
                        'FILE_TYPE_UNSPECIFIED'
                        ], 
                    files_limit_percent = 56, 
                    sample_method = 'SAMPLE_METHOD_UNSPECIFIED', ),
                datastore_options = openapi_client.models.google_privacy_dlp_v2_datastore_options.GooglePrivacyDlpV2DatastoreOptions(
                    kind = openapi_client.models.google_privacy_dlp_v2_kind_expression.GooglePrivacyDlpV2KindExpression(
                        name = '', ), 
                    partition_id = openapi_client.models.google_privacy_dlp_v2_partition_id.GooglePrivacyDlpV2PartitionId(
                        namespace_id = '', 
                        project_id = '', ), ),
                hybrid_options = openapi_client.models.google_privacy_dlp_v2_hybrid_options.GooglePrivacyDlpV2HybridOptions(
                    description = '', 
                    labels = {
                        'key' : ''
                        }, 
                    required_finding_label_keys = [
                        ''
                        ], 
                    table_options = openapi_client.models.google_privacy_dlp_v2_table_options.GooglePrivacyDlpV2TableOptions(
                        identifying_fields = [
                            openapi_client.models.google_privacy_dlp_v2_field_id.GooglePrivacyDlpV2FieldId(
                                name = '', )
                            ], ), ),
                timespan_config = openapi_client.models.google_privacy_dlp_v2_timespan_config.GooglePrivacyDlpV2TimespanConfig(
                    enable_auto_population_of_timespan_config = True, 
                    end_time = '', 
                    start_time = '', 
                    timestamp_field = openapi_client.models.google_privacy_dlp_v2_field_id.GooglePrivacyDlpV2FieldId(
                        name = '', ), )
            )
        else:
            return GooglePrivacyDlpV2StorageConfig(
        )
        """

    def testGooglePrivacyDlpV2StorageConfig(self):
        """Test GooglePrivacyDlpV2StorageConfig"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

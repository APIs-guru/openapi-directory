# coding: utf-8

"""
    Sensitive Data Protection (DLP)

    Discover and protect your sensitive data. A fully managed service designed to help you discover, classify, and protect your valuable data assets with ease.

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_privacy_dlp_v2_data_profile_action import GooglePrivacyDlpV2DataProfileAction
from openapi_client.models.google_privacy_dlp_v2_data_profile_location import GooglePrivacyDlpV2DataProfileLocation
from typing import Optional, Set
from typing_extensions import Self

class GooglePrivacyDlpV2DataProfileJobConfig(BaseModel):
    """
    Configuration for setting up a job to scan resources for profile generation. Only one data profile configuration may exist per organization, folder, or project. The generated data profiles are retained according to the [data retention policy] (https://cloud.google.com/sensitive-data-protection/docs/data-profiles#retention).
    """ # noqa: E501
    data_profile_actions: Optional[List[GooglePrivacyDlpV2DataProfileAction]] = Field(default=None, description="Actions to execute at the completion of the job.", alias="dataProfileActions")
    inspect_templates: Optional[List[StrictStr]] = Field(default=None, description="Detection logic for profile generation. Not all template features are used by profiles. FindingLimits, include_quote and exclude_info_types have no impact on data profiling. Multiple templates may be provided if there is data in multiple regions. At most one template must be specified per-region (including \"global\"). Each region is scanned using the applicable template. If no region-specific template is specified, but a \"global\" template is specified, it will be copied to that region and used instead. If no global or region-specific template is provided for a region with data, that region's data will not be scanned. For more information, see https://cloud.google.com/sensitive-data-protection/docs/data-profiles#data-residency.", alias="inspectTemplates")
    location: Optional[GooglePrivacyDlpV2DataProfileLocation] = None
    project_id: Optional[StrictStr] = Field(default=None, description="The project that will run the scan. The DLP service account that exists within this project must have access to all resources that are profiled, and the Cloud DLP API must be enabled.", alias="projectId")
    __properties: ClassVar[List[str]] = ["dataProfileActions", "inspectTemplates", "location", "projectId"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GooglePrivacyDlpV2DataProfileJobConfig from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in data_profile_actions (list)
        _items = []
        if self.data_profile_actions:
            for _item_data_profile_actions in self.data_profile_actions:
                if _item_data_profile_actions:
                    _items.append(_item_data_profile_actions.to_dict())
            _dict['dataProfileActions'] = _items
        # override the default output from pydantic by calling `to_dict()` of location
        if self.location:
            _dict['location'] = self.location.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GooglePrivacyDlpV2DataProfileJobConfig from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "dataProfileActions": [GooglePrivacyDlpV2DataProfileAction.from_dict(_item) for _item in obj["dataProfileActions"]] if obj.get("dataProfileActions") is not None else None,
            "inspectTemplates": obj.get("inspectTemplates"),
            "location": GooglePrivacyDlpV2DataProfileLocation.from_dict(obj["location"]) if obj.get("location") is not None else None,
            "projectId": obj.get("projectId")
        })
        return _obj



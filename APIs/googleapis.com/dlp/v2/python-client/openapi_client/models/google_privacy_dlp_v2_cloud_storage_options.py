# coding: utf-8

"""
    Sensitive Data Protection (DLP)

    Discover and protect your sensitive data. A fully managed service designed to help you discover, classify, and protect your valuable data assets with ease.

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_privacy_dlp_v2_file_set import GooglePrivacyDlpV2FileSet
from typing import Optional, Set
from typing_extensions import Self

class GooglePrivacyDlpV2CloudStorageOptions(BaseModel):
    """
    Options defining a file or a set of files within a Cloud Storage bucket.
    """ # noqa: E501
    bytes_limit_per_file: Optional[StrictStr] = Field(default=None, description="Max number of bytes to scan from a file. If a scanned file's size is bigger than this value then the rest of the bytes are omitted. Only one of `bytes_limit_per_file` and `bytes_limit_per_file_percent` can be specified. This field can't be set if de-identification is requested. For certain file types, setting this field has no effect. For more information, see [Limits on bytes scanned per file](https://cloud.google.com/sensitive-data-protection/docs/supported-file-types#max-byte-size-per-file).", alias="bytesLimitPerFile")
    bytes_limit_per_file_percent: Optional[StrictInt] = Field(default=None, description="Max percentage of bytes to scan from a file. The rest are omitted. The number of bytes scanned is rounded down. Must be between 0 and 100, inclusively. Both 0 and 100 means no limit. Defaults to 0. Only one of bytes_limit_per_file and bytes_limit_per_file_percent can be specified. This field can't be set if de-identification is requested. For certain file types, setting this field has no effect. For more information, see [Limits on bytes scanned per file](https://cloud.google.com/sensitive-data-protection/docs/supported-file-types#max-byte-size-per-file).", alias="bytesLimitPerFilePercent")
    file_set: Optional[GooglePrivacyDlpV2FileSet] = Field(default=None, alias="fileSet")
    file_types: Optional[List[StrictStr]] = Field(default=None, description="List of file type groups to include in the scan. If empty, all files are scanned and available data format processors are applied. In addition, the binary content of the selected files is always scanned as well. Images are scanned only as binary if the specified region does not support image inspection and no file_types were specified. Image inspection is restricted to 'global', 'us', 'asia', and 'europe'.", alias="fileTypes")
    files_limit_percent: Optional[StrictInt] = Field(default=None, description="Limits the number of files to scan to this percentage of the input FileSet. Number of files scanned is rounded down. Must be between 0 and 100, inclusively. Both 0 and 100 means no limit. Defaults to 0.", alias="filesLimitPercent")
    sample_method: Optional[StrictStr] = Field(default=None, description="How to sample the data.", alias="sampleMethod")
    __properties: ClassVar[List[str]] = ["bytesLimitPerFile", "bytesLimitPerFilePercent", "fileSet", "fileTypes", "filesLimitPercent", "sampleMethod"]

    @field_validator('file_types')
    def file_types_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        for i in value:
            if i not in set(['FILE_TYPE_UNSPECIFIED', 'BINARY_FILE', 'TEXT_FILE', 'IMAGE', 'WORD', 'PDF', 'AVRO', 'CSV', 'TSV', 'POWERPOINT', 'EXCEL']):
                raise ValueError("each list item must be one of ('FILE_TYPE_UNSPECIFIED', 'BINARY_FILE', 'TEXT_FILE', 'IMAGE', 'WORD', 'PDF', 'AVRO', 'CSV', 'TSV', 'POWERPOINT', 'EXCEL')")
        return value

    @field_validator('sample_method')
    def sample_method_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['SAMPLE_METHOD_UNSPECIFIED', 'TOP', 'RANDOM_START']):
            raise ValueError("must be one of enum values ('SAMPLE_METHOD_UNSPECIFIED', 'TOP', 'RANDOM_START')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GooglePrivacyDlpV2CloudStorageOptions from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of file_set
        if self.file_set:
            _dict['fileSet'] = self.file_set.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GooglePrivacyDlpV2CloudStorageOptions from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "bytesLimitPerFile": obj.get("bytesLimitPerFile"),
            "bytesLimitPerFilePercent": obj.get("bytesLimitPerFilePercent"),
            "fileSet": GooglePrivacyDlpV2FileSet.from_dict(obj["fileSet"]) if obj.get("fileSet") is not None else None,
            "fileTypes": obj.get("fileTypes"),
            "filesLimitPercent": obj.get("filesLimitPercent"),
            "sampleMethod": obj.get("sampleMethod")
        })
        return _obj



# coding: utf-8

"""
    Sensitive Data Protection (DLP)

    Discover and protect your sensitive data. A fully managed service designed to help you discover, classify, and protect your valuable data assets with ease.

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_privacy_dlp_v2_categorical_stats_config import GooglePrivacyDlpV2CategoricalStatsConfig
from openapi_client.models.google_privacy_dlp_v2_delta_presence_estimation_config import GooglePrivacyDlpV2DeltaPresenceEstimationConfig
from openapi_client.models.google_privacy_dlp_v2_k_anonymity_config import GooglePrivacyDlpV2KAnonymityConfig
from openapi_client.models.google_privacy_dlp_v2_k_map_estimation_config import GooglePrivacyDlpV2KMapEstimationConfig
from openapi_client.models.google_privacy_dlp_v2_l_diversity_config import GooglePrivacyDlpV2LDiversityConfig
from openapi_client.models.google_privacy_dlp_v2_numerical_stats_config import GooglePrivacyDlpV2NumericalStatsConfig
from typing import Optional, Set
from typing_extensions import Self

class GooglePrivacyDlpV2PrivacyMetric(BaseModel):
    """
    Privacy metric to compute for reidentification risk analysis.
    """ # noqa: E501
    categorical_stats_config: Optional[GooglePrivacyDlpV2CategoricalStatsConfig] = Field(default=None, alias="categoricalStatsConfig")
    delta_presence_estimation_config: Optional[GooglePrivacyDlpV2DeltaPresenceEstimationConfig] = Field(default=None, alias="deltaPresenceEstimationConfig")
    k_anonymity_config: Optional[GooglePrivacyDlpV2KAnonymityConfig] = Field(default=None, alias="kAnonymityConfig")
    k_map_estimation_config: Optional[GooglePrivacyDlpV2KMapEstimationConfig] = Field(default=None, alias="kMapEstimationConfig")
    l_diversity_config: Optional[GooglePrivacyDlpV2LDiversityConfig] = Field(default=None, alias="lDiversityConfig")
    numerical_stats_config: Optional[GooglePrivacyDlpV2NumericalStatsConfig] = Field(default=None, alias="numericalStatsConfig")
    __properties: ClassVar[List[str]] = ["categoricalStatsConfig", "deltaPresenceEstimationConfig", "kAnonymityConfig", "kMapEstimationConfig", "lDiversityConfig", "numericalStatsConfig"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GooglePrivacyDlpV2PrivacyMetric from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of categorical_stats_config
        if self.categorical_stats_config:
            _dict['categoricalStatsConfig'] = self.categorical_stats_config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of delta_presence_estimation_config
        if self.delta_presence_estimation_config:
            _dict['deltaPresenceEstimationConfig'] = self.delta_presence_estimation_config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of k_anonymity_config
        if self.k_anonymity_config:
            _dict['kAnonymityConfig'] = self.k_anonymity_config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of k_map_estimation_config
        if self.k_map_estimation_config:
            _dict['kMapEstimationConfig'] = self.k_map_estimation_config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of l_diversity_config
        if self.l_diversity_config:
            _dict['lDiversityConfig'] = self.l_diversity_config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of numerical_stats_config
        if self.numerical_stats_config:
            _dict['numericalStatsConfig'] = self.numerical_stats_config.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GooglePrivacyDlpV2PrivacyMetric from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "categoricalStatsConfig": GooglePrivacyDlpV2CategoricalStatsConfig.from_dict(obj["categoricalStatsConfig"]) if obj.get("categoricalStatsConfig") is not None else None,
            "deltaPresenceEstimationConfig": GooglePrivacyDlpV2DeltaPresenceEstimationConfig.from_dict(obj["deltaPresenceEstimationConfig"]) if obj.get("deltaPresenceEstimationConfig") is not None else None,
            "kAnonymityConfig": GooglePrivacyDlpV2KAnonymityConfig.from_dict(obj["kAnonymityConfig"]) if obj.get("kAnonymityConfig") is not None else None,
            "kMapEstimationConfig": GooglePrivacyDlpV2KMapEstimationConfig.from_dict(obj["kMapEstimationConfig"]) if obj.get("kMapEstimationConfig") is not None else None,
            "lDiversityConfig": GooglePrivacyDlpV2LDiversityConfig.from_dict(obj["lDiversityConfig"]) if obj.get("lDiversityConfig") is not None else None,
            "numericalStatsConfig": GooglePrivacyDlpV2NumericalStatsConfig.from_dict(obj["numericalStatsConfig"]) if obj.get("numericalStatsConfig") is not None else None
        })
        return _obj



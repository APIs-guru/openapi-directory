# coding: utf-8

"""
    Sensitive Data Protection (DLP)

    Discover and protect your sensitive data. A fully managed service designed to help you discover, classify, and protect your valuable data assets with ease.

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_privacy_dlp_v2_custom_info_type import GooglePrivacyDlpV2CustomInfoType
from openapi_client.models.google_privacy_dlp_v2_finding_limits import GooglePrivacyDlpV2FindingLimits
from openapi_client.models.google_privacy_dlp_v2_info_type import GooglePrivacyDlpV2InfoType
from openapi_client.models.google_privacy_dlp_v2_info_type_likelihood import GooglePrivacyDlpV2InfoTypeLikelihood
from openapi_client.models.google_privacy_dlp_v2_inspection_rule_set import GooglePrivacyDlpV2InspectionRuleSet
from typing import Optional, Set
from typing_extensions import Self

class GooglePrivacyDlpV2InspectConfig(BaseModel):
    """
    Configuration description of the scanning process. When used with redactContent only info_types and min_likelihood are currently used.
    """ # noqa: E501
    content_options: Optional[List[StrictStr]] = Field(default=None, description="Deprecated and unused.", alias="contentOptions")
    custom_info_types: Optional[List[GooglePrivacyDlpV2CustomInfoType]] = Field(default=None, description="CustomInfoTypes provided by the user. See https://cloud.google.com/sensitive-data-protection/docs/creating-custom-infotypes to learn more.", alias="customInfoTypes")
    exclude_info_types: Optional[StrictBool] = Field(default=None, description="When true, excludes type information of the findings. This is not used for data profiling.", alias="excludeInfoTypes")
    include_quote: Optional[StrictBool] = Field(default=None, description="When true, a contextual quote from the data that triggered a finding is included in the response; see Finding.quote. This is not used for data profiling.", alias="includeQuote")
    info_types: Optional[List[GooglePrivacyDlpV2InfoType]] = Field(default=None, description="Restricts what info_types to look for. The values must correspond to InfoType values returned by ListInfoTypes or listed at https://cloud.google.com/sensitive-data-protection/docs/infotypes-reference. When no InfoTypes or CustomInfoTypes are specified in a request, the system may automatically choose a default list of detectors to run, which may change over time. If you need precise control and predictability as to what detectors are run you should specify specific InfoTypes listed in the reference, otherwise a default list will be used, which may change over time.", alias="infoTypes")
    limits: Optional[GooglePrivacyDlpV2FindingLimits] = None
    min_likelihood: Optional[StrictStr] = Field(default=None, description="Only returns findings equal to or above this threshold. The default is POSSIBLE. In general, the highest likelihood setting yields the fewest findings in results and the lowest chance of a false positive. For more information, see [Match likelihood](https://cloud.google.com/sensitive-data-protection/docs/likelihood).", alias="minLikelihood")
    min_likelihood_per_info_type: Optional[List[GooglePrivacyDlpV2InfoTypeLikelihood]] = Field(default=None, description="Minimum likelihood per infotype. For each infotype, a user can specify a minimum likelihood. The system only returns a finding if its likelihood is above this threshold. If this field is not set, the system uses the InspectConfig min_likelihood.", alias="minLikelihoodPerInfoType")
    rule_set: Optional[List[GooglePrivacyDlpV2InspectionRuleSet]] = Field(default=None, description="Set of rules to apply to the findings for this InspectConfig. Exclusion rules, contained in the set are executed in the end, other rules are executed in the order they are specified for each info type.", alias="ruleSet")
    __properties: ClassVar[List[str]] = ["contentOptions", "customInfoTypes", "excludeInfoTypes", "includeQuote", "infoTypes", "limits", "minLikelihood", "minLikelihoodPerInfoType", "ruleSet"]

    @field_validator('content_options')
    def content_options_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        for i in value:
            if i not in set(['CONTENT_UNSPECIFIED', 'CONTENT_TEXT', 'CONTENT_IMAGE']):
                raise ValueError("each list item must be one of ('CONTENT_UNSPECIFIED', 'CONTENT_TEXT', 'CONTENT_IMAGE')")
        return value

    @field_validator('min_likelihood')
    def min_likelihood_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['LIKELIHOOD_UNSPECIFIED', 'VERY_UNLIKELY', 'UNLIKELY', 'POSSIBLE', 'LIKELY', 'VERY_LIKELY']):
            raise ValueError("must be one of enum values ('LIKELIHOOD_UNSPECIFIED', 'VERY_UNLIKELY', 'UNLIKELY', 'POSSIBLE', 'LIKELY', 'VERY_LIKELY')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GooglePrivacyDlpV2InspectConfig from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in custom_info_types (list)
        _items = []
        if self.custom_info_types:
            for _item_custom_info_types in self.custom_info_types:
                if _item_custom_info_types:
                    _items.append(_item_custom_info_types.to_dict())
            _dict['customInfoTypes'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in info_types (list)
        _items = []
        if self.info_types:
            for _item_info_types in self.info_types:
                if _item_info_types:
                    _items.append(_item_info_types.to_dict())
            _dict['infoTypes'] = _items
        # override the default output from pydantic by calling `to_dict()` of limits
        if self.limits:
            _dict['limits'] = self.limits.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in min_likelihood_per_info_type (list)
        _items = []
        if self.min_likelihood_per_info_type:
            for _item_min_likelihood_per_info_type in self.min_likelihood_per_info_type:
                if _item_min_likelihood_per_info_type:
                    _items.append(_item_min_likelihood_per_info_type.to_dict())
            _dict['minLikelihoodPerInfoType'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in rule_set (list)
        _items = []
        if self.rule_set:
            for _item_rule_set in self.rule_set:
                if _item_rule_set:
                    _items.append(_item_rule_set.to_dict())
            _dict['ruleSet'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GooglePrivacyDlpV2InspectConfig from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "contentOptions": obj.get("contentOptions"),
            "customInfoTypes": [GooglePrivacyDlpV2CustomInfoType.from_dict(_item) for _item in obj["customInfoTypes"]] if obj.get("customInfoTypes") is not None else None,
            "excludeInfoTypes": obj.get("excludeInfoTypes"),
            "includeQuote": obj.get("includeQuote"),
            "infoTypes": [GooglePrivacyDlpV2InfoType.from_dict(_item) for _item in obj["infoTypes"]] if obj.get("infoTypes") is not None else None,
            "limits": GooglePrivacyDlpV2FindingLimits.from_dict(obj["limits"]) if obj.get("limits") is not None else None,
            "minLikelihood": obj.get("minLikelihood"),
            "minLikelihoodPerInfoType": [GooglePrivacyDlpV2InfoTypeLikelihood.from_dict(_item) for _item in obj["minLikelihoodPerInfoType"]] if obj.get("minLikelihoodPerInfoType") is not None else None,
            "ruleSet": [GooglePrivacyDlpV2InspectionRuleSet.from_dict(_item) for _item in obj["ruleSet"]] if obj.get("ruleSet") is not None else None
        })
        return _obj



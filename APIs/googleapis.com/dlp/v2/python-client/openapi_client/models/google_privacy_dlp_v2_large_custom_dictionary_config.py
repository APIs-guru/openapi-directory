# coding: utf-8

"""
    Sensitive Data Protection (DLP)

    Discover and protect your sensitive data. A fully managed service designed to help you discover, classify, and protect your valuable data assets with ease.

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_privacy_dlp_v2_big_query_field import GooglePrivacyDlpV2BigQueryField
from openapi_client.models.google_privacy_dlp_v2_cloud_storage_file_set import GooglePrivacyDlpV2CloudStorageFileSet
from openapi_client.models.google_privacy_dlp_v2_cloud_storage_path import GooglePrivacyDlpV2CloudStoragePath
from typing import Optional, Set
from typing_extensions import Self

class GooglePrivacyDlpV2LargeCustomDictionaryConfig(BaseModel):
    """
    Configuration for a custom dictionary created from a data source of any size up to the maximum size defined in the [limits](https://cloud.google.com/sensitive-data-protection/limits) page. The artifacts of dictionary creation are stored in the specified Cloud Storage location. Consider using `CustomInfoType.Dictionary` for smaller dictionaries that satisfy the size requirements.
    """ # noqa: E501
    big_query_field: Optional[GooglePrivacyDlpV2BigQueryField] = Field(default=None, alias="bigQueryField")
    cloud_storage_file_set: Optional[GooglePrivacyDlpV2CloudStorageFileSet] = Field(default=None, alias="cloudStorageFileSet")
    output_path: Optional[GooglePrivacyDlpV2CloudStoragePath] = Field(default=None, alias="outputPath")
    __properties: ClassVar[List[str]] = ["bigQueryField", "cloudStorageFileSet", "outputPath"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GooglePrivacyDlpV2LargeCustomDictionaryConfig from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of big_query_field
        if self.big_query_field:
            _dict['bigQueryField'] = self.big_query_field.to_dict()
        # override the default output from pydantic by calling `to_dict()` of cloud_storage_file_set
        if self.cloud_storage_file_set:
            _dict['cloudStorageFileSet'] = self.cloud_storage_file_set.to_dict()
        # override the default output from pydantic by calling `to_dict()` of output_path
        if self.output_path:
            _dict['outputPath'] = self.output_path.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GooglePrivacyDlpV2LargeCustomDictionaryConfig from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "bigQueryField": GooglePrivacyDlpV2BigQueryField.from_dict(obj["bigQueryField"]) if obj.get("bigQueryField") is not None else None,
            "cloudStorageFileSet": GooglePrivacyDlpV2CloudStorageFileSet.from_dict(obj["cloudStorageFileSet"]) if obj.get("cloudStorageFileSet") is not None else None,
            "outputPath": GooglePrivacyDlpV2CloudStoragePath.from_dict(obj["outputPath"]) if obj.get("outputPath") is not None else None
        })
        return _obj



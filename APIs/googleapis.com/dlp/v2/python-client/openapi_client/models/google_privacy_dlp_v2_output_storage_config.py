# coding: utf-8

"""
    Sensitive Data Protection (DLP)

    Discover and protect your sensitive data. A fully managed service designed to help you discover, classify, and protect your valuable data assets with ease.

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_privacy_dlp_v2_big_query_table import GooglePrivacyDlpV2BigQueryTable
from typing import Optional, Set
from typing_extensions import Self

class GooglePrivacyDlpV2OutputStorageConfig(BaseModel):
    """
    Cloud repository for storing output.
    """ # noqa: E501
    output_schema: Optional[StrictStr] = Field(default=None, description="Schema used for writing the findings for Inspect jobs. This field is only used for Inspect and must be unspecified for Risk jobs. Columns are derived from the `Finding` object. If appending to an existing table, any columns from the predefined schema that are missing will be added. No columns in the existing table will be deleted. If unspecified, then all available columns will be used for a new table or an (existing) table with no schema, and no changes will be made to an existing table that has a schema. Only for use with external storage.", alias="outputSchema")
    table: Optional[GooglePrivacyDlpV2BigQueryTable] = None
    __properties: ClassVar[List[str]] = ["outputSchema", "table"]

    @field_validator('output_schema')
    def output_schema_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['OUTPUT_SCHEMA_UNSPECIFIED', 'BASIC_COLUMNS', 'GCS_COLUMNS', 'DATASTORE_COLUMNS', 'BIG_QUERY_COLUMNS', 'ALL_COLUMNS']):
            raise ValueError("must be one of enum values ('OUTPUT_SCHEMA_UNSPECIFIED', 'BASIC_COLUMNS', 'GCS_COLUMNS', 'DATASTORE_COLUMNS', 'BIG_QUERY_COLUMNS', 'ALL_COLUMNS')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GooglePrivacyDlpV2OutputStorageConfig from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of table
        if self.table:
            _dict['table'] = self.table.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GooglePrivacyDlpV2OutputStorageConfig from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "outputSchema": obj.get("outputSchema"),
            "table": GooglePrivacyDlpV2BigQueryTable.from_dict(obj["table"]) if obj.get("table") is not None else None
        })
        return _obj



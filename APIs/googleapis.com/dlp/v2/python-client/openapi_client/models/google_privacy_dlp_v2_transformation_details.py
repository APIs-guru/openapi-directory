# coding: utf-8

"""
    Sensitive Data Protection (DLP)

    Discover and protect your sensitive data. A fully managed service designed to help you discover, classify, and protect your valuable data assets with ease.

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_privacy_dlp_v2_transformation_description import GooglePrivacyDlpV2TransformationDescription
from openapi_client.models.google_privacy_dlp_v2_transformation_location import GooglePrivacyDlpV2TransformationLocation
from openapi_client.models.google_privacy_dlp_v2_transformation_result_status import GooglePrivacyDlpV2TransformationResultStatus
from typing import Optional, Set
from typing_extensions import Self

class GooglePrivacyDlpV2TransformationDetails(BaseModel):
    """
    Details about a single transformation. This object contains a description of the transformation, information about whether the transformation was successfully applied, and the precise location where the transformation occurred. These details are stored in a user-specified BigQuery table.
    """ # noqa: E501
    container_name: Optional[StrictStr] = Field(default=None, description="The top level name of the container where the transformation is located (this will be the source file name or table name).", alias="containerName")
    resource_name: Optional[StrictStr] = Field(default=None, description="The name of the job that completed the transformation.", alias="resourceName")
    status_details: Optional[GooglePrivacyDlpV2TransformationResultStatus] = Field(default=None, alias="statusDetails")
    transformation: Optional[List[GooglePrivacyDlpV2TransformationDescription]] = Field(default=None, description="Description of transformation. This would only contain more than one element if there were multiple matching transformations and which one to apply was ambiguous. Not set for states that contain no transformation, currently only state that contains no transformation is TransformationResultStateType.METADATA_UNRETRIEVABLE.")
    transformation_location: Optional[GooglePrivacyDlpV2TransformationLocation] = Field(default=None, alias="transformationLocation")
    transformed_bytes: Optional[StrictStr] = Field(default=None, description="The number of bytes that were transformed. If transformation was unsuccessful or did not take place because there was no content to transform, this will be zero.", alias="transformedBytes")
    __properties: ClassVar[List[str]] = ["containerName", "resourceName", "statusDetails", "transformation", "transformationLocation", "transformedBytes"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GooglePrivacyDlpV2TransformationDetails from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of status_details
        if self.status_details:
            _dict['statusDetails'] = self.status_details.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in transformation (list)
        _items = []
        if self.transformation:
            for _item_transformation in self.transformation:
                if _item_transformation:
                    _items.append(_item_transformation.to_dict())
            _dict['transformation'] = _items
        # override the default output from pydantic by calling `to_dict()` of transformation_location
        if self.transformation_location:
            _dict['transformationLocation'] = self.transformation_location.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GooglePrivacyDlpV2TransformationDetails from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "containerName": obj.get("containerName"),
            "resourceName": obj.get("resourceName"),
            "statusDetails": GooglePrivacyDlpV2TransformationResultStatus.from_dict(obj["statusDetails"]) if obj.get("statusDetails") is not None else None,
            "transformation": [GooglePrivacyDlpV2TransformationDescription.from_dict(_item) for _item in obj["transformation"]] if obj.get("transformation") is not None else None,
            "transformationLocation": GooglePrivacyDlpV2TransformationLocation.from_dict(obj["transformationLocation"]) if obj.get("transformationLocation") is not None else None,
            "transformedBytes": obj.get("transformedBytes")
        })
        return _obj



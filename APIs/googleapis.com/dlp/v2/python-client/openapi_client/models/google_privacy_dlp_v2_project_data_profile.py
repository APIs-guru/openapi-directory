# coding: utf-8

"""
    Sensitive Data Protection (DLP)

    Discover and protect your sensitive data. A fully managed service designed to help you discover, classify, and protect your valuable data assets with ease.

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_privacy_dlp_v2_data_risk_level import GooglePrivacyDlpV2DataRiskLevel
from openapi_client.models.google_privacy_dlp_v2_profile_status import GooglePrivacyDlpV2ProfileStatus
from openapi_client.models.google_privacy_dlp_v2_sensitivity_score import GooglePrivacyDlpV2SensitivityScore
from typing import Optional, Set
from typing_extensions import Self

class GooglePrivacyDlpV2ProjectDataProfile(BaseModel):
    """
    An aggregated profile for this project, based on the resources profiled within it.
    """ # noqa: E501
    data_risk_level: Optional[GooglePrivacyDlpV2DataRiskLevel] = Field(default=None, alias="dataRiskLevel")
    name: Optional[StrictStr] = Field(default=None, description="The resource name of the profile.")
    profile_last_generated: Optional[StrictStr] = Field(default=None, description="The last time the profile was generated.", alias="profileLastGenerated")
    profile_status: Optional[GooglePrivacyDlpV2ProfileStatus] = Field(default=None, alias="profileStatus")
    project_id: Optional[StrictStr] = Field(default=None, description="Project ID that was profiled.", alias="projectId")
    sensitivity_score: Optional[GooglePrivacyDlpV2SensitivityScore] = Field(default=None, alias="sensitivityScore")
    __properties: ClassVar[List[str]] = ["dataRiskLevel", "name", "profileLastGenerated", "profileStatus", "projectId", "sensitivityScore"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GooglePrivacyDlpV2ProjectDataProfile from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of data_risk_level
        if self.data_risk_level:
            _dict['dataRiskLevel'] = self.data_risk_level.to_dict()
        # override the default output from pydantic by calling `to_dict()` of profile_status
        if self.profile_status:
            _dict['profileStatus'] = self.profile_status.to_dict()
        # override the default output from pydantic by calling `to_dict()` of sensitivity_score
        if self.sensitivity_score:
            _dict['sensitivityScore'] = self.sensitivity_score.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GooglePrivacyDlpV2ProjectDataProfile from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "dataRiskLevel": GooglePrivacyDlpV2DataRiskLevel.from_dict(obj["dataRiskLevel"]) if obj.get("dataRiskLevel") is not None else None,
            "name": obj.get("name"),
            "profileLastGenerated": obj.get("profileLastGenerated"),
            "profileStatus": GooglePrivacyDlpV2ProfileStatus.from_dict(obj["profileStatus"]) if obj.get("profileStatus") is not None else None,
            "projectId": obj.get("projectId"),
            "sensitivityScore": GooglePrivacyDlpV2SensitivityScore.from_dict(obj["sensitivityScore"]) if obj.get("sensitivityScore") is not None else None
        })
        return _obj



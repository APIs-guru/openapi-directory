# coding: utf-8

"""
    Sensitive Data Protection (DLP)

    Discover and protect your sensitive data. A fully managed service designed to help you discover, classify, and protect your valuable data assets with ease.

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_privacy_dlp_v2_data_profile_job_config import GooglePrivacyDlpV2DataProfileJobConfig
from openapi_client.models.google_privacy_dlp_v2_discovery_config import GooglePrivacyDlpV2DiscoveryConfig
from openapi_client.models.google_privacy_dlp_v2_inspect_config import GooglePrivacyDlpV2InspectConfig
from typing import Optional, Set
from typing_extensions import Self

class GooglePrivacyDlpV2DataProfileConfigSnapshot(BaseModel):
    """
    Snapshot of the configurations used to generate the profile.
    """ # noqa: E501
    data_profile_job: Optional[GooglePrivacyDlpV2DataProfileJobConfig] = Field(default=None, alias="dataProfileJob")
    discovery_config: Optional[GooglePrivacyDlpV2DiscoveryConfig] = Field(default=None, alias="discoveryConfig")
    inspect_config: Optional[GooglePrivacyDlpV2InspectConfig] = Field(default=None, alias="inspectConfig")
    inspect_template_modified_time: Optional[StrictStr] = Field(default=None, description="Timestamp when the template was modified", alias="inspectTemplateModifiedTime")
    inspect_template_name: Optional[StrictStr] = Field(default=None, description="Name of the inspection template used to generate this profile", alias="inspectTemplateName")
    __properties: ClassVar[List[str]] = ["dataProfileJob", "discoveryConfig", "inspectConfig", "inspectTemplateModifiedTime", "inspectTemplateName"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GooglePrivacyDlpV2DataProfileConfigSnapshot from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of data_profile_job
        if self.data_profile_job:
            _dict['dataProfileJob'] = self.data_profile_job.to_dict()
        # override the default output from pydantic by calling `to_dict()` of discovery_config
        if self.discovery_config:
            _dict['discoveryConfig'] = self.discovery_config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of inspect_config
        if self.inspect_config:
            _dict['inspectConfig'] = self.inspect_config.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GooglePrivacyDlpV2DataProfileConfigSnapshot from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "dataProfileJob": GooglePrivacyDlpV2DataProfileJobConfig.from_dict(obj["dataProfileJob"]) if obj.get("dataProfileJob") is not None else None,
            "discoveryConfig": GooglePrivacyDlpV2DiscoveryConfig.from_dict(obj["discoveryConfig"]) if obj.get("discoveryConfig") is not None else None,
            "inspectConfig": GooglePrivacyDlpV2InspectConfig.from_dict(obj["inspectConfig"]) if obj.get("inspectConfig") is not None else None,
            "inspectTemplateModifiedTime": obj.get("inspectTemplateModifiedTime"),
            "inspectTemplateName": obj.get("inspectTemplateName")
        })
        return _obj



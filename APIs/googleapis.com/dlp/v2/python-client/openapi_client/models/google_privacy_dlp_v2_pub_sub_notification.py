# coding: utf-8

"""
    Sensitive Data Protection (DLP)

    Discover and protect your sensitive data. A fully managed service designed to help you discover, classify, and protect your valuable data assets with ease.

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_privacy_dlp_v2_data_profile_pub_sub_condition import GooglePrivacyDlpV2DataProfilePubSubCondition
from typing import Optional, Set
from typing_extensions import Self

class GooglePrivacyDlpV2PubSubNotification(BaseModel):
    """
    Send a Pub/Sub message into the given Pub/Sub topic to connect other systems to data profile generation. The message payload data will be the byte serialization of `DataProfilePubSubMessage`.
    """ # noqa: E501
    detail_of_message: Optional[StrictStr] = Field(default=None, description="How much data to include in the Pub/Sub message. If the user wishes to limit the size of the message, they can use resource_name and fetch the profile fields they wish to. Per table profile (not per column).", alias="detailOfMessage")
    event: Optional[StrictStr] = Field(default=None, description="The type of event that triggers a Pub/Sub. At most one `PubSubNotification` per EventType is permitted.")
    pubsub_condition: Optional[GooglePrivacyDlpV2DataProfilePubSubCondition] = Field(default=None, alias="pubsubCondition")
    topic: Optional[StrictStr] = Field(default=None, description="Cloud Pub/Sub topic to send notifications to. Format is projects/{project}/topics/{topic}.")
    __properties: ClassVar[List[str]] = ["detailOfMessage", "event", "pubsubCondition", "topic"]

    @field_validator('detail_of_message')
    def detail_of_message_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['DETAIL_LEVEL_UNSPECIFIED', 'TABLE_PROFILE', 'RESOURCE_NAME']):
            raise ValueError("must be one of enum values ('DETAIL_LEVEL_UNSPECIFIED', 'TABLE_PROFILE', 'RESOURCE_NAME')")
        return value

    @field_validator('event')
    def event_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['EVENT_TYPE_UNSPECIFIED', 'NEW_PROFILE', 'CHANGED_PROFILE', 'SCORE_INCREASED', 'ERROR_CHANGED']):
            raise ValueError("must be one of enum values ('EVENT_TYPE_UNSPECIFIED', 'NEW_PROFILE', 'CHANGED_PROFILE', 'SCORE_INCREASED', 'ERROR_CHANGED')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GooglePrivacyDlpV2PubSubNotification from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of pubsub_condition
        if self.pubsub_condition:
            _dict['pubsubCondition'] = self.pubsub_condition.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GooglePrivacyDlpV2PubSubNotification from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "detailOfMessage": obj.get("detailOfMessage"),
            "event": obj.get("event"),
            "pubsubCondition": GooglePrivacyDlpV2DataProfilePubSubCondition.from_dict(obj["pubsubCondition"]) if obj.get("pubsubCondition") is not None else None,
            "topic": obj.get("topic")
        })
        return _obj



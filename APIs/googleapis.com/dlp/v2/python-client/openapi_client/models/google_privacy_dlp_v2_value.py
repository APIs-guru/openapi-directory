# coding: utf-8

"""
    Sensitive Data Protection (DLP)

    Discover and protect your sensitive data. A fully managed service designed to help you discover, classify, and protect your valuable data assets with ease.

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from openapi_client.models.google_type_date import GoogleTypeDate
from openapi_client.models.google_type_time_of_day import GoogleTypeTimeOfDay
from typing import Optional, Set
from typing_extensions import Self

class GooglePrivacyDlpV2Value(BaseModel):
    """
    Set of primitive values supported by the system. Note that for the purposes of inspection or transformation, the number of bytes considered to comprise a 'Value' is based on its representation as a UTF-8 encoded string. For example, if 'integer_value' is set to 123456789, the number of bytes would be counted as 9, even though an int64 only holds up to 8 bytes of data.
    """ # noqa: E501
    boolean_value: Optional[StrictBool] = Field(default=None, description="boolean", alias="booleanValue")
    date_value: Optional[GoogleTypeDate] = Field(default=None, alias="dateValue")
    day_of_week_value: Optional[StrictStr] = Field(default=None, description="day of week", alias="dayOfWeekValue")
    float_value: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="float", alias="floatValue")
    integer_value: Optional[StrictStr] = Field(default=None, description="integer", alias="integerValue")
    string_value: Optional[StrictStr] = Field(default=None, description="string", alias="stringValue")
    time_value: Optional[GoogleTypeTimeOfDay] = Field(default=None, alias="timeValue")
    timestamp_value: Optional[StrictStr] = Field(default=None, description="timestamp", alias="timestampValue")
    __properties: ClassVar[List[str]] = ["booleanValue", "dateValue", "dayOfWeekValue", "floatValue", "integerValue", "stringValue", "timeValue", "timestampValue"]

    @field_validator('day_of_week_value')
    def day_of_week_value_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['DAY_OF_WEEK_UNSPECIFIED', 'MONDAY', 'TUESDAY', 'WEDNESDAY', 'THURSDAY', 'FRIDAY', 'SATURDAY', 'SUNDAY']):
            raise ValueError("must be one of enum values ('DAY_OF_WEEK_UNSPECIFIED', 'MONDAY', 'TUESDAY', 'WEDNESDAY', 'THURSDAY', 'FRIDAY', 'SATURDAY', 'SUNDAY')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GooglePrivacyDlpV2Value from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of date_value
        if self.date_value:
            _dict['dateValue'] = self.date_value.to_dict()
        # override the default output from pydantic by calling `to_dict()` of time_value
        if self.time_value:
            _dict['timeValue'] = self.time_value.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GooglePrivacyDlpV2Value from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "booleanValue": obj.get("booleanValue"),
            "dateValue": GoogleTypeDate.from_dict(obj["dateValue"]) if obj.get("dateValue") is not None else None,
            "dayOfWeekValue": obj.get("dayOfWeekValue"),
            "floatValue": obj.get("floatValue"),
            "integerValue": obj.get("integerValue"),
            "stringValue": obj.get("stringValue"),
            "timeValue": GoogleTypeTimeOfDay.from_dict(obj["timeValue"]) if obj.get("timeValue") is not None else None,
            "timestampValue": obj.get("timestampValue")
        })
        return _obj



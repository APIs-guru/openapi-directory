# coding: utf-8

"""
    Sensitive Data Protection (DLP)

    Discover and protect your sensitive data. A fully managed service designed to help you discover, classify, and protect your valuable data assets with ease.

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_privacy_dlp_v2_container import GooglePrivacyDlpV2Container
from openapi_client.models.google_privacy_dlp_v2_table_options import GooglePrivacyDlpV2TableOptions
from typing import Optional, Set
from typing_extensions import Self

class GooglePrivacyDlpV2HybridFindingDetails(BaseModel):
    """
    Populate to associate additional data with each finding.
    """ # noqa: E501
    container_details: Optional[GooglePrivacyDlpV2Container] = Field(default=None, alias="containerDetails")
    file_offset: Optional[StrictStr] = Field(default=None, description="Offset in bytes of the line, from the beginning of the file, where the finding is located. Populate if the item being scanned is only part of a bigger item, such as a shard of a file and you want to track the absolute position of the finding.", alias="fileOffset")
    labels: Optional[Dict[str, StrictStr]] = Field(default=None, description="Labels to represent user provided metadata about the data being inspected. If configured by the job, some key values may be required. The labels associated with `Finding`'s produced by hybrid inspection. Label keys must be between 1 and 63 characters long and must conform to the following regular expression: `[a-z]([-a-z0-9]*[a-z0-9])?`. Label values must be between 0 and 63 characters long and must conform to the regular expression `([a-z]([-a-z0-9]*[a-z0-9])?)?`. No more than 10 labels can be associated with a given finding. Examples: * `\"environment\" : \"production\"` * `\"pipeline\" : \"etl\"`")
    row_offset: Optional[StrictStr] = Field(default=None, description="Offset of the row for tables. Populate if the row(s) being scanned are part of a bigger dataset and you want to keep track of their absolute position.", alias="rowOffset")
    table_options: Optional[GooglePrivacyDlpV2TableOptions] = Field(default=None, alias="tableOptions")
    __properties: ClassVar[List[str]] = ["containerDetails", "fileOffset", "labels", "rowOffset", "tableOptions"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GooglePrivacyDlpV2HybridFindingDetails from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of container_details
        if self.container_details:
            _dict['containerDetails'] = self.container_details.to_dict()
        # override the default output from pydantic by calling `to_dict()` of table_options
        if self.table_options:
            _dict['tableOptions'] = self.table_options.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GooglePrivacyDlpV2HybridFindingDetails from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "containerDetails": GooglePrivacyDlpV2Container.from_dict(obj["containerDetails"]) if obj.get("containerDetails") is not None else None,
            "fileOffset": obj.get("fileOffset"),
            "labels": obj.get("labels"),
            "rowOffset": obj.get("rowOffset"),
            "tableOptions": GooglePrivacyDlpV2TableOptions.from_dict(obj["tableOptions"]) if obj.get("tableOptions") is not None else None
        })
        return _obj



# coding: utf-8

"""
    Sensitive Data Protection (DLP)

    Discover and protect your sensitive data. A fully managed service designed to help you discover, classify, and protect your valuable data assets with ease.

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_privacy_dlp_v2_info_type import GooglePrivacyDlpV2InfoType
from typing import Optional, Set
from typing_extensions import Self

class GooglePrivacyDlpV2TransformationDescription(BaseModel):
    """
    A flattened description of a `PrimitiveTransformation` or `RecordSuppression`.
    """ # noqa: E501
    condition: Optional[StrictStr] = Field(default=None, description="A human-readable string representation of the `RecordCondition` corresponding to this transformation. Set if a `RecordCondition` was used to determine whether or not to apply this transformation. Examples: * (age_field > 85) * (age_field <= 18) * (zip_field exists) * (zip_field == 01234) && (city_field != \"Springville\") * (zip_field == 01234) && (age_field <= 18) && (city_field exists)")
    description: Optional[StrictStr] = Field(default=None, description="A description of the transformation. This is empty for a RECORD_SUPPRESSION, or is the output of calling toString() on the `PrimitiveTransformation` protocol buffer message for any other type of transformation.")
    info_type: Optional[GooglePrivacyDlpV2InfoType] = Field(default=None, alias="infoType")
    type: Optional[StrictStr] = Field(default=None, description="The transformation type.")
    __properties: ClassVar[List[str]] = ["condition", "description", "infoType", "type"]

    @field_validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['TRANSFORMATION_TYPE_UNSPECIFIED', 'RECORD_SUPPRESSION', 'REPLACE_VALUE', 'REPLACE_DICTIONARY', 'REDACT', 'CHARACTER_MASK', 'CRYPTO_REPLACE_FFX_FPE', 'FIXED_SIZE_BUCKETING', 'BUCKETING', 'REPLACE_WITH_INFO_TYPE', 'TIME_PART', 'CRYPTO_HASH', 'DATE_SHIFT', 'CRYPTO_DETERMINISTIC_CONFIG', 'REDACT_IMAGE']):
            raise ValueError("must be one of enum values ('TRANSFORMATION_TYPE_UNSPECIFIED', 'RECORD_SUPPRESSION', 'REPLACE_VALUE', 'REPLACE_DICTIONARY', 'REDACT', 'CHARACTER_MASK', 'CRYPTO_REPLACE_FFX_FPE', 'FIXED_SIZE_BUCKETING', 'BUCKETING', 'REPLACE_WITH_INFO_TYPE', 'TIME_PART', 'CRYPTO_HASH', 'DATE_SHIFT', 'CRYPTO_DETERMINISTIC_CONFIG', 'REDACT_IMAGE')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GooglePrivacyDlpV2TransformationDescription from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of info_type
        if self.info_type:
            _dict['infoType'] = self.info_type.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GooglePrivacyDlpV2TransformationDescription from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "condition": obj.get("condition"),
            "description": obj.get("description"),
            "infoType": GooglePrivacyDlpV2InfoType.from_dict(obj["infoType"]) if obj.get("infoType") is not None else None,
            "type": obj.get("type")
        })
        return _obj



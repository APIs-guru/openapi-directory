# coding: utf-8

"""
    Sensitive Data Protection (DLP)

    Discover and protect your sensitive data. A fully managed service designed to help you discover, classify, and protect your valuable data assets with ease.

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_privacy_dlp_v2_byte_content_item import GooglePrivacyDlpV2ByteContentItem
from openapi_client.models.google_privacy_dlp_v2_image_redaction_config import GooglePrivacyDlpV2ImageRedactionConfig
from openapi_client.models.google_privacy_dlp_v2_inspect_config import GooglePrivacyDlpV2InspectConfig
from typing import Optional, Set
from typing_extensions import Self

class GooglePrivacyDlpV2RedactImageRequest(BaseModel):
    """
    Request to search for potentially sensitive info in an image and redact it by covering it with a colored rectangle.
    """ # noqa: E501
    byte_item: Optional[GooglePrivacyDlpV2ByteContentItem] = Field(default=None, alias="byteItem")
    image_redaction_configs: Optional[List[GooglePrivacyDlpV2ImageRedactionConfig]] = Field(default=None, description="The configuration for specifying what content to redact from images.", alias="imageRedactionConfigs")
    include_findings: Optional[StrictBool] = Field(default=None, description="Whether the response should include findings along with the redacted image.", alias="includeFindings")
    inspect_config: Optional[GooglePrivacyDlpV2InspectConfig] = Field(default=None, alias="inspectConfig")
    location_id: Optional[StrictStr] = Field(default=None, description="Deprecated. This field has no effect.", alias="locationId")
    __properties: ClassVar[List[str]] = ["byteItem", "imageRedactionConfigs", "includeFindings", "inspectConfig", "locationId"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GooglePrivacyDlpV2RedactImageRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of byte_item
        if self.byte_item:
            _dict['byteItem'] = self.byte_item.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in image_redaction_configs (list)
        _items = []
        if self.image_redaction_configs:
            for _item_image_redaction_configs in self.image_redaction_configs:
                if _item_image_redaction_configs:
                    _items.append(_item_image_redaction_configs.to_dict())
            _dict['imageRedactionConfigs'] = _items
        # override the default output from pydantic by calling `to_dict()` of inspect_config
        if self.inspect_config:
            _dict['inspectConfig'] = self.inspect_config.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GooglePrivacyDlpV2RedactImageRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "byteItem": GooglePrivacyDlpV2ByteContentItem.from_dict(obj["byteItem"]) if obj.get("byteItem") is not None else None,
            "imageRedactionConfigs": [GooglePrivacyDlpV2ImageRedactionConfig.from_dict(_item) for _item in obj["imageRedactionConfigs"]] if obj.get("imageRedactionConfigs") is not None else None,
            "includeFindings": obj.get("includeFindings"),
            "inspectConfig": GooglePrivacyDlpV2InspectConfig.from_dict(obj["inspectConfig"]) if obj.get("inspectConfig") is not None else None,
            "locationId": obj.get("locationId")
        })
        return _obj



# coding: utf-8

"""
    Sensitive Data Protection (DLP)

    Discover and protect your sensitive data. A fully managed service designed to help you discover, classify, and protect your valuable data assets with ease.

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_privacy_dlp_v2_data_profile_action import GooglePrivacyDlpV2DataProfileAction
from openapi_client.models.google_privacy_dlp_v2_discovery_target import GooglePrivacyDlpV2DiscoveryTarget
from openapi_client.models.google_privacy_dlp_v2_error import GooglePrivacyDlpV2Error
from openapi_client.models.google_privacy_dlp_v2_org_config import GooglePrivacyDlpV2OrgConfig
from typing import Optional, Set
from typing_extensions import Self

class GooglePrivacyDlpV2DiscoveryConfig(BaseModel):
    """
    Configuration for discovery to scan resources for profile generation. Only one discovery configuration may exist per organization, folder, or project. The generated data profiles are retained according to the [data retention policy] (https://cloud.google.com/sensitive-data-protection/docs/data-profiles#retention).
    """ # noqa: E501
    actions: Optional[List[GooglePrivacyDlpV2DataProfileAction]] = Field(default=None, description="Actions to execute at the completion of scanning.")
    create_time: Optional[StrictStr] = Field(default=None, description="Output only. The creation timestamp of a DiscoveryConfig.", alias="createTime")
    display_name: Optional[StrictStr] = Field(default=None, description="Display name (max 100 chars)", alias="displayName")
    errors: Optional[List[GooglePrivacyDlpV2Error]] = Field(default=None, description="Output only. A stream of errors encountered when the config was activated. Repeated errors may result in the config automatically being paused. Output only field. Will return the last 100 errors. Whenever the config is modified this list will be cleared.")
    inspect_templates: Optional[List[StrictStr]] = Field(default=None, description="Detection logic for profile generation. Not all template features are used by Discovery. FindingLimits, include_quote and exclude_info_types have no impact on Discovery. Multiple templates may be provided if there is data in multiple regions. At most one template must be specified per-region (including \"global\"). Each region is scanned using the applicable template. If no region-specific template is specified, but a \"global\" template is specified, it will be copied to that region and used instead. If no global or region-specific template is provided for a region with data, that region's data will not be scanned. For more information, see https://cloud.google.com/sensitive-data-protection/docs/data-profiles#data-residency.", alias="inspectTemplates")
    last_run_time: Optional[StrictStr] = Field(default=None, description="Output only. The timestamp of the last time this config was executed.", alias="lastRunTime")
    name: Optional[StrictStr] = Field(default=None, description="Unique resource name for the DiscoveryConfig, assigned by the service when the DiscoveryConfig is created, for example `projects/dlp-test-project/locations/global/discoveryConfigs/53234423`.")
    org_config: Optional[GooglePrivacyDlpV2OrgConfig] = Field(default=None, alias="orgConfig")
    status: Optional[StrictStr] = Field(default=None, description="Required. A status for this configuration.")
    targets: Optional[List[GooglePrivacyDlpV2DiscoveryTarget]] = Field(default=None, description="Target to match against for determining what to scan and how frequently.")
    update_time: Optional[StrictStr] = Field(default=None, description="Output only. The last update timestamp of a DiscoveryConfig.", alias="updateTime")
    __properties: ClassVar[List[str]] = ["actions", "createTime", "displayName", "errors", "inspectTemplates", "lastRunTime", "name", "orgConfig", "status", "targets", "updateTime"]

    @field_validator('status')
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['STATUS_UNSPECIFIED', 'RUNNING', 'PAUSED']):
            raise ValueError("must be one of enum values ('STATUS_UNSPECIFIED', 'RUNNING', 'PAUSED')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GooglePrivacyDlpV2DiscoveryConfig from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "create_time",
            "errors",
            "last_run_time",
            "update_time",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in actions (list)
        _items = []
        if self.actions:
            for _item_actions in self.actions:
                if _item_actions:
                    _items.append(_item_actions.to_dict())
            _dict['actions'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in errors (list)
        _items = []
        if self.errors:
            for _item_errors in self.errors:
                if _item_errors:
                    _items.append(_item_errors.to_dict())
            _dict['errors'] = _items
        # override the default output from pydantic by calling `to_dict()` of org_config
        if self.org_config:
            _dict['orgConfig'] = self.org_config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in targets (list)
        _items = []
        if self.targets:
            for _item_targets in self.targets:
                if _item_targets:
                    _items.append(_item_targets.to_dict())
            _dict['targets'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GooglePrivacyDlpV2DiscoveryConfig from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "actions": [GooglePrivacyDlpV2DataProfileAction.from_dict(_item) for _item in obj["actions"]] if obj.get("actions") is not None else None,
            "createTime": obj.get("createTime"),
            "displayName": obj.get("displayName"),
            "errors": [GooglePrivacyDlpV2Error.from_dict(_item) for _item in obj["errors"]] if obj.get("errors") is not None else None,
            "inspectTemplates": obj.get("inspectTemplates"),
            "lastRunTime": obj.get("lastRunTime"),
            "name": obj.get("name"),
            "orgConfig": GooglePrivacyDlpV2OrgConfig.from_dict(obj["orgConfig"]) if obj.get("orgConfig") is not None else None,
            "status": obj.get("status"),
            "targets": [GooglePrivacyDlpV2DiscoveryTarget.from_dict(_item) for _item in obj["targets"]] if obj.get("targets") is not None else None,
            "updateTime": obj.get("updateTime")
        })
        return _obj



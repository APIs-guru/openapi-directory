# coding: utf-8

"""
    Sensitive Data Protection (DLP)

    Discover and protect your sensitive data. A fully managed service designed to help you discover, classify, and protect your valuable data assets with ease.

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_privacy_dlp_v2_crypto_key import GooglePrivacyDlpV2CryptoKey
from openapi_client.models.google_privacy_dlp_v2_field_id import GooglePrivacyDlpV2FieldId
from typing import Optional, Set
from typing_extensions import Self

class GooglePrivacyDlpV2DateShiftConfig(BaseModel):
    """
    Shifts dates by random number of days, with option to be consistent for the same context. See https://cloud.google.com/sensitive-data-protection/docs/concepts-date-shifting to learn more.
    """ # noqa: E501
    context: Optional[GooglePrivacyDlpV2FieldId] = None
    crypto_key: Optional[GooglePrivacyDlpV2CryptoKey] = Field(default=None, alias="cryptoKey")
    lower_bound_days: Optional[StrictInt] = Field(default=None, description="Required. For example, -5 means shift date to at most 5 days back in the past.", alias="lowerBoundDays")
    upper_bound_days: Optional[StrictInt] = Field(default=None, description="Required. Range of shift in days. Actual shift will be selected at random within this range (inclusive ends). Negative means shift to earlier in time. Must not be more than 365250 days (1000 years) each direction. For example, 3 means shift date to at most 3 days into the future.", alias="upperBoundDays")
    __properties: ClassVar[List[str]] = ["context", "cryptoKey", "lowerBoundDays", "upperBoundDays"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GooglePrivacyDlpV2DateShiftConfig from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of context
        if self.context:
            _dict['context'] = self.context.to_dict()
        # override the default output from pydantic by calling `to_dict()` of crypto_key
        if self.crypto_key:
            _dict['cryptoKey'] = self.crypto_key.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GooglePrivacyDlpV2DateShiftConfig from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "context": GooglePrivacyDlpV2FieldId.from_dict(obj["context"]) if obj.get("context") is not None else None,
            "cryptoKey": GooglePrivacyDlpV2CryptoKey.from_dict(obj["cryptoKey"]) if obj.get("cryptoKey") is not None else None,
            "lowerBoundDays": obj.get("lowerBoundDays"),
            "upperBoundDays": obj.get("upperBoundDays")
        })
        return _obj



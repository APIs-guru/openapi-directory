# coding: utf-8

"""
    Sensitive Data Protection (DLP)

    Discover and protect your sensitive data. A fully managed service designed to help you discover, classify, and protect your valuable data assets with ease.

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_privacy_dlp_v2_info_type_category import GooglePrivacyDlpV2InfoTypeCategory
from openapi_client.models.google_privacy_dlp_v2_sensitivity_score import GooglePrivacyDlpV2SensitivityScore
from openapi_client.models.google_privacy_dlp_v2_version_description import GooglePrivacyDlpV2VersionDescription
from typing import Optional, Set
from typing_extensions import Self

class GooglePrivacyDlpV2InfoTypeDescription(BaseModel):
    """
    InfoType description.
    """ # noqa: E501
    categories: Optional[List[GooglePrivacyDlpV2InfoTypeCategory]] = Field(default=None, description="The category of the infoType.")
    description: Optional[StrictStr] = Field(default=None, description="Description of the infotype. Translated when language is provided in the request.")
    display_name: Optional[StrictStr] = Field(default=None, description="Human readable form of the infoType name.", alias="displayName")
    name: Optional[StrictStr] = Field(default=None, description="Internal name of the infoType.")
    sensitivity_score: Optional[GooglePrivacyDlpV2SensitivityScore] = Field(default=None, alias="sensitivityScore")
    supported_by: Optional[List[StrictStr]] = Field(default=None, description="Which parts of the API supports this InfoType.", alias="supportedBy")
    versions: Optional[List[GooglePrivacyDlpV2VersionDescription]] = Field(default=None, description="A list of available versions for the infotype.")
    __properties: ClassVar[List[str]] = ["categories", "description", "displayName", "name", "sensitivityScore", "supportedBy", "versions"]

    @field_validator('supported_by')
    def supported_by_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        for i in value:
            if i not in set(['ENUM_TYPE_UNSPECIFIED', 'INSPECT', 'RISK_ANALYSIS']):
                raise ValueError("each list item must be one of ('ENUM_TYPE_UNSPECIFIED', 'INSPECT', 'RISK_ANALYSIS')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GooglePrivacyDlpV2InfoTypeDescription from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in categories (list)
        _items = []
        if self.categories:
            for _item_categories in self.categories:
                if _item_categories:
                    _items.append(_item_categories.to_dict())
            _dict['categories'] = _items
        # override the default output from pydantic by calling `to_dict()` of sensitivity_score
        if self.sensitivity_score:
            _dict['sensitivityScore'] = self.sensitivity_score.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in versions (list)
        _items = []
        if self.versions:
            for _item_versions in self.versions:
                if _item_versions:
                    _items.append(_item_versions.to_dict())
            _dict['versions'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GooglePrivacyDlpV2InfoTypeDescription from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "categories": [GooglePrivacyDlpV2InfoTypeCategory.from_dict(_item) for _item in obj["categories"]] if obj.get("categories") is not None else None,
            "description": obj.get("description"),
            "displayName": obj.get("displayName"),
            "name": obj.get("name"),
            "sensitivityScore": GooglePrivacyDlpV2SensitivityScore.from_dict(obj["sensitivityScore"]) if obj.get("sensitivityScore") is not None else None,
            "supportedBy": obj.get("supportedBy"),
            "versions": [GooglePrivacyDlpV2VersionDescription.from_dict(_item) for _item in obj["versions"]] if obj.get("versions") is not None else None
        })
        return _obj



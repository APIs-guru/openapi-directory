# coding: utf-8

"""
    Sensitive Data Protection (DLP)

    Discover and protect your sensitive data. A fully managed service designed to help you discover, classify, and protect your valuable data assets with ease.

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_privacy_dlp_v2_data_profile_config_snapshot import GooglePrivacyDlpV2DataProfileConfigSnapshot
from openapi_client.models.google_privacy_dlp_v2_data_risk_level import GooglePrivacyDlpV2DataRiskLevel
from openapi_client.models.google_privacy_dlp_v2_data_source_type import GooglePrivacyDlpV2DataSourceType
from openapi_client.models.google_privacy_dlp_v2_info_type_summary import GooglePrivacyDlpV2InfoTypeSummary
from openapi_client.models.google_privacy_dlp_v2_other_info_type_summary import GooglePrivacyDlpV2OtherInfoTypeSummary
from openapi_client.models.google_privacy_dlp_v2_profile_status import GooglePrivacyDlpV2ProfileStatus
from openapi_client.models.google_privacy_dlp_v2_sensitivity_score import GooglePrivacyDlpV2SensitivityScore
from typing import Optional, Set
from typing_extensions import Self

class GooglePrivacyDlpV2TableDataProfile(BaseModel):
    """
    The profile for a scanned table.
    """ # noqa: E501
    config_snapshot: Optional[GooglePrivacyDlpV2DataProfileConfigSnapshot] = Field(default=None, alias="configSnapshot")
    create_time: Optional[StrictStr] = Field(default=None, description="The time at which the table was created.", alias="createTime")
    data_risk_level: Optional[GooglePrivacyDlpV2DataRiskLevel] = Field(default=None, alias="dataRiskLevel")
    data_source_type: Optional[GooglePrivacyDlpV2DataSourceType] = Field(default=None, alias="dataSourceType")
    dataset_id: Optional[StrictStr] = Field(default=None, description="If the resource is BigQuery, the dataset ID.", alias="datasetId")
    dataset_location: Optional[StrictStr] = Field(default=None, description="If supported, the location where the dataset's data is stored. See https://cloud.google.com/bigquery/docs/locations for supported locations.", alias="datasetLocation")
    dataset_project_id: Optional[StrictStr] = Field(default=None, description="The Google Cloud project ID that owns the resource.", alias="datasetProjectId")
    encryption_status: Optional[StrictStr] = Field(default=None, description="How the table is encrypted.", alias="encryptionStatus")
    expiration_time: Optional[StrictStr] = Field(default=None, description="Optional. The time when this table expires.", alias="expirationTime")
    failed_column_count: Optional[StrictStr] = Field(default=None, description="The number of columns skipped in the table because of an error.", alias="failedColumnCount")
    full_resource: Optional[StrictStr] = Field(default=None, description="The resource name of the resource profiled. https://cloud.google.com/apis/design/resource_names#full_resource_name", alias="fullResource")
    last_modified_time: Optional[StrictStr] = Field(default=None, description="The time when this table was last modified", alias="lastModifiedTime")
    name: Optional[StrictStr] = Field(default=None, description="The name of the profile.")
    other_info_types: Optional[List[GooglePrivacyDlpV2OtherInfoTypeSummary]] = Field(default=None, description="Other infoTypes found in this table's data.", alias="otherInfoTypes")
    predicted_info_types: Optional[List[GooglePrivacyDlpV2InfoTypeSummary]] = Field(default=None, description="The infoTypes predicted from this table's data.", alias="predictedInfoTypes")
    profile_last_generated: Optional[StrictStr] = Field(default=None, description="The last time the profile was generated.", alias="profileLastGenerated")
    profile_status: Optional[GooglePrivacyDlpV2ProfileStatus] = Field(default=None, alias="profileStatus")
    project_data_profile: Optional[StrictStr] = Field(default=None, description="The resource name to the project data profile for this table.", alias="projectDataProfile")
    resource_labels: Optional[Dict[str, StrictStr]] = Field(default=None, description="The labels applied to the resource at the time the profile was generated.", alias="resourceLabels")
    resource_visibility: Optional[StrictStr] = Field(default=None, description="How broadly a resource has been shared.", alias="resourceVisibility")
    row_count: Optional[StrictStr] = Field(default=None, description="Number of rows in the table when the profile was generated. This will not be populated for BigLake tables.", alias="rowCount")
    scanned_column_count: Optional[StrictStr] = Field(default=None, description="The number of columns profiled in the table.", alias="scannedColumnCount")
    sensitivity_score: Optional[GooglePrivacyDlpV2SensitivityScore] = Field(default=None, alias="sensitivityScore")
    state: Optional[StrictStr] = Field(default=None, description="State of a profile.")
    table_id: Optional[StrictStr] = Field(default=None, description="If the resource is BigQuery, the BigQuery table ID.", alias="tableId")
    table_size_bytes: Optional[StrictStr] = Field(default=None, description="The size of the table when the profile was generated.", alias="tableSizeBytes")
    __properties: ClassVar[List[str]] = ["configSnapshot", "createTime", "dataRiskLevel", "dataSourceType", "datasetId", "datasetLocation", "datasetProjectId", "encryptionStatus", "expirationTime", "failedColumnCount", "fullResource", "lastModifiedTime", "name", "otherInfoTypes", "predictedInfoTypes", "profileLastGenerated", "profileStatus", "projectDataProfile", "resourceLabels", "resourceVisibility", "rowCount", "scannedColumnCount", "sensitivityScore", "state", "tableId", "tableSizeBytes"]

    @field_validator('encryption_status')
    def encryption_status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['ENCRYPTION_STATUS_UNSPECIFIED', 'ENCRYPTION_GOOGLE_MANAGED', 'ENCRYPTION_CUSTOMER_MANAGED']):
            raise ValueError("must be one of enum values ('ENCRYPTION_STATUS_UNSPECIFIED', 'ENCRYPTION_GOOGLE_MANAGED', 'ENCRYPTION_CUSTOMER_MANAGED')")
        return value

    @field_validator('resource_visibility')
    def resource_visibility_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['RESOURCE_VISIBILITY_UNSPECIFIED', 'RESOURCE_VISIBILITY_PUBLIC', 'RESOURCE_VISIBILITY_RESTRICTED']):
            raise ValueError("must be one of enum values ('RESOURCE_VISIBILITY_UNSPECIFIED', 'RESOURCE_VISIBILITY_PUBLIC', 'RESOURCE_VISIBILITY_RESTRICTED')")
        return value

    @field_validator('state')
    def state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['STATE_UNSPECIFIED', 'RUNNING', 'DONE']):
            raise ValueError("must be one of enum values ('STATE_UNSPECIFIED', 'RUNNING', 'DONE')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GooglePrivacyDlpV2TableDataProfile from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of config_snapshot
        if self.config_snapshot:
            _dict['configSnapshot'] = self.config_snapshot.to_dict()
        # override the default output from pydantic by calling `to_dict()` of data_risk_level
        if self.data_risk_level:
            _dict['dataRiskLevel'] = self.data_risk_level.to_dict()
        # override the default output from pydantic by calling `to_dict()` of data_source_type
        if self.data_source_type:
            _dict['dataSourceType'] = self.data_source_type.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in other_info_types (list)
        _items = []
        if self.other_info_types:
            for _item_other_info_types in self.other_info_types:
                if _item_other_info_types:
                    _items.append(_item_other_info_types.to_dict())
            _dict['otherInfoTypes'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in predicted_info_types (list)
        _items = []
        if self.predicted_info_types:
            for _item_predicted_info_types in self.predicted_info_types:
                if _item_predicted_info_types:
                    _items.append(_item_predicted_info_types.to_dict())
            _dict['predictedInfoTypes'] = _items
        # override the default output from pydantic by calling `to_dict()` of profile_status
        if self.profile_status:
            _dict['profileStatus'] = self.profile_status.to_dict()
        # override the default output from pydantic by calling `to_dict()` of sensitivity_score
        if self.sensitivity_score:
            _dict['sensitivityScore'] = self.sensitivity_score.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GooglePrivacyDlpV2TableDataProfile from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "configSnapshot": GooglePrivacyDlpV2DataProfileConfigSnapshot.from_dict(obj["configSnapshot"]) if obj.get("configSnapshot") is not None else None,
            "createTime": obj.get("createTime"),
            "dataRiskLevel": GooglePrivacyDlpV2DataRiskLevel.from_dict(obj["dataRiskLevel"]) if obj.get("dataRiskLevel") is not None else None,
            "dataSourceType": GooglePrivacyDlpV2DataSourceType.from_dict(obj["dataSourceType"]) if obj.get("dataSourceType") is not None else None,
            "datasetId": obj.get("datasetId"),
            "datasetLocation": obj.get("datasetLocation"),
            "datasetProjectId": obj.get("datasetProjectId"),
            "encryptionStatus": obj.get("encryptionStatus"),
            "expirationTime": obj.get("expirationTime"),
            "failedColumnCount": obj.get("failedColumnCount"),
            "fullResource": obj.get("fullResource"),
            "lastModifiedTime": obj.get("lastModifiedTime"),
            "name": obj.get("name"),
            "otherInfoTypes": [GooglePrivacyDlpV2OtherInfoTypeSummary.from_dict(_item) for _item in obj["otherInfoTypes"]] if obj.get("otherInfoTypes") is not None else None,
            "predictedInfoTypes": [GooglePrivacyDlpV2InfoTypeSummary.from_dict(_item) for _item in obj["predictedInfoTypes"]] if obj.get("predictedInfoTypes") is not None else None,
            "profileLastGenerated": obj.get("profileLastGenerated"),
            "profileStatus": GooglePrivacyDlpV2ProfileStatus.from_dict(obj["profileStatus"]) if obj.get("profileStatus") is not None else None,
            "projectDataProfile": obj.get("projectDataProfile"),
            "resourceLabels": obj.get("resourceLabels"),
            "resourceVisibility": obj.get("resourceVisibility"),
            "rowCount": obj.get("rowCount"),
            "scannedColumnCount": obj.get("scannedColumnCount"),
            "sensitivityScore": GooglePrivacyDlpV2SensitivityScore.from_dict(obj["sensitivityScore"]) if obj.get("sensitivityScore") is not None else None,
            "state": obj.get("state"),
            "tableId": obj.get("tableId"),
            "tableSizeBytes": obj.get("tableSizeBytes")
        })
        return _obj



# coding: utf-8

"""
    Sensitive Data Protection (DLP)

    Discover and protect your sensitive data. A fully managed service designed to help you discover, classify, and protect your valuable data assets with ease.

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_privacy_dlp_v2_detection_rule import GooglePrivacyDlpV2DetectionRule
from openapi_client.models.google_privacy_dlp_v2_dictionary import GooglePrivacyDlpV2Dictionary
from openapi_client.models.google_privacy_dlp_v2_info_type import GooglePrivacyDlpV2InfoType
from openapi_client.models.google_privacy_dlp_v2_regex import GooglePrivacyDlpV2Regex
from openapi_client.models.google_privacy_dlp_v2_sensitivity_score import GooglePrivacyDlpV2SensitivityScore
from openapi_client.models.google_privacy_dlp_v2_stored_type import GooglePrivacyDlpV2StoredType
from typing import Optional, Set
from typing_extensions import Self

class GooglePrivacyDlpV2CustomInfoType(BaseModel):
    """
    Custom information type provided by the user. Used to find domain-specific sensitive information configurable to the data in question.
    """ # noqa: E501
    detection_rules: Optional[List[GooglePrivacyDlpV2DetectionRule]] = Field(default=None, description="Set of detection rules to apply to all findings of this CustomInfoType. Rules are applied in order that they are specified. Not supported for the `surrogate_type` CustomInfoType.", alias="detectionRules")
    dictionary: Optional[GooglePrivacyDlpV2Dictionary] = None
    exclusion_type: Optional[StrictStr] = Field(default=None, description="If set to EXCLUSION_TYPE_EXCLUDE this infoType will not cause a finding to be returned. It still can be used for rules matching.", alias="exclusionType")
    info_type: Optional[GooglePrivacyDlpV2InfoType] = Field(default=None, alias="infoType")
    likelihood: Optional[StrictStr] = Field(default=None, description="Likelihood to return for this CustomInfoType. This base value can be altered by a detection rule if the finding meets the criteria specified by the rule. Defaults to `VERY_LIKELY` if not specified.")
    regex: Optional[GooglePrivacyDlpV2Regex] = None
    sensitivity_score: Optional[GooglePrivacyDlpV2SensitivityScore] = Field(default=None, alias="sensitivityScore")
    stored_type: Optional[GooglePrivacyDlpV2StoredType] = Field(default=None, alias="storedType")
    surrogate_type: Optional[Dict[str, Any]] = Field(default=None, description="Message for detecting output from deidentification transformations such as [`CryptoReplaceFfxFpeConfig`](https://cloud.google.com/sensitive-data-protection/docs/reference/rest/v2/organizations.deidentifyTemplates#cryptoreplaceffxfpeconfig). These types of transformations are those that perform pseudonymization, thereby producing a \"surrogate\" as output. This should be used in conjunction with a field on the transformation such as `surrogate_info_type`. This CustomInfoType does not support the use of `detection_rules`.", alias="surrogateType")
    __properties: ClassVar[List[str]] = ["detectionRules", "dictionary", "exclusionType", "infoType", "likelihood", "regex", "sensitivityScore", "storedType", "surrogateType"]

    @field_validator('exclusion_type')
    def exclusion_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['EXCLUSION_TYPE_UNSPECIFIED', 'EXCLUSION_TYPE_EXCLUDE']):
            raise ValueError("must be one of enum values ('EXCLUSION_TYPE_UNSPECIFIED', 'EXCLUSION_TYPE_EXCLUDE')")
        return value

    @field_validator('likelihood')
    def likelihood_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['LIKELIHOOD_UNSPECIFIED', 'VERY_UNLIKELY', 'UNLIKELY', 'POSSIBLE', 'LIKELY', 'VERY_LIKELY']):
            raise ValueError("must be one of enum values ('LIKELIHOOD_UNSPECIFIED', 'VERY_UNLIKELY', 'UNLIKELY', 'POSSIBLE', 'LIKELY', 'VERY_LIKELY')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GooglePrivacyDlpV2CustomInfoType from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in detection_rules (list)
        _items = []
        if self.detection_rules:
            for _item_detection_rules in self.detection_rules:
                if _item_detection_rules:
                    _items.append(_item_detection_rules.to_dict())
            _dict['detectionRules'] = _items
        # override the default output from pydantic by calling `to_dict()` of dictionary
        if self.dictionary:
            _dict['dictionary'] = self.dictionary.to_dict()
        # override the default output from pydantic by calling `to_dict()` of info_type
        if self.info_type:
            _dict['infoType'] = self.info_type.to_dict()
        # override the default output from pydantic by calling `to_dict()` of regex
        if self.regex:
            _dict['regex'] = self.regex.to_dict()
        # override the default output from pydantic by calling `to_dict()` of sensitivity_score
        if self.sensitivity_score:
            _dict['sensitivityScore'] = self.sensitivity_score.to_dict()
        # override the default output from pydantic by calling `to_dict()` of stored_type
        if self.stored_type:
            _dict['storedType'] = self.stored_type.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GooglePrivacyDlpV2CustomInfoType from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "detectionRules": [GooglePrivacyDlpV2DetectionRule.from_dict(_item) for _item in obj["detectionRules"]] if obj.get("detectionRules") is not None else None,
            "dictionary": GooglePrivacyDlpV2Dictionary.from_dict(obj["dictionary"]) if obj.get("dictionary") is not None else None,
            "exclusionType": obj.get("exclusionType"),
            "infoType": GooglePrivacyDlpV2InfoType.from_dict(obj["infoType"]) if obj.get("infoType") is not None else None,
            "likelihood": obj.get("likelihood"),
            "regex": GooglePrivacyDlpV2Regex.from_dict(obj["regex"]) if obj.get("regex") is not None else None,
            "sensitivityScore": GooglePrivacyDlpV2SensitivityScore.from_dict(obj["sensitivityScore"]) if obj.get("sensitivityScore") is not None else None,
            "storedType": GooglePrivacyDlpV2StoredType.from_dict(obj["storedType"]) if obj.get("storedType") is not None else None,
            "surrogateType": obj.get("surrogateType")
        })
        return _obj



# coding: utf-8

"""
    Sensitive Data Protection (DLP)

    Discover and protect your sensitive data. A fully managed service designed to help you discover, classify, and protect your valuable data assets with ease.

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_privacy_dlp_v2_field_id import GooglePrivacyDlpV2FieldId
from openapi_client.models.google_privacy_dlp_v2_info_type_transformations import GooglePrivacyDlpV2InfoTypeTransformations
from openapi_client.models.google_privacy_dlp_v2_primitive_transformation import GooglePrivacyDlpV2PrimitiveTransformation
from openapi_client.models.google_privacy_dlp_v2_record_condition import GooglePrivacyDlpV2RecordCondition
from typing import Optional, Set
from typing_extensions import Self

class GooglePrivacyDlpV2FieldTransformation(BaseModel):
    """
    The transformation to apply to the field.
    """ # noqa: E501
    condition: Optional[GooglePrivacyDlpV2RecordCondition] = None
    fields: Optional[List[GooglePrivacyDlpV2FieldId]] = Field(default=None, description="Required. Input field(s) to apply the transformation to. When you have columns that reference their position within a list, omit the index from the FieldId. FieldId name matching ignores the index. For example, instead of \"contact.nums[0].type\", use \"contact.nums.type\".")
    info_type_transformations: Optional[GooglePrivacyDlpV2InfoTypeTransformations] = Field(default=None, alias="infoTypeTransformations")
    primitive_transformation: Optional[GooglePrivacyDlpV2PrimitiveTransformation] = Field(default=None, alias="primitiveTransformation")
    __properties: ClassVar[List[str]] = ["condition", "fields", "infoTypeTransformations", "primitiveTransformation"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GooglePrivacyDlpV2FieldTransformation from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of condition
        if self.condition:
            _dict['condition'] = self.condition.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in fields (list)
        _items = []
        if self.fields:
            for _item_fields in self.fields:
                if _item_fields:
                    _items.append(_item_fields.to_dict())
            _dict['fields'] = _items
        # override the default output from pydantic by calling `to_dict()` of info_type_transformations
        if self.info_type_transformations:
            _dict['infoTypeTransformations'] = self.info_type_transformations.to_dict()
        # override the default output from pydantic by calling `to_dict()` of primitive_transformation
        if self.primitive_transformation:
            _dict['primitiveTransformation'] = self.primitive_transformation.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GooglePrivacyDlpV2FieldTransformation from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "condition": GooglePrivacyDlpV2RecordCondition.from_dict(obj["condition"]) if obj.get("condition") is not None else None,
            "fields": [GooglePrivacyDlpV2FieldId.from_dict(_item) for _item in obj["fields"]] if obj.get("fields") is not None else None,
            "infoTypeTransformations": GooglePrivacyDlpV2InfoTypeTransformations.from_dict(obj["infoTypeTransformations"]) if obj.get("infoTypeTransformations") is not None else None,
            "primitiveTransformation": GooglePrivacyDlpV2PrimitiveTransformation.from_dict(obj["primitiveTransformation"]) if obj.get("primitiveTransformation") is not None else None
        })
        return _obj



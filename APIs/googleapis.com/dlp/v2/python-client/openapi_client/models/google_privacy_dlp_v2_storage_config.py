# coding: utf-8

"""
    Sensitive Data Protection (DLP)

    Discover and protect your sensitive data. A fully managed service designed to help you discover, classify, and protect your valuable data assets with ease.

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_privacy_dlp_v2_big_query_options import GooglePrivacyDlpV2BigQueryOptions
from openapi_client.models.google_privacy_dlp_v2_cloud_storage_options import GooglePrivacyDlpV2CloudStorageOptions
from openapi_client.models.google_privacy_dlp_v2_datastore_options import GooglePrivacyDlpV2DatastoreOptions
from openapi_client.models.google_privacy_dlp_v2_hybrid_options import GooglePrivacyDlpV2HybridOptions
from openapi_client.models.google_privacy_dlp_v2_timespan_config import GooglePrivacyDlpV2TimespanConfig
from typing import Optional, Set
from typing_extensions import Self

class GooglePrivacyDlpV2StorageConfig(BaseModel):
    """
    Shared message indicating Cloud storage type.
    """ # noqa: E501
    big_query_options: Optional[GooglePrivacyDlpV2BigQueryOptions] = Field(default=None, alias="bigQueryOptions")
    cloud_storage_options: Optional[GooglePrivacyDlpV2CloudStorageOptions] = Field(default=None, alias="cloudStorageOptions")
    datastore_options: Optional[GooglePrivacyDlpV2DatastoreOptions] = Field(default=None, alias="datastoreOptions")
    hybrid_options: Optional[GooglePrivacyDlpV2HybridOptions] = Field(default=None, alias="hybridOptions")
    timespan_config: Optional[GooglePrivacyDlpV2TimespanConfig] = Field(default=None, alias="timespanConfig")
    __properties: ClassVar[List[str]] = ["bigQueryOptions", "cloudStorageOptions", "datastoreOptions", "hybridOptions", "timespanConfig"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GooglePrivacyDlpV2StorageConfig from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of big_query_options
        if self.big_query_options:
            _dict['bigQueryOptions'] = self.big_query_options.to_dict()
        # override the default output from pydantic by calling `to_dict()` of cloud_storage_options
        if self.cloud_storage_options:
            _dict['cloudStorageOptions'] = self.cloud_storage_options.to_dict()
        # override the default output from pydantic by calling `to_dict()` of datastore_options
        if self.datastore_options:
            _dict['datastoreOptions'] = self.datastore_options.to_dict()
        # override the default output from pydantic by calling `to_dict()` of hybrid_options
        if self.hybrid_options:
            _dict['hybridOptions'] = self.hybrid_options.to_dict()
        # override the default output from pydantic by calling `to_dict()` of timespan_config
        if self.timespan_config:
            _dict['timespanConfig'] = self.timespan_config.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GooglePrivacyDlpV2StorageConfig from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "bigQueryOptions": GooglePrivacyDlpV2BigQueryOptions.from_dict(obj["bigQueryOptions"]) if obj.get("bigQueryOptions") is not None else None,
            "cloudStorageOptions": GooglePrivacyDlpV2CloudStorageOptions.from_dict(obj["cloudStorageOptions"]) if obj.get("cloudStorageOptions") is not None else None,
            "datastoreOptions": GooglePrivacyDlpV2DatastoreOptions.from_dict(obj["datastoreOptions"]) if obj.get("datastoreOptions") is not None else None,
            "hybridOptions": GooglePrivacyDlpV2HybridOptions.from_dict(obj["hybridOptions"]) if obj.get("hybridOptions") is not None else None,
            "timespanConfig": GooglePrivacyDlpV2TimespanConfig.from_dict(obj["timespanConfig"]) if obj.get("timespanConfig") is not None else None
        })
        return _obj



# coding: utf-8

"""
    Sensitive Data Protection (DLP)

    Discover and protect your sensitive data. A fully managed service designed to help you discover, classify, and protect your valuable data assets with ease.

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_privacy_dlp_v2_info_type import GooglePrivacyDlpV2InfoType
from openapi_client.models.google_privacy_dlp_v2_location import GooglePrivacyDlpV2Location
from openapi_client.models.google_privacy_dlp_v2_quote_info import GooglePrivacyDlpV2QuoteInfo
from typing import Optional, Set
from typing_extensions import Self

class GooglePrivacyDlpV2Finding(BaseModel):
    """
    Represents a piece of potentially sensitive content.
    """ # noqa: E501
    create_time: Optional[StrictStr] = Field(default=None, description="Timestamp when finding was detected.", alias="createTime")
    finding_id: Optional[StrictStr] = Field(default=None, description="The unique finding id.", alias="findingId")
    info_type: Optional[GooglePrivacyDlpV2InfoType] = Field(default=None, alias="infoType")
    job_create_time: Optional[StrictStr] = Field(default=None, description="Time the job started that produced this finding.", alias="jobCreateTime")
    job_name: Optional[StrictStr] = Field(default=None, description="The job that stored the finding.", alias="jobName")
    labels: Optional[Dict[str, StrictStr]] = Field(default=None, description="The labels associated with this `Finding`. Label keys must be between 1 and 63 characters long and must conform to the following regular expression: `[a-z]([-a-z0-9]*[a-z0-9])?`. Label values must be between 0 and 63 characters long and must conform to the regular expression `([a-z]([-a-z0-9]*[a-z0-9])?)?`. No more than 10 labels can be associated with a given finding. Examples: * `\"environment\" : \"production\"` * `\"pipeline\" : \"etl\"`")
    likelihood: Optional[StrictStr] = Field(default=None, description="Confidence of how likely it is that the `info_type` is correct.")
    location: Optional[GooglePrivacyDlpV2Location] = None
    name: Optional[StrictStr] = Field(default=None, description="Resource name in format projects/{project}/locations/{location}/findings/{finding} Populated only when viewing persisted findings.")
    quote: Optional[StrictStr] = Field(default=None, description="The content that was found. Even if the content is not textual, it may be converted to a textual representation here. Provided if `include_quote` is true and the finding is less than or equal to 4096 bytes long. If the finding exceeds 4096 bytes in length, the quote may be omitted.")
    quote_info: Optional[GooglePrivacyDlpV2QuoteInfo] = Field(default=None, alias="quoteInfo")
    resource_name: Optional[StrictStr] = Field(default=None, description="The job that stored the finding.", alias="resourceName")
    trigger_name: Optional[StrictStr] = Field(default=None, description="Job trigger name, if applicable, for this finding.", alias="triggerName")
    __properties: ClassVar[List[str]] = ["createTime", "findingId", "infoType", "jobCreateTime", "jobName", "labels", "likelihood", "location", "name", "quote", "quoteInfo", "resourceName", "triggerName"]

    @field_validator('likelihood')
    def likelihood_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['LIKELIHOOD_UNSPECIFIED', 'VERY_UNLIKELY', 'UNLIKELY', 'POSSIBLE', 'LIKELY', 'VERY_LIKELY']):
            raise ValueError("must be one of enum values ('LIKELIHOOD_UNSPECIFIED', 'VERY_UNLIKELY', 'UNLIKELY', 'POSSIBLE', 'LIKELY', 'VERY_LIKELY')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GooglePrivacyDlpV2Finding from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of info_type
        if self.info_type:
            _dict['infoType'] = self.info_type.to_dict()
        # override the default output from pydantic by calling `to_dict()` of location
        if self.location:
            _dict['location'] = self.location.to_dict()
        # override the default output from pydantic by calling `to_dict()` of quote_info
        if self.quote_info:
            _dict['quoteInfo'] = self.quote_info.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GooglePrivacyDlpV2Finding from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "createTime": obj.get("createTime"),
            "findingId": obj.get("findingId"),
            "infoType": GooglePrivacyDlpV2InfoType.from_dict(obj["infoType"]) if obj.get("infoType") is not None else None,
            "jobCreateTime": obj.get("jobCreateTime"),
            "jobName": obj.get("jobName"),
            "labels": obj.get("labels"),
            "likelihood": obj.get("likelihood"),
            "location": GooglePrivacyDlpV2Location.from_dict(obj["location"]) if obj.get("location") is not None else None,
            "name": obj.get("name"),
            "quote": obj.get("quote"),
            "quoteInfo": GooglePrivacyDlpV2QuoteInfo.from_dict(obj["quoteInfo"]) if obj.get("quoteInfo") is not None else None,
            "resourceName": obj.get("resourceName"),
            "triggerName": obj.get("triggerName")
        })
        return _obj



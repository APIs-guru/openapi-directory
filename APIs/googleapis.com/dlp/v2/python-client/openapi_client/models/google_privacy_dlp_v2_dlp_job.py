# coding: utf-8

"""
    Sensitive Data Protection (DLP)

    Discover and protect your sensitive data. A fully managed service designed to help you discover, classify, and protect your valuable data assets with ease.

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_privacy_dlp_v2_action_details import GooglePrivacyDlpV2ActionDetails
from openapi_client.models.google_privacy_dlp_v2_analyze_data_source_risk_details import GooglePrivacyDlpV2AnalyzeDataSourceRiskDetails
from openapi_client.models.google_privacy_dlp_v2_error import GooglePrivacyDlpV2Error
from openapi_client.models.google_privacy_dlp_v2_inspect_data_source_details import GooglePrivacyDlpV2InspectDataSourceDetails
from typing import Optional, Set
from typing_extensions import Self

class GooglePrivacyDlpV2DlpJob(BaseModel):
    """
    Combines all of the information about a DLP job.
    """ # noqa: E501
    action_details: Optional[List[GooglePrivacyDlpV2ActionDetails]] = Field(default=None, description="Events that should occur after the job has completed.", alias="actionDetails")
    create_time: Optional[StrictStr] = Field(default=None, description="Time when the job was created.", alias="createTime")
    end_time: Optional[StrictStr] = Field(default=None, description="Time when the job finished.", alias="endTime")
    errors: Optional[List[GooglePrivacyDlpV2Error]] = Field(default=None, description="A stream of errors encountered running the job.")
    inspect_details: Optional[GooglePrivacyDlpV2InspectDataSourceDetails] = Field(default=None, alias="inspectDetails")
    job_trigger_name: Optional[StrictStr] = Field(default=None, description="If created by a job trigger, the resource name of the trigger that instantiated the job.", alias="jobTriggerName")
    last_modified: Optional[StrictStr] = Field(default=None, description="Time when the job was last modified by the system.", alias="lastModified")
    name: Optional[StrictStr] = Field(default=None, description="The server-assigned name.")
    risk_details: Optional[GooglePrivacyDlpV2AnalyzeDataSourceRiskDetails] = Field(default=None, alias="riskDetails")
    start_time: Optional[StrictStr] = Field(default=None, description="Time when the job started.", alias="startTime")
    state: Optional[StrictStr] = Field(default=None, description="State of a job.")
    type: Optional[StrictStr] = Field(default=None, description="The type of job.")
    __properties: ClassVar[List[str]] = ["actionDetails", "createTime", "endTime", "errors", "inspectDetails", "jobTriggerName", "lastModified", "name", "riskDetails", "startTime", "state", "type"]

    @field_validator('state')
    def state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['JOB_STATE_UNSPECIFIED', 'PENDING', 'RUNNING', 'DONE', 'CANCELED', 'FAILED', 'ACTIVE']):
            raise ValueError("must be one of enum values ('JOB_STATE_UNSPECIFIED', 'PENDING', 'RUNNING', 'DONE', 'CANCELED', 'FAILED', 'ACTIVE')")
        return value

    @field_validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['DLP_JOB_TYPE_UNSPECIFIED', 'INSPECT_JOB', 'RISK_ANALYSIS_JOB']):
            raise ValueError("must be one of enum values ('DLP_JOB_TYPE_UNSPECIFIED', 'INSPECT_JOB', 'RISK_ANALYSIS_JOB')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GooglePrivacyDlpV2DlpJob from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in action_details (list)
        _items = []
        if self.action_details:
            for _item_action_details in self.action_details:
                if _item_action_details:
                    _items.append(_item_action_details.to_dict())
            _dict['actionDetails'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in errors (list)
        _items = []
        if self.errors:
            for _item_errors in self.errors:
                if _item_errors:
                    _items.append(_item_errors.to_dict())
            _dict['errors'] = _items
        # override the default output from pydantic by calling `to_dict()` of inspect_details
        if self.inspect_details:
            _dict['inspectDetails'] = self.inspect_details.to_dict()
        # override the default output from pydantic by calling `to_dict()` of risk_details
        if self.risk_details:
            _dict['riskDetails'] = self.risk_details.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GooglePrivacyDlpV2DlpJob from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "actionDetails": [GooglePrivacyDlpV2ActionDetails.from_dict(_item) for _item in obj["actionDetails"]] if obj.get("actionDetails") is not None else None,
            "createTime": obj.get("createTime"),
            "endTime": obj.get("endTime"),
            "errors": [GooglePrivacyDlpV2Error.from_dict(_item) for _item in obj["errors"]] if obj.get("errors") is not None else None,
            "inspectDetails": GooglePrivacyDlpV2InspectDataSourceDetails.from_dict(obj["inspectDetails"]) if obj.get("inspectDetails") is not None else None,
            "jobTriggerName": obj.get("jobTriggerName"),
            "lastModified": obj.get("lastModified"),
            "name": obj.get("name"),
            "riskDetails": GooglePrivacyDlpV2AnalyzeDataSourceRiskDetails.from_dict(obj["riskDetails"]) if obj.get("riskDetails") is not None else None,
            "startTime": obj.get("startTime"),
            "state": obj.get("state"),
            "type": obj.get("type")
        })
        return _obj



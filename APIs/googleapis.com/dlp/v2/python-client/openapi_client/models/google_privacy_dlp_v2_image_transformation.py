# coding: utf-8

"""
    Sensitive Data Protection (DLP)

    Discover and protect your sensitive data. A fully managed service designed to help you discover, classify, and protect your valuable data assets with ease.

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_privacy_dlp_v2_color import GooglePrivacyDlpV2Color
from openapi_client.models.google_privacy_dlp_v2_selected_info_types import GooglePrivacyDlpV2SelectedInfoTypes
from typing import Optional, Set
from typing_extensions import Self

class GooglePrivacyDlpV2ImageTransformation(BaseModel):
    """
    Configuration for determining how redaction of images should occur.
    """ # noqa: E501
    all_info_types: Optional[Dict[str, Any]] = Field(default=None, description="Apply transformation to all findings.", alias="allInfoTypes")
    all_text: Optional[Dict[str, Any]] = Field(default=None, description="Apply to all text.", alias="allText")
    redaction_color: Optional[GooglePrivacyDlpV2Color] = Field(default=None, alias="redactionColor")
    selected_info_types: Optional[GooglePrivacyDlpV2SelectedInfoTypes] = Field(default=None, alias="selectedInfoTypes")
    __properties: ClassVar[List[str]] = ["allInfoTypes", "allText", "redactionColor", "selectedInfoTypes"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GooglePrivacyDlpV2ImageTransformation from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of redaction_color
        if self.redaction_color:
            _dict['redactionColor'] = self.redaction_color.to_dict()
        # override the default output from pydantic by calling `to_dict()` of selected_info_types
        if self.selected_info_types:
            _dict['selectedInfoTypes'] = self.selected_info_types.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GooglePrivacyDlpV2ImageTransformation from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "allInfoTypes": obj.get("allInfoTypes"),
            "allText": obj.get("allText"),
            "redactionColor": GooglePrivacyDlpV2Color.from_dict(obj["redactionColor"]) if obj.get("redactionColor") is not None else None,
            "selectedInfoTypes": GooglePrivacyDlpV2SelectedInfoTypes.from_dict(obj["selectedInfoTypes"]) if obj.get("selectedInfoTypes") is not None else None
        })
        return _obj



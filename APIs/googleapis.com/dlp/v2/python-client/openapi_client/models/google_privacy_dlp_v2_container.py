# coding: utf-8

"""
    Sensitive Data Protection (DLP)

    Discover and protect your sensitive data. A fully managed service designed to help you discover, classify, and protect your valuable data assets with ease.

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class GooglePrivacyDlpV2Container(BaseModel):
    """
    Represents a container that may contain DLP findings. Examples of a container include a file, table, or database record.
    """ # noqa: E501
    full_path: Optional[StrictStr] = Field(default=None, description="A string representation of the full container name. Examples: - BigQuery: 'Project:DataSetId.TableId' - Cloud Storage: 'gs://Bucket/folders/filename.txt'", alias="fullPath")
    project_id: Optional[StrictStr] = Field(default=None, description="Project where the finding was found. Can be different from the project that owns the finding.", alias="projectId")
    relative_path: Optional[StrictStr] = Field(default=None, description="The rest of the path after the root. Examples: - For BigQuery table `project_id:dataset_id.table_id`, the relative path is `table_id` - For Cloud Storage file `gs://bucket/folder/filename.txt`, the relative path is `folder/filename.txt`", alias="relativePath")
    root_path: Optional[StrictStr] = Field(default=None, description="The root of the container. Examples: - For BigQuery table `project_id:dataset_id.table_id`, the root is `dataset_id` - For Cloud Storage file `gs://bucket/folder/filename.txt`, the root is `gs://bucket`", alias="rootPath")
    type: Optional[StrictStr] = Field(default=None, description="Container type, for example BigQuery or Cloud Storage.")
    update_time: Optional[StrictStr] = Field(default=None, description="Findings container modification timestamp, if applicable. For Cloud Storage, this field contains the last file modification timestamp. For a BigQuery table, this field contains the last_modified_time property. For Datastore, this field isn't populated.", alias="updateTime")
    version: Optional[StrictStr] = Field(default=None, description="Findings container version, if available (\"generation\" for Cloud Storage).")
    __properties: ClassVar[List[str]] = ["fullPath", "projectId", "relativePath", "rootPath", "type", "updateTime", "version"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GooglePrivacyDlpV2Container from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GooglePrivacyDlpV2Container from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "fullPath": obj.get("fullPath"),
            "projectId": obj.get("projectId"),
            "relativePath": obj.get("relativePath"),
            "rootPath": obj.get("rootPath"),
            "type": obj.get("type"),
            "updateTime": obj.get("updateTime"),
            "version": obj.get("version")
        })
        return _obj



# coding: utf-8

"""
    Sensitive Data Protection (DLP)

    Discover and protect your sensitive data. A fully managed service designed to help you discover, classify, and protect your valuable data assets with ease.

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_privacy_dlp_v2_field_id import GooglePrivacyDlpV2FieldId
from typing import Optional, Set
from typing_extensions import Self

class GooglePrivacyDlpV2TimespanConfig(BaseModel):
    """
    Configuration of the timespan of the items to include in scanning. Currently only supported when inspecting Cloud Storage and BigQuery.
    """ # noqa: E501
    enable_auto_population_of_timespan_config: Optional[StrictBool] = Field(default=None, description="When the job is started by a JobTrigger we will automatically figure out a valid start_time to avoid scanning files that have not been modified since the last time the JobTrigger executed. This will be based on the time of the execution of the last run of the JobTrigger or the timespan end_time used in the last run of the JobTrigger.", alias="enableAutoPopulationOfTimespanConfig")
    end_time: Optional[StrictStr] = Field(default=None, description="Exclude files, tables, or rows newer than this value. If not set, no upper time limit is applied.", alias="endTime")
    start_time: Optional[StrictStr] = Field(default=None, description="Exclude files, tables, or rows older than this value. If not set, no lower time limit is applied.", alias="startTime")
    timestamp_field: Optional[GooglePrivacyDlpV2FieldId] = Field(default=None, alias="timestampField")
    __properties: ClassVar[List[str]] = ["enableAutoPopulationOfTimespanConfig", "endTime", "startTime", "timestampField"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GooglePrivacyDlpV2TimespanConfig from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of timestamp_field
        if self.timestamp_field:
            _dict['timestampField'] = self.timestamp_field.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GooglePrivacyDlpV2TimespanConfig from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "enableAutoPopulationOfTimespanConfig": obj.get("enableAutoPopulationOfTimespanConfig"),
            "endTime": obj.get("endTime"),
            "startTime": obj.get("startTime"),
            "timestampField": GooglePrivacyDlpV2FieldId.from_dict(obj["timestampField"]) if obj.get("timestampField") is not None else None
        })
        return _obj



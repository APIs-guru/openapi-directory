# coding: utf-8

"""
    Sensitive Data Protection (DLP)

    Discover and protect your sensitive data. A fully managed service designed to help you discover, classify, and protect your valuable data assets with ease.

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_privacy_dlp_v2_field_id import GooglePrivacyDlpV2FieldId
from openapi_client.models.google_privacy_dlp_v2_info_type import GooglePrivacyDlpV2InfoType
from typing import Optional, Set
from typing_extensions import Self

class GooglePrivacyDlpV2QuasiId(BaseModel):
    """
    A column with a semantic tag attached.
    """ # noqa: E501
    custom_tag: Optional[StrictStr] = Field(default=None, description="A column can be tagged with a custom tag. In this case, the user must indicate an auxiliary table that contains statistical information on the possible values of this column (below).", alias="customTag")
    var_field: Optional[GooglePrivacyDlpV2FieldId] = Field(default=None, alias="field")
    inferred: Optional[Dict[str, Any]] = Field(default=None, description="A generic empty message that you can re-use to avoid defining duplicated empty messages in your APIs. A typical example is to use it as the request or the response type of an API method. For instance: service Foo { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty); }")
    info_type: Optional[GooglePrivacyDlpV2InfoType] = Field(default=None, alias="infoType")
    __properties: ClassVar[List[str]] = ["customTag", "field", "inferred", "infoType"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GooglePrivacyDlpV2QuasiId from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of var_field
        if self.var_field:
            _dict['field'] = self.var_field.to_dict()
        # override the default output from pydantic by calling `to_dict()` of info_type
        if self.info_type:
            _dict['infoType'] = self.info_type.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GooglePrivacyDlpV2QuasiId from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "customTag": obj.get("customTag"),
            "field": GooglePrivacyDlpV2FieldId.from_dict(obj["field"]) if obj.get("field") is not None else None,
            "inferred": obj.get("inferred"),
            "infoType": GooglePrivacyDlpV2InfoType.from_dict(obj["infoType"]) if obj.get("infoType") is not None else None
        })
        return _obj



# coding: utf-8

"""
    Sensitive Data Protection (DLP)

    Discover and protect your sensitive data. A fully managed service designed to help you discover, classify, and protect your valuable data assets with ease.

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_privacy_dlp_v2_hybrid_inspect_statistics import GooglePrivacyDlpV2HybridInspectStatistics
from openapi_client.models.google_privacy_dlp_v2_info_type_stats import GooglePrivacyDlpV2InfoTypeStats
from typing import Optional, Set
from typing_extensions import Self

class GooglePrivacyDlpV2Result(BaseModel):
    """
    All result fields mentioned below are updated while the job is processing.
    """ # noqa: E501
    hybrid_stats: Optional[GooglePrivacyDlpV2HybridInspectStatistics] = Field(default=None, alias="hybridStats")
    info_type_stats: Optional[List[GooglePrivacyDlpV2InfoTypeStats]] = Field(default=None, description="Statistics of how many instances of each info type were found during inspect job.", alias="infoTypeStats")
    processed_bytes: Optional[StrictStr] = Field(default=None, description="Total size in bytes that were processed.", alias="processedBytes")
    total_estimated_bytes: Optional[StrictStr] = Field(default=None, description="Estimate of the number of bytes to process.", alias="totalEstimatedBytes")
    __properties: ClassVar[List[str]] = ["hybridStats", "infoTypeStats", "processedBytes", "totalEstimatedBytes"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GooglePrivacyDlpV2Result from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of hybrid_stats
        if self.hybrid_stats:
            _dict['hybridStats'] = self.hybrid_stats.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in info_type_stats (list)
        _items = []
        if self.info_type_stats:
            for _item_info_type_stats in self.info_type_stats:
                if _item_info_type_stats:
                    _items.append(_item_info_type_stats.to_dict())
            _dict['infoTypeStats'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GooglePrivacyDlpV2Result from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "hybridStats": GooglePrivacyDlpV2HybridInspectStatistics.from_dict(obj["hybridStats"]) if obj.get("hybridStats") is not None else None,
            "infoTypeStats": [GooglePrivacyDlpV2InfoTypeStats.from_dict(_item) for _item in obj["infoTypeStats"]] if obj.get("infoTypeStats") is not None else None,
            "processedBytes": obj.get("processedBytes"),
            "totalEstimatedBytes": obj.get("totalEstimatedBytes")
        })
        return _obj



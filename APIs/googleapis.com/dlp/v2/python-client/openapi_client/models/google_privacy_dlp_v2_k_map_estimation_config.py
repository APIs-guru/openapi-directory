# coding: utf-8

"""
    Sensitive Data Protection (DLP)

    Discover and protect your sensitive data. A fully managed service designed to help you discover, classify, and protect your valuable data assets with ease.

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_privacy_dlp_v2_auxiliary_table import GooglePrivacyDlpV2AuxiliaryTable
from openapi_client.models.google_privacy_dlp_v2_tagged_field import GooglePrivacyDlpV2TaggedField
from typing import Optional, Set
from typing_extensions import Self

class GooglePrivacyDlpV2KMapEstimationConfig(BaseModel):
    """
    Reidentifiability metric. This corresponds to a risk model similar to what is called \"journalist risk\" in the literature, except the attack dataset is statistically modeled instead of being perfectly known. This can be done using publicly available data (like the US Census), or using a custom statistical model (indicated as one or several BigQuery tables), or by extrapolating from the distribution of values in the input dataset.
    """ # noqa: E501
    auxiliary_tables: Optional[List[GooglePrivacyDlpV2AuxiliaryTable]] = Field(default=None, description="Several auxiliary tables can be used in the analysis. Each custom_tag used to tag a quasi-identifiers column must appear in exactly one column of one auxiliary table.", alias="auxiliaryTables")
    quasi_ids: Optional[List[GooglePrivacyDlpV2TaggedField]] = Field(default=None, description="Required. Fields considered to be quasi-identifiers. No two columns can have the same tag.", alias="quasiIds")
    region_code: Optional[StrictStr] = Field(default=None, description="ISO 3166-1 alpha-2 region code to use in the statistical modeling. Set if no column is tagged with a region-specific InfoType (like US_ZIP_5) or a region code.", alias="regionCode")
    __properties: ClassVar[List[str]] = ["auxiliaryTables", "quasiIds", "regionCode"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GooglePrivacyDlpV2KMapEstimationConfig from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in auxiliary_tables (list)
        _items = []
        if self.auxiliary_tables:
            for _item_auxiliary_tables in self.auxiliary_tables:
                if _item_auxiliary_tables:
                    _items.append(_item_auxiliary_tables.to_dict())
            _dict['auxiliaryTables'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in quasi_ids (list)
        _items = []
        if self.quasi_ids:
            for _item_quasi_ids in self.quasi_ids:
                if _item_quasi_ids:
                    _items.append(_item_quasi_ids.to_dict())
            _dict['quasiIds'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GooglePrivacyDlpV2KMapEstimationConfig from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "auxiliaryTables": [GooglePrivacyDlpV2AuxiliaryTable.from_dict(_item) for _item in obj["auxiliaryTables"]] if obj.get("auxiliaryTables") is not None else None,
            "quasiIds": [GooglePrivacyDlpV2TaggedField.from_dict(_item) for _item in obj["quasiIds"]] if obj.get("quasiIds") is not None else None,
            "regionCode": obj.get("regionCode")
        })
        return _obj



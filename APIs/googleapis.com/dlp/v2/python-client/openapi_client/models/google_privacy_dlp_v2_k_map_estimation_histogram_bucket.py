# coding: utf-8

"""
    Sensitive Data Protection (DLP)

    Discover and protect your sensitive data. A fully managed service designed to help you discover, classify, and protect your valuable data assets with ease.

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_privacy_dlp_v2_k_map_estimation_quasi_id_values import GooglePrivacyDlpV2KMapEstimationQuasiIdValues
from typing import Optional, Set
from typing_extensions import Self

class GooglePrivacyDlpV2KMapEstimationHistogramBucket(BaseModel):
    """
    A KMapEstimationHistogramBucket message with the following values: min_anonymity: 3 max_anonymity: 5 frequency: 42 means that there are 42 records whose quasi-identifier values correspond to 3, 4 or 5 people in the overlying population. An important particular case is when min_anonymity = max_anonymity = 1: the frequency field then corresponds to the number of uniquely identifiable records.
    """ # noqa: E501
    bucket_size: Optional[StrictStr] = Field(default=None, description="Number of records within these anonymity bounds.", alias="bucketSize")
    bucket_value_count: Optional[StrictStr] = Field(default=None, description="Total number of distinct quasi-identifier tuple values in this bucket.", alias="bucketValueCount")
    bucket_values: Optional[List[GooglePrivacyDlpV2KMapEstimationQuasiIdValues]] = Field(default=None, description="Sample of quasi-identifier tuple values in this bucket. The total number of classes returned per bucket is capped at 20.", alias="bucketValues")
    max_anonymity: Optional[StrictStr] = Field(default=None, description="Always greater than or equal to min_anonymity.", alias="maxAnonymity")
    min_anonymity: Optional[StrictStr] = Field(default=None, description="Always positive.", alias="minAnonymity")
    __properties: ClassVar[List[str]] = ["bucketSize", "bucketValueCount", "bucketValues", "maxAnonymity", "minAnonymity"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GooglePrivacyDlpV2KMapEstimationHistogramBucket from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in bucket_values (list)
        _items = []
        if self.bucket_values:
            for _item_bucket_values in self.bucket_values:
                if _item_bucket_values:
                    _items.append(_item_bucket_values.to_dict())
            _dict['bucketValues'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GooglePrivacyDlpV2KMapEstimationHistogramBucket from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "bucketSize": obj.get("bucketSize"),
            "bucketValueCount": obj.get("bucketValueCount"),
            "bucketValues": [GooglePrivacyDlpV2KMapEstimationQuasiIdValues.from_dict(_item) for _item in obj["bucketValues"]] if obj.get("bucketValues") is not None else None,
            "maxAnonymity": obj.get("maxAnonymity"),
            "minAnonymity": obj.get("minAnonymity")
        })
        return _obj



# coding: utf-8

"""
    Sensitive Data Protection (DLP)

    Discover and protect your sensitive data. A fully managed service designed to help you discover, classify, and protect your valuable data assets with ease.

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_privacy_dlp_v2_document_location import GooglePrivacyDlpV2DocumentLocation
from openapi_client.models.google_privacy_dlp_v2_image_location import GooglePrivacyDlpV2ImageLocation
from openapi_client.models.google_privacy_dlp_v2_metadata_location import GooglePrivacyDlpV2MetadataLocation
from openapi_client.models.google_privacy_dlp_v2_record_location import GooglePrivacyDlpV2RecordLocation
from typing import Optional, Set
from typing_extensions import Self

class GooglePrivacyDlpV2ContentLocation(BaseModel):
    """
    Precise location of the finding within a document, record, image, or metadata container.
    """ # noqa: E501
    container_name: Optional[StrictStr] = Field(default=None, description="Name of the container where the finding is located. The top level name is the source file name or table name. Names of some common storage containers are formatted as follows: * BigQuery tables: `{project_id}:{dataset_id}.{table_id}` * Cloud Storage files: `gs://{bucket}/{path}` * Datastore namespace: {namespace} Nested names could be absent if the embedded object has no string identifier (for example, an image contained within a document).", alias="containerName")
    container_timestamp: Optional[StrictStr] = Field(default=None, description="Finding container modification timestamp, if applicable. For Cloud Storage, this field contains the last file modification timestamp. For a BigQuery table, this field contains the last_modified_time property. For Datastore, this field isn't populated.", alias="containerTimestamp")
    container_version: Optional[StrictStr] = Field(default=None, description="Finding container version, if available (\"generation\" for Cloud Storage).", alias="containerVersion")
    document_location: Optional[GooglePrivacyDlpV2DocumentLocation] = Field(default=None, alias="documentLocation")
    image_location: Optional[GooglePrivacyDlpV2ImageLocation] = Field(default=None, alias="imageLocation")
    metadata_location: Optional[GooglePrivacyDlpV2MetadataLocation] = Field(default=None, alias="metadataLocation")
    record_location: Optional[GooglePrivacyDlpV2RecordLocation] = Field(default=None, alias="recordLocation")
    __properties: ClassVar[List[str]] = ["containerName", "containerTimestamp", "containerVersion", "documentLocation", "imageLocation", "metadataLocation", "recordLocation"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GooglePrivacyDlpV2ContentLocation from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of document_location
        if self.document_location:
            _dict['documentLocation'] = self.document_location.to_dict()
        # override the default output from pydantic by calling `to_dict()` of image_location
        if self.image_location:
            _dict['imageLocation'] = self.image_location.to_dict()
        # override the default output from pydantic by calling `to_dict()` of metadata_location
        if self.metadata_location:
            _dict['metadataLocation'] = self.metadata_location.to_dict()
        # override the default output from pydantic by calling `to_dict()` of record_location
        if self.record_location:
            _dict['recordLocation'] = self.record_location.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GooglePrivacyDlpV2ContentLocation from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "containerName": obj.get("containerName"),
            "containerTimestamp": obj.get("containerTimestamp"),
            "containerVersion": obj.get("containerVersion"),
            "documentLocation": GooglePrivacyDlpV2DocumentLocation.from_dict(obj["documentLocation"]) if obj.get("documentLocation") is not None else None,
            "imageLocation": GooglePrivacyDlpV2ImageLocation.from_dict(obj["imageLocation"]) if obj.get("imageLocation") is not None else None,
            "metadataLocation": GooglePrivacyDlpV2MetadataLocation.from_dict(obj["metadataLocation"]) if obj.get("metadataLocation") is not None else None,
            "recordLocation": GooglePrivacyDlpV2RecordLocation.from_dict(obj["recordLocation"]) if obj.get("recordLocation") is not None else None
        })
        return _obj



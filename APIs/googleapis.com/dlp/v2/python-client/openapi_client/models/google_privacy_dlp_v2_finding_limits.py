# coding: utf-8

"""
    Sensitive Data Protection (DLP)

    Discover and protect your sensitive data. A fully managed service designed to help you discover, classify, and protect your valuable data assets with ease.

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_privacy_dlp_v2_info_type_limit import GooglePrivacyDlpV2InfoTypeLimit
from typing import Optional, Set
from typing_extensions import Self

class GooglePrivacyDlpV2FindingLimits(BaseModel):
    """
    Configuration to control the number of findings returned for inspection. This is not used for de-identification or data profiling. When redacting sensitive data from images, finding limits don't apply. They can cause unexpected or inconsistent results, where only some data is redacted. Don't include finding limits in RedactImage requests. Otherwise, Cloud DLP returns an error.
    """ # noqa: E501
    max_findings_per_info_type: Optional[List[GooglePrivacyDlpV2InfoTypeLimit]] = Field(default=None, description="Configuration of findings limit given for specified infoTypes.", alias="maxFindingsPerInfoType")
    max_findings_per_item: Optional[StrictInt] = Field(default=None, description="Max number of findings that are returned for each item scanned. When set within an InspectContentRequest, this field is ignored. This value isn't a hard limit. If the number of findings for an item reaches this limit, the inspection of that item ends gradually, not abruptly. Therefore, the actual number of findings that Cloud DLP returns for the item can be multiple times higher than this value.", alias="maxFindingsPerItem")
    max_findings_per_request: Optional[StrictInt] = Field(default=None, description="Max number of findings that are returned per request or job. If you set this field in an InspectContentRequest, the resulting maximum value is the value that you set or 3,000, whichever is lower. This value isn't a hard limit. If an inspection reaches this limit, the inspection ends gradually, not abruptly. Therefore, the actual number of findings that Cloud DLP returns can be multiple times higher than this value.", alias="maxFindingsPerRequest")
    __properties: ClassVar[List[str]] = ["maxFindingsPerInfoType", "maxFindingsPerItem", "maxFindingsPerRequest"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GooglePrivacyDlpV2FindingLimits from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in max_findings_per_info_type (list)
        _items = []
        if self.max_findings_per_info_type:
            for _item_max_findings_per_info_type in self.max_findings_per_info_type:
                if _item_max_findings_per_info_type:
                    _items.append(_item_max_findings_per_info_type.to_dict())
            _dict['maxFindingsPerInfoType'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GooglePrivacyDlpV2FindingLimits from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "maxFindingsPerInfoType": [GooglePrivacyDlpV2InfoTypeLimit.from_dict(_item) for _item in obj["maxFindingsPerInfoType"]] if obj.get("maxFindingsPerInfoType") is not None else None,
            "maxFindingsPerItem": obj.get("maxFindingsPerItem"),
            "maxFindingsPerRequest": obj.get("maxFindingsPerRequest")
        })
        return _obj



# coding: utf-8

"""
    Sensitive Data Protection (DLP)

    Discover and protect your sensitive data. A fully managed service designed to help you discover, classify, and protect your valuable data assets with ease.

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_privacy_dlp_v2_bucketing_config import GooglePrivacyDlpV2BucketingConfig
from openapi_client.models.google_privacy_dlp_v2_character_mask_config import GooglePrivacyDlpV2CharacterMaskConfig
from openapi_client.models.google_privacy_dlp_v2_crypto_deterministic_config import GooglePrivacyDlpV2CryptoDeterministicConfig
from openapi_client.models.google_privacy_dlp_v2_crypto_hash_config import GooglePrivacyDlpV2CryptoHashConfig
from openapi_client.models.google_privacy_dlp_v2_crypto_replace_ffx_fpe_config import GooglePrivacyDlpV2CryptoReplaceFfxFpeConfig
from openapi_client.models.google_privacy_dlp_v2_date_shift_config import GooglePrivacyDlpV2DateShiftConfig
from openapi_client.models.google_privacy_dlp_v2_fixed_size_bucketing_config import GooglePrivacyDlpV2FixedSizeBucketingConfig
from openapi_client.models.google_privacy_dlp_v2_replace_dictionary_config import GooglePrivacyDlpV2ReplaceDictionaryConfig
from openapi_client.models.google_privacy_dlp_v2_replace_value_config import GooglePrivacyDlpV2ReplaceValueConfig
from openapi_client.models.google_privacy_dlp_v2_time_part_config import GooglePrivacyDlpV2TimePartConfig
from typing import Optional, Set
from typing_extensions import Self

class GooglePrivacyDlpV2PrimitiveTransformation(BaseModel):
    """
    A rule for transforming a value.
    """ # noqa: E501
    bucketing_config: Optional[GooglePrivacyDlpV2BucketingConfig] = Field(default=None, alias="bucketingConfig")
    character_mask_config: Optional[GooglePrivacyDlpV2CharacterMaskConfig] = Field(default=None, alias="characterMaskConfig")
    crypto_deterministic_config: Optional[GooglePrivacyDlpV2CryptoDeterministicConfig] = Field(default=None, alias="cryptoDeterministicConfig")
    crypto_hash_config: Optional[GooglePrivacyDlpV2CryptoHashConfig] = Field(default=None, alias="cryptoHashConfig")
    crypto_replace_ffx_fpe_config: Optional[GooglePrivacyDlpV2CryptoReplaceFfxFpeConfig] = Field(default=None, alias="cryptoReplaceFfxFpeConfig")
    date_shift_config: Optional[GooglePrivacyDlpV2DateShiftConfig] = Field(default=None, alias="dateShiftConfig")
    fixed_size_bucketing_config: Optional[GooglePrivacyDlpV2FixedSizeBucketingConfig] = Field(default=None, alias="fixedSizeBucketingConfig")
    redact_config: Optional[Dict[str, Any]] = Field(default=None, description="Redact a given value. For example, if used with an `InfoTypeTransformation` transforming PHONE_NUMBER, and input 'My phone number is 206-555-0123', the output would be 'My phone number is '.", alias="redactConfig")
    replace_config: Optional[GooglePrivacyDlpV2ReplaceValueConfig] = Field(default=None, alias="replaceConfig")
    replace_dictionary_config: Optional[GooglePrivacyDlpV2ReplaceDictionaryConfig] = Field(default=None, alias="replaceDictionaryConfig")
    replace_with_info_type_config: Optional[Dict[str, Any]] = Field(default=None, description="Replace each matching finding with the name of the info_type.", alias="replaceWithInfoTypeConfig")
    time_part_config: Optional[GooglePrivacyDlpV2TimePartConfig] = Field(default=None, alias="timePartConfig")
    __properties: ClassVar[List[str]] = ["bucketingConfig", "characterMaskConfig", "cryptoDeterministicConfig", "cryptoHashConfig", "cryptoReplaceFfxFpeConfig", "dateShiftConfig", "fixedSizeBucketingConfig", "redactConfig", "replaceConfig", "replaceDictionaryConfig", "replaceWithInfoTypeConfig", "timePartConfig"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GooglePrivacyDlpV2PrimitiveTransformation from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of bucketing_config
        if self.bucketing_config:
            _dict['bucketingConfig'] = self.bucketing_config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of character_mask_config
        if self.character_mask_config:
            _dict['characterMaskConfig'] = self.character_mask_config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of crypto_deterministic_config
        if self.crypto_deterministic_config:
            _dict['cryptoDeterministicConfig'] = self.crypto_deterministic_config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of crypto_hash_config
        if self.crypto_hash_config:
            _dict['cryptoHashConfig'] = self.crypto_hash_config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of crypto_replace_ffx_fpe_config
        if self.crypto_replace_ffx_fpe_config:
            _dict['cryptoReplaceFfxFpeConfig'] = self.crypto_replace_ffx_fpe_config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of date_shift_config
        if self.date_shift_config:
            _dict['dateShiftConfig'] = self.date_shift_config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of fixed_size_bucketing_config
        if self.fixed_size_bucketing_config:
            _dict['fixedSizeBucketingConfig'] = self.fixed_size_bucketing_config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of replace_config
        if self.replace_config:
            _dict['replaceConfig'] = self.replace_config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of replace_dictionary_config
        if self.replace_dictionary_config:
            _dict['replaceDictionaryConfig'] = self.replace_dictionary_config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of time_part_config
        if self.time_part_config:
            _dict['timePartConfig'] = self.time_part_config.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GooglePrivacyDlpV2PrimitiveTransformation from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "bucketingConfig": GooglePrivacyDlpV2BucketingConfig.from_dict(obj["bucketingConfig"]) if obj.get("bucketingConfig") is not None else None,
            "characterMaskConfig": GooglePrivacyDlpV2CharacterMaskConfig.from_dict(obj["characterMaskConfig"]) if obj.get("characterMaskConfig") is not None else None,
            "cryptoDeterministicConfig": GooglePrivacyDlpV2CryptoDeterministicConfig.from_dict(obj["cryptoDeterministicConfig"]) if obj.get("cryptoDeterministicConfig") is not None else None,
            "cryptoHashConfig": GooglePrivacyDlpV2CryptoHashConfig.from_dict(obj["cryptoHashConfig"]) if obj.get("cryptoHashConfig") is not None else None,
            "cryptoReplaceFfxFpeConfig": GooglePrivacyDlpV2CryptoReplaceFfxFpeConfig.from_dict(obj["cryptoReplaceFfxFpeConfig"]) if obj.get("cryptoReplaceFfxFpeConfig") is not None else None,
            "dateShiftConfig": GooglePrivacyDlpV2DateShiftConfig.from_dict(obj["dateShiftConfig"]) if obj.get("dateShiftConfig") is not None else None,
            "fixedSizeBucketingConfig": GooglePrivacyDlpV2FixedSizeBucketingConfig.from_dict(obj["fixedSizeBucketingConfig"]) if obj.get("fixedSizeBucketingConfig") is not None else None,
            "redactConfig": obj.get("redactConfig"),
            "replaceConfig": GooglePrivacyDlpV2ReplaceValueConfig.from_dict(obj["replaceConfig"]) if obj.get("replaceConfig") is not None else None,
            "replaceDictionaryConfig": GooglePrivacyDlpV2ReplaceDictionaryConfig.from_dict(obj["replaceDictionaryConfig"]) if obj.get("replaceDictionaryConfig") is not None else None,
            "replaceWithInfoTypeConfig": obj.get("replaceWithInfoTypeConfig"),
            "timePartConfig": GooglePrivacyDlpV2TimePartConfig.from_dict(obj["timePartConfig"]) if obj.get("timePartConfig") is not None else None
        })
        return _obj



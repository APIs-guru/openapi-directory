# coding: utf-8

"""
    Sensitive Data Protection (DLP)

    Discover and protect your sensitive data. A fully managed service designed to help you discover, classify, and protect your valuable data assets with ease.

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_privacy_dlp_v2_dictionary import GooglePrivacyDlpV2Dictionary
from openapi_client.models.google_privacy_dlp_v2_exclude_by_hotword import GooglePrivacyDlpV2ExcludeByHotword
from openapi_client.models.google_privacy_dlp_v2_exclude_info_types import GooglePrivacyDlpV2ExcludeInfoTypes
from openapi_client.models.google_privacy_dlp_v2_regex import GooglePrivacyDlpV2Regex
from typing import Optional, Set
from typing_extensions import Self

class GooglePrivacyDlpV2ExclusionRule(BaseModel):
    """
    The rule that specifies conditions when findings of infoTypes specified in `InspectionRuleSet` are removed from results.
    """ # noqa: E501
    dictionary: Optional[GooglePrivacyDlpV2Dictionary] = None
    exclude_by_hotword: Optional[GooglePrivacyDlpV2ExcludeByHotword] = Field(default=None, alias="excludeByHotword")
    exclude_info_types: Optional[GooglePrivacyDlpV2ExcludeInfoTypes] = Field(default=None, alias="excludeInfoTypes")
    matching_type: Optional[StrictStr] = Field(default=None, description="How the rule is applied, see MatchingType documentation for details.", alias="matchingType")
    regex: Optional[GooglePrivacyDlpV2Regex] = None
    __properties: ClassVar[List[str]] = ["dictionary", "excludeByHotword", "excludeInfoTypes", "matchingType", "regex"]

    @field_validator('matching_type')
    def matching_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['MATCHING_TYPE_UNSPECIFIED', 'MATCHING_TYPE_FULL_MATCH', 'MATCHING_TYPE_PARTIAL_MATCH', 'MATCHING_TYPE_INVERSE_MATCH']):
            raise ValueError("must be one of enum values ('MATCHING_TYPE_UNSPECIFIED', 'MATCHING_TYPE_FULL_MATCH', 'MATCHING_TYPE_PARTIAL_MATCH', 'MATCHING_TYPE_INVERSE_MATCH')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GooglePrivacyDlpV2ExclusionRule from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of dictionary
        if self.dictionary:
            _dict['dictionary'] = self.dictionary.to_dict()
        # override the default output from pydantic by calling `to_dict()` of exclude_by_hotword
        if self.exclude_by_hotword:
            _dict['excludeByHotword'] = self.exclude_by_hotword.to_dict()
        # override the default output from pydantic by calling `to_dict()` of exclude_info_types
        if self.exclude_info_types:
            _dict['excludeInfoTypes'] = self.exclude_info_types.to_dict()
        # override the default output from pydantic by calling `to_dict()` of regex
        if self.regex:
            _dict['regex'] = self.regex.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GooglePrivacyDlpV2ExclusionRule from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "dictionary": GooglePrivacyDlpV2Dictionary.from_dict(obj["dictionary"]) if obj.get("dictionary") is not None else None,
            "excludeByHotword": GooglePrivacyDlpV2ExcludeByHotword.from_dict(obj["excludeByHotword"]) if obj.get("excludeByHotword") is not None else None,
            "excludeInfoTypes": GooglePrivacyDlpV2ExcludeInfoTypes.from_dict(obj["excludeInfoTypes"]) if obj.get("excludeInfoTypes") is not None else None,
            "matchingType": obj.get("matchingType"),
            "regex": GooglePrivacyDlpV2Regex.from_dict(obj["regex"]) if obj.get("regex") is not None else None
        })
        return _obj



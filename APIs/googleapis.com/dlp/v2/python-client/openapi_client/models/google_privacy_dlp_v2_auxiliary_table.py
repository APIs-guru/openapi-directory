# coding: utf-8

"""
    Sensitive Data Protection (DLP)

    Discover and protect your sensitive data. A fully managed service designed to help you discover, classify, and protect your valuable data assets with ease.

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_privacy_dlp_v2_big_query_table import GooglePrivacyDlpV2BigQueryTable
from openapi_client.models.google_privacy_dlp_v2_field_id import GooglePrivacyDlpV2FieldId
from openapi_client.models.google_privacy_dlp_v2_quasi_id_field import GooglePrivacyDlpV2QuasiIdField
from typing import Optional, Set
from typing_extensions import Self

class GooglePrivacyDlpV2AuxiliaryTable(BaseModel):
    """
    An auxiliary table contains statistical information on the relative frequency of different quasi-identifiers values. It has one or several quasi-identifiers columns, and one column that indicates the relative frequency of each quasi-identifier tuple. If a tuple is present in the data but not in the auxiliary table, the corresponding relative frequency is assumed to be zero (and thus, the tuple is highly reidentifiable).
    """ # noqa: E501
    quasi_ids: Optional[List[GooglePrivacyDlpV2QuasiIdField]] = Field(default=None, description="Required. Quasi-identifier columns.", alias="quasiIds")
    relative_frequency: Optional[GooglePrivacyDlpV2FieldId] = Field(default=None, alias="relativeFrequency")
    table: Optional[GooglePrivacyDlpV2BigQueryTable] = None
    __properties: ClassVar[List[str]] = ["quasiIds", "relativeFrequency", "table"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GooglePrivacyDlpV2AuxiliaryTable from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in quasi_ids (list)
        _items = []
        if self.quasi_ids:
            for _item_quasi_ids in self.quasi_ids:
                if _item_quasi_ids:
                    _items.append(_item_quasi_ids.to_dict())
            _dict['quasiIds'] = _items
        # override the default output from pydantic by calling `to_dict()` of relative_frequency
        if self.relative_frequency:
            _dict['relativeFrequency'] = self.relative_frequency.to_dict()
        # override the default output from pydantic by calling `to_dict()` of table
        if self.table:
            _dict['table'] = self.table.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GooglePrivacyDlpV2AuxiliaryTable from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "quasiIds": [GooglePrivacyDlpV2QuasiIdField.from_dict(_item) for _item in obj["quasiIds"]] if obj.get("quasiIds") is not None else None,
            "relativeFrequency": GooglePrivacyDlpV2FieldId.from_dict(obj["relativeFrequency"]) if obj.get("relativeFrequency") is not None else None,
            "table": GooglePrivacyDlpV2BigQueryTable.from_dict(obj["table"]) if obj.get("table") is not None else None
        })
        return _obj



# coding: utf-8

"""
    Sensitive Data Protection (DLP)

    Discover and protect your sensitive data. A fully managed service designed to help you discover, classify, and protect your valuable data assets with ease.

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_privacy_dlp_v2_image_transformations import GooglePrivacyDlpV2ImageTransformations
from openapi_client.models.google_privacy_dlp_v2_info_type_transformations import GooglePrivacyDlpV2InfoTypeTransformations
from openapi_client.models.google_privacy_dlp_v2_record_transformations import GooglePrivacyDlpV2RecordTransformations
from openapi_client.models.google_privacy_dlp_v2_transformation_error_handling import GooglePrivacyDlpV2TransformationErrorHandling
from typing import Optional, Set
from typing_extensions import Self

class GooglePrivacyDlpV2DeidentifyConfig(BaseModel):
    """
    The configuration that controls how the data will change.
    """ # noqa: E501
    image_transformations: Optional[GooglePrivacyDlpV2ImageTransformations] = Field(default=None, alias="imageTransformations")
    info_type_transformations: Optional[GooglePrivacyDlpV2InfoTypeTransformations] = Field(default=None, alias="infoTypeTransformations")
    record_transformations: Optional[GooglePrivacyDlpV2RecordTransformations] = Field(default=None, alias="recordTransformations")
    transformation_error_handling: Optional[GooglePrivacyDlpV2TransformationErrorHandling] = Field(default=None, alias="transformationErrorHandling")
    __properties: ClassVar[List[str]] = ["imageTransformations", "infoTypeTransformations", "recordTransformations", "transformationErrorHandling"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GooglePrivacyDlpV2DeidentifyConfig from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of image_transformations
        if self.image_transformations:
            _dict['imageTransformations'] = self.image_transformations.to_dict()
        # override the default output from pydantic by calling `to_dict()` of info_type_transformations
        if self.info_type_transformations:
            _dict['infoTypeTransformations'] = self.info_type_transformations.to_dict()
        # override the default output from pydantic by calling `to_dict()` of record_transformations
        if self.record_transformations:
            _dict['recordTransformations'] = self.record_transformations.to_dict()
        # override the default output from pydantic by calling `to_dict()` of transformation_error_handling
        if self.transformation_error_handling:
            _dict['transformationErrorHandling'] = self.transformation_error_handling.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GooglePrivacyDlpV2DeidentifyConfig from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "imageTransformations": GooglePrivacyDlpV2ImageTransformations.from_dict(obj["imageTransformations"]) if obj.get("imageTransformations") is not None else None,
            "infoTypeTransformations": GooglePrivacyDlpV2InfoTypeTransformations.from_dict(obj["infoTypeTransformations"]) if obj.get("infoTypeTransformations") is not None else None,
            "recordTransformations": GooglePrivacyDlpV2RecordTransformations.from_dict(obj["recordTransformations"]) if obj.get("recordTransformations") is not None else None,
            "transformationErrorHandling": GooglePrivacyDlpV2TransformationErrorHandling.from_dict(obj["transformationErrorHandling"]) if obj.get("transformationErrorHandling") is not None else None
        })
        return _obj



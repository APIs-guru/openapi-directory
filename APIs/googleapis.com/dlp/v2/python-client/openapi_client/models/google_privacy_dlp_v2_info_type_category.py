# coding: utf-8

"""
    Sensitive Data Protection (DLP)

    Discover and protect your sensitive data. A fully managed service designed to help you discover, classify, and protect your valuable data assets with ease.

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class GooglePrivacyDlpV2InfoTypeCategory(BaseModel):
    """
    Classification of infoTypes to organize them according to geographic location, industry, and data type.
    """ # noqa: E501
    industry_category: Optional[StrictStr] = Field(default=None, description="The group of relevant businesses where this infoType is commonly used", alias="industryCategory")
    location_category: Optional[StrictStr] = Field(default=None, description="The region or country that issued the ID or document represented by the infoType.", alias="locationCategory")
    type_category: Optional[StrictStr] = Field(default=None, description="The class of identifiers where this infoType belongs", alias="typeCategory")
    __properties: ClassVar[List[str]] = ["industryCategory", "locationCategory", "typeCategory"]

    @field_validator('industry_category')
    def industry_category_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['INDUSTRY_UNSPECIFIED', 'FINANCE', 'HEALTH', 'TELECOMMUNICATIONS']):
            raise ValueError("must be one of enum values ('INDUSTRY_UNSPECIFIED', 'FINANCE', 'HEALTH', 'TELECOMMUNICATIONS')")
        return value

    @field_validator('location_category')
    def location_category_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['LOCATION_UNSPECIFIED', 'GLOBAL', 'ARGENTINA', 'AUSTRALIA', 'BELGIUM', 'BRAZIL', 'CANADA', 'CHILE', 'CHINA', 'COLOMBIA', 'CROATIA', 'DENMARK', 'FRANCE', 'FINLAND', 'GERMANY', 'HONG_KONG', 'INDIA', 'INDONESIA', 'IRELAND', 'ISRAEL', 'ITALY', 'JAPAN', 'KOREA', 'MEXICO', 'THE_NETHERLANDS', 'NEW_ZEALAND', 'NORWAY', 'PARAGUAY', 'PERU', 'POLAND', 'PORTUGAL', 'SINGAPORE', 'SOUTH_AFRICA', 'SPAIN', 'SWEDEN', 'SWITZERLAND', 'TAIWAN', 'THAILAND', 'TURKEY', 'UNITED_KINGDOM', 'UNITED_STATES', 'URUGUAY', 'VENEZUELA', 'INTERNAL']):
            raise ValueError("must be one of enum values ('LOCATION_UNSPECIFIED', 'GLOBAL', 'ARGENTINA', 'AUSTRALIA', 'BELGIUM', 'BRAZIL', 'CANADA', 'CHILE', 'CHINA', 'COLOMBIA', 'CROATIA', 'DENMARK', 'FRANCE', 'FINLAND', 'GERMANY', 'HONG_KONG', 'INDIA', 'INDONESIA', 'IRELAND', 'ISRAEL', 'ITALY', 'JAPAN', 'KOREA', 'MEXICO', 'THE_NETHERLANDS', 'NEW_ZEALAND', 'NORWAY', 'PARAGUAY', 'PERU', 'POLAND', 'PORTUGAL', 'SINGAPORE', 'SOUTH_AFRICA', 'SPAIN', 'SWEDEN', 'SWITZERLAND', 'TAIWAN', 'THAILAND', 'TURKEY', 'UNITED_KINGDOM', 'UNITED_STATES', 'URUGUAY', 'VENEZUELA', 'INTERNAL')")
        return value

    @field_validator('type_category')
    def type_category_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['TYPE_UNSPECIFIED', 'PII', 'SPII', 'DEMOGRAPHIC', 'CREDENTIAL', 'GOVERNMENT_ID', 'DOCUMENT', 'CONTEXTUAL_INFORMATION']):
            raise ValueError("must be one of enum values ('TYPE_UNSPECIFIED', 'PII', 'SPII', 'DEMOGRAPHIC', 'CREDENTIAL', 'GOVERNMENT_ID', 'DOCUMENT', 'CONTEXTUAL_INFORMATION')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GooglePrivacyDlpV2InfoTypeCategory from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GooglePrivacyDlpV2InfoTypeCategory from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "industryCategory": obj.get("industryCategory"),
            "locationCategory": obj.get("locationCategory"),
            "typeCategory": obj.get("typeCategory")
        })
        return _obj



# coding: utf-8

"""
    Sensitive Data Protection (DLP)

    Discover and protect your sensitive data. A fully managed service designed to help you discover, classify, and protect your valuable data assets with ease.

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_privacy_dlp_v2_record_transformation import GooglePrivacyDlpV2RecordTransformation
from typing import Optional, Set
from typing_extensions import Self

class GooglePrivacyDlpV2TransformationLocation(BaseModel):
    """
    Specifies the location of a transformation.
    """ # noqa: E501
    container_type: Optional[StrictStr] = Field(default=None, description="Information about the functionality of the container where this finding occurred, if available.", alias="containerType")
    finding_id: Optional[StrictStr] = Field(default=None, description="For infotype transformations, link to the corresponding findings ID so that location information does not need to be duplicated. Each findings ID correlates to an entry in the findings output table, this table only gets created when users specify to save findings (add the save findings action to the request).", alias="findingId")
    record_transformation: Optional[GooglePrivacyDlpV2RecordTransformation] = Field(default=None, alias="recordTransformation")
    __properties: ClassVar[List[str]] = ["containerType", "findingId", "recordTransformation"]

    @field_validator('container_type')
    def container_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['TRANSFORM_UNKNOWN_CONTAINER', 'TRANSFORM_BODY', 'TRANSFORM_METADATA', 'TRANSFORM_TABLE']):
            raise ValueError("must be one of enum values ('TRANSFORM_UNKNOWN_CONTAINER', 'TRANSFORM_BODY', 'TRANSFORM_METADATA', 'TRANSFORM_TABLE')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GooglePrivacyDlpV2TransformationLocation from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of record_transformation
        if self.record_transformation:
            _dict['recordTransformation'] = self.record_transformation.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GooglePrivacyDlpV2TransformationLocation from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "containerType": obj.get("containerType"),
            "findingId": obj.get("findingId"),
            "recordTransformation": GooglePrivacyDlpV2RecordTransformation.from_dict(obj["recordTransformation"]) if obj.get("recordTransformation") is not None else None
        })
        return _obj



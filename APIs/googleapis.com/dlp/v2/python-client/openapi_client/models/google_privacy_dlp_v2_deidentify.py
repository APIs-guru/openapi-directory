# coding: utf-8

"""
    Sensitive Data Protection (DLP)

    Discover and protect your sensitive data. A fully managed service designed to help you discover, classify, and protect your valuable data assets with ease.

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_privacy_dlp_v2_transformation_config import GooglePrivacyDlpV2TransformationConfig
from openapi_client.models.google_privacy_dlp_v2_transformation_details_storage_config import GooglePrivacyDlpV2TransformationDetailsStorageConfig
from typing import Optional, Set
from typing_extensions import Self

class GooglePrivacyDlpV2Deidentify(BaseModel):
    """
    Create a de-identified copy of the requested table or files. A TransformationDetail will be created for each transformation. If any rows in BigQuery are skipped during de-identification (transformation errors or row size exceeds BigQuery insert API limits) they are placed in the failure output table. If the original row exceeds the BigQuery insert API limit it will be truncated when written to the failure output table. The failure output table can be set in the action.deidentify.output.big_query_output.deidentified_failure_output_table field, if no table is set, a table will be automatically created in the same project and dataset as the original table. Compatible with: Inspect
    """ # noqa: E501
    cloud_storage_output: Optional[StrictStr] = Field(default=None, description="Required. User settable Cloud Storage bucket and folders to store de-identified files. This field must be set for cloud storage deidentification. The output Cloud Storage bucket must be different from the input bucket. De-identified files will overwrite files in the output path. Form of: gs://bucket/folder/ or gs://bucket", alias="cloudStorageOutput")
    file_types_to_transform: Optional[List[StrictStr]] = Field(default=None, description="List of user-specified file type groups to transform. If specified, only the files with these filetypes will be transformed. If empty, all supported files will be transformed. Supported types may be automatically added over time. If a file type is set in this field that isn't supported by the Deidentify action then the job will fail and will not be successfully created/started. Currently the only filetypes supported are: IMAGES, TEXT_FILES, CSV, TSV.", alias="fileTypesToTransform")
    transformation_config: Optional[GooglePrivacyDlpV2TransformationConfig] = Field(default=None, alias="transformationConfig")
    transformation_details_storage_config: Optional[GooglePrivacyDlpV2TransformationDetailsStorageConfig] = Field(default=None, alias="transformationDetailsStorageConfig")
    __properties: ClassVar[List[str]] = ["cloudStorageOutput", "fileTypesToTransform", "transformationConfig", "transformationDetailsStorageConfig"]

    @field_validator('file_types_to_transform')
    def file_types_to_transform_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        for i in value:
            if i not in set(['FILE_TYPE_UNSPECIFIED', 'BINARY_FILE', 'TEXT_FILE', 'IMAGE', 'WORD', 'PDF', 'AVRO', 'CSV', 'TSV', 'POWERPOINT', 'EXCEL']):
                raise ValueError("each list item must be one of ('FILE_TYPE_UNSPECIFIED', 'BINARY_FILE', 'TEXT_FILE', 'IMAGE', 'WORD', 'PDF', 'AVRO', 'CSV', 'TSV', 'POWERPOINT', 'EXCEL')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GooglePrivacyDlpV2Deidentify from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of transformation_config
        if self.transformation_config:
            _dict['transformationConfig'] = self.transformation_config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of transformation_details_storage_config
        if self.transformation_details_storage_config:
            _dict['transformationDetailsStorageConfig'] = self.transformation_details_storage_config.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GooglePrivacyDlpV2Deidentify from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "cloudStorageOutput": obj.get("cloudStorageOutput"),
            "fileTypesToTransform": obj.get("fileTypesToTransform"),
            "transformationConfig": GooglePrivacyDlpV2TransformationConfig.from_dict(obj["transformationConfig"]) if obj.get("transformationConfig") is not None else None,
            "transformationDetailsStorageConfig": GooglePrivacyDlpV2TransformationDetailsStorageConfig.from_dict(obj["transformationDetailsStorageConfig"]) if obj.get("transformationDetailsStorageConfig") is not None else None
        })
        return _obj



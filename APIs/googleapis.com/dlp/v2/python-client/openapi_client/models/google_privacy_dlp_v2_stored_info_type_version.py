# coding: utf-8

"""
    Sensitive Data Protection (DLP)

    Discover and protect your sensitive data. A fully managed service designed to help you discover, classify, and protect your valuable data assets with ease.

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_privacy_dlp_v2_error import GooglePrivacyDlpV2Error
from openapi_client.models.google_privacy_dlp_v2_stored_info_type_config import GooglePrivacyDlpV2StoredInfoTypeConfig
from openapi_client.models.google_privacy_dlp_v2_stored_info_type_stats import GooglePrivacyDlpV2StoredInfoTypeStats
from typing import Optional, Set
from typing_extensions import Self

class GooglePrivacyDlpV2StoredInfoTypeVersion(BaseModel):
    """
    Version of a StoredInfoType, including the configuration used to build it, create timestamp, and current state.
    """ # noqa: E501
    config: Optional[GooglePrivacyDlpV2StoredInfoTypeConfig] = None
    create_time: Optional[StrictStr] = Field(default=None, description="Create timestamp of the version. Read-only, determined by the system when the version is created.", alias="createTime")
    errors: Optional[List[GooglePrivacyDlpV2Error]] = Field(default=None, description="Errors that occurred when creating this storedInfoType version, or anomalies detected in the storedInfoType data that render it unusable. Only the five most recent errors will be displayed, with the most recent error appearing first. For example, some of the data for stored custom dictionaries is put in the user's Cloud Storage bucket, and if this data is modified or deleted by the user or another system, the dictionary becomes invalid. If any errors occur, fix the problem indicated by the error message and use the UpdateStoredInfoType API method to create another version of the storedInfoType to continue using it, reusing the same `config` if it was not the source of the error.")
    state: Optional[StrictStr] = Field(default=None, description="Stored info type version state. Read-only, updated by the system during dictionary creation.")
    stats: Optional[GooglePrivacyDlpV2StoredInfoTypeStats] = None
    __properties: ClassVar[List[str]] = ["config", "createTime", "errors", "state", "stats"]

    @field_validator('state')
    def state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['STORED_INFO_TYPE_STATE_UNSPECIFIED', 'PENDING', 'READY', 'FAILED', 'INVALID']):
            raise ValueError("must be one of enum values ('STORED_INFO_TYPE_STATE_UNSPECIFIED', 'PENDING', 'READY', 'FAILED', 'INVALID')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GooglePrivacyDlpV2StoredInfoTypeVersion from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of config
        if self.config:
            _dict['config'] = self.config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in errors (list)
        _items = []
        if self.errors:
            for _item_errors in self.errors:
                if _item_errors:
                    _items.append(_item_errors.to_dict())
            _dict['errors'] = _items
        # override the default output from pydantic by calling `to_dict()` of stats
        if self.stats:
            _dict['stats'] = self.stats.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GooglePrivacyDlpV2StoredInfoTypeVersion from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "config": GooglePrivacyDlpV2StoredInfoTypeConfig.from_dict(obj["config"]) if obj.get("config") is not None else None,
            "createTime": obj.get("createTime"),
            "errors": [GooglePrivacyDlpV2Error.from_dict(_item) for _item in obj["errors"]] if obj.get("errors") is not None else None,
            "state": obj.get("state"),
            "stats": GooglePrivacyDlpV2StoredInfoTypeStats.from_dict(obj["stats"]) if obj.get("stats") is not None else None
        })
        return _obj



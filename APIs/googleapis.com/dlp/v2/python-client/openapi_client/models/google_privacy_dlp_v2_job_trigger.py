# coding: utf-8

"""
    Sensitive Data Protection (DLP)

    Discover and protect your sensitive data. A fully managed service designed to help you discover, classify, and protect your valuable data assets with ease.

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_privacy_dlp_v2_error import GooglePrivacyDlpV2Error
from openapi_client.models.google_privacy_dlp_v2_inspect_job_config import GooglePrivacyDlpV2InspectJobConfig
from openapi_client.models.google_privacy_dlp_v2_trigger import GooglePrivacyDlpV2Trigger
from typing import Optional, Set
from typing_extensions import Self

class GooglePrivacyDlpV2JobTrigger(BaseModel):
    """
    Contains a configuration to make dlp api calls on a repeating basis. See https://cloud.google.com/sensitive-data-protection/docs/concepts-job-triggers to learn more.
    """ # noqa: E501
    create_time: Optional[StrictStr] = Field(default=None, description="Output only. The creation timestamp of a triggeredJob.", alias="createTime")
    description: Optional[StrictStr] = Field(default=None, description="User provided description (max 256 chars)")
    display_name: Optional[StrictStr] = Field(default=None, description="Display name (max 100 chars)", alias="displayName")
    errors: Optional[List[GooglePrivacyDlpV2Error]] = Field(default=None, description="Output only. A stream of errors encountered when the trigger was activated. Repeated errors may result in the JobTrigger automatically being paused. Will return the last 100 errors. Whenever the JobTrigger is modified this list will be cleared.")
    inspect_job: Optional[GooglePrivacyDlpV2InspectJobConfig] = Field(default=None, alias="inspectJob")
    last_run_time: Optional[StrictStr] = Field(default=None, description="Output only. The timestamp of the last time this trigger executed.", alias="lastRunTime")
    name: Optional[StrictStr] = Field(default=None, description="Unique resource name for the triggeredJob, assigned by the service when the triggeredJob is created, for example `projects/dlp-test-project/jobTriggers/53234423`.")
    status: Optional[StrictStr] = Field(default=None, description="Required. A status for this trigger.")
    triggers: Optional[List[GooglePrivacyDlpV2Trigger]] = Field(default=None, description="A list of triggers which will be OR'ed together. Only one in the list needs to trigger for a job to be started. The list may contain only a single Schedule trigger and must have at least one object.")
    update_time: Optional[StrictStr] = Field(default=None, description="Output only. The last update timestamp of a triggeredJob.", alias="updateTime")
    __properties: ClassVar[List[str]] = ["createTime", "description", "displayName", "errors", "inspectJob", "lastRunTime", "name", "status", "triggers", "updateTime"]

    @field_validator('status')
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['STATUS_UNSPECIFIED', 'HEALTHY', 'PAUSED', 'CANCELLED']):
            raise ValueError("must be one of enum values ('STATUS_UNSPECIFIED', 'HEALTHY', 'PAUSED', 'CANCELLED')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GooglePrivacyDlpV2JobTrigger from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "create_time",
            "errors",
            "last_run_time",
            "update_time",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in errors (list)
        _items = []
        if self.errors:
            for _item_errors in self.errors:
                if _item_errors:
                    _items.append(_item_errors.to_dict())
            _dict['errors'] = _items
        # override the default output from pydantic by calling `to_dict()` of inspect_job
        if self.inspect_job:
            _dict['inspectJob'] = self.inspect_job.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in triggers (list)
        _items = []
        if self.triggers:
            for _item_triggers in self.triggers:
                if _item_triggers:
                    _items.append(_item_triggers.to_dict())
            _dict['triggers'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GooglePrivacyDlpV2JobTrigger from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "createTime": obj.get("createTime"),
            "description": obj.get("description"),
            "displayName": obj.get("displayName"),
            "errors": [GooglePrivacyDlpV2Error.from_dict(_item) for _item in obj["errors"]] if obj.get("errors") is not None else None,
            "inspectJob": GooglePrivacyDlpV2InspectJobConfig.from_dict(obj["inspectJob"]) if obj.get("inspectJob") is not None else None,
            "lastRunTime": obj.get("lastRunTime"),
            "name": obj.get("name"),
            "status": obj.get("status"),
            "triggers": [GooglePrivacyDlpV2Trigger.from_dict(_item) for _item in obj["triggers"]] if obj.get("triggers") is not None else None,
            "updateTime": obj.get("updateTime")
        })
        return _obj



# coding: utf-8

"""
    Sensitive Data Protection (DLP)

    Discover and protect your sensitive data. A fully managed service designed to help you discover, classify, and protect your valuable data assets with ease.

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_privacy_dlp_v2_big_query_table_types import GooglePrivacyDlpV2BigQueryTableTypes
from openapi_client.models.google_privacy_dlp_v2_or_conditions import GooglePrivacyDlpV2OrConditions
from typing import Optional, Set
from typing_extensions import Self

class GooglePrivacyDlpV2DiscoveryBigQueryConditions(BaseModel):
    """
    Requirements that must be true before a table is scanned in discovery for the first time. There is an AND relationship between the top-level attributes. Additionally, minimum conditions with an OR relationship that must be met before Cloud DLP scans a table can be set (like a minimum row count or a minimum table age).
    """ # noqa: E501
    created_after: Optional[StrictStr] = Field(default=None, description="BigQuery table must have been created after this date. Used to avoid backfilling.", alias="createdAfter")
    or_conditions: Optional[GooglePrivacyDlpV2OrConditions] = Field(default=None, alias="orConditions")
    type_collection: Optional[StrictStr] = Field(default=None, description="Restrict discovery to categories of table types.", alias="typeCollection")
    types: Optional[GooglePrivacyDlpV2BigQueryTableTypes] = None
    __properties: ClassVar[List[str]] = ["createdAfter", "orConditions", "typeCollection", "types"]

    @field_validator('type_collection')
    def type_collection_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['BIG_QUERY_COLLECTION_UNSPECIFIED', 'BIG_QUERY_COLLECTION_ALL_TYPES', 'BIG_QUERY_COLLECTION_ONLY_SUPPORTED_TYPES']):
            raise ValueError("must be one of enum values ('BIG_QUERY_COLLECTION_UNSPECIFIED', 'BIG_QUERY_COLLECTION_ALL_TYPES', 'BIG_QUERY_COLLECTION_ONLY_SUPPORTED_TYPES')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GooglePrivacyDlpV2DiscoveryBigQueryConditions from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of or_conditions
        if self.or_conditions:
            _dict['orConditions'] = self.or_conditions.to_dict()
        # override the default output from pydantic by calling `to_dict()` of types
        if self.types:
            _dict['types'] = self.types.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GooglePrivacyDlpV2DiscoveryBigQueryConditions from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "createdAfter": obj.get("createdAfter"),
            "orConditions": GooglePrivacyDlpV2OrConditions.from_dict(obj["orConditions"]) if obj.get("orConditions") is not None else None,
            "typeCollection": obj.get("typeCollection"),
            "types": GooglePrivacyDlpV2BigQueryTableTypes.from_dict(obj["types"]) if obj.get("types") is not None else None
        })
        return _obj



# coding: utf-8

"""
    Sensitive Data Protection (DLP)

    Discover and protect your sensitive data. A fully managed service designed to help you discover, classify, and protect your valuable data assets with ease.

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_privacy_dlp_v2_big_query_table import GooglePrivacyDlpV2BigQueryTable
from openapi_client.models.google_privacy_dlp_v2_categorical_stats_result import GooglePrivacyDlpV2CategoricalStatsResult
from openapi_client.models.google_privacy_dlp_v2_delta_presence_estimation_result import GooglePrivacyDlpV2DeltaPresenceEstimationResult
from openapi_client.models.google_privacy_dlp_v2_k_anonymity_result import GooglePrivacyDlpV2KAnonymityResult
from openapi_client.models.google_privacy_dlp_v2_k_map_estimation_result import GooglePrivacyDlpV2KMapEstimationResult
from openapi_client.models.google_privacy_dlp_v2_l_diversity_result import GooglePrivacyDlpV2LDiversityResult
from openapi_client.models.google_privacy_dlp_v2_numerical_stats_result import GooglePrivacyDlpV2NumericalStatsResult
from openapi_client.models.google_privacy_dlp_v2_privacy_metric import GooglePrivacyDlpV2PrivacyMetric
from openapi_client.models.google_privacy_dlp_v2_requested_risk_analysis_options import GooglePrivacyDlpV2RequestedRiskAnalysisOptions
from typing import Optional, Set
from typing_extensions import Self

class GooglePrivacyDlpV2AnalyzeDataSourceRiskDetails(BaseModel):
    """
    Result of a risk analysis operation request.
    """ # noqa: E501
    categorical_stats_result: Optional[GooglePrivacyDlpV2CategoricalStatsResult] = Field(default=None, alias="categoricalStatsResult")
    delta_presence_estimation_result: Optional[GooglePrivacyDlpV2DeltaPresenceEstimationResult] = Field(default=None, alias="deltaPresenceEstimationResult")
    k_anonymity_result: Optional[GooglePrivacyDlpV2KAnonymityResult] = Field(default=None, alias="kAnonymityResult")
    k_map_estimation_result: Optional[GooglePrivacyDlpV2KMapEstimationResult] = Field(default=None, alias="kMapEstimationResult")
    l_diversity_result: Optional[GooglePrivacyDlpV2LDiversityResult] = Field(default=None, alias="lDiversityResult")
    numerical_stats_result: Optional[GooglePrivacyDlpV2NumericalStatsResult] = Field(default=None, alias="numericalStatsResult")
    requested_options: Optional[GooglePrivacyDlpV2RequestedRiskAnalysisOptions] = Field(default=None, alias="requestedOptions")
    requested_privacy_metric: Optional[GooglePrivacyDlpV2PrivacyMetric] = Field(default=None, alias="requestedPrivacyMetric")
    requested_source_table: Optional[GooglePrivacyDlpV2BigQueryTable] = Field(default=None, alias="requestedSourceTable")
    __properties: ClassVar[List[str]] = ["categoricalStatsResult", "deltaPresenceEstimationResult", "kAnonymityResult", "kMapEstimationResult", "lDiversityResult", "numericalStatsResult", "requestedOptions", "requestedPrivacyMetric", "requestedSourceTable"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GooglePrivacyDlpV2AnalyzeDataSourceRiskDetails from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of categorical_stats_result
        if self.categorical_stats_result:
            _dict['categoricalStatsResult'] = self.categorical_stats_result.to_dict()
        # override the default output from pydantic by calling `to_dict()` of delta_presence_estimation_result
        if self.delta_presence_estimation_result:
            _dict['deltaPresenceEstimationResult'] = self.delta_presence_estimation_result.to_dict()
        # override the default output from pydantic by calling `to_dict()` of k_anonymity_result
        if self.k_anonymity_result:
            _dict['kAnonymityResult'] = self.k_anonymity_result.to_dict()
        # override the default output from pydantic by calling `to_dict()` of k_map_estimation_result
        if self.k_map_estimation_result:
            _dict['kMapEstimationResult'] = self.k_map_estimation_result.to_dict()
        # override the default output from pydantic by calling `to_dict()` of l_diversity_result
        if self.l_diversity_result:
            _dict['lDiversityResult'] = self.l_diversity_result.to_dict()
        # override the default output from pydantic by calling `to_dict()` of numerical_stats_result
        if self.numerical_stats_result:
            _dict['numericalStatsResult'] = self.numerical_stats_result.to_dict()
        # override the default output from pydantic by calling `to_dict()` of requested_options
        if self.requested_options:
            _dict['requestedOptions'] = self.requested_options.to_dict()
        # override the default output from pydantic by calling `to_dict()` of requested_privacy_metric
        if self.requested_privacy_metric:
            _dict['requestedPrivacyMetric'] = self.requested_privacy_metric.to_dict()
        # override the default output from pydantic by calling `to_dict()` of requested_source_table
        if self.requested_source_table:
            _dict['requestedSourceTable'] = self.requested_source_table.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GooglePrivacyDlpV2AnalyzeDataSourceRiskDetails from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "categoricalStatsResult": GooglePrivacyDlpV2CategoricalStatsResult.from_dict(obj["categoricalStatsResult"]) if obj.get("categoricalStatsResult") is not None else None,
            "deltaPresenceEstimationResult": GooglePrivacyDlpV2DeltaPresenceEstimationResult.from_dict(obj["deltaPresenceEstimationResult"]) if obj.get("deltaPresenceEstimationResult") is not None else None,
            "kAnonymityResult": GooglePrivacyDlpV2KAnonymityResult.from_dict(obj["kAnonymityResult"]) if obj.get("kAnonymityResult") is not None else None,
            "kMapEstimationResult": GooglePrivacyDlpV2KMapEstimationResult.from_dict(obj["kMapEstimationResult"]) if obj.get("kMapEstimationResult") is not None else None,
            "lDiversityResult": GooglePrivacyDlpV2LDiversityResult.from_dict(obj["lDiversityResult"]) if obj.get("lDiversityResult") is not None else None,
            "numericalStatsResult": GooglePrivacyDlpV2NumericalStatsResult.from_dict(obj["numericalStatsResult"]) if obj.get("numericalStatsResult") is not None else None,
            "requestedOptions": GooglePrivacyDlpV2RequestedRiskAnalysisOptions.from_dict(obj["requestedOptions"]) if obj.get("requestedOptions") is not None else None,
            "requestedPrivacyMetric": GooglePrivacyDlpV2PrivacyMetric.from_dict(obj["requestedPrivacyMetric"]) if obj.get("requestedPrivacyMetric") is not None else None,
            "requestedSourceTable": GooglePrivacyDlpV2BigQueryTable.from_dict(obj["requestedSourceTable"]) if obj.get("requestedSourceTable") is not None else None
        })
        return _obj



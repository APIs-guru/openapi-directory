# coding: utf-8

"""
    Sensitive Data Protection (DLP)

    Discover and protect your sensitive data. A fully managed service designed to help you discover, classify, and protect your valuable data assets with ease.

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_privacy_dlp_v2_crypto_key import GooglePrivacyDlpV2CryptoKey
from openapi_client.models.google_privacy_dlp_v2_field_id import GooglePrivacyDlpV2FieldId
from openapi_client.models.google_privacy_dlp_v2_info_type import GooglePrivacyDlpV2InfoType
from typing import Optional, Set
from typing_extensions import Self

class GooglePrivacyDlpV2CryptoReplaceFfxFpeConfig(BaseModel):
    """
    Replaces an identifier with a surrogate using Format Preserving Encryption (FPE) with the FFX mode of operation; however when used in the `ReidentifyContent` API method, it serves the opposite function by reversing the surrogate back into the original identifier. The identifier must be encoded as ASCII. For a given crypto key and context, the same identifier will be replaced with the same surrogate. Identifiers must be at least two characters long. In the case that the identifier is the empty string, it will be skipped. See https://cloud.google.com/sensitive-data-protection/docs/pseudonymization to learn more. Note: We recommend using CryptoDeterministicConfig for all use cases which do not require preserving the input alphabet space and size, plus warrant referential integrity.
    """ # noqa: E501
    common_alphabet: Optional[StrictStr] = Field(default=None, description="Common alphabets.", alias="commonAlphabet")
    context: Optional[GooglePrivacyDlpV2FieldId] = None
    crypto_key: Optional[GooglePrivacyDlpV2CryptoKey] = Field(default=None, alias="cryptoKey")
    custom_alphabet: Optional[StrictStr] = Field(default=None, description="This is supported by mapping these to the alphanumeric characters that the FFX mode natively supports. This happens before/after encryption/decryption. Each character listed must appear only once. Number of characters must be in the range [2, 95]. This must be encoded as ASCII. The order of characters does not matter. The full list of allowed characters is: 0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz ~`!@#$%^&*()_-+={[}]|\\:;\"'<,>.?/", alias="customAlphabet")
    radix: Optional[StrictInt] = Field(default=None, description="The native way to select the alphabet. Must be in the range [2, 95].")
    surrogate_info_type: Optional[GooglePrivacyDlpV2InfoType] = Field(default=None, alias="surrogateInfoType")
    __properties: ClassVar[List[str]] = ["commonAlphabet", "context", "cryptoKey", "customAlphabet", "radix", "surrogateInfoType"]

    @field_validator('common_alphabet')
    def common_alphabet_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['FFX_COMMON_NATIVE_ALPHABET_UNSPECIFIED', 'NUMERIC', 'HEXADECIMAL', 'UPPER_CASE_ALPHA_NUMERIC', 'ALPHA_NUMERIC']):
            raise ValueError("must be one of enum values ('FFX_COMMON_NATIVE_ALPHABET_UNSPECIFIED', 'NUMERIC', 'HEXADECIMAL', 'UPPER_CASE_ALPHA_NUMERIC', 'ALPHA_NUMERIC')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GooglePrivacyDlpV2CryptoReplaceFfxFpeConfig from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of context
        if self.context:
            _dict['context'] = self.context.to_dict()
        # override the default output from pydantic by calling `to_dict()` of crypto_key
        if self.crypto_key:
            _dict['cryptoKey'] = self.crypto_key.to_dict()
        # override the default output from pydantic by calling `to_dict()` of surrogate_info_type
        if self.surrogate_info_type:
            _dict['surrogateInfoType'] = self.surrogate_info_type.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GooglePrivacyDlpV2CryptoReplaceFfxFpeConfig from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "commonAlphabet": obj.get("commonAlphabet"),
            "context": GooglePrivacyDlpV2FieldId.from_dict(obj["context"]) if obj.get("context") is not None else None,
            "cryptoKey": GooglePrivacyDlpV2CryptoKey.from_dict(obj["cryptoKey"]) if obj.get("cryptoKey") is not None else None,
            "customAlphabet": obj.get("customAlphabet"),
            "radix": obj.get("radix"),
            "surrogateInfoType": GooglePrivacyDlpV2InfoType.from_dict(obj["surrogateInfoType"]) if obj.get("surrogateInfoType") is not None else None
        })
        return _obj



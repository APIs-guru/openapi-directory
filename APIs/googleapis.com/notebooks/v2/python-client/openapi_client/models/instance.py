# coding: utf-8

"""
    Notebooks API

    Notebooks API is used to manage notebook resources in Google Cloud.

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.gce_setup import GceSetup
from openapi_client.models.upgrade_history_entry import UpgradeHistoryEntry
from typing import Optional, Set
from typing_extensions import Self

class Instance(BaseModel):
    """
    The definition of a notebook instance.
    """ # noqa: E501
    create_time: Optional[StrictStr] = Field(default=None, description="Output only. Instance creation time.", alias="createTime")
    creator: Optional[StrictStr] = Field(default=None, description="Output only. Email address of entity that sent original CreateInstance request.")
    disable_proxy_access: Optional[StrictBool] = Field(default=None, description="Optional. If true, the notebook instance will not register with the proxy.", alias="disableProxyAccess")
    gce_setup: Optional[GceSetup] = Field(default=None, alias="gceSetup")
    health_info: Optional[Dict[str, StrictStr]] = Field(default=None, description="Output only. Additional information about instance health. Example: healthInfo\": { \"docker_proxy_agent_status\": \"1\", \"docker_status\": \"1\", \"jupyterlab_api_status\": \"-1\", \"jupyterlab_status\": \"-1\", \"updated\": \"2020-10-18 09:40:03.573409\" }", alias="healthInfo")
    health_state: Optional[StrictStr] = Field(default=None, description="Output only. Instance health_state.", alias="healthState")
    id: Optional[StrictStr] = Field(default=None, description="Output only. Unique ID of the resource.")
    instance_owners: Optional[List[StrictStr]] = Field(default=None, description="Optional. Input only. The owner of this instance after creation. Format: `alias@example.com` Currently supports one owner only. If not specified, all of the service account users of your VM instance's service account can use the instance.", alias="instanceOwners")
    labels: Optional[Dict[str, StrictStr]] = Field(default=None, description="Optional. Labels to apply to this instance. These can be later modified by the UpdateInstance method.")
    name: Optional[StrictStr] = Field(default=None, description="Output only. The name of this notebook instance. Format: `projects/{project_id}/locations/{location}/instances/{instance_id}`")
    proxy_uri: Optional[StrictStr] = Field(default=None, description="Output only. The proxy endpoint that is used to access the Jupyter notebook.", alias="proxyUri")
    state: Optional[StrictStr] = Field(default=None, description="Output only. The state of this instance.")
    third_party_proxy_url: Optional[StrictStr] = Field(default=None, description="Output only. The workforce pools proxy endpoint that is used to access the Jupyter notebook.", alias="thirdPartyProxyUrl")
    update_time: Optional[StrictStr] = Field(default=None, description="Output only. Instance update time.", alias="updateTime")
    upgrade_history: Optional[List[UpgradeHistoryEntry]] = Field(default=None, description="Output only. The upgrade history of this instance.", alias="upgradeHistory")
    __properties: ClassVar[List[str]] = ["createTime", "creator", "disableProxyAccess", "gceSetup", "healthInfo", "healthState", "id", "instanceOwners", "labels", "name", "proxyUri", "state", "thirdPartyProxyUrl", "updateTime", "upgradeHistory"]

    @field_validator('health_state')
    def health_state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['HEALTH_STATE_UNSPECIFIED', 'HEALTHY', 'UNHEALTHY', 'AGENT_NOT_INSTALLED', 'AGENT_NOT_RUNNING']):
            raise ValueError("must be one of enum values ('HEALTH_STATE_UNSPECIFIED', 'HEALTHY', 'UNHEALTHY', 'AGENT_NOT_INSTALLED', 'AGENT_NOT_RUNNING')")
        return value

    @field_validator('state')
    def state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['STATE_UNSPECIFIED', 'STARTING', 'PROVISIONING', 'ACTIVE', 'STOPPING', 'STOPPED', 'DELETED', 'UPGRADING', 'INITIALIZING', 'SUSPENDING', 'SUSPENDED']):
            raise ValueError("must be one of enum values ('STATE_UNSPECIFIED', 'STARTING', 'PROVISIONING', 'ACTIVE', 'STOPPING', 'STOPPED', 'DELETED', 'UPGRADING', 'INITIALIZING', 'SUSPENDING', 'SUSPENDED')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Instance from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "create_time",
            "creator",
            "health_info",
            "health_state",
            "id",
            "name",
            "proxy_uri",
            "state",
            "third_party_proxy_url",
            "update_time",
            "upgrade_history",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of gce_setup
        if self.gce_setup:
            _dict['gceSetup'] = self.gce_setup.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in upgrade_history (list)
        _items = []
        if self.upgrade_history:
            for _item_upgrade_history in self.upgrade_history:
                if _item_upgrade_history:
                    _items.append(_item_upgrade_history.to_dict())
            _dict['upgradeHistory'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Instance from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "createTime": obj.get("createTime"),
            "creator": obj.get("creator"),
            "disableProxyAccess": obj.get("disableProxyAccess"),
            "gceSetup": GceSetup.from_dict(obj["gceSetup"]) if obj.get("gceSetup") is not None else None,
            "healthInfo": obj.get("healthInfo"),
            "healthState": obj.get("healthState"),
            "id": obj.get("id"),
            "instanceOwners": obj.get("instanceOwners"),
            "labels": obj.get("labels"),
            "name": obj.get("name"),
            "proxyUri": obj.get("proxyUri"),
            "state": obj.get("state"),
            "thirdPartyProxyUrl": obj.get("thirdPartyProxyUrl"),
            "updateTime": obj.get("updateTime"),
            "upgradeHistory": [UpgradeHistoryEntry.from_dict(_item) for _item in obj["upgradeHistory"]] if obj.get("upgradeHistory") is not None else None
        })
        return _obj



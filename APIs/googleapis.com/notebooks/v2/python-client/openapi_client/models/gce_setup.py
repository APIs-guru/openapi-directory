# coding: utf-8

"""
    Notebooks API

    Notebooks API is used to manage notebook resources in Google Cloud.

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.accelerator_config import AcceleratorConfig
from openapi_client.models.boot_disk import BootDisk
from openapi_client.models.container_image import ContainerImage
from openapi_client.models.data_disk import DataDisk
from openapi_client.models.gpu_driver_config import GPUDriverConfig
from openapi_client.models.network_interface import NetworkInterface
from openapi_client.models.service_account import ServiceAccount
from openapi_client.models.shielded_instance_config import ShieldedInstanceConfig
from openapi_client.models.vm_image import VmImage
from typing import Optional, Set
from typing_extensions import Self

class GceSetup(BaseModel):
    """
    The definition of how to configure a VM instance outside of Resources and Identity.
    """ # noqa: E501
    accelerator_configs: Optional[List[AcceleratorConfig]] = Field(default=None, description="Optional. The hardware accelerators used on this instance. If you use accelerators, make sure that your configuration has [enough vCPUs and memory to support the `machine_type` you have selected](https://cloud.google.com/compute/docs/gpus/#gpus-list). Currently supports only one accelerator configuration.", alias="acceleratorConfigs")
    boot_disk: Optional[BootDisk] = Field(default=None, alias="bootDisk")
    container_image: Optional[ContainerImage] = Field(default=None, alias="containerImage")
    data_disks: Optional[List[DataDisk]] = Field(default=None, description="Optional. Data disks attached to the VM instance. Currently supports only one data disk.", alias="dataDisks")
    disable_public_ip: Optional[StrictBool] = Field(default=None, description="Optional. If true, no external IP will be assigned to this VM instance.", alias="disablePublicIp")
    enable_ip_forwarding: Optional[StrictBool] = Field(default=None, description="Optional. Flag to enable ip forwarding or not, default false/off. https://cloud.google.com/vpc/docs/using-routes#canipforward", alias="enableIpForwarding")
    gpu_driver_config: Optional[GPUDriverConfig] = Field(default=None, alias="gpuDriverConfig")
    machine_type: Optional[StrictStr] = Field(default=None, description="Optional. The machine type of the VM instance. https://cloud.google.com/compute/docs/machine-resource", alias="machineType")
    metadata: Optional[Dict[str, StrictStr]] = Field(default=None, description="Optional. Custom metadata to apply to this instance.")
    network_interfaces: Optional[List[NetworkInterface]] = Field(default=None, description="Optional. The network interfaces for the VM. Supports only one interface.", alias="networkInterfaces")
    service_accounts: Optional[List[ServiceAccount]] = Field(default=None, description="Optional. The service account that serves as an identity for the VM instance. Currently supports only one service account.", alias="serviceAccounts")
    shielded_instance_config: Optional[ShieldedInstanceConfig] = Field(default=None, alias="shieldedInstanceConfig")
    tags: Optional[List[StrictStr]] = Field(default=None, description="Optional. The Compute Engine tags to add to runtime (see [Tagging instances](https://cloud.google.com/compute/docs/label-or-tag-resources#tags)).")
    vm_image: Optional[VmImage] = Field(default=None, alias="vmImage")
    __properties: ClassVar[List[str]] = ["acceleratorConfigs", "bootDisk", "containerImage", "dataDisks", "disablePublicIp", "enableIpForwarding", "gpuDriverConfig", "machineType", "metadata", "networkInterfaces", "serviceAccounts", "shieldedInstanceConfig", "tags", "vmImage"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GceSetup from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in accelerator_configs (list)
        _items = []
        if self.accelerator_configs:
            for _item_accelerator_configs in self.accelerator_configs:
                if _item_accelerator_configs:
                    _items.append(_item_accelerator_configs.to_dict())
            _dict['acceleratorConfigs'] = _items
        # override the default output from pydantic by calling `to_dict()` of boot_disk
        if self.boot_disk:
            _dict['bootDisk'] = self.boot_disk.to_dict()
        # override the default output from pydantic by calling `to_dict()` of container_image
        if self.container_image:
            _dict['containerImage'] = self.container_image.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in data_disks (list)
        _items = []
        if self.data_disks:
            for _item_data_disks in self.data_disks:
                if _item_data_disks:
                    _items.append(_item_data_disks.to_dict())
            _dict['dataDisks'] = _items
        # override the default output from pydantic by calling `to_dict()` of gpu_driver_config
        if self.gpu_driver_config:
            _dict['gpuDriverConfig'] = self.gpu_driver_config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in network_interfaces (list)
        _items = []
        if self.network_interfaces:
            for _item_network_interfaces in self.network_interfaces:
                if _item_network_interfaces:
                    _items.append(_item_network_interfaces.to_dict())
            _dict['networkInterfaces'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in service_accounts (list)
        _items = []
        if self.service_accounts:
            for _item_service_accounts in self.service_accounts:
                if _item_service_accounts:
                    _items.append(_item_service_accounts.to_dict())
            _dict['serviceAccounts'] = _items
        # override the default output from pydantic by calling `to_dict()` of shielded_instance_config
        if self.shielded_instance_config:
            _dict['shieldedInstanceConfig'] = self.shielded_instance_config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of vm_image
        if self.vm_image:
            _dict['vmImage'] = self.vm_image.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GceSetup from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "acceleratorConfigs": [AcceleratorConfig.from_dict(_item) for _item in obj["acceleratorConfigs"]] if obj.get("acceleratorConfigs") is not None else None,
            "bootDisk": BootDisk.from_dict(obj["bootDisk"]) if obj.get("bootDisk") is not None else None,
            "containerImage": ContainerImage.from_dict(obj["containerImage"]) if obj.get("containerImage") is not None else None,
            "dataDisks": [DataDisk.from_dict(_item) for _item in obj["dataDisks"]] if obj.get("dataDisks") is not None else None,
            "disablePublicIp": obj.get("disablePublicIp"),
            "enableIpForwarding": obj.get("enableIpForwarding"),
            "gpuDriverConfig": GPUDriverConfig.from_dict(obj["gpuDriverConfig"]) if obj.get("gpuDriverConfig") is not None else None,
            "machineType": obj.get("machineType"),
            "metadata": obj.get("metadata"),
            "networkInterfaces": [NetworkInterface.from_dict(_item) for _item in obj["networkInterfaces"]] if obj.get("networkInterfaces") is not None else None,
            "serviceAccounts": [ServiceAccount.from_dict(_item) for _item in obj["serviceAccounts"]] if obj.get("serviceAccounts") is not None else None,
            "shieldedInstanceConfig": ShieldedInstanceConfig.from_dict(obj["shieldedInstanceConfig"]) if obj.get("shieldedInstanceConfig") is not None else None,
            "tags": obj.get("tags"),
            "vmImage": VmImage.from_dict(obj["vmImage"]) if obj.get("vmImage") is not None else None
        })
        return _obj



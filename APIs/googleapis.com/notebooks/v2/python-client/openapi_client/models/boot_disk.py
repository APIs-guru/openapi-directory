# coding: utf-8

"""
    Notebooks API

    Notebooks API is used to manage notebook resources in Google Cloud.

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class BootDisk(BaseModel):
    """
    The definition of a boot disk.
    """ # noqa: E501
    disk_encryption: Optional[StrictStr] = Field(default=None, description="Optional. Input only. Disk encryption method used on the boot and data disks, defaults to GMEK.", alias="diskEncryption")
    disk_size_gb: Optional[StrictStr] = Field(default=None, description="Optional. The size of the boot disk in GB attached to this instance, up to a maximum of 64000 GB (64 TB). If not specified, this defaults to the recommended value of 150GB.", alias="diskSizeGb")
    disk_type: Optional[StrictStr] = Field(default=None, description="Optional. Indicates the type of the disk.", alias="diskType")
    kms_key: Optional[StrictStr] = Field(default=None, description="Optional. Input only. The KMS key used to encrypt the disks, only applicable if disk_encryption is CMEK. Format: `projects/{project_id}/locations/{location}/keyRings/{key_ring_id}/cryptoKeys/{key_id}` Learn more about using your own encryption keys.", alias="kmsKey")
    __properties: ClassVar[List[str]] = ["diskEncryption", "diskSizeGb", "diskType", "kmsKey"]

    @field_validator('disk_encryption')
    def disk_encryption_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['DISK_ENCRYPTION_UNSPECIFIED', 'GMEK', 'CMEK']):
            raise ValueError("must be one of enum values ('DISK_ENCRYPTION_UNSPECIFIED', 'GMEK', 'CMEK')")
        return value

    @field_validator('disk_type')
    def disk_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['DISK_TYPE_UNSPECIFIED', 'PD_STANDARD', 'PD_SSD', 'PD_BALANCED', 'PD_EXTREME']):
            raise ValueError("must be one of enum values ('DISK_TYPE_UNSPECIFIED', 'PD_STANDARD', 'PD_SSD', 'PD_BALANCED', 'PD_EXTREME')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of BootDisk from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of BootDisk from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "diskEncryption": obj.get("diskEncryption"),
            "diskSizeGb": obj.get("diskSizeGb"),
            "diskType": obj.get("diskType"),
            "kmsKey": obj.get("kmsKey")
        })
        return _obj



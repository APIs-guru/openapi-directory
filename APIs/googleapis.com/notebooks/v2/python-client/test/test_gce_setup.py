# coding: utf-8

"""
    Notebooks API

    Notebooks API is used to manage notebook resources in Google Cloud.

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.gce_setup import GceSetup

class TestGceSetup(unittest.TestCase):
    """GceSetup unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> GceSetup:
        """Test GceSetup
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `GceSetup`
        """
        model = GceSetup()
        if include_optional:
            return GceSetup(
                accelerator_configs = [
                    openapi_client.models.accelerator_config.AcceleratorConfig(
                        core_count = '', 
                        type = 'ACCELERATOR_TYPE_UNSPECIFIED', )
                    ],
                boot_disk = openapi_client.models.boot_disk.BootDisk(
                    disk_encryption = 'DISK_ENCRYPTION_UNSPECIFIED', 
                    disk_size_gb = '', 
                    disk_type = 'DISK_TYPE_UNSPECIFIED', 
                    kms_key = '', ),
                container_image = openapi_client.models.container_image.ContainerImage(
                    repository = '', 
                    tag = '', ),
                data_disks = [
                    openapi_client.models.data_disk.DataDisk(
                        disk_encryption = 'DISK_ENCRYPTION_UNSPECIFIED', 
                        disk_size_gb = '', 
                        disk_type = 'DISK_TYPE_UNSPECIFIED', 
                        kms_key = '', )
                    ],
                disable_public_ip = True,
                enable_ip_forwarding = True,
                gpu_driver_config = openapi_client.models.gpu_driver_config.GPUDriverConfig(
                    custom_gpu_driver_path = '', 
                    enable_gpu_driver = True, ),
                machine_type = '',
                metadata = {
                    'key' : ''
                    },
                network_interfaces = [
                    openapi_client.models.network_interface.NetworkInterface(
                        network = '', 
                        nic_type = 'NIC_TYPE_UNSPECIFIED', 
                        subnet = '', )
                    ],
                service_accounts = [
                    openapi_client.models.service_account.ServiceAccount(
                        email = '', 
                        scopes = [
                            ''
                            ], )
                    ],
                shielded_instance_config = openapi_client.models.shielded_instance_config.ShieldedInstanceConfig(
                    enable_integrity_monitoring = True, 
                    enable_secure_boot = True, 
                    enable_vtpm = True, ),
                tags = [
                    ''
                    ],
                vm_image = openapi_client.models.vm_image.VmImage(
                    family = '', 
                    name = '', 
                    project = '', )
            )
        else:
            return GceSetup(
        )
        """

    def testGceSetup(self):
        """Test GceSetup"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

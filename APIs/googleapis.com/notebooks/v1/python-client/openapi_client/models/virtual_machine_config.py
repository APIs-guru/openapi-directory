# coding: utf-8

"""
    Notebooks API

    Notebooks API is used to manage notebook resources in Google Cloud.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.container_image import ContainerImage
from openapi_client.models.encryption_config import EncryptionConfig
from openapi_client.models.local_disk import LocalDisk
from openapi_client.models.runtime_accelerator_config import RuntimeAcceleratorConfig
from openapi_client.models.runtime_shielded_instance_config import RuntimeShieldedInstanceConfig
from typing import Optional, Set
from typing_extensions import Self

class VirtualMachineConfig(BaseModel):
    """
    The config settings for virtual machine.
    """ # noqa: E501
    accelerator_config: Optional[RuntimeAcceleratorConfig] = Field(default=None, alias="acceleratorConfig")
    boot_image: Optional[Dict[str, Any]] = Field(default=None, description="Definition of the boot image used by the Runtime. Used to facilitate runtime upgradeability.", alias="bootImage")
    container_images: Optional[List[ContainerImage]] = Field(default=None, description="Optional. Use a list of container images to use as Kernels in the notebook instance.", alias="containerImages")
    data_disk: Optional[LocalDisk] = Field(default=None, alias="dataDisk")
    encryption_config: Optional[EncryptionConfig] = Field(default=None, alias="encryptionConfig")
    guest_attributes: Optional[Dict[str, StrictStr]] = Field(default=None, description="Output only. The Compute Engine guest attributes. (see [Project and instance guest attributes](https://cloud.google.com/compute/docs/storing-retrieving-metadata#guest_attributes)).", alias="guestAttributes")
    internal_ip_only: Optional[StrictBool] = Field(default=None, description="Optional. If true, runtime will only have internal IP addresses. By default, runtimes are not restricted to internal IP addresses, and will have ephemeral external IP addresses assigned to each vm. This `internal_ip_only` restriction can only be enabled for subnetwork enabled networks, and all dependencies must be configured to be accessible without external IP addresses.", alias="internalIpOnly")
    labels: Optional[Dict[str, StrictStr]] = Field(default=None, description="Optional. The labels to associate with this runtime. Label **keys** must contain 1 to 63 characters, and must conform to [RFC 1035](https://www.ietf.org/rfc/rfc1035.txt). Label **values** may be empty, but, if present, must contain 1 to 63 characters, and must conform to [RFC 1035](https://www.ietf.org/rfc/rfc1035.txt). No more than 32 labels can be associated with a cluster.")
    machine_type: Optional[StrictStr] = Field(default=None, description="Required. The Compute Engine machine type used for runtimes. Short name is valid. Examples: * `n1-standard-2` * `e2-standard-8`", alias="machineType")
    metadata: Optional[Dict[str, StrictStr]] = Field(default=None, description="Optional. The Compute Engine metadata entries to add to virtual machine. (see [Project and instance metadata](https://cloud.google.com/compute/docs/storing-retrieving-metadata#project_and_instance_metadata)).")
    network: Optional[StrictStr] = Field(default=None, description="Optional. The Compute Engine network to be used for machine communications. Cannot be specified with subnetwork. If neither `network` nor `subnet` is specified, the \"default\" network of the project is used, if it exists. A full URL or partial URI. Examples: * `https://www.googleapis.com/compute/v1/projects/[project_id]/global/networks/default` * `projects/[project_id]/global/networks/default` Runtimes are managed resources inside Google Infrastructure. Runtimes support the following network configurations: * Google Managed Network (Network & subnet are empty) * Consumer Project VPC (network & subnet are required). Requires configuring Private Service Access. * Shared VPC (network & subnet are required). Requires configuring Private Service Access.")
    nic_type: Optional[StrictStr] = Field(default=None, description="Optional. The type of vNIC to be used on this interface. This may be gVNIC or VirtioNet.", alias="nicType")
    reserved_ip_range: Optional[StrictStr] = Field(default=None, description="Optional. Reserved IP Range name is used for VPC Peering. The subnetwork allocation will use the range *name* if it's assigned. Example: managed-notebooks-range-c PEERING_RANGE_NAME_3=managed-notebooks-range-c gcloud compute addresses create $PEERING_RANGE_NAME_3 \\ --global \\ --prefix-length=24 \\ --description=\"Google Cloud Managed Notebooks Range 24 c\" \\ --network=$NETWORK \\ --addresses=192.168.0.0 \\ --purpose=VPC_PEERING Field value will be: `managed-notebooks-range-c`", alias="reservedIpRange")
    shielded_instance_config: Optional[RuntimeShieldedInstanceConfig] = Field(default=None, alias="shieldedInstanceConfig")
    subnet: Optional[StrictStr] = Field(default=None, description="Optional. The Compute Engine subnetwork to be used for machine communications. Cannot be specified with network. A full URL or partial URI are valid. Examples: * `https://www.googleapis.com/compute/v1/projects/[project_id]/regions/us-east1/subnetworks/sub0` * `projects/[project_id]/regions/us-east1/subnetworks/sub0`")
    tags: Optional[List[StrictStr]] = Field(default=None, description="Optional. The Compute Engine tags to add to runtime (see [Tagging instances](https://cloud.google.com/compute/docs/label-or-tag-resources#tags)).")
    zone: Optional[StrictStr] = Field(default=None, description="Output only. The zone where the virtual machine is located. If using regional request, the notebooks service will pick a location in the corresponding runtime region. On a get request, zone will always be present. Example: * `us-central1-b`")
    __properties: ClassVar[List[str]] = ["acceleratorConfig", "bootImage", "containerImages", "dataDisk", "encryptionConfig", "guestAttributes", "internalIpOnly", "labels", "machineType", "metadata", "network", "nicType", "reservedIpRange", "shieldedInstanceConfig", "subnet", "tags", "zone"]

    @field_validator('nic_type')
    def nic_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['UNSPECIFIED_NIC_TYPE', 'VIRTIO_NET', 'GVNIC']):
            raise ValueError("must be one of enum values ('UNSPECIFIED_NIC_TYPE', 'VIRTIO_NET', 'GVNIC')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of VirtualMachineConfig from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "guest_attributes",
            "zone",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of accelerator_config
        if self.accelerator_config:
            _dict['acceleratorConfig'] = self.accelerator_config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in container_images (list)
        _items = []
        if self.container_images:
            for _item_container_images in self.container_images:
                if _item_container_images:
                    _items.append(_item_container_images.to_dict())
            _dict['containerImages'] = _items
        # override the default output from pydantic by calling `to_dict()` of data_disk
        if self.data_disk:
            _dict['dataDisk'] = self.data_disk.to_dict()
        # override the default output from pydantic by calling `to_dict()` of encryption_config
        if self.encryption_config:
            _dict['encryptionConfig'] = self.encryption_config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of shielded_instance_config
        if self.shielded_instance_config:
            _dict['shieldedInstanceConfig'] = self.shielded_instance_config.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of VirtualMachineConfig from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "acceleratorConfig": RuntimeAcceleratorConfig.from_dict(obj["acceleratorConfig"]) if obj.get("acceleratorConfig") is not None else None,
            "bootImage": obj.get("bootImage"),
            "containerImages": [ContainerImage.from_dict(_item) for _item in obj["containerImages"]] if obj.get("containerImages") is not None else None,
            "dataDisk": LocalDisk.from_dict(obj["dataDisk"]) if obj.get("dataDisk") is not None else None,
            "encryptionConfig": EncryptionConfig.from_dict(obj["encryptionConfig"]) if obj.get("encryptionConfig") is not None else None,
            "guestAttributes": obj.get("guestAttributes"),
            "internalIpOnly": obj.get("internalIpOnly"),
            "labels": obj.get("labels"),
            "machineType": obj.get("machineType"),
            "metadata": obj.get("metadata"),
            "network": obj.get("network"),
            "nicType": obj.get("nicType"),
            "reservedIpRange": obj.get("reservedIpRange"),
            "shieldedInstanceConfig": RuntimeShieldedInstanceConfig.from_dict(obj["shieldedInstanceConfig"]) if obj.get("shieldedInstanceConfig") is not None else None,
            "subnet": obj.get("subnet"),
            "tags": obj.get("tags"),
            "zone": obj.get("zone")
        })
        return _obj



# coding: utf-8

"""
    Notebooks API

    Notebooks API is used to manage notebook resources in Google Cloud.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.container_image import ContainerImage
from typing import Optional, Set
from typing_extensions import Self

class RuntimeSoftwareConfig(BaseModel):
    """
    Specifies the selection and configuration of software inside the runtime. The properties to set on runtime. Properties keys are specified in `key:value` format, for example: * `idle_shutdown: true` * `idle_shutdown_timeout: 180` * `enable_health_monitoring: true`
    """ # noqa: E501
    custom_gpu_driver_path: Optional[StrictStr] = Field(default=None, description="Specify a custom Cloud Storage path where the GPU driver is stored. If not specified, we'll automatically choose from official GPU drivers.", alias="customGpuDriverPath")
    disable_terminal: Optional[StrictBool] = Field(default=None, description="Bool indicating whether JupyterLab terminal will be available or not. Default: False", alias="disableTerminal")
    enable_health_monitoring: Optional[StrictBool] = Field(default=None, description="Verifies core internal services are running. Default: True", alias="enableHealthMonitoring")
    idle_shutdown: Optional[StrictBool] = Field(default=None, description="Runtime will automatically shutdown after idle_shutdown_time. Default: True", alias="idleShutdown")
    idle_shutdown_timeout: Optional[StrictInt] = Field(default=None, description="Time in minutes to wait before shutting down runtime. Default: 180 minutes", alias="idleShutdownTimeout")
    install_gpu_driver: Optional[StrictBool] = Field(default=None, description="Install Nvidia Driver automatically. Default: True", alias="installGpuDriver")
    kernels: Optional[List[ContainerImage]] = Field(default=None, description="Optional. Use a list of container images to use as Kernels in the notebook instance.")
    mixer_disabled: Optional[StrictBool] = Field(default=None, description="Bool indicating whether mixer client should be disabled. Default: False", alias="mixerDisabled")
    notebook_upgrade_schedule: Optional[StrictStr] = Field(default=None, description="Cron expression in UTC timezone, used to schedule instance auto upgrade. Please follow the [cron format](https://en.wikipedia.org/wiki/Cron).", alias="notebookUpgradeSchedule")
    post_startup_script: Optional[StrictStr] = Field(default=None, description="Path to a Bash script that automatically runs after a notebook instance fully boots up. The path must be a URL or Cloud Storage path (`gs://path-to-file/file-name`).", alias="postStartupScript")
    post_startup_script_behavior: Optional[StrictStr] = Field(default=None, description="Behavior for the post startup script.", alias="postStartupScriptBehavior")
    upgradeable: Optional[StrictBool] = Field(default=None, description="Output only. Bool indicating whether an newer image is available in an image family.")
    version: Optional[StrictStr] = Field(default=None, description="Output only. version of boot image such as M100, from release label of the image.")
    __properties: ClassVar[List[str]] = ["customGpuDriverPath", "disableTerminal", "enableHealthMonitoring", "idleShutdown", "idleShutdownTimeout", "installGpuDriver", "kernels", "mixerDisabled", "notebookUpgradeSchedule", "postStartupScript", "postStartupScriptBehavior", "upgradeable", "version"]

    @field_validator('post_startup_script_behavior')
    def post_startup_script_behavior_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['POST_STARTUP_SCRIPT_BEHAVIOR_UNSPECIFIED', 'RUN_EVERY_START', 'DOWNLOAD_AND_RUN_EVERY_START']):
            raise ValueError("must be one of enum values ('POST_STARTUP_SCRIPT_BEHAVIOR_UNSPECIFIED', 'RUN_EVERY_START', 'DOWNLOAD_AND_RUN_EVERY_START')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of RuntimeSoftwareConfig from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "upgradeable",
            "version",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in kernels (list)
        _items = []
        if self.kernels:
            for _item_kernels in self.kernels:
                if _item_kernels:
                    _items.append(_item_kernels.to_dict())
            _dict['kernels'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of RuntimeSoftwareConfig from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "customGpuDriverPath": obj.get("customGpuDriverPath"),
            "disableTerminal": obj.get("disableTerminal"),
            "enableHealthMonitoring": obj.get("enableHealthMonitoring"),
            "idleShutdown": obj.get("idleShutdown"),
            "idleShutdownTimeout": obj.get("idleShutdownTimeout"),
            "installGpuDriver": obj.get("installGpuDriver"),
            "kernels": [ContainerImage.from_dict(_item) for _item in obj["kernels"]] if obj.get("kernels") is not None else None,
            "mixerDisabled": obj.get("mixerDisabled"),
            "notebookUpgradeSchedule": obj.get("notebookUpgradeSchedule"),
            "postStartupScript": obj.get("postStartupScript"),
            "postStartupScriptBehavior": obj.get("postStartupScriptBehavior"),
            "upgradeable": obj.get("upgradeable"),
            "version": obj.get("version")
        })
        return _obj



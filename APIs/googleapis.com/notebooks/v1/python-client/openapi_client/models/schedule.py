# coding: utf-8

"""
    Notebooks API

    Notebooks API is used to manage notebook resources in Google Cloud.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.execution import Execution
from openapi_client.models.execution_template import ExecutionTemplate
from typing import Optional, Set
from typing_extensions import Self

class Schedule(BaseModel):
    """
    The definition of a schedule.
    """ # noqa: E501
    create_time: Optional[StrictStr] = Field(default=None, description="Output only. Time the schedule was created.", alias="createTime")
    cron_schedule: Optional[StrictStr] = Field(default=None, description="Cron-tab formatted schedule by which the job will execute. Format: minute, hour, day of month, month, day of week, e.g. `0 0 * * WED` = every Wednesday More examples: https://crontab.guru/examples.html", alias="cronSchedule")
    description: Optional[StrictStr] = Field(default=None, description="A brief description of this environment.")
    display_name: Optional[StrictStr] = Field(default=None, description="Output only. Display name used for UI purposes. Name can only contain alphanumeric characters, hyphens `-`, and underscores `_`.", alias="displayName")
    execution_template: Optional[ExecutionTemplate] = Field(default=None, alias="executionTemplate")
    name: Optional[StrictStr] = Field(default=None, description="Output only. The name of this schedule. Format: `projects/{project_id}/locations/{location}/schedules/{schedule_id}`")
    recent_executions: Optional[List[Execution]] = Field(default=None, description="Output only. The most recent execution names triggered from this schedule and their corresponding states.", alias="recentExecutions")
    state: Optional[StrictStr] = None
    time_zone: Optional[StrictStr] = Field(default=None, description="Timezone on which the cron_schedule. The value of this field must be a time zone name from the tz database. TZ Database: https://en.wikipedia.org/wiki/List_of_tz_database_time_zones Note that some time zones include a provision for daylight savings time. The rules for daylight saving time are determined by the chosen tz. For UTC use the string \"utc\". If a time zone is not specified, the default will be in UTC (also known as GMT).", alias="timeZone")
    update_time: Optional[StrictStr] = Field(default=None, description="Output only. Time the schedule was last updated.", alias="updateTime")
    __properties: ClassVar[List[str]] = ["createTime", "cronSchedule", "description", "displayName", "executionTemplate", "name", "recentExecutions", "state", "timeZone", "updateTime"]

    @field_validator('state')
    def state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['STATE_UNSPECIFIED', 'ENABLED', 'PAUSED', 'DISABLED', 'UPDATE_FAILED', 'INITIALIZING', 'DELETING']):
            raise ValueError("must be one of enum values ('STATE_UNSPECIFIED', 'ENABLED', 'PAUSED', 'DISABLED', 'UPDATE_FAILED', 'INITIALIZING', 'DELETING')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Schedule from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "create_time",
            "display_name",
            "name",
            "recent_executions",
            "update_time",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of execution_template
        if self.execution_template:
            _dict['executionTemplate'] = self.execution_template.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in recent_executions (list)
        _items = []
        if self.recent_executions:
            for _item_recent_executions in self.recent_executions:
                if _item_recent_executions:
                    _items.append(_item_recent_executions.to_dict())
            _dict['recentExecutions'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Schedule from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "createTime": obj.get("createTime"),
            "cronSchedule": obj.get("cronSchedule"),
            "description": obj.get("description"),
            "displayName": obj.get("displayName"),
            "executionTemplate": ExecutionTemplate.from_dict(obj["executionTemplate"]) if obj.get("executionTemplate") is not None else None,
            "name": obj.get("name"),
            "recentExecutions": [Execution.from_dict(_item) for _item in obj["recentExecutions"]] if obj.get("recentExecutions") is not None else None,
            "state": obj.get("state"),
            "timeZone": obj.get("timeZone"),
            "updateTime": obj.get("updateTime")
        })
        return _obj



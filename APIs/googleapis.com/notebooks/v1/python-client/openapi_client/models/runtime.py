# coding: utf-8

"""
    Notebooks API

    Notebooks API is used to manage notebook resources in Google Cloud.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.runtime_access_config import RuntimeAccessConfig
from openapi_client.models.runtime_metrics import RuntimeMetrics
from openapi_client.models.runtime_migration_eligibility import RuntimeMigrationEligibility
from openapi_client.models.runtime_software_config import RuntimeSoftwareConfig
from openapi_client.models.virtual_machine import VirtualMachine
from typing import Optional, Set
from typing_extensions import Self

class Runtime(BaseModel):
    """
    The definition of a Runtime for a managed notebook instance.
    """ # noqa: E501
    access_config: Optional[RuntimeAccessConfig] = Field(default=None, alias="accessConfig")
    create_time: Optional[StrictStr] = Field(default=None, description="Output only. Runtime creation time.", alias="createTime")
    health_state: Optional[StrictStr] = Field(default=None, description="Output only. Runtime health_state.", alias="healthState")
    labels: Optional[Dict[str, StrictStr]] = Field(default=None, description="Optional. The labels to associate with this Managed Notebook or Runtime. Label **keys** must contain 1 to 63 characters, and must conform to [RFC 1035](https://www.ietf.org/rfc/rfc1035.txt). Label **values** may be empty, but, if present, must contain 1 to 63 characters, and must conform to [RFC 1035](https://www.ietf.org/rfc/rfc1035.txt). No more than 32 labels can be associated with a cluster.")
    metrics: Optional[RuntimeMetrics] = None
    migrated: Optional[StrictBool] = Field(default=None, description="Output only. Bool indicating whether this notebook has been migrated to a Workbench Instance")
    name: Optional[StrictStr] = Field(default=None, description="Output only. The resource name of the runtime. Format: `projects/{project}/locations/{location}/runtimes/{runtimeId}`")
    runtime_migration_eligibility: Optional[RuntimeMigrationEligibility] = Field(default=None, alias="runtimeMigrationEligibility")
    software_config: Optional[RuntimeSoftwareConfig] = Field(default=None, alias="softwareConfig")
    state: Optional[StrictStr] = Field(default=None, description="Output only. Runtime state.")
    update_time: Optional[StrictStr] = Field(default=None, description="Output only. Runtime update time.", alias="updateTime")
    virtual_machine: Optional[VirtualMachine] = Field(default=None, alias="virtualMachine")
    __properties: ClassVar[List[str]] = ["accessConfig", "createTime", "healthState", "labels", "metrics", "migrated", "name", "runtimeMigrationEligibility", "softwareConfig", "state", "updateTime", "virtualMachine"]

    @field_validator('health_state')
    def health_state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['HEALTH_STATE_UNSPECIFIED', 'HEALTHY', 'UNHEALTHY', 'AGENT_NOT_INSTALLED', 'AGENT_NOT_RUNNING']):
            raise ValueError("must be one of enum values ('HEALTH_STATE_UNSPECIFIED', 'HEALTHY', 'UNHEALTHY', 'AGENT_NOT_INSTALLED', 'AGENT_NOT_RUNNING')")
        return value

    @field_validator('state')
    def state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['STATE_UNSPECIFIED', 'STARTING', 'PROVISIONING', 'ACTIVE', 'STOPPING', 'STOPPED', 'DELETING', 'UPGRADING', 'INITIALIZING']):
            raise ValueError("must be one of enum values ('STATE_UNSPECIFIED', 'STARTING', 'PROVISIONING', 'ACTIVE', 'STOPPING', 'STOPPED', 'DELETING', 'UPGRADING', 'INITIALIZING')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Runtime from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "create_time",
            "health_state",
            "migrated",
            "name",
            "state",
            "update_time",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of access_config
        if self.access_config:
            _dict['accessConfig'] = self.access_config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of metrics
        if self.metrics:
            _dict['metrics'] = self.metrics.to_dict()
        # override the default output from pydantic by calling `to_dict()` of runtime_migration_eligibility
        if self.runtime_migration_eligibility:
            _dict['runtimeMigrationEligibility'] = self.runtime_migration_eligibility.to_dict()
        # override the default output from pydantic by calling `to_dict()` of software_config
        if self.software_config:
            _dict['softwareConfig'] = self.software_config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of virtual_machine
        if self.virtual_machine:
            _dict['virtualMachine'] = self.virtual_machine.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Runtime from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "accessConfig": RuntimeAccessConfig.from_dict(obj["accessConfig"]) if obj.get("accessConfig") is not None else None,
            "createTime": obj.get("createTime"),
            "healthState": obj.get("healthState"),
            "labels": obj.get("labels"),
            "metrics": RuntimeMetrics.from_dict(obj["metrics"]) if obj.get("metrics") is not None else None,
            "migrated": obj.get("migrated"),
            "name": obj.get("name"),
            "runtimeMigrationEligibility": RuntimeMigrationEligibility.from_dict(obj["runtimeMigrationEligibility"]) if obj.get("runtimeMigrationEligibility") is not None else None,
            "softwareConfig": RuntimeSoftwareConfig.from_dict(obj["softwareConfig"]) if obj.get("softwareConfig") is not None else None,
            "state": obj.get("state"),
            "updateTime": obj.get("updateTime"),
            "virtualMachine": VirtualMachine.from_dict(obj["virtualMachine"]) if obj.get("virtualMachine") is not None else None
        })
        return _obj



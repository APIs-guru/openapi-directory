# coding: utf-8

"""
    Notebooks API

    Notebooks API is used to manage notebook resources in Google Cloud.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.accelerator_config import AcceleratorConfig
from openapi_client.models.container_image import ContainerImage
from openapi_client.models.disk import Disk
from openapi_client.models.instance_migration_eligibility import InstanceMigrationEligibility
from openapi_client.models.reservation_affinity import ReservationAffinity
from openapi_client.models.shielded_instance_config import ShieldedInstanceConfig
from openapi_client.models.upgrade_history_entry import UpgradeHistoryEntry
from openapi_client.models.vm_image import VmImage
from typing import Optional, Set
from typing_extensions import Self

class Instance(BaseModel):
    """
    The definition of a notebook instance.
    """ # noqa: E501
    accelerator_config: Optional[AcceleratorConfig] = Field(default=None, alias="acceleratorConfig")
    boot_disk_size_gb: Optional[StrictStr] = Field(default=None, description="Input only. The size of the boot disk in GB attached to this instance, up to a maximum of 64000 GB (64 TB). The minimum recommended value is 100 GB. If not specified, this defaults to 100.", alias="bootDiskSizeGb")
    boot_disk_type: Optional[StrictStr] = Field(default=None, description="Input only. The type of the boot disk attached to this instance, defaults to standard persistent disk (`PD_STANDARD`).", alias="bootDiskType")
    can_ip_forward: Optional[StrictBool] = Field(default=None, description="Optional. Flag to enable ip forwarding or not, default false/off. https://cloud.google.com/vpc/docs/using-routes#canipforward", alias="canIpForward")
    container_image: Optional[ContainerImage] = Field(default=None, alias="containerImage")
    create_time: Optional[StrictStr] = Field(default=None, description="Output only. Instance creation time.", alias="createTime")
    creator: Optional[StrictStr] = Field(default=None, description="Output only. Email address of entity that sent original CreateInstance request.")
    custom_gpu_driver_path: Optional[StrictStr] = Field(default=None, description="Specify a custom Cloud Storage path where the GPU driver is stored. If not specified, we'll automatically choose from official GPU drivers.", alias="customGpuDriverPath")
    data_disk_size_gb: Optional[StrictStr] = Field(default=None, description="Input only. The size of the data disk in GB attached to this instance, up to a maximum of 64000 GB (64 TB). You can choose the size of the data disk based on how big your notebooks and data are. If not specified, this defaults to 100.", alias="dataDiskSizeGb")
    data_disk_type: Optional[StrictStr] = Field(default=None, description="Input only. The type of the data disk attached to this instance, defaults to standard persistent disk (`PD_STANDARD`).", alias="dataDiskType")
    disk_encryption: Optional[StrictStr] = Field(default=None, description="Input only. Disk encryption method used on the boot and data disks, defaults to GMEK.", alias="diskEncryption")
    disks: Optional[List[Disk]] = Field(default=None, description="Output only. Attached disks to notebook instance.")
    install_gpu_driver: Optional[StrictBool] = Field(default=None, description="Whether the end user authorizes Google Cloud to install GPU driver on this instance. If this field is empty or set to false, the GPU driver won't be installed. Only applicable to instances with GPUs.", alias="installGpuDriver")
    instance_migration_eligibility: Optional[InstanceMigrationEligibility] = Field(default=None, alias="instanceMigrationEligibility")
    instance_owners: Optional[List[StrictStr]] = Field(default=None, description="Input only. The owner of this instance after creation. Format: `alias@example.com` Currently supports one owner only. If not specified, all of the service account users of your VM instance's service account can use the instance.", alias="instanceOwners")
    kms_key: Optional[StrictStr] = Field(default=None, description="Input only. The KMS key used to encrypt the disks, only applicable if disk_encryption is CMEK. Format: `projects/{project_id}/locations/{location}/keyRings/{key_ring_id}/cryptoKeys/{key_id}` Learn more about [using your own encryption keys](/kms/docs/quickstart).", alias="kmsKey")
    labels: Optional[Dict[str, StrictStr]] = Field(default=None, description="Labels to apply to this instance. These can be later modified by the setLabels method.")
    machine_type: Optional[StrictStr] = Field(default=None, description="Required. The [Compute Engine machine type](https://cloud.google.com/compute/docs/machine-types) of this instance.", alias="machineType")
    metadata: Optional[Dict[str, StrictStr]] = Field(default=None, description="Custom metadata to apply to this instance. For example, to specify a Cloud Storage bucket for automatic backup, you can use the `gcs-data-bucket` metadata tag. Format: `\"--metadata=gcs-data-bucket=``BUCKET''\"`.")
    migrated: Optional[StrictBool] = Field(default=None, description="Output only. Bool indicating whether this notebook has been migrated to a Workbench Instance")
    name: Optional[StrictStr] = Field(default=None, description="Output only. The name of this notebook instance. Format: `projects/{project_id}/locations/{location}/instances/{instance_id}`")
    network: Optional[StrictStr] = Field(default=None, description="The name of the VPC that this instance is in. Format: `projects/{project_id}/global/networks/{network_id}`")
    nic_type: Optional[StrictStr] = Field(default=None, description="Optional. The type of vNIC to be used on this interface. This may be gVNIC or VirtioNet.", alias="nicType")
    no_proxy_access: Optional[StrictBool] = Field(default=None, description="If true, the notebook instance will not register with the proxy.", alias="noProxyAccess")
    no_public_ip: Optional[StrictBool] = Field(default=None, description="If true, no external IP will be assigned to this instance.", alias="noPublicIp")
    no_remove_data_disk: Optional[StrictBool] = Field(default=None, description="Input only. If true, the data disk will not be auto deleted when deleting the instance.", alias="noRemoveDataDisk")
    post_startup_script: Optional[StrictStr] = Field(default=None, description="Path to a Bash script that automatically runs after a notebook instance fully boots up. The path must be a URL or Cloud Storage path (`gs://path-to-file/file-name`).", alias="postStartupScript")
    proxy_uri: Optional[StrictStr] = Field(default=None, description="Output only. The proxy endpoint that is used to access the Jupyter notebook.", alias="proxyUri")
    reservation_affinity: Optional[ReservationAffinity] = Field(default=None, alias="reservationAffinity")
    service_account: Optional[StrictStr] = Field(default=None, description="The service account on this instance, giving access to other Google Cloud services. You can use any service account within the same project, but you must have the service account user permission to use the instance. If not specified, the [Compute Engine default service account](https://cloud.google.com/compute/docs/access/service-accounts#default_service_account) is used.", alias="serviceAccount")
    service_account_scopes: Optional[List[StrictStr]] = Field(default=None, description="Optional. The URIs of service account scopes to be included in Compute Engine instances. If not specified, the following [scopes](https://cloud.google.com/compute/docs/access/service-accounts#accesscopesiam) are defined: - https://www.googleapis.com/auth/cloud-platform - https://www.googleapis.com/auth/userinfo.email If not using default scopes, you need at least: https://www.googleapis.com/auth/compute", alias="serviceAccountScopes")
    shielded_instance_config: Optional[ShieldedInstanceConfig] = Field(default=None, alias="shieldedInstanceConfig")
    state: Optional[StrictStr] = Field(default=None, description="Output only. The state of this instance.")
    subnet: Optional[StrictStr] = Field(default=None, description="The name of the subnet that this instance is in. Format: `projects/{project_id}/regions/{region}/subnetworks/{subnetwork_id}`")
    tags: Optional[List[StrictStr]] = Field(default=None, description="Optional. The Compute Engine tags to add to runtime (see [Tagging instances](https://cloud.google.com/compute/docs/label-or-tag-resources#tags)).")
    update_time: Optional[StrictStr] = Field(default=None, description="Output only. Instance update time.", alias="updateTime")
    upgrade_history: Optional[List[UpgradeHistoryEntry]] = Field(default=None, description="The upgrade history of this instance.", alias="upgradeHistory")
    vm_image: Optional[VmImage] = Field(default=None, alias="vmImage")
    __properties: ClassVar[List[str]] = ["acceleratorConfig", "bootDiskSizeGb", "bootDiskType", "canIpForward", "containerImage", "createTime", "creator", "customGpuDriverPath", "dataDiskSizeGb", "dataDiskType", "diskEncryption", "disks", "installGpuDriver", "instanceMigrationEligibility", "instanceOwners", "kmsKey", "labels", "machineType", "metadata", "migrated", "name", "network", "nicType", "noProxyAccess", "noPublicIp", "noRemoveDataDisk", "postStartupScript", "proxyUri", "reservationAffinity", "serviceAccount", "serviceAccountScopes", "shieldedInstanceConfig", "state", "subnet", "tags", "updateTime", "upgradeHistory", "vmImage"]

    @field_validator('boot_disk_type')
    def boot_disk_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['DISK_TYPE_UNSPECIFIED', 'PD_STANDARD', 'PD_SSD', 'PD_BALANCED', 'PD_EXTREME']):
            raise ValueError("must be one of enum values ('DISK_TYPE_UNSPECIFIED', 'PD_STANDARD', 'PD_SSD', 'PD_BALANCED', 'PD_EXTREME')")
        return value

    @field_validator('data_disk_type')
    def data_disk_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['DISK_TYPE_UNSPECIFIED', 'PD_STANDARD', 'PD_SSD', 'PD_BALANCED', 'PD_EXTREME']):
            raise ValueError("must be one of enum values ('DISK_TYPE_UNSPECIFIED', 'PD_STANDARD', 'PD_SSD', 'PD_BALANCED', 'PD_EXTREME')")
        return value

    @field_validator('disk_encryption')
    def disk_encryption_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['DISK_ENCRYPTION_UNSPECIFIED', 'GMEK', 'CMEK']):
            raise ValueError("must be one of enum values ('DISK_ENCRYPTION_UNSPECIFIED', 'GMEK', 'CMEK')")
        return value

    @field_validator('nic_type')
    def nic_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['UNSPECIFIED_NIC_TYPE', 'VIRTIO_NET', 'GVNIC']):
            raise ValueError("must be one of enum values ('UNSPECIFIED_NIC_TYPE', 'VIRTIO_NET', 'GVNIC')")
        return value

    @field_validator('state')
    def state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['STATE_UNSPECIFIED', 'STARTING', 'PROVISIONING', 'ACTIVE', 'STOPPING', 'STOPPED', 'DELETED', 'UPGRADING', 'INITIALIZING', 'REGISTERING', 'SUSPENDING', 'SUSPENDED']):
            raise ValueError("must be one of enum values ('STATE_UNSPECIFIED', 'STARTING', 'PROVISIONING', 'ACTIVE', 'STOPPING', 'STOPPED', 'DELETED', 'UPGRADING', 'INITIALIZING', 'REGISTERING', 'SUSPENDING', 'SUSPENDED')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Instance from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "create_time",
            "creator",
            "disks",
            "migrated",
            "name",
            "proxy_uri",
            "state",
            "update_time",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of accelerator_config
        if self.accelerator_config:
            _dict['acceleratorConfig'] = self.accelerator_config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of container_image
        if self.container_image:
            _dict['containerImage'] = self.container_image.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in disks (list)
        _items = []
        if self.disks:
            for _item_disks in self.disks:
                if _item_disks:
                    _items.append(_item_disks.to_dict())
            _dict['disks'] = _items
        # override the default output from pydantic by calling `to_dict()` of instance_migration_eligibility
        if self.instance_migration_eligibility:
            _dict['instanceMigrationEligibility'] = self.instance_migration_eligibility.to_dict()
        # override the default output from pydantic by calling `to_dict()` of reservation_affinity
        if self.reservation_affinity:
            _dict['reservationAffinity'] = self.reservation_affinity.to_dict()
        # override the default output from pydantic by calling `to_dict()` of shielded_instance_config
        if self.shielded_instance_config:
            _dict['shieldedInstanceConfig'] = self.shielded_instance_config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in upgrade_history (list)
        _items = []
        if self.upgrade_history:
            for _item_upgrade_history in self.upgrade_history:
                if _item_upgrade_history:
                    _items.append(_item_upgrade_history.to_dict())
            _dict['upgradeHistory'] = _items
        # override the default output from pydantic by calling `to_dict()` of vm_image
        if self.vm_image:
            _dict['vmImage'] = self.vm_image.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Instance from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "acceleratorConfig": AcceleratorConfig.from_dict(obj["acceleratorConfig"]) if obj.get("acceleratorConfig") is not None else None,
            "bootDiskSizeGb": obj.get("bootDiskSizeGb"),
            "bootDiskType": obj.get("bootDiskType"),
            "canIpForward": obj.get("canIpForward"),
            "containerImage": ContainerImage.from_dict(obj["containerImage"]) if obj.get("containerImage") is not None else None,
            "createTime": obj.get("createTime"),
            "creator": obj.get("creator"),
            "customGpuDriverPath": obj.get("customGpuDriverPath"),
            "dataDiskSizeGb": obj.get("dataDiskSizeGb"),
            "dataDiskType": obj.get("dataDiskType"),
            "diskEncryption": obj.get("diskEncryption"),
            "disks": [Disk.from_dict(_item) for _item in obj["disks"]] if obj.get("disks") is not None else None,
            "installGpuDriver": obj.get("installGpuDriver"),
            "instanceMigrationEligibility": InstanceMigrationEligibility.from_dict(obj["instanceMigrationEligibility"]) if obj.get("instanceMigrationEligibility") is not None else None,
            "instanceOwners": obj.get("instanceOwners"),
            "kmsKey": obj.get("kmsKey"),
            "labels": obj.get("labels"),
            "machineType": obj.get("machineType"),
            "metadata": obj.get("metadata"),
            "migrated": obj.get("migrated"),
            "name": obj.get("name"),
            "network": obj.get("network"),
            "nicType": obj.get("nicType"),
            "noProxyAccess": obj.get("noProxyAccess"),
            "noPublicIp": obj.get("noPublicIp"),
            "noRemoveDataDisk": obj.get("noRemoveDataDisk"),
            "postStartupScript": obj.get("postStartupScript"),
            "proxyUri": obj.get("proxyUri"),
            "reservationAffinity": ReservationAffinity.from_dict(obj["reservationAffinity"]) if obj.get("reservationAffinity") is not None else None,
            "serviceAccount": obj.get("serviceAccount"),
            "serviceAccountScopes": obj.get("serviceAccountScopes"),
            "shieldedInstanceConfig": ShieldedInstanceConfig.from_dict(obj["shieldedInstanceConfig"]) if obj.get("shieldedInstanceConfig") is not None else None,
            "state": obj.get("state"),
            "subnet": obj.get("subnet"),
            "tags": obj.get("tags"),
            "updateTime": obj.get("updateTime"),
            "upgradeHistory": [UpgradeHistoryEntry.from_dict(_item) for _item in obj["upgradeHistory"]] if obj.get("upgradeHistory") is not None else None,
            "vmImage": VmImage.from_dict(obj["vmImage"]) if obj.get("vmImage") is not None else None
        })
        return _obj



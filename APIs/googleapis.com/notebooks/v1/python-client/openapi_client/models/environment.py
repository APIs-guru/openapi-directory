# coding: utf-8

"""
    Notebooks API

    Notebooks API is used to manage notebook resources in Google Cloud.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.container_image import ContainerImage
from openapi_client.models.vm_image import VmImage
from typing import Optional, Set
from typing_extensions import Self

class Environment(BaseModel):
    """
    Definition of a software environment that is used to start a notebook instance.
    """ # noqa: E501
    container_image: Optional[ContainerImage] = Field(default=None, alias="containerImage")
    create_time: Optional[StrictStr] = Field(default=None, description="Output only. The time at which this environment was created.", alias="createTime")
    description: Optional[StrictStr] = Field(default=None, description="A brief description of this environment.")
    display_name: Optional[StrictStr] = Field(default=None, description="Display name of this environment for the UI.", alias="displayName")
    name: Optional[StrictStr] = Field(default=None, description="Output only. Name of this environment. Format: `projects/{project_id}/locations/{location}/environments/{environment_id}`")
    post_startup_script: Optional[StrictStr] = Field(default=None, description="Path to a Bash script that automatically runs after a notebook instance fully boots up. The path must be a URL or Cloud Storage path. Example: `\"gs://path-to-file/file-name\"`", alias="postStartupScript")
    vm_image: Optional[VmImage] = Field(default=None, alias="vmImage")
    __properties: ClassVar[List[str]] = ["containerImage", "createTime", "description", "displayName", "name", "postStartupScript", "vmImage"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Environment from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "create_time",
            "name",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of container_image
        if self.container_image:
            _dict['containerImage'] = self.container_image.to_dict()
        # override the default output from pydantic by calling `to_dict()` of vm_image
        if self.vm_image:
            _dict['vmImage'] = self.vm_image.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Environment from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "containerImage": ContainerImage.from_dict(obj["containerImage"]) if obj.get("containerImage") is not None else None,
            "createTime": obj.get("createTime"),
            "description": obj.get("description"),
            "displayName": obj.get("displayName"),
            "name": obj.get("name"),
            "postStartupScript": obj.get("postStartupScript"),
            "vmImage": VmImage.from_dict(obj["vmImage"]) if obj.get("vmImage") is not None else None
        })
        return _obj



# coding: utf-8

"""
    Notebooks API

    Notebooks API is used to manage notebook resources in Google Cloud.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.local_disk_initialize_params import LocalDiskInitializeParams
from openapi_client.models.runtime_guest_os_feature import RuntimeGuestOsFeature
from typing import Optional, Set
from typing_extensions import Self

class LocalDisk(BaseModel):
    """
    A Local attached disk resource.
    """ # noqa: E501
    auto_delete: Optional[StrictBool] = Field(default=None, description="Optional. Output only. Specifies whether the disk will be auto-deleted when the instance is deleted (but not when the disk is detached from the instance).", alias="autoDelete")
    boot: Optional[StrictBool] = Field(default=None, description="Optional. Output only. Indicates that this is a boot disk. The virtual machine will use the first partition of the disk for its root filesystem.")
    device_name: Optional[StrictStr] = Field(default=None, description="Optional. Output only. Specifies a unique device name of your choice that is reflected into the `/dev/disk/by-id/google-*` tree of a Linux operating system running within the instance. This name can be used to reference the device for mounting, resizing, and so on, from within the instance. If not specified, the server chooses a default device name to apply to this disk, in the form persistent-disk-x, where x is a number assigned by Google Compute Engine. This field is only applicable for persistent disks.", alias="deviceName")
    guest_os_features: Optional[List[RuntimeGuestOsFeature]] = Field(default=None, description="Output only. Indicates a list of features to enable on the guest operating system. Applicable only for bootable images. Read Enabling guest operating system features to see a list of available options.", alias="guestOsFeatures")
    index: Optional[StrictInt] = Field(default=None, description="Output only. A zero-based index to this disk, where 0 is reserved for the boot disk. If you have many disks attached to an instance, each disk would have a unique index number.")
    initialize_params: Optional[LocalDiskInitializeParams] = Field(default=None, alias="initializeParams")
    interface: Optional[StrictStr] = Field(default=None, description="Specifies the disk interface to use for attaching this disk, which is either SCSI or NVME. The default is SCSI. Persistent disks must always use SCSI and the request will fail if you attempt to attach a persistent disk in any other format than SCSI. Local SSDs can use either NVME or SCSI. For performance characteristics of SCSI over NVMe, see Local SSD performance. Valid values: * `NVME` * `SCSI`")
    kind: Optional[StrictStr] = Field(default=None, description="Output only. Type of the resource. Always compute#attachedDisk for attached disks.")
    licenses: Optional[List[StrictStr]] = Field(default=None, description="Output only. Any valid publicly visible licenses.")
    mode: Optional[StrictStr] = Field(default=None, description="The mode in which to attach this disk, either `READ_WRITE` or `READ_ONLY`. If not specified, the default is to attach the disk in `READ_WRITE` mode. Valid values: * `READ_ONLY` * `READ_WRITE`")
    source: Optional[StrictStr] = Field(default=None, description="Specifies a valid partial or full URL to an existing Persistent Disk resource.")
    type: Optional[StrictStr] = Field(default=None, description="Specifies the type of the disk, either `SCRATCH` or `PERSISTENT`. If not specified, the default is `PERSISTENT`. Valid values: * `PERSISTENT` * `SCRATCH`")
    __properties: ClassVar[List[str]] = ["autoDelete", "boot", "deviceName", "guestOsFeatures", "index", "initializeParams", "interface", "kind", "licenses", "mode", "source", "type"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of LocalDisk from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "auto_delete",
            "boot",
            "device_name",
            "guest_os_features",
            "index",
            "kind",
            "licenses",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in guest_os_features (list)
        _items = []
        if self.guest_os_features:
            for _item_guest_os_features in self.guest_os_features:
                if _item_guest_os_features:
                    _items.append(_item_guest_os_features.to_dict())
            _dict['guestOsFeatures'] = _items
        # override the default output from pydantic by calling `to_dict()` of initialize_params
        if self.initialize_params:
            _dict['initializeParams'] = self.initialize_params.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of LocalDisk from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "autoDelete": obj.get("autoDelete"),
            "boot": obj.get("boot"),
            "deviceName": obj.get("deviceName"),
            "guestOsFeatures": [RuntimeGuestOsFeature.from_dict(_item) for _item in obj["guestOsFeatures"]] if obj.get("guestOsFeatures") is not None else None,
            "index": obj.get("index"),
            "initializeParams": LocalDiskInitializeParams.from_dict(obj["initializeParams"]) if obj.get("initializeParams") is not None else None,
            "interface": obj.get("interface"),
            "kind": obj.get("kind"),
            "licenses": obj.get("licenses"),
            "mode": obj.get("mode"),
            "source": obj.get("source"),
            "type": obj.get("type")
        })
        return _obj



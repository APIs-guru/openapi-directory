# coding: utf-8

"""
    Notebooks API

    Notebooks API is used to manage notebook resources in Google Cloud.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class LocalDiskInitializeParams(BaseModel):
    """
    Input only. Specifies the parameters for a new disk that will be created alongside the new instance. Use initialization parameters to create boot disks or local SSDs attached to the new runtime. This property is mutually exclusive with the source property; you can only define one or the other, but not both.
    """ # noqa: E501
    description: Optional[StrictStr] = Field(default=None, description="Optional. Provide this property when creating the disk.")
    disk_name: Optional[StrictStr] = Field(default=None, description="Optional. Specifies the disk name. If not specified, the default is to use the name of the instance. If the disk with the instance name exists already in the given zone/region, a new name will be automatically generated.", alias="diskName")
    disk_size_gb: Optional[StrictStr] = Field(default=None, description="Optional. Specifies the size of the disk in base-2 GB. If not specified, the disk will be the same size as the image (usually 10GB). If specified, the size must be equal to or larger than 10GB. Default 100 GB.", alias="diskSizeGb")
    disk_type: Optional[StrictStr] = Field(default=None, description="Input only. The type of the boot disk attached to this instance, defaults to standard persistent disk (`PD_STANDARD`).", alias="diskType")
    labels: Optional[Dict[str, StrictStr]] = Field(default=None, description="Optional. Labels to apply to this disk. These can be later modified by the disks.setLabels method. This field is only applicable for persistent disks.")
    __properties: ClassVar[List[str]] = ["description", "diskName", "diskSizeGb", "diskType", "labels"]

    @field_validator('disk_type')
    def disk_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['DISK_TYPE_UNSPECIFIED', 'PD_STANDARD', 'PD_SSD', 'PD_BALANCED', 'PD_EXTREME']):
            raise ValueError("must be one of enum values ('DISK_TYPE_UNSPECIFIED', 'PD_STANDARD', 'PD_SSD', 'PD_BALANCED', 'PD_EXTREME')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of LocalDiskInitializeParams from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of LocalDiskInitializeParams from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "description": obj.get("description"),
            "diskName": obj.get("diskName"),
            "diskSizeGb": obj.get("diskSizeGb"),
            "diskType": obj.get("diskType"),
            "labels": obj.get("labels")
        })
        return _obj



# coding: utf-8

"""
    Notebooks API

    Notebooks API is used to manage notebook resources in Google Cloud.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.execution_template import ExecutionTemplate

class TestExecutionTemplate(unittest.TestCase):
    """ExecutionTemplate unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> ExecutionTemplate:
        """Test ExecutionTemplate
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `ExecutionTemplate`
        """
        model = ExecutionTemplate()
        if include_optional:
            return ExecutionTemplate(
                accelerator_config = openapi_client.models.scheduler_accelerator_config.SchedulerAcceleratorConfig(
                    core_count = '', 
                    type = 'SCHEDULER_ACCELERATOR_TYPE_UNSPECIFIED', ),
                container_image_uri = '',
                dataproc_parameters = openapi_client.models.dataproc_parameters.DataprocParameters(
                    cluster = '', ),
                input_notebook_file = '',
                job_type = 'JOB_TYPE_UNSPECIFIED',
                kernel_spec = '',
                labels = {
                    'key' : ''
                    },
                master_type = '',
                output_notebook_folder = '',
                parameters = '',
                params_yaml_file = '',
                scale_tier = 'SCALE_TIER_UNSPECIFIED',
                service_account = '',
                tensorboard = '',
                vertex_ai_parameters = openapi_client.models.vertex_ai_parameters.VertexAIParameters(
                    env = {
                        'key' : ''
                        }, 
                    network = '', )
            )
        else:
            return ExecutionTemplate(
        )
        """

    def testExecutionTemplate(self):
        """Test ExecutionTemplate"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

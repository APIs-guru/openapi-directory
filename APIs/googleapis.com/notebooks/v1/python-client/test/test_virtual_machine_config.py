# coding: utf-8

"""
    Notebooks API

    Notebooks API is used to manage notebook resources in Google Cloud.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.virtual_machine_config import VirtualMachineConfig

class TestVirtualMachineConfig(unittest.TestCase):
    """VirtualMachineConfig unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> VirtualMachineConfig:
        """Test VirtualMachineConfig
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `VirtualMachineConfig`
        """
        model = VirtualMachineConfig()
        if include_optional:
            return VirtualMachineConfig(
                accelerator_config = openapi_client.models.runtime_accelerator_config.RuntimeAcceleratorConfig(
                    core_count = '', 
                    type = 'ACCELERATOR_TYPE_UNSPECIFIED', ),
                boot_image = openapi_client.models.boot_image.BootImage(),
                container_images = [
                    openapi_client.models.container_image.ContainerImage(
                        repository = '', 
                        tag = '', )
                    ],
                data_disk = openapi_client.models.local_disk.LocalDisk(
                    auto_delete = True, 
                    boot = True, 
                    device_name = '', 
                    guest_os_features = [
                        openapi_client.models.runtime_guest_os_feature.RuntimeGuestOsFeature(
                            type = '', )
                        ], 
                    index = 56, 
                    initialize_params = openapi_client.models.local_disk_initialize_params.LocalDiskInitializeParams(
                        description = '', 
                        disk_name = '', 
                        disk_size_gb = '', 
                        disk_type = 'DISK_TYPE_UNSPECIFIED', 
                        labels = {
                            'key' : ''
                            }, ), 
                    interface = '', 
                    kind = '', 
                    licenses = [
                        ''
                        ], 
                    mode = '', 
                    source = '', 
                    type = '', ),
                encryption_config = openapi_client.models.encryption_config.EncryptionConfig(
                    kms_key = '', ),
                guest_attributes = {
                    'key' : ''
                    },
                internal_ip_only = True,
                labels = {
                    'key' : ''
                    },
                machine_type = '',
                metadata = {
                    'key' : ''
                    },
                network = '',
                nic_type = 'UNSPECIFIED_NIC_TYPE',
                reserved_ip_range = '',
                shielded_instance_config = openapi_client.models.runtime_shielded_instance_config.RuntimeShieldedInstanceConfig(
                    enable_integrity_monitoring = True, 
                    enable_secure_boot = True, 
                    enable_vtpm = True, ),
                subnet = '',
                tags = [
                    ''
                    ],
                zone = ''
            )
        else:
            return VirtualMachineConfig(
        )
        """

    def testVirtualMachineConfig(self):
        """Test VirtualMachineConfig"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

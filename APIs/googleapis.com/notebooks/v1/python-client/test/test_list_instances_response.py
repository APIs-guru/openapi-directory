# coding: utf-8

"""
    Notebooks API

    Notebooks API is used to manage notebook resources in Google Cloud.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.list_instances_response import ListInstancesResponse

class TestListInstancesResponse(unittest.TestCase):
    """ListInstancesResponse unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> ListInstancesResponse:
        """Test ListInstancesResponse
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `ListInstancesResponse`
        """
        model = ListInstancesResponse()
        if include_optional:
            return ListInstancesResponse(
                instances = [
                    openapi_client.models.instance.Instance(
                        accelerator_config = openapi_client.models.accelerator_config.AcceleratorConfig(
                            core_count = '', 
                            type = 'ACCELERATOR_TYPE_UNSPECIFIED', ), 
                        boot_disk_size_gb = '', 
                        boot_disk_type = 'DISK_TYPE_UNSPECIFIED', 
                        can_ip_forward = True, 
                        container_image = openapi_client.models.container_image.ContainerImage(
                            repository = '', 
                            tag = '', ), 
                        create_time = '', 
                        creator = '', 
                        custom_gpu_driver_path = '', 
                        data_disk_size_gb = '', 
                        data_disk_type = 'DISK_TYPE_UNSPECIFIED', 
                        disk_encryption = 'DISK_ENCRYPTION_UNSPECIFIED', 
                        disks = [
                            openapi_client.models.disk.Disk(
                                auto_delete = True, 
                                boot = True, 
                                device_name = '', 
                                disk_size_gb = '', 
                                guest_os_features = [
                                    openapi_client.models.guest_os_feature.GuestOsFeature(
                                        type = '', )
                                    ], 
                                index = '', 
                                interface = '', 
                                kind = '', 
                                licenses = [
                                    ''
                                    ], 
                                mode = '', 
                                source = '', 
                                type = '', )
                            ], 
                        install_gpu_driver = True, 
                        instance_migration_eligibility = openapi_client.models.instance_migration_eligibility.InstanceMigrationEligibility(
                            errors = [
                                'ERROR_UNSPECIFIED'
                                ], 
                            warnings = [
                                'WARNING_UNSPECIFIED'
                                ], ), 
                        instance_owners = [
                            ''
                            ], 
                        kms_key = '', 
                        labels = {
                            'key' : ''
                            }, 
                        machine_type = '', 
                        metadata = {
                            'key' : ''
                            }, 
                        migrated = True, 
                        name = '', 
                        network = '', 
                        nic_type = 'UNSPECIFIED_NIC_TYPE', 
                        no_proxy_access = True, 
                        no_public_ip = True, 
                        no_remove_data_disk = True, 
                        post_startup_script = '', 
                        proxy_uri = '', 
                        reservation_affinity = openapi_client.models.reservation_affinity.ReservationAffinity(
                            consume_reservation_type = 'TYPE_UNSPECIFIED', 
                            key = '', 
                            values = [
                                ''
                                ], ), 
                        service_account = '', 
                        service_account_scopes = [
                            ''
                            ], 
                        shielded_instance_config = openapi_client.models.shielded_instance_config.ShieldedInstanceConfig(
                            enable_integrity_monitoring = True, 
                            enable_secure_boot = True, 
                            enable_vtpm = True, ), 
                        state = 'STATE_UNSPECIFIED', 
                        subnet = '', 
                        tags = [
                            ''
                            ], 
                        update_time = '', 
                        upgrade_history = [
                            openapi_client.models.upgrade_history_entry.UpgradeHistoryEntry(
                                action = 'ACTION_UNSPECIFIED', 
                                create_time = '', 
                                framework = '', 
                                snapshot = '', 
                                state = 'STATE_UNSPECIFIED', 
                                target_image = '', 
                                target_version = '', 
                                version = '', 
                                vm_image = '', )
                            ], 
                        vm_image = openapi_client.models.vm_image.VmImage(
                            image_family = '', 
                            image_name = '', 
                            project = '', ), )
                    ],
                next_page_token = '',
                unreachable = [
                    ''
                    ]
            )
        else:
            return ListInstancesResponse(
        )
        """

    def testListInstancesResponse(self):
        """Test ListInstancesResponse"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

# coding: utf-8

"""
    Notebooks API

    Notebooks API is used to manage notebook resources in Google Cloud.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.runtime import Runtime

class TestRuntime(unittest.TestCase):
    """Runtime unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> Runtime:
        """Test Runtime
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `Runtime`
        """
        model = Runtime()
        if include_optional:
            return Runtime(
                access_config = openapi_client.models.runtime_access_config.RuntimeAccessConfig(
                    access_type = 'RUNTIME_ACCESS_TYPE_UNSPECIFIED', 
                    proxy_uri = '', 
                    runtime_owner = '', ),
                create_time = '',
                health_state = 'HEALTH_STATE_UNSPECIFIED',
                labels = {
                    'key' : ''
                    },
                metrics = openapi_client.models.runtime_metrics.RuntimeMetrics(
                    system_metrics = {
                        'key' : ''
                        }, ),
                migrated = True,
                name = '',
                runtime_migration_eligibility = openapi_client.models.runtime_migration_eligibility.RuntimeMigrationEligibility(
                    errors = [
                        'ERROR_UNSPECIFIED'
                        ], 
                    warnings = [
                        'WARNING_UNSPECIFIED'
                        ], ),
                software_config = openapi_client.models.runtime_software_config.RuntimeSoftwareConfig(
                    custom_gpu_driver_path = '', 
                    disable_terminal = True, 
                    enable_health_monitoring = True, 
                    idle_shutdown = True, 
                    idle_shutdown_timeout = 56, 
                    install_gpu_driver = True, 
                    kernels = [
                        openapi_client.models.container_image.ContainerImage(
                            repository = '', 
                            tag = '', )
                        ], 
                    mixer_disabled = True, 
                    notebook_upgrade_schedule = '', 
                    post_startup_script = '', 
                    post_startup_script_behavior = 'POST_STARTUP_SCRIPT_BEHAVIOR_UNSPECIFIED', 
                    upgradeable = True, 
                    version = '', ),
                state = 'STATE_UNSPECIFIED',
                update_time = '',
                virtual_machine = openapi_client.models.virtual_machine.VirtualMachine(
                    instance_id = '', 
                    instance_name = '', 
                    virtual_machine_config = openapi_client.models.virtual_machine_config.VirtualMachineConfig(
                        accelerator_config = openapi_client.models.runtime_accelerator_config.RuntimeAcceleratorConfig(
                            core_count = '', 
                            type = 'ACCELERATOR_TYPE_UNSPECIFIED', ), 
                        boot_image = openapi_client.models.boot_image.BootImage(), 
                        container_images = [
                            openapi_client.models.container_image.ContainerImage(
                                repository = '', 
                                tag = '', )
                            ], 
                        data_disk = openapi_client.models.local_disk.LocalDisk(
                            auto_delete = True, 
                            boot = True, 
                            device_name = '', 
                            guest_os_features = [
                                openapi_client.models.runtime_guest_os_feature.RuntimeGuestOsFeature(
                                    type = '', )
                                ], 
                            index = 56, 
                            initialize_params = openapi_client.models.local_disk_initialize_params.LocalDiskInitializeParams(
                                description = '', 
                                disk_name = '', 
                                disk_size_gb = '', 
                                disk_type = 'DISK_TYPE_UNSPECIFIED', 
                                labels = {
                                    'key' : ''
                                    }, ), 
                            interface = '', 
                            kind = '', 
                            licenses = [
                                ''
                                ], 
                            mode = '', 
                            source = '', 
                            type = '', ), 
                        encryption_config = openapi_client.models.encryption_config.EncryptionConfig(
                            kms_key = '', ), 
                        guest_attributes = {
                            'key' : ''
                            }, 
                        internal_ip_only = True, 
                        labels = {
                            'key' : ''
                            }, 
                        machine_type = '', 
                        metadata = {
                            'key' : ''
                            }, 
                        network = '', 
                        nic_type = 'UNSPECIFIED_NIC_TYPE', 
                        reserved_ip_range = '', 
                        shielded_instance_config = openapi_client.models.runtime_shielded_instance_config.RuntimeShieldedInstanceConfig(
                            enable_integrity_monitoring = True, 
                            enable_secure_boot = True, 
                            enable_vtpm = True, ), 
                        subnet = '', 
                        tags = [
                            ''
                            ], 
                        zone = '', ), )
            )
        else:
            return Runtime(
        )
        """

    def testRuntime(self):
        """Test Runtime"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

# coding: utf-8

"""
    Blockchain Node Engine API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.blockchain_node import BlockchainNode

class TestBlockchainNode(unittest.TestCase):
    """BlockchainNode unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> BlockchainNode:
        """Test BlockchainNode
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `BlockchainNode`
        """
        model = BlockchainNode()
        if include_optional:
            return BlockchainNode(
                blockchain_type = 'BLOCKCHAIN_TYPE_UNSPECIFIED',
                connection_info = openapi_client.models.connection_info.ConnectionInfo(
                    endpoint_info = openapi_client.models.endpoint_info.EndpointInfo(
                        json_rpc_api_endpoint = '', 
                        websockets_api_endpoint = '', ), 
                    service_attachment = '', ),
                create_time = '',
                ethereum_details = openapi_client.models.ethereum_details.EthereumDetails(
                    additional_endpoints = openapi_client.models.ethereum_endpoints.EthereumEndpoints(
                        beacon_api_endpoint = '', 
                        beacon_prometheus_metrics_api_endpoint = '', 
                        execution_client_prometheus_metrics_api_endpoint = '', ), 
                    api_enable_admin = True, 
                    api_enable_debug = True, 
                    consensus_client = 'CONSENSUS_CLIENT_UNSPECIFIED', 
                    execution_client = 'EXECUTION_CLIENT_UNSPECIFIED', 
                    geth_details = openapi_client.models.geth_details.GethDetails(
                        garbage_collection_mode = 'GARBAGE_COLLECTION_MODE_UNSPECIFIED', ), 
                    network = 'NETWORK_UNSPECIFIED', 
                    node_type = 'NODE_TYPE_UNSPECIFIED', 
                    validator_config = openapi_client.models.validator_config.ValidatorConfig(
                        beacon_fee_recipient = '', 
                        managed_validator_client = True, 
                        mev_relay_urls = [
                            ''
                            ], ), ),
                labels = {
                    'key' : ''
                    },
                name = '',
                private_service_connect_enabled = True,
                state = 'STATE_UNSPECIFIED',
                update_time = ''
            )
        else:
            return BlockchainNode(
        )
        """

    def testBlockchainNode(self):
        """Test BlockchainNode"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

# coding: utf-8

"""
    Blockchain Node Engine API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.ethereum_details import EthereumDetails

class TestEthereumDetails(unittest.TestCase):
    """EthereumDetails unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> EthereumDetails:
        """Test EthereumDetails
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `EthereumDetails`
        """
        model = EthereumDetails()
        if include_optional:
            return EthereumDetails(
                additional_endpoints = openapi_client.models.ethereum_endpoints.EthereumEndpoints(
                    beacon_api_endpoint = '', 
                    beacon_prometheus_metrics_api_endpoint = '', 
                    execution_client_prometheus_metrics_api_endpoint = '', ),
                api_enable_admin = True,
                api_enable_debug = True,
                consensus_client = 'CONSENSUS_CLIENT_UNSPECIFIED',
                execution_client = 'EXECUTION_CLIENT_UNSPECIFIED',
                geth_details = openapi_client.models.geth_details.GethDetails(
                    garbage_collection_mode = 'GARBAGE_COLLECTION_MODE_UNSPECIFIED', ),
                network = 'NETWORK_UNSPECIFIED',
                node_type = 'NODE_TYPE_UNSPECIFIED',
                validator_config = openapi_client.models.validator_config.ValidatorConfig(
                    beacon_fee_recipient = '', 
                    managed_validator_client = True, 
                    mev_relay_urls = [
                        ''
                        ], )
            )
        else:
            return EthereumDetails(
        )
        """

    def testEthereumDetails(self):
        """Test EthereumDetails"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

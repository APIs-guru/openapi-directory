# coding: utf-8

"""
    Blockchain Node Engine API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.ethereum_endpoints import EthereumEndpoints
from openapi_client.models.geth_details import GethDetails
from openapi_client.models.validator_config import ValidatorConfig
from typing import Optional, Set
from typing_extensions import Self

class EthereumDetails(BaseModel):
    """
    Ethereum-specific blockchain node details.
    """ # noqa: E501
    additional_endpoints: Optional[EthereumEndpoints] = Field(default=None, alias="additionalEndpoints")
    api_enable_admin: Optional[StrictBool] = Field(default=None, description="Immutable. Enables JSON-RPC access to functions in the `admin` namespace. Defaults to `false`.", alias="apiEnableAdmin")
    api_enable_debug: Optional[StrictBool] = Field(default=None, description="Immutable. Enables JSON-RPC access to functions in the `debug` namespace. Defaults to `false`.", alias="apiEnableDebug")
    consensus_client: Optional[StrictStr] = Field(default=None, description="Immutable. The consensus client.", alias="consensusClient")
    execution_client: Optional[StrictStr] = Field(default=None, description="Immutable. The execution client", alias="executionClient")
    geth_details: Optional[GethDetails] = Field(default=None, alias="gethDetails")
    network: Optional[StrictStr] = Field(default=None, description="Immutable. The Ethereum environment being accessed.")
    node_type: Optional[StrictStr] = Field(default=None, description="Immutable. The type of Ethereum node.", alias="nodeType")
    validator_config: Optional[ValidatorConfig] = Field(default=None, alias="validatorConfig")
    __properties: ClassVar[List[str]] = ["additionalEndpoints", "apiEnableAdmin", "apiEnableDebug", "consensusClient", "executionClient", "gethDetails", "network", "nodeType", "validatorConfig"]

    @field_validator('consensus_client')
    def consensus_client_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['CONSENSUS_CLIENT_UNSPECIFIED', 'LIGHTHOUSE', 'ERIGON_EMBEDDED_CONSENSUS_LAYER']):
            raise ValueError("must be one of enum values ('CONSENSUS_CLIENT_UNSPECIFIED', 'LIGHTHOUSE', 'ERIGON_EMBEDDED_CONSENSUS_LAYER')")
        return value

    @field_validator('execution_client')
    def execution_client_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['EXECUTION_CLIENT_UNSPECIFIED', 'GETH', 'ERIGON']):
            raise ValueError("must be one of enum values ('EXECUTION_CLIENT_UNSPECIFIED', 'GETH', 'ERIGON')")
        return value

    @field_validator('network')
    def network_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['NETWORK_UNSPECIFIED', 'MAINNET', 'TESTNET_GOERLI_PRATER', 'TESTNET_SEPOLIA', 'TESTNET_HOLESKY']):
            raise ValueError("must be one of enum values ('NETWORK_UNSPECIFIED', 'MAINNET', 'TESTNET_GOERLI_PRATER', 'TESTNET_SEPOLIA', 'TESTNET_HOLESKY')")
        return value

    @field_validator('node_type')
    def node_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['NODE_TYPE_UNSPECIFIED', 'LIGHT', 'FULL', 'ARCHIVE']):
            raise ValueError("must be one of enum values ('NODE_TYPE_UNSPECIFIED', 'LIGHT', 'FULL', 'ARCHIVE')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of EthereumDetails from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of additional_endpoints
        if self.additional_endpoints:
            _dict['additionalEndpoints'] = self.additional_endpoints.to_dict()
        # override the default output from pydantic by calling `to_dict()` of geth_details
        if self.geth_details:
            _dict['gethDetails'] = self.geth_details.to_dict()
        # override the default output from pydantic by calling `to_dict()` of validator_config
        if self.validator_config:
            _dict['validatorConfig'] = self.validator_config.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of EthereumDetails from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "additionalEndpoints": EthereumEndpoints.from_dict(obj["additionalEndpoints"]) if obj.get("additionalEndpoints") is not None else None,
            "apiEnableAdmin": obj.get("apiEnableAdmin"),
            "apiEnableDebug": obj.get("apiEnableDebug"),
            "consensusClient": obj.get("consensusClient"),
            "executionClient": obj.get("executionClient"),
            "gethDetails": GethDetails.from_dict(obj["gethDetails"]) if obj.get("gethDetails") is not None else None,
            "network": obj.get("network"),
            "nodeType": obj.get("nodeType"),
            "validatorConfig": ValidatorConfig.from_dict(obj["validatorConfig"]) if obj.get("validatorConfig") is not None else None
        })
        return _obj



# coding: utf-8

"""
    Blockchain Node Engine API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.connection_info import ConnectionInfo
from openapi_client.models.ethereum_details import EthereumDetails
from typing import Optional, Set
from typing_extensions import Self

class BlockchainNode(BaseModel):
    """
    A representation of a blockchain node.
    """ # noqa: E501
    blockchain_type: Optional[StrictStr] = Field(default=None, description="Immutable. The blockchain type of the node.", alias="blockchainType")
    connection_info: Optional[ConnectionInfo] = Field(default=None, alias="connectionInfo")
    create_time: Optional[StrictStr] = Field(default=None, description="Output only. The timestamp at which the blockchain node was first created.", alias="createTime")
    ethereum_details: Optional[EthereumDetails] = Field(default=None, alias="ethereumDetails")
    labels: Optional[Dict[str, StrictStr]] = Field(default=None, description="User-provided key-value pairs.")
    name: Optional[StrictStr] = Field(default=None, description="Output only. The fully qualified name of the blockchain node. e.g. `projects/my-project/locations/us-central1/blockchainNodes/my-node`.")
    private_service_connect_enabled: Optional[StrictBool] = Field(default=None, description="Optional. When true, the node is only accessible via Private Service Connect; no public endpoints are exposed. Otherwise, the node is only accessible via public endpoints. Warning: Private Service Connect enabled nodes may require a manual migration effort to remain compatible with future versions of the product. If this feature is enabled, you will be notified of these changes along with any required action to avoid disruption. See https://cloud.google.com/vpc/docs/private-service-connect.", alias="privateServiceConnectEnabled")
    state: Optional[StrictStr] = Field(default=None, description="Output only. A status representing the state of the node.")
    update_time: Optional[StrictStr] = Field(default=None, description="Output only. The timestamp at which the blockchain node was last updated.", alias="updateTime")
    __properties: ClassVar[List[str]] = ["blockchainType", "connectionInfo", "createTime", "ethereumDetails", "labels", "name", "privateServiceConnectEnabled", "state", "updateTime"]

    @field_validator('blockchain_type')
    def blockchain_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['BLOCKCHAIN_TYPE_UNSPECIFIED', 'ETHEREUM']):
            raise ValueError("must be one of enum values ('BLOCKCHAIN_TYPE_UNSPECIFIED', 'ETHEREUM')")
        return value

    @field_validator('state')
    def state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['STATE_UNSPECIFIED', 'CREATING', 'DELETING', 'RUNNING', 'ERROR', 'UPDATING', 'REPAIRING', 'RECONCILING']):
            raise ValueError("must be one of enum values ('STATE_UNSPECIFIED', 'CREATING', 'DELETING', 'RUNNING', 'ERROR', 'UPDATING', 'REPAIRING', 'RECONCILING')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of BlockchainNode from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "create_time",
            "name",
            "state",
            "update_time",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of connection_info
        if self.connection_info:
            _dict['connectionInfo'] = self.connection_info.to_dict()
        # override the default output from pydantic by calling `to_dict()` of ethereum_details
        if self.ethereum_details:
            _dict['ethereumDetails'] = self.ethereum_details.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of BlockchainNode from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "blockchainType": obj.get("blockchainType"),
            "connectionInfo": ConnectionInfo.from_dict(obj["connectionInfo"]) if obj.get("connectionInfo") is not None else None,
            "createTime": obj.get("createTime"),
            "ethereumDetails": EthereumDetails.from_dict(obj["ethereumDetails"]) if obj.get("ethereumDetails") is not None else None,
            "labels": obj.get("labels"),
            "name": obj.get("name"),
            "privateServiceConnectEnabled": obj.get("privateServiceConnectEnabled"),
            "state": obj.get("state"),
            "updateTime": obj.get("updateTime")
        })
        return _obj



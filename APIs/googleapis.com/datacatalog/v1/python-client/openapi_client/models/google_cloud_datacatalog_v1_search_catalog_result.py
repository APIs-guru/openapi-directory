# coding: utf-8

"""
    Google Cloud Data Catalog API

    A fully managed and highly scalable data discovery and metadata management service. 

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudDatacatalogV1SearchCatalogResult(BaseModel):
    """
    Result in the response to a search request. Each result captures details of one entry that matches the search.
    """ # noqa: E501
    description: Optional[StrictStr] = Field(default=None, description="Entry description that can consist of several sentences or paragraphs that describe entry contents.")
    display_name: Optional[StrictStr] = Field(default=None, description="The display name of the result.", alias="displayName")
    fully_qualified_name: Optional[StrictStr] = Field(default=None, description="Fully qualified name (FQN) of the resource. FQNs take two forms: * For non-regionalized resources: `{SYSTEM}:{PROJECT}.{PATH_TO_RESOURCE_SEPARATED_WITH_DOTS}` * For regionalized resources: `{SYSTEM}:{PROJECT}.{LOCATION_ID}.{PATH_TO_RESOURCE_SEPARATED_WITH_DOTS}` Example for a DPMS table: `dataproc_metastore:PROJECT_ID.LOCATION_ID.INSTANCE_ID.DATABASE_ID.TABLE_ID`", alias="fullyQualifiedName")
    integrated_system: Optional[StrictStr] = Field(default=None, description="Output only. The source system that Data Catalog automatically integrates with, such as BigQuery, Cloud Pub/Sub, or Dataproc Metastore.", alias="integratedSystem")
    linked_resource: Optional[StrictStr] = Field(default=None, description="The full name of the Google Cloud resource the entry belongs to. For more information, see [Full Resource Name] (/apis/design/resource_names#full_resource_name). Example: `//bigquery.googleapis.com/projects/PROJECT_ID/datasets/DATASET_ID/tables/TABLE_ID`", alias="linkedResource")
    modify_time: Optional[StrictStr] = Field(default=None, description="The last modification timestamp of the entry in the source system.", alias="modifyTime")
    relative_resource_name: Optional[StrictStr] = Field(default=None, description="The relative name of the resource in URL format. Examples: * `projects/{PROJECT_ID}/locations/{LOCATION_ID}/entryGroups/{ENTRY_GROUP_ID}/entries/{ENTRY_ID}` * `projects/{PROJECT_ID}/tagTemplates/{TAG_TEMPLATE_ID}`", alias="relativeResourceName")
    search_result_subtype: Optional[StrictStr] = Field(default=None, description="Sub-type of the search result. A dot-delimited full type of the resource. The same type you specify in the `type` search predicate. Examples: `entry.table`, `entry.dataStream`, `tagTemplate`.", alias="searchResultSubtype")
    search_result_type: Optional[StrictStr] = Field(default=None, description="Type of the search result. You can use this field to determine which get method to call to fetch the full resource.", alias="searchResultType")
    user_specified_system: Optional[StrictStr] = Field(default=None, description="Custom source system that you can manually integrate Data Catalog with.", alias="userSpecifiedSystem")
    __properties: ClassVar[List[str]] = ["description", "displayName", "fullyQualifiedName", "integratedSystem", "linkedResource", "modifyTime", "relativeResourceName", "searchResultSubtype", "searchResultType", "userSpecifiedSystem"]

    @field_validator('integrated_system')
    def integrated_system_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['INTEGRATED_SYSTEM_UNSPECIFIED', 'BIGQUERY', 'CLOUD_PUBSUB', 'DATAPROC_METASTORE', 'DATAPLEX', 'CLOUD_SPANNER', 'CLOUD_BIGTABLE', 'CLOUD_SQL', 'LOOKER', 'VERTEX_AI']):
            raise ValueError("must be one of enum values ('INTEGRATED_SYSTEM_UNSPECIFIED', 'BIGQUERY', 'CLOUD_PUBSUB', 'DATAPROC_METASTORE', 'DATAPLEX', 'CLOUD_SPANNER', 'CLOUD_BIGTABLE', 'CLOUD_SQL', 'LOOKER', 'VERTEX_AI')")
        return value

    @field_validator('search_result_type')
    def search_result_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['SEARCH_RESULT_TYPE_UNSPECIFIED', 'ENTRY', 'TAG_TEMPLATE', 'ENTRY_GROUP']):
            raise ValueError("must be one of enum values ('SEARCH_RESULT_TYPE_UNSPECIFIED', 'ENTRY', 'TAG_TEMPLATE', 'ENTRY_GROUP')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudDatacatalogV1SearchCatalogResult from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "integrated_system",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudDatacatalogV1SearchCatalogResult from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "description": obj.get("description"),
            "displayName": obj.get("displayName"),
            "fullyQualifiedName": obj.get("fullyQualifiedName"),
            "integratedSystem": obj.get("integratedSystem"),
            "linkedResource": obj.get("linkedResource"),
            "modifyTime": obj.get("modifyTime"),
            "relativeResourceName": obj.get("relativeResourceName"),
            "searchResultSubtype": obj.get("searchResultSubtype"),
            "searchResultType": obj.get("searchResultType"),
            "userSpecifiedSystem": obj.get("userSpecifiedSystem")
        })
        return _obj



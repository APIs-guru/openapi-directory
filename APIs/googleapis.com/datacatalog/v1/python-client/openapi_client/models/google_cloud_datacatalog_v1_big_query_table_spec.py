# coding: utf-8

"""
    Google Cloud Data Catalog API

    A fully managed and highly scalable data discovery and metadata management service. 

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_cloud_datacatalog_v1_table_spec import GoogleCloudDatacatalogV1TableSpec
from openapi_client.models.google_cloud_datacatalog_v1_view_spec import GoogleCloudDatacatalogV1ViewSpec
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudDatacatalogV1BigQueryTableSpec(BaseModel):
    """
    Describes a BigQuery table.
    """ # noqa: E501
    table_source_type: Optional[StrictStr] = Field(default=None, description="Output only. The table source type.", alias="tableSourceType")
    table_spec: Optional[GoogleCloudDatacatalogV1TableSpec] = Field(default=None, alias="tableSpec")
    view_spec: Optional[GoogleCloudDatacatalogV1ViewSpec] = Field(default=None, alias="viewSpec")
    __properties: ClassVar[List[str]] = ["tableSourceType", "tableSpec", "viewSpec"]

    @field_validator('table_source_type')
    def table_source_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['TABLE_SOURCE_TYPE_UNSPECIFIED', 'BIGQUERY_VIEW', 'BIGQUERY_TABLE', 'BIGQUERY_MATERIALIZED_VIEW']):
            raise ValueError("must be one of enum values ('TABLE_SOURCE_TYPE_UNSPECIFIED', 'BIGQUERY_VIEW', 'BIGQUERY_TABLE', 'BIGQUERY_MATERIALIZED_VIEW')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudDatacatalogV1BigQueryTableSpec from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "table_source_type",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of table_spec
        if self.table_spec:
            _dict['tableSpec'] = self.table_spec.to_dict()
        # override the default output from pydantic by calling `to_dict()` of view_spec
        if self.view_spec:
            _dict['viewSpec'] = self.view_spec.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudDatacatalogV1BigQueryTableSpec from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "tableSourceType": obj.get("tableSourceType"),
            "tableSpec": GoogleCloudDatacatalogV1TableSpec.from_dict(obj["tableSpec"]) if obj.get("tableSpec") is not None else None,
            "viewSpec": GoogleCloudDatacatalogV1ViewSpec.from_dict(obj["viewSpec"]) if obj.get("viewSpec") is not None else None
        })
        return _obj



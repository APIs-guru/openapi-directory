# coding: utf-8

"""
    Google Cloud Data Catalog API

    A fully managed and highly scalable data discovery and metadata management service. 

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_cloud_datacatalog_v1_system_timestamps import GoogleCloudDatacatalogV1SystemTimestamps
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudDatacatalogV1EntryGroup(BaseModel):
    """
    Entry group metadata. An `EntryGroup` resource represents a logical grouping of zero or more Data Catalog Entry resources.
    """ # noqa: E501
    data_catalog_timestamps: Optional[GoogleCloudDatacatalogV1SystemTimestamps] = Field(default=None, alias="dataCatalogTimestamps")
    description: Optional[StrictStr] = Field(default=None, description="Entry group description. Can consist of several sentences or paragraphs that describe the entry group contents. Default value is an empty string.")
    display_name: Optional[StrictStr] = Field(default=None, description="A short name to identify the entry group, for example, \"analytics data - jan 2011\". Default value is an empty string.", alias="displayName")
    name: Optional[StrictStr] = Field(default=None, description="The resource name of the entry group in URL format. Note: The entry group itself and its child resources might not be stored in the location specified in its name.")
    __properties: ClassVar[List[str]] = ["dataCatalogTimestamps", "description", "displayName", "name"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudDatacatalogV1EntryGroup from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of data_catalog_timestamps
        if self.data_catalog_timestamps:
            _dict['dataCatalogTimestamps'] = self.data_catalog_timestamps.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudDatacatalogV1EntryGroup from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "dataCatalogTimestamps": GoogleCloudDatacatalogV1SystemTimestamps.from_dict(obj["dataCatalogTimestamps"]) if obj.get("dataCatalogTimestamps") is not None else None,
            "description": obj.get("description"),
            "displayName": obj.get("displayName"),
            "name": obj.get("name")
        })
        return _obj



# coding: utf-8

"""
    Google Cloud Data Catalog API

    A fully managed and highly scalable data discovery and metadata management service. 

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_cloud_datacatalog_v1_serialized_policy_tag import GoogleCloudDatacatalogV1SerializedPolicyTag
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudDatacatalogV1SerializedTaxonomy(BaseModel):
    """
    A nested protocol buffer that represents a taxonomy and the hierarchy of its policy tags. Used for taxonomy replacement, import, and export.
    """ # noqa: E501
    activated_policy_types: Optional[List[StrictStr]] = Field(default=None, description="A list of policy types that are activated per taxonomy.", alias="activatedPolicyTypes")
    description: Optional[StrictStr] = Field(default=None, description="Description of the serialized taxonomy. At most 2000 bytes when encoded in UTF-8. If not set, defaults to an empty description.")
    display_name: Optional[StrictStr] = Field(default=None, description="Required. Display name of the taxonomy. At most 200 bytes when encoded in UTF-8.", alias="displayName")
    policy_tags: Optional[List[GoogleCloudDatacatalogV1SerializedPolicyTag]] = Field(default=None, description="Top level policy tags associated with the taxonomy, if any.", alias="policyTags")
    __properties: ClassVar[List[str]] = ["activatedPolicyTypes", "description", "displayName", "policyTags"]

    @field_validator('activated_policy_types')
    def activated_policy_types_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        for i in value:
            if i not in set(['POLICY_TYPE_UNSPECIFIED', 'FINE_GRAINED_ACCESS_CONTROL']):
                raise ValueError("each list item must be one of ('POLICY_TYPE_UNSPECIFIED', 'FINE_GRAINED_ACCESS_CONTROL')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudDatacatalogV1SerializedTaxonomy from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in policy_tags (list)
        _items = []
        if self.policy_tags:
            for _item_policy_tags in self.policy_tags:
                if _item_policy_tags:
                    _items.append(_item_policy_tags.to_dict())
            _dict['policyTags'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudDatacatalogV1SerializedTaxonomy from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "activatedPolicyTypes": obj.get("activatedPolicyTypes"),
            "description": obj.get("description"),
            "displayName": obj.get("displayName"),
            "policyTags": [GoogleCloudDatacatalogV1SerializedPolicyTag.from_dict(_item) for _item in obj["policyTags"]] if obj.get("policyTags") is not None else None
        })
        return _obj



# coding: utf-8

"""
    Google Cloud Data Catalog API

    A fully managed and highly scalable data discovery and metadata management service. 

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.status import Status
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudDatacatalogV1ReconcileTagsMetadata(BaseModel):
    """
    Long-running operation metadata message returned by the ReconcileTags.
    """ # noqa: E501
    errors: Optional[Dict[str, Status]] = Field(default=None, description="Maps the name of each tagged column (or empty string for a sole entry) to tagging operation status.")
    state: Optional[StrictStr] = Field(default=None, description="State of the reconciliation operation.")
    __properties: ClassVar[List[str]] = ["errors", "state"]

    @field_validator('state')
    def state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['RECONCILIATION_STATE_UNSPECIFIED', 'RECONCILIATION_QUEUED', 'RECONCILIATION_IN_PROGRESS', 'RECONCILIATION_DONE']):
            raise ValueError("must be one of enum values ('RECONCILIATION_STATE_UNSPECIFIED', 'RECONCILIATION_QUEUED', 'RECONCILIATION_IN_PROGRESS', 'RECONCILIATION_DONE')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudDatacatalogV1ReconcileTagsMetadata from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each value in errors (dict)
        _field_dict = {}
        if self.errors:
            for _key_errors in self.errors:
                if self.errors[_key_errors]:
                    _field_dict[_key_errors] = self.errors[_key_errors].to_dict()
            _dict['errors'] = _field_dict
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudDatacatalogV1ReconcileTagsMetadata from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "errors": dict(
                (_k, Status.from_dict(_v))
                for _k, _v in obj["errors"].items()
            )
            if obj.get("errors") is not None
            else None,
            "state": obj.get("state")
        })
        return _obj



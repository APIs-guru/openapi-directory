# coding: utf-8

"""
    Google Cloud Data Catalog API

    A fully managed and highly scalable data discovery and metadata management service. 

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from openapi_client.models.google_cloud_datacatalog_v1_tag_field_enum_value import GoogleCloudDatacatalogV1TagFieldEnumValue
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudDatacatalogV1TagField(BaseModel):
    """
    Contains the value and additional information on a field within a Tag.
    """ # noqa: E501
    bool_value: Optional[StrictBool] = Field(default=None, description="The value of a tag field with a boolean type.", alias="boolValue")
    display_name: Optional[StrictStr] = Field(default=None, description="Output only. The display name of this field.", alias="displayName")
    double_value: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The value of a tag field with a double type.", alias="doubleValue")
    enum_value: Optional[GoogleCloudDatacatalogV1TagFieldEnumValue] = Field(default=None, alias="enumValue")
    order: Optional[StrictInt] = Field(default=None, description="Output only. The order of this field with respect to other fields in this tag. Can be set by Tag. For example, a higher value can indicate a more important field. The value can be negative. Multiple fields can have the same order, and field orders within a tag don't have to be sequential.")
    richtext_value: Optional[StrictStr] = Field(default=None, description="The value of a tag field with a rich text type. The maximum length is 10 MiB as this value holds HTML descriptions including encoded images. The maximum length of the text without images is 100 KiB.", alias="richtextValue")
    string_value: Optional[StrictStr] = Field(default=None, description="The value of a tag field with a string type. The maximum length is 2000 UTF-8 characters.", alias="stringValue")
    timestamp_value: Optional[StrictStr] = Field(default=None, description="The value of a tag field with a timestamp type.", alias="timestampValue")
    __properties: ClassVar[List[str]] = ["boolValue", "displayName", "doubleValue", "enumValue", "order", "richtextValue", "stringValue", "timestampValue"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudDatacatalogV1TagField from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "display_name",
            "order",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of enum_value
        if self.enum_value:
            _dict['enumValue'] = self.enum_value.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudDatacatalogV1TagField from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "boolValue": obj.get("boolValue"),
            "displayName": obj.get("displayName"),
            "doubleValue": obj.get("doubleValue"),
            "enumValue": GoogleCloudDatacatalogV1TagFieldEnumValue.from_dict(obj["enumValue"]) if obj.get("enumValue") is not None else None,
            "order": obj.get("order"),
            "richtextValue": obj.get("richtextValue"),
            "stringValue": obj.get("stringValue"),
            "timestampValue": obj.get("timestampValue")
        })
        return _obj



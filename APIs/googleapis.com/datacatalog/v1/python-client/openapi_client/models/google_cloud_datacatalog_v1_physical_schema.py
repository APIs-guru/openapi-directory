# coding: utf-8

"""
    Google Cloud Data Catalog API

    A fully managed and highly scalable data discovery and metadata management service. 

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_cloud_datacatalog_v1_physical_schema_avro_schema import GoogleCloudDatacatalogV1PhysicalSchemaAvroSchema
from openapi_client.models.google_cloud_datacatalog_v1_physical_schema_protobuf_schema import GoogleCloudDatacatalogV1PhysicalSchemaProtobufSchema
from openapi_client.models.google_cloud_datacatalog_v1_physical_schema_thrift_schema import GoogleCloudDatacatalogV1PhysicalSchemaThriftSchema
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudDatacatalogV1PhysicalSchema(BaseModel):
    """
    Native schema used by a resource represented as an entry. Used by query engines for deserializing and parsing source data.
    """ # noqa: E501
    avro: Optional[GoogleCloudDatacatalogV1PhysicalSchemaAvroSchema] = None
    csv: Optional[Dict[str, Any]] = Field(default=None, description="Marks a CSV-encoded data source.")
    orc: Optional[Dict[str, Any]] = Field(default=None, description="Marks an ORC-encoded data source.")
    parquet: Optional[Dict[str, Any]] = Field(default=None, description="Marks a Parquet-encoded data source.")
    protobuf: Optional[GoogleCloudDatacatalogV1PhysicalSchemaProtobufSchema] = None
    thrift: Optional[GoogleCloudDatacatalogV1PhysicalSchemaThriftSchema] = None
    __properties: ClassVar[List[str]] = ["avro", "csv", "orc", "parquet", "protobuf", "thrift"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudDatacatalogV1PhysicalSchema from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of avro
        if self.avro:
            _dict['avro'] = self.avro.to_dict()
        # override the default output from pydantic by calling `to_dict()` of protobuf
        if self.protobuf:
            _dict['protobuf'] = self.protobuf.to_dict()
        # override the default output from pydantic by calling `to_dict()` of thrift
        if self.thrift:
            _dict['thrift'] = self.thrift.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudDatacatalogV1PhysicalSchema from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "avro": GoogleCloudDatacatalogV1PhysicalSchemaAvroSchema.from_dict(obj["avro"]) if obj.get("avro") is not None else None,
            "csv": obj.get("csv"),
            "orc": obj.get("orc"),
            "parquet": obj.get("parquet"),
            "protobuf": GoogleCloudDatacatalogV1PhysicalSchemaProtobufSchema.from_dict(obj["protobuf"]) if obj.get("protobuf") is not None else None,
            "thrift": GoogleCloudDatacatalogV1PhysicalSchemaThriftSchema.from_dict(obj["thrift"]) if obj.get("thrift") is not None else None
        })
        return _obj



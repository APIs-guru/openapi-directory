# coding: utf-8

"""
    Google Cloud Data Catalog API

    A fully managed and highly scalable data discovery and metadata management service. 

    The version of the OpenAPI document: v1beta1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_cloud_datacatalog_v1_entry import GoogleCloudDatacatalogV1Entry
from openapi_client.models.google_cloud_datacatalog_v1_tag import GoogleCloudDatacatalogV1Tag
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudDatacatalogV1TaggedEntry(BaseModel):
    """
    Wrapper containing Entry and information about Tags that should and should not be attached to it.
    """ # noqa: E501
    absent_tags: Optional[List[GoogleCloudDatacatalogV1Tag]] = Field(default=None, description="Optional. Tags that should be deleted from the Data Catalog. Caller should populate template name and column only.", alias="absentTags")
    present_tags: Optional[List[GoogleCloudDatacatalogV1Tag]] = Field(default=None, description="Optional. Tags that should be ingested into the Data Catalog. Caller should populate template name, column and fields.", alias="presentTags")
    v1_entry: Optional[GoogleCloudDatacatalogV1Entry] = Field(default=None, alias="v1Entry")
    __properties: ClassVar[List[str]] = ["absentTags", "presentTags", "v1Entry"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudDatacatalogV1TaggedEntry from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in absent_tags (list)
        _items = []
        if self.absent_tags:
            for _item_absent_tags in self.absent_tags:
                if _item_absent_tags:
                    _items.append(_item_absent_tags.to_dict())
            _dict['absentTags'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in present_tags (list)
        _items = []
        if self.present_tags:
            for _item_present_tags in self.present_tags:
                if _item_present_tags:
                    _items.append(_item_present_tags.to_dict())
            _dict['presentTags'] = _items
        # override the default output from pydantic by calling `to_dict()` of v1_entry
        if self.v1_entry:
            _dict['v1Entry'] = self.v1_entry.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudDatacatalogV1TaggedEntry from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "absentTags": [GoogleCloudDatacatalogV1Tag.from_dict(_item) for _item in obj["absentTags"]] if obj.get("absentTags") is not None else None,
            "presentTags": [GoogleCloudDatacatalogV1Tag.from_dict(_item) for _item in obj["presentTags"]] if obj.get("presentTags") is not None else None,
            "v1Entry": GoogleCloudDatacatalogV1Entry.from_dict(obj["v1Entry"]) if obj.get("v1Entry") is not None else None
        })
        return _obj



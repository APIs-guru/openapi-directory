# coding: utf-8

"""
    Google Cloud Data Catalog API

    A fully managed and highly scalable data discovery and metadata management service. 

    The version of the OpenAPI document: v1beta1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudDatacatalogV1beta1SearchCatalogResult(BaseModel):
    """
    A result that appears in the response of a search request. Each result captures details of one entry that matches the search.
    """ # noqa: E501
    linked_resource: Optional[StrictStr] = Field(default=None, description="The full name of the cloud resource the entry belongs to. See: https://cloud.google.com/apis/design/resource_names#full_resource_name. Example: * `//bigquery.googleapis.com/projects/projectId/datasets/datasetId/tables/tableId`", alias="linkedResource")
    modify_time: Optional[StrictStr] = Field(default=None, description="Last-modified timestamp of the entry from the managing system.", alias="modifyTime")
    relative_resource_name: Optional[StrictStr] = Field(default=None, description="The relative resource name of the resource in URL format. Examples: * `projects/{project_id}/locations/{location_id}/entryGroups/{entry_group_id}/entries/{entry_id}` * `projects/{project_id}/tagTemplates/{tag_template_id}`", alias="relativeResourceName")
    search_result_subtype: Optional[StrictStr] = Field(default=None, description="Sub-type of the search result. This is a dot-delimited description of the resource's full type, and is the same as the value callers would provide in the \"type\" search facet. Examples: `entry.table`, `entry.dataStream`, `tagTemplate`.", alias="searchResultSubtype")
    search_result_type: Optional[StrictStr] = Field(default=None, description="Type of the search result. This field can be used to determine which Get method to call to fetch the full resource.", alias="searchResultType")
    __properties: ClassVar[List[str]] = ["linkedResource", "modifyTime", "relativeResourceName", "searchResultSubtype", "searchResultType"]

    @field_validator('search_result_type')
    def search_result_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['SEARCH_RESULT_TYPE_UNSPECIFIED', 'ENTRY', 'TAG_TEMPLATE', 'ENTRY_GROUP']):
            raise ValueError("must be one of enum values ('SEARCH_RESULT_TYPE_UNSPECIFIED', 'ENTRY', 'TAG_TEMPLATE', 'ENTRY_GROUP')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudDatacatalogV1beta1SearchCatalogResult from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudDatacatalogV1beta1SearchCatalogResult from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "linkedResource": obj.get("linkedResource"),
            "modifyTime": obj.get("modifyTime"),
            "relativeResourceName": obj.get("relativeResourceName"),
            "searchResultSubtype": obj.get("searchResultSubtype"),
            "searchResultType": obj.get("searchResultType")
        })
        return _obj



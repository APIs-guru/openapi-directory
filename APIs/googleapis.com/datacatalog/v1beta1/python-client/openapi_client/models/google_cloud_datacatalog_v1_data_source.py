# coding: utf-8

"""
    Google Cloud Data Catalog API

    A fully managed and highly scalable data discovery and metadata management service. 

    The version of the OpenAPI document: v1beta1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_cloud_datacatalog_v1_storage_properties import GoogleCloudDatacatalogV1StorageProperties
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudDatacatalogV1DataSource(BaseModel):
    """
    Physical location of an entry.
    """ # noqa: E501
    resource: Optional[StrictStr] = Field(default=None, description="Full name of a resource as defined by the service. For example: `//bigquery.googleapis.com/projects/{PROJECT_ID}/locations/{LOCATION}/datasets/{DATASET_ID}/tables/{TABLE_ID}`")
    service: Optional[StrictStr] = Field(default=None, description="Service that physically stores the data.")
    source_entry: Optional[StrictStr] = Field(default=None, description="Output only. Data Catalog entry name, if applicable.", alias="sourceEntry")
    storage_properties: Optional[GoogleCloudDatacatalogV1StorageProperties] = Field(default=None, alias="storageProperties")
    __properties: ClassVar[List[str]] = ["resource", "service", "sourceEntry", "storageProperties"]

    @field_validator('service')
    def service_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['SERVICE_UNSPECIFIED', 'CLOUD_STORAGE', 'BIGQUERY']):
            raise ValueError("must be one of enum values ('SERVICE_UNSPECIFIED', 'CLOUD_STORAGE', 'BIGQUERY')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudDatacatalogV1DataSource from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "source_entry",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of storage_properties
        if self.storage_properties:
            _dict['storageProperties'] = self.storage_properties.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudDatacatalogV1DataSource from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "resource": obj.get("resource"),
            "service": obj.get("service"),
            "sourceEntry": obj.get("sourceEntry"),
            "storageProperties": GoogleCloudDatacatalogV1StorageProperties.from_dict(obj["storageProperties"]) if obj.get("storageProperties") is not None else None
        })
        return _obj



# coding: utf-8

"""
    Google Cloud Data Catalog API

    A fully managed and highly scalable data discovery and metadata management service. 

    The version of the OpenAPI document: v1beta1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudDatacatalogV1beta1ColumnSchema(BaseModel):
    """
    Representation of a column within a schema. Columns could be nested inside other columns.
    """ # noqa: E501
    column: Optional[StrictStr] = Field(default=None, description="Required. Name of the column.")
    description: Optional[StrictStr] = Field(default=None, description="Optional. Description of the column. Default value is an empty string.")
    mode: Optional[StrictStr] = Field(default=None, description="Optional. A column's mode indicates whether the values in this column are required, nullable, etc. Only `NULLABLE`, `REQUIRED` and `REPEATED` are supported. Default mode is `NULLABLE`.")
    subcolumns: Optional[List[GoogleCloudDatacatalogV1beta1ColumnSchema]] = Field(default=None, description="Optional. Schema of sub-columns. A column can have zero or more sub-columns.")
    type: Optional[StrictStr] = Field(default=None, description="Required. Type of the column.")
    __properties: ClassVar[List[str]] = ["column", "description", "mode", "subcolumns", "type"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudDatacatalogV1beta1ColumnSchema from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in subcolumns (list)
        _items = []
        if self.subcolumns:
            for _item_subcolumns in self.subcolumns:
                if _item_subcolumns:
                    _items.append(_item_subcolumns.to_dict())
            _dict['subcolumns'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudDatacatalogV1beta1ColumnSchema from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "column": obj.get("column"),
            "description": obj.get("description"),
            "mode": obj.get("mode"),
            "subcolumns": [GoogleCloudDatacatalogV1beta1ColumnSchema.from_dict(_item) for _item in obj["subcolumns"]] if obj.get("subcolumns") is not None else None,
            "type": obj.get("type")
        })
        return _obj

# TODO: Rewrite to not use raise_errors
GoogleCloudDatacatalogV1beta1ColumnSchema.model_rebuild(raise_errors=False)


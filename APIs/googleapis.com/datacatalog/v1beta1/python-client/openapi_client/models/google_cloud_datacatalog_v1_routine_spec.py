# coding: utf-8

"""
    Google Cloud Data Catalog API

    A fully managed and highly scalable data discovery and metadata management service. 

    The version of the OpenAPI document: v1beta1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_cloud_datacatalog_v1_big_query_routine_spec import GoogleCloudDatacatalogV1BigQueryRoutineSpec
from openapi_client.models.google_cloud_datacatalog_v1_routine_spec_argument import GoogleCloudDatacatalogV1RoutineSpecArgument
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudDatacatalogV1RoutineSpec(BaseModel):
    """
    Specification that applies to a routine. Valid only for entries with the `ROUTINE` type.
    """ # noqa: E501
    bigquery_routine_spec: Optional[GoogleCloudDatacatalogV1BigQueryRoutineSpec] = Field(default=None, alias="bigqueryRoutineSpec")
    definition_body: Optional[StrictStr] = Field(default=None, description="The body of the routine.", alias="definitionBody")
    language: Optional[StrictStr] = Field(default=None, description="The language the routine is written in. The exact value depends on the source system. For BigQuery routines, possible values are: * `SQL` * `JAVASCRIPT`")
    return_type: Optional[StrictStr] = Field(default=None, description="Return type of the argument. The exact value depends on the source system and the language.", alias="returnType")
    routine_arguments: Optional[List[GoogleCloudDatacatalogV1RoutineSpecArgument]] = Field(default=None, description="Arguments of the routine.", alias="routineArguments")
    routine_type: Optional[StrictStr] = Field(default=None, description="The type of the routine.", alias="routineType")
    __properties: ClassVar[List[str]] = ["bigqueryRoutineSpec", "definitionBody", "language", "returnType", "routineArguments", "routineType"]

    @field_validator('routine_type')
    def routine_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['ROUTINE_TYPE_UNSPECIFIED', 'SCALAR_FUNCTION', 'PROCEDURE']):
            raise ValueError("must be one of enum values ('ROUTINE_TYPE_UNSPECIFIED', 'SCALAR_FUNCTION', 'PROCEDURE')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudDatacatalogV1RoutineSpec from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of bigquery_routine_spec
        if self.bigquery_routine_spec:
            _dict['bigqueryRoutineSpec'] = self.bigquery_routine_spec.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in routine_arguments (list)
        _items = []
        if self.routine_arguments:
            for _item_routine_arguments in self.routine_arguments:
                if _item_routine_arguments:
                    _items.append(_item_routine_arguments.to_dict())
            _dict['routineArguments'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudDatacatalogV1RoutineSpec from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "bigqueryRoutineSpec": GoogleCloudDatacatalogV1BigQueryRoutineSpec.from_dict(obj["bigqueryRoutineSpec"]) if obj.get("bigqueryRoutineSpec") is not None else None,
            "definitionBody": obj.get("definitionBody"),
            "language": obj.get("language"),
            "returnType": obj.get("returnType"),
            "routineArguments": [GoogleCloudDatacatalogV1RoutineSpecArgument.from_dict(_item) for _item in obj["routineArguments"]] if obj.get("routineArguments") is not None else None,
            "routineType": obj.get("routineType")
        })
        return _obj



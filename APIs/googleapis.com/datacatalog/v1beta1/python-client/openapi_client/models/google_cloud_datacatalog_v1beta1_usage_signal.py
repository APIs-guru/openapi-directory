# coding: utf-8

"""
    Google Cloud Data Catalog API

    A fully managed and highly scalable data discovery and metadata management service. 

    The version of the OpenAPI document: v1beta1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_cloud_datacatalog_v1beta1_usage_stats import GoogleCloudDatacatalogV1beta1UsageStats
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudDatacatalogV1beta1UsageSignal(BaseModel):
    """
    The set of all usage signals that we store in Data Catalog.
    """ # noqa: E501
    update_time: Optional[StrictStr] = Field(default=None, description="The timestamp of the end of the usage statistics duration.", alias="updateTime")
    usage_within_time_range: Optional[Dict[str, GoogleCloudDatacatalogV1beta1UsageStats]] = Field(default=None, description="Usage statistics over each of the pre-defined time ranges, supported strings for time ranges are {\"24H\", \"7D\", \"30D\"}.", alias="usageWithinTimeRange")
    __properties: ClassVar[List[str]] = ["updateTime", "usageWithinTimeRange"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudDatacatalogV1beta1UsageSignal from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each value in usage_within_time_range (dict)
        _field_dict = {}
        if self.usage_within_time_range:
            for _key_usage_within_time_range in self.usage_within_time_range:
                if self.usage_within_time_range[_key_usage_within_time_range]:
                    _field_dict[_key_usage_within_time_range] = self.usage_within_time_range[_key_usage_within_time_range].to_dict()
            _dict['usageWithinTimeRange'] = _field_dict
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudDatacatalogV1beta1UsageSignal from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "updateTime": obj.get("updateTime"),
            "usageWithinTimeRange": dict(
                (_k, GoogleCloudDatacatalogV1beta1UsageStats.from_dict(_v))
                for _k, _v in obj["usageWithinTimeRange"].items()
            )
            if obj.get("usageWithinTimeRange") is not None
            else None
        })
        return _obj



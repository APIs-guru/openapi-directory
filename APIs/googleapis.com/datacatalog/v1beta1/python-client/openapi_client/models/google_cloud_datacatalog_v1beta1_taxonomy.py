# coding: utf-8

"""
    Google Cloud Data Catalog API

    A fully managed and highly scalable data discovery and metadata management service. 

    The version of the OpenAPI document: v1beta1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_cloud_datacatalog_v1beta1_system_timestamps import GoogleCloudDatacatalogV1beta1SystemTimestamps
from openapi_client.models.google_cloud_datacatalog_v1beta1_taxonomy_service import GoogleCloudDatacatalogV1beta1TaxonomyService
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudDatacatalogV1beta1Taxonomy(BaseModel):
    """
    A taxonomy is a collection of policy tags that classify data along a common axis. For instance a data *sensitivity* taxonomy could contain policy tags denoting PII such as age, zipcode, and SSN. A data *origin* taxonomy could contain policy tags to distinguish user data, employee data, partner data, public data.
    """ # noqa: E501
    activated_policy_types: Optional[List[StrictStr]] = Field(default=None, description="Optional. A list of policy types that are activated for this taxonomy. If not set, defaults to an empty list.", alias="activatedPolicyTypes")
    description: Optional[StrictStr] = Field(default=None, description="Optional. Description of this taxonomy. It must: contain only unicode characters, tabs, newlines, carriage returns and page breaks; and be at most 2000 bytes long when encoded in UTF-8. If not set, defaults to an empty description.")
    display_name: Optional[StrictStr] = Field(default=None, description="Required. User defined name of this taxonomy. It must: contain only unicode letters, numbers, underscores, dashes and spaces; not start or end with spaces; and be at most 200 bytes long when encoded in UTF-8. The taxonomy display name must be unique within an organization.", alias="displayName")
    name: Optional[StrictStr] = Field(default=None, description="Identifier. Resource name of this taxonomy, whose format is: \"projects/{project_number}/locations/{location_id}/taxonomies/{id}\".")
    policy_tag_count: Optional[StrictInt] = Field(default=None, description="Output only. Number of policy tags contained in this taxonomy.", alias="policyTagCount")
    service: Optional[GoogleCloudDatacatalogV1beta1TaxonomyService] = None
    taxonomy_timestamps: Optional[GoogleCloudDatacatalogV1beta1SystemTimestamps] = Field(default=None, alias="taxonomyTimestamps")
    __properties: ClassVar[List[str]] = ["activatedPolicyTypes", "description", "displayName", "name", "policyTagCount", "service", "taxonomyTimestamps"]

    @field_validator('activated_policy_types')
    def activated_policy_types_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        for i in value:
            if i not in set(['POLICY_TYPE_UNSPECIFIED', 'FINE_GRAINED_ACCESS_CONTROL']):
                raise ValueError("each list item must be one of ('POLICY_TYPE_UNSPECIFIED', 'FINE_GRAINED_ACCESS_CONTROL')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudDatacatalogV1beta1Taxonomy from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "policy_tag_count",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of service
        if self.service:
            _dict['service'] = self.service.to_dict()
        # override the default output from pydantic by calling `to_dict()` of taxonomy_timestamps
        if self.taxonomy_timestamps:
            _dict['taxonomyTimestamps'] = self.taxonomy_timestamps.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudDatacatalogV1beta1Taxonomy from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "activatedPolicyTypes": obj.get("activatedPolicyTypes"),
            "description": obj.get("description"),
            "displayName": obj.get("displayName"),
            "name": obj.get("name"),
            "policyTagCount": obj.get("policyTagCount"),
            "service": GoogleCloudDatacatalogV1beta1TaxonomyService.from_dict(obj["service"]) if obj.get("service") is not None else None,
            "taxonomyTimestamps": GoogleCloudDatacatalogV1beta1SystemTimestamps.from_dict(obj["taxonomyTimestamps"]) if obj.get("taxonomyTimestamps") is not None else None
        })
        return _obj



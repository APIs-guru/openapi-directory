# coding: utf-8

"""
    Google Cloud Data Catalog API

    A fully managed and highly scalable data discovery and metadata management service. 

    The version of the OpenAPI document: v1beta1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_cloud_datacatalog_v1beta1_field_type import GoogleCloudDatacatalogV1beta1FieldType
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudDatacatalogV1beta1TagTemplateField(BaseModel):
    """
    The template for an individual field within a tag template.
    """ # noqa: E501
    description: Optional[StrictStr] = Field(default=None, description="The description for this field. Defaults to an empty string.")
    display_name: Optional[StrictStr] = Field(default=None, description="The display name for this field. Defaults to an empty string.", alias="displayName")
    is_required: Optional[StrictBool] = Field(default=None, description="Whether this is a required field. Defaults to false.", alias="isRequired")
    name: Optional[StrictStr] = Field(default=None, description="Output only. The resource name of the tag template field in URL format. Example: * projects/{project_id}/locations/{location}/tagTemplates/{tag_template}/fields/{field} Note that this TagTemplateField may not actually be stored in the location in this name.")
    order: Optional[StrictInt] = Field(default=None, description="The order of this field with respect to other fields in this tag template. A higher value indicates a more important field. The value can be negative. Multiple fields can have the same order, and field orders within a tag do not have to be sequential.")
    type: Optional[GoogleCloudDatacatalogV1beta1FieldType] = None
    __properties: ClassVar[List[str]] = ["description", "displayName", "isRequired", "name", "order", "type"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudDatacatalogV1beta1TagTemplateField from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "name",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of type
        if self.type:
            _dict['type'] = self.type.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudDatacatalogV1beta1TagTemplateField from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "description": obj.get("description"),
            "displayName": obj.get("displayName"),
            "isRequired": obj.get("isRequired"),
            "name": obj.get("name"),
            "order": obj.get("order"),
            "type": GoogleCloudDatacatalogV1beta1FieldType.from_dict(obj["type"]) if obj.get("type") is not None else None
        })
        return _obj



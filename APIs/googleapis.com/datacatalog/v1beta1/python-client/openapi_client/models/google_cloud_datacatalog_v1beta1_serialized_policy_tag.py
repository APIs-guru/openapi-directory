# coding: utf-8

"""
    Google Cloud Data Catalog API

    A fully managed and highly scalable data discovery and metadata management service. 

    The version of the OpenAPI document: v1beta1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudDatacatalogV1beta1SerializedPolicyTag(BaseModel):
    """
    Message representing one policy tag when exported as a nested proto.
    """ # noqa: E501
    child_policy_tags: Optional[List[GoogleCloudDatacatalogV1beta1SerializedPolicyTag]] = Field(default=None, description="Children of the policy tag if any.", alias="childPolicyTags")
    description: Optional[StrictStr] = Field(default=None, description="Description of the serialized policy tag. The length of the description is limited to 2000 bytes when encoded in UTF-8. If not set, defaults to an empty description.")
    display_name: Optional[StrictStr] = Field(default=None, description="Required. Display name of the policy tag. Max 200 bytes when encoded in UTF-8.", alias="displayName")
    policy_tag: Optional[StrictStr] = Field(default=None, description="Resource name of the policy tag. This field will be ignored when calling ImportTaxonomies.", alias="policyTag")
    __properties: ClassVar[List[str]] = ["childPolicyTags", "description", "displayName", "policyTag"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudDatacatalogV1beta1SerializedPolicyTag from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in child_policy_tags (list)
        _items = []
        if self.child_policy_tags:
            for _item_child_policy_tags in self.child_policy_tags:
                if _item_child_policy_tags:
                    _items.append(_item_child_policy_tags.to_dict())
            _dict['childPolicyTags'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudDatacatalogV1beta1SerializedPolicyTag from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "childPolicyTags": [GoogleCloudDatacatalogV1beta1SerializedPolicyTag.from_dict(_item) for _item in obj["childPolicyTags"]] if obj.get("childPolicyTags") is not None else None,
            "description": obj.get("description"),
            "displayName": obj.get("displayName"),
            "policyTag": obj.get("policyTag")
        })
        return _obj

# TODO: Rewrite to not use raise_errors
GoogleCloudDatacatalogV1beta1SerializedPolicyTag.model_rebuild(raise_errors=False)


# coding: utf-8

"""
    Google Cloud Data Catalog API

    A fully managed and highly scalable data discovery and metadata management service. 

    The version of the OpenAPI document: v1beta1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.google_cloud_datacatalog_v1_dataplex_table_spec import GoogleCloudDatacatalogV1DataplexTableSpec

class TestGoogleCloudDatacatalogV1DataplexTableSpec(unittest.TestCase):
    """GoogleCloudDatacatalogV1DataplexTableSpec unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> GoogleCloudDatacatalogV1DataplexTableSpec:
        """Test GoogleCloudDatacatalogV1DataplexTableSpec
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `GoogleCloudDatacatalogV1DataplexTableSpec`
        """
        model = GoogleCloudDatacatalogV1DataplexTableSpec()
        if include_optional:
            return GoogleCloudDatacatalogV1DataplexTableSpec(
                dataplex_spec = openapi_client.models.google_cloud_datacatalog_v1_dataplex_spec.GoogleCloudDatacatalogV1DataplexSpec(
                    asset = '', 
                    compression_format = '', 
                    data_format = openapi_client.models.google_cloud_datacatalog_v1_physical_schema.GoogleCloudDatacatalogV1PhysicalSchema(
                        avro = openapi_client.models.google_cloud_datacatalog_v1_physical_schema_avro_schema.GoogleCloudDatacatalogV1PhysicalSchemaAvroSchema(
                            text = '', ), 
                        csv = openapi_client.models.google_cloud_datacatalog_v1_physical_schema_csv_schema.GoogleCloudDatacatalogV1PhysicalSchemaCsvSchema(), 
                        orc = openapi_client.models.google_cloud_datacatalog_v1_physical_schema_orc_schema.GoogleCloudDatacatalogV1PhysicalSchemaOrcSchema(), 
                        parquet = openapi_client.models.google_cloud_datacatalog_v1_physical_schema_parquet_schema.GoogleCloudDatacatalogV1PhysicalSchemaParquetSchema(), 
                        protobuf = openapi_client.models.google_cloud_datacatalog_v1_physical_schema_protobuf_schema.GoogleCloudDatacatalogV1PhysicalSchemaProtobufSchema(
                            text = '', ), 
                        thrift = openapi_client.models.google_cloud_datacatalog_v1_physical_schema_thrift_schema.GoogleCloudDatacatalogV1PhysicalSchemaThriftSchema(
                            text = '', ), ), 
                    project_id = '', ),
                external_tables = [
                    openapi_client.models.google_cloud_datacatalog_v1_dataplex_external_table.GoogleCloudDatacatalogV1DataplexExternalTable(
                        data_catalog_entry = '', 
                        fully_qualified_name = '', 
                        google_cloud_resource = '', 
                        system = 'INTEGRATED_SYSTEM_UNSPECIFIED', )
                    ],
                user_managed = True
            )
        else:
            return GoogleCloudDatacatalogV1DataplexTableSpec(
        )
        """

    def testGoogleCloudDatacatalogV1DataplexTableSpec(self):
        """Test GoogleCloudDatacatalogV1DataplexTableSpec"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

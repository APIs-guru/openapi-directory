# coding: utf-8

"""
    Google Cloud Data Catalog API

    A fully managed and highly scalable data discovery and metadata management service. 

    The version of the OpenAPI document: v1beta1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.google_cloud_datacatalog_v1beta1_serialized_policy_tag import GoogleCloudDatacatalogV1beta1SerializedPolicyTag

class TestGoogleCloudDatacatalogV1beta1SerializedPolicyTag(unittest.TestCase):
    """GoogleCloudDatacatalogV1beta1SerializedPolicyTag unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> GoogleCloudDatacatalogV1beta1SerializedPolicyTag:
        """Test GoogleCloudDatacatalogV1beta1SerializedPolicyTag
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `GoogleCloudDatacatalogV1beta1SerializedPolicyTag`
        """
        model = GoogleCloudDatacatalogV1beta1SerializedPolicyTag()
        if include_optional:
            return GoogleCloudDatacatalogV1beta1SerializedPolicyTag(
                child_policy_tags = [
                    openapi_client.models.google_cloud_datacatalog_v1beta1_serialized_policy_tag.GoogleCloudDatacatalogV1beta1SerializedPolicyTag(
                        description = '', 
                        display_name = '', 
                        policy_tag = '', )
                    ],
                description = '',
                display_name = '',
                policy_tag = ''
            )
        else:
            return GoogleCloudDatacatalogV1beta1SerializedPolicyTag(
        )
        """

    def testGoogleCloudDatacatalogV1beta1SerializedPolicyTag(self):
        """Test GoogleCloudDatacatalogV1beta1SerializedPolicyTag"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

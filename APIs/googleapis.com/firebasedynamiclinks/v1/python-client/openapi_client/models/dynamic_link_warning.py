# coding: utf-8

"""
    Firebase Dynamic Links API

    Programmatically creates and manages Firebase Dynamic Links.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class DynamicLinkWarning(BaseModel):
    """
    Dynamic Links warning messages.
    """ # noqa: E501
    warning_code: Optional[StrictStr] = Field(default=None, description="The warning code.", alias="warningCode")
    warning_document_link: Optional[StrictStr] = Field(default=None, description="The document describing the warning, and helps resolve.", alias="warningDocumentLink")
    warning_message: Optional[StrictStr] = Field(default=None, description="The warning message to help developers improve their requests.", alias="warningMessage")
    __properties: ClassVar[List[str]] = ["warningCode", "warningDocumentLink", "warningMessage"]

    @field_validator('warning_code')
    def warning_code_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['CODE_UNSPECIFIED', 'NOT_IN_PROJECT_ANDROID_PACKAGE_NAME', 'NOT_INTEGER_ANDROID_PACKAGE_MIN_VERSION', 'UNNECESSARY_ANDROID_PACKAGE_MIN_VERSION', 'NOT_URI_ANDROID_LINK', 'UNNECESSARY_ANDROID_LINK', 'NOT_URI_ANDROID_FALLBACK_LINK', 'BAD_URI_SCHEME_ANDROID_FALLBACK_LINK', 'NOT_IN_PROJECT_IOS_BUNDLE_ID', 'NOT_IN_PROJECT_IPAD_BUNDLE_ID', 'UNNECESSARY_IOS_URL_SCHEME', 'NOT_NUMERIC_IOS_APP_STORE_ID', 'UNNECESSARY_IOS_APP_STORE_ID', 'NOT_URI_IOS_FALLBACK_LINK', 'BAD_URI_SCHEME_IOS_FALLBACK_LINK', 'NOT_URI_IPAD_FALLBACK_LINK', 'BAD_URI_SCHEME_IPAD_FALLBACK_LINK', 'BAD_DEBUG_PARAM', 'BAD_AD_PARAM', 'DEPRECATED_PARAM', 'UNRECOGNIZED_PARAM', 'TOO_LONG_PARAM', 'NOT_URI_SOCIAL_IMAGE_LINK', 'BAD_URI_SCHEME_SOCIAL_IMAGE_LINK', 'NOT_URI_SOCIAL_URL', 'BAD_URI_SCHEME_SOCIAL_URL', 'LINK_LENGTH_TOO_LONG', 'LINK_WITH_FRAGMENTS', 'NOT_MATCHING_IOS_BUNDLE_ID_AND_STORE_ID']):
            raise ValueError("must be one of enum values ('CODE_UNSPECIFIED', 'NOT_IN_PROJECT_ANDROID_PACKAGE_NAME', 'NOT_INTEGER_ANDROID_PACKAGE_MIN_VERSION', 'UNNECESSARY_ANDROID_PACKAGE_MIN_VERSION', 'NOT_URI_ANDROID_LINK', 'UNNECESSARY_ANDROID_LINK', 'NOT_URI_ANDROID_FALLBACK_LINK', 'BAD_URI_SCHEME_ANDROID_FALLBACK_LINK', 'NOT_IN_PROJECT_IOS_BUNDLE_ID', 'NOT_IN_PROJECT_IPAD_BUNDLE_ID', 'UNNECESSARY_IOS_URL_SCHEME', 'NOT_NUMERIC_IOS_APP_STORE_ID', 'UNNECESSARY_IOS_APP_STORE_ID', 'NOT_URI_IOS_FALLBACK_LINK', 'BAD_URI_SCHEME_IOS_FALLBACK_LINK', 'NOT_URI_IPAD_FALLBACK_LINK', 'BAD_URI_SCHEME_IPAD_FALLBACK_LINK', 'BAD_DEBUG_PARAM', 'BAD_AD_PARAM', 'DEPRECATED_PARAM', 'UNRECOGNIZED_PARAM', 'TOO_LONG_PARAM', 'NOT_URI_SOCIAL_IMAGE_LINK', 'BAD_URI_SCHEME_SOCIAL_IMAGE_LINK', 'NOT_URI_SOCIAL_URL', 'BAD_URI_SCHEME_SOCIAL_URL', 'LINK_LENGTH_TOO_LONG', 'LINK_WITH_FRAGMENTS', 'NOT_MATCHING_IOS_BUNDLE_ID_AND_STORE_ID')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DynamicLinkWarning from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DynamicLinkWarning from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "warningCode": obj.get("warningCode"),
            "warningDocumentLink": obj.get("warningDocumentLink"),
            "warningMessage": obj.get("warningMessage")
        })
        return _obj



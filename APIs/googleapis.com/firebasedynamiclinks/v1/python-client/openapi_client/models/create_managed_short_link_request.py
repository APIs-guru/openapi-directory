# coding: utf-8

"""
    Firebase Dynamic Links API

    Programmatically creates and manages Firebase Dynamic Links.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.dynamic_link_info import DynamicLinkInfo
from openapi_client.models.suffix import Suffix
from typing import Optional, Set
from typing_extensions import Self

class CreateManagedShortLinkRequest(BaseModel):
    """
    Request to create a managed Short Dynamic Link.
    """ # noqa: E501
    dynamic_link_info: Optional[DynamicLinkInfo] = Field(default=None, alias="dynamicLinkInfo")
    long_dynamic_link: Optional[StrictStr] = Field(default=None, description="Full long Dynamic Link URL with desired query parameters specified. For example, \"https://sample.app.goo.gl/?link=http://www.google.com&apn=com.sample\", [Learn more](https://firebase.google.com/docs/reference/dynamic-links/link-shortener).", alias="longDynamicLink")
    name: Optional[StrictStr] = Field(default=None, description="Link name to associate with the link. It's used for marketer to identify manually-created links in the Firebase console (https://console.firebase.google.com/). Links must be named to be tracked.")
    sdk_version: Optional[StrictStr] = Field(default=None, description="Google SDK version. Version takes the form \"$major.$minor.$patch\"", alias="sdkVersion")
    suffix: Optional[Suffix] = None
    __properties: ClassVar[List[str]] = ["dynamicLinkInfo", "longDynamicLink", "name", "sdkVersion", "suffix"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CreateManagedShortLinkRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of dynamic_link_info
        if self.dynamic_link_info:
            _dict['dynamicLinkInfo'] = self.dynamic_link_info.to_dict()
        # override the default output from pydantic by calling `to_dict()` of suffix
        if self.suffix:
            _dict['suffix'] = self.suffix.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CreateManagedShortLinkRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "dynamicLinkInfo": DynamicLinkInfo.from_dict(obj["dynamicLinkInfo"]) if obj.get("dynamicLinkInfo") is not None else None,
            "longDynamicLink": obj.get("longDynamicLink"),
            "name": obj.get("name"),
            "sdkVersion": obj.get("sdkVersion"),
            "suffix": Suffix.from_dict(obj["suffix"]) if obj.get("suffix") is not None else None
        })
        return _obj



# coding: utf-8

"""
    Firebase Dynamic Links API

    Programmatically creates and manages Firebase Dynamic Links.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class IosInfo(BaseModel):
    """
    iOS related attributes to the Dynamic Link..
    """ # noqa: E501
    ios_app_store_id: Optional[StrictStr] = Field(default=None, description="iOS App Store ID.", alias="iosAppStoreId")
    ios_bundle_id: Optional[StrictStr] = Field(default=None, description="iOS bundle ID of the app.", alias="iosBundleId")
    ios_custom_scheme: Optional[StrictStr] = Field(default=None, description="Custom (destination) scheme to use for iOS. By default, weâ€™ll use the bundle ID as the custom scheme. Developer can override this behavior using this param.", alias="iosCustomScheme")
    ios_fallback_link: Optional[StrictStr] = Field(default=None, description="Link to open on iOS if the app is not installed.", alias="iosFallbackLink")
    ios_ipad_bundle_id: Optional[StrictStr] = Field(default=None, description="iPad bundle ID of the app.", alias="iosIpadBundleId")
    ios_ipad_fallback_link: Optional[StrictStr] = Field(default=None, description="If specified, this overrides the ios_fallback_link value on iPads.", alias="iosIpadFallbackLink")
    ios_minimum_version: Optional[StrictStr] = Field(default=None, description="iOS minimum version.", alias="iosMinimumVersion")
    __properties: ClassVar[List[str]] = ["iosAppStoreId", "iosBundleId", "iosCustomScheme", "iosFallbackLink", "iosIpadBundleId", "iosIpadFallbackLink", "iosMinimumVersion"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of IosInfo from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of IosInfo from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "iosAppStoreId": obj.get("iosAppStoreId"),
            "iosBundleId": obj.get("iosBundleId"),
            "iosCustomScheme": obj.get("iosCustomScheme"),
            "iosFallbackLink": obj.get("iosFallbackLink"),
            "iosIpadBundleId": obj.get("iosIpadBundleId"),
            "iosIpadFallbackLink": obj.get("iosIpadFallbackLink"),
            "iosMinimumVersion": obj.get("iosMinimumVersion")
        })
        return _obj



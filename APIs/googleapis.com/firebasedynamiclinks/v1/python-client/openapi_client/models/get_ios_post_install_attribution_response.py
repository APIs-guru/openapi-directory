# coding: utf-8

"""
    Firebase Dynamic Links API

    Programmatically creates and manages Firebase Dynamic Links.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class GetIosPostInstallAttributionResponse(BaseModel):
    """
    Response for iSDK to execute strong match flow for post-install attribution. Information of the resolved FDL link.
    """ # noqa: E501
    app_minimum_version: Optional[StrictStr] = Field(default=None, description="The minimum version for app, specified by dev through ?imv= parameter. Return to iSDK to allow app to evaluate if current version meets this.", alias="appMinimumVersion")
    attribution_confidence: Optional[StrictStr] = Field(default=None, description="The confidence of the returned attribution.", alias="attributionConfidence")
    deep_link: Optional[StrictStr] = Field(default=None, description="The deep-link attributed post-install via one of several techniques (device heuristics, copy unique).", alias="deepLink")
    external_browser_destination_link: Optional[StrictStr] = Field(default=None, description="User-agent specific custom-scheme URIs for iSDK to open. This will be set according to the user-agent tha the click was originally made in. There is no Safari-equivalent custom-scheme open URLs. ie: googlechrome://www.example.com ie: firefox://open-url?url=http://www.example.com ie: opera-http://example.com", alias="externalBrowserDestinationLink")
    fallback_link: Optional[StrictStr] = Field(default=None, description="The link to navigate to update the app if min version is not met. This is either (in order): 1) fallback link (from ?ifl= parameter, if specified by developer) or 2) AppStore URL (from ?isi= parameter, if specified), or 3) the payload link (from required link= parameter).", alias="fallbackLink")
    invitation_id: Optional[StrictStr] = Field(default=None, description="Invitation ID attributed post-install via one of several techniques (device heuristics, copy unique).", alias="invitationId")
    is_strong_match_executable: Optional[StrictBool] = Field(default=None, description="Instruction for iSDK to attemmpt to perform strong match. For instance, if browser does not support/allow cookie or outside of support browsers, this will be false.", alias="isStrongMatchExecutable")
    match_message: Optional[StrictStr] = Field(default=None, description="Describes why match failed, ie: \"discarded due to low confidence\". This message will be publicly visible.", alias="matchMessage")
    request_ip_version: Optional[StrictStr] = Field(default=None, description="Which IP version the request was made from.", alias="requestIpVersion")
    requested_link: Optional[StrictStr] = Field(default=None, description="Entire FDL (short or long) attributed post-install via one of several techniques (device heuristics, copy unique).", alias="requestedLink")
    resolved_link: Optional[StrictStr] = Field(default=None, description="The entire FDL, expanded from a short link. It is the same as the requested_link, if it is long. Parameters from this should not be used directly (ie: server can default utm_[campaign|medium|source] to a value when requested_link lack them, server determine the best fallback_link when requested_link specifies >1 fallback links).", alias="resolvedLink")
    utm_campaign: Optional[StrictStr] = Field(default=None, description="Scion campaign value to be propagated by iSDK to Scion at post-install.", alias="utmCampaign")
    utm_content: Optional[StrictStr] = Field(default=None, description="Scion content value to be propagated by iSDK to Scion at app-reopen.", alias="utmContent")
    utm_medium: Optional[StrictStr] = Field(default=None, description="Scion medium value to be propagated by iSDK to Scion at post-install.", alias="utmMedium")
    utm_source: Optional[StrictStr] = Field(default=None, description="Scion source value to be propagated by iSDK to Scion at post-install.", alias="utmSource")
    utm_term: Optional[StrictStr] = Field(default=None, description="Scion term value to be propagated by iSDK to Scion at app-reopen.", alias="utmTerm")
    __properties: ClassVar[List[str]] = ["appMinimumVersion", "attributionConfidence", "deepLink", "externalBrowserDestinationLink", "fallbackLink", "invitationId", "isStrongMatchExecutable", "matchMessage", "requestIpVersion", "requestedLink", "resolvedLink", "utmCampaign", "utmContent", "utmMedium", "utmSource", "utmTerm"]

    @field_validator('attribution_confidence')
    def attribution_confidence_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['UNKNOWN_ATTRIBUTION_CONFIDENCE', 'WEAK', 'DEFAULT', 'UNIQUE']):
            raise ValueError("must be one of enum values ('UNKNOWN_ATTRIBUTION_CONFIDENCE', 'WEAK', 'DEFAULT', 'UNIQUE')")
        return value

    @field_validator('request_ip_version')
    def request_ip_version_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['UNKNOWN_IP_VERSION', 'IP_V4', 'IP_V6']):
            raise ValueError("must be one of enum values ('UNKNOWN_IP_VERSION', 'IP_V4', 'IP_V6')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GetIosPostInstallAttributionResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GetIosPostInstallAttributionResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "appMinimumVersion": obj.get("appMinimumVersion"),
            "attributionConfidence": obj.get("attributionConfidence"),
            "deepLink": obj.get("deepLink"),
            "externalBrowserDestinationLink": obj.get("externalBrowserDestinationLink"),
            "fallbackLink": obj.get("fallbackLink"),
            "invitationId": obj.get("invitationId"),
            "isStrongMatchExecutable": obj.get("isStrongMatchExecutable"),
            "matchMessage": obj.get("matchMessage"),
            "requestIpVersion": obj.get("requestIpVersion"),
            "requestedLink": obj.get("requestedLink"),
            "resolvedLink": obj.get("resolvedLink"),
            "utmCampaign": obj.get("utmCampaign"),
            "utmContent": obj.get("utmContent"),
            "utmMedium": obj.get("utmMedium"),
            "utmSource": obj.get("utmSource"),
            "utmTerm": obj.get("utmTerm")
        })
        return _obj



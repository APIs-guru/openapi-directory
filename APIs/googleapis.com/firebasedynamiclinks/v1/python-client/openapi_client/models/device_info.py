# coding: utf-8

"""
    Firebase Dynamic Links API

    Programmatically creates and manages Firebase Dynamic Links.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class DeviceInfo(BaseModel):
    """
    Signals associated with the device making the request.
    """ # noqa: E501
    device_model_name: Optional[StrictStr] = Field(default=None, description="Device model name.", alias="deviceModelName")
    language_code: Optional[StrictStr] = Field(default=None, description="Device language code setting.", alias="languageCode")
    language_code_from_webview: Optional[StrictStr] = Field(default=None, description="Device language code setting obtained by executing JavaScript code in WebView.", alias="languageCodeFromWebview")
    language_code_raw: Optional[StrictStr] = Field(default=None, description="Device language code raw setting. iOS does returns language code in different format than iOS WebView. For example WebView returns en_US, but iOS returns en-US. Field below will return raw value returned by iOS.", alias="languageCodeRaw")
    screen_resolution_height: Optional[StrictStr] = Field(default=None, description="Device display resolution height.", alias="screenResolutionHeight")
    screen_resolution_width: Optional[StrictStr] = Field(default=None, description="Device display resolution width.", alias="screenResolutionWidth")
    timezone: Optional[StrictStr] = Field(default=None, description="Device timezone setting.")
    __properties: ClassVar[List[str]] = ["deviceModelName", "languageCode", "languageCodeFromWebview", "languageCodeRaw", "screenResolutionHeight", "screenResolutionWidth", "timezone"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DeviceInfo from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DeviceInfo from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "deviceModelName": obj.get("deviceModelName"),
            "languageCode": obj.get("languageCode"),
            "languageCodeFromWebview": obj.get("languageCodeFromWebview"),
            "languageCodeRaw": obj.get("languageCodeRaw"),
            "screenResolutionHeight": obj.get("screenResolutionHeight"),
            "screenResolutionWidth": obj.get("screenResolutionWidth"),
            "timezone": obj.get("timezone")
        })
        return _obj



# coding: utf-8

"""
    Firebase Dynamic Links API

    Programmatically creates and manages Firebase Dynamic Links.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class DynamicLinkEventStat(BaseModel):
    """
    Dynamic Link event stat.
    """ # noqa: E501
    count: Optional[StrictStr] = Field(default=None, description="The number of times this event occurred.")
    event: Optional[StrictStr] = Field(default=None, description="Link event.")
    platform: Optional[StrictStr] = Field(default=None, description="Requested platform.")
    __properties: ClassVar[List[str]] = ["count", "event", "platform"]

    @field_validator('event')
    def event_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['DYNAMIC_LINK_EVENT_UNSPECIFIED', 'CLICK', 'REDIRECT', 'APP_INSTALL', 'APP_FIRST_OPEN', 'APP_RE_OPEN']):
            raise ValueError("must be one of enum values ('DYNAMIC_LINK_EVENT_UNSPECIFIED', 'CLICK', 'REDIRECT', 'APP_INSTALL', 'APP_FIRST_OPEN', 'APP_RE_OPEN')")
        return value

    @field_validator('platform')
    def platform_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['DYNAMIC_LINK_PLATFORM_UNSPECIFIED', 'ANDROID', 'IOS', 'DESKTOP', 'OTHER']):
            raise ValueError("must be one of enum values ('DYNAMIC_LINK_PLATFORM_UNSPECIFIED', 'ANDROID', 'IOS', 'DESKTOP', 'OTHER')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DynamicLinkEventStat from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DynamicLinkEventStat from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "count": obj.get("count"),
            "event": obj.get("event"),
            "platform": obj.get("platform")
        })
        return _obj



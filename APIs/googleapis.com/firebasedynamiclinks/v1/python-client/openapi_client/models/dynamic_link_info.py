# coding: utf-8

"""
    Firebase Dynamic Links API

    Programmatically creates and manages Firebase Dynamic Links.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.analytics_info import AnalyticsInfo
from openapi_client.models.android_info import AndroidInfo
from openapi_client.models.desktop_info import DesktopInfo
from openapi_client.models.ios_info import IosInfo
from openapi_client.models.navigation_info import NavigationInfo
from openapi_client.models.social_meta_tag_info import SocialMetaTagInfo
from typing import Optional, Set
from typing_extensions import Self

class DynamicLinkInfo(BaseModel):
    """
    Information about a Dynamic Link.
    """ # noqa: E501
    analytics_info: Optional[AnalyticsInfo] = Field(default=None, alias="analyticsInfo")
    android_info: Optional[AndroidInfo] = Field(default=None, alias="androidInfo")
    desktop_info: Optional[DesktopInfo] = Field(default=None, alias="desktopInfo")
    domain_uri_prefix: Optional[StrictStr] = Field(default=None, description="E.g. https://maps.app.goo.gl, https://maps.page.link, https://g.co/maps More examples can be found in description of getNormalizedUriPrefix in j/c/g/firebase/dynamiclinks/uri/DdlDomain.java Will fallback to dynamic_link_domain is this field is missing", alias="domainUriPrefix")
    dynamic_link_domain: Optional[StrictStr] = Field(default=None, description="Dynamic Links domain that the project owns, e.g. abcd.app.goo.gl [Learn more](https://firebase.google.com/docs/dynamic-links/android/receive) on how to set up Dynamic Link domain associated with your Firebase project. Required if missing domain_uri_prefix.", alias="dynamicLinkDomain")
    ios_info: Optional[IosInfo] = Field(default=None, alias="iosInfo")
    link: Optional[StrictStr] = Field(default=None, description="The link your app will open, You can specify any URL your app can handle. This link must be a well-formatted URL, be properly URL-encoded, and use the HTTP or HTTPS scheme. See 'link' parameters in the [documentation](https://firebase.google.com/docs/dynamic-links/create-manually). Required.")
    navigation_info: Optional[NavigationInfo] = Field(default=None, alias="navigationInfo")
    social_meta_tag_info: Optional[SocialMetaTagInfo] = Field(default=None, alias="socialMetaTagInfo")
    __properties: ClassVar[List[str]] = ["analyticsInfo", "androidInfo", "desktopInfo", "domainUriPrefix", "dynamicLinkDomain", "iosInfo", "link", "navigationInfo", "socialMetaTagInfo"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DynamicLinkInfo from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of analytics_info
        if self.analytics_info:
            _dict['analyticsInfo'] = self.analytics_info.to_dict()
        # override the default output from pydantic by calling `to_dict()` of android_info
        if self.android_info:
            _dict['androidInfo'] = self.android_info.to_dict()
        # override the default output from pydantic by calling `to_dict()` of desktop_info
        if self.desktop_info:
            _dict['desktopInfo'] = self.desktop_info.to_dict()
        # override the default output from pydantic by calling `to_dict()` of ios_info
        if self.ios_info:
            _dict['iosInfo'] = self.ios_info.to_dict()
        # override the default output from pydantic by calling `to_dict()` of navigation_info
        if self.navigation_info:
            _dict['navigationInfo'] = self.navigation_info.to_dict()
        # override the default output from pydantic by calling `to_dict()` of social_meta_tag_info
        if self.social_meta_tag_info:
            _dict['socialMetaTagInfo'] = self.social_meta_tag_info.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DynamicLinkInfo from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "analyticsInfo": AnalyticsInfo.from_dict(obj["analyticsInfo"]) if obj.get("analyticsInfo") is not None else None,
            "androidInfo": AndroidInfo.from_dict(obj["androidInfo"]) if obj.get("androidInfo") is not None else None,
            "desktopInfo": DesktopInfo.from_dict(obj["desktopInfo"]) if obj.get("desktopInfo") is not None else None,
            "domainUriPrefix": obj.get("domainUriPrefix"),
            "dynamicLinkDomain": obj.get("dynamicLinkDomain"),
            "iosInfo": IosInfo.from_dict(obj["iosInfo"]) if obj.get("iosInfo") is not None else None,
            "link": obj.get("link"),
            "navigationInfo": NavigationInfo.from_dict(obj["navigationInfo"]) if obj.get("navigationInfo") is not None else None,
            "socialMetaTagInfo": SocialMetaTagInfo.from_dict(obj["socialMetaTagInfo"]) if obj.get("socialMetaTagInfo") is not None else None
        })
        return _obj



# coding: utf-8

"""
    Firebase Dynamic Links API

    Programmatically creates and manages Firebase Dynamic Links.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class GetIosReopenAttributionResponse(BaseModel):
    """
    Response for iSDK to get reopen attribution for app universal link open deeplinking. This endpoint is meant for only iOS requests.
    """ # noqa: E501
    deep_link: Optional[StrictStr] = Field(default=None, description="The deep-link attributed the app universal link open. For both regular FDL links and invite FDL links.", alias="deepLink")
    invitation_id: Optional[StrictStr] = Field(default=None, description="Optional invitation ID, for only invite typed requested FDL links.", alias="invitationId")
    ios_min_app_version: Optional[StrictStr] = Field(default=None, description="FDL input value of the \"&imv=\" parameter, minimum app version to be returned to Google Firebase SDK running on iOS-9.", alias="iosMinAppVersion")
    resolved_link: Optional[StrictStr] = Field(default=None, description="The entire FDL, expanded from a short link. It is the same as the requested_link, if it is long.", alias="resolvedLink")
    utm_campaign: Optional[StrictStr] = Field(default=None, description="Scion campaign value to be propagated by iSDK to Scion at app-reopen.", alias="utmCampaign")
    utm_content: Optional[StrictStr] = Field(default=None, description="Scion content value to be propagated by iSDK to Scion at app-reopen.", alias="utmContent")
    utm_medium: Optional[StrictStr] = Field(default=None, description="Scion medium value to be propagated by iSDK to Scion at app-reopen.", alias="utmMedium")
    utm_source: Optional[StrictStr] = Field(default=None, description="Scion source value to be propagated by iSDK to Scion at app-reopen.", alias="utmSource")
    utm_term: Optional[StrictStr] = Field(default=None, description="Scion term value to be propagated by iSDK to Scion at app-reopen.", alias="utmTerm")
    __properties: ClassVar[List[str]] = ["deepLink", "invitationId", "iosMinAppVersion", "resolvedLink", "utmCampaign", "utmContent", "utmMedium", "utmSource", "utmTerm"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GetIosReopenAttributionResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GetIosReopenAttributionResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "deepLink": obj.get("deepLink"),
            "invitationId": obj.get("invitationId"),
            "iosMinAppVersion": obj.get("iosMinAppVersion"),
            "resolvedLink": obj.get("resolvedLink"),
            "utmCampaign": obj.get("utmCampaign"),
            "utmContent": obj.get("utmContent"),
            "utmMedium": obj.get("utmMedium"),
            "utmSource": obj.get("utmSource"),
            "utmTerm": obj.get("utmTerm")
        })
        return _obj



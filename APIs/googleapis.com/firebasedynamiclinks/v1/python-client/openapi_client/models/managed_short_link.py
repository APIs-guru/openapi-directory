# coding: utf-8

"""
    Firebase Dynamic Links API

    Programmatically creates and manages Firebase Dynamic Links.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.dynamic_link_info import DynamicLinkInfo
from typing import Optional, Set
from typing_extensions import Self

class ManagedShortLink(BaseModel):
    """
    Managed Short Link.
    """ # noqa: E501
    creation_time: Optional[StrictStr] = Field(default=None, description="Creation timestamp of the short link.", alias="creationTime")
    flagged_attribute: Optional[List[StrictStr]] = Field(default=None, description="Attributes that have been flagged about this short url.", alias="flaggedAttribute")
    info: Optional[DynamicLinkInfo] = None
    link: Optional[StrictStr] = Field(default=None, description="Short durable link url, for example, \"https://sample.app.goo.gl/xyz123\". Required.")
    link_name: Optional[StrictStr] = Field(default=None, description="Link name defined by the creator. Required.", alias="linkName")
    visibility: Optional[StrictStr] = Field(default=None, description="Visibility status of link.")
    __properties: ClassVar[List[str]] = ["creationTime", "flaggedAttribute", "info", "link", "linkName", "visibility"]

    @field_validator('flagged_attribute')
    def flagged_attribute_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        for i in value:
            if i not in set(['UNSPECIFIED_ATTRIBUTE', 'SPAM']):
                raise ValueError("each list item must be one of ('UNSPECIFIED_ATTRIBUTE', 'SPAM')")
        return value

    @field_validator('visibility')
    def visibility_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['UNSPECIFIED_VISIBILITY', 'UNARCHIVED', 'ARCHIVED', 'NEVER_SHOWN']):
            raise ValueError("must be one of enum values ('UNSPECIFIED_VISIBILITY', 'UNARCHIVED', 'ARCHIVED', 'NEVER_SHOWN')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ManagedShortLink from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of info
        if self.info:
            _dict['info'] = self.info.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ManagedShortLink from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "creationTime": obj.get("creationTime"),
            "flaggedAttribute": obj.get("flaggedAttribute"),
            "info": DynamicLinkInfo.from_dict(obj["info"]) if obj.get("info") is not None else None,
            "link": obj.get("link"),
            "linkName": obj.get("linkName"),
            "visibility": obj.get("visibility")
        })
        return _obj



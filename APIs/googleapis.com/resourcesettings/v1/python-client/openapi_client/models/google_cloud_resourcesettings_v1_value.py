# coding: utf-8

"""
    Resource Settings API

    The Resource Settings API allows users to control and modify the behavior of their GCP resources (e.g., VM, firewall, Project, etc.) across the Cloud Resource Hierarchy.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_cloud_resourcesettings_v1_value_enum_value import GoogleCloudResourcesettingsV1ValueEnumValue
from openapi_client.models.google_cloud_resourcesettings_v1_value_string_map import GoogleCloudResourcesettingsV1ValueStringMap
from openapi_client.models.google_cloud_resourcesettings_v1_value_string_set import GoogleCloudResourcesettingsV1ValueStringSet
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudResourcesettingsV1Value(BaseModel):
    """
    The data in a setting value.
    """ # noqa: E501
    boolean_value: Optional[StrictBool] = Field(default=None, description="Defines this value as being a boolean value.", alias="booleanValue")
    duration_value: Optional[StrictStr] = Field(default=None, description="Defines this value as being a Duration.", alias="durationValue")
    enum_value: Optional[GoogleCloudResourcesettingsV1ValueEnumValue] = Field(default=None, alias="enumValue")
    string_map_value: Optional[GoogleCloudResourcesettingsV1ValueStringMap] = Field(default=None, alias="stringMapValue")
    string_set_value: Optional[GoogleCloudResourcesettingsV1ValueStringSet] = Field(default=None, alias="stringSetValue")
    string_value: Optional[StrictStr] = Field(default=None, description="Defines this value as being a string value.", alias="stringValue")
    __properties: ClassVar[List[str]] = ["booleanValue", "durationValue", "enumValue", "stringMapValue", "stringSetValue", "stringValue"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudResourcesettingsV1Value from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of enum_value
        if self.enum_value:
            _dict['enumValue'] = self.enum_value.to_dict()
        # override the default output from pydantic by calling `to_dict()` of string_map_value
        if self.string_map_value:
            _dict['stringMapValue'] = self.string_map_value.to_dict()
        # override the default output from pydantic by calling `to_dict()` of string_set_value
        if self.string_set_value:
            _dict['stringSetValue'] = self.string_set_value.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudResourcesettingsV1Value from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "booleanValue": obj.get("booleanValue"),
            "durationValue": obj.get("durationValue"),
            "enumValue": GoogleCloudResourcesettingsV1ValueEnumValue.from_dict(obj["enumValue"]) if obj.get("enumValue") is not None else None,
            "stringMapValue": GoogleCloudResourcesettingsV1ValueStringMap.from_dict(obj["stringMapValue"]) if obj.get("stringMapValue") is not None else None,
            "stringSetValue": GoogleCloudResourcesettingsV1ValueStringSet.from_dict(obj["stringSetValue"]) if obj.get("stringSetValue") is not None else None,
            "stringValue": obj.get("stringValue")
        })
        return _obj



# coding: utf-8

"""
    Resource Settings API

    The Resource Settings API allows users to control and modify the behavior of their GCP resources (e.g., VM, firewall, Project, etc.) across the Cloud Resource Hierarchy.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_cloud_resourcesettings_v1_value import GoogleCloudResourcesettingsV1Value
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudResourcesettingsV1SettingMetadata(BaseModel):
    """
    Metadata about a setting which is not editable by the end user.
    """ # noqa: E501
    data_type: Optional[StrictStr] = Field(default=None, description="The data type for this setting.", alias="dataType")
    default_value: Optional[GoogleCloudResourcesettingsV1Value] = Field(default=None, alias="defaultValue")
    description: Optional[StrictStr] = Field(default=None, description="A detailed description of what this setting does.")
    display_name: Optional[StrictStr] = Field(default=None, description="The human readable name for this setting.", alias="displayName")
    read_only: Optional[StrictBool] = Field(default=None, description="A flag indicating that values of this setting cannot be modified. See documentation for the specific setting for updates and reasons.", alias="readOnly")
    __properties: ClassVar[List[str]] = ["dataType", "defaultValue", "description", "displayName", "readOnly"]

    @field_validator('data_type')
    def data_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['DATA_TYPE_UNSPECIFIED', 'BOOLEAN', 'STRING', 'STRING_SET', 'ENUM_VALUE', 'DURATION_VALUE', 'STRING_MAP']):
            raise ValueError("must be one of enum values ('DATA_TYPE_UNSPECIFIED', 'BOOLEAN', 'STRING', 'STRING_SET', 'ENUM_VALUE', 'DURATION_VALUE', 'STRING_MAP')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudResourcesettingsV1SettingMetadata from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of default_value
        if self.default_value:
            _dict['defaultValue'] = self.default_value.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudResourcesettingsV1SettingMetadata from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "dataType": obj.get("dataType"),
            "defaultValue": GoogleCloudResourcesettingsV1Value.from_dict(obj["defaultValue"]) if obj.get("defaultValue") is not None else None,
            "description": obj.get("description"),
            "displayName": obj.get("displayName"),
            "readOnly": obj.get("readOnly")
        })
        return _obj



# coding: utf-8

"""
    Resource Settings API

    The Resource Settings API allows users to control and modify the behavior of their GCP resources (e.g., VM, firewall, Project, etc.) across the Cloud Resource Hierarchy.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_cloud_resourcesettings_v1_setting_metadata import GoogleCloudResourcesettingsV1SettingMetadata
from openapi_client.models.google_cloud_resourcesettings_v1_value import GoogleCloudResourcesettingsV1Value
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudResourcesettingsV1Setting(BaseModel):
    """
    The schema for settings.
    """ # noqa: E501
    effective_value: Optional[GoogleCloudResourcesettingsV1Value] = Field(default=None, alias="effectiveValue")
    etag: Optional[StrictStr] = Field(default=None, description="A fingerprint used for optimistic concurrency. See UpdateSetting for more details.")
    local_value: Optional[GoogleCloudResourcesettingsV1Value] = Field(default=None, alias="localValue")
    metadata: Optional[GoogleCloudResourcesettingsV1SettingMetadata] = None
    name: Optional[StrictStr] = Field(default=None, description="The resource name of the setting. Must be in one of the following forms: * `projects/{project_number}/settings/{setting_name}` * `folders/{folder_id}/settings/{setting_name}` * `organizations/{organization_id}/settings/{setting_name}` For example, \"/projects/123/settings/gcp-enableMyFeature\"")
    __properties: ClassVar[List[str]] = ["effectiveValue", "etag", "localValue", "metadata", "name"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudResourcesettingsV1Setting from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of effective_value
        if self.effective_value:
            _dict['effectiveValue'] = self.effective_value.to_dict()
        # override the default output from pydantic by calling `to_dict()` of local_value
        if self.local_value:
            _dict['localValue'] = self.local_value.to_dict()
        # override the default output from pydantic by calling `to_dict()` of metadata
        if self.metadata:
            _dict['metadata'] = self.metadata.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudResourcesettingsV1Setting from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "effectiveValue": GoogleCloudResourcesettingsV1Value.from_dict(obj["effectiveValue"]) if obj.get("effectiveValue") is not None else None,
            "etag": obj.get("etag"),
            "localValue": GoogleCloudResourcesettingsV1Value.from_dict(obj["localValue"]) if obj.get("localValue") is not None else None,
            "metadata": GoogleCloudResourcesettingsV1SettingMetadata.from_dict(obj["metadata"]) if obj.get("metadata") is not None else None,
            "name": obj.get("name")
        })
        return _obj



# coding: utf-8

"""
    OS Config API

    OS management tools that can be used for patch management, patch compliance, and configuration management on VM instances.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.patch_instance_filter_group_label import PatchInstanceFilterGroupLabel
from typing import Optional, Set
from typing_extensions import Self

class PatchInstanceFilter(BaseModel):
    """
    A filter to target VM instances for patching. The targeted VMs must meet all criteria specified. So if both labels and zones are specified, the patch job targets only VMs with those labels and in those zones.
    """ # noqa: E501
    all: Optional[StrictBool] = Field(default=None, description="Target all VM instances in the project. If true, no other criteria is permitted.")
    group_labels: Optional[List[PatchInstanceFilterGroupLabel]] = Field(default=None, description="Targets VM instances matching ANY of these GroupLabels. This allows targeting of disparate groups of VM instances.", alias="groupLabels")
    instance_name_prefixes: Optional[List[StrictStr]] = Field(default=None, description="Targets VMs whose name starts with one of these prefixes. Similar to labels, this is another way to group VMs when targeting configs, for example prefix=\"prod-\".", alias="instanceNamePrefixes")
    instances: Optional[List[StrictStr]] = Field(default=None, description="Targets any of the VM instances specified. Instances are specified by their URI in the form `zones/[ZONE]/instances/[INSTANCE_NAME]`, `projects/[PROJECT_ID]/zones/[ZONE]/instances/[INSTANCE_NAME]`, or `https://www.googleapis.com/compute/v1/projects/[PROJECT_ID]/zones/[ZONE]/instances/[INSTANCE_NAME]`")
    zones: Optional[List[StrictStr]] = Field(default=None, description="Targets VM instances in ANY of these zones. Leave empty to target VM instances in any zone.")
    __properties: ClassVar[List[str]] = ["all", "groupLabels", "instanceNamePrefixes", "instances", "zones"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PatchInstanceFilter from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in group_labels (list)
        _items = []
        if self.group_labels:
            for _item_group_labels in self.group_labels:
                if _item_group_labels:
                    _items.append(_item_group_labels.to_dict())
            _dict['groupLabels'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PatchInstanceFilter from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "all": obj.get("all"),
            "groupLabels": [PatchInstanceFilterGroupLabel.from_dict(_item) for _item in obj["groupLabels"]] if obj.get("groupLabels") is not None else None,
            "instanceNamePrefixes": obj.get("instanceNamePrefixes"),
            "instances": obj.get("instances"),
            "zones": obj.get("zones")
        })
        return _obj



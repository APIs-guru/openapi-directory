# coding: utf-8

"""
    OS Config API

    OS management tools that can be used for patch management, patch compliance, and configuration management on VM instances.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.vulnerability_report_vulnerability_details import VulnerabilityReportVulnerabilityDetails
from openapi_client.models.vulnerability_report_vulnerability_item import VulnerabilityReportVulnerabilityItem
from typing import Optional, Set
from typing_extensions import Self

class VulnerabilityReportVulnerability(BaseModel):
    """
    A vulnerability affecting the VM instance.
    """ # noqa: E501
    available_inventory_item_ids: Optional[List[StrictStr]] = Field(default=None, description="Corresponds to the `AVAILABLE_PACKAGE` inventory item on the VM. If the vulnerability report was not updated after the VM inventory update, these values might not display in VM inventory. If there is no available fix, the field is empty. The `inventory_item` value specifies the latest `SoftwarePackage` available to the VM that fixes the vulnerability.", alias="availableInventoryItemIds")
    create_time: Optional[StrictStr] = Field(default=None, description="The timestamp for when the vulnerability was first detected.", alias="createTime")
    details: Optional[VulnerabilityReportVulnerabilityDetails] = None
    installed_inventory_item_ids: Optional[List[StrictStr]] = Field(default=None, description="Corresponds to the `INSTALLED_PACKAGE` inventory item on the VM. This field displays the inventory items affected by this vulnerability. If the vulnerability report was not updated after the VM inventory update, these values might not display in VM inventory. For some distros, this field may be empty.", alias="installedInventoryItemIds")
    items: Optional[List[VulnerabilityReportVulnerabilityItem]] = Field(default=None, description="List of items affected by the vulnerability.")
    update_time: Optional[StrictStr] = Field(default=None, description="The timestamp for when the vulnerability was last modified.", alias="updateTime")
    __properties: ClassVar[List[str]] = ["availableInventoryItemIds", "createTime", "details", "installedInventoryItemIds", "items", "updateTime"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of VulnerabilityReportVulnerability from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of details
        if self.details:
            _dict['details'] = self.details.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in items (list)
        _items = []
        if self.items:
            for _item_items in self.items:
                if _item_items:
                    _items.append(_item_items.to_dict())
            _dict['items'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of VulnerabilityReportVulnerability from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "availableInventoryItemIds": obj.get("availableInventoryItemIds"),
            "createTime": obj.get("createTime"),
            "details": VulnerabilityReportVulnerabilityDetails.from_dict(obj["details"]) if obj.get("details") is not None else None,
            "installedInventoryItemIds": obj.get("installedInventoryItemIds"),
            "items": [VulnerabilityReportVulnerabilityItem.from_dict(_item) for _item in obj["items"]] if obj.get("items") is not None else None,
            "updateTime": obj.get("updateTime")
        })
        return _obj



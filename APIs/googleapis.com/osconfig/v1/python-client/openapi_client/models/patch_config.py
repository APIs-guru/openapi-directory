# coding: utf-8

"""
    OS Config API

    OS management tools that can be used for patch management, patch compliance, and configuration management on VM instances.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.apt_settings import AptSettings
from openapi_client.models.exec_step import ExecStep
from openapi_client.models.windows_update_settings import WindowsUpdateSettings
from openapi_client.models.yum_settings import YumSettings
from openapi_client.models.zypper_settings import ZypperSettings
from typing import Optional, Set
from typing_extensions import Self

class PatchConfig(BaseModel):
    """
    Patch configuration specifications. Contains details on how to apply the patch(es) to a VM instance.
    """ # noqa: E501
    apt: Optional[AptSettings] = None
    goo: Optional[Dict[str, Any]] = Field(default=None, description="Googet patching is performed by running `googet update`.")
    mig_instances_allowed: Optional[StrictBool] = Field(default=None, description="Allows the patch job to run on Managed instance groups (MIGs).", alias="migInstancesAllowed")
    post_step: Optional[ExecStep] = Field(default=None, alias="postStep")
    pre_step: Optional[ExecStep] = Field(default=None, alias="preStep")
    reboot_config: Optional[StrictStr] = Field(default=None, description="Post-patch reboot settings.", alias="rebootConfig")
    windows_update: Optional[WindowsUpdateSettings] = Field(default=None, alias="windowsUpdate")
    yum: Optional[YumSettings] = None
    zypper: Optional[ZypperSettings] = None
    __properties: ClassVar[List[str]] = ["apt", "goo", "migInstancesAllowed", "postStep", "preStep", "rebootConfig", "windowsUpdate", "yum", "zypper"]

    @field_validator('reboot_config')
    def reboot_config_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['REBOOT_CONFIG_UNSPECIFIED', 'DEFAULT', 'ALWAYS', 'NEVER']):
            raise ValueError("must be one of enum values ('REBOOT_CONFIG_UNSPECIFIED', 'DEFAULT', 'ALWAYS', 'NEVER')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PatchConfig from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of apt
        if self.apt:
            _dict['apt'] = self.apt.to_dict()
        # override the default output from pydantic by calling `to_dict()` of post_step
        if self.post_step:
            _dict['postStep'] = self.post_step.to_dict()
        # override the default output from pydantic by calling `to_dict()` of pre_step
        if self.pre_step:
            _dict['preStep'] = self.pre_step.to_dict()
        # override the default output from pydantic by calling `to_dict()` of windows_update
        if self.windows_update:
            _dict['windowsUpdate'] = self.windows_update.to_dict()
        # override the default output from pydantic by calling `to_dict()` of yum
        if self.yum:
            _dict['yum'] = self.yum.to_dict()
        # override the default output from pydantic by calling `to_dict()` of zypper
        if self.zypper:
            _dict['zypper'] = self.zypper.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PatchConfig from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "apt": AptSettings.from_dict(obj["apt"]) if obj.get("apt") is not None else None,
            "goo": obj.get("goo"),
            "migInstancesAllowed": obj.get("migInstancesAllowed"),
            "postStep": ExecStep.from_dict(obj["postStep"]) if obj.get("postStep") is not None else None,
            "preStep": ExecStep.from_dict(obj["preStep"]) if obj.get("preStep") is not None else None,
            "rebootConfig": obj.get("rebootConfig"),
            "windowsUpdate": WindowsUpdateSettings.from_dict(obj["windowsUpdate"]) if obj.get("windowsUpdate") is not None else None,
            "yum": YumSettings.from_dict(obj["yum"]) if obj.get("yum") is not None else None,
            "zypper": ZypperSettings.from_dict(obj["zypper"]) if obj.get("zypper") is not None else None
        })
        return _obj



# coding: utf-8

"""
    OS Config API

    OS management tools that can be used for patch management, patch compliance, and configuration management on VM instances.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.os_policy_assignment_report_os_policy_compliance_os_policy_resource_compliance import OSPolicyAssignmentReportOSPolicyComplianceOSPolicyResourceCompliance
from typing import Optional, Set
from typing_extensions import Self

class OSPolicyAssignmentReportOSPolicyCompliance(BaseModel):
    """
    Compliance data for an OS policy
    """ # noqa: E501
    compliance_state: Optional[StrictStr] = Field(default=None, description="The compliance state of the OS policy.", alias="complianceState")
    compliance_state_reason: Optional[StrictStr] = Field(default=None, description="The reason for the OS policy to be in an unknown compliance state. This field is always populated when `compliance_state` is `UNKNOWN`. If populated, the field can contain one of the following values: * `vm-not-running`: The VM was not running. * `os-policies-not-supported-by-agent`: The version of the OS Config agent running on the VM does not support running OS policies. * `no-agent-detected`: The OS Config agent is not detected for the VM. * `resource-execution-errors`: The OS Config agent encountered errors while executing one or more resources in the policy. See `os_policy_resource_compliances` for details. * `task-timeout`: The task sent to the agent to apply the policy timed out. * `unexpected-agent-state`: The OS Config agent did not report the final status of the task that attempted to apply the policy. Instead, the agent unexpectedly started working on a different task. This mostly happens when the agent or VM unexpectedly restarts while applying OS policies. * `internal-service-errors`: Internal service errors were encountered while attempting to apply the policy.", alias="complianceStateReason")
    os_policy_id: Optional[StrictStr] = Field(default=None, description="The OS policy id", alias="osPolicyId")
    os_policy_resource_compliances: Optional[List[OSPolicyAssignmentReportOSPolicyComplianceOSPolicyResourceCompliance]] = Field(default=None, description="Compliance data for each resource within the policy that is applied to the VM.", alias="osPolicyResourceCompliances")
    __properties: ClassVar[List[str]] = ["complianceState", "complianceStateReason", "osPolicyId", "osPolicyResourceCompliances"]

    @field_validator('compliance_state')
    def compliance_state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['UNKNOWN', 'COMPLIANT', 'NON_COMPLIANT']):
            raise ValueError("must be one of enum values ('UNKNOWN', 'COMPLIANT', 'NON_COMPLIANT')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of OSPolicyAssignmentReportOSPolicyCompliance from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in os_policy_resource_compliances (list)
        _items = []
        if self.os_policy_resource_compliances:
            for _item_os_policy_resource_compliances in self.os_policy_resource_compliances:
                if _item_os_policy_resource_compliances:
                    _items.append(_item_os_policy_resource_compliances.to_dict())
            _dict['osPolicyResourceCompliances'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of OSPolicyAssignmentReportOSPolicyCompliance from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "complianceState": obj.get("complianceState"),
            "complianceStateReason": obj.get("complianceStateReason"),
            "osPolicyId": obj.get("osPolicyId"),
            "osPolicyResourceCompliances": [OSPolicyAssignmentReportOSPolicyComplianceOSPolicyResourceCompliance.from_dict(_item) for _item in obj["osPolicyResourceCompliances"]] if obj.get("osPolicyResourceCompliances") is not None else None
        })
        return _obj



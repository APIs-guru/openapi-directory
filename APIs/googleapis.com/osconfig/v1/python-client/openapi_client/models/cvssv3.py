# coding: utf-8

"""
    OS Config API

    OS management tools that can be used for patch management, patch compliance, and configuration management on VM instances.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class CVSSv3(BaseModel):
    """
    Common Vulnerability Scoring System version 3. For details, see https://www.first.org/cvss/specification-document
    """ # noqa: E501
    attack_complexity: Optional[StrictStr] = Field(default=None, description="This metric describes the conditions beyond the attacker's control that must exist in order to exploit the vulnerability.", alias="attackComplexity")
    attack_vector: Optional[StrictStr] = Field(default=None, description="This metric reflects the context by which vulnerability exploitation is possible.", alias="attackVector")
    availability_impact: Optional[StrictStr] = Field(default=None, description="This metric measures the impact to the availability of the impacted component resulting from a successfully exploited vulnerability.", alias="availabilityImpact")
    base_score: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The base score is a function of the base metric scores. https://www.first.org/cvss/specification-document#Base-Metrics", alias="baseScore")
    confidentiality_impact: Optional[StrictStr] = Field(default=None, description="This metric measures the impact to the confidentiality of the information resources managed by a software component due to a successfully exploited vulnerability.", alias="confidentialityImpact")
    exploitability_score: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The Exploitability sub-score equation is derived from the Base Exploitability metrics. https://www.first.org/cvss/specification-document#2-1-Exploitability-Metrics", alias="exploitabilityScore")
    impact_score: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The Impact sub-score equation is derived from the Base Impact metrics.", alias="impactScore")
    integrity_impact: Optional[StrictStr] = Field(default=None, description="This metric measures the impact to integrity of a successfully exploited vulnerability.", alias="integrityImpact")
    privileges_required: Optional[StrictStr] = Field(default=None, description="This metric describes the level of privileges an attacker must possess before successfully exploiting the vulnerability.", alias="privilegesRequired")
    scope: Optional[StrictStr] = Field(default=None, description="The Scope metric captures whether a vulnerability in one vulnerable component impacts resources in components beyond its security scope.")
    user_interaction: Optional[StrictStr] = Field(default=None, description="This metric captures the requirement for a human user, other than the attacker, to participate in the successful compromise of the vulnerable component.", alias="userInteraction")
    __properties: ClassVar[List[str]] = ["attackComplexity", "attackVector", "availabilityImpact", "baseScore", "confidentialityImpact", "exploitabilityScore", "impactScore", "integrityImpact", "privilegesRequired", "scope", "userInteraction"]

    @field_validator('attack_complexity')
    def attack_complexity_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['ATTACK_COMPLEXITY_UNSPECIFIED', 'ATTACK_COMPLEXITY_LOW', 'ATTACK_COMPLEXITY_HIGH']):
            raise ValueError("must be one of enum values ('ATTACK_COMPLEXITY_UNSPECIFIED', 'ATTACK_COMPLEXITY_LOW', 'ATTACK_COMPLEXITY_HIGH')")
        return value

    @field_validator('attack_vector')
    def attack_vector_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['ATTACK_VECTOR_UNSPECIFIED', 'ATTACK_VECTOR_NETWORK', 'ATTACK_VECTOR_ADJACENT', 'ATTACK_VECTOR_LOCAL', 'ATTACK_VECTOR_PHYSICAL']):
            raise ValueError("must be one of enum values ('ATTACK_VECTOR_UNSPECIFIED', 'ATTACK_VECTOR_NETWORK', 'ATTACK_VECTOR_ADJACENT', 'ATTACK_VECTOR_LOCAL', 'ATTACK_VECTOR_PHYSICAL')")
        return value

    @field_validator('availability_impact')
    def availability_impact_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['IMPACT_UNSPECIFIED', 'IMPACT_HIGH', 'IMPACT_LOW', 'IMPACT_NONE']):
            raise ValueError("must be one of enum values ('IMPACT_UNSPECIFIED', 'IMPACT_HIGH', 'IMPACT_LOW', 'IMPACT_NONE')")
        return value

    @field_validator('confidentiality_impact')
    def confidentiality_impact_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['IMPACT_UNSPECIFIED', 'IMPACT_HIGH', 'IMPACT_LOW', 'IMPACT_NONE']):
            raise ValueError("must be one of enum values ('IMPACT_UNSPECIFIED', 'IMPACT_HIGH', 'IMPACT_LOW', 'IMPACT_NONE')")
        return value

    @field_validator('integrity_impact')
    def integrity_impact_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['IMPACT_UNSPECIFIED', 'IMPACT_HIGH', 'IMPACT_LOW', 'IMPACT_NONE']):
            raise ValueError("must be one of enum values ('IMPACT_UNSPECIFIED', 'IMPACT_HIGH', 'IMPACT_LOW', 'IMPACT_NONE')")
        return value

    @field_validator('privileges_required')
    def privileges_required_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['PRIVILEGES_REQUIRED_UNSPECIFIED', 'PRIVILEGES_REQUIRED_NONE', 'PRIVILEGES_REQUIRED_LOW', 'PRIVILEGES_REQUIRED_HIGH']):
            raise ValueError("must be one of enum values ('PRIVILEGES_REQUIRED_UNSPECIFIED', 'PRIVILEGES_REQUIRED_NONE', 'PRIVILEGES_REQUIRED_LOW', 'PRIVILEGES_REQUIRED_HIGH')")
        return value

    @field_validator('scope')
    def scope_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['SCOPE_UNSPECIFIED', 'SCOPE_UNCHANGED', 'SCOPE_CHANGED']):
            raise ValueError("must be one of enum values ('SCOPE_UNSPECIFIED', 'SCOPE_UNCHANGED', 'SCOPE_CHANGED')")
        return value

    @field_validator('user_interaction')
    def user_interaction_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['USER_INTERACTION_UNSPECIFIED', 'USER_INTERACTION_NONE', 'USER_INTERACTION_REQUIRED']):
            raise ValueError("must be one of enum values ('USER_INTERACTION_UNSPECIFIED', 'USER_INTERACTION_NONE', 'USER_INTERACTION_REQUIRED')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CVSSv3 from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CVSSv3 from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "attackComplexity": obj.get("attackComplexity"),
            "attackVector": obj.get("attackVector"),
            "availabilityImpact": obj.get("availabilityImpact"),
            "baseScore": obj.get("baseScore"),
            "confidentialityImpact": obj.get("confidentialityImpact"),
            "exploitabilityScore": obj.get("exploitabilityScore"),
            "impactScore": obj.get("impactScore"),
            "integrityImpact": obj.get("integrityImpact"),
            "privilegesRequired": obj.get("privilegesRequired"),
            "scope": obj.get("scope"),
            "userInteraction": obj.get("userInteraction")
        })
        return _obj



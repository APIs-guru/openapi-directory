# coding: utf-8

"""
    OS Config API

    OS management tools that can be used for patch management, patch compliance, and configuration management on VM instances.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudOsconfigV1OSPolicyAssignmentOperationMetadata(BaseModel):
    """
    OS policy assignment operation metadata provided by OS policy assignment API methods that return long running operations.
    """ # noqa: E501
    api_method: Optional[StrictStr] = Field(default=None, description="The OS policy assignment API method.", alias="apiMethod")
    os_policy_assignment: Optional[StrictStr] = Field(default=None, description="Reference to the `OSPolicyAssignment` API resource. Format: `projects/{project_number}/locations/{location}/osPolicyAssignments/{os_policy_assignment_id@revision_id}`", alias="osPolicyAssignment")
    rollout_start_time: Optional[StrictStr] = Field(default=None, description="Rollout start time", alias="rolloutStartTime")
    rollout_state: Optional[StrictStr] = Field(default=None, description="State of the rollout", alias="rolloutState")
    rollout_update_time: Optional[StrictStr] = Field(default=None, description="Rollout update time", alias="rolloutUpdateTime")
    __properties: ClassVar[List[str]] = ["apiMethod", "osPolicyAssignment", "rolloutStartTime", "rolloutState", "rolloutUpdateTime"]

    @field_validator('api_method')
    def api_method_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['API_METHOD_UNSPECIFIED', 'CREATE', 'UPDATE', 'DELETE']):
            raise ValueError("must be one of enum values ('API_METHOD_UNSPECIFIED', 'CREATE', 'UPDATE', 'DELETE')")
        return value

    @field_validator('rollout_state')
    def rollout_state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['ROLLOUT_STATE_UNSPECIFIED', 'IN_PROGRESS', 'CANCELLING', 'CANCELLED', 'SUCCEEDED']):
            raise ValueError("must be one of enum values ('ROLLOUT_STATE_UNSPECIFIED', 'IN_PROGRESS', 'CANCELLING', 'CANCELLED', 'SUCCEEDED')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudOsconfigV1OSPolicyAssignmentOperationMetadata from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudOsconfigV1OSPolicyAssignmentOperationMetadata from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "apiMethod": obj.get("apiMethod"),
            "osPolicyAssignment": obj.get("osPolicyAssignment"),
            "rolloutStartTime": obj.get("rolloutStartTime"),
            "rolloutState": obj.get("rolloutState"),
            "rolloutUpdateTime": obj.get("rolloutUpdateTime")
        })
        return _obj



# coding: utf-8

"""
    OS Config API

    OS management tools that can be used for patch management, patch compliance, and configuration management on VM instances.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class VulnerabilityReportVulnerabilityItem(BaseModel):
    """
    OS inventory item that is affected by a vulnerability or fixed as a result of a vulnerability.
    """ # noqa: E501
    available_inventory_item_id: Optional[StrictStr] = Field(default=None, description="Corresponds to the `AVAILABLE_PACKAGE` inventory item on the VM. If the vulnerability report was not updated after the VM inventory update, these values might not display in VM inventory. If there is no available fix, the field is empty. The `inventory_item` value specifies the latest `SoftwarePackage` available to the VM that fixes the vulnerability.", alias="availableInventoryItemId")
    fixed_cpe_uri: Optional[StrictStr] = Field(default=None, description="The recommended [CPE URI](https://cpe.mitre.org/specification/) update that contains a fix for this vulnerability.", alias="fixedCpeUri")
    installed_inventory_item_id: Optional[StrictStr] = Field(default=None, description="Corresponds to the `INSTALLED_PACKAGE` inventory item on the VM. This field displays the inventory items affected by this vulnerability. If the vulnerability report was not updated after the VM inventory update, these values might not display in VM inventory. For some operating systems, this field might be empty.", alias="installedInventoryItemId")
    upstream_fix: Optional[StrictStr] = Field(default=None, description="The upstream OS patch, packages or KB that fixes the vulnerability.", alias="upstreamFix")
    __properties: ClassVar[List[str]] = ["availableInventoryItemId", "fixedCpeUri", "installedInventoryItemId", "upstreamFix"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of VulnerabilityReportVulnerabilityItem from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of VulnerabilityReportVulnerabilityItem from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "availableInventoryItemId": obj.get("availableInventoryItemId"),
            "fixedCpeUri": obj.get("fixedCpeUri"),
            "installedInventoryItemId": obj.get("installedInventoryItemId"),
            "upstreamFix": obj.get("upstreamFix")
        })
        return _obj



# coding: utf-8

"""
    OS Config API

    OS management tools that can be used for patch management, patch compliance, and configuration management on VM instances.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class OSPolicyResourceRepositoryResourceAptRepository(BaseModel):
    """
    Represents a single apt package repository. These will be added to a repo file that will be managed at `/etc/apt/sources.list.d/google_osconfig.list`.
    """ # noqa: E501
    archive_type: Optional[StrictStr] = Field(default=None, description="Required. Type of archive files in this repository.", alias="archiveType")
    components: Optional[List[StrictStr]] = Field(default=None, description="Required. List of components for this repository. Must contain at least one item.")
    distribution: Optional[StrictStr] = Field(default=None, description="Required. Distribution of this repository.")
    gpg_key: Optional[StrictStr] = Field(default=None, description="URI of the key file for this repository. The agent maintains a keyring at `/etc/apt/trusted.gpg.d/osconfig_agent_managed.gpg`.", alias="gpgKey")
    uri: Optional[StrictStr] = Field(default=None, description="Required. URI for this repository.")
    __properties: ClassVar[List[str]] = ["archiveType", "components", "distribution", "gpgKey", "uri"]

    @field_validator('archive_type')
    def archive_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['ARCHIVE_TYPE_UNSPECIFIED', 'DEB', 'DEB_SRC']):
            raise ValueError("must be one of enum values ('ARCHIVE_TYPE_UNSPECIFIED', 'DEB', 'DEB_SRC')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of OSPolicyResourceRepositoryResourceAptRepository from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of OSPolicyResourceRepositoryResourceAptRepository from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "archiveType": obj.get("archiveType"),
            "components": obj.get("components"),
            "distribution": obj.get("distribution"),
            "gpgKey": obj.get("gpgKey"),
            "uri": obj.get("uri")
        })
        return _obj



# coding: utf-8

"""
    OS Config API

    OS management tools that can be used for patch management, patch compliance, and configuration management on VM instances.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class PatchJobInstanceDetails(BaseModel):
    """
    Patch details for a VM instance. For more information about reviewing VM instance details, see [Listing all VM instance details for a specific patch job](https://cloud.google.com/compute/docs/os-patch-management/manage-patch-jobs#list-instance-details).
    """ # noqa: E501
    attempt_count: Optional[StrictStr] = Field(default=None, description="The number of times the agent that the agent attempts to apply the patch.", alias="attemptCount")
    failure_reason: Optional[StrictStr] = Field(default=None, description="If the patch fails, this field provides the reason.", alias="failureReason")
    instance_system_id: Optional[StrictStr] = Field(default=None, description="The unique identifier for the instance. This identifier is defined by the server.", alias="instanceSystemId")
    name: Optional[StrictStr] = Field(default=None, description="The instance name in the form `projects/*/zones/*/instances/*`")
    state: Optional[StrictStr] = Field(default=None, description="Current state of instance patch.")
    __properties: ClassVar[List[str]] = ["attemptCount", "failureReason", "instanceSystemId", "name", "state"]

    @field_validator('state')
    def state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['PATCH_STATE_UNSPECIFIED', 'PENDING', 'INACTIVE', 'NOTIFIED', 'STARTED', 'DOWNLOADING_PATCHES', 'APPLYING_PATCHES', 'REBOOTING', 'SUCCEEDED', 'SUCCEEDED_REBOOT_REQUIRED', 'FAILED', 'ACKED', 'TIMED_OUT', 'RUNNING_PRE_PATCH_STEP', 'RUNNING_POST_PATCH_STEP', 'NO_AGENT_DETECTED']):
            raise ValueError("must be one of enum values ('PATCH_STATE_UNSPECIFIED', 'PENDING', 'INACTIVE', 'NOTIFIED', 'STARTED', 'DOWNLOADING_PATCHES', 'APPLYING_PATCHES', 'REBOOTING', 'SUCCEEDED', 'SUCCEEDED_REBOOT_REQUIRED', 'FAILED', 'ACKED', 'TIMED_OUT', 'RUNNING_PRE_PATCH_STEP', 'RUNNING_POST_PATCH_STEP', 'NO_AGENT_DETECTED')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PatchJobInstanceDetails from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PatchJobInstanceDetails from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "attemptCount": obj.get("attemptCount"),
            "failureReason": obj.get("failureReason"),
            "instanceSystemId": obj.get("instanceSystemId"),
            "name": obj.get("name"),
            "state": obj.get("state")
        })
        return _obj



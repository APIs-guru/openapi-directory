# coding: utf-8

"""
    OS Config API

    OS management tools that can be used for patch management, patch compliance, and configuration management on VM instances.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class PatchJobInstanceDetailsSummary(BaseModel):
    """
    A summary of the current patch state across all instances that this patch job affects. Contains counts of instances in different states. These states map to `InstancePatchState`. List patch job instance details to see the specific states of each instance.
    """ # noqa: E501
    acked_instance_count: Optional[StrictStr] = Field(default=None, description="Number of instances that have acked and will start shortly.", alias="ackedInstanceCount")
    applying_patches_instance_count: Optional[StrictStr] = Field(default=None, description="Number of instances that are applying patches.", alias="applyingPatchesInstanceCount")
    downloading_patches_instance_count: Optional[StrictStr] = Field(default=None, description="Number of instances that are downloading patches.", alias="downloadingPatchesInstanceCount")
    failed_instance_count: Optional[StrictStr] = Field(default=None, description="Number of instances that failed.", alias="failedInstanceCount")
    inactive_instance_count: Optional[StrictStr] = Field(default=None, description="Number of instances that are inactive.", alias="inactiveInstanceCount")
    no_agent_detected_instance_count: Optional[StrictStr] = Field(default=None, description="Number of instances that do not appear to be running the agent. Check to ensure that the agent is installed, running, and able to communicate with the service.", alias="noAgentDetectedInstanceCount")
    notified_instance_count: Optional[StrictStr] = Field(default=None, description="Number of instances notified about patch job.", alias="notifiedInstanceCount")
    pending_instance_count: Optional[StrictStr] = Field(default=None, description="Number of instances pending patch job.", alias="pendingInstanceCount")
    post_patch_step_instance_count: Optional[StrictStr] = Field(default=None, description="Number of instances that are running the post-patch step.", alias="postPatchStepInstanceCount")
    pre_patch_step_instance_count: Optional[StrictStr] = Field(default=None, description="Number of instances that are running the pre-patch step.", alias="prePatchStepInstanceCount")
    rebooting_instance_count: Optional[StrictStr] = Field(default=None, description="Number of instances rebooting.", alias="rebootingInstanceCount")
    started_instance_count: Optional[StrictStr] = Field(default=None, description="Number of instances that have started.", alias="startedInstanceCount")
    succeeded_instance_count: Optional[StrictStr] = Field(default=None, description="Number of instances that have completed successfully.", alias="succeededInstanceCount")
    succeeded_reboot_required_instance_count: Optional[StrictStr] = Field(default=None, description="Number of instances that require reboot.", alias="succeededRebootRequiredInstanceCount")
    timed_out_instance_count: Optional[StrictStr] = Field(default=None, description="Number of instances that exceeded the time out while applying the patch.", alias="timedOutInstanceCount")
    __properties: ClassVar[List[str]] = ["ackedInstanceCount", "applyingPatchesInstanceCount", "downloadingPatchesInstanceCount", "failedInstanceCount", "inactiveInstanceCount", "noAgentDetectedInstanceCount", "notifiedInstanceCount", "pendingInstanceCount", "postPatchStepInstanceCount", "prePatchStepInstanceCount", "rebootingInstanceCount", "startedInstanceCount", "succeededInstanceCount", "succeededRebootRequiredInstanceCount", "timedOutInstanceCount"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PatchJobInstanceDetailsSummary from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PatchJobInstanceDetailsSummary from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "ackedInstanceCount": obj.get("ackedInstanceCount"),
            "applyingPatchesInstanceCount": obj.get("applyingPatchesInstanceCount"),
            "downloadingPatchesInstanceCount": obj.get("downloadingPatchesInstanceCount"),
            "failedInstanceCount": obj.get("failedInstanceCount"),
            "inactiveInstanceCount": obj.get("inactiveInstanceCount"),
            "noAgentDetectedInstanceCount": obj.get("noAgentDetectedInstanceCount"),
            "notifiedInstanceCount": obj.get("notifiedInstanceCount"),
            "pendingInstanceCount": obj.get("pendingInstanceCount"),
            "postPatchStepInstanceCount": obj.get("postPatchStepInstanceCount"),
            "prePatchStepInstanceCount": obj.get("prePatchStepInstanceCount"),
            "rebootingInstanceCount": obj.get("rebootingInstanceCount"),
            "startedInstanceCount": obj.get("startedInstanceCount"),
            "succeededInstanceCount": obj.get("succeededInstanceCount"),
            "succeededRebootRequiredInstanceCount": obj.get("succeededRebootRequiredInstanceCount"),
            "timedOutInstanceCount": obj.get("timedOutInstanceCount")
        })
        return _obj



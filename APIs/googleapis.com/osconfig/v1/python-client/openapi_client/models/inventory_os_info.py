# coding: utf-8

"""
    OS Config API

    OS management tools that can be used for patch management, patch compliance, and configuration management on VM instances.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class InventoryOsInfo(BaseModel):
    """
    Operating system information for the VM.
    """ # noqa: E501
    architecture: Optional[StrictStr] = Field(default=None, description="The system architecture of the operating system.")
    hostname: Optional[StrictStr] = Field(default=None, description="The VM hostname.")
    kernel_release: Optional[StrictStr] = Field(default=None, description="The kernel release of the operating system.", alias="kernelRelease")
    kernel_version: Optional[StrictStr] = Field(default=None, description="The kernel version of the operating system.", alias="kernelVersion")
    long_name: Optional[StrictStr] = Field(default=None, description="The operating system long name. For example 'Debian GNU/Linux 9' or 'Microsoft Window Server 2019 Datacenter'.", alias="longName")
    osconfig_agent_version: Optional[StrictStr] = Field(default=None, description="The current version of the OS Config agent running on the VM.", alias="osconfigAgentVersion")
    short_name: Optional[StrictStr] = Field(default=None, description="The operating system short name. For example, 'windows' or 'debian'.", alias="shortName")
    version: Optional[StrictStr] = Field(default=None, description="The version of the operating system.")
    __properties: ClassVar[List[str]] = ["architecture", "hostname", "kernelRelease", "kernelVersion", "longName", "osconfigAgentVersion", "shortName", "version"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of InventoryOsInfo from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of InventoryOsInfo from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "architecture": obj.get("architecture"),
            "hostname": obj.get("hostname"),
            "kernelRelease": obj.get("kernelRelease"),
            "kernelVersion": obj.get("kernelVersion"),
            "longName": obj.get("longName"),
            "osconfigAgentVersion": obj.get("osconfigAgentVersion"),
            "shortName": obj.get("shortName"),
            "version": obj.get("version")
        })
        return _obj



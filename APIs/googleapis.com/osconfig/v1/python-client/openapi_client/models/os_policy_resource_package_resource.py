# coding: utf-8

"""
    OS Config API

    OS management tools that can be used for patch management, patch compliance, and configuration management on VM instances.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.os_policy_resource_package_resource_apt import OSPolicyResourcePackageResourceAPT
from openapi_client.models.os_policy_resource_package_resource_deb import OSPolicyResourcePackageResourceDeb
from openapi_client.models.os_policy_resource_package_resource_goo_get import OSPolicyResourcePackageResourceGooGet
from openapi_client.models.os_policy_resource_package_resource_msi import OSPolicyResourcePackageResourceMSI
from openapi_client.models.os_policy_resource_package_resource_rpm import OSPolicyResourcePackageResourceRPM
from openapi_client.models.os_policy_resource_package_resource_yum import OSPolicyResourcePackageResourceYUM
from openapi_client.models.os_policy_resource_package_resource_zypper import OSPolicyResourcePackageResourceZypper
from typing import Optional, Set
from typing_extensions import Self

class OSPolicyResourcePackageResource(BaseModel):
    """
    A resource that manages a system package.
    """ # noqa: E501
    apt: Optional[OSPolicyResourcePackageResourceAPT] = None
    deb: Optional[OSPolicyResourcePackageResourceDeb] = None
    desired_state: Optional[StrictStr] = Field(default=None, description="Required. The desired state the agent should maintain for this package.", alias="desiredState")
    googet: Optional[OSPolicyResourcePackageResourceGooGet] = None
    msi: Optional[OSPolicyResourcePackageResourceMSI] = None
    rpm: Optional[OSPolicyResourcePackageResourceRPM] = None
    yum: Optional[OSPolicyResourcePackageResourceYUM] = None
    zypper: Optional[OSPolicyResourcePackageResourceZypper] = None
    __properties: ClassVar[List[str]] = ["apt", "deb", "desiredState", "googet", "msi", "rpm", "yum", "zypper"]

    @field_validator('desired_state')
    def desired_state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['DESIRED_STATE_UNSPECIFIED', 'INSTALLED', 'REMOVED']):
            raise ValueError("must be one of enum values ('DESIRED_STATE_UNSPECIFIED', 'INSTALLED', 'REMOVED')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of OSPolicyResourcePackageResource from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of apt
        if self.apt:
            _dict['apt'] = self.apt.to_dict()
        # override the default output from pydantic by calling `to_dict()` of deb
        if self.deb:
            _dict['deb'] = self.deb.to_dict()
        # override the default output from pydantic by calling `to_dict()` of googet
        if self.googet:
            _dict['googet'] = self.googet.to_dict()
        # override the default output from pydantic by calling `to_dict()` of msi
        if self.msi:
            _dict['msi'] = self.msi.to_dict()
        # override the default output from pydantic by calling `to_dict()` of rpm
        if self.rpm:
            _dict['rpm'] = self.rpm.to_dict()
        # override the default output from pydantic by calling `to_dict()` of yum
        if self.yum:
            _dict['yum'] = self.yum.to_dict()
        # override the default output from pydantic by calling `to_dict()` of zypper
        if self.zypper:
            _dict['zypper'] = self.zypper.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of OSPolicyResourcePackageResource from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "apt": OSPolicyResourcePackageResourceAPT.from_dict(obj["apt"]) if obj.get("apt") is not None else None,
            "deb": OSPolicyResourcePackageResourceDeb.from_dict(obj["deb"]) if obj.get("deb") is not None else None,
            "desiredState": obj.get("desiredState"),
            "googet": OSPolicyResourcePackageResourceGooGet.from_dict(obj["googet"]) if obj.get("googet") is not None else None,
            "msi": OSPolicyResourcePackageResourceMSI.from_dict(obj["msi"]) if obj.get("msi") is not None else None,
            "rpm": OSPolicyResourcePackageResourceRPM.from_dict(obj["rpm"]) if obj.get("rpm") is not None else None,
            "yum": OSPolicyResourcePackageResourceYUM.from_dict(obj["yum"]) if obj.get("yum") is not None else None,
            "zypper": OSPolicyResourcePackageResourceZypper.from_dict(obj["zypper"]) if obj.get("zypper") is not None else None
        })
        return _obj



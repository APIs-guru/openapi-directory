# coding: utf-8

"""
    OS Config API

    OS management tools that can be used for patch management, patch compliance, and configuration management on VM instances.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.gcs_object import GcsObject
from typing import Optional, Set
from typing_extensions import Self

class ExecStepConfig(BaseModel):
    """
    Common configurations for an ExecStep.
    """ # noqa: E501
    allowed_success_codes: Optional[List[StrictInt]] = Field(default=None, description="Defaults to [0]. A list of possible return values that the execution can return to indicate a success.", alias="allowedSuccessCodes")
    gcs_object: Optional[GcsObject] = Field(default=None, alias="gcsObject")
    interpreter: Optional[StrictStr] = Field(default=None, description="The script interpreter to use to run the script. If no interpreter is specified the script will be executed directly, which will likely only succeed for scripts with [shebang lines] (https://en.wikipedia.org/wiki/Shebang_\\(Unix\\)).")
    local_path: Optional[StrictStr] = Field(default=None, description="An absolute path to the executable on the VM.", alias="localPath")
    __properties: ClassVar[List[str]] = ["allowedSuccessCodes", "gcsObject", "interpreter", "localPath"]

    @field_validator('interpreter')
    def interpreter_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['INTERPRETER_UNSPECIFIED', 'NONE', 'SHELL', 'POWERSHELL']):
            raise ValueError("must be one of enum values ('INTERPRETER_UNSPECIFIED', 'NONE', 'SHELL', 'POWERSHELL')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ExecStepConfig from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of gcs_object
        if self.gcs_object:
            _dict['gcsObject'] = self.gcs_object.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ExecStepConfig from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "allowedSuccessCodes": obj.get("allowedSuccessCodes"),
            "gcsObject": GcsObject.from_dict(obj["gcsObject"]) if obj.get("gcsObject") is not None else None,
            "interpreter": obj.get("interpreter"),
            "localPath": obj.get("localPath")
        })
        return _obj



# coding: utf-8

"""
    OS Config API

    OS management tools that can be used for patch management, patch compliance, and configuration management on VM instances.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.os_policy_resource_exec_resource import OSPolicyResourceExecResource
from openapi_client.models.os_policy_resource_file_resource import OSPolicyResourceFileResource
from openapi_client.models.os_policy_resource_package_resource import OSPolicyResourcePackageResource
from openapi_client.models.os_policy_resource_repository_resource import OSPolicyResourceRepositoryResource
from typing import Optional, Set
from typing_extensions import Self

class OSPolicyResource(BaseModel):
    """
    An OS policy resource is used to define the desired state configuration and provides a specific functionality like installing/removing packages, executing a script etc. The system ensures that resources are always in their desired state by taking necessary actions if they have drifted from their desired state.
    """ # noqa: E501
    var_exec: Optional[OSPolicyResourceExecResource] = Field(default=None, alias="exec")
    file: Optional[OSPolicyResourceFileResource] = None
    id: Optional[StrictStr] = Field(default=None, description="Required. The id of the resource with the following restrictions: * Must contain only lowercase letters, numbers, and hyphens. * Must start with a letter. * Must be between 1-63 characters. * Must end with a number or a letter. * Must be unique within the OS policy.")
    pkg: Optional[OSPolicyResourcePackageResource] = None
    repository: Optional[OSPolicyResourceRepositoryResource] = None
    __properties: ClassVar[List[str]] = ["exec", "file", "id", "pkg", "repository"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of OSPolicyResource from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of var_exec
        if self.var_exec:
            _dict['exec'] = self.var_exec.to_dict()
        # override the default output from pydantic by calling `to_dict()` of file
        if self.file:
            _dict['file'] = self.file.to_dict()
        # override the default output from pydantic by calling `to_dict()` of pkg
        if self.pkg:
            _dict['pkg'] = self.pkg.to_dict()
        # override the default output from pydantic by calling `to_dict()` of repository
        if self.repository:
            _dict['repository'] = self.repository.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of OSPolicyResource from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "exec": OSPolicyResourceExecResource.from_dict(obj["exec"]) if obj.get("exec") is not None else None,
            "file": OSPolicyResourceFileResource.from_dict(obj["file"]) if obj.get("file") is not None else None,
            "id": obj.get("id"),
            "pkg": OSPolicyResourcePackageResource.from_dict(obj["pkg"]) if obj.get("pkg") is not None else None,
            "repository": OSPolicyResourceRepositoryResource.from_dict(obj["repository"]) if obj.get("repository") is not None else None
        })
        return _obj



# coding: utf-8

"""
    OS Config API

    OS management tools that can be used for patch management, patch compliance, and configuration management on VM instances.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.os_policy_resource_group import OSPolicyResourceGroup
from typing import Optional, Set
from typing_extensions import Self

class OSPolicy(BaseModel):
    """
    An OS policy defines the desired state configuration for a VM.
    """ # noqa: E501
    allow_no_resource_group_match: Optional[StrictBool] = Field(default=None, description="This flag determines the OS policy compliance status when none of the resource groups within the policy are applicable for a VM. Set this value to `true` if the policy needs to be reported as compliant even if the policy has nothing to validate or enforce.", alias="allowNoResourceGroupMatch")
    description: Optional[StrictStr] = Field(default=None, description="Policy description. Length of the description is limited to 1024 characters.")
    id: Optional[StrictStr] = Field(default=None, description="Required. The id of the OS policy with the following restrictions: * Must contain only lowercase letters, numbers, and hyphens. * Must start with a letter. * Must be between 1-63 characters. * Must end with a number or a letter. * Must be unique within the assignment.")
    mode: Optional[StrictStr] = Field(default=None, description="Required. Policy mode")
    resource_groups: Optional[List[OSPolicyResourceGroup]] = Field(default=None, description="Required. List of resource groups for the policy. For a particular VM, resource groups are evaluated in the order specified and the first resource group that is applicable is selected and the rest are ignored. If none of the resource groups are applicable for a VM, the VM is considered to be non-compliant w.r.t this policy. This behavior can be toggled by the flag `allow_no_resource_group_match`", alias="resourceGroups")
    __properties: ClassVar[List[str]] = ["allowNoResourceGroupMatch", "description", "id", "mode", "resourceGroups"]

    @field_validator('mode')
    def mode_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['MODE_UNSPECIFIED', 'VALIDATION', 'ENFORCEMENT']):
            raise ValueError("must be one of enum values ('MODE_UNSPECIFIED', 'VALIDATION', 'ENFORCEMENT')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of OSPolicy from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in resource_groups (list)
        _items = []
        if self.resource_groups:
            for _item_resource_groups in self.resource_groups:
                if _item_resource_groups:
                    _items.append(_item_resource_groups.to_dict())
            _dict['resourceGroups'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of OSPolicy from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "allowNoResourceGroupMatch": obj.get("allowNoResourceGroupMatch"),
            "description": obj.get("description"),
            "id": obj.get("id"),
            "mode": obj.get("mode"),
            "resourceGroups": [OSPolicyResourceGroup.from_dict(_item) for _item in obj["resourceGroups"]] if obj.get("resourceGroups") is not None else None
        })
        return _obj



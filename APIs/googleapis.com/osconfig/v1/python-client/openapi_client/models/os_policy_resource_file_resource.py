# coding: utf-8

"""
    OS Config API

    OS management tools that can be used for patch management, patch compliance, and configuration management on VM instances.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.os_policy_resource_file import OSPolicyResourceFile
from typing import Optional, Set
from typing_extensions import Self

class OSPolicyResourceFileResource(BaseModel):
    """
    A resource that manages the state of a file.
    """ # noqa: E501
    content: Optional[StrictStr] = Field(default=None, description="A a file with this content. The size of the content is limited to 32KiB.")
    file: Optional[OSPolicyResourceFile] = None
    path: Optional[StrictStr] = Field(default=None, description="Required. The absolute path of the file within the VM.")
    permissions: Optional[StrictStr] = Field(default=None, description="Consists of three octal digits which represent, in order, the permissions of the owner, group, and other users for the file (similarly to the numeric mode used in the linux chmod utility). Each digit represents a three bit number with the 4 bit corresponding to the read permissions, the 2 bit corresponds to the write bit, and the one bit corresponds to the execute permission. Default behavior is 755. Below are some examples of permissions and their associated values: read, write, and execute: 7 read and execute: 5 read and write: 6 read only: 4")
    state: Optional[StrictStr] = Field(default=None, description="Required. Desired state of the file.")
    __properties: ClassVar[List[str]] = ["content", "file", "path", "permissions", "state"]

    @field_validator('state')
    def state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['DESIRED_STATE_UNSPECIFIED', 'PRESENT', 'ABSENT', 'CONTENTS_MATCH']):
            raise ValueError("must be one of enum values ('DESIRED_STATE_UNSPECIFIED', 'PRESENT', 'ABSENT', 'CONTENTS_MATCH')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of OSPolicyResourceFileResource from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of file
        if self.file:
            _dict['file'] = self.file.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of OSPolicyResourceFileResource from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "content": obj.get("content"),
            "file": OSPolicyResourceFile.from_dict(obj["file"]) if obj.get("file") is not None else None,
            "path": obj.get("path"),
            "permissions": obj.get("permissions"),
            "state": obj.get("state")
        })
        return _obj



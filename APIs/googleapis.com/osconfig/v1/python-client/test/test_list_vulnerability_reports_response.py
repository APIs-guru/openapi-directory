# coding: utf-8

"""
    OS Config API

    OS management tools that can be used for patch management, patch compliance, and configuration management on VM instances.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.list_vulnerability_reports_response import ListVulnerabilityReportsResponse

class TestListVulnerabilityReportsResponse(unittest.TestCase):
    """ListVulnerabilityReportsResponse unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> ListVulnerabilityReportsResponse:
        """Test ListVulnerabilityReportsResponse
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `ListVulnerabilityReportsResponse`
        """
        model = ListVulnerabilityReportsResponse()
        if include_optional:
            return ListVulnerabilityReportsResponse(
                next_page_token = '',
                vulnerability_reports = [
                    openapi_client.models.vulnerability_report.VulnerabilityReport(
                        name = '', 
                        update_time = '', 
                        vulnerabilities = [
                            openapi_client.models.vulnerability_report_vulnerability.VulnerabilityReportVulnerability(
                                available_inventory_item_ids = [
                                    ''
                                    ], 
                                create_time = '', 
                                details = openapi_client.models.vulnerability_report_vulnerability_details.VulnerabilityReportVulnerabilityDetails(
                                    cve = '', 
                                    cvss_v2_score = 1.337, 
                                    cvss_v3 = openapi_client.models.cvssv3.CVSSv3(
                                        attack_complexity = 'ATTACK_COMPLEXITY_UNSPECIFIED', 
                                        attack_vector = 'ATTACK_VECTOR_UNSPECIFIED', 
                                        availability_impact = 'IMPACT_UNSPECIFIED', 
                                        base_score = 1.337, 
                                        confidentiality_impact = 'IMPACT_UNSPECIFIED', 
                                        exploitability_score = 1.337, 
                                        impact_score = 1.337, 
                                        integrity_impact = 'IMPACT_UNSPECIFIED', 
                                        privileges_required = 'PRIVILEGES_REQUIRED_UNSPECIFIED', 
                                        scope = 'SCOPE_UNSPECIFIED', 
                                        user_interaction = 'USER_INTERACTION_UNSPECIFIED', ), 
                                    description = '', 
                                    references = [
                                        openapi_client.models.vulnerability_report_vulnerability_details_reference.VulnerabilityReportVulnerabilityDetailsReference(
                                            source = '', 
                                            url = '', )
                                        ], 
                                    severity = '', ), 
                                installed_inventory_item_ids = [
                                    ''
                                    ], 
                                items = [
                                    openapi_client.models.vulnerability_report_vulnerability_item.VulnerabilityReportVulnerabilityItem(
                                        available_inventory_item_id = '', 
                                        fixed_cpe_uri = '', 
                                        installed_inventory_item_id = '', 
                                        upstream_fix = '', )
                                    ], 
                                update_time = '', )
                            ], )
                    ]
            )
        else:
            return ListVulnerabilityReportsResponse(
        )
        """

    def testListVulnerabilityReportsResponse(self):
        """Test ListVulnerabilityReportsResponse"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

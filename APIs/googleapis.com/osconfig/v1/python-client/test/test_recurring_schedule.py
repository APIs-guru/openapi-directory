# coding: utf-8

"""
    OS Config API

    OS management tools that can be used for patch management, patch compliance, and configuration management on VM instances.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.recurring_schedule import RecurringSchedule

class TestRecurringSchedule(unittest.TestCase):
    """RecurringSchedule unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> RecurringSchedule:
        """Test RecurringSchedule
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `RecurringSchedule`
        """
        model = RecurringSchedule()
        if include_optional:
            return RecurringSchedule(
                end_time = '',
                frequency = 'FREQUENCY_UNSPECIFIED',
                last_execute_time = '',
                monthly = openapi_client.models.monthly_schedule.MonthlySchedule(
                    month_day = 56, 
                    week_day_of_month = openapi_client.models.week_day_of_month.WeekDayOfMonth(
                        day_of_week = 'DAY_OF_WEEK_UNSPECIFIED', 
                        day_offset = 56, 
                        week_ordinal = 56, ), ),
                next_execute_time = '',
                start_time = '',
                time_of_day = openapi_client.models.time_of_day.TimeOfDay(
                    hours = 56, 
                    minutes = 56, 
                    nanos = 56, 
                    seconds = 56, ),
                time_zone = openapi_client.models.time_zone.TimeZone(
                    id = '', 
                    version = '', ),
                weekly = openapi_client.models.weekly_schedule.WeeklySchedule(
                    day_of_week = 'DAY_OF_WEEK_UNSPECIFIED', )
            )
        else:
            return RecurringSchedule(
        )
        """

    def testRecurringSchedule(self):
        """Test RecurringSchedule"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

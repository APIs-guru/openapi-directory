# coding: utf-8

"""
    OS Config API

    OS management tools that can be used for patch management, patch compliance, and configuration management on VM instances.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.inventory import Inventory

class TestInventory(unittest.TestCase):
    """Inventory unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> Inventory:
        """Test Inventory
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `Inventory`
        """
        model = Inventory()
        if include_optional:
            return Inventory(
                items = {
                    'key' : openapi_client.models.inventory_item.InventoryItem(
                        available_package = openapi_client.models.inventory_software_package.InventorySoftwarePackage(
                            apt_package = openapi_client.models.inventory_versioned_package.InventoryVersionedPackage(
                                architecture = '', 
                                package_name = '', 
                                version = '', ), 
                            cos_package = openapi_client.models.inventory_versioned_package.InventoryVersionedPackage(
                                architecture = '', 
                                package_name = '', 
                                version = '', ), 
                            googet_package = , 
                            qfe_package = openapi_client.models.inventory_windows_quick_fix_engineering_package.InventoryWindowsQuickFixEngineeringPackage(
                                caption = '', 
                                description = '', 
                                hot_fix_id = '', 
                                install_time = '', ), 
                            windows_application = openapi_client.models.inventory_windows_application.InventoryWindowsApplication(
                                display_name = '', 
                                display_version = '', 
                                help_link = '', 
                                install_date = openapi_client.models.date.Date(
                                    day = 56, 
                                    month = 56, 
                                    year = 56, ), 
                                publisher = '', ), 
                            wua_package = openapi_client.models.inventory_windows_update_package.InventoryWindowsUpdatePackage(
                                categories = [
                                    openapi_client.models.inventory_windows_update_package_windows_update_category.InventoryWindowsUpdatePackageWindowsUpdateCategory(
                                        id = '', 
                                        name = '', )
                                    ], 
                                description = '', 
                                kb_article_ids = [
                                    ''
                                    ], 
                                last_deployment_change_time = '', 
                                more_info_urls = [
                                    ''
                                    ], 
                                revision_number = 56, 
                                support_url = '', 
                                title = '', 
                                update_id = '', ), 
                            yum_package = , 
                            zypper_package = , 
                            zypper_patch = openapi_client.models.inventory_zypper_patch.InventoryZypperPatch(
                                category = '', 
                                patch_name = '', 
                                severity = '', 
                                summary = '', ), ), 
                        create_time = '', 
                        id = '', 
                        installed_package = openapi_client.models.inventory_software_package.InventorySoftwarePackage(), 
                        origin_type = 'ORIGIN_TYPE_UNSPECIFIED', 
                        type = 'TYPE_UNSPECIFIED', 
                        update_time = '', )
                    },
                name = '',
                os_info = openapi_client.models.inventory_os_info.InventoryOsInfo(
                    architecture = '', 
                    hostname = '', 
                    kernel_release = '', 
                    kernel_version = '', 
                    long_name = '', 
                    osconfig_agent_version = '', 
                    short_name = '', 
                    version = '', ),
                update_time = ''
            )
        else:
            return Inventory(
        )
        """

    def testInventory(self):
        """Test Inventory"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

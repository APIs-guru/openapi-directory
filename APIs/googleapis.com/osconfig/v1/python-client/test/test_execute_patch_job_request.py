# coding: utf-8

"""
    OS Config API

    OS management tools that can be used for patch management, patch compliance, and configuration management on VM instances.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.execute_patch_job_request import ExecutePatchJobRequest

class TestExecutePatchJobRequest(unittest.TestCase):
    """ExecutePatchJobRequest unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> ExecutePatchJobRequest:
        """Test ExecutePatchJobRequest
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `ExecutePatchJobRequest`
        """
        model = ExecutePatchJobRequest()
        if include_optional:
            return ExecutePatchJobRequest(
                description = '',
                display_name = '',
                dry_run = True,
                duration = '',
                instance_filter = openapi_client.models.patch_instance_filter.PatchInstanceFilter(
                    all = True, 
                    group_labels = [
                        openapi_client.models.patch_instance_filter_group_label.PatchInstanceFilterGroupLabel(
                            labels = {
                                'key' : ''
                                }, )
                        ], 
                    instance_name_prefixes = [
                        ''
                        ], 
                    instances = [
                        ''
                        ], 
                    zones = [
                        ''
                        ], ),
                patch_config = openapi_client.models.patch_config.PatchConfig(
                    apt = openapi_client.models.apt_settings.AptSettings(
                        excludes = [
                            ''
                            ], 
                        exclusive_packages = [
                            ''
                            ], 
                        type = 'TYPE_UNSPECIFIED', ), 
                    goo = openapi_client.models.goo_settings.GooSettings(), 
                    mig_instances_allowed = True, 
                    post_step = openapi_client.models.exec_step.ExecStep(
                        linux_exec_step_config = openapi_client.models.exec_step_config.ExecStepConfig(
                            allowed_success_codes = [
                                56
                                ], 
                            gcs_object = openapi_client.models.gcs_object.GcsObject(
                                bucket = '', 
                                generation_number = '', 
                                object = '', ), 
                            interpreter = 'INTERPRETER_UNSPECIFIED', 
                            local_path = '', ), 
                        windows_exec_step_config = openapi_client.models.exec_step_config.ExecStepConfig(
                            interpreter = 'INTERPRETER_UNSPECIFIED', 
                            local_path = '', ), ), 
                    pre_step = openapi_client.models.exec_step.ExecStep(), 
                    reboot_config = 'REBOOT_CONFIG_UNSPECIFIED', 
                    windows_update = openapi_client.models.windows_update_settings.WindowsUpdateSettings(
                        classifications = [
                            'CLASSIFICATION_UNSPECIFIED'
                            ], 
                        exclusive_patches = [
                            ''
                            ], ), 
                    yum = openapi_client.models.yum_settings.YumSettings(
                        minimal = True, 
                        security = True, ), 
                    zypper = openapi_client.models.zypper_settings.ZypperSettings(
                        categories = [
                            ''
                            ], 
                        severities = [
                            ''
                            ], 
                        with_optional = True, 
                        with_update = True, ), ),
                rollout = openapi_client.models.patch_rollout.PatchRollout(
                    disruption_budget = openapi_client.models.fixed_or_percent.FixedOrPercent(
                        fixed = 56, 
                        percent = 56, ), 
                    mode = 'MODE_UNSPECIFIED', )
            )
        else:
            return ExecutePatchJobRequest(
        )
        """

    def testExecutePatchJobRequest(self):
        """Test ExecutePatchJobRequest"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

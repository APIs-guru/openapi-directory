# coding: utf-8

"""
    OS Config API

    OS management tools that can be used for patch management, patch compliance, and configuration management on VM instances.

    The version of the OpenAPI document: v1alpha
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from openapi_client.models.cvssv3 import CVSSv3
from openapi_client.models.vulnerability_report_vulnerability_details_reference import VulnerabilityReportVulnerabilityDetailsReference
from typing import Optional, Set
from typing_extensions import Self

class VulnerabilityReportVulnerabilityDetails(BaseModel):
    """
    Contains metadata information for the vulnerability. This information is collected from the upstream feed of the operating system.
    """ # noqa: E501
    cve: Optional[StrictStr] = Field(default=None, description="The CVE of the vulnerability. CVE cannot be empty and the combination of should be unique across vulnerabilities for a VM.")
    cvss_v2_score: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The CVSS V2 score of this vulnerability. CVSS V2 score is on a scale of 0 - 10 where 0 indicates low severity and 10 indicates high severity.", alias="cvssV2Score")
    cvss_v3: Optional[CVSSv3] = Field(default=None, alias="cvssV3")
    description: Optional[StrictStr] = Field(default=None, description="The note or description describing the vulnerability from the distro.")
    references: Optional[List[VulnerabilityReportVulnerabilityDetailsReference]] = Field(default=None, description="Corresponds to the references attached to the `VulnerabilityDetails`.")
    severity: Optional[StrictStr] = Field(default=None, description="Assigned severity/impact ranking from the distro.")
    __properties: ClassVar[List[str]] = ["cve", "cvssV2Score", "cvssV3", "description", "references", "severity"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of VulnerabilityReportVulnerabilityDetails from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of cvss_v3
        if self.cvss_v3:
            _dict['cvssV3'] = self.cvss_v3.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in references (list)
        _items = []
        if self.references:
            for _item_references in self.references:
                if _item_references:
                    _items.append(_item_references.to_dict())
            _dict['references'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of VulnerabilityReportVulnerabilityDetails from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "cve": obj.get("cve"),
            "cvssV2Score": obj.get("cvssV2Score"),
            "cvssV3": CVSSv3.from_dict(obj["cvssV3"]) if obj.get("cvssV3") is not None else None,
            "description": obj.get("description"),
            "references": [VulnerabilityReportVulnerabilityDetailsReference.from_dict(_item) for _item in obj["references"]] if obj.get("references") is not None else None,
            "severity": obj.get("severity")
        })
        return _obj



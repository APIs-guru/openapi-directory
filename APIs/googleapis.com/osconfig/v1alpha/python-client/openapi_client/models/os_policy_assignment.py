# coding: utf-8

"""
    OS Config API

    OS management tools that can be used for patch management, patch compliance, and configuration management on VM instances.

    The version of the OpenAPI document: v1alpha
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.os_policy import OSPolicy
from openapi_client.models.os_policy_assignment_instance_filter import OSPolicyAssignmentInstanceFilter
from openapi_client.models.os_policy_assignment_rollout import OSPolicyAssignmentRollout
from typing import Optional, Set
from typing_extensions import Self

class OSPolicyAssignment(BaseModel):
    """
    OS policy assignment is an API resource that is used to apply a set of OS policies to a dynamically targeted group of Compute Engine VM instances. An OS policy is used to define the desired state configuration for a Compute Engine VM instance through a set of configuration resources that provide capabilities such as installing or removing software packages, or executing a script. For more information, see [OS policy and OS policy assignment](https://cloud.google.com/compute/docs/os-configuration-management/working-with-os-policies).
    """ # noqa: E501
    baseline: Optional[StrictBool] = Field(default=None, description="Output only. Indicates that this revision has been successfully rolled out in this zone and new VMs will be assigned OS policies from this revision. For a given OS policy assignment, there is only one revision with a value of `true` for this field.")
    deleted: Optional[StrictBool] = Field(default=None, description="Output only. Indicates that this revision deletes the OS policy assignment.")
    description: Optional[StrictStr] = Field(default=None, description="OS policy assignment description. Length of the description is limited to 1024 characters.")
    etag: Optional[StrictStr] = Field(default=None, description="The etag for this OS policy assignment. If this is provided on update, it must match the server's etag.")
    instance_filter: Optional[OSPolicyAssignmentInstanceFilter] = Field(default=None, alias="instanceFilter")
    name: Optional[StrictStr] = Field(default=None, description="Resource name. Format: `projects/{project_number}/locations/{location}/osPolicyAssignments/{os_policy_assignment_id}` This field is ignored when you create an OS policy assignment.")
    os_policies: Optional[List[OSPolicy]] = Field(default=None, description="Required. List of OS policies to be applied to the VMs.", alias="osPolicies")
    reconciling: Optional[StrictBool] = Field(default=None, description="Output only. Indicates that reconciliation is in progress for the revision. This value is `true` when the `rollout_state` is one of: * IN_PROGRESS * CANCELLING")
    revision_create_time: Optional[StrictStr] = Field(default=None, description="Output only. The timestamp that the revision was created.", alias="revisionCreateTime")
    revision_id: Optional[StrictStr] = Field(default=None, description="Output only. The assignment revision ID A new revision is committed whenever a rollout is triggered for a OS policy assignment", alias="revisionId")
    rollout: Optional[OSPolicyAssignmentRollout] = None
    rollout_state: Optional[StrictStr] = Field(default=None, description="Output only. OS policy assignment rollout state", alias="rolloutState")
    uid: Optional[StrictStr] = Field(default=None, description="Output only. Server generated unique id for the OS policy assignment resource.")
    __properties: ClassVar[List[str]] = ["baseline", "deleted", "description", "etag", "instanceFilter", "name", "osPolicies", "reconciling", "revisionCreateTime", "revisionId", "rollout", "rolloutState", "uid"]

    @field_validator('rollout_state')
    def rollout_state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['ROLLOUT_STATE_UNSPECIFIED', 'IN_PROGRESS', 'CANCELLING', 'CANCELLED', 'SUCCEEDED']):
            raise ValueError("must be one of enum values ('ROLLOUT_STATE_UNSPECIFIED', 'IN_PROGRESS', 'CANCELLING', 'CANCELLED', 'SUCCEEDED')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of OSPolicyAssignment from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "baseline",
            "deleted",
            "reconciling",
            "revision_create_time",
            "revision_id",
            "rollout_state",
            "uid",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of instance_filter
        if self.instance_filter:
            _dict['instanceFilter'] = self.instance_filter.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in os_policies (list)
        _items = []
        if self.os_policies:
            for _item_os_policies in self.os_policies:
                if _item_os_policies:
                    _items.append(_item_os_policies.to_dict())
            _dict['osPolicies'] = _items
        # override the default output from pydantic by calling `to_dict()` of rollout
        if self.rollout:
            _dict['rollout'] = self.rollout.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of OSPolicyAssignment from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "baseline": obj.get("baseline"),
            "deleted": obj.get("deleted"),
            "description": obj.get("description"),
            "etag": obj.get("etag"),
            "instanceFilter": OSPolicyAssignmentInstanceFilter.from_dict(obj["instanceFilter"]) if obj.get("instanceFilter") is not None else None,
            "name": obj.get("name"),
            "osPolicies": [OSPolicy.from_dict(_item) for _item in obj["osPolicies"]] if obj.get("osPolicies") is not None else None,
            "reconciling": obj.get("reconciling"),
            "revisionCreateTime": obj.get("revisionCreateTime"),
            "revisionId": obj.get("revisionId"),
            "rollout": OSPolicyAssignmentRollout.from_dict(obj["rollout"]) if obj.get("rollout") is not None else None,
            "rolloutState": obj.get("rolloutState"),
            "uid": obj.get("uid")
        })
        return _obj



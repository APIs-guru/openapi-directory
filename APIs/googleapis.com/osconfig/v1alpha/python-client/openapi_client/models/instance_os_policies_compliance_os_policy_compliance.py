# coding: utf-8

"""
    OS Config API

    OS management tools that can be used for patch management, patch compliance, and configuration management on VM instances.

    The version of the OpenAPI document: v1alpha
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.os_policy_resource_compliance import OSPolicyResourceCompliance
from typing import Optional, Set
from typing_extensions import Self

class InstanceOSPoliciesComplianceOSPolicyCompliance(BaseModel):
    """
    Compliance data for an OS policy
    """ # noqa: E501
    os_policy_assignment: Optional[StrictStr] = Field(default=None, description="Reference to the `OSPolicyAssignment` API resource that the `OSPolicy` belongs to. Format: `projects/{project_number}/locations/{location}/osPolicyAssignments/{os_policy_assignment_id@revision_id}`", alias="osPolicyAssignment")
    os_policy_id: Optional[StrictStr] = Field(default=None, description="The OS policy id", alias="osPolicyId")
    os_policy_resource_compliances: Optional[List[OSPolicyResourceCompliance]] = Field(default=None, description="Compliance data for each `OSPolicyResource` that is applied to the VM.", alias="osPolicyResourceCompliances")
    state: Optional[StrictStr] = Field(default=None, description="Compliance state of the OS policy.")
    __properties: ClassVar[List[str]] = ["osPolicyAssignment", "osPolicyId", "osPolicyResourceCompliances", "state"]

    @field_validator('state')
    def state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['OS_POLICY_COMPLIANCE_STATE_UNSPECIFIED', 'COMPLIANT', 'NON_COMPLIANT', 'UNKNOWN', 'NO_OS_POLICIES_APPLICABLE']):
            raise ValueError("must be one of enum values ('OS_POLICY_COMPLIANCE_STATE_UNSPECIFIED', 'COMPLIANT', 'NON_COMPLIANT', 'UNKNOWN', 'NO_OS_POLICIES_APPLICABLE')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of InstanceOSPoliciesComplianceOSPolicyCompliance from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in os_policy_resource_compliances (list)
        _items = []
        if self.os_policy_resource_compliances:
            for _item_os_policy_resource_compliances in self.os_policy_resource_compliances:
                if _item_os_policy_resource_compliances:
                    _items.append(_item_os_policy_resource_compliances.to_dict())
            _dict['osPolicyResourceCompliances'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of InstanceOSPoliciesComplianceOSPolicyCompliance from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "osPolicyAssignment": obj.get("osPolicyAssignment"),
            "osPolicyId": obj.get("osPolicyId"),
            "osPolicyResourceCompliances": [OSPolicyResourceCompliance.from_dict(_item) for _item in obj["osPolicyResourceCompliances"]] if obj.get("osPolicyResourceCompliances") is not None else None,
            "state": obj.get("state")
        })
        return _obj



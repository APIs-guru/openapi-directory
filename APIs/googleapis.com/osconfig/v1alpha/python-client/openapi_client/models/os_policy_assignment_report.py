# coding: utf-8

"""
    OS Config API

    OS management tools that can be used for patch management, patch compliance, and configuration management on VM instances.

    The version of the OpenAPI document: v1alpha
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.os_policy_assignment_report_os_policy_compliance import OSPolicyAssignmentReportOSPolicyCompliance
from typing import Optional, Set
from typing_extensions import Self

class OSPolicyAssignmentReport(BaseModel):
    """
    A report of the OS policy assignment status for a given instance.
    """ # noqa: E501
    instance: Optional[StrictStr] = Field(default=None, description="The Compute Engine VM instance name.")
    last_run_id: Optional[StrictStr] = Field(default=None, description="Unique identifier of the last attempted run to apply the OS policies associated with this assignment on the VM. This ID is logged by the OS Config agent while applying the OS policies associated with this assignment on the VM. NOTE: If the service is unable to successfully connect to the agent for this run, then this id will not be available in the agent logs.", alias="lastRunId")
    name: Optional[StrictStr] = Field(default=None, description="The `OSPolicyAssignmentReport` API resource name. Format: `projects/{project_number}/locations/{location}/instances/{instance_id}/osPolicyAssignments/{os_policy_assignment_id}/report`")
    os_policy_assignment: Optional[StrictStr] = Field(default=None, description="Reference to the `OSPolicyAssignment` API resource that the `OSPolicy` belongs to. Format: `projects/{project_number}/locations/{location}/osPolicyAssignments/{os_policy_assignment_id@revision_id}`", alias="osPolicyAssignment")
    os_policy_compliances: Optional[List[OSPolicyAssignmentReportOSPolicyCompliance]] = Field(default=None, description="Compliance data for each `OSPolicy` that is applied to the VM.", alias="osPolicyCompliances")
    update_time: Optional[StrictStr] = Field(default=None, description="Timestamp for when the report was last generated.", alias="updateTime")
    __properties: ClassVar[List[str]] = ["instance", "lastRunId", "name", "osPolicyAssignment", "osPolicyCompliances", "updateTime"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of OSPolicyAssignmentReport from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in os_policy_compliances (list)
        _items = []
        if self.os_policy_compliances:
            for _item_os_policy_compliances in self.os_policy_compliances:
                if _item_os_policy_compliances:
                    _items.append(_item_os_policy_compliances.to_dict())
            _dict['osPolicyCompliances'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of OSPolicyAssignmentReport from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "instance": obj.get("instance"),
            "lastRunId": obj.get("lastRunId"),
            "name": obj.get("name"),
            "osPolicyAssignment": obj.get("osPolicyAssignment"),
            "osPolicyCompliances": [OSPolicyAssignmentReportOSPolicyCompliance.from_dict(_item) for _item in obj["osPolicyCompliances"]] if obj.get("osPolicyCompliances") is not None else None,
            "updateTime": obj.get("updateTime")
        })
        return _obj



# coding: utf-8

"""
    OS Config API

    OS management tools that can be used for patch management, patch compliance, and configuration management on VM instances.

    The version of the OpenAPI document: v1alpha
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.instance_os_policies_compliance_os_policy_compliance import InstanceOSPoliciesComplianceOSPolicyCompliance
from typing import Optional, Set
from typing_extensions import Self

class InstanceOSPoliciesCompliance(BaseModel):
    """
    This API resource represents the OS policies compliance data for a Compute Engine virtual machine (VM) instance at a given point in time. A Compute Engine VM can have multiple OS policy assignments, and each assignment can have multiple OS policies. As a result, multiple OS policies could be applied to a single VM. You can use this API resource to determine both the compliance state of your VM as well as the compliance state of an individual OS policy. For more information, see [View compliance](https://cloud.google.com/compute/docs/os-configuration-management/view-compliance).
    """ # noqa: E501
    detailed_state: Optional[StrictStr] = Field(default=None, description="Output only. Detailed compliance state of the VM. This field is populated only when compliance state is `UNKNOWN`. It may contain one of the following values: * `no-compliance-data`: Compliance data is not available for this VM. * `no-agent-detected`: OS Config agent is not detected for this VM. * `config-not-supported-by-agent`: The version of the OS Config agent running on this VM does not support configuration management. * `inactive`: VM is not running. * `internal-service-errors`: There were internal service errors encountered while enforcing compliance. * `agent-errors`: OS config agent encountered errors while enforcing compliance.", alias="detailedState")
    detailed_state_reason: Optional[StrictStr] = Field(default=None, description="Output only. The reason for the `detailed_state` of the VM (if any).", alias="detailedStateReason")
    instance: Optional[StrictStr] = Field(default=None, description="Output only. The Compute Engine VM instance name.")
    last_compliance_check_time: Optional[StrictStr] = Field(default=None, description="Output only. Timestamp of the last compliance check for the VM.", alias="lastComplianceCheckTime")
    last_compliance_run_id: Optional[StrictStr] = Field(default=None, description="Output only. Unique identifier for the last compliance run. This id will be logged by the OS config agent during a compliance run and can be used for debugging and tracing purpose.", alias="lastComplianceRunId")
    name: Optional[StrictStr] = Field(default=None, description="Output only. The `InstanceOSPoliciesCompliance` API resource name. Format: `projects/{project_number}/locations/{location}/instanceOSPoliciesCompliances/{instance_id}`")
    os_policy_compliances: Optional[List[InstanceOSPoliciesComplianceOSPolicyCompliance]] = Field(default=None, description="Output only. Compliance data for each `OSPolicy` that is applied to the VM.", alias="osPolicyCompliances")
    state: Optional[StrictStr] = Field(default=None, description="Output only. Compliance state of the VM.")
    __properties: ClassVar[List[str]] = ["detailedState", "detailedStateReason", "instance", "lastComplianceCheckTime", "lastComplianceRunId", "name", "osPolicyCompliances", "state"]

    @field_validator('state')
    def state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['OS_POLICY_COMPLIANCE_STATE_UNSPECIFIED', 'COMPLIANT', 'NON_COMPLIANT', 'UNKNOWN', 'NO_OS_POLICIES_APPLICABLE']):
            raise ValueError("must be one of enum values ('OS_POLICY_COMPLIANCE_STATE_UNSPECIFIED', 'COMPLIANT', 'NON_COMPLIANT', 'UNKNOWN', 'NO_OS_POLICIES_APPLICABLE')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of InstanceOSPoliciesCompliance from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "detailed_state",
            "detailed_state_reason",
            "instance",
            "last_compliance_check_time",
            "last_compliance_run_id",
            "name",
            "os_policy_compliances",
            "state",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in os_policy_compliances (list)
        _items = []
        if self.os_policy_compliances:
            for _item_os_policy_compliances in self.os_policy_compliances:
                if _item_os_policy_compliances:
                    _items.append(_item_os_policy_compliances.to_dict())
            _dict['osPolicyCompliances'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of InstanceOSPoliciesCompliance from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "detailedState": obj.get("detailedState"),
            "detailedStateReason": obj.get("detailedStateReason"),
            "instance": obj.get("instance"),
            "lastComplianceCheckTime": obj.get("lastComplianceCheckTime"),
            "lastComplianceRunId": obj.get("lastComplianceRunId"),
            "name": obj.get("name"),
            "osPolicyCompliances": [InstanceOSPoliciesComplianceOSPolicyCompliance.from_dict(_item) for _item in obj["osPolicyCompliances"]] if obj.get("osPolicyCompliances") is not None else None,
            "state": obj.get("state")
        })
        return _obj



# coding: utf-8

"""
    OS Config API

    OS management tools that can be used for patch management, patch compliance, and configuration management on VM instances.

    The version of the OpenAPI document: v1alpha
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.os_policy_resource_file import OSPolicyResourceFile
from typing import Optional, Set
from typing_extensions import Self

class OSPolicyResourceExecResourceExec(BaseModel):
    """
    A file or script to execute.
    """ # noqa: E501
    args: Optional[List[StrictStr]] = Field(default=None, description="Optional arguments to pass to the source during execution.")
    file: Optional[OSPolicyResourceFile] = None
    interpreter: Optional[StrictStr] = Field(default=None, description="Required. The script interpreter to use.")
    output_file_path: Optional[StrictStr] = Field(default=None, description="Only recorded for enforce Exec. Path to an output file (that is created by this Exec) whose content will be recorded in OSPolicyResourceCompliance after a successful run. Absence or failure to read this file will result in this ExecResource being non-compliant. Output file size is limited to 100K bytes.", alias="outputFilePath")
    script: Optional[StrictStr] = Field(default=None, description="An inline script. The size of the script is limited to 32KiB.")
    __properties: ClassVar[List[str]] = ["args", "file", "interpreter", "outputFilePath", "script"]

    @field_validator('interpreter')
    def interpreter_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['INTERPRETER_UNSPECIFIED', 'NONE', 'SHELL', 'POWERSHELL']):
            raise ValueError("must be one of enum values ('INTERPRETER_UNSPECIFIED', 'NONE', 'SHELL', 'POWERSHELL')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of OSPolicyResourceExecResourceExec from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of file
        if self.file:
            _dict['file'] = self.file.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of OSPolicyResourceExecResourceExec from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "args": obj.get("args"),
            "file": OSPolicyResourceFile.from_dict(obj["file"]) if obj.get("file") is not None else None,
            "interpreter": obj.get("interpreter"),
            "outputFilePath": obj.get("outputFilePath"),
            "script": obj.get("script")
        })
        return _obj



# coding: utf-8

"""
    OS Config API

    OS management tools that can be used for patch management, patch compliance, and configuration management on VM instances.

    The version of the OpenAPI document: v1alpha
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.os_policy_resource_repository_resource_apt_repository import OSPolicyResourceRepositoryResourceAptRepository
from openapi_client.models.os_policy_resource_repository_resource_goo_repository import OSPolicyResourceRepositoryResourceGooRepository
from openapi_client.models.os_policy_resource_repository_resource_yum_repository import OSPolicyResourceRepositoryResourceYumRepository
from openapi_client.models.os_policy_resource_repository_resource_zypper_repository import OSPolicyResourceRepositoryResourceZypperRepository
from typing import Optional, Set
from typing_extensions import Self

class OSPolicyResourceRepositoryResource(BaseModel):
    """
    A resource that manages a package repository.
    """ # noqa: E501
    apt: Optional[OSPolicyResourceRepositoryResourceAptRepository] = None
    goo: Optional[OSPolicyResourceRepositoryResourceGooRepository] = None
    yum: Optional[OSPolicyResourceRepositoryResourceYumRepository] = None
    zypper: Optional[OSPolicyResourceRepositoryResourceZypperRepository] = None
    __properties: ClassVar[List[str]] = ["apt", "goo", "yum", "zypper"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of OSPolicyResourceRepositoryResource from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of apt
        if self.apt:
            _dict['apt'] = self.apt.to_dict()
        # override the default output from pydantic by calling `to_dict()` of goo
        if self.goo:
            _dict['goo'] = self.goo.to_dict()
        # override the default output from pydantic by calling `to_dict()` of yum
        if self.yum:
            _dict['yum'] = self.yum.to_dict()
        # override the default output from pydantic by calling `to_dict()` of zypper
        if self.zypper:
            _dict['zypper'] = self.zypper.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of OSPolicyResourceRepositoryResource from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "apt": OSPolicyResourceRepositoryResourceAptRepository.from_dict(obj["apt"]) if obj.get("apt") is not None else None,
            "goo": OSPolicyResourceRepositoryResourceGooRepository.from_dict(obj["goo"]) if obj.get("goo") is not None else None,
            "yum": OSPolicyResourceRepositoryResourceYumRepository.from_dict(obj["yum"]) if obj.get("yum") is not None else None,
            "zypper": OSPolicyResourceRepositoryResourceZypperRepository.from_dict(obj["zypper"]) if obj.get("zypper") is not None else None
        })
        return _obj



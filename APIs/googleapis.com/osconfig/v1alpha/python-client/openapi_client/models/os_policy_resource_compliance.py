# coding: utf-8

"""
    OS Config API

    OS management tools that can be used for patch management, patch compliance, and configuration management on VM instances.

    The version of the OpenAPI document: v1alpha
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.os_policy_resource_compliance_exec_resource_output import OSPolicyResourceComplianceExecResourceOutput
from openapi_client.models.os_policy_resource_config_step import OSPolicyResourceConfigStep
from typing import Optional, Set
from typing_extensions import Self

class OSPolicyResourceCompliance(BaseModel):
    """
    Compliance data for an OS policy resource.
    """ # noqa: E501
    config_steps: Optional[List[OSPolicyResourceConfigStep]] = Field(default=None, description="Ordered list of configuration steps taken by the agent for the OS policy resource.", alias="configSteps")
    exec_resource_output: Optional[OSPolicyResourceComplianceExecResourceOutput] = Field(default=None, alias="execResourceOutput")
    os_policy_resource_id: Optional[StrictStr] = Field(default=None, description="The id of the OS policy resource.", alias="osPolicyResourceId")
    state: Optional[StrictStr] = Field(default=None, description="Compliance state of the OS policy resource.")
    __properties: ClassVar[List[str]] = ["configSteps", "execResourceOutput", "osPolicyResourceId", "state"]

    @field_validator('state')
    def state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['OS_POLICY_COMPLIANCE_STATE_UNSPECIFIED', 'COMPLIANT', 'NON_COMPLIANT', 'UNKNOWN', 'NO_OS_POLICIES_APPLICABLE']):
            raise ValueError("must be one of enum values ('OS_POLICY_COMPLIANCE_STATE_UNSPECIFIED', 'COMPLIANT', 'NON_COMPLIANT', 'UNKNOWN', 'NO_OS_POLICIES_APPLICABLE')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of OSPolicyResourceCompliance from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in config_steps (list)
        _items = []
        if self.config_steps:
            for _item_config_steps in self.config_steps:
                if _item_config_steps:
                    _items.append(_item_config_steps.to_dict())
            _dict['configSteps'] = _items
        # override the default output from pydantic by calling `to_dict()` of exec_resource_output
        if self.exec_resource_output:
            _dict['execResourceOutput'] = self.exec_resource_output.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of OSPolicyResourceCompliance from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "configSteps": [OSPolicyResourceConfigStep.from_dict(_item) for _item in obj["configSteps"]] if obj.get("configSteps") is not None else None,
            "execResourceOutput": OSPolicyResourceComplianceExecResourceOutput.from_dict(obj["execResourceOutput"]) if obj.get("execResourceOutput") is not None else None,
            "osPolicyResourceId": obj.get("osPolicyResourceId"),
            "state": obj.get("state")
        })
        return _obj



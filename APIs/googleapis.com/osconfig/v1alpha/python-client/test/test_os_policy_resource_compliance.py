# coding: utf-8

"""
    OS Config API

    OS management tools that can be used for patch management, patch compliance, and configuration management on VM instances.

    The version of the OpenAPI document: v1alpha
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.os_policy_resource_compliance import OSPolicyResourceCompliance

class TestOSPolicyResourceCompliance(unittest.TestCase):
    """OSPolicyResourceCompliance unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> OSPolicyResourceCompliance:
        """Test OSPolicyResourceCompliance
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `OSPolicyResourceCompliance`
        """
        model = OSPolicyResourceCompliance()
        if include_optional:
            return OSPolicyResourceCompliance(
                config_steps = [
                    openapi_client.models.os_policy_resource_config_step.OSPolicyResourceConfigStep(
                        error_message = '', 
                        outcome = 'OUTCOME_UNSPECIFIED', 
                        type = 'TYPE_UNSPECIFIED', )
                    ],
                exec_resource_output = openapi_client.models.os_policy_resource_compliance_exec_resource_output.OSPolicyResourceComplianceExecResourceOutput(
                    enforcement_output = 'YQ==', ),
                os_policy_resource_id = '',
                state = 'OS_POLICY_COMPLIANCE_STATE_UNSPECIFIED'
            )
        else:
            return OSPolicyResourceCompliance(
        )
        """

    def testOSPolicyResourceCompliance(self):
        """Test OSPolicyResourceCompliance"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

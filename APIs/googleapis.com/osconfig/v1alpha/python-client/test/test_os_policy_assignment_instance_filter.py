# coding: utf-8

"""
    OS Config API

    OS management tools that can be used for patch management, patch compliance, and configuration management on VM instances.

    The version of the OpenAPI document: v1alpha
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.os_policy_assignment_instance_filter import OSPolicyAssignmentInstanceFilter

class TestOSPolicyAssignmentInstanceFilter(unittest.TestCase):
    """OSPolicyAssignmentInstanceFilter unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> OSPolicyAssignmentInstanceFilter:
        """Test OSPolicyAssignmentInstanceFilter
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `OSPolicyAssignmentInstanceFilter`
        """
        model = OSPolicyAssignmentInstanceFilter()
        if include_optional:
            return OSPolicyAssignmentInstanceFilter(
                all = True,
                exclusion_labels = [
                    openapi_client.models.os_policy_assignment_label_set.OSPolicyAssignmentLabelSet(
                        labels = {
                            'key' : ''
                            }, )
                    ],
                inclusion_labels = [
                    openapi_client.models.os_policy_assignment_label_set.OSPolicyAssignmentLabelSet(
                        labels = {
                            'key' : ''
                            }, )
                    ],
                inventories = [
                    openapi_client.models.os_policy_assignment_instance_filter_inventory.OSPolicyAssignmentInstanceFilterInventory(
                        os_short_name = '', 
                        os_version = '', )
                    ],
                os_short_names = [
                    ''
                    ]
            )
        else:
            return OSPolicyAssignmentInstanceFilter(
        )
        """

    def testOSPolicyAssignmentInstanceFilter(self):
        """Test OSPolicyAssignmentInstanceFilter"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

# coding: utf-8

"""
    OS Config API

    OS management tools that can be used for patch management, patch compliance, and configuration management on VM instances.

    The version of the OpenAPI document: v1alpha
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.os_policy_assignment import OSPolicyAssignment

class TestOSPolicyAssignment(unittest.TestCase):
    """OSPolicyAssignment unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> OSPolicyAssignment:
        """Test OSPolicyAssignment
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `OSPolicyAssignment`
        """
        model = OSPolicyAssignment()
        if include_optional:
            return OSPolicyAssignment(
                baseline = True,
                deleted = True,
                description = '',
                etag = '',
                instance_filter = openapi_client.models.os_policy_assignment_instance_filter.OSPolicyAssignmentInstanceFilter(
                    all = True, 
                    exclusion_labels = [
                        openapi_client.models.os_policy_assignment_label_set.OSPolicyAssignmentLabelSet(
                            labels = {
                                'key' : ''
                                }, )
                        ], 
                    inclusion_labels = [
                        openapi_client.models.os_policy_assignment_label_set.OSPolicyAssignmentLabelSet()
                        ], 
                    inventories = [
                        openapi_client.models.os_policy_assignment_instance_filter_inventory.OSPolicyAssignmentInstanceFilterInventory(
                            os_short_name = '', 
                            os_version = '', )
                        ], 
                    os_short_names = [
                        ''
                        ], ),
                name = '',
                os_policies = [
                    openapi_client.models.os_policy.OSPolicy(
                        allow_no_resource_group_match = True, 
                        description = '', 
                        id = '', 
                        mode = 'MODE_UNSPECIFIED', 
                        resource_groups = [
                            openapi_client.models.os_policy_resource_group.OSPolicyResourceGroup(
                                inventory_filters = [
                                    openapi_client.models.os_policy_inventory_filter.OSPolicyInventoryFilter(
                                        os_short_name = '', 
                                        os_version = '', )
                                    ], 
                                os_filter = openapi_client.models.os_policy_os_filter.OSPolicyOSFilter(
                                    os_short_name = '', 
                                    os_version = '', ), 
                                resources = [
                                    openapi_client.models.os_policy_resource.OSPolicyResource(
                                        exec = openapi_client.models.os_policy_resource_exec_resource.OSPolicyResourceExecResource(
                                            enforce = openapi_client.models.os_policy_resource_exec_resource_exec.OSPolicyResourceExecResourceExec(
                                                args = [
                                                    ''
                                                    ], 
                                                file = openapi_client.models.os_policy_resource_file.OSPolicyResourceFile(
                                                    allow_insecure = True, 
                                                    gcs = openapi_client.models.os_policy_resource_file_gcs.OSPolicyResourceFileGcs(
                                                        bucket = '', 
                                                        generation = '', 
                                                        object = '', ), 
                                                    local_path = '', 
                                                    remote = openapi_client.models.os_policy_resource_file_remote.OSPolicyResourceFileRemote(
                                                        sha256_checksum = '', 
                                                        uri = '', ), ), 
                                                interpreter = 'INTERPRETER_UNSPECIFIED', 
                                                output_file_path = '', 
                                                script = '', ), 
                                            validate = openapi_client.models.os_policy_resource_exec_resource_exec.OSPolicyResourceExecResourceExec(
                                                interpreter = 'INTERPRETER_UNSPECIFIED', 
                                                output_file_path = '', 
                                                script = '', ), ), 
                                        file = openapi_client.models.os_policy_resource_file_resource.OSPolicyResourceFileResource(
                                            content = '', 
                                            path = '', 
                                            permissions = '', 
                                            state = 'DESIRED_STATE_UNSPECIFIED', ), 
                                        id = '', 
                                        pkg = openapi_client.models.os_policy_resource_package_resource.OSPolicyResourcePackageResource(
                                            apt = openapi_client.models.os_policy_resource_package_resource_apt.OSPolicyResourcePackageResourceAPT(
                                                name = '', ), 
                                            deb = openapi_client.models.os_policy_resource_package_resource_deb.OSPolicyResourcePackageResourceDeb(
                                                pull_deps = True, 
                                                source = openapi_client.models.os_policy_resource_file.OSPolicyResourceFile(
                                                    allow_insecure = True, 
                                                    local_path = '', ), ), 
                                            desired_state = 'DESIRED_STATE_UNSPECIFIED', 
                                            googet = openapi_client.models.os_policy_resource_package_resource_goo_get.OSPolicyResourcePackageResourceGooGet(
                                                name = '', ), 
                                            msi = openapi_client.models.os_policy_resource_package_resource_msi.OSPolicyResourcePackageResourceMSI(
                                                properties = [
                                                    ''
                                                    ], ), 
                                            rpm = openapi_client.models.os_policy_resource_package_resource_rpm.OSPolicyResourcePackageResourceRPM(
                                                pull_deps = True, ), 
                                            yum = openapi_client.models.os_policy_resource_package_resource_yum.OSPolicyResourcePackageResourceYUM(
                                                name = '', ), 
                                            zypper = openapi_client.models.os_policy_resource_package_resource_zypper.OSPolicyResourcePackageResourceZypper(
                                                name = '', ), ), 
                                        repository = openapi_client.models.os_policy_resource_repository_resource.OSPolicyResourceRepositoryResource(
                                            goo = openapi_client.models.os_policy_resource_repository_resource_goo_repository.OSPolicyResourceRepositoryResourceGooRepository(
                                                name = '', 
                                                url = '', ), ), )
                                    ], )
                            ], )
                    ],
                reconciling = True,
                revision_create_time = '',
                revision_id = '',
                rollout = openapi_client.models.os_policy_assignment_rollout.OSPolicyAssignmentRollout(
                    disruption_budget = openapi_client.models.fixed_or_percent.FixedOrPercent(
                        fixed = 56, 
                        percent = 56, ), 
                    min_wait_duration = '', ),
                rollout_state = 'ROLLOUT_STATE_UNSPECIFIED',
                uid = ''
            )
        else:
            return OSPolicyAssignment(
        )
        """

    def testOSPolicyAssignment(self):
        """Test OSPolicyAssignment"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

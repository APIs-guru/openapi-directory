# coding: utf-8

"""
    OS Config API

    OS management tools that can be used for patch management, patch compliance, and configuration management on VM instances.

    The version of the OpenAPI document: v1alpha
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.os_policy_resource_package_resource import OSPolicyResourcePackageResource

class TestOSPolicyResourcePackageResource(unittest.TestCase):
    """OSPolicyResourcePackageResource unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> OSPolicyResourcePackageResource:
        """Test OSPolicyResourcePackageResource
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `OSPolicyResourcePackageResource`
        """
        model = OSPolicyResourcePackageResource()
        if include_optional:
            return OSPolicyResourcePackageResource(
                apt = openapi_client.models.os_policy_resource_package_resource_apt.OSPolicyResourcePackageResourceAPT(
                    name = '', ),
                deb = openapi_client.models.os_policy_resource_package_resource_deb.OSPolicyResourcePackageResourceDeb(
                    pull_deps = True, 
                    source = openapi_client.models.os_policy_resource_file.OSPolicyResourceFile(
                        allow_insecure = True, 
                        gcs = openapi_client.models.os_policy_resource_file_gcs.OSPolicyResourceFileGcs(
                            bucket = '', 
                            generation = '', 
                            object = '', ), 
                        local_path = '', 
                        remote = openapi_client.models.os_policy_resource_file_remote.OSPolicyResourceFileRemote(
                            sha256_checksum = '', 
                            uri = '', ), ), ),
                desired_state = 'DESIRED_STATE_UNSPECIFIED',
                googet = openapi_client.models.os_policy_resource_package_resource_goo_get.OSPolicyResourcePackageResourceGooGet(
                    name = '', ),
                msi = openapi_client.models.os_policy_resource_package_resource_msi.OSPolicyResourcePackageResourceMSI(
                    properties = [
                        ''
                        ], 
                    source = openapi_client.models.os_policy_resource_file.OSPolicyResourceFile(
                        allow_insecure = True, 
                        gcs = openapi_client.models.os_policy_resource_file_gcs.OSPolicyResourceFileGcs(
                            bucket = '', 
                            generation = '', 
                            object = '', ), 
                        local_path = '', 
                        remote = openapi_client.models.os_policy_resource_file_remote.OSPolicyResourceFileRemote(
                            sha256_checksum = '', 
                            uri = '', ), ), ),
                rpm = openapi_client.models.os_policy_resource_package_resource_rpm.OSPolicyResourcePackageResourceRPM(
                    pull_deps = True, 
                    source = openapi_client.models.os_policy_resource_file.OSPolicyResourceFile(
                        allow_insecure = True, 
                        gcs = openapi_client.models.os_policy_resource_file_gcs.OSPolicyResourceFileGcs(
                            bucket = '', 
                            generation = '', 
                            object = '', ), 
                        local_path = '', 
                        remote = openapi_client.models.os_policy_resource_file_remote.OSPolicyResourceFileRemote(
                            sha256_checksum = '', 
                            uri = '', ), ), ),
                yum = openapi_client.models.os_policy_resource_package_resource_yum.OSPolicyResourcePackageResourceYUM(
                    name = '', ),
                zypper = openapi_client.models.os_policy_resource_package_resource_zypper.OSPolicyResourcePackageResourceZypper(
                    name = '', )
            )
        else:
            return OSPolicyResourcePackageResource(
        )
        """

    def testOSPolicyResourcePackageResource(self):
        """Test OSPolicyResourcePackageResource"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

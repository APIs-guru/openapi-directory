# coding: utf-8

"""
    OS Config API

    OS management tools that can be used for patch management, patch compliance, and configuration management on VM instances.

    The version of the OpenAPI document: v1beta
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.list_patch_deployments_response import ListPatchDeploymentsResponse

class TestListPatchDeploymentsResponse(unittest.TestCase):
    """ListPatchDeploymentsResponse unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> ListPatchDeploymentsResponse:
        """Test ListPatchDeploymentsResponse
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `ListPatchDeploymentsResponse`
        """
        model = ListPatchDeploymentsResponse()
        if include_optional:
            return ListPatchDeploymentsResponse(
                next_page_token = '',
                patch_deployments = [
                    openapi_client.models.patch_deployment.PatchDeployment(
                        create_time = '', 
                        description = '', 
                        duration = '', 
                        instance_filter = openapi_client.models.patch_instance_filter.PatchInstanceFilter(
                            all = True, 
                            group_labels = [
                                openapi_client.models.patch_instance_filter_group_label.PatchInstanceFilterGroupLabel(
                                    labels = {
                                        'key' : ''
                                        }, )
                                ], 
                            instance_name_prefixes = [
                                ''
                                ], 
                            instances = [
                                ''
                                ], 
                            zones = [
                                ''
                                ], ), 
                        last_execute_time = '', 
                        name = '', 
                        one_time_schedule = openapi_client.models.one_time_schedule.OneTimeSchedule(
                            execute_time = '', ), 
                        patch_config = openapi_client.models.patch_config.PatchConfig(
                            apt = openapi_client.models.apt_settings.AptSettings(
                                excludes = [
                                    ''
                                    ], 
                                exclusive_packages = [
                                    ''
                                    ], 
                                type = 'TYPE_UNSPECIFIED', ), 
                            goo = openapi_client.models.goo_settings.GooSettings(), 
                            mig_instances_allowed = True, 
                            post_step = openapi_client.models.exec_step.ExecStep(
                                linux_exec_step_config = openapi_client.models.exec_step_config.ExecStepConfig(
                                    allowed_success_codes = [
                                        56
                                        ], 
                                    gcs_object = openapi_client.models.gcs_object.GcsObject(
                                        bucket = '', 
                                        generation_number = '', 
                                        object = '', ), 
                                    interpreter = 'INTERPRETER_UNSPECIFIED', 
                                    local_path = '', ), 
                                windows_exec_step_config = openapi_client.models.exec_step_config.ExecStepConfig(
                                    interpreter = 'INTERPRETER_UNSPECIFIED', 
                                    local_path = '', ), ), 
                            pre_step = openapi_client.models.exec_step.ExecStep(), 
                            reboot_config = 'REBOOT_CONFIG_UNSPECIFIED', 
                            windows_update = openapi_client.models.windows_update_settings.WindowsUpdateSettings(
                                classifications = [
                                    'CLASSIFICATION_UNSPECIFIED'
                                    ], 
                                exclusive_patches = [
                                    ''
                                    ], ), 
                            yum = openapi_client.models.yum_settings.YumSettings(
                                minimal = True, 
                                security = True, ), 
                            zypper = openapi_client.models.zypper_settings.ZypperSettings(
                                categories = [
                                    ''
                                    ], 
                                severities = [
                                    ''
                                    ], 
                                with_optional = True, 
                                with_update = True, ), ), 
                        recurring_schedule = openapi_client.models.recurring_schedule.RecurringSchedule(
                            end_time = '', 
                            frequency = 'FREQUENCY_UNSPECIFIED', 
                            last_execute_time = '', 
                            monthly = openapi_client.models.monthly_schedule.MonthlySchedule(
                                month_day = 56, 
                                week_day_of_month = openapi_client.models.week_day_of_month.WeekDayOfMonth(
                                    day_of_week = 'DAY_OF_WEEK_UNSPECIFIED', 
                                    day_offset = 56, 
                                    week_ordinal = 56, ), ), 
                            next_execute_time = '', 
                            start_time = '', 
                            time_of_day = openapi_client.models.time_of_day.TimeOfDay(
                                hours = 56, 
                                minutes = 56, 
                                nanos = 56, 
                                seconds = 56, ), 
                            time_zone = openapi_client.models.time_zone.TimeZone(
                                id = '', 
                                version = '', ), 
                            weekly = openapi_client.models.weekly_schedule.WeeklySchedule(
                                day_of_week = 'DAY_OF_WEEK_UNSPECIFIED', ), ), 
                        rollout = openapi_client.models.patch_rollout.PatchRollout(
                            disruption_budget = openapi_client.models.fixed_or_percent.FixedOrPercent(
                                fixed = 56, 
                                percent = 56, ), 
                            mode = 'MODE_UNSPECIFIED', ), 
                        state = 'STATE_UNSPECIFIED', 
                        update_time = '', )
                    ]
            )
        else:
            return ListPatchDeploymentsResponse(
        )
        """

    def testListPatchDeploymentsResponse(self):
        """Test ListPatchDeploymentsResponse"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

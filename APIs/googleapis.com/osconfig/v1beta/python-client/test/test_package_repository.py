# coding: utf-8

"""
    OS Config API

    OS management tools that can be used for patch management, patch compliance, and configuration management on VM instances.

    The version of the OpenAPI document: v1beta
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.package_repository import PackageRepository

class TestPackageRepository(unittest.TestCase):
    """PackageRepository unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> PackageRepository:
        """Test PackageRepository
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `PackageRepository`
        """
        model = PackageRepository()
        if include_optional:
            return PackageRepository(
                apt = openapi_client.models.apt_repository.AptRepository(
                    archive_type = 'ARCHIVE_TYPE_UNSPECIFIED', 
                    components = [
                        ''
                        ], 
                    distribution = '', 
                    gpg_key = '', 
                    uri = '', ),
                goo = openapi_client.models.goo_repository.GooRepository(
                    name = '', 
                    url = '', ),
                yum = openapi_client.models.yum_repository.YumRepository(
                    base_url = '', 
                    display_name = '', 
                    gpg_keys = [
                        ''
                        ], 
                    id = '', ),
                zypper = openapi_client.models.zypper_repository.ZypperRepository(
                    base_url = '', 
                    display_name = '', 
                    gpg_keys = [
                        ''
                        ], 
                    id = '', )
            )
        else:
            return PackageRepository(
        )
        """

    def testPackageRepository(self):
        """Test PackageRepository"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

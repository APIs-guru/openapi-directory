# coding: utf-8

"""
    OS Config API

    OS management tools that can be used for patch management, patch compliance, and configuration management on VM instances.

    The version of the OpenAPI document: v1beta
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.effective_guest_policy_sourced_software_recipe import EffectiveGuestPolicySourcedSoftwareRecipe

class TestEffectiveGuestPolicySourcedSoftwareRecipe(unittest.TestCase):
    """EffectiveGuestPolicySourcedSoftwareRecipe unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> EffectiveGuestPolicySourcedSoftwareRecipe:
        """Test EffectiveGuestPolicySourcedSoftwareRecipe
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `EffectiveGuestPolicySourcedSoftwareRecipe`
        """
        model = EffectiveGuestPolicySourcedSoftwareRecipe()
        if include_optional:
            return EffectiveGuestPolicySourcedSoftwareRecipe(
                software_recipe = openapi_client.models.software_recipe.SoftwareRecipe(
                    artifacts = [
                        openapi_client.models.software_recipe_artifact.SoftwareRecipeArtifact(
                            allow_insecure = True, 
                            gcs = openapi_client.models.software_recipe_artifact_gcs.SoftwareRecipeArtifactGcs(
                                bucket = '', 
                                generation = '', 
                                object = '', ), 
                            id = '', 
                            remote = openapi_client.models.software_recipe_artifact_remote.SoftwareRecipeArtifactRemote(
                                checksum = '', 
                                uri = '', ), )
                        ], 
                    desired_state = 'DESIRED_STATE_UNSPECIFIED', 
                    install_steps = [
                        openapi_client.models.software_recipe_step.SoftwareRecipeStep(
                            archive_extraction = openapi_client.models.software_recipe_step_extract_archive.SoftwareRecipeStepExtractArchive(
                                artifact_id = '', 
                                destination = '', 
                                type = 'ARCHIVE_TYPE_UNSPECIFIED', ), 
                            dpkg_installation = openapi_client.models.software_recipe_step_install_dpkg.SoftwareRecipeStepInstallDpkg(
                                artifact_id = '', ), 
                            file_copy = openapi_client.models.software_recipe_step_copy_file.SoftwareRecipeStepCopyFile(
                                artifact_id = '', 
                                destination = '', 
                                overwrite = True, 
                                permissions = '', ), 
                            file_exec = openapi_client.models.software_recipe_step_exec_file.SoftwareRecipeStepExecFile(
                                allowed_exit_codes = [
                                    56
                                    ], 
                                args = [
                                    ''
                                    ], 
                                artifact_id = '', 
                                local_path = '', ), 
                            msi_installation = openapi_client.models.software_recipe_step_install_msi.SoftwareRecipeStepInstallMsi(
                                artifact_id = '', 
                                flags = [
                                    ''
                                    ], ), 
                            rpm_installation = openapi_client.models.software_recipe_step_install_rpm.SoftwareRecipeStepInstallRpm(
                                artifact_id = '', ), 
                            script_run = openapi_client.models.software_recipe_step_run_script.SoftwareRecipeStepRunScript(
                                interpreter = 'INTERPRETER_UNSPECIFIED', 
                                script = '', ), )
                        ], 
                    name = '', 
                    update_steps = [
                        openapi_client.models.software_recipe_step.SoftwareRecipeStep()
                        ], 
                    version = '', ),
                source = ''
            )
        else:
            return EffectiveGuestPolicySourcedSoftwareRecipe(
        )
        """

    def testEffectiveGuestPolicySourcedSoftwareRecipe(self):
        """Test EffectiveGuestPolicySourcedSoftwareRecipe"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

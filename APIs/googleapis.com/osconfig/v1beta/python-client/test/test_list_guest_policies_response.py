# coding: utf-8

"""
    OS Config API

    OS management tools that can be used for patch management, patch compliance, and configuration management on VM instances.

    The version of the OpenAPI document: v1beta
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.list_guest_policies_response import ListGuestPoliciesResponse

class TestListGuestPoliciesResponse(unittest.TestCase):
    """ListGuestPoliciesResponse unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> ListGuestPoliciesResponse:
        """Test ListGuestPoliciesResponse
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `ListGuestPoliciesResponse`
        """
        model = ListGuestPoliciesResponse()
        if include_optional:
            return ListGuestPoliciesResponse(
                guest_policies = [
                    openapi_client.models.guest_policy.GuestPolicy(
                        assignment = openapi_client.models.assignment.Assignment(
                            group_labels = [
                                openapi_client.models.assignment_group_label.AssignmentGroupLabel(
                                    labels = {
                                        'key' : ''
                                        }, )
                                ], 
                            instance_name_prefixes = [
                                ''
                                ], 
                            instances = [
                                ''
                                ], 
                            os_types = [
                                openapi_client.models.assignment_os_type.AssignmentOsType(
                                    os_architecture = '', 
                                    os_short_name = '', 
                                    os_version = '', )
                                ], 
                            zones = [
                                ''
                                ], ), 
                        create_time = '', 
                        description = '', 
                        etag = '', 
                        name = '', 
                        package_repositories = [
                            openapi_client.models.package_repository.PackageRepository(
                                apt = openapi_client.models.apt_repository.AptRepository(
                                    archive_type = 'ARCHIVE_TYPE_UNSPECIFIED', 
                                    components = [
                                        ''
                                        ], 
                                    distribution = '', 
                                    gpg_key = '', 
                                    uri = '', ), 
                                goo = openapi_client.models.goo_repository.GooRepository(
                                    name = '', 
                                    url = '', ), 
                                yum = openapi_client.models.yum_repository.YumRepository(
                                    base_url = '', 
                                    display_name = '', 
                                    gpg_keys = [
                                        ''
                                        ], 
                                    id = '', ), 
                                zypper = openapi_client.models.zypper_repository.ZypperRepository(
                                    base_url = '', 
                                    display_name = '', 
                                    id = '', ), )
                            ], 
                        packages = [
                            openapi_client.models.package.Package(
                                desired_state = 'DESIRED_STATE_UNSPECIFIED', 
                                manager = 'MANAGER_UNSPECIFIED', 
                                name = '', )
                            ], 
                        recipes = [
                            openapi_client.models.software_recipe.SoftwareRecipe(
                                artifacts = [
                                    openapi_client.models.software_recipe_artifact.SoftwareRecipeArtifact(
                                        allow_insecure = True, 
                                        gcs = openapi_client.models.software_recipe_artifact_gcs.SoftwareRecipeArtifactGcs(
                                            bucket = '', 
                                            generation = '', 
                                            object = '', ), 
                                        id = '', 
                                        remote = openapi_client.models.software_recipe_artifact_remote.SoftwareRecipeArtifactRemote(
                                            checksum = '', 
                                            uri = '', ), )
                                    ], 
                                desired_state = 'DESIRED_STATE_UNSPECIFIED', 
                                install_steps = [
                                    openapi_client.models.software_recipe_step.SoftwareRecipeStep(
                                        archive_extraction = openapi_client.models.software_recipe_step_extract_archive.SoftwareRecipeStepExtractArchive(
                                            artifact_id = '', 
                                            destination = '', 
                                            type = 'ARCHIVE_TYPE_UNSPECIFIED', ), 
                                        dpkg_installation = openapi_client.models.software_recipe_step_install_dpkg.SoftwareRecipeStepInstallDpkg(
                                            artifact_id = '', ), 
                                        file_copy = openapi_client.models.software_recipe_step_copy_file.SoftwareRecipeStepCopyFile(
                                            artifact_id = '', 
                                            destination = '', 
                                            overwrite = True, 
                                            permissions = '', ), 
                                        file_exec = openapi_client.models.software_recipe_step_exec_file.SoftwareRecipeStepExecFile(
                                            allowed_exit_codes = [
                                                56
                                                ], 
                                            args = [
                                                ''
                                                ], 
                                            artifact_id = '', 
                                            local_path = '', ), 
                                        msi_installation = openapi_client.models.software_recipe_step_install_msi.SoftwareRecipeStepInstallMsi(
                                            artifact_id = '', 
                                            flags = [
                                                ''
                                                ], ), 
                                        rpm_installation = openapi_client.models.software_recipe_step_install_rpm.SoftwareRecipeStepInstallRpm(
                                            artifact_id = '', ), 
                                        script_run = openapi_client.models.software_recipe_step_run_script.SoftwareRecipeStepRunScript(
                                            interpreter = 'INTERPRETER_UNSPECIFIED', 
                                            script = '', ), )
                                    ], 
                                name = '', 
                                update_steps = [
                                    openapi_client.models.software_recipe_step.SoftwareRecipeStep()
                                    ], 
                                version = '', )
                            ], 
                        update_time = '', )
                    ],
                next_page_token = ''
            )
        else:
            return ListGuestPoliciesResponse(
        )
        """

    def testListGuestPoliciesResponse(self):
        """Test ListGuestPoliciesResponse"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

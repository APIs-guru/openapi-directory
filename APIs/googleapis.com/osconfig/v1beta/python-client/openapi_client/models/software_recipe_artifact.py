# coding: utf-8

"""
    OS Config API

    OS management tools that can be used for patch management, patch compliance, and configuration management on VM instances.

    The version of the OpenAPI document: v1beta
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.software_recipe_artifact_gcs import SoftwareRecipeArtifactGcs
from openapi_client.models.software_recipe_artifact_remote import SoftwareRecipeArtifactRemote
from typing import Optional, Set
from typing_extensions import Self

class SoftwareRecipeArtifact(BaseModel):
    """
    Specifies a resource to be used in the recipe.
    """ # noqa: E501
    allow_insecure: Optional[StrictBool] = Field(default=None, description="Defaults to false. When false, recipes are subject to validations based on the artifact type: Remote: A checksum must be specified, and only protocols with transport-layer security are permitted. GCS: An object generation number must be specified.", alias="allowInsecure")
    gcs: Optional[SoftwareRecipeArtifactGcs] = None
    id: Optional[StrictStr] = Field(default=None, description="Required. Id of the artifact, which the installation and update steps of this recipe can reference. Artifacts in a recipe cannot have the same id.")
    remote: Optional[SoftwareRecipeArtifactRemote] = None
    __properties: ClassVar[List[str]] = ["allowInsecure", "gcs", "id", "remote"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SoftwareRecipeArtifact from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of gcs
        if self.gcs:
            _dict['gcs'] = self.gcs.to_dict()
        # override the default output from pydantic by calling `to_dict()` of remote
        if self.remote:
            _dict['remote'] = self.remote.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SoftwareRecipeArtifact from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "allowInsecure": obj.get("allowInsecure"),
            "gcs": SoftwareRecipeArtifactGcs.from_dict(obj["gcs"]) if obj.get("gcs") is not None else None,
            "id": obj.get("id"),
            "remote": SoftwareRecipeArtifactRemote.from_dict(obj["remote"]) if obj.get("remote") is not None else None
        })
        return _obj



# coding: utf-8

"""
    OS Config API

    OS management tools that can be used for patch management, patch compliance, and configuration management on VM instances.

    The version of the OpenAPI document: v1beta
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.software_recipe_artifact import SoftwareRecipeArtifact
from openapi_client.models.software_recipe_step import SoftwareRecipeStep
from typing import Optional, Set
from typing_extensions import Self

class SoftwareRecipe(BaseModel):
    """
    A software recipe is a set of instructions for installing and configuring a piece of software. It consists of a set of artifacts that are downloaded, and a set of steps that install, configure, and/or update the software. Recipes support installing and updating software from artifacts in the following formats: Zip archive, Tar archive, Windows MSI, Debian package, and RPM package. Additionally, recipes support executing a script (either defined in a file or directly in this api) in bash, sh, cmd, and powershell. Updating a software recipe If a recipe is assigned to an instance and there is a recipe with the same name but a lower version already installed and the assigned state of the recipe is `UPDATED`, then the recipe is updated to the new version. Script Working Directories Each script or execution step is run in its own temporary directory which is deleted after completing the step.
    """ # noqa: E501
    artifacts: Optional[List[SoftwareRecipeArtifact]] = Field(default=None, description="Resources available to be used in the steps in the recipe.")
    desired_state: Optional[StrictStr] = Field(default=None, description="Default is INSTALLED. The desired state the agent should maintain for this recipe. INSTALLED: The software recipe is installed on the instance but won't be updated to new versions. UPDATED: The software recipe is installed on the instance. The recipe is updated to a higher version, if a higher version of the recipe is assigned to this instance. REMOVE: Remove is unsupported for software recipes and attempts to create or update a recipe to the REMOVE state is rejected.", alias="desiredState")
    install_steps: Optional[List[SoftwareRecipeStep]] = Field(default=None, description="Actions to be taken for installing this recipe. On failure it stops executing steps and does not attempt another installation. Any steps taken (including partially completed steps) are not rolled back.", alias="installSteps")
    name: Optional[StrictStr] = Field(default=None, description="Required. Unique identifier for the recipe. Only one recipe with a given name is installed on an instance. Names are also used to identify resources which helps to determine whether guest policies have conflicts. This means that requests to create multiple recipes with the same name and version are rejected since they could potentially have conflicting assignments.")
    update_steps: Optional[List[SoftwareRecipeStep]] = Field(default=None, description="Actions to be taken for updating this recipe. On failure it stops executing steps and does not attempt another update for this recipe. Any steps taken (including partially completed steps) are not rolled back.", alias="updateSteps")
    version: Optional[StrictStr] = Field(default=None, description="The version of this software recipe. Version can be up to 4 period separated numbers (e.g. 12.34.56.78).")
    __properties: ClassVar[List[str]] = ["artifacts", "desiredState", "installSteps", "name", "updateSteps", "version"]

    @field_validator('desired_state')
    def desired_state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['DESIRED_STATE_UNSPECIFIED', 'INSTALLED', 'UPDATED', 'REMOVED']):
            raise ValueError("must be one of enum values ('DESIRED_STATE_UNSPECIFIED', 'INSTALLED', 'UPDATED', 'REMOVED')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SoftwareRecipe from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in artifacts (list)
        _items = []
        if self.artifacts:
            for _item_artifacts in self.artifacts:
                if _item_artifacts:
                    _items.append(_item_artifacts.to_dict())
            _dict['artifacts'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in install_steps (list)
        _items = []
        if self.install_steps:
            for _item_install_steps in self.install_steps:
                if _item_install_steps:
                    _items.append(_item_install_steps.to_dict())
            _dict['installSteps'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in update_steps (list)
        _items = []
        if self.update_steps:
            for _item_update_steps in self.update_steps:
                if _item_update_steps:
                    _items.append(_item_update_steps.to_dict())
            _dict['updateSteps'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SoftwareRecipe from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "artifacts": [SoftwareRecipeArtifact.from_dict(_item) for _item in obj["artifacts"]] if obj.get("artifacts") is not None else None,
            "desiredState": obj.get("desiredState"),
            "installSteps": [SoftwareRecipeStep.from_dict(_item) for _item in obj["installSteps"]] if obj.get("installSteps") is not None else None,
            "name": obj.get("name"),
            "updateSteps": [SoftwareRecipeStep.from_dict(_item) for _item in obj["updateSteps"]] if obj.get("updateSteps") is not None else None,
            "version": obj.get("version")
        })
        return _obj



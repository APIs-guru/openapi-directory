# coding: utf-8

"""
    OS Config API

    OS management tools that can be used for patch management, patch compliance, and configuration management on VM instances.

    The version of the OpenAPI document: v1beta
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.one_time_schedule import OneTimeSchedule
from openapi_client.models.patch_config import PatchConfig
from openapi_client.models.patch_instance_filter import PatchInstanceFilter
from openapi_client.models.patch_rollout import PatchRollout
from openapi_client.models.recurring_schedule import RecurringSchedule
from typing import Optional, Set
from typing_extensions import Self

class PatchDeployment(BaseModel):
    """
    Patch deployments are configurations that individual patch jobs use to complete a patch. These configurations include instance filter, package repository settings, and a schedule. For more information about creating and managing patch deployments, see [Scheduling patch jobs](https://cloud.google.com/compute/docs/os-patch-management/schedule-patch-jobs).
    """ # noqa: E501
    create_time: Optional[StrictStr] = Field(default=None, description="Output only. Time the patch deployment was created. Timestamp is in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) text format.", alias="createTime")
    description: Optional[StrictStr] = Field(default=None, description="Optional. Description of the patch deployment. Length of the description is limited to 1024 characters.")
    duration: Optional[StrictStr] = Field(default=None, description="Optional. Duration of the patch. After the duration ends, the patch times out.")
    instance_filter: Optional[PatchInstanceFilter] = Field(default=None, alias="instanceFilter")
    last_execute_time: Optional[StrictStr] = Field(default=None, description="Output only. The last time a patch job was started by this deployment. Timestamp is in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) text format.", alias="lastExecuteTime")
    name: Optional[StrictStr] = Field(default=None, description="Unique name for the patch deployment resource in a project. The patch deployment name is in the form: `projects/{project_id}/patchDeployments/{patch_deployment_id}`. This field is ignored when you create a new patch deployment.")
    one_time_schedule: Optional[OneTimeSchedule] = Field(default=None, alias="oneTimeSchedule")
    patch_config: Optional[PatchConfig] = Field(default=None, alias="patchConfig")
    recurring_schedule: Optional[RecurringSchedule] = Field(default=None, alias="recurringSchedule")
    rollout: Optional[PatchRollout] = None
    state: Optional[StrictStr] = Field(default=None, description="Output only. Current state of the patch deployment.")
    update_time: Optional[StrictStr] = Field(default=None, description="Output only. Time the patch deployment was last updated. Timestamp is in [RFC3339](https://www.ietf.org/rfc/rfc3339.txt) text format.", alias="updateTime")
    __properties: ClassVar[List[str]] = ["createTime", "description", "duration", "instanceFilter", "lastExecuteTime", "name", "oneTimeSchedule", "patchConfig", "recurringSchedule", "rollout", "state", "updateTime"]

    @field_validator('state')
    def state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['STATE_UNSPECIFIED', 'ACTIVE', 'PAUSED']):
            raise ValueError("must be one of enum values ('STATE_UNSPECIFIED', 'ACTIVE', 'PAUSED')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PatchDeployment from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "create_time",
            "last_execute_time",
            "state",
            "update_time",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of instance_filter
        if self.instance_filter:
            _dict['instanceFilter'] = self.instance_filter.to_dict()
        # override the default output from pydantic by calling `to_dict()` of one_time_schedule
        if self.one_time_schedule:
            _dict['oneTimeSchedule'] = self.one_time_schedule.to_dict()
        # override the default output from pydantic by calling `to_dict()` of patch_config
        if self.patch_config:
            _dict['patchConfig'] = self.patch_config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of recurring_schedule
        if self.recurring_schedule:
            _dict['recurringSchedule'] = self.recurring_schedule.to_dict()
        # override the default output from pydantic by calling `to_dict()` of rollout
        if self.rollout:
            _dict['rollout'] = self.rollout.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PatchDeployment from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "createTime": obj.get("createTime"),
            "description": obj.get("description"),
            "duration": obj.get("duration"),
            "instanceFilter": PatchInstanceFilter.from_dict(obj["instanceFilter"]) if obj.get("instanceFilter") is not None else None,
            "lastExecuteTime": obj.get("lastExecuteTime"),
            "name": obj.get("name"),
            "oneTimeSchedule": OneTimeSchedule.from_dict(obj["oneTimeSchedule"]) if obj.get("oneTimeSchedule") is not None else None,
            "patchConfig": PatchConfig.from_dict(obj["patchConfig"]) if obj.get("patchConfig") is not None else None,
            "recurringSchedule": RecurringSchedule.from_dict(obj["recurringSchedule"]) if obj.get("recurringSchedule") is not None else None,
            "rollout": PatchRollout.from_dict(obj["rollout"]) if obj.get("rollout") is not None else None,
            "state": obj.get("state"),
            "updateTime": obj.get("updateTime")
        })
        return _obj



# coding: utf-8

"""
    OS Config API

    OS management tools that can be used for patch management, patch compliance, and configuration management on VM instances.

    The version of the OpenAPI document: v1beta
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.software_recipe_step_copy_file import SoftwareRecipeStepCopyFile
from openapi_client.models.software_recipe_step_exec_file import SoftwareRecipeStepExecFile
from openapi_client.models.software_recipe_step_extract_archive import SoftwareRecipeStepExtractArchive
from openapi_client.models.software_recipe_step_install_dpkg import SoftwareRecipeStepInstallDpkg
from openapi_client.models.software_recipe_step_install_msi import SoftwareRecipeStepInstallMsi
from openapi_client.models.software_recipe_step_install_rpm import SoftwareRecipeStepInstallRpm
from openapi_client.models.software_recipe_step_run_script import SoftwareRecipeStepRunScript
from typing import Optional, Set
from typing_extensions import Self

class SoftwareRecipeStep(BaseModel):
    """
    An action that can be taken as part of installing or updating a recipe.
    """ # noqa: E501
    archive_extraction: Optional[SoftwareRecipeStepExtractArchive] = Field(default=None, alias="archiveExtraction")
    dpkg_installation: Optional[SoftwareRecipeStepInstallDpkg] = Field(default=None, alias="dpkgInstallation")
    file_copy: Optional[SoftwareRecipeStepCopyFile] = Field(default=None, alias="fileCopy")
    file_exec: Optional[SoftwareRecipeStepExecFile] = Field(default=None, alias="fileExec")
    msi_installation: Optional[SoftwareRecipeStepInstallMsi] = Field(default=None, alias="msiInstallation")
    rpm_installation: Optional[SoftwareRecipeStepInstallRpm] = Field(default=None, alias="rpmInstallation")
    script_run: Optional[SoftwareRecipeStepRunScript] = Field(default=None, alias="scriptRun")
    __properties: ClassVar[List[str]] = ["archiveExtraction", "dpkgInstallation", "fileCopy", "fileExec", "msiInstallation", "rpmInstallation", "scriptRun"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SoftwareRecipeStep from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of archive_extraction
        if self.archive_extraction:
            _dict['archiveExtraction'] = self.archive_extraction.to_dict()
        # override the default output from pydantic by calling `to_dict()` of dpkg_installation
        if self.dpkg_installation:
            _dict['dpkgInstallation'] = self.dpkg_installation.to_dict()
        # override the default output from pydantic by calling `to_dict()` of file_copy
        if self.file_copy:
            _dict['fileCopy'] = self.file_copy.to_dict()
        # override the default output from pydantic by calling `to_dict()` of file_exec
        if self.file_exec:
            _dict['fileExec'] = self.file_exec.to_dict()
        # override the default output from pydantic by calling `to_dict()` of msi_installation
        if self.msi_installation:
            _dict['msiInstallation'] = self.msi_installation.to_dict()
        # override the default output from pydantic by calling `to_dict()` of rpm_installation
        if self.rpm_installation:
            _dict['rpmInstallation'] = self.rpm_installation.to_dict()
        # override the default output from pydantic by calling `to_dict()` of script_run
        if self.script_run:
            _dict['scriptRun'] = self.script_run.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SoftwareRecipeStep from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "archiveExtraction": SoftwareRecipeStepExtractArchive.from_dict(obj["archiveExtraction"]) if obj.get("archiveExtraction") is not None else None,
            "dpkgInstallation": SoftwareRecipeStepInstallDpkg.from_dict(obj["dpkgInstallation"]) if obj.get("dpkgInstallation") is not None else None,
            "fileCopy": SoftwareRecipeStepCopyFile.from_dict(obj["fileCopy"]) if obj.get("fileCopy") is not None else None,
            "fileExec": SoftwareRecipeStepExecFile.from_dict(obj["fileExec"]) if obj.get("fileExec") is not None else None,
            "msiInstallation": SoftwareRecipeStepInstallMsi.from_dict(obj["msiInstallation"]) if obj.get("msiInstallation") is not None else None,
            "rpmInstallation": SoftwareRecipeStepInstallRpm.from_dict(obj["rpmInstallation"]) if obj.get("rpmInstallation") is not None else None,
            "scriptRun": SoftwareRecipeStepRunScript.from_dict(obj["scriptRun"]) if obj.get("scriptRun") is not None else None
        })
        return _obj



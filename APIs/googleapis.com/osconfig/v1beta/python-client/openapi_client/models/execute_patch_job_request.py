# coding: utf-8

"""
    OS Config API

    OS management tools that can be used for patch management, patch compliance, and configuration management on VM instances.

    The version of the OpenAPI document: v1beta
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.patch_config import PatchConfig
from openapi_client.models.patch_instance_filter import PatchInstanceFilter
from openapi_client.models.patch_rollout import PatchRollout
from typing import Optional, Set
from typing_extensions import Self

class ExecutePatchJobRequest(BaseModel):
    """
    A request message to initiate patching across Compute Engine instances.
    """ # noqa: E501
    description: Optional[StrictStr] = Field(default=None, description="Description of the patch job. Length of the description is limited to 1024 characters.")
    display_name: Optional[StrictStr] = Field(default=None, description="Display name for this patch job. This does not have to be unique.", alias="displayName")
    dry_run: Optional[StrictBool] = Field(default=None, description="If this patch is a dry-run only, instances are contacted but will do nothing.", alias="dryRun")
    duration: Optional[StrictStr] = Field(default=None, description="Duration of the patch job. After the duration ends, the patch job times out.")
    instance_filter: Optional[PatchInstanceFilter] = Field(default=None, alias="instanceFilter")
    patch_config: Optional[PatchConfig] = Field(default=None, alias="patchConfig")
    rollout: Optional[PatchRollout] = None
    __properties: ClassVar[List[str]] = ["description", "displayName", "dryRun", "duration", "instanceFilter", "patchConfig", "rollout"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ExecutePatchJobRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of instance_filter
        if self.instance_filter:
            _dict['instanceFilter'] = self.instance_filter.to_dict()
        # override the default output from pydantic by calling `to_dict()` of patch_config
        if self.patch_config:
            _dict['patchConfig'] = self.patch_config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of rollout
        if self.rollout:
            _dict['rollout'] = self.rollout.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ExecutePatchJobRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "description": obj.get("description"),
            "displayName": obj.get("displayName"),
            "dryRun": obj.get("dryRun"),
            "duration": obj.get("duration"),
            "instanceFilter": PatchInstanceFilter.from_dict(obj["instanceFilter"]) if obj.get("instanceFilter") is not None else None,
            "patchConfig": PatchConfig.from_dict(obj["patchConfig"]) if obj.get("patchConfig") is not None else None,
            "rollout": PatchRollout.from_dict(obj["rollout"]) if obj.get("rollout") is not None else None
        })
        return _obj



# coding: utf-8

"""
    OS Config API

    OS management tools that can be used for patch management, patch compliance, and configuration management on VM instances.

    The version of the OpenAPI document: v1beta
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.assignment_group_label import AssignmentGroupLabel
from openapi_client.models.assignment_os_type import AssignmentOsType
from typing import Optional, Set
from typing_extensions import Self

class Assignment(BaseModel):
    """
    An assignment represents the group or groups of VM instances that the policy applies to. If an assignment is empty, it applies to all VM instances. Otherwise, the targeted VM instances must meet all the criteria specified. So if both labels and zones are specified, the policy applies to VM instances with those labels and in those zones.
    """ # noqa: E501
    group_labels: Optional[List[AssignmentGroupLabel]] = Field(default=None, description="Targets instances matching at least one of these label sets. This allows an assignment to target disparate groups, for example \"env=prod or env=staging\".", alias="groupLabels")
    instance_name_prefixes: Optional[List[StrictStr]] = Field(default=None, description="Targets VM instances whose name starts with one of these prefixes. Like labels, this is another way to group VM instances when targeting configs, for example prefix=\"prod-\". Only supported for project-level policies.", alias="instanceNamePrefixes")
    instances: Optional[List[StrictStr]] = Field(default=None, description="Targets any of the instances specified. Instances are specified by their URI in the form `zones/[ZONE]/instances/[INSTANCE_NAME]`. Instance targeting is uncommon and is supported to facilitate the management of changes by the instance or to target specific VM instances for development and testing. Only supported for project-level policies and must reference instances within this project.")
    os_types: Optional[List[AssignmentOsType]] = Field(default=None, description="Targets VM instances matching at least one of the following OS types. VM instances must match all supplied criteria for a given OsType to be included.", alias="osTypes")
    zones: Optional[List[StrictStr]] = Field(default=None, description="Targets instances in any of these zones. Leave empty to target instances in any zone. Zonal targeting is uncommon and is supported to facilitate the management of changes by zone.")
    __properties: ClassVar[List[str]] = ["groupLabels", "instanceNamePrefixes", "instances", "osTypes", "zones"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Assignment from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in group_labels (list)
        _items = []
        if self.group_labels:
            for _item_group_labels in self.group_labels:
                if _item_group_labels:
                    _items.append(_item_group_labels.to_dict())
            _dict['groupLabels'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in os_types (list)
        _items = []
        if self.os_types:
            for _item_os_types in self.os_types:
                if _item_os_types:
                    _items.append(_item_os_types.to_dict())
            _dict['osTypes'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Assignment from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "groupLabels": [AssignmentGroupLabel.from_dict(_item) for _item in obj["groupLabels"]] if obj.get("groupLabels") is not None else None,
            "instanceNamePrefixes": obj.get("instanceNamePrefixes"),
            "instances": obj.get("instances"),
            "osTypes": [AssignmentOsType.from_dict(_item) for _item in obj["osTypes"]] if obj.get("osTypes") is not None else None,
            "zones": obj.get("zones")
        })
        return _obj



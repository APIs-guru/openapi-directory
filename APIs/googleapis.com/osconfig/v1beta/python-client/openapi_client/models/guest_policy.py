# coding: utf-8

"""
    OS Config API

    OS management tools that can be used for patch management, patch compliance, and configuration management on VM instances.

    The version of the OpenAPI document: v1beta
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.assignment import Assignment
from openapi_client.models.package import Package
from openapi_client.models.package_repository import PackageRepository
from openapi_client.models.software_recipe import SoftwareRecipe
from typing import Optional, Set
from typing_extensions import Self

class GuestPolicy(BaseModel):
    """
    An OS Config resource representing a guest configuration policy. These policies represent the desired state for VM instance guest environments including packages to install or remove, package repository configurations, and software to install.
    """ # noqa: E501
    assignment: Optional[Assignment] = None
    create_time: Optional[StrictStr] = Field(default=None, description="Output only. Time this guest policy was created.", alias="createTime")
    description: Optional[StrictStr] = Field(default=None, description="Description of the guest policy. Length of the description is limited to 1024 characters.")
    etag: Optional[StrictStr] = Field(default=None, description="The etag for this guest policy. If this is provided on update, it must match the server's etag.")
    name: Optional[StrictStr] = Field(default=None, description="Required. Unique name of the resource in this project using one of the following forms: `projects/{project_number}/guestPolicies/{guest_policy_id}`.")
    package_repositories: Optional[List[PackageRepository]] = Field(default=None, description="A list of package repositories to configure on the VM instance. This is done before any other configs are applied so they can use these repos. Package repositories are only configured if the corresponding package manager(s) are available.", alias="packageRepositories")
    packages: Optional[List[Package]] = Field(default=None, description="The software packages to be managed by this policy.")
    recipes: Optional[List[SoftwareRecipe]] = Field(default=None, description="A list of Recipes to install on the VM instance.")
    update_time: Optional[StrictStr] = Field(default=None, description="Output only. Last time this guest policy was updated.", alias="updateTime")
    __properties: ClassVar[List[str]] = ["assignment", "createTime", "description", "etag", "name", "packageRepositories", "packages", "recipes", "updateTime"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GuestPolicy from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "create_time",
            "update_time",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of assignment
        if self.assignment:
            _dict['assignment'] = self.assignment.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in package_repositories (list)
        _items = []
        if self.package_repositories:
            for _item_package_repositories in self.package_repositories:
                if _item_package_repositories:
                    _items.append(_item_package_repositories.to_dict())
            _dict['packageRepositories'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in packages (list)
        _items = []
        if self.packages:
            for _item_packages in self.packages:
                if _item_packages:
                    _items.append(_item_packages.to_dict())
            _dict['packages'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in recipes (list)
        _items = []
        if self.recipes:
            for _item_recipes in self.recipes:
                if _item_recipes:
                    _items.append(_item_recipes.to_dict())
            _dict['recipes'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GuestPolicy from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "assignment": Assignment.from_dict(obj["assignment"]) if obj.get("assignment") is not None else None,
            "createTime": obj.get("createTime"),
            "description": obj.get("description"),
            "etag": obj.get("etag"),
            "name": obj.get("name"),
            "packageRepositories": [PackageRepository.from_dict(_item) for _item in obj["packageRepositories"]] if obj.get("packageRepositories") is not None else None,
            "packages": [Package.from_dict(_item) for _item in obj["packages"]] if obj.get("packages") is not None else None,
            "recipes": [SoftwareRecipe.from_dict(_item) for _item in obj["recipes"]] if obj.get("recipes") is not None else None,
            "updateTime": obj.get("updateTime")
        })
        return _obj



# coding: utf-8

"""
    OS Config API

    OS management tools that can be used for patch management, patch compliance, and configuration management on VM instances.

    The version of the OpenAPI document: v1beta
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.monthly_schedule import MonthlySchedule
from openapi_client.models.time_of_day import TimeOfDay
from openapi_client.models.time_zone import TimeZone
from openapi_client.models.weekly_schedule import WeeklySchedule
from typing import Optional, Set
from typing_extensions import Self

class RecurringSchedule(BaseModel):
    """
    Sets the time for recurring patch deployments.
    """ # noqa: E501
    end_time: Optional[StrictStr] = Field(default=None, description="Optional. The end time at which a recurring patch deployment schedule is no longer active.", alias="endTime")
    frequency: Optional[StrictStr] = Field(default=None, description="Required. The frequency unit of this recurring schedule.")
    last_execute_time: Optional[StrictStr] = Field(default=None, description="Output only. The time the last patch job ran successfully.", alias="lastExecuteTime")
    monthly: Optional[MonthlySchedule] = None
    next_execute_time: Optional[StrictStr] = Field(default=None, description="Output only. The time the next patch job is scheduled to run.", alias="nextExecuteTime")
    start_time: Optional[StrictStr] = Field(default=None, description="Optional. The time that the recurring schedule becomes effective. Defaults to `create_time` of the patch deployment.", alias="startTime")
    time_of_day: Optional[TimeOfDay] = Field(default=None, alias="timeOfDay")
    time_zone: Optional[TimeZone] = Field(default=None, alias="timeZone")
    weekly: Optional[WeeklySchedule] = None
    __properties: ClassVar[List[str]] = ["endTime", "frequency", "lastExecuteTime", "monthly", "nextExecuteTime", "startTime", "timeOfDay", "timeZone", "weekly"]

    @field_validator('frequency')
    def frequency_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['FREQUENCY_UNSPECIFIED', 'WEEKLY', 'MONTHLY', 'DAILY']):
            raise ValueError("must be one of enum values ('FREQUENCY_UNSPECIFIED', 'WEEKLY', 'MONTHLY', 'DAILY')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of RecurringSchedule from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "last_execute_time",
            "next_execute_time",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of monthly
        if self.monthly:
            _dict['monthly'] = self.monthly.to_dict()
        # override the default output from pydantic by calling `to_dict()` of time_of_day
        if self.time_of_day:
            _dict['timeOfDay'] = self.time_of_day.to_dict()
        # override the default output from pydantic by calling `to_dict()` of time_zone
        if self.time_zone:
            _dict['timeZone'] = self.time_zone.to_dict()
        # override the default output from pydantic by calling `to_dict()` of weekly
        if self.weekly:
            _dict['weekly'] = self.weekly.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of RecurringSchedule from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "endTime": obj.get("endTime"),
            "frequency": obj.get("frequency"),
            "lastExecuteTime": obj.get("lastExecuteTime"),
            "monthly": MonthlySchedule.from_dict(obj["monthly"]) if obj.get("monthly") is not None else None,
            "nextExecuteTime": obj.get("nextExecuteTime"),
            "startTime": obj.get("startTime"),
            "timeOfDay": TimeOfDay.from_dict(obj["timeOfDay"]) if obj.get("timeOfDay") is not None else None,
            "timeZone": TimeZone.from_dict(obj["timeZone"]) if obj.get("timeZone") is not None else None,
            "weekly": WeeklySchedule.from_dict(obj["weekly"]) if obj.get("weekly") is not None else None
        })
        return _obj



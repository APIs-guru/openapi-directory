# coding: utf-8

"""
    Google Play Game Services Publishing API

    The Google Play Game Services Publishing API allows developers to configure their games in Game Services.

    The version of the OpenAPI document: v1configuration
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.achievement_configuration_detail import AchievementConfigurationDetail
from typing import Optional, Set
from typing_extensions import Self

class AchievementConfiguration(BaseModel):
    """
    An achievement configuration resource.
    """ # noqa: E501
    achievement_type: Optional[StrictStr] = Field(default=None, description="The type of the achievement.", alias="achievementType")
    draft: Optional[AchievementConfigurationDetail] = None
    id: Optional[StrictStr] = Field(default=None, description="The ID of the achievement.")
    initial_state: Optional[StrictStr] = Field(default=None, description="The initial state of the achievement.", alias="initialState")
    kind: Optional[StrictStr] = Field(default=None, description="Uniquely identifies the type of this resource. Value is always the fixed string `gamesConfiguration#achievementConfiguration`.")
    published: Optional[AchievementConfigurationDetail] = None
    steps_to_unlock: Optional[StrictInt] = Field(default=None, description="Steps to unlock. Only applicable to incremental achievements.", alias="stepsToUnlock")
    token: Optional[StrictStr] = Field(default=None, description="The token for this resource.")
    __properties: ClassVar[List[str]] = ["achievementType", "draft", "id", "initialState", "kind", "published", "stepsToUnlock", "token"]

    @field_validator('achievement_type')
    def achievement_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['ACHIEVEMENT_TYPE_UNSPECIFIED', 'STANDARD', 'INCREMENTAL']):
            raise ValueError("must be one of enum values ('ACHIEVEMENT_TYPE_UNSPECIFIED', 'STANDARD', 'INCREMENTAL')")
        return value

    @field_validator('initial_state')
    def initial_state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['INITIAL_STATE_UNSPECIFIED', 'HIDDEN', 'REVEALED']):
            raise ValueError("must be one of enum values ('INITIAL_STATE_UNSPECIFIED', 'HIDDEN', 'REVEALED')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AchievementConfiguration from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of draft
        if self.draft:
            _dict['draft'] = self.draft.to_dict()
        # override the default output from pydantic by calling `to_dict()` of published
        if self.published:
            _dict['published'] = self.published.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AchievementConfiguration from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "achievementType": obj.get("achievementType"),
            "draft": AchievementConfigurationDetail.from_dict(obj["draft"]) if obj.get("draft") is not None else None,
            "id": obj.get("id"),
            "initialState": obj.get("initialState"),
            "kind": obj.get("kind"),
            "published": AchievementConfigurationDetail.from_dict(obj["published"]) if obj.get("published") is not None else None,
            "stepsToUnlock": obj.get("stepsToUnlock"),
            "token": obj.get("token")
        })
        return _obj



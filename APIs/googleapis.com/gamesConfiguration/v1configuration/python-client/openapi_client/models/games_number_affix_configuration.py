# coding: utf-8

"""
    Google Play Game Services Publishing API

    The Google Play Game Services Publishing API allows developers to configure their games in Game Services.

    The version of the OpenAPI document: v1configuration
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.localized_string_bundle import LocalizedStringBundle
from typing import Optional, Set
from typing_extensions import Self

class GamesNumberAffixConfiguration(BaseModel):
    """
    A number affix resource.
    """ # noqa: E501
    few: Optional[LocalizedStringBundle] = None
    many: Optional[LocalizedStringBundle] = None
    one: Optional[LocalizedStringBundle] = None
    other: Optional[LocalizedStringBundle] = None
    two: Optional[LocalizedStringBundle] = None
    zero: Optional[LocalizedStringBundle] = None
    __properties: ClassVar[List[str]] = ["few", "many", "one", "other", "two", "zero"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GamesNumberAffixConfiguration from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of few
        if self.few:
            _dict['few'] = self.few.to_dict()
        # override the default output from pydantic by calling `to_dict()` of many
        if self.many:
            _dict['many'] = self.many.to_dict()
        # override the default output from pydantic by calling `to_dict()` of one
        if self.one:
            _dict['one'] = self.one.to_dict()
        # override the default output from pydantic by calling `to_dict()` of other
        if self.other:
            _dict['other'] = self.other.to_dict()
        # override the default output from pydantic by calling `to_dict()` of two
        if self.two:
            _dict['two'] = self.two.to_dict()
        # override the default output from pydantic by calling `to_dict()` of zero
        if self.zero:
            _dict['zero'] = self.zero.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GamesNumberAffixConfiguration from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "few": LocalizedStringBundle.from_dict(obj["few"]) if obj.get("few") is not None else None,
            "many": LocalizedStringBundle.from_dict(obj["many"]) if obj.get("many") is not None else None,
            "one": LocalizedStringBundle.from_dict(obj["one"]) if obj.get("one") is not None else None,
            "other": LocalizedStringBundle.from_dict(obj["other"]) if obj.get("other") is not None else None,
            "two": LocalizedStringBundle.from_dict(obj["two"]) if obj.get("two") is not None else None,
            "zero": LocalizedStringBundle.from_dict(obj["zero"]) if obj.get("zero") is not None else None
        })
        return _obj



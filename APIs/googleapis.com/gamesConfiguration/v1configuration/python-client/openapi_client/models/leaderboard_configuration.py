# coding: utf-8

"""
    Google Play Game Services Publishing API

    The Google Play Game Services Publishing API allows developers to configure their games in Game Services.

    The version of the OpenAPI document: v1configuration
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.leaderboard_configuration_detail import LeaderboardConfigurationDetail
from typing import Optional, Set
from typing_extensions import Self

class LeaderboardConfiguration(BaseModel):
    """
    An leaderboard configuration resource.
    """ # noqa: E501
    draft: Optional[LeaderboardConfigurationDetail] = None
    id: Optional[StrictStr] = Field(default=None, description="The ID of the leaderboard.")
    kind: Optional[StrictStr] = Field(default=None, description="Uniquely identifies the type of this resource. Value is always the fixed string `gamesConfiguration#leaderboardConfiguration`.")
    published: Optional[LeaderboardConfigurationDetail] = None
    score_max: Optional[StrictStr] = Field(default=None, description="Maximum score that can be posted to this leaderboard.", alias="scoreMax")
    score_min: Optional[StrictStr] = Field(default=None, description="Minimum score that can be posted to this leaderboard.", alias="scoreMin")
    score_order: Optional[StrictStr] = Field(default=None, alias="scoreOrder")
    token: Optional[StrictStr] = Field(default=None, description="The token for this resource.")
    __properties: ClassVar[List[str]] = ["draft", "id", "kind", "published", "scoreMax", "scoreMin", "scoreOrder", "token"]

    @field_validator('score_order')
    def score_order_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['SCORE_ORDER_UNSPECIFIED', 'LARGER_IS_BETTER', 'SMALLER_IS_BETTER']):
            raise ValueError("must be one of enum values ('SCORE_ORDER_UNSPECIFIED', 'LARGER_IS_BETTER', 'SMALLER_IS_BETTER')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of LeaderboardConfiguration from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of draft
        if self.draft:
            _dict['draft'] = self.draft.to_dict()
        # override the default output from pydantic by calling `to_dict()` of published
        if self.published:
            _dict['published'] = self.published.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of LeaderboardConfiguration from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "draft": LeaderboardConfigurationDetail.from_dict(obj["draft"]) if obj.get("draft") is not None else None,
            "id": obj.get("id"),
            "kind": obj.get("kind"),
            "published": LeaderboardConfigurationDetail.from_dict(obj["published"]) if obj.get("published") is not None else None,
            "scoreMax": obj.get("scoreMax"),
            "scoreMin": obj.get("scoreMin"),
            "scoreOrder": obj.get("scoreOrder"),
            "token": obj.get("token")
        })
        return _obj



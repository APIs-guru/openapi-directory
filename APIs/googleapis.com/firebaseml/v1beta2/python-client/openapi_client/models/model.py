# coding: utf-8

"""
    Firebase ML API

    Access custom machine learning models hosted via Firebase ML.

    The version of the OpenAPI document: v1beta2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.model_state import ModelState
from openapi_client.models.operation import Operation
from openapi_client.models.tf_lite_model import TfLiteModel
from typing import Optional, Set
from typing_extensions import Self

class Model(BaseModel):
    """
    An ML model hosted in Firebase ML
    """ # noqa: E501
    active_operations: Optional[List[Operation]] = Field(default=None, description="Output only. Lists operation ids associated with this model whose status is NOT done.", alias="activeOperations")
    create_time: Optional[StrictStr] = Field(default=None, description="Output only. Timestamp when this model was created in Firebase ML.", alias="createTime")
    display_name: Optional[StrictStr] = Field(default=None, description="Required. The name of the model to create. The name can be up to 32 characters long and can consist only of ASCII Latin letters A-Z and a-z, underscores(_) and ASCII digits 0-9. It must start with a letter.", alias="displayName")
    etag: Optional[StrictStr] = Field(default=None, description="Output only. See RFC7232 https://tools.ietf.org/html/rfc7232#section-2.3")
    model_hash: Optional[StrictStr] = Field(default=None, description="Output only. The model_hash will change if a new file is available for download.", alias="modelHash")
    name: Optional[StrictStr] = Field(default=None, description="The resource name of the Model. Model names have the form `projects/{project_id}/models/{model_id}` The name is ignored when creating a model.")
    state: Optional[ModelState] = None
    tags: Optional[List[StrictStr]] = Field(default=None, description="User defined tags which can be used to group/filter models during listing")
    tflite_model: Optional[TfLiteModel] = Field(default=None, alias="tfliteModel")
    update_time: Optional[StrictStr] = Field(default=None, description="Output only. Timestamp when this model was updated in Firebase ML.", alias="updateTime")
    __properties: ClassVar[List[str]] = ["activeOperations", "createTime", "displayName", "etag", "modelHash", "name", "state", "tags", "tfliteModel", "updateTime"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Model from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "active_operations",
            "create_time",
            "etag",
            "model_hash",
            "update_time",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in active_operations (list)
        _items = []
        if self.active_operations:
            for _item_active_operations in self.active_operations:
                if _item_active_operations:
                    _items.append(_item_active_operations.to_dict())
            _dict['activeOperations'] = _items
        # override the default output from pydantic by calling `to_dict()` of state
        if self.state:
            _dict['state'] = self.state.to_dict()
        # override the default output from pydantic by calling `to_dict()` of tflite_model
        if self.tflite_model:
            _dict['tfliteModel'] = self.tflite_model.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Model from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "activeOperations": [Operation.from_dict(_item) for _item in obj["activeOperations"]] if obj.get("activeOperations") is not None else None,
            "createTime": obj.get("createTime"),
            "displayName": obj.get("displayName"),
            "etag": obj.get("etag"),
            "modelHash": obj.get("modelHash"),
            "name": obj.get("name"),
            "state": ModelState.from_dict(obj["state"]) if obj.get("state") is not None else None,
            "tags": obj.get("tags"),
            "tfliteModel": TfLiteModel.from_dict(obj["tfliteModel"]) if obj.get("tfliteModel") is not None else None,
            "updateTime": obj.get("updateTime")
        })
        return _obj



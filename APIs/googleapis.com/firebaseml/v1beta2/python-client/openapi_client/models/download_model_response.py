# coding: utf-8

"""
    Firebase ML API

    Access custom machine learning models hosted via Firebase ML.

    The version of the OpenAPI document: v1beta2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class DownloadModelResponse(BaseModel):
    """
    The response for downloading a model to device.
    """ # noqa: E501
    download_uri: Optional[StrictStr] = Field(default=None, description="Output only. A download URI for the model/zip file.", alias="downloadUri")
    expire_time: Optional[StrictStr] = Field(default=None, description="Output only. The time that the download URI link expires. If the link has expired, the REST call must be repeated.", alias="expireTime")
    model_format: Optional[StrictStr] = Field(default=None, description="Output only. The format of the model being downloaded.", alias="modelFormat")
    size_bytes: Optional[StrictStr] = Field(default=None, description="Output only. The size of the file(s), if this information is available.", alias="sizeBytes")
    __properties: ClassVar[List[str]] = ["downloadUri", "expireTime", "modelFormat", "sizeBytes"]

    @field_validator('model_format')
    def model_format_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['MODEL_FORMAT_UNSPECIFIED', 'TFLITE']):
            raise ValueError("must be one of enum values ('MODEL_FORMAT_UNSPECIFIED', 'TFLITE')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DownloadModelResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "download_uri",
            "expire_time",
            "model_format",
            "size_bytes",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DownloadModelResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "downloadUri": obj.get("downloadUri"),
            "expireTime": obj.get("expireTime"),
            "modelFormat": obj.get("modelFormat"),
            "sizeBytes": obj.get("sizeBytes")
        })
        return _obj



# coding: utf-8

"""
    Policy Simulator API

     Policy Simulator is a collection of endpoints for creating, running, and viewing a Replay. A `Replay` is a type of simulation that lets you see how your members' access to resources might change if you changed your IAM policy. During a `Replay`, Policy Simulator re-evaluates, or replays, past access attempts under both the current policy and your proposed policy, and compares those results to determine how your members' access might change under the proposed policy.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_cloud_policysimulator_v1_binding_explanation_annotated_membership import GoogleCloudPolicysimulatorV1BindingExplanationAnnotatedMembership
from openapi_client.models.google_type_expr import GoogleTypeExpr
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudPolicysimulatorV1BindingExplanation(BaseModel):
    """
    Details about how a binding in a policy affects a principal's ability to use a permission.
    """ # noqa: E501
    access: Optional[StrictStr] = Field(default=None, description="Required. Indicates whether _this binding_ provides the specified permission to the specified principal for the specified resource. This field does _not_ indicate whether the principal actually has the permission for the resource. There might be another binding that overrides this binding. To determine whether the principal actually has the permission, use the `access` field in the TroubleshootIamPolicyResponse.")
    condition: Optional[GoogleTypeExpr] = None
    memberships: Optional[Dict[str, GoogleCloudPolicysimulatorV1BindingExplanationAnnotatedMembership]] = Field(default=None, description="Indicates whether each principal in the binding includes the principal specified in the request, either directly or indirectly. Each key identifies a principal in the binding, and each value indicates whether the principal in the binding includes the principal in the request. For example, suppose that a binding includes the following principals: * `user:alice@example.com` * `group:product-eng@example.com` The principal in the replayed access tuple is `user:bob@example.com`. This user is a principal of the group `group:product-eng@example.com`. For the first principal in the binding, the key is `user:alice@example.com`, and the `membership` field in the value is set to `MEMBERSHIP_NOT_INCLUDED`. For the second principal in the binding, the key is `group:product-eng@example.com`, and the `membership` field in the value is set to `MEMBERSHIP_INCLUDED`.")
    relevance: Optional[StrictStr] = Field(default=None, description="The relevance of this binding to the overall determination for the entire policy.")
    role: Optional[StrictStr] = Field(default=None, description="The role that this binding grants. For example, `roles/compute.serviceAgent`. For a complete list of predefined IAM roles, as well as the permissions in each role, see https://cloud.google.com/iam/help/roles/reference.")
    role_permission: Optional[StrictStr] = Field(default=None, description="Indicates whether the role granted by this binding contains the specified permission.", alias="rolePermission")
    role_permission_relevance: Optional[StrictStr] = Field(default=None, description="The relevance of the permission's existence, or nonexistence, in the role to the overall determination for the entire policy.", alias="rolePermissionRelevance")
    __properties: ClassVar[List[str]] = ["access", "condition", "memberships", "relevance", "role", "rolePermission", "rolePermissionRelevance"]

    @field_validator('access')
    def access_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['ACCESS_STATE_UNSPECIFIED', 'GRANTED', 'NOT_GRANTED', 'UNKNOWN_CONDITIONAL', 'UNKNOWN_INFO_DENIED']):
            raise ValueError("must be one of enum values ('ACCESS_STATE_UNSPECIFIED', 'GRANTED', 'NOT_GRANTED', 'UNKNOWN_CONDITIONAL', 'UNKNOWN_INFO_DENIED')")
        return value

    @field_validator('relevance')
    def relevance_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['HEURISTIC_RELEVANCE_UNSPECIFIED', 'NORMAL', 'HIGH']):
            raise ValueError("must be one of enum values ('HEURISTIC_RELEVANCE_UNSPECIFIED', 'NORMAL', 'HIGH')")
        return value

    @field_validator('role_permission')
    def role_permission_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['ROLE_PERMISSION_UNSPECIFIED', 'ROLE_PERMISSION_INCLUDED', 'ROLE_PERMISSION_NOT_INCLUDED', 'ROLE_PERMISSION_UNKNOWN_INFO_DENIED']):
            raise ValueError("must be one of enum values ('ROLE_PERMISSION_UNSPECIFIED', 'ROLE_PERMISSION_INCLUDED', 'ROLE_PERMISSION_NOT_INCLUDED', 'ROLE_PERMISSION_UNKNOWN_INFO_DENIED')")
        return value

    @field_validator('role_permission_relevance')
    def role_permission_relevance_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['HEURISTIC_RELEVANCE_UNSPECIFIED', 'NORMAL', 'HIGH']):
            raise ValueError("must be one of enum values ('HEURISTIC_RELEVANCE_UNSPECIFIED', 'NORMAL', 'HIGH')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudPolicysimulatorV1BindingExplanation from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of condition
        if self.condition:
            _dict['condition'] = self.condition.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each value in memberships (dict)
        _field_dict = {}
        if self.memberships:
            for _key_memberships in self.memberships:
                if self.memberships[_key_memberships]:
                    _field_dict[_key_memberships] = self.memberships[_key_memberships].to_dict()
            _dict['memberships'] = _field_dict
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudPolicysimulatorV1BindingExplanation from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "access": obj.get("access"),
            "condition": GoogleTypeExpr.from_dict(obj["condition"]) if obj.get("condition") is not None else None,
            "memberships": dict(
                (_k, GoogleCloudPolicysimulatorV1BindingExplanationAnnotatedMembership.from_dict(_v))
                for _k, _v in obj["memberships"].items()
            )
            if obj.get("memberships") is not None
            else None,
            "relevance": obj.get("relevance"),
            "role": obj.get("role"),
            "rolePermission": obj.get("rolePermission"),
            "rolePermissionRelevance": obj.get("rolePermissionRelevance")
        })
        return _obj



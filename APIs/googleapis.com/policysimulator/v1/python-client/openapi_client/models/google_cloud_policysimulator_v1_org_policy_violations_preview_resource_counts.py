# coding: utf-8

"""
    Policy Simulator API

     Policy Simulator is a collection of endpoints for creating, running, and viewing a Replay. A `Replay` is a type of simulation that lets you see how your members' access to resources might change if you changed your IAM policy. During a `Replay`, Policy Simulator re-evaluates, or replays, past access attempts under both the current policy and your proposed policy, and compares those results to determine how your members' access might change under the proposed policy.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudPolicysimulatorV1OrgPolicyViolationsPreviewResourceCounts(BaseModel):
    """
    A summary of the state of all resources scanned for compliance with the changed OrgPolicy.
    """ # noqa: E501
    compliant: Optional[StrictInt] = Field(default=None, description="Output only. Number of scanned resources with zero violations.")
    errors: Optional[StrictInt] = Field(default=None, description="Output only. Number of resources that returned an error when scanned.")
    noncompliant: Optional[StrictInt] = Field(default=None, description="Output only. Number of scanned resources with at least one violation.")
    scanned: Optional[StrictInt] = Field(default=None, description="Output only. Number of resources checked for compliance. Must equal: unenforced + noncompliant + compliant + error")
    unenforced: Optional[StrictInt] = Field(default=None, description="Output only. Number of resources where the constraint was not enforced, i.e. the Policy set `enforced: false` for that resource.")
    __properties: ClassVar[List[str]] = ["compliant", "errors", "noncompliant", "scanned", "unenforced"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudPolicysimulatorV1OrgPolicyViolationsPreviewResourceCounts from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "compliant",
            "errors",
            "noncompliant",
            "scanned",
            "unenforced",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudPolicysimulatorV1OrgPolicyViolationsPreviewResourceCounts from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "compliant": obj.get("compliant"),
            "errors": obj.get("errors"),
            "noncompliant": obj.get("noncompliant"),
            "scanned": obj.get("scanned"),
            "unenforced": obj.get("unenforced")
        })
        return _obj



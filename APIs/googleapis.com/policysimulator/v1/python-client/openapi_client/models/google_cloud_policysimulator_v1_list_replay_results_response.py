# coding: utf-8

"""
    Policy Simulator API

     Policy Simulator is a collection of endpoints for creating, running, and viewing a Replay. A `Replay` is a type of simulation that lets you see how your members' access to resources might change if you changed your IAM policy. During a `Replay`, Policy Simulator re-evaluates, or replays, past access attempts under both the current policy and your proposed policy, and compares those results to determine how your members' access might change under the proposed policy.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_cloud_policysimulator_v1_replay_result import GoogleCloudPolicysimulatorV1ReplayResult
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudPolicysimulatorV1ListReplayResultsResponse(BaseModel):
    """
    Response message for Simulator.ListReplayResults.
    """ # noqa: E501
    next_page_token: Optional[StrictStr] = Field(default=None, description="A token that you can use to retrieve the next page of ReplayResult objects. If this field is omitted, there are no subsequent pages.", alias="nextPageToken")
    replay_results: Optional[List[GoogleCloudPolicysimulatorV1ReplayResult]] = Field(default=None, description="The results of running a Replay.", alias="replayResults")
    __properties: ClassVar[List[str]] = ["nextPageToken", "replayResults"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudPolicysimulatorV1ListReplayResultsResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in replay_results (list)
        _items = []
        if self.replay_results:
            for _item_replay_results in self.replay_results:
                if _item_replay_results:
                    _items.append(_item_replay_results.to_dict())
            _dict['replayResults'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudPolicysimulatorV1ListReplayResultsResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "nextPageToken": obj.get("nextPageToken"),
            "replayResults": [GoogleCloudPolicysimulatorV1ReplayResult.from_dict(_item) for _item in obj["replayResults"]] if obj.get("replayResults") is not None else None
        })
        return _obj



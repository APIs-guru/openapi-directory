# coding: utf-8

"""
    Policy Simulator API

     Policy Simulator is a collection of endpoints for creating, running, and viewing a Replay. A `Replay` is a type of simulation that lets you see how your members' access to resources might change if you changed your IAM policy. During a `Replay`, Policy Simulator re-evaluates, or replays, past access attempts under both the current policy and your proposed policy, and compares those results to determine how your members' access might change under the proposed policy.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_cloud_policysimulator_v1_binding_explanation import GoogleCloudPolicysimulatorV1BindingExplanation
from openapi_client.models.google_iam_v1_policy import GoogleIamV1Policy
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudPolicysimulatorV1ExplainedPolicy(BaseModel):
    """
    Details about how a specific IAM Policy contributed to the access check.
    """ # noqa: E501
    access: Optional[StrictStr] = Field(default=None, description="Indicates whether _this policy_ provides the specified permission to the specified principal for the specified resource. This field does _not_ indicate whether the principal actually has the permission for the resource. There might be another policy that overrides this policy. To determine whether the principal actually has the permission, use the `access` field in the TroubleshootIamPolicyResponse.")
    binding_explanations: Optional[List[GoogleCloudPolicysimulatorV1BindingExplanation]] = Field(default=None, description="Details about how each binding in the policy affects the principal's ability, or inability, to use the permission for the resource. If the user who created the Replay does not have access to the policy, this field is omitted.", alias="bindingExplanations")
    full_resource_name: Optional[StrictStr] = Field(default=None, description="The full resource name that identifies the resource. For example, `//compute.googleapis.com/projects/my-project/zones/us-central1-a/instances/my-instance`. If the user who created the Replay does not have access to the policy, this field is omitted. For examples of full resource names for Google Cloud services, see https://cloud.google.com/iam/help/troubleshooter/full-resource-names.", alias="fullResourceName")
    policy: Optional[GoogleIamV1Policy] = None
    relevance: Optional[StrictStr] = Field(default=None, description="The relevance of this policy to the overall determination in the TroubleshootIamPolicyResponse. If the user who created the Replay does not have access to the policy, this field is omitted.")
    __properties: ClassVar[List[str]] = ["access", "bindingExplanations", "fullResourceName", "policy", "relevance"]

    @field_validator('access')
    def access_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['ACCESS_STATE_UNSPECIFIED', 'GRANTED', 'NOT_GRANTED', 'UNKNOWN_CONDITIONAL', 'UNKNOWN_INFO_DENIED']):
            raise ValueError("must be one of enum values ('ACCESS_STATE_UNSPECIFIED', 'GRANTED', 'NOT_GRANTED', 'UNKNOWN_CONDITIONAL', 'UNKNOWN_INFO_DENIED')")
        return value

    @field_validator('relevance')
    def relevance_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['HEURISTIC_RELEVANCE_UNSPECIFIED', 'NORMAL', 'HIGH']):
            raise ValueError("must be one of enum values ('HEURISTIC_RELEVANCE_UNSPECIFIED', 'NORMAL', 'HIGH')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudPolicysimulatorV1ExplainedPolicy from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in binding_explanations (list)
        _items = []
        if self.binding_explanations:
            for _item_binding_explanations in self.binding_explanations:
                if _item_binding_explanations:
                    _items.append(_item_binding_explanations.to_dict())
            _dict['bindingExplanations'] = _items
        # override the default output from pydantic by calling `to_dict()` of policy
        if self.policy:
            _dict['policy'] = self.policy.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudPolicysimulatorV1ExplainedPolicy from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "access": obj.get("access"),
            "bindingExplanations": [GoogleCloudPolicysimulatorV1BindingExplanation.from_dict(_item) for _item in obj["bindingExplanations"]] if obj.get("bindingExplanations") is not None else None,
            "fullResourceName": obj.get("fullResourceName"),
            "policy": GoogleIamV1Policy.from_dict(obj["policy"]) if obj.get("policy") is not None else None,
            "relevance": obj.get("relevance")
        })
        return _obj



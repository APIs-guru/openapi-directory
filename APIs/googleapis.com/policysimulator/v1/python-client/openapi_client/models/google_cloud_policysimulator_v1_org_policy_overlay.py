# coding: utf-8

"""
    Policy Simulator API

     Policy Simulator is a collection of endpoints for creating, running, and viewing a Replay. A `Replay` is a type of simulation that lets you see how your members' access to resources might change if you changed your IAM policy. During a `Replay`, Policy Simulator re-evaluates, or replays, past access attempts under both the current policy and your proposed policy, and compares those results to determine how your members' access might change under the proposed policy.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_cloud_policysimulator_v1_org_policy_overlay_custom_constraint_overlay import GoogleCloudPolicysimulatorV1OrgPolicyOverlayCustomConstraintOverlay
from openapi_client.models.google_cloud_policysimulator_v1_org_policy_overlay_policy_overlay import GoogleCloudPolicysimulatorV1OrgPolicyOverlayPolicyOverlay
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudPolicysimulatorV1OrgPolicyOverlay(BaseModel):
    """
    The proposed changes to OrgPolicy.
    """ # noqa: E501
    custom_constraints: Optional[List[GoogleCloudPolicysimulatorV1OrgPolicyOverlayCustomConstraintOverlay]] = Field(default=None, description="Optional. The OrgPolicy CustomConstraint changes to preview violations for. Any existing CustomConstraints with the same name will be overridden in the simulation. That is, violations will be determined as if all custom constraints in the overlay were instantiated. Only a single custom_constraint is supported in the overlay at a time. For evaluating multiple constraints, multiple `GenerateOrgPolicyViolationsPreview` requests are made, where each request evaluates a single constraint.", alias="customConstraints")
    policies: Optional[List[GoogleCloudPolicysimulatorV1OrgPolicyOverlayPolicyOverlay]] = Field(default=None, description="Optional. The OrgPolicy changes to preview violations for. Any existing OrgPolicies with the same name will be overridden in the simulation. That is, violations will be determined as if all policies in the overlay were created or updated.")
    __properties: ClassVar[List[str]] = ["customConstraints", "policies"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudPolicysimulatorV1OrgPolicyOverlay from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in custom_constraints (list)
        _items = []
        if self.custom_constraints:
            for _item_custom_constraints in self.custom_constraints:
                if _item_custom_constraints:
                    _items.append(_item_custom_constraints.to_dict())
            _dict['customConstraints'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in policies (list)
        _items = []
        if self.policies:
            for _item_policies in self.policies:
                if _item_policies:
                    _items.append(_item_policies.to_dict())
            _dict['policies'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudPolicysimulatorV1OrgPolicyOverlay from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "customConstraints": [GoogleCloudPolicysimulatorV1OrgPolicyOverlayCustomConstraintOverlay.from_dict(_item) for _item in obj["customConstraints"]] if obj.get("customConstraints") is not None else None,
            "policies": [GoogleCloudPolicysimulatorV1OrgPolicyOverlayPolicyOverlay.from_dict(_item) for _item in obj["policies"]] if obj.get("policies") is not None else None
        })
        return _obj



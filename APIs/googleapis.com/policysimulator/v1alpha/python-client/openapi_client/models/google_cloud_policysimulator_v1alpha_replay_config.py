# coding: utf-8

"""
    Policy Simulator API

     Policy Simulator is a collection of endpoints for creating, running, and viewing a Replay. A `Replay` is a type of simulation that lets you see how your members' access to resources might change if you changed your IAM policy. During a `Replay`, Policy Simulator re-evaluates, or replays, past access attempts under both the current policy and your proposed policy, and compares those results to determine how your members' access might change under the proposed policy.

    The version of the OpenAPI document: v1alpha
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_iam_v1_policy import GoogleIamV1Policy
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudPolicysimulatorV1alphaReplayConfig(BaseModel):
    """
    The configuration used for a Replay.
    """ # noqa: E501
    log_source: Optional[StrictStr] = Field(default=None, description="The logs to use as input for the Replay.", alias="logSource")
    policy_overlay: Optional[Dict[str, GoogleIamV1Policy]] = Field(default=None, description="A mapping of the resources that you want to simulate policies for and the policies that you want to simulate. Keys are the full resource names for the resources. For example, `//cloudresourcemanager.googleapis.com/projects/my-project`. For examples of full resource names for Google Cloud services, see https://cloud.google.com/iam/help/troubleshooter/full-resource-names. Values are Policy objects representing the policies that you want to simulate. Replays automatically take into account any IAM policies inherited through the resource hierarchy, and any policies set on descendant resources. You do not need to include these policies in the policy overlay.", alias="policyOverlay")
    __properties: ClassVar[List[str]] = ["logSource", "policyOverlay"]

    @field_validator('log_source')
    def log_source_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['LOG_SOURCE_UNSPECIFIED', 'RECENT_ACCESSES']):
            raise ValueError("must be one of enum values ('LOG_SOURCE_UNSPECIFIED', 'RECENT_ACCESSES')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudPolicysimulatorV1alphaReplayConfig from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each value in policy_overlay (dict)
        _field_dict = {}
        if self.policy_overlay:
            for _key_policy_overlay in self.policy_overlay:
                if self.policy_overlay[_key_policy_overlay]:
                    _field_dict[_key_policy_overlay] = self.policy_overlay[_key_policy_overlay].to_dict()
            _dict['policyOverlay'] = _field_dict
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudPolicysimulatorV1alphaReplayConfig from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "logSource": obj.get("logSource"),
            "policyOverlay": dict(
                (_k, GoogleIamV1Policy.from_dict(_v))
                for _k, _v in obj["policyOverlay"].items()
            )
            if obj.get("policyOverlay") is not None
            else None
        })
        return _obj



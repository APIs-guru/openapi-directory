# coding: utf-8

"""
    Policy Simulator API

     Policy Simulator is a collection of endpoints for creating, running, and viewing a Replay. A `Replay` is a type of simulation that lets you see how your members' access to resources might change if you changed your IAM policy. During a `Replay`, Policy Simulator re-evaluates, or replays, past access attempts under both the current policy and your proposed policy, and compares those results to determine how your members' access might change under the proposed policy.

    The version of the OpenAPI document: v1alpha
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_cloud_policysimulator_v1alpha_explained_access import GoogleCloudPolicysimulatorV1alphaExplainedAccess
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudPolicysimulatorV1alphaAccessStateDiff(BaseModel):
    """
    A summary and comparison of the principal's access under the current (baseline) policies and the proposed (simulated) policies for a single access tuple.
    """ # noqa: E501
    access_change: Optional[StrictStr] = Field(default=None, description="How the principal's access, specified in the AccessState field, changed between the current (baseline) policies and proposed (simulated) policies.", alias="accessChange")
    baseline: Optional[GoogleCloudPolicysimulatorV1alphaExplainedAccess] = None
    simulated: Optional[GoogleCloudPolicysimulatorV1alphaExplainedAccess] = None
    __properties: ClassVar[List[str]] = ["accessChange", "baseline", "simulated"]

    @field_validator('access_change')
    def access_change_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['ACCESS_CHANGE_TYPE_UNSPECIFIED', 'NO_CHANGE', 'UNKNOWN_CHANGE', 'ACCESS_REVOKED', 'ACCESS_GAINED', 'ACCESS_MAYBE_REVOKED', 'ACCESS_MAYBE_GAINED']):
            raise ValueError("must be one of enum values ('ACCESS_CHANGE_TYPE_UNSPECIFIED', 'NO_CHANGE', 'UNKNOWN_CHANGE', 'ACCESS_REVOKED', 'ACCESS_GAINED', 'ACCESS_MAYBE_REVOKED', 'ACCESS_MAYBE_GAINED')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudPolicysimulatorV1alphaAccessStateDiff from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of baseline
        if self.baseline:
            _dict['baseline'] = self.baseline.to_dict()
        # override the default output from pydantic by calling `to_dict()` of simulated
        if self.simulated:
            _dict['simulated'] = self.simulated.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudPolicysimulatorV1alphaAccessStateDiff from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "accessChange": obj.get("accessChange"),
            "baseline": GoogleCloudPolicysimulatorV1alphaExplainedAccess.from_dict(obj["baseline"]) if obj.get("baseline") is not None else None,
            "simulated": GoogleCloudPolicysimulatorV1alphaExplainedAccess.from_dict(obj["simulated"]) if obj.get("simulated") is not None else None
        })
        return _obj



# coding: utf-8

"""
    Policy Simulator API

     Policy Simulator is a collection of endpoints for creating, running, and viewing a Replay. A `Replay` is a type of simulation that lets you see how your members' access to resources might change if you changed your IAM policy. During a `Replay`, Policy Simulator re-evaluates, or replays, past access attempts under both the current policy and your proposed policy, and compares those results to determine how your members' access might change under the proposed policy.

    The version of the OpenAPI document: v1beta
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_cloud_orgpolicy_v2_policy_spec_policy_rule_string_values import GoogleCloudOrgpolicyV2PolicySpecPolicyRuleStringValues
from openapi_client.models.google_type_expr import GoogleTypeExpr
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudOrgpolicyV2PolicySpecPolicyRule(BaseModel):
    """
    A rule used to express this policy.
    """ # noqa: E501
    allow_all: Optional[StrictBool] = Field(default=None, description="Setting this to true means that all values are allowed. This field can be set only in policies for list constraints.", alias="allowAll")
    condition: Optional[GoogleTypeExpr] = None
    deny_all: Optional[StrictBool] = Field(default=None, description="Setting this to true means that all values are denied. This field can be set only in policies for list constraints.", alias="denyAll")
    enforce: Optional[StrictBool] = Field(default=None, description="If `true`, then the policy is enforced. If `false`, then any configuration is acceptable. This field can be set only in policies for boolean constraints.")
    values: Optional[GoogleCloudOrgpolicyV2PolicySpecPolicyRuleStringValues] = None
    __properties: ClassVar[List[str]] = ["allowAll", "condition", "denyAll", "enforce", "values"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudOrgpolicyV2PolicySpecPolicyRule from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of condition
        if self.condition:
            _dict['condition'] = self.condition.to_dict()
        # override the default output from pydantic by calling `to_dict()` of values
        if self.values:
            _dict['values'] = self.values.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudOrgpolicyV2PolicySpecPolicyRule from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "allowAll": obj.get("allowAll"),
            "condition": GoogleTypeExpr.from_dict(obj["condition"]) if obj.get("condition") is not None else None,
            "denyAll": obj.get("denyAll"),
            "enforce": obj.get("enforce"),
            "values": GoogleCloudOrgpolicyV2PolicySpecPolicyRuleStringValues.from_dict(obj["values"]) if obj.get("values") is not None else None
        })
        return _obj



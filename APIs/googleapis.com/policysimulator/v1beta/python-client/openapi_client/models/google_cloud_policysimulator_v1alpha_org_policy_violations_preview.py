# coding: utf-8

"""
    Policy Simulator API

     Policy Simulator is a collection of endpoints for creating, running, and viewing a Replay. A `Replay` is a type of simulation that lets you see how your members' access to resources might change if you changed your IAM policy. During a `Replay`, Policy Simulator re-evaluates, or replays, past access attempts under both the current policy and your proposed policy, and compares those results to determine how your members' access might change under the proposed policy.

    The version of the OpenAPI document: v1beta
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_cloud_policysimulator_v1alpha_org_policy_overlay import GoogleCloudPolicysimulatorV1alphaOrgPolicyOverlay
from openapi_client.models.google_cloud_policysimulator_v1alpha_org_policy_violations_preview_resource_counts import GoogleCloudPolicysimulatorV1alphaOrgPolicyViolationsPreviewResourceCounts
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudPolicysimulatorV1alphaOrgPolicyViolationsPreview(BaseModel):
    """
    OrgPolicyViolationsPreview is a resource providing a preview of the violations that will exist if an OrgPolicy change is made. The list of violations are modeled as child resources and retrieved via a ListOrgPolicyViolations API call. There are potentially more OrgPolicyViolations than could fit in an embedded field. Thus, the use of a child resource instead of a field.
    """ # noqa: E501
    create_time: Optional[StrictStr] = Field(default=None, description="Output only. Time when this `OrgPolicyViolationsPreview` was created.", alias="createTime")
    custom_constraints: Optional[List[StrictStr]] = Field(default=None, description="Output only. The names of the constraints against which all `OrgPolicyViolations` were evaluated. If `OrgPolicyOverlay` only contains `PolicyOverlay` then it contains the name of the configured custom constraint, applicable to the specified policies. Otherwise it contains the name of the constraint specified in `CustomConstraintOverlay`. Format: `organizations/{organization_id}/customConstraints/{custom_constraint_id}` Example: `organizations/123/customConstraints/custom.createOnlyE2TypeVms`", alias="customConstraints")
    name: Optional[StrictStr] = Field(default=None, description="Output only. The resource name of the `OrgPolicyViolationsPreview`. It has the following format: `organizations/{organization}/locations/{location}/orgPolicyViolationsPreviews/{orgPolicyViolationsPreview}` Example: `organizations/my-example-org/locations/global/orgPolicyViolationsPreviews/506a5f7f`")
    overlay: Optional[GoogleCloudPolicysimulatorV1alphaOrgPolicyOverlay] = None
    resource_counts: Optional[GoogleCloudPolicysimulatorV1alphaOrgPolicyViolationsPreviewResourceCounts] = Field(default=None, alias="resourceCounts")
    state: Optional[StrictStr] = Field(default=None, description="Output only. The state of the `OrgPolicyViolationsPreview`.")
    violations_count: Optional[StrictInt] = Field(default=None, description="Output only. The number of OrgPolicyViolations in this `OrgPolicyViolationsPreview`. This count may differ from `resource_summary.noncompliant_count` because each OrgPolicyViolation is specific to a resource **and** constraint. If there are multiple constraints being evaluated (i.e. multiple policies in the overlay), a single resource may violate multiple constraints.", alias="violationsCount")
    __properties: ClassVar[List[str]] = ["createTime", "customConstraints", "name", "overlay", "resourceCounts", "state", "violationsCount"]

    @field_validator('state')
    def state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['PREVIEW_STATE_UNSPECIFIED', 'PREVIEW_PENDING', 'PREVIEW_RUNNING', 'PREVIEW_SUCCEEDED', 'PREVIEW_FAILED']):
            raise ValueError("must be one of enum values ('PREVIEW_STATE_UNSPECIFIED', 'PREVIEW_PENDING', 'PREVIEW_RUNNING', 'PREVIEW_SUCCEEDED', 'PREVIEW_FAILED')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudPolicysimulatorV1alphaOrgPolicyViolationsPreview from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "create_time",
            "custom_constraints",
            "name",
            "state",
            "violations_count",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of overlay
        if self.overlay:
            _dict['overlay'] = self.overlay.to_dict()
        # override the default output from pydantic by calling `to_dict()` of resource_counts
        if self.resource_counts:
            _dict['resourceCounts'] = self.resource_counts.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudPolicysimulatorV1alphaOrgPolicyViolationsPreview from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "createTime": obj.get("createTime"),
            "customConstraints": obj.get("customConstraints"),
            "name": obj.get("name"),
            "overlay": GoogleCloudPolicysimulatorV1alphaOrgPolicyOverlay.from_dict(obj["overlay"]) if obj.get("overlay") is not None else None,
            "resourceCounts": GoogleCloudPolicysimulatorV1alphaOrgPolicyViolationsPreviewResourceCounts.from_dict(obj["resourceCounts"]) if obj.get("resourceCounts") is not None else None,
            "state": obj.get("state"),
            "violationsCount": obj.get("violationsCount")
        })
        return _obj



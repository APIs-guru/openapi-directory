# coding: utf-8

"""
    Policy Simulator API

     Policy Simulator is a collection of endpoints for creating, running, and viewing a Replay. A `Replay` is a type of simulation that lets you see how your members' access to resources might change if you changed your IAM policy. During a `Replay`, Policy Simulator re-evaluates, or replays, past access attempts under both the current policy and your proposed policy, and compares those results to determine how your members' access might change under the proposed policy.

    The version of the OpenAPI document: v1beta
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_cloud_policysimulator_v1beta_access_tuple import GoogleCloudPolicysimulatorV1betaAccessTuple
from openapi_client.models.google_cloud_policysimulator_v1beta_replay_diff import GoogleCloudPolicysimulatorV1betaReplayDiff
from openapi_client.models.google_rpc_status import GoogleRpcStatus
from openapi_client.models.google_type_date import GoogleTypeDate
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudPolicysimulatorV1betaReplayResult(BaseModel):
    """
    The result of replaying a single access tuple against a simulated state.
    """ # noqa: E501
    access_tuple: Optional[GoogleCloudPolicysimulatorV1betaAccessTuple] = Field(default=None, alias="accessTuple")
    diff: Optional[GoogleCloudPolicysimulatorV1betaReplayDiff] = None
    error: Optional[GoogleRpcStatus] = None
    last_seen_date: Optional[GoogleTypeDate] = Field(default=None, alias="lastSeenDate")
    name: Optional[StrictStr] = Field(default=None, description="The resource name of the `ReplayResult`, in the following format: `{projects|folders|organizations}/{resource-id}/locations/global/replays/{replay-id}/results/{replay-result-id}`, where `{resource-id}` is the ID of the project, folder, or organization that owns the Replay. Example: `projects/my-example-project/locations/global/replays/506a5f7f-38ce-4d7d-8e03-479ce1833c36/results/1234`")
    parent: Optional[StrictStr] = Field(default=None, description="The Replay that the access tuple was included in.")
    __properties: ClassVar[List[str]] = ["accessTuple", "diff", "error", "lastSeenDate", "name", "parent"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudPolicysimulatorV1betaReplayResult from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of access_tuple
        if self.access_tuple:
            _dict['accessTuple'] = self.access_tuple.to_dict()
        # override the default output from pydantic by calling `to_dict()` of diff
        if self.diff:
            _dict['diff'] = self.diff.to_dict()
        # override the default output from pydantic by calling `to_dict()` of error
        if self.error:
            _dict['error'] = self.error.to_dict()
        # override the default output from pydantic by calling `to_dict()` of last_seen_date
        if self.last_seen_date:
            _dict['lastSeenDate'] = self.last_seen_date.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudPolicysimulatorV1betaReplayResult from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "accessTuple": GoogleCloudPolicysimulatorV1betaAccessTuple.from_dict(obj["accessTuple"]) if obj.get("accessTuple") is not None else None,
            "diff": GoogleCloudPolicysimulatorV1betaReplayDiff.from_dict(obj["diff"]) if obj.get("diff") is not None else None,
            "error": GoogleRpcStatus.from_dict(obj["error"]) if obj.get("error") is not None else None,
            "lastSeenDate": GoogleTypeDate.from_dict(obj["lastSeenDate"]) if obj.get("lastSeenDate") is not None else None,
            "name": obj.get("name"),
            "parent": obj.get("parent")
        })
        return _obj



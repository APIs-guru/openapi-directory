# coding: utf-8

"""
    Policy Simulator API

     Policy Simulator is a collection of endpoints for creating, running, and viewing a Replay. A `Replay` is a type of simulation that lets you see how your members' access to resources might change if you changed your IAM policy. During a `Replay`, Policy Simulator re-evaluates, or replays, past access attempts under both the current policy and your proposed policy, and compares those results to determine how your members' access might change under the proposed policy.

    The version of the OpenAPI document: v1beta
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_cloud_policysimulator_v1beta_explained_policy import GoogleCloudPolicysimulatorV1betaExplainedPolicy
from openapi_client.models.google_rpc_status import GoogleRpcStatus
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudPolicysimulatorV1betaExplainedAccess(BaseModel):
    """
    Details about how a set of policies, listed in ExplainedPolicy, resulted in a certain AccessState when replaying an access tuple.
    """ # noqa: E501
    access_state: Optional[StrictStr] = Field(default=None, description="Whether the principal in the access tuple has permission to access the resource in the access tuple under the given policies.", alias="accessState")
    errors: Optional[List[GoogleRpcStatus]] = Field(default=None, description="If the AccessState is `UNKNOWN`, this field contains a list of errors explaining why the result is `UNKNOWN`. If the `AccessState` is `GRANTED` or `NOT_GRANTED`, this field is omitted.")
    policies: Optional[List[GoogleCloudPolicysimulatorV1betaExplainedPolicy]] = Field(default=None, description="If the AccessState is `UNKNOWN`, this field contains the policies that led to that result. If the `AccessState` is `GRANTED` or `NOT_GRANTED`, this field is omitted.")
    __properties: ClassVar[List[str]] = ["accessState", "errors", "policies"]

    @field_validator('access_state')
    def access_state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['ACCESS_STATE_UNSPECIFIED', 'GRANTED', 'NOT_GRANTED', 'UNKNOWN_CONDITIONAL', 'UNKNOWN_INFO_DENIED']):
            raise ValueError("must be one of enum values ('ACCESS_STATE_UNSPECIFIED', 'GRANTED', 'NOT_GRANTED', 'UNKNOWN_CONDITIONAL', 'UNKNOWN_INFO_DENIED')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudPolicysimulatorV1betaExplainedAccess from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in errors (list)
        _items = []
        if self.errors:
            for _item_errors in self.errors:
                if _item_errors:
                    _items.append(_item_errors.to_dict())
            _dict['errors'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in policies (list)
        _items = []
        if self.policies:
            for _item_policies in self.policies:
                if _item_policies:
                    _items.append(_item_policies.to_dict())
            _dict['policies'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudPolicysimulatorV1betaExplainedAccess from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "accessState": obj.get("accessState"),
            "errors": [GoogleRpcStatus.from_dict(_item) for _item in obj["errors"]] if obj.get("errors") is not None else None,
            "policies": [GoogleCloudPolicysimulatorV1betaExplainedPolicy.from_dict(_item) for _item in obj["policies"]] if obj.get("policies") is not None else None
        })
        return _obj



# coding: utf-8

"""
    Policy Simulator API

     Policy Simulator is a collection of endpoints for creating, running, and viewing a Replay. A `Replay` is a type of simulation that lets you see how your members' access to resources might change if you changed your IAM policy. During a `Replay`, Policy Simulator re-evaluates, or replays, past access attempts under both the current policy and your proposed policy, and compares those results to determine how your members' access might change under the proposed policy.

    The version of the OpenAPI document: v1beta
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_cloud_policysimulator_v1_replay_config import GoogleCloudPolicysimulatorV1ReplayConfig
from openapi_client.models.google_cloud_policysimulator_v1_replay_results_summary import GoogleCloudPolicysimulatorV1ReplayResultsSummary
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudPolicysimulatorV1Replay(BaseModel):
    """
    A resource describing a `Replay`, or simulation.
    """ # noqa: E501
    config: Optional[GoogleCloudPolicysimulatorV1ReplayConfig] = None
    name: Optional[StrictStr] = Field(default=None, description="Output only. The resource name of the `Replay`, which has the following format: `{projects|folders|organizations}/{resource-id}/locations/global/replays/{replay-id}`, where `{resource-id}` is the ID of the project, folder, or organization that owns the Replay. Example: `projects/my-example-project/locations/global/replays/506a5f7f-38ce-4d7d-8e03-479ce1833c36`")
    results_summary: Optional[GoogleCloudPolicysimulatorV1ReplayResultsSummary] = Field(default=None, alias="resultsSummary")
    state: Optional[StrictStr] = Field(default=None, description="Output only. The current state of the `Replay`.")
    __properties: ClassVar[List[str]] = ["config", "name", "resultsSummary", "state"]

    @field_validator('state')
    def state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['STATE_UNSPECIFIED', 'PENDING', 'RUNNING', 'SUCCEEDED', 'FAILED']):
            raise ValueError("must be one of enum values ('STATE_UNSPECIFIED', 'PENDING', 'RUNNING', 'SUCCEEDED', 'FAILED')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudPolicysimulatorV1Replay from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "name",
            "state",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of config
        if self.config:
            _dict['config'] = self.config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of results_summary
        if self.results_summary:
            _dict['resultsSummary'] = self.results_summary.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudPolicysimulatorV1Replay from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "config": GoogleCloudPolicysimulatorV1ReplayConfig.from_dict(obj["config"]) if obj.get("config") is not None else None,
            "name": obj.get("name"),
            "resultsSummary": GoogleCloudPolicysimulatorV1ReplayResultsSummary.from_dict(obj["resultsSummary"]) if obj.get("resultsSummary") is not None else None,
            "state": obj.get("state")
        })
        return _obj



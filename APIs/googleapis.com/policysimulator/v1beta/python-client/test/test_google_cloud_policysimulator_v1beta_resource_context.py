# coding: utf-8

"""
    Policy Simulator API

     Policy Simulator is a collection of endpoints for creating, running, and viewing a Replay. A `Replay` is a type of simulation that lets you see how your members' access to resources might change if you changed your IAM policy. During a `Replay`, Policy Simulator re-evaluates, or replays, past access attempts under both the current policy and your proposed policy, and compares those results to determine how your members' access might change under the proposed policy.

    The version of the OpenAPI document: v1beta
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.google_cloud_policysimulator_v1beta_resource_context import GoogleCloudPolicysimulatorV1betaResourceContext

class TestGoogleCloudPolicysimulatorV1betaResourceContext(unittest.TestCase):
    """GoogleCloudPolicysimulatorV1betaResourceContext unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> GoogleCloudPolicysimulatorV1betaResourceContext:
        """Test GoogleCloudPolicysimulatorV1betaResourceContext
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `GoogleCloudPolicysimulatorV1betaResourceContext`
        """
        model = GoogleCloudPolicysimulatorV1betaResourceContext()
        if include_optional:
            return GoogleCloudPolicysimulatorV1betaResourceContext(
                ancestors = [
                    ''
                    ],
                asset_type = '',
                resource = ''
            )
        else:
            return GoogleCloudPolicysimulatorV1betaResourceContext(
        )
        """

    def testGoogleCloudPolicysimulatorV1betaResourceContext(self):
        """Test GoogleCloudPolicysimulatorV1betaResourceContext"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

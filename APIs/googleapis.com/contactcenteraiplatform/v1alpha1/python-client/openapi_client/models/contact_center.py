# coding: utf-8

"""
    Contact Center AI Platform API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v1alpha1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.admin_user import AdminUser
from openapi_client.models.instance_config import InstanceConfig
from openapi_client.models.saml_params import SAMLParams
from openapi_client.models.uris import URIs
from typing import Optional, Set
from typing_extensions import Self

class ContactCenter(BaseModel):
    """
    Message describing ContactCenter object Next ID: 20
    """ # noqa: E501
    admin_user: Optional[AdminUser] = Field(default=None, alias="adminUser")
    ccaip_managed_users: Optional[StrictBool] = Field(default=None, description="Optional. Whether to enable users to be created in the CCAIP-instance concurrently to having users in Cloud identity", alias="ccaipManagedUsers")
    create_time: Optional[StrictStr] = Field(default=None, description="Output only. [Output only] Create time stamp", alias="createTime")
    customer_domain_prefix: Optional[StrictStr] = Field(default=None, description="Required. Immutable. At least 2 and max 16 char long, must conform to [RFC 1035](https://www.ietf.org/rfc/rfc1035.txt).", alias="customerDomainPrefix")
    display_name: Optional[StrictStr] = Field(default=None, description="Required. A user friendly name for the ContactCenter.", alias="displayName")
    instance_config: Optional[InstanceConfig] = Field(default=None, alias="instanceConfig")
    kms_key: Optional[StrictStr] = Field(default=None, description="Immutable. The KMS key name to encrypt the user input (`ContactCenter`).", alias="kmsKey")
    labels: Optional[Dict[str, StrictStr]] = Field(default=None, description="Labels as key value pairs")
    name: Optional[StrictStr] = Field(default=None, description="name of resource")
    private_components: Optional[List[StrictStr]] = Field(default=None, description="Output only. A list of UJET components that should be privately accessed. This field is set by reading settings from the data plane. For more information about the format of the component please refer to go/ccaip-vpc-sc-org-policy. This field is must be fully populated only for Create/Update resource operations. The main use case for this field is OrgPolicy checks via CPE.", alias="privateComponents")
    saml_params: Optional[SAMLParams] = Field(default=None, alias="samlParams")
    state: Optional[StrictStr] = Field(default=None, description="Output only. The state of this contact center.")
    update_time: Optional[StrictStr] = Field(default=None, description="Output only. [Output only] Update time stamp", alias="updateTime")
    uris: Optional[URIs] = None
    user_email: Optional[StrictStr] = Field(default=None, description="Optional. Email address of the first admin user.", alias="userEmail")
    __properties: ClassVar[List[str]] = ["adminUser", "ccaipManagedUsers", "createTime", "customerDomainPrefix", "displayName", "instanceConfig", "kmsKey", "labels", "name", "privateComponents", "samlParams", "state", "updateTime", "uris", "userEmail"]

    @field_validator('state')
    def state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['STATE_UNSPECIFIED', 'STATE_DEPLOYING', 'STATE_DEPLOYED', 'STATE_TERMINATING', 'STATE_FAILED', 'STATE_TERMINATING_FAILED', 'STATE_TERMINATED', 'STATE_IN_GRACE_PERIOD']):
            raise ValueError("must be one of enum values ('STATE_UNSPECIFIED', 'STATE_DEPLOYING', 'STATE_DEPLOYED', 'STATE_TERMINATING', 'STATE_FAILED', 'STATE_TERMINATING_FAILED', 'STATE_TERMINATED', 'STATE_IN_GRACE_PERIOD')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ContactCenter from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "create_time",
            "private_components",
            "state",
            "update_time",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of admin_user
        if self.admin_user:
            _dict['adminUser'] = self.admin_user.to_dict()
        # override the default output from pydantic by calling `to_dict()` of instance_config
        if self.instance_config:
            _dict['instanceConfig'] = self.instance_config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of saml_params
        if self.saml_params:
            _dict['samlParams'] = self.saml_params.to_dict()
        # override the default output from pydantic by calling `to_dict()` of uris
        if self.uris:
            _dict['uris'] = self.uris.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ContactCenter from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "adminUser": AdminUser.from_dict(obj["adminUser"]) if obj.get("adminUser") is not None else None,
            "ccaipManagedUsers": obj.get("ccaipManagedUsers"),
            "createTime": obj.get("createTime"),
            "customerDomainPrefix": obj.get("customerDomainPrefix"),
            "displayName": obj.get("displayName"),
            "instanceConfig": InstanceConfig.from_dict(obj["instanceConfig"]) if obj.get("instanceConfig") is not None else None,
            "kmsKey": obj.get("kmsKey"),
            "labels": obj.get("labels"),
            "name": obj.get("name"),
            "privateComponents": obj.get("privateComponents"),
            "samlParams": SAMLParams.from_dict(obj["samlParams"]) if obj.get("samlParams") is not None else None,
            "state": obj.get("state"),
            "updateTime": obj.get("updateTime"),
            "uris": URIs.from_dict(obj["uris"]) if obj.get("uris") is not None else None,
            "userEmail": obj.get("userEmail")
        })
        return _obj



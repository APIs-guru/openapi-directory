# coding: utf-8

"""
    KMS Inventory API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_cloud_kms_v1_external_protection_level_options import GoogleCloudKmsV1ExternalProtectionLevelOptions
from openapi_client.models.google_cloud_kms_v1_key_operation_attestation import GoogleCloudKmsV1KeyOperationAttestation
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudKmsV1CryptoKeyVersion(BaseModel):
    """
    A CryptoKeyVersion represents an individual cryptographic key, and the associated key material. An ENABLED version can be used for cryptographic operations. For security reasons, the raw cryptographic key material represented by a CryptoKeyVersion can never be viewed or exported. It can only be used to encrypt, decrypt, or sign data when an authorized user or application invokes Cloud KMS.
    """ # noqa: E501
    algorithm: Optional[StrictStr] = Field(default=None, description="Output only. The CryptoKeyVersionAlgorithm that this CryptoKeyVersion supports.")
    attestation: Optional[GoogleCloudKmsV1KeyOperationAttestation] = None
    create_time: Optional[StrictStr] = Field(default=None, description="Output only. The time at which this CryptoKeyVersion was created.", alias="createTime")
    destroy_event_time: Optional[StrictStr] = Field(default=None, description="Output only. The time this CryptoKeyVersion's key material was destroyed. Only present if state is DESTROYED.", alias="destroyEventTime")
    destroy_time: Optional[StrictStr] = Field(default=None, description="Output only. The time this CryptoKeyVersion's key material is scheduled for destruction. Only present if state is DESTROY_SCHEDULED.", alias="destroyTime")
    external_destruction_failure_reason: Optional[StrictStr] = Field(default=None, description="Output only. The root cause of the most recent external destruction failure. Only present if state is EXTERNAL_DESTRUCTION_FAILED.", alias="externalDestructionFailureReason")
    external_protection_level_options: Optional[GoogleCloudKmsV1ExternalProtectionLevelOptions] = Field(default=None, alias="externalProtectionLevelOptions")
    generate_time: Optional[StrictStr] = Field(default=None, description="Output only. The time this CryptoKeyVersion's key material was generated.", alias="generateTime")
    generation_failure_reason: Optional[StrictStr] = Field(default=None, description="Output only. The root cause of the most recent generation failure. Only present if state is GENERATION_FAILED.", alias="generationFailureReason")
    import_failure_reason: Optional[StrictStr] = Field(default=None, description="Output only. The root cause of the most recent import failure. Only present if state is IMPORT_FAILED.", alias="importFailureReason")
    import_job: Optional[StrictStr] = Field(default=None, description="Output only. The name of the ImportJob used in the most recent import of this CryptoKeyVersion. Only present if the underlying key material was imported.", alias="importJob")
    import_time: Optional[StrictStr] = Field(default=None, description="Output only. The time at which this CryptoKeyVersion's key material was most recently imported.", alias="importTime")
    name: Optional[StrictStr] = Field(default=None, description="Output only. The resource name for this CryptoKeyVersion in the format `projects/*/locations/*/keyRings/*/cryptoKeys/*/cryptoKeyVersions/*`.")
    protection_level: Optional[StrictStr] = Field(default=None, description="Output only. The ProtectionLevel describing how crypto operations are performed with this CryptoKeyVersion.", alias="protectionLevel")
    reimport_eligible: Optional[StrictBool] = Field(default=None, description="Output only. Whether or not this key version is eligible for reimport, by being specified as a target in ImportCryptoKeyVersionRequest.crypto_key_version.", alias="reimportEligible")
    state: Optional[StrictStr] = Field(default=None, description="The current state of the CryptoKeyVersion.")
    __properties: ClassVar[List[str]] = ["algorithm", "attestation", "createTime", "destroyEventTime", "destroyTime", "externalDestructionFailureReason", "externalProtectionLevelOptions", "generateTime", "generationFailureReason", "importFailureReason", "importJob", "importTime", "name", "protectionLevel", "reimportEligible", "state"]

    @field_validator('algorithm')
    def algorithm_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['CRYPTO_KEY_VERSION_ALGORITHM_UNSPECIFIED', 'GOOGLE_SYMMETRIC_ENCRYPTION', 'AES_128_GCM', 'AES_256_GCM', 'AES_128_CBC', 'AES_256_CBC', 'AES_128_CTR', 'AES_256_CTR', 'RSA_SIGN_PSS_2048_SHA256', 'RSA_SIGN_PSS_3072_SHA256', 'RSA_SIGN_PSS_4096_SHA256', 'RSA_SIGN_PSS_4096_SHA512', 'RSA_SIGN_PKCS1_2048_SHA256', 'RSA_SIGN_PKCS1_3072_SHA256', 'RSA_SIGN_PKCS1_4096_SHA256', 'RSA_SIGN_PKCS1_4096_SHA512', 'RSA_SIGN_RAW_PKCS1_2048', 'RSA_SIGN_RAW_PKCS1_3072', 'RSA_SIGN_RAW_PKCS1_4096', 'RSA_DECRYPT_OAEP_2048_SHA256', 'RSA_DECRYPT_OAEP_3072_SHA256', 'RSA_DECRYPT_OAEP_4096_SHA256', 'RSA_DECRYPT_OAEP_4096_SHA512', 'RSA_DECRYPT_OAEP_2048_SHA1', 'RSA_DECRYPT_OAEP_3072_SHA1', 'RSA_DECRYPT_OAEP_4096_SHA1', 'EC_SIGN_P256_SHA256', 'EC_SIGN_P384_SHA384', 'EC_SIGN_SECP256K1_SHA256', 'HMAC_SHA256', 'HMAC_SHA1', 'HMAC_SHA384', 'HMAC_SHA512', 'HMAC_SHA224', 'EXTERNAL_SYMMETRIC_ENCRYPTION']):
            raise ValueError("must be one of enum values ('CRYPTO_KEY_VERSION_ALGORITHM_UNSPECIFIED', 'GOOGLE_SYMMETRIC_ENCRYPTION', 'AES_128_GCM', 'AES_256_GCM', 'AES_128_CBC', 'AES_256_CBC', 'AES_128_CTR', 'AES_256_CTR', 'RSA_SIGN_PSS_2048_SHA256', 'RSA_SIGN_PSS_3072_SHA256', 'RSA_SIGN_PSS_4096_SHA256', 'RSA_SIGN_PSS_4096_SHA512', 'RSA_SIGN_PKCS1_2048_SHA256', 'RSA_SIGN_PKCS1_3072_SHA256', 'RSA_SIGN_PKCS1_4096_SHA256', 'RSA_SIGN_PKCS1_4096_SHA512', 'RSA_SIGN_RAW_PKCS1_2048', 'RSA_SIGN_RAW_PKCS1_3072', 'RSA_SIGN_RAW_PKCS1_4096', 'RSA_DECRYPT_OAEP_2048_SHA256', 'RSA_DECRYPT_OAEP_3072_SHA256', 'RSA_DECRYPT_OAEP_4096_SHA256', 'RSA_DECRYPT_OAEP_4096_SHA512', 'RSA_DECRYPT_OAEP_2048_SHA1', 'RSA_DECRYPT_OAEP_3072_SHA1', 'RSA_DECRYPT_OAEP_4096_SHA1', 'EC_SIGN_P256_SHA256', 'EC_SIGN_P384_SHA384', 'EC_SIGN_SECP256K1_SHA256', 'HMAC_SHA256', 'HMAC_SHA1', 'HMAC_SHA384', 'HMAC_SHA512', 'HMAC_SHA224', 'EXTERNAL_SYMMETRIC_ENCRYPTION')")
        return value

    @field_validator('protection_level')
    def protection_level_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['PROTECTION_LEVEL_UNSPECIFIED', 'SOFTWARE', 'HSM', 'EXTERNAL', 'EXTERNAL_VPC']):
            raise ValueError("must be one of enum values ('PROTECTION_LEVEL_UNSPECIFIED', 'SOFTWARE', 'HSM', 'EXTERNAL', 'EXTERNAL_VPC')")
        return value

    @field_validator('state')
    def state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['CRYPTO_KEY_VERSION_STATE_UNSPECIFIED', 'PENDING_GENERATION', 'ENABLED', 'DISABLED', 'DESTROYED', 'DESTROY_SCHEDULED', 'PENDING_IMPORT', 'IMPORT_FAILED', 'GENERATION_FAILED', 'PENDING_EXTERNAL_DESTRUCTION', 'EXTERNAL_DESTRUCTION_FAILED']):
            raise ValueError("must be one of enum values ('CRYPTO_KEY_VERSION_STATE_UNSPECIFIED', 'PENDING_GENERATION', 'ENABLED', 'DISABLED', 'DESTROYED', 'DESTROY_SCHEDULED', 'PENDING_IMPORT', 'IMPORT_FAILED', 'GENERATION_FAILED', 'PENDING_EXTERNAL_DESTRUCTION', 'EXTERNAL_DESTRUCTION_FAILED')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudKmsV1CryptoKeyVersion from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "algorithm",
            "create_time",
            "destroy_event_time",
            "destroy_time",
            "external_destruction_failure_reason",
            "generate_time",
            "generation_failure_reason",
            "import_failure_reason",
            "import_job",
            "import_time",
            "name",
            "protection_level",
            "reimport_eligible",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of attestation
        if self.attestation:
            _dict['attestation'] = self.attestation.to_dict()
        # override the default output from pydantic by calling `to_dict()` of external_protection_level_options
        if self.external_protection_level_options:
            _dict['externalProtectionLevelOptions'] = self.external_protection_level_options.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudKmsV1CryptoKeyVersion from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "algorithm": obj.get("algorithm"),
            "attestation": GoogleCloudKmsV1KeyOperationAttestation.from_dict(obj["attestation"]) if obj.get("attestation") is not None else None,
            "createTime": obj.get("createTime"),
            "destroyEventTime": obj.get("destroyEventTime"),
            "destroyTime": obj.get("destroyTime"),
            "externalDestructionFailureReason": obj.get("externalDestructionFailureReason"),
            "externalProtectionLevelOptions": GoogleCloudKmsV1ExternalProtectionLevelOptions.from_dict(obj["externalProtectionLevelOptions"]) if obj.get("externalProtectionLevelOptions") is not None else None,
            "generateTime": obj.get("generateTime"),
            "generationFailureReason": obj.get("generationFailureReason"),
            "importFailureReason": obj.get("importFailureReason"),
            "importJob": obj.get("importJob"),
            "importTime": obj.get("importTime"),
            "name": obj.get("name"),
            "protectionLevel": obj.get("protectionLevel"),
            "reimportEligible": obj.get("reimportEligible"),
            "state": obj.get("state")
        })
        return _obj



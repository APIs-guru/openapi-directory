# coding: utf-8

"""
    KMS Inventory API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudKmsInventoryV1ProtectedResourcesSummary(BaseModel):
    """
    Aggregate information about the resources protected by a Cloud KMS key in the same Cloud organization as the key.
    """ # noqa: E501
    cloud_products: Optional[Dict[str, StrictStr]] = Field(default=None, description="The number of resources protected by the key grouped by Cloud product.", alias="cloudProducts")
    locations: Optional[Dict[str, StrictStr]] = Field(default=None, description="The number of resources protected by the key grouped by region.")
    name: Optional[StrictStr] = Field(default=None, description="The full name of the ProtectedResourcesSummary resource. Example: projects/test-project/locations/us/keyRings/test-keyring/cryptoKeys/test-key/protectedResourcesSummary")
    project_count: Optional[StrictInt] = Field(default=None, description="The number of distinct Cloud projects in the same Cloud organization as the key that have resources protected by the key.", alias="projectCount")
    resource_count: Optional[StrictStr] = Field(default=None, description="The total number of protected resources in the same Cloud organization as the key.", alias="resourceCount")
    resource_types: Optional[Dict[str, StrictStr]] = Field(default=None, description="The number of resources protected by the key grouped by resource type.", alias="resourceTypes")
    __properties: ClassVar[List[str]] = ["cloudProducts", "locations", "name", "projectCount", "resourceCount", "resourceTypes"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudKmsInventoryV1ProtectedResourcesSummary from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudKmsInventoryV1ProtectedResourcesSummary from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "cloudProducts": obj.get("cloudProducts"),
            "locations": obj.get("locations"),
            "name": obj.get("name"),
            "projectCount": obj.get("projectCount"),
            "resourceCount": obj.get("resourceCount"),
            "resourceTypes": obj.get("resourceTypes")
        })
        return _obj



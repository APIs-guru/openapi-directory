# coding: utf-8

"""
    KMS Inventory API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudKmsInventoryV1ProtectedResource(BaseModel):
    """
    Metadata about a resource protected by a Cloud KMS key.
    """ # noqa: E501
    cloud_product: Optional[StrictStr] = Field(default=None, description="The Cloud product that owns the resource. Example: `compute`", alias="cloudProduct")
    create_time: Optional[StrictStr] = Field(default=None, description="Output only. The time at which this resource was created. The granularity is in seconds. Timestamp.nanos will always be 0.", alias="createTime")
    crypto_key_version: Optional[StrictStr] = Field(default=None, description="The name of the Cloud KMS [CryptoKeyVersion](https://cloud.google.com/kms/docs/reference/rest/v1/projects.locations.keyRings.cryptoKeys.cryptoKeyVersions?hl=en) used to protect this resource via CMEK. This field is empty if the Google Cloud product owning the resource does not provide key version data to Asset Inventory. If there are multiple key versions protecting the resource, then this is same value as the first element of crypto_key_versions.", alias="cryptoKeyVersion")
    crypto_key_versions: Optional[List[StrictStr]] = Field(default=None, description="The names of the Cloud KMS [CryptoKeyVersion](https://cloud.google.com/kms/docs/reference/rest/v1/projects.locations.keyRings.cryptoKeys.cryptoKeyVersions?hl=en) used to protect this resource via CMEK. This field is empty if the Google Cloud product owning the resource does not provide key versions data to Asset Inventory. The first element of this field is stored in crypto_key_version.", alias="cryptoKeyVersions")
    labels: Optional[Dict[str, StrictStr]] = Field(default=None, description="A key-value pair of the resource's labels (v1) to their values.")
    location: Optional[StrictStr] = Field(default=None, description="Location can be `global`, regional like `us-east1`, or zonal like `us-west1-b`.")
    name: Optional[StrictStr] = Field(default=None, description="The full resource name of the resource. Example: `//compute.googleapis.com/projects/my_project_123/zones/zone1/instances/instance1`.")
    project: Optional[StrictStr] = Field(default=None, description="Format: `projects/{PROJECT_NUMBER}`.")
    project_id: Optional[StrictStr] = Field(default=None, description="The ID of the project that owns the resource.", alias="projectId")
    resource_type: Optional[StrictStr] = Field(default=None, description="Example: `compute.googleapis.com/Disk`", alias="resourceType")
    __properties: ClassVar[List[str]] = ["cloudProduct", "createTime", "cryptoKeyVersion", "cryptoKeyVersions", "labels", "location", "name", "project", "projectId", "resourceType"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudKmsInventoryV1ProtectedResource from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "create_time",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudKmsInventoryV1ProtectedResource from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "cloudProduct": obj.get("cloudProduct"),
            "createTime": obj.get("createTime"),
            "cryptoKeyVersion": obj.get("cryptoKeyVersion"),
            "cryptoKeyVersions": obj.get("cryptoKeyVersions"),
            "labels": obj.get("labels"),
            "location": obj.get("location"),
            "name": obj.get("name"),
            "project": obj.get("project"),
            "projectId": obj.get("projectId"),
            "resourceType": obj.get("resourceType")
        })
        return _obj



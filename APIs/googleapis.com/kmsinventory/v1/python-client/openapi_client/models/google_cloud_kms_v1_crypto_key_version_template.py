# coding: utf-8

"""
    KMS Inventory API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudKmsV1CryptoKeyVersionTemplate(BaseModel):
    """
    A CryptoKeyVersionTemplate specifies the properties to use when creating a new CryptoKeyVersion, either manually with CreateCryptoKeyVersion or automatically as a result of auto-rotation.
    """ # noqa: E501
    algorithm: Optional[StrictStr] = Field(default=None, description="Required. Algorithm to use when creating a CryptoKeyVersion based on this template. For backwards compatibility, GOOGLE_SYMMETRIC_ENCRYPTION is implied if both this field is omitted and CryptoKey.purpose is ENCRYPT_DECRYPT.")
    protection_level: Optional[StrictStr] = Field(default=None, description="ProtectionLevel to use when creating a CryptoKeyVersion based on this template. Immutable. Defaults to SOFTWARE.", alias="protectionLevel")
    __properties: ClassVar[List[str]] = ["algorithm", "protectionLevel"]

    @field_validator('algorithm')
    def algorithm_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['CRYPTO_KEY_VERSION_ALGORITHM_UNSPECIFIED', 'GOOGLE_SYMMETRIC_ENCRYPTION', 'AES_128_GCM', 'AES_256_GCM', 'AES_128_CBC', 'AES_256_CBC', 'AES_128_CTR', 'AES_256_CTR', 'RSA_SIGN_PSS_2048_SHA256', 'RSA_SIGN_PSS_3072_SHA256', 'RSA_SIGN_PSS_4096_SHA256', 'RSA_SIGN_PSS_4096_SHA512', 'RSA_SIGN_PKCS1_2048_SHA256', 'RSA_SIGN_PKCS1_3072_SHA256', 'RSA_SIGN_PKCS1_4096_SHA256', 'RSA_SIGN_PKCS1_4096_SHA512', 'RSA_SIGN_RAW_PKCS1_2048', 'RSA_SIGN_RAW_PKCS1_3072', 'RSA_SIGN_RAW_PKCS1_4096', 'RSA_DECRYPT_OAEP_2048_SHA256', 'RSA_DECRYPT_OAEP_3072_SHA256', 'RSA_DECRYPT_OAEP_4096_SHA256', 'RSA_DECRYPT_OAEP_4096_SHA512', 'RSA_DECRYPT_OAEP_2048_SHA1', 'RSA_DECRYPT_OAEP_3072_SHA1', 'RSA_DECRYPT_OAEP_4096_SHA1', 'EC_SIGN_P256_SHA256', 'EC_SIGN_P384_SHA384', 'EC_SIGN_SECP256K1_SHA256', 'HMAC_SHA256', 'HMAC_SHA1', 'HMAC_SHA384', 'HMAC_SHA512', 'HMAC_SHA224', 'EXTERNAL_SYMMETRIC_ENCRYPTION']):
            raise ValueError("must be one of enum values ('CRYPTO_KEY_VERSION_ALGORITHM_UNSPECIFIED', 'GOOGLE_SYMMETRIC_ENCRYPTION', 'AES_128_GCM', 'AES_256_GCM', 'AES_128_CBC', 'AES_256_CBC', 'AES_128_CTR', 'AES_256_CTR', 'RSA_SIGN_PSS_2048_SHA256', 'RSA_SIGN_PSS_3072_SHA256', 'RSA_SIGN_PSS_4096_SHA256', 'RSA_SIGN_PSS_4096_SHA512', 'RSA_SIGN_PKCS1_2048_SHA256', 'RSA_SIGN_PKCS1_3072_SHA256', 'RSA_SIGN_PKCS1_4096_SHA256', 'RSA_SIGN_PKCS1_4096_SHA512', 'RSA_SIGN_RAW_PKCS1_2048', 'RSA_SIGN_RAW_PKCS1_3072', 'RSA_SIGN_RAW_PKCS1_4096', 'RSA_DECRYPT_OAEP_2048_SHA256', 'RSA_DECRYPT_OAEP_3072_SHA256', 'RSA_DECRYPT_OAEP_4096_SHA256', 'RSA_DECRYPT_OAEP_4096_SHA512', 'RSA_DECRYPT_OAEP_2048_SHA1', 'RSA_DECRYPT_OAEP_3072_SHA1', 'RSA_DECRYPT_OAEP_4096_SHA1', 'EC_SIGN_P256_SHA256', 'EC_SIGN_P384_SHA384', 'EC_SIGN_SECP256K1_SHA256', 'HMAC_SHA256', 'HMAC_SHA1', 'HMAC_SHA384', 'HMAC_SHA512', 'HMAC_SHA224', 'EXTERNAL_SYMMETRIC_ENCRYPTION')")
        return value

    @field_validator('protection_level')
    def protection_level_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['PROTECTION_LEVEL_UNSPECIFIED', 'SOFTWARE', 'HSM', 'EXTERNAL', 'EXTERNAL_VPC']):
            raise ValueError("must be one of enum values ('PROTECTION_LEVEL_UNSPECIFIED', 'SOFTWARE', 'HSM', 'EXTERNAL', 'EXTERNAL_VPC')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudKmsV1CryptoKeyVersionTemplate from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudKmsV1CryptoKeyVersionTemplate from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "algorithm": obj.get("algorithm"),
            "protectionLevel": obj.get("protectionLevel")
        })
        return _obj



# coding: utf-8

"""
    KMS Inventory API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.google_cloud_kms_v1_crypto_key import GoogleCloudKmsV1CryptoKey

class TestGoogleCloudKmsV1CryptoKey(unittest.TestCase):
    """GoogleCloudKmsV1CryptoKey unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> GoogleCloudKmsV1CryptoKey:
        """Test GoogleCloudKmsV1CryptoKey
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `GoogleCloudKmsV1CryptoKey`
        """
        model = GoogleCloudKmsV1CryptoKey()
        if include_optional:
            return GoogleCloudKmsV1CryptoKey(
                create_time = '',
                crypto_key_backend = '',
                destroy_scheduled_duration = '',
                import_only = True,
                labels = {
                    'key' : ''
                    },
                name = '',
                next_rotation_time = '',
                primary = openapi_client.models.google_cloud_kms_v1_crypto_key_version.GoogleCloudKmsV1CryptoKeyVersion(
                    algorithm = 'CRYPTO_KEY_VERSION_ALGORITHM_UNSPECIFIED', 
                    attestation = openapi_client.models.google_cloud_kms_v1_key_operation_attestation.GoogleCloudKmsV1KeyOperationAttestation(
                        cert_chains = openapi_client.models.google_cloud_kms_v1_key_operation_attestation_certificate_chains.GoogleCloudKmsV1KeyOperationAttestationCertificateChains(
                            cavium_certs = [
                                ''
                                ], 
                            google_card_certs = [
                                ''
                                ], 
                            google_partition_certs = [
                                ''
                                ], ), 
                        content = 'YQ==', 
                        format = 'ATTESTATION_FORMAT_UNSPECIFIED', ), 
                    create_time = '', 
                    destroy_event_time = '', 
                    destroy_time = '', 
                    external_destruction_failure_reason = '', 
                    external_protection_level_options = openapi_client.models.google_cloud_kms_v1_external_protection_level_options.GoogleCloudKmsV1ExternalProtectionLevelOptions(
                        ekm_connection_key_path = '', 
                        external_key_uri = '', ), 
                    generate_time = '', 
                    generation_failure_reason = '', 
                    import_failure_reason = '', 
                    import_job = '', 
                    import_time = '', 
                    name = '', 
                    protection_level = 'PROTECTION_LEVEL_UNSPECIFIED', 
                    reimport_eligible = True, 
                    state = 'CRYPTO_KEY_VERSION_STATE_UNSPECIFIED', ),
                purpose = 'CRYPTO_KEY_PURPOSE_UNSPECIFIED',
                rotation_period = '',
                version_template = openapi_client.models.google_cloud_kms_v1_crypto_key_version_template.GoogleCloudKmsV1CryptoKeyVersionTemplate(
                    algorithm = 'CRYPTO_KEY_VERSION_ALGORITHM_UNSPECIFIED', 
                    protection_level = 'PROTECTION_LEVEL_UNSPECIFIED', )
            )
        else:
            return GoogleCloudKmsV1CryptoKey(
        )
        """

    def testGoogleCloudKmsV1CryptoKey(self):
        """Test GoogleCloudKmsV1CryptoKey"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

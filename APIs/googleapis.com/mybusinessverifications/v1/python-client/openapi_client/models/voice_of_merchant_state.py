# coding: utf-8

"""
    My Business Verifications API

    The My Business Verifications API provides an interface for taking verifications related actions for locations.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.comply_with_guidelines import ComplyWithGuidelines
from openapi_client.models.verify import Verify
from typing import Optional, Set
from typing_extensions import Self

class VoiceOfMerchantState(BaseModel):
    """
    Response message for VoiceOfMerchant.GetVoiceOfMerchantState.
    """ # noqa: E501
    comply_with_guidelines: Optional[ComplyWithGuidelines] = Field(default=None, alias="complyWithGuidelines")
    has_business_authority: Optional[StrictBool] = Field(default=None, description="Indicates whether the location has the authority (ownership) over the business on Google. If true, another location cannot take over and become the dominant listing on Maps. However, edits will not become live unless Voice of Merchant is gained (i.e. has_voice_of_merchant is true).", alias="hasBusinessAuthority")
    has_voice_of_merchant: Optional[StrictBool] = Field(default=None, description="Indicates whether the location is in good standing and has control over the business on Google. Any edits made to the location will propagate to Maps after passing the review phase.", alias="hasVoiceOfMerchant")
    resolve_ownership_conflict: Optional[Dict[str, Any]] = Field(default=None, description="Indicates that the location duplicates another location that is in good standing.", alias="resolveOwnershipConflict")
    verify: Optional[Verify] = None
    wait_for_voice_of_merchant: Optional[Dict[str, Any]] = Field(default=None, description="Indicates that the location will gain voice of merchant after passing review.", alias="waitForVoiceOfMerchant")
    __properties: ClassVar[List[str]] = ["complyWithGuidelines", "hasBusinessAuthority", "hasVoiceOfMerchant", "resolveOwnershipConflict", "verify", "waitForVoiceOfMerchant"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of VoiceOfMerchantState from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of comply_with_guidelines
        if self.comply_with_guidelines:
            _dict['complyWithGuidelines'] = self.comply_with_guidelines.to_dict()
        # override the default output from pydantic by calling `to_dict()` of verify
        if self.verify:
            _dict['verify'] = self.verify.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of VoiceOfMerchantState from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "complyWithGuidelines": ComplyWithGuidelines.from_dict(obj["complyWithGuidelines"]) if obj.get("complyWithGuidelines") is not None else None,
            "hasBusinessAuthority": obj.get("hasBusinessAuthority"),
            "hasVoiceOfMerchant": obj.get("hasVoiceOfMerchant"),
            "resolveOwnershipConflict": obj.get("resolveOwnershipConflict"),
            "verify": Verify.from_dict(obj["verify"]) if obj.get("verify") is not None else None,
            "waitForVoiceOfMerchant": obj.get("waitForVoiceOfMerchant")
        })
        return _obj



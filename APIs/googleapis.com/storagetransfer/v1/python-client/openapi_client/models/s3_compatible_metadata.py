# coding: utf-8

"""
    Storage Transfer API

    Transfers data from external data sources to a Google Cloud Storage bucket or between Google Cloud Storage buckets. 

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class S3CompatibleMetadata(BaseModel):
    """
    S3CompatibleMetadata contains the metadata fields that apply to the basic types of S3-compatible data providers.
    """ # noqa: E501
    auth_method: Optional[StrictStr] = Field(default=None, description="Specifies the authentication and authorization method used by the storage service. When not specified, Transfer Service will attempt to determine right auth method to use.", alias="authMethod")
    list_api: Optional[StrictStr] = Field(default=None, description="The Listing API to use for discovering objects. When not specified, Transfer Service will attempt to determine the right API to use.", alias="listApi")
    protocol: Optional[StrictStr] = Field(default=None, description="Specifies the network protocol of the agent. When not specified, the default value of NetworkProtocol NETWORK_PROTOCOL_HTTPS is used.")
    request_model: Optional[StrictStr] = Field(default=None, description="Specifies the API request model used to call the storage service. When not specified, the default value of RequestModel REQUEST_MODEL_VIRTUAL_HOSTED_STYLE is used.", alias="requestModel")
    __properties: ClassVar[List[str]] = ["authMethod", "listApi", "protocol", "requestModel"]

    @field_validator('auth_method')
    def auth_method_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['AUTH_METHOD_UNSPECIFIED', 'AUTH_METHOD_AWS_SIGNATURE_V4', 'AUTH_METHOD_AWS_SIGNATURE_V2']):
            raise ValueError("must be one of enum values ('AUTH_METHOD_UNSPECIFIED', 'AUTH_METHOD_AWS_SIGNATURE_V4', 'AUTH_METHOD_AWS_SIGNATURE_V2')")
        return value

    @field_validator('list_api')
    def list_api_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['LIST_API_UNSPECIFIED', 'LIST_OBJECTS_V2', 'LIST_OBJECTS']):
            raise ValueError("must be one of enum values ('LIST_API_UNSPECIFIED', 'LIST_OBJECTS_V2', 'LIST_OBJECTS')")
        return value

    @field_validator('protocol')
    def protocol_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['NETWORK_PROTOCOL_UNSPECIFIED', 'NETWORK_PROTOCOL_HTTPS', 'NETWORK_PROTOCOL_HTTP']):
            raise ValueError("must be one of enum values ('NETWORK_PROTOCOL_UNSPECIFIED', 'NETWORK_PROTOCOL_HTTPS', 'NETWORK_PROTOCOL_HTTP')")
        return value

    @field_validator('request_model')
    def request_model_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['REQUEST_MODEL_UNSPECIFIED', 'REQUEST_MODEL_VIRTUAL_HOSTED_STYLE', 'REQUEST_MODEL_PATH_STYLE']):
            raise ValueError("must be one of enum values ('REQUEST_MODEL_UNSPECIFIED', 'REQUEST_MODEL_VIRTUAL_HOSTED_STYLE', 'REQUEST_MODEL_PATH_STYLE')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of S3CompatibleMetadata from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of S3CompatibleMetadata from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "authMethod": obj.get("authMethod"),
            "listApi": obj.get("listApi"),
            "protocol": obj.get("protocol"),
            "requestModel": obj.get("requestModel")
        })
        return _obj



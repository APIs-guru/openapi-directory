# coding: utf-8

"""
    Storage Transfer API

    Transfers data from external data sources to a Google Cloud Storage bucket or between Google Cloud Storage buckets. 

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.aws_s3_compatible_data import AwsS3CompatibleData
from openapi_client.models.aws_s3_data import AwsS3Data
from openapi_client.models.azure_blob_storage_data import AzureBlobStorageData
from openapi_client.models.gcs_data import GcsData
from openapi_client.models.hdfs_data import HdfsData
from openapi_client.models.http_data import HttpData
from openapi_client.models.object_conditions import ObjectConditions
from openapi_client.models.posix_filesystem import PosixFilesystem
from openapi_client.models.transfer_manifest import TransferManifest
from openapi_client.models.transfer_options import TransferOptions
from typing import Optional, Set
from typing_extensions import Self

class TransferSpec(BaseModel):
    """
    Configuration for running a transfer.
    """ # noqa: E501
    aws_s3_compatible_data_source: Optional[AwsS3CompatibleData] = Field(default=None, alias="awsS3CompatibleDataSource")
    aws_s3_data_source: Optional[AwsS3Data] = Field(default=None, alias="awsS3DataSource")
    azure_blob_storage_data_source: Optional[AzureBlobStorageData] = Field(default=None, alias="azureBlobStorageDataSource")
    gcs_data_sink: Optional[GcsData] = Field(default=None, alias="gcsDataSink")
    gcs_data_source: Optional[GcsData] = Field(default=None, alias="gcsDataSource")
    gcs_intermediate_data_location: Optional[GcsData] = Field(default=None, alias="gcsIntermediateDataLocation")
    hdfs_data_source: Optional[HdfsData] = Field(default=None, alias="hdfsDataSource")
    http_data_source: Optional[HttpData] = Field(default=None, alias="httpDataSource")
    object_conditions: Optional[ObjectConditions] = Field(default=None, alias="objectConditions")
    posix_data_sink: Optional[PosixFilesystem] = Field(default=None, alias="posixDataSink")
    posix_data_source: Optional[PosixFilesystem] = Field(default=None, alias="posixDataSource")
    sink_agent_pool_name: Optional[StrictStr] = Field(default=None, description="Specifies the agent pool name associated with the posix data sink. When unspecified, the default name is used.", alias="sinkAgentPoolName")
    source_agent_pool_name: Optional[StrictStr] = Field(default=None, description="Specifies the agent pool name associated with the posix data source. When unspecified, the default name is used.", alias="sourceAgentPoolName")
    transfer_manifest: Optional[TransferManifest] = Field(default=None, alias="transferManifest")
    transfer_options: Optional[TransferOptions] = Field(default=None, alias="transferOptions")
    __properties: ClassVar[List[str]] = ["awsS3CompatibleDataSource", "awsS3DataSource", "azureBlobStorageDataSource", "gcsDataSink", "gcsDataSource", "gcsIntermediateDataLocation", "hdfsDataSource", "httpDataSource", "objectConditions", "posixDataSink", "posixDataSource", "sinkAgentPoolName", "sourceAgentPoolName", "transferManifest", "transferOptions"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of TransferSpec from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of aws_s3_compatible_data_source
        if self.aws_s3_compatible_data_source:
            _dict['awsS3CompatibleDataSource'] = self.aws_s3_compatible_data_source.to_dict()
        # override the default output from pydantic by calling `to_dict()` of aws_s3_data_source
        if self.aws_s3_data_source:
            _dict['awsS3DataSource'] = self.aws_s3_data_source.to_dict()
        # override the default output from pydantic by calling `to_dict()` of azure_blob_storage_data_source
        if self.azure_blob_storage_data_source:
            _dict['azureBlobStorageDataSource'] = self.azure_blob_storage_data_source.to_dict()
        # override the default output from pydantic by calling `to_dict()` of gcs_data_sink
        if self.gcs_data_sink:
            _dict['gcsDataSink'] = self.gcs_data_sink.to_dict()
        # override the default output from pydantic by calling `to_dict()` of gcs_data_source
        if self.gcs_data_source:
            _dict['gcsDataSource'] = self.gcs_data_source.to_dict()
        # override the default output from pydantic by calling `to_dict()` of gcs_intermediate_data_location
        if self.gcs_intermediate_data_location:
            _dict['gcsIntermediateDataLocation'] = self.gcs_intermediate_data_location.to_dict()
        # override the default output from pydantic by calling `to_dict()` of hdfs_data_source
        if self.hdfs_data_source:
            _dict['hdfsDataSource'] = self.hdfs_data_source.to_dict()
        # override the default output from pydantic by calling `to_dict()` of http_data_source
        if self.http_data_source:
            _dict['httpDataSource'] = self.http_data_source.to_dict()
        # override the default output from pydantic by calling `to_dict()` of object_conditions
        if self.object_conditions:
            _dict['objectConditions'] = self.object_conditions.to_dict()
        # override the default output from pydantic by calling `to_dict()` of posix_data_sink
        if self.posix_data_sink:
            _dict['posixDataSink'] = self.posix_data_sink.to_dict()
        # override the default output from pydantic by calling `to_dict()` of posix_data_source
        if self.posix_data_source:
            _dict['posixDataSource'] = self.posix_data_source.to_dict()
        # override the default output from pydantic by calling `to_dict()` of transfer_manifest
        if self.transfer_manifest:
            _dict['transferManifest'] = self.transfer_manifest.to_dict()
        # override the default output from pydantic by calling `to_dict()` of transfer_options
        if self.transfer_options:
            _dict['transferOptions'] = self.transfer_options.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of TransferSpec from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "awsS3CompatibleDataSource": AwsS3CompatibleData.from_dict(obj["awsS3CompatibleDataSource"]) if obj.get("awsS3CompatibleDataSource") is not None else None,
            "awsS3DataSource": AwsS3Data.from_dict(obj["awsS3DataSource"]) if obj.get("awsS3DataSource") is not None else None,
            "azureBlobStorageDataSource": AzureBlobStorageData.from_dict(obj["azureBlobStorageDataSource"]) if obj.get("azureBlobStorageDataSource") is not None else None,
            "gcsDataSink": GcsData.from_dict(obj["gcsDataSink"]) if obj.get("gcsDataSink") is not None else None,
            "gcsDataSource": GcsData.from_dict(obj["gcsDataSource"]) if obj.get("gcsDataSource") is not None else None,
            "gcsIntermediateDataLocation": GcsData.from_dict(obj["gcsIntermediateDataLocation"]) if obj.get("gcsIntermediateDataLocation") is not None else None,
            "hdfsDataSource": HdfsData.from_dict(obj["hdfsDataSource"]) if obj.get("hdfsDataSource") is not None else None,
            "httpDataSource": HttpData.from_dict(obj["httpDataSource"]) if obj.get("httpDataSource") is not None else None,
            "objectConditions": ObjectConditions.from_dict(obj["objectConditions"]) if obj.get("objectConditions") is not None else None,
            "posixDataSink": PosixFilesystem.from_dict(obj["posixDataSink"]) if obj.get("posixDataSink") is not None else None,
            "posixDataSource": PosixFilesystem.from_dict(obj["posixDataSource"]) if obj.get("posixDataSource") is not None else None,
            "sinkAgentPoolName": obj.get("sinkAgentPoolName"),
            "sourceAgentPoolName": obj.get("sourceAgentPoolName"),
            "transferManifest": TransferManifest.from_dict(obj["transferManifest"]) if obj.get("transferManifest") is not None else None,
            "transferOptions": TransferOptions.from_dict(obj["transferOptions"]) if obj.get("transferOptions") is not None else None
        })
        return _obj



# coding: utf-8

"""
    Storage Transfer API

    Transfers data from external data sources to a Google Cloud Storage bucket or between Google Cloud Storage buckets. 

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class MetadataOptions(BaseModel):
    """
    Specifies the metadata options for running a transfer.
    """ # noqa: E501
    acl: Optional[StrictStr] = Field(default=None, description="Specifies how each object's ACLs should be preserved for transfers between Google Cloud Storage buckets. If unspecified, the default behavior is the same as ACL_DESTINATION_BUCKET_DEFAULT.")
    gid: Optional[StrictStr] = Field(default=None, description="Specifies how each file's POSIX group ID (GID) attribute should be handled by the transfer. By default, GID is not preserved. Only applicable to transfers involving POSIX file systems, and ignored for other transfers.")
    kms_key: Optional[StrictStr] = Field(default=None, description="Specifies how each object's Cloud KMS customer-managed encryption key (CMEK) is preserved for transfers between Google Cloud Storage buckets. If unspecified, the default behavior is the same as KMS_KEY_DESTINATION_BUCKET_DEFAULT.", alias="kmsKey")
    mode: Optional[StrictStr] = Field(default=None, description="Specifies how each file's mode attribute should be handled by the transfer. By default, mode is not preserved. Only applicable to transfers involving POSIX file systems, and ignored for other transfers.")
    storage_class: Optional[StrictStr] = Field(default=None, description="Specifies the storage class to set on objects being transferred to Google Cloud Storage buckets. If unspecified, the default behavior is the same as STORAGE_CLASS_DESTINATION_BUCKET_DEFAULT.", alias="storageClass")
    symlink: Optional[StrictStr] = Field(default=None, description="Specifies how symlinks should be handled by the transfer. By default, symlinks are not preserved. Only applicable to transfers involving POSIX file systems, and ignored for other transfers.")
    temporary_hold: Optional[StrictStr] = Field(default=None, description="Specifies how each object's temporary hold status should be preserved for transfers between Google Cloud Storage buckets. If unspecified, the default behavior is the same as TEMPORARY_HOLD_PRESERVE.", alias="temporaryHold")
    time_created: Optional[StrictStr] = Field(default=None, description="Specifies how each object's `timeCreated` metadata is preserved for transfers. If unspecified, the default behavior is the same as TIME_CREATED_SKIP.", alias="timeCreated")
    uid: Optional[StrictStr] = Field(default=None, description="Specifies how each file's POSIX user ID (UID) attribute should be handled by the transfer. By default, UID is not preserved. Only applicable to transfers involving POSIX file systems, and ignored for other transfers.")
    __properties: ClassVar[List[str]] = ["acl", "gid", "kmsKey", "mode", "storageClass", "symlink", "temporaryHold", "timeCreated", "uid"]

    @field_validator('acl')
    def acl_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['ACL_UNSPECIFIED', 'ACL_DESTINATION_BUCKET_DEFAULT', 'ACL_PRESERVE']):
            raise ValueError("must be one of enum values ('ACL_UNSPECIFIED', 'ACL_DESTINATION_BUCKET_DEFAULT', 'ACL_PRESERVE')")
        return value

    @field_validator('gid')
    def gid_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['GID_UNSPECIFIED', 'GID_SKIP', 'GID_NUMBER']):
            raise ValueError("must be one of enum values ('GID_UNSPECIFIED', 'GID_SKIP', 'GID_NUMBER')")
        return value

    @field_validator('kms_key')
    def kms_key_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['KMS_KEY_UNSPECIFIED', 'KMS_KEY_DESTINATION_BUCKET_DEFAULT', 'KMS_KEY_PRESERVE']):
            raise ValueError("must be one of enum values ('KMS_KEY_UNSPECIFIED', 'KMS_KEY_DESTINATION_BUCKET_DEFAULT', 'KMS_KEY_PRESERVE')")
        return value

    @field_validator('mode')
    def mode_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['MODE_UNSPECIFIED', 'MODE_SKIP', 'MODE_PRESERVE']):
            raise ValueError("must be one of enum values ('MODE_UNSPECIFIED', 'MODE_SKIP', 'MODE_PRESERVE')")
        return value

    @field_validator('storage_class')
    def storage_class_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['STORAGE_CLASS_UNSPECIFIED', 'STORAGE_CLASS_DESTINATION_BUCKET_DEFAULT', 'STORAGE_CLASS_PRESERVE', 'STORAGE_CLASS_STANDARD', 'STORAGE_CLASS_NEARLINE', 'STORAGE_CLASS_COLDLINE', 'STORAGE_CLASS_ARCHIVE']):
            raise ValueError("must be one of enum values ('STORAGE_CLASS_UNSPECIFIED', 'STORAGE_CLASS_DESTINATION_BUCKET_DEFAULT', 'STORAGE_CLASS_PRESERVE', 'STORAGE_CLASS_STANDARD', 'STORAGE_CLASS_NEARLINE', 'STORAGE_CLASS_COLDLINE', 'STORAGE_CLASS_ARCHIVE')")
        return value

    @field_validator('symlink')
    def symlink_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['SYMLINK_UNSPECIFIED', 'SYMLINK_SKIP', 'SYMLINK_PRESERVE']):
            raise ValueError("must be one of enum values ('SYMLINK_UNSPECIFIED', 'SYMLINK_SKIP', 'SYMLINK_PRESERVE')")
        return value

    @field_validator('temporary_hold')
    def temporary_hold_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['TEMPORARY_HOLD_UNSPECIFIED', 'TEMPORARY_HOLD_SKIP', 'TEMPORARY_HOLD_PRESERVE']):
            raise ValueError("must be one of enum values ('TEMPORARY_HOLD_UNSPECIFIED', 'TEMPORARY_HOLD_SKIP', 'TEMPORARY_HOLD_PRESERVE')")
        return value

    @field_validator('time_created')
    def time_created_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['TIME_CREATED_UNSPECIFIED', 'TIME_CREATED_SKIP', 'TIME_CREATED_PRESERVE_AS_CUSTOM_TIME']):
            raise ValueError("must be one of enum values ('TIME_CREATED_UNSPECIFIED', 'TIME_CREATED_SKIP', 'TIME_CREATED_PRESERVE_AS_CUSTOM_TIME')")
        return value

    @field_validator('uid')
    def uid_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['UID_UNSPECIFIED', 'UID_SKIP', 'UID_NUMBER']):
            raise ValueError("must be one of enum values ('UID_UNSPECIFIED', 'UID_SKIP', 'UID_NUMBER')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of MetadataOptions from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of MetadataOptions from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "acl": obj.get("acl"),
            "gid": obj.get("gid"),
            "kmsKey": obj.get("kmsKey"),
            "mode": obj.get("mode"),
            "storageClass": obj.get("storageClass"),
            "symlink": obj.get("symlink"),
            "temporaryHold": obj.get("temporaryHold"),
            "timeCreated": obj.get("timeCreated"),
            "uid": obj.get("uid")
        })
        return _obj



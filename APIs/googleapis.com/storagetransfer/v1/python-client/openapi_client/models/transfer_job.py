# coding: utf-8

"""
    Storage Transfer API

    Transfers data from external data sources to a Google Cloud Storage bucket or between Google Cloud Storage buckets. 

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.event_stream import EventStream
from openapi_client.models.logging_config import LoggingConfig
from openapi_client.models.notification_config import NotificationConfig
from openapi_client.models.schedule import Schedule
from openapi_client.models.transfer_spec import TransferSpec
from typing import Optional, Set
from typing_extensions import Self

class TransferJob(BaseModel):
    """
    This resource represents the configuration of a transfer job that runs periodically.
    """ # noqa: E501
    creation_time: Optional[StrictStr] = Field(default=None, description="Output only. The time that the transfer job was created.", alias="creationTime")
    deletion_time: Optional[StrictStr] = Field(default=None, description="Output only. The time that the transfer job was deleted.", alias="deletionTime")
    description: Optional[StrictStr] = Field(default=None, description="A description provided by the user for the job. Its max length is 1024 bytes when Unicode-encoded.")
    event_stream: Optional[EventStream] = Field(default=None, alias="eventStream")
    last_modification_time: Optional[StrictStr] = Field(default=None, description="Output only. The time that the transfer job was last modified.", alias="lastModificationTime")
    latest_operation_name: Optional[StrictStr] = Field(default=None, description="The name of the most recently started TransferOperation of this JobConfig. Present if a TransferOperation has been created for this JobConfig.", alias="latestOperationName")
    logging_config: Optional[LoggingConfig] = Field(default=None, alias="loggingConfig")
    name: Optional[StrictStr] = Field(default=None, description="A unique name (within the transfer project) assigned when the job is created. If this field is empty in a CreateTransferJobRequest, Storage Transfer Service assigns a unique name. Otherwise, the specified name is used as the unique name for this job. If the specified name is in use by a job, the creation request fails with an ALREADY_EXISTS error. This name must start with `\"transferJobs/\"` prefix and end with a letter or a number, and should be no more than 128 characters. For transfers involving PosixFilesystem, this name must start with `transferJobs/OPI` specifically. For all other transfer types, this name must not start with `transferJobs/OPI`. Non-PosixFilesystem example: `\"transferJobs/^(?!OPI)[A-Za-z0-9-._~]*[A-Za-z0-9]$\"` PosixFilesystem example: `\"transferJobs/OPI^[A-Za-z0-9-._~]*[A-Za-z0-9]$\"` Applications must not rely on the enforcement of naming requirements involving OPI. Invalid job names fail with an INVALID_ARGUMENT error.")
    notification_config: Optional[NotificationConfig] = Field(default=None, alias="notificationConfig")
    project_id: Optional[StrictStr] = Field(default=None, description="The ID of the Google Cloud project that owns the job.", alias="projectId")
    schedule: Optional[Schedule] = None
    status: Optional[StrictStr] = Field(default=None, description="Status of the job. This value MUST be specified for `CreateTransferJobRequests`. **Note:** The effect of the new job status takes place during a subsequent job run. For example, if you change the job status from ENABLED to DISABLED, and an operation spawned by the transfer is running, the status change would not affect the current operation.")
    transfer_spec: Optional[TransferSpec] = Field(default=None, alias="transferSpec")
    __properties: ClassVar[List[str]] = ["creationTime", "deletionTime", "description", "eventStream", "lastModificationTime", "latestOperationName", "loggingConfig", "name", "notificationConfig", "projectId", "schedule", "status", "transferSpec"]

    @field_validator('status')
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['STATUS_UNSPECIFIED', 'ENABLED', 'DISABLED', 'DELETED']):
            raise ValueError("must be one of enum values ('STATUS_UNSPECIFIED', 'ENABLED', 'DISABLED', 'DELETED')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of TransferJob from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "creation_time",
            "deletion_time",
            "last_modification_time",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of event_stream
        if self.event_stream:
            _dict['eventStream'] = self.event_stream.to_dict()
        # override the default output from pydantic by calling `to_dict()` of logging_config
        if self.logging_config:
            _dict['loggingConfig'] = self.logging_config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of notification_config
        if self.notification_config:
            _dict['notificationConfig'] = self.notification_config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of schedule
        if self.schedule:
            _dict['schedule'] = self.schedule.to_dict()
        # override the default output from pydantic by calling `to_dict()` of transfer_spec
        if self.transfer_spec:
            _dict['transferSpec'] = self.transfer_spec.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of TransferJob from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "creationTime": obj.get("creationTime"),
            "deletionTime": obj.get("deletionTime"),
            "description": obj.get("description"),
            "eventStream": EventStream.from_dict(obj["eventStream"]) if obj.get("eventStream") is not None else None,
            "lastModificationTime": obj.get("lastModificationTime"),
            "latestOperationName": obj.get("latestOperationName"),
            "loggingConfig": LoggingConfig.from_dict(obj["loggingConfig"]) if obj.get("loggingConfig") is not None else None,
            "name": obj.get("name"),
            "notificationConfig": NotificationConfig.from_dict(obj["notificationConfig"]) if obj.get("notificationConfig") is not None else None,
            "projectId": obj.get("projectId"),
            "schedule": Schedule.from_dict(obj["schedule"]) if obj.get("schedule") is not None else None,
            "status": obj.get("status"),
            "transferSpec": TransferSpec.from_dict(obj["transferSpec"]) if obj.get("transferSpec") is not None else None
        })
        return _obj



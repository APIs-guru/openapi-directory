# coding: utf-8

"""
    Storage Transfer API

    Transfers data from external data sources to a Google Cloud Storage bucket or between Google Cloud Storage buckets. 

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.error_summary import ErrorSummary
from openapi_client.models.logging_config import LoggingConfig
from openapi_client.models.notification_config import NotificationConfig
from openapi_client.models.transfer_counters import TransferCounters
from openapi_client.models.transfer_spec import TransferSpec
from typing import Optional, Set
from typing_extensions import Self

class TransferOperation(BaseModel):
    """
    A description of the execution of a transfer.
    """ # noqa: E501
    counters: Optional[TransferCounters] = None
    end_time: Optional[StrictStr] = Field(default=None, description="End time of this transfer execution.", alias="endTime")
    error_breakdowns: Optional[List[ErrorSummary]] = Field(default=None, description="Summarizes errors encountered with sample error log entries.", alias="errorBreakdowns")
    logging_config: Optional[LoggingConfig] = Field(default=None, alias="loggingConfig")
    name: Optional[StrictStr] = Field(default=None, description="A globally unique ID assigned by the system.")
    notification_config: Optional[NotificationConfig] = Field(default=None, alias="notificationConfig")
    project_id: Optional[StrictStr] = Field(default=None, description="The ID of the Google Cloud project that owns the operation.", alias="projectId")
    start_time: Optional[StrictStr] = Field(default=None, description="Start time of this transfer execution.", alias="startTime")
    status: Optional[StrictStr] = Field(default=None, description="Status of the transfer operation.")
    transfer_job_name: Optional[StrictStr] = Field(default=None, description="The name of the transfer job that triggers this transfer operation.", alias="transferJobName")
    transfer_spec: Optional[TransferSpec] = Field(default=None, alias="transferSpec")
    __properties: ClassVar[List[str]] = ["counters", "endTime", "errorBreakdowns", "loggingConfig", "name", "notificationConfig", "projectId", "startTime", "status", "transferJobName", "transferSpec"]

    @field_validator('status')
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['STATUS_UNSPECIFIED', 'IN_PROGRESS', 'PAUSED', 'SUCCESS', 'FAILED', 'ABORTED', 'QUEUED', 'SUSPENDING']):
            raise ValueError("must be one of enum values ('STATUS_UNSPECIFIED', 'IN_PROGRESS', 'PAUSED', 'SUCCESS', 'FAILED', 'ABORTED', 'QUEUED', 'SUSPENDING')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of TransferOperation from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of counters
        if self.counters:
            _dict['counters'] = self.counters.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in error_breakdowns (list)
        _items = []
        if self.error_breakdowns:
            for _item_error_breakdowns in self.error_breakdowns:
                if _item_error_breakdowns:
                    _items.append(_item_error_breakdowns.to_dict())
            _dict['errorBreakdowns'] = _items
        # override the default output from pydantic by calling `to_dict()` of logging_config
        if self.logging_config:
            _dict['loggingConfig'] = self.logging_config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of notification_config
        if self.notification_config:
            _dict['notificationConfig'] = self.notification_config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of transfer_spec
        if self.transfer_spec:
            _dict['transferSpec'] = self.transfer_spec.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of TransferOperation from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "counters": TransferCounters.from_dict(obj["counters"]) if obj.get("counters") is not None else None,
            "endTime": obj.get("endTime"),
            "errorBreakdowns": [ErrorSummary.from_dict(_item) for _item in obj["errorBreakdowns"]] if obj.get("errorBreakdowns") is not None else None,
            "loggingConfig": LoggingConfig.from_dict(obj["loggingConfig"]) if obj.get("loggingConfig") is not None else None,
            "name": obj.get("name"),
            "notificationConfig": NotificationConfig.from_dict(obj["notificationConfig"]) if obj.get("notificationConfig") is not None else None,
            "projectId": obj.get("projectId"),
            "startTime": obj.get("startTime"),
            "status": obj.get("status"),
            "transferJobName": obj.get("transferJobName"),
            "transferSpec": TransferSpec.from_dict(obj["transferSpec"]) if obj.get("transferSpec") is not None else None
        })
        return _obj



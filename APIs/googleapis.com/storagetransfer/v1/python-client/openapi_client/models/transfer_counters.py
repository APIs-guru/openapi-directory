# coding: utf-8

"""
    Storage Transfer API

    Transfers data from external data sources to a Google Cloud Storage bucket or between Google Cloud Storage buckets. 

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class TransferCounters(BaseModel):
    """
    A collection of counters that report the progress of a transfer operation.
    """ # noqa: E501
    bytes_copied_to_sink: Optional[StrictStr] = Field(default=None, description="Bytes that are copied to the data sink.", alias="bytesCopiedToSink")
    bytes_deleted_from_sink: Optional[StrictStr] = Field(default=None, description="Bytes that are deleted from the data sink.", alias="bytesDeletedFromSink")
    bytes_deleted_from_source: Optional[StrictStr] = Field(default=None, description="Bytes that are deleted from the data source.", alias="bytesDeletedFromSource")
    bytes_failed_to_delete_from_sink: Optional[StrictStr] = Field(default=None, description="Bytes that failed to be deleted from the data sink.", alias="bytesFailedToDeleteFromSink")
    bytes_found_from_source: Optional[StrictStr] = Field(default=None, description="Bytes found in the data source that are scheduled to be transferred, excluding any that are filtered based on object conditions or skipped due to sync.", alias="bytesFoundFromSource")
    bytes_found_only_from_sink: Optional[StrictStr] = Field(default=None, description="Bytes found only in the data sink that are scheduled to be deleted.", alias="bytesFoundOnlyFromSink")
    bytes_from_source_failed: Optional[StrictStr] = Field(default=None, description="Bytes in the data source that failed to be transferred or that failed to be deleted after being transferred.", alias="bytesFromSourceFailed")
    bytes_from_source_skipped_by_sync: Optional[StrictStr] = Field(default=None, description="Bytes in the data source that are not transferred because they already exist in the data sink.", alias="bytesFromSourceSkippedBySync")
    directories_failed_to_list_from_source: Optional[StrictStr] = Field(default=None, description="For transfers involving PosixFilesystem only. Number of listing failures for each directory found at the source. Potential failures when listing a directory include permission failure or block failure. If listing a directory fails, no files in the directory are transferred.", alias="directoriesFailedToListFromSource")
    directories_found_from_source: Optional[StrictStr] = Field(default=None, description="For transfers involving PosixFilesystem only. Number of directories found while listing. For example, if the root directory of the transfer is `base/` and there are two other directories, `a/` and `b/` under this directory, the count after listing `base/`, `base/a/` and `base/b/` is 3.", alias="directoriesFoundFromSource")
    directories_successfully_listed_from_source: Optional[StrictStr] = Field(default=None, description="For transfers involving PosixFilesystem only. Number of successful listings for each directory found at the source.", alias="directoriesSuccessfullyListedFromSource")
    intermediate_objects_cleaned_up: Optional[StrictStr] = Field(default=None, description="Number of successfully cleaned up intermediate objects.", alias="intermediateObjectsCleanedUp")
    intermediate_objects_failed_cleaned_up: Optional[StrictStr] = Field(default=None, description="Number of intermediate objects failed cleaned up.", alias="intermediateObjectsFailedCleanedUp")
    objects_copied_to_sink: Optional[StrictStr] = Field(default=None, description="Objects that are copied to the data sink.", alias="objectsCopiedToSink")
    objects_deleted_from_sink: Optional[StrictStr] = Field(default=None, description="Objects that are deleted from the data sink.", alias="objectsDeletedFromSink")
    objects_deleted_from_source: Optional[StrictStr] = Field(default=None, description="Objects that are deleted from the data source.", alias="objectsDeletedFromSource")
    objects_failed_to_delete_from_sink: Optional[StrictStr] = Field(default=None, description="Objects that failed to be deleted from the data sink.", alias="objectsFailedToDeleteFromSink")
    objects_found_from_source: Optional[StrictStr] = Field(default=None, description="Objects found in the data source that are scheduled to be transferred, excluding any that are filtered based on object conditions or skipped due to sync.", alias="objectsFoundFromSource")
    objects_found_only_from_sink: Optional[StrictStr] = Field(default=None, description="Objects found only in the data sink that are scheduled to be deleted.", alias="objectsFoundOnlyFromSink")
    objects_from_source_failed: Optional[StrictStr] = Field(default=None, description="Objects in the data source that failed to be transferred or that failed to be deleted after being transferred.", alias="objectsFromSourceFailed")
    objects_from_source_skipped_by_sync: Optional[StrictStr] = Field(default=None, description="Objects in the data source that are not transferred because they already exist in the data sink.", alias="objectsFromSourceSkippedBySync")
    __properties: ClassVar[List[str]] = ["bytesCopiedToSink", "bytesDeletedFromSink", "bytesDeletedFromSource", "bytesFailedToDeleteFromSink", "bytesFoundFromSource", "bytesFoundOnlyFromSink", "bytesFromSourceFailed", "bytesFromSourceSkippedBySync", "directoriesFailedToListFromSource", "directoriesFoundFromSource", "directoriesSuccessfullyListedFromSource", "intermediateObjectsCleanedUp", "intermediateObjectsFailedCleanedUp", "objectsCopiedToSink", "objectsDeletedFromSink", "objectsDeletedFromSource", "objectsFailedToDeleteFromSink", "objectsFoundFromSource", "objectsFoundOnlyFromSink", "objectsFromSourceFailed", "objectsFromSourceSkippedBySync"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of TransferCounters from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of TransferCounters from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "bytesCopiedToSink": obj.get("bytesCopiedToSink"),
            "bytesDeletedFromSink": obj.get("bytesDeletedFromSink"),
            "bytesDeletedFromSource": obj.get("bytesDeletedFromSource"),
            "bytesFailedToDeleteFromSink": obj.get("bytesFailedToDeleteFromSink"),
            "bytesFoundFromSource": obj.get("bytesFoundFromSource"),
            "bytesFoundOnlyFromSink": obj.get("bytesFoundOnlyFromSink"),
            "bytesFromSourceFailed": obj.get("bytesFromSourceFailed"),
            "bytesFromSourceSkippedBySync": obj.get("bytesFromSourceSkippedBySync"),
            "directoriesFailedToListFromSource": obj.get("directoriesFailedToListFromSource"),
            "directoriesFoundFromSource": obj.get("directoriesFoundFromSource"),
            "directoriesSuccessfullyListedFromSource": obj.get("directoriesSuccessfullyListedFromSource"),
            "intermediateObjectsCleanedUp": obj.get("intermediateObjectsCleanedUp"),
            "intermediateObjectsFailedCleanedUp": obj.get("intermediateObjectsFailedCleanedUp"),
            "objectsCopiedToSink": obj.get("objectsCopiedToSink"),
            "objectsDeletedFromSink": obj.get("objectsDeletedFromSink"),
            "objectsDeletedFromSource": obj.get("objectsDeletedFromSource"),
            "objectsFailedToDeleteFromSink": obj.get("objectsFailedToDeleteFromSink"),
            "objectsFoundFromSource": obj.get("objectsFoundFromSource"),
            "objectsFoundOnlyFromSink": obj.get("objectsFoundOnlyFromSink"),
            "objectsFromSourceFailed": obj.get("objectsFromSourceFailed"),
            "objectsFromSourceSkippedBySync": obj.get("objectsFromSourceSkippedBySync")
        })
        return _obj



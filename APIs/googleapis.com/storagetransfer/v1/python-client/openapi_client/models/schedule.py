# coding: utf-8

"""
    Storage Transfer API

    Transfers data from external data sources to a Google Cloud Storage bucket or between Google Cloud Storage buckets. 

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.model_date import ModelDate
from openapi_client.models.time_of_day import TimeOfDay
from typing import Optional, Set
from typing_extensions import Self

class Schedule(BaseModel):
    """
    Transfers can be scheduled to recur or to run just once.
    """ # noqa: E501
    end_time_of_day: Optional[TimeOfDay] = Field(default=None, alias="endTimeOfDay")
    repeat_interval: Optional[StrictStr] = Field(default=None, description="Interval between the start of each scheduled TransferOperation. If unspecified, the default value is 24 hours. This value may not be less than 1 hour.", alias="repeatInterval")
    schedule_end_date: Optional[ModelDate] = Field(default=None, alias="scheduleEndDate")
    schedule_start_date: Optional[ModelDate] = Field(default=None, alias="scheduleStartDate")
    start_time_of_day: Optional[TimeOfDay] = Field(default=None, alias="startTimeOfDay")
    __properties: ClassVar[List[str]] = ["endTimeOfDay", "repeatInterval", "scheduleEndDate", "scheduleStartDate", "startTimeOfDay"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Schedule from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of end_time_of_day
        if self.end_time_of_day:
            _dict['endTimeOfDay'] = self.end_time_of_day.to_dict()
        # override the default output from pydantic by calling `to_dict()` of schedule_end_date
        if self.schedule_end_date:
            _dict['scheduleEndDate'] = self.schedule_end_date.to_dict()
        # override the default output from pydantic by calling `to_dict()` of schedule_start_date
        if self.schedule_start_date:
            _dict['scheduleStartDate'] = self.schedule_start_date.to_dict()
        # override the default output from pydantic by calling `to_dict()` of start_time_of_day
        if self.start_time_of_day:
            _dict['startTimeOfDay'] = self.start_time_of_day.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Schedule from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "endTimeOfDay": TimeOfDay.from_dict(obj["endTimeOfDay"]) if obj.get("endTimeOfDay") is not None else None,
            "repeatInterval": obj.get("repeatInterval"),
            "scheduleEndDate": ModelDate.from_dict(obj["scheduleEndDate"]) if obj.get("scheduleEndDate") is not None else None,
            "scheduleStartDate": ModelDate.from_dict(obj["scheduleStartDate"]) if obj.get("scheduleStartDate") is not None else None,
            "startTimeOfDay": TimeOfDay.from_dict(obj["startTimeOfDay"]) if obj.get("startTimeOfDay") is not None else None
        })
        return _obj



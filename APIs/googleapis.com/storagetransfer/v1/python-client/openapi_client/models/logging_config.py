# coding: utf-8

"""
    Storage Transfer API

    Transfers data from external data sources to a Google Cloud Storage bucket or between Google Cloud Storage buckets. 

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class LoggingConfig(BaseModel):
    """
    Specifies the logging behavior for transfer operations. For cloud-to-cloud transfers, logs are sent to Cloud Logging. See [Read transfer logs](https://cloud.google.com/storage-transfer/docs/read-transfer-logs) for details. For transfers to or from a POSIX file system, logs are stored in the Cloud Storage bucket that is the source or sink of the transfer. See [Managing Transfer for on-premises jobs] (https://cloud.google.com/storage-transfer/docs/managing-on-prem-jobs#viewing-logs) for details.
    """ # noqa: E501
    enable_onprem_gcs_transfer_logs: Optional[StrictBool] = Field(default=None, description="For transfers with a PosixFilesystem source, this option enables the Cloud Storage transfer logs for this transfer.", alias="enableOnpremGcsTransferLogs")
    log_action_states: Optional[List[StrictStr]] = Field(default=None, description="States in which `log_actions` are logged. If empty, no logs are generated. Not supported for transfers with PosixFilesystem data sources; use enable_onprem_gcs_transfer_logs instead.", alias="logActionStates")
    log_actions: Optional[List[StrictStr]] = Field(default=None, description="Specifies the actions to be logged. If empty, no logs are generated. Not supported for transfers with PosixFilesystem data sources; use enable_onprem_gcs_transfer_logs instead.", alias="logActions")
    __properties: ClassVar[List[str]] = ["enableOnpremGcsTransferLogs", "logActionStates", "logActions"]

    @field_validator('log_action_states')
    def log_action_states_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        for i in value:
            if i not in set(['LOGGABLE_ACTION_STATE_UNSPECIFIED', 'SUCCEEDED', 'FAILED']):
                raise ValueError("each list item must be one of ('LOGGABLE_ACTION_STATE_UNSPECIFIED', 'SUCCEEDED', 'FAILED')")
        return value

    @field_validator('log_actions')
    def log_actions_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        for i in value:
            if i not in set(['LOGGABLE_ACTION_UNSPECIFIED', 'FIND', 'DELETE', 'COPY']):
                raise ValueError("each list item must be one of ('LOGGABLE_ACTION_UNSPECIFIED', 'FIND', 'DELETE', 'COPY')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of LoggingConfig from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of LoggingConfig from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "enableOnpremGcsTransferLogs": obj.get("enableOnpremGcsTransferLogs"),
            "logActionStates": obj.get("logActionStates"),
            "logActions": obj.get("logActions")
        })
        return _obj



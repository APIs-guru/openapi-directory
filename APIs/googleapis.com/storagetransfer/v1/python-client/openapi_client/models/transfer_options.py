# coding: utf-8

"""
    Storage Transfer API

    Transfers data from external data sources to a Google Cloud Storage bucket or between Google Cloud Storage buckets. 

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.metadata_options import MetadataOptions
from typing import Optional, Set
from typing_extensions import Self

class TransferOptions(BaseModel):
    """
    TransferOptions define the actions to be performed on objects in a transfer.
    """ # noqa: E501
    delete_objects_from_source_after_transfer: Optional[StrictBool] = Field(default=None, description="Whether objects should be deleted from the source after they are transferred to the sink. **Note:** This option and delete_objects_unique_in_sink are mutually exclusive.", alias="deleteObjectsFromSourceAfterTransfer")
    delete_objects_unique_in_sink: Optional[StrictBool] = Field(default=None, description="Whether objects that exist only in the sink should be deleted. **Note:** This option and delete_objects_from_source_after_transfer are mutually exclusive.", alias="deleteObjectsUniqueInSink")
    metadata_options: Optional[MetadataOptions] = Field(default=None, alias="metadataOptions")
    overwrite_objects_already_existing_in_sink: Optional[StrictBool] = Field(default=None, description="When to overwrite objects that already exist in the sink. The default is that only objects that are different from the source are ovewritten. If true, all objects in the sink whose name matches an object in the source are overwritten with the source object.", alias="overwriteObjectsAlreadyExistingInSink")
    overwrite_when: Optional[StrictStr] = Field(default=None, description="When to overwrite objects that already exist in the sink. If not set, overwrite behavior is determined by overwrite_objects_already_existing_in_sink.", alias="overwriteWhen")
    __properties: ClassVar[List[str]] = ["deleteObjectsFromSourceAfterTransfer", "deleteObjectsUniqueInSink", "metadataOptions", "overwriteObjectsAlreadyExistingInSink", "overwriteWhen"]

    @field_validator('overwrite_when')
    def overwrite_when_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['OVERWRITE_WHEN_UNSPECIFIED', 'DIFFERENT', 'NEVER', 'ALWAYS']):
            raise ValueError("must be one of enum values ('OVERWRITE_WHEN_UNSPECIFIED', 'DIFFERENT', 'NEVER', 'ALWAYS')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of TransferOptions from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of metadata_options
        if self.metadata_options:
            _dict['metadataOptions'] = self.metadata_options.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of TransferOptions from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "deleteObjectsFromSourceAfterTransfer": obj.get("deleteObjectsFromSourceAfterTransfer"),
            "deleteObjectsUniqueInSink": obj.get("deleteObjectsUniqueInSink"),
            "metadataOptions": MetadataOptions.from_dict(obj["metadataOptions"]) if obj.get("metadataOptions") is not None else None,
            "overwriteObjectsAlreadyExistingInSink": obj.get("overwriteObjectsAlreadyExistingInSink"),
            "overwriteWhen": obj.get("overwriteWhen")
        })
        return _obj



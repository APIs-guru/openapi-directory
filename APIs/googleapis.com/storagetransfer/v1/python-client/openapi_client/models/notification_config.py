# coding: utf-8

"""
    Storage Transfer API

    Transfers data from external data sources to a Google Cloud Storage bucket or between Google Cloud Storage buckets. 

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class NotificationConfig(BaseModel):
    """
    Specification to configure notifications published to Pub/Sub. Notifications are published to the customer-provided topic using the following `PubsubMessage.attributes`: * `\"eventType\"`: one of the EventType values * `\"payloadFormat\"`: one of the PayloadFormat values * `\"projectId\"`: the project_id of the `TransferOperation` * `\"transferJobName\"`: the transfer_job_name of the `TransferOperation` * `\"transferOperationName\"`: the name of the `TransferOperation` The `PubsubMessage.data` contains a TransferOperation resource formatted according to the specified `PayloadFormat`.
    """ # noqa: E501
    event_types: Optional[List[StrictStr]] = Field(default=None, description="Event types for which a notification is desired. If empty, send notifications for all event types.", alias="eventTypes")
    payload_format: Optional[StrictStr] = Field(default=None, description="Required. The desired format of the notification message payloads.", alias="payloadFormat")
    pubsub_topic: Optional[StrictStr] = Field(default=None, description="Required. The `Topic.name` of the Pub/Sub topic to which to publish notifications. Must be of the format: `projects/{project}/topics/{topic}`. Not matching this format results in an INVALID_ARGUMENT error.", alias="pubsubTopic")
    __properties: ClassVar[List[str]] = ["eventTypes", "payloadFormat", "pubsubTopic"]

    @field_validator('event_types')
    def event_types_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        for i in value:
            if i not in set(['EVENT_TYPE_UNSPECIFIED', 'TRANSFER_OPERATION_SUCCESS', 'TRANSFER_OPERATION_FAILED', 'TRANSFER_OPERATION_ABORTED']):
                raise ValueError("each list item must be one of ('EVENT_TYPE_UNSPECIFIED', 'TRANSFER_OPERATION_SUCCESS', 'TRANSFER_OPERATION_FAILED', 'TRANSFER_OPERATION_ABORTED')")
        return value

    @field_validator('payload_format')
    def payload_format_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['PAYLOAD_FORMAT_UNSPECIFIED', 'NONE', 'JSON']):
            raise ValueError("must be one of enum values ('PAYLOAD_FORMAT_UNSPECIFIED', 'NONE', 'JSON')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of NotificationConfig from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of NotificationConfig from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "eventTypes": obj.get("eventTypes"),
            "payloadFormat": obj.get("payloadFormat"),
            "pubsubTopic": obj.get("pubsubTopic")
        })
        return _obj



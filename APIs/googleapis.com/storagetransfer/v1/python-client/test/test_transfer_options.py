# coding: utf-8

"""
    Storage Transfer API

    Transfers data from external data sources to a Google Cloud Storage bucket or between Google Cloud Storage buckets. 

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.transfer_options import TransferOptions

class TestTransferOptions(unittest.TestCase):
    """TransferOptions unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> TransferOptions:
        """Test TransferOptions
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `TransferOptions`
        """
        model = TransferOptions()
        if include_optional:
            return TransferOptions(
                delete_objects_from_source_after_transfer = True,
                delete_objects_unique_in_sink = True,
                metadata_options = openapi_client.models.metadata_options.MetadataOptions(
                    acl = 'ACL_UNSPECIFIED', 
                    gid = 'GID_UNSPECIFIED', 
                    kms_key = 'KMS_KEY_UNSPECIFIED', 
                    mode = 'MODE_UNSPECIFIED', 
                    storage_class = 'STORAGE_CLASS_UNSPECIFIED', 
                    symlink = 'SYMLINK_UNSPECIFIED', 
                    temporary_hold = 'TEMPORARY_HOLD_UNSPECIFIED', 
                    time_created = 'TIME_CREATED_UNSPECIFIED', 
                    uid = 'UID_UNSPECIFIED', ),
                overwrite_objects_already_existing_in_sink = True,
                overwrite_when = 'OVERWRITE_WHEN_UNSPECIFIED'
            )
        else:
            return TransferOptions(
        )
        """

    def testTransferOptions(self):
        """Test TransferOptions"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

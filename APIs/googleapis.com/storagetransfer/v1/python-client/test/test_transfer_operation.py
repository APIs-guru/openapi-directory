# coding: utf-8

"""
    Storage Transfer API

    Transfers data from external data sources to a Google Cloud Storage bucket or between Google Cloud Storage buckets. 

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.transfer_operation import TransferOperation

class TestTransferOperation(unittest.TestCase):
    """TransferOperation unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> TransferOperation:
        """Test TransferOperation
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `TransferOperation`
        """
        model = TransferOperation()
        if include_optional:
            return TransferOperation(
                counters = openapi_client.models.transfer_counters.TransferCounters(
                    bytes_copied_to_sink = '', 
                    bytes_deleted_from_sink = '', 
                    bytes_deleted_from_source = '', 
                    bytes_failed_to_delete_from_sink = '', 
                    bytes_found_from_source = '', 
                    bytes_found_only_from_sink = '', 
                    bytes_from_source_failed = '', 
                    bytes_from_source_skipped_by_sync = '', 
                    directories_failed_to_list_from_source = '', 
                    directories_found_from_source = '', 
                    directories_successfully_listed_from_source = '', 
                    intermediate_objects_cleaned_up = '', 
                    intermediate_objects_failed_cleaned_up = '', 
                    objects_copied_to_sink = '', 
                    objects_deleted_from_sink = '', 
                    objects_deleted_from_source = '', 
                    objects_failed_to_delete_from_sink = '', 
                    objects_found_from_source = '', 
                    objects_found_only_from_sink = '', 
                    objects_from_source_failed = '', 
                    objects_from_source_skipped_by_sync = '', ),
                end_time = '',
                error_breakdowns = [
                    openapi_client.models.error_summary.ErrorSummary(
                        error_code = 'OK', 
                        error_count = '', 
                        error_log_entries = [
                            openapi_client.models.error_log_entry.ErrorLogEntry(
                                error_details = [
                                    ''
                                    ], 
                                url = '', )
                            ], )
                    ],
                logging_config = openapi_client.models.logging_config.LoggingConfig(
                    enable_onprem_gcs_transfer_logs = True, 
                    log_action_states = [
                        'LOGGABLE_ACTION_STATE_UNSPECIFIED'
                        ], 
                    log_actions = [
                        'LOGGABLE_ACTION_UNSPECIFIED'
                        ], ),
                name = '',
                notification_config = openapi_client.models.notification_config.NotificationConfig(
                    event_types = [
                        'EVENT_TYPE_UNSPECIFIED'
                        ], 
                    payload_format = 'PAYLOAD_FORMAT_UNSPECIFIED', 
                    pubsub_topic = '', ),
                project_id = '',
                start_time = '',
                status = 'STATUS_UNSPECIFIED',
                transfer_job_name = '',
                transfer_spec = openapi_client.models.transfer_spec.TransferSpec(
                    aws_s3_compatible_data_source = openapi_client.models.aws_s3_compatible_data.AwsS3CompatibleData(
                        bucket_name = '', 
                        endpoint = '', 
                        path = '', 
                        region = '', 
                        s3_metadata = openapi_client.models.s3_compatible_metadata.S3CompatibleMetadata(
                            auth_method = 'AUTH_METHOD_UNSPECIFIED', 
                            list_api = 'LIST_API_UNSPECIFIED', 
                            protocol = 'NETWORK_PROTOCOL_UNSPECIFIED', 
                            request_model = 'REQUEST_MODEL_UNSPECIFIED', ), ), 
                    aws_s3_data_source = openapi_client.models.aws_s3_data.AwsS3Data(
                        aws_access_key = openapi_client.models.aws_access_key.AwsAccessKey(
                            access_key_id = '', 
                            secret_access_key = '', ), 
                        bucket_name = '', 
                        cloudfront_domain = '', 
                        credentials_secret = '', 
                        path = '', 
                        role_arn = '', ), 
                    azure_blob_storage_data_source = openapi_client.models.azure_blob_storage_data.AzureBlobStorageData(
                        azure_credentials = openapi_client.models.azure_credentials.AzureCredentials(
                            sas_token = '', ), 
                        container = '', 
                        credentials_secret = '', 
                        path = '', 
                        storage_account = '', ), 
                    gcs_data_sink = openapi_client.models.gcs_data.GcsData(
                        bucket_name = '', 
                        managed_folder_transfer_enabled = True, 
                        path = '', ), 
                    gcs_data_source = openapi_client.models.gcs_data.GcsData(
                        bucket_name = '', 
                        managed_folder_transfer_enabled = True, 
                        path = '', ), 
                    gcs_intermediate_data_location = , 
                    hdfs_data_source = openapi_client.models.hdfs_data.HdfsData(
                        path = '', ), 
                    http_data_source = openapi_client.models.http_data.HttpData(
                        list_url = '', ), 
                    object_conditions = openapi_client.models.object_conditions.ObjectConditions(
                        exclude_prefixes = [
                            ''
                            ], 
                        include_prefixes = [
                            ''
                            ], 
                        last_modified_before = '', 
                        last_modified_since = '', 
                        max_time_elapsed_since_last_modification = '', 
                        min_time_elapsed_since_last_modification = '', ), 
                    posix_data_sink = openapi_client.models.posix_filesystem.PosixFilesystem(
                        root_directory = '', ), 
                    posix_data_source = openapi_client.models.posix_filesystem.PosixFilesystem(
                        root_directory = '', ), 
                    sink_agent_pool_name = '', 
                    source_agent_pool_name = '', 
                    transfer_manifest = openapi_client.models.transfer_manifest.TransferManifest(
                        location = '', ), 
                    transfer_options = openapi_client.models.transfer_options.TransferOptions(
                        delete_objects_from_source_after_transfer = True, 
                        delete_objects_unique_in_sink = True, 
                        metadata_options = openapi_client.models.metadata_options.MetadataOptions(
                            acl = 'ACL_UNSPECIFIED', 
                            gid = 'GID_UNSPECIFIED', 
                            kms_key = 'KMS_KEY_UNSPECIFIED', 
                            mode = 'MODE_UNSPECIFIED', 
                            storage_class = 'STORAGE_CLASS_UNSPECIFIED', 
                            symlink = 'SYMLINK_UNSPECIFIED', 
                            temporary_hold = 'TEMPORARY_HOLD_UNSPECIFIED', 
                            time_created = 'TIME_CREATED_UNSPECIFIED', 
                            uid = 'UID_UNSPECIFIED', ), 
                        overwrite_objects_already_existing_in_sink = True, 
                        overwrite_when = 'OVERWRITE_WHEN_UNSPECIFIED', ), )
            )
        else:
            return TransferOperation(
        )
        """

    def testTransferOperation(self):
        """Test TransferOperation"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

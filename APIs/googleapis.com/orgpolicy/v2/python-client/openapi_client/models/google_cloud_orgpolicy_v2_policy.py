# coding: utf-8

"""
    Organization Policy API

    The Organization Policy API allows users to configure governance rules on their Google Cloud resources across the resource hierarchy.

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_cloud_orgpolicy_v2_alternate_policy_spec import GoogleCloudOrgpolicyV2AlternatePolicySpec
from openapi_client.models.google_cloud_orgpolicy_v2_policy_spec import GoogleCloudOrgpolicyV2PolicySpec
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudOrgpolicyV2Policy(BaseModel):
    """
    Defines an organization policy which is used to specify constraints for configurations of Google Cloud resources.
    """ # noqa: E501
    alternate: Optional[GoogleCloudOrgpolicyV2AlternatePolicySpec] = None
    dry_run_spec: Optional[GoogleCloudOrgpolicyV2PolicySpec] = Field(default=None, alias="dryRunSpec")
    etag: Optional[StrictStr] = Field(default=None, description="Optional. An opaque tag indicating the current state of the policy, used for concurrency control. This 'etag' is computed by the server based on the value of other fields, and may be sent on update and delete requests to ensure the client has an up-to-date value before proceeding.")
    name: Optional[StrictStr] = Field(default=None, description="Immutable. The resource name of the policy. Must be one of the following forms, where `constraint_name` is the name of the constraint which this policy configures: * `projects/{project_number}/policies/{constraint_name}` * `folders/{folder_id}/policies/{constraint_name}` * `organizations/{organization_id}/policies/{constraint_name}` For example, `projects/123/policies/compute.disableSerialPortAccess`. Note: `projects/{project_id}/policies/{constraint_name}` is also an acceptable name for API requests, but responses will return the name using the equivalent project number.")
    spec: Optional[GoogleCloudOrgpolicyV2PolicySpec] = None
    __properties: ClassVar[List[str]] = ["alternate", "dryRunSpec", "etag", "name", "spec"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudOrgpolicyV2Policy from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of alternate
        if self.alternate:
            _dict['alternate'] = self.alternate.to_dict()
        # override the default output from pydantic by calling `to_dict()` of dry_run_spec
        if self.dry_run_spec:
            _dict['dryRunSpec'] = self.dry_run_spec.to_dict()
        # override the default output from pydantic by calling `to_dict()` of spec
        if self.spec:
            _dict['spec'] = self.spec.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudOrgpolicyV2Policy from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "alternate": GoogleCloudOrgpolicyV2AlternatePolicySpec.from_dict(obj["alternate"]) if obj.get("alternate") is not None else None,
            "dryRunSpec": GoogleCloudOrgpolicyV2PolicySpec.from_dict(obj["dryRunSpec"]) if obj.get("dryRunSpec") is not None else None,
            "etag": obj.get("etag"),
            "name": obj.get("name"),
            "spec": GoogleCloudOrgpolicyV2PolicySpec.from_dict(obj["spec"]) if obj.get("spec") is not None else None
        })
        return _obj



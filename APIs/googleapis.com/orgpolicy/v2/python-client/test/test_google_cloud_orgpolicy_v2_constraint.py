# coding: utf-8

"""
    Organization Policy API

    The Organization Policy API allows users to configure governance rules on their Google Cloud resources across the resource hierarchy.

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.google_cloud_orgpolicy_v2_constraint import GoogleCloudOrgpolicyV2Constraint

class TestGoogleCloudOrgpolicyV2Constraint(unittest.TestCase):
    """GoogleCloudOrgpolicyV2Constraint unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> GoogleCloudOrgpolicyV2Constraint:
        """Test GoogleCloudOrgpolicyV2Constraint
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `GoogleCloudOrgpolicyV2Constraint`
        """
        model = GoogleCloudOrgpolicyV2Constraint()
        if include_optional:
            return GoogleCloudOrgpolicyV2Constraint(
                boolean_constraint = None,
                constraint_default = 'CONSTRAINT_DEFAULT_UNSPECIFIED',
                description = '',
                display_name = '',
                list_constraint = openapi_client.models.google_cloud_orgpolicy_v2_constraint_list_constraint.GoogleCloudOrgpolicyV2ConstraintListConstraint(
                    supports_in = True, 
                    supports_under = True, ),
                name = '',
                supports_dry_run = True
            )
        else:
            return GoogleCloudOrgpolicyV2Constraint(
        )
        """

    def testGoogleCloudOrgpolicyV2Constraint(self):
        """Test GoogleCloudOrgpolicyV2Constraint"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

# coding: utf-8

"""
    Organization Policy API

    The Organization Policy API allows users to configure governance rules on their Google Cloud resources across the resource hierarchy.

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.google_cloud_orgpolicy_v2_list_policies_response import GoogleCloudOrgpolicyV2ListPoliciesResponse

class TestGoogleCloudOrgpolicyV2ListPoliciesResponse(unittest.TestCase):
    """GoogleCloudOrgpolicyV2ListPoliciesResponse unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> GoogleCloudOrgpolicyV2ListPoliciesResponse:
        """Test GoogleCloudOrgpolicyV2ListPoliciesResponse
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `GoogleCloudOrgpolicyV2ListPoliciesResponse`
        """
        model = GoogleCloudOrgpolicyV2ListPoliciesResponse()
        if include_optional:
            return GoogleCloudOrgpolicyV2ListPoliciesResponse(
                next_page_token = '',
                policies = [
                    openapi_client.models.google_cloud_orgpolicy_v2_policy.GoogleCloudOrgpolicyV2Policy(
                        alternate = openapi_client.models.google_cloud_orgpolicy_v2_alternate_policy_spec.GoogleCloudOrgpolicyV2AlternatePolicySpec(
                            launch = '', 
                            spec = openapi_client.models.google_cloud_orgpolicy_v2_policy_spec.GoogleCloudOrgpolicyV2PolicySpec(
                                etag = '', 
                                inherit_from_parent = True, 
                                reset = True, 
                                rules = [
                                    openapi_client.models.google_cloud_orgpolicy_v2_policy_spec_policy_rule.GoogleCloudOrgpolicyV2PolicySpecPolicyRule(
                                        allow_all = True, 
                                        condition = openapi_client.models.google_type_expr.GoogleTypeExpr(
                                            description = '', 
                                            expression = '', 
                                            location = '', 
                                            title = '', ), 
                                        deny_all = True, 
                                        enforce = True, 
                                        values = openapi_client.models.google_cloud_orgpolicy_v2_policy_spec_policy_rule_string_values.GoogleCloudOrgpolicyV2PolicySpecPolicyRuleStringValues(
                                            allowed_values = [
                                                ''
                                                ], 
                                            denied_values = [
                                                ''
                                                ], ), )
                                    ], 
                                update_time = '', ), ), 
                        dry_run_spec = openapi_client.models.google_cloud_orgpolicy_v2_policy_spec.GoogleCloudOrgpolicyV2PolicySpec(
                            etag = '', 
                            inherit_from_parent = True, 
                            reset = True, 
                            update_time = '', ), 
                        etag = '', 
                        name = '', 
                        spec = , )
                    ]
            )
        else:
            return GoogleCloudOrgpolicyV2ListPoliciesResponse(
        )
        """

    def testGoogleCloudOrgpolicyV2ListPoliciesResponse(self):
        """Test GoogleCloudOrgpolicyV2ListPoliciesResponse"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

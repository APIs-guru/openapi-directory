# coding: utf-8

"""
    Checks API

    The Checks API contains powerful and easy-to-use privacy and compliance APIs that interact with the Checks product and its underlying technology.

    The version of the OpenAPI document: v1alpha
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.google_checks_report_v1alpha_check_data_type_evidence import GoogleChecksReportV1alphaCheckDataTypeEvidence

class TestGoogleChecksReportV1alphaCheckDataTypeEvidence(unittest.TestCase):
    """GoogleChecksReportV1alphaCheckDataTypeEvidence unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> GoogleChecksReportV1alphaCheckDataTypeEvidence:
        """Test GoogleChecksReportV1alphaCheckDataTypeEvidence
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `GoogleChecksReportV1alphaCheckDataTypeEvidence`
        """
        model = GoogleChecksReportV1alphaCheckDataTypeEvidence()
        if include_optional:
            return GoogleChecksReportV1alphaCheckDataTypeEvidence(
                data_type = 'DATA_TYPE_UNSPECIFIED',
                data_type_evidence = openapi_client.models.google_checks_report_v1alpha_data_type_evidence.GoogleChecksReportV1alphaDataTypeEvidence(
                    endpoints = [
                        openapi_client.models.google_checks_report_v1alpha_data_type_endpoint_evidence.GoogleChecksReportV1alphaDataTypeEndpointEvidence(
                            attributed_sdks = [
                                openapi_client.models.google_checks_report_v1alpha_data_type_endpoint_evidence_attributed_sdk.GoogleChecksReportV1alphaDataTypeEndpointEvidenceAttributedSdk(
                                    sdk = openapi_client.models.google_checks_report_v1alpha_sdk.GoogleChecksReportV1alphaSdk(
                                        id = '', ), )
                                ], 
                            endpoint_details = [
                                openapi_client.models.google_checks_report_v1alpha_data_type_endpoint_evidence_endpoint_details.GoogleChecksReportV1alphaDataTypeEndpointEvidenceEndpointDetails(
                                    endpoint = openapi_client.models.google_checks_report_v1alpha_endpoint.GoogleChecksReportV1alphaEndpoint(
                                        domain = '', ), )
                                ], 
                            exfiltrated_data_type = 'EXFILTRATED_DATA_TYPE_UNSPECIFIED', )
                        ], 
                    permissions = [
                        openapi_client.models.google_checks_report_v1alpha_data_type_permission_evidence.GoogleChecksReportV1alphaDataTypePermissionEvidence(
                            permission = openapi_client.models.google_checks_report_v1alpha_permission.GoogleChecksReportV1alphaPermission(
                                id = '', ), )
                        ], 
                    privacy_policy_texts = [
                        openapi_client.models.google_checks_report_v1alpha_data_type_privacy_policy_text_evidence.GoogleChecksReportV1alphaDataTypePrivacyPolicyTextEvidence(
                            policy_fragment = openapi_client.models.google_checks_report_v1alpha_policy_fragment.GoogleChecksReportV1alphaPolicyFragment(
                                html_content = '', 
                                source_uri = '', ), )
                        ], )
            )
        else:
            return GoogleChecksReportV1alphaCheckDataTypeEvidence(
        )
        """

    def testGoogleChecksReportV1alphaCheckDataTypeEvidence(self):
        """Test GoogleChecksReportV1alphaCheckDataTypeEvidence"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

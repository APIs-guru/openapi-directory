# coding: utf-8

"""
    Checks API

    The Checks API contains powerful and easy-to-use privacy and compliance APIs that interact with the Checks product and its underlying technology.

    The version of the OpenAPI document: v1alpha
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_checks_report_v1alpha_data_type_evidence import GoogleChecksReportV1alphaDataTypeEvidence
from typing import Optional, Set
from typing_extensions import Self

class GoogleChecksReportV1alphaCheckDataTypeEvidence(BaseModel):
    """
    Evidence concerning a data type that was found in your app.
    """ # noqa: E501
    data_type: Optional[StrictStr] = Field(default=None, description="The data type that was found in your app.", alias="dataType")
    data_type_evidence: Optional[GoogleChecksReportV1alphaDataTypeEvidence] = Field(default=None, alias="dataTypeEvidence")
    __properties: ClassVar[List[str]] = ["dataType", "dataTypeEvidence"]

    @field_validator('data_type')
    def data_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['DATA_TYPE_UNSPECIFIED', 'DATA_TYPE_APPROXIMATE_LOCATION', 'DATA_TYPE_PRECISE_LOCATION', 'DATA_TYPE_PERSONAL_NAME', 'DATA_TYPE_EMAIL_ADDRESS', 'DATA_TYPE_USER_IDS', 'DATA_TYPE_PHYSICAL_ADDRESS', 'DATA_TYPE_PHONE_NUMBER', 'DATA_TYPE_RACE_AND_ETHNICITY', 'DATA_TYPE_POLITICAL_OR_RELIGIOUS_BELIEFS', 'DATA_TYPE_SEXUAL_ORIENTATION', 'DATA_TYPE_OTHER_PERSONAL_INFO', 'DATA_TYPE_PAYMENT_INFO', 'DATA_TYPE_PURCHASE_HISTORY', 'DATA_TYPE_CREDIT_SCORE', 'DATA_TYPE_OTHER_FINANCIAL_INFO', 'DATA_TYPE_HEALTH_INFO', 'DATA_TYPE_FITNESS_INFO', 'DATA_TYPE_EMAILS', 'DATA_TYPE_TEXT_MESSAGES', 'DATA_TYPE_PHOTOS', 'DATA_TYPE_VIDEOS', 'DATA_TYPE_VOICE_OR_SOUND_RECORDINGS', 'DATA_TYPE_MUSIC_FILES', 'DATA_TYPE_OTHER_AUDIO_FILES', 'DATA_TYPE_FILES_AND_DOCS', 'DATA_TYPE_CALENDAR_EVENTS', 'DATA_TYPE_CONTACTS', 'DATA_TYPE_APP_INTERACTIONS', 'DATA_TYPE_IN_APP_SEARCH_HISTORY', 'DATA_TYPE_INSTALLED_APPS', 'DATA_TYPE_OTHER_USER_GENERATED_CONTENT', 'DATA_TYPE_OTHER_ACTIONS', 'DATA_TYPE_WEB_BROWSING_HISTORY', 'DATA_TYPE_CRASH_LOGS', 'DATA_TYPE_PERFORMANCE_DIAGNOSTICS', 'DATA_TYPE_OTHER_APP_PERFORMANCE_DATA', 'DATA_TYPE_DEVICE_OR_OTHER_IDS']):
            raise ValueError("must be one of enum values ('DATA_TYPE_UNSPECIFIED', 'DATA_TYPE_APPROXIMATE_LOCATION', 'DATA_TYPE_PRECISE_LOCATION', 'DATA_TYPE_PERSONAL_NAME', 'DATA_TYPE_EMAIL_ADDRESS', 'DATA_TYPE_USER_IDS', 'DATA_TYPE_PHYSICAL_ADDRESS', 'DATA_TYPE_PHONE_NUMBER', 'DATA_TYPE_RACE_AND_ETHNICITY', 'DATA_TYPE_POLITICAL_OR_RELIGIOUS_BELIEFS', 'DATA_TYPE_SEXUAL_ORIENTATION', 'DATA_TYPE_OTHER_PERSONAL_INFO', 'DATA_TYPE_PAYMENT_INFO', 'DATA_TYPE_PURCHASE_HISTORY', 'DATA_TYPE_CREDIT_SCORE', 'DATA_TYPE_OTHER_FINANCIAL_INFO', 'DATA_TYPE_HEALTH_INFO', 'DATA_TYPE_FITNESS_INFO', 'DATA_TYPE_EMAILS', 'DATA_TYPE_TEXT_MESSAGES', 'DATA_TYPE_PHOTOS', 'DATA_TYPE_VIDEOS', 'DATA_TYPE_VOICE_OR_SOUND_RECORDINGS', 'DATA_TYPE_MUSIC_FILES', 'DATA_TYPE_OTHER_AUDIO_FILES', 'DATA_TYPE_FILES_AND_DOCS', 'DATA_TYPE_CALENDAR_EVENTS', 'DATA_TYPE_CONTACTS', 'DATA_TYPE_APP_INTERACTIONS', 'DATA_TYPE_IN_APP_SEARCH_HISTORY', 'DATA_TYPE_INSTALLED_APPS', 'DATA_TYPE_OTHER_USER_GENERATED_CONTENT', 'DATA_TYPE_OTHER_ACTIONS', 'DATA_TYPE_WEB_BROWSING_HISTORY', 'DATA_TYPE_CRASH_LOGS', 'DATA_TYPE_PERFORMANCE_DIAGNOSTICS', 'DATA_TYPE_OTHER_APP_PERFORMANCE_DATA', 'DATA_TYPE_DEVICE_OR_OTHER_IDS')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleChecksReportV1alphaCheckDataTypeEvidence from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of data_type_evidence
        if self.data_type_evidence:
            _dict['dataTypeEvidence'] = self.data_type_evidence.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleChecksReportV1alphaCheckDataTypeEvidence from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "dataType": obj.get("dataType"),
            "dataTypeEvidence": GoogleChecksReportV1alphaDataTypeEvidence.from_dict(obj["dataTypeEvidence"]) if obj.get("dataTypeEvidence") is not None else None
        })
        return _obj



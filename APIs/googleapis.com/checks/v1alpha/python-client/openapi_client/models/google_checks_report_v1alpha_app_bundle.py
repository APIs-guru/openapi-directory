# coding: utf-8

"""
    Checks API

    The Checks API contains powerful and easy-to-use privacy and compliance APIs that interact with the Checks product and its underlying technology.

    The version of the OpenAPI document: v1alpha
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class GoogleChecksReportV1alphaAppBundle(BaseModel):
    """
    Information about the analyzed app bundle.
    """ # noqa: E501
    bundle_id: Optional[StrictStr] = Field(default=None, description="Unique id of the bundle. For example: \"com.google.Gmail\".", alias="bundleId")
    code_reference_id: Optional[StrictStr] = Field(default=None, description="Git commit hash or changelist number associated with the release.", alias="codeReferenceId")
    release_type: Optional[StrictStr] = Field(default=None, description="Identifies the type of release.", alias="releaseType")
    version: Optional[StrictStr] = Field(default=None, description="The user-visible version of the bundle such as the Android `versionName` or iOS `CFBundleShortVersionString`. For example: \"7.21.1\".")
    version_id: Optional[StrictStr] = Field(default=None, description="The version used throughout the operating system and store to identify the build such as the Android `versionCode` or iOS `CFBundleVersion`.", alias="versionId")
    __properties: ClassVar[List[str]] = ["bundleId", "codeReferenceId", "releaseType", "version", "versionId"]

    @field_validator('release_type')
    def release_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['APP_BUNDLE_RELEASE_TYPE_UNSPECIFIED', 'PUBLIC', 'PRE_RELEASE']):
            raise ValueError("must be one of enum values ('APP_BUNDLE_RELEASE_TYPE_UNSPECIFIED', 'PUBLIC', 'PRE_RELEASE')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleChecksReportV1alphaAppBundle from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleChecksReportV1alphaAppBundle from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "bundleId": obj.get("bundleId"),
            "codeReferenceId": obj.get("codeReferenceId"),
            "releaseType": obj.get("releaseType"),
            "version": obj.get("version"),
            "versionId": obj.get("versionId")
        })
        return _obj



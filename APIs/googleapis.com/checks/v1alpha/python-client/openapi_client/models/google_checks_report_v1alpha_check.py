# coding: utf-8

"""
    Checks API

    The Checks API contains powerful and easy-to-use privacy and compliance APIs that interact with the Checks product and its underlying technology.

    The version of the OpenAPI document: v1alpha
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_checks_report_v1alpha_check_citation import GoogleChecksReportV1alphaCheckCitation
from openapi_client.models.google_checks_report_v1alpha_check_evidence import GoogleChecksReportV1alphaCheckEvidence
from openapi_client.models.google_checks_report_v1alpha_check_state_metadata import GoogleChecksReportV1alphaCheckStateMetadata
from typing import Optional, Set
from typing_extensions import Self

class GoogleChecksReportV1alphaCheck(BaseModel):
    """
    A check that was run on your app.
    """ # noqa: E501
    citations: Optional[List[GoogleChecksReportV1alphaCheckCitation]] = Field(default=None, description="Regulations and policies that serve as the legal basis for the check.")
    evidence: Optional[GoogleChecksReportV1alphaCheckEvidence] = None
    region_codes: Optional[List[StrictStr]] = Field(default=None, description="Regions that are impacted by the check. For more info, see https://google.aip.dev/143#countries-and-regions.", alias="regionCodes")
    severity: Optional[StrictStr] = Field(default=None, description="The urgency or risk level of the check.")
    state: Optional[StrictStr] = Field(default=None, description="The result after running the check.")
    state_metadata: Optional[GoogleChecksReportV1alphaCheckStateMetadata] = Field(default=None, alias="stateMetadata")
    type: Optional[StrictStr] = Field(default=None, description="The type of check that was run. A type will only appear once in a report's list of checks.")
    __properties: ClassVar[List[str]] = ["citations", "evidence", "regionCodes", "severity", "state", "stateMetadata", "type"]

    @field_validator('severity')
    def severity_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['CHECK_SEVERITY_UNSPECIFIED', 'PRIORITY', 'POTENTIAL', 'OPPORTUNITY']):
            raise ValueError("must be one of enum values ('CHECK_SEVERITY_UNSPECIFIED', 'PRIORITY', 'POTENTIAL', 'OPPORTUNITY')")
        return value

    @field_validator('state')
    def state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['CHECK_STATE_UNSPECIFIED', 'PASSED', 'FAILED', 'UNCHECKED']):
            raise ValueError("must be one of enum values ('CHECK_STATE_UNSPECIFIED', 'PASSED', 'FAILED', 'UNCHECKED')")
        return value

    @field_validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['CHECK_TYPE_UNSPECIFIED', 'STORE_LISTING_PRIVACY_POLICY_LINK_PRESENT', 'PRIVACY_POLICY_UPDATE_DATE_RECENT', 'PRIVACY_POLICY_GDPR_GENERAL_RULES', 'PRIVACY_POLICY_CCPA_GENERAL_RULES', 'PRIVACY_POLICY_COLLECTION_CATEGORIES_DATA_NOTICE', 'PRIVACY_POLICY_PROCESSING_PURPOSE_DATA_NOTICE', 'PRIVACY_POLICY_SHARING_CATEGORIES_DATA_NOTICE', 'PRIVACY_POLICY_DATA_RETENTION_NOTICE', 'PRIVACY_POLICY_CONTACT_DETAILS_NOTICE', 'PRIVACY_POLICY_CHILDREN_GENERAL_RULES', 'PRIVACY_POLICY_DATA_TYPE_PHONE_NUMBER', 'PRIVACY_POLICY_DATA_TYPE_USER_ACCOUNT_INFO', 'PRIVACY_POLICY_DATA_TYPE_PRECISE_LOCATION', 'PRIVACY_POLICY_DATA_TYPE_DEVICE_ID', 'PRIVACY_POLICY_DATA_TYPE_APPS_ON_DEVICE', 'PRIVACY_POLICY_DATA_TYPE_CONTACTS', 'PRIVACY_POLICY_DATA_TYPE_TEXT_MESSAGES', 'PRIVACY_POLICY_DATA_TYPE_PII', 'PRIVACY_POLICY_DATA_TYPE_PII_CATEGORIES', 'PRIVACY_POLICY_DATA_TYPE_HEALTH_AND_BIOMETRIC', 'PRIVACY_POLICY_BRAZIL_LGPD_GENERAL_RULES', 'PRIVACY_POLICY_VIRGINIA_VCDPA_GENERAL_RULES', 'PRIVACY_POLICY_AFFILIATION_MENTION', 'PRIVACY_POLICY_RIGHT_TO_DELETE_NOTICE', 'PRIVACY_POLICY_RIGHT_TO_ACCESS_NOTICE', 'PRIVACY_POLICY_RIGHT_TO_RECTIFICATION_NOTICE', 'PRIVACY_POLICY_RIGHT_TO_KNOW_ABOUT_SELLING_NOTICE', 'PRIVACY_POLICY_RIGHT_TO_KNOW_ABOUT_SHARING_NOTICE', 'PRIVACY_POLICY_RIGHT_TO_OPT_OUT_FROM_SELLING_NOTICE', 'PRIVACY_POLICY_METHOD_TO_OPT_OUT_FROM_SELLING_OR_SHARING_NOTICE', 'PRIVACY_POLICY_DATA_CONTROLLER_IDENTITY', 'PRIVACY_POLICY_DPO_CONTACT_DETAILS', 'PRIVACY_POLICY_RIGHT_TO_LODGE_A_COMPLAINT', 'PRIVACY_POLICY_LEGAL_BASIS', 'PRIVACY_POLICY_CHILDREN_INFO_COLLECTION', 'PRIVACY_POLICY_CHILDREN_INFO_USAGE_PURPOSES', 'PRIVACY_POLICY_CHILDREN_INFO_DISCLOSURE_PRACTICES', 'PRIVACY_POLICY_CHILDREN_INFO_PUBLICITY', 'PRIVACY_POLICY_PARENTS_METHOD_OF_INFO_DELETION', 'PRIVACY_POLICY_PARENTS_METHOD_TO_INFO_REVIEW', 'PRIVACY_POLICY_PARENTS_METHOD_TO_STOP_FURTHER_INFO_COLLECTION_USE', 'PRIVACY_POLICY_PARENTS_RIGHT_TO_INFO_DELETION', 'PRIVACY_POLICY_PARENTS_RIGHT_TO_INFO_REVIEW', 'PRIVACY_POLICY_PARENTS_RIGHT_TO_STOP_FURTHER_INFO_COLLECTION_USE', 'PRIVACY_POLICY_PSL_APPROXIMATE_LOCATION', 'PRIVACY_POLICY_PSL_PRECISE_LOCATION', 'PRIVACY_POLICY_PSL_NAME', 'PRIVACY_POLICY_PSL_EMAIL_ADDRESS', 'PRIVACY_POLICY_PSL_USER_IDENTIFIERS', 'PRIVACY_POLICY_PSL_ADDRESS', 'PRIVACY_POLICY_PSL_PHONE_NUMBER', 'PRIVACY_POLICY_PSL_RACE_AND_ETHNICITY', 'PRIVACY_POLICY_PSL_CREDIT_SCORE', 'PRIVACY_POLICY_PSL_PURCHASE_HISTORY', 'PRIVACY_POLICY_PSL_HEALTH_INFO', 'PRIVACY_POLICY_PSL_FITNESS_INFO', 'PRIVACY_POLICY_PSL_EMAIL_MESSAGES', 'PRIVACY_POLICY_PSL_TEXT_MESSAGES', 'PRIVACY_POLICY_PSL_PHOTOS', 'PRIVACY_POLICY_PSL_VIDEOS', 'PRIVACY_POLICY_PSL_MUSIC_FILES', 'PRIVACY_POLICY_PSL_VOICE_OR_SOUND_RECORDINGS', 'PRIVACY_POLICY_PSL_FILES_AND_DOCS', 'PRIVACY_POLICY_PSL_CALENDAR_EVENTS', 'PRIVACY_POLICY_PSL_CONTACTS', 'PRIVACY_POLICY_PSL_APP_INTERACTIONS', 'PRIVACY_POLICY_PSL_IN_APP_SEARCH_HISTORY', 'PRIVACY_POLICY_PSL_WEB_BROWSING_HISTORY', 'PRIVACY_POLICY_PSL_INSTALLED_APPS', 'PRIVACY_POLICY_PSL_CRASH_LOGS', 'PRIVACY_POLICY_PSL_DIAGNOSTICS', 'PRIVACY_POLICY_PSL_DEVICE_OR_OTHER_IDS', 'DATA_MONITORING_NEW_ENDPOINT', 'DATA_MONITORING_NEW_PERMISSION', 'DATA_MONITORING_NEW_DATA_TYPE', 'DATA_MONITORING_NEW_SDK', 'DATA_MONITORING_ENCRYPTION', 'DATA_MONITORING_NEW_DATA_TYPE_VERSION_DIFF', 'DATA_MONITORING_NEW_ENDPOINT_VERSION_DIFF', 'DATA_MONITORING_NEW_PERMISSION_VERSION_DIFF', 'DATA_MONITORING_NEW_SDK_VERSION_DIFF', 'DATA_MONITORING_SDKS_DENYLIST_VIOLATION', 'DATA_MONITORING_PERMISSIONS_DENYLIST_VIOLATION', 'DATA_MONITORING_ENDPOINTS_DENYLIST_VIOLATION', 'DATA_MONITORING_OUTDATED_SDK_VERSION', 'DATA_MONITORING_CRITICAL_SDK_ISSUE']):
            raise ValueError("must be one of enum values ('CHECK_TYPE_UNSPECIFIED', 'STORE_LISTING_PRIVACY_POLICY_LINK_PRESENT', 'PRIVACY_POLICY_UPDATE_DATE_RECENT', 'PRIVACY_POLICY_GDPR_GENERAL_RULES', 'PRIVACY_POLICY_CCPA_GENERAL_RULES', 'PRIVACY_POLICY_COLLECTION_CATEGORIES_DATA_NOTICE', 'PRIVACY_POLICY_PROCESSING_PURPOSE_DATA_NOTICE', 'PRIVACY_POLICY_SHARING_CATEGORIES_DATA_NOTICE', 'PRIVACY_POLICY_DATA_RETENTION_NOTICE', 'PRIVACY_POLICY_CONTACT_DETAILS_NOTICE', 'PRIVACY_POLICY_CHILDREN_GENERAL_RULES', 'PRIVACY_POLICY_DATA_TYPE_PHONE_NUMBER', 'PRIVACY_POLICY_DATA_TYPE_USER_ACCOUNT_INFO', 'PRIVACY_POLICY_DATA_TYPE_PRECISE_LOCATION', 'PRIVACY_POLICY_DATA_TYPE_DEVICE_ID', 'PRIVACY_POLICY_DATA_TYPE_APPS_ON_DEVICE', 'PRIVACY_POLICY_DATA_TYPE_CONTACTS', 'PRIVACY_POLICY_DATA_TYPE_TEXT_MESSAGES', 'PRIVACY_POLICY_DATA_TYPE_PII', 'PRIVACY_POLICY_DATA_TYPE_PII_CATEGORIES', 'PRIVACY_POLICY_DATA_TYPE_HEALTH_AND_BIOMETRIC', 'PRIVACY_POLICY_BRAZIL_LGPD_GENERAL_RULES', 'PRIVACY_POLICY_VIRGINIA_VCDPA_GENERAL_RULES', 'PRIVACY_POLICY_AFFILIATION_MENTION', 'PRIVACY_POLICY_RIGHT_TO_DELETE_NOTICE', 'PRIVACY_POLICY_RIGHT_TO_ACCESS_NOTICE', 'PRIVACY_POLICY_RIGHT_TO_RECTIFICATION_NOTICE', 'PRIVACY_POLICY_RIGHT_TO_KNOW_ABOUT_SELLING_NOTICE', 'PRIVACY_POLICY_RIGHT_TO_KNOW_ABOUT_SHARING_NOTICE', 'PRIVACY_POLICY_RIGHT_TO_OPT_OUT_FROM_SELLING_NOTICE', 'PRIVACY_POLICY_METHOD_TO_OPT_OUT_FROM_SELLING_OR_SHARING_NOTICE', 'PRIVACY_POLICY_DATA_CONTROLLER_IDENTITY', 'PRIVACY_POLICY_DPO_CONTACT_DETAILS', 'PRIVACY_POLICY_RIGHT_TO_LODGE_A_COMPLAINT', 'PRIVACY_POLICY_LEGAL_BASIS', 'PRIVACY_POLICY_CHILDREN_INFO_COLLECTION', 'PRIVACY_POLICY_CHILDREN_INFO_USAGE_PURPOSES', 'PRIVACY_POLICY_CHILDREN_INFO_DISCLOSURE_PRACTICES', 'PRIVACY_POLICY_CHILDREN_INFO_PUBLICITY', 'PRIVACY_POLICY_PARENTS_METHOD_OF_INFO_DELETION', 'PRIVACY_POLICY_PARENTS_METHOD_TO_INFO_REVIEW', 'PRIVACY_POLICY_PARENTS_METHOD_TO_STOP_FURTHER_INFO_COLLECTION_USE', 'PRIVACY_POLICY_PARENTS_RIGHT_TO_INFO_DELETION', 'PRIVACY_POLICY_PARENTS_RIGHT_TO_INFO_REVIEW', 'PRIVACY_POLICY_PARENTS_RIGHT_TO_STOP_FURTHER_INFO_COLLECTION_USE', 'PRIVACY_POLICY_PSL_APPROXIMATE_LOCATION', 'PRIVACY_POLICY_PSL_PRECISE_LOCATION', 'PRIVACY_POLICY_PSL_NAME', 'PRIVACY_POLICY_PSL_EMAIL_ADDRESS', 'PRIVACY_POLICY_PSL_USER_IDENTIFIERS', 'PRIVACY_POLICY_PSL_ADDRESS', 'PRIVACY_POLICY_PSL_PHONE_NUMBER', 'PRIVACY_POLICY_PSL_RACE_AND_ETHNICITY', 'PRIVACY_POLICY_PSL_CREDIT_SCORE', 'PRIVACY_POLICY_PSL_PURCHASE_HISTORY', 'PRIVACY_POLICY_PSL_HEALTH_INFO', 'PRIVACY_POLICY_PSL_FITNESS_INFO', 'PRIVACY_POLICY_PSL_EMAIL_MESSAGES', 'PRIVACY_POLICY_PSL_TEXT_MESSAGES', 'PRIVACY_POLICY_PSL_PHOTOS', 'PRIVACY_POLICY_PSL_VIDEOS', 'PRIVACY_POLICY_PSL_MUSIC_FILES', 'PRIVACY_POLICY_PSL_VOICE_OR_SOUND_RECORDINGS', 'PRIVACY_POLICY_PSL_FILES_AND_DOCS', 'PRIVACY_POLICY_PSL_CALENDAR_EVENTS', 'PRIVACY_POLICY_PSL_CONTACTS', 'PRIVACY_POLICY_PSL_APP_INTERACTIONS', 'PRIVACY_POLICY_PSL_IN_APP_SEARCH_HISTORY', 'PRIVACY_POLICY_PSL_WEB_BROWSING_HISTORY', 'PRIVACY_POLICY_PSL_INSTALLED_APPS', 'PRIVACY_POLICY_PSL_CRASH_LOGS', 'PRIVACY_POLICY_PSL_DIAGNOSTICS', 'PRIVACY_POLICY_PSL_DEVICE_OR_OTHER_IDS', 'DATA_MONITORING_NEW_ENDPOINT', 'DATA_MONITORING_NEW_PERMISSION', 'DATA_MONITORING_NEW_DATA_TYPE', 'DATA_MONITORING_NEW_SDK', 'DATA_MONITORING_ENCRYPTION', 'DATA_MONITORING_NEW_DATA_TYPE_VERSION_DIFF', 'DATA_MONITORING_NEW_ENDPOINT_VERSION_DIFF', 'DATA_MONITORING_NEW_PERMISSION_VERSION_DIFF', 'DATA_MONITORING_NEW_SDK_VERSION_DIFF', 'DATA_MONITORING_SDKS_DENYLIST_VIOLATION', 'DATA_MONITORING_PERMISSIONS_DENYLIST_VIOLATION', 'DATA_MONITORING_ENDPOINTS_DENYLIST_VIOLATION', 'DATA_MONITORING_OUTDATED_SDK_VERSION', 'DATA_MONITORING_CRITICAL_SDK_ISSUE')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleChecksReportV1alphaCheck from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in citations (list)
        _items = []
        if self.citations:
            for _item_citations in self.citations:
                if _item_citations:
                    _items.append(_item_citations.to_dict())
            _dict['citations'] = _items
        # override the default output from pydantic by calling `to_dict()` of evidence
        if self.evidence:
            _dict['evidence'] = self.evidence.to_dict()
        # override the default output from pydantic by calling `to_dict()` of state_metadata
        if self.state_metadata:
            _dict['stateMetadata'] = self.state_metadata.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleChecksReportV1alphaCheck from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "citations": [GoogleChecksReportV1alphaCheckCitation.from_dict(_item) for _item in obj["citations"]] if obj.get("citations") is not None else None,
            "evidence": GoogleChecksReportV1alphaCheckEvidence.from_dict(obj["evidence"]) if obj.get("evidence") is not None else None,
            "regionCodes": obj.get("regionCodes"),
            "severity": obj.get("severity"),
            "state": obj.get("state"),
            "stateMetadata": GoogleChecksReportV1alphaCheckStateMetadata.from_dict(obj["stateMetadata"]) if obj.get("stateMetadata") is not None else None,
            "type": obj.get("type")
        })
        return _obj



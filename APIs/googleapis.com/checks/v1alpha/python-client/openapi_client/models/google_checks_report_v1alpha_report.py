# coding: utf-8

"""
    Checks API

    The Checks API contains powerful and easy-to-use privacy and compliance APIs that interact with the Checks product and its underlying technology.

    The version of the OpenAPI document: v1alpha
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_checks_report_v1alpha_app_bundle import GoogleChecksReportV1alphaAppBundle
from openapi_client.models.google_checks_report_v1alpha_check import GoogleChecksReportV1alphaCheck
from openapi_client.models.google_checks_report_v1alpha_data_monitoring import GoogleChecksReportV1alphaDataMonitoring
from typing import Optional, Set
from typing_extensions import Self

class GoogleChecksReportV1alphaReport(BaseModel):
    """
    Privacy report.
    """ # noqa: E501
    app_bundle: Optional[GoogleChecksReportV1alphaAppBundle] = Field(default=None, alias="appBundle")
    checks: Optional[List[GoogleChecksReportV1alphaCheck]] = Field(default=None, description="List of checks that were run on the app bundle.")
    data_monitoring: Optional[GoogleChecksReportV1alphaDataMonitoring] = Field(default=None, alias="dataMonitoring")
    name: Optional[StrictStr] = Field(default=None, description="Resource name of the report.")
    results_uri: Optional[StrictStr] = Field(default=None, description="A URL to view results.", alias="resultsUri")
    __properties: ClassVar[List[str]] = ["appBundle", "checks", "dataMonitoring", "name", "resultsUri"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleChecksReportV1alphaReport from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of app_bundle
        if self.app_bundle:
            _dict['appBundle'] = self.app_bundle.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in checks (list)
        _items = []
        if self.checks:
            for _item_checks in self.checks:
                if _item_checks:
                    _items.append(_item_checks.to_dict())
            _dict['checks'] = _items
        # override the default output from pydantic by calling `to_dict()` of data_monitoring
        if self.data_monitoring:
            _dict['dataMonitoring'] = self.data_monitoring.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleChecksReportV1alphaReport from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "appBundle": GoogleChecksReportV1alphaAppBundle.from_dict(obj["appBundle"]) if obj.get("appBundle") is not None else None,
            "checks": [GoogleChecksReportV1alphaCheck.from_dict(_item) for _item in obj["checks"]] if obj.get("checks") is not None else None,
            "dataMonitoring": GoogleChecksReportV1alphaDataMonitoring.from_dict(obj["dataMonitoring"]) if obj.get("dataMonitoring") is not None else None,
            "name": obj.get("name"),
            "resultsUri": obj.get("resultsUri")
        })
        return _obj



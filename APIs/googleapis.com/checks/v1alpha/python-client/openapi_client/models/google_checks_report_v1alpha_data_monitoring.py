# coding: utf-8

"""
    Checks API

    The Checks API contains powerful and easy-to-use privacy and compliance APIs that interact with the Checks product and its underlying technology.

    The version of the OpenAPI document: v1alpha
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_checks_report_v1alpha_data_monitoring_data_type_result import GoogleChecksReportV1alphaDataMonitoringDataTypeResult
from openapi_client.models.google_checks_report_v1alpha_data_monitoring_endpoint_result import GoogleChecksReportV1alphaDataMonitoringEndpointResult
from openapi_client.models.google_checks_report_v1alpha_data_monitoring_permission_result import GoogleChecksReportV1alphaDataMonitoringPermissionResult
from openapi_client.models.google_checks_report_v1alpha_data_monitoring_sdk_result import GoogleChecksReportV1alphaDataMonitoringSdkResult
from typing import Optional, Set
from typing_extensions import Self

class GoogleChecksReportV1alphaDataMonitoring(BaseModel):
    """
    Represents the data monitoring section of the report.
    """ # noqa: E501
    data_types: Optional[List[GoogleChecksReportV1alphaDataMonitoringDataTypeResult]] = Field(default=None, description="Data types that your app shares or collects.", alias="dataTypes")
    endpoints: Optional[List[GoogleChecksReportV1alphaDataMonitoringEndpointResult]] = Field(default=None, description="Endpoints that were found by dynamic analysis of your app.")
    permissions: Optional[List[GoogleChecksReportV1alphaDataMonitoringPermissionResult]] = Field(default=None, description="Permissions that your app uses.")
    sdks: Optional[List[GoogleChecksReportV1alphaDataMonitoringSdkResult]] = Field(default=None, description="SDKs that your app uses.")
    __properties: ClassVar[List[str]] = ["dataTypes", "endpoints", "permissions", "sdks"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleChecksReportV1alphaDataMonitoring from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in data_types (list)
        _items = []
        if self.data_types:
            for _item_data_types in self.data_types:
                if _item_data_types:
                    _items.append(_item_data_types.to_dict())
            _dict['dataTypes'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in endpoints (list)
        _items = []
        if self.endpoints:
            for _item_endpoints in self.endpoints:
                if _item_endpoints:
                    _items.append(_item_endpoints.to_dict())
            _dict['endpoints'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in permissions (list)
        _items = []
        if self.permissions:
            for _item_permissions in self.permissions:
                if _item_permissions:
                    _items.append(_item_permissions.to_dict())
            _dict['permissions'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in sdks (list)
        _items = []
        if self.sdks:
            for _item_sdks in self.sdks:
                if _item_sdks:
                    _items.append(_item_sdks.to_dict())
            _dict['sdks'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleChecksReportV1alphaDataMonitoring from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "dataTypes": [GoogleChecksReportV1alphaDataMonitoringDataTypeResult.from_dict(_item) for _item in obj["dataTypes"]] if obj.get("dataTypes") is not None else None,
            "endpoints": [GoogleChecksReportV1alphaDataMonitoringEndpointResult.from_dict(_item) for _item in obj["endpoints"]] if obj.get("endpoints") is not None else None,
            "permissions": [GoogleChecksReportV1alphaDataMonitoringPermissionResult.from_dict(_item) for _item in obj["permissions"]] if obj.get("permissions") is not None else None,
            "sdks": [GoogleChecksReportV1alphaDataMonitoringSdkResult.from_dict(_item) for _item in obj["sdks"]] if obj.get("sdks") is not None else None
        })
        return _obj



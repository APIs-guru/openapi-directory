# coding: utf-8

"""
    Data pipelines API

    Data Pipelines provides an interface for creating, updating, and managing recurring Data Analytics jobs.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.google_cloud_datapipelines_v1_list_pipelines_response import GoogleCloudDatapipelinesV1ListPipelinesResponse

class TestGoogleCloudDatapipelinesV1ListPipelinesResponse(unittest.TestCase):
    """GoogleCloudDatapipelinesV1ListPipelinesResponse unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> GoogleCloudDatapipelinesV1ListPipelinesResponse:
        """Test GoogleCloudDatapipelinesV1ListPipelinesResponse
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `GoogleCloudDatapipelinesV1ListPipelinesResponse`
        """
        model = GoogleCloudDatapipelinesV1ListPipelinesResponse()
        if include_optional:
            return GoogleCloudDatapipelinesV1ListPipelinesResponse(
                next_page_token = '',
                pipelines = [
                    openapi_client.models.google_cloud_datapipelines_v1_pipeline.GoogleCloudDatapipelinesV1Pipeline(
                        create_time = '', 
                        display_name = '', 
                        job_count = 56, 
                        last_update_time = '', 
                        name = '', 
                        pipeline_sources = {
                            'key' : ''
                            }, 
                        schedule_info = openapi_client.models.google_cloud_datapipelines_v1_schedule_spec.GoogleCloudDatapipelinesV1ScheduleSpec(
                            next_job_time = '', 
                            schedule = '', 
                            time_zone = '', ), 
                        scheduler_service_account_email = '', 
                        state = 'STATE_UNSPECIFIED', 
                        type = 'PIPELINE_TYPE_UNSPECIFIED', 
                        workload = openapi_client.models.google_cloud_datapipelines_v1_workload.GoogleCloudDatapipelinesV1Workload(
                            dataflow_flex_template_request = openapi_client.models.google_cloud_datapipelines_v1_launch_flex_template_request.GoogleCloudDatapipelinesV1LaunchFlexTemplateRequest(
                                launch_parameter = openapi_client.models.google_cloud_datapipelines_v1_launch_flex_template_parameter.GoogleCloudDatapipelinesV1LaunchFlexTemplateParameter(
                                    container_spec_gcs_path = '', 
                                    environment = openapi_client.models.google_cloud_datapipelines_v1_flex_template_runtime_environment.GoogleCloudDatapipelinesV1FlexTemplateRuntimeEnvironment(
                                        additional_experiments = [
                                            ''
                                            ], 
                                        additional_user_labels = {
                                            'key' : ''
                                            }, 
                                        enable_streaming_engine = True, 
                                        flexrs_goal = 'FLEXRS_UNSPECIFIED', 
                                        ip_configuration = 'WORKER_IP_UNSPECIFIED', 
                                        kms_key_name = '', 
                                        machine_type = '', 
                                        max_workers = 56, 
                                        network = '', 
                                        num_workers = 56, 
                                        service_account_email = '', 
                                        subnetwork = '', 
                                        temp_location = '', 
                                        worker_region = '', 
                                        worker_zone = '', 
                                        zone = '', ), 
                                    job_name = '', 
                                    launch_options = {
                                        'key' : ''
                                        }, 
                                    parameters = {
                                        'key' : ''
                                        }, 
                                    transform_name_mappings = {
                                        'key' : ''
                                        }, 
                                    update = True, ), 
                                location = '', 
                                project_id = '', 
                                validate_only = True, ), 
                            dataflow_launch_template_request = openapi_client.models.google_cloud_datapipelines_v1_launch_template_request.GoogleCloudDatapipelinesV1LaunchTemplateRequest(
                                gcs_path = '', 
                                launch_parameters = openapi_client.models.google_cloud_datapipelines_v1_launch_template_parameters.GoogleCloudDatapipelinesV1LaunchTemplateParameters(
                                    job_name = '', 
                                    transform_name_mapping = {
                                        'key' : ''
                                        }, 
                                    update = True, ), 
                                location = '', 
                                project_id = '', 
                                validate_only = True, ), ), )
                    ]
            )
        else:
            return GoogleCloudDatapipelinesV1ListPipelinesResponse(
        )
        """

    def testGoogleCloudDatapipelinesV1ListPipelinesResponse(self):
        """Test GoogleCloudDatapipelinesV1ListPipelinesResponse"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

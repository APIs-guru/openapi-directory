# coding: utf-8

"""
    Data pipelines API

    Data Pipelines provides an interface for creating, updating, and managing recurring Data Analytics jobs.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_cloud_datapipelines_v1_runtime_environment import GoogleCloudDatapipelinesV1RuntimeEnvironment
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudDatapipelinesV1LaunchTemplateParameters(BaseModel):
    """
    Parameters to provide to the template being launched.
    """ # noqa: E501
    environment: Optional[GoogleCloudDatapipelinesV1RuntimeEnvironment] = None
    job_name: Optional[StrictStr] = Field(default=None, description="Required. The job name to use for the created job.", alias="jobName")
    parameters: Optional[Dict[str, StrictStr]] = Field(default=None, description="The runtime parameters to pass to the job.")
    transform_name_mapping: Optional[Dict[str, StrictStr]] = Field(default=None, description="Map of transform name prefixes of the job to be replaced to the corresponding name prefixes of the new job. Only applicable when updating a pipeline.", alias="transformNameMapping")
    update: Optional[StrictBool] = Field(default=None, description="If set, replace the existing pipeline with the name specified by jobName with this pipeline, preserving state.")
    __properties: ClassVar[List[str]] = ["environment", "jobName", "parameters", "transformNameMapping", "update"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudDatapipelinesV1LaunchTemplateParameters from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of environment
        if self.environment:
            _dict['environment'] = self.environment.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudDatapipelinesV1LaunchTemplateParameters from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "environment": GoogleCloudDatapipelinesV1RuntimeEnvironment.from_dict(obj["environment"]) if obj.get("environment") is not None else None,
            "jobName": obj.get("jobName"),
            "parameters": obj.get("parameters"),
            "transformNameMapping": obj.get("transformNameMapping"),
            "update": obj.get("update")
        })
        return _obj



# coding: utf-8

"""
    Data pipelines API

    Data Pipelines provides an interface for creating, updating, and managing recurring Data Analytics jobs.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt
from typing import Any, ClassVar, Dict, List, Optional, Union
from openapi_client.models.google_cloud_datapipelines_v1_sdk_version import GoogleCloudDatapipelinesV1SdkVersion
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudDatapipelinesV1DataflowJobDetails(BaseModel):
    """
    Pipeline job details specific to the Dataflow API. This is encapsulated here to allow for more executors to store their specific details separately.
    """ # noqa: E501
    current_workers: Optional[StrictInt] = Field(default=None, description="Output only. The current number of workers used to run the jobs. Only set to a value if the job is still running.", alias="currentWorkers")
    resource_info: Optional[Dict[str, Union[StrictFloat, StrictInt]]] = Field(default=None, description="Cached version of all the metrics of interest for the job. This value gets stored here when the job is terminated. As long as the job is running, this field is populated from the Dataflow API.", alias="resourceInfo")
    sdk_version: Optional[GoogleCloudDatapipelinesV1SdkVersion] = Field(default=None, alias="sdkVersion")
    __properties: ClassVar[List[str]] = ["currentWorkers", "resourceInfo", "sdkVersion"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudDatapipelinesV1DataflowJobDetails from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "current_workers",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of sdk_version
        if self.sdk_version:
            _dict['sdkVersion'] = self.sdk_version.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudDatapipelinesV1DataflowJobDetails from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "currentWorkers": obj.get("currentWorkers"),
            "resourceInfo": obj.get("resourceInfo"),
            "sdkVersion": GoogleCloudDatapipelinesV1SdkVersion.from_dict(obj["sdkVersion"]) if obj.get("sdkVersion") is not None else None
        })
        return _obj



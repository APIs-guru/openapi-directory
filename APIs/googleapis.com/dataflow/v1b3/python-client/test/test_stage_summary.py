# coding: utf-8

"""
    Dataflow API

    Manages Google Cloud Dataflow projects on Google Cloud Platform.

    The version of the OpenAPI document: v1b3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.stage_summary import StageSummary

class TestStageSummary(unittest.TestCase):
    """StageSummary unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> StageSummary:
        """Test StageSummary
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `StageSummary`
        """
        model = StageSummary()
        if include_optional:
            return StageSummary(
                end_time = '',
                metrics = [
                    openapi_client.models.metric_update.MetricUpdate(
                        cumulative = True, 
                        distribution = null, 
                        gauge = null, 
                        internal = null, 
                        kind = '', 
                        mean_count = null, 
                        mean_sum = null, 
                        name = openapi_client.models.metric_structured_name.MetricStructuredName(
                            context = {
                                'key' : ''
                                }, 
                            origin = '', ), 
                        scalar = null, 
                        set = null, 
                        update_time = '', )
                    ],
                progress = openapi_client.models.progress_timeseries.ProgressTimeseries(
                    current_progress = 1.337, 
                    data_points = [
                        openapi_client.models.point.Point(
                            time = '', 
                            value = 1.337, )
                        ], ),
                stage_id = '',
                start_time = '',
                state = 'EXECUTION_STATE_UNKNOWN',
                straggler_summary = openapi_client.models.straggler_summary.StragglerSummary(
                    recent_stragglers = [
                        openapi_client.models.straggler.Straggler(
                            batch_straggler = openapi_client.models.straggler_info.StragglerInfo(
                                causes = {
                                    'key' : openapi_client.models.straggler_debugging_info.StragglerDebuggingInfo(
                                        hot_key = openapi_client.models.hot_key_debugging_info.HotKeyDebuggingInfo(
                                            detected_hot_keys = {
                                                'key' : openapi_client.models.hot_key_info.HotKeyInfo(
                                                    hot_key_age = '', 
                                                    key = '', 
                                                    key_truncated = True, )
                                                }, ), )
                                    }, 
                                start_time = '', ), 
                            streaming_straggler = openapi_client.models.streaming_straggler_info.StreamingStragglerInfo(
                                data_watermark_lag = '', 
                                end_time = '', 
                                start_time = '', 
                                system_watermark_lag = '', 
                                worker_name = '', ), )
                        ], 
                    straggler_cause_count = {
                        'key' : ''
                        }, 
                    total_straggler_count = '', )
            )
        else:
            return StageSummary(
        )
        """

    def testStageSummary(self):
        """Test StageSummary"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

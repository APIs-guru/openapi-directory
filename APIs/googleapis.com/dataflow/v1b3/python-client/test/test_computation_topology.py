# coding: utf-8

"""
    Dataflow API

    Manages Google Cloud Dataflow projects on Google Cloud Platform.

    The version of the OpenAPI document: v1b3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.computation_topology import ComputationTopology

class TestComputationTopology(unittest.TestCase):
    """ComputationTopology unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> ComputationTopology:
        """Test ComputationTopology
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `ComputationTopology`
        """
        model = ComputationTopology()
        if include_optional:
            return ComputationTopology(
                computation_id = '',
                inputs = [
                    openapi_client.models.stream_location.StreamLocation(
                        custom_source_location = openapi_client.models.custom_source_location.CustomSourceLocation(
                            stateful = True, ), 
                        pubsub_location = openapi_client.models.pubsub_location.PubsubLocation(
                            drop_late_data = True, 
                            dynamic_destinations = True, 
                            id_label = '', 
                            subscription = '', 
                            timestamp_label = '', 
                            topic = '', 
                            tracking_subscription = '', 
                            with_attributes = True, ), 
                        side_input_location = openapi_client.models.streaming_side_input_location.StreamingSideInputLocation(
                            state_family = '', 
                            tag = '', ), 
                        streaming_stage_location = openapi_client.models.streaming_stage_location.StreamingStageLocation(
                            stream_id = '', ), )
                    ],
                key_ranges = [
                    openapi_client.models.key_range_location.KeyRangeLocation(
                        data_disk = '', 
                        delivery_endpoint = '', 
                        deprecated_persistent_directory = '', 
                        end = '', 
                        start = '', )
                    ],
                outputs = [
                    openapi_client.models.stream_location.StreamLocation(
                        custom_source_location = openapi_client.models.custom_source_location.CustomSourceLocation(
                            stateful = True, ), 
                        pubsub_location = openapi_client.models.pubsub_location.PubsubLocation(
                            drop_late_data = True, 
                            dynamic_destinations = True, 
                            id_label = '', 
                            subscription = '', 
                            timestamp_label = '', 
                            topic = '', 
                            tracking_subscription = '', 
                            with_attributes = True, ), 
                        side_input_location = openapi_client.models.streaming_side_input_location.StreamingSideInputLocation(
                            state_family = '', 
                            tag = '', ), 
                        streaming_stage_location = openapi_client.models.streaming_stage_location.StreamingStageLocation(
                            stream_id = '', ), )
                    ],
                state_families = [
                    openapi_client.models.state_family_config.StateFamilyConfig(
                        is_read = True, 
                        state_family = '', )
                    ],
                system_stage_name = ''
            )
        else:
            return ComputationTopology(
        )
        """

    def testComputationTopology(self):
        """Test ComputationTopology"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

# coding: utf-8

"""
    Dataflow API

    Manages Google Cloud Dataflow projects on Google Cloud Platform.

    The version of the OpenAPI document: v1b3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.streaming_computation_task import StreamingComputationTask

class TestStreamingComputationTask(unittest.TestCase):
    """StreamingComputationTask unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> StreamingComputationTask:
        """Test StreamingComputationTask
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `StreamingComputationTask`
        """
        model = StreamingComputationTask()
        if include_optional:
            return StreamingComputationTask(
                computation_ranges = [
                    openapi_client.models.streaming_computation_ranges.StreamingComputationRanges(
                        computation_id = '', 
                        range_assignments = [
                            openapi_client.models.key_range_data_disk_assignment.KeyRangeDataDiskAssignment(
                                data_disk = '', 
                                end = '', 
                                start = '', )
                            ], )
                    ],
                data_disks = [
                    openapi_client.models.mounted_data_disk.MountedDataDisk(
                        data_disk = '', )
                    ],
                task_type = 'STREAMING_COMPUTATION_TASK_UNKNOWN'
            )
        else:
            return StreamingComputationTask(
        )
        """

    def testStreamingComputationTask(self):
        """Test StreamingComputationTask"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

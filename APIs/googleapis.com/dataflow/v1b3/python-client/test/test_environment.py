# coding: utf-8

"""
    Dataflow API

    Manages Google Cloud Dataflow projects on Google Cloud Platform.

    The version of the OpenAPI document: v1b3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.environment import Environment

class TestEnvironment(unittest.TestCase):
    """Environment unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> Environment:
        """Test Environment
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `Environment`
        """
        model = Environment()
        if include_optional:
            return Environment(
                cluster_manager_api_service = '',
                dataset = '',
                debug_options = openapi_client.models.debug_options.DebugOptions(
                    data_sampling = openapi_client.models.data_sampling_config.DataSamplingConfig(
                        behaviors = [
                            'DATA_SAMPLING_BEHAVIOR_UNSPECIFIED'
                            ], ), 
                    enable_hot_key_logging = True, ),
                experiments = [
                    ''
                    ],
                flex_resource_scheduling_goal = 'FLEXRS_UNSPECIFIED',
                internal_experiments = {
                    'key' : null
                    },
                sdk_pipeline_options = {
                    'key' : null
                    },
                service_account_email = '',
                service_kms_key_name = '',
                service_options = [
                    ''
                    ],
                shuffle_mode = 'SHUFFLE_MODE_UNSPECIFIED',
                streaming_mode = 'STREAMING_MODE_UNSPECIFIED',
                temp_storage_prefix = '',
                use_streaming_engine_resource_based_billing = True,
                user_agent = {
                    'key' : null
                    },
                version = {
                    'key' : null
                    },
                worker_pools = [
                    openapi_client.models.worker_pool.WorkerPool(
                        autoscaling_settings = openapi_client.models.autoscaling_settings.AutoscalingSettings(
                            algorithm = 'AUTOSCALING_ALGORITHM_UNKNOWN', 
                            max_num_workers = 56, ), 
                        data_disks = [
                            openapi_client.models.disk.Disk(
                                disk_type = '', 
                                mount_point = '', 
                                size_gb = 56, )
                            ], 
                        default_package_set = 'DEFAULT_PACKAGE_SET_UNKNOWN', 
                        disk_size_gb = 56, 
                        disk_source_image = '', 
                        disk_type = '', 
                        ip_configuration = 'WORKER_IP_UNSPECIFIED', 
                        kind = '', 
                        machine_type = '', 
                        metadata = {
                            'key' : ''
                            }, 
                        network = '', 
                        num_threads_per_worker = 56, 
                        num_workers = 56, 
                        on_host_maintenance = '', 
                        packages = [
                            openapi_client.models.package.Package(
                                location = '', 
                                name = '', )
                            ], 
                        pool_args = {
                            'key' : null
                            }, 
                        sdk_harness_container_images = [
                            openapi_client.models.sdk_harness_container_image.SdkHarnessContainerImage(
                                capabilities = [
                                    ''
                                    ], 
                                container_image = '', 
                                environment_id = '', 
                                use_single_core_per_container = True, )
                            ], 
                        subnetwork = '', 
                        taskrunner_settings = openapi_client.models.task_runner_settings.TaskRunnerSettings(
                            alsologtostderr = True, 
                            base_task_dir = '', 
                            base_url = '', 
                            commandlines_file_name = '', 
                            continue_on_exception = True, 
                            dataflow_api_version = '', 
                            harness_command = '', 
                            language_hint = '', 
                            log_dir = '', 
                            log_to_serialconsole = True, 
                            log_upload_location = '', 
                            oauth_scopes = [
                                ''
                                ], 
                            parallel_worker_settings = openapi_client.models.worker_settings.WorkerSettings(
                                base_url = '', 
                                reporting_enabled = True, 
                                service_path = '', 
                                shuffle_service_path = '', 
                                temp_storage_prefix = '', 
                                worker_id = '', ), 
                            streaming_worker_main_class = '', 
                            task_group = '', 
                            task_user = '', 
                            temp_storage_prefix = '', 
                            vm_id = '', 
                            workflow_file_name = '', ), 
                        teardown_policy = 'TEARDOWN_POLICY_UNKNOWN', 
                        worker_harness_container_image = '', 
                        zone = '', )
                    ],
                worker_region = '',
                worker_zone = ''
            )
        else:
            return Environment(
        )
        """

    def testEnvironment(self):
        """Test Environment"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

# coding: utf-8

"""
    Dataflow API

    Manages Google Cloud Dataflow projects on Google Cloud Platform.

    The version of the OpenAPI document: v1b3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.launch_flex_template_response import LaunchFlexTemplateResponse

class TestLaunchFlexTemplateResponse(unittest.TestCase):
    """LaunchFlexTemplateResponse unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> LaunchFlexTemplateResponse:
        """Test LaunchFlexTemplateResponse
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `LaunchFlexTemplateResponse`
        """
        model = LaunchFlexTemplateResponse()
        if include_optional:
            return LaunchFlexTemplateResponse(
                job = openapi_client.models.job.Job(
                    client_request_id = '', 
                    create_time = '', 
                    created_from_snapshot_id = '', 
                    current_state = 'JOB_STATE_UNKNOWN', 
                    current_state_time = '', 
                    environment = openapi_client.models.environment.Environment(
                        cluster_manager_api_service = '', 
                        dataset = '', 
                        debug_options = openapi_client.models.debug_options.DebugOptions(
                            data_sampling = openapi_client.models.data_sampling_config.DataSamplingConfig(
                                behaviors = [
                                    'DATA_SAMPLING_BEHAVIOR_UNSPECIFIED'
                                    ], ), 
                            enable_hot_key_logging = True, ), 
                        experiments = [
                            ''
                            ], 
                        flex_resource_scheduling_goal = 'FLEXRS_UNSPECIFIED', 
                        internal_experiments = {
                            'key' : null
                            }, 
                        sdk_pipeline_options = {
                            'key' : null
                            }, 
                        service_account_email = '', 
                        service_kms_key_name = '', 
                        service_options = [
                            ''
                            ], 
                        shuffle_mode = 'SHUFFLE_MODE_UNSPECIFIED', 
                        streaming_mode = 'STREAMING_MODE_UNSPECIFIED', 
                        temp_storage_prefix = '', 
                        use_streaming_engine_resource_based_billing = True, 
                        user_agent = {
                            'key' : null
                            }, 
                        version = {
                            'key' : null
                            }, 
                        worker_pools = [
                            openapi_client.models.worker_pool.WorkerPool(
                                autoscaling_settings = openapi_client.models.autoscaling_settings.AutoscalingSettings(
                                    algorithm = 'AUTOSCALING_ALGORITHM_UNKNOWN', 
                                    max_num_workers = 56, ), 
                                data_disks = [
                                    openapi_client.models.disk.Disk(
                                        disk_type = '', 
                                        mount_point = '', 
                                        size_gb = 56, )
                                    ], 
                                default_package_set = 'DEFAULT_PACKAGE_SET_UNKNOWN', 
                                disk_size_gb = 56, 
                                disk_source_image = '', 
                                disk_type = '', 
                                ip_configuration = 'WORKER_IP_UNSPECIFIED', 
                                kind = '', 
                                machine_type = '', 
                                metadata = {
                                    'key' : ''
                                    }, 
                                network = '', 
                                num_threads_per_worker = 56, 
                                num_workers = 56, 
                                on_host_maintenance = '', 
                                packages = [
                                    openapi_client.models.package.Package(
                                        location = '', 
                                        name = '', )
                                    ], 
                                pool_args = {
                                    'key' : null
                                    }, 
                                sdk_harness_container_images = [
                                    openapi_client.models.sdk_harness_container_image.SdkHarnessContainerImage(
                                        capabilities = [
                                            ''
                                            ], 
                                        container_image = '', 
                                        environment_id = '', 
                                        use_single_core_per_container = True, )
                                    ], 
                                subnetwork = '', 
                                taskrunner_settings = openapi_client.models.task_runner_settings.TaskRunnerSettings(
                                    alsologtostderr = True, 
                                    base_task_dir = '', 
                                    base_url = '', 
                                    commandlines_file_name = '', 
                                    continue_on_exception = True, 
                                    dataflow_api_version = '', 
                                    harness_command = '', 
                                    language_hint = '', 
                                    log_dir = '', 
                                    log_to_serialconsole = True, 
                                    log_upload_location = '', 
                                    oauth_scopes = [
                                        ''
                                        ], 
                                    parallel_worker_settings = openapi_client.models.worker_settings.WorkerSettings(
                                        base_url = '', 
                                        reporting_enabled = True, 
                                        service_path = '', 
                                        shuffle_service_path = '', 
                                        temp_storage_prefix = '', 
                                        worker_id = '', ), 
                                    streaming_worker_main_class = '', 
                                    task_group = '', 
                                    task_user = '', 
                                    temp_storage_prefix = '', 
                                    vm_id = '', 
                                    workflow_file_name = '', ), 
                                teardown_policy = 'TEARDOWN_POLICY_UNKNOWN', 
                                worker_harness_container_image = '', 
                                zone = '', )
                            ], 
                        worker_region = '', 
                        worker_zone = '', ), 
                    execution_info = openapi_client.models.job_execution_info.JobExecutionInfo(
                        stages = {
                            'key' : openapi_client.models.job_execution_stage_info.JobExecutionStageInfo(
                                step_name = [
                                    ''
                                    ], )
                            }, ), 
                    id = '', 
                    job_metadata = openapi_client.models.job_metadata.JobMetadata(
                        big_table_details = [
                            openapi_client.models.big_table_io_details.BigTableIODetails(
                                instance_id = '', 
                                project_id = '', 
                                table_id = '', )
                            ], 
                        bigquery_details = [
                            openapi_client.models.big_query_io_details.BigQueryIODetails(
                                dataset = '', 
                                project_id = '', 
                                query = '', 
                                table = '', )
                            ], 
                        datastore_details = [
                            openapi_client.models.datastore_io_details.DatastoreIODetails(
                                namespace = '', 
                                project_id = '', )
                            ], 
                        file_details = [
                            openapi_client.models.file_io_details.FileIODetails(
                                file_pattern = '', )
                            ], 
                        pubsub_details = [
                            openapi_client.models.pub_sub_io_details.PubSubIODetails(
                                subscription = '', 
                                topic = '', )
                            ], 
                        sdk_version = openapi_client.models.sdk_version.SdkVersion(
                            bugs = [
                                openapi_client.models.sdk_bug.SdkBug(
                                    severity = 'SEVERITY_UNSPECIFIED', 
                                    type = 'TYPE_UNSPECIFIED', 
                                    uri = '', )
                                ], 
                            sdk_support_status = 'UNKNOWN', 
                            version_display_name = '', ), 
                        spanner_details = [
                            openapi_client.models.spanner_io_details.SpannerIODetails(
                                database_id = '', 
                                instance_id = '', 
                                project_id = '', )
                            ], 
                        user_display_properties = {
                            'key' : ''
                            }, ), 
                    labels = {
                        'key' : ''
                        }, 
                    location = '', 
                    name = '', 
                    pipeline_description = openapi_client.models.pipeline_description.PipelineDescription(
                        display_data = [
                            openapi_client.models.display_data.DisplayData(
                                bool_value = True, 
                                duration_value = '', 
                                float_value = 1.337, 
                                int64_value = '', 
                                java_class_value = '', 
                                key = '', 
                                label = '', 
                                namespace = '', 
                                short_str_value = '', 
                                str_value = '', 
                                timestamp_value = '', 
                                url = '', )
                            ], 
                        execution_pipeline_stage = [
                            openapi_client.models.execution_stage_summary.ExecutionStageSummary(
                                component_source = [
                                    openapi_client.models.component_source.ComponentSource(
                                        name = '', 
                                        original_transform_or_collection = '', 
                                        user_name = '', )
                                    ], 
                                component_transform = [
                                    openapi_client.models.component_transform.ComponentTransform(
                                        name = '', 
                                        original_transform = '', 
                                        user_name = '', )
                                    ], 
                                id = '', 
                                input_source = [
                                    openapi_client.models.stage_source.StageSource(
                                        name = '', 
                                        original_transform_or_collection = '', 
                                        size_bytes = '', 
                                        user_name = '', )
                                    ], 
                                kind = 'UNKNOWN_KIND', 
                                name = '', 
                                output_source = [
                                    openapi_client.models.stage_source.StageSource(
                                        name = '', 
                                        original_transform_or_collection = '', 
                                        size_bytes = '', 
                                        user_name = '', )
                                    ], 
                                prerequisite_stage = [
                                    ''
                                    ], )
                            ], 
                        original_pipeline_transform = [
                            openapi_client.models.transform_summary.TransformSummary(
                                id = '', 
                                input_collection_name = [
                                    ''
                                    ], 
                                kind = 'UNKNOWN_KIND', 
                                name = '', 
                                output_collection_name = [
                                    ''
                                    ], )
                            ], 
                        step_names_hash = '', ), 
                    project_id = '', 
                    replace_job_id = '', 
                    replaced_by_job_id = '', 
                    requested_state = 'JOB_STATE_UNKNOWN', 
                    runtime_updatable_params = openapi_client.models.runtime_updatable_params.RuntimeUpdatableParams(
                        max_num_workers = 56, 
                        min_num_workers = 56, 
                        worker_utilization_hint = 1.337, ), 
                    satisfies_pzi = True, 
                    satisfies_pzs = True, 
                    stage_states = [
                        openapi_client.models.execution_stage_state.ExecutionStageState(
                            current_state_time = '', 
                            execution_stage_name = '', 
                            execution_stage_state = 'JOB_STATE_UNKNOWN', )
                        ], 
                    start_time = '', 
                    steps = [
                        openapi_client.models.step.Step(
                            kind = '', 
                            name = '', 
                            properties = {
                                'key' : null
                                }, )
                        ], 
                    steps_location = '', 
                    temp_files = [
                        ''
                        ], 
                    transform_name_mapping = {
                        'key' : ''
                        }, 
                    type = 'JOB_TYPE_UNKNOWN', )
            )
        else:
            return LaunchFlexTemplateResponse(
        )
        """

    def testLaunchFlexTemplateResponse(self):
        """Test LaunchFlexTemplateResponse"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

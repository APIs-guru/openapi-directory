# coding: utf-8

"""
    Dataflow API

    Manages Google Cloud Dataflow projects on Google Cloud Platform.

    The version of the OpenAPI document: v1b3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.report_work_item_status_request import ReportWorkItemStatusRequest

class TestReportWorkItemStatusRequest(unittest.TestCase):
    """ReportWorkItemStatusRequest unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> ReportWorkItemStatusRequest:
        """Test ReportWorkItemStatusRequest
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `ReportWorkItemStatusRequest`
        """
        model = ReportWorkItemStatusRequest()
        if include_optional:
            return ReportWorkItemStatusRequest(
                current_worker_time = '',
                location = '',
                unified_worker_request = {
                    'key' : null
                    },
                work_item_statuses = [
                    openapi_client.models.work_item_status.WorkItemStatus(
                        completed = True, 
                        counter_updates = [
                            openapi_client.models.counter_update.CounterUpdate(
                                boolean = True, 
                                cumulative = True, 
                                distribution = openapi_client.models.distribution_update.DistributionUpdate(
                                    count = openapi_client.models.split_int64.SplitInt64(
                                        high_bits = 56, 
                                        low_bits = 56, ), 
                                    histogram = openapi_client.models.histogram.Histogram(
                                        bucket_counts = [
                                            ''
                                            ], 
                                        first_bucket_offset = 56, ), 
                                    max = openapi_client.models.split_int64.SplitInt64(
                                        high_bits = 56, 
                                        low_bits = 56, ), 
                                    min = , 
                                    sum = , 
                                    sum_of_squares = 1.337, ), 
                                floating_point = 1.337, 
                                floating_point_list = openapi_client.models.floating_point_list.FloatingPointList(
                                    elements = [
                                        1.337
                                        ], ), 
                                floating_point_mean = openapi_client.models.floating_point_mean.FloatingPointMean(), 
                                integer = , 
                                integer_gauge = openapi_client.models.integer_gauge.IntegerGauge(
                                    timestamp = '', 
                                    value = , ), 
                                integer_list = openapi_client.models.integer_list.IntegerList(), 
                                integer_mean = openapi_client.models.integer_mean.IntegerMean(), 
                                internal = null, 
                                name_and_kind = openapi_client.models.name_and_kind.NameAndKind(
                                    kind = 'INVALID', 
                                    name = '', ), 
                                short_id = '', 
                                string_list = openapi_client.models.string_list.StringList(), 
                                structured_name_and_metadata = openapi_client.models.counter_structured_name_and_metadata.CounterStructuredNameAndMetadata(
                                    metadata = openapi_client.models.counter_metadata.CounterMetadata(
                                        description = '', 
                                        kind = 'INVALID', 
                                        other_units = '', 
                                        standard_units = 'BYTES', ), 
                                    name = openapi_client.models.counter_structured_name.CounterStructuredName(
                                        component_step_name = '', 
                                        execution_step_name = '', 
                                        input_index = 56, 
                                        origin = 'SYSTEM', 
                                        origin_namespace = '', 
                                        original_requesting_step_name = '', 
                                        original_step_name = '', 
                                        portion = 'ALL', 
                                        worker_id = '', ), ), )
                            ], 
                        dynamic_source_split = openapi_client.models.dynamic_source_split.DynamicSourceSplit(
                            primary = openapi_client.models.derived_source.DerivedSource(
                                derivation_mode = 'SOURCE_DERIVATION_MODE_UNKNOWN', 
                                source = openapi_client.models.source.Source(
                                    base_specs = [
                                        {
                                            'key' : null
                                            }
                                        ], 
                                    codec = {
                                        'key' : null
                                        }, 
                                    does_not_need_splitting = True, 
                                    spec = {
                                        'key' : null
                                        }, ), ), 
                            residual = openapi_client.models.derived_source.DerivedSource(
                                derivation_mode = 'SOURCE_DERIVATION_MODE_UNKNOWN', ), ), 
                        errors = [
                            openapi_client.models.status.Status(
                                code = 56, 
                                details = [
                                    {
                                        'key' : null
                                        }
                                    ], 
                                message = '', )
                            ], 
                        metric_updates = [
                            openapi_client.models.metric_update.MetricUpdate(
                                cumulative = True, 
                                gauge = null, 
                                internal = null, 
                                kind = '', 
                                mean_count = null, 
                                mean_sum = null, 
                                scalar = null, 
                                set = null, 
                                update_time = '', )
                            ], 
                        progress = openapi_client.models.approximate_progress.ApproximateProgress(
                            percent_complete = 1.337, 
                            position = openapi_client.models.position.Position(
                                byte_offset = '', 
                                concat_position = openapi_client.models.concat_position.ConcatPosition(
                                    index = 56, ), 
                                end = True, 
                                key = '', 
                                record_index = '', 
                                shuffle_position = '', ), 
                            remaining_time = '', ), 
                        report_index = '', 
                        reported_progress = openapi_client.models.approximate_reported_progress.ApproximateReportedProgress(
                            consumed_parallelism = openapi_client.models.reported_parallelism.ReportedParallelism(
                                is_infinite = True, ), 
                            fraction_consumed = 1.337, 
                            remaining_parallelism = openapi_client.models.reported_parallelism.ReportedParallelism(
                                is_infinite = True, ), ), 
                        requested_lease_duration = '', 
                        source_fork = openapi_client.models.source_fork.SourceFork(
                            primary_source = , 
                            residual_source = , ), 
                        source_operation_response = openapi_client.models.source_operation_response.SourceOperationResponse(
                            get_metadata = openapi_client.models.source_get_metadata_response.SourceGetMetadataResponse(), 
                            split = openapi_client.models.source_split_response.SourceSplitResponse(
                                bundles = [
                                    
                                    ], 
                                outcome = 'SOURCE_SPLIT_OUTCOME_UNKNOWN', 
                                shards = [
                                    openapi_client.models.source_split_shard.SourceSplitShard(
                                        derivation_mode = 'SOURCE_DERIVATION_MODE_UNKNOWN', )
                                    ], ), ), 
                        stop_position = openapi_client.models.position.Position(
                            byte_offset = '', 
                            end = True, 
                            key = '', 
                            record_index = '', 
                            shuffle_position = '', ), 
                        total_throttler_wait_time_seconds = 1.337, 
                        work_item_id = '', )
                    ],
                worker_id = ''
            )
        else:
            return ReportWorkItemStatusRequest(
        )
        """

    def testReportWorkItemStatusRequest(self):
        """Test ReportWorkItemStatusRequest"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

# coding: utf-8

"""
    Dataflow API

    Manages Google Cloud Dataflow projects on Google Cloud Platform.

    The version of the OpenAPI document: v1b3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.counter_update import CounterUpdate

class TestCounterUpdate(unittest.TestCase):
    """CounterUpdate unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> CounterUpdate:
        """Test CounterUpdate
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `CounterUpdate`
        """
        model = CounterUpdate()
        if include_optional:
            return CounterUpdate(
                boolean = True,
                cumulative = True,
                distribution = openapi_client.models.distribution_update.DistributionUpdate(
                    count = openapi_client.models.split_int64.SplitInt64(
                        high_bits = 56, 
                        low_bits = 56, ), 
                    histogram = openapi_client.models.histogram.Histogram(
                        bucket_counts = [
                            ''
                            ], 
                        first_bucket_offset = 56, ), 
                    max = openapi_client.models.split_int64.SplitInt64(
                        high_bits = 56, 
                        low_bits = 56, ), 
                    min = , 
                    sum = , 
                    sum_of_squares = 1.337, ),
                floating_point = 1.337,
                floating_point_list = openapi_client.models.floating_point_list.FloatingPointList(
                    elements = [
                        1.337
                        ], ),
                floating_point_mean = openapi_client.models.floating_point_mean.FloatingPointMean(
                    count = openapi_client.models.split_int64.SplitInt64(
                        high_bits = 56, 
                        low_bits = 56, ), 
                    sum = 1.337, ),
                integer = openapi_client.models.split_int64.SplitInt64(
                    high_bits = 56, 
                    low_bits = 56, ),
                integer_gauge = openapi_client.models.integer_gauge.IntegerGauge(
                    timestamp = '', 
                    value = openapi_client.models.split_int64.SplitInt64(
                        high_bits = 56, 
                        low_bits = 56, ), ),
                integer_list = openapi_client.models.integer_list.IntegerList(
                    elements = [
                        openapi_client.models.split_int64.SplitInt64(
                            high_bits = 56, 
                            low_bits = 56, )
                        ], ),
                integer_mean = openapi_client.models.integer_mean.IntegerMean(
                    count = openapi_client.models.split_int64.SplitInt64(
                        high_bits = 56, 
                        low_bits = 56, ), 
                    sum = openapi_client.models.split_int64.SplitInt64(
                        high_bits = 56, 
                        low_bits = 56, ), ),
                internal = None,
                name_and_kind = openapi_client.models.name_and_kind.NameAndKind(
                    kind = 'INVALID', 
                    name = '', ),
                short_id = '',
                string_list = openapi_client.models.string_list.StringList(
                    elements = [
                        ''
                        ], ),
                structured_name_and_metadata = openapi_client.models.counter_structured_name_and_metadata.CounterStructuredNameAndMetadata(
                    metadata = openapi_client.models.counter_metadata.CounterMetadata(
                        description = '', 
                        kind = 'INVALID', 
                        other_units = '', 
                        standard_units = 'BYTES', ), 
                    name = openapi_client.models.counter_structured_name.CounterStructuredName(
                        component_step_name = '', 
                        execution_step_name = '', 
                        input_index = 56, 
                        origin = 'SYSTEM', 
                        origin_namespace = '', 
                        original_requesting_step_name = '', 
                        original_step_name = '', 
                        portion = 'ALL', 
                        worker_id = '', ), )
            )
        else:
            return CounterUpdate(
        )
        """

    def testCounterUpdate(self):
        """Test CounterUpdate"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

# coding: utf-8

"""
    Dataflow API

    Manages Google Cloud Dataflow projects on Google Cloud Platform.

    The version of the OpenAPI document: v1b3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.work_item import WorkItem

class TestWorkItem(unittest.TestCase):
    """WorkItem unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> WorkItem:
        """Test WorkItem
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `WorkItem`
        """
        model = WorkItem()
        if include_optional:
            return WorkItem(
                configuration = '',
                id = '',
                initial_report_index = '',
                job_id = '',
                lease_expire_time = '',
                map_task = openapi_client.models.map_task.MapTask(
                    counter_prefix = '', 
                    instructions = [
                        openapi_client.models.parallel_instruction.ParallelInstruction(
                            flatten = openapi_client.models.flatten_instruction.FlattenInstruction(
                                inputs = [
                                    openapi_client.models.instruction_input.InstructionInput(
                                        output_num = 56, 
                                        producer_instruction_index = 56, )
                                    ], ), 
                            name = '', 
                            original_name = '', 
                            outputs = [
                                openapi_client.models.instruction_output.InstructionOutput(
                                    codec = {
                                        'key' : null
                                        }, 
                                    name = '', 
                                    only_count_key_bytes = True, 
                                    only_count_value_bytes = True, 
                                    original_name = '', 
                                    system_name = '', )
                                ], 
                            par_do = openapi_client.models.par_do_instruction.ParDoInstruction(
                                input = openapi_client.models.instruction_input.InstructionInput(
                                    output_num = 56, 
                                    producer_instruction_index = 56, ), 
                                multi_output_infos = [
                                    openapi_client.models.multi_output_info.MultiOutputInfo(
                                        tag = '', )
                                    ], 
                                num_outputs = 56, 
                                side_inputs = [
                                    openapi_client.models.side_input_info.SideInputInfo(
                                        kind = {
                                            'key' : null
                                            }, 
                                        sources = [
                                            openapi_client.models.source.Source(
                                                base_specs = [
                                                    {
                                                        'key' : null
                                                        }
                                                    ], 
                                                does_not_need_splitting = True, 
                                                metadata = openapi_client.models.source_metadata.SourceMetadata(
                                                    estimated_size_bytes = '', 
                                                    infinite = True, 
                                                    produces_sorted_keys = True, ), 
                                                spec = {
                                                    'key' : null
                                                    }, )
                                            ], 
                                        tag = '', )
                                    ], 
                                user_fn = {
                                    'key' : null
                                    }, ), 
                            partial_group_by_key = openapi_client.models.partial_group_by_key_instruction.PartialGroupByKeyInstruction(
                                input_element_codec = {
                                    'key' : null
                                    }, 
                                original_combine_values_input_store_name = '', 
                                original_combine_values_step_name = '', 
                                value_combining_fn = {
                                    'key' : null
                                    }, ), 
                            read = openapi_client.models.read_instruction.ReadInstruction(
                                source = openapi_client.models.source.Source(
                                    does_not_need_splitting = True, ), ), 
                            system_name = '', 
                            write = openapi_client.models.write_instruction.WriteInstruction(
                                sink = openapi_client.models.sink.Sink(), ), )
                        ], 
                    stage_name = '', 
                    system_name = '', ),
                packages = [
                    openapi_client.models.package.Package(
                        location = '', 
                        name = '', )
                    ],
                project_id = '',
                report_status_interval = '',
                seq_map_task = openapi_client.models.seq_map_task.SeqMapTask(
                    inputs = [
                        openapi_client.models.side_input_info.SideInputInfo(
                            kind = {
                                'key' : null
                                }, 
                            sources = [
                                openapi_client.models.source.Source(
                                    base_specs = [
                                        {
                                            'key' : null
                                            }
                                        ], 
                                    codec = {
                                        'key' : null
                                        }, 
                                    does_not_need_splitting = True, 
                                    metadata = openapi_client.models.source_metadata.SourceMetadata(
                                        estimated_size_bytes = '', 
                                        infinite = True, 
                                        produces_sorted_keys = True, ), 
                                    spec = {
                                        'key' : null
                                        }, )
                                ], 
                            tag = '', )
                        ], 
                    name = '', 
                    output_infos = [
                        openapi_client.models.seq_map_task_output_info.SeqMapTaskOutputInfo(
                            sink = openapi_client.models.sink.Sink(), 
                            tag = '', )
                        ], 
                    stage_name = '', 
                    system_name = '', 
                    user_fn = {
                        'key' : null
                        }, ),
                shell_task = openapi_client.models.shell_task.ShellTask(
                    command = '', 
                    exit_code = 56, ),
                source_operation_task = openapi_client.models.source_operation_request.SourceOperationRequest(
                    get_metadata = openapi_client.models.source_get_metadata_request.SourceGetMetadataRequest(
                        source = openapi_client.models.source.Source(
                            base_specs = [
                                {
                                    'key' : null
                                    }
                                ], 
                            codec = {
                                'key' : null
                                }, 
                            does_not_need_splitting = True, 
                            metadata = openapi_client.models.source_metadata.SourceMetadata(
                                estimated_size_bytes = '', 
                                infinite = True, 
                                produces_sorted_keys = True, ), 
                            spec = {
                                'key' : null
                                }, ), ), 
                    name = '', 
                    original_name = '', 
                    split = openapi_client.models.source_split_request.SourceSplitRequest(
                        options = openapi_client.models.source_split_options.SourceSplitOptions(
                            desired_bundle_size_bytes = '', 
                            desired_shard_size_bytes = '', ), ), 
                    stage_name = '', 
                    system_name = '', ),
                streaming_computation_task = openapi_client.models.streaming_computation_task.StreamingComputationTask(
                    computation_ranges = [
                        openapi_client.models.streaming_computation_ranges.StreamingComputationRanges(
                            computation_id = '', 
                            range_assignments = [
                                openapi_client.models.key_range_data_disk_assignment.KeyRangeDataDiskAssignment(
                                    data_disk = '', 
                                    end = '', 
                                    start = '', )
                                ], )
                        ], 
                    data_disks = [
                        openapi_client.models.mounted_data_disk.MountedDataDisk(
                            data_disk = '', )
                        ], 
                    task_type = 'STREAMING_COMPUTATION_TASK_UNKNOWN', ),
                streaming_config_task = openapi_client.models.streaming_config_task.StreamingConfigTask(
                    commit_stream_chunk_size_bytes = '', 
                    get_data_stream_chunk_size_bytes = '', 
                    max_work_item_commit_bytes = '', 
                    streaming_computation_configs = [
                        openapi_client.models.streaming_computation_config.StreamingComputationConfig(
                            computation_id = '', 
                            instructions = [
                                openapi_client.models.parallel_instruction.ParallelInstruction(
                                    flatten = openapi_client.models.flatten_instruction.FlattenInstruction(
                                        inputs = [
                                            openapi_client.models.instruction_input.InstructionInput(
                                                output_num = 56, 
                                                producer_instruction_index = 56, )
                                            ], ), 
                                    name = '', 
                                    original_name = '', 
                                    outputs = [
                                        openapi_client.models.instruction_output.InstructionOutput(
                                            codec = {
                                                'key' : null
                                                }, 
                                            name = '', 
                                            only_count_key_bytes = True, 
                                            only_count_value_bytes = True, 
                                            original_name = '', 
                                            system_name = '', )
                                        ], 
                                    par_do = openapi_client.models.par_do_instruction.ParDoInstruction(
                                        input = openapi_client.models.instruction_input.InstructionInput(
                                            output_num = 56, 
                                            producer_instruction_index = 56, ), 
                                        multi_output_infos = [
                                            openapi_client.models.multi_output_info.MultiOutputInfo(
                                                tag = '', )
                                            ], 
                                        num_outputs = 56, 
                                        side_inputs = [
                                            openapi_client.models.side_input_info.SideInputInfo(
                                                kind = {
                                                    'key' : null
                                                    }, 
                                                sources = [
                                                    openapi_client.models.source.Source(
                                                        base_specs = [
                                                            {
                                                                'key' : null
                                                                }
                                                            ], 
                                                        does_not_need_splitting = True, 
                                                        metadata = openapi_client.models.source_metadata.SourceMetadata(
                                                            estimated_size_bytes = '', 
                                                            infinite = True, 
                                                            produces_sorted_keys = True, ), 
                                                        spec = {
                                                            'key' : null
                                                            }, )
                                                    ], 
                                                tag = '', )
                                            ], 
                                        user_fn = {
                                            'key' : null
                                            }, ), 
                                    partial_group_by_key = openapi_client.models.partial_group_by_key_instruction.PartialGroupByKeyInstruction(
                                        input_element_codec = {
                                            'key' : null
                                            }, 
                                        original_combine_values_input_store_name = '', 
                                        original_combine_values_step_name = '', 
                                        value_combining_fn = {
                                            'key' : null
                                            }, ), 
                                    read = openapi_client.models.read_instruction.ReadInstruction(
                                        source = openapi_client.models.source.Source(
                                            does_not_need_splitting = True, ), ), 
                                    system_name = '', 
                                    write = openapi_client.models.write_instruction.WriteInstruction(
                                        sink = openapi_client.models.sink.Sink(), ), )
                                ], 
                            stage_name = '', 
                            system_name = '', 
                            transform_user_name_to_state_family = {
                                'key' : ''
                                }, )
                        ], 
                    user_step_to_state_family_name_map = {
                        'key' : ''
                        }, 
                    windmill_service_endpoint = '', 
                    windmill_service_port = '', ),
                streaming_setup_task = openapi_client.models.streaming_setup_task.StreamingSetupTask(
                    drain = True, 
                    receive_work_port = 56, 
                    snapshot_config = openapi_client.models.streaming_appliance_snapshot_config.StreamingApplianceSnapshotConfig(
                        import_state_endpoint = '', 
                        snapshot_id = '', ), 
                    streaming_computation_topology = openapi_client.models.topology_config.TopologyConfig(
                        computations = [
                            openapi_client.models.computation_topology.ComputationTopology(
                                computation_id = '', 
                                inputs = [
                                    openapi_client.models.stream_location.StreamLocation(
                                        custom_source_location = openapi_client.models.custom_source_location.CustomSourceLocation(
                                            stateful = True, ), 
                                        pubsub_location = openapi_client.models.pubsub_location.PubsubLocation(
                                            drop_late_data = True, 
                                            dynamic_destinations = True, 
                                            id_label = '', 
                                            subscription = '', 
                                            timestamp_label = '', 
                                            topic = '', 
                                            tracking_subscription = '', 
                                            with_attributes = True, ), 
                                        side_input_location = openapi_client.models.streaming_side_input_location.StreamingSideInputLocation(
                                            state_family = '', 
                                            tag = '', ), 
                                        streaming_stage_location = openapi_client.models.streaming_stage_location.StreamingStageLocation(
                                            stream_id = '', ), )
                                    ], 
                                key_ranges = [
                                    openapi_client.models.key_range_location.KeyRangeLocation(
                                        data_disk = '', 
                                        delivery_endpoint = '', 
                                        deprecated_persistent_directory = '', 
                                        end = '', 
                                        start = '', )
                                    ], 
                                outputs = [
                                    openapi_client.models.stream_location.StreamLocation()
                                    ], 
                                state_families = [
                                    openapi_client.models.state_family_config.StateFamilyConfig(
                                        is_read = True, 
                                        state_family = '', )
                                    ], 
                                system_stage_name = '', )
                            ], 
                        data_disk_assignments = [
                            openapi_client.models.data_disk_assignment.DataDiskAssignment(
                                data_disks = [
                                    ''
                                    ], 
                                vm_instance = '', )
                            ], 
                        forwarding_key_bits = 56, 
                        persistent_state_version = 56, 
                        user_stage_to_computation_name_map = {
                            'key' : ''
                            }, ), 
                    worker_harness_port = 56, )
            )
        else:
            return WorkItem(
        )
        """

    def testWorkItem(self):
        """Test WorkItem"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

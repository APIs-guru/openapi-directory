# coding: utf-8

"""
    Dataflow API

    Manages Google Cloud Dataflow projects on Google Cloud Platform.

    The version of the OpenAPI document: v1b3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.report_work_item_status_response import ReportWorkItemStatusResponse

class TestReportWorkItemStatusResponse(unittest.TestCase):
    """ReportWorkItemStatusResponse unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> ReportWorkItemStatusResponse:
        """Test ReportWorkItemStatusResponse
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `ReportWorkItemStatusResponse`
        """
        model = ReportWorkItemStatusResponse()
        if include_optional:
            return ReportWorkItemStatusResponse(
                unified_worker_response = {
                    'key' : null
                    },
                work_item_service_states = [
                    openapi_client.models.work_item_service_state.WorkItemServiceState(
                        complete_work_status = openapi_client.models.status.Status(
                            code = 56, 
                            details = [
                                {
                                    'key' : null
                                    }
                                ], 
                            message = '', ), 
                        harness_data = {
                            'key' : null
                            }, 
                        hot_key_detection = openapi_client.models.hot_key_detection.HotKeyDetection(
                            hot_key_age = '', 
                            system_name = '', 
                            user_step_name = '', ), 
                        lease_expire_time = '', 
                        metric_short_id = [
                            openapi_client.models.metric_short_id.MetricShortId(
                                metric_index = 56, 
                                short_id = '', )
                            ], 
                        next_report_index = '', 
                        report_status_interval = '', 
                        split_request = openapi_client.models.approximate_split_request.ApproximateSplitRequest(
                            fraction_consumed = 1.337, 
                            fraction_of_remainder = 1.337, 
                            position = openapi_client.models.position.Position(
                                byte_offset = '', 
                                concat_position = openapi_client.models.concat_position.ConcatPosition(
                                    index = 56, ), 
                                end = True, 
                                key = '', 
                                record_index = '', 
                                shuffle_position = '', ), ), 
                        suggested_stop_point = openapi_client.models.approximate_progress.ApproximateProgress(
                            percent_complete = 1.337, 
                            remaining_time = '', ), 
                        suggested_stop_position = openapi_client.models.position.Position(
                            byte_offset = '', 
                            end = True, 
                            key = '', 
                            record_index = '', 
                            shuffle_position = '', ), )
                    ]
            )
        else:
            return ReportWorkItemStatusResponse(
        )
        """

    def testReportWorkItemStatusResponse(self):
        """Test ReportWorkItemStatusResponse"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

# coding: utf-8

"""
    Dataflow API

    Manages Google Cloud Dataflow projects on Google Cloud Platform.

    The version of the OpenAPI document: v1b3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.streaming_config_task import StreamingConfigTask

class TestStreamingConfigTask(unittest.TestCase):
    """StreamingConfigTask unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> StreamingConfigTask:
        """Test StreamingConfigTask
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `StreamingConfigTask`
        """
        model = StreamingConfigTask()
        if include_optional:
            return StreamingConfigTask(
                commit_stream_chunk_size_bytes = '',
                get_data_stream_chunk_size_bytes = '',
                max_work_item_commit_bytes = '',
                streaming_computation_configs = [
                    openapi_client.models.streaming_computation_config.StreamingComputationConfig(
                        computation_id = '', 
                        instructions = [
                            openapi_client.models.parallel_instruction.ParallelInstruction(
                                flatten = openapi_client.models.flatten_instruction.FlattenInstruction(
                                    inputs = [
                                        openapi_client.models.instruction_input.InstructionInput(
                                            output_num = 56, 
                                            producer_instruction_index = 56, )
                                        ], ), 
                                name = '', 
                                original_name = '', 
                                outputs = [
                                    openapi_client.models.instruction_output.InstructionOutput(
                                        codec = {
                                            'key' : null
                                            }, 
                                        name = '', 
                                        only_count_key_bytes = True, 
                                        only_count_value_bytes = True, 
                                        original_name = '', 
                                        system_name = '', )
                                    ], 
                                par_do = openapi_client.models.par_do_instruction.ParDoInstruction(
                                    input = openapi_client.models.instruction_input.InstructionInput(
                                        output_num = 56, 
                                        producer_instruction_index = 56, ), 
                                    multi_output_infos = [
                                        openapi_client.models.multi_output_info.MultiOutputInfo(
                                            tag = '', )
                                        ], 
                                    num_outputs = 56, 
                                    side_inputs = [
                                        openapi_client.models.side_input_info.SideInputInfo(
                                            kind = {
                                                'key' : null
                                                }, 
                                            sources = [
                                                openapi_client.models.source.Source(
                                                    base_specs = [
                                                        {
                                                            'key' : null
                                                            }
                                                        ], 
                                                    does_not_need_splitting = True, 
                                                    metadata = openapi_client.models.source_metadata.SourceMetadata(
                                                        estimated_size_bytes = '', 
                                                        infinite = True, 
                                                        produces_sorted_keys = True, ), 
                                                    spec = {
                                                        'key' : null
                                                        }, )
                                                ], 
                                            tag = '', )
                                        ], 
                                    user_fn = {
                                        'key' : null
                                        }, ), 
                                partial_group_by_key = openapi_client.models.partial_group_by_key_instruction.PartialGroupByKeyInstruction(
                                    input_element_codec = {
                                        'key' : null
                                        }, 
                                    original_combine_values_input_store_name = '', 
                                    original_combine_values_step_name = '', 
                                    value_combining_fn = {
                                        'key' : null
                                        }, ), 
                                read = openapi_client.models.read_instruction.ReadInstruction(
                                    source = openapi_client.models.source.Source(
                                        does_not_need_splitting = True, ), ), 
                                system_name = '', 
                                write = openapi_client.models.write_instruction.WriteInstruction(
                                    sink = openapi_client.models.sink.Sink(), ), )
                            ], 
                        stage_name = '', 
                        system_name = '', 
                        transform_user_name_to_state_family = {
                            'key' : ''
                            }, )
                    ],
                user_step_to_state_family_name_map = {
                    'key' : ''
                    },
                windmill_service_endpoint = '',
                windmill_service_port = ''
            )
        else:
            return StreamingConfigTask(
        )
        """

    def testStreamingConfigTask(self):
        """Test StreamingConfigTask"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

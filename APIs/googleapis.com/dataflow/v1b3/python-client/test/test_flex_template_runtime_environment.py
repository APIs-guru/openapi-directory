# coding: utf-8

"""
    Dataflow API

    Manages Google Cloud Dataflow projects on Google Cloud Platform.

    The version of the OpenAPI document: v1b3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.flex_template_runtime_environment import FlexTemplateRuntimeEnvironment

class TestFlexTemplateRuntimeEnvironment(unittest.TestCase):
    """FlexTemplateRuntimeEnvironment unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> FlexTemplateRuntimeEnvironment:
        """Test FlexTemplateRuntimeEnvironment
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `FlexTemplateRuntimeEnvironment`
        """
        model = FlexTemplateRuntimeEnvironment()
        if include_optional:
            return FlexTemplateRuntimeEnvironment(
                additional_experiments = [
                    ''
                    ],
                additional_user_labels = {
                    'key' : ''
                    },
                autoscaling_algorithm = 'AUTOSCALING_ALGORITHM_UNKNOWN',
                disk_size_gb = 56,
                dump_heap_on_oom = True,
                enable_launcher_vm_serial_port_logging = True,
                enable_streaming_engine = True,
                flexrs_goal = 'FLEXRS_UNSPECIFIED',
                ip_configuration = 'WORKER_IP_UNSPECIFIED',
                kms_key_name = '',
                launcher_machine_type = '',
                machine_type = '',
                max_workers = 56,
                network = '',
                num_workers = 56,
                save_heap_dumps_to_gcs_path = '',
                sdk_container_image = '',
                service_account_email = '',
                staging_location = '',
                streaming_mode = 'STREAMING_MODE_UNSPECIFIED',
                subnetwork = '',
                temp_location = '',
                worker_region = '',
                worker_zone = '',
                zone = ''
            )
        else:
            return FlexTemplateRuntimeEnvironment(
        )
        """

    def testFlexTemplateRuntimeEnvironment(self):
        """Test FlexTemplateRuntimeEnvironment"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

# coding: utf-8

"""
    Dataflow API

    Manages Google Cloud Dataflow projects on Google Cloud Platform.

    The version of the OpenAPI document: v1b3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.create_job_from_template_request import CreateJobFromTemplateRequest

class TestCreateJobFromTemplateRequest(unittest.TestCase):
    """CreateJobFromTemplateRequest unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> CreateJobFromTemplateRequest:
        """Test CreateJobFromTemplateRequest
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `CreateJobFromTemplateRequest`
        """
        model = CreateJobFromTemplateRequest()
        if include_optional:
            return CreateJobFromTemplateRequest(
                environment = openapi_client.models.runtime_environment.RuntimeEnvironment(
                    additional_experiments = [
                        ''
                        ], 
                    additional_user_labels = {
                        'key' : ''
                        }, 
                    bypass_temp_dir_validation = True, 
                    disk_size_gb = 56, 
                    enable_streaming_engine = True, 
                    ip_configuration = 'WORKER_IP_UNSPECIFIED', 
                    kms_key_name = '', 
                    machine_type = '', 
                    max_workers = 56, 
                    network = '', 
                    num_workers = 56, 
                    service_account_email = '', 
                    streaming_mode = 'STREAMING_MODE_UNSPECIFIED', 
                    subnetwork = '', 
                    temp_location = '', 
                    worker_region = '', 
                    worker_zone = '', 
                    zone = '', ),
                gcs_path = '',
                job_name = '',
                location = '',
                parameters = {
                    'key' : ''
                    }
            )
        else:
            return CreateJobFromTemplateRequest(
        )
        """

    def testCreateJobFromTemplateRequest(self):
        """Test CreateJobFromTemplateRequest"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

# coding: utf-8

"""
    Dataflow API

    Manages Google Cloud Dataflow projects on Google Cloud Platform.

    The version of the OpenAPI document: v1b3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.metric_value import MetricValue

class TestMetricValue(unittest.TestCase):
    """MetricValue unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> MetricValue:
        """Test MetricValue
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `MetricValue`
        """
        model = MetricValue()
        if include_optional:
            return MetricValue(
                metric = '',
                metric_labels = {
                    'key' : ''
                    },
                value_histogram = openapi_client.models.dataflow_histogram_value.DataflowHistogramValue(
                    bucket_counts = [
                        ''
                        ], 
                    bucket_options = openapi_client.models.bucket_options.BucketOptions(
                        exponential = openapi_client.models.base2_exponent.Base2Exponent(
                            number_of_buckets = 56, 
                            scale = 56, ), 
                        linear = openapi_client.models.linear.Linear(
                            number_of_buckets = 56, 
                            start = 1.337, 
                            width = 1.337, ), ), 
                    count = '', 
                    outlier_stats = openapi_client.models.outlier_stats.OutlierStats(
                        overflow_count = '', 
                        overflow_mean = 1.337, 
                        underflow_count = '', 
                        underflow_mean = 1.337, ), ),
                value_int64 = ''
            )
        else:
            return MetricValue(
        )
        """

    def testMetricValue(self):
        """Test MetricValue"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

# coding: utf-8

"""
    Dataflow API

    Manages Google Cloud Dataflow projects on Google Cloud Platform.

    The version of the OpenAPI document: v1b3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.pipeline_description import PipelineDescription

class TestPipelineDescription(unittest.TestCase):
    """PipelineDescription unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> PipelineDescription:
        """Test PipelineDescription
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `PipelineDescription`
        """
        model = PipelineDescription()
        if include_optional:
            return PipelineDescription(
                display_data = [
                    openapi_client.models.display_data.DisplayData(
                        bool_value = True, 
                        duration_value = '', 
                        float_value = 1.337, 
                        int64_value = '', 
                        java_class_value = '', 
                        key = '', 
                        label = '', 
                        namespace = '', 
                        short_str_value = '', 
                        str_value = '', 
                        timestamp_value = '', 
                        url = '', )
                    ],
                execution_pipeline_stage = [
                    openapi_client.models.execution_stage_summary.ExecutionStageSummary(
                        component_source = [
                            openapi_client.models.component_source.ComponentSource(
                                name = '', 
                                original_transform_or_collection = '', 
                                user_name = '', )
                            ], 
                        component_transform = [
                            openapi_client.models.component_transform.ComponentTransform(
                                name = '', 
                                original_transform = '', 
                                user_name = '', )
                            ], 
                        id = '', 
                        input_source = [
                            openapi_client.models.stage_source.StageSource(
                                name = '', 
                                original_transform_or_collection = '', 
                                size_bytes = '', 
                                user_name = '', )
                            ], 
                        kind = 'UNKNOWN_KIND', 
                        name = '', 
                        output_source = [
                            openapi_client.models.stage_source.StageSource(
                                name = '', 
                                original_transform_or_collection = '', 
                                size_bytes = '', 
                                user_name = '', )
                            ], 
                        prerequisite_stage = [
                            ''
                            ], )
                    ],
                original_pipeline_transform = [
                    openapi_client.models.transform_summary.TransformSummary(
                        display_data = [
                            openapi_client.models.display_data.DisplayData(
                                bool_value = True, 
                                duration_value = '', 
                                float_value = 1.337, 
                                int64_value = '', 
                                java_class_value = '', 
                                key = '', 
                                label = '', 
                                namespace = '', 
                                short_str_value = '', 
                                str_value = '', 
                                timestamp_value = '', 
                                url = '', )
                            ], 
                        id = '', 
                        input_collection_name = [
                            ''
                            ], 
                        kind = 'UNKNOWN_KIND', 
                        name = '', 
                        output_collection_name = [
                            ''
                            ], )
                    ],
                step_names_hash = ''
            )
        else:
            return PipelineDescription(
        )
        """

    def testPipelineDescription(self):
        """Test PipelineDescription"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

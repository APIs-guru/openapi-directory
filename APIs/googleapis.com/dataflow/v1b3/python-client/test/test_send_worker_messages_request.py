# coding: utf-8

"""
    Dataflow API

    Manages Google Cloud Dataflow projects on Google Cloud Platform.

    The version of the OpenAPI document: v1b3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.send_worker_messages_request import SendWorkerMessagesRequest

class TestSendWorkerMessagesRequest(unittest.TestCase):
    """SendWorkerMessagesRequest unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> SendWorkerMessagesRequest:
        """Test SendWorkerMessagesRequest
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `SendWorkerMessagesRequest`
        """
        model = SendWorkerMessagesRequest()
        if include_optional:
            return SendWorkerMessagesRequest(
                location = '',
                worker_messages = [
                    openapi_client.models.worker_message.WorkerMessage(
                        data_sampling_report = openapi_client.models.data_sampling_report.DataSamplingReport(
                            bytes_written_delta = '', 
                            elements_sampled_bytes = '', 
                            elements_sampled_count = '', 
                            exceptions_sampled_count = '', 
                            pcollections_sampled_count = '', 
                            persistence_errors_count = '', 
                            translation_errors_count = '', ), 
                        labels = {
                            'key' : ''
                            }, 
                        per_worker_metrics = openapi_client.models.per_worker_metrics.PerWorkerMetrics(
                            per_step_namespace_metrics = [
                                openapi_client.models.per_step_namespace_metrics.PerStepNamespaceMetrics(
                                    metric_values = [
                                        openapi_client.models.metric_value.MetricValue(
                                            metric = '', 
                                            metric_labels = {
                                                'key' : ''
                                                }, 
                                            value_histogram = openapi_client.models.dataflow_histogram_value.DataflowHistogramValue(
                                                bucket_counts = [
                                                    ''
                                                    ], 
                                                bucket_options = openapi_client.models.bucket_options.BucketOptions(
                                                    exponential = openapi_client.models.base2_exponent.Base2Exponent(
                                                        number_of_buckets = 56, 
                                                        scale = 56, ), 
                                                    linear = openapi_client.models.linear.Linear(
                                                        number_of_buckets = 56, 
                                                        start = 1.337, 
                                                        width = 1.337, ), ), 
                                                count = '', 
                                                outlier_stats = openapi_client.models.outlier_stats.OutlierStats(
                                                    overflow_count = '', 
                                                    overflow_mean = 1.337, 
                                                    underflow_count = '', 
                                                    underflow_mean = 1.337, ), ), 
                                            value_int64 = '', )
                                        ], 
                                    metrics_namespace = '', 
                                    original_step = '', )
                                ], ), 
                        streaming_scaling_report = openapi_client.models.streaming_scaling_report.StreamingScalingReport(
                            active_bundle_count = 56, 
                            active_thread_count = 56, 
                            maximum_bundle_count = 56, 
                            maximum_bytes = '', 
                            maximum_bytes_count = 56, 
                            maximum_thread_count = 56, 
                            outstanding_bundle_count = 56, 
                            outstanding_bytes = '', 
                            outstanding_bytes_count = 56, ), 
                        time = '', 
                        worker_health_report = openapi_client.models.worker_health_report.WorkerHealthReport(
                            msg = '', 
                            pods = [
                                {
                                    'key' : null
                                    }
                                ], 
                            report_interval = '', 
                            vm_broken_code = '', 
                            vm_is_broken = True, 
                            vm_is_healthy = True, 
                            vm_startup_time = '', ), 
                        worker_lifecycle_event = openapi_client.models.worker_lifecycle_event.WorkerLifecycleEvent(
                            container_start_time = '', 
                            event = 'UNKNOWN_EVENT', 
                            metadata = {
                                'key' : ''
                                }, ), 
                        worker_message_code = openapi_client.models.worker_message_code.WorkerMessageCode(
                            code = '', 
                            parameters = {
                                'key' : null
                                }, ), 
                        worker_metrics = openapi_client.models.resource_utilization_report.ResourceUtilizationReport(
                            containers = {
                                'key' : openapi_client.models.resource_utilization_report.ResourceUtilizationReport(
                                    cpu_time = [
                                        openapi_client.models.cpu_time.CPUTime(
                                            rate = 1.337, 
                                            timestamp = '', 
                                            total_ms = '', )
                                        ], 
                                    memory_info = [
                                        openapi_client.models.mem_info.MemInfo(
                                            current_limit_bytes = '', 
                                            current_ooms = '', 
                                            current_rss_bytes = '', 
                                            timestamp = '', 
                                            total_gb_ms = '', )
                                        ], )
                                }, 
                            cpu_time = [
                                openapi_client.models.cpu_time.CPUTime(
                                    rate = 1.337, 
                                    timestamp = '', 
                                    total_ms = '', )
                                ], 
                            memory_info = [
                                openapi_client.models.mem_info.MemInfo(
                                    current_limit_bytes = '', 
                                    current_ooms = '', 
                                    current_rss_bytes = '', 
                                    timestamp = '', 
                                    total_gb_ms = '', )
                                ], ), 
                        worker_shutdown_notice = openapi_client.models.worker_shutdown_notice.WorkerShutdownNotice(
                            reason = '', ), 
                        worker_thread_scaling_report = openapi_client.models.worker_thread_scaling_report.WorkerThreadScalingReport(
                            current_thread_count = 56, ), )
                    ]
            )
        else:
            return SendWorkerMessagesRequest(
        )
        """

    def testSendWorkerMessagesRequest(self):
        """Test SendWorkerMessagesRequest"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

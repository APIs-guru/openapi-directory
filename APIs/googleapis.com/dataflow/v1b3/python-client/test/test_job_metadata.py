# coding: utf-8

"""
    Dataflow API

    Manages Google Cloud Dataflow projects on Google Cloud Platform.

    The version of the OpenAPI document: v1b3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.job_metadata import JobMetadata

class TestJobMetadata(unittest.TestCase):
    """JobMetadata unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> JobMetadata:
        """Test JobMetadata
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `JobMetadata`
        """
        model = JobMetadata()
        if include_optional:
            return JobMetadata(
                big_table_details = [
                    openapi_client.models.big_table_io_details.BigTableIODetails(
                        instance_id = '', 
                        project_id = '', 
                        table_id = '', )
                    ],
                bigquery_details = [
                    openapi_client.models.big_query_io_details.BigQueryIODetails(
                        dataset = '', 
                        project_id = '', 
                        query = '', 
                        table = '', )
                    ],
                datastore_details = [
                    openapi_client.models.datastore_io_details.DatastoreIODetails(
                        namespace = '', 
                        project_id = '', )
                    ],
                file_details = [
                    openapi_client.models.file_io_details.FileIODetails(
                        file_pattern = '', )
                    ],
                pubsub_details = [
                    openapi_client.models.pub_sub_io_details.PubSubIODetails(
                        subscription = '', 
                        topic = '', )
                    ],
                sdk_version = openapi_client.models.sdk_version.SdkVersion(
                    bugs = [
                        openapi_client.models.sdk_bug.SdkBug(
                            severity = 'SEVERITY_UNSPECIFIED', 
                            type = 'TYPE_UNSPECIFIED', 
                            uri = '', )
                        ], 
                    sdk_support_status = 'UNKNOWN', 
                    version = '', 
                    version_display_name = '', ),
                spanner_details = [
                    openapi_client.models.spanner_io_details.SpannerIODetails(
                        database_id = '', 
                        instance_id = '', 
                        project_id = '', )
                    ],
                user_display_properties = {
                    'key' : ''
                    }
            )
        else:
            return JobMetadata(
        )
        """

    def testJobMetadata(self):
        """Test JobMetadata"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

# coding: utf-8

"""
    Dataflow API

    Manages Google Cloud Dataflow projects on Google Cloud Platform.

    The version of the OpenAPI document: v1b3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.work_item_details import WorkItemDetails

class TestWorkItemDetails(unittest.TestCase):
    """WorkItemDetails unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> WorkItemDetails:
        """Test WorkItemDetails
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `WorkItemDetails`
        """
        model = WorkItemDetails()
        if include_optional:
            return WorkItemDetails(
                attempt_id = '',
                end_time = '',
                metrics = [
                    openapi_client.models.metric_update.MetricUpdate(
                        cumulative = True, 
                        distribution = null, 
                        gauge = null, 
                        internal = null, 
                        kind = '', 
                        mean_count = null, 
                        mean_sum = null, 
                        name = openapi_client.models.metric_structured_name.MetricStructuredName(
                            context = {
                                'key' : ''
                                }, 
                            origin = '', ), 
                        scalar = null, 
                        set = null, 
                        update_time = '', )
                    ],
                progress = openapi_client.models.progress_timeseries.ProgressTimeseries(
                    current_progress = 1.337, 
                    data_points = [
                        openapi_client.models.point.Point(
                            time = '', 
                            value = 1.337, )
                        ], ),
                start_time = '',
                state = 'EXECUTION_STATE_UNKNOWN',
                straggler_info = openapi_client.models.straggler_info.StragglerInfo(
                    causes = {
                        'key' : openapi_client.models.straggler_debugging_info.StragglerDebuggingInfo(
                            hot_key = openapi_client.models.hot_key_debugging_info.HotKeyDebuggingInfo(
                                detected_hot_keys = {
                                    'key' : openapi_client.models.hot_key_info.HotKeyInfo(
                                        hot_key_age = '', 
                                        key = '', 
                                        key_truncated = True, )
                                    }, ), )
                        }, 
                    start_time = '', ),
                task_id = ''
            )
        else:
            return WorkItemDetails(
        )
        """

    def testWorkItemDetails(self):
        """Test WorkItemDetails"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

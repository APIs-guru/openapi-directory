# coding: utf-8

"""
    Dataflow API

    Manages Google Cloud Dataflow projects on Google Cloud Platform.

    The version of the OpenAPI document: v1b3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class StreamingScalingReport(BaseModel):
    """
    Contains per-user worker telemetry used in streaming autoscaling.
    """ # noqa: E501
    active_bundle_count: Optional[StrictInt] = Field(default=None, alias="activeBundleCount")
    active_thread_count: Optional[StrictInt] = Field(default=None, description="Current acive thread count.", alias="activeThreadCount")
    maximum_bundle_count: Optional[StrictInt] = Field(default=None, description="Maximum bundle count.", alias="maximumBundleCount")
    maximum_bytes: Optional[StrictStr] = Field(default=None, description="Maximum bytes.", alias="maximumBytes")
    maximum_bytes_count: Optional[StrictInt] = Field(default=None, alias="maximumBytesCount")
    maximum_thread_count: Optional[StrictInt] = Field(default=None, description="Maximum thread count limit.", alias="maximumThreadCount")
    outstanding_bundle_count: Optional[StrictInt] = Field(default=None, description="Current outstanding bundle count.", alias="outstandingBundleCount")
    outstanding_bytes: Optional[StrictStr] = Field(default=None, description="Current outstanding bytes.", alias="outstandingBytes")
    outstanding_bytes_count: Optional[StrictInt] = Field(default=None, alias="outstandingBytesCount")
    __properties: ClassVar[List[str]] = ["activeBundleCount", "activeThreadCount", "maximumBundleCount", "maximumBytes", "maximumBytesCount", "maximumThreadCount", "outstandingBundleCount", "outstandingBytes", "outstandingBytesCount"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of StreamingScalingReport from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of StreamingScalingReport from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "activeBundleCount": obj.get("activeBundleCount"),
            "activeThreadCount": obj.get("activeThreadCount"),
            "maximumBundleCount": obj.get("maximumBundleCount"),
            "maximumBytes": obj.get("maximumBytes"),
            "maximumBytesCount": obj.get("maximumBytesCount"),
            "maximumThreadCount": obj.get("maximumThreadCount"),
            "outstandingBundleCount": obj.get("outstandingBundleCount"),
            "outstandingBytes": obj.get("outstandingBytes"),
            "outstandingBytesCount": obj.get("outstandingBytesCount")
        })
        return _obj



# coding: utf-8

"""
    Dataflow API

    Manages Google Cloud Dataflow projects on Google Cloud Platform.

    The version of the OpenAPI document: v1b3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class PubsubLocation(BaseModel):
    """
    Identifies a pubsub location to use for transferring data into or out of a streaming Dataflow job.
    """ # noqa: E501
    drop_late_data: Optional[StrictBool] = Field(default=None, description="Indicates whether the pipeline allows late-arriving data.", alias="dropLateData")
    dynamic_destinations: Optional[StrictBool] = Field(default=None, description="If true, then this location represents dynamic topics.", alias="dynamicDestinations")
    id_label: Optional[StrictStr] = Field(default=None, description="If set, contains a pubsub label from which to extract record ids. If left empty, record deduplication will be strictly best effort.", alias="idLabel")
    subscription: Optional[StrictStr] = Field(default=None, description="A pubsub subscription, in the form of \"pubsub.googleapis.com/subscriptions//\"")
    timestamp_label: Optional[StrictStr] = Field(default=None, description="If set, contains a pubsub label from which to extract record timestamps. If left empty, record timestamps will be generated upon arrival.", alias="timestampLabel")
    topic: Optional[StrictStr] = Field(default=None, description="A pubsub topic, in the form of \"pubsub.googleapis.com/topics//\"")
    tracking_subscription: Optional[StrictStr] = Field(default=None, description="If set, specifies the pubsub subscription that will be used for tracking custom time timestamps for watermark estimation.", alias="trackingSubscription")
    with_attributes: Optional[StrictBool] = Field(default=None, description="If true, then the client has requested to get pubsub attributes.", alias="withAttributes")
    __properties: ClassVar[List[str]] = ["dropLateData", "dynamicDestinations", "idLabel", "subscription", "timestampLabel", "topic", "trackingSubscription", "withAttributes"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PubsubLocation from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PubsubLocation from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "dropLateData": obj.get("dropLateData"),
            "dynamicDestinations": obj.get("dynamicDestinations"),
            "idLabel": obj.get("idLabel"),
            "subscription": obj.get("subscription"),
            "timestampLabel": obj.get("timestampLabel"),
            "topic": obj.get("topic"),
            "trackingSubscription": obj.get("trackingSubscription"),
            "withAttributes": obj.get("withAttributes")
        })
        return _obj



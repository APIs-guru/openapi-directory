# coding: utf-8

"""
    Dataflow API

    Manages Google Cloud Dataflow projects on Google Cloud Platform.

    The version of the OpenAPI document: v1b3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.metric_update import MetricUpdate
from openapi_client.models.progress_timeseries import ProgressTimeseries
from openapi_client.models.straggler_summary import StragglerSummary
from typing import Optional, Set
from typing_extensions import Self

class StageSummary(BaseModel):
    """
    Information about a particular execution stage of a job.
    """ # noqa: E501
    end_time: Optional[StrictStr] = Field(default=None, description="End time of this stage. If the work item is completed, this is the actual end time of the stage. Otherwise, it is the predicted end time.", alias="endTime")
    metrics: Optional[List[MetricUpdate]] = Field(default=None, description="Metrics for this stage.")
    progress: Optional[ProgressTimeseries] = None
    stage_id: Optional[StrictStr] = Field(default=None, description="ID of this stage", alias="stageId")
    start_time: Optional[StrictStr] = Field(default=None, description="Start time of this stage.", alias="startTime")
    state: Optional[StrictStr] = Field(default=None, description="State of this stage.")
    straggler_summary: Optional[StragglerSummary] = Field(default=None, alias="stragglerSummary")
    __properties: ClassVar[List[str]] = ["endTime", "metrics", "progress", "stageId", "startTime", "state", "stragglerSummary"]

    @field_validator('state')
    def state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['EXECUTION_STATE_UNKNOWN', 'EXECUTION_STATE_NOT_STARTED', 'EXECUTION_STATE_RUNNING', 'EXECUTION_STATE_SUCCEEDED', 'EXECUTION_STATE_FAILED', 'EXECUTION_STATE_CANCELLED']):
            raise ValueError("must be one of enum values ('EXECUTION_STATE_UNKNOWN', 'EXECUTION_STATE_NOT_STARTED', 'EXECUTION_STATE_RUNNING', 'EXECUTION_STATE_SUCCEEDED', 'EXECUTION_STATE_FAILED', 'EXECUTION_STATE_CANCELLED')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of StageSummary from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in metrics (list)
        _items = []
        if self.metrics:
            for _item_metrics in self.metrics:
                if _item_metrics:
                    _items.append(_item_metrics.to_dict())
            _dict['metrics'] = _items
        # override the default output from pydantic by calling `to_dict()` of progress
        if self.progress:
            _dict['progress'] = self.progress.to_dict()
        # override the default output from pydantic by calling `to_dict()` of straggler_summary
        if self.straggler_summary:
            _dict['stragglerSummary'] = self.straggler_summary.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of StageSummary from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "endTime": obj.get("endTime"),
            "metrics": [MetricUpdate.from_dict(_item) for _item in obj["metrics"]] if obj.get("metrics") is not None else None,
            "progress": ProgressTimeseries.from_dict(obj["progress"]) if obj.get("progress") is not None else None,
            "stageId": obj.get("stageId"),
            "startTime": obj.get("startTime"),
            "state": obj.get("state"),
            "stragglerSummary": StragglerSummary.from_dict(obj["stragglerSummary"]) if obj.get("stragglerSummary") is not None else None
        })
        return _obj



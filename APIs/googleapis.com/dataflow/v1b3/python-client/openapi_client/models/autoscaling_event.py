# coding: utf-8

"""
    Dataflow API

    Manages Google Cloud Dataflow projects on Google Cloud Platform.

    The version of the OpenAPI document: v1b3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.structured_message import StructuredMessage
from typing import Optional, Set
from typing_extensions import Self

class AutoscalingEvent(BaseModel):
    """
    A structured message reporting an autoscaling decision made by the Dataflow service.
    """ # noqa: E501
    current_num_workers: Optional[StrictStr] = Field(default=None, description="The current number of workers the job has.", alias="currentNumWorkers")
    description: Optional[StructuredMessage] = None
    event_type: Optional[StrictStr] = Field(default=None, description="The type of autoscaling event to report.", alias="eventType")
    target_num_workers: Optional[StrictStr] = Field(default=None, description="The target number of workers the worker pool wants to resize to use.", alias="targetNumWorkers")
    time: Optional[StrictStr] = Field(default=None, description="The time this event was emitted to indicate a new target or current num_workers value.")
    worker_pool: Optional[StrictStr] = Field(default=None, description="A short and friendly name for the worker pool this event refers to.", alias="workerPool")
    __properties: ClassVar[List[str]] = ["currentNumWorkers", "description", "eventType", "targetNumWorkers", "time", "workerPool"]

    @field_validator('event_type')
    def event_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['TYPE_UNKNOWN', 'TARGET_NUM_WORKERS_CHANGED', 'CURRENT_NUM_WORKERS_CHANGED', 'ACTUATION_FAILURE', 'NO_CHANGE']):
            raise ValueError("must be one of enum values ('TYPE_UNKNOWN', 'TARGET_NUM_WORKERS_CHANGED', 'CURRENT_NUM_WORKERS_CHANGED', 'ACTUATION_FAILURE', 'NO_CHANGE')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AutoscalingEvent from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of description
        if self.description:
            _dict['description'] = self.description.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AutoscalingEvent from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "currentNumWorkers": obj.get("currentNumWorkers"),
            "description": StructuredMessage.from_dict(obj["description"]) if obj.get("description") is not None else None,
            "eventType": obj.get("eventType"),
            "targetNumWorkers": obj.get("targetNumWorkers"),
            "time": obj.get("time"),
            "workerPool": obj.get("workerPool")
        })
        return _obj



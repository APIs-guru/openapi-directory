# coding: utf-8

"""
    Dataflow API

    Manages Google Cloud Dataflow projects on Google Cloud Platform.

    The version of the OpenAPI document: v1b3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class LeaseWorkItemRequest(BaseModel):
    """
    Request to lease WorkItems.
    """ # noqa: E501
    current_worker_time: Optional[StrictStr] = Field(default=None, description="The current timestamp at the worker.", alias="currentWorkerTime")
    location: Optional[StrictStr] = Field(default=None, description="The [regional endpoint] (https://cloud.google.com/dataflow/docs/concepts/regional-endpoints) that contains the WorkItem's job.")
    requested_lease_duration: Optional[StrictStr] = Field(default=None, description="The initial lease period.", alias="requestedLeaseDuration")
    unified_worker_request: Optional[Dict[str, Any]] = Field(default=None, description="Untranslated bag-of-bytes WorkRequest from UnifiedWorker.", alias="unifiedWorkerRequest")
    work_item_types: Optional[List[StrictStr]] = Field(default=None, description="Filter for WorkItem type.", alias="workItemTypes")
    worker_capabilities: Optional[List[StrictStr]] = Field(default=None, description="Worker capabilities. WorkItems might be limited to workers with specific capabilities.", alias="workerCapabilities")
    worker_id: Optional[StrictStr] = Field(default=None, description="Identifies the worker leasing work -- typically the ID of the virtual machine running the worker.", alias="workerId")
    __properties: ClassVar[List[str]] = ["currentWorkerTime", "location", "requestedLeaseDuration", "unifiedWorkerRequest", "workItemTypes", "workerCapabilities", "workerId"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of LeaseWorkItemRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of LeaseWorkItemRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "currentWorkerTime": obj.get("currentWorkerTime"),
            "location": obj.get("location"),
            "requestedLeaseDuration": obj.get("requestedLeaseDuration"),
            "unifiedWorkerRequest": obj.get("unifiedWorkerRequest"),
            "workItemTypes": obj.get("workItemTypes"),
            "workerCapabilities": obj.get("workerCapabilities"),
            "workerId": obj.get("workerId")
        })
        return _obj



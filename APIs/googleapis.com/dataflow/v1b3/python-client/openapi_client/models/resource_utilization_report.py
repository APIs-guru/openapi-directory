# coding: utf-8

"""
    Dataflow API

    Manages Google Cloud Dataflow projects on Google Cloud Platform.

    The version of the OpenAPI document: v1b3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.cpu_time import CPUTime
from openapi_client.models.mem_info import MemInfo
from typing import Optional, Set
from typing_extensions import Self

class ResourceUtilizationReport(BaseModel):
    """
    Worker metrics exported from workers. This contains resource utilization metrics accumulated from a variety of sources. For more information, see go/df-resource-signals.
    """ # noqa: E501
    containers: Optional[Dict[str, ResourceUtilizationReport]] = Field(default=None, description="Per container information. Key: container name.")
    cpu_time: Optional[List[CPUTime]] = Field(default=None, description="CPU utilization samples.", alias="cpuTime")
    memory_info: Optional[List[MemInfo]] = Field(default=None, description="Memory utilization samples.", alias="memoryInfo")
    __properties: ClassVar[List[str]] = ["containers", "cpuTime", "memoryInfo"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ResourceUtilizationReport from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each value in containers (dict)
        _field_dict = {}
        if self.containers:
            for _key_containers in self.containers:
                if self.containers[_key_containers]:
                    _field_dict[_key_containers] = self.containers[_key_containers].to_dict()
            _dict['containers'] = _field_dict
        # override the default output from pydantic by calling `to_dict()` of each item in cpu_time (list)
        _items = []
        if self.cpu_time:
            for _item_cpu_time in self.cpu_time:
                if _item_cpu_time:
                    _items.append(_item_cpu_time.to_dict())
            _dict['cpuTime'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in memory_info (list)
        _items = []
        if self.memory_info:
            for _item_memory_info in self.memory_info:
                if _item_memory_info:
                    _items.append(_item_memory_info.to_dict())
            _dict['memoryInfo'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ResourceUtilizationReport from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "containers": dict(
                (_k, ResourceUtilizationReport.from_dict(_v))
                for _k, _v in obj["containers"].items()
            )
            if obj.get("containers") is not None
            else None,
            "cpuTime": [CPUTime.from_dict(_item) for _item in obj["cpuTime"]] if obj.get("cpuTime") is not None else None,
            "memoryInfo": [MemInfo.from_dict(_item) for _item in obj["memoryInfo"]] if obj.get("memoryInfo") is not None else None
        })
        return _obj

# TODO: Rewrite to not use raise_errors
ResourceUtilizationReport.model_rebuild(raise_errors=False)


# coding: utf-8

"""
    Dataflow API

    Manages Google Cloud Dataflow projects on Google Cloud Platform.

    The version of the OpenAPI document: v1b3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.computation_topology import ComputationTopology
from openapi_client.models.data_disk_assignment import DataDiskAssignment
from typing import Optional, Set
from typing_extensions import Self

class TopologyConfig(BaseModel):
    """
    Global topology of the streaming Dataflow job, including all computations and their sharded locations.
    """ # noqa: E501
    computations: Optional[List[ComputationTopology]] = Field(default=None, description="The computations associated with a streaming Dataflow job.")
    data_disk_assignments: Optional[List[DataDiskAssignment]] = Field(default=None, description="The disks assigned to a streaming Dataflow job.", alias="dataDiskAssignments")
    forwarding_key_bits: Optional[StrictInt] = Field(default=None, description="The size (in bits) of keys that will be assigned to source messages.", alias="forwardingKeyBits")
    persistent_state_version: Optional[StrictInt] = Field(default=None, description="Version number for persistent state.", alias="persistentStateVersion")
    user_stage_to_computation_name_map: Optional[Dict[str, StrictStr]] = Field(default=None, description="Maps user stage names to stable computation names.", alias="userStageToComputationNameMap")
    __properties: ClassVar[List[str]] = ["computations", "dataDiskAssignments", "forwardingKeyBits", "persistentStateVersion", "userStageToComputationNameMap"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of TopologyConfig from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in computations (list)
        _items = []
        if self.computations:
            for _item_computations in self.computations:
                if _item_computations:
                    _items.append(_item_computations.to_dict())
            _dict['computations'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in data_disk_assignments (list)
        _items = []
        if self.data_disk_assignments:
            for _item_data_disk_assignments in self.data_disk_assignments:
                if _item_data_disk_assignments:
                    _items.append(_item_data_disk_assignments.to_dict())
            _dict['dataDiskAssignments'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of TopologyConfig from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "computations": [ComputationTopology.from_dict(_item) for _item in obj["computations"]] if obj.get("computations") is not None else None,
            "dataDiskAssignments": [DataDiskAssignment.from_dict(_item) for _item in obj["dataDiskAssignments"]] if obj.get("dataDiskAssignments") is not None else None,
            "forwardingKeyBits": obj.get("forwardingKeyBits"),
            "persistentStateVersion": obj.get("persistentStateVersion"),
            "userStageToComputationNameMap": obj.get("userStageToComputationNameMap")
        })
        return _obj



# coding: utf-8

"""
    Dataflow API

    Manages Google Cloud Dataflow projects on Google Cloud Platform.

    The version of the OpenAPI document: v1b3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.display_data import DisplayData
from typing import Optional, Set
from typing_extensions import Self

class TransformSummary(BaseModel):
    """
    Description of the type, names/ids, and input/outputs for a transform.
    """ # noqa: E501
    display_data: Optional[List[DisplayData]] = Field(default=None, description="Transform-specific display data.", alias="displayData")
    id: Optional[StrictStr] = Field(default=None, description="SDK generated id of this transform instance.")
    input_collection_name: Optional[List[StrictStr]] = Field(default=None, description="User names for all collection inputs to this transform.", alias="inputCollectionName")
    kind: Optional[StrictStr] = Field(default=None, description="Type of transform.")
    name: Optional[StrictStr] = Field(default=None, description="User provided name for this transform instance.")
    output_collection_name: Optional[List[StrictStr]] = Field(default=None, description="User names for all collection outputs to this transform.", alias="outputCollectionName")
    __properties: ClassVar[List[str]] = ["displayData", "id", "inputCollectionName", "kind", "name", "outputCollectionName"]

    @field_validator('kind')
    def kind_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['UNKNOWN_KIND', 'PAR_DO_KIND', 'GROUP_BY_KEY_KIND', 'FLATTEN_KIND', 'READ_KIND', 'WRITE_KIND', 'CONSTANT_KIND', 'SINGLETON_KIND', 'SHUFFLE_KIND']):
            raise ValueError("must be one of enum values ('UNKNOWN_KIND', 'PAR_DO_KIND', 'GROUP_BY_KEY_KIND', 'FLATTEN_KIND', 'READ_KIND', 'WRITE_KIND', 'CONSTANT_KIND', 'SINGLETON_KIND', 'SHUFFLE_KIND')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of TransformSummary from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in display_data (list)
        _items = []
        if self.display_data:
            for _item_display_data in self.display_data:
                if _item_display_data:
                    _items.append(_item_display_data.to_dict())
            _dict['displayData'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of TransformSummary from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "displayData": [DisplayData.from_dict(_item) for _item in obj["displayData"]] if obj.get("displayData") is not None else None,
            "id": obj.get("id"),
            "inputCollectionName": obj.get("inputCollectionName"),
            "kind": obj.get("kind"),
            "name": obj.get("name"),
            "outputCollectionName": obj.get("outputCollectionName")
        })
        return _obj



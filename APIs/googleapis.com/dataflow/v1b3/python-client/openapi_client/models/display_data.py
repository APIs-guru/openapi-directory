# coding: utf-8

"""
    Dataflow API

    Manages Google Cloud Dataflow projects on Google Cloud Platform.

    The version of the OpenAPI document: v1b3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class DisplayData(BaseModel):
    """
    Data provided with a pipeline or transform to provide descriptive info.
    """ # noqa: E501
    bool_value: Optional[StrictBool] = Field(default=None, description="Contains value if the data is of a boolean type.", alias="boolValue")
    duration_value: Optional[StrictStr] = Field(default=None, description="Contains value if the data is of duration type.", alias="durationValue")
    float_value: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Contains value if the data is of float type.", alias="floatValue")
    int64_value: Optional[StrictStr] = Field(default=None, description="Contains value if the data is of int64 type.", alias="int64Value")
    java_class_value: Optional[StrictStr] = Field(default=None, description="Contains value if the data is of java class type.", alias="javaClassValue")
    key: Optional[StrictStr] = Field(default=None, description="The key identifying the display data. This is intended to be used as a label for the display data when viewed in a dax monitoring system.")
    label: Optional[StrictStr] = Field(default=None, description="An optional label to display in a dax UI for the element.")
    namespace: Optional[StrictStr] = Field(default=None, description="The namespace for the key. This is usually a class name or programming language namespace (i.e. python module) which defines the display data. This allows a dax monitoring system to specially handle the data and perform custom rendering.")
    short_str_value: Optional[StrictStr] = Field(default=None, description="A possible additional shorter value to display. For example a java_class_name_value of com.mypackage.MyDoFn will be stored with MyDoFn as the short_str_value and com.mypackage.MyDoFn as the java_class_name value. short_str_value can be displayed and java_class_name_value will be displayed as a tooltip.", alias="shortStrValue")
    str_value: Optional[StrictStr] = Field(default=None, description="Contains value if the data is of string type.", alias="strValue")
    timestamp_value: Optional[StrictStr] = Field(default=None, description="Contains value if the data is of timestamp type.", alias="timestampValue")
    url: Optional[StrictStr] = Field(default=None, description="An optional full URL.")
    __properties: ClassVar[List[str]] = ["boolValue", "durationValue", "floatValue", "int64Value", "javaClassValue", "key", "label", "namespace", "shortStrValue", "strValue", "timestampValue", "url"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DisplayData from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DisplayData from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "boolValue": obj.get("boolValue"),
            "durationValue": obj.get("durationValue"),
            "floatValue": obj.get("floatValue"),
            "int64Value": obj.get("int64Value"),
            "javaClassValue": obj.get("javaClassValue"),
            "key": obj.get("key"),
            "label": obj.get("label"),
            "namespace": obj.get("namespace"),
            "shortStrValue": obj.get("shortStrValue"),
            "strValue": obj.get("strValue"),
            "timestampValue": obj.get("timestampValue"),
            "url": obj.get("url")
        })
        return _obj



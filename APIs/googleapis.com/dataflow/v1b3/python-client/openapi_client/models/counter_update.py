# coding: utf-8

"""
    Dataflow API

    Manages Google Cloud Dataflow projects on Google Cloud Platform.

    The version of the OpenAPI document: v1b3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from openapi_client.models.counter_structured_name_and_metadata import CounterStructuredNameAndMetadata
from openapi_client.models.distribution_update import DistributionUpdate
from openapi_client.models.floating_point_list import FloatingPointList
from openapi_client.models.floating_point_mean import FloatingPointMean
from openapi_client.models.integer_gauge import IntegerGauge
from openapi_client.models.integer_list import IntegerList
from openapi_client.models.integer_mean import IntegerMean
from openapi_client.models.name_and_kind import NameAndKind
from openapi_client.models.split_int64 import SplitInt64
from openapi_client.models.string_list import StringList
from typing import Optional, Set
from typing_extensions import Self

class CounterUpdate(BaseModel):
    """
    An update to a Counter sent from a worker.
    """ # noqa: E501
    boolean: Optional[StrictBool] = Field(default=None, description="Boolean value for And, Or.")
    cumulative: Optional[StrictBool] = Field(default=None, description="True if this counter is reported as the total cumulative aggregate value accumulated since the worker started working on this WorkItem. By default this is false, indicating that this counter is reported as a delta.")
    distribution: Optional[DistributionUpdate] = None
    floating_point: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Floating point value for Sum, Max, Min.", alias="floatingPoint")
    floating_point_list: Optional[FloatingPointList] = Field(default=None, alias="floatingPointList")
    floating_point_mean: Optional[FloatingPointMean] = Field(default=None, alias="floatingPointMean")
    integer: Optional[SplitInt64] = None
    integer_gauge: Optional[IntegerGauge] = Field(default=None, alias="integerGauge")
    integer_list: Optional[IntegerList] = Field(default=None, alias="integerList")
    integer_mean: Optional[IntegerMean] = Field(default=None, alias="integerMean")
    internal: Optional[Any] = Field(default=None, description="Value for internally-defined counters used by the Dataflow service.")
    name_and_kind: Optional[NameAndKind] = Field(default=None, alias="nameAndKind")
    short_id: Optional[StrictStr] = Field(default=None, description="The service-generated short identifier for this counter. The short_id -> (name, metadata) mapping is constant for the lifetime of a job.", alias="shortId")
    string_list: Optional[StringList] = Field(default=None, alias="stringList")
    structured_name_and_metadata: Optional[CounterStructuredNameAndMetadata] = Field(default=None, alias="structuredNameAndMetadata")
    __properties: ClassVar[List[str]] = ["boolean", "cumulative", "distribution", "floatingPoint", "floatingPointList", "floatingPointMean", "integer", "integerGauge", "integerList", "integerMean", "internal", "nameAndKind", "shortId", "stringList", "structuredNameAndMetadata"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CounterUpdate from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of distribution
        if self.distribution:
            _dict['distribution'] = self.distribution.to_dict()
        # override the default output from pydantic by calling `to_dict()` of floating_point_list
        if self.floating_point_list:
            _dict['floatingPointList'] = self.floating_point_list.to_dict()
        # override the default output from pydantic by calling `to_dict()` of floating_point_mean
        if self.floating_point_mean:
            _dict['floatingPointMean'] = self.floating_point_mean.to_dict()
        # override the default output from pydantic by calling `to_dict()` of integer
        if self.integer:
            _dict['integer'] = self.integer.to_dict()
        # override the default output from pydantic by calling `to_dict()` of integer_gauge
        if self.integer_gauge:
            _dict['integerGauge'] = self.integer_gauge.to_dict()
        # override the default output from pydantic by calling `to_dict()` of integer_list
        if self.integer_list:
            _dict['integerList'] = self.integer_list.to_dict()
        # override the default output from pydantic by calling `to_dict()` of integer_mean
        if self.integer_mean:
            _dict['integerMean'] = self.integer_mean.to_dict()
        # override the default output from pydantic by calling `to_dict()` of name_and_kind
        if self.name_and_kind:
            _dict['nameAndKind'] = self.name_and_kind.to_dict()
        # override the default output from pydantic by calling `to_dict()` of string_list
        if self.string_list:
            _dict['stringList'] = self.string_list.to_dict()
        # override the default output from pydantic by calling `to_dict()` of structured_name_and_metadata
        if self.structured_name_and_metadata:
            _dict['structuredNameAndMetadata'] = self.structured_name_and_metadata.to_dict()
        # set to None if internal (nullable) is None
        # and model_fields_set contains the field
        if self.internal is None and "internal" in self.model_fields_set:
            _dict['internal'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CounterUpdate from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "boolean": obj.get("boolean"),
            "cumulative": obj.get("cumulative"),
            "distribution": DistributionUpdate.from_dict(obj["distribution"]) if obj.get("distribution") is not None else None,
            "floatingPoint": obj.get("floatingPoint"),
            "floatingPointList": FloatingPointList.from_dict(obj["floatingPointList"]) if obj.get("floatingPointList") is not None else None,
            "floatingPointMean": FloatingPointMean.from_dict(obj["floatingPointMean"]) if obj.get("floatingPointMean") is not None else None,
            "integer": SplitInt64.from_dict(obj["integer"]) if obj.get("integer") is not None else None,
            "integerGauge": IntegerGauge.from_dict(obj["integerGauge"]) if obj.get("integerGauge") is not None else None,
            "integerList": IntegerList.from_dict(obj["integerList"]) if obj.get("integerList") is not None else None,
            "integerMean": IntegerMean.from_dict(obj["integerMean"]) if obj.get("integerMean") is not None else None,
            "internal": obj.get("internal"),
            "nameAndKind": NameAndKind.from_dict(obj["nameAndKind"]) if obj.get("nameAndKind") is not None else None,
            "shortId": obj.get("shortId"),
            "stringList": StringList.from_dict(obj["stringList"]) if obj.get("stringList") is not None else None,
            "structuredNameAndMetadata": CounterStructuredNameAndMetadata.from_dict(obj["structuredNameAndMetadata"]) if obj.get("structuredNameAndMetadata") is not None else None
        })
        return _obj



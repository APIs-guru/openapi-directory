# coding: utf-8

"""
    Dataflow API

    Manages Google Cloud Dataflow projects on Google Cloud Platform.

    The version of the OpenAPI document: v1b3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.work_item_status import WorkItemStatus
from typing import Optional, Set
from typing_extensions import Self

class ReportWorkItemStatusRequest(BaseModel):
    """
    Request to report the status of WorkItems.
    """ # noqa: E501
    current_worker_time: Optional[StrictStr] = Field(default=None, description="The current timestamp at the worker.", alias="currentWorkerTime")
    location: Optional[StrictStr] = Field(default=None, description="The [regional endpoint] (https://cloud.google.com/dataflow/docs/concepts/regional-endpoints) that contains the WorkItem's job.")
    unified_worker_request: Optional[Dict[str, Any]] = Field(default=None, description="Untranslated bag-of-bytes WorkProgressUpdateRequest from UnifiedWorker.", alias="unifiedWorkerRequest")
    work_item_statuses: Optional[List[WorkItemStatus]] = Field(default=None, description="The order is unimportant, except that the order of the WorkItemServiceState messages in the ReportWorkItemStatusResponse corresponds to the order of WorkItemStatus messages here.", alias="workItemStatuses")
    worker_id: Optional[StrictStr] = Field(default=None, description="The ID of the worker reporting the WorkItem status. If this does not match the ID of the worker which the Dataflow service believes currently has the lease on the WorkItem, the report will be dropped (with an error response).", alias="workerId")
    __properties: ClassVar[List[str]] = ["currentWorkerTime", "location", "unifiedWorkerRequest", "workItemStatuses", "workerId"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ReportWorkItemStatusRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in work_item_statuses (list)
        _items = []
        if self.work_item_statuses:
            for _item_work_item_statuses in self.work_item_statuses:
                if _item_work_item_statuses:
                    _items.append(_item_work_item_statuses.to_dict())
            _dict['workItemStatuses'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ReportWorkItemStatusRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "currentWorkerTime": obj.get("currentWorkerTime"),
            "location": obj.get("location"),
            "unifiedWorkerRequest": obj.get("unifiedWorkerRequest"),
            "workItemStatuses": [WorkItemStatus.from_dict(_item) for _item in obj["workItemStatuses"]] if obj.get("workItemStatuses") is not None else None,
            "workerId": obj.get("workerId")
        })
        return _obj



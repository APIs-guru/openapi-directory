# coding: utf-8

"""
    Dataflow API

    Manages Google Cloud Dataflow projects on Google Cloud Platform.

    The version of the OpenAPI document: v1b3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.approximate_progress import ApproximateProgress
from openapi_client.models.approximate_split_request import ApproximateSplitRequest
from openapi_client.models.hot_key_detection import HotKeyDetection
from openapi_client.models.metric_short_id import MetricShortId
from openapi_client.models.position import Position
from openapi_client.models.status import Status
from typing import Optional, Set
from typing_extensions import Self

class WorkItemServiceState(BaseModel):
    """
    The Dataflow service's idea of the current state of a WorkItem being processed by a worker.
    """ # noqa: E501
    complete_work_status: Optional[Status] = Field(default=None, alias="completeWorkStatus")
    harness_data: Optional[Dict[str, Any]] = Field(default=None, description="Other data returned by the service, specific to the particular worker harness.", alias="harnessData")
    hot_key_detection: Optional[HotKeyDetection] = Field(default=None, alias="hotKeyDetection")
    lease_expire_time: Optional[StrictStr] = Field(default=None, description="Time at which the current lease will expire.", alias="leaseExpireTime")
    metric_short_id: Optional[List[MetricShortId]] = Field(default=None, description="The short ids that workers should use in subsequent metric updates. Workers should strive to use short ids whenever possible, but it is ok to request the short_id again if a worker lost track of it (e.g. if the worker is recovering from a crash). NOTE: it is possible that the response may have short ids for a subset of the metrics.", alias="metricShortId")
    next_report_index: Optional[StrictStr] = Field(default=None, description="The index value to use for the next report sent by the worker. Note: If the report call fails for whatever reason, the worker should reuse this index for subsequent report attempts.", alias="nextReportIndex")
    report_status_interval: Optional[StrictStr] = Field(default=None, description="New recommended reporting interval.", alias="reportStatusInterval")
    split_request: Optional[ApproximateSplitRequest] = Field(default=None, alias="splitRequest")
    suggested_stop_point: Optional[ApproximateProgress] = Field(default=None, alias="suggestedStopPoint")
    suggested_stop_position: Optional[Position] = Field(default=None, alias="suggestedStopPosition")
    __properties: ClassVar[List[str]] = ["completeWorkStatus", "harnessData", "hotKeyDetection", "leaseExpireTime", "metricShortId", "nextReportIndex", "reportStatusInterval", "splitRequest", "suggestedStopPoint", "suggestedStopPosition"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of WorkItemServiceState from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of complete_work_status
        if self.complete_work_status:
            _dict['completeWorkStatus'] = self.complete_work_status.to_dict()
        # override the default output from pydantic by calling `to_dict()` of hot_key_detection
        if self.hot_key_detection:
            _dict['hotKeyDetection'] = self.hot_key_detection.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in metric_short_id (list)
        _items = []
        if self.metric_short_id:
            for _item_metric_short_id in self.metric_short_id:
                if _item_metric_short_id:
                    _items.append(_item_metric_short_id.to_dict())
            _dict['metricShortId'] = _items
        # override the default output from pydantic by calling `to_dict()` of split_request
        if self.split_request:
            _dict['splitRequest'] = self.split_request.to_dict()
        # override the default output from pydantic by calling `to_dict()` of suggested_stop_point
        if self.suggested_stop_point:
            _dict['suggestedStopPoint'] = self.suggested_stop_point.to_dict()
        # override the default output from pydantic by calling `to_dict()` of suggested_stop_position
        if self.suggested_stop_position:
            _dict['suggestedStopPosition'] = self.suggested_stop_position.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of WorkItemServiceState from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "completeWorkStatus": Status.from_dict(obj["completeWorkStatus"]) if obj.get("completeWorkStatus") is not None else None,
            "harnessData": obj.get("harnessData"),
            "hotKeyDetection": HotKeyDetection.from_dict(obj["hotKeyDetection"]) if obj.get("hotKeyDetection") is not None else None,
            "leaseExpireTime": obj.get("leaseExpireTime"),
            "metricShortId": [MetricShortId.from_dict(_item) for _item in obj["metricShortId"]] if obj.get("metricShortId") is not None else None,
            "nextReportIndex": obj.get("nextReportIndex"),
            "reportStatusInterval": obj.get("reportStatusInterval"),
            "splitRequest": ApproximateSplitRequest.from_dict(obj["splitRequest"]) if obj.get("splitRequest") is not None else None,
            "suggestedStopPoint": ApproximateProgress.from_dict(obj["suggestedStopPoint"]) if obj.get("suggestedStopPoint") is not None else None,
            "suggestedStopPosition": Position.from_dict(obj["suggestedStopPosition"]) if obj.get("suggestedStopPosition") is not None else None
        })
        return _obj



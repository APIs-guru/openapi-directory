# coding: utf-8

"""
    Dataflow API

    Manages Google Cloud Dataflow projects on Google Cloud Platform.

    The version of the OpenAPI document: v1b3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.map_task import MapTask
from openapi_client.models.package import Package
from openapi_client.models.seq_map_task import SeqMapTask
from openapi_client.models.shell_task import ShellTask
from openapi_client.models.source_operation_request import SourceOperationRequest
from openapi_client.models.streaming_computation_task import StreamingComputationTask
from openapi_client.models.streaming_config_task import StreamingConfigTask
from openapi_client.models.streaming_setup_task import StreamingSetupTask
from typing import Optional, Set
from typing_extensions import Self

class WorkItem(BaseModel):
    """
    WorkItem represents basic information about a WorkItem to be executed in the cloud.
    """ # noqa: E501
    configuration: Optional[StrictStr] = Field(default=None, description="Work item-specific configuration as an opaque blob.")
    id: Optional[StrictStr] = Field(default=None, description="Identifies this WorkItem.")
    initial_report_index: Optional[StrictStr] = Field(default=None, description="The initial index to use when reporting the status of the WorkItem.", alias="initialReportIndex")
    job_id: Optional[StrictStr] = Field(default=None, description="Identifies the workflow job this WorkItem belongs to.", alias="jobId")
    lease_expire_time: Optional[StrictStr] = Field(default=None, description="Time when the lease on this Work will expire.", alias="leaseExpireTime")
    map_task: Optional[MapTask] = Field(default=None, alias="mapTask")
    packages: Optional[List[Package]] = Field(default=None, description="Any required packages that need to be fetched in order to execute this WorkItem.")
    project_id: Optional[StrictStr] = Field(default=None, description="Identifies the cloud project this WorkItem belongs to.", alias="projectId")
    report_status_interval: Optional[StrictStr] = Field(default=None, description="Recommended reporting interval.", alias="reportStatusInterval")
    seq_map_task: Optional[SeqMapTask] = Field(default=None, alias="seqMapTask")
    shell_task: Optional[ShellTask] = Field(default=None, alias="shellTask")
    source_operation_task: Optional[SourceOperationRequest] = Field(default=None, alias="sourceOperationTask")
    streaming_computation_task: Optional[StreamingComputationTask] = Field(default=None, alias="streamingComputationTask")
    streaming_config_task: Optional[StreamingConfigTask] = Field(default=None, alias="streamingConfigTask")
    streaming_setup_task: Optional[StreamingSetupTask] = Field(default=None, alias="streamingSetupTask")
    __properties: ClassVar[List[str]] = ["configuration", "id", "initialReportIndex", "jobId", "leaseExpireTime", "mapTask", "packages", "projectId", "reportStatusInterval", "seqMapTask", "shellTask", "sourceOperationTask", "streamingComputationTask", "streamingConfigTask", "streamingSetupTask"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of WorkItem from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of map_task
        if self.map_task:
            _dict['mapTask'] = self.map_task.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in packages (list)
        _items = []
        if self.packages:
            for _item_packages in self.packages:
                if _item_packages:
                    _items.append(_item_packages.to_dict())
            _dict['packages'] = _items
        # override the default output from pydantic by calling `to_dict()` of seq_map_task
        if self.seq_map_task:
            _dict['seqMapTask'] = self.seq_map_task.to_dict()
        # override the default output from pydantic by calling `to_dict()` of shell_task
        if self.shell_task:
            _dict['shellTask'] = self.shell_task.to_dict()
        # override the default output from pydantic by calling `to_dict()` of source_operation_task
        if self.source_operation_task:
            _dict['sourceOperationTask'] = self.source_operation_task.to_dict()
        # override the default output from pydantic by calling `to_dict()` of streaming_computation_task
        if self.streaming_computation_task:
            _dict['streamingComputationTask'] = self.streaming_computation_task.to_dict()
        # override the default output from pydantic by calling `to_dict()` of streaming_config_task
        if self.streaming_config_task:
            _dict['streamingConfigTask'] = self.streaming_config_task.to_dict()
        # override the default output from pydantic by calling `to_dict()` of streaming_setup_task
        if self.streaming_setup_task:
            _dict['streamingSetupTask'] = self.streaming_setup_task.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of WorkItem from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "configuration": obj.get("configuration"),
            "id": obj.get("id"),
            "initialReportIndex": obj.get("initialReportIndex"),
            "jobId": obj.get("jobId"),
            "leaseExpireTime": obj.get("leaseExpireTime"),
            "mapTask": MapTask.from_dict(obj["mapTask"]) if obj.get("mapTask") is not None else None,
            "packages": [Package.from_dict(_item) for _item in obj["packages"]] if obj.get("packages") is not None else None,
            "projectId": obj.get("projectId"),
            "reportStatusInterval": obj.get("reportStatusInterval"),
            "seqMapTask": SeqMapTask.from_dict(obj["seqMapTask"]) if obj.get("seqMapTask") is not None else None,
            "shellTask": ShellTask.from_dict(obj["shellTask"]) if obj.get("shellTask") is not None else None,
            "sourceOperationTask": SourceOperationRequest.from_dict(obj["sourceOperationTask"]) if obj.get("sourceOperationTask") is not None else None,
            "streamingComputationTask": StreamingComputationTask.from_dict(obj["streamingComputationTask"]) if obj.get("streamingComputationTask") is not None else None,
            "streamingConfigTask": StreamingConfigTask.from_dict(obj["streamingConfigTask"]) if obj.get("streamingConfigTask") is not None else None,
            "streamingSetupTask": StreamingSetupTask.from_dict(obj["streamingSetupTask"]) if obj.get("streamingSetupTask") is not None else None
        })
        return _obj



# coding: utf-8

"""
    Dataflow API

    Manages Google Cloud Dataflow projects on Google Cloud Platform.

    The version of the OpenAPI document: v1b3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.instruction_input import InstructionInput
from openapi_client.models.multi_output_info import MultiOutputInfo
from openapi_client.models.side_input_info import SideInputInfo
from typing import Optional, Set
from typing_extensions import Self

class ParDoInstruction(BaseModel):
    """
    An instruction that does a ParDo operation. Takes one main input and zero or more side inputs, and produces zero or more outputs. Runs user code.
    """ # noqa: E501
    input: Optional[InstructionInput] = None
    multi_output_infos: Optional[List[MultiOutputInfo]] = Field(default=None, description="Information about each of the outputs, if user_fn is a MultiDoFn.", alias="multiOutputInfos")
    num_outputs: Optional[StrictInt] = Field(default=None, description="The number of outputs.", alias="numOutputs")
    side_inputs: Optional[List[SideInputInfo]] = Field(default=None, description="Zero or more side inputs.", alias="sideInputs")
    user_fn: Optional[Dict[str, Any]] = Field(default=None, description="The user function to invoke.", alias="userFn")
    __properties: ClassVar[List[str]] = ["input", "multiOutputInfos", "numOutputs", "sideInputs", "userFn"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ParDoInstruction from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of input
        if self.input:
            _dict['input'] = self.input.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in multi_output_infos (list)
        _items = []
        if self.multi_output_infos:
            for _item_multi_output_infos in self.multi_output_infos:
                if _item_multi_output_infos:
                    _items.append(_item_multi_output_infos.to_dict())
            _dict['multiOutputInfos'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in side_inputs (list)
        _items = []
        if self.side_inputs:
            for _item_side_inputs in self.side_inputs:
                if _item_side_inputs:
                    _items.append(_item_side_inputs.to_dict())
            _dict['sideInputs'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ParDoInstruction from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "input": InstructionInput.from_dict(obj["input"]) if obj.get("input") is not None else None,
            "multiOutputInfos": [MultiOutputInfo.from_dict(_item) for _item in obj["multiOutputInfos"]] if obj.get("multiOutputInfos") is not None else None,
            "numOutputs": obj.get("numOutputs"),
            "sideInputs": [SideInputInfo.from_dict(_item) for _item in obj["sideInputs"]] if obj.get("sideInputs") is not None else None,
            "userFn": obj.get("userFn")
        })
        return _obj



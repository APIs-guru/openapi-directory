# coding: utf-8

"""
    Dataflow API

    Manages Google Cloud Dataflow projects on Google Cloud Platform.

    The version of the OpenAPI document: v1b3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.container_spec import ContainerSpec
from openapi_client.models.flex_template_runtime_environment import FlexTemplateRuntimeEnvironment
from typing import Optional, Set
from typing_extensions import Self

class LaunchFlexTemplateParameter(BaseModel):
    """
    Launch FlexTemplate Parameter.
    """ # noqa: E501
    container_spec: Optional[ContainerSpec] = Field(default=None, alias="containerSpec")
    container_spec_gcs_path: Optional[StrictStr] = Field(default=None, description="Cloud Storage path to a file with json serialized ContainerSpec as content.", alias="containerSpecGcsPath")
    environment: Optional[FlexTemplateRuntimeEnvironment] = None
    job_name: Optional[StrictStr] = Field(default=None, description="Required. The job name to use for the created job. For update job request, job name should be same as the existing running job.", alias="jobName")
    launch_options: Optional[Dict[str, StrictStr]] = Field(default=None, description="Launch options for this flex template job. This is a common set of options across languages and templates. This should not be used to pass job parameters.", alias="launchOptions")
    parameters: Optional[Dict[str, StrictStr]] = Field(default=None, description="The parameters for FlexTemplate. Ex. {\"num_workers\":\"5\"}")
    transform_name_mappings: Optional[Dict[str, StrictStr]] = Field(default=None, description="Use this to pass transform_name_mappings for streaming update jobs. Ex:{\"oldTransformName\":\"newTransformName\",...}'", alias="transformNameMappings")
    update: Optional[StrictBool] = Field(default=None, description="Set this to true if you are sending a request to update a running streaming job. When set, the job name should be the same as the running job.")
    __properties: ClassVar[List[str]] = ["containerSpec", "containerSpecGcsPath", "environment", "jobName", "launchOptions", "parameters", "transformNameMappings", "update"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of LaunchFlexTemplateParameter from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of container_spec
        if self.container_spec:
            _dict['containerSpec'] = self.container_spec.to_dict()
        # override the default output from pydantic by calling `to_dict()` of environment
        if self.environment:
            _dict['environment'] = self.environment.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of LaunchFlexTemplateParameter from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "containerSpec": ContainerSpec.from_dict(obj["containerSpec"]) if obj.get("containerSpec") is not None else None,
            "containerSpecGcsPath": obj.get("containerSpecGcsPath"),
            "environment": FlexTemplateRuntimeEnvironment.from_dict(obj["environment"]) if obj.get("environment") is not None else None,
            "jobName": obj.get("jobName"),
            "launchOptions": obj.get("launchOptions"),
            "parameters": obj.get("parameters"),
            "transformNameMappings": obj.get("transformNameMappings"),
            "update": obj.get("update")
        })
        return _obj



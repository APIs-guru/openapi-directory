# coding: utf-8

"""
    Dataflow API

    Manages Google Cloud Dataflow projects on Google Cloud Platform.

    The version of the OpenAPI document: v1b3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.metric_structured_name import MetricStructuredName
from typing import Optional, Set
from typing_extensions import Self

class MetricUpdate(BaseModel):
    """
    Describes the state of a metric.
    """ # noqa: E501
    cumulative: Optional[StrictBool] = Field(default=None, description="True if this metric is reported as the total cumulative aggregate value accumulated since the worker started working on this WorkItem. By default this is false, indicating that this metric is reported as a delta that is not associated with any WorkItem.")
    distribution: Optional[Any] = Field(default=None, description="A struct value describing properties of a distribution of numeric values.")
    gauge: Optional[Any] = Field(default=None, description="A struct value describing properties of a Gauge. Metrics of gauge type show the value of a metric across time, and is aggregated based on the newest value.")
    internal: Optional[Any] = Field(default=None, description="Worker-computed aggregate value for internal use by the Dataflow service.")
    kind: Optional[StrictStr] = Field(default=None, description="Metric aggregation kind. The possible metric aggregation kinds are \"Sum\", \"Max\", \"Min\", \"Mean\", \"Set\", \"And\", \"Or\", and \"Distribution\". The specified aggregation kind is case-insensitive. If omitted, this is not an aggregated value but instead a single metric sample value.")
    mean_count: Optional[Any] = Field(default=None, description="Worker-computed aggregate value for the \"Mean\" aggregation kind. This holds the count of the aggregated values and is used in combination with mean_sum above to obtain the actual mean aggregate value. The only possible value type is Long.", alias="meanCount")
    mean_sum: Optional[Any] = Field(default=None, description="Worker-computed aggregate value for the \"Mean\" aggregation kind. This holds the sum of the aggregated values and is used in combination with mean_count below to obtain the actual mean aggregate value. The only possible value types are Long and Double.", alias="meanSum")
    name: Optional[MetricStructuredName] = None
    scalar: Optional[Any] = Field(default=None, description="Worker-computed aggregate value for aggregation kinds \"Sum\", \"Max\", \"Min\", \"And\", and \"Or\". The possible value types are Long, Double, and Boolean.")
    set: Optional[Any] = Field(default=None, description="Worker-computed aggregate value for the \"Set\" aggregation kind. The only possible value type is a list of Values whose type can be Long, Double, or String, according to the metric's type. All Values in the list must be of the same type.")
    update_time: Optional[StrictStr] = Field(default=None, description="Timestamp associated with the metric value. Optional when workers are reporting work progress; it will be filled in responses from the metrics API.", alias="updateTime")
    __properties: ClassVar[List[str]] = ["cumulative", "distribution", "gauge", "internal", "kind", "meanCount", "meanSum", "name", "scalar", "set", "updateTime"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of MetricUpdate from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of name
        if self.name:
            _dict['name'] = self.name.to_dict()
        # set to None if distribution (nullable) is None
        # and model_fields_set contains the field
        if self.distribution is None and "distribution" in self.model_fields_set:
            _dict['distribution'] = None

        # set to None if gauge (nullable) is None
        # and model_fields_set contains the field
        if self.gauge is None and "gauge" in self.model_fields_set:
            _dict['gauge'] = None

        # set to None if internal (nullable) is None
        # and model_fields_set contains the field
        if self.internal is None and "internal" in self.model_fields_set:
            _dict['internal'] = None

        # set to None if mean_count (nullable) is None
        # and model_fields_set contains the field
        if self.mean_count is None and "mean_count" in self.model_fields_set:
            _dict['meanCount'] = None

        # set to None if mean_sum (nullable) is None
        # and model_fields_set contains the field
        if self.mean_sum is None and "mean_sum" in self.model_fields_set:
            _dict['meanSum'] = None

        # set to None if scalar (nullable) is None
        # and model_fields_set contains the field
        if self.scalar is None and "scalar" in self.model_fields_set:
            _dict['scalar'] = None

        # set to None if set (nullable) is None
        # and model_fields_set contains the field
        if self.set is None and "set" in self.model_fields_set:
            _dict['set'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of MetricUpdate from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "cumulative": obj.get("cumulative"),
            "distribution": obj.get("distribution"),
            "gauge": obj.get("gauge"),
            "internal": obj.get("internal"),
            "kind": obj.get("kind"),
            "meanCount": obj.get("meanCount"),
            "meanSum": obj.get("meanSum"),
            "name": MetricStructuredName.from_dict(obj["name"]) if obj.get("name") is not None else None,
            "scalar": obj.get("scalar"),
            "set": obj.get("set"),
            "updateTime": obj.get("updateTime")
        })
        return _obj



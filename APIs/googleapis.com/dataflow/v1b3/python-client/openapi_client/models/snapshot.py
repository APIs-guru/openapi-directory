# coding: utf-8

"""
    Dataflow API

    Manages Google Cloud Dataflow projects on Google Cloud Platform.

    The version of the OpenAPI document: v1b3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.pubsub_snapshot_metadata import PubsubSnapshotMetadata
from typing import Optional, Set
from typing_extensions import Self

class Snapshot(BaseModel):
    """
    Represents a snapshot of a job.
    """ # noqa: E501
    creation_time: Optional[StrictStr] = Field(default=None, description="The time this snapshot was created.", alias="creationTime")
    description: Optional[StrictStr] = Field(default=None, description="User specified description of the snapshot. Maybe empty.")
    disk_size_bytes: Optional[StrictStr] = Field(default=None, description="The disk byte size of the snapshot. Only available for snapshots in READY state.", alias="diskSizeBytes")
    id: Optional[StrictStr] = Field(default=None, description="The unique ID of this snapshot.")
    project_id: Optional[StrictStr] = Field(default=None, description="The project this snapshot belongs to.", alias="projectId")
    pubsub_metadata: Optional[List[PubsubSnapshotMetadata]] = Field(default=None, description="Pub/Sub snapshot metadata.", alias="pubsubMetadata")
    region: Optional[StrictStr] = Field(default=None, description="Cloud region where this snapshot lives in, e.g., \"us-central1\".")
    source_job_id: Optional[StrictStr] = Field(default=None, description="The job this snapshot was created from.", alias="sourceJobId")
    state: Optional[StrictStr] = Field(default=None, description="State of the snapshot.")
    ttl: Optional[StrictStr] = Field(default=None, description="The time after which this snapshot will be automatically deleted.")
    __properties: ClassVar[List[str]] = ["creationTime", "description", "diskSizeBytes", "id", "projectId", "pubsubMetadata", "region", "sourceJobId", "state", "ttl"]

    @field_validator('state')
    def state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['UNKNOWN_SNAPSHOT_STATE', 'PENDING', 'RUNNING', 'READY', 'FAILED', 'DELETED']):
            raise ValueError("must be one of enum values ('UNKNOWN_SNAPSHOT_STATE', 'PENDING', 'RUNNING', 'READY', 'FAILED', 'DELETED')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Snapshot from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in pubsub_metadata (list)
        _items = []
        if self.pubsub_metadata:
            for _item_pubsub_metadata in self.pubsub_metadata:
                if _item_pubsub_metadata:
                    _items.append(_item_pubsub_metadata.to_dict())
            _dict['pubsubMetadata'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Snapshot from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "creationTime": obj.get("creationTime"),
            "description": obj.get("description"),
            "diskSizeBytes": obj.get("diskSizeBytes"),
            "id": obj.get("id"),
            "projectId": obj.get("projectId"),
            "pubsubMetadata": [PubsubSnapshotMetadata.from_dict(_item) for _item in obj["pubsubMetadata"]] if obj.get("pubsubMetadata") is not None else None,
            "region": obj.get("region"),
            "sourceJobId": obj.get("sourceJobId"),
            "state": obj.get("state"),
            "ttl": obj.get("ttl")
        })
        return _obj



# coding: utf-8

"""
    Dataflow API

    Manages Google Cloud Dataflow projects on Google Cloud Platform.

    The version of the OpenAPI document: v1b3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.display_data import DisplayData
from openapi_client.models.execution_stage_summary import ExecutionStageSummary
from openapi_client.models.transform_summary import TransformSummary
from typing import Optional, Set
from typing_extensions import Self

class PipelineDescription(BaseModel):
    """
    A descriptive representation of submitted pipeline as well as the executed form. This data is provided by the Dataflow service for ease of visualizing the pipeline and interpreting Dataflow provided metrics.
    """ # noqa: E501
    display_data: Optional[List[DisplayData]] = Field(default=None, description="Pipeline level display data.", alias="displayData")
    execution_pipeline_stage: Optional[List[ExecutionStageSummary]] = Field(default=None, description="Description of each stage of execution of the pipeline.", alias="executionPipelineStage")
    original_pipeline_transform: Optional[List[TransformSummary]] = Field(default=None, description="Description of each transform in the pipeline and collections between them.", alias="originalPipelineTransform")
    step_names_hash: Optional[StrictStr] = Field(default=None, description="A hash value of the submitted pipeline portable graph step names if exists.", alias="stepNamesHash")
    __properties: ClassVar[List[str]] = ["displayData", "executionPipelineStage", "originalPipelineTransform", "stepNamesHash"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PipelineDescription from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in display_data (list)
        _items = []
        if self.display_data:
            for _item_display_data in self.display_data:
                if _item_display_data:
                    _items.append(_item_display_data.to_dict())
            _dict['displayData'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in execution_pipeline_stage (list)
        _items = []
        if self.execution_pipeline_stage:
            for _item_execution_pipeline_stage in self.execution_pipeline_stage:
                if _item_execution_pipeline_stage:
                    _items.append(_item_execution_pipeline_stage.to_dict())
            _dict['executionPipelineStage'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in original_pipeline_transform (list)
        _items = []
        if self.original_pipeline_transform:
            for _item_original_pipeline_transform in self.original_pipeline_transform:
                if _item_original_pipeline_transform:
                    _items.append(_item_original_pipeline_transform.to_dict())
            _dict['originalPipelineTransform'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PipelineDescription from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "displayData": [DisplayData.from_dict(_item) for _item in obj["displayData"]] if obj.get("displayData") is not None else None,
            "executionPipelineStage": [ExecutionStageSummary.from_dict(_item) for _item in obj["executionPipelineStage"]] if obj.get("executionPipelineStage") is not None else None,
            "originalPipelineTransform": [TransformSummary.from_dict(_item) for _item in obj["originalPipelineTransform"]] if obj.get("originalPipelineTransform") is not None else None,
            "stepNamesHash": obj.get("stepNamesHash")
        })
        return _obj



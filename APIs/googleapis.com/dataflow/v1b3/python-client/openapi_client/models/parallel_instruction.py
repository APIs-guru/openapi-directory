# coding: utf-8

"""
    Dataflow API

    Manages Google Cloud Dataflow projects on Google Cloud Platform.

    The version of the OpenAPI document: v1b3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.flatten_instruction import FlattenInstruction
from openapi_client.models.instruction_output import InstructionOutput
from openapi_client.models.par_do_instruction import ParDoInstruction
from openapi_client.models.partial_group_by_key_instruction import PartialGroupByKeyInstruction
from openapi_client.models.read_instruction import ReadInstruction
from openapi_client.models.write_instruction import WriteInstruction
from typing import Optional, Set
from typing_extensions import Self

class ParallelInstruction(BaseModel):
    """
    Describes a particular operation comprising a MapTask.
    """ # noqa: E501
    flatten: Optional[FlattenInstruction] = None
    name: Optional[StrictStr] = Field(default=None, description="User-provided name of this operation.")
    original_name: Optional[StrictStr] = Field(default=None, description="System-defined name for the operation in the original workflow graph.", alias="originalName")
    outputs: Optional[List[InstructionOutput]] = Field(default=None, description="Describes the outputs of the instruction.")
    par_do: Optional[ParDoInstruction] = Field(default=None, alias="parDo")
    partial_group_by_key: Optional[PartialGroupByKeyInstruction] = Field(default=None, alias="partialGroupByKey")
    read: Optional[ReadInstruction] = None
    system_name: Optional[StrictStr] = Field(default=None, description="System-defined name of this operation. Unique across the workflow.", alias="systemName")
    write: Optional[WriteInstruction] = None
    __properties: ClassVar[List[str]] = ["flatten", "name", "originalName", "outputs", "parDo", "partialGroupByKey", "read", "systemName", "write"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ParallelInstruction from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of flatten
        if self.flatten:
            _dict['flatten'] = self.flatten.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in outputs (list)
        _items = []
        if self.outputs:
            for _item_outputs in self.outputs:
                if _item_outputs:
                    _items.append(_item_outputs.to_dict())
            _dict['outputs'] = _items
        # override the default output from pydantic by calling `to_dict()` of par_do
        if self.par_do:
            _dict['parDo'] = self.par_do.to_dict()
        # override the default output from pydantic by calling `to_dict()` of partial_group_by_key
        if self.partial_group_by_key:
            _dict['partialGroupByKey'] = self.partial_group_by_key.to_dict()
        # override the default output from pydantic by calling `to_dict()` of read
        if self.read:
            _dict['read'] = self.read.to_dict()
        # override the default output from pydantic by calling `to_dict()` of write
        if self.write:
            _dict['write'] = self.write.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ParallelInstruction from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "flatten": FlattenInstruction.from_dict(obj["flatten"]) if obj.get("flatten") is not None else None,
            "name": obj.get("name"),
            "originalName": obj.get("originalName"),
            "outputs": [InstructionOutput.from_dict(_item) for _item in obj["outputs"]] if obj.get("outputs") is not None else None,
            "parDo": ParDoInstruction.from_dict(obj["parDo"]) if obj.get("parDo") is not None else None,
            "partialGroupByKey": PartialGroupByKeyInstruction.from_dict(obj["partialGroupByKey"]) if obj.get("partialGroupByKey") is not None else None,
            "read": ReadInstruction.from_dict(obj["read"]) if obj.get("read") is not None else None,
            "systemName": obj.get("systemName"),
            "write": WriteInstruction.from_dict(obj["write"]) if obj.get("write") is not None else None
        })
        return _obj



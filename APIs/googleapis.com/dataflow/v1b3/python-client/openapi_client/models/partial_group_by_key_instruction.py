# coding: utf-8

"""
    Dataflow API

    Manages Google Cloud Dataflow projects on Google Cloud Platform.

    The version of the OpenAPI document: v1b3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.instruction_input import InstructionInput
from openapi_client.models.side_input_info import SideInputInfo
from typing import Optional, Set
from typing_extensions import Self

class PartialGroupByKeyInstruction(BaseModel):
    """
    An instruction that does a partial group-by-key. One input and one output.
    """ # noqa: E501
    input: Optional[InstructionInput] = None
    input_element_codec: Optional[Dict[str, Any]] = Field(default=None, description="The codec to use for interpreting an element in the input PTable.", alias="inputElementCodec")
    original_combine_values_input_store_name: Optional[StrictStr] = Field(default=None, description="If this instruction includes a combining function this is the name of the intermediate store between the GBK and the CombineValues.", alias="originalCombineValuesInputStoreName")
    original_combine_values_step_name: Optional[StrictStr] = Field(default=None, description="If this instruction includes a combining function, this is the name of the CombineValues instruction lifted into this instruction.", alias="originalCombineValuesStepName")
    side_inputs: Optional[List[SideInputInfo]] = Field(default=None, description="Zero or more side inputs.", alias="sideInputs")
    value_combining_fn: Optional[Dict[str, Any]] = Field(default=None, description="The value combining function to invoke.", alias="valueCombiningFn")
    __properties: ClassVar[List[str]] = ["input", "inputElementCodec", "originalCombineValuesInputStoreName", "originalCombineValuesStepName", "sideInputs", "valueCombiningFn"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PartialGroupByKeyInstruction from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of input
        if self.input:
            _dict['input'] = self.input.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in side_inputs (list)
        _items = []
        if self.side_inputs:
            for _item_side_inputs in self.side_inputs:
                if _item_side_inputs:
                    _items.append(_item_side_inputs.to_dict())
            _dict['sideInputs'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PartialGroupByKeyInstruction from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "input": InstructionInput.from_dict(obj["input"]) if obj.get("input") is not None else None,
            "inputElementCodec": obj.get("inputElementCodec"),
            "originalCombineValuesInputStoreName": obj.get("originalCombineValuesInputStoreName"),
            "originalCombineValuesStepName": obj.get("originalCombineValuesStepName"),
            "sideInputs": [SideInputInfo.from_dict(_item) for _item in obj["sideInputs"]] if obj.get("sideInputs") is not None else None,
            "valueCombiningFn": obj.get("valueCombiningFn")
        })
        return _obj



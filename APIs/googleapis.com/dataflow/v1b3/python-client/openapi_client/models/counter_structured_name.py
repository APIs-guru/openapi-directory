# coding: utf-8

"""
    Dataflow API

    Manages Google Cloud Dataflow projects on Google Cloud Platform.

    The version of the OpenAPI document: v1b3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class CounterStructuredName(BaseModel):
    """
    Identifies a counter within a per-job namespace. Counters whose structured names are the same get merged into a single value for the job.
    """ # noqa: E501
    component_step_name: Optional[StrictStr] = Field(default=None, description="Name of the optimized step being executed by the workers.", alias="componentStepName")
    execution_step_name: Optional[StrictStr] = Field(default=None, description="Name of the stage. An execution step contains multiple component steps.", alias="executionStepName")
    input_index: Optional[StrictInt] = Field(default=None, description="Index of an input collection that's being read from/written to as a side input. The index identifies a step's side inputs starting by 1 (e.g. the first side input has input_index 1, the third has input_index 3). Side inputs are identified by a pair of (original_step_name, input_index). This field helps uniquely identify them.", alias="inputIndex")
    name: Optional[StrictStr] = Field(default=None, description="Counter name. Not necessarily globally-unique, but unique within the context of the other fields. Required.")
    origin: Optional[StrictStr] = Field(default=None, description="One of the standard Origins defined above.")
    origin_namespace: Optional[StrictStr] = Field(default=None, description="A string containing a more specific namespace of the counter's origin.", alias="originNamespace")
    original_requesting_step_name: Optional[StrictStr] = Field(default=None, description="The step name requesting an operation, such as GBK. I.e. the ParDo causing a read/write from shuffle to occur, or a read from side inputs.", alias="originalRequestingStepName")
    original_step_name: Optional[StrictStr] = Field(default=None, description="System generated name of the original step in the user's graph, before optimization.", alias="originalStepName")
    portion: Optional[StrictStr] = Field(default=None, description="Portion of this counter, either key or value.")
    worker_id: Optional[StrictStr] = Field(default=None, description="ID of a particular worker.", alias="workerId")
    __properties: ClassVar[List[str]] = ["componentStepName", "executionStepName", "inputIndex", "name", "origin", "originNamespace", "originalRequestingStepName", "originalStepName", "portion", "workerId"]

    @field_validator('origin')
    def origin_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['SYSTEM', 'USER']):
            raise ValueError("must be one of enum values ('SYSTEM', 'USER')")
        return value

    @field_validator('portion')
    def portion_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['ALL', 'KEY', 'VALUE']):
            raise ValueError("must be one of enum values ('ALL', 'KEY', 'VALUE')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CounterStructuredName from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CounterStructuredName from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "componentStepName": obj.get("componentStepName"),
            "executionStepName": obj.get("executionStepName"),
            "inputIndex": obj.get("inputIndex"),
            "name": obj.get("name"),
            "origin": obj.get("origin"),
            "originNamespace": obj.get("originNamespace"),
            "originalRequestingStepName": obj.get("originalRequestingStepName"),
            "originalStepName": obj.get("originalStepName"),
            "portion": obj.get("portion"),
            "workerId": obj.get("workerId")
        })
        return _obj



# coding: utf-8

"""
    Dataflow API

    Manages Google Cloud Dataflow projects on Google Cloud Platform.

    The version of the OpenAPI document: v1b3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.big_query_io_details import BigQueryIODetails
from openapi_client.models.big_table_io_details import BigTableIODetails
from openapi_client.models.datastore_io_details import DatastoreIODetails
from openapi_client.models.file_io_details import FileIODetails
from openapi_client.models.pub_sub_io_details import PubSubIODetails
from openapi_client.models.sdk_version import SdkVersion
from openapi_client.models.spanner_io_details import SpannerIODetails
from typing import Optional, Set
from typing_extensions import Self

class JobMetadata(BaseModel):
    """
    Metadata available primarily for filtering jobs. Will be included in the ListJob response and Job SUMMARY view.
    """ # noqa: E501
    big_table_details: Optional[List[BigTableIODetails]] = Field(default=None, description="Identification of a Cloud Bigtable source used in the Dataflow job.", alias="bigTableDetails")
    bigquery_details: Optional[List[BigQueryIODetails]] = Field(default=None, description="Identification of a BigQuery source used in the Dataflow job.", alias="bigqueryDetails")
    datastore_details: Optional[List[DatastoreIODetails]] = Field(default=None, description="Identification of a Datastore source used in the Dataflow job.", alias="datastoreDetails")
    file_details: Optional[List[FileIODetails]] = Field(default=None, description="Identification of a File source used in the Dataflow job.", alias="fileDetails")
    pubsub_details: Optional[List[PubSubIODetails]] = Field(default=None, description="Identification of a Pub/Sub source used in the Dataflow job.", alias="pubsubDetails")
    sdk_version: Optional[SdkVersion] = Field(default=None, alias="sdkVersion")
    spanner_details: Optional[List[SpannerIODetails]] = Field(default=None, description="Identification of a Spanner source used in the Dataflow job.", alias="spannerDetails")
    user_display_properties: Optional[Dict[str, StrictStr]] = Field(default=None, description="List of display properties to help UI filter jobs.", alias="userDisplayProperties")
    __properties: ClassVar[List[str]] = ["bigTableDetails", "bigqueryDetails", "datastoreDetails", "fileDetails", "pubsubDetails", "sdkVersion", "spannerDetails", "userDisplayProperties"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of JobMetadata from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in big_table_details (list)
        _items = []
        if self.big_table_details:
            for _item_big_table_details in self.big_table_details:
                if _item_big_table_details:
                    _items.append(_item_big_table_details.to_dict())
            _dict['bigTableDetails'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in bigquery_details (list)
        _items = []
        if self.bigquery_details:
            for _item_bigquery_details in self.bigquery_details:
                if _item_bigquery_details:
                    _items.append(_item_bigquery_details.to_dict())
            _dict['bigqueryDetails'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in datastore_details (list)
        _items = []
        if self.datastore_details:
            for _item_datastore_details in self.datastore_details:
                if _item_datastore_details:
                    _items.append(_item_datastore_details.to_dict())
            _dict['datastoreDetails'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in file_details (list)
        _items = []
        if self.file_details:
            for _item_file_details in self.file_details:
                if _item_file_details:
                    _items.append(_item_file_details.to_dict())
            _dict['fileDetails'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in pubsub_details (list)
        _items = []
        if self.pubsub_details:
            for _item_pubsub_details in self.pubsub_details:
                if _item_pubsub_details:
                    _items.append(_item_pubsub_details.to_dict())
            _dict['pubsubDetails'] = _items
        # override the default output from pydantic by calling `to_dict()` of sdk_version
        if self.sdk_version:
            _dict['sdkVersion'] = self.sdk_version.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in spanner_details (list)
        _items = []
        if self.spanner_details:
            for _item_spanner_details in self.spanner_details:
                if _item_spanner_details:
                    _items.append(_item_spanner_details.to_dict())
            _dict['spannerDetails'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of JobMetadata from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "bigTableDetails": [BigTableIODetails.from_dict(_item) for _item in obj["bigTableDetails"]] if obj.get("bigTableDetails") is not None else None,
            "bigqueryDetails": [BigQueryIODetails.from_dict(_item) for _item in obj["bigqueryDetails"]] if obj.get("bigqueryDetails") is not None else None,
            "datastoreDetails": [DatastoreIODetails.from_dict(_item) for _item in obj["datastoreDetails"]] if obj.get("datastoreDetails") is not None else None,
            "fileDetails": [FileIODetails.from_dict(_item) for _item in obj["fileDetails"]] if obj.get("fileDetails") is not None else None,
            "pubsubDetails": [PubSubIODetails.from_dict(_item) for _item in obj["pubsubDetails"]] if obj.get("pubsubDetails") is not None else None,
            "sdkVersion": SdkVersion.from_dict(obj["sdkVersion"]) if obj.get("sdkVersion") is not None else None,
            "spannerDetails": [SpannerIODetails.from_dict(_item) for _item in obj["spannerDetails"]] if obj.get("spannerDetails") is not None else None,
            "userDisplayProperties": obj.get("userDisplayProperties")
        })
        return _obj



# coding: utf-8

"""
    Dataflow API

    Manages Google Cloud Dataflow projects on Google Cloud Platform.

    The version of the OpenAPI document: v1b3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt
from typing import Any, ClassVar, Dict, List, Optional, Union
from openapi_client.models.histogram import Histogram
from openapi_client.models.split_int64 import SplitInt64
from typing import Optional, Set
from typing_extensions import Self

class DistributionUpdate(BaseModel):
    """
    A metric value representing a distribution.
    """ # noqa: E501
    count: Optional[SplitInt64] = None
    histogram: Optional[Histogram] = None
    max: Optional[SplitInt64] = None
    min: Optional[SplitInt64] = None
    sum: Optional[SplitInt64] = None
    sum_of_squares: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Use a double since the sum of squares is likely to overflow int64.", alias="sumOfSquares")
    __properties: ClassVar[List[str]] = ["count", "histogram", "max", "min", "sum", "sumOfSquares"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DistributionUpdate from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of count
        if self.count:
            _dict['count'] = self.count.to_dict()
        # override the default output from pydantic by calling `to_dict()` of histogram
        if self.histogram:
            _dict['histogram'] = self.histogram.to_dict()
        # override the default output from pydantic by calling `to_dict()` of max
        if self.max:
            _dict['max'] = self.max.to_dict()
        # override the default output from pydantic by calling `to_dict()` of min
        if self.min:
            _dict['min'] = self.min.to_dict()
        # override the default output from pydantic by calling `to_dict()` of sum
        if self.sum:
            _dict['sum'] = self.sum.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DistributionUpdate from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "count": SplitInt64.from_dict(obj["count"]) if obj.get("count") is not None else None,
            "histogram": Histogram.from_dict(obj["histogram"]) if obj.get("histogram") is not None else None,
            "max": SplitInt64.from_dict(obj["max"]) if obj.get("max") is not None else None,
            "min": SplitInt64.from_dict(obj["min"]) if obj.get("min") is not None else None,
            "sum": SplitInt64.from_dict(obj["sum"]) if obj.get("sum") is not None else None,
            "sumOfSquares": obj.get("sumOfSquares")
        })
        return _obj



# coding: utf-8

"""
    Dataflow API

    Manages Google Cloud Dataflow projects on Google Cloud Platform.

    The version of the OpenAPI document: v1b3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.key_range_location import KeyRangeLocation
from openapi_client.models.state_family_config import StateFamilyConfig
from openapi_client.models.stream_location import StreamLocation
from typing import Optional, Set
from typing_extensions import Self

class ComputationTopology(BaseModel):
    """
    All configuration data for a particular Computation.
    """ # noqa: E501
    computation_id: Optional[StrictStr] = Field(default=None, description="The ID of the computation.", alias="computationId")
    inputs: Optional[List[StreamLocation]] = Field(default=None, description="The inputs to the computation.")
    key_ranges: Optional[List[KeyRangeLocation]] = Field(default=None, description="The key ranges processed by the computation.", alias="keyRanges")
    outputs: Optional[List[StreamLocation]] = Field(default=None, description="The outputs from the computation.")
    state_families: Optional[List[StateFamilyConfig]] = Field(default=None, description="The state family values.", alias="stateFamilies")
    system_stage_name: Optional[StrictStr] = Field(default=None, description="The system stage name.", alias="systemStageName")
    __properties: ClassVar[List[str]] = ["computationId", "inputs", "keyRanges", "outputs", "stateFamilies", "systemStageName"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ComputationTopology from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in inputs (list)
        _items = []
        if self.inputs:
            for _item_inputs in self.inputs:
                if _item_inputs:
                    _items.append(_item_inputs.to_dict())
            _dict['inputs'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in key_ranges (list)
        _items = []
        if self.key_ranges:
            for _item_key_ranges in self.key_ranges:
                if _item_key_ranges:
                    _items.append(_item_key_ranges.to_dict())
            _dict['keyRanges'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in outputs (list)
        _items = []
        if self.outputs:
            for _item_outputs in self.outputs:
                if _item_outputs:
                    _items.append(_item_outputs.to_dict())
            _dict['outputs'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in state_families (list)
        _items = []
        if self.state_families:
            for _item_state_families in self.state_families:
                if _item_state_families:
                    _items.append(_item_state_families.to_dict())
            _dict['stateFamilies'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ComputationTopology from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "computationId": obj.get("computationId"),
            "inputs": [StreamLocation.from_dict(_item) for _item in obj["inputs"]] if obj.get("inputs") is not None else None,
            "keyRanges": [KeyRangeLocation.from_dict(_item) for _item in obj["keyRanges"]] if obj.get("keyRanges") is not None else None,
            "outputs": [StreamLocation.from_dict(_item) for _item in obj["outputs"]] if obj.get("outputs") is not None else None,
            "stateFamilies": [StateFamilyConfig.from_dict(_item) for _item in obj["stateFamilies"]] if obj.get("stateFamilies") is not None else None,
            "systemStageName": obj.get("systemStageName")
        })
        return _obj



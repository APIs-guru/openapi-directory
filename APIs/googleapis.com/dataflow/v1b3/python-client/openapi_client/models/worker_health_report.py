# coding: utf-8

"""
    Dataflow API

    Manages Google Cloud Dataflow projects on Google Cloud Platform.

    The version of the OpenAPI document: v1b3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class WorkerHealthReport(BaseModel):
    """
    WorkerHealthReport contains information about the health of a worker. The VM should be identified by the labels attached to the WorkerMessage that this health ping belongs to.
    """ # noqa: E501
    msg: Optional[StrictStr] = Field(default=None, description="Message describing any unusual health reports.")
    pods: Optional[List[Dict[str, Any]]] = Field(default=None, description="The pods running on the worker. See: http://kubernetes.io/v1.1/docs/api-reference/v1/definitions.html#_v1_pod This field is used by the worker to send the status of the indvidual containers running on each worker.")
    report_interval: Optional[StrictStr] = Field(default=None, description="The interval at which the worker is sending health reports. The default value of 0 should be interpreted as the field is not being explicitly set by the worker.", alias="reportInterval")
    vm_broken_code: Optional[StrictStr] = Field(default=None, description="Code to describe a specific reason, if known, that a VM has reported broken state.", alias="vmBrokenCode")
    vm_is_broken: Optional[StrictBool] = Field(default=None, description="Whether the VM is in a permanently broken state. Broken VMs should be abandoned or deleted ASAP to avoid assigning or completing any work.", alias="vmIsBroken")
    vm_is_healthy: Optional[StrictBool] = Field(default=None, description="Whether the VM is currently healthy.", alias="vmIsHealthy")
    vm_startup_time: Optional[StrictStr] = Field(default=None, description="The time the VM was booted.", alias="vmStartupTime")
    __properties: ClassVar[List[str]] = ["msg", "pods", "reportInterval", "vmBrokenCode", "vmIsBroken", "vmIsHealthy", "vmStartupTime"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of WorkerHealthReport from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of WorkerHealthReport from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "msg": obj.get("msg"),
            "pods": obj.get("pods"),
            "reportInterval": obj.get("reportInterval"),
            "vmBrokenCode": obj.get("vmBrokenCode"),
            "vmIsBroken": obj.get("vmIsBroken"),
            "vmIsHealthy": obj.get("vmIsHealthy"),
            "vmStartupTime": obj.get("vmStartupTime")
        })
        return _obj



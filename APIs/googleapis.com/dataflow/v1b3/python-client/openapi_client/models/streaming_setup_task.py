# coding: utf-8

"""
    Dataflow API

    Manages Google Cloud Dataflow projects on Google Cloud Platform.

    The version of the OpenAPI document: v1b3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.streaming_appliance_snapshot_config import StreamingApplianceSnapshotConfig
from openapi_client.models.topology_config import TopologyConfig
from typing import Optional, Set
from typing_extensions import Self

class StreamingSetupTask(BaseModel):
    """
    A task which initializes part of a streaming Dataflow job.
    """ # noqa: E501
    drain: Optional[StrictBool] = Field(default=None, description="The user has requested drain.")
    receive_work_port: Optional[StrictInt] = Field(default=None, description="The TCP port on which the worker should listen for messages from other streaming computation workers.", alias="receiveWorkPort")
    snapshot_config: Optional[StreamingApplianceSnapshotConfig] = Field(default=None, alias="snapshotConfig")
    streaming_computation_topology: Optional[TopologyConfig] = Field(default=None, alias="streamingComputationTopology")
    worker_harness_port: Optional[StrictInt] = Field(default=None, description="The TCP port used by the worker to communicate with the Dataflow worker harness.", alias="workerHarnessPort")
    __properties: ClassVar[List[str]] = ["drain", "receiveWorkPort", "snapshotConfig", "streamingComputationTopology", "workerHarnessPort"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of StreamingSetupTask from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of snapshot_config
        if self.snapshot_config:
            _dict['snapshotConfig'] = self.snapshot_config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of streaming_computation_topology
        if self.streaming_computation_topology:
            _dict['streamingComputationTopology'] = self.streaming_computation_topology.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of StreamingSetupTask from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "drain": obj.get("drain"),
            "receiveWorkPort": obj.get("receiveWorkPort"),
            "snapshotConfig": StreamingApplianceSnapshotConfig.from_dict(obj["snapshotConfig"]) if obj.get("snapshotConfig") is not None else None,
            "streamingComputationTopology": TopologyConfig.from_dict(obj["streamingComputationTopology"]) if obj.get("streamingComputationTopology") is not None else None,
            "workerHarnessPort": obj.get("workerHarnessPort")
        })
        return _obj



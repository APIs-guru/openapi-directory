# coding: utf-8

"""
    Dataflow API

    Manages Google Cloud Dataflow projects on Google Cloud Platform.

    The version of the OpenAPI document: v1b3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.mounted_data_disk import MountedDataDisk
from openapi_client.models.streaming_computation_ranges import StreamingComputationRanges
from typing import Optional, Set
from typing_extensions import Self

class StreamingComputationTask(BaseModel):
    """
    A task which describes what action should be performed for the specified streaming computation ranges.
    """ # noqa: E501
    computation_ranges: Optional[List[StreamingComputationRanges]] = Field(default=None, description="Contains ranges of a streaming computation this task should apply to.", alias="computationRanges")
    data_disks: Optional[List[MountedDataDisk]] = Field(default=None, description="Describes the set of data disks this task should apply to.", alias="dataDisks")
    task_type: Optional[StrictStr] = Field(default=None, description="A type of streaming computation task.", alias="taskType")
    __properties: ClassVar[List[str]] = ["computationRanges", "dataDisks", "taskType"]

    @field_validator('task_type')
    def task_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['STREAMING_COMPUTATION_TASK_UNKNOWN', 'STREAMING_COMPUTATION_TASK_STOP', 'STREAMING_COMPUTATION_TASK_START']):
            raise ValueError("must be one of enum values ('STREAMING_COMPUTATION_TASK_UNKNOWN', 'STREAMING_COMPUTATION_TASK_STOP', 'STREAMING_COMPUTATION_TASK_START')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of StreamingComputationTask from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in computation_ranges (list)
        _items = []
        if self.computation_ranges:
            for _item_computation_ranges in self.computation_ranges:
                if _item_computation_ranges:
                    _items.append(_item_computation_ranges.to_dict())
            _dict['computationRanges'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in data_disks (list)
        _items = []
        if self.data_disks:
            for _item_data_disks in self.data_disks:
                if _item_data_disks:
                    _items.append(_item_data_disks.to_dict())
            _dict['dataDisks'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of StreamingComputationTask from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "computationRanges": [StreamingComputationRanges.from_dict(_item) for _item in obj["computationRanges"]] if obj.get("computationRanges") is not None else None,
            "dataDisks": [MountedDataDisk.from_dict(_item) for _item in obj["dataDisks"]] if obj.get("dataDisks") is not None else None,
            "taskType": obj.get("taskType")
        })
        return _obj



# coding: utf-8

"""
    Dataflow API

    Manages Google Cloud Dataflow projects on Google Cloud Platform.

    The version of the OpenAPI document: v1b3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class WorkerLifecycleEvent(BaseModel):
    """
    A report of an event in a worker's lifecycle. The proto contains one event, because the worker is expected to asynchronously send each message immediately after the event. Due to this asynchrony, messages may arrive out of order (or missing), and it is up to the consumer to interpret. The timestamp of the event is in the enclosing WorkerMessage proto.
    """ # noqa: E501
    container_start_time: Optional[StrictStr] = Field(default=None, description="The start time of this container. All events will report this so that events can be grouped together across container/VM restarts.", alias="containerStartTime")
    event: Optional[StrictStr] = Field(default=None, description="The event being reported.")
    metadata: Optional[Dict[str, StrictStr]] = Field(default=None, description="Other stats that can accompany an event. E.g. { \"downloaded_bytes\" : \"123456\" }")
    __properties: ClassVar[List[str]] = ["containerStartTime", "event", "metadata"]

    @field_validator('event')
    def event_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['UNKNOWN_EVENT', 'OS_START', 'CONTAINER_START', 'NETWORK_UP', 'STAGING_FILES_DOWNLOAD_START', 'STAGING_FILES_DOWNLOAD_FINISH', 'SDK_INSTALL_START', 'SDK_INSTALL_FINISH']):
            raise ValueError("must be one of enum values ('UNKNOWN_EVENT', 'OS_START', 'CONTAINER_START', 'NETWORK_UP', 'STAGING_FILES_DOWNLOAD_START', 'STAGING_FILES_DOWNLOAD_FINISH', 'SDK_INSTALL_START', 'SDK_INSTALL_FINISH')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of WorkerLifecycleEvent from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of WorkerLifecycleEvent from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "containerStartTime": obj.get("containerStartTime"),
            "event": obj.get("event"),
            "metadata": obj.get("metadata")
        })
        return _obj



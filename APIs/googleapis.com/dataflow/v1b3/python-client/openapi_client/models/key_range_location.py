# coding: utf-8

"""
    Dataflow API

    Manages Google Cloud Dataflow projects on Google Cloud Platform.

    The version of the OpenAPI document: v1b3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class KeyRangeLocation(BaseModel):
    """
    Location information for a specific key-range of a sharded computation. Currently we only support UTF-8 character splits to simplify encoding into JSON.
    """ # noqa: E501
    data_disk: Optional[StrictStr] = Field(default=None, description="The name of the data disk where data for this range is stored. This name is local to the Google Cloud Platform project and uniquely identifies the disk within that project, for example \"myproject-1014-104817-4c2-harness-0-disk-1\".", alias="dataDisk")
    delivery_endpoint: Optional[StrictStr] = Field(default=None, description="The physical location of this range assignment to be used for streaming computation cross-worker message delivery.", alias="deliveryEndpoint")
    deprecated_persistent_directory: Optional[StrictStr] = Field(default=None, description="DEPRECATED. The location of the persistent state for this range, as a persistent directory in the worker local filesystem.", alias="deprecatedPersistentDirectory")
    end: Optional[StrictStr] = Field(default=None, description="The end (exclusive) of the key range.")
    start: Optional[StrictStr] = Field(default=None, description="The start (inclusive) of the key range.")
    __properties: ClassVar[List[str]] = ["dataDisk", "deliveryEndpoint", "deprecatedPersistentDirectory", "end", "start"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of KeyRangeLocation from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of KeyRangeLocation from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "dataDisk": obj.get("dataDisk"),
            "deliveryEndpoint": obj.get("deliveryEndpoint"),
            "deprecatedPersistentDirectory": obj.get("deprecatedPersistentDirectory"),
            "end": obj.get("end"),
            "start": obj.get("start")
        })
        return _obj



# coding: utf-8

"""
    Dataflow API

    Manages Google Cloud Dataflow projects on Google Cloud Platform.

    The version of the OpenAPI document: v1b3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class Position(BaseModel):
    """
    Position defines a position within a collection of data. The value can be either the end position, a key (used with ordered collections), a byte offset, or a record index.
    """ # noqa: E501
    byte_offset: Optional[StrictStr] = Field(default=None, description="Position is a byte offset.", alias="byteOffset")
    concat_position: Optional[ConcatPosition] = Field(default=None, alias="concatPosition")
    end: Optional[StrictBool] = Field(default=None, description="Position is past all other positions. Also useful for the end position of an unbounded range.")
    key: Optional[StrictStr] = Field(default=None, description="Position is a string key, ordered lexicographically.")
    record_index: Optional[StrictStr] = Field(default=None, description="Position is a record index.", alias="recordIndex")
    shuffle_position: Optional[StrictStr] = Field(default=None, description="CloudPosition is a base64 encoded BatchShufflePosition (with FIXED sharding).", alias="shufflePosition")
    __properties: ClassVar[List[str]] = ["byteOffset", "concatPosition", "end", "key", "recordIndex", "shufflePosition"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Position from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of concat_position
        if self.concat_position:
            _dict['concatPosition'] = self.concat_position.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Position from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "byteOffset": obj.get("byteOffset"),
            "concatPosition": ConcatPosition.from_dict(obj["concatPosition"]) if obj.get("concatPosition") is not None else None,
            "end": obj.get("end"),
            "key": obj.get("key"),
            "recordIndex": obj.get("recordIndex"),
            "shufflePosition": obj.get("shufflePosition")
        })
        return _obj

from openapi_client.models.concat_position import ConcatPosition
# TODO: Rewrite to not use raise_errors
Position.model_rebuild(raise_errors=False)


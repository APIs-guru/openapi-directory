# coding: utf-8

"""
    Dataflow API

    Manages Google Cloud Dataflow projects on Google Cloud Platform.

    The version of the OpenAPI document: v1b3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class SendDebugCaptureRequest(BaseModel):
    """
    Request to send encoded debug information. Next ID: 8
    """ # noqa: E501
    component_id: Optional[StrictStr] = Field(default=None, description="The internal component id for which debug information is sent.", alias="componentId")
    data: Optional[StrictStr] = Field(default=None, description="The encoded debug information.")
    data_format: Optional[StrictStr] = Field(default=None, description="Format for the data field above (id=5).", alias="dataFormat")
    location: Optional[StrictStr] = Field(default=None, description="The [regional endpoint] (https://cloud.google.com/dataflow/docs/concepts/regional-endpoints) that contains the job specified by job_id.")
    worker_id: Optional[StrictStr] = Field(default=None, description="The worker id, i.e., VM hostname.", alias="workerId")
    __properties: ClassVar[List[str]] = ["componentId", "data", "dataFormat", "location", "workerId"]

    @field_validator('data_format')
    def data_format_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['DATA_FORMAT_UNSPECIFIED', 'RAW', 'JSON', 'ZLIB', 'BROTLI']):
            raise ValueError("must be one of enum values ('DATA_FORMAT_UNSPECIFIED', 'RAW', 'JSON', 'ZLIB', 'BROTLI')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SendDebugCaptureRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SendDebugCaptureRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "componentId": obj.get("componentId"),
            "data": obj.get("data"),
            "dataFormat": obj.get("dataFormat"),
            "location": obj.get("location"),
            "workerId": obj.get("workerId")
        })
        return _obj



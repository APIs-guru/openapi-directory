# coding: utf-8

"""
    Dataflow API

    Manages Google Cloud Dataflow projects on Google Cloud Platform.

    The version of the OpenAPI document: v1b3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.source_get_metadata_request import SourceGetMetadataRequest
from openapi_client.models.source_split_request import SourceSplitRequest
from typing import Optional, Set
from typing_extensions import Self

class SourceOperationRequest(BaseModel):
    """
    A work item that represents the different operations that can be performed on a user-defined Source specification.
    """ # noqa: E501
    get_metadata: Optional[SourceGetMetadataRequest] = Field(default=None, alias="getMetadata")
    name: Optional[StrictStr] = Field(default=None, description="User-provided name of the Read instruction for this source.")
    original_name: Optional[StrictStr] = Field(default=None, description="System-defined name for the Read instruction for this source in the original workflow graph.", alias="originalName")
    split: Optional[SourceSplitRequest] = None
    stage_name: Optional[StrictStr] = Field(default=None, description="System-defined name of the stage containing the source operation. Unique across the workflow.", alias="stageName")
    system_name: Optional[StrictStr] = Field(default=None, description="System-defined name of the Read instruction for this source. Unique across the workflow.", alias="systemName")
    __properties: ClassVar[List[str]] = ["getMetadata", "name", "originalName", "split", "stageName", "systemName"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SourceOperationRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of get_metadata
        if self.get_metadata:
            _dict['getMetadata'] = self.get_metadata.to_dict()
        # override the default output from pydantic by calling `to_dict()` of split
        if self.split:
            _dict['split'] = self.split.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SourceOperationRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "getMetadata": SourceGetMetadataRequest.from_dict(obj["getMetadata"]) if obj.get("getMetadata") is not None else None,
            "name": obj.get("name"),
            "originalName": obj.get("originalName"),
            "split": SourceSplitRequest.from_dict(obj["split"]) if obj.get("split") is not None else None,
            "stageName": obj.get("stageName"),
            "systemName": obj.get("systemName")
        })
        return _obj



# coding: utf-8

"""
    Dataflow API

    Manages Google Cloud Dataflow projects on Google Cloud Platform.

    The version of the OpenAPI document: v1b3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.streaming_computation_config import StreamingComputationConfig
from typing import Optional, Set
from typing_extensions import Self

class StreamingConfigTask(BaseModel):
    """
    A task that carries configuration information for streaming computations.
    """ # noqa: E501
    commit_stream_chunk_size_bytes: Optional[StrictStr] = Field(default=None, description="Chunk size for commit streams from the harness to windmill.", alias="commitStreamChunkSizeBytes")
    get_data_stream_chunk_size_bytes: Optional[StrictStr] = Field(default=None, description="Chunk size for get data streams from the harness to windmill.", alias="getDataStreamChunkSizeBytes")
    max_work_item_commit_bytes: Optional[StrictStr] = Field(default=None, description="Maximum size for work item commit supported windmill storage layer.", alias="maxWorkItemCommitBytes")
    streaming_computation_configs: Optional[List[StreamingComputationConfig]] = Field(default=None, description="Set of computation configuration information.", alias="streamingComputationConfigs")
    user_step_to_state_family_name_map: Optional[Dict[str, StrictStr]] = Field(default=None, description="Map from user step names to state families.", alias="userStepToStateFamilyNameMap")
    windmill_service_endpoint: Optional[StrictStr] = Field(default=None, description="If present, the worker must use this endpoint to communicate with Windmill Service dispatchers, otherwise the worker must continue to use whatever endpoint it had been using.", alias="windmillServiceEndpoint")
    windmill_service_port: Optional[StrictStr] = Field(default=None, description="If present, the worker must use this port to communicate with Windmill Service dispatchers. Only applicable when windmill_service_endpoint is specified.", alias="windmillServicePort")
    __properties: ClassVar[List[str]] = ["commitStreamChunkSizeBytes", "getDataStreamChunkSizeBytes", "maxWorkItemCommitBytes", "streamingComputationConfigs", "userStepToStateFamilyNameMap", "windmillServiceEndpoint", "windmillServicePort"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of StreamingConfigTask from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in streaming_computation_configs (list)
        _items = []
        if self.streaming_computation_configs:
            for _item_streaming_computation_configs in self.streaming_computation_configs:
                if _item_streaming_computation_configs:
                    _items.append(_item_streaming_computation_configs.to_dict())
            _dict['streamingComputationConfigs'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of StreamingConfigTask from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "commitStreamChunkSizeBytes": obj.get("commitStreamChunkSizeBytes"),
            "getDataStreamChunkSizeBytes": obj.get("getDataStreamChunkSizeBytes"),
            "maxWorkItemCommitBytes": obj.get("maxWorkItemCommitBytes"),
            "streamingComputationConfigs": [StreamingComputationConfig.from_dict(_item) for _item in obj["streamingComputationConfigs"]] if obj.get("streamingComputationConfigs") is not None else None,
            "userStepToStateFamilyNameMap": obj.get("userStepToStateFamilyNameMap"),
            "windmillServiceEndpoint": obj.get("windmillServiceEndpoint"),
            "windmillServicePort": obj.get("windmillServicePort")
        })
        return _obj



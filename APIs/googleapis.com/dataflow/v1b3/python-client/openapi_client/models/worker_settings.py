# coding: utf-8

"""
    Dataflow API

    Manages Google Cloud Dataflow projects on Google Cloud Platform.

    The version of the OpenAPI document: v1b3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class WorkerSettings(BaseModel):
    """
    Provides data to pass through to the worker harness.
    """ # noqa: E501
    base_url: Optional[StrictStr] = Field(default=None, description="The base URL for accessing Google Cloud APIs. When workers access Google Cloud APIs, they logically do so via relative URLs. If this field is specified, it supplies the base URL to use for resolving these relative URLs. The normative algorithm used is defined by RFC 1808, \"Relative Uniform Resource Locators\". If not specified, the default value is \"http://www.googleapis.com/\"", alias="baseUrl")
    reporting_enabled: Optional[StrictBool] = Field(default=None, description="Whether to send work progress updates to the service.", alias="reportingEnabled")
    service_path: Optional[StrictStr] = Field(default=None, description="The Cloud Dataflow service path relative to the root URL, for example, \"dataflow/v1b3/projects\".", alias="servicePath")
    shuffle_service_path: Optional[StrictStr] = Field(default=None, description="The Shuffle service path relative to the root URL, for example, \"shuffle/v1beta1\".", alias="shuffleServicePath")
    temp_storage_prefix: Optional[StrictStr] = Field(default=None, description="The prefix of the resources the system should use for temporary storage. The supported resource type is: Google Cloud Storage: storage.googleapis.com/{bucket}/{object} bucket.storage.googleapis.com/{object}", alias="tempStoragePrefix")
    worker_id: Optional[StrictStr] = Field(default=None, description="The ID of the worker running this pipeline.", alias="workerId")
    __properties: ClassVar[List[str]] = ["baseUrl", "reportingEnabled", "servicePath", "shuffleServicePath", "tempStoragePrefix", "workerId"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of WorkerSettings from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of WorkerSettings from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "baseUrl": obj.get("baseUrl"),
            "reportingEnabled": obj.get("reportingEnabled"),
            "servicePath": obj.get("servicePath"),
            "shuffleServicePath": obj.get("shuffleServicePath"),
            "tempStoragePrefix": obj.get("tempStoragePrefix"),
            "workerId": obj.get("workerId")
        })
        return _obj



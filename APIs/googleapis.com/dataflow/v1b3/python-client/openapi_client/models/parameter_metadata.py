# coding: utf-8

"""
    Dataflow API

    Manages Google Cloud Dataflow projects on Google Cloud Platform.

    The version of the OpenAPI document: v1b3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.parameter_metadata_enum_option import ParameterMetadataEnumOption
from typing import Optional, Set
from typing_extensions import Self

class ParameterMetadata(BaseModel):
    """
    Metadata for a specific parameter.
    """ # noqa: E501
    custom_metadata: Optional[Dict[str, StrictStr]] = Field(default=None, description="Optional. Additional metadata for describing this parameter.", alias="customMetadata")
    default_value: Optional[StrictStr] = Field(default=None, description="Optional. The default values will pre-populate the parameter with the given value from the proto. If default_value is left empty, the parameter will be populated with a default of the relevant type, e.g. false for a boolean.", alias="defaultValue")
    enum_options: Optional[List[ParameterMetadataEnumOption]] = Field(default=None, description="Optional. The options shown when ENUM ParameterType is specified.", alias="enumOptions")
    group_name: Optional[StrictStr] = Field(default=None, description="Optional. Specifies a group name for this parameter to be rendered under. Group header text will be rendered exactly as specified in this field. Only considered when parent_name is NOT provided.", alias="groupName")
    help_text: Optional[StrictStr] = Field(default=None, description="Required. The help text to display for the parameter.", alias="helpText")
    hidden_ui: Optional[StrictBool] = Field(default=None, description="Optional. Whether the parameter should be hidden in the UI.", alias="hiddenUi")
    is_optional: Optional[StrictBool] = Field(default=None, description="Optional. Whether the parameter is optional. Defaults to false.", alias="isOptional")
    label: Optional[StrictStr] = Field(default=None, description="Required. The label to display for the parameter.")
    name: Optional[StrictStr] = Field(default=None, description="Required. The name of the parameter.")
    param_type: Optional[StrictStr] = Field(default=None, description="Optional. The type of the parameter. Used for selecting input picker.", alias="paramType")
    parent_name: Optional[StrictStr] = Field(default=None, description="Optional. Specifies the name of the parent parameter. Used in conjunction with 'parent_trigger_values' to make this parameter conditional (will only be rendered conditionally). Should be mappable to a ParameterMetadata.name field.", alias="parentName")
    parent_trigger_values: Optional[List[StrictStr]] = Field(default=None, description="Optional. The value(s) of the 'parent_name' parameter which will trigger this parameter to be shown. If left empty, ANY non-empty value in parent_name will trigger this parameter to be shown. Only considered when this parameter is conditional (when 'parent_name' has been provided).", alias="parentTriggerValues")
    regexes: Optional[List[StrictStr]] = Field(default=None, description="Optional. Regexes that the parameter must match.")
    __properties: ClassVar[List[str]] = ["customMetadata", "defaultValue", "enumOptions", "groupName", "helpText", "hiddenUi", "isOptional", "label", "name", "paramType", "parentName", "parentTriggerValues", "regexes"]

    @field_validator('param_type')
    def param_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['DEFAULT', 'TEXT', 'GCS_READ_BUCKET', 'GCS_WRITE_BUCKET', 'GCS_READ_FILE', 'GCS_WRITE_FILE', 'GCS_READ_FOLDER', 'GCS_WRITE_FOLDER', 'PUBSUB_TOPIC', 'PUBSUB_SUBSCRIPTION', 'BIGQUERY_TABLE', 'JAVASCRIPT_UDF_FILE', 'SERVICE_ACCOUNT', 'MACHINE_TYPE', 'KMS_KEY_NAME', 'WORKER_REGION', 'WORKER_ZONE', 'BOOLEAN', 'ENUM', 'NUMBER']):
            raise ValueError("must be one of enum values ('DEFAULT', 'TEXT', 'GCS_READ_BUCKET', 'GCS_WRITE_BUCKET', 'GCS_READ_FILE', 'GCS_WRITE_FILE', 'GCS_READ_FOLDER', 'GCS_WRITE_FOLDER', 'PUBSUB_TOPIC', 'PUBSUB_SUBSCRIPTION', 'BIGQUERY_TABLE', 'JAVASCRIPT_UDF_FILE', 'SERVICE_ACCOUNT', 'MACHINE_TYPE', 'KMS_KEY_NAME', 'WORKER_REGION', 'WORKER_ZONE', 'BOOLEAN', 'ENUM', 'NUMBER')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ParameterMetadata from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in enum_options (list)
        _items = []
        if self.enum_options:
            for _item_enum_options in self.enum_options:
                if _item_enum_options:
                    _items.append(_item_enum_options.to_dict())
            _dict['enumOptions'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ParameterMetadata from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "customMetadata": obj.get("customMetadata"),
            "defaultValue": obj.get("defaultValue"),
            "enumOptions": [ParameterMetadataEnumOption.from_dict(_item) for _item in obj["enumOptions"]] if obj.get("enumOptions") is not None else None,
            "groupName": obj.get("groupName"),
            "helpText": obj.get("helpText"),
            "hiddenUi": obj.get("hiddenUi"),
            "isOptional": obj.get("isOptional"),
            "label": obj.get("label"),
            "name": obj.get("name"),
            "paramType": obj.get("paramType"),
            "parentName": obj.get("parentName"),
            "parentTriggerValues": obj.get("parentTriggerValues"),
            "regexes": obj.get("regexes")
        })
        return _obj



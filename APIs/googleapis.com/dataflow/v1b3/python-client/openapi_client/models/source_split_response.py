# coding: utf-8

"""
    Dataflow API

    Manages Google Cloud Dataflow projects on Google Cloud Platform.

    The version of the OpenAPI document: v1b3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.derived_source import DerivedSource
from openapi_client.models.source_split_shard import SourceSplitShard
from typing import Optional, Set
from typing_extensions import Self

class SourceSplitResponse(BaseModel):
    """
    The response to a SourceSplitRequest.
    """ # noqa: E501
    bundles: Optional[List[DerivedSource]] = Field(default=None, description="If outcome is SPLITTING_HAPPENED, then this is a list of bundles into which the source was split. Otherwise this field is ignored. This list can be empty, which means the source represents an empty input.")
    outcome: Optional[StrictStr] = Field(default=None, description="Indicates whether splitting happened and produced a list of bundles. If this is USE_CURRENT_SOURCE_AS_IS, the current source should be processed \"as is\" without splitting. \"bundles\" is ignored in this case. If this is SPLITTING_HAPPENED, then \"bundles\" contains a list of bundles into which the source was split.")
    shards: Optional[List[SourceSplitShard]] = Field(default=None, description="DEPRECATED in favor of bundles.")
    __properties: ClassVar[List[str]] = ["bundles", "outcome", "shards"]

    @field_validator('outcome')
    def outcome_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['SOURCE_SPLIT_OUTCOME_UNKNOWN', 'SOURCE_SPLIT_OUTCOME_USE_CURRENT', 'SOURCE_SPLIT_OUTCOME_SPLITTING_HAPPENED']):
            raise ValueError("must be one of enum values ('SOURCE_SPLIT_OUTCOME_UNKNOWN', 'SOURCE_SPLIT_OUTCOME_USE_CURRENT', 'SOURCE_SPLIT_OUTCOME_SPLITTING_HAPPENED')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SourceSplitResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in bundles (list)
        _items = []
        if self.bundles:
            for _item_bundles in self.bundles:
                if _item_bundles:
                    _items.append(_item_bundles.to_dict())
            _dict['bundles'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in shards (list)
        _items = []
        if self.shards:
            for _item_shards in self.shards:
                if _item_shards:
                    _items.append(_item_shards.to_dict())
            _dict['shards'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SourceSplitResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "bundles": [DerivedSource.from_dict(_item) for _item in obj["bundles"]] if obj.get("bundles") is not None else None,
            "outcome": obj.get("outcome"),
            "shards": [SourceSplitShard.from_dict(_item) for _item in obj["shards"]] if obj.get("shards") is not None else None
        })
        return _obj



# coding: utf-8

"""
    Cloud Deploy API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.release import Release

class TestRelease(unittest.TestCase):
    """Release unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> Release:
        """Test Release
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `Release`
        """
        model = Release()
        if include_optional:
            return Release(
                abandoned = True,
                annotations = {
                    'key' : ''
                    },
                build_artifacts = [
                    openapi_client.models.build_artifact.BuildArtifact(
                        image = '', 
                        tag = '', )
                    ],
                condition = openapi_client.models.release_condition.ReleaseCondition(
                    release_ready_condition = openapi_client.models.release_ready_condition.ReleaseReadyCondition(
                        status = True, ), 
                    skaffold_supported_condition = openapi_client.models.skaffold_supported_condition.SkaffoldSupportedCondition(
                        maintenance_mode_time = '', 
                        skaffold_support_state = 'SKAFFOLD_SUPPORT_STATE_UNSPECIFIED', 
                        status = True, 
                        support_expiration_time = '', ), ),
                create_time = '',
                custom_target_type_snapshots = [
                    openapi_client.models.custom_target_type.CustomTargetType(
                        annotations = {
                            'key' : ''
                            }, 
                        create_time = '', 
                        custom_actions = openapi_client.models.custom_target_skaffold_actions.CustomTargetSkaffoldActions(
                            deploy_action = '', 
                            include_skaffold_modules = [
                                openapi_client.models.skaffold_modules.SkaffoldModules(
                                    configs = [
                                        ''
                                        ], 
                                    git = openapi_client.models.skaffold_git_source.SkaffoldGitSource(
                                        path = '', 
                                        ref = '', 
                                        repo = '', ), 
                                    google_cloud_storage = openapi_client.models.skaffold_gcs_source.SkaffoldGCSSource(
                                        path = '', 
                                        source = '', ), )
                                ], 
                            render_action = '', ), 
                        custom_target_type_id = '', 
                        description = '', 
                        etag = '', 
                        labels = {
                            'key' : ''
                            }, 
                        name = '', 
                        uid = '', 
                        update_time = '', )
                    ],
                delivery_pipeline_snapshot = openapi_client.models.delivery_pipeline.DeliveryPipeline(
                    annotations = {
                        'key' : ''
                        }, 
                    condition = openapi_client.models.pipeline_condition.PipelineCondition(
                        pipeline_ready_condition = openapi_client.models.pipeline_ready_condition.PipelineReadyCondition(
                            status = True, 
                            update_time = '', ), 
                        targets_present_condition = openapi_client.models.targets_present_condition.TargetsPresentCondition(
                            missing_targets = [
                                ''
                                ], 
                            status = True, 
                            update_time = '', ), 
                        targets_type_condition = openapi_client.models.targets_type_condition.TargetsTypeCondition(
                            error_details = '', 
                            status = True, ), ), 
                    create_time = '', 
                    description = '', 
                    etag = '', 
                    labels = {
                        'key' : ''
                        }, 
                    name = '', 
                    serial_pipeline = openapi_client.models.serial_pipeline.SerialPipeline(
                        stages = [
                            openapi_client.models.stage.Stage(
                                deploy_parameters = [
                                    openapi_client.models.deploy_parameters.DeployParameters(
                                        match_target_labels = {
                                            'key' : ''
                                            }, 
                                        values = {
                                            'key' : ''
                                            }, )
                                    ], 
                                profiles = [
                                    ''
                                    ], 
                                strategy = openapi_client.models.strategy.Strategy(
                                    canary = openapi_client.models.canary.Canary(
                                        canary_deployment = openapi_client.models.canary_deployment.CanaryDeployment(
                                            percentages = [
                                                56
                                                ], 
                                            postdeploy = openapi_client.models.postdeploy.Postdeploy(
                                                actions = [
                                                    ''
                                                    ], ), 
                                            predeploy = openapi_client.models.predeploy.Predeploy(), 
                                            verify = True, ), 
                                        custom_canary_deployment = openapi_client.models.custom_canary_deployment.CustomCanaryDeployment(
                                            phase_configs = [
                                                openapi_client.models.phase_config.PhaseConfig(
                                                    percentage = 56, 
                                                    phase_id = '', 
                                                    verify = True, )
                                                ], ), 
                                        runtime_config = openapi_client.models.runtime_config.RuntimeConfig(
                                            cloud_run = openapi_client.models.cloud_run_config.CloudRunConfig(
                                                automatic_traffic_control = True, 
                                                canary_revision_tags = [
                                                    ''
                                                    ], 
                                                prior_revision_tags = [
                                                    ''
                                                    ], 
                                                stable_revision_tags = [
                                                    ''
                                                    ], ), 
                                            kubernetes = openapi_client.models.kubernetes_config.KubernetesConfig(
                                                gateway_service_mesh = openapi_client.models.gateway_service_mesh.GatewayServiceMesh(
                                                    deployment = '', 
                                                    http_route = '', 
                                                    route_update_wait_time = '', 
                                                    service = '', 
                                                    stable_cutback_duration = '', ), 
                                                service_networking = openapi_client.models.service_networking.ServiceNetworking(
                                                    deployment = '', 
                                                    disable_pod_overprovisioning = True, 
                                                    service = '', ), ), ), ), 
                                    standard = openapi_client.models.standard.Standard(
                                        verify = True, ), ), 
                                target_id = '', )
                            ], ), 
                    suspended = True, 
                    uid = '', 
                    update_time = '', ),
                deploy_parameters = {
                    'key' : ''
                    },
                description = '',
                etag = '',
                labels = {
                    'key' : ''
                    },
                name = '',
                render_end_time = '',
                render_start_time = '',
                render_state = 'RENDER_STATE_UNSPECIFIED',
                skaffold_config_path = '',
                skaffold_config_uri = '',
                skaffold_version = '',
                target_artifacts = {
                    'key' : openapi_client.models.target_artifact.TargetArtifact(
                        artifact_uri = '', 
                        manifest_path = '', 
                        phase_artifacts = {
                            'key' : openapi_client.models.phase_artifact.PhaseArtifact(
                                job_manifests_path = '', 
                                manifest_path = '', 
                                skaffold_config_path = '', )
                            }, 
                        skaffold_config_path = '', )
                    },
                target_renders = {
                    'key' : openapi_client.models.target_render.TargetRender(
                        failure_cause = 'FAILURE_CAUSE_UNSPECIFIED', 
                        failure_message = '', 
                        metadata = openapi_client.models.render_metadata.RenderMetadata(
                            cloud_run = openapi_client.models.cloud_run_render_metadata.CloudRunRenderMetadata(
                                service = '', ), 
                            custom = openapi_client.models.custom_metadata.CustomMetadata(
                                values = {
                                    'key' : ''
                                    }, ), ), 
                        rendering_build = '', 
                        rendering_state = 'TARGET_RENDER_STATE_UNSPECIFIED', )
                    },
                target_snapshots = [
                    openapi_client.models.target.Target(
                        annotations = {
                            'key' : ''
                            }, 
                        anthos_cluster = openapi_client.models.anthos_cluster.AnthosCluster(
                            membership = '', ), 
                        create_time = '', 
                        custom_target = openapi_client.models.custom_target.CustomTarget(
                            custom_target_type = '', ), 
                        deploy_parameters = {
                            'key' : ''
                            }, 
                        description = '', 
                        etag = '', 
                        execution_configs = [
                            openapi_client.models.execution_config.ExecutionConfig(
                                artifact_storage = '', 
                                default_pool = openapi_client.models.default_pool.DefaultPool(
                                    artifact_storage = '', 
                                    service_account = '', ), 
                                execution_timeout = '', 
                                private_pool = openapi_client.models.private_pool.PrivatePool(
                                    artifact_storage = '', 
                                    service_account = '', 
                                    worker_pool = '', ), 
                                service_account = '', 
                                usages = [
                                    'EXECUTION_ENVIRONMENT_USAGE_UNSPECIFIED'
                                    ], 
                                worker_pool = '', )
                            ], 
                        gke = openapi_client.models.gke_cluster.GkeCluster(
                            cluster = '', 
                            internal_ip = True, ), 
                        labels = {
                            'key' : ''
                            }, 
                        multi_target = openapi_client.models.multi_target.MultiTarget(
                            target_ids = [
                                ''
                                ], ), 
                        name = '', 
                        require_approval = True, 
                        run = openapi_client.models.cloud_run_location.CloudRunLocation(
                            location = '', ), 
                        target_id = '', 
                        uid = '', 
                        update_time = '', )
                    ],
                uid = ''
            )
        else:
            return Release(
        )
        """

    def testRelease(self):
        """Test Release"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

# coding: utf-8

"""
    Cloud Deploy API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.automation_run import AutomationRun

class TestAutomationRun(unittest.TestCase):
    """AutomationRun unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> AutomationRun:
        """Test AutomationRun
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `AutomationRun`
        """
        model = AutomationRun()
        if include_optional:
            return AutomationRun(
                advance_rollout_operation = openapi_client.models.advance_rollout_operation.AdvanceRolloutOperation(
                    destination_phase = '', 
                    rollout = '', 
                    source_phase = '', 
                    wait = '', ),
                automation_id = '',
                automation_snapshot = openapi_client.models.automation.Automation(
                    annotations = {
                        'key' : ''
                        }, 
                    create_time = '', 
                    description = '', 
                    etag = '', 
                    labels = {
                        'key' : ''
                        }, 
                    name = '', 
                    rules = [
                        openapi_client.models.automation_rule.AutomationRule(
                            advance_rollout_rule = openapi_client.models.advance_rollout_rule.AdvanceRolloutRule(
                                condition = openapi_client.models.automation_rule_condition.AutomationRuleCondition(
                                    targets_present_condition = openapi_client.models.targets_present_condition.TargetsPresentCondition(
                                        missing_targets = [
                                            ''
                                            ], 
                                        status = True, 
                                        update_time = '', ), ), 
                                id = '', 
                                source_phases = [
                                    ''
                                    ], 
                                wait = '', ), 
                            promote_release_rule = openapi_client.models.promote_release_rule.PromoteReleaseRule(
                                destination_phase = '', 
                                destination_target_id = '', 
                                id = '', 
                                wait = '', ), 
                            repair_rollout_rule = openapi_client.models.repair_rollout_rule.RepairRolloutRule(
                                id = '', 
                                jobs = [
                                    ''
                                    ], 
                                repair_modes = [
                                    openapi_client.models.repair_mode.RepairMode(
                                        retry = openapi_client.models.retry.Retry(
                                            attempts = '', 
                                            backoff_mode = 'BACKOFF_MODE_UNSPECIFIED', 
                                            wait = '', ), 
                                        rollback = openapi_client.models.rollback.Rollback(
                                            destination_phase = '', ), )
                                    ], ), )
                        ], 
                    selector = openapi_client.models.automation_resource_selector.AutomationResourceSelector(
                        targets = [
                            openapi_client.models.target_attribute.TargetAttribute(
                                id = '', )
                            ], ), 
                    service_account = '', 
                    suspended = True, 
                    uid = '', 
                    update_time = '', ),
                create_time = '',
                etag = '',
                expire_time = '',
                name = '',
                promote_release_operation = openapi_client.models.promote_release_operation.PromoteReleaseOperation(
                    phase = '', 
                    rollout = '', 
                    target_id = '', 
                    wait = '', ),
                repair_rollout_operation = openapi_client.models.repair_rollout_operation.RepairRolloutOperation(
                    current_repair_mode_index = '', 
                    job_id = '', 
                    phase_id = '', 
                    repair_phases = [
                        openapi_client.models.repair_phase.RepairPhase(
                            retry = openapi_client.models.retry_phase.RetryPhase(
                                attempts = [
                                    openapi_client.models.retry_attempt.RetryAttempt(
                                        attempt = '', 
                                        state = 'REPAIR_STATE_UNSPECIFIED', 
                                        state_desc = '', 
                                        wait = '', )
                                    ], 
                                backoff_mode = 'BACKOFF_MODE_UNSPECIFIED', 
                                job_id = '', 
                                phase_id = '', 
                                total_attempts = '', ), 
                            rollback = openapi_client.models.rollback_attempt.RollbackAttempt(
                                destination_phase = '', 
                                rollout_id = '', 
                                state = 'REPAIR_STATE_UNSPECIFIED', 
                                state_desc = '', ), )
                        ], 
                    rollout = '', ),
                rule_id = '',
                service_account = '',
                state = 'STATE_UNSPECIFIED',
                state_description = '',
                target_id = '',
                update_time = '',
                wait_until_time = ''
            )
        else:
            return AutomationRun(
        )
        """

    def testAutomationRun(self):
        """Test AutomationRun"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

# coding: utf-8

"""
    Cloud Deploy API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.automation_rule import AutomationRule

class TestAutomationRule(unittest.TestCase):
    """AutomationRule unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> AutomationRule:
        """Test AutomationRule
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `AutomationRule`
        """
        model = AutomationRule()
        if include_optional:
            return AutomationRule(
                advance_rollout_rule = openapi_client.models.advance_rollout_rule.AdvanceRolloutRule(
                    condition = openapi_client.models.automation_rule_condition.AutomationRuleCondition(
                        targets_present_condition = openapi_client.models.targets_present_condition.TargetsPresentCondition(
                            missing_targets = [
                                ''
                                ], 
                            status = True, 
                            update_time = '', ), ), 
                    id = '', 
                    source_phases = [
                        ''
                        ], 
                    wait = '', ),
                promote_release_rule = openapi_client.models.promote_release_rule.PromoteReleaseRule(
                    condition = openapi_client.models.automation_rule_condition.AutomationRuleCondition(
                        targets_present_condition = openapi_client.models.targets_present_condition.TargetsPresentCondition(
                            missing_targets = [
                                ''
                                ], 
                            status = True, 
                            update_time = '', ), ), 
                    destination_phase = '', 
                    destination_target_id = '', 
                    id = '', 
                    wait = '', ),
                repair_rollout_rule = openapi_client.models.repair_rollout_rule.RepairRolloutRule(
                    condition = openapi_client.models.automation_rule_condition.AutomationRuleCondition(
                        targets_present_condition = openapi_client.models.targets_present_condition.TargetsPresentCondition(
                            missing_targets = [
                                ''
                                ], 
                            status = True, 
                            update_time = '', ), ), 
                    id = '', 
                    jobs = [
                        ''
                        ], 
                    repair_modes = [
                        openapi_client.models.repair_mode.RepairMode(
                            retry = openapi_client.models.retry.Retry(
                                attempts = '', 
                                backoff_mode = 'BACKOFF_MODE_UNSPECIFIED', 
                                wait = '', ), 
                            rollback = openapi_client.models.rollback.Rollback(
                                destination_phase = '', ), )
                        ], 
                    source_phases = [
                        ''
                        ], )
            )
        else:
            return AutomationRule(
        )
        """

    def testAutomationRule(self):
        """Test AutomationRule"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

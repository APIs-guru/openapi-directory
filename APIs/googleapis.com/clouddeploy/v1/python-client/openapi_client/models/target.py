# coding: utf-8

"""
    Cloud Deploy API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.anthos_cluster import AnthosCluster
from openapi_client.models.cloud_run_location import CloudRunLocation
from openapi_client.models.custom_target import CustomTarget
from openapi_client.models.execution_config import ExecutionConfig
from openapi_client.models.gke_cluster import GkeCluster
from openapi_client.models.multi_target import MultiTarget
from typing import Optional, Set
from typing_extensions import Self

class Target(BaseModel):
    """
    A `Target` resource in the Cloud Deploy API. A `Target` defines a location to which a Skaffold configuration can be deployed.
    """ # noqa: E501
    annotations: Optional[Dict[str, StrictStr]] = Field(default=None, description="Optional. User annotations. These attributes can only be set and used by the user, and not by Cloud Deploy. See https://google.aip.dev/128#annotations for more details such as format and size limitations.")
    anthos_cluster: Optional[AnthosCluster] = Field(default=None, alias="anthosCluster")
    create_time: Optional[StrictStr] = Field(default=None, description="Output only. Time at which the `Target` was created.", alias="createTime")
    custom_target: Optional[CustomTarget] = Field(default=None, alias="customTarget")
    deploy_parameters: Optional[Dict[str, StrictStr]] = Field(default=None, description="Optional. The deploy parameters to use for this target.", alias="deployParameters")
    description: Optional[StrictStr] = Field(default=None, description="Optional. Description of the `Target`. Max length is 255 characters.")
    etag: Optional[StrictStr] = Field(default=None, description="Optional. This checksum is computed by the server based on the value of other fields, and may be sent on update and delete requests to ensure the client has an up-to-date value before proceeding.")
    execution_configs: Optional[List[ExecutionConfig]] = Field(default=None, description="Configurations for all execution that relates to this `Target`. Each `ExecutionEnvironmentUsage` value may only be used in a single configuration; using the same value multiple times is an error. When one or more configurations are specified, they must include the `RENDER` and `DEPLOY` `ExecutionEnvironmentUsage` values. When no configurations are specified, execution will use the default specified in `DefaultPool`.", alias="executionConfigs")
    gke: Optional[GkeCluster] = None
    labels: Optional[Dict[str, StrictStr]] = Field(default=None, description="Optional. Labels are attributes that can be set and used by both the user and by Cloud Deploy. Labels must meet the following constraints: * Keys and values can contain only lowercase letters, numeric characters, underscores, and dashes. * All characters must use UTF-8 encoding, and international characters are allowed. * Keys must start with a lowercase letter or international character. * Each resource is limited to a maximum of 64 labels. Both keys and values are additionally constrained to be <= 128 bytes.")
    multi_target: Optional[MultiTarget] = Field(default=None, alias="multiTarget")
    name: Optional[StrictStr] = Field(default=None, description="Optional. Name of the `Target`. Format is `projects/{project}/locations/{location}/targets/a-z{0,62}`.")
    require_approval: Optional[StrictBool] = Field(default=None, description="Optional. Whether or not the `Target` requires approval.", alias="requireApproval")
    run: Optional[CloudRunLocation] = None
    target_id: Optional[StrictStr] = Field(default=None, description="Output only. Resource id of the `Target`.", alias="targetId")
    uid: Optional[StrictStr] = Field(default=None, description="Output only. Unique identifier of the `Target`.")
    update_time: Optional[StrictStr] = Field(default=None, description="Output only. Most recent time at which the `Target` was updated.", alias="updateTime")
    __properties: ClassVar[List[str]] = ["annotations", "anthosCluster", "createTime", "customTarget", "deployParameters", "description", "etag", "executionConfigs", "gke", "labels", "multiTarget", "name", "requireApproval", "run", "targetId", "uid", "updateTime"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Target from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "create_time",
            "target_id",
            "uid",
            "update_time",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of anthos_cluster
        if self.anthos_cluster:
            _dict['anthosCluster'] = self.anthos_cluster.to_dict()
        # override the default output from pydantic by calling `to_dict()` of custom_target
        if self.custom_target:
            _dict['customTarget'] = self.custom_target.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in execution_configs (list)
        _items = []
        if self.execution_configs:
            for _item_execution_configs in self.execution_configs:
                if _item_execution_configs:
                    _items.append(_item_execution_configs.to_dict())
            _dict['executionConfigs'] = _items
        # override the default output from pydantic by calling `to_dict()` of gke
        if self.gke:
            _dict['gke'] = self.gke.to_dict()
        # override the default output from pydantic by calling `to_dict()` of multi_target
        if self.multi_target:
            _dict['multiTarget'] = self.multi_target.to_dict()
        # override the default output from pydantic by calling `to_dict()` of run
        if self.run:
            _dict['run'] = self.run.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Target from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "annotations": obj.get("annotations"),
            "anthosCluster": AnthosCluster.from_dict(obj["anthosCluster"]) if obj.get("anthosCluster") is not None else None,
            "createTime": obj.get("createTime"),
            "customTarget": CustomTarget.from_dict(obj["customTarget"]) if obj.get("customTarget") is not None else None,
            "deployParameters": obj.get("deployParameters"),
            "description": obj.get("description"),
            "etag": obj.get("etag"),
            "executionConfigs": [ExecutionConfig.from_dict(_item) for _item in obj["executionConfigs"]] if obj.get("executionConfigs") is not None else None,
            "gke": GkeCluster.from_dict(obj["gke"]) if obj.get("gke") is not None else None,
            "labels": obj.get("labels"),
            "multiTarget": MultiTarget.from_dict(obj["multiTarget"]) if obj.get("multiTarget") is not None else None,
            "name": obj.get("name"),
            "requireApproval": obj.get("requireApproval"),
            "run": CloudRunLocation.from_dict(obj["run"]) if obj.get("run") is not None else None,
            "targetId": obj.get("targetId"),
            "uid": obj.get("uid"),
            "updateTime": obj.get("updateTime")
        })
        return _obj



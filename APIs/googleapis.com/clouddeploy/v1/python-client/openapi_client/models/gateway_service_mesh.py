# coding: utf-8

"""
    Cloud Deploy API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class GatewayServiceMesh(BaseModel):
    """
    Information about the Kubernetes Gateway API service mesh configuration.
    """ # noqa: E501
    deployment: Optional[StrictStr] = Field(default=None, description="Required. Name of the Kubernetes Deployment whose traffic is managed by the specified HTTPRoute and Service.")
    http_route: Optional[StrictStr] = Field(default=None, description="Required. Name of the Gateway API HTTPRoute.", alias="httpRoute")
    route_update_wait_time: Optional[StrictStr] = Field(default=None, description="Optional. The time to wait for route updates to propagate. The maximum configurable time is 3 hours, in seconds format. If unspecified, there is no wait time.", alias="routeUpdateWaitTime")
    service: Optional[StrictStr] = Field(default=None, description="Required. Name of the Kubernetes Service.")
    stable_cutback_duration: Optional[StrictStr] = Field(default=None, description="Optional. The amount of time to migrate traffic back from the canary Service to the original Service during the stable phase deployment. If specified, must be between 15s and 3600s. If unspecified, there is no cutback time.", alias="stableCutbackDuration")
    __properties: ClassVar[List[str]] = ["deployment", "httpRoute", "routeUpdateWaitTime", "service", "stableCutbackDuration"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GatewayServiceMesh from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GatewayServiceMesh from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "deployment": obj.get("deployment"),
            "httpRoute": obj.get("httpRoute"),
            "routeUpdateWaitTime": obj.get("routeUpdateWaitTime"),
            "service": obj.get("service"),
            "stableCutbackDuration": obj.get("stableCutbackDuration")
        })
        return _obj



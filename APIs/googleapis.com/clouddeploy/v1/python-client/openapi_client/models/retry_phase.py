# coding: utf-8

"""
    Cloud Deploy API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.retry_attempt import RetryAttempt
from typing import Optional, Set
from typing_extensions import Self

class RetryPhase(BaseModel):
    """
    RetryPhase contains the retry attempts and the metadata for initiating a new attempt.
    """ # noqa: E501
    attempts: Optional[List[RetryAttempt]] = Field(default=None, description="Output only. Detail of a retry action.")
    backoff_mode: Optional[StrictStr] = Field(default=None, description="Output only. The pattern of how the wait time of the retry attempt is calculated.", alias="backoffMode")
    job_id: Optional[StrictStr] = Field(default=None, description="Output only. The job ID for the Job to retry.", alias="jobId")
    phase_id: Optional[StrictStr] = Field(default=None, description="Output only. The phase ID of the phase that includes the job being retried.", alias="phaseId")
    total_attempts: Optional[StrictStr] = Field(default=None, description="Output only. The number of attempts that have been made.", alias="totalAttempts")
    __properties: ClassVar[List[str]] = ["attempts", "backoffMode", "jobId", "phaseId", "totalAttempts"]

    @field_validator('backoff_mode')
    def backoff_mode_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['BACKOFF_MODE_UNSPECIFIED', 'BACKOFF_MODE_LINEAR', 'BACKOFF_MODE_EXPONENTIAL']):
            raise ValueError("must be one of enum values ('BACKOFF_MODE_UNSPECIFIED', 'BACKOFF_MODE_LINEAR', 'BACKOFF_MODE_EXPONENTIAL')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of RetryPhase from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "attempts",
            "backoff_mode",
            "job_id",
            "phase_id",
            "total_attempts",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in attempts (list)
        _items = []
        if self.attempts:
            for _item_attempts in self.attempts:
                if _item_attempts:
                    _items.append(_item_attempts.to_dict())
            _dict['attempts'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of RetryPhase from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "attempts": [RetryAttempt.from_dict(_item) for _item in obj["attempts"]] if obj.get("attempts") is not None else None,
            "backoffMode": obj.get("backoffMode"),
            "jobId": obj.get("jobId"),
            "phaseId": obj.get("phaseId"),
            "totalAttempts": obj.get("totalAttempts")
        })
        return _obj



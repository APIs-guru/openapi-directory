# coding: utf-8

"""
    Cloud Deploy API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.postdeploy_job import PostdeployJob
from openapi_client.models.predeploy_job import PredeployJob
from typing import Optional, Set
from typing_extensions import Self

class Job(BaseModel):
    """
    Job represents an operation for a `Rollout`.
    """ # noqa: E501
    advance_child_rollout_job: Optional[Dict[str, Any]] = Field(default=None, description="An advanceChildRollout Job.", alias="advanceChildRolloutJob")
    create_child_rollout_job: Optional[Dict[str, Any]] = Field(default=None, description="A createChildRollout Job.", alias="createChildRolloutJob")
    deploy_job: Optional[Dict[str, Any]] = Field(default=None, description="A deploy Job.", alias="deployJob")
    id: Optional[StrictStr] = Field(default=None, description="Output only. The ID of the Job.")
    job_run: Optional[StrictStr] = Field(default=None, description="Output only. The name of the `JobRun` responsible for the most recent invocation of this Job.", alias="jobRun")
    postdeploy_job: Optional[PostdeployJob] = Field(default=None, alias="postdeployJob")
    predeploy_job: Optional[PredeployJob] = Field(default=None, alias="predeployJob")
    skip_message: Optional[StrictStr] = Field(default=None, description="Output only. Additional information on why the Job was skipped, if available.", alias="skipMessage")
    state: Optional[StrictStr] = Field(default=None, description="Output only. The current state of the Job.")
    verify_job: Optional[Dict[str, Any]] = Field(default=None, description="A verify Job.", alias="verifyJob")
    __properties: ClassVar[List[str]] = ["advanceChildRolloutJob", "createChildRolloutJob", "deployJob", "id", "jobRun", "postdeployJob", "predeployJob", "skipMessage", "state", "verifyJob"]

    @field_validator('state')
    def state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['STATE_UNSPECIFIED', 'PENDING', 'DISABLED', 'IN_PROGRESS', 'SUCCEEDED', 'FAILED', 'ABORTED', 'SKIPPED', 'IGNORED']):
            raise ValueError("must be one of enum values ('STATE_UNSPECIFIED', 'PENDING', 'DISABLED', 'IN_PROGRESS', 'SUCCEEDED', 'FAILED', 'ABORTED', 'SKIPPED', 'IGNORED')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Job from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "id",
            "job_run",
            "skip_message",
            "state",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of postdeploy_job
        if self.postdeploy_job:
            _dict['postdeployJob'] = self.postdeploy_job.to_dict()
        # override the default output from pydantic by calling `to_dict()` of predeploy_job
        if self.predeploy_job:
            _dict['predeployJob'] = self.predeploy_job.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Job from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "advanceChildRolloutJob": obj.get("advanceChildRolloutJob"),
            "createChildRolloutJob": obj.get("createChildRolloutJob"),
            "deployJob": obj.get("deployJob"),
            "id": obj.get("id"),
            "jobRun": obj.get("jobRun"),
            "postdeployJob": PostdeployJob.from_dict(obj["postdeployJob"]) if obj.get("postdeployJob") is not None else None,
            "predeployJob": PredeployJob.from_dict(obj["predeployJob"]) if obj.get("predeployJob") is not None else None,
            "skipMessage": obj.get("skipMessage"),
            "state": obj.get("state"),
            "verifyJob": obj.get("verifyJob")
        })
        return _obj



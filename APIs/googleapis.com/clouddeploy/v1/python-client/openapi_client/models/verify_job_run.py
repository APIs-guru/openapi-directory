# coding: utf-8

"""
    Cloud Deploy API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class VerifyJobRun(BaseModel):
    """
    VerifyJobRun contains information specific to a verify `JobRun`.
    """ # noqa: E501
    artifact_uri: Optional[StrictStr] = Field(default=None, description="Output only. URI of a directory containing the verify artifacts. This contains the Skaffold event log.", alias="artifactUri")
    build: Optional[StrictStr] = Field(default=None, description="Output only. The resource name of the Cloud Build `Build` object that is used to verify. Format is `projects/{project}/locations/{location}/builds/{build}`.")
    event_log_path: Optional[StrictStr] = Field(default=None, description="Output only. File path of the Skaffold event log relative to the artifact URI.", alias="eventLogPath")
    failure_cause: Optional[StrictStr] = Field(default=None, description="Output only. The reason the verify failed. This will always be unspecified while the verify is in progress or if it succeeded.", alias="failureCause")
    failure_message: Optional[StrictStr] = Field(default=None, description="Output only. Additional information about the verify failure, if available.", alias="failureMessage")
    __properties: ClassVar[List[str]] = ["artifactUri", "build", "eventLogPath", "failureCause", "failureMessage"]

    @field_validator('failure_cause')
    def failure_cause_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['FAILURE_CAUSE_UNSPECIFIED', 'CLOUD_BUILD_UNAVAILABLE', 'EXECUTION_FAILED', 'DEADLINE_EXCEEDED', 'VERIFICATION_CONFIG_NOT_FOUND', 'CLOUD_BUILD_REQUEST_FAILED']):
            raise ValueError("must be one of enum values ('FAILURE_CAUSE_UNSPECIFIED', 'CLOUD_BUILD_UNAVAILABLE', 'EXECUTION_FAILED', 'DEADLINE_EXCEEDED', 'VERIFICATION_CONFIG_NOT_FOUND', 'CLOUD_BUILD_REQUEST_FAILED')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of VerifyJobRun from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "artifact_uri",
            "build",
            "event_log_path",
            "failure_cause",
            "failure_message",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of VerifyJobRun from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "artifactUri": obj.get("artifactUri"),
            "build": obj.get("build"),
            "eventLogPath": obj.get("eventLogPath"),
            "failureCause": obj.get("failureCause"),
            "failureMessage": obj.get("failureMessage")
        })
        return _obj



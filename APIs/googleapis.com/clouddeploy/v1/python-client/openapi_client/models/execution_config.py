# coding: utf-8

"""
    Cloud Deploy API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.default_pool import DefaultPool
from openapi_client.models.private_pool import PrivatePool
from typing import Optional, Set
from typing_extensions import Self

class ExecutionConfig(BaseModel):
    """
    Configuration of the environment to use when calling Skaffold.
    """ # noqa: E501
    artifact_storage: Optional[StrictStr] = Field(default=None, description="Optional. Cloud Storage location in which to store execution outputs. This can either be a bucket (\"gs://my-bucket\") or a path within a bucket (\"gs://my-bucket/my-dir\"). If unspecified, a default bucket located in the same region will be used.", alias="artifactStorage")
    default_pool: Optional[DefaultPool] = Field(default=None, alias="defaultPool")
    execution_timeout: Optional[StrictStr] = Field(default=None, description="Optional. Execution timeout for a Cloud Build Execution. This must be between 10m and 24h in seconds format. If unspecified, a default timeout of 1h is used.", alias="executionTimeout")
    private_pool: Optional[PrivatePool] = Field(default=None, alias="privatePool")
    service_account: Optional[StrictStr] = Field(default=None, description="Optional. Google service account to use for execution. If unspecified, the project execution service account (-compute@developer.gserviceaccount.com) is used.", alias="serviceAccount")
    usages: Optional[List[StrictStr]] = Field(default=None, description="Required. Usages when this configuration should be applied.")
    worker_pool: Optional[StrictStr] = Field(default=None, description="Optional. The resource name of the `WorkerPool`, with the format `projects/{project}/locations/{location}/workerPools/{worker_pool}`. If this optional field is unspecified, the default Cloud Build pool will be used.", alias="workerPool")
    __properties: ClassVar[List[str]] = ["artifactStorage", "defaultPool", "executionTimeout", "privatePool", "serviceAccount", "usages", "workerPool"]

    @field_validator('usages')
    def usages_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        for i in value:
            if i not in set(['EXECUTION_ENVIRONMENT_USAGE_UNSPECIFIED', 'RENDER', 'DEPLOY', 'VERIFY', 'PREDEPLOY', 'POSTDEPLOY']):
                raise ValueError("each list item must be one of ('EXECUTION_ENVIRONMENT_USAGE_UNSPECIFIED', 'RENDER', 'DEPLOY', 'VERIFY', 'PREDEPLOY', 'POSTDEPLOY')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ExecutionConfig from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of default_pool
        if self.default_pool:
            _dict['defaultPool'] = self.default_pool.to_dict()
        # override the default output from pydantic by calling `to_dict()` of private_pool
        if self.private_pool:
            _dict['privatePool'] = self.private_pool.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ExecutionConfig from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "artifactStorage": obj.get("artifactStorage"),
            "defaultPool": DefaultPool.from_dict(obj["defaultPool"]) if obj.get("defaultPool") is not None else None,
            "executionTimeout": obj.get("executionTimeout"),
            "privatePool": PrivatePool.from_dict(obj["privatePool"]) if obj.get("privatePool") is not None else None,
            "serviceAccount": obj.get("serviceAccount"),
            "usages": obj.get("usages"),
            "workerPool": obj.get("workerPool")
        })
        return _obj



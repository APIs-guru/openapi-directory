# coding: utf-8

"""
    Cloud Deploy API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.advance_child_rollout_job_run import AdvanceChildRolloutJobRun
from openapi_client.models.create_child_rollout_job_run import CreateChildRolloutJobRun
from openapi_client.models.deploy_job_run import DeployJobRun
from openapi_client.models.postdeploy_job_run import PostdeployJobRun
from openapi_client.models.predeploy_job_run import PredeployJobRun
from openapi_client.models.verify_job_run import VerifyJobRun
from typing import Optional, Set
from typing_extensions import Self

class JobRun(BaseModel):
    """
    A `JobRun` resource in the Cloud Deploy API. A `JobRun` contains information of a single `Rollout` job evaluation.
    """ # noqa: E501
    advance_child_rollout_job_run: Optional[AdvanceChildRolloutJobRun] = Field(default=None, alias="advanceChildRolloutJobRun")
    create_child_rollout_job_run: Optional[CreateChildRolloutJobRun] = Field(default=None, alias="createChildRolloutJobRun")
    create_time: Optional[StrictStr] = Field(default=None, description="Output only. Time at which the `JobRun` was created.", alias="createTime")
    deploy_job_run: Optional[DeployJobRun] = Field(default=None, alias="deployJobRun")
    end_time: Optional[StrictStr] = Field(default=None, description="Output only. Time at which the `JobRun` ended.", alias="endTime")
    etag: Optional[StrictStr] = Field(default=None, description="Output only. This checksum is computed by the server based on the value of other fields, and may be sent on update and delete requests to ensure the client has an up-to-date value before proceeding.")
    job_id: Optional[StrictStr] = Field(default=None, description="Output only. ID of the `Rollout` job this `JobRun` corresponds to.", alias="jobId")
    name: Optional[StrictStr] = Field(default=None, description="Optional. Name of the `JobRun`. Format is `projects/{project}/locations/{location}/deliveryPipelines/{deliveryPipeline}/releases/{releases}/rollouts/{rollouts}/jobRuns/{uuid}`.")
    phase_id: Optional[StrictStr] = Field(default=None, description="Output only. ID of the `Rollout` phase this `JobRun` belongs in.", alias="phaseId")
    postdeploy_job_run: Optional[PostdeployJobRun] = Field(default=None, alias="postdeployJobRun")
    predeploy_job_run: Optional[PredeployJobRun] = Field(default=None, alias="predeployJobRun")
    start_time: Optional[StrictStr] = Field(default=None, description="Output only. Time at which the `JobRun` was started.", alias="startTime")
    state: Optional[StrictStr] = Field(default=None, description="Output only. The current state of the `JobRun`.")
    uid: Optional[StrictStr] = Field(default=None, description="Output only. Unique identifier of the `JobRun`.")
    verify_job_run: Optional[VerifyJobRun] = Field(default=None, alias="verifyJobRun")
    __properties: ClassVar[List[str]] = ["advanceChildRolloutJobRun", "createChildRolloutJobRun", "createTime", "deployJobRun", "endTime", "etag", "jobId", "name", "phaseId", "postdeployJobRun", "predeployJobRun", "startTime", "state", "uid", "verifyJobRun"]

    @field_validator('state')
    def state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['STATE_UNSPECIFIED', 'IN_PROGRESS', 'SUCCEEDED', 'FAILED', 'TERMINATING', 'TERMINATED']):
            raise ValueError("must be one of enum values ('STATE_UNSPECIFIED', 'IN_PROGRESS', 'SUCCEEDED', 'FAILED', 'TERMINATING', 'TERMINATED')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of JobRun from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "create_time",
            "end_time",
            "etag",
            "job_id",
            "phase_id",
            "start_time",
            "state",
            "uid",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of advance_child_rollout_job_run
        if self.advance_child_rollout_job_run:
            _dict['advanceChildRolloutJobRun'] = self.advance_child_rollout_job_run.to_dict()
        # override the default output from pydantic by calling `to_dict()` of create_child_rollout_job_run
        if self.create_child_rollout_job_run:
            _dict['createChildRolloutJobRun'] = self.create_child_rollout_job_run.to_dict()
        # override the default output from pydantic by calling `to_dict()` of deploy_job_run
        if self.deploy_job_run:
            _dict['deployJobRun'] = self.deploy_job_run.to_dict()
        # override the default output from pydantic by calling `to_dict()` of postdeploy_job_run
        if self.postdeploy_job_run:
            _dict['postdeployJobRun'] = self.postdeploy_job_run.to_dict()
        # override the default output from pydantic by calling `to_dict()` of predeploy_job_run
        if self.predeploy_job_run:
            _dict['predeployJobRun'] = self.predeploy_job_run.to_dict()
        # override the default output from pydantic by calling `to_dict()` of verify_job_run
        if self.verify_job_run:
            _dict['verifyJobRun'] = self.verify_job_run.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of JobRun from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "advanceChildRolloutJobRun": AdvanceChildRolloutJobRun.from_dict(obj["advanceChildRolloutJobRun"]) if obj.get("advanceChildRolloutJobRun") is not None else None,
            "createChildRolloutJobRun": CreateChildRolloutJobRun.from_dict(obj["createChildRolloutJobRun"]) if obj.get("createChildRolloutJobRun") is not None else None,
            "createTime": obj.get("createTime"),
            "deployJobRun": DeployJobRun.from_dict(obj["deployJobRun"]) if obj.get("deployJobRun") is not None else None,
            "endTime": obj.get("endTime"),
            "etag": obj.get("etag"),
            "jobId": obj.get("jobId"),
            "name": obj.get("name"),
            "phaseId": obj.get("phaseId"),
            "postdeployJobRun": PostdeployJobRun.from_dict(obj["postdeployJobRun"]) if obj.get("postdeployJobRun") is not None else None,
            "predeployJobRun": PredeployJobRun.from_dict(obj["predeployJobRun"]) if obj.get("predeployJobRun") is not None else None,
            "startTime": obj.get("startTime"),
            "state": obj.get("state"),
            "uid": obj.get("uid"),
            "verifyJobRun": VerifyJobRun.from_dict(obj["verifyJobRun"]) if obj.get("verifyJobRun") is not None else None
        })
        return _obj



# coding: utf-8

"""
    Cloud Deploy API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class AutomationRolloutMetadata(BaseModel):
    """
    AutomationRolloutMetadata contains Automation-related actions that were performed on a rollout.
    """ # noqa: E501
    advance_automation_runs: Optional[List[StrictStr]] = Field(default=None, description="Output only. The IDs of the AutomationRuns initiated by an advance rollout rule.", alias="advanceAutomationRuns")
    current_repair_automation_run: Optional[StrictStr] = Field(default=None, description="Output only. The current AutomationRun repairing the rollout.", alias="currentRepairAutomationRun")
    promote_automation_run: Optional[StrictStr] = Field(default=None, description="Output only. The ID of the AutomationRun initiated by a promote release rule.", alias="promoteAutomationRun")
    repair_automation_runs: Optional[List[StrictStr]] = Field(default=None, description="Output only. The IDs of the AutomationRuns initiated by a repair rollout rule.", alias="repairAutomationRuns")
    __properties: ClassVar[List[str]] = ["advanceAutomationRuns", "currentRepairAutomationRun", "promoteAutomationRun", "repairAutomationRuns"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AutomationRolloutMetadata from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "advance_automation_runs",
            "current_repair_automation_run",
            "promote_automation_run",
            "repair_automation_runs",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AutomationRolloutMetadata from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "advanceAutomationRuns": obj.get("advanceAutomationRuns"),
            "currentRepairAutomationRun": obj.get("currentRepairAutomationRun"),
            "promoteAutomationRun": obj.get("promoteAutomationRun"),
            "repairAutomationRuns": obj.get("repairAutomationRuns")
        })
        return _obj



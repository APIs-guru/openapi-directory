# coding: utf-8

"""
    Cloud Deploy API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class AutomationRunEvent(BaseModel):
    """
    Payload proto for \"clouddeploy.googleapis.com/automation_run\" Platform Log event that describes the AutomationRun related events.
    """ # noqa: E501
    automation_id: Optional[StrictStr] = Field(default=None, description="Identifier of the `Automation`.", alias="automationId")
    automation_run: Optional[StrictStr] = Field(default=None, description="The name of the `AutomationRun`.", alias="automationRun")
    destination_target_id: Optional[StrictStr] = Field(default=None, description="ID of the `Target` to which the `AutomationRun` is created.", alias="destinationTargetId")
    message: Optional[StrictStr] = Field(default=None, description="Debug message for when there is an update on the AutomationRun. Provides further details about the resource creation or state change.")
    pipeline_uid: Optional[StrictStr] = Field(default=None, description="Unique identifier of the `DeliveryPipeline`.", alias="pipelineUid")
    rule_id: Optional[StrictStr] = Field(default=None, description="Identifier of the `Automation` rule.", alias="ruleId")
    type: Optional[StrictStr] = Field(default=None, description="Type of this notification, e.g. for a Pub/Sub failure.")
    __properties: ClassVar[List[str]] = ["automationId", "automationRun", "destinationTargetId", "message", "pipelineUid", "ruleId", "type"]

    @field_validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['TYPE_UNSPECIFIED', 'TYPE_PUBSUB_NOTIFICATION_FAILURE', 'TYPE_RESOURCE_STATE_CHANGE', 'TYPE_PROCESS_ABORTED', 'TYPE_RESTRICTION_VIOLATED', 'TYPE_RESOURCE_DELETED', 'TYPE_ROLLOUT_UPDATE', 'TYPE_DEPLOY_POLICY_EVALUATION', 'TYPE_RENDER_STATUES_CHANGE']):
            raise ValueError("must be one of enum values ('TYPE_UNSPECIFIED', 'TYPE_PUBSUB_NOTIFICATION_FAILURE', 'TYPE_RESOURCE_STATE_CHANGE', 'TYPE_PROCESS_ABORTED', 'TYPE_RESTRICTION_VIOLATED', 'TYPE_RESOURCE_DELETED', 'TYPE_ROLLOUT_UPDATE', 'TYPE_DEPLOY_POLICY_EVALUATION', 'TYPE_RENDER_STATUES_CHANGE')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AutomationRunEvent from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AutomationRunEvent from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "automationId": obj.get("automationId"),
            "automationRun": obj.get("automationRun"),
            "destinationTargetId": obj.get("destinationTargetId"),
            "message": obj.get("message"),
            "pipelineUid": obj.get("pipelineUid"),
            "ruleId": obj.get("ruleId"),
            "type": obj.get("type")
        })
        return _obj



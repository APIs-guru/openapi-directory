# coding: utf-8

"""
    Cloud Deploy API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.advance_rollout_operation import AdvanceRolloutOperation
from openapi_client.models.automation import Automation
from openapi_client.models.promote_release_operation import PromoteReleaseOperation
from openapi_client.models.repair_rollout_operation import RepairRolloutOperation
from typing import Optional, Set
from typing_extensions import Self

class AutomationRun(BaseModel):
    """
    An `AutomationRun` resource in the Cloud Deploy API. An `AutomationRun` represents an execution instance of an automation rule.
    """ # noqa: E501
    advance_rollout_operation: Optional[AdvanceRolloutOperation] = Field(default=None, alias="advanceRolloutOperation")
    automation_id: Optional[StrictStr] = Field(default=None, description="Output only. The ID of the automation that initiated the operation.", alias="automationId")
    automation_snapshot: Optional[Automation] = Field(default=None, alias="automationSnapshot")
    create_time: Optional[StrictStr] = Field(default=None, description="Output only. Time at which the `AutomationRun` was created.", alias="createTime")
    etag: Optional[StrictStr] = Field(default=None, description="Output only. The weak etag of the `AutomationRun` resource. This checksum is computed by the server based on the value of other fields, and may be sent on update and delete requests to ensure the client has an up-to-date value before proceeding.")
    expire_time: Optional[StrictStr] = Field(default=None, description="Output only. Time the `AutomationRun` expires. An `AutomationRun` expires after 14 days from its creation date.", alias="expireTime")
    name: Optional[StrictStr] = Field(default=None, description="Output only. Name of the `AutomationRun`. Format is `projects/{project}/locations/{location}/deliveryPipelines/{delivery_pipeline}/automationRuns/{automation_run}`.")
    promote_release_operation: Optional[PromoteReleaseOperation] = Field(default=None, alias="promoteReleaseOperation")
    repair_rollout_operation: Optional[RepairRolloutOperation] = Field(default=None, alias="repairRolloutOperation")
    rule_id: Optional[StrictStr] = Field(default=None, description="Output only. The ID of the automation rule that initiated the operation.", alias="ruleId")
    service_account: Optional[StrictStr] = Field(default=None, description="Output only. Email address of the user-managed IAM service account that performs the operations against Cloud Deploy resources.", alias="serviceAccount")
    state: Optional[StrictStr] = Field(default=None, description="Output only. Current state of the `AutomationRun`.")
    state_description: Optional[StrictStr] = Field(default=None, description="Output only. Explains the current state of the `AutomationRun`. Present only when an explanation is needed.", alias="stateDescription")
    target_id: Optional[StrictStr] = Field(default=None, description="Output only. The ID of the target that represents the promotion stage that initiates the `AutomationRun`. The value of this field is the last segment of a target name.", alias="targetId")
    update_time: Optional[StrictStr] = Field(default=None, description="Output only. Time at which the automationRun was updated.", alias="updateTime")
    wait_until_time: Optional[StrictStr] = Field(default=None, description="Output only. Earliest time the `AutomationRun` will attempt to resume. Wait-time is configured by `wait` in automation rule.", alias="waitUntilTime")
    __properties: ClassVar[List[str]] = ["advanceRolloutOperation", "automationId", "automationSnapshot", "createTime", "etag", "expireTime", "name", "promoteReleaseOperation", "repairRolloutOperation", "ruleId", "serviceAccount", "state", "stateDescription", "targetId", "updateTime", "waitUntilTime"]

    @field_validator('state')
    def state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['STATE_UNSPECIFIED', 'SUCCEEDED', 'CANCELLED', 'FAILED', 'IN_PROGRESS', 'PENDING', 'ABORTED']):
            raise ValueError("must be one of enum values ('STATE_UNSPECIFIED', 'SUCCEEDED', 'CANCELLED', 'FAILED', 'IN_PROGRESS', 'PENDING', 'ABORTED')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AutomationRun from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "automation_id",
            "create_time",
            "etag",
            "expire_time",
            "name",
            "rule_id",
            "service_account",
            "state",
            "state_description",
            "target_id",
            "update_time",
            "wait_until_time",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of advance_rollout_operation
        if self.advance_rollout_operation:
            _dict['advanceRolloutOperation'] = self.advance_rollout_operation.to_dict()
        # override the default output from pydantic by calling `to_dict()` of automation_snapshot
        if self.automation_snapshot:
            _dict['automationSnapshot'] = self.automation_snapshot.to_dict()
        # override the default output from pydantic by calling `to_dict()` of promote_release_operation
        if self.promote_release_operation:
            _dict['promoteReleaseOperation'] = self.promote_release_operation.to_dict()
        # override the default output from pydantic by calling `to_dict()` of repair_rollout_operation
        if self.repair_rollout_operation:
            _dict['repairRolloutOperation'] = self.repair_rollout_operation.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AutomationRun from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "advanceRolloutOperation": AdvanceRolloutOperation.from_dict(obj["advanceRolloutOperation"]) if obj.get("advanceRolloutOperation") is not None else None,
            "automationId": obj.get("automationId"),
            "automationSnapshot": Automation.from_dict(obj["automationSnapshot"]) if obj.get("automationSnapshot") is not None else None,
            "createTime": obj.get("createTime"),
            "etag": obj.get("etag"),
            "expireTime": obj.get("expireTime"),
            "name": obj.get("name"),
            "promoteReleaseOperation": PromoteReleaseOperation.from_dict(obj["promoteReleaseOperation"]) if obj.get("promoteReleaseOperation") is not None else None,
            "repairRolloutOperation": RepairRolloutOperation.from_dict(obj["repairRolloutOperation"]) if obj.get("repairRolloutOperation") is not None else None,
            "ruleId": obj.get("ruleId"),
            "serviceAccount": obj.get("serviceAccount"),
            "state": obj.get("state"),
            "stateDescription": obj.get("stateDescription"),
            "targetId": obj.get("targetId"),
            "updateTime": obj.get("updateTime"),
            "waitUntilTime": obj.get("waitUntilTime")
        })
        return _obj



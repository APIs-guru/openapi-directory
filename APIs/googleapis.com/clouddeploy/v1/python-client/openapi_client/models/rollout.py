# coding: utf-8

"""
    Cloud Deploy API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.metadata import Metadata
from openapi_client.models.phase import Phase
from typing import Optional, Set
from typing_extensions import Self

class Rollout(BaseModel):
    """
    A `Rollout` resource in the Cloud Deploy API. A `Rollout` contains information around a specific deployment to a `Target`.
    """ # noqa: E501
    annotations: Optional[Dict[str, StrictStr]] = Field(default=None, description="User annotations. These attributes can only be set and used by the user, and not by Cloud Deploy. See https://google.aip.dev/128#annotations for more details such as format and size limitations.")
    approval_state: Optional[StrictStr] = Field(default=None, description="Output only. Approval state of the `Rollout`.", alias="approvalState")
    approve_time: Optional[StrictStr] = Field(default=None, description="Output only. Time at which the `Rollout` was approved.", alias="approveTime")
    controller_rollout: Optional[StrictStr] = Field(default=None, description="Output only. Name of the `ControllerRollout`. Format is `projects/{project}/locations/{location}/deliveryPipelines/{deliveryPipeline}/releases/{release}/rollouts/a-z{0,62}`.", alias="controllerRollout")
    create_time: Optional[StrictStr] = Field(default=None, description="Output only. Time at which the `Rollout` was created.", alias="createTime")
    deploy_end_time: Optional[StrictStr] = Field(default=None, description="Output only. Time at which the `Rollout` finished deploying.", alias="deployEndTime")
    deploy_failure_cause: Optional[StrictStr] = Field(default=None, description="Output only. The reason this rollout failed. This will always be unspecified while the rollout is in progress.", alias="deployFailureCause")
    deploy_start_time: Optional[StrictStr] = Field(default=None, description="Output only. Time at which the `Rollout` started deploying.", alias="deployStartTime")
    deploying_build: Optional[StrictStr] = Field(default=None, description="Output only. The resource name of the Cloud Build `Build` object that is used to deploy the Rollout. Format is `projects/{project}/locations/{location}/builds/{build}`.", alias="deployingBuild")
    description: Optional[StrictStr] = Field(default=None, description="Description of the `Rollout` for user purposes. Max length is 255 characters.")
    enqueue_time: Optional[StrictStr] = Field(default=None, description="Output only. Time at which the `Rollout` was enqueued.", alias="enqueueTime")
    etag: Optional[StrictStr] = Field(default=None, description="This checksum is computed by the server based on the value of other fields, and may be sent on update and delete requests to ensure the client has an up-to-date value before proceeding.")
    failure_reason: Optional[StrictStr] = Field(default=None, description="Output only. Additional information about the rollout failure, if available.", alias="failureReason")
    labels: Optional[Dict[str, StrictStr]] = Field(default=None, description="Labels are attributes that can be set and used by both the user and by Cloud Deploy. Labels must meet the following constraints: * Keys and values can contain only lowercase letters, numeric characters, underscores, and dashes. * All characters must use UTF-8 encoding, and international characters are allowed. * Keys must start with a lowercase letter or international character. * Each resource is limited to a maximum of 64 labels. Both keys and values are additionally constrained to be <= 128 bytes.")
    metadata: Optional[Metadata] = None
    name: Optional[StrictStr] = Field(default=None, description="Optional. Name of the `Rollout`. Format is `projects/{project}/locations/{location}/deliveryPipelines/{deliveryPipeline}/releases/{release}/rollouts/a-z{0,62}`.")
    phases: Optional[List[Phase]] = Field(default=None, description="Output only. The phases that represent the workflows of this `Rollout`.")
    rollback_of_rollout: Optional[StrictStr] = Field(default=None, description="Output only. Name of the `Rollout` that is rolled back by this `Rollout`. Empty if this `Rollout` wasn't created as a rollback.", alias="rollbackOfRollout")
    rolled_back_by_rollouts: Optional[List[StrictStr]] = Field(default=None, description="Output only. Names of `Rollouts` that rolled back this `Rollout`.", alias="rolledBackByRollouts")
    state: Optional[StrictStr] = Field(default=None, description="Output only. Current state of the `Rollout`.")
    target_id: Optional[StrictStr] = Field(default=None, description="Required. The ID of Target to which this `Rollout` is deploying.", alias="targetId")
    uid: Optional[StrictStr] = Field(default=None, description="Output only. Unique identifier of the `Rollout`.")
    __properties: ClassVar[List[str]] = ["annotations", "approvalState", "approveTime", "controllerRollout", "createTime", "deployEndTime", "deployFailureCause", "deployStartTime", "deployingBuild", "description", "enqueueTime", "etag", "failureReason", "labels", "metadata", "name", "phases", "rollbackOfRollout", "rolledBackByRollouts", "state", "targetId", "uid"]

    @field_validator('approval_state')
    def approval_state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['APPROVAL_STATE_UNSPECIFIED', 'NEEDS_APPROVAL', 'DOES_NOT_NEED_APPROVAL', 'APPROVED', 'REJECTED']):
            raise ValueError("must be one of enum values ('APPROVAL_STATE_UNSPECIFIED', 'NEEDS_APPROVAL', 'DOES_NOT_NEED_APPROVAL', 'APPROVED', 'REJECTED')")
        return value

    @field_validator('deploy_failure_cause')
    def deploy_failure_cause_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['FAILURE_CAUSE_UNSPECIFIED', 'CLOUD_BUILD_UNAVAILABLE', 'EXECUTION_FAILED', 'DEADLINE_EXCEEDED', 'RELEASE_FAILED', 'RELEASE_ABANDONED', 'VERIFICATION_CONFIG_NOT_FOUND', 'CLOUD_BUILD_REQUEST_FAILED', 'OPERATION_FEATURE_NOT_SUPPORTED']):
            raise ValueError("must be one of enum values ('FAILURE_CAUSE_UNSPECIFIED', 'CLOUD_BUILD_UNAVAILABLE', 'EXECUTION_FAILED', 'DEADLINE_EXCEEDED', 'RELEASE_FAILED', 'RELEASE_ABANDONED', 'VERIFICATION_CONFIG_NOT_FOUND', 'CLOUD_BUILD_REQUEST_FAILED', 'OPERATION_FEATURE_NOT_SUPPORTED')")
        return value

    @field_validator('state')
    def state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['STATE_UNSPECIFIED', 'SUCCEEDED', 'FAILED', 'IN_PROGRESS', 'PENDING_APPROVAL', 'APPROVAL_REJECTED', 'PENDING', 'PENDING_RELEASE', 'CANCELLING', 'CANCELLED', 'HALTED']):
            raise ValueError("must be one of enum values ('STATE_UNSPECIFIED', 'SUCCEEDED', 'FAILED', 'IN_PROGRESS', 'PENDING_APPROVAL', 'APPROVAL_REJECTED', 'PENDING', 'PENDING_RELEASE', 'CANCELLING', 'CANCELLED', 'HALTED')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Rollout from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "approval_state",
            "approve_time",
            "controller_rollout",
            "create_time",
            "deploy_end_time",
            "deploy_failure_cause",
            "deploy_start_time",
            "deploying_build",
            "enqueue_time",
            "failure_reason",
            "phases",
            "rollback_of_rollout",
            "rolled_back_by_rollouts",
            "state",
            "uid",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of metadata
        if self.metadata:
            _dict['metadata'] = self.metadata.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in phases (list)
        _items = []
        if self.phases:
            for _item_phases in self.phases:
                if _item_phases:
                    _items.append(_item_phases.to_dict())
            _dict['phases'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Rollout from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "annotations": obj.get("annotations"),
            "approvalState": obj.get("approvalState"),
            "approveTime": obj.get("approveTime"),
            "controllerRollout": obj.get("controllerRollout"),
            "createTime": obj.get("createTime"),
            "deployEndTime": obj.get("deployEndTime"),
            "deployFailureCause": obj.get("deployFailureCause"),
            "deployStartTime": obj.get("deployStartTime"),
            "deployingBuild": obj.get("deployingBuild"),
            "description": obj.get("description"),
            "enqueueTime": obj.get("enqueueTime"),
            "etag": obj.get("etag"),
            "failureReason": obj.get("failureReason"),
            "labels": obj.get("labels"),
            "metadata": Metadata.from_dict(obj["metadata"]) if obj.get("metadata") is not None else None,
            "name": obj.get("name"),
            "phases": [Phase.from_dict(_item) for _item in obj["phases"]] if obj.get("phases") is not None else None,
            "rollbackOfRollout": obj.get("rollbackOfRollout"),
            "rolledBackByRollouts": obj.get("rolledBackByRollouts"),
            "state": obj.get("state"),
            "targetId": obj.get("targetId"),
            "uid": obj.get("uid")
        })
        return _obj



# coding: utf-8

"""
    Cloud Deploy API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.build_artifact import BuildArtifact
from openapi_client.models.custom_target_type import CustomTargetType
from openapi_client.models.delivery_pipeline import DeliveryPipeline
from openapi_client.models.release_condition import ReleaseCondition
from openapi_client.models.target import Target
from openapi_client.models.target_artifact import TargetArtifact
from openapi_client.models.target_render import TargetRender
from typing import Optional, Set
from typing_extensions import Self

class Release(BaseModel):
    """
    A `Release` resource in the Cloud Deploy API. A `Release` defines a specific Skaffold configuration instance that can be deployed.
    """ # noqa: E501
    abandoned: Optional[StrictBool] = Field(default=None, description="Output only. Indicates whether this is an abandoned release.")
    annotations: Optional[Dict[str, StrictStr]] = Field(default=None, description="User annotations. These attributes can only be set and used by the user, and not by Cloud Deploy. See https://google.aip.dev/128#annotations for more details such as format and size limitations.")
    build_artifacts: Optional[List[BuildArtifact]] = Field(default=None, description="List of artifacts to pass through to Skaffold command.", alias="buildArtifacts")
    condition: Optional[ReleaseCondition] = None
    create_time: Optional[StrictStr] = Field(default=None, description="Output only. Time at which the `Release` was created.", alias="createTime")
    custom_target_type_snapshots: Optional[List[CustomTargetType]] = Field(default=None, description="Output only. Snapshot of the custom target types referenced by the targets taken at release creation time.", alias="customTargetTypeSnapshots")
    delivery_pipeline_snapshot: Optional[DeliveryPipeline] = Field(default=None, alias="deliveryPipelineSnapshot")
    deploy_parameters: Optional[Dict[str, StrictStr]] = Field(default=None, description="Optional. The deploy parameters to use for all targets in this release.", alias="deployParameters")
    description: Optional[StrictStr] = Field(default=None, description="Description of the `Release`. Max length is 255 characters.")
    etag: Optional[StrictStr] = Field(default=None, description="This checksum is computed by the server based on the value of other fields, and may be sent on update and delete requests to ensure the client has an up-to-date value before proceeding.")
    labels: Optional[Dict[str, StrictStr]] = Field(default=None, description="Labels are attributes that can be set and used by both the user and by Cloud Deploy. Labels must meet the following constraints: * Keys and values can contain only lowercase letters, numeric characters, underscores, and dashes. * All characters must use UTF-8 encoding, and international characters are allowed. * Keys must start with a lowercase letter or international character. * Each resource is limited to a maximum of 64 labels. Both keys and values are additionally constrained to be <= 128 bytes.")
    name: Optional[StrictStr] = Field(default=None, description="Optional. Name of the `Release`. Format is `projects/{project}/locations/{location}/deliveryPipelines/{deliveryPipeline}/releases/a-z{0,62}`.")
    render_end_time: Optional[StrictStr] = Field(default=None, description="Output only. Time at which the render completed.", alias="renderEndTime")
    render_start_time: Optional[StrictStr] = Field(default=None, description="Output only. Time at which the render began.", alias="renderStartTime")
    render_state: Optional[StrictStr] = Field(default=None, description="Output only. Current state of the render operation.", alias="renderState")
    skaffold_config_path: Optional[StrictStr] = Field(default=None, description="Filepath of the Skaffold config inside of the config URI.", alias="skaffoldConfigPath")
    skaffold_config_uri: Optional[StrictStr] = Field(default=None, description="Cloud Storage URI of tar.gz archive containing Skaffold configuration.", alias="skaffoldConfigUri")
    skaffold_version: Optional[StrictStr] = Field(default=None, description="The Skaffold version to use when operating on this release, such as \"1.20.0\". Not all versions are valid; Cloud Deploy supports a specific set of versions. If unset, the most recent supported Skaffold version will be used.", alias="skaffoldVersion")
    target_artifacts: Optional[Dict[str, TargetArtifact]] = Field(default=None, description="Output only. Map from target ID to the target artifacts created during the render operation.", alias="targetArtifacts")
    target_renders: Optional[Dict[str, TargetRender]] = Field(default=None, description="Output only. Map from target ID to details of the render operation for that target.", alias="targetRenders")
    target_snapshots: Optional[List[Target]] = Field(default=None, description="Output only. Snapshot of the targets taken at release creation time.", alias="targetSnapshots")
    uid: Optional[StrictStr] = Field(default=None, description="Output only. Unique identifier of the `Release`.")
    __properties: ClassVar[List[str]] = ["abandoned", "annotations", "buildArtifacts", "condition", "createTime", "customTargetTypeSnapshots", "deliveryPipelineSnapshot", "deployParameters", "description", "etag", "labels", "name", "renderEndTime", "renderStartTime", "renderState", "skaffoldConfigPath", "skaffoldConfigUri", "skaffoldVersion", "targetArtifacts", "targetRenders", "targetSnapshots", "uid"]

    @field_validator('render_state')
    def render_state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['RENDER_STATE_UNSPECIFIED', 'SUCCEEDED', 'FAILED', 'IN_PROGRESS']):
            raise ValueError("must be one of enum values ('RENDER_STATE_UNSPECIFIED', 'SUCCEEDED', 'FAILED', 'IN_PROGRESS')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Release from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "abandoned",
            "create_time",
            "custom_target_type_snapshots",
            "render_end_time",
            "render_start_time",
            "render_state",
            "target_artifacts",
            "target_renders",
            "target_snapshots",
            "uid",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in build_artifacts (list)
        _items = []
        if self.build_artifacts:
            for _item_build_artifacts in self.build_artifacts:
                if _item_build_artifacts:
                    _items.append(_item_build_artifacts.to_dict())
            _dict['buildArtifacts'] = _items
        # override the default output from pydantic by calling `to_dict()` of condition
        if self.condition:
            _dict['condition'] = self.condition.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in custom_target_type_snapshots (list)
        _items = []
        if self.custom_target_type_snapshots:
            for _item_custom_target_type_snapshots in self.custom_target_type_snapshots:
                if _item_custom_target_type_snapshots:
                    _items.append(_item_custom_target_type_snapshots.to_dict())
            _dict['customTargetTypeSnapshots'] = _items
        # override the default output from pydantic by calling `to_dict()` of delivery_pipeline_snapshot
        if self.delivery_pipeline_snapshot:
            _dict['deliveryPipelineSnapshot'] = self.delivery_pipeline_snapshot.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each value in target_artifacts (dict)
        _field_dict = {}
        if self.target_artifacts:
            for _key_target_artifacts in self.target_artifacts:
                if self.target_artifacts[_key_target_artifacts]:
                    _field_dict[_key_target_artifacts] = self.target_artifacts[_key_target_artifacts].to_dict()
            _dict['targetArtifacts'] = _field_dict
        # override the default output from pydantic by calling `to_dict()` of each value in target_renders (dict)
        _field_dict = {}
        if self.target_renders:
            for _key_target_renders in self.target_renders:
                if self.target_renders[_key_target_renders]:
                    _field_dict[_key_target_renders] = self.target_renders[_key_target_renders].to_dict()
            _dict['targetRenders'] = _field_dict
        # override the default output from pydantic by calling `to_dict()` of each item in target_snapshots (list)
        _items = []
        if self.target_snapshots:
            for _item_target_snapshots in self.target_snapshots:
                if _item_target_snapshots:
                    _items.append(_item_target_snapshots.to_dict())
            _dict['targetSnapshots'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Release from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "abandoned": obj.get("abandoned"),
            "annotations": obj.get("annotations"),
            "buildArtifacts": [BuildArtifact.from_dict(_item) for _item in obj["buildArtifacts"]] if obj.get("buildArtifacts") is not None else None,
            "condition": ReleaseCondition.from_dict(obj["condition"]) if obj.get("condition") is not None else None,
            "createTime": obj.get("createTime"),
            "customTargetTypeSnapshots": [CustomTargetType.from_dict(_item) for _item in obj["customTargetTypeSnapshots"]] if obj.get("customTargetTypeSnapshots") is not None else None,
            "deliveryPipelineSnapshot": DeliveryPipeline.from_dict(obj["deliveryPipelineSnapshot"]) if obj.get("deliveryPipelineSnapshot") is not None else None,
            "deployParameters": obj.get("deployParameters"),
            "description": obj.get("description"),
            "etag": obj.get("etag"),
            "labels": obj.get("labels"),
            "name": obj.get("name"),
            "renderEndTime": obj.get("renderEndTime"),
            "renderStartTime": obj.get("renderStartTime"),
            "renderState": obj.get("renderState"),
            "skaffoldConfigPath": obj.get("skaffoldConfigPath"),
            "skaffoldConfigUri": obj.get("skaffoldConfigUri"),
            "skaffoldVersion": obj.get("skaffoldVersion"),
            "targetArtifacts": dict(
                (_k, TargetArtifact.from_dict(_v))
                for _k, _v in obj["targetArtifacts"].items()
            )
            if obj.get("targetArtifacts") is not None
            else None,
            "targetRenders": dict(
                (_k, TargetRender.from_dict(_v))
                for _k, _v in obj["targetRenders"].items()
            )
            if obj.get("targetRenders") is not None
            else None,
            "targetSnapshots": [Target.from_dict(_item) for _item in obj["targetSnapshots"]] if obj.get("targetSnapshots") is not None else None,
            "uid": obj.get("uid")
        })
        return _obj



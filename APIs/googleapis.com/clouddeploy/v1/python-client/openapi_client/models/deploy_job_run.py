# coding: utf-8

"""
    Cloud Deploy API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.deploy_artifact import DeployArtifact
from openapi_client.models.deploy_job_run_metadata import DeployJobRunMetadata
from typing import Optional, Set
from typing_extensions import Self

class DeployJobRun(BaseModel):
    """
    DeployJobRun contains information specific to a deploy `JobRun`.
    """ # noqa: E501
    artifact: Optional[DeployArtifact] = None
    build: Optional[StrictStr] = Field(default=None, description="Output only. The resource name of the Cloud Build `Build` object that is used to deploy. Format is `projects/{project}/locations/{location}/builds/{build}`.")
    failure_cause: Optional[StrictStr] = Field(default=None, description="Output only. The reason the deploy failed. This will always be unspecified while the deploy is in progress or if it succeeded.", alias="failureCause")
    failure_message: Optional[StrictStr] = Field(default=None, description="Output only. Additional information about the deploy failure, if available.", alias="failureMessage")
    metadata: Optional[DeployJobRunMetadata] = None
    __properties: ClassVar[List[str]] = ["artifact", "build", "failureCause", "failureMessage", "metadata"]

    @field_validator('failure_cause')
    def failure_cause_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['FAILURE_CAUSE_UNSPECIFIED', 'CLOUD_BUILD_UNAVAILABLE', 'EXECUTION_FAILED', 'DEADLINE_EXCEEDED', 'MISSING_RESOURCES_FOR_CANARY', 'CLOUD_BUILD_REQUEST_FAILED', 'DEPLOY_FEATURE_NOT_SUPPORTED']):
            raise ValueError("must be one of enum values ('FAILURE_CAUSE_UNSPECIFIED', 'CLOUD_BUILD_UNAVAILABLE', 'EXECUTION_FAILED', 'DEADLINE_EXCEEDED', 'MISSING_RESOURCES_FOR_CANARY', 'CLOUD_BUILD_REQUEST_FAILED', 'DEPLOY_FEATURE_NOT_SUPPORTED')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DeployJobRun from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "build",
            "failure_cause",
            "failure_message",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of artifact
        if self.artifact:
            _dict['artifact'] = self.artifact.to_dict()
        # override the default output from pydantic by calling `to_dict()` of metadata
        if self.metadata:
            _dict['metadata'] = self.metadata.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DeployJobRun from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "artifact": DeployArtifact.from_dict(obj["artifact"]) if obj.get("artifact") is not None else None,
            "build": obj.get("build"),
            "failureCause": obj.get("failureCause"),
            "failureMessage": obj.get("failureMessage"),
            "metadata": DeployJobRunMetadata.from_dict(obj["metadata"]) if obj.get("metadata") is not None else None
        })
        return _obj



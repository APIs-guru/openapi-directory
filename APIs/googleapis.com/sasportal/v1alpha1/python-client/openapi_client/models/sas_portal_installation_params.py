# coding: utf-8

"""
    SAS Portal API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v1alpha1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class SasPortalInstallationParams(BaseModel):
    """
    Information about the device installation parameters.
    """ # noqa: E501
    antenna_azimuth: Optional[StrictInt] = Field(default=None, description="Boresight direction of the horizontal plane of the antenna in degrees with respect to true north. The value of this parameter is an integer with a value between 0 and 359 inclusive. A value of 0 degrees means true north; a value of 90 degrees means east. This parameter is optional for Category A devices and conditional for Category B devices.", alias="antennaAzimuth")
    antenna_beamwidth: Optional[StrictInt] = Field(default=None, description="3-dB antenna beamwidth of the antenna in the horizontal-plane in degrees. This parameter is an unsigned integer having a value between 0 and 360 (degrees) inclusive; it is optional for Category A devices and conditional for Category B devices.", alias="antennaBeamwidth")
    antenna_downtilt: Optional[StrictInt] = Field(default=None, description="Antenna downtilt in degrees and is an integer with a value between -90 and +90 inclusive; a negative value means the antenna is tilted up (above horizontal). This parameter is optional for Category A devices and conditional for Category B devices.", alias="antennaDowntilt")
    antenna_gain: Optional[StrictInt] = Field(default=None, description="Peak antenna gain in dBi. This parameter is an integer with a value between -127 and +128 (dBi) inclusive.", alias="antennaGain")
    antenna_model: Optional[StrictStr] = Field(default=None, description="If an external antenna is used, the antenna model is optionally provided in this field. The string has a maximum length of 128 octets.", alias="antennaModel")
    cpe_cbsd_indication: Optional[StrictBool] = Field(default=None, description="If present, this parameter specifies whether the CBSD is a CPE-CBSD or not.", alias="cpeCbsdIndication")
    eirp_capability: Optional[StrictInt] = Field(default=None, description="This parameter is the maximum device EIRP in units of dBm/10MHz and is an integer with a value between -127 and +47 (dBm/10 MHz) inclusive. If not included, SAS interprets it as maximum allowable EIRP in units of dBm/10MHz for device category.", alias="eirpCapability")
    height: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Device antenna height in meters. When the `heightType` parameter value is \"AGL\", the antenna height should be given relative to ground level. When the `heightType` parameter value is \"AMSL\", it is given with respect to WGS84 datum.")
    height_type: Optional[StrictStr] = Field(default=None, description="Specifies how the height is measured.", alias="heightType")
    horizontal_accuracy: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="A positive number in meters to indicate accuracy of the device antenna horizontal location. This optional parameter should only be present if its value is less than the FCC requirement of 50 meters.", alias="horizontalAccuracy")
    indoor_deployment: Optional[StrictBool] = Field(default=None, description="Whether the device antenna is indoor or not. `true`: indoor. `false`: outdoor.", alias="indoorDeployment")
    latitude: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Latitude of the device antenna location in degrees relative to the WGS 84 datum. The allowed range is from -90.000000 to +90.000000. Positive values represent latitudes north of the equator; negative values south of the equator.")
    longitude: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Longitude of the device antenna location in degrees relative to the WGS 84 datum. The allowed range is from -180.000000 to +180.000000. Positive values represent longitudes east of the prime meridian; negative values west of the prime meridian.")
    vertical_accuracy: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="A positive number in meters to indicate accuracy of the device antenna vertical location. This optional parameter should only be present if its value is less than the FCC requirement of 3 meters.", alias="verticalAccuracy")
    __properties: ClassVar[List[str]] = ["antennaAzimuth", "antennaBeamwidth", "antennaDowntilt", "antennaGain", "antennaModel", "cpeCbsdIndication", "eirpCapability", "height", "heightType", "horizontalAccuracy", "indoorDeployment", "latitude", "longitude", "verticalAccuracy"]

    @field_validator('height_type')
    def height_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['HEIGHT_TYPE_UNSPECIFIED', 'HEIGHT_TYPE_AGL', 'HEIGHT_TYPE_AMSL']):
            raise ValueError("must be one of enum values ('HEIGHT_TYPE_UNSPECIFIED', 'HEIGHT_TYPE_AGL', 'HEIGHT_TYPE_AMSL')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SasPortalInstallationParams from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SasPortalInstallationParams from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "antennaAzimuth": obj.get("antennaAzimuth"),
            "antennaBeamwidth": obj.get("antennaBeamwidth"),
            "antennaDowntilt": obj.get("antennaDowntilt"),
            "antennaGain": obj.get("antennaGain"),
            "antennaModel": obj.get("antennaModel"),
            "cpeCbsdIndication": obj.get("cpeCbsdIndication"),
            "eirpCapability": obj.get("eirpCapability"),
            "height": obj.get("height"),
            "heightType": obj.get("heightType"),
            "horizontalAccuracy": obj.get("horizontalAccuracy"),
            "indoorDeployment": obj.get("indoorDeployment"),
            "latitude": obj.get("latitude"),
            "longitude": obj.get("longitude"),
            "verticalAccuracy": obj.get("verticalAccuracy")
        })
        return _obj



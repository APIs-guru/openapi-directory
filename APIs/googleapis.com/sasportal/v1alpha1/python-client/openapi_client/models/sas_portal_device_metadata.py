# coding: utf-8

"""
    SAS Portal API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v1alpha1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.sas_portal_nrqz_validation import SasPortalNrqzValidation
from typing import Optional, Set
from typing_extensions import Self

class SasPortalDeviceMetadata(BaseModel):
    """
    Device data overridable by both SAS Portal and registration requests.
    """ # noqa: E501
    antenna_model: Optional[StrictStr] = Field(default=None, description="If populated, the Antenna Model Pattern to use. Format is: `RecordCreatorId:PatternId`", alias="antennaModel")
    common_channel_group: Optional[StrictStr] = Field(default=None, description="Common Channel Group (CCG). A group of CBSDs in the same ICG requesting a common primary channel assignment. For more details, see [CBRSA-TS-2001 V3.0.0](https://ongoalliance.org/wp-content/uploads/2020/02/CBRSA-TS-2001-V3.0.0_Approved-for-publication.pdf).", alias="commonChannelGroup")
    interference_coordination_group: Optional[StrictStr] = Field(default=None, description="Interference Coordination Group (ICG). A group of CBSDs that manage their own interference with the group. For more details, see [CBRSA-TS-2001 V3.0.0](https://ongoalliance.org/wp-content/uploads/2020/02/CBRSA-TS-2001-V3.0.0_Approved-for-publication.pdf).", alias="interferenceCoordinationGroup")
    nrqz_validated: Optional[StrictBool] = Field(default=None, description="Output only. Set to `true` if a CPI has validated that they have coordinated with the National Quiet Zone office.", alias="nrqzValidated")
    nrqz_validation: Optional[SasPortalNrqzValidation] = Field(default=None, alias="nrqzValidation")
    __properties: ClassVar[List[str]] = ["antennaModel", "commonChannelGroup", "interferenceCoordinationGroup", "nrqzValidated", "nrqzValidation"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SasPortalDeviceMetadata from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "nrqz_validated",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of nrqz_validation
        if self.nrqz_validation:
            _dict['nrqzValidation'] = self.nrqz_validation.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SasPortalDeviceMetadata from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "antennaModel": obj.get("antennaModel"),
            "commonChannelGroup": obj.get("commonChannelGroup"),
            "interferenceCoordinationGroup": obj.get("interferenceCoordinationGroup"),
            "nrqzValidated": obj.get("nrqzValidated"),
            "nrqzValidation": SasPortalNrqzValidation.from_dict(obj["nrqzValidation"]) if obj.get("nrqzValidation") is not None else None
        })
        return _obj



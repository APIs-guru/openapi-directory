# coding: utf-8

"""
    SAS Portal API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v1alpha1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.sas_portal_channel_with_score import SasPortalChannelWithScore
from openapi_client.models.sas_portal_device_config import SasPortalDeviceConfig
from openapi_client.models.sas_portal_device_grant import SasPortalDeviceGrant
from openapi_client.models.sas_portal_device_metadata import SasPortalDeviceMetadata
from openapi_client.models.sas_portal_frequency_range import SasPortalFrequencyRange
from typing import Optional, Set
from typing_extensions import Self

class SasPortalDevice(BaseModel):
    """
    SasPortalDevice
    """ # noqa: E501
    active_config: Optional[SasPortalDeviceConfig] = Field(default=None, alias="activeConfig")
    current_channels: Optional[List[SasPortalChannelWithScore]] = Field(default=None, description="Output only. Current channels with scores.", alias="currentChannels")
    device_metadata: Optional[SasPortalDeviceMetadata] = Field(default=None, alias="deviceMetadata")
    display_name: Optional[StrictStr] = Field(default=None, description="Device display name.", alias="displayName")
    fcc_id: Optional[StrictStr] = Field(default=None, description="The FCC identifier of the device. Refer to https://www.fcc.gov/oet/ea/fccid for FccID format. Accept underscores and periods because some test-SAS customers use them.", alias="fccId")
    grant_range_allowlists: Optional[List[SasPortalFrequencyRange]] = Field(default=None, description="Only ranges that are within the allowlists are available for new grants.", alias="grantRangeAllowlists")
    grants: Optional[List[SasPortalDeviceGrant]] = Field(default=None, description="Output only. Grants held by the device.")
    name: Optional[StrictStr] = Field(default=None, description="Output only. The resource path name.")
    preloaded_config: Optional[SasPortalDeviceConfig] = Field(default=None, alias="preloadedConfig")
    serial_number: Optional[StrictStr] = Field(default=None, description="A serial number assigned to the device by the device manufacturer.", alias="serialNumber")
    state: Optional[StrictStr] = Field(default=None, description="Output only. Device state.")
    __properties: ClassVar[List[str]] = ["activeConfig", "currentChannels", "deviceMetadata", "displayName", "fccId", "grantRangeAllowlists", "grants", "name", "preloadedConfig", "serialNumber", "state"]

    @field_validator('state')
    def state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['DEVICE_STATE_UNSPECIFIED', 'RESERVED', 'REGISTERED', 'DEREGISTERED']):
            raise ValueError("must be one of enum values ('DEVICE_STATE_UNSPECIFIED', 'RESERVED', 'REGISTERED', 'DEREGISTERED')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SasPortalDevice from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "current_channels",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of active_config
        if self.active_config:
            _dict['activeConfig'] = self.active_config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in current_channels (list)
        _items = []
        if self.current_channels:
            for _item_current_channels in self.current_channels:
                if _item_current_channels:
                    _items.append(_item_current_channels.to_dict())
            _dict['currentChannels'] = _items
        # override the default output from pydantic by calling `to_dict()` of device_metadata
        if self.device_metadata:
            _dict['deviceMetadata'] = self.device_metadata.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in grant_range_allowlists (list)
        _items = []
        if self.grant_range_allowlists:
            for _item_grant_range_allowlists in self.grant_range_allowlists:
                if _item_grant_range_allowlists:
                    _items.append(_item_grant_range_allowlists.to_dict())
            _dict['grantRangeAllowlists'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in grants (list)
        _items = []
        if self.grants:
            for _item_grants in self.grants:
                if _item_grants:
                    _items.append(_item_grants.to_dict())
            _dict['grants'] = _items
        # override the default output from pydantic by calling `to_dict()` of preloaded_config
        if self.preloaded_config:
            _dict['preloadedConfig'] = self.preloaded_config.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SasPortalDevice from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "activeConfig": SasPortalDeviceConfig.from_dict(obj["activeConfig"]) if obj.get("activeConfig") is not None else None,
            "currentChannels": [SasPortalChannelWithScore.from_dict(_item) for _item in obj["currentChannels"]] if obj.get("currentChannels") is not None else None,
            "deviceMetadata": SasPortalDeviceMetadata.from_dict(obj["deviceMetadata"]) if obj.get("deviceMetadata") is not None else None,
            "displayName": obj.get("displayName"),
            "fccId": obj.get("fccId"),
            "grantRangeAllowlists": [SasPortalFrequencyRange.from_dict(_item) for _item in obj["grantRangeAllowlists"]] if obj.get("grantRangeAllowlists") is not None else None,
            "grants": [SasPortalDeviceGrant.from_dict(_item) for _item in obj["grants"]] if obj.get("grants") is not None else None,
            "name": obj.get("name"),
            "preloadedConfig": SasPortalDeviceConfig.from_dict(obj["preloadedConfig"]) if obj.get("preloadedConfig") is not None else None,
            "serialNumber": obj.get("serialNumber"),
            "state": obj.get("state")
        })
        return _obj



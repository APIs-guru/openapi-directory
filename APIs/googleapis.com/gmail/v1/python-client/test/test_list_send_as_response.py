# coding: utf-8

"""
    Gmail API

    The Gmail API lets you view and manage Gmail mailbox data like threads, messages, and labels.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.list_send_as_response import ListSendAsResponse

class TestListSendAsResponse(unittest.TestCase):
    """ListSendAsResponse unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> ListSendAsResponse:
        """Test ListSendAsResponse
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `ListSendAsResponse`
        """
        model = ListSendAsResponse()
        if include_optional:
            return ListSendAsResponse(
                send_as = [
                    openapi_client.models.send_as.SendAs(
                        display_name = '', 
                        is_default = True, 
                        is_primary = True, 
                        reply_to_address = '', 
                        send_as_email = '', 
                        signature = '', 
                        smtp_msa = openapi_client.models.smtp_msa.SmtpMsa(
                            host = '', 
                            password = '', 
                            port = 56, 
                            security_mode = 'securityModeUnspecified', 
                            username = '', ), 
                        treat_as_alias = True, 
                        verification_status = 'verificationStatusUnspecified', )
                    ]
            )
        else:
            return ListSendAsResponse(
        )
        """

    def testListSendAsResponse(self):
        """Test ListSendAsResponse"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

# coding: utf-8

"""
    Gmail API

    The Gmail API lets you view and manage Gmail mailbox data like threads, messages, and labels.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.sign_and_encrypt_key_pairs import SignAndEncryptKeyPairs
from typing import Optional, Set
from typing_extensions import Self

class CseIdentity(BaseModel):
    """
    The client-side encryption (CSE) configuration for the email address of an authenticated user. Gmail uses CSE configurations to save drafts of client-side encrypted email messages, and to sign and send encrypted email messages.
    """ # noqa: E501
    email_address: Optional[StrictStr] = Field(default=None, description="The email address for the sending identity. The email address must be the primary email address of the authenticated user.", alias="emailAddress")
    primary_key_pair_id: Optional[StrictStr] = Field(default=None, description="If a key pair is associated, the ID of the key pair, CseKeyPair.", alias="primaryKeyPairId")
    sign_and_encrypt_key_pairs: Optional[SignAndEncryptKeyPairs] = Field(default=None, alias="signAndEncryptKeyPairs")
    __properties: ClassVar[List[str]] = ["emailAddress", "primaryKeyPairId", "signAndEncryptKeyPairs"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CseIdentity from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of sign_and_encrypt_key_pairs
        if self.sign_and_encrypt_key_pairs:
            _dict['signAndEncryptKeyPairs'] = self.sign_and_encrypt_key_pairs.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CseIdentity from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "emailAddress": obj.get("emailAddress"),
            "primaryKeyPairId": obj.get("primaryKeyPairId"),
            "signAndEncryptKeyPairs": SignAndEncryptKeyPairs.from_dict(obj["signAndEncryptKeyPairs"]) if obj.get("signAndEncryptKeyPairs") is not None else None
        })
        return _obj



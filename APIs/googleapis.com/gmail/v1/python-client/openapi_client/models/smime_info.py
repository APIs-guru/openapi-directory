# coding: utf-8

"""
    Gmail API

    The Gmail API lets you view and manage Gmail mailbox data like threads, messages, and labels.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictBytes, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class SmimeInfo(BaseModel):
    """
    An S/MIME email config.
    """ # noqa: E501
    encrypted_key_password: Optional[StrictStr] = Field(default=None, description="Encrypted key password, when key is encrypted.", alias="encryptedKeyPassword")
    expiration: Optional[StrictStr] = Field(default=None, description="When the certificate expires (in milliseconds since epoch).")
    id: Optional[StrictStr] = Field(default=None, description="The immutable ID for the SmimeInfo.")
    is_default: Optional[StrictBool] = Field(default=None, description="Whether this SmimeInfo is the default one for this user's send-as address.", alias="isDefault")
    issuer_cn: Optional[StrictStr] = Field(default=None, description="The S/MIME certificate issuer's common name.", alias="issuerCn")
    pem: Optional[StrictStr] = Field(default=None, description="PEM formatted X509 concatenated certificate string (standard base64 encoding). Format used for returning key, which includes public key as well as certificate chain (not private key).")
    pkcs12: Optional[Union[StrictBytes, StrictStr]] = Field(default=None, description="PKCS#12 format containing a single private/public key pair and certificate chain. This format is only accepted from client for creating a new SmimeInfo and is never returned, because the private key is not intended to be exported. PKCS#12 may be encrypted, in which case encryptedKeyPassword should be set appropriately.")
    __properties: ClassVar[List[str]] = ["encryptedKeyPassword", "expiration", "id", "isDefault", "issuerCn", "pem", "pkcs12"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SmimeInfo from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SmimeInfo from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "encryptedKeyPassword": obj.get("encryptedKeyPassword"),
            "expiration": obj.get("expiration"),
            "id": obj.get("id"),
            "isDefault": obj.get("isDefault"),
            "issuerCn": obj.get("issuerCn"),
            "pem": obj.get("pem"),
            "pkcs12": obj.get("pkcs12")
        })
        return _obj



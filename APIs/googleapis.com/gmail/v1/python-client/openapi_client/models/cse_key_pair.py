# coding: utf-8

"""
    Gmail API

    The Gmail API lets you view and manage Gmail mailbox data like threads, messages, and labels.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.cse_private_key_metadata import CsePrivateKeyMetadata
from typing import Optional, Set
from typing_extensions import Self

class CseKeyPair(BaseModel):
    """
    A client-side encryption S/MIME key pair, which is comprised of a public key, its certificate chain, and metadata for its paired private key. Gmail uses the key pair to complete the following tasks: - Sign outgoing client-side encrypted messages. - Save and reopen drafts of client-side encrypted messages. - Save and reopen sent messages. - Decrypt incoming or archived S/MIME messages.
    """ # noqa: E501
    disable_time: Optional[StrictStr] = Field(default=None, description="Output only. If a key pair is set to `DISABLED`, the time that the key pair's state changed from `ENABLED` to `DISABLED`. This field is present only when the key pair is in state `DISABLED`.", alias="disableTime")
    enablement_state: Optional[StrictStr] = Field(default=None, description="Output only. The current state of the key pair.", alias="enablementState")
    key_pair_id: Optional[StrictStr] = Field(default=None, description="Output only. The immutable ID for the client-side encryption S/MIME key pair.", alias="keyPairId")
    pem: Optional[StrictStr] = Field(default=None, description="Output only. The public key and its certificate chain, in [PEM](https://en.wikipedia.org/wiki/Privacy-Enhanced_Mail) format.")
    pkcs7: Optional[StrictStr] = Field(default=None, description="Input only. The public key and its certificate chain. The chain must be in [PKCS#7](https://en.wikipedia.org/wiki/PKCS_7) format and use PEM encoding and ASCII armor.")
    private_key_metadata: Optional[List[CsePrivateKeyMetadata]] = Field(default=None, description="Metadata for instances of this key pair's private key.", alias="privateKeyMetadata")
    subject_email_addresses: Optional[List[StrictStr]] = Field(default=None, description="Output only. The email address identities that are specified on the leaf certificate.", alias="subjectEmailAddresses")
    __properties: ClassVar[List[str]] = ["disableTime", "enablementState", "keyPairId", "pem", "pkcs7", "privateKeyMetadata", "subjectEmailAddresses"]

    @field_validator('enablement_state')
    def enablement_state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['stateUnspecified', 'enabled', 'disabled']):
            raise ValueError("must be one of enum values ('stateUnspecified', 'enabled', 'disabled')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CseKeyPair from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "disable_time",
            "enablement_state",
            "key_pair_id",
            "pem",
            "subject_email_addresses",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in private_key_metadata (list)
        _items = []
        if self.private_key_metadata:
            for _item_private_key_metadata in self.private_key_metadata:
                if _item_private_key_metadata:
                    _items.append(_item_private_key_metadata.to_dict())
            _dict['privateKeyMetadata'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CseKeyPair from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "disableTime": obj.get("disableTime"),
            "enablementState": obj.get("enablementState"),
            "keyPairId": obj.get("keyPairId"),
            "pem": obj.get("pem"),
            "pkcs7": obj.get("pkcs7"),
            "privateKeyMetadata": [CsePrivateKeyMetadata.from_dict(_item) for _item in obj["privateKeyMetadata"]] if obj.get("privateKeyMetadata") is not None else None,
            "subjectEmailAddresses": obj.get("subjectEmailAddresses")
        })
        return _obj



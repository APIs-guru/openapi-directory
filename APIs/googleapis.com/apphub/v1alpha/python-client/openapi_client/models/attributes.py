# coding: utf-8

"""
    App Hub API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v1alpha
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.contact_info import ContactInfo
from openapi_client.models.criticality import Criticality
from openapi_client.models.environment import Environment
from typing import Optional, Set
from typing_extensions import Self

class Attributes(BaseModel):
    """
    Consumer provided attributes.
    """ # noqa: E501
    business_owners: Optional[List[ContactInfo]] = Field(default=None, description="Optional. Business team that ensures user needs are met and value is delivered", alias="businessOwners")
    criticality: Optional[Criticality] = None
    developer_owners: Optional[List[ContactInfo]] = Field(default=None, description="Optional. Developer team that owns development and coding.", alias="developerOwners")
    environment: Optional[Environment] = None
    operator_owners: Optional[List[ContactInfo]] = Field(default=None, description="Optional. Operator team that ensures runtime and operations.", alias="operatorOwners")
    __properties: ClassVar[List[str]] = ["businessOwners", "criticality", "developerOwners", "environment", "operatorOwners"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Attributes from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in business_owners (list)
        _items = []
        if self.business_owners:
            for _item_business_owners in self.business_owners:
                if _item_business_owners:
                    _items.append(_item_business_owners.to_dict())
            _dict['businessOwners'] = _items
        # override the default output from pydantic by calling `to_dict()` of criticality
        if self.criticality:
            _dict['criticality'] = self.criticality.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in developer_owners (list)
        _items = []
        if self.developer_owners:
            for _item_developer_owners in self.developer_owners:
                if _item_developer_owners:
                    _items.append(_item_developer_owners.to_dict())
            _dict['developerOwners'] = _items
        # override the default output from pydantic by calling `to_dict()` of environment
        if self.environment:
            _dict['environment'] = self.environment.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in operator_owners (list)
        _items = []
        if self.operator_owners:
            for _item_operator_owners in self.operator_owners:
                if _item_operator_owners:
                    _items.append(_item_operator_owners.to_dict())
            _dict['operatorOwners'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Attributes from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "businessOwners": [ContactInfo.from_dict(_item) for _item in obj["businessOwners"]] if obj.get("businessOwners") is not None else None,
            "criticality": Criticality.from_dict(obj["criticality"]) if obj.get("criticality") is not None else None,
            "developerOwners": [ContactInfo.from_dict(_item) for _item in obj["developerOwners"]] if obj.get("developerOwners") is not None else None,
            "environment": Environment.from_dict(obj["environment"]) if obj.get("environment") is not None else None,
            "operatorOwners": [ContactInfo.from_dict(_item) for _item in obj["operatorOwners"]] if obj.get("operatorOwners") is not None else None
        })
        return _obj



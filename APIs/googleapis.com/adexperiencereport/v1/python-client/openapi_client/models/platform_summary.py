# coding: utf-8

"""
    Ad Experience Report API

    Views Ad Experience Report data, and gets a list of sites that have a significant number of annoying ads.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class PlatformSummary(BaseModel):
    """
    A site's Ad Experience Report summary on a single platform.
    """ # noqa: E501
    better_ads_status: Optional[StrictStr] = Field(default=None, description="The site's Ad Experience Report status on this platform.", alias="betterAdsStatus")
    enforcement_time: Optional[StrictStr] = Field(default=None, description="The time at which [enforcement](https://support.google.com/webtools/answer/7308033) against the site began or will begin on this platform. Not set when the filter_status is OFF.", alias="enforcementTime")
    filter_status: Optional[StrictStr] = Field(default=None, description="The site's [enforcement status](https://support.google.com/webtools/answer/7308033) on this platform.", alias="filterStatus")
    last_change_time: Optional[StrictStr] = Field(default=None, description="The time at which the site's status last changed on this platform.", alias="lastChangeTime")
    region: Optional[List[StrictStr]] = Field(default=None, description="The site's regions on this platform. No longer populated, because there is no longer any semantic difference between sites in different regions.")
    report_url: Optional[StrictStr] = Field(default=None, description="A link to the full Ad Experience Report for the site on this platform.. Not set in ViolatingSitesResponse. Note that you must complete the [Search Console verification process](https://support.google.com/webmasters/answer/9008080) for the site before you can access the full report.", alias="reportUrl")
    under_review: Optional[StrictBool] = Field(default=None, description="Whether the site is currently under review on this platform.", alias="underReview")
    __properties: ClassVar[List[str]] = ["betterAdsStatus", "enforcementTime", "filterStatus", "lastChangeTime", "region", "reportUrl", "underReview"]

    @field_validator('better_ads_status')
    def better_ads_status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['UNKNOWN', 'PASSING', 'WARNING', 'FAILING']):
            raise ValueError("must be one of enum values ('UNKNOWN', 'PASSING', 'WARNING', 'FAILING')")
        return value

    @field_validator('filter_status')
    def filter_status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['UNKNOWN', 'true', 'false', 'PAUSED', 'PENDING']):
            raise ValueError("must be one of enum values ('UNKNOWN', 'true', 'false', 'PAUSED', 'PENDING')")
        return value

    @field_validator('region')
    def region_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        for i in value:
            if i not in set(['REGION_UNKNOWN', 'REGION_A', 'REGION_B', 'REGION_C']):
                raise ValueError("each list item must be one of ('REGION_UNKNOWN', 'REGION_A', 'REGION_B', 'REGION_C')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PlatformSummary from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PlatformSummary from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "betterAdsStatus": obj.get("betterAdsStatus"),
            "enforcementTime": obj.get("enforcementTime"),
            "filterStatus": obj.get("filterStatus"),
            "lastChangeTime": obj.get("lastChangeTime"),
            "region": obj.get("region"),
            "reportUrl": obj.get("reportUrl"),
            "underReview": obj.get("underReview")
        })
        return _obj



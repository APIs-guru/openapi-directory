# coding: utf-8

"""
    Ad Experience Report API

    Views Ad Experience Report data, and gets a list of sites that have a significant number of annoying ads.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.violating_sites_response import ViolatingSitesResponse

class TestViolatingSitesResponse(unittest.TestCase):
    """ViolatingSitesResponse unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> ViolatingSitesResponse:
        """Test ViolatingSitesResponse
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `ViolatingSitesResponse`
        """
        model = ViolatingSitesResponse()
        if include_optional:
            return ViolatingSitesResponse(
                violating_sites = [
                    openapi_client.models.site_summary_response.SiteSummaryResponse(
                        desktop_summary = openapi_client.models.platform_summary.PlatformSummary(
                            better_ads_status = 'UNKNOWN', 
                            enforcement_time = '', 
                            filter_status = 'UNKNOWN', 
                            last_change_time = '', 
                            region = [
                                'REGION_UNKNOWN'
                                ], 
                            report_url = '', 
                            under_review = True, ), 
                        mobile_summary = openapi_client.models.platform_summary.PlatformSummary(
                            better_ads_status = 'UNKNOWN', 
                            enforcement_time = '', 
                            filter_status = 'UNKNOWN', 
                            last_change_time = '', 
                            report_url = '', 
                            under_review = True, ), 
                        reviewed_site = '', )
                    ]
            )
        else:
            return ViolatingSitesResponse(
        )
        """

    def testViolatingSitesResponse(self):
        """Test ViolatingSitesResponse"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

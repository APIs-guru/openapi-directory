# coding: utf-8

"""
    Google Play EMM API

    Manages the deployment of apps to Android Enterprise devices.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.notification import Notification

class TestNotification(unittest.TestCase):
    """Notification unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> Notification:
        """Test Notification
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `Notification`
        """
        model = Notification()
        if include_optional:
            return Notification(
                app_restrictions_schema_change_event = openapi_client.models.app_restrictions_schema_change_event.AppRestrictionsSchemaChangeEvent(
                    product_id = '', ),
                app_update_event = openapi_client.models.app_update_event.AppUpdateEvent(
                    product_id = '', ),
                device_report_update_event = openapi_client.models.device_report_update_event.DeviceReportUpdateEvent(
                    device_id = '', 
                    report = openapi_client.models.device_report.DeviceReport(
                        app_state = [
                            openapi_client.models.app_state.AppState(
                                keyed_app_state = [
                                    openapi_client.models.keyed_app_state.KeyedAppState(
                                        data = '', 
                                        key = '', 
                                        message = '', 
                                        severity = 'severityUnknown', 
                                        state_timestamp_millis = '', )
                                    ], 
                                package_name = '', )
                            ], 
                        last_updated_timestamp_millis = '', ), 
                    user_id = '', ),
                enterprise_id = '',
                install_failure_event = openapi_client.models.install_failure_event.InstallFailureEvent(
                    device_id = '', 
                    failure_details = '', 
                    failure_reason = 'unknown', 
                    product_id = '', 
                    user_id = '', ),
                new_device_event = openapi_client.models.new_device_event.NewDeviceEvent(
                    device_id = '', 
                    dpc_package_name = '', 
                    management_type = 'managedDevice', 
                    user_id = '', ),
                new_permissions_event = openapi_client.models.new_permissions_event.NewPermissionsEvent(
                    approved_permissions = [
                        ''
                        ], 
                    product_id = '', 
                    requested_permissions = [
                        ''
                        ], ),
                notification_type = 'unknown',
                product_approval_event = openapi_client.models.product_approval_event.ProductApprovalEvent(
                    approved = 'unknown', 
                    product_id = '', ),
                product_availability_change_event = openapi_client.models.product_availability_change_event.ProductAvailabilityChangeEvent(
                    availability_status = 'unknown', 
                    product_id = '', ),
                timestamp_millis = ''
            )
        else:
            return Notification(
        )
        """

    def testNotification(self):
        """Test Notification"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

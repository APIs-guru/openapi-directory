# coding: utf-8

"""
    Google Play EMM API

    Manages the deployment of apps to Android Enterprise devices.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.policy import Policy

class TestPolicy(unittest.TestCase):
    """Policy unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> Policy:
        """Test Policy
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `Policy`
        """
        model = Policy()
        if include_optional:
            return Policy(
                auto_update_policy = 'autoUpdatePolicyUnspecified',
                device_report_policy = 'deviceReportPolicyUnspecified',
                maintenance_window = openapi_client.models.maintenance_window.MaintenanceWindow(
                    duration_ms = '', 
                    start_time_after_midnight_ms = '', ),
                product_availability_policy = 'productAvailabilityPolicyUnspecified',
                product_policy = [
                    openapi_client.models.product_policy.ProductPolicy(
                        auto_install_policy = openapi_client.models.auto_install_policy.AutoInstallPolicy(
                            auto_install_constraint = [
                                openapi_client.models.auto_install_constraint.AutoInstallConstraint(
                                    charging_state_constraint = 'chargingStateConstraintUnspecified', 
                                    device_idle_state_constraint = 'deviceIdleStateConstraintUnspecified', 
                                    network_type_constraint = 'networkTypeConstraintUnspecified', )
                                ], 
                            auto_install_mode = 'autoInstallModeUnspecified', 
                            auto_install_priority = 56, 
                            minimum_version_code = 56, ), 
                        auto_update_mode = 'autoUpdateModeUnspecified', 
                        enterprise_authentication_app_link_configs = [
                            openapi_client.models.enterprise_authentication_app_link_config.EnterpriseAuthenticationAppLinkConfig(
                                uri = '', )
                            ], 
                        managed_configuration = openapi_client.models.managed_configuration.ManagedConfiguration(
                            configuration_variables = openapi_client.models.configuration_variables.ConfigurationVariables(
                                mcm_id = '', 
                                variable_set = [
                                    openapi_client.models.variable_set.VariableSet(
                                        placeholder = '', 
                                        user_value = '', )
                                    ], ), 
                            kind = '', 
                            managed_property = [
                                openapi_client.models.managed_property.ManagedProperty(
                                    key = '', 
                                    value_bool = True, 
                                    value_bundle = openapi_client.models.managed_property_bundle.ManagedPropertyBundle(), 
                                    value_bundle_array = [
                                        openapi_client.models.managed_property_bundle.ManagedPropertyBundle()
                                        ], 
                                    value_integer = 56, 
                                    value_string = '', 
                                    value_string_array = [
                                        ''
                                        ], )
                                ], 
                            product_id = '', ), 
                        product_id = '', 
                        track_ids = [
                            ''
                            ], 
                        tracks = [
                            'appTrackUnspecified'
                            ], )
                    ]
            )
        else:
            return Policy(
        )
        """

    def testPolicy(self):
        """Test Policy"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

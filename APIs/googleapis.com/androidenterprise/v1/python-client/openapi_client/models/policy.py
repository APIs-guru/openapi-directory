# coding: utf-8

"""
    Google Play EMM API

    Manages the deployment of apps to Android Enterprise devices.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.maintenance_window import MaintenanceWindow
from openapi_client.models.product_policy import ProductPolicy
from typing import Optional, Set
from typing_extensions import Self

class Policy(BaseModel):
    """
    The device policy for a given managed device.
    """ # noqa: E501
    auto_update_policy: Optional[StrictStr] = Field(default=None, description="Controls when automatic app updates on the device can be applied. Recommended alternative: autoUpdateMode which is set per app, provides greater flexibility around update frequency. When autoUpdateMode is set to AUTO_UPDATE_POSTPONED or AUTO_UPDATE_HIGH_PRIORITY, autoUpdatePolicy has no effect. \"choiceToTheUser\" allows the device's user to configure the app update policy. \"always\" enables auto updates. \"never\" disables auto updates. \"wifiOnly\" enables auto updates only when the device is connected to wifi.", alias="autoUpdatePolicy")
    device_report_policy: Optional[StrictStr] = Field(default=None, description="Whether the device reports app states to the EMM. The default value is \"deviceReportDisabled\".", alias="deviceReportPolicy")
    maintenance_window: Optional[MaintenanceWindow] = Field(default=None, alias="maintenanceWindow")
    product_availability_policy: Optional[StrictStr] = Field(default=None, description="The availability granted to the device for the specified products. \"all\" gives the device access to all products, regardless of approval status. \"all\" does not enable automatic visibility of \"alpha\" or \"beta\" tracks. \"whitelist\" grants the device access the products specified in productPolicy[]. Only products that are approved or products that were previously approved (products with revoked approval) by the enterprise can be whitelisted. If no value is provided, the availability set at the user level is applied by default.", alias="productAvailabilityPolicy")
    product_policy: Optional[List[ProductPolicy]] = Field(default=None, description="The list of product policies. The productAvailabilityPolicy needs to be set to WHITELIST or ALL for the product policies to be applied.", alias="productPolicy")
    __properties: ClassVar[List[str]] = ["autoUpdatePolicy", "deviceReportPolicy", "maintenanceWindow", "productAvailabilityPolicy", "productPolicy"]

    @field_validator('auto_update_policy')
    def auto_update_policy_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['autoUpdatePolicyUnspecified', 'choiceToTheUser', 'never', 'wifiOnly', 'always']):
            raise ValueError("must be one of enum values ('autoUpdatePolicyUnspecified', 'choiceToTheUser', 'never', 'wifiOnly', 'always')")
        return value

    @field_validator('device_report_policy')
    def device_report_policy_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['deviceReportPolicyUnspecified', 'deviceReportDisabled', 'deviceReportEnabled']):
            raise ValueError("must be one of enum values ('deviceReportPolicyUnspecified', 'deviceReportDisabled', 'deviceReportEnabled')")
        return value

    @field_validator('product_availability_policy')
    def product_availability_policy_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['productAvailabilityPolicyUnspecified', 'whitelist', 'all']):
            raise ValueError("must be one of enum values ('productAvailabilityPolicyUnspecified', 'whitelist', 'all')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Policy from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of maintenance_window
        if self.maintenance_window:
            _dict['maintenanceWindow'] = self.maintenance_window.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in product_policy (list)
        _items = []
        if self.product_policy:
            for _item_product_policy in self.product_policy:
                if _item_product_policy:
                    _items.append(_item_product_policy.to_dict())
            _dict['productPolicy'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Policy from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "autoUpdatePolicy": obj.get("autoUpdatePolicy"),
            "deviceReportPolicy": obj.get("deviceReportPolicy"),
            "maintenanceWindow": MaintenanceWindow.from_dict(obj["maintenanceWindow"]) if obj.get("maintenanceWindow") is not None else None,
            "productAvailabilityPolicy": obj.get("productAvailabilityPolicy"),
            "productPolicy": [ProductPolicy.from_dict(_item) for _item in obj["productPolicy"]] if obj.get("productPolicy") is not None else None
        })
        return _obj



# coding: utf-8

"""
    Google Play EMM API

    Manages the deployment of apps to Android Enterprise devices.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.app_restrictions_schema import AppRestrictionsSchema
from openapi_client.models.app_version import AppVersion
from openapi_client.models.product_permission import ProductPermission
from openapi_client.models.product_signing_certificate import ProductSigningCertificate
from openapi_client.models.track_info import TrackInfo
from typing import Optional, Set
from typing_extensions import Self

class Product(BaseModel):
    """
    A Products resource represents an app in the Google Play store that is available to at least some users in the enterprise. (Some apps are restricted to a single enterprise, and no information about them is made available outside that enterprise.) The information provided for each product (localized name, icon, link to the full Google Play details page) is intended to allow a basic representation of the product within an EMM user interface.
    """ # noqa: E501
    app_restrictions_schema: Optional[AppRestrictionsSchema] = Field(default=None, alias="appRestrictionsSchema")
    app_tracks: Optional[List[TrackInfo]] = Field(default=None, description="The tracks visible to the enterprise.", alias="appTracks")
    app_version: Optional[List[AppVersion]] = Field(default=None, description="App versions currently available for this product.", alias="appVersion")
    author_name: Optional[StrictStr] = Field(default=None, description="The name of the author of the product (for example, the app developer).", alias="authorName")
    available_countries: Optional[List[StrictStr]] = Field(default=None, description="The countries which this app is available in.", alias="availableCountries")
    available_tracks: Optional[List[StrictStr]] = Field(default=None, description="Deprecated, use appTracks instead.", alias="availableTracks")
    category: Optional[StrictStr] = Field(default=None, description="The app category (e.g. RACING, SOCIAL, etc.)")
    content_rating: Optional[StrictStr] = Field(default=None, description="The content rating for this app.", alias="contentRating")
    description: Optional[StrictStr] = Field(default=None, description="The localized promotional description, if available.")
    details_url: Optional[StrictStr] = Field(default=None, description="A link to the (consumer) Google Play details page for the product.", alias="detailsUrl")
    distribution_channel: Optional[StrictStr] = Field(default=None, description="How and to whom the package is made available. The value publicGoogleHosted means that the package is available through the Play store and not restricted to a specific enterprise. The value privateGoogleHosted means that the package is a private app (restricted to an enterprise) but hosted by Google. The value privateSelfHosted means that the package is a private app (restricted to an enterprise) and is privately hosted.", alias="distributionChannel")
    features: Optional[List[StrictStr]] = Field(default=None, description="Noteworthy features (if any) of this product.")
    full_description: Optional[StrictStr] = Field(default=None, description="The localized full app store description, if available.", alias="fullDescription")
    icon_url: Optional[StrictStr] = Field(default=None, description="A link to an image that can be used as an icon for the product. This image is suitable for use at up to 512px x 512px.", alias="iconUrl")
    last_updated_timestamp_millis: Optional[StrictStr] = Field(default=None, description="The approximate time (within 7 days) the app was last published, expressed in milliseconds since epoch.", alias="lastUpdatedTimestampMillis")
    min_android_sdk_version: Optional[StrictInt] = Field(default=None, description="The minimum Android SDK necessary to run the app.", alias="minAndroidSdkVersion")
    permissions: Optional[List[ProductPermission]] = Field(default=None, description="A list of permissions required by the app.")
    product_id: Optional[StrictStr] = Field(default=None, description="A string of the form *app:<package name>*. For example, app:com.google.android.gm represents the Gmail app.", alias="productId")
    product_pricing: Optional[StrictStr] = Field(default=None, description="Whether this product is free, free with in-app purchases, or paid. If the pricing is unknown, this means the product is not generally available anymore (even though it might still be available to people who own it).", alias="productPricing")
    recent_changes: Optional[StrictStr] = Field(default=None, description="A description of the recent changes made to the app.", alias="recentChanges")
    requires_container_app: Optional[StrictBool] = Field(default=None, description="Deprecated.", alias="requiresContainerApp")
    screenshot_urls: Optional[List[StrictStr]] = Field(default=None, description="A list of screenshot links representing the app.", alias="screenshotUrls")
    signing_certificate: Optional[ProductSigningCertificate] = Field(default=None, alias="signingCertificate")
    small_icon_url: Optional[StrictStr] = Field(default=None, description="A link to a smaller image that can be used as an icon for the product. This image is suitable for use at up to 128px x 128px.", alias="smallIconUrl")
    title: Optional[StrictStr] = Field(default=None, description="The name of the product.")
    work_details_url: Optional[StrictStr] = Field(default=None, description="A link to the managed Google Play details page for the product, for use by an Enterprise admin.", alias="workDetailsUrl")
    __properties: ClassVar[List[str]] = ["appRestrictionsSchema", "appTracks", "appVersion", "authorName", "availableCountries", "availableTracks", "category", "contentRating", "description", "detailsUrl", "distributionChannel", "features", "fullDescription", "iconUrl", "lastUpdatedTimestampMillis", "minAndroidSdkVersion", "permissions", "productId", "productPricing", "recentChanges", "requiresContainerApp", "screenshotUrls", "signingCertificate", "smallIconUrl", "title", "workDetailsUrl"]

    @field_validator('available_tracks')
    def available_tracks_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        for i in value:
            if i not in set(['appTrackUnspecified', 'production', 'beta', 'alpha']):
                raise ValueError("each list item must be one of ('appTrackUnspecified', 'production', 'beta', 'alpha')")
        return value

    @field_validator('content_rating')
    def content_rating_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['ratingUnknown', 'all', 'preTeen', 'teen', 'mature']):
            raise ValueError("must be one of enum values ('ratingUnknown', 'all', 'preTeen', 'teen', 'mature')")
        return value

    @field_validator('distribution_channel')
    def distribution_channel_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['publicGoogleHosted', 'privateGoogleHosted', 'privateSelfHosted']):
            raise ValueError("must be one of enum values ('publicGoogleHosted', 'privateGoogleHosted', 'privateSelfHosted')")
        return value

    @field_validator('features')
    def features_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        for i in value:
            if i not in set(['featureUnknown', 'vpnApp']):
                raise ValueError("each list item must be one of ('featureUnknown', 'vpnApp')")
        return value

    @field_validator('product_pricing')
    def product_pricing_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['unknown', 'free', 'freeWithInAppPurchase', 'paid']):
            raise ValueError("must be one of enum values ('unknown', 'free', 'freeWithInAppPurchase', 'paid')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Product from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of app_restrictions_schema
        if self.app_restrictions_schema:
            _dict['appRestrictionsSchema'] = self.app_restrictions_schema.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in app_tracks (list)
        _items = []
        if self.app_tracks:
            for _item_app_tracks in self.app_tracks:
                if _item_app_tracks:
                    _items.append(_item_app_tracks.to_dict())
            _dict['appTracks'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in app_version (list)
        _items = []
        if self.app_version:
            for _item_app_version in self.app_version:
                if _item_app_version:
                    _items.append(_item_app_version.to_dict())
            _dict['appVersion'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in permissions (list)
        _items = []
        if self.permissions:
            for _item_permissions in self.permissions:
                if _item_permissions:
                    _items.append(_item_permissions.to_dict())
            _dict['permissions'] = _items
        # override the default output from pydantic by calling `to_dict()` of signing_certificate
        if self.signing_certificate:
            _dict['signingCertificate'] = self.signing_certificate.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Product from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "appRestrictionsSchema": AppRestrictionsSchema.from_dict(obj["appRestrictionsSchema"]) if obj.get("appRestrictionsSchema") is not None else None,
            "appTracks": [TrackInfo.from_dict(_item) for _item in obj["appTracks"]] if obj.get("appTracks") is not None else None,
            "appVersion": [AppVersion.from_dict(_item) for _item in obj["appVersion"]] if obj.get("appVersion") is not None else None,
            "authorName": obj.get("authorName"),
            "availableCountries": obj.get("availableCountries"),
            "availableTracks": obj.get("availableTracks"),
            "category": obj.get("category"),
            "contentRating": obj.get("contentRating"),
            "description": obj.get("description"),
            "detailsUrl": obj.get("detailsUrl"),
            "distributionChannel": obj.get("distributionChannel"),
            "features": obj.get("features"),
            "fullDescription": obj.get("fullDescription"),
            "iconUrl": obj.get("iconUrl"),
            "lastUpdatedTimestampMillis": obj.get("lastUpdatedTimestampMillis"),
            "minAndroidSdkVersion": obj.get("minAndroidSdkVersion"),
            "permissions": [ProductPermission.from_dict(_item) for _item in obj["permissions"]] if obj.get("permissions") is not None else None,
            "productId": obj.get("productId"),
            "productPricing": obj.get("productPricing"),
            "recentChanges": obj.get("recentChanges"),
            "requiresContainerApp": obj.get("requiresContainerApp"),
            "screenshotUrls": obj.get("screenshotUrls"),
            "signingCertificate": ProductSigningCertificate.from_dict(obj["signingCertificate"]) if obj.get("signingCertificate") is not None else None,
            "smallIconUrl": obj.get("smallIconUrl"),
            "title": obj.get("title"),
            "workDetailsUrl": obj.get("workDetailsUrl")
        })
        return _obj



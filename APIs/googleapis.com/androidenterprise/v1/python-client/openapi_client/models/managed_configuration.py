# coding: utf-8

"""
    Google Play EMM API

    Manages the deployment of apps to Android Enterprise devices.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.configuration_variables import ConfigurationVariables
from openapi_client.models.managed_property import ManagedProperty
from typing import Optional, Set
from typing_extensions import Self

class ManagedConfiguration(BaseModel):
    """
    A managed configuration resource contains the set of managed properties defined by the app developer in the app's managed configurations schema, as well as any configuration variables defined for the user.
    """ # noqa: E501
    configuration_variables: Optional[ConfigurationVariables] = Field(default=None, alias="configurationVariables")
    kind: Optional[StrictStr] = Field(default=None, description="Deprecated.")
    managed_property: Optional[List[ManagedProperty]] = Field(default=None, description="The set of managed properties for this configuration.", alias="managedProperty")
    product_id: Optional[StrictStr] = Field(default=None, description="The ID of the product that the managed configuration is for, e.g. \"app:com.google.android.gm\".", alias="productId")
    __properties: ClassVar[List[str]] = ["configurationVariables", "kind", "managedProperty", "productId"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ManagedConfiguration from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of configuration_variables
        if self.configuration_variables:
            _dict['configurationVariables'] = self.configuration_variables.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in managed_property (list)
        _items = []
        if self.managed_property:
            for _item_managed_property in self.managed_property:
                if _item_managed_property:
                    _items.append(_item_managed_property.to_dict())
            _dict['managedProperty'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ManagedConfiguration from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "configurationVariables": ConfigurationVariables.from_dict(obj["configurationVariables"]) if obj.get("configurationVariables") is not None else None,
            "kind": obj.get("kind"),
            "managedProperty": [ManagedProperty.from_dict(_item) for _item in obj["managedProperty"]] if obj.get("managedProperty") is not None else None,
            "productId": obj.get("productId")
        })
        return _obj



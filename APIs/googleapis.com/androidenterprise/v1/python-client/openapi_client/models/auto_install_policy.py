# coding: utf-8

"""
    Google Play EMM API

    Manages the deployment of apps to Android Enterprise devices.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.auto_install_constraint import AutoInstallConstraint
from typing import Optional, Set
from typing_extensions import Self

class AutoInstallPolicy(BaseModel):
    """
    AutoInstallPolicy
    """ # noqa: E501
    auto_install_constraint: Optional[List[AutoInstallConstraint]] = Field(default=None, description="The constraints for auto-installing the app. You can specify a maximum of one constraint.", alias="autoInstallConstraint")
    auto_install_mode: Optional[StrictStr] = Field(default=None, description="The auto-install mode. If unset, defaults to \"doNotAutoInstall\". An app is automatically installed regardless of a set maintenance window.", alias="autoInstallMode")
    auto_install_priority: Optional[StrictInt] = Field(default=None, description="The priority of the install, as an unsigned integer. A lower number means higher priority.", alias="autoInstallPriority")
    minimum_version_code: Optional[StrictInt] = Field(default=None, description="The minimum version of the app. If a lower version of the app is installed, then the app will be auto-updated according to the auto-install constraints, instead of waiting for the regular auto-update. You can set a minimum version code for at most 20 apps per device.", alias="minimumVersionCode")
    __properties: ClassVar[List[str]] = ["autoInstallConstraint", "autoInstallMode", "autoInstallPriority", "minimumVersionCode"]

    @field_validator('auto_install_mode')
    def auto_install_mode_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['autoInstallModeUnspecified', 'doNotAutoInstall', 'autoInstallOnce', 'forceAutoInstall']):
            raise ValueError("must be one of enum values ('autoInstallModeUnspecified', 'doNotAutoInstall', 'autoInstallOnce', 'forceAutoInstall')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AutoInstallPolicy from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in auto_install_constraint (list)
        _items = []
        if self.auto_install_constraint:
            for _item_auto_install_constraint in self.auto_install_constraint:
                if _item_auto_install_constraint:
                    _items.append(_item_auto_install_constraint.to_dict())
            _dict['autoInstallConstraint'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AutoInstallPolicy from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "autoInstallConstraint": [AutoInstallConstraint.from_dict(_item) for _item in obj["autoInstallConstraint"]] if obj.get("autoInstallConstraint") is not None else None,
            "autoInstallMode": obj.get("autoInstallMode"),
            "autoInstallPriority": obj.get("autoInstallPriority"),
            "minimumVersionCode": obj.get("minimumVersionCode")
        })
        return _obj



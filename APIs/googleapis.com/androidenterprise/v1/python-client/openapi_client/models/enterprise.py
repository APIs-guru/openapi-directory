# coding: utf-8

"""
    Google Play EMM API

    Manages the deployment of apps to Android Enterprise devices.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.administrator import Administrator
from openapi_client.models.google_authentication_settings import GoogleAuthenticationSettings
from typing import Optional, Set
from typing_extensions import Self

class Enterprise(BaseModel):
    """
    An Enterprises resource represents the binding between an EMM and a specific organization. That binding can be instantiated in one of two different ways using this API as follows: - For Google managed domain customers, the process involves using Enterprises.enroll and Enterprises.setAccount (in conjunction with artifacts obtained from the Admin console and the Google API Console) and submitted to the EMM through a more-or-less manual process. - For managed Google Play Accounts customers, the process involves using Enterprises.generateSignupUrl and Enterprises.completeSignup in conjunction with the managed Google Play sign-up UI (Google-provided mechanism) to create the binding without manual steps. As an EMM, you can support either or both approaches in your EMM console. See Create an Enterprise for details.
    """ # noqa: E501
    administrator: Optional[List[Administrator]] = Field(default=None, description="Admins of the enterprise. This is only supported for enterprises created via the EMM-initiated flow.")
    google_authentication_settings: Optional[GoogleAuthenticationSettings] = Field(default=None, alias="googleAuthenticationSettings")
    id: Optional[StrictStr] = Field(default=None, description="The unique ID for the enterprise.")
    name: Optional[StrictStr] = Field(default=None, description="The name of the enterprise, for example, \"Example, Inc\".")
    primary_domain: Optional[StrictStr] = Field(default=None, description="The enterprise's primary domain, such as \"example.com\".", alias="primaryDomain")
    __properties: ClassVar[List[str]] = ["administrator", "googleAuthenticationSettings", "id", "name", "primaryDomain"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Enterprise from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in administrator (list)
        _items = []
        if self.administrator:
            for _item_administrator in self.administrator:
                if _item_administrator:
                    _items.append(_item_administrator.to_dict())
            _dict['administrator'] = _items
        # override the default output from pydantic by calling `to_dict()` of google_authentication_settings
        if self.google_authentication_settings:
            _dict['googleAuthenticationSettings'] = self.google_authentication_settings.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Enterprise from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "administrator": [Administrator.from_dict(_item) for _item in obj["administrator"]] if obj.get("administrator") is not None else None,
            "googleAuthenticationSettings": GoogleAuthenticationSettings.from_dict(obj["googleAuthenticationSettings"]) if obj.get("googleAuthenticationSettings") is not None else None,
            "id": obj.get("id"),
            "name": obj.get("name"),
            "primaryDomain": obj.get("primaryDomain")
        })
        return _obj



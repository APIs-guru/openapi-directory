# coding: utf-8

"""
    Google Play EMM API

    Manages the deployment of apps to Android Enterprise devices.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class GroupLicense(BaseModel):
    """
    Group license objects allow you to keep track of licenses (called entitlements) for both free and paid apps. For a free app, a group license is created when an enterprise admin first approves the product in Google Play or when the first entitlement for the product is created for a user via the API. For a paid app, a group license object is only created when an enterprise admin purchases the product in Google Play for the first time. Use the API to query group licenses. A Grouplicenses resource includes the total number of licenses purchased (paid apps only) and the total number of licenses currently in use. In other words, the total number of Entitlements that exist for the product. Only one group license object is created per product and group license objects are never deleted. If a product is unapproved, its group license remains. This allows enterprise admins to keep track of any remaining entitlements for the product.
    """ # noqa: E501
    acquisition_kind: Optional[StrictStr] = Field(default=None, description="How this group license was acquired. \"bulkPurchase\" means that this Grouplicenses resource was created because the enterprise purchased licenses for this product; otherwise, the value is \"free\" (for free products).", alias="acquisitionKind")
    approval: Optional[StrictStr] = Field(default=None, description="Whether the product to which this group license relates is currently approved by the enterprise. Products are approved when a group license is first created, but this approval may be revoked by an enterprise admin via Google Play. Unapproved products will not be visible to end users in collections, and new entitlements to them should not normally be created.")
    num_provisioned: Optional[StrictInt] = Field(default=None, description="The total number of provisioned licenses for this product. Returned by read operations, but ignored in write operations.", alias="numProvisioned")
    num_purchased: Optional[StrictInt] = Field(default=None, description="The number of purchased licenses (possibly in multiple purchases). If this field is omitted, then there is no limit on the number of licenses that can be provisioned (for example, if the acquisition kind is \"free\").", alias="numPurchased")
    permissions: Optional[StrictStr] = Field(default=None, description="The permission approval status of the product. This field is only set if the product is approved. Possible states are: - \"currentApproved\", the current set of permissions is approved, but additional permissions will require the administrator to reapprove the product (If the product was approved without specifying the approved permissions setting, then this is the default behavior.), - \"needsReapproval\", the product has unapproved permissions. No additional product licenses can be assigned until the product is reapproved, - \"allCurrentAndFutureApproved\", the current permissions are approved and any future permission updates will be automatically approved without administrator review. ")
    product_id: Optional[StrictStr] = Field(default=None, description="The ID of the product that the license is for. For example, \"app:com.google.android.gm\".", alias="productId")
    __properties: ClassVar[List[str]] = ["acquisitionKind", "approval", "numProvisioned", "numPurchased", "permissions", "productId"]

    @field_validator('acquisition_kind')
    def acquisition_kind_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['free', 'bulkPurchase']):
            raise ValueError("must be one of enum values ('free', 'bulkPurchase')")
        return value

    @field_validator('approval')
    def approval_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['approved', 'unapproved']):
            raise ValueError("must be one of enum values ('approved', 'unapproved')")
        return value

    @field_validator('permissions')
    def permissions_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['currentApproved', 'needsReapproval', 'allCurrentAndFutureApproved']):
            raise ValueError("must be one of enum values ('currentApproved', 'needsReapproval', 'allCurrentAndFutureApproved')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GroupLicense from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GroupLicense from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "acquisitionKind": obj.get("acquisitionKind"),
            "approval": obj.get("approval"),
            "numProvisioned": obj.get("numProvisioned"),
            "numPurchased": obj.get("numPurchased"),
            "permissions": obj.get("permissions"),
            "productId": obj.get("productId")
        })
        return _obj



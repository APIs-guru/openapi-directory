# coding: utf-8

"""
    Google Play EMM API

    Manages the deployment of apps to Android Enterprise devices.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.app_restrictions_schema_restriction_restriction_value import AppRestrictionsSchemaRestrictionRestrictionValue
from typing import Optional, Set
from typing_extensions import Self

class AppRestrictionsSchemaRestriction(BaseModel):
    """
    A restriction in the App Restriction Schema represents a piece of configuration that may be pre-applied.
    """ # noqa: E501
    default_value: Optional[AppRestrictionsSchemaRestrictionRestrictionValue] = Field(default=None, alias="defaultValue")
    description: Optional[StrictStr] = Field(default=None, description="A longer description of the restriction, giving more detail of what it affects.")
    entry: Optional[List[StrictStr]] = Field(default=None, description="For choice or multiselect restrictions, the list of possible entries' human-readable names.")
    entry_value: Optional[List[StrictStr]] = Field(default=None, description="For choice or multiselect restrictions, the list of possible entries' machine-readable values. These values should be used in the configuration, either as a single string value for a choice restriction or in a stringArray for a multiselect restriction.", alias="entryValue")
    key: Optional[StrictStr] = Field(default=None, description="The unique key that the product uses to identify the restriction, e.g. \"com.google.android.gm.fieldname\".")
    nested_restriction: Optional[List[AppRestrictionsSchemaRestriction]] = Field(default=None, description="For bundle or bundleArray restrictions, the list of nested restrictions. A bundle restriction is always nested within a bundleArray restriction, and a bundleArray restriction is at most two levels deep.", alias="nestedRestriction")
    restriction_type: Optional[StrictStr] = Field(default=None, description="The type of the restriction.", alias="restrictionType")
    title: Optional[StrictStr] = Field(default=None, description="The name of the restriction.")
    __properties: ClassVar[List[str]] = ["defaultValue", "description", "entry", "entryValue", "key", "nestedRestriction", "restrictionType", "title"]

    @field_validator('restriction_type')
    def restriction_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['bool', 'string', 'integer', 'choice', 'multiselect', 'hidden', 'bundle', 'bundleArray']):
            raise ValueError("must be one of enum values ('bool', 'string', 'integer', 'choice', 'multiselect', 'hidden', 'bundle', 'bundleArray')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AppRestrictionsSchemaRestriction from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of default_value
        if self.default_value:
            _dict['defaultValue'] = self.default_value.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in nested_restriction (list)
        _items = []
        if self.nested_restriction:
            for _item_nested_restriction in self.nested_restriction:
                if _item_nested_restriction:
                    _items.append(_item_nested_restriction.to_dict())
            _dict['nestedRestriction'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AppRestrictionsSchemaRestriction from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "defaultValue": AppRestrictionsSchemaRestrictionRestrictionValue.from_dict(obj["defaultValue"]) if obj.get("defaultValue") is not None else None,
            "description": obj.get("description"),
            "entry": obj.get("entry"),
            "entryValue": obj.get("entryValue"),
            "key": obj.get("key"),
            "nestedRestriction": [AppRestrictionsSchemaRestriction.from_dict(_item) for _item in obj["nestedRestriction"]] if obj.get("nestedRestriction") is not None else None,
            "restrictionType": obj.get("restrictionType"),
            "title": obj.get("title")
        })
        return _obj

# TODO: Rewrite to not use raise_errors
AppRestrictionsSchemaRestriction.model_rebuild(raise_errors=False)


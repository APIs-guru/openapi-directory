# coding: utf-8

"""
    Google Play EMM API

    Manages the deployment of apps to Android Enterprise devices.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.auto_install_policy import AutoInstallPolicy
from openapi_client.models.enterprise_authentication_app_link_config import EnterpriseAuthenticationAppLinkConfig
from openapi_client.models.managed_configuration import ManagedConfiguration
from typing import Optional, Set
from typing_extensions import Self

class ProductPolicy(BaseModel):
    """
    The policy for a product.
    """ # noqa: E501
    auto_install_policy: Optional[AutoInstallPolicy] = Field(default=None, alias="autoInstallPolicy")
    auto_update_mode: Optional[StrictStr] = Field(default=None, description="The auto-update mode for the product. When autoUpdateMode is used, it always takes precedence over the user's choice. So when a user makes changes to the device settings manually, these changes are ignored.", alias="autoUpdateMode")
    enterprise_authentication_app_link_configs: Optional[List[EnterpriseAuthenticationAppLinkConfig]] = Field(default=None, description="An authentication URL configuration for the authenticator app of an identity provider. This helps to launch the identity provider's authenticator app during the authentication happening in a private app using Android WebView. Authenticator app should already be the default handler for the authentication url on the device.", alias="enterpriseAuthenticationAppLinkConfigs")
    managed_configuration: Optional[ManagedConfiguration] = Field(default=None, alias="managedConfiguration")
    product_id: Optional[StrictStr] = Field(default=None, description="The ID of the product. For example, \"app:com.google.android.gm\".", alias="productId")
    track_ids: Optional[List[StrictStr]] = Field(default=None, description="Grants the device visibility to the specified product release track(s), identified by trackIds. The list of release tracks of a product can be obtained by calling Products.Get.", alias="trackIds")
    tracks: Optional[List[StrictStr]] = Field(default=None, description="Deprecated. Use trackIds instead.")
    __properties: ClassVar[List[str]] = ["autoInstallPolicy", "autoUpdateMode", "enterpriseAuthenticationAppLinkConfigs", "managedConfiguration", "productId", "trackIds", "tracks"]

    @field_validator('auto_update_mode')
    def auto_update_mode_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['autoUpdateModeUnspecified', 'autoUpdateDefault', 'autoUpdatePostponed', 'autoUpdateHighPriority']):
            raise ValueError("must be one of enum values ('autoUpdateModeUnspecified', 'autoUpdateDefault', 'autoUpdatePostponed', 'autoUpdateHighPriority')")
        return value

    @field_validator('tracks')
    def tracks_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        for i in value:
            if i not in set(['appTrackUnspecified', 'production', 'beta', 'alpha']):
                raise ValueError("each list item must be one of ('appTrackUnspecified', 'production', 'beta', 'alpha')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ProductPolicy from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of auto_install_policy
        if self.auto_install_policy:
            _dict['autoInstallPolicy'] = self.auto_install_policy.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in enterprise_authentication_app_link_configs (list)
        _items = []
        if self.enterprise_authentication_app_link_configs:
            for _item_enterprise_authentication_app_link_configs in self.enterprise_authentication_app_link_configs:
                if _item_enterprise_authentication_app_link_configs:
                    _items.append(_item_enterprise_authentication_app_link_configs.to_dict())
            _dict['enterpriseAuthenticationAppLinkConfigs'] = _items
        # override the default output from pydantic by calling `to_dict()` of managed_configuration
        if self.managed_configuration:
            _dict['managedConfiguration'] = self.managed_configuration.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ProductPolicy from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "autoInstallPolicy": AutoInstallPolicy.from_dict(obj["autoInstallPolicy"]) if obj.get("autoInstallPolicy") is not None else None,
            "autoUpdateMode": obj.get("autoUpdateMode"),
            "enterpriseAuthenticationAppLinkConfigs": [EnterpriseAuthenticationAppLinkConfig.from_dict(_item) for _item in obj["enterpriseAuthenticationAppLinkConfigs"]] if obj.get("enterpriseAuthenticationAppLinkConfigs") is not None else None,
            "managedConfiguration": ManagedConfiguration.from_dict(obj["managedConfiguration"]) if obj.get("managedConfiguration") is not None else None,
            "productId": obj.get("productId"),
            "trackIds": obj.get("trackIds"),
            "tracks": obj.get("tracks")
        })
        return _obj



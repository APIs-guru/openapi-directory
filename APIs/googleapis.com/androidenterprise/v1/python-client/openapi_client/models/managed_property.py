# coding: utf-8

"""
    Google Play EMM API

    Manages the deployment of apps to Android Enterprise devices.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class ManagedProperty(BaseModel):
    """
    A managed property of a managed configuration. The property must match one of the properties in the app restrictions schema of the product. Exactly one of the value fields must be populated, and it must match the property's type in the app restrictions schema.
    """ # noqa: E501
    key: Optional[StrictStr] = Field(default=None, description="The unique key that identifies the property.")
    value_bool: Optional[StrictBool] = Field(default=None, description="The boolean value - this will only be present if type of the property is bool.", alias="valueBool")
    value_bundle: Optional[ManagedPropertyBundle] = Field(default=None, alias="valueBundle")
    value_bundle_array: Optional[List[ManagedPropertyBundle]] = Field(default=None, description="The list of bundles of properties - this will only be present if type of the property is bundle_array.", alias="valueBundleArray")
    value_integer: Optional[StrictInt] = Field(default=None, description="The integer value - this will only be present if type of the property is integer.", alias="valueInteger")
    value_string: Optional[StrictStr] = Field(default=None, description="The string value - this will only be present if type of the property is string, choice or hidden.", alias="valueString")
    value_string_array: Optional[List[StrictStr]] = Field(default=None, description="The list of string values - this will only be present if type of the property is multiselect.", alias="valueStringArray")
    __properties: ClassVar[List[str]] = ["key", "valueBool", "valueBundle", "valueBundleArray", "valueInteger", "valueString", "valueStringArray"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ManagedProperty from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of value_bundle
        if self.value_bundle:
            _dict['valueBundle'] = self.value_bundle.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in value_bundle_array (list)
        _items = []
        if self.value_bundle_array:
            for _item_value_bundle_array in self.value_bundle_array:
                if _item_value_bundle_array:
                    _items.append(_item_value_bundle_array.to_dict())
            _dict['valueBundleArray'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ManagedProperty from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "key": obj.get("key"),
            "valueBool": obj.get("valueBool"),
            "valueBundle": ManagedPropertyBundle.from_dict(obj["valueBundle"]) if obj.get("valueBundle") is not None else None,
            "valueBundleArray": [ManagedPropertyBundle.from_dict(_item) for _item in obj["valueBundleArray"]] if obj.get("valueBundleArray") is not None else None,
            "valueInteger": obj.get("valueInteger"),
            "valueString": obj.get("valueString"),
            "valueStringArray": obj.get("valueStringArray")
        })
        return _obj

from openapi_client.models.managed_property_bundle import ManagedPropertyBundle
# TODO: Rewrite to not use raise_errors
ManagedProperty.model_rebuild(raise_errors=False)


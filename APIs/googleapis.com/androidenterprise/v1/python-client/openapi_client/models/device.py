# coding: utf-8

"""
    Google Play EMM API

    Manages the deployment of apps to Android Enterprise devices.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.device_report import DeviceReport
from openapi_client.models.policy import Policy
from typing import Optional, Set
from typing_extensions import Self

class Device(BaseModel):
    """
    A Devices resource represents a mobile device managed by the EMM and belonging to a specific enterprise user.
    """ # noqa: E501
    android_id: Optional[StrictStr] = Field(default=None, description="The Google Play Services Android ID for the device encoded as a lowercase hex string. For example, \"123456789abcdef0\".", alias="androidId")
    device: Optional[StrictStr] = Field(default=None, description="The internal hardware codename of the device. This comes from android.os.Build.DEVICE. (field named \"device\" per logs/wireless/android/android_checkin.proto)")
    latest_build_fingerprint: Optional[StrictStr] = Field(default=None, description="The build fingerprint of the device if known.", alias="latestBuildFingerprint")
    maker: Optional[StrictStr] = Field(default=None, description="The manufacturer of the device. This comes from android.os.Build.MANUFACTURER.")
    management_type: Optional[StrictStr] = Field(default=None, description="Identifies the extent to which the device is controlled by a managed Google Play EMM in various deployment configurations. Possible values include: - \"managedDevice\", a device that has the EMM's device policy controller (DPC) as the device owner. - \"managedProfile\", a device that has a profile managed by the DPC (DPC is profile owner) in addition to a separate, personal profile that is unavailable to the DPC. - \"containerApp\", no longer used (deprecated). - \"unmanagedProfile\", a device that has been allowed (by the domain's admin, using the Admin Console to enable the privilege) to use managed Google Play, but the profile is itself not owned by a DPC. ", alias="managementType")
    model: Optional[StrictStr] = Field(default=None, description="The model name of the device. This comes from android.os.Build.MODEL.")
    policy: Optional[Policy] = None
    product: Optional[StrictStr] = Field(default=None, description="The product name of the device. This comes from android.os.Build.PRODUCT.")
    report: Optional[DeviceReport] = None
    retail_brand: Optional[StrictStr] = Field(default=None, description="Retail brand for the device, if set. See android.os.Build.BRAND", alias="retailBrand")
    sdk_version: Optional[StrictInt] = Field(default=None, description="API compatibility version.", alias="sdkVersion")
    __properties: ClassVar[List[str]] = ["androidId", "device", "latestBuildFingerprint", "maker", "managementType", "model", "policy", "product", "report", "retailBrand", "sdkVersion"]

    @field_validator('management_type')
    def management_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['managedDevice', 'managedProfile', 'containerApp', 'unmanagedProfile']):
            raise ValueError("must be one of enum values ('managedDevice', 'managedProfile', 'containerApp', 'unmanagedProfile')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Device from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of policy
        if self.policy:
            _dict['policy'] = self.policy.to_dict()
        # override the default output from pydantic by calling `to_dict()` of report
        if self.report:
            _dict['report'] = self.report.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Device from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "androidId": obj.get("androidId"),
            "device": obj.get("device"),
            "latestBuildFingerprint": obj.get("latestBuildFingerprint"),
            "maker": obj.get("maker"),
            "managementType": obj.get("managementType"),
            "model": obj.get("model"),
            "policy": Policy.from_dict(obj["policy"]) if obj.get("policy") is not None else None,
            "product": obj.get("product"),
            "report": DeviceReport.from_dict(obj["report"]) if obj.get("report") is not None else None,
            "retailBrand": obj.get("retailBrand"),
            "sdkVersion": obj.get("sdkVersion")
        })
        return _obj



# coding: utf-8

"""
    Google Play EMM API

    Manages the deployment of apps to Android Enterprise devices.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class AppVersion(BaseModel):
    """
    This represents a single version of the app.
    """ # noqa: E501
    is_production: Optional[StrictBool] = Field(default=None, description="True if this version is a production APK.", alias="isProduction")
    target_sdk_version: Optional[StrictInt] = Field(default=None, description="The SDK version this app targets, as specified in the manifest of the APK. See http://developer.android.com/guide/topics/manifest/uses-sdk-element.html", alias="targetSdkVersion")
    track: Optional[StrictStr] = Field(default=None, description="Deprecated, use trackId instead.")
    track_id: Optional[List[StrictStr]] = Field(default=None, description="Track ids that the app version is published in. Replaces the track field (deprecated), but doesn't include the production track (see isProduction instead).", alias="trackId")
    version_code: Optional[StrictInt] = Field(default=None, description="Unique increasing identifier for the app version.", alias="versionCode")
    version_string: Optional[StrictStr] = Field(default=None, description="The string used in the Play store by the app developer to identify the version. The string is not necessarily unique or localized (for example, the string could be \"1.4\").", alias="versionString")
    __properties: ClassVar[List[str]] = ["isProduction", "targetSdkVersion", "track", "trackId", "versionCode", "versionString"]

    @field_validator('track')
    def track_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['appTrackUnspecified', 'production', 'beta', 'alpha']):
            raise ValueError("must be one of enum values ('appTrackUnspecified', 'production', 'beta', 'alpha')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AppVersion from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AppVersion from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "isProduction": obj.get("isProduction"),
            "targetSdkVersion": obj.get("targetSdkVersion"),
            "track": obj.get("track"),
            "trackId": obj.get("trackId"),
            "versionCode": obj.get("versionCode"),
            "versionString": obj.get("versionString")
        })
        return _obj



# coding: utf-8

"""
    Google Play EMM API

    Manages the deployment of apps to Android Enterprise devices.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.app_restrictions_schema_change_event import AppRestrictionsSchemaChangeEvent
from openapi_client.models.app_update_event import AppUpdateEvent
from openapi_client.models.device_report_update_event import DeviceReportUpdateEvent
from openapi_client.models.install_failure_event import InstallFailureEvent
from openapi_client.models.new_device_event import NewDeviceEvent
from openapi_client.models.new_permissions_event import NewPermissionsEvent
from openapi_client.models.product_approval_event import ProductApprovalEvent
from openapi_client.models.product_availability_change_event import ProductAvailabilityChangeEvent
from typing import Optional, Set
from typing_extensions import Self

class Notification(BaseModel):
    """
    A notification of one event relating to an enterprise.
    """ # noqa: E501
    app_restrictions_schema_change_event: Optional[AppRestrictionsSchemaChangeEvent] = Field(default=None, alias="appRestrictionsSchemaChangeEvent")
    app_update_event: Optional[AppUpdateEvent] = Field(default=None, alias="appUpdateEvent")
    device_report_update_event: Optional[DeviceReportUpdateEvent] = Field(default=None, alias="deviceReportUpdateEvent")
    enterprise_id: Optional[StrictStr] = Field(default=None, description="The ID of the enterprise for which the notification is sent. This will always be present.", alias="enterpriseId")
    install_failure_event: Optional[InstallFailureEvent] = Field(default=None, alias="installFailureEvent")
    new_device_event: Optional[NewDeviceEvent] = Field(default=None, alias="newDeviceEvent")
    new_permissions_event: Optional[NewPermissionsEvent] = Field(default=None, alias="newPermissionsEvent")
    notification_type: Optional[StrictStr] = Field(default=None, description="Type of the notification.", alias="notificationType")
    product_approval_event: Optional[ProductApprovalEvent] = Field(default=None, alias="productApprovalEvent")
    product_availability_change_event: Optional[ProductAvailabilityChangeEvent] = Field(default=None, alias="productAvailabilityChangeEvent")
    timestamp_millis: Optional[StrictStr] = Field(default=None, description="The time when the notification was published in milliseconds since 1970-01-01T00:00:00Z. This will always be present.", alias="timestampMillis")
    __properties: ClassVar[List[str]] = ["appRestrictionsSchemaChangeEvent", "appUpdateEvent", "deviceReportUpdateEvent", "enterpriseId", "installFailureEvent", "newDeviceEvent", "newPermissionsEvent", "notificationType", "productApprovalEvent", "productAvailabilityChangeEvent", "timestampMillis"]

    @field_validator('notification_type')
    def notification_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['unknown', 'testNotification', 'productApproval', 'installFailure', 'appUpdate', 'newPermissions', 'appRestricionsSchemaChange', 'productAvailabilityChange', 'newDevice', 'deviceReportUpdate']):
            raise ValueError("must be one of enum values ('unknown', 'testNotification', 'productApproval', 'installFailure', 'appUpdate', 'newPermissions', 'appRestricionsSchemaChange', 'productAvailabilityChange', 'newDevice', 'deviceReportUpdate')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Notification from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of app_restrictions_schema_change_event
        if self.app_restrictions_schema_change_event:
            _dict['appRestrictionsSchemaChangeEvent'] = self.app_restrictions_schema_change_event.to_dict()
        # override the default output from pydantic by calling `to_dict()` of app_update_event
        if self.app_update_event:
            _dict['appUpdateEvent'] = self.app_update_event.to_dict()
        # override the default output from pydantic by calling `to_dict()` of device_report_update_event
        if self.device_report_update_event:
            _dict['deviceReportUpdateEvent'] = self.device_report_update_event.to_dict()
        # override the default output from pydantic by calling `to_dict()` of install_failure_event
        if self.install_failure_event:
            _dict['installFailureEvent'] = self.install_failure_event.to_dict()
        # override the default output from pydantic by calling `to_dict()` of new_device_event
        if self.new_device_event:
            _dict['newDeviceEvent'] = self.new_device_event.to_dict()
        # override the default output from pydantic by calling `to_dict()` of new_permissions_event
        if self.new_permissions_event:
            _dict['newPermissionsEvent'] = self.new_permissions_event.to_dict()
        # override the default output from pydantic by calling `to_dict()` of product_approval_event
        if self.product_approval_event:
            _dict['productApprovalEvent'] = self.product_approval_event.to_dict()
        # override the default output from pydantic by calling `to_dict()` of product_availability_change_event
        if self.product_availability_change_event:
            _dict['productAvailabilityChangeEvent'] = self.product_availability_change_event.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Notification from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "appRestrictionsSchemaChangeEvent": AppRestrictionsSchemaChangeEvent.from_dict(obj["appRestrictionsSchemaChangeEvent"]) if obj.get("appRestrictionsSchemaChangeEvent") is not None else None,
            "appUpdateEvent": AppUpdateEvent.from_dict(obj["appUpdateEvent"]) if obj.get("appUpdateEvent") is not None else None,
            "deviceReportUpdateEvent": DeviceReportUpdateEvent.from_dict(obj["deviceReportUpdateEvent"]) if obj.get("deviceReportUpdateEvent") is not None else None,
            "enterpriseId": obj.get("enterpriseId"),
            "installFailureEvent": InstallFailureEvent.from_dict(obj["installFailureEvent"]) if obj.get("installFailureEvent") is not None else None,
            "newDeviceEvent": NewDeviceEvent.from_dict(obj["newDeviceEvent"]) if obj.get("newDeviceEvent") is not None else None,
            "newPermissionsEvent": NewPermissionsEvent.from_dict(obj["newPermissionsEvent"]) if obj.get("newPermissionsEvent") is not None else None,
            "notificationType": obj.get("notificationType"),
            "productApprovalEvent": ProductApprovalEvent.from_dict(obj["productApprovalEvent"]) if obj.get("productApprovalEvent") is not None else None,
            "productAvailabilityChangeEvent": ProductAvailabilityChangeEvent.from_dict(obj["productAvailabilityChangeEvent"]) if obj.get("productAvailabilityChangeEvent") is not None else None,
            "timestampMillis": obj.get("timestampMillis")
        })
        return _obj



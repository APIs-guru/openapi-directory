# coding: utf-8

"""
    Google Play EMM API

    Manages the deployment of apps to Android Enterprise devices.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.localized_text import LocalizedText
from typing import Optional, Set
from typing_extensions import Self

class StoreCluster(BaseModel):
    """
    Definition of a managed Google Play store cluster, a list of products displayed as part of a store page.
    """ # noqa: E501
    id: Optional[StrictStr] = Field(default=None, description="Unique ID of this cluster. Assigned by the server. Immutable once assigned.")
    name: Optional[List[LocalizedText]] = Field(default=None, description="Ordered list of localized strings giving the name of this page. The text displayed is the one that best matches the user locale, or the first entry if there is no good match. There needs to be at least one entry.")
    order_in_page: Optional[StrictStr] = Field(default=None, description="String (US-ASCII only) used to determine order of this cluster within the parent page's elements. Page elements are sorted in lexicographic order of this field. Duplicated values are allowed, but ordering between elements with duplicate order is undefined. The value of this field is never visible to a user, it is used solely for the purpose of defining an ordering. Maximum length is 256 characters.", alias="orderInPage")
    product_id: Optional[List[StrictStr]] = Field(default=None, description="List of products in the order they are displayed in the cluster. There should not be duplicates within a cluster.", alias="productId")
    __properties: ClassVar[List[str]] = ["id", "name", "orderInPage", "productId"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of StoreCluster from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in name (list)
        _items = []
        if self.name:
            for _item_name in self.name:
                if _item_name:
                    _items.append(_item_name.to_dict())
            _dict['name'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of StoreCluster from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "name": [LocalizedText.from_dict(_item) for _item in obj["name"]] if obj.get("name") is not None else None,
            "orderInPage": obj.get("orderInPage"),
            "productId": obj.get("productId")
        })
        return _obj



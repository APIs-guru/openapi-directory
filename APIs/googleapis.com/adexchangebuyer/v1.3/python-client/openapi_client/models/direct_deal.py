# coding: utf-8

"""
    Ad Exchange Buyer API

    Accesses your bidding-account information, submits creatives for validation, finds available direct deals, and retrieves performance reports.

    The version of the OpenAPI document: v1.3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class DirectDeal(BaseModel):
    """
    The configuration data for an Ad Exchange direct deal.
    """ # noqa: E501
    account_id: Optional[StrictInt] = Field(default=None, description="The account id of the buyer this deal is for.", alias="accountId")
    advertiser: Optional[StrictStr] = Field(default=None, description="The name of the advertiser this deal is for.")
    allows_alcohol: Optional[StrictBool] = Field(default=None, description="Whether the publisher for this deal is eligible for alcohol ads.", alias="allowsAlcohol")
    buyer_account_id: Optional[StrictStr] = Field(default=None, description="The account id that this deal was negotiated for. It is either the buyer or the client that this deal was negotiated on behalf of.", alias="buyerAccountId")
    currency_code: Optional[StrictStr] = Field(default=None, description="The currency code that applies to the fixed_cpm value. If not set then assumed to be USD.", alias="currencyCode")
    deal_tier: Optional[StrictStr] = Field(default=None, description="The deal type such as programmatic reservation or fixed price and so on.", alias="dealTier")
    end_time: Optional[StrictStr] = Field(default=None, description="End time for when this deal stops being active. If not set then this deal is valid until manually disabled by the publisher. In seconds since the epoch.", alias="endTime")
    fixed_cpm: Optional[StrictStr] = Field(default=None, description="The fixed price for this direct deal. In cpm micros of currency according to currency_code. If set, then this deal is eligible for the fixed price tier of buying (highest priority, pay exactly the configured fixed price).", alias="fixedCpm")
    id: Optional[StrictStr] = Field(default=None, description="Deal id.")
    kind: Optional[StrictStr] = Field(default='adexchangebuyer#directDeal', description="Resource type.")
    name: Optional[StrictStr] = Field(default=None, description="Deal name.")
    private_exchange_min_cpm: Optional[StrictStr] = Field(default=None, description="The minimum price for this direct deal. In cpm micros of currency according to currency_code. If set, then this deal is eligible for the private exchange tier of buying (below fixed price priority, run as a second price auction).", alias="privateExchangeMinCpm")
    publisher_blocks_overriden: Optional[StrictBool] = Field(default=None, description="If true, the publisher has opted to have their blocks ignored when a creative is bid with for this deal.", alias="publisherBlocksOverriden")
    seller_network: Optional[StrictStr] = Field(default=None, description="The name of the publisher offering this direct deal.", alias="sellerNetwork")
    start_time: Optional[StrictStr] = Field(default=None, description="Start time for when this deal becomes active. If not set then this deal is active immediately upon creation. In seconds since the epoch.", alias="startTime")
    __properties: ClassVar[List[str]] = ["accountId", "advertiser", "allowsAlcohol", "buyerAccountId", "currencyCode", "dealTier", "endTime", "fixedCpm", "id", "kind", "name", "privateExchangeMinCpm", "publisherBlocksOverriden", "sellerNetwork", "startTime"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DirectDeal from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DirectDeal from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "accountId": obj.get("accountId"),
            "advertiser": obj.get("advertiser"),
            "allowsAlcohol": obj.get("allowsAlcohol"),
            "buyerAccountId": obj.get("buyerAccountId"),
            "currencyCode": obj.get("currencyCode"),
            "dealTier": obj.get("dealTier"),
            "endTime": obj.get("endTime"),
            "fixedCpm": obj.get("fixedCpm"),
            "id": obj.get("id"),
            "kind": obj.get("kind") if obj.get("kind") is not None else 'adexchangebuyer#directDeal',
            "name": obj.get("name"),
            "privateExchangeMinCpm": obj.get("privateExchangeMinCpm"),
            "publisherBlocksOverriden": obj.get("publisherBlocksOverriden"),
            "sellerNetwork": obj.get("sellerNetwork"),
            "startTime": obj.get("startTime")
        })
        return _obj



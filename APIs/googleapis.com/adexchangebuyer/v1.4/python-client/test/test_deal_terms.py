# coding: utf-8

"""
    Ad Exchange Buyer API

    Accesses your bidding-account information, submits creatives for validation, finds available direct deals, and retrieves performance reports.

    The version of the OpenAPI document: v1.4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.deal_terms import DealTerms

class TestDealTerms(unittest.TestCase):
    """DealTerms unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> DealTerms:
        """Test DealTerms
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `DealTerms`
        """
        model = DealTerms()
        if include_optional:
            return DealTerms(
                branding_type = '',
                cross_listed_external_deal_id_type = '',
                description = '',
                estimated_gross_spend = openapi_client.models.price.Price(
                    amount_micros = 1.337, 
                    currency_code = '', 
                    expected_cpm_micros = 1.337, 
                    pricing_type = '', ),
                estimated_impressions_per_day = '',
                guaranteed_fixed_price_terms = openapi_client.models.deal_terms_guaranteed_fixed_price_terms.DealTermsGuaranteedFixedPriceTerms(
                    billing_info = openapi_client.models.deal_terms_guaranteed_fixed_price_terms_billing_info.DealTermsGuaranteedFixedPriceTermsBillingInfo(
                        currency_conversion_time_ms = '', 
                        dfp_line_item_id = '', 
                        original_contracted_quantity = '', 
                        price = openapi_client.models.price.Price(
                            amount_micros = 1.337, 
                            currency_code = '', 
                            expected_cpm_micros = 1.337, 
                            pricing_type = '', ), ), 
                    fixed_prices = [
                        openapi_client.models.price_per_buyer.PricePerBuyer(
                            auction_tier = '', 
                            billed_buyer = openapi_client.models.buyer.Buyer(
                                account_id = '', ), 
                            buyer = openapi_client.models.buyer.Buyer(
                                account_id = '', ), )
                        ], 
                    guaranteed_impressions = '', 
                    guaranteed_looks = '', 
                    minimum_daily_looks = '', ),
                non_guaranteed_auction_terms = openapi_client.models.deal_terms_non_guaranteed_auction_terms.DealTermsNonGuaranteedAuctionTerms(
                    auto_optimize_private_auction = True, 
                    reserve_price_per_buyers = [
                        openapi_client.models.price_per_buyer.PricePerBuyer(
                            auction_tier = '', 
                            billed_buyer = openapi_client.models.buyer.Buyer(
                                account_id = '', ), 
                            buyer = openapi_client.models.buyer.Buyer(
                                account_id = '', ), 
                            price = openapi_client.models.price.Price(
                                amount_micros = 1.337, 
                                currency_code = '', 
                                expected_cpm_micros = 1.337, 
                                pricing_type = '', ), )
                        ], ),
                non_guaranteed_fixed_price_terms = openapi_client.models.deal_terms_non_guaranteed_fixed_price_terms.DealTermsNonGuaranteedFixedPriceTerms(
                    fixed_prices = [
                        openapi_client.models.price_per_buyer.PricePerBuyer(
                            auction_tier = '', 
                            billed_buyer = openapi_client.models.buyer.Buyer(
                                account_id = '', ), 
                            buyer = openapi_client.models.buyer.Buyer(
                                account_id = '', ), 
                            price = openapi_client.models.price.Price(
                                amount_micros = 1.337, 
                                currency_code = '', 
                                expected_cpm_micros = 1.337, 
                                pricing_type = '', ), )
                        ], ),
                rubicon_non_guaranteed_terms = openapi_client.models.deal_terms_rubicon_non_guaranteed_terms.DealTermsRubiconNonGuaranteedTerms(
                    priority_price = openapi_client.models.price.Price(
                        amount_micros = 1.337, 
                        currency_code = '', 
                        expected_cpm_micros = 1.337, 
                        pricing_type = '', ), 
                    standard_price = openapi_client.models.price.Price(
                        amount_micros = 1.337, 
                        currency_code = '', 
                        expected_cpm_micros = 1.337, 
                        pricing_type = '', ), ),
                seller_time_zone = ''
            )
        else:
            return DealTerms(
        )
        """

    def testDealTerms(self):
        """Test DealTerms"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

# coding: utf-8

"""
    Ad Exchange Buyer API

    Accesses your bidding-account information, submits creatives for validation, finds available direct deals, and retrieves performance reports.

    The version of the OpenAPI document: v1.4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.creative_corrections_inner import CreativeCorrectionsInner

class TestCreativeCorrectionsInner(unittest.TestCase):
    """CreativeCorrectionsInner unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> CreativeCorrectionsInner:
        """Test CreativeCorrectionsInner
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `CreativeCorrectionsInner`
        """
        model = CreativeCorrectionsInner()
        if include_optional:
            return CreativeCorrectionsInner(
                contexts = [
                    openapi_client.models.creative_corrections_inner_contexts_inner.Creative_corrections_inner_contexts_inner(
                        auction_type = [
                            ''
                            ], 
                        context_type = '', 
                        geo_criteria_id = [
                            56
                            ], 
                        platform = [
                            ''
                            ], )
                    ],
                details = [
                    ''
                    ],
                reason = ''
            )
        else:
            return CreativeCorrectionsInner(
        )
        """

    def testCreativeCorrectionsInner(self):
        """Test CreativeCorrectionsInner"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

# coding: utf-8

"""
    Ad Exchange Buyer API

    Accesses your bidding-account information, submits creatives for validation, finds available direct deals, and retrieves performance reports.

    The version of the OpenAPI document: v1.4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.publisher_profile_api_proto import PublisherProfileApiProto

class TestPublisherProfileApiProto(unittest.TestCase):
    """PublisherProfileApiProto unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> PublisherProfileApiProto:
        """Test PublisherProfileApiProto
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `PublisherProfileApiProto`
        """
        model = PublisherProfileApiProto()
        if include_optional:
            return PublisherProfileApiProto(
                audience = '',
                buyer_pitch_statement = '',
                direct_contact = '',
                exchange = '',
                forecast_inventory = '',
                google_plus_link = '',
                is_parent = True,
                is_published = True,
                kind = 'adexchangebuyer#publisherProfileApiProto',
                logo_url = '',
                media_kit_link = '',
                name = '',
                overview = '',
                profile_id = 56,
                programmatic_contact = '',
                publisher_app_ids = [
                    ''
                    ],
                publisher_apps = [
                    openapi_client.models.mobile_application.MobileApplication(
                        app_store = '', 
                        external_app_id = '', )
                    ],
                publisher_domains = [
                    ''
                    ],
                publisher_profile_id = '',
                publisher_provided_forecast = openapi_client.models.publisher_provided_forecast.PublisherProvidedForecast(
                    dimensions = [
                        openapi_client.models.dimension.Dimension(
                            dimension_type = '', 
                            dimension_values = [
                                openapi_client.models.dimension_dimension_value.DimensionDimensionValue(
                                    id = 56, 
                                    name = '', 
                                    percentage = 56, )
                                ], )
                        ], 
                    weekly_impressions = '', 
                    weekly_uniques = '', ),
                rate_card_info_link = '',
                sample_page_link = '',
                seller = openapi_client.models.seller.Seller(
                    account_id = '', 
                    sub_account_id = '', ),
                state = '',
                top_headlines = [
                    ''
                    ]
            )
        else:
            return PublisherProfileApiProto(
        )
        """

    def testPublisherProfileApiProto(self):
        """Test PublisherProfileApiProto"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

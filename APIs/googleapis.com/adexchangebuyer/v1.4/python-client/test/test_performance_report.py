# coding: utf-8

"""
    Ad Exchange Buyer API

    Accesses your bidding-account information, submits creatives for validation, finds available direct deals, and retrieves performance reports.

    The version of the OpenAPI document: v1.4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.performance_report import PerformanceReport

class TestPerformanceReport(unittest.TestCase):
    """PerformanceReport unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> PerformanceReport:
        """Test PerformanceReport
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `PerformanceReport`
        """
        model = PerformanceReport()
        if include_optional:
            return PerformanceReport(
                bid_rate = 1.337,
                bid_request_rate = 1.337,
                callout_status_rate = [
                    null
                    ],
                cookie_matcher_status_rate = [
                    null
                    ],
                creative_status_rate = [
                    null
                    ],
                filtered_bid_rate = 1.337,
                hosted_match_status_rate = [
                    null
                    ],
                inventory_match_rate = 1.337,
                kind = 'adexchangebuyer#performanceReport',
                latency50th_percentile = 1.337,
                latency85th_percentile = 1.337,
                latency95th_percentile = 1.337,
                no_quota_in_region = 1.337,
                out_of_quota = 1.337,
                pixel_match_requests = 1.337,
                pixel_match_responses = 1.337,
                quota_configured_limit = 1.337,
                quota_throttled_limit = 1.337,
                region = '',
                successful_request_rate = 1.337,
                timestamp = '',
                unsuccessful_request_rate = 1.337
            )
        else:
            return PerformanceReport(
        )
        """

    def testPerformanceReport(self):
        """Test PerformanceReport"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

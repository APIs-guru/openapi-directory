# coding: utf-8

"""
    Ad Exchange Buyer API

    Accesses your bidding-account information, submits creatives for validation, finds available direct deals, and retrieves performance reports.

    The version of the OpenAPI document: v1.4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.targeting_value import TargetingValue

class TestTargetingValue(unittest.TestCase):
    """TargetingValue unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> TargetingValue:
        """Test TargetingValue
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `TargetingValue`
        """
        model = TargetingValue()
        if include_optional:
            return TargetingValue(
                creative_size_value = openapi_client.models.targeting_value_creative_size.TargetingValueCreativeSize(
                    allowed_formats = [
                        ''
                        ], 
                    companion_sizes = [
                        openapi_client.models.targeting_value_size.TargetingValueSize(
                            height = 56, 
                            width = 56, )
                        ], 
                    creative_size_type = '', 
                    native_template = '', 
                    size = openapi_client.models.targeting_value_size.TargetingValueSize(
                        height = 56, 
                        width = 56, ), 
                    skippable_ad_type = '', ),
                day_part_targeting_value = openapi_client.models.targeting_value_day_part_targeting.TargetingValueDayPartTargeting(
                    day_parts = [
                        openapi_client.models.targeting_value_day_part_targeting_day_part.TargetingValueDayPartTargetingDayPart(
                            day_of_week = '', 
                            end_hour = 56, 
                            end_minute = 56, 
                            start_hour = 56, 
                            start_minute = 56, )
                        ], 
                    time_zone_type = '', ),
                demog_age_criteria_value = openapi_client.models.targeting_value_demog_age_criteria.TargetingValueDemogAgeCriteria(
                    demog_age_criteria_ids = [
                        ''
                        ], ),
                demog_gender_criteria_value = openapi_client.models.targeting_value_demog_gender_criteria.TargetingValueDemogGenderCriteria(
                    demog_gender_criteria_ids = [
                        ''
                        ], ),
                long_value = '',
                request_platform_targeting_value = openapi_client.models.targeting_value_request_platform_targeting.TargetingValueRequestPlatformTargeting(
                    request_platforms = [
                        ''
                        ], ),
                string_value = ''
            )
        else:
            return TargetingValue(
        )
        """

    def testTargetingValue(self):
        """Test TargetingValue"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

# coding: utf-8

"""
    Ad Exchange Buyer API

    Accesses your bidding-account information, submits creatives for validation, finds available direct deals, and retrieves performance reports.

    The version of the OpenAPI document: v1.4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.create_orders_response import CreateOrdersResponse

class TestCreateOrdersResponse(unittest.TestCase):
    """CreateOrdersResponse unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> CreateOrdersResponse:
        """Test CreateOrdersResponse
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `CreateOrdersResponse`
        """
        model = CreateOrdersResponse()
        if include_optional:
            return CreateOrdersResponse(
                proposals = [
                    openapi_client.models.proposal.Proposal(
                        billed_buyer = openapi_client.models.buyer.Buyer(
                            account_id = '', ), 
                        buyer = openapi_client.models.buyer.Buyer(
                            account_id = '', ), 
                        buyer_contacts = [
                            openapi_client.models.contact_information.ContactInformation(
                                email = '', 
                                name = '', )
                            ], 
                        buyer_private_data = openapi_client.models.private_data.PrivateData(
                            reference_id = '', 
                            reference_payload = 'YQ==', ), 
                        dbm_advertiser_ids = [
                            ''
                            ], 
                        has_buyer_signed_off = True, 
                        has_seller_signed_off = True, 
                        inventory_source = '', 
                        is_renegotiating = True, 
                        is_setup_complete = True, 
                        kind = 'adexchangebuyer#proposal', 
                        labels = [
                            openapi_client.models.marketplace_label.MarketplaceLabel(
                                account_id = '', 
                                create_time_ms = '', 
                                deprecated_marketplace_deal_party = openapi_client.models.marketplace_deal_party.MarketplaceDealParty(
                                    seller = openapi_client.models.seller.Seller(
                                        account_id = '', 
                                        sub_account_id = '', ), ), 
                                label = '', )
                            ], 
                        last_updater_or_commentor_role = '', 
                        name = '', 
                        negotiation_id = '', 
                        originator_role = '', 
                        private_auction_id = '', 
                        proposal_id = '', 
                        proposal_state = '', 
                        revision_number = '', 
                        revision_time_ms = '', 
                        seller = openapi_client.models.seller.Seller(
                            account_id = '', 
                            sub_account_id = '', ), 
                        seller_contacts = [
                            openapi_client.models.contact_information.ContactInformation(
                                email = '', 
                                name = '', )
                            ], )
                    ]
            )
        else:
            return CreateOrdersResponse(
        )
        """

    def testCreateOrdersResponse(self):
        """Test CreateOrdersResponse"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

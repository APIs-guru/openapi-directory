# coding: utf-8

"""
    Ad Exchange Buyer API

    Accesses your bidding-account information, submits creatives for validation, finds available direct deals, and retrieves performance reports.

    The version of the OpenAPI document: v1.4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.get_offers_response import GetOffersResponse

class TestGetOffersResponse(unittest.TestCase):
    """GetOffersResponse unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> GetOffersResponse:
        """Test GetOffersResponse
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `GetOffersResponse`
        """
        model = GetOffersResponse()
        if include_optional:
            return GetOffersResponse(
                products = [
                    openapi_client.models.product.Product(
                        billed_buyer = openapi_client.models.buyer.Buyer(
                            account_id = '', ), 
                        buyer = openapi_client.models.buyer.Buyer(
                            account_id = '', ), 
                        creation_time_ms = '', 
                        creator_contacts = [
                            openapi_client.models.contact_information.ContactInformation(
                                email = '', 
                                name = '', )
                            ], 
                        creator_role = '', 
                        delivery_control = openapi_client.models.delivery_control.DeliveryControl(
                            creative_blocking_level = '', 
                            delivery_rate_type = '', 
                            frequency_caps = [
                                openapi_client.models.delivery_control_frequency_cap.DeliveryControlFrequencyCap(
                                    max_impressions = 56, 
                                    num_time_units = 56, 
                                    time_unit_type = '', )
                                ], ), 
                        flight_end_time_ms = '', 
                        flight_start_time_ms = '', 
                        has_creator_signed_off = True, 
                        inventory_source = '', 
                        kind = 'adexchangebuyer#product', 
                        labels = [
                            openapi_client.models.marketplace_label.MarketplaceLabel(
                                account_id = '', 
                                create_time_ms = '', 
                                deprecated_marketplace_deal_party = openapi_client.models.marketplace_deal_party.MarketplaceDealParty(
                                    seller = openapi_client.models.seller.Seller(
                                        account_id = '', 
                                        sub_account_id = '', ), ), 
                                label = '', )
                            ], 
                        last_update_time_ms = '', 
                        legacy_offer_id = '', 
                        marketplace_publisher_profile_id = '', 
                        name = '', 
                        private_auction_id = '', 
                        product_id = '', 
                        publisher_profile_id = '', 
                        publisher_provided_forecast = openapi_client.models.publisher_provided_forecast.PublisherProvidedForecast(
                            dimensions = [
                                openapi_client.models.dimension.Dimension(
                                    dimension_type = '', 
                                    dimension_values = [
                                        openapi_client.models.dimension_dimension_value.DimensionDimensionValue(
                                            id = 56, 
                                            name = '', 
                                            percentage = 56, )
                                        ], )
                                ], 
                            weekly_impressions = '', 
                            weekly_uniques = '', ), 
                        revision_number = '', 
                        seller = openapi_client.models.seller.Seller(
                            account_id = '', 
                            sub_account_id = '', ), 
                        shared_targetings = [
                            openapi_client.models.shared_targeting.SharedTargeting(
                                exclusions = [
                                    openapi_client.models.targeting_value.TargetingValue(
                                        creative_size_value = openapi_client.models.targeting_value_creative_size.TargetingValueCreativeSize(
                                            allowed_formats = [
                                                ''
                                                ], 
                                            companion_sizes = [
                                                openapi_client.models.targeting_value_size.TargetingValueSize(
                                                    height = 56, 
                                                    width = 56, )
                                                ], 
                                            creative_size_type = '', 
                                            native_template = '', 
                                            size = openapi_client.models.targeting_value_size.TargetingValueSize(
                                                height = 56, 
                                                width = 56, ), 
                                            skippable_ad_type = '', ), 
                                        day_part_targeting_value = openapi_client.models.targeting_value_day_part_targeting.TargetingValueDayPartTargeting(
                                            day_parts = [
                                                openapi_client.models.targeting_value_day_part_targeting_day_part.TargetingValueDayPartTargetingDayPart(
                                                    day_of_week = '', 
                                                    end_hour = 56, 
                                                    end_minute = 56, 
                                                    start_hour = 56, 
                                                    start_minute = 56, )
                                                ], 
                                            time_zone_type = '', ), 
                                        demog_age_criteria_value = openapi_client.models.targeting_value_demog_age_criteria.TargetingValueDemogAgeCriteria(
                                            demog_age_criteria_ids = [
                                                ''
                                                ], ), 
                                        demog_gender_criteria_value = openapi_client.models.targeting_value_demog_gender_criteria.TargetingValueDemogGenderCriteria(
                                            demog_gender_criteria_ids = [
                                                ''
                                                ], ), 
                                        long_value = '', 
                                        request_platform_targeting_value = openapi_client.models.targeting_value_request_platform_targeting.TargetingValueRequestPlatformTargeting(
                                            request_platforms = [
                                                ''
                                                ], ), 
                                        string_value = '', )
                                    ], 
                                inclusions = [
                                    openapi_client.models.targeting_value.TargetingValue(
                                        long_value = '', 
                                        string_value = '', )
                                    ], 
                                key = '', )
                            ], 
                        state = '', 
                        syndication_product = '', 
                        terms = openapi_client.models.deal_terms.DealTerms(
                            branding_type = '', 
                            cross_listed_external_deal_id_type = '', 
                            description = '', 
                            estimated_gross_spend = openapi_client.models.price.Price(
                                amount_micros = 1.337, 
                                currency_code = '', 
                                expected_cpm_micros = 1.337, 
                                pricing_type = '', ), 
                            estimated_impressions_per_day = '', 
                            guaranteed_fixed_price_terms = openapi_client.models.deal_terms_guaranteed_fixed_price_terms.DealTermsGuaranteedFixedPriceTerms(
                                billing_info = openapi_client.models.deal_terms_guaranteed_fixed_price_terms_billing_info.DealTermsGuaranteedFixedPriceTermsBillingInfo(
                                    currency_conversion_time_ms = '', 
                                    dfp_line_item_id = '', 
                                    original_contracted_quantity = '', 
                                    price = openapi_client.models.price.Price(
                                        amount_micros = 1.337, 
                                        currency_code = '', 
                                        expected_cpm_micros = 1.337, 
                                        pricing_type = '', ), ), 
                                fixed_prices = [
                                    openapi_client.models.price_per_buyer.PricePerBuyer(
                                        auction_tier = '', )
                                    ], 
                                guaranteed_impressions = '', 
                                guaranteed_looks = '', 
                                minimum_daily_looks = '', ), 
                            non_guaranteed_auction_terms = openapi_client.models.deal_terms_non_guaranteed_auction_terms.DealTermsNonGuaranteedAuctionTerms(
                                auto_optimize_private_auction = True, 
                                reserve_price_per_buyers = [
                                    openapi_client.models.price_per_buyer.PricePerBuyer(
                                        auction_tier = '', )
                                    ], ), 
                            non_guaranteed_fixed_price_terms = openapi_client.models.deal_terms_non_guaranteed_fixed_price_terms.DealTermsNonGuaranteedFixedPriceTerms(), 
                            rubicon_non_guaranteed_terms = openapi_client.models.deal_terms_rubicon_non_guaranteed_terms.DealTermsRubiconNonGuaranteedTerms(
                                priority_price = , 
                                standard_price = , ), 
                            seller_time_zone = '', ), 
                        web_property_code = '', )
                    ]
            )
        else:
            return GetOffersResponse(
        )
        """

    def testGetOffersResponse(self):
        """Test GetOffersResponse"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

# coding: utf-8

"""
    Ad Exchange Buyer API

    Accesses your bidding-account information, submits creatives for validation, finds available direct deals, and retrieves performance reports.

    The version of the OpenAPI document: v1.4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.account_bidder_location_inner import AccountBidderLocationInner
from typing import Optional, Set
from typing_extensions import Self

class Account(BaseModel):
    """
    Configuration data for an Ad Exchange buyer account.
    """ # noqa: E501
    apply_pretargeting_to_non_guaranteed_deals: Optional[StrictBool] = Field(default=None, description="When this is false, bid requests that include a deal ID for a private auction or preferred deal are always sent to your bidder. When true, all active pretargeting configs will be applied to private auctions and preferred deals. Programmatic Guaranteed deals (when enabled) are always sent to your bidder.", alias="applyPretargetingToNonGuaranteedDeals")
    bidder_location: Optional[List[AccountBidderLocationInner]] = Field(default=None, description="Your bidder locations that have distinct URLs.", alias="bidderLocation")
    cookie_matching_nid: Optional[StrictStr] = Field(default=None, description="The nid parameter value used in cookie match requests. Please contact your technical account manager if you need to change this.", alias="cookieMatchingNid")
    cookie_matching_url: Optional[StrictStr] = Field(default=None, description="The base URL used in cookie match requests.", alias="cookieMatchingUrl")
    id: Optional[StrictInt] = Field(default=None, description="Account id.")
    kind: Optional[StrictStr] = Field(default='adexchangebuyer#account', description="Resource type.")
    maximum_active_creatives: Optional[StrictInt] = Field(default=None, description="The maximum number of active creatives that an account can have, where a creative is active if it was inserted or bid with in the last 30 days. Please contact your technical account manager if you need to change this.", alias="maximumActiveCreatives")
    maximum_total_qps: Optional[StrictInt] = Field(default=None, description="The sum of all bidderLocation.maximumQps values cannot exceed this. Please contact your technical account manager if you need to change this.", alias="maximumTotalQps")
    number_active_creatives: Optional[StrictInt] = Field(default=None, description="The number of creatives that this account inserted or bid with in the last 30 days.", alias="numberActiveCreatives")
    __properties: ClassVar[List[str]] = ["applyPretargetingToNonGuaranteedDeals", "bidderLocation", "cookieMatchingNid", "cookieMatchingUrl", "id", "kind", "maximumActiveCreatives", "maximumTotalQps", "numberActiveCreatives"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Account from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in bidder_location (list)
        _items = []
        if self.bidder_location:
            for _item_bidder_location in self.bidder_location:
                if _item_bidder_location:
                    _items.append(_item_bidder_location.to_dict())
            _dict['bidderLocation'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Account from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "applyPretargetingToNonGuaranteedDeals": obj.get("applyPretargetingToNonGuaranteedDeals"),
            "bidderLocation": [AccountBidderLocationInner.from_dict(_item) for _item in obj["bidderLocation"]] if obj.get("bidderLocation") is not None else None,
            "cookieMatchingNid": obj.get("cookieMatchingNid"),
            "cookieMatchingUrl": obj.get("cookieMatchingUrl"),
            "id": obj.get("id"),
            "kind": obj.get("kind") if obj.get("kind") is not None else 'adexchangebuyer#account',
            "maximumActiveCreatives": obj.get("maximumActiveCreatives"),
            "maximumTotalQps": obj.get("maximumTotalQps"),
            "numberActiveCreatives": obj.get("numberActiveCreatives")
        })
        return _obj



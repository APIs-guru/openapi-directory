# coding: utf-8

"""
    Ad Exchange Buyer API

    Accesses your bidding-account information, submits creatives for validation, finds available direct deals, and retrieves performance reports.

    The version of the OpenAPI document: v1.4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.contact_information import ContactInformation
from openapi_client.models.deal_serving_metadata import DealServingMetadata
from openapi_client.models.deal_terms import DealTerms
from openapi_client.models.delivery_control import DeliveryControl
from openapi_client.models.private_data import PrivateData
from openapi_client.models.shared_targeting import SharedTargeting
from typing import Optional, Set
from typing_extensions import Self

class MarketplaceDeal(BaseModel):
    """
    A proposal can contain multiple deals. A deal contains the terms and targeting information that is used for serving.
    """ # noqa: E501
    buyer_private_data: Optional[PrivateData] = Field(default=None, alias="buyerPrivateData")
    creation_time_ms: Optional[StrictStr] = Field(default=None, description="The time (ms since epoch) of the deal creation. (readonly)", alias="creationTimeMs")
    creative_pre_approval_policy: Optional[StrictStr] = Field(default=None, description="Specifies the creative pre-approval policy (buyer-readonly)", alias="creativePreApprovalPolicy")
    creative_safe_frame_compatibility: Optional[StrictStr] = Field(default=None, description="Specifies whether the creative is safeFrame compatible (buyer-readonly)", alias="creativeSafeFrameCompatibility")
    deal_id: Optional[StrictStr] = Field(default=None, description="A unique deal-id for the deal (readonly).", alias="dealId")
    deal_serving_metadata: Optional[DealServingMetadata] = Field(default=None, alias="dealServingMetadata")
    delivery_control: Optional[DeliveryControl] = Field(default=None, alias="deliveryControl")
    external_deal_id: Optional[StrictStr] = Field(default=None, description="The external deal id assigned to this deal once the deal is finalized. This is the deal-id that shows up in serving/reporting etc. (readonly)", alias="externalDealId")
    flight_end_time_ms: Optional[StrictStr] = Field(default=None, description="Proposed flight end time of the deal (ms since epoch) This will generally be stored in a granularity of a second. (updatable)", alias="flightEndTimeMs")
    flight_start_time_ms: Optional[StrictStr] = Field(default=None, description="Proposed flight start time of the deal (ms since epoch) This will generally be stored in a granularity of a second. (updatable)", alias="flightStartTimeMs")
    inventory_description: Optional[StrictStr] = Field(default=None, description="Description for the deal terms. (buyer-readonly)", alias="inventoryDescription")
    is_rfp_template: Optional[StrictBool] = Field(default=None, description="Indicates whether the current deal is a RFP template. RFP template is created by buyer and not based on seller created products.", alias="isRfpTemplate")
    is_setup_complete: Optional[StrictBool] = Field(default=None, description="True, if the buyside inventory setup is complete for this deal. (readonly, except via OrderSetupCompleted action)", alias="isSetupComplete")
    kind: Optional[StrictStr] = Field(default='adexchangebuyer#marketplaceDeal', description="Identifies what kind of resource this is. Value: the fixed string \"adexchangebuyer#marketplaceDeal\".")
    last_update_time_ms: Optional[StrictStr] = Field(default=None, description="The time (ms since epoch) when the deal was last updated. (readonly)", alias="lastUpdateTimeMs")
    makegood_requested_reason: Optional[StrictStr] = Field(default=None, alias="makegoodRequestedReason")
    name: Optional[StrictStr] = Field(default=None, description="The name of the deal. (updatable)")
    product_id: Optional[StrictStr] = Field(default=None, description="The product-id from which this deal was created. (readonly, except on create)", alias="productId")
    product_revision_number: Optional[StrictStr] = Field(default=None, description="The revision number of the product that the deal was created from (readonly, except on create)", alias="productRevisionNumber")
    programmatic_creative_source: Optional[StrictStr] = Field(default=None, description="Specifies the creative source for programmatic deals, PUBLISHER means creative is provided by seller and ADVERTISR means creative is provided by buyer. (buyer-readonly)", alias="programmaticCreativeSource")
    proposal_id: Optional[StrictStr] = Field(default=None, alias="proposalId")
    seller_contacts: Optional[List[ContactInformation]] = Field(default=None, description="Optional Seller contact information for the deal (buyer-readonly)", alias="sellerContacts")
    shared_targetings: Optional[List[SharedTargeting]] = Field(default=None, description="The shared targeting visible to buyers and sellers. Each shared targeting entity is AND'd together. (updatable)", alias="sharedTargetings")
    syndication_product: Optional[StrictStr] = Field(default=None, description="The syndication product associated with the deal. (readonly, except on create)", alias="syndicationProduct")
    terms: Optional[DealTerms] = None
    web_property_code: Optional[StrictStr] = Field(default=None, alias="webPropertyCode")
    __properties: ClassVar[List[str]] = ["buyerPrivateData", "creationTimeMs", "creativePreApprovalPolicy", "creativeSafeFrameCompatibility", "dealId", "dealServingMetadata", "deliveryControl", "externalDealId", "flightEndTimeMs", "flightStartTimeMs", "inventoryDescription", "isRfpTemplate", "isSetupComplete", "kind", "lastUpdateTimeMs", "makegoodRequestedReason", "name", "productId", "productRevisionNumber", "programmaticCreativeSource", "proposalId", "sellerContacts", "sharedTargetings", "syndicationProduct", "terms", "webPropertyCode"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of MarketplaceDeal from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of buyer_private_data
        if self.buyer_private_data:
            _dict['buyerPrivateData'] = self.buyer_private_data.to_dict()
        # override the default output from pydantic by calling `to_dict()` of deal_serving_metadata
        if self.deal_serving_metadata:
            _dict['dealServingMetadata'] = self.deal_serving_metadata.to_dict()
        # override the default output from pydantic by calling `to_dict()` of delivery_control
        if self.delivery_control:
            _dict['deliveryControl'] = self.delivery_control.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in seller_contacts (list)
        _items = []
        if self.seller_contacts:
            for _item_seller_contacts in self.seller_contacts:
                if _item_seller_contacts:
                    _items.append(_item_seller_contacts.to_dict())
            _dict['sellerContacts'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in shared_targetings (list)
        _items = []
        if self.shared_targetings:
            for _item_shared_targetings in self.shared_targetings:
                if _item_shared_targetings:
                    _items.append(_item_shared_targetings.to_dict())
            _dict['sharedTargetings'] = _items
        # override the default output from pydantic by calling `to_dict()` of terms
        if self.terms:
            _dict['terms'] = self.terms.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of MarketplaceDeal from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "buyerPrivateData": PrivateData.from_dict(obj["buyerPrivateData"]) if obj.get("buyerPrivateData") is not None else None,
            "creationTimeMs": obj.get("creationTimeMs"),
            "creativePreApprovalPolicy": obj.get("creativePreApprovalPolicy"),
            "creativeSafeFrameCompatibility": obj.get("creativeSafeFrameCompatibility"),
            "dealId": obj.get("dealId"),
            "dealServingMetadata": DealServingMetadata.from_dict(obj["dealServingMetadata"]) if obj.get("dealServingMetadata") is not None else None,
            "deliveryControl": DeliveryControl.from_dict(obj["deliveryControl"]) if obj.get("deliveryControl") is not None else None,
            "externalDealId": obj.get("externalDealId"),
            "flightEndTimeMs": obj.get("flightEndTimeMs"),
            "flightStartTimeMs": obj.get("flightStartTimeMs"),
            "inventoryDescription": obj.get("inventoryDescription"),
            "isRfpTemplate": obj.get("isRfpTemplate"),
            "isSetupComplete": obj.get("isSetupComplete"),
            "kind": obj.get("kind") if obj.get("kind") is not None else 'adexchangebuyer#marketplaceDeal',
            "lastUpdateTimeMs": obj.get("lastUpdateTimeMs"),
            "makegoodRequestedReason": obj.get("makegoodRequestedReason"),
            "name": obj.get("name"),
            "productId": obj.get("productId"),
            "productRevisionNumber": obj.get("productRevisionNumber"),
            "programmaticCreativeSource": obj.get("programmaticCreativeSource"),
            "proposalId": obj.get("proposalId"),
            "sellerContacts": [ContactInformation.from_dict(_item) for _item in obj["sellerContacts"]] if obj.get("sellerContacts") is not None else None,
            "sharedTargetings": [SharedTargeting.from_dict(_item) for _item in obj["sharedTargetings"]] if obj.get("sharedTargetings") is not None else None,
            "syndicationProduct": obj.get("syndicationProduct"),
            "terms": DealTerms.from_dict(obj["terms"]) if obj.get("terms") is not None else None,
            "webPropertyCode": obj.get("webPropertyCode")
        })
        return _obj



# coding: utf-8

"""
    Ad Exchange Buyer API

    Accesses your bidding-account information, submits creatives for validation, finds available direct deals, and retrieves performance reports.

    The version of the OpenAPI document: v1.4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.marketplace_deal import MarketplaceDeal
from openapi_client.models.proposal import Proposal
from typing import Optional, Set
from typing_extensions import Self

class EditAllOrderDealsRequest(BaseModel):
    """
    EditAllOrderDealsRequest
    """ # noqa: E501
    deals: Optional[List[MarketplaceDeal]] = Field(default=None, description="List of deals to edit. Service may perform 3 different operations based on comparison of deals in this list vs deals already persisted in database: 1. Add new deal to proposal If a deal in this list does not exist in the proposal, the service will create a new deal and add it to the proposal. Validation will follow AddOrderDealsRequest. 2. Update existing deal in the proposal If a deal in this list already exist in the proposal, the service will update that existing deal to this new deal in the request. Validation will follow UpdateOrderDealsRequest. 3. Delete deals from the proposal (just need the id) If a existing deal in the proposal is not present in this list, the service will delete that deal from the proposal. Validation will follow DeleteOrderDealsRequest.")
    proposal: Optional[Proposal] = None
    proposal_revision_number: Optional[StrictStr] = Field(default=None, description="The last known revision number for the proposal.", alias="proposalRevisionNumber")
    update_action: Optional[StrictStr] = Field(default=None, description="Indicates an optional action to take on the proposal", alias="updateAction")
    __properties: ClassVar[List[str]] = ["deals", "proposal", "proposalRevisionNumber", "updateAction"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of EditAllOrderDealsRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in deals (list)
        _items = []
        if self.deals:
            for _item_deals in self.deals:
                if _item_deals:
                    _items.append(_item_deals.to_dict())
            _dict['deals'] = _items
        # override the default output from pydantic by calling `to_dict()` of proposal
        if self.proposal:
            _dict['proposal'] = self.proposal.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of EditAllOrderDealsRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "deals": [MarketplaceDeal.from_dict(_item) for _item in obj["deals"]] if obj.get("deals") is not None else None,
            "proposal": Proposal.from_dict(obj["proposal"]) if obj.get("proposal") is not None else None,
            "proposalRevisionNumber": obj.get("proposalRevisionNumber"),
            "updateAction": obj.get("updateAction")
        })
        return _obj



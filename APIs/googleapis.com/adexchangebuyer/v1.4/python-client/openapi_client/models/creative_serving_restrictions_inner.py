# coding: utf-8

"""
    Ad Exchange Buyer API

    Accesses your bidding-account information, submits creatives for validation, finds available direct deals, and retrieves performance reports.

    The version of the OpenAPI document: v1.4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.creative_serving_restrictions_inner_contexts_inner import CreativeServingRestrictionsInnerContextsInner
from openapi_client.models.creative_serving_restrictions_inner_disapproval_reasons_inner import CreativeServingRestrictionsInnerDisapprovalReasonsInner
from typing import Optional, Set
from typing_extensions import Self

class CreativeServingRestrictionsInner(BaseModel):
    """
    CreativeServingRestrictionsInner
    """ # noqa: E501
    contexts: Optional[List[CreativeServingRestrictionsInnerContextsInner]] = Field(default=None, description="All known contexts/restrictions.")
    disapproval_reasons: Optional[List[CreativeServingRestrictionsInnerDisapprovalReasonsInner]] = Field(default=None, description="The reasons for disapproval within this restriction, if any. Note that not all disapproval reasons may be categorized, so it is possible for the creative to have a status of DISAPPROVED or CONDITIONALLY_APPROVED with an empty list for disapproval_reasons. In this case, please reach out to your TAM to help debug the issue.", alias="disapprovalReasons")
    reason: Optional[StrictStr] = Field(default=None, description="Why the creative is ineligible to serve in this context (e.g., it has been explicitly disapproved or is pending review).")
    __properties: ClassVar[List[str]] = ["contexts", "disapprovalReasons", "reason"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CreativeServingRestrictionsInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in contexts (list)
        _items = []
        if self.contexts:
            for _item_contexts in self.contexts:
                if _item_contexts:
                    _items.append(_item_contexts.to_dict())
            _dict['contexts'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in disapproval_reasons (list)
        _items = []
        if self.disapproval_reasons:
            for _item_disapproval_reasons in self.disapproval_reasons:
                if _item_disapproval_reasons:
                    _items.append(_item_disapproval_reasons.to_dict())
            _dict['disapprovalReasons'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CreativeServingRestrictionsInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "contexts": [CreativeServingRestrictionsInnerContextsInner.from_dict(_item) for _item in obj["contexts"]] if obj.get("contexts") is not None else None,
            "disapprovalReasons": [CreativeServingRestrictionsInnerDisapprovalReasonsInner.from_dict(_item) for _item in obj["disapprovalReasons"]] if obj.get("disapprovalReasons") is not None else None,
            "reason": obj.get("reason")
        })
        return _obj



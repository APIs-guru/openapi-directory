# coding: utf-8

"""
    Ad Exchange Buyer API

    Accesses your bidding-account information, submits creatives for validation, finds available direct deals, and retrieves performance reports.

    The version of the OpenAPI document: v1.4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.targeting_value_size import TargetingValueSize
from typing import Optional, Set
from typing_extensions import Self

class TargetingValueCreativeSize(BaseModel):
    """
    Next Id: 7
    """ # noqa: E501
    allowed_formats: Optional[List[StrictStr]] = Field(default=None, description="The formats allowed by the publisher.", alias="allowedFormats")
    companion_sizes: Optional[List[TargetingValueSize]] = Field(default=None, description="For video size type, the list of companion sizes.", alias="companionSizes")
    creative_size_type: Optional[StrictStr] = Field(default=None, description="The Creative size type.", alias="creativeSizeType")
    native_template: Optional[StrictStr] = Field(default=None, description="The native template for native ad.", alias="nativeTemplate")
    size: Optional[TargetingValueSize] = None
    skippable_ad_type: Optional[StrictStr] = Field(default=None, description="The skippable ad type for video size.", alias="skippableAdType")
    __properties: ClassVar[List[str]] = ["allowedFormats", "companionSizes", "creativeSizeType", "nativeTemplate", "size", "skippableAdType"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of TargetingValueCreativeSize from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in companion_sizes (list)
        _items = []
        if self.companion_sizes:
            for _item_companion_sizes in self.companion_sizes:
                if _item_companion_sizes:
                    _items.append(_item_companion_sizes.to_dict())
            _dict['companionSizes'] = _items
        # override the default output from pydantic by calling `to_dict()` of size
        if self.size:
            _dict['size'] = self.size.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of TargetingValueCreativeSize from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "allowedFormats": obj.get("allowedFormats"),
            "companionSizes": [TargetingValueSize.from_dict(_item) for _item in obj["companionSizes"]] if obj.get("companionSizes") is not None else None,
            "creativeSizeType": obj.get("creativeSizeType"),
            "nativeTemplate": obj.get("nativeTemplate"),
            "size": TargetingValueSize.from_dict(obj["size"]) if obj.get("size") is not None else None,
            "skippableAdType": obj.get("skippableAdType")
        })
        return _obj



# coding: utf-8

"""
    Ad Exchange Buyer API

    Accesses your bidding-account information, submits creatives for validation, finds available direct deals, and retrieves performance reports.

    The version of the OpenAPI document: v1.4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.deal_terms_guaranteed_fixed_price_terms import DealTermsGuaranteedFixedPriceTerms
from openapi_client.models.deal_terms_non_guaranteed_auction_terms import DealTermsNonGuaranteedAuctionTerms
from openapi_client.models.deal_terms_non_guaranteed_fixed_price_terms import DealTermsNonGuaranteedFixedPriceTerms
from openapi_client.models.deal_terms_rubicon_non_guaranteed_terms import DealTermsRubiconNonGuaranteedTerms
from openapi_client.models.price import Price
from typing import Optional, Set
from typing_extensions import Self

class DealTerms(BaseModel):
    """
    DealTerms
    """ # noqa: E501
    branding_type: Optional[StrictStr] = Field(default=None, description="Visibility of the URL in bid requests.", alias="brandingType")
    cross_listed_external_deal_id_type: Optional[StrictStr] = Field(default=None, description="Indicates that this ExternalDealId exists under at least two different AdxInventoryDeals. Currently, the only case that the same ExternalDealId will exist is programmatic cross sell case.", alias="crossListedExternalDealIdType")
    description: Optional[StrictStr] = Field(default=None, description="Description for the proposed terms of the deal.")
    estimated_gross_spend: Optional[Price] = Field(default=None, alias="estimatedGrossSpend")
    estimated_impressions_per_day: Optional[StrictStr] = Field(default=None, description="Non-binding estimate of the impressions served per day Can be set by buyer or seller.", alias="estimatedImpressionsPerDay")
    guaranteed_fixed_price_terms: Optional[DealTermsGuaranteedFixedPriceTerms] = Field(default=None, alias="guaranteedFixedPriceTerms")
    non_guaranteed_auction_terms: Optional[DealTermsNonGuaranteedAuctionTerms] = Field(default=None, alias="nonGuaranteedAuctionTerms")
    non_guaranteed_fixed_price_terms: Optional[DealTermsNonGuaranteedFixedPriceTerms] = Field(default=None, alias="nonGuaranteedFixedPriceTerms")
    rubicon_non_guaranteed_terms: Optional[DealTermsRubiconNonGuaranteedTerms] = Field(default=None, alias="rubiconNonGuaranteedTerms")
    seller_time_zone: Optional[StrictStr] = Field(default=None, description="For deals with Cost Per Day billing, defines the timezone used to mark the boundaries of a day (buyer-readonly)", alias="sellerTimeZone")
    __properties: ClassVar[List[str]] = ["brandingType", "crossListedExternalDealIdType", "description", "estimatedGrossSpend", "estimatedImpressionsPerDay", "guaranteedFixedPriceTerms", "nonGuaranteedAuctionTerms", "nonGuaranteedFixedPriceTerms", "rubiconNonGuaranteedTerms", "sellerTimeZone"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DealTerms from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of estimated_gross_spend
        if self.estimated_gross_spend:
            _dict['estimatedGrossSpend'] = self.estimated_gross_spend.to_dict()
        # override the default output from pydantic by calling `to_dict()` of guaranteed_fixed_price_terms
        if self.guaranteed_fixed_price_terms:
            _dict['guaranteedFixedPriceTerms'] = self.guaranteed_fixed_price_terms.to_dict()
        # override the default output from pydantic by calling `to_dict()` of non_guaranteed_auction_terms
        if self.non_guaranteed_auction_terms:
            _dict['nonGuaranteedAuctionTerms'] = self.non_guaranteed_auction_terms.to_dict()
        # override the default output from pydantic by calling `to_dict()` of non_guaranteed_fixed_price_terms
        if self.non_guaranteed_fixed_price_terms:
            _dict['nonGuaranteedFixedPriceTerms'] = self.non_guaranteed_fixed_price_terms.to_dict()
        # override the default output from pydantic by calling `to_dict()` of rubicon_non_guaranteed_terms
        if self.rubicon_non_guaranteed_terms:
            _dict['rubiconNonGuaranteedTerms'] = self.rubicon_non_guaranteed_terms.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DealTerms from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "brandingType": obj.get("brandingType"),
            "crossListedExternalDealIdType": obj.get("crossListedExternalDealIdType"),
            "description": obj.get("description"),
            "estimatedGrossSpend": Price.from_dict(obj["estimatedGrossSpend"]) if obj.get("estimatedGrossSpend") is not None else None,
            "estimatedImpressionsPerDay": obj.get("estimatedImpressionsPerDay"),
            "guaranteedFixedPriceTerms": DealTermsGuaranteedFixedPriceTerms.from_dict(obj["guaranteedFixedPriceTerms"]) if obj.get("guaranteedFixedPriceTerms") is not None else None,
            "nonGuaranteedAuctionTerms": DealTermsNonGuaranteedAuctionTerms.from_dict(obj["nonGuaranteedAuctionTerms"]) if obj.get("nonGuaranteedAuctionTerms") is not None else None,
            "nonGuaranteedFixedPriceTerms": DealTermsNonGuaranteedFixedPriceTerms.from_dict(obj["nonGuaranteedFixedPriceTerms"]) if obj.get("nonGuaranteedFixedPriceTerms") is not None else None,
            "rubiconNonGuaranteedTerms": DealTermsRubiconNonGuaranteedTerms.from_dict(obj["rubiconNonGuaranteedTerms"]) if obj.get("rubiconNonGuaranteedTerms") is not None else None,
            "sellerTimeZone": obj.get("sellerTimeZone")
        })
        return _obj



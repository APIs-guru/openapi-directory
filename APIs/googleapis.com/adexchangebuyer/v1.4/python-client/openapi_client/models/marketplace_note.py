# coding: utf-8

"""
    Ad Exchange Buyer API

    Accesses your bidding-account information, submits creatives for validation, finds available direct deals, and retrieves performance reports.

    The version of the OpenAPI document: v1.4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class MarketplaceNote(BaseModel):
    """
    A proposal is associated with a bunch of notes which may optionally be associated with a deal and/or revision number.
    """ # noqa: E501
    creator_role: Optional[StrictStr] = Field(default=None, description="The role of the person (buyer/seller) creating the note. (readonly)", alias="creatorRole")
    deal_id: Optional[StrictStr] = Field(default=None, description="Notes can optionally be associated with a deal. (readonly, except on create)", alias="dealId")
    kind: Optional[StrictStr] = Field(default='adexchangebuyer#marketplaceNote', description="Identifies what kind of resource this is. Value: the fixed string \"adexchangebuyer#marketplaceNote\".")
    note: Optional[StrictStr] = Field(default=None, description="The actual note to attach. (readonly, except on create)")
    note_id: Optional[StrictStr] = Field(default=None, description="The unique id for the note. (readonly)", alias="noteId")
    proposal_id: Optional[StrictStr] = Field(default=None, description="The proposalId that a note is attached to. (readonly)", alias="proposalId")
    proposal_revision_number: Optional[StrictStr] = Field(default=None, description="If the note is associated with a proposal revision number, then store that here. (readonly, except on create)", alias="proposalRevisionNumber")
    timestamp_ms: Optional[StrictStr] = Field(default=None, description="The timestamp (ms since epoch) that this note was created. (readonly)", alias="timestampMs")
    __properties: ClassVar[List[str]] = ["creatorRole", "dealId", "kind", "note", "noteId", "proposalId", "proposalRevisionNumber", "timestampMs"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of MarketplaceNote from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of MarketplaceNote from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "creatorRole": obj.get("creatorRole"),
            "dealId": obj.get("dealId"),
            "kind": obj.get("kind") if obj.get("kind") is not None else 'adexchangebuyer#marketplaceNote',
            "note": obj.get("note"),
            "noteId": obj.get("noteId"),
            "proposalId": obj.get("proposalId"),
            "proposalRevisionNumber": obj.get("proposalRevisionNumber"),
            "timestampMs": obj.get("timestampMs")
        })
        return _obj



# coding: utf-8

"""
    Ad Exchange Buyer API

    Accesses your bidding-account information, submits creatives for validation, finds available direct deals, and retrieves performance reports.

    The version of the OpenAPI document: v1.4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.creative_ad_technology_providers import CreativeAdTechnologyProviders
from openapi_client.models.creative_corrections_inner import CreativeCorrectionsInner
from openapi_client.models.creative_filtering_reasons import CreativeFilteringReasons
from openapi_client.models.creative_native_ad import CreativeNativeAd
from openapi_client.models.creative_serving_restrictions_inner import CreativeServingRestrictionsInner
from typing import Optional, Set
from typing_extensions import Self

class Creative(BaseModel):
    """
    A creative and its classification data.
    """ # noqa: E501
    html_snippet: Optional[StrictStr] = Field(default=None, description="The HTML snippet that displays the ad when inserted in the web page. If set, videoURL, videoVastXML, and nativeAd should not be set.", alias="HTMLSnippet")
    account_id: Optional[StrictInt] = Field(default=None, description="Account id.", alias="accountId")
    ad_choices_destination_url: Optional[StrictStr] = Field(default=None, description="The link to the Ad Preferences page. This is only supported for native ads.", alias="adChoicesDestinationUrl")
    ad_technology_providers: Optional[CreativeAdTechnologyProviders] = Field(default=None, alias="adTechnologyProviders")
    advertiser_id: Optional[List[StrictStr]] = Field(default=None, description="Detected advertiser id, if any. Read-only. This field should not be set in requests.", alias="advertiserId")
    advertiser_name: Optional[StrictStr] = Field(default=None, description="The name of the company being advertised in the creative. A list of advertisers is provided in the advertisers.txt file.", alias="advertiserName")
    agency_id: Optional[StrictStr] = Field(default=None, description="The agency id for this creative.", alias="agencyId")
    api_upload_timestamp: Optional[datetime] = Field(default=None, description="The last upload timestamp of this creative if it was uploaded via API. Read-only. The value of this field is generated, and will be ignored for uploads. (formatted RFC 3339 timestamp).", alias="apiUploadTimestamp")
    attribute: Optional[List[StrictInt]] = Field(default=None, description="List of buyer selectable attributes for the ads that may be shown from this snippet. Each attribute is represented by an integer as defined in  buyer-declarable-creative-attributes.txt.")
    buyer_creative_id: Optional[StrictStr] = Field(default=None, description="A buyer-specific id identifying the creative in this ad.", alias="buyerCreativeId")
    click_through_url: Optional[List[StrictStr]] = Field(default=None, description="The set of destination urls for the snippet.", alias="clickThroughUrl")
    corrections: Optional[List[CreativeCorrectionsInner]] = Field(default=None, description="Shows any corrections that were applied to this creative. Read-only. This field should not be set in requests.")
    creative_status_identity_type: Optional[StrictStr] = Field(default=None, description="Creative status identity type that the creative item applies to. Ad Exchange real-time bidding is migrating to the sizeless creative verification. Originally, Ad Exchange assigned creative verification status to a unique combination of a buyer creative ID and creative dimensions. Post-migration, a single verification status will be assigned at the buyer creative ID level. This field allows to distinguish whether a given creative status applies to a unique combination of a buyer creative ID and creative dimensions, or to a buyer creative ID as a whole.", alias="creativeStatusIdentityType")
    deals_status: Optional[StrictStr] = Field(default=None, description="Top-level deals status. Read-only. This field should not be set in requests. If disapproved, an entry for auctionType=DIRECT_DEALS (or ALL) in servingRestrictions will also exist. Note that this may be nuanced with other contextual restrictions, in which case it may be preferable to read from servingRestrictions directly.", alias="dealsStatus")
    detected_domains: Optional[List[StrictStr]] = Field(default=None, description="Detected domains for this creative. Read-only. This field should not be set in requests.", alias="detectedDomains")
    filtering_reasons: Optional[CreativeFilteringReasons] = Field(default=None, alias="filteringReasons")
    height: Optional[StrictInt] = Field(default=None, description="Ad height.")
    impression_tracking_url: Optional[List[StrictStr]] = Field(default=None, description="The set of urls to be called to record an impression.", alias="impressionTrackingUrl")
    kind: Optional[StrictStr] = Field(default='adexchangebuyer#creative', description="Resource type.")
    languages: Optional[List[StrictStr]] = Field(default=None, description="Detected languages for this creative. Read-only. This field should not be set in requests.")
    native_ad: Optional[CreativeNativeAd] = Field(default=None, alias="nativeAd")
    open_auction_status: Optional[StrictStr] = Field(default=None, description="Top-level open auction status. Read-only. This field should not be set in requests. If disapproved, an entry for auctionType=OPEN_AUCTION (or ALL) in servingRestrictions will also exist. Note that this may be nuanced with other contextual restrictions, in which case it may be preferable to read from ServingRestrictions directly.", alias="openAuctionStatus")
    product_categories: Optional[List[StrictInt]] = Field(default=None, description="Detected product categories, if any. Each category is represented by an integer as defined in  ad-product-categories.txt. Read-only. This field should not be set in requests.", alias="productCategories")
    restricted_categories: Optional[List[StrictInt]] = Field(default=None, description="All restricted categories for the ads that may be shown from this snippet. Each category is represented by an integer as defined in the  ad-restricted-categories.txt.", alias="restrictedCategories")
    sensitive_categories: Optional[List[StrictInt]] = Field(default=None, description="Detected sensitive categories, if any. Each category is represented by an integer as defined in  ad-sensitive-categories.txt. Read-only. This field should not be set in requests.", alias="sensitiveCategories")
    serving_restrictions: Optional[List[CreativeServingRestrictionsInner]] = Field(default=None, description="The granular status of this ad in specific contexts. A context here relates to where something ultimately serves (for example, a physical location, a platform, an HTTPS vs HTTP request, or the type of auction). Read-only. This field should not be set in requests. See the examples in the Creatives guide for more details.", alias="servingRestrictions")
    vendor_type: Optional[List[StrictInt]] = Field(default=None, description="List of vendor types for the ads that may be shown from this snippet. Each vendor type is represented by an integer as defined in vendors.txt.", alias="vendorType")
    version: Optional[StrictInt] = Field(default=None, description="The version for this creative. Read-only. This field should not be set in requests.")
    video_url: Optional[StrictStr] = Field(default=None, description="The URL to fetch a video ad. If set, HTMLSnippet, videoVastXML, and nativeAd should not be set. Note, this is different from resource.native_ad.video_url above.", alias="videoURL")
    video_vast_xml: Optional[StrictStr] = Field(default=None, description="The contents of a VAST document for a video ad. This document should conform to the VAST 2.0 or 3.0 standard. If set, HTMLSnippet, videoURL, and nativeAd and should not be set.", alias="videoVastXML")
    width: Optional[StrictInt] = Field(default=None, description="Ad width.")
    __properties: ClassVar[List[str]] = ["HTMLSnippet", "accountId", "adChoicesDestinationUrl", "adTechnologyProviders", "advertiserId", "advertiserName", "agencyId", "apiUploadTimestamp", "attribute", "buyerCreativeId", "clickThroughUrl", "corrections", "creativeStatusIdentityType", "dealsStatus", "detectedDomains", "filteringReasons", "height", "impressionTrackingUrl", "kind", "languages", "nativeAd", "openAuctionStatus", "productCategories", "restrictedCategories", "sensitiveCategories", "servingRestrictions", "vendorType", "version", "videoURL", "videoVastXML", "width"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Creative from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of ad_technology_providers
        if self.ad_technology_providers:
            _dict['adTechnologyProviders'] = self.ad_technology_providers.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in corrections (list)
        _items = []
        if self.corrections:
            for _item_corrections in self.corrections:
                if _item_corrections:
                    _items.append(_item_corrections.to_dict())
            _dict['corrections'] = _items
        # override the default output from pydantic by calling `to_dict()` of filtering_reasons
        if self.filtering_reasons:
            _dict['filteringReasons'] = self.filtering_reasons.to_dict()
        # override the default output from pydantic by calling `to_dict()` of native_ad
        if self.native_ad:
            _dict['nativeAd'] = self.native_ad.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in serving_restrictions (list)
        _items = []
        if self.serving_restrictions:
            for _item_serving_restrictions in self.serving_restrictions:
                if _item_serving_restrictions:
                    _items.append(_item_serving_restrictions.to_dict())
            _dict['servingRestrictions'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Creative from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "HTMLSnippet": obj.get("HTMLSnippet"),
            "accountId": obj.get("accountId"),
            "adChoicesDestinationUrl": obj.get("adChoicesDestinationUrl"),
            "adTechnologyProviders": CreativeAdTechnologyProviders.from_dict(obj["adTechnologyProviders"]) if obj.get("adTechnologyProviders") is not None else None,
            "advertiserId": obj.get("advertiserId"),
            "advertiserName": obj.get("advertiserName"),
            "agencyId": obj.get("agencyId"),
            "apiUploadTimestamp": obj.get("apiUploadTimestamp"),
            "attribute": obj.get("attribute"),
            "buyerCreativeId": obj.get("buyerCreativeId"),
            "clickThroughUrl": obj.get("clickThroughUrl"),
            "corrections": [CreativeCorrectionsInner.from_dict(_item) for _item in obj["corrections"]] if obj.get("corrections") is not None else None,
            "creativeStatusIdentityType": obj.get("creativeStatusIdentityType"),
            "dealsStatus": obj.get("dealsStatus"),
            "detectedDomains": obj.get("detectedDomains"),
            "filteringReasons": CreativeFilteringReasons.from_dict(obj["filteringReasons"]) if obj.get("filteringReasons") is not None else None,
            "height": obj.get("height"),
            "impressionTrackingUrl": obj.get("impressionTrackingUrl"),
            "kind": obj.get("kind") if obj.get("kind") is not None else 'adexchangebuyer#creative',
            "languages": obj.get("languages"),
            "nativeAd": CreativeNativeAd.from_dict(obj["nativeAd"]) if obj.get("nativeAd") is not None else None,
            "openAuctionStatus": obj.get("openAuctionStatus"),
            "productCategories": obj.get("productCategories"),
            "restrictedCategories": obj.get("restrictedCategories"),
            "sensitiveCategories": obj.get("sensitiveCategories"),
            "servingRestrictions": [CreativeServingRestrictionsInner.from_dict(_item) for _item in obj["servingRestrictions"]] if obj.get("servingRestrictions") is not None else None,
            "vendorType": obj.get("vendorType"),
            "version": obj.get("version"),
            "videoURL": obj.get("videoURL"),
            "videoVastXML": obj.get("videoVastXML"),
            "width": obj.get("width")
        })
        return _obj



# coding: utf-8

"""
    Ad Exchange Buyer API

    Accesses your bidding-account information, submits creatives for validation, finds available direct deals, and retrieves performance reports.

    The version of the OpenAPI document: v1.4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class PerformanceReport(BaseModel):
    """
    The configuration data for an Ad Exchange performance report list.
    """ # noqa: E501
    bid_rate: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The number of bid responses with an ad.", alias="bidRate")
    bid_request_rate: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The number of bid requests sent to your bidder.", alias="bidRequestRate")
    callout_status_rate: Optional[List[Any]] = Field(default=None, description="Rate of various prefiltering statuses per match. Please refer to the callout-status-codes.txt file for different statuses.", alias="calloutStatusRate")
    cookie_matcher_status_rate: Optional[List[Any]] = Field(default=None, description="Average QPS for cookie matcher operations.", alias="cookieMatcherStatusRate")
    creative_status_rate: Optional[List[Any]] = Field(default=None, description="Rate of ads with a given status. Please refer to the creative-status-codes.txt file for different statuses.", alias="creativeStatusRate")
    filtered_bid_rate: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The number of bid responses that were filtered due to a policy violation or other errors.", alias="filteredBidRate")
    hosted_match_status_rate: Optional[List[Any]] = Field(default=None, description="Average QPS for hosted match operations.", alias="hostedMatchStatusRate")
    inventory_match_rate: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The number of potential queries based on your pretargeting settings.", alias="inventoryMatchRate")
    kind: Optional[StrictStr] = Field(default='adexchangebuyer#performanceReport', description="Resource type.")
    latency50th_percentile: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The 50th percentile round trip latency(ms) as perceived from Google servers for the duration period covered by the report.", alias="latency50thPercentile")
    latency85th_percentile: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The 85th percentile round trip latency(ms) as perceived from Google servers for the duration period covered by the report.", alias="latency85thPercentile")
    latency95th_percentile: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The 95th percentile round trip latency(ms) as perceived from Google servers for the duration period covered by the report.", alias="latency95thPercentile")
    no_quota_in_region: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Rate of various quota account statuses per quota check.", alias="noQuotaInRegion")
    out_of_quota: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Rate of various quota account statuses per quota check.", alias="outOfQuota")
    pixel_match_requests: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Average QPS for pixel match requests from clients.", alias="pixelMatchRequests")
    pixel_match_responses: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Average QPS for pixel match responses from clients.", alias="pixelMatchResponses")
    quota_configured_limit: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The configured quota limits for this account.", alias="quotaConfiguredLimit")
    quota_throttled_limit: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The throttled quota limits for this account.", alias="quotaThrottledLimit")
    region: Optional[StrictStr] = Field(default=None, description="The trading location of this data.")
    successful_request_rate: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The number of properly formed bid responses received by our servers within the deadline.", alias="successfulRequestRate")
    timestamp: Optional[StrictStr] = Field(default=None, description="The unix timestamp of the starting time of this performance data.")
    unsuccessful_request_rate: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The number of bid responses that were unsuccessful due to timeouts, incorrect formatting, etc.", alias="unsuccessfulRequestRate")
    __properties: ClassVar[List[str]] = ["bidRate", "bidRequestRate", "calloutStatusRate", "cookieMatcherStatusRate", "creativeStatusRate", "filteredBidRate", "hostedMatchStatusRate", "inventoryMatchRate", "kind", "latency50thPercentile", "latency85thPercentile", "latency95thPercentile", "noQuotaInRegion", "outOfQuota", "pixelMatchRequests", "pixelMatchResponses", "quotaConfiguredLimit", "quotaThrottledLimit", "region", "successfulRequestRate", "timestamp", "unsuccessfulRequestRate"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PerformanceReport from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PerformanceReport from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "bidRate": obj.get("bidRate"),
            "bidRequestRate": obj.get("bidRequestRate"),
            "calloutStatusRate": obj.get("calloutStatusRate"),
            "cookieMatcherStatusRate": obj.get("cookieMatcherStatusRate"),
            "creativeStatusRate": obj.get("creativeStatusRate"),
            "filteredBidRate": obj.get("filteredBidRate"),
            "hostedMatchStatusRate": obj.get("hostedMatchStatusRate"),
            "inventoryMatchRate": obj.get("inventoryMatchRate"),
            "kind": obj.get("kind") if obj.get("kind") is not None else 'adexchangebuyer#performanceReport',
            "latency50thPercentile": obj.get("latency50thPercentile"),
            "latency85thPercentile": obj.get("latency85thPercentile"),
            "latency95thPercentile": obj.get("latency95thPercentile"),
            "noQuotaInRegion": obj.get("noQuotaInRegion"),
            "outOfQuota": obj.get("outOfQuota"),
            "pixelMatchRequests": obj.get("pixelMatchRequests"),
            "pixelMatchResponses": obj.get("pixelMatchResponses"),
            "quotaConfiguredLimit": obj.get("quotaConfiguredLimit"),
            "quotaThrottledLimit": obj.get("quotaThrottledLimit"),
            "region": obj.get("region"),
            "successfulRequestRate": obj.get("successfulRequestRate"),
            "timestamp": obj.get("timestamp"),
            "unsuccessfulRequestRate": obj.get("unsuccessfulRequestRate")
        })
        return _obj



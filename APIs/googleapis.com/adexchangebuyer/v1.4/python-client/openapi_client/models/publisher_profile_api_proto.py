# coding: utf-8

"""
    Ad Exchange Buyer API

    Accesses your bidding-account information, submits creatives for validation, finds available direct deals, and retrieves performance reports.

    The version of the OpenAPI document: v1.4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.mobile_application import MobileApplication
from openapi_client.models.publisher_provided_forecast import PublisherProvidedForecast
from openapi_client.models.seller import Seller
from typing import Optional, Set
from typing_extensions import Self

class PublisherProfileApiProto(BaseModel):
    """
    PublisherProfileApiProto
    """ # noqa: E501
    audience: Optional[StrictStr] = Field(default=None, description="Publisher provided info on its audience.")
    buyer_pitch_statement: Optional[StrictStr] = Field(default=None, description="A pitch statement for the buyer", alias="buyerPitchStatement")
    direct_contact: Optional[StrictStr] = Field(default=None, description="Direct contact for the publisher profile.", alias="directContact")
    exchange: Optional[StrictStr] = Field(default=None, description="Exchange where this publisher profile is from. E.g. AdX, Rubicon etc...")
    forecast_inventory: Optional[StrictStr] = Field(default=None, alias="forecastInventory")
    google_plus_link: Optional[StrictStr] = Field(default=None, description="Link to publisher's Google+ page.", alias="googlePlusLink")
    is_parent: Optional[StrictBool] = Field(default=None, description="True, if this is the parent profile, which represents all domains owned by the publisher.", alias="isParent")
    is_published: Optional[StrictBool] = Field(default=None, description="True, if this profile is published. Deprecated for state.", alias="isPublished")
    kind: Optional[StrictStr] = Field(default='adexchangebuyer#publisherProfileApiProto', description="Identifies what kind of resource this is. Value: the fixed string \"adexchangebuyer#publisherProfileApiProto\".")
    logo_url: Optional[StrictStr] = Field(default=None, description="The url to the logo for the publisher.", alias="logoUrl")
    media_kit_link: Optional[StrictStr] = Field(default=None, description="The url for additional marketing and sales materials.", alias="mediaKitLink")
    name: Optional[StrictStr] = None
    overview: Optional[StrictStr] = Field(default=None, description="Publisher provided overview.")
    profile_id: Optional[StrictInt] = Field(default=None, description="The pair of (seller.account_id, profile_id) uniquely identifies a publisher profile for a given publisher.", alias="profileId")
    programmatic_contact: Optional[StrictStr] = Field(default=None, description="Programmatic contact for the publisher profile.", alias="programmaticContact")
    publisher_app_ids: Optional[List[StrictStr]] = Field(default=None, description="The list of app IDs represented in this publisher profile. Empty if this is a parent profile. Deprecated in favor of publisher_app.", alias="publisherAppIds")
    publisher_apps: Optional[List[MobileApplication]] = Field(default=None, description="The list of apps represented in this publisher profile. Empty if this is a parent profile.", alias="publisherApps")
    publisher_domains: Optional[List[StrictStr]] = Field(default=None, description="The list of domains represented in this publisher profile. Empty if this is a parent profile.", alias="publisherDomains")
    publisher_profile_id: Optional[StrictStr] = Field(default=None, description="Unique Id for publisher profile.", alias="publisherProfileId")
    publisher_provided_forecast: Optional[PublisherProvidedForecast] = Field(default=None, alias="publisherProvidedForecast")
    rate_card_info_link: Optional[StrictStr] = Field(default=None, description="Link to publisher rate card", alias="rateCardInfoLink")
    sample_page_link: Optional[StrictStr] = Field(default=None, description="Link for a sample content page.", alias="samplePageLink")
    seller: Optional[Seller] = None
    state: Optional[StrictStr] = Field(default=None, description="State of the publisher profile.")
    top_headlines: Optional[List[StrictStr]] = Field(default=None, description="Publisher provided key metrics and rankings.", alias="topHeadlines")
    __properties: ClassVar[List[str]] = ["audience", "buyerPitchStatement", "directContact", "exchange", "forecastInventory", "googlePlusLink", "isParent", "isPublished", "kind", "logoUrl", "mediaKitLink", "name", "overview", "profileId", "programmaticContact", "publisherAppIds", "publisherApps", "publisherDomains", "publisherProfileId", "publisherProvidedForecast", "rateCardInfoLink", "samplePageLink", "seller", "state", "topHeadlines"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PublisherProfileApiProto from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in publisher_apps (list)
        _items = []
        if self.publisher_apps:
            for _item_publisher_apps in self.publisher_apps:
                if _item_publisher_apps:
                    _items.append(_item_publisher_apps.to_dict())
            _dict['publisherApps'] = _items
        # override the default output from pydantic by calling `to_dict()` of publisher_provided_forecast
        if self.publisher_provided_forecast:
            _dict['publisherProvidedForecast'] = self.publisher_provided_forecast.to_dict()
        # override the default output from pydantic by calling `to_dict()` of seller
        if self.seller:
            _dict['seller'] = self.seller.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PublisherProfileApiProto from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "audience": obj.get("audience"),
            "buyerPitchStatement": obj.get("buyerPitchStatement"),
            "directContact": obj.get("directContact"),
            "exchange": obj.get("exchange"),
            "forecastInventory": obj.get("forecastInventory"),
            "googlePlusLink": obj.get("googlePlusLink"),
            "isParent": obj.get("isParent"),
            "isPublished": obj.get("isPublished"),
            "kind": obj.get("kind") if obj.get("kind") is not None else 'adexchangebuyer#publisherProfileApiProto',
            "logoUrl": obj.get("logoUrl"),
            "mediaKitLink": obj.get("mediaKitLink"),
            "name": obj.get("name"),
            "overview": obj.get("overview"),
            "profileId": obj.get("profileId"),
            "programmaticContact": obj.get("programmaticContact"),
            "publisherAppIds": obj.get("publisherAppIds"),
            "publisherApps": [MobileApplication.from_dict(_item) for _item in obj["publisherApps"]] if obj.get("publisherApps") is not None else None,
            "publisherDomains": obj.get("publisherDomains"),
            "publisherProfileId": obj.get("publisherProfileId"),
            "publisherProvidedForecast": PublisherProvidedForecast.from_dict(obj["publisherProvidedForecast"]) if obj.get("publisherProvidedForecast") is not None else None,
            "rateCardInfoLink": obj.get("rateCardInfoLink"),
            "samplePageLink": obj.get("samplePageLink"),
            "seller": Seller.from_dict(obj["seller"]) if obj.get("seller") is not None else None,
            "state": obj.get("state"),
            "topHeadlines": obj.get("topHeadlines")
        })
        return _obj



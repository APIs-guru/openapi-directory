# coding: utf-8

"""
    Eventarc API

    Build event-driven applications on Google Cloud Platform.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.filtering_attribute import FilteringAttribute
from typing import Optional, Set
from typing_extensions import Self

class EventType(BaseModel):
    """
    A representation of the event type resource.
    """ # noqa: E501
    description: Optional[StrictStr] = Field(default=None, description="Output only. Human friendly description of what the event type is about. For example \"Bucket created in Cloud Storage\".")
    event_schema_uri: Optional[StrictStr] = Field(default=None, description="Output only. URI for the event schema. For example \"https://github.com/googleapis/google-cloudevents/blob/master/proto/google/events/cloud/storage/v1/events.proto\"", alias="eventSchemaUri")
    filtering_attributes: Optional[List[FilteringAttribute]] = Field(default=None, description="Output only. Filtering attributes for the event type.", alias="filteringAttributes")
    type: Optional[StrictStr] = Field(default=None, description="Output only. The full name of the event type (for example, \"google.cloud.storage.object.v1.finalized\"). In the form of {provider-specific-prefix}.{resource}.{version}.{verb}. Types MUST be versioned and event schemas are guaranteed to remain backward compatible within one version. Note that event type versions and API versions do not need to match.")
    __properties: ClassVar[List[str]] = ["description", "eventSchemaUri", "filteringAttributes", "type"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of EventType from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "description",
            "event_schema_uri",
            "filtering_attributes",
            "type",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in filtering_attributes (list)
        _items = []
        if self.filtering_attributes:
            for _item_filtering_attributes in self.filtering_attributes:
                if _item_filtering_attributes:
                    _items.append(_item_filtering_attributes.to_dict())
            _dict['filteringAttributes'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of EventType from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "description": obj.get("description"),
            "eventSchemaUri": obj.get("eventSchemaUri"),
            "filteringAttributes": [FilteringAttribute.from_dict(_item) for _item in obj["filteringAttributes"]] if obj.get("filteringAttributes") is not None else None,
            "type": obj.get("type")
        })
        return _obj



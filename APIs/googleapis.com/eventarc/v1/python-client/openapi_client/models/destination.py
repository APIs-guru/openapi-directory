# coding: utf-8

"""
    Eventarc API

    Build event-driven applications on Google Cloud Platform.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.cloud_run import CloudRun
from openapi_client.models.gke import GKE
from openapi_client.models.http_endpoint import HttpEndpoint
from openapi_client.models.network_config import NetworkConfig
from typing import Optional, Set
from typing_extensions import Self

class Destination(BaseModel):
    """
    Represents a target of an invocation over HTTP.
    """ # noqa: E501
    cloud_function: Optional[StrictStr] = Field(default=None, description="The Cloud Function resource name. Cloud Functions V1 and V2 are supported. Format: `projects/{project}/locations/{location}/functions/{function}` This is a read-only field. Creating Cloud Functions V1/V2 triggers is only supported via the Cloud Functions product. An error will be returned if the user sets this value.", alias="cloudFunction")
    cloud_run: Optional[CloudRun] = Field(default=None, alias="cloudRun")
    gke: Optional[GKE] = None
    http_endpoint: Optional[HttpEndpoint] = Field(default=None, alias="httpEndpoint")
    network_config: Optional[NetworkConfig] = Field(default=None, alias="networkConfig")
    workflow: Optional[StrictStr] = Field(default=None, description="The resource name of the Workflow whose Executions are triggered by the events. The Workflow resource should be deployed in the same project as the trigger. Format: `projects/{project}/locations/{location}/workflows/{workflow}`")
    __properties: ClassVar[List[str]] = ["cloudFunction", "cloudRun", "gke", "httpEndpoint", "networkConfig", "workflow"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Destination from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of cloud_run
        if self.cloud_run:
            _dict['cloudRun'] = self.cloud_run.to_dict()
        # override the default output from pydantic by calling `to_dict()` of gke
        if self.gke:
            _dict['gke'] = self.gke.to_dict()
        # override the default output from pydantic by calling `to_dict()` of http_endpoint
        if self.http_endpoint:
            _dict['httpEndpoint'] = self.http_endpoint.to_dict()
        # override the default output from pydantic by calling `to_dict()` of network_config
        if self.network_config:
            _dict['networkConfig'] = self.network_config.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Destination from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "cloudFunction": obj.get("cloudFunction"),
            "cloudRun": CloudRun.from_dict(obj["cloudRun"]) if obj.get("cloudRun") is not None else None,
            "gke": GKE.from_dict(obj["gke"]) if obj.get("gke") is not None else None,
            "httpEndpoint": HttpEndpoint.from_dict(obj["httpEndpoint"]) if obj.get("httpEndpoint") is not None else None,
            "networkConfig": NetworkConfig.from_dict(obj["networkConfig"]) if obj.get("networkConfig") is not None else None,
            "workflow": obj.get("workflow")
        })
        return _obj



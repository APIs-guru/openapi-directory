# coding: utf-8

"""
    Eventarc API

    Build event-driven applications on Google Cloud Platform.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.destination import Destination
from openapi_client.models.event_filter import EventFilter
from openapi_client.models.state_condition import StateCondition
from openapi_client.models.transport import Transport
from typing import Optional, Set
from typing_extensions import Self

class Trigger(BaseModel):
    """
    A representation of the trigger resource.
    """ # noqa: E501
    channel: Optional[StrictStr] = Field(default=None, description="Optional. The name of the channel associated with the trigger in `projects/{project}/locations/{location}/channels/{channel}` format. You must provide a channel to receive events from Eventarc SaaS partners.")
    conditions: Optional[Dict[str, StateCondition]] = Field(default=None, description="Output only. The reason(s) why a trigger is in FAILED state.")
    create_time: Optional[StrictStr] = Field(default=None, description="Output only. The creation time.", alias="createTime")
    destination: Optional[Destination] = None
    etag: Optional[StrictStr] = Field(default=None, description="Output only. This checksum is computed by the server based on the value of other fields, and might be sent only on create requests to ensure that the client has an up-to-date value before proceeding.")
    event_data_content_type: Optional[StrictStr] = Field(default=None, description="Optional. EventDataContentType specifies the type of payload in MIME format that is expected from the CloudEvent data field. This is set to `application/json` if the value is not defined.", alias="eventDataContentType")
    event_filters: Optional[List[EventFilter]] = Field(default=None, description="Required. Unordered list. The list of filters that applies to event attributes. Only events that match all the provided filters are sent to the destination.", alias="eventFilters")
    labels: Optional[Dict[str, StrictStr]] = Field(default=None, description="Optional. User labels attached to the triggers that can be used to group resources.")
    name: Optional[StrictStr] = Field(default=None, description="Required. The resource name of the trigger. Must be unique within the location of the project and must be in `projects/{project}/locations/{location}/triggers/{trigger}` format.")
    service_account: Optional[StrictStr] = Field(default=None, description="Optional. The IAM service account email associated with the trigger. The service account represents the identity of the trigger. The `iam.serviceAccounts.actAs` permission must be granted on the service account to allow a principal to impersonate the service account. For more information, see the [Roles and permissions](/eventarc/docs/all-roles-permissions) page specific to the trigger destination.", alias="serviceAccount")
    transport: Optional[Transport] = None
    uid: Optional[StrictStr] = Field(default=None, description="Output only. Server-assigned unique identifier for the trigger. The value is a UUID4 string and guaranteed to remain unchanged until the resource is deleted.")
    update_time: Optional[StrictStr] = Field(default=None, description="Output only. The last-modified time.", alias="updateTime")
    __properties: ClassVar[List[str]] = ["channel", "conditions", "createTime", "destination", "etag", "eventDataContentType", "eventFilters", "labels", "name", "serviceAccount", "transport", "uid", "updateTime"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Trigger from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "conditions",
            "create_time",
            "etag",
            "uid",
            "update_time",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each value in conditions (dict)
        _field_dict = {}
        if self.conditions:
            for _key_conditions in self.conditions:
                if self.conditions[_key_conditions]:
                    _field_dict[_key_conditions] = self.conditions[_key_conditions].to_dict()
            _dict['conditions'] = _field_dict
        # override the default output from pydantic by calling `to_dict()` of destination
        if self.destination:
            _dict['destination'] = self.destination.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in event_filters (list)
        _items = []
        if self.event_filters:
            for _item_event_filters in self.event_filters:
                if _item_event_filters:
                    _items.append(_item_event_filters.to_dict())
            _dict['eventFilters'] = _items
        # override the default output from pydantic by calling `to_dict()` of transport
        if self.transport:
            _dict['transport'] = self.transport.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Trigger from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "channel": obj.get("channel"),
            "conditions": dict(
                (_k, StateCondition.from_dict(_v))
                for _k, _v in obj["conditions"].items()
            )
            if obj.get("conditions") is not None
            else None,
            "createTime": obj.get("createTime"),
            "destination": Destination.from_dict(obj["destination"]) if obj.get("destination") is not None else None,
            "etag": obj.get("etag"),
            "eventDataContentType": obj.get("eventDataContentType"),
            "eventFilters": [EventFilter.from_dict(_item) for _item in obj["eventFilters"]] if obj.get("eventFilters") is not None else None,
            "labels": obj.get("labels"),
            "name": obj.get("name"),
            "serviceAccount": obj.get("serviceAccount"),
            "transport": Transport.from_dict(obj["transport"]) if obj.get("transport") is not None else None,
            "uid": obj.get("uid"),
            "updateTime": obj.get("updateTime")
        })
        return _obj



# coding: utf-8

"""
    Eventarc API

    Build event-driven applications on Google Cloud Platform.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class Channel(BaseModel):
    """
    A representation of the Channel resource. A Channel is a resource on which event providers publish their events. The published events are delivered through the transport associated with the channel. Note that a channel is associated with exactly one event provider.
    """ # noqa: E501
    activation_token: Optional[StrictStr] = Field(default=None, description="Output only. The activation token for the channel. The token must be used by the provider to register the channel for publishing.", alias="activationToken")
    create_time: Optional[StrictStr] = Field(default=None, description="Output only. The creation time.", alias="createTime")
    crypto_key_name: Optional[StrictStr] = Field(default=None, description="Resource name of a KMS crypto key (managed by the user) used to encrypt/decrypt their event data. It must match the pattern `projects/*/locations/*/keyRings/*/cryptoKeys/*`.", alias="cryptoKeyName")
    name: Optional[StrictStr] = Field(default=None, description="Required. The resource name of the channel. Must be unique within the location on the project and must be in `projects/{project}/locations/{location}/channels/{channel_id}` format.")
    provider: Optional[StrictStr] = Field(default=None, description="The name of the event provider (e.g. Eventarc SaaS partner) associated with the channel. This provider will be granted permissions to publish events to the channel. Format: `projects/{project}/locations/{location}/providers/{provider_id}`.")
    pubsub_topic: Optional[StrictStr] = Field(default=None, description="Output only. The name of the Pub/Sub topic created and managed by Eventarc system as a transport for the event delivery. Format: `projects/{project}/topics/{topic_id}`.", alias="pubsubTopic")
    state: Optional[StrictStr] = Field(default=None, description="Output only. The state of a Channel.")
    uid: Optional[StrictStr] = Field(default=None, description="Output only. Server assigned unique identifier for the channel. The value is a UUID4 string and guaranteed to remain unchanged until the resource is deleted.")
    update_time: Optional[StrictStr] = Field(default=None, description="Output only. The last-modified time.", alias="updateTime")
    __properties: ClassVar[List[str]] = ["activationToken", "createTime", "cryptoKeyName", "name", "provider", "pubsubTopic", "state", "uid", "updateTime"]

    @field_validator('state')
    def state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['STATE_UNSPECIFIED', 'PENDING', 'ACTIVE', 'INACTIVE']):
            raise ValueError("must be one of enum values ('STATE_UNSPECIFIED', 'PENDING', 'ACTIVE', 'INACTIVE')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Channel from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "activation_token",
            "create_time",
            "pubsub_topic",
            "state",
            "uid",
            "update_time",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Channel from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "activationToken": obj.get("activationToken"),
            "createTime": obj.get("createTime"),
            "cryptoKeyName": obj.get("cryptoKeyName"),
            "name": obj.get("name"),
            "provider": obj.get("provider"),
            "pubsubTopic": obj.get("pubsubTopic"),
            "state": obj.get("state"),
            "uid": obj.get("uid"),
            "updateTime": obj.get("updateTime")
        })
        return _obj



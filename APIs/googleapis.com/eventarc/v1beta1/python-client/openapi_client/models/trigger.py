# coding: utf-8

"""
    Eventarc API

    Build event-driven applications on Google Cloud Platform.

    The version of the OpenAPI document: v1beta1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.destination import Destination
from openapi_client.models.matching_criteria import MatchingCriteria
from openapi_client.models.transport import Transport
from typing import Optional, Set
from typing_extensions import Self

class Trigger(BaseModel):
    """
    A representation of the trigger resource.
    """ # noqa: E501
    create_time: Optional[StrictStr] = Field(default=None, description="Output only. The creation time.", alias="createTime")
    destination: Optional[Destination] = None
    etag: Optional[StrictStr] = Field(default=None, description="Output only. This checksum is computed by the server based on the value of other fields, and may be sent only on create requests to ensure the client has an up-to-date value before proceeding.")
    labels: Optional[Dict[str, StrictStr]] = Field(default=None, description="Optional. User labels attached to the triggers that can be used to group resources.")
    matching_criteria: Optional[List[MatchingCriteria]] = Field(default=None, description="Required. Unordered list. The criteria by which events are filtered. Only events that match with this criteria will be sent to the destination.", alias="matchingCriteria")
    name: Optional[StrictStr] = Field(default=None, description="Required. The resource name of the trigger. Must be unique within the location on the project and must in `projects/{project}/locations/{location}/triggers/{trigger}` format.")
    service_account: Optional[StrictStr] = Field(default=None, description="Optional. The IAM service account email associated with the trigger. The service account represents the identity of the trigger. The principal who calls this API must have `iam.serviceAccounts.actAs` permission in the service account. See https://cloud.google.com/iam/docs/understanding-service-accounts?hl=en#sa_common for more information. For Cloud Run destinations, this service account is used to generate identity tokens when invoking the service. See https://cloud.google.com/run/docs/triggering/pubsub-push#create-service-account for information on how to invoke authenticated Cloud Run services. In order to create Audit Log triggers, the service account should also have 'eventarc.events.receiveAuditLogV1Written' permission.", alias="serviceAccount")
    transport: Optional[Transport] = None
    update_time: Optional[StrictStr] = Field(default=None, description="Output only. The last-modified time.", alias="updateTime")
    __properties: ClassVar[List[str]] = ["createTime", "destination", "etag", "labels", "matchingCriteria", "name", "serviceAccount", "transport", "updateTime"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Trigger from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "create_time",
            "etag",
            "update_time",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of destination
        if self.destination:
            _dict['destination'] = self.destination.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in matching_criteria (list)
        _items = []
        if self.matching_criteria:
            for _item_matching_criteria in self.matching_criteria:
                if _item_matching_criteria:
                    _items.append(_item_matching_criteria.to_dict())
            _dict['matchingCriteria'] = _items
        # override the default output from pydantic by calling `to_dict()` of transport
        if self.transport:
            _dict['transport'] = self.transport.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Trigger from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "createTime": obj.get("createTime"),
            "destination": Destination.from_dict(obj["destination"]) if obj.get("destination") is not None else None,
            "etag": obj.get("etag"),
            "labels": obj.get("labels"),
            "matchingCriteria": [MatchingCriteria.from_dict(_item) for _item in obj["matchingCriteria"]] if obj.get("matchingCriteria") is not None else None,
            "name": obj.get("name"),
            "serviceAccount": obj.get("serviceAccount"),
            "transport": Transport.from_dict(obj["transport"]) if obj.get("transport") is not None else None,
            "updateTime": obj.get("updateTime")
        })
        return _obj



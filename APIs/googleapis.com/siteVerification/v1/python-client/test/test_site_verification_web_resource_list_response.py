# coding: utf-8

"""
    Google Site Verification API

    Verifies ownership of websites or domains with Google.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.site_verification_web_resource_list_response import SiteVerificationWebResourceListResponse

class TestSiteVerificationWebResourceListResponse(unittest.TestCase):
    """SiteVerificationWebResourceListResponse unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> SiteVerificationWebResourceListResponse:
        """Test SiteVerificationWebResourceListResponse
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `SiteVerificationWebResourceListResponse`
        """
        model = SiteVerificationWebResourceListResponse()
        if include_optional:
            return SiteVerificationWebResourceListResponse(
                items = [
                    openapi_client.models.site_verification_web_resource_resource.SiteVerificationWebResourceResource(
                        id = '', 
                        owners = [
                            ''
                            ], 
                        site = openapi_client.models.site_verification_web_resource_resource_site.SiteVerificationWebResourceResource_site(
                            identifier = '', 
                            type = '', ), )
                    ]
            )
        else:
            return SiteVerificationWebResourceListResponse(
        )
        """

    def testSiteVerificationWebResourceListResponse(self):
        """Test SiteVerificationWebResourceListResponse"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

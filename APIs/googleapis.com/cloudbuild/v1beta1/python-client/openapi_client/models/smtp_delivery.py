# coding: utf-8

"""
    Cloud Build API

    Creates and manages builds on Google Cloud Platform.

    The version of the OpenAPI document: v1beta1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.notifier_secret_ref import NotifierSecretRef
from typing import Optional, Set
from typing_extensions import Self

class SMTPDelivery(BaseModel):
    """
    SMTPDelivery is the delivery configuration for an SMTP (email) notification.
    """ # noqa: E501
    from_address: Optional[StrictStr] = Field(default=None, description="This is the SMTP account/email that appears in the `From:` of the email. If empty, it is assumed to be sender.", alias="fromAddress")
    password: Optional[NotifierSecretRef] = None
    port: Optional[StrictStr] = Field(default=None, description="The SMTP port of the server.")
    recipient_addresses: Optional[List[StrictStr]] = Field(default=None, description="This is the list of addresses to which we send the email (i.e. in the `To:` of the email).", alias="recipientAddresses")
    sender_address: Optional[StrictStr] = Field(default=None, description="This is the SMTP account/email that is used to send the message.", alias="senderAddress")
    server: Optional[StrictStr] = Field(default=None, description="The address of the SMTP server.")
    __properties: ClassVar[List[str]] = ["fromAddress", "password", "port", "recipientAddresses", "senderAddress", "server"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SMTPDelivery from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of password
        if self.password:
            _dict['password'] = self.password.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SMTPDelivery from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "fromAddress": obj.get("fromAddress"),
            "password": NotifierSecretRef.from_dict(obj["password"]) if obj.get("password") is not None else None,
            "port": obj.get("port"),
            "recipientAddresses": obj.get("recipientAddresses"),
            "senderAddress": obj.get("senderAddress"),
            "server": obj.get("server")
        })
        return _obj



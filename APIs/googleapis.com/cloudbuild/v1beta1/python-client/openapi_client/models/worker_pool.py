# coding: utf-8

"""
    Cloud Build API

    Creates and manages builds on Google Cloud Platform.

    The version of the OpenAPI document: v1beta1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.network_config import NetworkConfig
from openapi_client.models.worker_config import WorkerConfig
from typing import Optional, Set
from typing_extensions import Self

class WorkerPool(BaseModel):
    """
    Configuration for a `WorkerPool` to run the builds. Workers provide a build environment where Cloud Build runs your builds. Cloud Build owns and maintains a pool of workers for general use. By default, when you submit a build, Cloud Build uses one of the workers from this pool. Builds that run in the default worker pool have access to the public internet. If your build needs access to resources on a private network, create and use a `WorkerPool` to run your builds. Custom `WorkerPool`s give your builds access to any single VPC network that you administer, including any on-prem resources connected to that VPC network. For an overview of custom worker pools, see [Custom workers overview](https://cloud.google.com/cloud-build/docs/custom-workers/custom-workers-overview).
    """ # noqa: E501
    annotations: Optional[Dict[str, StrictStr]] = Field(default=None, description="User specified annotations. See https://google.aip.dev/128#annotations for more details such as format and size limitations.")
    create_time: Optional[StrictStr] = Field(default=None, description="Output only. Time at which the request to create the `WorkerPool` was received.", alias="createTime")
    delete_time: Optional[StrictStr] = Field(default=None, description="Output only. Time at which the request to delete the `WorkerPool` was received.", alias="deleteTime")
    display_name: Optional[StrictStr] = Field(default=None, description="A user-specified, human-readable name for the `WorkerPool`. If provided, this value must be 1-63 characters.", alias="displayName")
    etag: Optional[StrictStr] = Field(default=None, description="Output only. Checksum computed by the server. May be sent on update and delete requests to ensure that the client has an up-to-date value before proceeding.")
    name: Optional[StrictStr] = Field(default=None, description="Output only. The resource name of the `WorkerPool`, with format `projects/{project}/locations/{location}/workerPools/{worker_pool}`. The value of `{worker_pool}` is provided by `worker_pool_id` in `CreateWorkerPool` request and the value of `{location}` is determined by the endpoint accessed.")
    network_config: Optional[NetworkConfig] = Field(default=None, alias="networkConfig")
    state: Optional[StrictStr] = Field(default=None, description="Output only. `WorkerPool` state.")
    uid: Optional[StrictStr] = Field(default=None, description="Output only. A unique identifier for the `WorkerPool`.")
    update_time: Optional[StrictStr] = Field(default=None, description="Output only. Time at which the request to update the `WorkerPool` was received.", alias="updateTime")
    worker_config: Optional[WorkerConfig] = Field(default=None, alias="workerConfig")
    __properties: ClassVar[List[str]] = ["annotations", "createTime", "deleteTime", "displayName", "etag", "name", "networkConfig", "state", "uid", "updateTime", "workerConfig"]

    @field_validator('state')
    def state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['STATE_UNSPECIFIED', 'CREATING', 'RUNNING', 'DELETING', 'DELETED']):
            raise ValueError("must be one of enum values ('STATE_UNSPECIFIED', 'CREATING', 'RUNNING', 'DELETING', 'DELETED')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of WorkerPool from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "create_time",
            "delete_time",
            "etag",
            "name",
            "state",
            "uid",
            "update_time",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of network_config
        if self.network_config:
            _dict['networkConfig'] = self.network_config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of worker_config
        if self.worker_config:
            _dict['workerConfig'] = self.worker_config.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of WorkerPool from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "annotations": obj.get("annotations"),
            "createTime": obj.get("createTime"),
            "deleteTime": obj.get("deleteTime"),
            "displayName": obj.get("displayName"),
            "etag": obj.get("etag"),
            "name": obj.get("name"),
            "networkConfig": NetworkConfig.from_dict(obj["networkConfig"]) if obj.get("networkConfig") is not None else None,
            "state": obj.get("state"),
            "uid": obj.get("uid"),
            "updateTime": obj.get("updateTime"),
            "workerConfig": WorkerConfig.from_dict(obj["workerConfig"]) if obj.get("workerConfig") is not None else None
        })
        return _obj



# coding: utf-8

"""
    Cloud Build API

    Creates and manages builds on Google Cloud Platform.

    The version of the OpenAPI document: v1beta1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.time_span import TimeSpan
from openapi_client.models.volume import Volume
from typing import Optional, Set
from typing_extensions import Self

class BuildStep(BaseModel):
    """
    A step in the build pipeline.
    """ # noqa: E501
    allow_exit_codes: Optional[List[StrictInt]] = Field(default=None, description="Allow this build step to fail without failing the entire build if and only if the exit code is one of the specified codes. If allow_failure is also specified, this field will take precedence.", alias="allowExitCodes")
    allow_failure: Optional[StrictBool] = Field(default=None, description="Allow this build step to fail without failing the entire build. If false, the entire build will fail if this step fails. Otherwise, the build will succeed, but this step will still have a failure status. Error information will be reported in the failure_detail field.", alias="allowFailure")
    args: Optional[List[StrictStr]] = Field(default=None, description="A list of arguments that will be presented to the step when it is started. If the image used to run the step's container has an entrypoint, the `args` are used as arguments to that entrypoint. If the image does not define an entrypoint, the first element in args is used as the entrypoint, and the remainder will be used as arguments.")
    dir: Optional[StrictStr] = Field(default=None, description="Working directory to use when running this step's container. If this value is a relative path, it is relative to the build's working directory. If this value is absolute, it may be outside the build's working directory, in which case the contents of the path may not be persisted across build step executions, unless a `volume` for that path is specified. If the build specifies a `RepoSource` with `dir` and a step with a `dir`, which specifies an absolute path, the `RepoSource` `dir` is ignored for the step's execution.")
    entrypoint: Optional[StrictStr] = Field(default=None, description="Entrypoint to be used instead of the build step image's default entrypoint. If unset, the image's default entrypoint is used.")
    env: Optional[List[StrictStr]] = Field(default=None, description="A list of environment variable definitions to be used when running a step. The elements are of the form \"KEY=VALUE\" for the environment variable \"KEY\" being given the value \"VALUE\".")
    exit_code: Optional[StrictInt] = Field(default=None, description="Output only. Return code from running the step.", alias="exitCode")
    id: Optional[StrictStr] = Field(default=None, description="Unique identifier for this build step, used in `wait_for` to reference this build step as a dependency.")
    name: Optional[StrictStr] = Field(default=None, description="Required. The name of the container image that will run this particular build step. If the image is available in the host's Docker daemon's cache, it will be run directly. If not, the host will attempt to pull the image first, using the builder service account's credentials if necessary. The Docker daemon's cache will already have the latest versions of all of the officially supported build steps ([https://github.com/GoogleCloudPlatform/cloud-builders](https://github.com/GoogleCloudPlatform/cloud-builders)). The Docker daemon will also have cached many of the layers for some popular images, like \"ubuntu\", \"debian\", but they will be refreshed at the time you attempt to use them. If you built an image in a previous build step, it will be stored in the host's Docker daemon's cache and is available to use as the name for a later build step.")
    pull_timing: Optional[TimeSpan] = Field(default=None, alias="pullTiming")
    script: Optional[StrictStr] = Field(default=None, description="A shell script to be executed in the step. When script is provided, the user cannot specify the entrypoint or args.")
    secret_env: Optional[List[StrictStr]] = Field(default=None, description="A list of environment variables which are encrypted using a Cloud Key Management Service crypto key. These values must be specified in the build's `Secret`.", alias="secretEnv")
    status: Optional[StrictStr] = Field(default=None, description="Output only. Status of the build step. At this time, build step status is only updated on build completion; step status is not updated in real-time as the build progresses.")
    timeout: Optional[StrictStr] = Field(default=None, description="Time limit for executing this build step. If not defined, the step has no time limit and will be allowed to continue to run until either it completes or the build itself times out.")
    timing: Optional[TimeSpan] = None
    volumes: Optional[List[Volume]] = Field(default=None, description="List of volumes to mount into the build step. Each volume is created as an empty volume prior to execution of the build step. Upon completion of the build, volumes and their contents are discarded. Using a named volume in only one step is not valid as it is indicative of a build request with an incorrect configuration.")
    wait_for: Optional[List[StrictStr]] = Field(default=None, description="The ID(s) of the step(s) that this build step depends on. This build step will not start until all the build steps in `wait_for` have completed successfully. If `wait_for` is empty, this build step will start when all previous build steps in the `Build.Steps` list have completed successfully.", alias="waitFor")
    __properties: ClassVar[List[str]] = ["allowExitCodes", "allowFailure", "args", "dir", "entrypoint", "env", "exitCode", "id", "name", "pullTiming", "script", "secretEnv", "status", "timeout", "timing", "volumes", "waitFor"]

    @field_validator('status')
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['STATUS_UNKNOWN', 'PENDING', 'QUEUED', 'WORKING', 'SUCCESS', 'FAILURE', 'INTERNAL_ERROR', 'TIMEOUT', 'CANCELLED', 'EXPIRED']):
            raise ValueError("must be one of enum values ('STATUS_UNKNOWN', 'PENDING', 'QUEUED', 'WORKING', 'SUCCESS', 'FAILURE', 'INTERNAL_ERROR', 'TIMEOUT', 'CANCELLED', 'EXPIRED')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of BuildStep from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "exit_code",
            "status",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of pull_timing
        if self.pull_timing:
            _dict['pullTiming'] = self.pull_timing.to_dict()
        # override the default output from pydantic by calling `to_dict()` of timing
        if self.timing:
            _dict['timing'] = self.timing.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in volumes (list)
        _items = []
        if self.volumes:
            for _item_volumes in self.volumes:
                if _item_volumes:
                    _items.append(_item_volumes.to_dict())
            _dict['volumes'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of BuildStep from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "allowExitCodes": obj.get("allowExitCodes"),
            "allowFailure": obj.get("allowFailure"),
            "args": obj.get("args"),
            "dir": obj.get("dir"),
            "entrypoint": obj.get("entrypoint"),
            "env": obj.get("env"),
            "exitCode": obj.get("exitCode"),
            "id": obj.get("id"),
            "name": obj.get("name"),
            "pullTiming": TimeSpan.from_dict(obj["pullTiming"]) if obj.get("pullTiming") is not None else None,
            "script": obj.get("script"),
            "secretEnv": obj.get("secretEnv"),
            "status": obj.get("status"),
            "timeout": obj.get("timeout"),
            "timing": TimeSpan.from_dict(obj["timing"]) if obj.get("timing") is not None else None,
            "volumes": [Volume.from_dict(_item) for _item in obj["volumes"]] if obj.get("volumes") is not None else None,
            "waitFor": obj.get("waitFor")
        })
        return _obj



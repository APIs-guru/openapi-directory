# coding: utf-8

"""
    Cloud Build API

    Creates and manages builds on Google Cloud Platform.

    The version of the OpenAPI document: v1alpha2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.build_options import BuildOptions

class TestBuildOptions(unittest.TestCase):
    """BuildOptions unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> BuildOptions:
        """Test BuildOptions
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `BuildOptions`
        """
        model = BuildOptions()
        if include_optional:
            return BuildOptions(
                disk_size_gb = '',
                dynamic_substitutions = True,
                env = [
                    ''
                    ],
                log_streaming_option = 'STREAM_DEFAULT',
                logging = 'LOGGING_UNSPECIFIED',
                machine_type = 'UNSPECIFIED',
                pool = openapi_client.models.pool_option.PoolOption(
                    name = '', ),
                requested_verify_option = 'NOT_VERIFIED',
                secret_env = [
                    ''
                    ],
                source_provenance_hash = [
                    'NONE'
                    ],
                substitution_option = 'MUST_MATCH',
                volumes = [
                    openapi_client.models.volume.Volume(
                        name = '', 
                        path = '', )
                    ],
                worker_pool = ''
            )
        else:
            return BuildOptions(
        )
        """

    def testBuildOptions(self):
        """Test BuildOptions"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

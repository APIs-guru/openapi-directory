# coding: utf-8

"""
    Cloud Build API

    Creates and manages builds on Google Cloud Platform.

    The version of the OpenAPI document: v1alpha2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.file_hashes import FileHashes
from openapi_client.models.repo_source import RepoSource
from openapi_client.models.storage_source import StorageSource
from openapi_client.models.storage_source_manifest import StorageSourceManifest
from typing import Optional, Set
from typing_extensions import Self

class SourceProvenance(BaseModel):
    """
    Provenance of the source. Ways to find the original source, or verify that some source was used for this build.
    """ # noqa: E501
    file_hashes: Optional[Dict[str, FileHashes]] = Field(default=None, description="Output only. Hash(es) of the build source, which can be used to verify that the original source integrity was maintained in the build. Note that `FileHashes` will only be populated if `BuildOptions` has requested a `SourceProvenanceHash`. The keys to this map are file paths used as build source and the values contain the hash values for those files. If the build source came in a single package such as a gzipped tarfile (`.tar.gz`), the `FileHash` will be for the single path to that file.", alias="fileHashes")
    resolved_repo_source: Optional[RepoSource] = Field(default=None, alias="resolvedRepoSource")
    resolved_storage_source: Optional[StorageSource] = Field(default=None, alias="resolvedStorageSource")
    resolved_storage_source_manifest: Optional[StorageSourceManifest] = Field(default=None, alias="resolvedStorageSourceManifest")
    __properties: ClassVar[List[str]] = ["fileHashes", "resolvedRepoSource", "resolvedStorageSource", "resolvedStorageSourceManifest"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SourceProvenance from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "file_hashes",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each value in file_hashes (dict)
        _field_dict = {}
        if self.file_hashes:
            for _key_file_hashes in self.file_hashes:
                if self.file_hashes[_key_file_hashes]:
                    _field_dict[_key_file_hashes] = self.file_hashes[_key_file_hashes].to_dict()
            _dict['fileHashes'] = _field_dict
        # override the default output from pydantic by calling `to_dict()` of resolved_repo_source
        if self.resolved_repo_source:
            _dict['resolvedRepoSource'] = self.resolved_repo_source.to_dict()
        # override the default output from pydantic by calling `to_dict()` of resolved_storage_source
        if self.resolved_storage_source:
            _dict['resolvedStorageSource'] = self.resolved_storage_source.to_dict()
        # override the default output from pydantic by calling `to_dict()` of resolved_storage_source_manifest
        if self.resolved_storage_source_manifest:
            _dict['resolvedStorageSourceManifest'] = self.resolved_storage_source_manifest.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SourceProvenance from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "fileHashes": dict(
                (_k, FileHashes.from_dict(_v))
                for _k, _v in obj["fileHashes"].items()
            )
            if obj.get("fileHashes") is not None
            else None,
            "resolvedRepoSource": RepoSource.from_dict(obj["resolvedRepoSource"]) if obj.get("resolvedRepoSource") is not None else None,
            "resolvedStorageSource": StorageSource.from_dict(obj["resolvedStorageSource"]) if obj.get("resolvedStorageSource") is not None else None,
            "resolvedStorageSourceManifest": StorageSourceManifest.from_dict(obj["resolvedStorageSourceManifest"]) if obj.get("resolvedStorageSourceManifest") is not None else None
        })
        return _obj



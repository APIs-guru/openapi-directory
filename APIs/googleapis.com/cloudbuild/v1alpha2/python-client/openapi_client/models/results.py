# coding: utf-8

"""
    Cloud Build API

    Creates and manages builds on Google Cloud Platform.

    The version of the OpenAPI document: v1alpha2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBytes, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from openapi_client.models.built_image import BuiltImage
from openapi_client.models.time_span import TimeSpan
from openapi_client.models.uploaded_maven_artifact import UploadedMavenArtifact
from openapi_client.models.uploaded_python_package import UploadedPythonPackage
from typing import Optional, Set
from typing_extensions import Self

class Results(BaseModel):
    """
    Artifacts created by the build pipeline.
    """ # noqa: E501
    artifact_manifest: Optional[StrictStr] = Field(default=None, description="Path to the artifact manifest for non-container artifacts uploaded to Cloud Storage. Only populated when artifacts are uploaded to Cloud Storage.", alias="artifactManifest")
    artifact_timing: Optional[TimeSpan] = Field(default=None, alias="artifactTiming")
    build_step_images: Optional[List[StrictStr]] = Field(default=None, description="List of build step digests, in the order corresponding to build step indices.", alias="buildStepImages")
    build_step_outputs: Optional[List[Union[StrictBytes, StrictStr]]] = Field(default=None, description="List of build step outputs, produced by builder images, in the order corresponding to build step indices. [Cloud Builders](https://cloud.google.com/cloud-build/docs/cloud-builders) can produce this output by writing to `$BUILDER_OUTPUT/output`. Only the first 4KB of data is stored.", alias="buildStepOutputs")
    images: Optional[List[BuiltImage]] = Field(default=None, description="Container images that were built as a part of the build.")
    maven_artifacts: Optional[List[UploadedMavenArtifact]] = Field(default=None, description="Maven artifacts uploaded to Artifact Registry at the end of the build.", alias="mavenArtifacts")
    num_artifacts: Optional[StrictStr] = Field(default=None, description="Number of non-container artifacts uploaded to Cloud Storage. Only populated when artifacts are uploaded to Cloud Storage.", alias="numArtifacts")
    python_packages: Optional[List[UploadedPythonPackage]] = Field(default=None, description="Python artifacts uploaded to Artifact Registry at the end of the build.", alias="pythonPackages")
    __properties: ClassVar[List[str]] = ["artifactManifest", "artifactTiming", "buildStepImages", "buildStepOutputs", "images", "mavenArtifacts", "numArtifacts", "pythonPackages"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Results from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of artifact_timing
        if self.artifact_timing:
            _dict['artifactTiming'] = self.artifact_timing.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in images (list)
        _items = []
        if self.images:
            for _item_images in self.images:
                if _item_images:
                    _items.append(_item_images.to_dict())
            _dict['images'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in maven_artifacts (list)
        _items = []
        if self.maven_artifacts:
            for _item_maven_artifacts in self.maven_artifacts:
                if _item_maven_artifacts:
                    _items.append(_item_maven_artifacts.to_dict())
            _dict['mavenArtifacts'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in python_packages (list)
        _items = []
        if self.python_packages:
            for _item_python_packages in self.python_packages:
                if _item_python_packages:
                    _items.append(_item_python_packages.to_dict())
            _dict['pythonPackages'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Results from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "artifactManifest": obj.get("artifactManifest"),
            "artifactTiming": TimeSpan.from_dict(obj["artifactTiming"]) if obj.get("artifactTiming") is not None else None,
            "buildStepImages": obj.get("buildStepImages"),
            "buildStepOutputs": obj.get("buildStepOutputs"),
            "images": [BuiltImage.from_dict(_item) for _item in obj["images"]] if obj.get("images") is not None else None,
            "mavenArtifacts": [UploadedMavenArtifact.from_dict(_item) for _item in obj["mavenArtifacts"]] if obj.get("mavenArtifacts") is not None else None,
            "numArtifacts": obj.get("numArtifacts"),
            "pythonPackages": [UploadedPythonPackage.from_dict(_item) for _item in obj["pythonPackages"]] if obj.get("pythonPackages") is not None else None
        })
        return _obj



# coding: utf-8

"""
    Cloud Build API

    Creates and manages builds on Google Cloud Platform.

    The version of the OpenAPI document: v1alpha1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.http_delivery import HTTPDelivery
from openapi_client.models.slack_delivery import SlackDelivery
from openapi_client.models.smtp_delivery import SMTPDelivery
from typing import Optional, Set
from typing_extensions import Self

class Notification(BaseModel):
    """
    Notification is the container which holds the data that is relevant to this particular notification.
    """ # noqa: E501
    filter: Optional[StrictStr] = Field(default=None, description="The filter string to use for notification filtering. Currently, this is assumed to be a CEL program. See https://opensource.google/projects/cel for more.")
    http_delivery: Optional[HTTPDelivery] = Field(default=None, alias="httpDelivery")
    slack_delivery: Optional[SlackDelivery] = Field(default=None, alias="slackDelivery")
    smtp_delivery: Optional[SMTPDelivery] = Field(default=None, alias="smtpDelivery")
    struct_delivery: Optional[Dict[str, Any]] = Field(default=None, description="Escape hatch for users to supply custom delivery configs.", alias="structDelivery")
    __properties: ClassVar[List[str]] = ["filter", "httpDelivery", "slackDelivery", "smtpDelivery", "structDelivery"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Notification from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of http_delivery
        if self.http_delivery:
            _dict['httpDelivery'] = self.http_delivery.to_dict()
        # override the default output from pydantic by calling `to_dict()` of slack_delivery
        if self.slack_delivery:
            _dict['slackDelivery'] = self.slack_delivery.to_dict()
        # override the default output from pydantic by calling `to_dict()` of smtp_delivery
        if self.smtp_delivery:
            _dict['smtpDelivery'] = self.smtp_delivery.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Notification from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "filter": obj.get("filter"),
            "httpDelivery": HTTPDelivery.from_dict(obj["httpDelivery"]) if obj.get("httpDelivery") is not None else None,
            "slackDelivery": SlackDelivery.from_dict(obj["slackDelivery"]) if obj.get("slackDelivery") is not None else None,
            "smtpDelivery": SMTPDelivery.from_dict(obj["smtpDelivery"]) if obj.get("smtpDelivery") is not None else None,
            "structDelivery": obj.get("structDelivery")
        })
        return _obj



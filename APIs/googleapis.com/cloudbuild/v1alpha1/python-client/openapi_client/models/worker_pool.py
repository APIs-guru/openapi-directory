# coding: utf-8

"""
    Cloud Build API

    Creates and manages builds on Google Cloud Platform.

    The version of the OpenAPI document: v1alpha1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.worker_config import WorkerConfig
from typing import Optional, Set
from typing_extensions import Self

class WorkerPool(BaseModel):
    """
    Configuration for a WorkerPool to run the builds. Workers are machines that Cloud Build uses to run your builds. By default, all workers run in a project owned by Cloud Build. To have full control over the workers that execute your builds -- such as enabling them to access private resources on your private network -- you can request Cloud Build to run the workers in your own project by creating a custom workers pool.
    """ # noqa: E501
    create_time: Optional[StrictStr] = Field(default=None, description="Output only. Time at which the request to create the `WorkerPool` was received.", alias="createTime")
    delete_time: Optional[StrictStr] = Field(default=None, description="Output only. Time at which the request to delete the `WorkerPool` was received.", alias="deleteTime")
    name: Optional[StrictStr] = Field(default=None, description="User-defined name of the `WorkerPool`.")
    project_id: Optional[StrictStr] = Field(default=None, description="The project ID of the GCP project for which the `WorkerPool` is created.", alias="projectId")
    regions: Optional[List[StrictStr]] = Field(default=None, description="List of regions to create the `WorkerPool`. Regions can't be empty. If Cloud Build adds a new GCP region in the future, the existing `WorkerPool` will not be enabled in the new region automatically; you must add the new region to the `regions` field to enable the `WorkerPool` in that region.")
    service_account_email: Optional[StrictStr] = Field(default=None, description="Output only. The service account used to manage the `WorkerPool`. The service account must have the Compute Instance Admin (Beta) permission at the project level.", alias="serviceAccountEmail")
    status: Optional[StrictStr] = Field(default=None, description="Output only. WorkerPool Status.")
    update_time: Optional[StrictStr] = Field(default=None, description="Output only. Time at which the request to update the `WorkerPool` was received.", alias="updateTime")
    worker_config: Optional[WorkerConfig] = Field(default=None, alias="workerConfig")
    worker_count: Optional[StrictStr] = Field(default=None, description="Total number of workers to be created across all requested regions.", alias="workerCount")
    __properties: ClassVar[List[str]] = ["createTime", "deleteTime", "name", "projectId", "regions", "serviceAccountEmail", "status", "updateTime", "workerConfig", "workerCount"]

    @field_validator('regions')
    def regions_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        for i in value:
            if i not in set(['REGION_UNSPECIFIED', 'us-central1', 'us-west1', 'us-east1', 'us-east4']):
                raise ValueError("each list item must be one of ('REGION_UNSPECIFIED', 'us-central1', 'us-west1', 'us-east1', 'us-east4')")
        return value

    @field_validator('status')
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['STATUS_UNSPECIFIED', 'CREATING', 'RUNNING', 'DELETING', 'DELETED']):
            raise ValueError("must be one of enum values ('STATUS_UNSPECIFIED', 'CREATING', 'RUNNING', 'DELETING', 'DELETED')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of WorkerPool from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of worker_config
        if self.worker_config:
            _dict['workerConfig'] = self.worker_config.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of WorkerPool from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "createTime": obj.get("createTime"),
            "deleteTime": obj.get("deleteTime"),
            "name": obj.get("name"),
            "projectId": obj.get("projectId"),
            "regions": obj.get("regions"),
            "serviceAccountEmail": obj.get("serviceAccountEmail"),
            "status": obj.get("status"),
            "updateTime": obj.get("updateTime"),
            "workerConfig": WorkerConfig.from_dict(obj["workerConfig"]) if obj.get("workerConfig") is not None else None,
            "workerCount": obj.get("workerCount")
        })
        return _obj



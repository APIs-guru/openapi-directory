# coding: utf-8

"""
    Service Consumer Management API

    Manages the service consumers of a Service Infrastructure service.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.publishing import Publishing

class TestPublishing(unittest.TestCase):
    """Publishing unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> Publishing:
        """Test Publishing
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `Publishing`
        """
        model = Publishing()
        if include_optional:
            return Publishing(
                api_short_name = '',
                codeowner_github_teams = [
                    ''
                    ],
                doc_tag_prefix = '',
                documentation_uri = '',
                github_label = '',
                library_settings = [
                    openapi_client.models.client_library_settings.ClientLibrarySettings(
                        cpp_settings = openapi_client.models.cpp_settings.CppSettings(
                            common = openapi_client.models.common_language_settings.CommonLanguageSettings(
                                destinations = [
                                    'CLIENT_LIBRARY_DESTINATION_UNSPECIFIED'
                                    ], 
                                reference_docs_uri = '', ), ), 
                        dotnet_settings = openapi_client.models.dotnet_settings.DotnetSettings(
                            forced_namespace_aliases = [
                                ''
                                ], 
                            handwritten_signatures = [
                                ''
                                ], 
                            ignored_resources = [
                                ''
                                ], 
                            renamed_resources = {
                                'key' : ''
                                }, 
                            renamed_services = {
                                'key' : ''
                                }, ), 
                        go_settings = openapi_client.models.go_settings.GoSettings(), 
                        java_settings = openapi_client.models.java_settings.JavaSettings(
                            library_package = '', 
                            service_class_names = {
                                'key' : ''
                                }, ), 
                        launch_stage = 'LAUNCH_STAGE_UNSPECIFIED', 
                        node_settings = openapi_client.models.node_settings.NodeSettings(), 
                        php_settings = openapi_client.models.php_settings.PhpSettings(), 
                        python_settings = openapi_client.models.python_settings.PythonSettings(), 
                        rest_numeric_enums = True, 
                        ruby_settings = openapi_client.models.ruby_settings.RubySettings(), 
                        version = '', )
                    ],
                method_settings = [
                    openapi_client.models.method_settings.MethodSettings(
                        auto_populated_fields = [
                            ''
                            ], 
                        long_running = openapi_client.models.long_running.LongRunning(
                            initial_poll_delay = '', 
                            max_poll_delay = '', 
                            poll_delay_multiplier = 1.337, 
                            total_poll_timeout = '', ), 
                        selector = '', )
                    ],
                new_issue_uri = '',
                organization = 'CLIENT_LIBRARY_ORGANIZATION_UNSPECIFIED',
                proto_reference_documentation_uri = '',
                rest_reference_documentation_uri = ''
            )
        else:
            return Publishing(
        )
        """

    def testPublishing(self):
        """Test Publishing"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

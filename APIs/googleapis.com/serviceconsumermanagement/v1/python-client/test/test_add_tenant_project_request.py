# coding: utf-8

"""
    Service Consumer Management API

    Manages the service consumers of a Service Infrastructure service.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.add_tenant_project_request import AddTenantProjectRequest

class TestAddTenantProjectRequest(unittest.TestCase):
    """AddTenantProjectRequest unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> AddTenantProjectRequest:
        """Test AddTenantProjectRequest
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `AddTenantProjectRequest`
        """
        model = AddTenantProjectRequest()
        if include_optional:
            return AddTenantProjectRequest(
                project_config = openapi_client.models.tenant_project_config.TenantProjectConfig(
                    billing_config = openapi_client.models.billing_config.BillingConfig(
                        billing_account = '', ), 
                    folder = '', 
                    labels = {
                        'key' : ''
                        }, 
                    service_account_config = openapi_client.models.service_account_config.ServiceAccountConfig(
                        account_id = '', 
                        tenant_project_roles = [
                            ''
                            ], ), 
                    services = [
                        ''
                        ], 
                    tenant_project_policy = openapi_client.models.tenant_project_policy.TenantProjectPolicy(
                        policy_bindings = [
                            openapi_client.models.policy_binding.PolicyBinding(
                                members = [
                                    ''
                                    ], 
                                role = '', )
                            ], ), ),
                tag = ''
            )
        else:
            return AddTenantProjectRequest(
        )
        """

    def testAddTenantProjectRequest(self):
        """Test AddTenantProjectRequest"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

# coding: utf-8

"""
    Service Consumer Management API

    Manages the service consumers of a Service Infrastructure service.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.service import Service

class TestService(unittest.TestCase):
    """Service unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> Service:
        """Test Service
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `Service`
        """
        model = Service()
        if include_optional:
            return Service(
                apis = [
                    openapi_client.models.api.Api(
                        methods = [
                            openapi_client.models.method.Method(
                                name = '', 
                                options = [
                                    openapi_client.models.option.Option(
                                        name = '', 
                                        value = {
                                            'key' : null
                                            }, )
                                    ], 
                                request_streaming = True, 
                                request_type_url = '', 
                                response_streaming = True, 
                                response_type_url = '', 
                                syntax = 'SYNTAX_PROTO2', )
                            ], 
                        mixins = [
                            openapi_client.models.mixin.Mixin(
                                name = '', 
                                root = '', )
                            ], 
                        name = '', 
                        options = [
                            openapi_client.models.option.Option(
                                name = '', )
                            ], 
                        source_context = openapi_client.models.source_context.SourceContext(
                            file_name = '', ), 
                        syntax = 'SYNTAX_PROTO2', 
                        version = '', )
                    ],
                authentication = openapi_client.models.authentication.Authentication(
                    providers = [
                        openapi_client.models.auth_provider.AuthProvider(
                            audiences = '', 
                            authorization_url = '', 
                            id = '', 
                            issuer = '', 
                            jwks_uri = '', 
                            jwt_locations = [
                                openapi_client.models.jwt_location.JwtLocation(
                                    cookie = '', 
                                    header = '', 
                                    query = '', 
                                    value_prefix = '', )
                                ], )
                        ], 
                    rules = [
                        openapi_client.models.authentication_rule.AuthenticationRule(
                            allow_without_credential = True, 
                            oauth = openapi_client.models.o_auth_requirements.OAuthRequirements(
                                canonical_scopes = '', ), 
                            requirements = [
                                openapi_client.models.auth_requirement.AuthRequirement(
                                    audiences = '', 
                                    provider_id = '', )
                                ], 
                            selector = '', )
                        ], ),
                backend = openapi_client.models.backend.Backend(
                    rules = [
                        openapi_client.models.backend_rule.BackendRule(
                            address = '', 
                            deadline = 1.337, 
                            disable_auth = True, 
                            jwt_audience = '', 
                            min_deadline = 1.337, 
                            operation_deadline = 1.337, 
                            overrides_by_request_protocol = {
                                'key' : openapi_client.models.backend_rule.BackendRule(
                                    address = '', 
                                    deadline = 1.337, 
                                    disable_auth = True, 
                                    jwt_audience = '', 
                                    min_deadline = 1.337, 
                                    operation_deadline = 1.337, 
                                    path_translation = 'PATH_TRANSLATION_UNSPECIFIED', 
                                    protocol = '', 
                                    selector = '', )
                                }, 
                            path_translation = 'PATH_TRANSLATION_UNSPECIFIED', 
                            protocol = '', 
                            selector = '', )
                        ], ),
                billing = openapi_client.models.billing.Billing(
                    consumer_destinations = [
                        openapi_client.models.billing_destination.BillingDestination(
                            metrics = [
                                ''
                                ], 
                            monitored_resource = '', )
                        ], ),
                config_version = 56,
                context = openapi_client.models.context.Context(
                    rules = [
                        openapi_client.models.context_rule.ContextRule(
                            allowed_request_extensions = [
                                ''
                                ], 
                            allowed_response_extensions = [
                                ''
                                ], 
                            provided = [
                                ''
                                ], 
                            requested = [
                                ''
                                ], 
                            selector = '', )
                        ], ),
                control = openapi_client.models.control.Control(
                    environment = '', 
                    method_policies = [
                        openapi_client.models.method_policy.MethodPolicy(
                            request_policies = [
                                openapi_client.models.field_policy.FieldPolicy(
                                    resource_permission = '', 
                                    resource_type = '', 
                                    selector = '', )
                                ], 
                            selector = '', )
                        ], ),
                custom_error = openapi_client.models.custom_error.CustomError(
                    rules = [
                        openapi_client.models.custom_error_rule.CustomErrorRule(
                            is_error_type = True, 
                            selector = '', )
                        ], 
                    types = [
                        ''
                        ], ),
                documentation = openapi_client.models.documentation.Documentation(
                    documentation_root_url = '', 
                    overview = '', 
                    pages = [
                        openapi_client.models.page.Page(
                            content = '', 
                            name = '', 
                            subpages = [
                                openapi_client.models.page.Page(
                                    content = '', 
                                    name = '', )
                                ], )
                        ], 
                    rules = [
                        openapi_client.models.documentation_rule.DocumentationRule(
                            deprecation_description = '', 
                            description = '', 
                            disable_replacement_words = '', 
                            selector = '', )
                        ], 
                    section_overrides = [
                        
                        ], 
                    service_root_url = '', 
                    summary = '', ),
                endpoints = [
                    openapi_client.models.endpoint.Endpoint(
                        aliases = [
                            ''
                            ], 
                        allow_cors = True, 
                        name = '', 
                        target = '', )
                    ],
                enums = [
                    openapi_client.models.enum.Enum(
                        edition = '', 
                        enumvalue = [
                            openapi_client.models.enum_value.EnumValue(
                                name = '', 
                                number = 56, 
                                options = [
                                    openapi_client.models.option.Option(
                                        name = '', 
                                        value = {
                                            'key' : null
                                            }, )
                                    ], )
                            ], 
                        name = '', 
                        options = [
                            openapi_client.models.option.Option(
                                name = '', )
                            ], 
                        source_context = openapi_client.models.source_context.SourceContext(
                            file_name = '', ), 
                        syntax = 'SYNTAX_PROTO2', )
                    ],
                http = openapi_client.models.http.Http(
                    fully_decode_reserved_expansion = True, 
                    rules = [
                        openapi_client.models.http_rule.HttpRule(
                            additional_bindings = [
                                openapi_client.models.http_rule.HttpRule(
                                    body = '', 
                                    custom = openapi_client.models.custom_http_pattern.CustomHttpPattern(
                                        kind = '', 
                                        path = '', ), 
                                    delete = '', 
                                    get = '', 
                                    patch = '', 
                                    post = '', 
                                    put = '', 
                                    response_body = '', 
                                    selector = '', )
                                ], 
                            body = '', 
                            custom = openapi_client.models.custom_http_pattern.CustomHttpPattern(
                                kind = '', 
                                path = '', ), 
                            delete = '', 
                            get = '', 
                            patch = '', 
                            post = '', 
                            put = '', 
                            response_body = '', 
                            selector = '', )
                        ], ),
                id = '',
                logging = openapi_client.models.logging.Logging(
                    consumer_destinations = [
                        openapi_client.models.logging_destination.LoggingDestination(
                            logs = [
                                ''
                                ], 
                            monitored_resource = '', )
                        ], 
                    producer_destinations = [
                        openapi_client.models.logging_destination.LoggingDestination(
                            monitored_resource = '', )
                        ], ),
                logs = [
                    openapi_client.models.log_descriptor.LogDescriptor(
                        description = '', 
                        display_name = '', 
                        labels = [
                            openapi_client.models.label_descriptor.LabelDescriptor(
                                description = '', 
                                key = '', 
                                value_type = 'STRING', )
                            ], 
                        name = '', )
                    ],
                metrics = [
                    openapi_client.models.metric_descriptor.MetricDescriptor(
                        description = '', 
                        display_name = '', 
                        labels = [
                            openapi_client.models.label_descriptor.LabelDescriptor(
                                description = '', 
                                key = '', 
                                value_type = 'STRING', )
                            ], 
                        launch_stage = 'LAUNCH_STAGE_UNSPECIFIED', 
                        metadata = openapi_client.models.metric_descriptor_metadata.MetricDescriptorMetadata(
                            ingest_delay = '', 
                            launch_stage = 'LAUNCH_STAGE_UNSPECIFIED', 
                            sample_period = '', ), 
                        metric_kind = 'METRIC_KIND_UNSPECIFIED', 
                        monitored_resource_types = [
                            ''
                            ], 
                        name = '', 
                        type = '', 
                        unit = '', 
                        value_type = 'VALUE_TYPE_UNSPECIFIED', )
                    ],
                monitored_resources = [
                    openapi_client.models.monitored_resource_descriptor.MonitoredResourceDescriptor(
                        description = '', 
                        display_name = '', 
                        labels = [
                            openapi_client.models.label_descriptor.LabelDescriptor(
                                description = '', 
                                key = '', 
                                value_type = 'STRING', )
                            ], 
                        launch_stage = 'LAUNCH_STAGE_UNSPECIFIED', 
                        name = '', 
                        type = '', )
                    ],
                monitoring = openapi_client.models.monitoring.Monitoring(
                    consumer_destinations = [
                        openapi_client.models.monitoring_destination.MonitoringDestination(
                            metrics = [
                                ''
                                ], 
                            monitored_resource = '', )
                        ], 
                    producer_destinations = [
                        openapi_client.models.monitoring_destination.MonitoringDestination(
                            monitored_resource = '', )
                        ], ),
                name = '',
                producer_project_id = '',
                publishing = openapi_client.models.publishing.Publishing(
                    api_short_name = '', 
                    codeowner_github_teams = [
                        ''
                        ], 
                    doc_tag_prefix = '', 
                    documentation_uri = '', 
                    github_label = '', 
                    library_settings = [
                        openapi_client.models.client_library_settings.ClientLibrarySettings(
                            cpp_settings = openapi_client.models.cpp_settings.CppSettings(
                                common = openapi_client.models.common_language_settings.CommonLanguageSettings(
                                    destinations = [
                                        'CLIENT_LIBRARY_DESTINATION_UNSPECIFIED'
                                        ], 
                                    reference_docs_uri = '', ), ), 
                            dotnet_settings = openapi_client.models.dotnet_settings.DotnetSettings(
                                forced_namespace_aliases = [
                                    ''
                                    ], 
                                handwritten_signatures = [
                                    ''
                                    ], 
                                ignored_resources = [
                                    ''
                                    ], 
                                renamed_resources = {
                                    'key' : ''
                                    }, 
                                renamed_services = {
                                    'key' : ''
                                    }, ), 
                            go_settings = openapi_client.models.go_settings.GoSettings(), 
                            java_settings = openapi_client.models.java_settings.JavaSettings(
                                library_package = '', 
                                service_class_names = {
                                    'key' : ''
                                    }, ), 
                            launch_stage = 'LAUNCH_STAGE_UNSPECIFIED', 
                            node_settings = openapi_client.models.node_settings.NodeSettings(), 
                            php_settings = openapi_client.models.php_settings.PhpSettings(), 
                            python_settings = openapi_client.models.python_settings.PythonSettings(), 
                            rest_numeric_enums = True, 
                            ruby_settings = openapi_client.models.ruby_settings.RubySettings(), 
                            version = '', )
                        ], 
                    method_settings = [
                        openapi_client.models.method_settings.MethodSettings(
                            auto_populated_fields = [
                                ''
                                ], 
                            long_running = openapi_client.models.long_running.LongRunning(
                                initial_poll_delay = '', 
                                max_poll_delay = '', 
                                poll_delay_multiplier = 1.337, 
                                total_poll_timeout = '', ), 
                            selector = '', )
                        ], 
                    new_issue_uri = '', 
                    organization = 'CLIENT_LIBRARY_ORGANIZATION_UNSPECIFIED', 
                    proto_reference_documentation_uri = '', 
                    rest_reference_documentation_uri = '', ),
                quota = openapi_client.models.quota.Quota(
                    limits = [
                        openapi_client.models.quota_limit.QuotaLimit(
                            default_limit = '', 
                            description = '', 
                            display_name = '', 
                            duration = '', 
                            free_tier = '', 
                            max_limit = '', 
                            metric = '', 
                            name = '', 
                            unit = '', 
                            values = {
                                'key' : ''
                                }, )
                        ], 
                    metric_rules = [
                        openapi_client.models.metric_rule.MetricRule(
                            metric_costs = {
                                'key' : ''
                                }, 
                            selector = '', )
                        ], ),
                source_info = openapi_client.models.source_info.SourceInfo(
                    source_files = [
                        {
                            'key' : null
                            }
                        ], ),
                system_parameters = openapi_client.models.system_parameters.SystemParameters(
                    rules = [
                        openapi_client.models.system_parameter_rule.SystemParameterRule(
                            parameters = [
                                openapi_client.models.system_parameter.SystemParameter(
                                    http_header = '', 
                                    name = '', 
                                    url_query_parameter = '', )
                                ], 
                            selector = '', )
                        ], ),
                system_types = [
                    openapi_client.models.type.Type(
                        edition = '', 
                        fields = [
                            openapi_client.models.field.Field(
                                cardinality = 'CARDINALITY_UNKNOWN', 
                                default_value = '', 
                                json_name = '', 
                                kind = 'TYPE_UNKNOWN', 
                                name = '', 
                                number = 56, 
                                oneof_index = 56, 
                                options = [
                                    openapi_client.models.option.Option(
                                        name = '', 
                                        value = {
                                            'key' : null
                                            }, )
                                    ], 
                                packed = True, 
                                type_url = '', )
                            ], 
                        name = '', 
                        oneofs = [
                            ''
                            ], 
                        options = [
                            openapi_client.models.option.Option(
                                name = '', )
                            ], 
                        source_context = openapi_client.models.source_context.SourceContext(
                            file_name = '', ), 
                        syntax = 'SYNTAX_PROTO2', )
                    ],
                title = '',
                types = [
                    openapi_client.models.type.Type(
                        edition = '', 
                        fields = [
                            openapi_client.models.field.Field(
                                cardinality = 'CARDINALITY_UNKNOWN', 
                                default_value = '', 
                                json_name = '', 
                                kind = 'TYPE_UNKNOWN', 
                                name = '', 
                                number = 56, 
                                oneof_index = 56, 
                                options = [
                                    openapi_client.models.option.Option(
                                        name = '', 
                                        value = {
                                            'key' : null
                                            }, )
                                    ], 
                                packed = True, 
                                type_url = '', )
                            ], 
                        name = '', 
                        oneofs = [
                            ''
                            ], 
                        options = [
                            openapi_client.models.option.Option(
                                name = '', )
                            ], 
                        source_context = openapi_client.models.source_context.SourceContext(
                            file_name = '', ), 
                        syntax = 'SYNTAX_PROTO2', )
                    ],
                usage = openapi_client.models.usage.Usage(
                    producer_notification_channel = '', 
                    requirements = [
                        ''
                        ], 
                    rules = [
                        openapi_client.models.usage_rule.UsageRule(
                            allow_unregistered_calls = True, 
                            selector = '', 
                            skip_service_control = True, )
                        ], )
            )
        else:
            return Service(
        )
        """

    def testService(self):
        """Test Service"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

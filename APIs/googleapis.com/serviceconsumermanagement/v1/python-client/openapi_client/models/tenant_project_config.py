# coding: utf-8

"""
    Service Consumer Management API

    Manages the service consumers of a Service Infrastructure service.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.billing_config import BillingConfig
from openapi_client.models.service_account_config import ServiceAccountConfig
from openapi_client.models.tenant_project_policy import TenantProjectPolicy
from typing import Optional, Set
from typing_extensions import Self

class TenantProjectConfig(BaseModel):
    """
    This structure defines a tenant project to be added to the specified tenancy unit and its initial configuration and properties. A project lien is created for the tenant project to prevent the tenant project from being deleted accidentally. The lien is deleted as part of tenant project removal.
    """ # noqa: E501
    billing_config: Optional[BillingConfig] = Field(default=None, alias="billingConfig")
    folder: Optional[StrictStr] = Field(default=None, description="Folder where project in this tenancy unit must be located This folder must have been previously created with the required permissions for the caller to create and configure a project in it. Valid folder resource names have the format `folders/{folder_number}` (for example, `folders/123456`).")
    labels: Optional[Dict[str, StrictStr]] = Field(default=None, description="Labels that are applied to this project.")
    service_account_config: Optional[ServiceAccountConfig] = Field(default=None, alias="serviceAccountConfig")
    services: Optional[List[StrictStr]] = Field(default=None, description="Google Cloud API names of services that are activated on this project during provisioning. If any of these services can't be activated, the request fails. For example: 'compute.googleapis.com','cloudfunctions.googleapis.com'")
    tenant_project_policy: Optional[TenantProjectPolicy] = Field(default=None, alias="tenantProjectPolicy")
    __properties: ClassVar[List[str]] = ["billingConfig", "folder", "labels", "serviceAccountConfig", "services", "tenantProjectPolicy"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of TenantProjectConfig from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of billing_config
        if self.billing_config:
            _dict['billingConfig'] = self.billing_config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of service_account_config
        if self.service_account_config:
            _dict['serviceAccountConfig'] = self.service_account_config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of tenant_project_policy
        if self.tenant_project_policy:
            _dict['tenantProjectPolicy'] = self.tenant_project_policy.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of TenantProjectConfig from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "billingConfig": BillingConfig.from_dict(obj["billingConfig"]) if obj.get("billingConfig") is not None else None,
            "folder": obj.get("folder"),
            "labels": obj.get("labels"),
            "serviceAccountConfig": ServiceAccountConfig.from_dict(obj["serviceAccountConfig"]) if obj.get("serviceAccountConfig") is not None else None,
            "services": obj.get("services"),
            "tenantProjectPolicy": TenantProjectPolicy.from_dict(obj["tenantProjectPolicy"]) if obj.get("tenantProjectPolicy") is not None else None
        })
        return _obj



# coding: utf-8

"""
    Service Consumer Management API

    Manages the service consumers of a Service Infrastructure service.

    The version of the OpenAPI document: v1beta1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.v1_beta1_consumer_quota_limit import V1Beta1ConsumerQuotaLimit
from typing import Optional, Set
from typing_extensions import Self

class V1Beta1ConsumerQuotaMetric(BaseModel):
    """
    Consumer quota settings for a quota metric.
    """ # noqa: E501
    consumer_quota_limits: Optional[List[V1Beta1ConsumerQuotaLimit]] = Field(default=None, description="The consumer quota for each quota limit defined on the metric.", alias="consumerQuotaLimits")
    descendant_consumer_quota_limits: Optional[List[V1Beta1ConsumerQuotaLimit]] = Field(default=None, description="The quota limits targeting the descendant containers of the consumer in request. If the consumer in request is of type `organizations` or `folders`, the field will list per-project limits in the metric; if the consumer in request is of type `project`, the field will be empty. The `quota_buckets` field of each descendant consumer quota limit will not be populated.", alias="descendantConsumerQuotaLimits")
    display_name: Optional[StrictStr] = Field(default=None, description="The display name of the metric. An example name would be: \"CPUs\"", alias="displayName")
    metric: Optional[StrictStr] = Field(default=None, description="The name of the metric. An example name would be: `compute.googleapis.com/cpus`")
    name: Optional[StrictStr] = Field(default=None, description="The resource name of the quota settings on this metric for this consumer. An example name would be: `services/serviceconsumermanagement.googleapis.com/projects/123/consumerQuotaMetrics/compute.googleapis.com%2Fcpus` The resource name is intended to be opaque and should not be parsed for its component strings, since its representation could change in the future.")
    unit: Optional[StrictStr] = Field(default=None, description="The units in which the metric value is reported.")
    __properties: ClassVar[List[str]] = ["consumerQuotaLimits", "descendantConsumerQuotaLimits", "displayName", "metric", "name", "unit"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of V1Beta1ConsumerQuotaMetric from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in consumer_quota_limits (list)
        _items = []
        if self.consumer_quota_limits:
            for _item_consumer_quota_limits in self.consumer_quota_limits:
                if _item_consumer_quota_limits:
                    _items.append(_item_consumer_quota_limits.to_dict())
            _dict['consumerQuotaLimits'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in descendant_consumer_quota_limits (list)
        _items = []
        if self.descendant_consumer_quota_limits:
            for _item_descendant_consumer_quota_limits in self.descendant_consumer_quota_limits:
                if _item_descendant_consumer_quota_limits:
                    _items.append(_item_descendant_consumer_quota_limits.to_dict())
            _dict['descendantConsumerQuotaLimits'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of V1Beta1ConsumerQuotaMetric from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "consumerQuotaLimits": [V1Beta1ConsumerQuotaLimit.from_dict(_item) for _item in obj["consumerQuotaLimits"]] if obj.get("consumerQuotaLimits") is not None else None,
            "descendantConsumerQuotaLimits": [V1Beta1ConsumerQuotaLimit.from_dict(_item) for _item in obj["descendantConsumerQuotaLimits"]] if obj.get("descendantConsumerQuotaLimits") is not None else None,
            "displayName": obj.get("displayName"),
            "metric": obj.get("metric"),
            "name": obj.get("name"),
            "unit": obj.get("unit")
        })
        return _obj



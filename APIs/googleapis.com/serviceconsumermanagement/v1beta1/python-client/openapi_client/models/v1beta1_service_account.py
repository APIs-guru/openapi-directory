# coding: utf-8

"""
    Service Consumer Management API

    Manages the service consumers of a Service Infrastructure service.

    The version of the OpenAPI document: v1beta1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class V1beta1ServiceAccount(BaseModel):
    """
    A service account in the Identity and Access Management API.
    """ # noqa: E501
    email: Optional[StrictStr] = Field(default=None, description="The email address of the service account.")
    iam_account_name: Optional[StrictStr] = Field(default=None, description="Deprecated. See b/136209818.", alias="iamAccountName")
    name: Optional[StrictStr] = Field(default=None, description="P4 SA resource name. An example name would be: `services/serviceconsumermanagement.googleapis.com/projects/123/serviceAccounts/default`")
    tag: Optional[StrictStr] = Field(default=None, description="The P4 SA configuration tag. This must be defined in activation_grants. If not specified when creating the account, the tag is set to \"default\".")
    unique_id: Optional[StrictStr] = Field(default=None, description="The unique and stable id of the service account.", alias="uniqueId")
    __properties: ClassVar[List[str]] = ["email", "iamAccountName", "name", "tag", "uniqueId"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of V1beta1ServiceAccount from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of V1beta1ServiceAccount from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "email": obj.get("email"),
            "iamAccountName": obj.get("iamAccountName"),
            "name": obj.get("name"),
            "tag": obj.get("tag"),
            "uniqueId": obj.get("uniqueId")
        })
        return _obj



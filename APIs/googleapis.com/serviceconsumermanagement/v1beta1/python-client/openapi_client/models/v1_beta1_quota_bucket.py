# coding: utf-8

"""
    Service Consumer Management API

    Manages the service consumers of a Service Infrastructure service.

    The version of the OpenAPI document: v1beta1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.v1_beta1_producer_quota_policy import V1Beta1ProducerQuotaPolicy
from openapi_client.models.v1_beta1_quota_override import V1Beta1QuotaOverride
from typing import Optional, Set
from typing_extensions import Self

class V1Beta1QuotaBucket(BaseModel):
    """
    A quota bucket is a quota provisioning unit for a specific set of dimensions.
    """ # noqa: E501
    admin_override: Optional[V1Beta1QuotaOverride] = Field(default=None, alias="adminOverride")
    consumer_override: Optional[V1Beta1QuotaOverride] = Field(default=None, alias="consumerOverride")
    default_limit: Optional[StrictStr] = Field(default=None, description="The default limit of this quota bucket, as specified by the service configuration.", alias="defaultLimit")
    dimensions: Optional[Dict[str, StrictStr]] = Field(default=None, description="The dimensions of this quota bucket. If this map is empty, this is the global bucket, which is the default quota value applied to all requests that do not have a more specific override. If this map is nonempty, the default limit, effective limit, and quota overrides apply only to requests that have the dimensions given in the map. For example, if the map has key \"region\" and value \"us-east-1\", then the specified effective limit is only effective in that region, and the specified overrides apply only in that region.")
    effective_limit: Optional[StrictStr] = Field(default=None, description="The effective limit of this quota bucket. Equal to default_limit if there are no overrides.", alias="effectiveLimit")
    producer_override: Optional[V1Beta1QuotaOverride] = Field(default=None, alias="producerOverride")
    producer_quota_policy: Optional[V1Beta1ProducerQuotaPolicy] = Field(default=None, alias="producerQuotaPolicy")
    __properties: ClassVar[List[str]] = ["adminOverride", "consumerOverride", "defaultLimit", "dimensions", "effectiveLimit", "producerOverride", "producerQuotaPolicy"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of V1Beta1QuotaBucket from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of admin_override
        if self.admin_override:
            _dict['adminOverride'] = self.admin_override.to_dict()
        # override the default output from pydantic by calling `to_dict()` of consumer_override
        if self.consumer_override:
            _dict['consumerOverride'] = self.consumer_override.to_dict()
        # override the default output from pydantic by calling `to_dict()` of producer_override
        if self.producer_override:
            _dict['producerOverride'] = self.producer_override.to_dict()
        # override the default output from pydantic by calling `to_dict()` of producer_quota_policy
        if self.producer_quota_policy:
            _dict['producerQuotaPolicy'] = self.producer_quota_policy.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of V1Beta1QuotaBucket from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "adminOverride": V1Beta1QuotaOverride.from_dict(obj["adminOverride"]) if obj.get("adminOverride") is not None else None,
            "consumerOverride": V1Beta1QuotaOverride.from_dict(obj["consumerOverride"]) if obj.get("consumerOverride") is not None else None,
            "defaultLimit": obj.get("defaultLimit"),
            "dimensions": obj.get("dimensions"),
            "effectiveLimit": obj.get("effectiveLimit"),
            "producerOverride": V1Beta1QuotaOverride.from_dict(obj["producerOverride"]) if obj.get("producerOverride") is not None else None,
            "producerQuotaPolicy": V1Beta1ProducerQuotaPolicy.from_dict(obj["producerQuotaPolicy"]) if obj.get("producerQuotaPolicy") is not None else None
        })
        return _obj



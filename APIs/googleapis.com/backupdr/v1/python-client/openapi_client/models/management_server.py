# coding: utf-8

"""
    Backup and DR Service API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.management_uri import ManagementURI
from openapi_client.models.network_config import NetworkConfig
from openapi_client.models.workforce_identity_based_management_uri import WorkforceIdentityBasedManagementURI
from openapi_client.models.workforce_identity_based_o_auth2_client_id import WorkforceIdentityBasedOAuth2ClientID
from typing import Optional, Set
from typing_extensions import Self

class ManagementServer(BaseModel):
    """
    ManagementServer describes a single BackupDR ManagementServer instance.
    """ # noqa: E501
    create_time: Optional[StrictStr] = Field(default=None, description="Output only. The time when the instance was created.", alias="createTime")
    description: Optional[StrictStr] = Field(default=None, description="Optional. The description of the ManagementServer instance (2048 characters or less).")
    etag: Optional[StrictStr] = Field(default=None, description="Optional. Server specified ETag for the ManagementServer resource to prevent simultaneous updates from overwiting each other.")
    labels: Optional[Dict[str, StrictStr]] = Field(default=None, description="Optional. Resource labels to represent user provided metadata. Labels currently defined: 1. migrate_from_go= If set to true, the MS is created in migration ready mode.")
    management_uri: Optional[ManagementURI] = Field(default=None, alias="managementUri")
    name: Optional[StrictStr] = Field(default=None, description="Output only. Identifier. The resource name.")
    networks: Optional[List[NetworkConfig]] = Field(default=None, description="Required. VPC networks to which the ManagementServer instance is connected. For this version, only a single network is supported.")
    oauth2_client_id: Optional[StrictStr] = Field(default=None, description="Output only. The OAuth 2.0 client id is required to make API calls to the BackupDR instance API of this ManagementServer. This is the value that should be provided in the ‘aud’ field of the OIDC ID Token (see openid specification https://openid.net/specs/openid-connect-core-1_0.html#IDToken).", alias="oauth2ClientId")
    state: Optional[StrictStr] = Field(default=None, description="Output only. The ManagementServer state.")
    type: Optional[StrictStr] = Field(default=None, description="Optional. The type of the ManagementServer resource.")
    update_time: Optional[StrictStr] = Field(default=None, description="Output only. The time when the instance was updated.", alias="updateTime")
    workforce_identity_based_management_uri: Optional[WorkforceIdentityBasedManagementURI] = Field(default=None, alias="workforceIdentityBasedManagementUri")
    workforce_identity_based_oauth2_client_id: Optional[WorkforceIdentityBasedOAuth2ClientID] = Field(default=None, alias="workforceIdentityBasedOauth2ClientId")
    __properties: ClassVar[List[str]] = ["createTime", "description", "etag", "labels", "managementUri", "name", "networks", "oauth2ClientId", "state", "type", "updateTime", "workforceIdentityBasedManagementUri", "workforceIdentityBasedOauth2ClientId"]

    @field_validator('state')
    def state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['INSTANCE_STATE_UNSPECIFIED', 'CREATING', 'READY', 'UPDATING', 'DELETING', 'REPAIRING', 'MAINTENANCE', 'ERROR']):
            raise ValueError("must be one of enum values ('INSTANCE_STATE_UNSPECIFIED', 'CREATING', 'READY', 'UPDATING', 'DELETING', 'REPAIRING', 'MAINTENANCE', 'ERROR')")
        return value

    @field_validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['INSTANCE_TYPE_UNSPECIFIED', 'BACKUP_RESTORE']):
            raise ValueError("must be one of enum values ('INSTANCE_TYPE_UNSPECIFIED', 'BACKUP_RESTORE')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ManagementServer from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "create_time",
            "name",
            "oauth2_client_id",
            "state",
            "update_time",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of management_uri
        if self.management_uri:
            _dict['managementUri'] = self.management_uri.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in networks (list)
        _items = []
        if self.networks:
            for _item_networks in self.networks:
                if _item_networks:
                    _items.append(_item_networks.to_dict())
            _dict['networks'] = _items
        # override the default output from pydantic by calling `to_dict()` of workforce_identity_based_management_uri
        if self.workforce_identity_based_management_uri:
            _dict['workforceIdentityBasedManagementUri'] = self.workforce_identity_based_management_uri.to_dict()
        # override the default output from pydantic by calling `to_dict()` of workforce_identity_based_oauth2_client_id
        if self.workforce_identity_based_oauth2_client_id:
            _dict['workforceIdentityBasedOauth2ClientId'] = self.workforce_identity_based_oauth2_client_id.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ManagementServer from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "createTime": obj.get("createTime"),
            "description": obj.get("description"),
            "etag": obj.get("etag"),
            "labels": obj.get("labels"),
            "managementUri": ManagementURI.from_dict(obj["managementUri"]) if obj.get("managementUri") is not None else None,
            "name": obj.get("name"),
            "networks": [NetworkConfig.from_dict(_item) for _item in obj["networks"]] if obj.get("networks") is not None else None,
            "oauth2ClientId": obj.get("oauth2ClientId"),
            "state": obj.get("state"),
            "type": obj.get("type"),
            "updateTime": obj.get("updateTime"),
            "workforceIdentityBasedManagementUri": WorkforceIdentityBasedManagementURI.from_dict(obj["workforceIdentityBasedManagementUri"]) if obj.get("workforceIdentityBasedManagementUri") is not None else None,
            "workforceIdentityBasedOauth2ClientId": WorkforceIdentityBasedOAuth2ClientID.from_dict(obj["workforceIdentityBasedOauth2ClientId"]) if obj.get("workforceIdentityBasedOauth2ClientId") is not None else None
        })
        return _obj



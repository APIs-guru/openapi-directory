# coding: utf-8

"""
    Traffic Director API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.client_config import ClientConfig

class TestClientConfig(unittest.TestCase):
    """ClientConfig unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> ClientConfig:
        """Test ClientConfig
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `ClientConfig`
        """
        model = ClientConfig()
        if include_optional:
            return ClientConfig(
                node = openapi_client.models.node.Node(
                    build_version = '', 
                    client_features = [
                        ''
                        ], 
                    cluster = '', 
                    extensions = [
                        openapi_client.models.extension.Extension(
                            category = '', 
                            disabled = True, 
                            name = '', 
                            type_descriptor = '', 
                            version = openapi_client.models.build_version.BuildVersion(
                                metadata = {
                                    'key' : null
                                    }, ), )
                        ], 
                    id = '', 
                    listening_addresses = [
                        openapi_client.models.address.Address(
                            pipe = openapi_client.models.pipe.Pipe(
                                mode = 56, 
                                path = '', ), 
                            socket_address = openapi_client.models.socket_address.SocketAddress(
                                address = '', 
                                ipv4_compat = True, 
                                named_port = '', 
                                port_value = 56, 
                                protocol = 'TCP', 
                                resolver_name = '', ), )
                        ], 
                    locality = openapi_client.models.locality.Locality(
                        region = '', 
                        sub_zone = '', 
                        zone = '', ), 
                    metadata = {
                        'key' : null
                        }, 
                    user_agent_build_version = openapi_client.models.build_version.BuildVersion(), 
                    user_agent_name = '', 
                    user_agent_version = '', ),
                xds_config = [
                    openapi_client.models.per_xds_config.PerXdsConfig(
                        cluster_config = openapi_client.models.clusters_config_dump.ClustersConfigDump(
                            dynamic_active_clusters = [
                                openapi_client.models.dynamic_cluster.DynamicCluster(
                                    cluster = {
                                        'key' : null
                                        }, 
                                    last_updated = '', 
                                    version_info = '', )
                                ], 
                            dynamic_warming_clusters = [
                                openapi_client.models.dynamic_cluster.DynamicCluster(
                                    last_updated = '', 
                                    version_info = '', )
                                ], 
                            static_clusters = [
                                openapi_client.models.static_cluster.StaticCluster(
                                    last_updated = '', )
                                ], 
                            version_info = '', ), 
                        listener_config = openapi_client.models.listeners_config_dump.ListenersConfigDump(
                            dynamic_listeners = [
                                openapi_client.models.dynamic_listener.DynamicListener(
                                    active_state = openapi_client.models.dynamic_listener_state.DynamicListenerState(
                                        last_updated = '', 
                                        listener = {
                                            'key' : null
                                            }, 
                                        version_info = '', ), 
                                    draining_state = openapi_client.models.dynamic_listener_state.DynamicListenerState(
                                        last_updated = '', 
                                        version_info = '', ), 
                                    error_state = openapi_client.models.update_failure_state.UpdateFailureState(
                                        details = '', 
                                        failed_configuration = {
                                            'key' : null
                                            }, 
                                        last_update_attempt = '', ), 
                                    name = '', 
                                    warming_state = , )
                                ], 
                            static_listeners = [
                                openapi_client.models.static_listener.StaticListener(
                                    last_updated = '', )
                                ], 
                            version_info = '', ), 
                        route_config = openapi_client.models.routes_config_dump.RoutesConfigDump(
                            dynamic_route_configs = [
                                openapi_client.models.dynamic_route_config.DynamicRouteConfig(
                                    last_updated = '', 
                                    version_info = '', )
                                ], 
                            static_route_configs = [
                                openapi_client.models.static_route_config.StaticRouteConfig(
                                    last_updated = '', )
                                ], ), 
                        scoped_route_config = openapi_client.models.scoped_routes_config_dump.ScopedRoutesConfigDump(
                            dynamic_scoped_route_configs = [
                                openapi_client.models.dynamic_scoped_route_configs.DynamicScopedRouteConfigs(
                                    last_updated = '', 
                                    name = '', 
                                    scoped_route_configs = [
                                        {
                                            'key' : null
                                            }
                                        ], 
                                    version_info = '', )
                                ], 
                            inline_scoped_route_configs = [
                                openapi_client.models.inline_scoped_route_configs.InlineScopedRouteConfigs(
                                    last_updated = '', 
                                    name = '', )
                                ], ), 
                        status = 'UNKNOWN', )
                    ]
            )
        else:
            return ClientConfig(
        )
        """

    def testClientConfig(self):
        """Test ClientConfig"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

# coding: utf-8

"""
    Traffic Director API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.dynamic_scoped_route_configs import DynamicScopedRouteConfigs
from openapi_client.models.inline_scoped_route_configs import InlineScopedRouteConfigs
from typing import Optional, Set
from typing_extensions import Self

class ScopedRoutesConfigDump(BaseModel):
    """
    Envoy's scoped RDS implementation fills this message with all currently loaded route configuration scopes (defined via ScopedRouteConfigurationsSet protos). This message lists both the scopes defined inline with the higher order object (i.e., the HttpConnectionManager) and the dynamically obtained scopes via the SRDS API.
    """ # noqa: E501
    dynamic_scoped_route_configs: Optional[List[DynamicScopedRouteConfigs]] = Field(default=None, description="The dynamically loaded scoped route configs.", alias="dynamicScopedRouteConfigs")
    inline_scoped_route_configs: Optional[List[InlineScopedRouteConfigs]] = Field(default=None, description="The statically loaded scoped route configs.", alias="inlineScopedRouteConfigs")
    __properties: ClassVar[List[str]] = ["dynamicScopedRouteConfigs", "inlineScopedRouteConfigs"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ScopedRoutesConfigDump from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in dynamic_scoped_route_configs (list)
        _items = []
        if self.dynamic_scoped_route_configs:
            for _item_dynamic_scoped_route_configs in self.dynamic_scoped_route_configs:
                if _item_dynamic_scoped_route_configs:
                    _items.append(_item_dynamic_scoped_route_configs.to_dict())
            _dict['dynamicScopedRouteConfigs'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in inline_scoped_route_configs (list)
        _items = []
        if self.inline_scoped_route_configs:
            for _item_inline_scoped_route_configs in self.inline_scoped_route_configs:
                if _item_inline_scoped_route_configs:
                    _items.append(_item_inline_scoped_route_configs.to_dict())
            _dict['inlineScopedRouteConfigs'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ScopedRoutesConfigDump from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "dynamicScopedRouteConfigs": [DynamicScopedRouteConfigs.from_dict(_item) for _item in obj["dynamicScopedRouteConfigs"]] if obj.get("dynamicScopedRouteConfigs") is not None else None,
            "inlineScopedRouteConfigs": [InlineScopedRouteConfigs.from_dict(_item) for _item in obj["inlineScopedRouteConfigs"]] if obj.get("inlineScopedRouteConfigs") is not None else None
        })
        return _obj



# coding: utf-8

"""
    Traffic Director API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.dynamic_route_config import DynamicRouteConfig
from openapi_client.models.static_route_config import StaticRouteConfig
from typing import Optional, Set
from typing_extensions import Self

class RoutesConfigDump(BaseModel):
    """
    Envoy's RDS implementation fills this message with all currently loaded routes, as described by their RouteConfiguration objects. Static routes that are either defined in the bootstrap configuration or defined inline while configuring listeners are separated from those configured dynamically via RDS. Route configuration information can be used to recreate an Envoy configuration by populating all routes as static routes or by returning them in RDS responses.
    """ # noqa: E501
    dynamic_route_configs: Optional[List[DynamicRouteConfig]] = Field(default=None, description="The dynamically loaded route configs.", alias="dynamicRouteConfigs")
    static_route_configs: Optional[List[StaticRouteConfig]] = Field(default=None, description="The statically loaded route configs.", alias="staticRouteConfigs")
    __properties: ClassVar[List[str]] = ["dynamicRouteConfigs", "staticRouteConfigs"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of RoutesConfigDump from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in dynamic_route_configs (list)
        _items = []
        if self.dynamic_route_configs:
            for _item_dynamic_route_configs in self.dynamic_route_configs:
                if _item_dynamic_route_configs:
                    _items.append(_item_dynamic_route_configs.to_dict())
            _dict['dynamicRouteConfigs'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in static_route_configs (list)
        _items = []
        if self.static_route_configs:
            for _item_static_route_configs in self.static_route_configs:
                if _item_static_route_configs:
                    _items.append(_item_static_route_configs.to_dict())
            _dict['staticRouteConfigs'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of RoutesConfigDump from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "dynamicRouteConfigs": [DynamicRouteConfig.from_dict(_item) for _item in obj["dynamicRouteConfigs"]] if obj.get("dynamicRouteConfigs") is not None else None,
            "staticRouteConfigs": [StaticRouteConfig.from_dict(_item) for _item in obj["staticRouteConfigs"]] if obj.get("staticRouteConfigs") is not None else None
        })
        return _obj



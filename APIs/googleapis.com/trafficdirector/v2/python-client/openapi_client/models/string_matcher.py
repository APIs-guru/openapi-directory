# coding: utf-8

"""
    Traffic Director API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.regex_matcher import RegexMatcher
from typing import Optional, Set
from typing_extensions import Self

class StringMatcher(BaseModel):
    """
    Specifies the way to match a string. [#next-free-field: 7]
    """ # noqa: E501
    exact: Optional[StrictStr] = Field(default=None, description="The input string must match exactly the string specified here. Examples: * *abc* only matches the value *abc*.")
    ignore_case: Optional[StrictBool] = Field(default=None, description="If true, indicates the exact/prefix/suffix matching should be case insensitive. This has no effect for the safe_regex match. For example, the matcher *data* will match both input string *Data* and *data* if set to true.", alias="ignoreCase")
    prefix: Optional[StrictStr] = Field(default=None, description="The input string must have the prefix specified here. Note: empty prefix is not allowed, please use regex instead. Examples: * *abc* matches the value *abc.xyz*")
    regex: Optional[StrictStr] = Field(default=None, description="The input string must match the regular expression specified here. The regex grammar is defined `here `_. Examples: * The regex ``\\d{3}`` matches the value *123* * The regex ``\\d{3}`` does not match the value *1234* * The regex ``\\d{3}`` does not match the value *123.456* .. attention:: This field has been deprecated in favor of `safe_regex` as it is not safe for use with untrusted input in all cases.")
    safe_regex: Optional[RegexMatcher] = Field(default=None, alias="safeRegex")
    suffix: Optional[StrictStr] = Field(default=None, description="The input string must have the suffix specified here. Note: empty prefix is not allowed, please use regex instead. Examples: * *abc* matches the value *xyz.abc*")
    __properties: ClassVar[List[str]] = ["exact", "ignoreCase", "prefix", "regex", "safeRegex", "suffix"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of StringMatcher from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of safe_regex
        if self.safe_regex:
            _dict['safeRegex'] = self.safe_regex.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of StringMatcher from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "exact": obj.get("exact"),
            "ignoreCase": obj.get("ignoreCase"),
            "prefix": obj.get("prefix"),
            "regex": obj.get("regex"),
            "safeRegex": RegexMatcher.from_dict(obj["safeRegex"]) if obj.get("safeRegex") is not None else None,
            "suffix": obj.get("suffix")
        })
        return _obj



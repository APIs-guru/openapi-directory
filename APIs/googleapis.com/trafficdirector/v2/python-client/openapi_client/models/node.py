# coding: utf-8

"""
    Traffic Director API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.address import Address
from openapi_client.models.build_version import BuildVersion
from openapi_client.models.extension import Extension
from openapi_client.models.locality import Locality
from typing import Optional, Set
from typing_extensions import Self

class Node(BaseModel):
    """
    Identifies a specific Envoy instance. The node identifier is presented to the management server, which may use this identifier to distinguish per Envoy configuration for serving. [#next-free-field: 12]
    """ # noqa: E501
    build_version: Optional[StrictStr] = Field(default=None, description="This is motivated by informing a management server during canary which version of Envoy is being tested in a heterogeneous fleet. This will be set by Envoy in management server RPCs. This field is deprecated in favor of the user_agent_name and user_agent_version values.", alias="buildVersion")
    client_features: Optional[List[StrictStr]] = Field(default=None, description="Client feature support list. These are well known features described in the Envoy API repository for a given major version of an API. Client features use reverse DNS naming scheme, for example `com.acme.feature`. See :ref:`the list of features ` that xDS client may support.", alias="clientFeatures")
    cluster: Optional[StrictStr] = Field(default=None, description="Defines the local service cluster name where Envoy is running. Though optional, it should be set if any of the following features are used: :ref:`statsd `, :ref:`health check cluster verification `, :ref:`runtime override directory `, :ref:`user agent addition `, :ref:`HTTP global rate limiting `, :ref:`CDS `, and :ref:`HTTP tracing `, either in this message or via :option:`--service-cluster`.")
    extensions: Optional[List[Extension]] = Field(default=None, description="List of extensions and their versions supported by the node.")
    id: Optional[StrictStr] = Field(default=None, description="An opaque node identifier for the Envoy node. This also provides the local service node name. It should be set if any of the following features are used: :ref:`statsd `, :ref:`CDS `, and :ref:`HTTP tracing `, either in this message or via :option:`--service-node`.")
    listening_addresses: Optional[List[Address]] = Field(default=None, description="Known listening ports on the node as a generic hint to the management server for filtering :ref:`listeners ` to be returned. For example, if there is a listener bound to port 80, the list can optionally contain the SocketAddress `(0.0.0.0,80)`. The field is optional and just a hint.", alias="listeningAddresses")
    locality: Optional[Locality] = None
    metadata: Optional[Dict[str, Any]] = Field(default=None, description="Opaque metadata extending the node identifier. Envoy will pass this directly to the management server.")
    user_agent_build_version: Optional[BuildVersion] = Field(default=None, alias="userAgentBuildVersion")
    user_agent_name: Optional[StrictStr] = Field(default=None, description="Free-form string that identifies the entity requesting config. E.g. \"envoy\" or \"grpc\"", alias="userAgentName")
    user_agent_version: Optional[StrictStr] = Field(default=None, description="Free-form string that identifies the version of the entity requesting config. E.g. \"1.12.2\" or \"abcd1234\", or \"SpecialEnvoyBuild\"", alias="userAgentVersion")
    __properties: ClassVar[List[str]] = ["buildVersion", "clientFeatures", "cluster", "extensions", "id", "listeningAddresses", "locality", "metadata", "userAgentBuildVersion", "userAgentName", "userAgentVersion"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Node from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in extensions (list)
        _items = []
        if self.extensions:
            for _item_extensions in self.extensions:
                if _item_extensions:
                    _items.append(_item_extensions.to_dict())
            _dict['extensions'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in listening_addresses (list)
        _items = []
        if self.listening_addresses:
            for _item_listening_addresses in self.listening_addresses:
                if _item_listening_addresses:
                    _items.append(_item_listening_addresses.to_dict())
            _dict['listeningAddresses'] = _items
        # override the default output from pydantic by calling `to_dict()` of locality
        if self.locality:
            _dict['locality'] = self.locality.to_dict()
        # override the default output from pydantic by calling `to_dict()` of user_agent_build_version
        if self.user_agent_build_version:
            _dict['userAgentBuildVersion'] = self.user_agent_build_version.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Node from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "buildVersion": obj.get("buildVersion"),
            "clientFeatures": obj.get("clientFeatures"),
            "cluster": obj.get("cluster"),
            "extensions": [Extension.from_dict(_item) for _item in obj["extensions"]] if obj.get("extensions") is not None else None,
            "id": obj.get("id"),
            "listeningAddresses": [Address.from_dict(_item) for _item in obj["listeningAddresses"]] if obj.get("listeningAddresses") is not None else None,
            "locality": Locality.from_dict(obj["locality"]) if obj.get("locality") is not None else None,
            "metadata": obj.get("metadata"),
            "userAgentBuildVersion": BuildVersion.from_dict(obj["userAgentBuildVersion"]) if obj.get("userAgentBuildVersion") is not None else None,
            "userAgentName": obj.get("userAgentName"),
            "userAgentVersion": obj.get("userAgentVersion")
        })
        return _obj



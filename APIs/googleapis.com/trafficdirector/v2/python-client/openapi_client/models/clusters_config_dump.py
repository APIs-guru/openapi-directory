# coding: utf-8

"""
    Traffic Director API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.dynamic_cluster import DynamicCluster
from openapi_client.models.static_cluster import StaticCluster
from typing import Optional, Set
from typing_extensions import Self

class ClustersConfigDump(BaseModel):
    """
    Envoy's cluster manager fills this message with all currently known clusters. Cluster configuration information can be used to recreate an Envoy configuration by populating all clusters as static clusters or by returning them in a CDS response.
    """ # noqa: E501
    dynamic_active_clusters: Optional[List[DynamicCluster]] = Field(default=None, description="The dynamically loaded active clusters. These are clusters that are available to service data plane traffic.", alias="dynamicActiveClusters")
    dynamic_warming_clusters: Optional[List[DynamicCluster]] = Field(default=None, description="The dynamically loaded warming clusters. These are clusters that are currently undergoing warming in preparation to service data plane traffic. Note that if attempting to recreate an Envoy configuration from a configuration dump, the warming clusters should generally be discarded.", alias="dynamicWarmingClusters")
    static_clusters: Optional[List[StaticCluster]] = Field(default=None, description="The statically loaded cluster configs.", alias="staticClusters")
    version_info: Optional[StrictStr] = Field(default=None, description="This is the :ref:`version_info ` in the last processed CDS discovery response. If there are only static bootstrap clusters, this field will be \"\".", alias="versionInfo")
    __properties: ClassVar[List[str]] = ["dynamicActiveClusters", "dynamicWarmingClusters", "staticClusters", "versionInfo"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ClustersConfigDump from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in dynamic_active_clusters (list)
        _items = []
        if self.dynamic_active_clusters:
            for _item_dynamic_active_clusters in self.dynamic_active_clusters:
                if _item_dynamic_active_clusters:
                    _items.append(_item_dynamic_active_clusters.to_dict())
            _dict['dynamicActiveClusters'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in dynamic_warming_clusters (list)
        _items = []
        if self.dynamic_warming_clusters:
            for _item_dynamic_warming_clusters in self.dynamic_warming_clusters:
                if _item_dynamic_warming_clusters:
                    _items.append(_item_dynamic_warming_clusters.to_dict())
            _dict['dynamicWarmingClusters'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in static_clusters (list)
        _items = []
        if self.static_clusters:
            for _item_static_clusters in self.static_clusters:
                if _item_static_clusters:
                    _items.append(_item_static_clusters.to_dict())
            _dict['staticClusters'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ClustersConfigDump from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "dynamicActiveClusters": [DynamicCluster.from_dict(_item) for _item in obj["dynamicActiveClusters"]] if obj.get("dynamicActiveClusters") is not None else None,
            "dynamicWarmingClusters": [DynamicCluster.from_dict(_item) for _item in obj["dynamicWarmingClusters"]] if obj.get("dynamicWarmingClusters") is not None else None,
            "staticClusters": [StaticCluster.from_dict(_item) for _item in obj["staticClusters"]] if obj.get("staticClusters") is not None else None,
            "versionInfo": obj.get("versionInfo")
        })
        return _obj



# coding: utf-8

"""
    Traffic Director API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.generic_xds_config import GenericXdsConfig
from openapi_client.models.node import Node
from openapi_client.models.per_xds_config import PerXdsConfig
from typing import Optional, Set
from typing_extensions import Self

class ClientConfig(BaseModel):
    """
    All xds configs for a particular client.
    """ # noqa: E501
    client_scope: Optional[StrictStr] = Field(default=None, description="For xDS clients, the scope in which the data is used. For example, gRPC indicates the data plane target or that the data is associated with gRPC server(s).", alias="clientScope")
    generic_xds_configs: Optional[List[GenericXdsConfig]] = Field(default=None, description="Represents generic xDS config and the exact config structure depends on the type URL (like Cluster if it is CDS)", alias="genericXdsConfigs")
    node: Optional[Node] = None
    xds_config: Optional[List[PerXdsConfig]] = Field(default=None, description="This field is deprecated in favor of generic_xds_configs which is much simpler and uniform in structure.", alias="xdsConfig")
    __properties: ClassVar[List[str]] = ["clientScope", "genericXdsConfigs", "node", "xdsConfig"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ClientConfig from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in generic_xds_configs (list)
        _items = []
        if self.generic_xds_configs:
            for _item_generic_xds_configs in self.generic_xds_configs:
                if _item_generic_xds_configs:
                    _items.append(_item_generic_xds_configs.to_dict())
            _dict['genericXdsConfigs'] = _items
        # override the default output from pydantic by calling `to_dict()` of node
        if self.node:
            _dict['node'] = self.node.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in xds_config (list)
        _items = []
        if self.xds_config:
            for _item_xds_config in self.xds_config:
                if _item_xds_config:
                    _items.append(_item_xds_config.to_dict())
            _dict['xdsConfig'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ClientConfig from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "clientScope": obj.get("clientScope"),
            "genericXdsConfigs": [GenericXdsConfig.from_dict(_item) for _item in obj["genericXdsConfigs"]] if obj.get("genericXdsConfigs") is not None else None,
            "node": Node.from_dict(obj["node"]) if obj.get("node") is not None else None,
            "xdsConfig": [PerXdsConfig.from_dict(_item) for _item in obj["xdsConfig"]] if obj.get("xdsConfig") is not None else None
        })
        return _obj



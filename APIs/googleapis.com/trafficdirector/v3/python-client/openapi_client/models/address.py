# coding: utf-8

"""
    Traffic Director API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.envoy_internal_address import EnvoyInternalAddress
from openapi_client.models.pipe import Pipe
from openapi_client.models.socket_address import SocketAddress
from typing import Optional, Set
from typing_extensions import Self

class Address(BaseModel):
    """
    Addresses specify either a logical or physical address and port, which are used to tell Envoy where to bind/listen, connect to upstream and find management servers.
    """ # noqa: E501
    envoy_internal_address: Optional[EnvoyInternalAddress] = Field(default=None, alias="envoyInternalAddress")
    pipe: Optional[Pipe] = None
    socket_address: Optional[SocketAddress] = Field(default=None, alias="socketAddress")
    __properties: ClassVar[List[str]] = ["envoyInternalAddress", "pipe", "socketAddress"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Address from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of envoy_internal_address
        if self.envoy_internal_address:
            _dict['envoyInternalAddress'] = self.envoy_internal_address.to_dict()
        # override the default output from pydantic by calling `to_dict()` of pipe
        if self.pipe:
            _dict['pipe'] = self.pipe.to_dict()
        # override the default output from pydantic by calling `to_dict()` of socket_address
        if self.socket_address:
            _dict['socketAddress'] = self.socket_address.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Address from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "envoyInternalAddress": EnvoyInternalAddress.from_dict(obj["envoyInternalAddress"]) if obj.get("envoyInternalAddress") is not None else None,
            "pipe": Pipe.from_dict(obj["pipe"]) if obj.get("pipe") is not None else None,
            "socketAddress": SocketAddress.from_dict(obj["socketAddress"]) if obj.get("socketAddress") is not None else None
        })
        return _obj



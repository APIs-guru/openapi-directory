# coding: utf-8

"""
    Traffic Director API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.build_version import BuildVersion
from typing import Optional, Set
from typing_extensions import Self

class Extension(BaseModel):
    """
    Version and identification for an Envoy extension. [#next-free-field: 7]
    """ # noqa: E501
    category: Optional[StrictStr] = Field(default=None, description="Category of the extension. Extension category names use reverse DNS notation. For instance \"envoy.filters.listener\" for Envoy's built-in listener filters or \"com.acme.filters.http\" for HTTP filters from acme.com vendor. [#comment:")
    disabled: Optional[StrictBool] = Field(default=None, description="Indicates that the extension is present but was disabled via dynamic configuration.")
    name: Optional[StrictStr] = Field(default=None, description="This is the name of the Envoy filter as specified in the Envoy configuration, e.g. envoy.filters.http.router, com.acme.widget.")
    type_descriptor: Optional[StrictStr] = Field(default=None, description="[#not-implemented-hide:] Type descriptor of extension configuration proto. [#comment:", alias="typeDescriptor")
    type_urls: Optional[List[StrictStr]] = Field(default=None, description="Type URLs of extension configuration protos.", alias="typeUrls")
    version: Optional[BuildVersion] = None
    __properties: ClassVar[List[str]] = ["category", "disabled", "name", "typeDescriptor", "typeUrls", "version"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Extension from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of version
        if self.version:
            _dict['version'] = self.version.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Extension from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "category": obj.get("category"),
            "disabled": obj.get("disabled"),
            "name": obj.get("name"),
            "typeDescriptor": obj.get("typeDescriptor"),
            "typeUrls": obj.get("typeUrls"),
            "version": BuildVersion.from_dict(obj["version"]) if obj.get("version") is not None else None
        })
        return _obj



# coding: utf-8

"""
    Traffic Director API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.dynamic_listener import DynamicListener
from openapi_client.models.static_listener import StaticListener
from typing import Optional, Set
from typing_extensions import Self

class ListenersConfigDump(BaseModel):
    """
    Envoy's listener manager fills this message with all currently known listeners. Listener configuration information can be used to recreate an Envoy configuration by populating all listeners as static listeners or by returning them in a LDS response.
    """ # noqa: E501
    dynamic_listeners: Optional[List[DynamicListener]] = Field(default=None, description="State for any warming, active, or draining listeners.", alias="dynamicListeners")
    static_listeners: Optional[List[StaticListener]] = Field(default=None, description="The statically loaded listener configs.", alias="staticListeners")
    version_info: Optional[StrictStr] = Field(default=None, description="This is the :ref:`version_info ` in the last processed LDS discovery response. If there are only static bootstrap listeners, this field will be \"\".", alias="versionInfo")
    __properties: ClassVar[List[str]] = ["dynamicListeners", "staticListeners", "versionInfo"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ListenersConfigDump from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in dynamic_listeners (list)
        _items = []
        if self.dynamic_listeners:
            for _item_dynamic_listeners in self.dynamic_listeners:
                if _item_dynamic_listeners:
                    _items.append(_item_dynamic_listeners.to_dict())
            _dict['dynamicListeners'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in static_listeners (list)
        _items = []
        if self.static_listeners:
            for _item_static_listeners in self.static_listeners:
                if _item_static_listeners:
                    _items.append(_item_static_listeners.to_dict())
            _dict['staticListeners'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ListenersConfigDump from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "dynamicListeners": [DynamicListener.from_dict(_item) for _item in obj["dynamicListeners"]] if obj.get("dynamicListeners") is not None else None,
            "staticListeners": [StaticListener.from_dict(_item) for _item in obj["staticListeners"]] if obj.get("staticListeners") is not None else None,
            "versionInfo": obj.get("versionInfo")
        })
        return _obj



# coding: utf-8

"""
    Traffic Director API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.clusters_config_dump import ClustersConfigDump
from openapi_client.models.endpoints_config_dump import EndpointsConfigDump
from openapi_client.models.listeners_config_dump import ListenersConfigDump
from openapi_client.models.routes_config_dump import RoutesConfigDump
from openapi_client.models.scoped_routes_config_dump import ScopedRoutesConfigDump
from typing import Optional, Set
from typing_extensions import Self

class PerXdsConfig(BaseModel):
    """
    Detailed config (per xDS) with status. [#next-free-field: 8]
    """ # noqa: E501
    client_status: Optional[StrictStr] = Field(default=None, description="Client config status is populated by xDS clients. Will not be present if the CSDS server is an xDS server. No matter what the client config status is, xDS clients should always dump the most recent accepted xDS config. .. attention:: This field is deprecated. Use :ref:`ClientResourceStatus ` for per-resource config status instead.", alias="clientStatus")
    cluster_config: Optional[ClustersConfigDump] = Field(default=None, alias="clusterConfig")
    endpoint_config: Optional[EndpointsConfigDump] = Field(default=None, alias="endpointConfig")
    listener_config: Optional[ListenersConfigDump] = Field(default=None, alias="listenerConfig")
    route_config: Optional[RoutesConfigDump] = Field(default=None, alias="routeConfig")
    scoped_route_config: Optional[ScopedRoutesConfigDump] = Field(default=None, alias="scopedRouteConfig")
    status: Optional[StrictStr] = Field(default=None, description="Config status generated by management servers. Will not be present if the CSDS server is an xDS client.")
    __properties: ClassVar[List[str]] = ["clientStatus", "clusterConfig", "endpointConfig", "listenerConfig", "routeConfig", "scopedRouteConfig", "status"]

    @field_validator('client_status')
    def client_status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['CLIENT_UNKNOWN', 'CLIENT_REQUESTED', 'CLIENT_ACKED', 'CLIENT_NACKED']):
            raise ValueError("must be one of enum values ('CLIENT_UNKNOWN', 'CLIENT_REQUESTED', 'CLIENT_ACKED', 'CLIENT_NACKED')")
        return value

    @field_validator('status')
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['UNKNOWN', 'SYNCED', 'NOT_SENT', 'STALE', 'ERROR']):
            raise ValueError("must be one of enum values ('UNKNOWN', 'SYNCED', 'NOT_SENT', 'STALE', 'ERROR')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PerXdsConfig from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of cluster_config
        if self.cluster_config:
            _dict['clusterConfig'] = self.cluster_config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of endpoint_config
        if self.endpoint_config:
            _dict['endpointConfig'] = self.endpoint_config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of listener_config
        if self.listener_config:
            _dict['listenerConfig'] = self.listener_config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of route_config
        if self.route_config:
            _dict['routeConfig'] = self.route_config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of scoped_route_config
        if self.scoped_route_config:
            _dict['scopedRouteConfig'] = self.scoped_route_config.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PerXdsConfig from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "clientStatus": obj.get("clientStatus"),
            "clusterConfig": ClustersConfigDump.from_dict(obj["clusterConfig"]) if obj.get("clusterConfig") is not None else None,
            "endpointConfig": EndpointsConfigDump.from_dict(obj["endpointConfig"]) if obj.get("endpointConfig") is not None else None,
            "listenerConfig": ListenersConfigDump.from_dict(obj["listenerConfig"]) if obj.get("listenerConfig") is not None else None,
            "routeConfig": RoutesConfigDump.from_dict(obj["routeConfig"]) if obj.get("routeConfig") is not None else None,
            "scopedRouteConfig": ScopedRoutesConfigDump.from_dict(obj["scopedRouteConfig"]) if obj.get("scopedRouteConfig") is not None else None,
            "status": obj.get("status")
        })
        return _obj



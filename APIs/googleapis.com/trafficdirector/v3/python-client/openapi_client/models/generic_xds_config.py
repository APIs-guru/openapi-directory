# coding: utf-8

"""
    Traffic Director API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.update_failure_state import UpdateFailureState
from typing import Optional, Set
from typing_extensions import Self

class GenericXdsConfig(BaseModel):
    """
    GenericXdsConfig is used to specify the config status and the dump of any xDS resource identified by their type URL. It is the generalized version of the now deprecated ListenersConfigDump, ClustersConfigDump etc [#next-free-field: 10]
    """ # noqa: E501
    client_status: Optional[StrictStr] = Field(default=None, description="Per xDS resource status from the view of a xDS client", alias="clientStatus")
    config_status: Optional[StrictStr] = Field(default=None, description="Per xDS resource config status. It is generated by management servers. It will not be present if the CSDS server is an xDS client.", alias="configStatus")
    error_state: Optional[UpdateFailureState] = Field(default=None, alias="errorState")
    is_static_resource: Optional[StrictBool] = Field(default=None, description="Is static resource is true if it is specified in the config supplied through the file at the startup.", alias="isStaticResource")
    last_updated: Optional[StrictStr] = Field(default=None, description="Timestamp when the xDS resource was last updated", alias="lastUpdated")
    name: Optional[StrictStr] = Field(default=None, description="Name of the xDS resource")
    type_url: Optional[StrictStr] = Field(default=None, description="Type_url represents the fully qualified name of xDS resource type like envoy.v3.Cluster, envoy.v3.ClusterLoadAssignment etc.", alias="typeUrl")
    version_info: Optional[StrictStr] = Field(default=None, description="This is the :ref:`version_info ` in the last processed xDS discovery response. If there are only static bootstrap listeners, this field will be \"\"", alias="versionInfo")
    xds_config: Optional[Dict[str, Any]] = Field(default=None, description="The xDS resource config. Actual content depends on the type", alias="xdsConfig")
    __properties: ClassVar[List[str]] = ["clientStatus", "configStatus", "errorState", "isStaticResource", "lastUpdated", "name", "typeUrl", "versionInfo", "xdsConfig"]

    @field_validator('client_status')
    def client_status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['UNKNOWN', 'REQUESTED', 'DOES_NOT_EXIST', 'ACKED', 'NACKED']):
            raise ValueError("must be one of enum values ('UNKNOWN', 'REQUESTED', 'DOES_NOT_EXIST', 'ACKED', 'NACKED')")
        return value

    @field_validator('config_status')
    def config_status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['UNKNOWN', 'SYNCED', 'NOT_SENT', 'STALE', 'ERROR']):
            raise ValueError("must be one of enum values ('UNKNOWN', 'SYNCED', 'NOT_SENT', 'STALE', 'ERROR')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GenericXdsConfig from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of error_state
        if self.error_state:
            _dict['errorState'] = self.error_state.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GenericXdsConfig from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "clientStatus": obj.get("clientStatus"),
            "configStatus": obj.get("configStatus"),
            "errorState": UpdateFailureState.from_dict(obj["errorState"]) if obj.get("errorState") is not None else None,
            "isStaticResource": obj.get("isStaticResource"),
            "lastUpdated": obj.get("lastUpdated"),
            "name": obj.get("name"),
            "typeUrl": obj.get("typeUrl"),
            "versionInfo": obj.get("versionInfo"),
            "xdsConfig": obj.get("xdsConfig")
        })
        return _obj



# coding: utf-8

"""
    Traffic Director API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.double_matcher import DoubleMatcher
from openapi_client.models.string_matcher import StringMatcher
from typing import Optional, Set
from typing_extensions import Self

class ValueMatcher(BaseModel):
    """
    Specifies the way to match a ProtobufWkt::Value. Primitive values and ListValue are supported. StructValue is not supported and is always not matched. [#next-free-field: 8]
    """ # noqa: E501
    bool_match: Optional[StrictBool] = Field(default=None, description="If specified, a match occurs if and only if the target value is a bool value and is equal to this field.", alias="boolMatch")
    double_match: Optional[DoubleMatcher] = Field(default=None, alias="doubleMatch")
    list_match: Optional[ListMatcher] = Field(default=None, alias="listMatch")
    null_match: Optional[Dict[str, Any]] = Field(default=None, description="NullMatch is an empty message to specify a null value.", alias="nullMatch")
    or_match: Optional[OrMatcher] = Field(default=None, alias="orMatch")
    present_match: Optional[StrictBool] = Field(default=None, description="If specified, value match will be performed based on whether the path is referring to a valid primitive value in the metadata. If the path is referring to a non-primitive value, the result is always not matched.", alias="presentMatch")
    string_match: Optional[StringMatcher] = Field(default=None, alias="stringMatch")
    __properties: ClassVar[List[str]] = ["boolMatch", "doubleMatch", "listMatch", "nullMatch", "orMatch", "presentMatch", "stringMatch"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ValueMatcher from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of double_match
        if self.double_match:
            _dict['doubleMatch'] = self.double_match.to_dict()
        # override the default output from pydantic by calling `to_dict()` of list_match
        if self.list_match:
            _dict['listMatch'] = self.list_match.to_dict()
        # override the default output from pydantic by calling `to_dict()` of or_match
        if self.or_match:
            _dict['orMatch'] = self.or_match.to_dict()
        # override the default output from pydantic by calling `to_dict()` of string_match
        if self.string_match:
            _dict['stringMatch'] = self.string_match.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ValueMatcher from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "boolMatch": obj.get("boolMatch"),
            "doubleMatch": DoubleMatcher.from_dict(obj["doubleMatch"]) if obj.get("doubleMatch") is not None else None,
            "listMatch": ListMatcher.from_dict(obj["listMatch"]) if obj.get("listMatch") is not None else None,
            "nullMatch": obj.get("nullMatch"),
            "orMatch": OrMatcher.from_dict(obj["orMatch"]) if obj.get("orMatch") is not None else None,
            "presentMatch": obj.get("presentMatch"),
            "stringMatch": StringMatcher.from_dict(obj["stringMatch"]) if obj.get("stringMatch") is not None else None
        })
        return _obj

from openapi_client.models.list_matcher import ListMatcher
from openapi_client.models.or_matcher import OrMatcher
# TODO: Rewrite to not use raise_errors
ValueMatcher.model_rebuild(raise_errors=False)


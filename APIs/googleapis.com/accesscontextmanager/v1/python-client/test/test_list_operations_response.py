# coding: utf-8

"""
    Access Context Manager API

    An API for setting attribute based access control to requests to Google Cloud services. *Warning:* Do not mix *v1alpha* and *v1* API usage in the same access policy. The v1alpha API supports new Access Context Manager features, which may have different attributes or behaviors that are not supported by v1. The practice of mixed API usage within a policy may result in the inability to update that policy, including any access levels or service perimeters belonging to it. It is not recommended to use both v1 and v1alpha for modifying policies with critical service perimeters. Modifications using v1alpha should be limited to policies with non-production/non-critical service perimeters.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.list_operations_response import ListOperationsResponse

class TestListOperationsResponse(unittest.TestCase):
    """ListOperationsResponse unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> ListOperationsResponse:
        """Test ListOperationsResponse
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `ListOperationsResponse`
        """
        model = ListOperationsResponse()
        if include_optional:
            return ListOperationsResponse(
                next_page_token = '',
                operations = [
                    openapi_client.models.operation.Operation(
                        done = True, 
                        error = openapi_client.models.status.Status(
                            code = 56, 
                            details = [
                                {
                                    'key' : null
                                    }
                                ], 
                            message = '', ), 
                        metadata = {
                            'key' : null
                            }, 
                        name = '', 
                        response = {
                            'key' : null
                            }, )
                    ]
            )
        else:
            return ListOperationsResponse(
        )
        """

    def testListOperationsResponse(self):
        """Test ListOperationsResponse"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

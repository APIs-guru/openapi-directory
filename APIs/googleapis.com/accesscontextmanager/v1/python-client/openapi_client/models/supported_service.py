# coding: utf-8

"""
    Access Context Manager API

    An API for setting attribute based access control to requests to Google Cloud services. *Warning:* Do not mix *v1alpha* and *v1* API usage in the same access policy. The v1alpha API supports new Access Context Manager features, which may have different attributes or behaviors that are not supported by v1. The practice of mixed API usage within a policy may result in the inability to update that policy, including any access levels or service perimeters belonging to it. It is not recommended to use both v1 and v1alpha for modifying policies with critical service perimeters. Modifications using v1alpha should be limited to policies with non-production/non-critical service perimeters.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.method_selector import MethodSelector
from typing import Optional, Set
from typing_extensions import Self

class SupportedService(BaseModel):
    """
    `SupportedService` specifies the VPC Service Controls and its properties.
    """ # noqa: E501
    available_on_restricted_vip: Optional[StrictBool] = Field(default=None, description="True if the service is available on the restricted VIP. Services on the restricted VIP typically either support VPC Service Controls or are core infrastructure services required for the functioning of Google Cloud.", alias="availableOnRestrictedVip")
    known_limitations: Optional[StrictBool] = Field(default=None, description="True if the service is supported with some limitations. Check [documentation](https://cloud.google.com/vpc-service-controls/docs/supported-products) for details.", alias="knownLimitations")
    name: Optional[StrictStr] = Field(default=None, description="The service name or address of the supported service, such as `service.googleapis.com`.")
    support_stage: Optional[StrictStr] = Field(default=None, description="The support stage of the service.", alias="supportStage")
    supported_methods: Optional[List[MethodSelector]] = Field(default=None, description="The list of the supported methods. This field exists only in response to GetSupportedService", alias="supportedMethods")
    title: Optional[StrictStr] = Field(default=None, description="The name of the supported product, such as 'Cloud Product API'.")
    __properties: ClassVar[List[str]] = ["availableOnRestrictedVip", "knownLimitations", "name", "supportStage", "supportedMethods", "title"]

    @field_validator('support_stage')
    def support_stage_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['LAUNCH_STAGE_UNSPECIFIED', 'UNIMPLEMENTED', 'PRELAUNCH', 'EARLY_ACCESS', 'ALPHA', 'BETA', 'GA', 'DEPRECATED']):
            raise ValueError("must be one of enum values ('LAUNCH_STAGE_UNSPECIFIED', 'UNIMPLEMENTED', 'PRELAUNCH', 'EARLY_ACCESS', 'ALPHA', 'BETA', 'GA', 'DEPRECATED')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SupportedService from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in supported_methods (list)
        _items = []
        if self.supported_methods:
            for _item_supported_methods in self.supported_methods:
                if _item_supported_methods:
                    _items.append(_item_supported_methods.to_dict())
            _dict['supportedMethods'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SupportedService from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "availableOnRestrictedVip": obj.get("availableOnRestrictedVip"),
            "knownLimitations": obj.get("knownLimitations"),
            "name": obj.get("name"),
            "supportStage": obj.get("supportStage"),
            "supportedMethods": [MethodSelector.from_dict(_item) for _item in obj["supportedMethods"]] if obj.get("supportedMethods") is not None else None,
            "title": obj.get("title")
        })
        return _obj



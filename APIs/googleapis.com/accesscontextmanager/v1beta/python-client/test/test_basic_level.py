# coding: utf-8

"""
    Access Context Manager API

    An API for setting attribute based access control to requests to Google Cloud services.

    The version of the OpenAPI document: v1beta
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.basic_level import BasicLevel

class TestBasicLevel(unittest.TestCase):
    """BasicLevel unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> BasicLevel:
        """Test BasicLevel
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `BasicLevel`
        """
        model = BasicLevel()
        if include_optional:
            return BasicLevel(
                combining_function = 'AND',
                conditions = [
                    openapi_client.models.condition.Condition(
                        device_policy = openapi_client.models.device_policy.DevicePolicy(
                            allowed_device_management_levels = [
                                'MANAGEMENT_UNSPECIFIED'
                                ], 
                            allowed_encryption_statuses = [
                                'ENCRYPTION_UNSPECIFIED'
                                ], 
                            os_constraints = [
                                openapi_client.models.os_constraint.OsConstraint(
                                    minimum_version = '', 
                                    os_type = 'OS_UNSPECIFIED', 
                                    require_verified_chrome_os = True, )
                                ], 
                            require_admin_approval = True, 
                            require_corp_owned = True, 
                            require_screenlock = True, ), 
                        ip_subnetworks = [
                            ''
                            ], 
                        members = [
                            ''
                            ], 
                        negate = True, 
                        regions = [
                            ''
                            ], 
                        required_access_levels = [
                            ''
                            ], )
                    ]
            )
        else:
            return BasicLevel(
        )
        """

    def testBasicLevel(self):
        """Test BasicLevel"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

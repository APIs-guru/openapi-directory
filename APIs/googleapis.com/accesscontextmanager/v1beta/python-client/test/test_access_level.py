# coding: utf-8

"""
    Access Context Manager API

    An API for setting attribute based access control to requests to Google Cloud services.

    The version of the OpenAPI document: v1beta
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.access_level import AccessLevel

class TestAccessLevel(unittest.TestCase):
    """AccessLevel unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> AccessLevel:
        """Test AccessLevel
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `AccessLevel`
        """
        model = AccessLevel()
        if include_optional:
            return AccessLevel(
                basic = openapi_client.models.basic_level.BasicLevel(
                    combining_function = 'AND', 
                    conditions = [
                        openapi_client.models.condition.Condition(
                            device_policy = openapi_client.models.device_policy.DevicePolicy(
                                allowed_device_management_levels = [
                                    'MANAGEMENT_UNSPECIFIED'
                                    ], 
                                allowed_encryption_statuses = [
                                    'ENCRYPTION_UNSPECIFIED'
                                    ], 
                                os_constraints = [
                                    openapi_client.models.os_constraint.OsConstraint(
                                        minimum_version = '', 
                                        os_type = 'OS_UNSPECIFIED', 
                                        require_verified_chrome_os = True, )
                                    ], 
                                require_admin_approval = True, 
                                require_corp_owned = True, 
                                require_screenlock = True, ), 
                            ip_subnetworks = [
                                ''
                                ], 
                            members = [
                                ''
                                ], 
                            negate = True, 
                            regions = [
                                ''
                                ], 
                            required_access_levels = [
                                ''
                                ], )
                        ], ),
                custom = openapi_client.models.custom_level.CustomLevel(
                    expr = openapi_client.models.expr.Expr(
                        description = '', 
                        expression = '', 
                        location = '', 
                        title = '', ), ),
                description = '',
                name = '',
                title = ''
            )
        else:
            return AccessLevel(
        )
        """

    def testAccessLevel(self):
        """Test AccessLevel"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

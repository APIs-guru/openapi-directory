# coding: utf-8

"""
    Access Context Manager API

    An API for setting attribute based access control to requests to Google Cloud services.

    The version of the OpenAPI document: v1beta
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.list_access_levels_response import ListAccessLevelsResponse

class TestListAccessLevelsResponse(unittest.TestCase):
    """ListAccessLevelsResponse unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> ListAccessLevelsResponse:
        """Test ListAccessLevelsResponse
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `ListAccessLevelsResponse`
        """
        model = ListAccessLevelsResponse()
        if include_optional:
            return ListAccessLevelsResponse(
                access_levels = [
                    openapi_client.models.access_level.AccessLevel(
                        basic = openapi_client.models.basic_level.BasicLevel(
                            combining_function = 'AND', 
                            conditions = [
                                openapi_client.models.condition.Condition(
                                    device_policy = openapi_client.models.device_policy.DevicePolicy(
                                        allowed_device_management_levels = [
                                            'MANAGEMENT_UNSPECIFIED'
                                            ], 
                                        allowed_encryption_statuses = [
                                            'ENCRYPTION_UNSPECIFIED'
                                            ], 
                                        os_constraints = [
                                            openapi_client.models.os_constraint.OsConstraint(
                                                minimum_version = '', 
                                                os_type = 'OS_UNSPECIFIED', 
                                                require_verified_chrome_os = True, )
                                            ], 
                                        require_admin_approval = True, 
                                        require_corp_owned = True, 
                                        require_screenlock = True, ), 
                                    ip_subnetworks = [
                                        ''
                                        ], 
                                    members = [
                                        ''
                                        ], 
                                    negate = True, 
                                    regions = [
                                        ''
                                        ], 
                                    required_access_levels = [
                                        ''
                                        ], )
                                ], ), 
                        custom = openapi_client.models.custom_level.CustomLevel(
                            expr = openapi_client.models.expr.Expr(
                                description = '', 
                                expression = '', 
                                location = '', 
                                title = '', ), ), 
                        description = '', 
                        name = '', 
                        title = '', )
                    ],
                next_page_token = ''
            )
        else:
            return ListAccessLevelsResponse(
        )
        """

    def testListAccessLevelsResponse(self):
        """Test ListAccessLevelsResponse"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

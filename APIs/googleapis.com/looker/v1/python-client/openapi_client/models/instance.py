# coding: utf-8

"""
    Looker (Google Cloud core) API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.admin_settings import AdminSettings
from openapi_client.models.custom_domain import CustomDomain
from openapi_client.models.deny_maintenance_period import DenyMaintenancePeriod
from openapi_client.models.encryption_config import EncryptionConfig
from openapi_client.models.maintenance_schedule import MaintenanceSchedule
from openapi_client.models.maintenance_window import MaintenanceWindow
from openapi_client.models.o_auth_config import OAuthConfig
from openapi_client.models.psc_config import PscConfig
from openapi_client.models.user_metadata import UserMetadata
from typing import Optional, Set
from typing_extensions import Self

class Instance(BaseModel):
    """
    A Looker instance.
    """ # noqa: E501
    admin_settings: Optional[AdminSettings] = Field(default=None, alias="adminSettings")
    consumer_network: Optional[StrictStr] = Field(default=None, description="Network name in the consumer project. Format: `projects/{project}/global/networks/{network}`. Note that the consumer network may be in a different GCP project than the consumer project that is hosting the Looker Instance.", alias="consumerNetwork")
    create_time: Optional[StrictStr] = Field(default=None, description="Output only. The time when the Looker instance provisioning was first requested.", alias="createTime")
    custom_domain: Optional[CustomDomain] = Field(default=None, alias="customDomain")
    deny_maintenance_period: Optional[DenyMaintenancePeriod] = Field(default=None, alias="denyMaintenancePeriod")
    egress_public_ip: Optional[StrictStr] = Field(default=None, description="Output only. Public Egress IP (IPv4).", alias="egressPublicIp")
    encryption_config: Optional[EncryptionConfig] = Field(default=None, alias="encryptionConfig")
    ingress_private_ip: Optional[StrictStr] = Field(default=None, description="Output only. Private Ingress IP (IPv4).", alias="ingressPrivateIp")
    ingress_public_ip: Optional[StrictStr] = Field(default=None, description="Output only. Public Ingress IP (IPv4).", alias="ingressPublicIp")
    last_deny_maintenance_period: Optional[DenyMaintenancePeriod] = Field(default=None, alias="lastDenyMaintenancePeriod")
    looker_uri: Optional[StrictStr] = Field(default=None, description="Output only. Looker instance URI which can be used to access the Looker Instance UI.", alias="lookerUri")
    looker_version: Optional[StrictStr] = Field(default=None, description="Output only. The Looker version that the instance is using.", alias="lookerVersion")
    maintenance_schedule: Optional[MaintenanceSchedule] = Field(default=None, alias="maintenanceSchedule")
    maintenance_window: Optional[MaintenanceWindow] = Field(default=None, alias="maintenanceWindow")
    name: Optional[StrictStr] = Field(default=None, description="Output only. Format: `projects/{project}/locations/{location}/instances/{instance}`.")
    oauth_config: Optional[OAuthConfig] = Field(default=None, alias="oauthConfig")
    platform_edition: Optional[StrictStr] = Field(default=None, description="Platform edition.", alias="platformEdition")
    private_ip_enabled: Optional[StrictBool] = Field(default=None, description="Whether private IP is enabled on the Looker instance.", alias="privateIpEnabled")
    psc_config: Optional[PscConfig] = Field(default=None, alias="pscConfig")
    psc_enabled: Optional[StrictBool] = Field(default=None, description="Optional. Whether to use Private Service Connect (PSC) for private IP connectivity. If true, VPC peering (PSA) will not be used.", alias="pscEnabled")
    public_ip_enabled: Optional[StrictBool] = Field(default=None, description="Whether public IP is enabled on the Looker instance.", alias="publicIpEnabled")
    reserved_range: Optional[StrictStr] = Field(default=None, description="Name of a reserved IP address range within the Instance.consumer_network, to be used for private services access connection. May or may not be specified in a create request.", alias="reservedRange")
    state: Optional[StrictStr] = Field(default=None, description="Output only. The state of the instance.")
    update_time: Optional[StrictStr] = Field(default=None, description="Output only. The time when the Looker instance was last updated.", alias="updateTime")
    user_metadata: Optional[UserMetadata] = Field(default=None, alias="userMetadata")
    __properties: ClassVar[List[str]] = ["adminSettings", "consumerNetwork", "createTime", "customDomain", "denyMaintenancePeriod", "egressPublicIp", "encryptionConfig", "ingressPrivateIp", "ingressPublicIp", "lastDenyMaintenancePeriod", "lookerUri", "lookerVersion", "maintenanceSchedule", "maintenanceWindow", "name", "oauthConfig", "platformEdition", "privateIpEnabled", "pscConfig", "pscEnabled", "publicIpEnabled", "reservedRange", "state", "updateTime", "userMetadata"]

    @field_validator('platform_edition')
    def platform_edition_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['PLATFORM_EDITION_UNSPECIFIED', 'LOOKER_CORE_TRIAL', 'LOOKER_CORE_STANDARD', 'LOOKER_CORE_STANDARD_ANNUAL', 'LOOKER_CORE_ENTERPRISE_ANNUAL', 'LOOKER_CORE_EMBED_ANNUAL']):
            raise ValueError("must be one of enum values ('PLATFORM_EDITION_UNSPECIFIED', 'LOOKER_CORE_TRIAL', 'LOOKER_CORE_STANDARD', 'LOOKER_CORE_STANDARD_ANNUAL', 'LOOKER_CORE_ENTERPRISE_ANNUAL', 'LOOKER_CORE_EMBED_ANNUAL')")
        return value

    @field_validator('state')
    def state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['STATE_UNSPECIFIED', 'ACTIVE', 'CREATING', 'FAILED', 'SUSPENDED', 'UPDATING', 'DELETING', 'EXPORTING', 'IMPORTING']):
            raise ValueError("must be one of enum values ('STATE_UNSPECIFIED', 'ACTIVE', 'CREATING', 'FAILED', 'SUSPENDED', 'UPDATING', 'DELETING', 'EXPORTING', 'IMPORTING')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Instance from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "create_time",
            "egress_public_ip",
            "ingress_private_ip",
            "ingress_public_ip",
            "looker_uri",
            "looker_version",
            "name",
            "state",
            "update_time",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of admin_settings
        if self.admin_settings:
            _dict['adminSettings'] = self.admin_settings.to_dict()
        # override the default output from pydantic by calling `to_dict()` of custom_domain
        if self.custom_domain:
            _dict['customDomain'] = self.custom_domain.to_dict()
        # override the default output from pydantic by calling `to_dict()` of deny_maintenance_period
        if self.deny_maintenance_period:
            _dict['denyMaintenancePeriod'] = self.deny_maintenance_period.to_dict()
        # override the default output from pydantic by calling `to_dict()` of encryption_config
        if self.encryption_config:
            _dict['encryptionConfig'] = self.encryption_config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of last_deny_maintenance_period
        if self.last_deny_maintenance_period:
            _dict['lastDenyMaintenancePeriod'] = self.last_deny_maintenance_period.to_dict()
        # override the default output from pydantic by calling `to_dict()` of maintenance_schedule
        if self.maintenance_schedule:
            _dict['maintenanceSchedule'] = self.maintenance_schedule.to_dict()
        # override the default output from pydantic by calling `to_dict()` of maintenance_window
        if self.maintenance_window:
            _dict['maintenanceWindow'] = self.maintenance_window.to_dict()
        # override the default output from pydantic by calling `to_dict()` of oauth_config
        if self.oauth_config:
            _dict['oauthConfig'] = self.oauth_config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of psc_config
        if self.psc_config:
            _dict['pscConfig'] = self.psc_config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of user_metadata
        if self.user_metadata:
            _dict['userMetadata'] = self.user_metadata.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Instance from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "adminSettings": AdminSettings.from_dict(obj["adminSettings"]) if obj.get("adminSettings") is not None else None,
            "consumerNetwork": obj.get("consumerNetwork"),
            "createTime": obj.get("createTime"),
            "customDomain": CustomDomain.from_dict(obj["customDomain"]) if obj.get("customDomain") is not None else None,
            "denyMaintenancePeriod": DenyMaintenancePeriod.from_dict(obj["denyMaintenancePeriod"]) if obj.get("denyMaintenancePeriod") is not None else None,
            "egressPublicIp": obj.get("egressPublicIp"),
            "encryptionConfig": EncryptionConfig.from_dict(obj["encryptionConfig"]) if obj.get("encryptionConfig") is not None else None,
            "ingressPrivateIp": obj.get("ingressPrivateIp"),
            "ingressPublicIp": obj.get("ingressPublicIp"),
            "lastDenyMaintenancePeriod": DenyMaintenancePeriod.from_dict(obj["lastDenyMaintenancePeriod"]) if obj.get("lastDenyMaintenancePeriod") is not None else None,
            "lookerUri": obj.get("lookerUri"),
            "lookerVersion": obj.get("lookerVersion"),
            "maintenanceSchedule": MaintenanceSchedule.from_dict(obj["maintenanceSchedule"]) if obj.get("maintenanceSchedule") is not None else None,
            "maintenanceWindow": MaintenanceWindow.from_dict(obj["maintenanceWindow"]) if obj.get("maintenanceWindow") is not None else None,
            "name": obj.get("name"),
            "oauthConfig": OAuthConfig.from_dict(obj["oauthConfig"]) if obj.get("oauthConfig") is not None else None,
            "platformEdition": obj.get("platformEdition"),
            "privateIpEnabled": obj.get("privateIpEnabled"),
            "pscConfig": PscConfig.from_dict(obj["pscConfig"]) if obj.get("pscConfig") is not None else None,
            "pscEnabled": obj.get("pscEnabled"),
            "publicIpEnabled": obj.get("publicIpEnabled"),
            "reservedRange": obj.get("reservedRange"),
            "state": obj.get("state"),
            "updateTime": obj.get("updateTime"),
            "userMetadata": UserMetadata.from_dict(obj["userMetadata"]) if obj.get("userMetadata") is not None else None
        })
        return _obj



# coding: utf-8

"""
    Looker (Google Cloud core) API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.export_metadata_encryption_key import ExportMetadataEncryptionKey
from typing import Optional, Set
from typing_extensions import Self

class ExportMetadata(BaseModel):
    """
    ExportMetadata represents the metadata of the exported artifacts. The metadata.json file in export artifact can be parsed as this message
    """ # noqa: E501
    export_encryption_key: Optional[ExportMetadataEncryptionKey] = Field(default=None, alias="exportEncryptionKey")
    file_paths: Optional[List[StrictStr]] = Field(default=None, description="List of files created as part of export artifact (excluding the metadata). The paths are relative to the folder containing the metadata.", alias="filePaths")
    looker_encryption_key: Optional[StrictStr] = Field(default=None, description="Looker encryption key, encrypted with the provided export encryption key. This value will only be populated if the looker instance uses Looker managed encryption instead of CMEK.", alias="lookerEncryptionKey")
    looker_instance: Optional[StrictStr] = Field(default=None, description="Name of the exported instance. Format: projects/{project}/locations/{location}/instances/{instance}", alias="lookerInstance")
    looker_platform_edition: Optional[StrictStr] = Field(default=None, description="Platform edition of the exported instance.", alias="lookerPlatformEdition")
    looker_version: Optional[StrictStr] = Field(default=None, description="Version of instance when the export was created.", alias="lookerVersion")
    source: Optional[StrictStr] = Field(default=None, description="The source type of the migration.")
    __properties: ClassVar[List[str]] = ["exportEncryptionKey", "filePaths", "lookerEncryptionKey", "lookerInstance", "lookerPlatformEdition", "lookerVersion", "source"]

    @field_validator('source')
    def source_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['SOURCE_UNSPECIFIED', 'LOOKER_CORE', 'LOOKER_ORIGINAL']):
            raise ValueError("must be one of enum values ('SOURCE_UNSPECIFIED', 'LOOKER_CORE', 'LOOKER_ORIGINAL')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ExportMetadata from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of export_encryption_key
        if self.export_encryption_key:
            _dict['exportEncryptionKey'] = self.export_encryption_key.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ExportMetadata from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "exportEncryptionKey": ExportMetadataEncryptionKey.from_dict(obj["exportEncryptionKey"]) if obj.get("exportEncryptionKey") is not None else None,
            "filePaths": obj.get("filePaths"),
            "lookerEncryptionKey": obj.get("lookerEncryptionKey"),
            "lookerInstance": obj.get("lookerInstance"),
            "lookerPlatformEdition": obj.get("lookerPlatformEdition"),
            "lookerVersion": obj.get("lookerVersion"),
            "source": obj.get("source")
        })
        return _obj



# coding: utf-8

"""
    Content API for Shopping

    Manage your product listings and accounts for Google Shopping

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.orderinvoices_create_refund_invoice_request import OrderinvoicesCreateRefundInvoiceRequest

class TestOrderinvoicesCreateRefundInvoiceRequest(unittest.TestCase):
    """OrderinvoicesCreateRefundInvoiceRequest unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> OrderinvoicesCreateRefundInvoiceRequest:
        """Test OrderinvoicesCreateRefundInvoiceRequest
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `OrderinvoicesCreateRefundInvoiceRequest`
        """
        model = OrderinvoicesCreateRefundInvoiceRequest()
        if include_optional:
            return OrderinvoicesCreateRefundInvoiceRequest(
                invoice_id = '',
                operation_id = '',
                refund_only_option = openapi_client.models.orderinvoices_custom_batch_request_entry_create_refund_invoice_refund_option.OrderinvoicesCustomBatchRequestEntryCreateRefundInvoiceRefundOption(
                    description = '', 
                    reason = '', ),
                return_option = openapi_client.models.orderinvoices_custom_batch_request_entry_create_refund_invoice_return_option.OrderinvoicesCustomBatchRequestEntryCreateRefundInvoiceReturnOption(
                    description = '', 
                    reason = '', ),
                shipment_invoices = [
                    openapi_client.models.shipment_invoice.ShipmentInvoice(
                        invoice_summary = openapi_client.models.invoice_summary.InvoiceSummary(
                            additional_charge_summaries = [
                                openapi_client.models.invoice_summary_additional_charge_summary.InvoiceSummaryAdditionalChargeSummary(
                                    total_amount = openapi_client.models.amount.Amount(
                                        pretax = openapi_client.models.price.Price(
                                            currency = '', 
                                            value = '', ), 
                                        tax = openapi_client.models.price.Price(
                                            currency = '', 
                                            value = '', ), ), 
                                    type = '', )
                                ], 
                            customer_balance = openapi_client.models.amount.Amount(), 
                            google_balance = , 
                            merchant_balance = , 
                            product_total = , 
                            promotion_summaries = [
                                openapi_client.models.promotion.Promotion(
                                    promotion_amount = , 
                                    promotion_id = '', )
                                ], ), 
                        line_item_invoices = [
                            openapi_client.models.shipment_invoice_line_item_invoice.ShipmentInvoiceLineItemInvoice(
                                line_item_id = '', 
                                product_id = '', 
                                shipment_unit_ids = [
                                    ''
                                    ], 
                                unit_invoice = openapi_client.models.unit_invoice.UnitInvoice(
                                    additional_charges = [
                                        openapi_client.models.unit_invoice_additional_charge.UnitInvoiceAdditionalCharge(
                                            additional_charge_amount = , 
                                            additional_charge_promotions = [
                                                openapi_client.models.promotion.Promotion(
                                                    promotion_id = '', )
                                                ], 
                                            type = '', )
                                        ], 
                                    promotions = [
                                        
                                        ], 
                                    unit_price_pretax = , 
                                    unit_price_taxes = [
                                        openapi_client.models.unit_invoice_tax_line.UnitInvoiceTaxLine(
                                            tax_amount = , 
                                            tax_name = '', 
                                            tax_type = '', )
                                        ], ), )
                            ], 
                        shipment_group_id = '', )
                    ]
            )
        else:
            return OrderinvoicesCreateRefundInvoiceRequest(
        )
        """

    def testOrderinvoicesCreateRefundInvoiceRequest(self):
        """Test OrderinvoicesCreateRefundInvoiceRequest"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

# coding: utf-8

"""
    Content API for Shopping

    Manage your product listings and accounts for Google Shopping

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.orders_create_test_order_request import OrdersCreateTestOrderRequest

class TestOrdersCreateTestOrderRequest(unittest.TestCase):
    """OrdersCreateTestOrderRequest unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> OrdersCreateTestOrderRequest:
        """Test OrdersCreateTestOrderRequest
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `OrdersCreateTestOrderRequest`
        """
        model = OrdersCreateTestOrderRequest()
        if include_optional:
            return OrdersCreateTestOrderRequest(
                country = '',
                template_name = '',
                test_order = openapi_client.models.test_order.TestOrder(
                    customer = openapi_client.models.test_order_customer.TestOrderCustomer(
                        email = '', 
                        explicit_marketing_preference = True, 
                        full_name = '', 
                        marketing_rights_info = openapi_client.models.test_order_customer_marketing_rights_info.TestOrderCustomerMarketingRightsInfo(
                            explicit_marketing_preference = '', 
                            last_updated_timestamp = '', ), ), 
                    enable_orderinvoices = True, 
                    kind = '', 
                    line_items = [
                        openapi_client.models.test_order_line_item.TestOrderLineItem(
                            product = openapi_client.models.test_order_line_item_product.TestOrderLineItemProduct(
                                brand = '', 
                                channel = '', 
                                condition = '', 
                                content_language = '', 
                                fees = [
                                    openapi_client.models.order_line_item_product_fee.OrderLineItemProductFee(
                                        amount = openapi_client.models.price.Price(
                                            currency = '', 
                                            value = '', ), 
                                        name = '', )
                                    ], 
                                gtin = '', 
                                image_link = '', 
                                item_group_id = '', 
                                mpn = '', 
                                offer_id = '', 
                                price = openapi_client.models.price.Price(
                                    currency = '', 
                                    value = '', ), 
                                target_country = '', 
                                title = '', 
                                variant_attributes = [
                                    openapi_client.models.order_line_item_product_variant_attribute.OrderLineItemProductVariantAttribute(
                                        dimension = '', 
                                        value = '', )
                                    ], ), 
                            quantity_ordered = 56, 
                            return_info = openapi_client.models.order_line_item_return_info.OrderLineItemReturnInfo(
                                days_to_return = 56, 
                                is_returnable = True, 
                                policy_url = '', ), 
                            shipping_details = openapi_client.models.order_line_item_shipping_details.OrderLineItemShippingDetails(
                                deliver_by_date = '', 
                                method = openapi_client.models.order_line_item_shipping_details_method.OrderLineItemShippingDetailsMethod(
                                    carrier = '', 
                                    max_days_in_transit = 56, 
                                    method_name = '', 
                                    min_days_in_transit = 56, ), 
                                ship_by_date = '', 
                                type = '', ), 
                            unit_tax = , )
                        ], 
                    notification_mode = '', 
                    payment_method = openapi_client.models.test_order_payment_method.TestOrderPaymentMethod(
                        expiration_month = 56, 
                        expiration_year = 56, 
                        last_four_digits = '', 
                        predefined_billing_address = '', 
                        type = '', ), 
                    predefined_delivery_address = '', 
                    predefined_pickup_details = '', 
                    promotions = [
                        openapi_client.models.order_legacy_promotion.OrderLegacyPromotion(
                            benefits = [
                                openapi_client.models.order_legacy_promotion_benefit.OrderLegacyPromotionBenefit(
                                    discount = , 
                                    offer_ids = [
                                        ''
                                        ], 
                                    sub_type = '', 
                                    tax_impact = , 
                                    type = '', )
                                ], 
                            effective_dates = '', 
                            generic_redemption_code = '', 
                            id = '', 
                            long_title = '', 
                            product_applicability = '', 
                            redemption_channel = '', )
                        ], 
                    shipping_cost = , 
                    shipping_cost_tax = , 
                    shipping_option = '', )
            )
        else:
            return OrdersCreateTestOrderRequest(
        )
        """

    def testOrdersCreateTestOrderRequest(self):
        """Test OrdersCreateTestOrderRequest"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

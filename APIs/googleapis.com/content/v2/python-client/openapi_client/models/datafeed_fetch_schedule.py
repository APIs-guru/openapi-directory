# coding: utf-8

"""
    Content API for Shopping

    Manage your product listings and accounts for Google Shopping

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class DatafeedFetchSchedule(BaseModel):
    """
    The required fields vary based on the frequency of fetching. For a monthly fetch schedule, day_of_month and hour are required. For a weekly fetch schedule, weekday and hour are required. For a daily fetch schedule, only hour is required.
    """ # noqa: E501
    day_of_month: Optional[StrictInt] = Field(default=None, description="The day of the month the feed file should be fetched (1-31).", alias="dayOfMonth")
    fetch_url: Optional[StrictStr] = Field(default=None, description="The URL where the feed file can be fetched. Google Merchant Center will support automatic scheduled uploads using the HTTP, HTTPS, FTP, or SFTP protocols, so the value will need to be a valid link using one of those four protocols.", alias="fetchUrl")
    hour: Optional[StrictInt] = Field(default=None, description="The hour of the day the feed file should be fetched (0-23).")
    minute_of_hour: Optional[StrictInt] = Field(default=None, description="The minute of the hour the feed file should be fetched (0-59). Read-only.", alias="minuteOfHour")
    password: Optional[StrictStr] = Field(default=None, description="An optional password for fetch_url.")
    paused: Optional[StrictBool] = Field(default=None, description="Whether the scheduled fetch is paused or not.")
    time_zone: Optional[StrictStr] = Field(default=None, description="Time zone used for schedule. UTC by default. E.g., \"America/Los_Angeles\".", alias="timeZone")
    username: Optional[StrictStr] = Field(default=None, description="An optional user name for fetch_url.")
    weekday: Optional[StrictStr] = Field(default=None, description="The day of the week the feed file should be fetched. Acceptable values are: - \"`monday`\" - \"`tuesday`\" - \"`wednesday`\" - \"`thursday`\" - \"`friday`\" - \"`saturday`\" - \"`sunday`\" ")
    __properties: ClassVar[List[str]] = ["dayOfMonth", "fetchUrl", "hour", "minuteOfHour", "password", "paused", "timeZone", "username", "weekday"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DatafeedFetchSchedule from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DatafeedFetchSchedule from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "dayOfMonth": obj.get("dayOfMonth"),
            "fetchUrl": obj.get("fetchUrl"),
            "hour": obj.get("hour"),
            "minuteOfHour": obj.get("minuteOfHour"),
            "password": obj.get("password"),
            "paused": obj.get("paused"),
            "timeZone": obj.get("timeZone"),
            "username": obj.get("username"),
            "weekday": obj.get("weekday")
        })
        return _obj



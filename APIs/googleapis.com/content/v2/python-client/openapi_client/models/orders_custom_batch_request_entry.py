# coding: utf-8

"""
    Content API for Shopping

    Manage your product listings and accounts for Google Shopping

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.orders_custom_batch_request_entry_cancel import OrdersCustomBatchRequestEntryCancel
from openapi_client.models.orders_custom_batch_request_entry_cancel_line_item import OrdersCustomBatchRequestEntryCancelLineItem
from openapi_client.models.orders_custom_batch_request_entry_in_store_refund_line_item import OrdersCustomBatchRequestEntryInStoreRefundLineItem
from openapi_client.models.orders_custom_batch_request_entry_refund import OrdersCustomBatchRequestEntryRefund
from openapi_client.models.orders_custom_batch_request_entry_reject_return_line_item import OrdersCustomBatchRequestEntryRejectReturnLineItem
from openapi_client.models.orders_custom_batch_request_entry_return_line_item import OrdersCustomBatchRequestEntryReturnLineItem
from openapi_client.models.orders_custom_batch_request_entry_return_refund_line_item import OrdersCustomBatchRequestEntryReturnRefundLineItem
from openapi_client.models.orders_custom_batch_request_entry_set_line_item_metadata import OrdersCustomBatchRequestEntrySetLineItemMetadata
from openapi_client.models.orders_custom_batch_request_entry_ship_line_items import OrdersCustomBatchRequestEntryShipLineItems
from openapi_client.models.orders_custom_batch_request_entry_update_line_item_shipping_details import OrdersCustomBatchRequestEntryUpdateLineItemShippingDetails
from openapi_client.models.orders_custom_batch_request_entry_update_shipment import OrdersCustomBatchRequestEntryUpdateShipment
from typing import Optional, Set
from typing_extensions import Self

class OrdersCustomBatchRequestEntry(BaseModel):
    """
    OrdersCustomBatchRequestEntry
    """ # noqa: E501
    batch_id: Optional[StrictInt] = Field(default=None, description="An entry ID, unique within the batch request.", alias="batchId")
    cancel: Optional[OrdersCustomBatchRequestEntryCancel] = None
    cancel_line_item: Optional[OrdersCustomBatchRequestEntryCancelLineItem] = Field(default=None, alias="cancelLineItem")
    in_store_refund_line_item: Optional[OrdersCustomBatchRequestEntryInStoreRefundLineItem] = Field(default=None, alias="inStoreRefundLineItem")
    merchant_id: Optional[StrictStr] = Field(default=None, description="The ID of the managing account.", alias="merchantId")
    merchant_order_id: Optional[StrictStr] = Field(default=None, description="The merchant order ID. Required for `updateMerchantOrderId` and `getByMerchantOrderId` methods.", alias="merchantOrderId")
    method: Optional[StrictStr] = Field(default=None, description="The method of the batch entry. Acceptable values are: - \"`acknowledge`\" - \"`cancel`\" - \"`cancelLineItem`\" - \"`get`\" - \"`getByMerchantOrderId`\" - \"`inStoreRefundLineItem`\" - \"`refund`\" - \"`rejectReturnLineItem`\" - \"`returnLineItem`\" - \"`returnRefundLineItem`\" - \"`setLineItemMetadata`\" - \"`shipLineItems`\" - \"`updateLineItemShippingDetails`\" - \"`updateMerchantOrderId`\" - \"`updateShipment`\" ")
    operation_id: Optional[StrictStr] = Field(default=None, description="The ID of the operation. Unique across all operations for a given order. Required for all methods beside `get` and `getByMerchantOrderId`.", alias="operationId")
    order_id: Optional[StrictStr] = Field(default=None, description="The ID of the order. Required for all methods beside `getByMerchantOrderId`.", alias="orderId")
    refund: Optional[OrdersCustomBatchRequestEntryRefund] = None
    reject_return_line_item: Optional[OrdersCustomBatchRequestEntryRejectReturnLineItem] = Field(default=None, alias="rejectReturnLineItem")
    return_line_item: Optional[OrdersCustomBatchRequestEntryReturnLineItem] = Field(default=None, alias="returnLineItem")
    return_refund_line_item: Optional[OrdersCustomBatchRequestEntryReturnRefundLineItem] = Field(default=None, alias="returnRefundLineItem")
    set_line_item_metadata: Optional[OrdersCustomBatchRequestEntrySetLineItemMetadata] = Field(default=None, alias="setLineItemMetadata")
    ship_line_items: Optional[OrdersCustomBatchRequestEntryShipLineItems] = Field(default=None, alias="shipLineItems")
    update_line_item_shipping_details: Optional[OrdersCustomBatchRequestEntryUpdateLineItemShippingDetails] = Field(default=None, alias="updateLineItemShippingDetails")
    update_shipment: Optional[OrdersCustomBatchRequestEntryUpdateShipment] = Field(default=None, alias="updateShipment")
    __properties: ClassVar[List[str]] = ["batchId", "cancel", "cancelLineItem", "inStoreRefundLineItem", "merchantId", "merchantOrderId", "method", "operationId", "orderId", "refund", "rejectReturnLineItem", "returnLineItem", "returnRefundLineItem", "setLineItemMetadata", "shipLineItems", "updateLineItemShippingDetails", "updateShipment"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of OrdersCustomBatchRequestEntry from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of cancel
        if self.cancel:
            _dict['cancel'] = self.cancel.to_dict()
        # override the default output from pydantic by calling `to_dict()` of cancel_line_item
        if self.cancel_line_item:
            _dict['cancelLineItem'] = self.cancel_line_item.to_dict()
        # override the default output from pydantic by calling `to_dict()` of in_store_refund_line_item
        if self.in_store_refund_line_item:
            _dict['inStoreRefundLineItem'] = self.in_store_refund_line_item.to_dict()
        # override the default output from pydantic by calling `to_dict()` of refund
        if self.refund:
            _dict['refund'] = self.refund.to_dict()
        # override the default output from pydantic by calling `to_dict()` of reject_return_line_item
        if self.reject_return_line_item:
            _dict['rejectReturnLineItem'] = self.reject_return_line_item.to_dict()
        # override the default output from pydantic by calling `to_dict()` of return_line_item
        if self.return_line_item:
            _dict['returnLineItem'] = self.return_line_item.to_dict()
        # override the default output from pydantic by calling `to_dict()` of return_refund_line_item
        if self.return_refund_line_item:
            _dict['returnRefundLineItem'] = self.return_refund_line_item.to_dict()
        # override the default output from pydantic by calling `to_dict()` of set_line_item_metadata
        if self.set_line_item_metadata:
            _dict['setLineItemMetadata'] = self.set_line_item_metadata.to_dict()
        # override the default output from pydantic by calling `to_dict()` of ship_line_items
        if self.ship_line_items:
            _dict['shipLineItems'] = self.ship_line_items.to_dict()
        # override the default output from pydantic by calling `to_dict()` of update_line_item_shipping_details
        if self.update_line_item_shipping_details:
            _dict['updateLineItemShippingDetails'] = self.update_line_item_shipping_details.to_dict()
        # override the default output from pydantic by calling `to_dict()` of update_shipment
        if self.update_shipment:
            _dict['updateShipment'] = self.update_shipment.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of OrdersCustomBatchRequestEntry from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "batchId": obj.get("batchId"),
            "cancel": OrdersCustomBatchRequestEntryCancel.from_dict(obj["cancel"]) if obj.get("cancel") is not None else None,
            "cancelLineItem": OrdersCustomBatchRequestEntryCancelLineItem.from_dict(obj["cancelLineItem"]) if obj.get("cancelLineItem") is not None else None,
            "inStoreRefundLineItem": OrdersCustomBatchRequestEntryInStoreRefundLineItem.from_dict(obj["inStoreRefundLineItem"]) if obj.get("inStoreRefundLineItem") is not None else None,
            "merchantId": obj.get("merchantId"),
            "merchantOrderId": obj.get("merchantOrderId"),
            "method": obj.get("method"),
            "operationId": obj.get("operationId"),
            "orderId": obj.get("orderId"),
            "refund": OrdersCustomBatchRequestEntryRefund.from_dict(obj["refund"]) if obj.get("refund") is not None else None,
            "rejectReturnLineItem": OrdersCustomBatchRequestEntryRejectReturnLineItem.from_dict(obj["rejectReturnLineItem"]) if obj.get("rejectReturnLineItem") is not None else None,
            "returnLineItem": OrdersCustomBatchRequestEntryReturnLineItem.from_dict(obj["returnLineItem"]) if obj.get("returnLineItem") is not None else None,
            "returnRefundLineItem": OrdersCustomBatchRequestEntryReturnRefundLineItem.from_dict(obj["returnRefundLineItem"]) if obj.get("returnRefundLineItem") is not None else None,
            "setLineItemMetadata": OrdersCustomBatchRequestEntrySetLineItemMetadata.from_dict(obj["setLineItemMetadata"]) if obj.get("setLineItemMetadata") is not None else None,
            "shipLineItems": OrdersCustomBatchRequestEntryShipLineItems.from_dict(obj["shipLineItems"]) if obj.get("shipLineItems") is not None else None,
            "updateLineItemShippingDetails": OrdersCustomBatchRequestEntryUpdateLineItemShippingDetails.from_dict(obj["updateLineItemShippingDetails"]) if obj.get("updateLineItemShippingDetails") is not None else None,
            "updateShipment": OrdersCustomBatchRequestEntryUpdateShipment.from_dict(obj["updateShipment"]) if obj.get("updateShipment") is not None else None
        })
        return _obj



# coding: utf-8

"""
    Content API for Shopping

    Manage your product listings and accounts for Google Shopping

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.business_day_config import BusinessDayConfig
from openapi_client.models.cutoff_time import CutoffTime
from openapi_client.models.holiday_cutoff import HolidayCutoff
from openapi_client.models.transit_table import TransitTable
from openapi_client.models.warehouse_based_delivery_time import WarehouseBasedDeliveryTime
from typing import Optional, Set
from typing_extensions import Self

class DeliveryTime(BaseModel):
    """
    DeliveryTime
    """ # noqa: E501
    cutoff_time: Optional[CutoffTime] = Field(default=None, alias="cutoffTime")
    handling_business_day_config: Optional[BusinessDayConfig] = Field(default=None, alias="handlingBusinessDayConfig")
    holiday_cutoffs: Optional[List[HolidayCutoff]] = Field(default=None, description="Holiday cutoff definitions. If configured, they specify order cutoff times for holiday-specific shipping.", alias="holidayCutoffs")
    max_handling_time_in_days: Optional[StrictInt] = Field(default=None, description="Maximum number of business days spent before an order is shipped. 0 means same day shipped, 1 means next day shipped. Must be greater than or equal to `minHandlingTimeInDays`.", alias="maxHandlingTimeInDays")
    max_transit_time_in_days: Optional[StrictInt] = Field(default=None, description="Maximum number of business days that is spent in transit. 0 means same day delivery, 1 means next day delivery. Must be greater than or equal to `minTransitTimeInDays`.", alias="maxTransitTimeInDays")
    min_handling_time_in_days: Optional[StrictInt] = Field(default=None, description="Minimum number of business days spent before an order is shipped. 0 means same day shipped, 1 means next day shipped.", alias="minHandlingTimeInDays")
    min_transit_time_in_days: Optional[StrictInt] = Field(default=None, description="Minimum number of business days that is spent in transit. 0 means same day delivery, 1 means next day delivery. Either `{min,max}TransitTimeInDays` or `transitTimeTable` must be set, but not both.", alias="minTransitTimeInDays")
    transit_business_day_config: Optional[BusinessDayConfig] = Field(default=None, alias="transitBusinessDayConfig")
    transit_time_table: Optional[TransitTable] = Field(default=None, alias="transitTimeTable")
    warehouse_based_delivery_times: Optional[List[WarehouseBasedDeliveryTime]] = Field(default=None, description="Indicates that the delivery time should be calculated per warehouse (shipping origin location) based on the settings of the selected carrier. When set, no other transit time related field in DeliveryTime should be set.", alias="warehouseBasedDeliveryTimes")
    __properties: ClassVar[List[str]] = ["cutoffTime", "handlingBusinessDayConfig", "holidayCutoffs", "maxHandlingTimeInDays", "maxTransitTimeInDays", "minHandlingTimeInDays", "minTransitTimeInDays", "transitBusinessDayConfig", "transitTimeTable", "warehouseBasedDeliveryTimes"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DeliveryTime from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of cutoff_time
        if self.cutoff_time:
            _dict['cutoffTime'] = self.cutoff_time.to_dict()
        # override the default output from pydantic by calling `to_dict()` of handling_business_day_config
        if self.handling_business_day_config:
            _dict['handlingBusinessDayConfig'] = self.handling_business_day_config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in holiday_cutoffs (list)
        _items = []
        if self.holiday_cutoffs:
            for _item_holiday_cutoffs in self.holiday_cutoffs:
                if _item_holiday_cutoffs:
                    _items.append(_item_holiday_cutoffs.to_dict())
            _dict['holidayCutoffs'] = _items
        # override the default output from pydantic by calling `to_dict()` of transit_business_day_config
        if self.transit_business_day_config:
            _dict['transitBusinessDayConfig'] = self.transit_business_day_config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of transit_time_table
        if self.transit_time_table:
            _dict['transitTimeTable'] = self.transit_time_table.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in warehouse_based_delivery_times (list)
        _items = []
        if self.warehouse_based_delivery_times:
            for _item_warehouse_based_delivery_times in self.warehouse_based_delivery_times:
                if _item_warehouse_based_delivery_times:
                    _items.append(_item_warehouse_based_delivery_times.to_dict())
            _dict['warehouseBasedDeliveryTimes'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DeliveryTime from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "cutoffTime": CutoffTime.from_dict(obj["cutoffTime"]) if obj.get("cutoffTime") is not None else None,
            "handlingBusinessDayConfig": BusinessDayConfig.from_dict(obj["handlingBusinessDayConfig"]) if obj.get("handlingBusinessDayConfig") is not None else None,
            "holidayCutoffs": [HolidayCutoff.from_dict(_item) for _item in obj["holidayCutoffs"]] if obj.get("holidayCutoffs") is not None else None,
            "maxHandlingTimeInDays": obj.get("maxHandlingTimeInDays"),
            "maxTransitTimeInDays": obj.get("maxTransitTimeInDays"),
            "minHandlingTimeInDays": obj.get("minHandlingTimeInDays"),
            "minTransitTimeInDays": obj.get("minTransitTimeInDays"),
            "transitBusinessDayConfig": BusinessDayConfig.from_dict(obj["transitBusinessDayConfig"]) if obj.get("transitBusinessDayConfig") is not None else None,
            "transitTimeTable": TransitTable.from_dict(obj["transitTimeTable"]) if obj.get("transitTimeTable") is not None else None,
            "warehouseBasedDeliveryTimes": [WarehouseBasedDeliveryTime.from_dict(_item) for _item in obj["warehouseBasedDeliveryTimes"]] if obj.get("warehouseBasedDeliveryTimes") is not None else None
        })
        return _obj



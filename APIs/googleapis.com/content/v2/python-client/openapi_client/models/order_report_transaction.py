# coding: utf-8

"""
    Content API for Shopping

    Manage your product listings and accounts for Google Shopping

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.amount import Amount
from openapi_client.models.price import Price
from openapi_client.models.product_amount import ProductAmount
from typing import Optional, Set
from typing_extensions import Self

class OrderReportTransaction(BaseModel):
    """
    OrderReportTransaction
    """ # noqa: E501
    disbursement_amount: Optional[Price] = Field(default=None, alias="disbursementAmount")
    disbursement_creation_date: Optional[StrictStr] = Field(default=None, description="The date the disbursement was created, in ISO 8601 format.", alias="disbursementCreationDate")
    disbursement_date: Optional[StrictStr] = Field(default=None, description="The date the disbursement was initiated, in ISO 8601 format.", alias="disbursementDate")
    disbursement_id: Optional[StrictStr] = Field(default=None, description="The ID of the disbursement.", alias="disbursementId")
    merchant_id: Optional[StrictStr] = Field(default=None, description="The ID of the managing account.", alias="merchantId")
    merchant_order_id: Optional[StrictStr] = Field(default=None, description="Merchant-provided ID of the order.", alias="merchantOrderId")
    order_id: Optional[StrictStr] = Field(default=None, description="The ID of the order.", alias="orderId")
    product_amount: Optional[Amount] = Field(default=None, alias="productAmount")
    product_amount_with_remitted_tax: Optional[ProductAmount] = Field(default=None, alias="productAmountWithRemittedTax")
    transaction_date: Optional[StrictStr] = Field(default=None, description="The date of the transaction, in ISO 8601 format.", alias="transactionDate")
    __properties: ClassVar[List[str]] = ["disbursementAmount", "disbursementCreationDate", "disbursementDate", "disbursementId", "merchantId", "merchantOrderId", "orderId", "productAmount", "productAmountWithRemittedTax", "transactionDate"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of OrderReportTransaction from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of disbursement_amount
        if self.disbursement_amount:
            _dict['disbursementAmount'] = self.disbursement_amount.to_dict()
        # override the default output from pydantic by calling `to_dict()` of product_amount
        if self.product_amount:
            _dict['productAmount'] = self.product_amount.to_dict()
        # override the default output from pydantic by calling `to_dict()` of product_amount_with_remitted_tax
        if self.product_amount_with_remitted_tax:
            _dict['productAmountWithRemittedTax'] = self.product_amount_with_remitted_tax.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of OrderReportTransaction from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "disbursementAmount": Price.from_dict(obj["disbursementAmount"]) if obj.get("disbursementAmount") is not None else None,
            "disbursementCreationDate": obj.get("disbursementCreationDate"),
            "disbursementDate": obj.get("disbursementDate"),
            "disbursementId": obj.get("disbursementId"),
            "merchantId": obj.get("merchantId"),
            "merchantOrderId": obj.get("merchantOrderId"),
            "orderId": obj.get("orderId"),
            "productAmount": Amount.from_dict(obj["productAmount"]) if obj.get("productAmount") is not None else None,
            "productAmountWithRemittedTax": ProductAmount.from_dict(obj["productAmountWithRemittedTax"]) if obj.get("productAmountWithRemittedTax") is not None else None,
            "transactionDate": obj.get("transactionDate")
        })
        return _obj



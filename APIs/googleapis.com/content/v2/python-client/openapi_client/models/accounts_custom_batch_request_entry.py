# coding: utf-8

"""
    Content API for Shopping

    Manage your product listings and accounts for Google Shopping

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.account import Account
from openapi_client.models.accounts_custom_batch_request_entry_link_request import AccountsCustomBatchRequestEntryLinkRequest
from typing import Optional, Set
from typing_extensions import Self

class AccountsCustomBatchRequestEntry(BaseModel):
    """
    A batch entry encoding a single non-batch accounts request.
    """ # noqa: E501
    account: Optional[Account] = None
    account_id: Optional[StrictStr] = Field(default=None, description="The ID of the targeted account. Only defined if the method is not `insert`.", alias="accountId")
    batch_id: Optional[StrictInt] = Field(default=None, description="An entry ID, unique within the batch request.", alias="batchId")
    force: Optional[StrictBool] = Field(default=None, description="Whether the account should be deleted if the account has offers. Only applicable if the method is `delete`.")
    label_ids: Optional[List[StrictStr]] = Field(default=None, description="Label IDs for the 'updatelabels' request.", alias="labelIds")
    link_request: Optional[AccountsCustomBatchRequestEntryLinkRequest] = Field(default=None, alias="linkRequest")
    merchant_id: Optional[StrictStr] = Field(default=None, description="The ID of the managing account.", alias="merchantId")
    method: Optional[StrictStr] = Field(default=None, description="The method of the batch entry. Acceptable values are: - \"`claimWebsite`\" - \"`delete`\" - \"`get`\" - \"`insert`\" - \"`link`\" - \"`update`\" ")
    overwrite: Optional[StrictBool] = Field(default=None, description="Only applicable if the method is `claimwebsite`. Indicates whether or not to take the claim from another account in case there is a conflict.")
    __properties: ClassVar[List[str]] = ["account", "accountId", "batchId", "force", "labelIds", "linkRequest", "merchantId", "method", "overwrite"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AccountsCustomBatchRequestEntry from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of account
        if self.account:
            _dict['account'] = self.account.to_dict()
        # override the default output from pydantic by calling `to_dict()` of link_request
        if self.link_request:
            _dict['linkRequest'] = self.link_request.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AccountsCustomBatchRequestEntry from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "account": Account.from_dict(obj["account"]) if obj.get("account") is not None else None,
            "accountId": obj.get("accountId"),
            "batchId": obj.get("batchId"),
            "force": obj.get("force"),
            "labelIds": obj.get("labelIds"),
            "linkRequest": AccountsCustomBatchRequestEntryLinkRequest.from_dict(obj["linkRequest"]) if obj.get("linkRequest") is not None else None,
            "merchantId": obj.get("merchantId"),
            "method": obj.get("method"),
            "overwrite": obj.get("overwrite")
        })
        return _obj



# coding: utf-8

"""
    Content API for Shopping

    Manage your product listings and accounts for Google Shopping

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.customer_return_reason import CustomerReturnReason
from openapi_client.models.order_line_item_product import OrderLineItemProduct
from openapi_client.models.refund_reason import RefundReason
from typing import Optional, Set
from typing_extensions import Self

class MerchantOrderReturnItem(BaseModel):
    """
    MerchantOrderReturnItem
    """ # noqa: E501
    customer_return_reason: Optional[CustomerReturnReason] = Field(default=None, alias="customerReturnReason")
    item_id: Optional[StrictStr] = Field(default=None, description="Product level item ID. If the returned items are of the same product, they will have the same ID.", alias="itemId")
    merchant_return_reason: Optional[RefundReason] = Field(default=None, alias="merchantReturnReason")
    product: Optional[OrderLineItemProduct] = None
    return_shipment_ids: Optional[List[StrictStr]] = Field(default=None, description="IDs of the return shipments that this return item belongs to.", alias="returnShipmentIds")
    state: Optional[StrictStr] = Field(default=None, description="State of the item. Acceptable values are: - \"`canceled`\" - \"`new`\" - \"`received`\" - \"`refunded`\" - \"`rejected`\" ")
    __properties: ClassVar[List[str]] = ["customerReturnReason", "itemId", "merchantReturnReason", "product", "returnShipmentIds", "state"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of MerchantOrderReturnItem from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of customer_return_reason
        if self.customer_return_reason:
            _dict['customerReturnReason'] = self.customer_return_reason.to_dict()
        # override the default output from pydantic by calling `to_dict()` of merchant_return_reason
        if self.merchant_return_reason:
            _dict['merchantReturnReason'] = self.merchant_return_reason.to_dict()
        # override the default output from pydantic by calling `to_dict()` of product
        if self.product:
            _dict['product'] = self.product.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of MerchantOrderReturnItem from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "customerReturnReason": CustomerReturnReason.from_dict(obj["customerReturnReason"]) if obj.get("customerReturnReason") is not None else None,
            "itemId": obj.get("itemId"),
            "merchantReturnReason": RefundReason.from_dict(obj["merchantReturnReason"]) if obj.get("merchantReturnReason") is not None else None,
            "product": OrderLineItemProduct.from_dict(obj["product"]) if obj.get("product") is not None else None,
            "returnShipmentIds": obj.get("returnShipmentIds"),
            "state": obj.get("state")
        })
        return _obj



# coding: utf-8

"""
    Content API for Shopping

    Manage your product listings and accounts for Google Shopping

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.merchant_order_return_item import MerchantOrderReturnItem
from openapi_client.models.return_shipment import ReturnShipment
from typing import Optional, Set
from typing_extensions import Self

class MerchantOrderReturn(BaseModel):
    """
    Order return. Production access (all methods) requires the order manager role. Sandbox access does not.
    """ # noqa: E501
    creation_date: Optional[StrictStr] = Field(default=None, description="The date of creation of the return, in ISO 8601 format.", alias="creationDate")
    merchant_order_id: Optional[StrictStr] = Field(default=None, description="Merchant defined order ID.", alias="merchantOrderId")
    order_id: Optional[StrictStr] = Field(default=None, description="Google order ID.", alias="orderId")
    order_return_id: Optional[StrictStr] = Field(default=None, description="Order return ID generated by Google.", alias="orderReturnId")
    return_items: Optional[List[MerchantOrderReturnItem]] = Field(default=None, description="Items of the return.", alias="returnItems")
    return_shipments: Optional[List[ReturnShipment]] = Field(default=None, description="Shipments of the return.", alias="returnShipments")
    __properties: ClassVar[List[str]] = ["creationDate", "merchantOrderId", "orderId", "orderReturnId", "returnItems", "returnShipments"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of MerchantOrderReturn from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in return_items (list)
        _items = []
        if self.return_items:
            for _item_return_items in self.return_items:
                if _item_return_items:
                    _items.append(_item_return_items.to_dict())
            _dict['returnItems'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in return_shipments (list)
        _items = []
        if self.return_shipments:
            for _item_return_shipments in self.return_shipments:
                if _item_return_shipments:
                    _items.append(_item_return_shipments.to_dict())
            _dict['returnShipments'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of MerchantOrderReturn from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "creationDate": obj.get("creationDate"),
            "merchantOrderId": obj.get("merchantOrderId"),
            "orderId": obj.get("orderId"),
            "orderReturnId": obj.get("orderReturnId"),
            "returnItems": [MerchantOrderReturnItem.from_dict(_item) for _item in obj["returnItems"]] if obj.get("returnItems") is not None else None,
            "returnShipments": [ReturnShipment.from_dict(_item) for _item in obj["returnShipments"]] if obj.get("returnShipments") is not None else None
        })
        return _obj



# coding: utf-8

"""
    Content API for Shopping

    Manage your product listings and accounts for Google Shopping

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.datafeed_status_error import DatafeedStatusError
from typing import Optional, Set
from typing_extensions import Self

class DatafeedStatus(BaseModel):
    """
    The status of a datafeed, i.e., the result of the last retrieval of the datafeed computed asynchronously when the feed processing is finished.
    """ # noqa: E501
    country: Optional[StrictStr] = Field(default=None, description="The country for which the status is reported, represented as a CLDR territory code.")
    datafeed_id: Optional[StrictStr] = Field(default=None, description="The ID of the feed for which the status is reported.", alias="datafeedId")
    errors: Optional[List[DatafeedStatusError]] = Field(default=None, description="The list of errors occurring in the feed.")
    items_total: Optional[StrictStr] = Field(default=None, description="The number of items in the feed that were processed.", alias="itemsTotal")
    items_valid: Optional[StrictStr] = Field(default=None, description="The number of items in the feed that were valid.", alias="itemsValid")
    kind: Optional[StrictStr] = Field(default=None, description="Identifies what kind of resource this is. Value: the fixed string \"`content#datafeedStatus`\"")
    language: Optional[StrictStr] = Field(default=None, description="The two-letter ISO 639-1 language for which the status is reported.")
    last_upload_date: Optional[StrictStr] = Field(default=None, description="The last date at which the feed was uploaded.", alias="lastUploadDate")
    processing_status: Optional[StrictStr] = Field(default=None, description="The processing status of the feed. Acceptable values are: - \"`\"`failure`\": The feed could not be processed or all items had errors.`\" - \"`in progress`\": The feed is being processed. - \"`none`\": The feed has not yet been processed. For example, a feed that has never been uploaded will have this processing status. - \"`success`\": The feed was processed successfully, though some items might have had errors. ", alias="processingStatus")
    warnings: Optional[List[DatafeedStatusError]] = Field(default=None, description="The list of errors occurring in the feed.")
    __properties: ClassVar[List[str]] = ["country", "datafeedId", "errors", "itemsTotal", "itemsValid", "kind", "language", "lastUploadDate", "processingStatus", "warnings"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DatafeedStatus from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in errors (list)
        _items = []
        if self.errors:
            for _item_errors in self.errors:
                if _item_errors:
                    _items.append(_item_errors.to_dict())
            _dict['errors'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in warnings (list)
        _items = []
        if self.warnings:
            for _item_warnings in self.warnings:
                if _item_warnings:
                    _items.append(_item_warnings.to_dict())
            _dict['warnings'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DatafeedStatus from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "country": obj.get("country"),
            "datafeedId": obj.get("datafeedId"),
            "errors": [DatafeedStatusError.from_dict(_item) for _item in obj["errors"]] if obj.get("errors") is not None else None,
            "itemsTotal": obj.get("itemsTotal"),
            "itemsValid": obj.get("itemsValid"),
            "kind": obj.get("kind"),
            "language": obj.get("language"),
            "lastUploadDate": obj.get("lastUploadDate"),
            "processingStatus": obj.get("processingStatus"),
            "warnings": [DatafeedStatusError.from_dict(_item) for _item in obj["warnings"]] if obj.get("warnings") is not None else None
        })
        return _obj



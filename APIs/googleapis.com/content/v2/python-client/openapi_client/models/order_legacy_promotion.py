# coding: utf-8

"""
    Content API for Shopping

    Manage your product listings and accounts for Google Shopping

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.order_legacy_promotion_benefit import OrderLegacyPromotionBenefit
from typing import Optional, Set
from typing_extensions import Self

class OrderLegacyPromotion(BaseModel):
    """
    OrderLegacyPromotion
    """ # noqa: E501
    benefits: Optional[List[OrderLegacyPromotionBenefit]] = None
    effective_dates: Optional[StrictStr] = Field(default=None, description="The date and time frame when the promotion is active and ready for validation review. Note that the promotion live time may be delayed for a few hours due to the validation review. Start date and end date are separated by a forward slash (/). The start date is specified by the format (YYYY-MM-DD), followed by the letter ?T?, the time of the day when the sale starts (in Greenwich Mean Time, GMT), followed by an expression of the time zone for the sale. The end date is in the same format.", alias="effectiveDates")
    generic_redemption_code: Optional[StrictStr] = Field(default=None, description="Optional. The text code that corresponds to the promotion when applied on the retailer?s website.", alias="genericRedemptionCode")
    id: Optional[StrictStr] = Field(default=None, description="The unique ID of the promotion.")
    long_title: Optional[StrictStr] = Field(default=None, description="The full title of the promotion.", alias="longTitle")
    product_applicability: Optional[StrictStr] = Field(default=None, description="Whether the promotion is applicable to all products or only specific products. Acceptable values are: - \"`allProducts`\" - \"`specificProducts`\" ", alias="productApplicability")
    redemption_channel: Optional[StrictStr] = Field(default=None, description="Indicates that the promotion is valid online. Acceptable values are: - \"`online`\" ", alias="redemptionChannel")
    __properties: ClassVar[List[str]] = ["benefits", "effectiveDates", "genericRedemptionCode", "id", "longTitle", "productApplicability", "redemptionChannel"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of OrderLegacyPromotion from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in benefits (list)
        _items = []
        if self.benefits:
            for _item_benefits in self.benefits:
                if _item_benefits:
                    _items.append(_item_benefits.to_dict())
            _dict['benefits'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of OrderLegacyPromotion from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "benefits": [OrderLegacyPromotionBenefit.from_dict(_item) for _item in obj["benefits"]] if obj.get("benefits") is not None else None,
            "effectiveDates": obj.get("effectiveDates"),
            "genericRedemptionCode": obj.get("genericRedemptionCode"),
            "id": obj.get("id"),
            "longTitle": obj.get("longTitle"),
            "productApplicability": obj.get("productApplicability"),
            "redemptionChannel": obj.get("redemptionChannel")
        })
        return _obj



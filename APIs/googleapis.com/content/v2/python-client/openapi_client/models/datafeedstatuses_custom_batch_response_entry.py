# coding: utf-8

"""
    Content API for Shopping

    Manage your product listings and accounts for Google Shopping

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.datafeed_status import DatafeedStatus
from openapi_client.models.errors import Errors
from typing import Optional, Set
from typing_extensions import Self

class DatafeedstatusesCustomBatchResponseEntry(BaseModel):
    """
    A batch entry encoding a single non-batch datafeedstatuses response.
    """ # noqa: E501
    batch_id: Optional[StrictInt] = Field(default=None, description="The ID of the request entry this entry responds to.", alias="batchId")
    datafeed_status: Optional[DatafeedStatus] = Field(default=None, alias="datafeedStatus")
    errors: Optional[Errors] = None
    __properties: ClassVar[List[str]] = ["batchId", "datafeedStatus", "errors"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DatafeedstatusesCustomBatchResponseEntry from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of datafeed_status
        if self.datafeed_status:
            _dict['datafeedStatus'] = self.datafeed_status.to_dict()
        # override the default output from pydantic by calling `to_dict()` of errors
        if self.errors:
            _dict['errors'] = self.errors.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DatafeedstatusesCustomBatchResponseEntry from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "batchId": obj.get("batchId"),
            "datafeedStatus": DatafeedStatus.from_dict(obj["datafeedStatus"]) if obj.get("datafeedStatus") is not None else None,
            "errors": Errors.from_dict(obj["errors"]) if obj.get("errors") is not None else None
        })
        return _obj



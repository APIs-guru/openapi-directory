# coding: utf-8

"""
    Content API for Shopping

    Manage your product listings and accounts for Google Shopping

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.orderinvoices_custom_batch_request_entry_create_refund_invoice_refund_option import OrderinvoicesCustomBatchRequestEntryCreateRefundInvoiceRefundOption
from openapi_client.models.orderinvoices_custom_batch_request_entry_create_refund_invoice_return_option import OrderinvoicesCustomBatchRequestEntryCreateRefundInvoiceReturnOption
from openapi_client.models.shipment_invoice import ShipmentInvoice
from typing import Optional, Set
from typing_extensions import Self

class OrderinvoicesCreateRefundInvoiceRequest(BaseModel):
    """
    OrderinvoicesCreateRefundInvoiceRequest
    """ # noqa: E501
    invoice_id: Optional[StrictStr] = Field(default=None, description="[required] The ID of the invoice.", alias="invoiceId")
    operation_id: Optional[StrictStr] = Field(default=None, description="[required] The ID of the operation, unique across all operations for a given order.", alias="operationId")
    refund_only_option: Optional[OrderinvoicesCustomBatchRequestEntryCreateRefundInvoiceRefundOption] = Field(default=None, alias="refundOnlyOption")
    return_option: Optional[OrderinvoicesCustomBatchRequestEntryCreateRefundInvoiceReturnOption] = Field(default=None, alias="returnOption")
    shipment_invoices: Optional[List[ShipmentInvoice]] = Field(default=None, description="Invoice details for different shipment groups.", alias="shipmentInvoices")
    __properties: ClassVar[List[str]] = ["invoiceId", "operationId", "refundOnlyOption", "returnOption", "shipmentInvoices"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of OrderinvoicesCreateRefundInvoiceRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of refund_only_option
        if self.refund_only_option:
            _dict['refundOnlyOption'] = self.refund_only_option.to_dict()
        # override the default output from pydantic by calling `to_dict()` of return_option
        if self.return_option:
            _dict['returnOption'] = self.return_option.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in shipment_invoices (list)
        _items = []
        if self.shipment_invoices:
            for _item_shipment_invoices in self.shipment_invoices:
                if _item_shipment_invoices:
                    _items.append(_item_shipment_invoices.to_dict())
            _dict['shipmentInvoices'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of OrderinvoicesCreateRefundInvoiceRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "invoiceId": obj.get("invoiceId"),
            "operationId": obj.get("operationId"),
            "refundOnlyOption": OrderinvoicesCustomBatchRequestEntryCreateRefundInvoiceRefundOption.from_dict(obj["refundOnlyOption"]) if obj.get("refundOnlyOption") is not None else None,
            "returnOption": OrderinvoicesCustomBatchRequestEntryCreateRefundInvoiceReturnOption.from_dict(obj["returnOption"]) if obj.get("returnOption") is not None else None,
            "shipmentInvoices": [ShipmentInvoice.from_dict(_item) for _item in obj["shipmentInvoices"]] if obj.get("shipmentInvoices") is not None else None
        })
        return _obj



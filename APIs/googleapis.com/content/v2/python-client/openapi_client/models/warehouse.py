# coding: utf-8

"""
    Content API for Shopping

    Manage your product listings and accounts for Google Shopping

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.address import Address
from openapi_client.models.business_day_config import BusinessDayConfig
from openapi_client.models.warehouse_cutoff_time import WarehouseCutoffTime
from typing import Optional, Set
from typing_extensions import Self

class Warehouse(BaseModel):
    """
    A fulfillment warehouse, which stores and handles inventory.
    """ # noqa: E501
    business_day_config: Optional[BusinessDayConfig] = Field(default=None, alias="businessDayConfig")
    cutoff_time: Optional[WarehouseCutoffTime] = Field(default=None, alias="cutoffTime")
    handling_days: Optional[StrictStr] = Field(default=None, description="Required. The number of days it takes for this warehouse to pack up and ship an item. This is on the warehouse level, but can be overridden on the offer level based on the attributes of an item.", alias="handlingDays")
    name: Optional[StrictStr] = Field(default=None, description="Required. The name of the warehouse. Must be unique within account.")
    shipping_address: Optional[Address] = Field(default=None, alias="shippingAddress")
    __properties: ClassVar[List[str]] = ["businessDayConfig", "cutoffTime", "handlingDays", "name", "shippingAddress"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Warehouse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of business_day_config
        if self.business_day_config:
            _dict['businessDayConfig'] = self.business_day_config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of cutoff_time
        if self.cutoff_time:
            _dict['cutoffTime'] = self.cutoff_time.to_dict()
        # override the default output from pydantic by calling `to_dict()` of shipping_address
        if self.shipping_address:
            _dict['shippingAddress'] = self.shipping_address.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Warehouse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "businessDayConfig": BusinessDayConfig.from_dict(obj["businessDayConfig"]) if obj.get("businessDayConfig") is not None else None,
            "cutoffTime": WarehouseCutoffTime.from_dict(obj["cutoffTime"]) if obj.get("cutoffTime") is not None else None,
            "handlingDays": obj.get("handlingDays"),
            "name": obj.get("name"),
            "shippingAddress": Address.from_dict(obj["shippingAddress"]) if obj.get("shippingAddress") is not None else None
        })
        return _obj



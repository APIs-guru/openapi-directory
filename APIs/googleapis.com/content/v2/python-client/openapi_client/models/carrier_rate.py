# coding: utf-8

"""
    Content API for Shopping

    Manage your product listings and accounts for Google Shopping

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.price import Price
from typing import Optional, Set
from typing_extensions import Self

class CarrierRate(BaseModel):
    """
    CarrierRate
    """ # noqa: E501
    carrier_name: Optional[StrictStr] = Field(default=None, description="Carrier service, such as `\"UPS\"` or `\"Fedex\"`. The list of supported carriers can be retrieved via the `getSupportedCarriers` method. Required.", alias="carrierName")
    carrier_service: Optional[StrictStr] = Field(default=None, description="Carrier service, such as `\"ground\"` or `\"2 days\"`. The list of supported services for a carrier can be retrieved via the `getSupportedCarriers` method. Required.", alias="carrierService")
    flat_adjustment: Optional[Price] = Field(default=None, alias="flatAdjustment")
    name: Optional[StrictStr] = Field(default=None, description="Name of the carrier rate. Must be unique per rate group. Required.")
    origin_postal_code: Optional[StrictStr] = Field(default=None, description="Shipping origin for this carrier rate. Required.", alias="originPostalCode")
    percentage_adjustment: Optional[StrictStr] = Field(default=None, description="Multiplicative shipping rate modifier as a number in decimal notation. Can be negative. For example `\"5.4\"` increases the rate by 5.4%, `\"-3\"` decreases the rate by 3%. Optional.", alias="percentageAdjustment")
    __properties: ClassVar[List[str]] = ["carrierName", "carrierService", "flatAdjustment", "name", "originPostalCode", "percentageAdjustment"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CarrierRate from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of flat_adjustment
        if self.flat_adjustment:
            _dict['flatAdjustment'] = self.flat_adjustment.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CarrierRate from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "carrierName": obj.get("carrierName"),
            "carrierService": obj.get("carrierService"),
            "flatAdjustment": Price.from_dict(obj["flatAdjustment"]) if obj.get("flatAdjustment") is not None else None,
            "name": obj.get("name"),
            "originPostalCode": obj.get("originPostalCode"),
            "percentageAdjustment": obj.get("percentageAdjustment")
        })
        return _obj



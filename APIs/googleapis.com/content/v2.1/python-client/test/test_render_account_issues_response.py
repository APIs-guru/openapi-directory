# coding: utf-8

"""
    Content API for Shopping

    Manage your product listings and accounts for Google Shopping

    The version of the OpenAPI document: v2.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.render_account_issues_response import RenderAccountIssuesResponse

class TestRenderAccountIssuesResponse(unittest.TestCase):
    """RenderAccountIssuesResponse unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> RenderAccountIssuesResponse:
        """Test RenderAccountIssuesResponse
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `RenderAccountIssuesResponse`
        """
        model = RenderAccountIssuesResponse()
        if include_optional:
            return RenderAccountIssuesResponse(
                alternate_dispute_resolution = openapi_client.models.alternate_dispute_resolution.AlternateDisputeResolution(
                    label = '', 
                    uri = '', ),
                issues = [
                    openapi_client.models.account_issue.AccountIssue(
                        actions = [
                            openapi_client.models.action.Action(
                                builtin_simple_action = openapi_client.models.built_in_simple_action.BuiltInSimpleAction(
                                    additional_content = openapi_client.models.built_in_simple_action_additional_content.BuiltInSimpleActionAdditionalContent(
                                        paragraphs = [
                                            ''
                                            ], 
                                        title = '', ), 
                                    attribute_code = '', 
                                    type = 'BUILT_IN_SIMPLE_ACTION_TYPE_UNSPECIFIED', ), 
                                button_label = '', 
                                external_action = openapi_client.models.external_action.ExternalAction(
                                    type = 'EXTERNAL_ACTION_TYPE_UNSPECIFIED', 
                                    uri = '', ), 
                                is_available = True, 
                                reasons = [
                                    openapi_client.models.action_reason.ActionReason(
                                        action = openapi_client.models.action.Action(
                                            button_label = '', 
                                            is_available = True, ), 
                                        detail = '', 
                                        message = '', )
                                    ], )
                            ], 
                        impact = openapi_client.models.account_issue_impact.AccountIssueImpact(
                            breakdowns = [
                                openapi_client.models.breakdown.Breakdown(
                                    details = [
                                        ''
                                        ], 
                                    regions = [
                                        openapi_client.models.breakdown_region.BreakdownRegion(
                                            code = '', 
                                            name = '', )
                                        ], )
                                ], 
                            message = '', 
                            severity = 'SEVERITY_UNSPECIFIED', ), 
                        prerendered_content = '', 
                        title = '', )
                    ]
            )
        else:
            return RenderAccountIssuesResponse(
        )
        """

    def testRenderAccountIssuesResponse(self):
        """Test RenderAccountIssuesResponse"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

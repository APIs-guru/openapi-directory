# coding: utf-8

"""
    Content API for Shopping

    Manage your product listings and accounts for Google Shopping

    The version of the OpenAPI document: v2.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.recommendation import Recommendation

class TestRecommendation(unittest.TestCase):
    """Recommendation unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> Recommendation:
        """Test Recommendation
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `Recommendation`
        """
        model = Recommendation()
        if include_optional:
            return Recommendation(
                additional_call_to_action = [
                    openapi_client.models.recommendation_call_to_action.RecommendationCallToAction(
                        intent = '', 
                        localized_text = '', 
                        uri = '', )
                    ],
                additional_descriptions = [
                    openapi_client.models.recommendation_description.RecommendationDescription(
                        text = '', 
                        type = 'DESCRIPTION_TYPE_UNSPECIFIED', )
                    ],
                creative = [
                    openapi_client.models.recommendation_creative.RecommendationCreative(
                        type = 'CREATIVE_TYPE_UNSPECIFIED', 
                        uri = '', )
                    ],
                default_call_to_action = openapi_client.models.recommendation_call_to_action.RecommendationCallToAction(
                    intent = '', 
                    localized_text = '', 
                    uri = '', ),
                default_description = '',
                numerical_impact = 56,
                paid = True,
                recommendation_name = '',
                sub_type = '',
                title = '',
                type = ''
            )
        else:
            return Recommendation(
        )
        """

    def testRecommendation(self):
        """Test Recommendation"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

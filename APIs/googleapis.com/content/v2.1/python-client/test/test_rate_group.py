# coding: utf-8

"""
    Content API for Shopping

    Manage your product listings and accounts for Google Shopping

    The version of the OpenAPI document: v2.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.rate_group import RateGroup

class TestRateGroup(unittest.TestCase):
    """RateGroup unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> RateGroup:
        """Test RateGroup
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `RateGroup`
        """
        model = RateGroup()
        if include_optional:
            return RateGroup(
                applicable_shipping_labels = [
                    ''
                    ],
                carrier_rates = [
                    openapi_client.models.carrier_rate.CarrierRate(
                        carrier_name = '', 
                        carrier_service = '', 
                        flat_adjustment = openapi_client.models.price.Price(
                            currency = '', 
                            value = '', ), 
                        name = '', 
                        origin_postal_code = '', 
                        percentage_adjustment = '', )
                    ],
                main_table = openapi_client.models.table.Table(
                    column_headers = openapi_client.models.headers.Headers(
                        locations = [
                            openapi_client.models.location_id_set.LocationIdSet(
                                location_ids = [
                                    ''
                                    ], )
                            ], 
                        number_of_items = [
                            ''
                            ], 
                        postal_code_group_names = [
                            ''
                            ], 
                        prices = [
                            openapi_client.models.price.Price(
                                currency = '', 
                                value = '', )
                            ], 
                        weights = [
                            openapi_client.models.weight.Weight(
                                unit = '', 
                                value = '', )
                            ], ), 
                    name = '', 
                    row_headers = openapi_client.models.headers.Headers(), 
                    rows = [
                        openapi_client.models.row.Row(
                            cells = [
                                openapi_client.models.value.Value(
                                    carrier_rate_name = '', 
                                    flat_rate = openapi_client.models.price.Price(
                                        currency = '', 
                                        value = '', ), 
                                    no_shipping = True, 
                                    price_percentage = '', 
                                    subtable_name = '', )
                                ], )
                        ], ),
                name = '',
                single_value = openapi_client.models.value.Value(
                    carrier_rate_name = '', 
                    flat_rate = openapi_client.models.price.Price(
                        currency = '', 
                        value = '', ), 
                    no_shipping = True, 
                    price_percentage = '', 
                    subtable_name = '', ),
                subtables = [
                    openapi_client.models.table.Table(
                        column_headers = openapi_client.models.headers.Headers(
                            locations = [
                                openapi_client.models.location_id_set.LocationIdSet(
                                    location_ids = [
                                        ''
                                        ], )
                                ], 
                            number_of_items = [
                                ''
                                ], 
                            postal_code_group_names = [
                                ''
                                ], 
                            prices = [
                                openapi_client.models.price.Price(
                                    currency = '', 
                                    value = '', )
                                ], 
                            weights = [
                                openapi_client.models.weight.Weight(
                                    unit = '', 
                                    value = '', )
                                ], ), 
                        name = '', 
                        row_headers = openapi_client.models.headers.Headers(), 
                        rows = [
                            openapi_client.models.row.Row(
                                cells = [
                                    openapi_client.models.value.Value(
                                        carrier_rate_name = '', 
                                        flat_rate = openapi_client.models.price.Price(
                                            currency = '', 
                                            value = '', ), 
                                        no_shipping = True, 
                                        price_percentage = '', 
                                        subtable_name = '', )
                                    ], )
                            ], )
                    ]
            )
        else:
            return RateGroup(
        )
        """

    def testRateGroup(self):
        """Test RateGroup"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

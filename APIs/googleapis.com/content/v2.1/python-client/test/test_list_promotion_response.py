# coding: utf-8

"""
    Content API for Shopping

    Manage your product listings and accounts for Google Shopping

    The version of the OpenAPI document: v2.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.list_promotion_response import ListPromotionResponse

class TestListPromotionResponse(unittest.TestCase):
    """ListPromotionResponse unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> ListPromotionResponse:
        """Test ListPromotionResponse
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `ListPromotionResponse`
        """
        model = ListPromotionResponse()
        if include_optional:
            return ListPromotionResponse(
                next_page_token = '',
                promotions = [
                    openapi_client.models.promotion.Promotion(
                        brand = [
                            ''
                            ], 
                        brand_exclusion = [
                            ''
                            ], 
                        content_language = '', 
                        coupon_value_type = 'COUPON_VALUE_TYPE_UNSPECIFIED', 
                        free_gift_description = '', 
                        free_gift_item_id = '', 
                        free_gift_value = openapi_client.models.price_amount.PriceAmount(
                            currency = '', 
                            value = '', ), 
                        generic_redemption_code = '', 
                        get_this_quantity_discounted = 56, 
                        id = '', 
                        item_group_id = [
                            ''
                            ], 
                        item_group_id_exclusion = [
                            ''
                            ], 
                        item_id = [
                            ''
                            ], 
                        item_id_exclusion = [
                            ''
                            ], 
                        limit_quantity = 56, 
                        limit_value = openapi_client.models.price_amount.PriceAmount(
                            currency = '', 
                            value = '', ), 
                        long_title = '', 
                        minimum_purchase_amount = , 
                        minimum_purchase_quantity = 56, 
                        money_budget = , 
                        money_off_amount = , 
                        offer_type = 'OFFER_TYPE_UNSPECIFIED', 
                        order_limit = 56, 
                        percent_off = 56, 
                        product_applicability = 'PRODUCT_APPLICABILITY_UNSPECIFIED', 
                        product_type = [
                            ''
                            ], 
                        product_type_exclusion = [
                            ''
                            ], 
                        promotion_destination_ids = [
                            ''
                            ], 
                        promotion_display_dates = '', 
                        promotion_display_time_period = openapi_client.models.time_period.TimePeriod(
                            end_time = '', 
                            start_time = '', ), 
                        promotion_effective_dates = '', 
                        promotion_effective_time_period = openapi_client.models.time_period.TimePeriod(
                            end_time = '', 
                            start_time = '', ), 
                        promotion_id = '', 
                        promotion_status = openapi_client.models.promotion_promotion_status.PromotionPromotionStatus(
                            creation_date = '', 
                            destination_statuses = [
                                openapi_client.models.promotion_promotion_status_destination_status.PromotionPromotionStatusDestinationStatus(
                                    destination = '', 
                                    status = 'STATE_UNSPECIFIED', )
                                ], 
                            last_update_date = '', 
                            promotion_issue = [
                                openapi_client.models.promotion_promotion_status_promotion_issue.PromotionPromotionStatusPromotionIssue(
                                    code = '', 
                                    detail = '', )
                                ], ), 
                        promotion_url = '', 
                        redemption_channel = [
                            'REDEMPTION_CHANNEL_UNSPECIFIED'
                            ], 
                        shipping_service_names = [
                            ''
                            ], 
                        store_applicability = 'STORE_APPLICABILITY_UNSPECIFIED', 
                        store_code = [
                            ''
                            ], 
                        store_code_exclusion = [
                            ''
                            ], 
                        target_country = '', )
                    ]
            )
        else:
            return ListPromotionResponse(
        )
        """

    def testListPromotionResponse(self):
        """Test ListPromotionResponse"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

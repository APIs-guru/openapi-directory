# coding: utf-8

"""
    Content API for Shopping

    Manage your product listings and accounts for Google Shopping

    The version of the OpenAPI document: v2.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.search_response import SearchResponse

class TestSearchResponse(unittest.TestCase):
    """SearchResponse unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> SearchResponse:
        """Test SearchResponse
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `SearchResponse`
        """
        model = SearchResponse()
        if include_optional:
            return SearchResponse(
                next_page_token = '',
                results = [
                    openapi_client.models.report_row.ReportRow(
                        best_sellers = openapi_client.models.best_sellers.BestSellers(
                            category_id = '', 
                            country_code = '', 
                            previous_rank = '', 
                            previous_relative_demand = 'RELATIVE_DEMAND_UNSPECIFIED', 
                            rank = '', 
                            relative_demand = 'RELATIVE_DEMAND_UNSPECIFIED', 
                            relative_demand_change = 'RELATIVE_DEMAND_CHANGE_TYPE_UNSPECIFIED', 
                            report_date = openapi_client.models.date.Date(
                                day = 56, 
                                month = 56, 
                                year = 56, ), 
                            report_granularity = 'REPORT_GRANULARITY_UNSPECIFIED', ), 
                        brand = openapi_client.models.brand.Brand(
                            name = '', ), 
                        competitive_visibility = openapi_client.models.competitive_visibility.CompetitiveVisibility(
                            ads_organic_ratio = 1.337, 
                            category_benchmark_visibility_trend = 1.337, 
                            category_id = '', 
                            country_code = '', 
                            date = openapi_client.models.date.Date(
                                day = 56, 
                                month = 56, 
                                year = 56, ), 
                            domain = '', 
                            higher_position_rate = 1.337, 
                            is_your_domain = True, 
                            page_overlap_rate = 1.337, 
                            rank = '', 
                            relative_visibility = 1.337, 
                            traffic_source = 'UNKNOWN', 
                            your_domain_visibility_trend = 1.337, ), 
                        metrics = openapi_client.models.metrics.Metrics(
                            aos = 1.337, 
                            aov_micros = 1.337, 
                            clicks = '', 
                            conversion_rate = 1.337, 
                            conversion_value_micros = '', 
                            conversions = 1.337, 
                            ctr = 1.337, 
                            days_to_ship = 1.337, 
                            impressions = '', 
                            item_days_to_ship = 1.337, 
                            item_fill_rate = 1.337, 
                            ordered_item_sales_micros = '', 
                            ordered_items = '', 
                            orders = '', 
                            rejected_items = '', 
                            return_rate = 1.337, 
                            returned_items = '', 
                            returns_micros = '', 
                            shipped_item_sales_micros = '', 
                            shipped_items = '', 
                            shipped_orders = '', 
                            unshipped_items = 1.337, 
                            unshipped_orders = 1.337, ), 
                        price_competitiveness = openapi_client.models.price_competitiveness.PriceCompetitiveness(
                            benchmark_price_currency_code = '', 
                            benchmark_price_micros = '', 
                            country_code = '', ), 
                        price_insights = openapi_client.models.price_insights.PriceInsights(
                            predicted_clicks_change_fraction = 1.337, 
                            predicted_conversions_change_fraction = 1.337, 
                            predicted_gross_profit_change_fraction = 1.337, 
                            predicted_impressions_change_fraction = 1.337, 
                            predicted_monthly_gross_profit_change_currency_code = '', 
                            predicted_monthly_gross_profit_change_micros = '', 
                            suggested_price_currency_code = '', 
                            suggested_price_micros = '', ), 
                        product_cluster = openapi_client.models.product_cluster.ProductCluster(
                            brand_inventory_status = 'INVENTORY_STATUS_UNSPECIFIED', 
                            category_l1 = '', 
                            category_l2 = '', 
                            category_l3 = '', 
                            category_l4 = '', 
                            category_l5 = '', 
                            inventory_status = 'INVENTORY_STATUS_UNSPECIFIED', 
                            title = '', 
                            variant_gtins = [
                                ''
                                ], ), 
                        product_view = openapi_client.models.product_view.ProductView(
                            aggregated_destination_status = 'AGGREGATED_STATUS_UNSPECIFIED', 
                            availability = '', 
                            category_l1 = '', 
                            category_l2 = '', 
                            category_l3 = '', 
                            category_l4 = '', 
                            category_l5 = '', 
                            channel = 'CHANNEL_UNSPECIFIED', 
                            condition = '', 
                            creation_time = '', 
                            currency_code = '', 
                            expiration_date = , 
                            gtin = [
                                ''
                                ], 
                            id = '', 
                            item_group_id = '', 
                            item_issues = [
                                openapi_client.models.product_view_item_issue.ProductViewItemIssue(
                                    issue_type = openapi_client.models.product_view_item_issue_item_issue_type.ProductViewItemIssueItemIssueType(
                                        canonical_attribute = '', 
                                        code = '', ), 
                                    resolution = 'UNKNOWN', 
                                    severity = openapi_client.models.product_view_item_issue_item_issue_severity.ProductViewItemIssueItemIssueSeverity(
                                        aggregated_severity = 'AGGREGATED_ISSUE_SEVERITY_UNSPECIFIED', 
                                        severity_per_destination = [
                                            openapi_client.models.product_view_item_issue_issue_severity_per_destination.ProductViewItemIssueIssueSeverityPerDestination(
                                                demoted_countries = [
                                                    ''
                                                    ], 
                                                destination = '', 
                                                disapproved_countries = [
                                                    ''
                                                    ], )
                                            ], ), )
                                ], 
                            language_code = '', 
                            offer_id = '', 
                            price_micros = '', 
                            product_type_l1 = '', 
                            product_type_l2 = '', 
                            product_type_l3 = '', 
                            product_type_l4 = '', 
                            product_type_l5 = '', 
                            shipping_label = '', 
                            title = '', ), 
                        segments = openapi_client.models.segments.Segments(
                            category_l1 = '', 
                            category_l2 = '', 
                            category_l3 = '', 
                            category_l4 = '', 
                            category_l5 = '', 
                            currency_code = '', 
                            custom_label0 = '', 
                            custom_label1 = '', 
                            custom_label2 = '', 
                            custom_label3 = '', 
                            custom_label4 = '', 
                            customer_country_code = '', 
                            offer_id = '', 
                            product_type_l1 = '', 
                            product_type_l2 = '', 
                            product_type_l3 = '', 
                            product_type_l4 = '', 
                            product_type_l5 = '', 
                            program = 'PROGRAM_UNSPECIFIED', 
                            title = '', 
                            week = , ), )
                    ]
            )
        else:
            return SearchResponse(
        )
        """

    def testSearchResponse(self):
        """Test SearchResponse"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

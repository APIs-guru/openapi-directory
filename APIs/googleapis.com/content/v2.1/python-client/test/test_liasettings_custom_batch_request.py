# coding: utf-8

"""
    Content API for Shopping

    Manage your product listings and accounts for Google Shopping

    The version of the OpenAPI document: v2.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.liasettings_custom_batch_request import LiasettingsCustomBatchRequest

class TestLiasettingsCustomBatchRequest(unittest.TestCase):
    """LiasettingsCustomBatchRequest unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> LiasettingsCustomBatchRequest:
        """Test LiasettingsCustomBatchRequest
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `LiasettingsCustomBatchRequest`
        """
        model = LiasettingsCustomBatchRequest()
        if include_optional:
            return LiasettingsCustomBatchRequest(
                entries = [
                    openapi_client.models.liasettings_custom_batch_request_entry.LiasettingsCustomBatchRequestEntry(
                        account_id = '', 
                        batch_id = 56, 
                        contact_email = '', 
                        contact_name = '', 
                        country = '', 
                        gmb_email = '', 
                        lia_settings = openapi_client.models.lia_settings.LiaSettings(
                            account_id = '', 
                            country_settings = [
                                openapi_client.models.lia_country_settings.LiaCountrySettings(
                                    about = openapi_client.models.lia_about_page_settings.LiaAboutPageSettings(
                                        status = '', 
                                        url = '', ), 
                                    country = '', 
                                    hosted_local_storefront_active = True, 
                                    inventory = openapi_client.models.lia_inventory_settings.LiaInventorySettings(
                                        inventory_verification_contact_email = '', 
                                        inventory_verification_contact_name = '', 
                                        inventory_verification_contact_status = '', 
                                        status = '', ), 
                                    omnichannel_experience = openapi_client.models.lia_omnichannel_experience.LiaOmnichannelExperience(
                                        country = '', 
                                        lsf_type = '', 
                                        pickup_types = [
                                            ''
                                            ], ), 
                                    on_display_to_order = openapi_client.models.lia_on_display_to_order_settings.LiaOnDisplayToOrderSettings(
                                        shipping_cost_policy_url = '', 
                                        status = '', ), 
                                    pos_data_provider = openapi_client.models.lia_pos_data_provider.LiaPosDataProvider(
                                        pos_data_provider_id = '', 
                                        pos_external_account_id = '', ), 
                                    store_pickup_active = True, )
                                ], 
                            kind = '', ), 
                        merchant_id = '', 
                        method = '', 
                        omnichannel_experience = openapi_client.models.lia_omnichannel_experience.LiaOmnichannelExperience(
                            country = '', 
                            lsf_type = '', ), 
                        pos_data_provider_id = '', 
                        pos_external_account_id = '', )
                    ]
            )
        else:
            return LiasettingsCustomBatchRequest(
        )
        """

    def testLiasettingsCustomBatchRequest(self):
        """Test LiasettingsCustomBatchRequest"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

# coding: utf-8

"""
    Content API for Shopping

    Manage your product listings and accounts for Google Shopping

    The version of the OpenAPI document: v2.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.products_custom_batch_response_entry import ProductsCustomBatchResponseEntry

class TestProductsCustomBatchResponseEntry(unittest.TestCase):
    """ProductsCustomBatchResponseEntry unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> ProductsCustomBatchResponseEntry:
        """Test ProductsCustomBatchResponseEntry
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `ProductsCustomBatchResponseEntry`
        """
        model = ProductsCustomBatchResponseEntry()
        if include_optional:
            return ProductsCustomBatchResponseEntry(
                batch_id = 56,
                errors = openapi_client.models.errors.Errors(
                    code = 56, 
                    message = '', ),
                kind = '',
                product = openapi_client.models.product.Product(
                    additional_image_links = [
                        ''
                        ], 
                    additional_size_type = '', 
                    ads_grouping = '', 
                    ads_labels = [
                        ''
                        ], 
                    ads_redirect = '', 
                    adult = True, 
                    age_group = '', 
                    availability = '', 
                    availability_date = '', 
                    brand = '', 
                    canonical_link = '', 
                    certifications = [
                        openapi_client.models.product_certification.ProductCertification(
                            certification_authority = '', 
                            certification_code = '', 
                            certification_name = '', )
                        ], 
                    channel = '', 
                    cloud_export_additional_properties = [
                        openapi_client.models.cloud_export_additional_properties.CloudExportAdditionalProperties(
                            bool_value = True, 
                            float_value = [
                                1.337
                                ], 
                            int_value = [
                                ''
                                ], 
                            max_value = 1.337, 
                            min_value = 1.337, 
                            property_name = '', 
                            text_value = [
                                ''
                                ], 
                            unit_code = '', )
                        ], 
                    color = '', 
                    condition = '', 
                    content_language = '', 
                    cost_of_goods_sold = openapi_client.models.price.Price(
                        currency = '', 
                        value = '', ), 
                    custom_attributes = [
                        openapi_client.models.custom_attribute.CustomAttribute(
                            group_values = [
                                openapi_client.models.custom_attribute.CustomAttribute(
                                    name = '', 
                                    value = '', )
                                ], 
                            name = '', 
                            value = '', )
                        ], 
                    custom_label0 = '', 
                    custom_label1 = '', 
                    custom_label2 = '', 
                    custom_label3 = '', 
                    custom_label4 = '', 
                    description = '', 
                    disclosure_date = '', 
                    display_ads_id = '', 
                    display_ads_link = '', 
                    display_ads_similar_ids = [
                        ''
                        ], 
                    display_ads_title = '', 
                    display_ads_value = 1.337, 
                    energy_efficiency_class = '', 
                    excluded_destinations = [
                        ''
                        ], 
                    expiration_date = '', 
                    external_seller_id = '', 
                    feed_label = '', 
                    gender = '', 
                    google_product_category = '', 
                    gtin = '', 
                    id = '', 
                    identifier_exists = True, 
                    image_link = '', 
                    included_destinations = [
                        ''
                        ], 
                    installment = openapi_client.models.installment.Installment(
                        amount = openapi_client.models.price.Price(
                            currency = '', 
                            value = '', ), 
                        months = '', ), 
                    is_bundle = True, 
                    item_group_id = '', 
                    kind = '', 
                    lifestyle_image_links = [
                        ''
                        ], 
                    link = '', 
                    link_template = '', 
                    loyalty_points = openapi_client.models.loyalty_points.LoyaltyPoints(
                        name = '', 
                        points_value = '', 
                        ratio = 1.337, ), 
                    material = '', 
                    max_energy_efficiency_class = '', 
                    max_handling_time = '', 
                    min_energy_efficiency_class = '', 
                    min_handling_time = '', 
                    mobile_link = '', 
                    mobile_link_template = '', 
                    mpn = '', 
                    multipack = '', 
                    offer_id = '', 
                    pattern = '', 
                    pause = '', 
                    pickup_method = '', 
                    pickup_sla = '', 
                    price = , 
                    product_details = [
                        openapi_client.models.product_product_detail.ProductProductDetail(
                            attribute_name = '', 
                            attribute_value = '', 
                            section_name = '', )
                        ], 
                    product_height = openapi_client.models.product_dimension.ProductDimension(
                        unit = '', 
                        value = 1.337, ), 
                    product_highlights = [
                        ''
                        ], 
                    product_length = openapi_client.models.product_dimension.ProductDimension(
                        unit = '', 
                        value = 1.337, ), 
                    product_types = [
                        ''
                        ], 
                    product_weight = openapi_client.models.product_weight.ProductWeight(
                        unit = '', 
                        value = 1.337, ), 
                    product_width = , 
                    promotion_ids = [
                        ''
                        ], 
                    sale_price = , 
                    sale_price_effective_date = '', 
                    sell_on_google_quantity = '', 
                    shipping = [
                        openapi_client.models.product_shipping.ProductShipping(
                            country = '', 
                            location_group_name = '', 
                            location_id = '', 
                            max_handling_time = '', 
                            max_transit_time = '', 
                            min_handling_time = '', 
                            min_transit_time = '', 
                            postal_code = '', 
                            region = '', 
                            service = '', )
                        ], 
                    shipping_height = openapi_client.models.product_shipping_dimension.ProductShippingDimension(
                        unit = '', 
                        value = 1.337, ), 
                    shipping_label = '', 
                    shipping_length = openapi_client.models.product_shipping_dimension.ProductShippingDimension(
                        unit = '', 
                        value = 1.337, ), 
                    shipping_weight = openapi_client.models.product_shipping_weight.ProductShippingWeight(
                        unit = '', 
                        value = 1.337, ), 
                    shipping_width = , 
                    shopping_ads_excluded_countries = [
                        ''
                        ], 
                    size_system = '', 
                    size_type = '', 
                    sizes = [
                        ''
                        ], 
                    source = '', 
                    subscription_cost = openapi_client.models.product_subscription_cost.ProductSubscriptionCost(
                        period = '', 
                        period_length = '', ), 
                    target_country = '', 
                    tax_category = '', 
                    taxes = [
                        openapi_client.models.product_tax.ProductTax(
                            country = '', 
                            location_id = '', 
                            postal_code = '', 
                            rate = 1.337, 
                            region = '', 
                            tax_ship = True, )
                        ], 
                    title = '', 
                    transit_time_label = '', 
                    unit_pricing_base_measure = openapi_client.models.product_unit_pricing_base_measure.ProductUnitPricingBaseMeasure(
                        unit = '', 
                        value = '', ), 
                    unit_pricing_measure = openapi_client.models.product_unit_pricing_measure.ProductUnitPricingMeasure(
                        unit = '', 
                        value = 1.337, ), 
                    virtual_model_link = '', )
            )
        else:
            return ProductsCustomBatchResponseEntry(
        )
        """

    def testProductsCustomBatchResponseEntry(self):
        """Test ProductsCustomBatchResponseEntry"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

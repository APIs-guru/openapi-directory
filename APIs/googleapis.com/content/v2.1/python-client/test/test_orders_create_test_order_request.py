# coding: utf-8

"""
    Content API for Shopping

    Manage your product listings and accounts for Google Shopping

    The version of the OpenAPI document: v2.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.orders_create_test_order_request import OrdersCreateTestOrderRequest

class TestOrdersCreateTestOrderRequest(unittest.TestCase):
    """OrdersCreateTestOrderRequest unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> OrdersCreateTestOrderRequest:
        """Test OrdersCreateTestOrderRequest
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `OrdersCreateTestOrderRequest`
        """
        model = OrdersCreateTestOrderRequest()
        if include_optional:
            return OrdersCreateTestOrderRequest(
                country = '',
                template_name = '',
                test_order = openapi_client.models.test_order.TestOrder(
                    delivery_details = openapi_client.models.test_order_delivery_details.TestOrderDeliveryDetails(
                        address = openapi_client.models.test_order_address.TestOrderAddress(
                            country = '', 
                            full_address = [
                                ''
                                ], 
                            is_post_office_box = True, 
                            locality = '', 
                            postal_code = '', 
                            recipient_name = '', 
                            region = '', 
                            street_address = [
                                ''
                                ], ), 
                        is_scheduled_delivery = True, 
                        phone_number = '', ), 
                    enable_orderinvoices = True, 
                    kind = '', 
                    line_items = [
                        openapi_client.models.test_order_line_item.TestOrderLineItem(
                            product = openapi_client.models.test_order_line_item_product.TestOrderLineItemProduct(
                                brand = '', 
                                condition = '', 
                                content_language = '', 
                                fees = [
                                    openapi_client.models.order_line_item_product_fee.OrderLineItemProductFee(
                                        amount = openapi_client.models.price.Price(
                                            currency = '', 
                                            value = '', ), 
                                        name = '', )
                                    ], 
                                gtin = '', 
                                image_link = '', 
                                item_group_id = '', 
                                mpn = '', 
                                offer_id = '', 
                                price = openapi_client.models.price.Price(
                                    currency = '', 
                                    value = '', ), 
                                target_country = '', 
                                title = '', 
                                variant_attributes = [
                                    openapi_client.models.order_line_item_product_variant_attribute.OrderLineItemProductVariantAttribute(
                                        dimension = '', 
                                        value = '', )
                                    ], ), 
                            quantity_ordered = 56, 
                            return_info = openapi_client.models.order_line_item_return_info.OrderLineItemReturnInfo(
                                days_to_return = 56, 
                                is_returnable = True, 
                                policy_url = '', ), 
                            shipping_details = openapi_client.models.order_line_item_shipping_details.OrderLineItemShippingDetails(
                                deliver_by_date = '', 
                                method = openapi_client.models.order_line_item_shipping_details_method.OrderLineItemShippingDetailsMethod(
                                    carrier = '', 
                                    max_days_in_transit = 56, 
                                    method_name = '', 
                                    min_days_in_transit = 56, ), 
                                pickup_promise_in_minutes = 56, 
                                ship_by_date = '', 
                                type = '', ), )
                        ], 
                    notification_mode = '', 
                    pickup_details = openapi_client.models.test_order_pickup_details.TestOrderPickupDetails(
                        location_code = '', 
                        pickup_location_address = openapi_client.models.test_order_address.TestOrderAddress(
                            country = '', 
                            is_post_office_box = True, 
                            locality = '', 
                            postal_code = '', 
                            recipient_name = '', 
                            region = '', ), 
                        pickup_location_type = '', 
                        pickup_persons = [
                            openapi_client.models.test_order_pickup_details_pickup_person.TestOrderPickupDetailsPickupPerson(
                                name = '', 
                                phone_number = '', )
                            ], ), 
                    predefined_billing_address = '', 
                    predefined_delivery_address = '', 
                    predefined_email = '', 
                    predefined_pickup_details = '', 
                    promotions = [
                        openapi_client.models.order_promotion.OrderPromotion(
                            applicable_items = [
                                openapi_client.models.order_promotion_item.OrderPromotionItem(
                                    line_item_id = '', 
                                    offer_id = '', 
                                    product_id = '', 
                                    quantity = 56, )
                                ], 
                            applied_items = [
                                openapi_client.models.order_promotion_item.OrderPromotionItem(
                                    line_item_id = '', 
                                    offer_id = '', 
                                    product_id = '', 
                                    quantity = 56, )
                                ], 
                            end_time = '', 
                            funder = '', 
                            merchant_promotion_id = '', 
                            price_value = , 
                            short_title = '', 
                            start_time = '', 
                            subtype = '', 
                            tax_value = , 
                            title = '', 
                            type = '', )
                        ], 
                    shipping_cost = , 
                    shipping_option = '', )
            )
        else:
            return OrdersCreateTestOrderRequest(
        )
        """

    def testOrdersCreateTestOrderRequest(self):
        """Test OrdersCreateTestOrderRequest"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

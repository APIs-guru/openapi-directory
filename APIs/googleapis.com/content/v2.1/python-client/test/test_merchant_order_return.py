# coding: utf-8

"""
    Content API for Shopping

    Manage your product listings and accounts for Google Shopping

    The version of the OpenAPI document: v2.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.merchant_order_return import MerchantOrderReturn

class TestMerchantOrderReturn(unittest.TestCase):
    """MerchantOrderReturn unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> MerchantOrderReturn:
        """Test MerchantOrderReturn
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `MerchantOrderReturn`
        """
        model = MerchantOrderReturn()
        if include_optional:
            return MerchantOrderReturn(
                creation_date = '',
                merchant_order_id = '',
                order_id = '',
                order_return_id = '',
                return_items = [
                    openapi_client.models.merchant_order_return_item.MerchantOrderReturnItem(
                        customer_return_reason = openapi_client.models.customer_return_reason.CustomerReturnReason(
                            description = '', 
                            reason_code = '', ), 
                        item_id = '', 
                        merchant_rejection_reason = openapi_client.models.merchant_rejection_reason.MerchantRejectionReason(
                            description = '', 
                            reason_code = '', ), 
                        merchant_return_reason = openapi_client.models.refund_reason.RefundReason(
                            description = '', 
                            reason_code = '', ), 
                        product = openapi_client.models.order_line_item_product.OrderLineItemProduct(
                            brand = '', 
                            condition = '', 
                            content_language = '', 
                            fees = [
                                openapi_client.models.order_line_item_product_fee.OrderLineItemProductFee(
                                    amount = openapi_client.models.price.Price(
                                        currency = '', 
                                        value = '', ), 
                                    name = '', )
                                ], 
                            gtin = '', 
                            id = '', 
                            image_link = '', 
                            item_group_id = '', 
                            mpn = '', 
                            offer_id = '', 
                            price = openapi_client.models.price.Price(
                                currency = '', 
                                value = '', ), 
                            shown_image = '', 
                            target_country = '', 
                            title = '', 
                            variant_attributes = [
                                openapi_client.models.order_line_item_product_variant_attribute.OrderLineItemProductVariantAttribute(
                                    dimension = '', 
                                    value = '', )
                                ], ), 
                        refundable_amount = openapi_client.models.monetary_amount.MonetaryAmount(
                            price_amount = , 
                            tax_amount = , ), 
                        return_item_id = '', 
                        return_shipment_ids = [
                            ''
                            ], 
                        shipment_group_id = '', 
                        shipment_unit_id = '', 
                        state = '', )
                    ],
                return_pricing_info = openapi_client.models.return_pricing_info.ReturnPricingInfo(
                    charge_return_shipping_fee = True, 
                    max_return_shipping_fee = openapi_client.models.monetary_amount.MonetaryAmount(
                        price_amount = openapi_client.models.price.Price(
                            currency = '', 
                            value = '', ), 
                        tax_amount = openapi_client.models.price.Price(
                            currency = '', 
                            value = '', ), ), 
                    refundable_items_total_amount = openapi_client.models.monetary_amount.MonetaryAmount(), 
                    refundable_shipping_amount = , 
                    total_refunded_amount = , ),
                return_shipments = [
                    openapi_client.models.return_shipment.ReturnShipment(
                        creation_date = '', 
                        delivery_date = '', 
                        return_method_type = '', 
                        shipment_id = '', 
                        shipment_tracking_infos = [
                            openapi_client.models.shipment_tracking_info.ShipmentTrackingInfo(
                                carrier = '', 
                                tracking_number = '', )
                            ], 
                        shipping_date = '', 
                        state = '', )
                    ]
            )
        else:
            return MerchantOrderReturn(
        )
        """

    def testMerchantOrderReturn(self):
        """Test MerchantOrderReturn"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

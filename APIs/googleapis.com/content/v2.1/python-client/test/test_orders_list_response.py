# coding: utf-8

"""
    Content API for Shopping

    Manage your product listings and accounts for Google Shopping

    The version of the OpenAPI document: v2.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.orders_list_response import OrdersListResponse

class TestOrdersListResponse(unittest.TestCase):
    """OrdersListResponse unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> OrdersListResponse:
        """Test OrdersListResponse
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `OrdersListResponse`
        """
        model = OrdersListResponse()
        if include_optional:
            return OrdersListResponse(
                kind = '',
                next_page_token = '',
                resources = [
                    openapi_client.models.order.Order(
                        acknowledged = True, 
                        annotations = [
                            openapi_client.models.order_order_annotation.OrderOrderAnnotation(
                                key = '', 
                                value = '', )
                            ], 
                        billing_address = openapi_client.models.order_address.OrderAddress(
                            country = '', 
                            full_address = [
                                ''
                                ], 
                            is_post_office_box = True, 
                            locality = '', 
                            postal_code = '', 
                            recipient_name = '', 
                            region = '', 
                            street_address = [
                                ''
                                ], ), 
                        customer = openapi_client.models.order_customer.OrderCustomer(
                            full_name = '', 
                            invoice_receiving_email = '', 
                            loyalty_info = openapi_client.models.order_customer_loyalty_info.OrderCustomerLoyaltyInfo(
                                loyalty_number = '', 
                                name = '', ), 
                            marketing_rights_info = openapi_client.models.order_customer_marketing_rights_info.OrderCustomerMarketingRightsInfo(
                                explicit_marketing_preference = '', 
                                last_updated_timestamp = '', 
                                marketing_email_address = '', ), ), 
                        delivery_details = openapi_client.models.order_delivery_details.OrderDeliveryDetails(
                            address = openapi_client.models.order_address.OrderAddress(
                                country = '', 
                                is_post_office_box = True, 
                                locality = '', 
                                postal_code = '', 
                                recipient_name = '', 
                                region = '', ), 
                            phone_number = '', ), 
                        id = '', 
                        kind = '', 
                        line_items = [
                            openapi_client.models.order_line_item.OrderLineItem(
                                adjustments = [
                                    openapi_client.models.order_line_item_adjustment.OrderLineItemAdjustment(
                                        price_adjustment = openapi_client.models.price.Price(
                                            currency = '', 
                                            value = '', ), 
                                        tax_adjustment = openapi_client.models.price.Price(
                                            currency = '', 
                                            value = '', ), 
                                        type = '', )
                                    ], 
                                cancellations = [
                                    openapi_client.models.order_cancellation.OrderCancellation(
                                        actor = '', 
                                        creation_date = '', 
                                        quantity = 56, 
                                        reason = '', 
                                        reason_text = '', )
                                    ], 
                                id = '', 
                                price = , 
                                product = openapi_client.models.order_line_item_product.OrderLineItemProduct(
                                    brand = '', 
                                    condition = '', 
                                    content_language = '', 
                                    fees = [
                                        openapi_client.models.order_line_item_product_fee.OrderLineItemProductFee(
                                            amount = , 
                                            name = '', )
                                        ], 
                                    gtin = '', 
                                    id = '', 
                                    image_link = '', 
                                    item_group_id = '', 
                                    mpn = '', 
                                    offer_id = '', 
                                    shown_image = '', 
                                    target_country = '', 
                                    title = '', 
                                    variant_attributes = [
                                        openapi_client.models.order_line_item_product_variant_attribute.OrderLineItemProductVariantAttribute(
                                            dimension = '', 
                                            value = '', )
                                        ], ), 
                                quantity_canceled = 56, 
                                quantity_delivered = 56, 
                                quantity_ordered = 56, 
                                quantity_pending = 56, 
                                quantity_ready_for_pickup = 56, 
                                quantity_returned = 56, 
                                quantity_shipped = 56, 
                                quantity_undeliverable = 56, 
                                return_info = openapi_client.models.order_line_item_return_info.OrderLineItemReturnInfo(
                                    days_to_return = 56, 
                                    is_returnable = True, 
                                    policy_url = '', ), 
                                returns = [
                                    openapi_client.models.order_return.OrderReturn(
                                        actor = '', 
                                        creation_date = '', 
                                        quantity = 56, 
                                        reason = '', 
                                        reason_text = '', )
                                    ], 
                                shipping_details = openapi_client.models.order_line_item_shipping_details.OrderLineItemShippingDetails(
                                    deliver_by_date = '', 
                                    method = openapi_client.models.order_line_item_shipping_details_method.OrderLineItemShippingDetailsMethod(
                                        carrier = '', 
                                        max_days_in_transit = 56, 
                                        method_name = '', 
                                        min_days_in_transit = 56, ), 
                                    pickup_promise_in_minutes = 56, 
                                    ship_by_date = '', 
                                    type = '', ), 
                                tax = , )
                            ], 
                        merchant_id = '', 
                        merchant_order_id = '', 
                        net_price_amount = , 
                        net_tax_amount = , 
                        payment_status = '', 
                        pickup_details = openapi_client.models.order_pickup_details.OrderPickupDetails(
                            collectors = [
                                openapi_client.models.order_pickup_details_collector.OrderPickupDetailsCollector(
                                    name = '', 
                                    phone_number = '', )
                                ], 
                            location_id = '', 
                            pickup_type = '', ), 
                        placed_date = '', 
                        promotions = [
                            openapi_client.models.order_promotion.OrderPromotion(
                                applicable_items = [
                                    openapi_client.models.order_promotion_item.OrderPromotionItem(
                                        line_item_id = '', 
                                        offer_id = '', 
                                        product_id = '', 
                                        quantity = 56, )
                                    ], 
                                applied_items = [
                                    openapi_client.models.order_promotion_item.OrderPromotionItem(
                                        line_item_id = '', 
                                        offer_id = '', 
                                        product_id = '', 
                                        quantity = 56, )
                                    ], 
                                end_time = '', 
                                funder = '', 
                                merchant_promotion_id = '', 
                                price_value = , 
                                short_title = '', 
                                start_time = '', 
                                subtype = '', 
                                tax_value = , 
                                title = '', 
                                type = '', )
                            ], 
                        refunds = [
                            openapi_client.models.order_refund.OrderRefund(
                                actor = '', 
                                creation_date = '', 
                                reason = '', 
                                reason_text = '', )
                            ], 
                        shipments = [
                            openapi_client.models.order_shipment.OrderShipment(
                                carrier = '', 
                                creation_date = '', 
                                delivery_date = '', 
                                id = '', 
                                scheduled_delivery_details = openapi_client.models.order_shipment_scheduled_delivery_details.OrderShipmentScheduledDeliveryDetails(
                                    carrier_phone_number = '', 
                                    scheduled_date = '', ), 
                                shipment_group_id = '', 
                                status = '', 
                                tracking_id = '', )
                            ], 
                        shipping_cost = , 
                        shipping_cost_tax = , 
                        status = '', 
                        tax_collector = '', )
                    ]
            )
        else:
            return OrdersListResponse(
        )
        """

    def testOrdersListResponse(self):
        """Test OrdersListResponse"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

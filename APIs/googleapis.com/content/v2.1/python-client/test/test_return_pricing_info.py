# coding: utf-8

"""
    Content API for Shopping

    Manage your product listings and accounts for Google Shopping

    The version of the OpenAPI document: v2.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.return_pricing_info import ReturnPricingInfo

class TestReturnPricingInfo(unittest.TestCase):
    """ReturnPricingInfo unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> ReturnPricingInfo:
        """Test ReturnPricingInfo
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `ReturnPricingInfo`
        """
        model = ReturnPricingInfo()
        if include_optional:
            return ReturnPricingInfo(
                charge_return_shipping_fee = True,
                max_return_shipping_fee = openapi_client.models.monetary_amount.MonetaryAmount(
                    price_amount = openapi_client.models.price.Price(
                        currency = '', 
                        value = '', ), 
                    tax_amount = openapi_client.models.price.Price(
                        currency = '', 
                        value = '', ), ),
                refundable_items_total_amount = openapi_client.models.monetary_amount.MonetaryAmount(
                    price_amount = openapi_client.models.price.Price(
                        currency = '', 
                        value = '', ), 
                    tax_amount = openapi_client.models.price.Price(
                        currency = '', 
                        value = '', ), ),
                refundable_shipping_amount = openapi_client.models.monetary_amount.MonetaryAmount(
                    price_amount = openapi_client.models.price.Price(
                        currency = '', 
                        value = '', ), 
                    tax_amount = openapi_client.models.price.Price(
                        currency = '', 
                        value = '', ), ),
                total_refunded_amount = openapi_client.models.monetary_amount.MonetaryAmount(
                    price_amount = openapi_client.models.price.Price(
                        currency = '', 
                        value = '', ), 
                    tax_amount = openapi_client.models.price.Price(
                        currency = '', 
                        value = '', ), )
            )
        else:
            return ReturnPricingInfo(
        )
        """

    def testReturnPricingInfo(self):
        """Test ReturnPricingInfo"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

# coding: utf-8

"""
    Content API for Shopping

    Manage your product listings and accounts for Google Shopping

    The version of the OpenAPI document: v2.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.shipping_settings import ShippingSettings

class TestShippingSettings(unittest.TestCase):
    """ShippingSettings unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> ShippingSettings:
        """Test ShippingSettings
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `ShippingSettings`
        """
        model = ShippingSettings()
        if include_optional:
            return ShippingSettings(
                account_id = '',
                postal_code_groups = [
                    openapi_client.models.postal_code_group.PostalCodeGroup(
                        country = '', 
                        name = '', 
                        postal_code_ranges = [
                            openapi_client.models.postal_code_range.PostalCodeRange(
                                postal_code_range_begin = '', 
                                postal_code_range_end = '', )
                            ], )
                    ],
                services = [
                    openapi_client.models.service.Service(
                        active = True, 
                        currency = '', 
                        delivery_country = '', 
                        delivery_time = openapi_client.models.delivery_time.DeliveryTime(
                            cutoff_time = openapi_client.models.cutoff_time.CutoffTime(
                                hour = 56, 
                                minute = 56, 
                                timezone = '', ), 
                            handling_business_day_config = openapi_client.models.business_day_config.BusinessDayConfig(
                                business_days = [
                                    ''
                                    ], ), 
                            holiday_cutoffs = [
                                openapi_client.models.holiday_cutoff.HolidayCutoff(
                                    deadline_date = '', 
                                    deadline_hour = 56, 
                                    deadline_timezone = '', 
                                    holiday_id = '', 
                                    visible_from_date = '', )
                                ], 
                            max_handling_time_in_days = 56, 
                            max_transit_time_in_days = 56, 
                            min_handling_time_in_days = 56, 
                            min_transit_time_in_days = 56, 
                            transit_business_day_config = openapi_client.models.business_day_config.BusinessDayConfig(), 
                            transit_time_table = openapi_client.models.transit_table.TransitTable(
                                postal_code_group_names = [
                                    ''
                                    ], 
                                rows = [
                                    openapi_client.models.transit_table_transit_time_row.TransitTableTransitTimeRow(
                                        values = [
                                            openapi_client.models.transit_table_transit_time_row_transit_time_value.TransitTableTransitTimeRowTransitTimeValue(
                                                max_transit_time_in_days = 56, 
                                                min_transit_time_in_days = 56, )
                                            ], )
                                    ], 
                                transit_time_labels = [
                                    ''
                                    ], ), 
                            warehouse_based_delivery_times = [
                                openapi_client.models.warehouse_based_delivery_time.WarehouseBasedDeliveryTime(
                                    carrier = '', 
                                    carrier_service = '', 
                                    origin_administrative_area = '', 
                                    origin_city = '', 
                                    origin_country = '', 
                                    origin_postal_code = '', 
                                    origin_street_address = '', 
                                    warehouse_name = '', )
                                ], ), 
                        eligibility = '', 
                        minimum_order_value = openapi_client.models.price.Price(
                            currency = '', 
                            value = '', ), 
                        minimum_order_value_table = openapi_client.models.minimum_order_value_table.MinimumOrderValueTable(
                            store_code_set_with_movs = [
                                openapi_client.models.minimum_order_value_table_store_code_set_with_mov.MinimumOrderValueTableStoreCodeSetWithMov(
                                    store_codes = [
                                        ''
                                        ], 
                                    value = openapi_client.models.price.Price(
                                        currency = '', ), )
                                ], ), 
                        name = '', 
                        pickup_service = openapi_client.models.pickup_carrier_service.PickupCarrierService(
                            carrier_name = '', 
                            service_name = '', ), 
                        rate_groups = [
                            openapi_client.models.rate_group.RateGroup(
                                applicable_shipping_labels = [
                                    ''
                                    ], 
                                carrier_rates = [
                                    openapi_client.models.carrier_rate.CarrierRate(
                                        carrier_name = '', 
                                        carrier_service = '', 
                                        flat_adjustment = , 
                                        name = '', 
                                        origin_postal_code = '', 
                                        percentage_adjustment = '', )
                                    ], 
                                main_table = openapi_client.models.table.Table(
                                    column_headers = openapi_client.models.headers.Headers(
                                        locations = [
                                            openapi_client.models.location_id_set.LocationIdSet(
                                                location_ids = [
                                                    ''
                                                    ], )
                                            ], 
                                        number_of_items = [
                                            ''
                                            ], 
                                        prices = [
                                            
                                            ], 
                                        weights = [
                                            openapi_client.models.weight.Weight(
                                                unit = '', )
                                            ], ), 
                                    name = '', 
                                    row_headers = openapi_client.models.headers.Headers(), ), 
                                name = '', 
                                single_value = openapi_client.models.value.Value(
                                    carrier_rate_name = '', 
                                    flat_rate = , 
                                    no_shipping = True, 
                                    price_percentage = '', 
                                    subtable_name = '', ), 
                                subtables = [
                                    openapi_client.models.table.Table(
                                        name = '', )
                                    ], )
                            ], 
                        shipment_type = '', 
                        store_config = openapi_client.models.service_store_config.ServiceStoreConfig(
                            cutoff_config = openapi_client.models.service_store_config_cutoff_config.ServiceStoreConfigCutoffConfig(
                                local_cutoff_time = openapi_client.models.service_store_config_cutoff_config_local_cutoff_time.ServiceStoreConfigCutoffConfigLocalCutoffTime(
                                    hour = '', 
                                    minute = '', ), 
                                no_delivery_post_cutoff = True, 
                                store_close_offset_hours = '', ), 
                            service_radius = openapi_client.models.distance.Distance(
                                unit = '', ), 
                            store_service_type = '', ), )
                    ],
                warehouses = [
                    openapi_client.models.warehouse.Warehouse(
                        business_day_config = openapi_client.models.business_day_config.BusinessDayConfig(
                            business_days = [
                                ''
                                ], ), 
                        cutoff_time = openapi_client.models.warehouse_cutoff_time.WarehouseCutoffTime(
                            hour = 56, 
                            minute = 56, ), 
                        handling_days = '', 
                        name = '', 
                        shipping_address = openapi_client.models.address.Address(
                            administrative_area = '', 
                            city = '', 
                            country = '', 
                            postal_code = '', 
                            street_address = '', ), )
                    ]
            )
        else:
            return ShippingSettings(
        )
        """

    def testShippingSettings(self):
        """Test ShippingSettings"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

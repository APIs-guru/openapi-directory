# coding: utf-8

"""
    Content API for Shopping

    Manage your product listings and accounts for Google Shopping

    The version of the OpenAPI document: v2.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.model_date import ModelDate
from typing import Optional, Set
from typing_extensions import Self

class BestSellers(BaseModel):
    """
    Fields related to the [Best sellers reports](https://support.google.com/merchants/answer/9488679).
    """ # noqa: E501
    category_id: Optional[StrictStr] = Field(default=None, description="Google product category ID to calculate the ranking for, represented in [Google's product taxonomy](https://support.google.com/merchants/answer/6324436). If a `WHERE` condition on `best_sellers.category_id` is not specified in the query, rankings for all top-level categories are returned.", alias="categoryId")
    country_code: Optional[StrictStr] = Field(default=None, description="Country where the ranking is calculated. A `WHERE` condition on `best_sellers.country_code` is required in the query.", alias="countryCode")
    previous_rank: Optional[StrictStr] = Field(default=None, description="Popularity rank in the previous week or month.", alias="previousRank")
    previous_relative_demand: Optional[StrictStr] = Field(default=None, description="Estimated demand in relation to the item with the highest popularity rank in the same category and country in the previous week or month.", alias="previousRelativeDemand")
    rank: Optional[StrictStr] = Field(default=None, description="Popularity on Shopping ads and free listings, in the selected category and country, based on the estimated number of units sold.")
    relative_demand: Optional[StrictStr] = Field(default=None, description="Estimated demand in relation to the item with the highest popularity rank in the same category and country.", alias="relativeDemand")
    relative_demand_change: Optional[StrictStr] = Field(default=None, description="Change in the estimated demand. Whether it rose, sank or remained flat.", alias="relativeDemandChange")
    report_date: Optional[ModelDate] = Field(default=None, alias="reportDate")
    report_granularity: Optional[StrictStr] = Field(default=None, description="Granularity of the report. The ranking can be done over a week or a month timeframe. A `WHERE` condition on `best_sellers.report_granularity` is required in the query.", alias="reportGranularity")
    __properties: ClassVar[List[str]] = ["categoryId", "countryCode", "previousRank", "previousRelativeDemand", "rank", "relativeDemand", "relativeDemandChange", "reportDate", "reportGranularity"]

    @field_validator('previous_relative_demand')
    def previous_relative_demand_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['RELATIVE_DEMAND_UNSPECIFIED', 'VERY_LOW', 'LOW', 'MEDIUM', 'HIGH', 'VERY_HIGH']):
            raise ValueError("must be one of enum values ('RELATIVE_DEMAND_UNSPECIFIED', 'VERY_LOW', 'LOW', 'MEDIUM', 'HIGH', 'VERY_HIGH')")
        return value

    @field_validator('relative_demand')
    def relative_demand_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['RELATIVE_DEMAND_UNSPECIFIED', 'VERY_LOW', 'LOW', 'MEDIUM', 'HIGH', 'VERY_HIGH']):
            raise ValueError("must be one of enum values ('RELATIVE_DEMAND_UNSPECIFIED', 'VERY_LOW', 'LOW', 'MEDIUM', 'HIGH', 'VERY_HIGH')")
        return value

    @field_validator('relative_demand_change')
    def relative_demand_change_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['RELATIVE_DEMAND_CHANGE_TYPE_UNSPECIFIED', 'SINKER', 'FLAT', 'RISER']):
            raise ValueError("must be one of enum values ('RELATIVE_DEMAND_CHANGE_TYPE_UNSPECIFIED', 'SINKER', 'FLAT', 'RISER')")
        return value

    @field_validator('report_granularity')
    def report_granularity_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['REPORT_GRANULARITY_UNSPECIFIED', 'WEEKLY', 'MONTHLY']):
            raise ValueError("must be one of enum values ('REPORT_GRANULARITY_UNSPECIFIED', 'WEEKLY', 'MONTHLY')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of BestSellers from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of report_date
        if self.report_date:
            _dict['reportDate'] = self.report_date.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of BestSellers from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "categoryId": obj.get("categoryId"),
            "countryCode": obj.get("countryCode"),
            "previousRank": obj.get("previousRank"),
            "previousRelativeDemand": obj.get("previousRelativeDemand"),
            "rank": obj.get("rank"),
            "relativeDemand": obj.get("relativeDemand"),
            "relativeDemandChange": obj.get("relativeDemandChange"),
            "reportDate": ModelDate.from_dict(obj["reportDate"]) if obj.get("reportDate") is not None else None,
            "reportGranularity": obj.get("reportGranularity")
        })
        return _obj



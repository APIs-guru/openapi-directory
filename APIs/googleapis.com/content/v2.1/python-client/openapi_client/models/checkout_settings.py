# coding: utf-8

"""
    Content API for Shopping

    Manage your product listings and accounts for Google Shopping

    The version of the OpenAPI document: v2.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.url_settings import UrlSettings
from typing import Optional, Set
from typing_extensions import Self

class CheckoutSettings(BaseModel):
    """
    `CheckoutSettings` for a specific merchant ID.
    """ # noqa: E501
    effective_enrollment_state: Optional[StrictStr] = Field(default=None, description="Output only. The effective value of enrollment state for a given merchant ID. If account level settings are present then this value will be a copy of the account level settings. Otherwise, it will have the value of the parent account.", alias="effectiveEnrollmentState")
    effective_review_state: Optional[StrictStr] = Field(default=None, description="Output only. The effective value of review state for a given merchant ID. If account level settings are present then this value will be a copy of the account level settings. Otherwise, it will have the value of the parent account.", alias="effectiveReviewState")
    effective_uri_settings: Optional[UrlSettings] = Field(default=None, alias="effectiveUriSettings")
    enrollment_state: Optional[StrictStr] = Field(default=None, description="Output only. Reflects the merchant enrollment state in `Checkout` feature.", alias="enrollmentState")
    merchant_id: Optional[StrictStr] = Field(default=None, description="Required. The ID of the account.", alias="merchantId")
    review_state: Optional[StrictStr] = Field(default=None, description="Output only. Reflects the merchant review state in `Checkout` feature. This is set based on the data quality reviews of the URL provided by the merchant. A merchant with enrollment state as `ENROLLED` can be in the following review states: `IN_REVIEW`, `APPROVED` or `DISAPPROVED`. A merchant must be in an enrollment_state of `ENROLLED` before a review can begin for the merchant.", alias="reviewState")
    uri_settings: Optional[UrlSettings] = Field(default=None, alias="uriSettings")
    __properties: ClassVar[List[str]] = ["effectiveEnrollmentState", "effectiveReviewState", "effectiveUriSettings", "enrollmentState", "merchantId", "reviewState", "uriSettings"]

    @field_validator('effective_enrollment_state')
    def effective_enrollment_state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['CHECKOUT_ON_MERCHANT_ENROLLMENT_STATE_UNSPECIFIED', 'INACTIVE', 'ENROLLED', 'OPT_OUT']):
            raise ValueError("must be one of enum values ('CHECKOUT_ON_MERCHANT_ENROLLMENT_STATE_UNSPECIFIED', 'INACTIVE', 'ENROLLED', 'OPT_OUT')")
        return value

    @field_validator('effective_review_state')
    def effective_review_state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['CHECKOUT_ON_MERCHANT_REVIEW_STATE_UNSPECIFIED', 'IN_REVIEW', 'APPROVED', 'DISAPPROVED']):
            raise ValueError("must be one of enum values ('CHECKOUT_ON_MERCHANT_REVIEW_STATE_UNSPECIFIED', 'IN_REVIEW', 'APPROVED', 'DISAPPROVED')")
        return value

    @field_validator('enrollment_state')
    def enrollment_state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['CHECKOUT_ON_MERCHANT_ENROLLMENT_STATE_UNSPECIFIED', 'INACTIVE', 'ENROLLED', 'OPT_OUT']):
            raise ValueError("must be one of enum values ('CHECKOUT_ON_MERCHANT_ENROLLMENT_STATE_UNSPECIFIED', 'INACTIVE', 'ENROLLED', 'OPT_OUT')")
        return value

    @field_validator('review_state')
    def review_state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['CHECKOUT_ON_MERCHANT_REVIEW_STATE_UNSPECIFIED', 'IN_REVIEW', 'APPROVED', 'DISAPPROVED']):
            raise ValueError("must be one of enum values ('CHECKOUT_ON_MERCHANT_REVIEW_STATE_UNSPECIFIED', 'IN_REVIEW', 'APPROVED', 'DISAPPROVED')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CheckoutSettings from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "effective_enrollment_state",
            "effective_review_state",
            "enrollment_state",
            "review_state",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of effective_uri_settings
        if self.effective_uri_settings:
            _dict['effectiveUriSettings'] = self.effective_uri_settings.to_dict()
        # override the default output from pydantic by calling `to_dict()` of uri_settings
        if self.uri_settings:
            _dict['uriSettings'] = self.uri_settings.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CheckoutSettings from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "effectiveEnrollmentState": obj.get("effectiveEnrollmentState"),
            "effectiveReviewState": obj.get("effectiveReviewState"),
            "effectiveUriSettings": UrlSettings.from_dict(obj["effectiveUriSettings"]) if obj.get("effectiveUriSettings") is not None else None,
            "enrollmentState": obj.get("enrollmentState"),
            "merchantId": obj.get("merchantId"),
            "reviewState": obj.get("reviewState"),
            "uriSettings": UrlSettings.from_dict(obj["uriSettings"]) if obj.get("uriSettings") is not None else None
        })
        return _obj



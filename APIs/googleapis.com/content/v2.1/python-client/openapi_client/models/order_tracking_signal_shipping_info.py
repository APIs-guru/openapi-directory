# coding: utf-8

"""
    Content API for Shopping

    Manage your product listings and accounts for Google Shopping

    The version of the OpenAPI document: v2.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class OrderTrackingSignalShippingInfo(BaseModel):
    """
    The shipping information for the order.
    """ # noqa: E501
    actual_delivery_time: Optional[datetime] = Field(default=None, alias="actualDeliveryTime")
    carrier_name: Optional[StrictStr] = Field(default=None, description="The name of the shipping carrier for the delivery. This field is required if one of the following fields is absent: earliest_delivery_promise_time, latest_delivery_promise_time, and actual_delivery_time.", alias="carrierName")
    carrier_service_name: Optional[StrictStr] = Field(default=None, description="The service type for fulfillment, e.g., GROUND, FIRST_CLASS, etc.", alias="carrierServiceName")
    earliest_delivery_promise_time: Optional[datetime] = Field(default=None, alias="earliestDeliveryPromiseTime")
    latest_delivery_promise_time: Optional[datetime] = Field(default=None, alias="latestDeliveryPromiseTime")
    origin_postal_code: Optional[StrictStr] = Field(default=None, description="The origin postal code, as a continuous string without spaces or dashes, e.g. \"95016\". This field will be anonymized in returned OrderTrackingSignal creation response.", alias="originPostalCode")
    origin_region_code: Optional[StrictStr] = Field(default=None, description="The [CLDR territory code] (http://www.unicode.org/repos/cldr/tags/latest/common/main/en.xml) for the shipping origin.", alias="originRegionCode")
    shipment_id: Optional[StrictStr] = Field(default=None, description="Required. The shipment ID. This field will be hashed in returned OrderTrackingSignal creation response.", alias="shipmentId")
    shipped_time: Optional[datetime] = Field(default=None, alias="shippedTime")
    shipping_status: Optional[StrictStr] = Field(default=None, description="The status of the shipment.", alias="shippingStatus")
    tracking_id: Optional[StrictStr] = Field(default=None, description="The tracking ID of the shipment. This field is required if one of the following fields is absent: earliest_delivery_promise_time, latest_delivery_promise_time, and actual_delivery_time.", alias="trackingId")
    __properties: ClassVar[List[str]] = ["actualDeliveryTime", "carrierName", "carrierServiceName", "earliestDeliveryPromiseTime", "latestDeliveryPromiseTime", "originPostalCode", "originRegionCode", "shipmentId", "shippedTime", "shippingStatus", "trackingId"]

    @field_validator('shipping_status')
    def shipping_status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['SHIPPING_STATE_UNSPECIFIED', 'SHIPPED', 'DELIVERED']):
            raise ValueError("must be one of enum values ('SHIPPING_STATE_UNSPECIFIED', 'SHIPPED', 'DELIVERED')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of OrderTrackingSignalShippingInfo from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of OrderTrackingSignalShippingInfo from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "actualDeliveryTime": obj.get("actualDeliveryTime"),
            "carrierName": obj.get("carrierName"),
            "carrierServiceName": obj.get("carrierServiceName"),
            "earliestDeliveryPromiseTime": obj.get("earliestDeliveryPromiseTime"),
            "latestDeliveryPromiseTime": obj.get("latestDeliveryPromiseTime"),
            "originPostalCode": obj.get("originPostalCode"),
            "originRegionCode": obj.get("originRegionCode"),
            "shipmentId": obj.get("shipmentId"),
            "shippedTime": obj.get("shippedTime"),
            "shippingStatus": obj.get("shippingStatus"),
            "trackingId": obj.get("trackingId")
        })
        return _obj



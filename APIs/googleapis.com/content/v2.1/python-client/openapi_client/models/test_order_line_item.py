# coding: utf-8

"""
    Content API for Shopping

    Manage your product listings and accounts for Google Shopping

    The version of the OpenAPI document: v2.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.order_line_item_return_info import OrderLineItemReturnInfo
from openapi_client.models.order_line_item_shipping_details import OrderLineItemShippingDetails
from openapi_client.models.test_order_line_item_product import TestOrderLineItemProduct
from typing import Optional, Set
from typing_extensions import Self

class TestOrderLineItem(BaseModel):
    """
    TestOrderLineItem
    """ # noqa: E501
    product: Optional[TestOrderLineItemProduct] = None
    quantity_ordered: Optional[StrictInt] = Field(default=None, description="Required. Number of items ordered.", alias="quantityOrdered")
    return_info: Optional[OrderLineItemReturnInfo] = Field(default=None, alias="returnInfo")
    shipping_details: Optional[OrderLineItemShippingDetails] = Field(default=None, alias="shippingDetails")
    __properties: ClassVar[List[str]] = ["product", "quantityOrdered", "returnInfo", "shippingDetails"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of TestOrderLineItem from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of product
        if self.product:
            _dict['product'] = self.product.to_dict()
        # override the default output from pydantic by calling `to_dict()` of return_info
        if self.return_info:
            _dict['returnInfo'] = self.return_info.to_dict()
        # override the default output from pydantic by calling `to_dict()` of shipping_details
        if self.shipping_details:
            _dict['shippingDetails'] = self.shipping_details.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of TestOrderLineItem from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "product": TestOrderLineItemProduct.from_dict(obj["product"]) if obj.get("product") is not None else None,
            "quantityOrdered": obj.get("quantityOrdered"),
            "returnInfo": OrderLineItemReturnInfo.from_dict(obj["returnInfo"]) if obj.get("returnInfo") is not None else None,
            "shippingDetails": OrderLineItemShippingDetails.from_dict(obj["shippingDetails"]) if obj.get("shippingDetails") is not None else None
        })
        return _obj



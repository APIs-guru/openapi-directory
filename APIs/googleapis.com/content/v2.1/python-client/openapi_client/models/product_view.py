# coding: utf-8

"""
    Content API for Shopping

    Manage your product listings and accounts for Google Shopping

    The version of the OpenAPI document: v2.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.model_date import ModelDate
from openapi_client.models.product_view_item_issue import ProductViewItemIssue
from typing import Optional, Set
from typing_extensions import Self

class ProductView(BaseModel):
    """
    Product fields. Values are only set for fields requested explicitly in the request's search query.
    """ # noqa: E501
    aggregated_destination_status: Optional[StrictStr] = Field(default=None, description="Aggregated destination status.", alias="aggregatedDestinationStatus")
    availability: Optional[StrictStr] = Field(default=None, description="Availability of the product.")
    brand: Optional[StrictStr] = Field(default=None, description="Brand of the product.")
    category_l1: Optional[StrictStr] = Field(default=None, description="First level of the product category in [Google's product taxonomy](https://support.google.com/merchants/answer/6324436).", alias="categoryL1")
    category_l2: Optional[StrictStr] = Field(default=None, description="Second level of the product category in [Google's product taxonomy](https://support.google.com/merchants/answer/6324436).", alias="categoryL2")
    category_l3: Optional[StrictStr] = Field(default=None, description="Third level of the product category in [Google's product taxonomy](https://support.google.com/merchants/answer/6324436).", alias="categoryL3")
    category_l4: Optional[StrictStr] = Field(default=None, description="Fourth level of the product category in [Google's product taxonomy](https://support.google.com/merchants/answer/6324436).", alias="categoryL4")
    category_l5: Optional[StrictStr] = Field(default=None, description="Fifth level of the product category in [Google's product taxonomy](https://support.google.com/merchants/answer/6324436).", alias="categoryL5")
    channel: Optional[StrictStr] = Field(default=None, description="Channel of the product (online versus local).")
    condition: Optional[StrictStr] = Field(default=None, description="Condition of the product.")
    creation_time: Optional[StrictStr] = Field(default=None, description="The time the merchant created the product in timestamp seconds.", alias="creationTime")
    currency_code: Optional[StrictStr] = Field(default=None, description="Product price currency code (for example, ISO 4217). Absent if product price is not available.", alias="currencyCode")
    expiration_date: Optional[ModelDate] = Field(default=None, alias="expirationDate")
    gtin: Optional[List[StrictStr]] = Field(default=None, description="GTIN of the product.")
    id: Optional[StrictStr] = Field(default=None, description="The REST ID of the product, in the form of channel:contentLanguage:targetCountry:offerId. Content API methods that operate on products take this as their productId parameter. Should always be included in the SELECT clause.")
    item_group_id: Optional[StrictStr] = Field(default=None, description="Item group ID provided by the merchant for grouping variants together.", alias="itemGroupId")
    item_issues: Optional[List[ProductViewItemIssue]] = Field(default=None, description="List of item issues for the product.", alias="itemIssues")
    language_code: Optional[StrictStr] = Field(default=None, description="Language code of the product in BCP 47 format.", alias="languageCode")
    offer_id: Optional[StrictStr] = Field(default=None, description="Merchant-provided id of the product.", alias="offerId")
    price_micros: Optional[StrictStr] = Field(default=None, description="Product price specified as micros (1 millionth of a standard unit, 1 USD = 1000000 micros) in the product currency. Absent in case the information about the price of the product is not available.", alias="priceMicros")
    product_type_l1: Optional[StrictStr] = Field(default=None, description="First level of the product type in merchant's own [product taxonomy](https://support.google.com/merchants/answer/6324436).", alias="productTypeL1")
    product_type_l2: Optional[StrictStr] = Field(default=None, description="Second level of the product type in merchant's own [product taxonomy](https://support.google.com/merchants/answer/6324436).", alias="productTypeL2")
    product_type_l3: Optional[StrictStr] = Field(default=None, description="Third level of the product type in merchant's own [product taxonomy](https://support.google.com/merchants/answer/6324436).", alias="productTypeL3")
    product_type_l4: Optional[StrictStr] = Field(default=None, description="Fourth level of the product type in merchant's own [product taxonomy](https://support.google.com/merchants/answer/6324436).", alias="productTypeL4")
    product_type_l5: Optional[StrictStr] = Field(default=None, description="Fifth level of the product type in merchant's own [product taxonomy](https://support.google.com/merchants/answer/6324436).", alias="productTypeL5")
    shipping_label: Optional[StrictStr] = Field(default=None, description="The normalized shipping label specified in the feed", alias="shippingLabel")
    title: Optional[StrictStr] = Field(default=None, description="Title of the product.")
    __properties: ClassVar[List[str]] = ["aggregatedDestinationStatus", "availability", "brand", "categoryL1", "categoryL2", "categoryL3", "categoryL4", "categoryL5", "channel", "condition", "creationTime", "currencyCode", "expirationDate", "gtin", "id", "itemGroupId", "itemIssues", "languageCode", "offerId", "priceMicros", "productTypeL1", "productTypeL2", "productTypeL3", "productTypeL4", "productTypeL5", "shippingLabel", "title"]

    @field_validator('aggregated_destination_status')
    def aggregated_destination_status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['AGGREGATED_STATUS_UNSPECIFIED', 'NOT_ELIGIBLE_OR_DISAPPROVED', 'PENDING', 'ELIGIBLE_LIMITED', 'ELIGIBLE']):
            raise ValueError("must be one of enum values ('AGGREGATED_STATUS_UNSPECIFIED', 'NOT_ELIGIBLE_OR_DISAPPROVED', 'PENDING', 'ELIGIBLE_LIMITED', 'ELIGIBLE')")
        return value

    @field_validator('channel')
    def channel_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['CHANNEL_UNSPECIFIED', 'LOCAL', 'ONLINE']):
            raise ValueError("must be one of enum values ('CHANNEL_UNSPECIFIED', 'LOCAL', 'ONLINE')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ProductView from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of expiration_date
        if self.expiration_date:
            _dict['expirationDate'] = self.expiration_date.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in item_issues (list)
        _items = []
        if self.item_issues:
            for _item_item_issues in self.item_issues:
                if _item_item_issues:
                    _items.append(_item_item_issues.to_dict())
            _dict['itemIssues'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ProductView from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "aggregatedDestinationStatus": obj.get("aggregatedDestinationStatus"),
            "availability": obj.get("availability"),
            "brand": obj.get("brand"),
            "categoryL1": obj.get("categoryL1"),
            "categoryL2": obj.get("categoryL2"),
            "categoryL3": obj.get("categoryL3"),
            "categoryL4": obj.get("categoryL4"),
            "categoryL5": obj.get("categoryL5"),
            "channel": obj.get("channel"),
            "condition": obj.get("condition"),
            "creationTime": obj.get("creationTime"),
            "currencyCode": obj.get("currencyCode"),
            "expirationDate": ModelDate.from_dict(obj["expirationDate"]) if obj.get("expirationDate") is not None else None,
            "gtin": obj.get("gtin"),
            "id": obj.get("id"),
            "itemGroupId": obj.get("itemGroupId"),
            "itemIssues": [ProductViewItemIssue.from_dict(_item) for _item in obj["itemIssues"]] if obj.get("itemIssues") is not None else None,
            "languageCode": obj.get("languageCode"),
            "offerId": obj.get("offerId"),
            "priceMicros": obj.get("priceMicros"),
            "productTypeL1": obj.get("productTypeL1"),
            "productTypeL2": obj.get("productTypeL2"),
            "productTypeL3": obj.get("productTypeL3"),
            "productTypeL4": obj.get("productTypeL4"),
            "productTypeL5": obj.get("productTypeL5"),
            "shippingLabel": obj.get("shippingLabel"),
            "title": obj.get("title")
        })
        return _obj



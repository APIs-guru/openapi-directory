# coding: utf-8

"""
    Content API for Shopping

    Manage your product listings and accounts for Google Shopping

    The version of the OpenAPI document: v2.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.order_cancellation import OrderCancellation
from openapi_client.models.order_line_item_adjustment import OrderLineItemAdjustment
from openapi_client.models.order_line_item_product import OrderLineItemProduct
from openapi_client.models.order_line_item_return_info import OrderLineItemReturnInfo
from openapi_client.models.order_line_item_shipping_details import OrderLineItemShippingDetails
from openapi_client.models.order_merchant_provided_annotation import OrderMerchantProvidedAnnotation
from openapi_client.models.order_return import OrderReturn
from openapi_client.models.price import Price
from typing import Optional, Set
from typing_extensions import Self

class OrderLineItem(BaseModel):
    """
    OrderLineItem
    """ # noqa: E501
    adjustments: Optional[List[OrderLineItemAdjustment]] = Field(default=None, description="Price and tax adjustments applied on the line item.")
    annotations: Optional[List[OrderMerchantProvidedAnnotation]] = Field(default=None, description="Annotations that are attached to the line item.")
    cancellations: Optional[List[OrderCancellation]] = Field(default=None, description="Cancellations of the line item.")
    id: Optional[StrictStr] = Field(default=None, description="The ID of the line item.")
    price: Optional[Price] = None
    product: Optional[OrderLineItemProduct] = None
    quantity_canceled: Optional[StrictInt] = Field(default=None, description="Number of items canceled.", alias="quantityCanceled")
    quantity_delivered: Optional[StrictInt] = Field(default=None, description="Number of items delivered.", alias="quantityDelivered")
    quantity_ordered: Optional[StrictInt] = Field(default=None, description="Number of items ordered.", alias="quantityOrdered")
    quantity_pending: Optional[StrictInt] = Field(default=None, description="Number of items pending.", alias="quantityPending")
    quantity_ready_for_pickup: Optional[StrictInt] = Field(default=None, description="Number of items ready for pickup.", alias="quantityReadyForPickup")
    quantity_returned: Optional[StrictInt] = Field(default=None, description="Number of items returned.", alias="quantityReturned")
    quantity_shipped: Optional[StrictInt] = Field(default=None, description="Number of items shipped.", alias="quantityShipped")
    quantity_undeliverable: Optional[StrictInt] = Field(default=None, description="Number of items undeliverable.", alias="quantityUndeliverable")
    return_info: Optional[OrderLineItemReturnInfo] = Field(default=None, alias="returnInfo")
    returns: Optional[List[OrderReturn]] = Field(default=None, description="Returns of the line item.")
    shipping_details: Optional[OrderLineItemShippingDetails] = Field(default=None, alias="shippingDetails")
    tax: Optional[Price] = None
    __properties: ClassVar[List[str]] = ["adjustments", "annotations", "cancellations", "id", "price", "product", "quantityCanceled", "quantityDelivered", "quantityOrdered", "quantityPending", "quantityReadyForPickup", "quantityReturned", "quantityShipped", "quantityUndeliverable", "returnInfo", "returns", "shippingDetails", "tax"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of OrderLineItem from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in adjustments (list)
        _items = []
        if self.adjustments:
            for _item_adjustments in self.adjustments:
                if _item_adjustments:
                    _items.append(_item_adjustments.to_dict())
            _dict['adjustments'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in annotations (list)
        _items = []
        if self.annotations:
            for _item_annotations in self.annotations:
                if _item_annotations:
                    _items.append(_item_annotations.to_dict())
            _dict['annotations'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in cancellations (list)
        _items = []
        if self.cancellations:
            for _item_cancellations in self.cancellations:
                if _item_cancellations:
                    _items.append(_item_cancellations.to_dict())
            _dict['cancellations'] = _items
        # override the default output from pydantic by calling `to_dict()` of price
        if self.price:
            _dict['price'] = self.price.to_dict()
        # override the default output from pydantic by calling `to_dict()` of product
        if self.product:
            _dict['product'] = self.product.to_dict()
        # override the default output from pydantic by calling `to_dict()` of return_info
        if self.return_info:
            _dict['returnInfo'] = self.return_info.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in returns (list)
        _items = []
        if self.returns:
            for _item_returns in self.returns:
                if _item_returns:
                    _items.append(_item_returns.to_dict())
            _dict['returns'] = _items
        # override the default output from pydantic by calling `to_dict()` of shipping_details
        if self.shipping_details:
            _dict['shippingDetails'] = self.shipping_details.to_dict()
        # override the default output from pydantic by calling `to_dict()` of tax
        if self.tax:
            _dict['tax'] = self.tax.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of OrderLineItem from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "adjustments": [OrderLineItemAdjustment.from_dict(_item) for _item in obj["adjustments"]] if obj.get("adjustments") is not None else None,
            "annotations": [OrderMerchantProvidedAnnotation.from_dict(_item) for _item in obj["annotations"]] if obj.get("annotations") is not None else None,
            "cancellations": [OrderCancellation.from_dict(_item) for _item in obj["cancellations"]] if obj.get("cancellations") is not None else None,
            "id": obj.get("id"),
            "price": Price.from_dict(obj["price"]) if obj.get("price") is not None else None,
            "product": OrderLineItemProduct.from_dict(obj["product"]) if obj.get("product") is not None else None,
            "quantityCanceled": obj.get("quantityCanceled"),
            "quantityDelivered": obj.get("quantityDelivered"),
            "quantityOrdered": obj.get("quantityOrdered"),
            "quantityPending": obj.get("quantityPending"),
            "quantityReadyForPickup": obj.get("quantityReadyForPickup"),
            "quantityReturned": obj.get("quantityReturned"),
            "quantityShipped": obj.get("quantityShipped"),
            "quantityUndeliverable": obj.get("quantityUndeliverable"),
            "returnInfo": OrderLineItemReturnInfo.from_dict(obj["returnInfo"]) if obj.get("returnInfo") is not None else None,
            "returns": [OrderReturn.from_dict(_item) for _item in obj["returns"]] if obj.get("returns") is not None else None,
            "shippingDetails": OrderLineItemShippingDetails.from_dict(obj["shippingDetails"]) if obj.get("shippingDetails") is not None else None,
            "tax": Price.from_dict(obj["tax"]) if obj.get("tax") is not None else None
        })
        return _obj



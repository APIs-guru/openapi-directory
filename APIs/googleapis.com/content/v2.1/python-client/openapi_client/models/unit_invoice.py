# coding: utf-8

"""
    Content API for Shopping

    Manage your product listings and accounts for Google Shopping

    The version of the OpenAPI document: v2.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.price import Price
from openapi_client.models.unit_invoice_additional_charge import UnitInvoiceAdditionalCharge
from openapi_client.models.unit_invoice_tax_line import UnitInvoiceTaxLine
from typing import Optional, Set
from typing_extensions import Self

class UnitInvoice(BaseModel):
    """
    UnitInvoice
    """ # noqa: E501
    additional_charges: Optional[List[UnitInvoiceAdditionalCharge]] = Field(default=None, description="Additional charges for a unit, for example, shipping costs.", alias="additionalCharges")
    unit_price: Optional[Price] = Field(default=None, alias="unitPrice")
    unit_price_taxes: Optional[List[UnitInvoiceTaxLine]] = Field(default=None, description="Tax amounts to apply to the unit price.", alias="unitPriceTaxes")
    __properties: ClassVar[List[str]] = ["additionalCharges", "unitPrice", "unitPriceTaxes"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of UnitInvoice from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in additional_charges (list)
        _items = []
        if self.additional_charges:
            for _item_additional_charges in self.additional_charges:
                if _item_additional_charges:
                    _items.append(_item_additional_charges.to_dict())
            _dict['additionalCharges'] = _items
        # override the default output from pydantic by calling `to_dict()` of unit_price
        if self.unit_price:
            _dict['unitPrice'] = self.unit_price.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in unit_price_taxes (list)
        _items = []
        if self.unit_price_taxes:
            for _item_unit_price_taxes in self.unit_price_taxes:
                if _item_unit_price_taxes:
                    _items.append(_item_unit_price_taxes.to_dict())
            _dict['unitPriceTaxes'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of UnitInvoice from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "additionalCharges": [UnitInvoiceAdditionalCharge.from_dict(_item) for _item in obj["additionalCharges"]] if obj.get("additionalCharges") is not None else None,
            "unitPrice": Price.from_dict(obj["unitPrice"]) if obj.get("unitPrice") is not None else None,
            "unitPriceTaxes": [UnitInvoiceTaxLine.from_dict(_item) for _item in obj["unitPriceTaxes"]] if obj.get("unitPriceTaxes") is not None else None
        })
        return _obj



# coding: utf-8

"""
    Content API for Shopping

    Manage your product listings and accounts for Google Shopping

    The version of the OpenAPI document: v2.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.carrier_rate import CarrierRate
from openapi_client.models.table import Table
from openapi_client.models.value import Value
from typing import Optional, Set
from typing_extensions import Self

class RateGroup(BaseModel):
    """
    RateGroup
    """ # noqa: E501
    applicable_shipping_labels: Optional[List[StrictStr]] = Field(default=None, description="A list of shipping labels defining the products to which this rate group applies to. This is a disjunction: only one of the labels has to match for the rate group to apply. May only be empty for the last rate group of a service. Required.", alias="applicableShippingLabels")
    carrier_rates: Optional[List[CarrierRate]] = Field(default=None, description="A list of carrier rates that can be referred to by `mainTable` or `singleValue`.", alias="carrierRates")
    main_table: Optional[Table] = Field(default=None, alias="mainTable")
    name: Optional[StrictStr] = Field(default=None, description="Name of the rate group. Optional. If set has to be unique within shipping service.")
    single_value: Optional[Value] = Field(default=None, alias="singleValue")
    subtables: Optional[List[Table]] = Field(default=None, description="A list of subtables referred to by `mainTable`. Can only be set if `mainTable` is set.")
    __properties: ClassVar[List[str]] = ["applicableShippingLabels", "carrierRates", "mainTable", "name", "singleValue", "subtables"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of RateGroup from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in carrier_rates (list)
        _items = []
        if self.carrier_rates:
            for _item_carrier_rates in self.carrier_rates:
                if _item_carrier_rates:
                    _items.append(_item_carrier_rates.to_dict())
            _dict['carrierRates'] = _items
        # override the default output from pydantic by calling `to_dict()` of main_table
        if self.main_table:
            _dict['mainTable'] = self.main_table.to_dict()
        # override the default output from pydantic by calling `to_dict()` of single_value
        if self.single_value:
            _dict['singleValue'] = self.single_value.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in subtables (list)
        _items = []
        if self.subtables:
            for _item_subtables in self.subtables:
                if _item_subtables:
                    _items.append(_item_subtables.to_dict())
            _dict['subtables'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of RateGroup from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "applicableShippingLabels": obj.get("applicableShippingLabels"),
            "carrierRates": [CarrierRate.from_dict(_item) for _item in obj["carrierRates"]] if obj.get("carrierRates") is not None else None,
            "mainTable": Table.from_dict(obj["mainTable"]) if obj.get("mainTable") is not None else None,
            "name": obj.get("name"),
            "singleValue": Value.from_dict(obj["singleValue"]) if obj.get("singleValue") is not None else None,
            "subtables": [Table.from_dict(_item) for _item in obj["subtables"]] if obj.get("subtables") is not None else None
        })
        return _obj



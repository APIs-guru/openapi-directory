# coding: utf-8

"""
    Content API for Shopping

    Manage your product listings and accounts for Google Shopping

    The version of the OpenAPI document: v2.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class Metrics(BaseModel):
    """
    Performance metrics. Values are only set for metrics requested explicitly in the request's search query.
    """ # noqa: E501
    aos: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Average order size - the average number of items in an order. **This metric cannot be segmented by product dimensions and customer_country_code.**")
    aov_micros: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Average order value in micros (1 millionth of a standard unit, 1 USD = 1000000 micros) - the average value (total price of items) of all placed orders. The currency of the returned value is stored in the currency_code segment. If this metric is selected, 'segments.currency_code' is automatically added to the SELECT clause in the search query (unless it is explicitly selected by the user) and the currency_code segment is populated in the response. **This metric cannot be segmented by product dimensions and customer_country_code.**", alias="aovMicros")
    clicks: Optional[StrictStr] = Field(default=None, description="Number of clicks.")
    conversion_rate: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Number of conversions divided by the number of clicks, reported on the impression date. The metric is currently available only for the FREE_PRODUCT_LISTING program.", alias="conversionRate")
    conversion_value_micros: Optional[StrictStr] = Field(default=None, description="Value of conversions in micros (1 millionth of a standard unit, 1 USD = 1000000 micros) attributed to the product, reported on the conversion date. The metric is currently available only for the FREE_PRODUCT_LISTING program. The currency of the returned value is stored in the currency_code segment. If this metric is selected, 'segments.currency_code' is automatically added to the SELECT clause in the search query (unless it is explicitly selected by the user) and the currency_code segment is populated in the response.", alias="conversionValueMicros")
    conversions: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Number of conversions attributed to the product, reported on the conversion date. Depending on the attribution model, a conversion might be distributed across multiple clicks, where each click gets its own credit assigned. This metric is a sum of all such credits. The metric is currently available only for the FREE_PRODUCT_LISTING program.")
    ctr: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Click-through rate - the number of clicks merchant's products receive (clicks) divided by the number of times the products are shown (impressions).")
    days_to_ship: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Average number of days between an order being placed and the order being fully shipped, reported on the last shipment date. **This metric cannot be segmented by product dimensions and customer_country_code.**", alias="daysToShip")
    impressions: Optional[StrictStr] = Field(default=None, description="Number of times merchant's products are shown.")
    item_days_to_ship: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Average number of days between an item being ordered and the item being **This metric cannot be segmented by customer_country_code.**", alias="itemDaysToShip")
    item_fill_rate: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Percentage of shipped items in relation to all finalized items (shipped or rejected by the merchant; unshipped items are not taken into account), reported on the order date. Item fill rate is lowered by merchant rejections. **This metric cannot be segmented by customer_country_code.**", alias="itemFillRate")
    ordered_item_sales_micros: Optional[StrictStr] = Field(default=None, description="Total price of ordered items in micros (1 millionth of a standard unit, 1 USD = 1000000 micros). Excludes shipping, taxes (US only), and customer cancellations that happened within 30 minutes of placing the order. The currency of the returned value is stored in the currency_code segment. If this metric is selected, 'segments.currency_code' is automatically added to the SELECT clause in the search query (unless it is explicitly selected by the user) and the currency_code segment is populated in the response. **This metric cannot be segmented by customer_country_code.**", alias="orderedItemSalesMicros")
    ordered_items: Optional[StrictStr] = Field(default=None, description="Number of ordered items. Excludes customer cancellations that happened within 30 minutes of placing the order. **This metric cannot be segmented by customer_country_code.**", alias="orderedItems")
    orders: Optional[StrictStr] = Field(default=None, description="Number of placed orders. Excludes customer cancellations that happened within 30 minutes of placing the order. **This metric cannot be segmented by product dimensions and customer_country_code.**")
    rejected_items: Optional[StrictStr] = Field(default=None, description="Number of ordered items canceled by the merchant, reported on the order date. **This metric cannot be segmented by customer_country_code.**", alias="rejectedItems")
    return_rate: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Total price of returned items divided by the total price of shipped items, reported on the order date. If this metric is selected, 'segments.currency_code' is automatically added to the SELECT clause in the search query (unless it is explicitly selected by the user) and the currency_code segment is populated in the response. **This metric cannot be segmented by customer_country_code.**", alias="returnRate")
    returned_items: Optional[StrictStr] = Field(default=None, description="Number of ordered items sent back for return, reported on the date when the merchant accepted the return. **This metric cannot be segmented by customer_country_code.**", alias="returnedItems")
    returns_micros: Optional[StrictStr] = Field(default=None, description="Total price of ordered items sent back for return in micros (1 millionth of a standard unit, 1 USD = 1000000 micros), reported on the date when the merchant accepted the return. The currency of the returned value is stored in the currency_code segment. If this metric is selected, 'segments.currency_code' is automatically added to the SELECT clause in the search query (unless it is explicitly selected by the user) and the currency_code segment is populated in the response. **This metric cannot be segmented by customer_country_code.**", alias="returnsMicros")
    shipped_item_sales_micros: Optional[StrictStr] = Field(default=None, description="Total price of shipped items in micros (1 millionth of a standard unit, 1 USD = 1000000 micros), reported on the order date. Excludes shipping and taxes (US only). The currency of the returned value is stored in the currency_code segment. If this metric is selected, 'segments.currency_code' is automatically added to the SELECT clause in the search query (unless it is explicitly selected by the user) and the currency_code segment is populated in the response. **This metric cannot be segmented by customer_country_code.**", alias="shippedItemSalesMicros")
    shipped_items: Optional[StrictStr] = Field(default=None, description="Number of shipped items, reported on the shipment date. **This metric cannot be segmented by customer_country_code.**", alias="shippedItems")
    shipped_orders: Optional[StrictStr] = Field(default=None, description="Number of fully shipped orders, reported on the last shipment date. **This metric cannot be segmented by product dimensions and customer_country_code.**", alias="shippedOrders")
    unshipped_items: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Number of ordered items not shipped up until the end of the queried day. If a multi-day period is specified in the search query, the returned value is the average number of unshipped items over the days in the queried period. **This metric cannot be segmented by customer_country_code.**", alias="unshippedItems")
    unshipped_orders: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Number of orders not shipped or partially shipped up until the end of the queried day. If a multi-day period is specified in the search query, the returned value is the average number of unshipped orders over the days in the queried period. **This metric cannot be segmented by product dimensions and customer_country_code.**", alias="unshippedOrders")
    __properties: ClassVar[List[str]] = ["aos", "aovMicros", "clicks", "conversionRate", "conversionValueMicros", "conversions", "ctr", "daysToShip", "impressions", "itemDaysToShip", "itemFillRate", "orderedItemSalesMicros", "orderedItems", "orders", "rejectedItems", "returnRate", "returnedItems", "returnsMicros", "shippedItemSalesMicros", "shippedItems", "shippedOrders", "unshippedItems", "unshippedOrders"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Metrics from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Metrics from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "aos": obj.get("aos"),
            "aovMicros": obj.get("aovMicros"),
            "clicks": obj.get("clicks"),
            "conversionRate": obj.get("conversionRate"),
            "conversionValueMicros": obj.get("conversionValueMicros"),
            "conversions": obj.get("conversions"),
            "ctr": obj.get("ctr"),
            "daysToShip": obj.get("daysToShip"),
            "impressions": obj.get("impressions"),
            "itemDaysToShip": obj.get("itemDaysToShip"),
            "itemFillRate": obj.get("itemFillRate"),
            "orderedItemSalesMicros": obj.get("orderedItemSalesMicros"),
            "orderedItems": obj.get("orderedItems"),
            "orders": obj.get("orders"),
            "rejectedItems": obj.get("rejectedItems"),
            "returnRate": obj.get("returnRate"),
            "returnedItems": obj.get("returnedItems"),
            "returnsMicros": obj.get("returnsMicros"),
            "shippedItemSalesMicros": obj.get("shippedItemSalesMicros"),
            "shippedItems": obj.get("shippedItems"),
            "shippedOrders": obj.get("shippedOrders"),
            "unshippedItems": obj.get("unshippedItems"),
            "unshippedOrders": obj.get("unshippedOrders")
        })
        return _obj



# coding: utf-8

"""
    Content API for Shopping

    Manage your product listings and accounts for Google Shopping

    The version of the OpenAPI document: v2.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class CloudExportAdditionalProperties(BaseModel):
    """
    Product property for the Cloud Retail API. For example, properties for a TV product could be \"Screen-Resolution\" or \"Screen-Size\".
    """ # noqa: E501
    bool_value: Optional[StrictBool] = Field(default=None, description="Boolean value of the given property. For example for a TV product, \"True\" or \"False\" if the screen is UHD.", alias="boolValue")
    float_value: Optional[List[Union[StrictFloat, StrictInt]]] = Field(default=None, description="Float values of the given property. For example for a TV product 1.2345. Maximum number of specified values for this field is 400. Values are stored in an arbitrary but consistent order.", alias="floatValue")
    int_value: Optional[List[StrictStr]] = Field(default=None, description="Integer values of the given property. For example, 1080 for a screen resolution of a TV product. Maximum number of specified values for this field is 400. Values are stored in an arbitrary but consistent order.", alias="intValue")
    max_value: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Maximum float value of the given property. For example for a TV product 100.00.", alias="maxValue")
    min_value: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Minimum float value of the given property. For example for a TV product 1.00.", alias="minValue")
    property_name: Optional[StrictStr] = Field(default=None, description="Name of the given property. For example, \"Screen-Resolution\" for a TV product. Maximum string size is 256 characters.", alias="propertyName")
    text_value: Optional[List[StrictStr]] = Field(default=None, description="Text value of the given property. For example, \"8K(UHD)\" could be a text value for a TV product. Maximum number of specified values for this field is 400. Values are stored in an arbitrary but consistent order. Maximum string size is 256 characters.", alias="textValue")
    unit_code: Optional[StrictStr] = Field(default=None, description="Unit of the given property. For example, \"Pixels\" for a TV product. Maximum string size is 256 bytes.", alias="unitCode")
    __properties: ClassVar[List[str]] = ["boolValue", "floatValue", "intValue", "maxValue", "minValue", "propertyName", "textValue", "unitCode"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CloudExportAdditionalProperties from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CloudExportAdditionalProperties from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "boolValue": obj.get("boolValue"),
            "floatValue": obj.get("floatValue"),
            "intValue": obj.get("intValue"),
            "maxValue": obj.get("maxValue"),
            "minValue": obj.get("minValue"),
            "propertyName": obj.get("propertyName"),
            "textValue": obj.get("textValue"),
            "unitCode": obj.get("unitCode")
        })
        return _obj



# coding: utf-8

"""
    Content API for Shopping

    Manage your product listings and accounts for Google Shopping

    The version of the OpenAPI document: v2.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.price import Price
from typing import Optional, Set
from typing_extensions import Self

class ProductShipping(BaseModel):
    """
    ProductShipping
    """ # noqa: E501
    country: Optional[StrictStr] = Field(default=None, description="The CLDR territory code of the country to which an item will ship.")
    location_group_name: Optional[StrictStr] = Field(default=None, description="The location where the shipping is applicable, represented by a location group name.", alias="locationGroupName")
    location_id: Optional[StrictStr] = Field(default=None, description="The numeric ID of a location that the shipping rate applies to as defined in the Google Ads API.", alias="locationId")
    max_handling_time: Optional[StrictStr] = Field(default=None, description="Maximum handling time (inclusive) between when the order is received and shipped in business days. 0 means that the order is shipped on the same day as it's received if it happens before the cut-off time. Both maxHandlingTime and maxTransitTime are required if providing shipping speeds.", alias="maxHandlingTime")
    max_transit_time: Optional[StrictStr] = Field(default=None, description="Maximum transit time (inclusive) between when the order has shipped and when it's delivered in business days. 0 means that the order is delivered on the same day as it ships. Both maxHandlingTime and maxTransitTime are required if providing shipping speeds.", alias="maxTransitTime")
    min_handling_time: Optional[StrictStr] = Field(default=None, description="Minimum handling time (inclusive) between when the order is received and shipped in business days. 0 means that the order is shipped on the same day as it's received if it happens before the cut-off time. minHandlingTime can only be present together with maxHandlingTime; but it's not required if maxHandlingTime is present.", alias="minHandlingTime")
    min_transit_time: Optional[StrictStr] = Field(default=None, description="Minimum transit time (inclusive) between when the order has shipped and when it's delivered in business days. 0 means that the order is delivered on the same day as it ships. minTransitTime can only be present together with maxTransitTime; but it's not required if maxTransitTime is present.", alias="minTransitTime")
    postal_code: Optional[StrictStr] = Field(default=None, description="The postal code range that the shipping rate applies to, represented by a postal code, a postal code prefix followed by a * wildcard, a range between two postal codes or two postal code prefixes of equal length.", alias="postalCode")
    price: Optional[Price] = None
    region: Optional[StrictStr] = Field(default=None, description="The geographic region to which a shipping rate applies.")
    service: Optional[StrictStr] = Field(default=None, description="A free-form description of the service class or delivery speed.")
    __properties: ClassVar[List[str]] = ["country", "locationGroupName", "locationId", "maxHandlingTime", "maxTransitTime", "minHandlingTime", "minTransitTime", "postalCode", "price", "region", "service"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ProductShipping from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of price
        if self.price:
            _dict['price'] = self.price.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ProductShipping from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "country": obj.get("country"),
            "locationGroupName": obj.get("locationGroupName"),
            "locationId": obj.get("locationId"),
            "maxHandlingTime": obj.get("maxHandlingTime"),
            "maxTransitTime": obj.get("maxTransitTime"),
            "minHandlingTime": obj.get("minHandlingTime"),
            "minTransitTime": obj.get("minTransitTime"),
            "postalCode": obj.get("postalCode"),
            "price": Price.from_dict(obj["price"]) if obj.get("price") is not None else None,
            "region": obj.get("region"),
            "service": obj.get("service")
        })
        return _obj



# coding: utf-8

"""
    Content API for Shopping

    Manage your product listings and accounts for Google Shopping

    The version of the OpenAPI document: v2.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.price import Price
from openapi_client.models.return_policy_policy import ReturnPolicyPolicy
from openapi_client.models.return_policy_seasonal_override import ReturnPolicySeasonalOverride
from typing import Optional, Set
from typing_extensions import Self

class ReturnPolicy(BaseModel):
    """
    Return policy resource.
    """ # noqa: E501
    country: Optional[StrictStr] = Field(default=None, description="Required. The country of sale where the return policy is applicable.")
    kind: Optional[StrictStr] = Field(default=None, description="Identifies what kind of resource this is. Value: the fixed string \"`content#returnPolicy`\"")
    label: Optional[StrictStr] = Field(default=None, description="Required. The user-defined label of the return policy. For the default policy, use the label \"default\".")
    name: Optional[StrictStr] = Field(default=None, description="Required. The name of the policy as shown in Merchant Center.")
    non_free_return_reasons: Optional[List[StrictStr]] = Field(default=None, description="Return reasons that will incur return fees.", alias="nonFreeReturnReasons")
    policy: Optional[ReturnPolicyPolicy] = None
    return_policy_id: Optional[StrictStr] = Field(default=None, description="Return policy ID generated by Google.", alias="returnPolicyId")
    return_shipping_fee: Optional[Price] = Field(default=None, alias="returnShippingFee")
    seasonal_overrides: Optional[List[ReturnPolicySeasonalOverride]] = Field(default=None, description="An optional list of seasonal overrides.", alias="seasonalOverrides")
    __properties: ClassVar[List[str]] = ["country", "kind", "label", "name", "nonFreeReturnReasons", "policy", "returnPolicyId", "returnShippingFee", "seasonalOverrides"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ReturnPolicy from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of policy
        if self.policy:
            _dict['policy'] = self.policy.to_dict()
        # override the default output from pydantic by calling `to_dict()` of return_shipping_fee
        if self.return_shipping_fee:
            _dict['returnShippingFee'] = self.return_shipping_fee.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in seasonal_overrides (list)
        _items = []
        if self.seasonal_overrides:
            for _item_seasonal_overrides in self.seasonal_overrides:
                if _item_seasonal_overrides:
                    _items.append(_item_seasonal_overrides.to_dict())
            _dict['seasonalOverrides'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ReturnPolicy from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "country": obj.get("country"),
            "kind": obj.get("kind"),
            "label": obj.get("label"),
            "name": obj.get("name"),
            "nonFreeReturnReasons": obj.get("nonFreeReturnReasons"),
            "policy": ReturnPolicyPolicy.from_dict(obj["policy"]) if obj.get("policy") is not None else None,
            "returnPolicyId": obj.get("returnPolicyId"),
            "returnShippingFee": Price.from_dict(obj["returnShippingFee"]) if obj.get("returnShippingFee") is not None else None,
            "seasonalOverrides": [ReturnPolicySeasonalOverride.from_dict(_item) for _item in obj["seasonalOverrides"]] if obj.get("seasonalOverrides") is not None else None
        })
        return _obj



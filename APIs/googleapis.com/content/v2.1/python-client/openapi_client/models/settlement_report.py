# coding: utf-8

"""
    Content API for Shopping

    Manage your product listings and accounts for Google Shopping

    The version of the OpenAPI document: v2.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.price import Price
from typing import Optional, Set
from typing_extensions import Self

class SettlementReport(BaseModel):
    """
     Settlement reports detail order-level and item-level credits and debits between you and Google.
    """ # noqa: E501
    end_date: Optional[StrictStr] = Field(default=None, description="The end date on which all transactions are included in the report, in ISO 8601 format.", alias="endDate")
    kind: Optional[StrictStr] = Field(default=None, description="Identifies what kind of resource this is. Value: the fixed string \"`content#settlementReport`\"")
    previous_balance: Optional[Price] = Field(default=None, alias="previousBalance")
    settlement_id: Optional[StrictStr] = Field(default=None, description="The ID of the settlement report.", alias="settlementId")
    start_date: Optional[StrictStr] = Field(default=None, description="The start date on which all transactions are included in the report, in ISO 8601 format.", alias="startDate")
    transfer_amount: Optional[Price] = Field(default=None, alias="transferAmount")
    transfer_date: Optional[StrictStr] = Field(default=None, description="Date on which transfer for this payment was initiated by Google, in ISO 8601 format.", alias="transferDate")
    transfer_ids: Optional[List[StrictStr]] = Field(default=None, description="The list of bank identifiers used for the transfer. For example, Trace ID for Federal Automated Clearing House (ACH). This may also be known as the Wire ID.", alias="transferIds")
    __properties: ClassVar[List[str]] = ["endDate", "kind", "previousBalance", "settlementId", "startDate", "transferAmount", "transferDate", "transferIds"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SettlementReport from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of previous_balance
        if self.previous_balance:
            _dict['previousBalance'] = self.previous_balance.to_dict()
        # override the default output from pydantic by calling `to_dict()` of transfer_amount
        if self.transfer_amount:
            _dict['transferAmount'] = self.transfer_amount.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SettlementReport from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "endDate": obj.get("endDate"),
            "kind": obj.get("kind"),
            "previousBalance": Price.from_dict(obj["previousBalance"]) if obj.get("previousBalance") is not None else None,
            "settlementId": obj.get("settlementId"),
            "startDate": obj.get("startDate"),
            "transferAmount": Price.from_dict(obj["transferAmount"]) if obj.get("transferAmount") is not None else None,
            "transferDate": obj.get("transferDate"),
            "transferIds": obj.get("transferIds")
        })
        return _obj



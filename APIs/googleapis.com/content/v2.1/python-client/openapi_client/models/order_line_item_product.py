# coding: utf-8

"""
    Content API for Shopping

    Manage your product listings and accounts for Google Shopping

    The version of the OpenAPI document: v2.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.order_line_item_product_fee import OrderLineItemProductFee
from openapi_client.models.order_line_item_product_variant_attribute import OrderLineItemProductVariantAttribute
from openapi_client.models.price import Price
from typing import Optional, Set
from typing_extensions import Self

class OrderLineItemProduct(BaseModel):
    """
    OrderLineItemProduct
    """ # noqa: E501
    brand: Optional[StrictStr] = Field(default=None, description="Brand of the item.")
    condition: Optional[StrictStr] = Field(default=None, description="Condition or state of the item. Acceptable values are: - \"`new`\" - \"`refurbished`\" - \"`used`\" ")
    content_language: Optional[StrictStr] = Field(default=None, description="The two-letter ISO 639-1 language code for the item.", alias="contentLanguage")
    fees: Optional[List[OrderLineItemProductFee]] = Field(default=None, description="Associated fees at order creation time.")
    gtin: Optional[StrictStr] = Field(default=None, description="Global Trade Item Number (GTIN) of the item.")
    id: Optional[StrictStr] = Field(default=None, description="The REST ID of the product.")
    image_link: Optional[StrictStr] = Field(default=None, description="URL of an image of the item.", alias="imageLink")
    item_group_id: Optional[StrictStr] = Field(default=None, description="Shared identifier for all variants of the same product.", alias="itemGroupId")
    mpn: Optional[StrictStr] = Field(default=None, description="Manufacturer Part Number (MPN) of the item.")
    offer_id: Optional[StrictStr] = Field(default=None, description="An identifier of the item.", alias="offerId")
    price: Optional[Price] = None
    shown_image: Optional[StrictStr] = Field(default=None, description="URL to the cached image shown to the user when order was placed.", alias="shownImage")
    target_country: Optional[StrictStr] = Field(default=None, description="The CLDR territory code of the target country of the product.", alias="targetCountry")
    title: Optional[StrictStr] = Field(default=None, description="The title of the product.")
    variant_attributes: Optional[List[OrderLineItemProductVariantAttribute]] = Field(default=None, description="Variant attributes for the item. These are dimensions of the product, such as color, gender, material, pattern, and size. You can find a comprehensive list of variant attributes here.", alias="variantAttributes")
    __properties: ClassVar[List[str]] = ["brand", "condition", "contentLanguage", "fees", "gtin", "id", "imageLink", "itemGroupId", "mpn", "offerId", "price", "shownImage", "targetCountry", "title", "variantAttributes"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of OrderLineItemProduct from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in fees (list)
        _items = []
        if self.fees:
            for _item_fees in self.fees:
                if _item_fees:
                    _items.append(_item_fees.to_dict())
            _dict['fees'] = _items
        # override the default output from pydantic by calling `to_dict()` of price
        if self.price:
            _dict['price'] = self.price.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in variant_attributes (list)
        _items = []
        if self.variant_attributes:
            for _item_variant_attributes in self.variant_attributes:
                if _item_variant_attributes:
                    _items.append(_item_variant_attributes.to_dict())
            _dict['variantAttributes'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of OrderLineItemProduct from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "brand": obj.get("brand"),
            "condition": obj.get("condition"),
            "contentLanguage": obj.get("contentLanguage"),
            "fees": [OrderLineItemProductFee.from_dict(_item) for _item in obj["fees"]] if obj.get("fees") is not None else None,
            "gtin": obj.get("gtin"),
            "id": obj.get("id"),
            "imageLink": obj.get("imageLink"),
            "itemGroupId": obj.get("itemGroupId"),
            "mpn": obj.get("mpn"),
            "offerId": obj.get("offerId"),
            "price": Price.from_dict(obj["price"]) if obj.get("price") is not None else None,
            "shownImage": obj.get("shownImage"),
            "targetCountry": obj.get("targetCountry"),
            "title": obj.get("title"),
            "variantAttributes": [OrderLineItemProductVariantAttribute.from_dict(_item) for _item in obj["variantAttributes"]] if obj.get("variantAttributes") is not None else None
        })
        return _obj



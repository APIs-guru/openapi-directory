# coding: utf-8

"""
    Content API for Shopping

    Manage your product listings and accounts for Google Shopping

    The version of the OpenAPI document: v2.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.distance import Distance
from openapi_client.models.service_store_config_cutoff_config import ServiceStoreConfigCutoffConfig
from typing import Optional, Set
from typing_extensions import Self

class ServiceStoreConfig(BaseModel):
    """
    Stores that provide local delivery. Only valid with local delivery fulfillment.
    """ # noqa: E501
    cutoff_config: Optional[ServiceStoreConfigCutoffConfig] = Field(default=None, alias="cutoffConfig")
    service_radius: Optional[Distance] = Field(default=None, alias="serviceRadius")
    store_codes: Optional[List[StrictStr]] = Field(default=None, description="A list of store codes that provide local delivery. If empty, then `store_service_type` must be `all_stores`, or an error is thrown. If not empty, then `store_service_type` must be `selected_stores`, or an error is thrown.", alias="storeCodes")
    store_service_type: Optional[StrictStr] = Field(default=None, description="Indicates whether all stores listed by this merchant provide local delivery or not. Acceptable values are `all stores` and `selected stores`", alias="storeServiceType")
    __properties: ClassVar[List[str]] = ["cutoffConfig", "serviceRadius", "storeCodes", "storeServiceType"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ServiceStoreConfig from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of cutoff_config
        if self.cutoff_config:
            _dict['cutoffConfig'] = self.cutoff_config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of service_radius
        if self.service_radius:
            _dict['serviceRadius'] = self.service_radius.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ServiceStoreConfig from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "cutoffConfig": ServiceStoreConfigCutoffConfig.from_dict(obj["cutoffConfig"]) if obj.get("cutoffConfig") is not None else None,
            "serviceRadius": Distance.from_dict(obj["serviceRadius"]) if obj.get("serviceRadius") is not None else None,
            "storeCodes": obj.get("storeCodes"),
            "storeServiceType": obj.get("storeServiceType")
        })
        return _obj



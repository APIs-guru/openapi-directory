# coding: utf-8

"""
    Content API for Shopping

    Manage your product listings and accounts for Google Shopping

    The version of the OpenAPI document: v2.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class OrderTrackingSignalLineItemDetails(BaseModel):
    """
    The line items of the order.
    """ # noqa: E501
    brand: Optional[StrictStr] = Field(default=None, description="Brand of the product.")
    gtin: Optional[StrictStr] = Field(default=None, description="The Global Trade Item Number.")
    line_item_id: Optional[StrictStr] = Field(default=None, description="Required. The ID for this line item.", alias="lineItemId")
    mpn: Optional[StrictStr] = Field(default=None, description="The manufacturer part number.")
    product_description: Optional[StrictStr] = Field(default=None, description="Plain text description of this product (deprecated: Please use product_title instead).", alias="productDescription")
    product_id: Optional[StrictStr] = Field(default=None, description="Required. The Content API REST ID of the product, in the form channel:contentLanguage:targetCountry:offerId.", alias="productId")
    product_title: Optional[StrictStr] = Field(default=None, description="Plain text title of this product.", alias="productTitle")
    quantity: Optional[StrictStr] = Field(default=None, description="The quantity of the line item in the order.")
    sku: Optional[StrictStr] = Field(default=None, description="Merchant SKU for this item (deprecated).")
    upc: Optional[StrictStr] = Field(default=None, description="Universal product code for this item (deprecated: Please use GTIN instead).")
    __properties: ClassVar[List[str]] = ["brand", "gtin", "lineItemId", "mpn", "productDescription", "productId", "productTitle", "quantity", "sku", "upc"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of OrderTrackingSignalLineItemDetails from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of OrderTrackingSignalLineItemDetails from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "brand": obj.get("brand"),
            "gtin": obj.get("gtin"),
            "lineItemId": obj.get("lineItemId"),
            "mpn": obj.get("mpn"),
            "productDescription": obj.get("productDescription"),
            "productId": obj.get("productId"),
            "productTitle": obj.get("productTitle"),
            "quantity": obj.get("quantity"),
            "sku": obj.get("sku"),
            "upc": obj.get("upc")
        })
        return _obj



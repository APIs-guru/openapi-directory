# coding: utf-8

"""
    Content API for Shopping

    Manage your product listings and accounts for Google Shopping

    The version of the OpenAPI document: v2.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class AccountItemUpdatesSettings(BaseModel):
    """
    Settings for the Automatic Item Updates.
    """ # noqa: E501
    allow_availability_updates: Optional[StrictBool] = Field(default=None, description="If availability updates are enabled, any previous availability values get overwritten if Google finds an out-of-stock annotation on the offer's page. If additionally `allow_availability_updates` field is set to true, values get overwritten if Google finds an in-stock annotation on the offerâ€™s page.", alias="allowAvailabilityUpdates")
    allow_condition_updates: Optional[StrictBool] = Field(default=None, description="If condition updates are enabled, Google always updates item condition with the condition detected from the details of your product.", alias="allowConditionUpdates")
    allow_price_updates: Optional[StrictBool] = Field(default=None, description="If price updates are enabled, Google always updates the active price with the crawled information.", alias="allowPriceUpdates")
    allow_strict_availability_updates: Optional[StrictBool] = Field(default=None, description="If allow_availability_updates is enabled, items are automatically updated in all your Shopping target countries. By default, availability updates will only be applied to items that are 'out of stock' on your website but 'in stock' on Shopping. Set this to true to also update items that are 'in stock' on your website, but 'out of stock' on Google Shopping. In order for this field to have an effect, you must also allow availability updates.", alias="allowStrictAvailabilityUpdates")
    __properties: ClassVar[List[str]] = ["allowAvailabilityUpdates", "allowConditionUpdates", "allowPriceUpdates", "allowStrictAvailabilityUpdates"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AccountItemUpdatesSettings from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AccountItemUpdatesSettings from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "allowAvailabilityUpdates": obj.get("allowAvailabilityUpdates"),
            "allowConditionUpdates": obj.get("allowConditionUpdates"),
            "allowPriceUpdates": obj.get("allowPriceUpdates"),
            "allowStrictAvailabilityUpdates": obj.get("allowStrictAvailabilityUpdates")
        })
        return _obj



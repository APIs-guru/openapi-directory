# coding: utf-8

"""
    Content API for Shopping

    Manage your product listings and accounts for Google Shopping

    The version of the OpenAPI document: v2.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_analytics_link import GoogleAnalyticsLink
from openapi_client.models.merchant_center_destination import MerchantCenterDestination
from typing import Optional, Set
from typing_extensions import Self

class ConversionSource(BaseModel):
    """
    Represents a conversion source owned by a Merchant account. A merchant account can have up to 200 conversion sources.
    """ # noqa: E501
    conversion_source_id: Optional[StrictStr] = Field(default=None, description="Output only. Generated by the Content API upon creation of a new `ConversionSource`. Format: [a-z]{4}:.+ The four characters before the colon represent the type of conversio source. Content after the colon represents the ID of the conversion source within that type. The ID of two different conversion sources might be the same across different types. The following type prefixes are supported: - galk: For GoogleAnalyticsLink sources. - mcdn: For MerchantCenterDestination sources.", alias="conversionSourceId")
    expire_time: Optional[StrictStr] = Field(default=None, description="Output only. The time when an archived conversion source becomes permanently deleted and is no longer available to undelete.", alias="expireTime")
    google_analytics_link: Optional[GoogleAnalyticsLink] = Field(default=None, alias="googleAnalyticsLink")
    merchant_center_destination: Optional[MerchantCenterDestination] = Field(default=None, alias="merchantCenterDestination")
    state: Optional[StrictStr] = Field(default=None, description="Output only. Current state of this conversion source. Can't be edited through the API.")
    __properties: ClassVar[List[str]] = ["conversionSourceId", "expireTime", "googleAnalyticsLink", "merchantCenterDestination", "state"]

    @field_validator('state')
    def state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['STATE_UNSPECIFIED', 'ACTIVE', 'ARCHIVED', 'PENDING']):
            raise ValueError("must be one of enum values ('STATE_UNSPECIFIED', 'ACTIVE', 'ARCHIVED', 'PENDING')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ConversionSource from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "conversion_source_id",
            "expire_time",
            "state",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of google_analytics_link
        if self.google_analytics_link:
            _dict['googleAnalyticsLink'] = self.google_analytics_link.to_dict()
        # override the default output from pydantic by calling `to_dict()` of merchant_center_destination
        if self.merchant_center_destination:
            _dict['merchantCenterDestination'] = self.merchant_center_destination.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ConversionSource from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "conversionSourceId": obj.get("conversionSourceId"),
            "expireTime": obj.get("expireTime"),
            "googleAnalyticsLink": GoogleAnalyticsLink.from_dict(obj["googleAnalyticsLink"]) if obj.get("googleAnalyticsLink") is not None else None,
            "merchantCenterDestination": MerchantCenterDestination.from_dict(obj["merchantCenterDestination"]) if obj.get("merchantCenterDestination") is not None else None,
            "state": obj.get("state")
        })
        return _obj



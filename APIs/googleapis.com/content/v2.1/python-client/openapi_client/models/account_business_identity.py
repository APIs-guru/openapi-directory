# coding: utf-8

"""
    Content API for Shopping

    Manage your product listings and accounts for Google Shopping

    The version of the OpenAPI document: v2.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.account_identity_type import AccountIdentityType
from typing import Optional, Set
from typing_extensions import Self

class AccountBusinessIdentity(BaseModel):
    """
    The [business identity attributes](https://support.google.com/merchants/answer/10342414) can be used to self-declare attributes that let customers know more about your business.
    """ # noqa: E501
    black_owned: Optional[AccountIdentityType] = Field(default=None, alias="blackOwned")
    include_for_promotions: Optional[StrictBool] = Field(default=None, description="Required. By setting this field, your business may be included in promotions for all the selected attributes. If you clear this option, it won't affect your identification with any of the attributes. For this field to be set, the merchant must self identify with at least one of the `AccountIdentityType`. If none are included, the request will be considered invalid.", alias="includeForPromotions")
    latino_owned: Optional[AccountIdentityType] = Field(default=None, alias="latinoOwned")
    small_business: Optional[AccountIdentityType] = Field(default=None, alias="smallBusiness")
    veteran_owned: Optional[AccountIdentityType] = Field(default=None, alias="veteranOwned")
    women_owned: Optional[AccountIdentityType] = Field(default=None, alias="womenOwned")
    __properties: ClassVar[List[str]] = ["blackOwned", "includeForPromotions", "latinoOwned", "smallBusiness", "veteranOwned", "womenOwned"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AccountBusinessIdentity from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of black_owned
        if self.black_owned:
            _dict['blackOwned'] = self.black_owned.to_dict()
        # override the default output from pydantic by calling `to_dict()` of latino_owned
        if self.latino_owned:
            _dict['latinoOwned'] = self.latino_owned.to_dict()
        # override the default output from pydantic by calling `to_dict()` of small_business
        if self.small_business:
            _dict['smallBusiness'] = self.small_business.to_dict()
        # override the default output from pydantic by calling `to_dict()` of veteran_owned
        if self.veteran_owned:
            _dict['veteranOwned'] = self.veteran_owned.to_dict()
        # override the default output from pydantic by calling `to_dict()` of women_owned
        if self.women_owned:
            _dict['womenOwned'] = self.women_owned.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AccountBusinessIdentity from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "blackOwned": AccountIdentityType.from_dict(obj["blackOwned"]) if obj.get("blackOwned") is not None else None,
            "includeForPromotions": obj.get("includeForPromotions"),
            "latinoOwned": AccountIdentityType.from_dict(obj["latinoOwned"]) if obj.get("latinoOwned") is not None else None,
            "smallBusiness": AccountIdentityType.from_dict(obj["smallBusiness"]) if obj.get("smallBusiness") is not None else None,
            "veteranOwned": AccountIdentityType.from_dict(obj["veteranOwned"]) if obj.get("veteranOwned") is not None else None,
            "womenOwned": AccountIdentityType.from_dict(obj["womenOwned"]) if obj.get("womenOwned") is not None else None
        })
        return _obj



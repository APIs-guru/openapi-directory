# coding: utf-8

"""
    Content API for Shopping

    Manage your product listings and accounts for Google Shopping

    The version of the OpenAPI document: v2.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.custom_attribute import CustomAttribute
from openapi_client.models.price import Price
from typing import Optional, Set
from typing_extensions import Self

class RegionalInventory(BaseModel):
    """
    Regional inventory resource. contains the regional name and all attributes which are overridden for the specified region.
    """ # noqa: E501
    availability: Optional[StrictStr] = Field(default=None, description="The availability of the product.")
    custom_attributes: Optional[List[CustomAttribute]] = Field(default=None, description="A list of custom (merchant-provided) attributes. It can also be used for submitting any attribute of the feed specification in its generic form.", alias="customAttributes")
    kind: Optional[StrictStr] = Field(default=None, description="Identifies what kind of resource this is. Value: the fixed string \"`content#regionalInventory`\".")
    price: Optional[Price] = None
    region_id: Optional[StrictStr] = Field(default=None, description="The ID uniquely identifying each region.", alias="regionId")
    sale_price: Optional[Price] = Field(default=None, alias="salePrice")
    sale_price_effective_date: Optional[StrictStr] = Field(default=None, description="A date range represented by a pair of ISO 8601 dates separated by a space, comma, or slash. Both dates might be specified as 'null' if undecided.", alias="salePriceEffectiveDate")
    __properties: ClassVar[List[str]] = ["availability", "customAttributes", "kind", "price", "regionId", "salePrice", "salePriceEffectiveDate"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of RegionalInventory from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in custom_attributes (list)
        _items = []
        if self.custom_attributes:
            for _item_custom_attributes in self.custom_attributes:
                if _item_custom_attributes:
                    _items.append(_item_custom_attributes.to_dict())
            _dict['customAttributes'] = _items
        # override the default output from pydantic by calling `to_dict()` of price
        if self.price:
            _dict['price'] = self.price.to_dict()
        # override the default output from pydantic by calling `to_dict()` of sale_price
        if self.sale_price:
            _dict['salePrice'] = self.sale_price.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of RegionalInventory from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "availability": obj.get("availability"),
            "customAttributes": [CustomAttribute.from_dict(_item) for _item in obj["customAttributes"]] if obj.get("customAttributes") is not None else None,
            "kind": obj.get("kind"),
            "price": Price.from_dict(obj["price"]) if obj.get("price") is not None else None,
            "regionId": obj.get("regionId"),
            "salePrice": Price.from_dict(obj["salePrice"]) if obj.get("salePrice") is not None else None,
            "salePriceEffectiveDate": obj.get("salePriceEffectiveDate")
        })
        return _obj



# coding: utf-8

"""
    Content API for Shopping

    Manage your product listings and accounts for Google Shopping

    The version of the OpenAPI document: v2.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.order_tracking_signal_line_item_details import OrderTrackingSignalLineItemDetails
from openapi_client.models.order_tracking_signal_shipment_line_item_mapping import OrderTrackingSignalShipmentLineItemMapping
from openapi_client.models.order_tracking_signal_shipping_info import OrderTrackingSignalShippingInfo
from openapi_client.models.price_amount import PriceAmount
from typing import Optional, Set
from typing_extensions import Self

class OrderTrackingSignal(BaseModel):
    """
    Represents a merchant trade from which signals are extracted, e.g. shipping.
    """ # noqa: E501
    customer_shipping_fee: Optional[PriceAmount] = Field(default=None, alias="customerShippingFee")
    delivery_postal_code: Optional[StrictStr] = Field(default=None, description="Required. The delivery postal code, as a continuous string without spaces or dashes, e.g. \"95016\". This field will be anonymized in returned OrderTrackingSignal creation response.", alias="deliveryPostalCode")
    delivery_region_code: Optional[StrictStr] = Field(default=None, description="Required. The [CLDR territory code] (http://www.unicode.org/repos/cldr/tags/latest/common/main/en.xml) for the shipping destination.", alias="deliveryRegionCode")
    line_items: Optional[List[OrderTrackingSignalLineItemDetails]] = Field(default=None, description="Information about line items in the order.", alias="lineItems")
    merchant_id: Optional[StrictStr] = Field(default=None, description="The Google merchant ID of this order tracking signal. This value is optional. If left unset, the caller's merchant ID is used. You must request access in order to provide data on behalf of another merchant. For more information, see [Submitting Order Tracking Signals](/shopping-content/guides/order-tracking-signals).", alias="merchantId")
    order_created_time: Optional[datetime] = Field(default=None, alias="orderCreatedTime")
    order_id: Optional[StrictStr] = Field(default=None, description="Required. The ID of the order on the merchant side. This field will be hashed in returned OrderTrackingSignal creation response.", alias="orderId")
    order_tracking_signal_id: Optional[StrictStr] = Field(default=None, description="Output only. The ID that uniquely identifies this order tracking signal.", alias="orderTrackingSignalId")
    shipment_line_item_mapping: Optional[List[OrderTrackingSignalShipmentLineItemMapping]] = Field(default=None, description="The mapping of the line items to the shipment information.", alias="shipmentLineItemMapping")
    shipping_info: Optional[List[OrderTrackingSignalShippingInfo]] = Field(default=None, description="The shipping information for the order.", alias="shippingInfo")
    __properties: ClassVar[List[str]] = ["customerShippingFee", "deliveryPostalCode", "deliveryRegionCode", "lineItems", "merchantId", "orderCreatedTime", "orderId", "orderTrackingSignalId", "shipmentLineItemMapping", "shippingInfo"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of OrderTrackingSignal from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "order_tracking_signal_id",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of customer_shipping_fee
        if self.customer_shipping_fee:
            _dict['customerShippingFee'] = self.customer_shipping_fee.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in line_items (list)
        _items = []
        if self.line_items:
            for _item_line_items in self.line_items:
                if _item_line_items:
                    _items.append(_item_line_items.to_dict())
            _dict['lineItems'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in shipment_line_item_mapping (list)
        _items = []
        if self.shipment_line_item_mapping:
            for _item_shipment_line_item_mapping in self.shipment_line_item_mapping:
                if _item_shipment_line_item_mapping:
                    _items.append(_item_shipment_line_item_mapping.to_dict())
            _dict['shipmentLineItemMapping'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in shipping_info (list)
        _items = []
        if self.shipping_info:
            for _item_shipping_info in self.shipping_info:
                if _item_shipping_info:
                    _items.append(_item_shipping_info.to_dict())
            _dict['shippingInfo'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of OrderTrackingSignal from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "customerShippingFee": PriceAmount.from_dict(obj["customerShippingFee"]) if obj.get("customerShippingFee") is not None else None,
            "deliveryPostalCode": obj.get("deliveryPostalCode"),
            "deliveryRegionCode": obj.get("deliveryRegionCode"),
            "lineItems": [OrderTrackingSignalLineItemDetails.from_dict(_item) for _item in obj["lineItems"]] if obj.get("lineItems") is not None else None,
            "merchantId": obj.get("merchantId"),
            "orderCreatedTime": obj.get("orderCreatedTime"),
            "orderId": obj.get("orderId"),
            "orderTrackingSignalId": obj.get("orderTrackingSignalId"),
            "shipmentLineItemMapping": [OrderTrackingSignalShipmentLineItemMapping.from_dict(_item) for _item in obj["shipmentLineItemMapping"]] if obj.get("shipmentLineItemMapping") is not None else None,
            "shippingInfo": [OrderTrackingSignalShippingInfo.from_dict(_item) for _item in obj["shippingInfo"]] if obj.get("shippingInfo") is not None else None
        })
        return _obj



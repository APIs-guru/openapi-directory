# coding: utf-8

"""
    Content API for Shopping

    Manage your product listings and accounts for Google Shopping

    The version of the OpenAPI document: v2.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.return_policy_online_policy import ReturnPolicyOnlinePolicy
from openapi_client.models.return_policy_online_restocking_fee import ReturnPolicyOnlineRestockingFee
from openapi_client.models.return_policy_online_return_reason_category_info import ReturnPolicyOnlineReturnReasonCategoryInfo
from typing import Optional, Set
from typing_extensions import Self

class ReturnPolicyOnline(BaseModel):
    """
    Return policy online object. This is currently used to represent return policies for ads and free listings programs.
    """ # noqa: E501
    countries: Optional[List[StrictStr]] = Field(default=None, description="The countries of sale where the return policy is applicable. The values must be a valid 2 letter ISO 3166 code, e.g. \"US\".")
    item_conditions: Optional[List[StrictStr]] = Field(default=None, description="The item conditions that are accepted for returns. This is required to not be empty unless the type of return policy is noReturns.", alias="itemConditions")
    label: Optional[StrictStr] = Field(default=None, description="The unique user-defined label of the return policy. The same label cannot be used in different return policies for the same country. Policies with the label 'default' will apply to all products, unless a product specifies a return_policy_label attribute.")
    name: Optional[StrictStr] = Field(default=None, description="The name of the policy as shown in Merchant Center.")
    policy: Optional[ReturnPolicyOnlinePolicy] = None
    restocking_fee: Optional[ReturnPolicyOnlineRestockingFee] = Field(default=None, alias="restockingFee")
    return_methods: Optional[List[StrictStr]] = Field(default=None, description="The return methods of how customers can return an item. This value is required to not be empty unless the type of return policy is noReturns.", alias="returnMethods")
    return_policy_id: Optional[StrictStr] = Field(default=None, description="Output only. Return policy ID generated by Google.", alias="returnPolicyId")
    return_policy_uri: Optional[StrictStr] = Field(default=None, description="The return policy uri. This can used by Google to do a sanity check for the policy.", alias="returnPolicyUri")
    return_reason_category_info: Optional[List[ReturnPolicyOnlineReturnReasonCategoryInfo]] = Field(default=None, description="The return reason category information. This required to not be empty unless the type of return policy is noReturns.", alias="returnReasonCategoryInfo")
    __properties: ClassVar[List[str]] = ["countries", "itemConditions", "label", "name", "policy", "restockingFee", "returnMethods", "returnPolicyId", "returnPolicyUri", "returnReasonCategoryInfo"]

    @field_validator('item_conditions')
    def item_conditions_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        for i in value:
            if i not in set(['ITEM_CONDITION_UNSPECIFIED', 'NEW', 'USED']):
                raise ValueError("each list item must be one of ('ITEM_CONDITION_UNSPECIFIED', 'NEW', 'USED')")
        return value

    @field_validator('return_methods')
    def return_methods_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        for i in value:
            if i not in set(['RETURN_METHOD_UNSPECIFIED', 'BY_MAIL', 'IN_STORE', 'AT_A_KIOSK']):
                raise ValueError("each list item must be one of ('RETURN_METHOD_UNSPECIFIED', 'BY_MAIL', 'IN_STORE', 'AT_A_KIOSK')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ReturnPolicyOnline from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "return_policy_id",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of policy
        if self.policy:
            _dict['policy'] = self.policy.to_dict()
        # override the default output from pydantic by calling `to_dict()` of restocking_fee
        if self.restocking_fee:
            _dict['restockingFee'] = self.restocking_fee.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in return_reason_category_info (list)
        _items = []
        if self.return_reason_category_info:
            for _item_return_reason_category_info in self.return_reason_category_info:
                if _item_return_reason_category_info:
                    _items.append(_item_return_reason_category_info.to_dict())
            _dict['returnReasonCategoryInfo'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ReturnPolicyOnline from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "countries": obj.get("countries"),
            "itemConditions": obj.get("itemConditions"),
            "label": obj.get("label"),
            "name": obj.get("name"),
            "policy": ReturnPolicyOnlinePolicy.from_dict(obj["policy"]) if obj.get("policy") is not None else None,
            "restockingFee": ReturnPolicyOnlineRestockingFee.from_dict(obj["restockingFee"]) if obj.get("restockingFee") is not None else None,
            "returnMethods": obj.get("returnMethods"),
            "returnPolicyId": obj.get("returnPolicyId"),
            "returnPolicyUri": obj.get("returnPolicyUri"),
            "returnReasonCategoryInfo": [ReturnPolicyOnlineReturnReasonCategoryInfo.from_dict(_item) for _item in obj["returnReasonCategoryInfo"]] if obj.get("returnReasonCategoryInfo") is not None else None
        })
        return _obj



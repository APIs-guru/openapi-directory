# coding: utf-8

"""
    Content API for Shopping

    Manage your product listings and accounts for Google Shopping

    The version of the OpenAPI document: v2.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.custom_attribute import CustomAttribute
from openapi_client.models.price import Price
from typing import Optional, Set
from typing_extensions import Self

class LocalInventory(BaseModel):
    """
    Local inventory resource. For accepted attribute values, see the local product inventory feed specification.
    """ # noqa: E501
    availability: Optional[StrictStr] = Field(default=None, description="The availability of the product. For accepted attribute values, see the local product inventory feed specification.")
    custom_attributes: Optional[List[CustomAttribute]] = Field(default=None, description="A list of custom (merchant-provided) attributes. Can also be used to submit any attribute of the feed specification in its generic form, for example, `{ \"name\": \"size type\", \"value\": \"regular\" }`.", alias="customAttributes")
    instore_product_location: Optional[StrictStr] = Field(default=None, description="The in-store product location.", alias="instoreProductLocation")
    kind: Optional[StrictStr] = Field(default=None, description="Identifies what kind of resource this is. Value: the fixed string \"`content#localInventory`\"")
    pickup_method: Optional[StrictStr] = Field(default=None, description="The supported pickup method for this offer. Unless the value is \"not supported\", this field must be submitted together with `pickupSla`. For accepted attribute values, see the local product inventory feed specification.", alias="pickupMethod")
    pickup_sla: Optional[StrictStr] = Field(default=None, description="The expected date that an order will be ready for pickup relative to the order date. Must be submitted together with `pickupMethod`. For accepted attribute values, see the local product inventory feed specification.", alias="pickupSla")
    price: Optional[Price] = None
    quantity: Optional[StrictInt] = Field(default=None, description="The quantity of the product. Must be nonnegative.")
    sale_price: Optional[Price] = Field(default=None, alias="salePrice")
    sale_price_effective_date: Optional[StrictStr] = Field(default=None, description="A date range represented by a pair of ISO 8601 dates separated by a space, comma, or slash. Both dates may be specified as 'null' if undecided.", alias="salePriceEffectiveDate")
    store_code: Optional[StrictStr] = Field(default=None, description="Required. The store code of this local inventory resource.", alias="storeCode")
    __properties: ClassVar[List[str]] = ["availability", "customAttributes", "instoreProductLocation", "kind", "pickupMethod", "pickupSla", "price", "quantity", "salePrice", "salePriceEffectiveDate", "storeCode"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of LocalInventory from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in custom_attributes (list)
        _items = []
        if self.custom_attributes:
            for _item_custom_attributes in self.custom_attributes:
                if _item_custom_attributes:
                    _items.append(_item_custom_attributes.to_dict())
            _dict['customAttributes'] = _items
        # override the default output from pydantic by calling `to_dict()` of price
        if self.price:
            _dict['price'] = self.price.to_dict()
        # override the default output from pydantic by calling `to_dict()` of sale_price
        if self.sale_price:
            _dict['salePrice'] = self.sale_price.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of LocalInventory from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "availability": obj.get("availability"),
            "customAttributes": [CustomAttribute.from_dict(_item) for _item in obj["customAttributes"]] if obj.get("customAttributes") is not None else None,
            "instoreProductLocation": obj.get("instoreProductLocation"),
            "kind": obj.get("kind"),
            "pickupMethod": obj.get("pickupMethod"),
            "pickupSla": obj.get("pickupSla"),
            "price": Price.from_dict(obj["price"]) if obj.get("price") is not None else None,
            "quantity": obj.get("quantity"),
            "salePrice": Price.from_dict(obj["salePrice"]) if obj.get("salePrice") is not None else None,
            "salePriceEffectiveDate": obj.get("salePriceEffectiveDate"),
            "storeCode": obj.get("storeCode")
        })
        return _obj



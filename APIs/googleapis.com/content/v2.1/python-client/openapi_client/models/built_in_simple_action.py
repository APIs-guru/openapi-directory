# coding: utf-8

"""
    Content API for Shopping

    Manage your product listings and accounts for Google Shopping

    The version of the OpenAPI document: v2.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.built_in_simple_action_additional_content import BuiltInSimpleActionAdditionalContent
from typing import Optional, Set
from typing_extensions import Self

class BuiltInSimpleAction(BaseModel):
    """
    Action that is implemented and performed in (your) third-party application. Represents various functionality that is expected to be available to merchant and will help them with resolving the issue. The application should point the merchant to the place, where they can access the corresponding functionality. If the functionality is not supported, it is recommended to explain the situation to merchant and provide them with instructions how to solve the issue.
    """ # noqa: E501
    additional_content: Optional[BuiltInSimpleActionAdditionalContent] = Field(default=None, alias="additionalContent")
    attribute_code: Optional[StrictStr] = Field(default=None, description="The attribute that needs to be updated. Present when the type is `EDIT_ITEM_ATTRIBUTE`. This field contains a code for attribute, represented in snake_case. You can find a list of product's attributes, with their codes [here](https://support.google.com/merchants/answer/7052112).", alias="attributeCode")
    type: Optional[StrictStr] = Field(default=None, description="The type of action that represents a functionality that is expected to be available in third-party application.")
    __properties: ClassVar[List[str]] = ["additionalContent", "attributeCode", "type"]

    @field_validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['BUILT_IN_SIMPLE_ACTION_TYPE_UNSPECIFIED', 'VERIFY_PHONE', 'CLAIM_WEBSITE', 'ADD_PRODUCTS', 'ADD_CONTACT_INFO', 'LINK_ADS_ACCOUNT', 'ADD_BUSINESS_REGISTRATION_NUMBER', 'EDIT_ITEM_ATTRIBUTE', 'FIX_ACCOUNT_ISSUE', 'SHOW_ADDITIONAL_CONTENT']):
            raise ValueError("must be one of enum values ('BUILT_IN_SIMPLE_ACTION_TYPE_UNSPECIFIED', 'VERIFY_PHONE', 'CLAIM_WEBSITE', 'ADD_PRODUCTS', 'ADD_CONTACT_INFO', 'LINK_ADS_ACCOUNT', 'ADD_BUSINESS_REGISTRATION_NUMBER', 'EDIT_ITEM_ATTRIBUTE', 'FIX_ACCOUNT_ISSUE', 'SHOW_ADDITIONAL_CONTENT')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of BuiltInSimpleAction from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of additional_content
        if self.additional_content:
            _dict['additionalContent'] = self.additional_content.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of BuiltInSimpleAction from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "additionalContent": BuiltInSimpleActionAdditionalContent.from_dict(obj["additionalContent"]) if obj.get("additionalContent") is not None else None,
            "attributeCode": obj.get("attributeCode"),
            "type": obj.get("type")
        })
        return _obj



# coding: utf-8

"""
    Content API for Shopping

    Manage your product listings and accounts for Google Shopping

    The version of the OpenAPI document: v2.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.built_in_simple_action import BuiltInSimpleAction
from openapi_client.models.external_action import ExternalAction
from typing import Optional, Set
from typing_extensions import Self

class Action(BaseModel):
    """
    An actionable step that can be executed to solve the issue.
    """ # noqa: E501
    builtin_simple_action: Optional[BuiltInSimpleAction] = Field(default=None, alias="builtinSimpleAction")
    button_label: Optional[StrictStr] = Field(default=None, description="Label of the action button.", alias="buttonLabel")
    external_action: Optional[ExternalAction] = Field(default=None, alias="externalAction")
    is_available: Optional[StrictBool] = Field(default=None, description="Controlling whether the button is active or disabled. The value is 'false' when the action was already requested or is not available. If the action is not available then a reason will be present. If (your) third-party application shows a disabled button for action that is not available, then it should also show reasons.", alias="isAvailable")
    reasons: Optional[List[ActionReason]] = Field(default=None, description="List of reasons why the action is not available. The list of reasons is empty if the action is available. If there is only one reason, it can be displayed next to the disabled button. If there are more reasons, all of them should be displayed, for example in a pop-up dialog.")
    __properties: ClassVar[List[str]] = ["builtinSimpleAction", "buttonLabel", "externalAction", "isAvailable", "reasons"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Action from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of builtin_simple_action
        if self.builtin_simple_action:
            _dict['builtinSimpleAction'] = self.builtin_simple_action.to_dict()
        # override the default output from pydantic by calling `to_dict()` of external_action
        if self.external_action:
            _dict['externalAction'] = self.external_action.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in reasons (list)
        _items = []
        if self.reasons:
            for _item_reasons in self.reasons:
                if _item_reasons:
                    _items.append(_item_reasons.to_dict())
            _dict['reasons'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Action from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "builtinSimpleAction": BuiltInSimpleAction.from_dict(obj["builtinSimpleAction"]) if obj.get("builtinSimpleAction") is not None else None,
            "buttonLabel": obj.get("buttonLabel"),
            "externalAction": ExternalAction.from_dict(obj["externalAction"]) if obj.get("externalAction") is not None else None,
            "isAvailable": obj.get("isAvailable"),
            "reasons": [ActionReason.from_dict(_item) for _item in obj["reasons"]] if obj.get("reasons") is not None else None
        })
        return _obj

from openapi_client.models.action_reason import ActionReason
# TODO: Rewrite to not use raise_errors
Action.model_rebuild(raise_errors=False)


# coding: utf-8

"""
    Content API for Shopping

    Manage your product listings and accounts for Google Shopping

    The version of the OpenAPI document: v2.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class Css(BaseModel):
    """
    Information about CSS domain.
    """ # noqa: E501
    css_domain_id: Optional[StrictStr] = Field(default=None, description="Output only. Immutable. The CSS domain ID.", alias="cssDomainId")
    css_group_id: Optional[StrictStr] = Field(default=None, description="Output only. Immutable. The ID of the CSS group this CSS domain is affiliated with. Only populated for CSS group users.", alias="cssGroupId")
    display_name: Optional[StrictStr] = Field(default=None, description="Output only. Immutable. The CSS domain's display name, used when space is constrained.", alias="displayName")
    full_name: Optional[StrictStr] = Field(default=None, description="Output only. Immutable. The CSS domain's full name.", alias="fullName")
    homepage_uri: Optional[StrictStr] = Field(default=None, description="Output only. Immutable. The CSS domain's homepage.", alias="homepageUri")
    label_ids: Optional[List[StrictStr]] = Field(default=None, description="A list of label IDs that are assigned to this CSS domain by its CSS group. Only populated for CSS group users.", alias="labelIds")
    __properties: ClassVar[List[str]] = ["cssDomainId", "cssGroupId", "displayName", "fullName", "homepageUri", "labelIds"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Css from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "css_domain_id",
            "css_group_id",
            "display_name",
            "full_name",
            "homepage_uri",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Css from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "cssDomainId": obj.get("cssDomainId"),
            "cssGroupId": obj.get("cssGroupId"),
            "displayName": obj.get("displayName"),
            "fullName": obj.get("fullName"),
            "homepageUri": obj.get("homepageUri"),
            "labelIds": obj.get("labelIds")
        })
        return _obj



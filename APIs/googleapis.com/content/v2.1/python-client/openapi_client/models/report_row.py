# coding: utf-8

"""
    Content API for Shopping

    Manage your product listings and accounts for Google Shopping

    The version of the OpenAPI document: v2.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.best_sellers import BestSellers
from openapi_client.models.brand import Brand
from openapi_client.models.competitive_visibility import CompetitiveVisibility
from openapi_client.models.metrics import Metrics
from openapi_client.models.price_competitiveness import PriceCompetitiveness
from openapi_client.models.price_insights import PriceInsights
from openapi_client.models.product_cluster import ProductCluster
from openapi_client.models.product_view import ProductView
from openapi_client.models.segments import Segments
from typing import Optional, Set
from typing_extensions import Self

class ReportRow(BaseModel):
    """
    Result row returned from the search query.
    """ # noqa: E501
    best_sellers: Optional[BestSellers] = Field(default=None, alias="bestSellers")
    brand: Optional[Brand] = None
    competitive_visibility: Optional[CompetitiveVisibility] = Field(default=None, alias="competitiveVisibility")
    metrics: Optional[Metrics] = None
    price_competitiveness: Optional[PriceCompetitiveness] = Field(default=None, alias="priceCompetitiveness")
    price_insights: Optional[PriceInsights] = Field(default=None, alias="priceInsights")
    product_cluster: Optional[ProductCluster] = Field(default=None, alias="productCluster")
    product_view: Optional[ProductView] = Field(default=None, alias="productView")
    segments: Optional[Segments] = None
    __properties: ClassVar[List[str]] = ["bestSellers", "brand", "competitiveVisibility", "metrics", "priceCompetitiveness", "priceInsights", "productCluster", "productView", "segments"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ReportRow from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of best_sellers
        if self.best_sellers:
            _dict['bestSellers'] = self.best_sellers.to_dict()
        # override the default output from pydantic by calling `to_dict()` of brand
        if self.brand:
            _dict['brand'] = self.brand.to_dict()
        # override the default output from pydantic by calling `to_dict()` of competitive_visibility
        if self.competitive_visibility:
            _dict['competitiveVisibility'] = self.competitive_visibility.to_dict()
        # override the default output from pydantic by calling `to_dict()` of metrics
        if self.metrics:
            _dict['metrics'] = self.metrics.to_dict()
        # override the default output from pydantic by calling `to_dict()` of price_competitiveness
        if self.price_competitiveness:
            _dict['priceCompetitiveness'] = self.price_competitiveness.to_dict()
        # override the default output from pydantic by calling `to_dict()` of price_insights
        if self.price_insights:
            _dict['priceInsights'] = self.price_insights.to_dict()
        # override the default output from pydantic by calling `to_dict()` of product_cluster
        if self.product_cluster:
            _dict['productCluster'] = self.product_cluster.to_dict()
        # override the default output from pydantic by calling `to_dict()` of product_view
        if self.product_view:
            _dict['productView'] = self.product_view.to_dict()
        # override the default output from pydantic by calling `to_dict()` of segments
        if self.segments:
            _dict['segments'] = self.segments.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ReportRow from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "bestSellers": BestSellers.from_dict(obj["bestSellers"]) if obj.get("bestSellers") is not None else None,
            "brand": Brand.from_dict(obj["brand"]) if obj.get("brand") is not None else None,
            "competitiveVisibility": CompetitiveVisibility.from_dict(obj["competitiveVisibility"]) if obj.get("competitiveVisibility") is not None else None,
            "metrics": Metrics.from_dict(obj["metrics"]) if obj.get("metrics") is not None else None,
            "priceCompetitiveness": PriceCompetitiveness.from_dict(obj["priceCompetitiveness"]) if obj.get("priceCompetitiveness") is not None else None,
            "priceInsights": PriceInsights.from_dict(obj["priceInsights"]) if obj.get("priceInsights") is not None else None,
            "productCluster": ProductCluster.from_dict(obj["productCluster"]) if obj.get("productCluster") is not None else None,
            "productView": ProductView.from_dict(obj["productView"]) if obj.get("productView") is not None else None,
            "segments": Segments.from_dict(obj["segments"]) if obj.get("segments") is not None else None
        })
        return _obj



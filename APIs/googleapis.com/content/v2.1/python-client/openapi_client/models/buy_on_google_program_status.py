# coding: utf-8

"""
    Content API for Shopping

    Manage your product listings and accounts for Google Shopping

    The version of the OpenAPI document: v2.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class BuyOnGoogleProgramStatus(BaseModel):
    """
    Response message for the GetProgramStatus method.
    """ # noqa: E501
    business_model: Optional[List[StrictStr]] = Field(default=None, description="The business models in which merchant participates.", alias="businessModel")
    customer_service_pending_email: Optional[StrictStr] = Field(default=None, description="The customer service pending email. After verification this field becomes empty.", alias="customerServicePendingEmail")
    customer_service_pending_phone_number: Optional[StrictStr] = Field(default=None, description="The pending phone number specified for BuyOnGoogle program. It might be different than account level phone number. In order to update this field the customer_service_pending_phone_region_code must also be set. After verification this field becomes empty.", alias="customerServicePendingPhoneNumber")
    customer_service_pending_phone_region_code: Optional[StrictStr] = Field(default=None, description="Two letter country code for the pending phone number, for example `CA` for Canadian numbers. See the [ISO 3166-1 alpha-2](https://wikipedia.org/wiki/ISO_3166-1_alpha-2#Officially_assigned_code_elements) officially assigned codes. In order to update this field the customer_service_pending_phone_number must also be set. After verification this field becomes empty.", alias="customerServicePendingPhoneRegionCode")
    customer_service_verified_email: Optional[StrictStr] = Field(default=None, description="Output only. The customer service verified email.", alias="customerServiceVerifiedEmail")
    customer_service_verified_phone_number: Optional[StrictStr] = Field(default=None, description="Output only. The verified phone number specified for BuyOnGoogle program. It might be different than account level phone number.", alias="customerServiceVerifiedPhoneNumber")
    customer_service_verified_phone_region_code: Optional[StrictStr] = Field(default=None, description="Output only. Two letter country code for the verified phone number, for example `CA` for Canadian numbers. See the [ISO 3166-1 alpha-2](https://wikipedia.org/wiki/ISO_3166-1_alpha-2#Officially_assigned_code_elements) officially assigned codes.", alias="customerServiceVerifiedPhoneRegionCode")
    online_sales_channel: Optional[StrictStr] = Field(default=None, description="The channels through which the merchant is selling.", alias="onlineSalesChannel")
    participation_stage: Optional[StrictStr] = Field(default=None, description="Output only. The current participation stage for the program.", alias="participationStage")
    __properties: ClassVar[List[str]] = ["businessModel", "customerServicePendingEmail", "customerServicePendingPhoneNumber", "customerServicePendingPhoneRegionCode", "customerServiceVerifiedEmail", "customerServiceVerifiedPhoneNumber", "customerServiceVerifiedPhoneRegionCode", "onlineSalesChannel", "participationStage"]

    @field_validator('business_model')
    def business_model_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        for i in value:
            if i not in set(['BUSINESS_MODEL_UNSPECIFIED', 'MANUFACTURER', 'IMPORTER', 'RESELLER', 'OTHER']):
                raise ValueError("each list item must be one of ('BUSINESS_MODEL_UNSPECIFIED', 'MANUFACTURER', 'IMPORTER', 'RESELLER', 'OTHER')")
        return value

    @field_validator('online_sales_channel')
    def online_sales_channel_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['ONLINE_SALES_CHANNEL_UNSPECIFIED', 'GOOGLE_EXCLUSIVE', 'GOOGLE_AND_OTHER_WEBSITES']):
            raise ValueError("must be one of enum values ('ONLINE_SALES_CHANNEL_UNSPECIFIED', 'GOOGLE_EXCLUSIVE', 'GOOGLE_AND_OTHER_WEBSITES')")
        return value

    @field_validator('participation_stage')
    def participation_stage_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['PROGRAM_PARTICIPATION_STAGE_UNSPECIFIED', 'NOT_ELIGIBLE', 'ELIGIBLE', 'ONBOARDING', 'ELIGIBLE_FOR_REVIEW', 'PENDING_REVIEW', 'REVIEW_DISAPPROVED', 'ACTIVE', 'PAUSED', 'DEPRECATED']):
            raise ValueError("must be one of enum values ('PROGRAM_PARTICIPATION_STAGE_UNSPECIFIED', 'NOT_ELIGIBLE', 'ELIGIBLE', 'ONBOARDING', 'ELIGIBLE_FOR_REVIEW', 'PENDING_REVIEW', 'REVIEW_DISAPPROVED', 'ACTIVE', 'PAUSED', 'DEPRECATED')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of BuyOnGoogleProgramStatus from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "customer_service_verified_email",
            "customer_service_verified_phone_number",
            "customer_service_verified_phone_region_code",
            "participation_stage",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of BuyOnGoogleProgramStatus from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "businessModel": obj.get("businessModel"),
            "customerServicePendingEmail": obj.get("customerServicePendingEmail"),
            "customerServicePendingPhoneNumber": obj.get("customerServicePendingPhoneNumber"),
            "customerServicePendingPhoneRegionCode": obj.get("customerServicePendingPhoneRegionCode"),
            "customerServiceVerifiedEmail": obj.get("customerServiceVerifiedEmail"),
            "customerServiceVerifiedPhoneNumber": obj.get("customerServiceVerifiedPhoneNumber"),
            "customerServiceVerifiedPhoneRegionCode": obj.get("customerServiceVerifiedPhoneRegionCode"),
            "onlineSalesChannel": obj.get("onlineSalesChannel"),
            "participationStage": obj.get("participationStage")
        })
        return _obj



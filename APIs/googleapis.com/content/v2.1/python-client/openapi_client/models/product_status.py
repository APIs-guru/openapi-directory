# coding: utf-8

"""
    Content API for Shopping

    Manage your product listings and accounts for Google Shopping

    The version of the OpenAPI document: v2.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.product_status_destination_status import ProductStatusDestinationStatus
from openapi_client.models.product_status_item_level_issue import ProductStatusItemLevelIssue
from typing import Optional, Set
from typing_extensions import Self

class ProductStatus(BaseModel):
    """
    The status of a product, that is, information about a product computed asynchronously.
    """ # noqa: E501
    creation_date: Optional[StrictStr] = Field(default=None, description="Date on which the item has been created, in ISO 8601 format.", alias="creationDate")
    destination_statuses: Optional[List[ProductStatusDestinationStatus]] = Field(default=None, description="The intended destinations for the product.", alias="destinationStatuses")
    google_expiration_date: Optional[StrictStr] = Field(default=None, description="Date on which the item expires in Google Shopping, in ISO 8601 format.", alias="googleExpirationDate")
    item_level_issues: Optional[List[ProductStatusItemLevelIssue]] = Field(default=None, description="A list of all issues associated with the product.", alias="itemLevelIssues")
    kind: Optional[StrictStr] = Field(default=None, description="Identifies what kind of resource this is. Value: the fixed string \"`content#productStatus`\"")
    last_update_date: Optional[StrictStr] = Field(default=None, description="Date on which the item has been last updated, in ISO 8601 format.", alias="lastUpdateDate")
    link: Optional[StrictStr] = Field(default=None, description="The link to the product.")
    product_id: Optional[StrictStr] = Field(default=None, description="The ID of the product for which status is reported.", alias="productId")
    title: Optional[StrictStr] = Field(default=None, description="The title of the product.")
    __properties: ClassVar[List[str]] = ["creationDate", "destinationStatuses", "googleExpirationDate", "itemLevelIssues", "kind", "lastUpdateDate", "link", "productId", "title"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ProductStatus from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in destination_statuses (list)
        _items = []
        if self.destination_statuses:
            for _item_destination_statuses in self.destination_statuses:
                if _item_destination_statuses:
                    _items.append(_item_destination_statuses.to_dict())
            _dict['destinationStatuses'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in item_level_issues (list)
        _items = []
        if self.item_level_issues:
            for _item_item_level_issues in self.item_level_issues:
                if _item_item_level_issues:
                    _items.append(_item_item_level_issues.to_dict())
            _dict['itemLevelIssues'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ProductStatus from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "creationDate": obj.get("creationDate"),
            "destinationStatuses": [ProductStatusDestinationStatus.from_dict(_item) for _item in obj["destinationStatuses"]] if obj.get("destinationStatuses") is not None else None,
            "googleExpirationDate": obj.get("googleExpirationDate"),
            "itemLevelIssues": [ProductStatusItemLevelIssue.from_dict(_item) for _item in obj["itemLevelIssues"]] if obj.get("itemLevelIssues") is not None else None,
            "kind": obj.get("kind"),
            "lastUpdateDate": obj.get("lastUpdateDate"),
            "link": obj.get("link"),
            "productId": obj.get("productId"),
            "title": obj.get("title")
        })
        return _obj



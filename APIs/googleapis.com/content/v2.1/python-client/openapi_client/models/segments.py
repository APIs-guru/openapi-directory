# coding: utf-8

"""
    Content API for Shopping

    Manage your product listings and accounts for Google Shopping

    The version of the OpenAPI document: v2.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.model_date import ModelDate
from typing import Optional, Set
from typing_extensions import Self

class Segments(BaseModel):
    """
    Dimensions according to which metrics are segmented in the response. Values of product dimensions, such as `offer_id`, reflect the state of a product at the time of the corresponding event, for example, impression or order. Segment fields cannot be selected in queries without also selecting at least one metric field. Values are only set for dimensions requested explicitly in the request's search query.
    """ # noqa: E501
    brand: Optional[StrictStr] = Field(default=None, description="Brand of the product.")
    category_l1: Optional[StrictStr] = Field(default=None, description="[Product category (1st level)](https://developers.google.com/shopping-content/guides/reports/segmentation#category_and_product_type) in Google's product taxonomy.", alias="categoryL1")
    category_l2: Optional[StrictStr] = Field(default=None, description="[Product category (2nd level)](https://developers.google.com/shopping-content/guides/reports/segmentation#category_and_product_type) in Google's product taxonomy.", alias="categoryL2")
    category_l3: Optional[StrictStr] = Field(default=None, description="[Product category (3rd level)](https://developers.google.com/shopping-content/guides/reports/segmentation#category_and_product_type) in Google's product taxonomy.", alias="categoryL3")
    category_l4: Optional[StrictStr] = Field(default=None, description="[Product category (4th level)](https://developers.google.com/shopping-content/guides/reports/segmentation#category_and_product_type) in Google's product taxonomy.", alias="categoryL4")
    category_l5: Optional[StrictStr] = Field(default=None, description="[Product category (5th level)](https://developers.google.com/shopping-content/guides/reports/segmentation#category_and_product_type) in Google's product taxonomy.", alias="categoryL5")
    currency_code: Optional[StrictStr] = Field(default=None, description="Currency in which price metrics are represented, for example, if you select `ordered_item_sales_micros`, the returned value will be represented by this currency.", alias="currencyCode")
    custom_label0: Optional[StrictStr] = Field(default=None, description="Custom label 0 for custom grouping of products.", alias="customLabel0")
    custom_label1: Optional[StrictStr] = Field(default=None, description="Custom label 1 for custom grouping of products.", alias="customLabel1")
    custom_label2: Optional[StrictStr] = Field(default=None, description="Custom label 2 for custom grouping of products.", alias="customLabel2")
    custom_label3: Optional[StrictStr] = Field(default=None, description="Custom label 3 for custom grouping of products.", alias="customLabel3")
    custom_label4: Optional[StrictStr] = Field(default=None, description="Custom label 4 for custom grouping of products.", alias="customLabel4")
    customer_country_code: Optional[StrictStr] = Field(default=None, description="Code of the country where the customer is located at the time of the event. Represented in the ISO 3166 format. If the customer country cannot be determined, a special 'ZZ' code is returned.", alias="customerCountryCode")
    var_date: Optional[ModelDate] = Field(default=None, alias="date")
    offer_id: Optional[StrictStr] = Field(default=None, description="Merchant-provided id of the product.", alias="offerId")
    product_type_l1: Optional[StrictStr] = Field(default=None, description="[Product type (1st level)](https://developers.google.com/shopping-content/guides/reports/segmentation#category_and_product_type) in merchant's own product taxonomy.", alias="productTypeL1")
    product_type_l2: Optional[StrictStr] = Field(default=None, description="[Product type (2nd level)](https://developers.google.com/shopping-content/guides/reports/segmentation#category_and_product_type) in merchant's own product taxonomy.", alias="productTypeL2")
    product_type_l3: Optional[StrictStr] = Field(default=None, description="[Product type (3rd level)](https://developers.google.com/shopping-content/guides/reports/segmentation#category_and_product_type) in merchant's own product taxonomy.", alias="productTypeL3")
    product_type_l4: Optional[StrictStr] = Field(default=None, description="[Product type (4th level)](https://developers.google.com/shopping-content/guides/reports/segmentation#category_and_product_type) in merchant's own product taxonomy.", alias="productTypeL4")
    product_type_l5: Optional[StrictStr] = Field(default=None, description="[Product type (5th level)](https://developers.google.com/shopping-content/guides/reports/segmentation#category_and_product_type) in merchant's own product taxonomy.", alias="productTypeL5")
    program: Optional[StrictStr] = Field(default=None, description="Program to which metrics apply, for example, Free Product Listing.")
    title: Optional[StrictStr] = Field(default=None, description="Title of the product.")
    week: Optional[ModelDate] = None
    __properties: ClassVar[List[str]] = ["brand", "categoryL1", "categoryL2", "categoryL3", "categoryL4", "categoryL5", "currencyCode", "customLabel0", "customLabel1", "customLabel2", "customLabel3", "customLabel4", "customerCountryCode", "date", "offerId", "productTypeL1", "productTypeL2", "productTypeL3", "productTypeL4", "productTypeL5", "program", "title", "week"]

    @field_validator('program')
    def program_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['PROGRAM_UNSPECIFIED', 'SHOPPING_ADS', 'FREE_PRODUCT_LISTING', 'FREE_LOCAL_PRODUCT_LISTING', 'BUY_ON_GOOGLE_LISTING']):
            raise ValueError("must be one of enum values ('PROGRAM_UNSPECIFIED', 'SHOPPING_ADS', 'FREE_PRODUCT_LISTING', 'FREE_LOCAL_PRODUCT_LISTING', 'BUY_ON_GOOGLE_LISTING')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Segments from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of var_date
        if self.var_date:
            _dict['date'] = self.var_date.to_dict()
        # override the default output from pydantic by calling `to_dict()` of week
        if self.week:
            _dict['week'] = self.week.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Segments from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "brand": obj.get("brand"),
            "categoryL1": obj.get("categoryL1"),
            "categoryL2": obj.get("categoryL2"),
            "categoryL3": obj.get("categoryL3"),
            "categoryL4": obj.get("categoryL4"),
            "categoryL5": obj.get("categoryL5"),
            "currencyCode": obj.get("currencyCode"),
            "customLabel0": obj.get("customLabel0"),
            "customLabel1": obj.get("customLabel1"),
            "customLabel2": obj.get("customLabel2"),
            "customLabel3": obj.get("customLabel3"),
            "customLabel4": obj.get("customLabel4"),
            "customerCountryCode": obj.get("customerCountryCode"),
            "date": ModelDate.from_dict(obj["date"]) if obj.get("date") is not None else None,
            "offerId": obj.get("offerId"),
            "productTypeL1": obj.get("productTypeL1"),
            "productTypeL2": obj.get("productTypeL2"),
            "productTypeL3": obj.get("productTypeL3"),
            "productTypeL4": obj.get("productTypeL4"),
            "productTypeL5": obj.get("productTypeL5"),
            "program": obj.get("program"),
            "title": obj.get("title"),
            "week": ModelDate.from_dict(obj["week"]) if obj.get("week") is not None else None
        })
        return _obj



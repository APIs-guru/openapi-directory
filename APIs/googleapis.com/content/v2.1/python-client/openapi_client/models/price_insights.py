# coding: utf-8

"""
    Content API for Shopping

    Manage your product listings and accounts for Google Shopping

    The version of the OpenAPI document: v2.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class PriceInsights(BaseModel):
    """
    Price insights fields requested by the merchant in the query. Field values are only set if the merchant queries `PriceInsightsProductView`. https://support.google.com/merchants/answer/11916926
    """ # noqa: E501
    predicted_clicks_change_fraction: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The predicted change in clicks as a fraction after introducing the suggested price compared to current active price. For example, 0.05 is a 5% predicted increase in clicks.", alias="predictedClicksChangeFraction")
    predicted_conversions_change_fraction: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The predicted change in conversions as a fraction after introducing the suggested price compared to current active price. For example, 0.05 is a 5% predicted increase in conversions).", alias="predictedConversionsChangeFraction")
    predicted_gross_profit_change_fraction: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="*Deprecated*: This field is no longer supported and will start returning 0. The predicted change in gross profit as a fraction after introducing the suggested price compared to current active price. For example, 0.05 is a 5% predicted increase in gross profit.", alias="predictedGrossProfitChangeFraction")
    predicted_impressions_change_fraction: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The predicted change in impressions as a fraction after introducing the suggested price compared to current active price. For example, 0.05 is a 5% predicted increase in impressions.", alias="predictedImpressionsChangeFraction")
    predicted_monthly_gross_profit_change_currency_code: Optional[StrictStr] = Field(default=None, description="*Deprecated*: This field is no longer supported and will start returning USD for all requests. The predicted monthly gross profit change currency (ISO 4217 code).", alias="predictedMonthlyGrossProfitChangeCurrencyCode")
    predicted_monthly_gross_profit_change_micros: Optional[StrictStr] = Field(default=None, description="*Deprecated*: This field is no longer supported and will start returning 0. The predicted change in gross profit in micros (1 millionth of a standard unit, 1 USD = 1000000 micros) after introducing the suggested price for a month compared to current active price.", alias="predictedMonthlyGrossProfitChangeMicros")
    suggested_price_currency_code: Optional[StrictStr] = Field(default=None, description="The suggested price currency (ISO 4217 code).", alias="suggestedPriceCurrencyCode")
    suggested_price_micros: Optional[StrictStr] = Field(default=None, description="The latest suggested price in micros (1 millionth of a standard unit, 1 USD = 1000000 micros) for the product.", alias="suggestedPriceMicros")
    __properties: ClassVar[List[str]] = ["predictedClicksChangeFraction", "predictedConversionsChangeFraction", "predictedGrossProfitChangeFraction", "predictedImpressionsChangeFraction", "predictedMonthlyGrossProfitChangeCurrencyCode", "predictedMonthlyGrossProfitChangeMicros", "suggestedPriceCurrencyCode", "suggestedPriceMicros"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PriceInsights from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PriceInsights from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "predictedClicksChangeFraction": obj.get("predictedClicksChangeFraction"),
            "predictedConversionsChangeFraction": obj.get("predictedConversionsChangeFraction"),
            "predictedGrossProfitChangeFraction": obj.get("predictedGrossProfitChangeFraction"),
            "predictedImpressionsChangeFraction": obj.get("predictedImpressionsChangeFraction"),
            "predictedMonthlyGrossProfitChangeCurrencyCode": obj.get("predictedMonthlyGrossProfitChangeCurrencyCode"),
            "predictedMonthlyGrossProfitChangeMicros": obj.get("predictedMonthlyGrossProfitChangeMicros"),
            "suggestedPriceCurrencyCode": obj.get("suggestedPriceCurrencyCode"),
            "suggestedPriceMicros": obj.get("suggestedPriceMicros")
        })
        return _obj



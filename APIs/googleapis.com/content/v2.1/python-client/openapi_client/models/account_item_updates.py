# coding: utf-8

"""
    Content API for Shopping

    Manage your product listings and accounts for Google Shopping

    The version of the OpenAPI document: v2.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.account_item_updates_settings import AccountItemUpdatesSettings
from typing import Optional, Set
from typing_extensions import Self

class AccountItemUpdates(BaseModel):
    """
    Turning on [item updates](https://support.google.com/merchants/answer/3246284) allows Google to automatically update items for you. When item updates are on, Google uses the structured data markup on the website and advanced data extractors to update the price and availability of the items. When the item updates are off, items with mismatched data aren't shown.
    """ # noqa: E501
    account_item_updates_settings: Optional[AccountItemUpdatesSettings] = Field(default=None, alias="accountItemUpdatesSettings")
    effective_allow_availability_updates: Optional[StrictBool] = Field(default=None, description="Output only. The effective value of allow_availability_updates. If account_item_updates_settings is present, then this value is the same. Otherwise, it represents the inherited value of the parent account. Read-only.", alias="effectiveAllowAvailabilityUpdates")
    effective_allow_condition_updates: Optional[StrictBool] = Field(default=None, description="Output only. The effective value of allow_condition_updates. If account_item_updates_settings is present, then this value is the same. Otherwise, it represents the inherited value of the parent account. Read-only.", alias="effectiveAllowConditionUpdates")
    effective_allow_price_updates: Optional[StrictBool] = Field(default=None, description="Output only. The effective value of allow_price_updates. If account_item_updates_settings is present, then this value is the same. Otherwise, it represents the inherited value of the parent account. Read-only.", alias="effectiveAllowPriceUpdates")
    effective_allow_strict_availability_updates: Optional[StrictBool] = Field(default=None, description="Output only. The effective value of allow_strict_availability_updates. If account_item_updates_settings is present, then this value is the same. Otherwise, it represents the inherited value of the parent account. Read-only.", alias="effectiveAllowStrictAvailabilityUpdates")
    __properties: ClassVar[List[str]] = ["accountItemUpdatesSettings", "effectiveAllowAvailabilityUpdates", "effectiveAllowConditionUpdates", "effectiveAllowPriceUpdates", "effectiveAllowStrictAvailabilityUpdates"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AccountItemUpdates from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "effective_allow_availability_updates",
            "effective_allow_condition_updates",
            "effective_allow_price_updates",
            "effective_allow_strict_availability_updates",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of account_item_updates_settings
        if self.account_item_updates_settings:
            _dict['accountItemUpdatesSettings'] = self.account_item_updates_settings.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AccountItemUpdates from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "accountItemUpdatesSettings": AccountItemUpdatesSettings.from_dict(obj["accountItemUpdatesSettings"]) if obj.get("accountItemUpdatesSettings") is not None else None,
            "effectiveAllowAvailabilityUpdates": obj.get("effectiveAllowAvailabilityUpdates"),
            "effectiveAllowConditionUpdates": obj.get("effectiveAllowConditionUpdates"),
            "effectiveAllowPriceUpdates": obj.get("effectiveAllowPriceUpdates"),
            "effectiveAllowStrictAvailabilityUpdates": obj.get("effectiveAllowStrictAvailabilityUpdates")
        })
        return _obj



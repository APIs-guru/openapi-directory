# coding: utf-8

"""
    Content API for Shopping

    Manage your product listings and accounts for Google Shopping

    The version of the OpenAPI document: v2.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.order_address import OrderAddress
from openapi_client.models.order_customer import OrderCustomer
from openapi_client.models.order_delivery_details import OrderDeliveryDetails
from openapi_client.models.order_line_item import OrderLineItem
from openapi_client.models.order_order_annotation import OrderOrderAnnotation
from openapi_client.models.order_pickup_details import OrderPickupDetails
from openapi_client.models.order_promotion import OrderPromotion
from openapi_client.models.order_refund import OrderRefund
from openapi_client.models.order_shipment import OrderShipment
from openapi_client.models.price import Price
from typing import Optional, Set
from typing_extensions import Self

class Order(BaseModel):
    """
    Order. Production access (all methods) requires the order manager role. Sandbox access does not.
    """ # noqa: E501
    acknowledged: Optional[StrictBool] = Field(default=None, description="Whether the order was acknowledged.")
    annotations: Optional[List[OrderOrderAnnotation]] = Field(default=None, description="List of key-value pairs that are attached to a given order.")
    billing_address: Optional[OrderAddress] = Field(default=None, alias="billingAddress")
    customer: Optional[OrderCustomer] = None
    delivery_details: Optional[OrderDeliveryDetails] = Field(default=None, alias="deliveryDetails")
    id: Optional[StrictStr] = Field(default=None, description="The REST ID of the order. Globally unique.")
    kind: Optional[StrictStr] = Field(default=None, description="Identifies what kind of resource this is. Value: the fixed string \"`content#order`\"")
    line_items: Optional[List[OrderLineItem]] = Field(default=None, description="Line items that are ordered.", alias="lineItems")
    merchant_id: Optional[StrictStr] = Field(default=None, alias="merchantId")
    merchant_order_id: Optional[StrictStr] = Field(default=None, description="Merchant-provided ID of the order.", alias="merchantOrderId")
    net_price_amount: Optional[Price] = Field(default=None, alias="netPriceAmount")
    net_tax_amount: Optional[Price] = Field(default=None, alias="netTaxAmount")
    payment_status: Optional[StrictStr] = Field(default=None, description="The status of the payment. Acceptable values are: - \"`paymentCaptured`\" - \"`paymentRejected`\" - \"`paymentSecured`\" - \"`pendingAuthorization`\" ", alias="paymentStatus")
    pickup_details: Optional[OrderPickupDetails] = Field(default=None, alias="pickupDetails")
    placed_date: Optional[StrictStr] = Field(default=None, description="The date when the order was placed, in ISO 8601 format.", alias="placedDate")
    promotions: Optional[List[OrderPromotion]] = Field(default=None, description="Promotions associated with the order. To determine which promotions apply to which products, check the `Promotions[].appliedItems[].lineItemId` field against the `LineItems[].id` field for each promotion. If a promotion is applied to more than 1 offerId, divide the discount value by the number of affected offers to determine how much discount to apply to each offerId. Examples: 1. To calculate price paid by the customer for a single line item including the discount: For each promotion, subtract the `LineItems[].adjustments[].priceAdjustment.value` amount from the `LineItems[].Price.value`. 2. To calculate price paid by the customer for a single line item including the discount in case of multiple quantity: For each promotion, divide the `LineItems[].adjustments[].priceAdjustment.value` by the quantity of products then subtract the resulting value from the `LineItems[].Product.Price.value` for each quantity item. Only 1 promotion can be applied to an offerId in a given order. To refund an item which had a promotion applied to it, make sure to refund the amount after first subtracting the promotion discount from the item price. More details about the program are here.")
    refunds: Optional[List[OrderRefund]] = Field(default=None, description="Refunds for the order.")
    shipments: Optional[List[OrderShipment]] = Field(default=None, description="Shipments of the order.")
    shipping_cost: Optional[Price] = Field(default=None, alias="shippingCost")
    shipping_cost_tax: Optional[Price] = Field(default=None, alias="shippingCostTax")
    status: Optional[StrictStr] = Field(default=None, description="The status of the order. Acceptable values are: - \"`canceled`\" - \"`delivered`\" - \"`inProgress`\" - \"`partiallyDelivered`\" - \"`partiallyReturned`\" - \"`partiallyShipped`\" - \"`pendingShipment`\" - \"`returned`\" - \"`shipped`\" ")
    tax_collector: Optional[StrictStr] = Field(default=None, description="The party responsible for collecting and remitting taxes. Acceptable values are: - \"`marketplaceFacilitator`\" - \"`merchant`\" ", alias="taxCollector")
    __properties: ClassVar[List[str]] = ["acknowledged", "annotations", "billingAddress", "customer", "deliveryDetails", "id", "kind", "lineItems", "merchantId", "merchantOrderId", "netPriceAmount", "netTaxAmount", "paymentStatus", "pickupDetails", "placedDate", "promotions", "refunds", "shipments", "shippingCost", "shippingCostTax", "status", "taxCollector"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Order from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in annotations (list)
        _items = []
        if self.annotations:
            for _item_annotations in self.annotations:
                if _item_annotations:
                    _items.append(_item_annotations.to_dict())
            _dict['annotations'] = _items
        # override the default output from pydantic by calling `to_dict()` of billing_address
        if self.billing_address:
            _dict['billingAddress'] = self.billing_address.to_dict()
        # override the default output from pydantic by calling `to_dict()` of customer
        if self.customer:
            _dict['customer'] = self.customer.to_dict()
        # override the default output from pydantic by calling `to_dict()` of delivery_details
        if self.delivery_details:
            _dict['deliveryDetails'] = self.delivery_details.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in line_items (list)
        _items = []
        if self.line_items:
            for _item_line_items in self.line_items:
                if _item_line_items:
                    _items.append(_item_line_items.to_dict())
            _dict['lineItems'] = _items
        # override the default output from pydantic by calling `to_dict()` of net_price_amount
        if self.net_price_amount:
            _dict['netPriceAmount'] = self.net_price_amount.to_dict()
        # override the default output from pydantic by calling `to_dict()` of net_tax_amount
        if self.net_tax_amount:
            _dict['netTaxAmount'] = self.net_tax_amount.to_dict()
        # override the default output from pydantic by calling `to_dict()` of pickup_details
        if self.pickup_details:
            _dict['pickupDetails'] = self.pickup_details.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in promotions (list)
        _items = []
        if self.promotions:
            for _item_promotions in self.promotions:
                if _item_promotions:
                    _items.append(_item_promotions.to_dict())
            _dict['promotions'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in refunds (list)
        _items = []
        if self.refunds:
            for _item_refunds in self.refunds:
                if _item_refunds:
                    _items.append(_item_refunds.to_dict())
            _dict['refunds'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in shipments (list)
        _items = []
        if self.shipments:
            for _item_shipments in self.shipments:
                if _item_shipments:
                    _items.append(_item_shipments.to_dict())
            _dict['shipments'] = _items
        # override the default output from pydantic by calling `to_dict()` of shipping_cost
        if self.shipping_cost:
            _dict['shippingCost'] = self.shipping_cost.to_dict()
        # override the default output from pydantic by calling `to_dict()` of shipping_cost_tax
        if self.shipping_cost_tax:
            _dict['shippingCostTax'] = self.shipping_cost_tax.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Order from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "acknowledged": obj.get("acknowledged"),
            "annotations": [OrderOrderAnnotation.from_dict(_item) for _item in obj["annotations"]] if obj.get("annotations") is not None else None,
            "billingAddress": OrderAddress.from_dict(obj["billingAddress"]) if obj.get("billingAddress") is not None else None,
            "customer": OrderCustomer.from_dict(obj["customer"]) if obj.get("customer") is not None else None,
            "deliveryDetails": OrderDeliveryDetails.from_dict(obj["deliveryDetails"]) if obj.get("deliveryDetails") is not None else None,
            "id": obj.get("id"),
            "kind": obj.get("kind"),
            "lineItems": [OrderLineItem.from_dict(_item) for _item in obj["lineItems"]] if obj.get("lineItems") is not None else None,
            "merchantId": obj.get("merchantId"),
            "merchantOrderId": obj.get("merchantOrderId"),
            "netPriceAmount": Price.from_dict(obj["netPriceAmount"]) if obj.get("netPriceAmount") is not None else None,
            "netTaxAmount": Price.from_dict(obj["netTaxAmount"]) if obj.get("netTaxAmount") is not None else None,
            "paymentStatus": obj.get("paymentStatus"),
            "pickupDetails": OrderPickupDetails.from_dict(obj["pickupDetails"]) if obj.get("pickupDetails") is not None else None,
            "placedDate": obj.get("placedDate"),
            "promotions": [OrderPromotion.from_dict(_item) for _item in obj["promotions"]] if obj.get("promotions") is not None else None,
            "refunds": [OrderRefund.from_dict(_item) for _item in obj["refunds"]] if obj.get("refunds") is not None else None,
            "shipments": [OrderShipment.from_dict(_item) for _item in obj["shipments"]] if obj.get("shipments") is not None else None,
            "shippingCost": Price.from_dict(obj["shippingCost"]) if obj.get("shippingCost") is not None else None,
            "shippingCostTax": Price.from_dict(obj["shippingCostTax"]) if obj.get("shippingCostTax") is not None else None,
            "status": obj.get("status"),
            "taxCollector": obj.get("taxCollector")
        })
        return _obj



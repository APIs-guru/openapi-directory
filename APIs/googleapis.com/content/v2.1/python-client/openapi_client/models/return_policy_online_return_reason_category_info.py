# coding: utf-8

"""
    Content API for Shopping

    Manage your product listings and accounts for Google Shopping

    The version of the OpenAPI document: v2.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.return_policy_online_return_shipping_fee import ReturnPolicyOnlineReturnShippingFee
from typing import Optional, Set
from typing_extensions import Self

class ReturnPolicyOnlineReturnReasonCategoryInfo(BaseModel):
    """
    The return reason category info wrapper.
    """ # noqa: E501
    return_label_source: Optional[StrictStr] = Field(default=None, description="The corresponding return label source.", alias="returnLabelSource")
    return_reason_category: Optional[StrictStr] = Field(default=None, description="The return reason category.", alias="returnReasonCategory")
    return_shipping_fee: Optional[ReturnPolicyOnlineReturnShippingFee] = Field(default=None, alias="returnShippingFee")
    __properties: ClassVar[List[str]] = ["returnLabelSource", "returnReasonCategory", "returnShippingFee"]

    @field_validator('return_label_source')
    def return_label_source_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['RETURN_LABEL_SOURCE_UNSPECIFIED', 'DOWNLOAD_AND_PRINT', 'IN_THE_BOX', 'CUSTOMER_RESPONSIBILITY']):
            raise ValueError("must be one of enum values ('RETURN_LABEL_SOURCE_UNSPECIFIED', 'DOWNLOAD_AND_PRINT', 'IN_THE_BOX', 'CUSTOMER_RESPONSIBILITY')")
        return value

    @field_validator('return_reason_category')
    def return_reason_category_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['RETURN_REASON_CATEGORY_UNSPECIFIED', 'BUYER_REMORSE', 'ITEM_DEFECT']):
            raise ValueError("must be one of enum values ('RETURN_REASON_CATEGORY_UNSPECIFIED', 'BUYER_REMORSE', 'ITEM_DEFECT')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ReturnPolicyOnlineReturnReasonCategoryInfo from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of return_shipping_fee
        if self.return_shipping_fee:
            _dict['returnShippingFee'] = self.return_shipping_fee.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ReturnPolicyOnlineReturnReasonCategoryInfo from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "returnLabelSource": obj.get("returnLabelSource"),
            "returnReasonCategory": obj.get("returnReasonCategory"),
            "returnShippingFee": ReturnPolicyOnlineReturnShippingFee.from_dict(obj["returnShippingFee"]) if obj.get("returnShippingFee") is not None else None
        })
        return _obj



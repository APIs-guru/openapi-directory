# coding: utf-8

"""
    Content API for Shopping

    Manage your product listings and accounts for Google Shopping

    The version of the OpenAPI document: v2.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.price_amount import PriceAmount
from openapi_client.models.promotion_promotion_status import PromotionPromotionStatus
from openapi_client.models.time_period import TimePeriod
from typing import Optional, Set
from typing_extensions import Self

class Promotion(BaseModel):
    """
    Represents a promotion. See the following articles for more details. * [Promotions feed specification](https://support.google.com/merchants/answer/2906014) * [Local promotions feed specification](https://support.google.com/merchants/answer/10146130) * [Promotions on Buy on Google product data specification](https://support.google.com/merchants/answer/9173673)
    """ # noqa: E501
    brand: Optional[List[StrictStr]] = Field(default=None, description="Product filter by brand for the promotion.")
    brand_exclusion: Optional[List[StrictStr]] = Field(default=None, description="Product filter by brand exclusion for the promotion.", alias="brandExclusion")
    content_language: Optional[StrictStr] = Field(default=None, description="Required. The content language used as part of the unique identifier. `en` content language is available for all target countries. `fr` content language is available for `CA` and `FR` target countries. `de` content language is available for `DE` target country. `nl` content language is available for `NL` target country. `it` content language is available for `IT` target country. `pt` content language is available for `BR` target country. `ja` content language is available for `JP` target country. `ko` content language is available for `KR` target country.", alias="contentLanguage")
    coupon_value_type: Optional[StrictStr] = Field(default=None, description="Required. Coupon value type for the promotion.", alias="couponValueType")
    free_gift_description: Optional[StrictStr] = Field(default=None, description="Free gift description for the promotion.", alias="freeGiftDescription")
    free_gift_item_id: Optional[StrictStr] = Field(default=None, description="Free gift item ID for the promotion.", alias="freeGiftItemId")
    free_gift_value: Optional[PriceAmount] = Field(default=None, alias="freeGiftValue")
    generic_redemption_code: Optional[StrictStr] = Field(default=None, description="Generic redemption code for the promotion. To be used with the `offerType` field.", alias="genericRedemptionCode")
    get_this_quantity_discounted: Optional[StrictInt] = Field(default=None, description="The number of items discounted in the promotion.", alias="getThisQuantityDiscounted")
    id: Optional[StrictStr] = Field(default=None, description="Output only. The REST promotion ID to uniquely identify the promotion. Content API methods that operate on promotions take this as their `promotionId` parameter. The REST ID for a promotion is of the form channel:contentLanguage:targetCountry:promotionId The `channel` field has a value of `\"online\"`, `\"in_store\"`, or `\"online_in_store\"`.")
    item_group_id: Optional[List[StrictStr]] = Field(default=None, description="Product filter by item group ID for the promotion.", alias="itemGroupId")
    item_group_id_exclusion: Optional[List[StrictStr]] = Field(default=None, description="Product filter by item group ID exclusion for the promotion.", alias="itemGroupIdExclusion")
    item_id: Optional[List[StrictStr]] = Field(default=None, description="Product filter by item ID for the promotion.", alias="itemId")
    item_id_exclusion: Optional[List[StrictStr]] = Field(default=None, description="Product filter by item ID exclusion for the promotion.", alias="itemIdExclusion")
    limit_quantity: Optional[StrictInt] = Field(default=None, description="Maximum purchase quantity for the promotion.", alias="limitQuantity")
    limit_value: Optional[PriceAmount] = Field(default=None, alias="limitValue")
    long_title: Optional[StrictStr] = Field(default=None, description="Required. Long title for the promotion.", alias="longTitle")
    minimum_purchase_amount: Optional[PriceAmount] = Field(default=None, alias="minimumPurchaseAmount")
    minimum_purchase_quantity: Optional[StrictInt] = Field(default=None, description="Minimum purchase quantity for the promotion.", alias="minimumPurchaseQuantity")
    money_budget: Optional[PriceAmount] = Field(default=None, alias="moneyBudget")
    money_off_amount: Optional[PriceAmount] = Field(default=None, alias="moneyOffAmount")
    offer_type: Optional[StrictStr] = Field(default=None, description="Required. Type of the promotion.", alias="offerType")
    order_limit: Optional[StrictInt] = Field(default=None, description="Order limit for the promotion.", alias="orderLimit")
    percent_off: Optional[StrictInt] = Field(default=None, description="The percentage discount offered in the promotion.", alias="percentOff")
    product_applicability: Optional[StrictStr] = Field(default=None, description="Required. Applicability of the promotion to either all products or only specific products.", alias="productApplicability")
    product_type: Optional[List[StrictStr]] = Field(default=None, description="Product filter by product type for the promotion.", alias="productType")
    product_type_exclusion: Optional[List[StrictStr]] = Field(default=None, description="Product filter by product type exclusion for the promotion.", alias="productTypeExclusion")
    promotion_destination_ids: Optional[List[StrictStr]] = Field(default=None, description="Destination ID for the promotion.", alias="promotionDestinationIds")
    promotion_display_dates: Optional[StrictStr] = Field(default=None, description="String representation of the promotion display dates. Deprecated. Use `promotion_display_time_period` instead.", alias="promotionDisplayDates")
    promotion_display_time_period: Optional[TimePeriod] = Field(default=None, alias="promotionDisplayTimePeriod")
    promotion_effective_dates: Optional[StrictStr] = Field(default=None, description="String representation of the promotion effective dates. Deprecated. Use `promotion_effective_time_period` instead.", alias="promotionEffectiveDates")
    promotion_effective_time_period: Optional[TimePeriod] = Field(default=None, alias="promotionEffectiveTimePeriod")
    promotion_id: Optional[StrictStr] = Field(default=None, description="Required. The user provided promotion ID to uniquely identify the promotion.", alias="promotionId")
    promotion_status: Optional[PromotionPromotionStatus] = Field(default=None, alias="promotionStatus")
    promotion_url: Optional[StrictStr] = Field(default=None, description="URL to the page on the merchant's site where the promotion shows. Local Inventory ads promotions throw an error if no promo url is included. URL is used to confirm that the promotion is valid and can be redeemed.", alias="promotionUrl")
    redemption_channel: Optional[List[StrictStr]] = Field(default=None, description="Required. Redemption channel for the promotion. At least one channel is required.", alias="redemptionChannel")
    shipping_service_names: Optional[List[StrictStr]] = Field(default=None, description="Shipping service names for the promotion.", alias="shippingServiceNames")
    store_applicability: Optional[StrictStr] = Field(default=None, description="Whether the promotion applies to all stores, or only specified stores. Local Inventory ads promotions throw an error if no store applicability is included. An INVALID_ARGUMENT error is thrown if store_applicability is set to ALL_STORES and store_code or score_code_exclusion is set to a value.", alias="storeApplicability")
    store_code: Optional[List[StrictStr]] = Field(default=None, description="Store codes to include for the promotion.", alias="storeCode")
    store_code_exclusion: Optional[List[StrictStr]] = Field(default=None, description="Store codes to exclude for the promotion.", alias="storeCodeExclusion")
    target_country: Optional[StrictStr] = Field(default=None, description="Required. The target country used as part of the unique identifier. Can be `AU`, `CA`, `DE`, `FR`, `GB`, `IN`, `US`, `BR`, `ES`, `NL`, `JP`, `IT` or `KR`.", alias="targetCountry")
    __properties: ClassVar[List[str]] = ["brand", "brandExclusion", "contentLanguage", "couponValueType", "freeGiftDescription", "freeGiftItemId", "freeGiftValue", "genericRedemptionCode", "getThisQuantityDiscounted", "id", "itemGroupId", "itemGroupIdExclusion", "itemId", "itemIdExclusion", "limitQuantity", "limitValue", "longTitle", "minimumPurchaseAmount", "minimumPurchaseQuantity", "moneyBudget", "moneyOffAmount", "offerType", "orderLimit", "percentOff", "productApplicability", "productType", "productTypeExclusion", "promotionDestinationIds", "promotionDisplayDates", "promotionDisplayTimePeriod", "promotionEffectiveDates", "promotionEffectiveTimePeriod", "promotionId", "promotionStatus", "promotionUrl", "redemptionChannel", "shippingServiceNames", "storeApplicability", "storeCode", "storeCodeExclusion", "targetCountry"]

    @field_validator('coupon_value_type')
    def coupon_value_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['COUPON_VALUE_TYPE_UNSPECIFIED', 'MONEY_OFF', 'PERCENT_OFF', 'BUY_M_GET_N_MONEY_OFF', 'BUY_M_GET_N_PERCENT_OFF', 'BUY_M_GET_MONEY_OFF', 'BUY_M_GET_PERCENT_OFF', 'FREE_GIFT', 'FREE_GIFT_WITH_VALUE', 'FREE_GIFT_WITH_ITEM_ID', 'FREE_SHIPPING_STANDARD', 'FREE_SHIPPING_OVERNIGHT', 'FREE_SHIPPING_TWO_DAY']):
            raise ValueError("must be one of enum values ('COUPON_VALUE_TYPE_UNSPECIFIED', 'MONEY_OFF', 'PERCENT_OFF', 'BUY_M_GET_N_MONEY_OFF', 'BUY_M_GET_N_PERCENT_OFF', 'BUY_M_GET_MONEY_OFF', 'BUY_M_GET_PERCENT_OFF', 'FREE_GIFT', 'FREE_GIFT_WITH_VALUE', 'FREE_GIFT_WITH_ITEM_ID', 'FREE_SHIPPING_STANDARD', 'FREE_SHIPPING_OVERNIGHT', 'FREE_SHIPPING_TWO_DAY')")
        return value

    @field_validator('offer_type')
    def offer_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['OFFER_TYPE_UNSPECIFIED', 'NO_CODE', 'GENERIC_CODE']):
            raise ValueError("must be one of enum values ('OFFER_TYPE_UNSPECIFIED', 'NO_CODE', 'GENERIC_CODE')")
        return value

    @field_validator('product_applicability')
    def product_applicability_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['PRODUCT_APPLICABILITY_UNSPECIFIED', 'ALL_PRODUCTS', 'SPECIFIC_PRODUCTS']):
            raise ValueError("must be one of enum values ('PRODUCT_APPLICABILITY_UNSPECIFIED', 'ALL_PRODUCTS', 'SPECIFIC_PRODUCTS')")
        return value

    @field_validator('redemption_channel')
    def redemption_channel_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        for i in value:
            if i not in set(['REDEMPTION_CHANNEL_UNSPECIFIED', 'IN_STORE', 'ONLINE']):
                raise ValueError("each list item must be one of ('REDEMPTION_CHANNEL_UNSPECIFIED', 'IN_STORE', 'ONLINE')")
        return value

    @field_validator('store_applicability')
    def store_applicability_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['STORE_APPLICABILITY_UNSPECIFIED', 'ALL_STORES', 'SPECIFIC_STORES']):
            raise ValueError("must be one of enum values ('STORE_APPLICABILITY_UNSPECIFIED', 'ALL_STORES', 'SPECIFIC_STORES')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Promotion from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "id",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of free_gift_value
        if self.free_gift_value:
            _dict['freeGiftValue'] = self.free_gift_value.to_dict()
        # override the default output from pydantic by calling `to_dict()` of limit_value
        if self.limit_value:
            _dict['limitValue'] = self.limit_value.to_dict()
        # override the default output from pydantic by calling `to_dict()` of minimum_purchase_amount
        if self.minimum_purchase_amount:
            _dict['minimumPurchaseAmount'] = self.minimum_purchase_amount.to_dict()
        # override the default output from pydantic by calling `to_dict()` of money_budget
        if self.money_budget:
            _dict['moneyBudget'] = self.money_budget.to_dict()
        # override the default output from pydantic by calling `to_dict()` of money_off_amount
        if self.money_off_amount:
            _dict['moneyOffAmount'] = self.money_off_amount.to_dict()
        # override the default output from pydantic by calling `to_dict()` of promotion_display_time_period
        if self.promotion_display_time_period:
            _dict['promotionDisplayTimePeriod'] = self.promotion_display_time_period.to_dict()
        # override the default output from pydantic by calling `to_dict()` of promotion_effective_time_period
        if self.promotion_effective_time_period:
            _dict['promotionEffectiveTimePeriod'] = self.promotion_effective_time_period.to_dict()
        # override the default output from pydantic by calling `to_dict()` of promotion_status
        if self.promotion_status:
            _dict['promotionStatus'] = self.promotion_status.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Promotion from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "brand": obj.get("brand"),
            "brandExclusion": obj.get("brandExclusion"),
            "contentLanguage": obj.get("contentLanguage"),
            "couponValueType": obj.get("couponValueType"),
            "freeGiftDescription": obj.get("freeGiftDescription"),
            "freeGiftItemId": obj.get("freeGiftItemId"),
            "freeGiftValue": PriceAmount.from_dict(obj["freeGiftValue"]) if obj.get("freeGiftValue") is not None else None,
            "genericRedemptionCode": obj.get("genericRedemptionCode"),
            "getThisQuantityDiscounted": obj.get("getThisQuantityDiscounted"),
            "id": obj.get("id"),
            "itemGroupId": obj.get("itemGroupId"),
            "itemGroupIdExclusion": obj.get("itemGroupIdExclusion"),
            "itemId": obj.get("itemId"),
            "itemIdExclusion": obj.get("itemIdExclusion"),
            "limitQuantity": obj.get("limitQuantity"),
            "limitValue": PriceAmount.from_dict(obj["limitValue"]) if obj.get("limitValue") is not None else None,
            "longTitle": obj.get("longTitle"),
            "minimumPurchaseAmount": PriceAmount.from_dict(obj["minimumPurchaseAmount"]) if obj.get("minimumPurchaseAmount") is not None else None,
            "minimumPurchaseQuantity": obj.get("minimumPurchaseQuantity"),
            "moneyBudget": PriceAmount.from_dict(obj["moneyBudget"]) if obj.get("moneyBudget") is not None else None,
            "moneyOffAmount": PriceAmount.from_dict(obj["moneyOffAmount"]) if obj.get("moneyOffAmount") is not None else None,
            "offerType": obj.get("offerType"),
            "orderLimit": obj.get("orderLimit"),
            "percentOff": obj.get("percentOff"),
            "productApplicability": obj.get("productApplicability"),
            "productType": obj.get("productType"),
            "productTypeExclusion": obj.get("productTypeExclusion"),
            "promotionDestinationIds": obj.get("promotionDestinationIds"),
            "promotionDisplayDates": obj.get("promotionDisplayDates"),
            "promotionDisplayTimePeriod": TimePeriod.from_dict(obj["promotionDisplayTimePeriod"]) if obj.get("promotionDisplayTimePeriod") is not None else None,
            "promotionEffectiveDates": obj.get("promotionEffectiveDates"),
            "promotionEffectiveTimePeriod": TimePeriod.from_dict(obj["promotionEffectiveTimePeriod"]) if obj.get("promotionEffectiveTimePeriod") is not None else None,
            "promotionId": obj.get("promotionId"),
            "promotionStatus": PromotionPromotionStatus.from_dict(obj["promotionStatus"]) if obj.get("promotionStatus") is not None else None,
            "promotionUrl": obj.get("promotionUrl"),
            "redemptionChannel": obj.get("redemptionChannel"),
            "shippingServiceNames": obj.get("shippingServiceNames"),
            "storeApplicability": obj.get("storeApplicability"),
            "storeCode": obj.get("storeCode"),
            "storeCodeExclusion": obj.get("storeCodeExclusion"),
            "targetCountry": obj.get("targetCountry")
        })
        return _obj



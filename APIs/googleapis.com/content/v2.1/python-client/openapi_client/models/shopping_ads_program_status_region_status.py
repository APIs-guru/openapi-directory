# coding: utf-8

"""
    Content API for Shopping

    Manage your product listings and accounts for Google Shopping

    The version of the OpenAPI document: v2.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.shopping_ads_program_status_review_ineligibility_reason_details import ShoppingAdsProgramStatusReviewIneligibilityReasonDetails
from typing import Optional, Set
from typing_extensions import Self

class ShoppingAdsProgramStatusRegionStatus(BaseModel):
    """
    Status of program and region.
    """ # noqa: E501
    disapproval_date: Optional[StrictStr] = Field(default=None, description="Date by which eligibilityStatus will go from `WARNING` to `DISAPPROVED`. Only visible when your eligibilityStatus is WARNING. In [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DD`.", alias="disapprovalDate")
    eligibility_status: Optional[StrictStr] = Field(default=None, description="Eligibility status of the Shopping Ads program.", alias="eligibilityStatus")
    onboarding_issues: Optional[List[StrictStr]] = Field(default=None, description="Issues that must be fixed to be eligible for review.", alias="onboardingIssues")
    region_codes: Optional[List[StrictStr]] = Field(default=None, description="The two-letter [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) codes for all the regions with the same `eligibilityStatus` and `reviewEligibility`.", alias="regionCodes")
    review_eligibility_status: Optional[StrictStr] = Field(default=None, description="If a program is eligible for review in a specific region. Only visible if `eligibilityStatus` is `DISAPPROVED`.", alias="reviewEligibilityStatus")
    review_ineligibility_reason: Optional[StrictStr] = Field(default=None, description="Review ineligibility reason if account is not eligible for review.", alias="reviewIneligibilityReason")
    review_ineligibility_reason_description: Optional[StrictStr] = Field(default=None, description="Reason a program in a specific region isnâ€™t eligible for review. Only visible if `reviewEligibilityStatus` is `INELIGIBLE`.", alias="reviewIneligibilityReasonDescription")
    review_ineligibility_reason_details: Optional[ShoppingAdsProgramStatusReviewIneligibilityReasonDetails] = Field(default=None, alias="reviewIneligibilityReasonDetails")
    review_issues: Optional[List[StrictStr]] = Field(default=None, description="Issues evaluated in the review process. Fix all issues before requesting a review.", alias="reviewIssues")
    __properties: ClassVar[List[str]] = ["disapprovalDate", "eligibilityStatus", "onboardingIssues", "regionCodes", "reviewEligibilityStatus", "reviewIneligibilityReason", "reviewIneligibilityReasonDescription", "reviewIneligibilityReasonDetails", "reviewIssues"]

    @field_validator('eligibility_status')
    def eligibility_status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['STATE_UNSPECIFIED', 'APPROVED', 'DISAPPROVED', 'WARNING', 'UNDER_REVIEW', 'PENDING_REVIEW', 'ONBOARDING']):
            raise ValueError("must be one of enum values ('STATE_UNSPECIFIED', 'APPROVED', 'DISAPPROVED', 'WARNING', 'UNDER_REVIEW', 'PENDING_REVIEW', 'ONBOARDING')")
        return value

    @field_validator('review_eligibility_status')
    def review_eligibility_status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['REVIEW_ELIGIBILITY_UNSPECIFIED', 'ELIGIBLE', 'INELIGIBLE']):
            raise ValueError("must be one of enum values ('REVIEW_ELIGIBILITY_UNSPECIFIED', 'ELIGIBLE', 'INELIGIBLE')")
        return value

    @field_validator('review_ineligibility_reason')
    def review_ineligibility_reason_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['REVIEW_INELIGIBILITY_REASON_UNSPECIFIED', 'ONBOARDING_ISSUES', 'NOT_ENOUGH_OFFERS', 'IN_COOLDOWN_PERIOD', 'ALREADY_UNDER_REVIEW', 'NO_REVIEW_REQUIRED', 'WILL_BE_REVIEWED_AUTOMATICALLY', 'IS_RETIRED', 'ALREADY_REVIEWED']):
            raise ValueError("must be one of enum values ('REVIEW_INELIGIBILITY_REASON_UNSPECIFIED', 'ONBOARDING_ISSUES', 'NOT_ENOUGH_OFFERS', 'IN_COOLDOWN_PERIOD', 'ALREADY_UNDER_REVIEW', 'NO_REVIEW_REQUIRED', 'WILL_BE_REVIEWED_AUTOMATICALLY', 'IS_RETIRED', 'ALREADY_REVIEWED')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ShoppingAdsProgramStatusRegionStatus from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of review_ineligibility_reason_details
        if self.review_ineligibility_reason_details:
            _dict['reviewIneligibilityReasonDetails'] = self.review_ineligibility_reason_details.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ShoppingAdsProgramStatusRegionStatus from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "disapprovalDate": obj.get("disapprovalDate"),
            "eligibilityStatus": obj.get("eligibilityStatus"),
            "onboardingIssues": obj.get("onboardingIssues"),
            "regionCodes": obj.get("regionCodes"),
            "reviewEligibilityStatus": obj.get("reviewEligibilityStatus"),
            "reviewIneligibilityReason": obj.get("reviewIneligibilityReason"),
            "reviewIneligibilityReasonDescription": obj.get("reviewIneligibilityReasonDescription"),
            "reviewIneligibilityReasonDetails": ShoppingAdsProgramStatusReviewIneligibilityReasonDetails.from_dict(obj["reviewIneligibilityReasonDetails"]) if obj.get("reviewIneligibilityReasonDetails") is not None else None,
            "reviewIssues": obj.get("reviewIssues")
        })
        return _obj



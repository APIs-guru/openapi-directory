# coding: utf-8

"""
    Content API for Shopping

    Manage your product listings and accounts for Google Shopping

    The version of the OpenAPI document: v2.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.order_customer_loyalty_info import OrderCustomerLoyaltyInfo
from openapi_client.models.order_customer_marketing_rights_info import OrderCustomerMarketingRightsInfo
from typing import Optional, Set
from typing_extensions import Self

class OrderCustomer(BaseModel):
    """
    OrderCustomer
    """ # noqa: E501
    full_name: Optional[StrictStr] = Field(default=None, description="Full name of the customer.", alias="fullName")
    invoice_receiving_email: Optional[StrictStr] = Field(default=None, description="Email address for the merchant to send value-added tax or invoice documentation of the order. Only the last document sent is made available to the customer. For more information, see About automated VAT invoicing for Buy on Google.", alias="invoiceReceivingEmail")
    loyalty_info: Optional[OrderCustomerLoyaltyInfo] = Field(default=None, alias="loyaltyInfo")
    marketing_rights_info: Optional[OrderCustomerMarketingRightsInfo] = Field(default=None, alias="marketingRightsInfo")
    __properties: ClassVar[List[str]] = ["fullName", "invoiceReceivingEmail", "loyaltyInfo", "marketingRightsInfo"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of OrderCustomer from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of loyalty_info
        if self.loyalty_info:
            _dict['loyaltyInfo'] = self.loyalty_info.to_dict()
        # override the default output from pydantic by calling `to_dict()` of marketing_rights_info
        if self.marketing_rights_info:
            _dict['marketingRightsInfo'] = self.marketing_rights_info.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of OrderCustomer from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "fullName": obj.get("fullName"),
            "invoiceReceivingEmail": obj.get("invoiceReceivingEmail"),
            "loyaltyInfo": OrderCustomerLoyaltyInfo.from_dict(obj["loyaltyInfo"]) if obj.get("loyaltyInfo") is not None else None,
            "marketingRightsInfo": OrderCustomerMarketingRightsInfo.from_dict(obj["marketingRightsInfo"]) if obj.get("marketingRightsInfo") is not None else None
        })
        return _obj



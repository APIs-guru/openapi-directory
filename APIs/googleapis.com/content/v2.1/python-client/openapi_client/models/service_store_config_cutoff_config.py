# coding: utf-8

"""
    Content API for Shopping

    Manage your product listings and accounts for Google Shopping

    The version of the OpenAPI document: v2.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.service_store_config_cutoff_config_local_cutoff_time import ServiceStoreConfigCutoffConfigLocalCutoffTime
from typing import Optional, Set
from typing_extensions import Self

class ServiceStoreConfigCutoffConfig(BaseModel):
    """
    Time local delivery ends for the day based on the local timezone of the store. `local_cutoff_time` and `store_close_offset_hours` are mutually exclusive.
    """ # noqa: E501
    local_cutoff_time: Optional[ServiceStoreConfigCutoffConfigLocalCutoffTime] = Field(default=None, alias="localCutoffTime")
    no_delivery_post_cutoff: Optional[StrictBool] = Field(default=None, description="Merchants can opt-out of showing n+1 day local delivery when they have a shipping service configured to n day local delivery. For example, if the shipping service defines same-day delivery, and it's past the cut-off, setting this field to `true` results in the calculated shipping service rate returning `NO_DELIVERY_POST_CUTOFF`. In the same example, setting this field to `false` results in the calculated shipping time being one day. This is only for local delivery.", alias="noDeliveryPostCutoff")
    store_close_offset_hours: Optional[StrictStr] = Field(default=None, description="Represents cutoff time as the number of hours before store closing. Mutually exclusive with other fields (hour and minute).", alias="storeCloseOffsetHours")
    __properties: ClassVar[List[str]] = ["localCutoffTime", "noDeliveryPostCutoff", "storeCloseOffsetHours"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ServiceStoreConfigCutoffConfig from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of local_cutoff_time
        if self.local_cutoff_time:
            _dict['localCutoffTime'] = self.local_cutoff_time.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ServiceStoreConfigCutoffConfig from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "localCutoffTime": ServiceStoreConfigCutoffConfigLocalCutoffTime.from_dict(obj["localCutoffTime"]) if obj.get("localCutoffTime") is not None else None,
            "noDeliveryPostCutoff": obj.get("noDeliveryPostCutoff"),
            "storeCloseOffsetHours": obj.get("storeCloseOffsetHours")
        })
        return _obj



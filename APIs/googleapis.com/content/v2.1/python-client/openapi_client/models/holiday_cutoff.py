# coding: utf-8

"""
    Content API for Shopping

    Manage your product listings and accounts for Google Shopping

    The version of the OpenAPI document: v2.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class HolidayCutoff(BaseModel):
    """
    HolidayCutoff
    """ # noqa: E501
    deadline_date: Optional[StrictStr] = Field(default=None, description="Date of the order deadline, in ISO 8601 format. For example, \"2016-11-29\" for 29th November 2016. Required.", alias="deadlineDate")
    deadline_hour: Optional[StrictInt] = Field(default=None, description="Hour of the day on the deadline date until which the order has to be placed to qualify for the delivery guarantee. Possible values are: 0 (midnight), 1, ..., 12 (noon), 13, ..., 23. Required.", alias="deadlineHour")
    deadline_timezone: Optional[StrictStr] = Field(default=None, description="Timezone identifier for the deadline hour (for example, \"Europe/Zurich\"). List of identifiers. Required.", alias="deadlineTimezone")
    holiday_id: Optional[StrictStr] = Field(default=None, description="Unique identifier for the holiday. Required.", alias="holidayId")
    visible_from_date: Optional[StrictStr] = Field(default=None, description="Date on which the deadline will become visible to consumers in ISO 8601 format. For example, \"2016-10-31\" for 31st October 2016. Required.", alias="visibleFromDate")
    __properties: ClassVar[List[str]] = ["deadlineDate", "deadlineHour", "deadlineTimezone", "holidayId", "visibleFromDate"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of HolidayCutoff from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of HolidayCutoff from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "deadlineDate": obj.get("deadlineDate"),
            "deadlineHour": obj.get("deadlineHour"),
            "deadlineTimezone": obj.get("deadlineTimezone"),
            "holidayId": obj.get("holidayId"),
            "visibleFromDate": obj.get("visibleFromDate")
        })
        return _obj



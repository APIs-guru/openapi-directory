# coding: utf-8

"""
    Content API for Shopping

    Manage your product listings and accounts for Google Shopping

    The version of the OpenAPI document: v2.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.postal_code_group import PostalCodeGroup
from openapi_client.models.service import Service
from openapi_client.models.warehouse import Warehouse
from typing import Optional, Set
from typing_extensions import Self

class ShippingSettings(BaseModel):
    """
    The merchant account's shipping settings. All methods except getsupportedcarriers and getsupportedholidays require the admin role.
    """ # noqa: E501
    account_id: Optional[StrictStr] = Field(default=None, description="The ID of the account to which these account shipping settings belong. Ignored upon update, always present in get request responses.", alias="accountId")
    postal_code_groups: Optional[List[PostalCodeGroup]] = Field(default=None, description="A list of postal code groups that can be referred to in `services`. Optional.", alias="postalCodeGroups")
    services: Optional[List[Service]] = Field(default=None, description="The target account's list of services. Optional.")
    warehouses: Optional[List[Warehouse]] = Field(default=None, description="Optional. A list of warehouses which can be referred to in `services`.")
    __properties: ClassVar[List[str]] = ["accountId", "postalCodeGroups", "services", "warehouses"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ShippingSettings from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in postal_code_groups (list)
        _items = []
        if self.postal_code_groups:
            for _item_postal_code_groups in self.postal_code_groups:
                if _item_postal_code_groups:
                    _items.append(_item_postal_code_groups.to_dict())
            _dict['postalCodeGroups'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in services (list)
        _items = []
        if self.services:
            for _item_services in self.services:
                if _item_services:
                    _items.append(_item_services.to_dict())
            _dict['services'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in warehouses (list)
        _items = []
        if self.warehouses:
            for _item_warehouses in self.warehouses:
                if _item_warehouses:
                    _items.append(_item_warehouses.to_dict())
            _dict['warehouses'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ShippingSettings from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "accountId": obj.get("accountId"),
            "postalCodeGroups": [PostalCodeGroup.from_dict(_item) for _item in obj["postalCodeGroups"]] if obj.get("postalCodeGroups") is not None else None,
            "services": [Service.from_dict(_item) for _item in obj["services"]] if obj.get("services") is not None else None,
            "warehouses": [Warehouse.from_dict(_item) for _item in obj["warehouses"]] if obj.get("warehouses") is not None else None
        })
        return _obj



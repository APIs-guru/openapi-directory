# coding: utf-8

"""
    Content API for Shopping

    Manage your product listings and accounts for Google Shopping

    The version of the OpenAPI document: v2.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.collection_featured_product import CollectionFeaturedProduct
from typing import Optional, Set
from typing_extensions import Self

class Collection(BaseModel):
    """
    The collection message.
    """ # noqa: E501
    custom_label0: Optional[StrictStr] = Field(default=None, description="Label that you assign to a collection to help organize bidding and reporting in Shopping campaigns. [Custom label](https://support.google.com/merchants/answer/9674217)", alias="customLabel0")
    custom_label1: Optional[StrictStr] = Field(default=None, description="Label that you assign to a collection to help organize bidding and reporting in Shopping campaigns.", alias="customLabel1")
    custom_label2: Optional[StrictStr] = Field(default=None, description="Label that you assign to a collection to help organize bidding and reporting in Shopping campaigns.", alias="customLabel2")
    custom_label3: Optional[StrictStr] = Field(default=None, description="Label that you assign to a collection to help organize bidding and reporting in Shopping campaigns.", alias="customLabel3")
    custom_label4: Optional[StrictStr] = Field(default=None, description="Label that you assign to a collection to help organize bidding and reporting in Shopping campaigns.", alias="customLabel4")
    featured_product: Optional[List[CollectionFeaturedProduct]] = Field(default=None, description="This identifies one or more products associated with the collection. Used as a lookup to the corresponding product ID in your product feeds. Provide a maximum of 100 featuredProduct (for collections). Provide up to 10 featuredProduct (for Shoppable Images only) with ID and X and Y coordinates. [featured_product attribute](https://support.google.com/merchants/answer/9703736)", alias="featuredProduct")
    headline: Optional[List[StrictStr]] = Field(default=None, description="Your collection's name. [headline attribute](https://support.google.com/merchants/answer/9673580)")
    id: Optional[StrictStr] = Field(default=None, description="Required. The REST ID of the collection. Content API methods that operate on collections take this as their collectionId parameter. The REST ID for a collection is of the form collectionId. [id attribute](https://support.google.com/merchants/answer/9649290)")
    image_link: Optional[List[StrictStr]] = Field(default=None, description="The URL of a collection’s image. [image_link attribute](https://support.google.com/merchants/answer/9703236)", alias="imageLink")
    language: Optional[StrictStr] = Field(default=None, description="The language of a collection and the language of any featured products linked to the collection. [language attribute](https://support.google.com/merchants/answer/9673781)")
    link: Optional[StrictStr] = Field(default=None, description="A collection’s landing page. URL directly linking to your collection's page on your website. [link attribute](https://support.google.com/merchants/answer/9673983)")
    mobile_link: Optional[StrictStr] = Field(default=None, description="A collection’s mobile-optimized landing page when you have a different URL for mobile and desktop traffic. [mobile_link attribute](https://support.google.com/merchants/answer/9646123)", alias="mobileLink")
    product_country: Optional[StrictStr] = Field(default=None, description="[product_country attribute](https://support.google.com/merchants/answer/9674155)", alias="productCountry")
    __properties: ClassVar[List[str]] = ["customLabel0", "customLabel1", "customLabel2", "customLabel3", "customLabel4", "featuredProduct", "headline", "id", "imageLink", "language", "link", "mobileLink", "productCountry"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Collection from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in featured_product (list)
        _items = []
        if self.featured_product:
            for _item_featured_product in self.featured_product:
                if _item_featured_product:
                    _items.append(_item_featured_product.to_dict())
            _dict['featuredProduct'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Collection from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "customLabel0": obj.get("customLabel0"),
            "customLabel1": obj.get("customLabel1"),
            "customLabel2": obj.get("customLabel2"),
            "customLabel3": obj.get("customLabel3"),
            "customLabel4": obj.get("customLabel4"),
            "featuredProduct": [CollectionFeaturedProduct.from_dict(_item) for _item in obj["featuredProduct"]] if obj.get("featuredProduct") is not None else None,
            "headline": obj.get("headline"),
            "id": obj.get("id"),
            "imageLink": obj.get("imageLink"),
            "language": obj.get("language"),
            "link": obj.get("link"),
            "mobileLink": obj.get("mobileLink"),
            "productCountry": obj.get("productCountry")
        })
        return _obj



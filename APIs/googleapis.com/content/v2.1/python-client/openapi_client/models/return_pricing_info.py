# coding: utf-8

"""
    Content API for Shopping

    Manage your product listings and accounts for Google Shopping

    The version of the OpenAPI document: v2.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.monetary_amount import MonetaryAmount
from typing import Optional, Set
from typing_extensions import Self

class ReturnPricingInfo(BaseModel):
    """
    ReturnPricingInfo
    """ # noqa: E501
    charge_return_shipping_fee: Optional[StrictBool] = Field(default=None, description="Default option for whether merchant should charge the customer for return shipping costs, based on customer selected return reason and merchant's return policy for the items being returned.", alias="chargeReturnShippingFee")
    max_return_shipping_fee: Optional[MonetaryAmount] = Field(default=None, alias="maxReturnShippingFee")
    refundable_items_total_amount: Optional[MonetaryAmount] = Field(default=None, alias="refundableItemsTotalAmount")
    refundable_shipping_amount: Optional[MonetaryAmount] = Field(default=None, alias="refundableShippingAmount")
    total_refunded_amount: Optional[MonetaryAmount] = Field(default=None, alias="totalRefundedAmount")
    __properties: ClassVar[List[str]] = ["chargeReturnShippingFee", "maxReturnShippingFee", "refundableItemsTotalAmount", "refundableShippingAmount", "totalRefundedAmount"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ReturnPricingInfo from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of max_return_shipping_fee
        if self.max_return_shipping_fee:
            _dict['maxReturnShippingFee'] = self.max_return_shipping_fee.to_dict()
        # override the default output from pydantic by calling `to_dict()` of refundable_items_total_amount
        if self.refundable_items_total_amount:
            _dict['refundableItemsTotalAmount'] = self.refundable_items_total_amount.to_dict()
        # override the default output from pydantic by calling `to_dict()` of refundable_shipping_amount
        if self.refundable_shipping_amount:
            _dict['refundableShippingAmount'] = self.refundable_shipping_amount.to_dict()
        # override the default output from pydantic by calling `to_dict()` of total_refunded_amount
        if self.total_refunded_amount:
            _dict['totalRefundedAmount'] = self.total_refunded_amount.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ReturnPricingInfo from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "chargeReturnShippingFee": obj.get("chargeReturnShippingFee"),
            "maxReturnShippingFee": MonetaryAmount.from_dict(obj["maxReturnShippingFee"]) if obj.get("maxReturnShippingFee") is not None else None,
            "refundableItemsTotalAmount": MonetaryAmount.from_dict(obj["refundableItemsTotalAmount"]) if obj.get("refundableItemsTotalAmount") is not None else None,
            "refundableShippingAmount": MonetaryAmount.from_dict(obj["refundableShippingAmount"]) if obj.get("refundableShippingAmount") is not None else None,
            "totalRefundedAmount": MonetaryAmount.from_dict(obj["totalRefundedAmount"]) if obj.get("totalRefundedAmount") is not None else None
        })
        return _obj



# coding: utf-8

"""
    Content API for Shopping

    Manage your product listings and accounts for Google Shopping

    The version of the OpenAPI document: v2.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.errors import Errors
from openapi_client.models.gmb_accounts import GmbAccounts
from openapi_client.models.lia_omnichannel_experience import LiaOmnichannelExperience
from openapi_client.models.lia_settings import LiaSettings
from openapi_client.models.pos_data_providers import PosDataProviders
from typing import Optional, Set
from typing_extensions import Self

class LiasettingsCustomBatchResponseEntry(BaseModel):
    """
    LiasettingsCustomBatchResponseEntry
    """ # noqa: E501
    batch_id: Optional[StrictInt] = Field(default=None, description="The ID of the request entry to which this entry responds.", alias="batchId")
    errors: Optional[Errors] = None
    gmb_accounts: Optional[GmbAccounts] = Field(default=None, alias="gmbAccounts")
    kind: Optional[StrictStr] = Field(default=None, description="Identifies what kind of resource this is. Value: the fixed string \"`content#liasettingsCustomBatchResponseEntry`\"")
    lia_settings: Optional[LiaSettings] = Field(default=None, alias="liaSettings")
    omnichannel_experience: Optional[LiaOmnichannelExperience] = Field(default=None, alias="omnichannelExperience")
    pos_data_providers: Optional[List[PosDataProviders]] = Field(default=None, description="The list of POS data providers.", alias="posDataProviders")
    __properties: ClassVar[List[str]] = ["batchId", "errors", "gmbAccounts", "kind", "liaSettings", "omnichannelExperience", "posDataProviders"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of LiasettingsCustomBatchResponseEntry from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of errors
        if self.errors:
            _dict['errors'] = self.errors.to_dict()
        # override the default output from pydantic by calling `to_dict()` of gmb_accounts
        if self.gmb_accounts:
            _dict['gmbAccounts'] = self.gmb_accounts.to_dict()
        # override the default output from pydantic by calling `to_dict()` of lia_settings
        if self.lia_settings:
            _dict['liaSettings'] = self.lia_settings.to_dict()
        # override the default output from pydantic by calling `to_dict()` of omnichannel_experience
        if self.omnichannel_experience:
            _dict['omnichannelExperience'] = self.omnichannel_experience.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in pos_data_providers (list)
        _items = []
        if self.pos_data_providers:
            for _item_pos_data_providers in self.pos_data_providers:
                if _item_pos_data_providers:
                    _items.append(_item_pos_data_providers.to_dict())
            _dict['posDataProviders'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of LiasettingsCustomBatchResponseEntry from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "batchId": obj.get("batchId"),
            "errors": Errors.from_dict(obj["errors"]) if obj.get("errors") is not None else None,
            "gmbAccounts": GmbAccounts.from_dict(obj["gmbAccounts"]) if obj.get("gmbAccounts") is not None else None,
            "kind": obj.get("kind"),
            "liaSettings": LiaSettings.from_dict(obj["liaSettings"]) if obj.get("liaSettings") is not None else None,
            "omnichannelExperience": LiaOmnichannelExperience.from_dict(obj["omnichannelExperience"]) if obj.get("omnichannelExperience") is not None else None,
            "posDataProviders": [PosDataProviders.from_dict(_item) for _item in obj["posDataProviders"]] if obj.get("posDataProviders") is not None else None
        })
        return _obj



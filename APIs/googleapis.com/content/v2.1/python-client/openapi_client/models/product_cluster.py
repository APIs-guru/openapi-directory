# coding: utf-8

"""
    Content API for Shopping

    Manage your product listings and accounts for Google Shopping

    The version of the OpenAPI document: v2.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class ProductCluster(BaseModel):
    """
    Product cluster fields. A product cluster is a grouping for different offers that represent the same product. Values are only set for fields requested explicitly in the request's search query.
    """ # noqa: E501
    brand: Optional[StrictStr] = Field(default=None, description="Brand of the product cluster.")
    brand_inventory_status: Optional[StrictStr] = Field(default=None, description="Tells if there is at least one product of the brand currently `IN_STOCK` in your product feed across multiple countries, all products are `OUT_OF_STOCK` in your product feed, or `NOT_IN_INVENTORY`. The field doesn't take the Best Sellers report country filter into account.", alias="brandInventoryStatus")
    category_l1: Optional[StrictStr] = Field(default=None, description="Product category (1st level) of the product cluster, represented in Google's product taxonomy.", alias="categoryL1")
    category_l2: Optional[StrictStr] = Field(default=None, description="Product category (2nd level) of the product cluster, represented in Google's product taxonomy.", alias="categoryL2")
    category_l3: Optional[StrictStr] = Field(default=None, description="Product category (3rd level) of the product cluster, represented in Google's product taxonomy.", alias="categoryL3")
    category_l4: Optional[StrictStr] = Field(default=None, description="Product category (4th level) of the product cluster, represented in Google's product taxonomy.", alias="categoryL4")
    category_l5: Optional[StrictStr] = Field(default=None, description="Product category (5th level) of the product cluster, represented in Google's product taxonomy.", alias="categoryL5")
    inventory_status: Optional[StrictStr] = Field(default=None, description="Tells whether the product cluster is `IN_STOCK` in your product feed across multiple countries, `OUT_OF_STOCK` in your product feed, or `NOT_IN_INVENTORY` at all. The field doesn't take the Best Sellers report country filter into account.", alias="inventoryStatus")
    title: Optional[StrictStr] = Field(default=None, description="Title of the product cluster.")
    variant_gtins: Optional[List[StrictStr]] = Field(default=None, description="GTINs of example variants of the product cluster.", alias="variantGtins")
    __properties: ClassVar[List[str]] = ["brand", "brandInventoryStatus", "categoryL1", "categoryL2", "categoryL3", "categoryL4", "categoryL5", "inventoryStatus", "title", "variantGtins"]

    @field_validator('brand_inventory_status')
    def brand_inventory_status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['INVENTORY_STATUS_UNSPECIFIED', 'IN_STOCK', 'OUT_OF_STOCK', 'NOT_IN_INVENTORY']):
            raise ValueError("must be one of enum values ('INVENTORY_STATUS_UNSPECIFIED', 'IN_STOCK', 'OUT_OF_STOCK', 'NOT_IN_INVENTORY')")
        return value

    @field_validator('inventory_status')
    def inventory_status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['INVENTORY_STATUS_UNSPECIFIED', 'IN_STOCK', 'OUT_OF_STOCK', 'NOT_IN_INVENTORY']):
            raise ValueError("must be one of enum values ('INVENTORY_STATUS_UNSPECIFIED', 'IN_STOCK', 'OUT_OF_STOCK', 'NOT_IN_INVENTORY')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ProductCluster from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ProductCluster from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "brand": obj.get("brand"),
            "brandInventoryStatus": obj.get("brandInventoryStatus"),
            "categoryL1": obj.get("categoryL1"),
            "categoryL2": obj.get("categoryL2"),
            "categoryL3": obj.get("categoryL3"),
            "categoryL4": obj.get("categoryL4"),
            "categoryL5": obj.get("categoryL5"),
            "inventoryStatus": obj.get("inventoryStatus"),
            "title": obj.get("title"),
            "variantGtins": obj.get("variantGtins")
        })
        return _obj



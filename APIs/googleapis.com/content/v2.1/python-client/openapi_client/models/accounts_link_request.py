# coding: utf-8

"""
    Content API for Shopping

    Manage your product listings and accounts for Google Shopping

    The version of the OpenAPI document: v2.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.e_commerce_platform_link_info import ECommercePlatformLinkInfo
from openapi_client.models.payment_service_provider_link_info import PaymentServiceProviderLinkInfo
from typing import Optional, Set
from typing_extensions import Self

class AccountsLinkRequest(BaseModel):
    """
    AccountsLinkRequest
    """ # noqa: E501
    action: Optional[StrictStr] = Field(default=None, description="Action to perform for this link. The `\"request\"` action is only available to select merchants. Acceptable values are: - \"`approve`\" - \"`remove`\" - \"`request`\" ")
    e_commerce_platform_link_info: Optional[ECommercePlatformLinkInfo] = Field(default=None, alias="eCommercePlatformLinkInfo")
    link_type: Optional[StrictStr] = Field(default=None, description="Type of the link between the two accounts. Acceptable values are: - \"`channelPartner`\" - \"`eCommercePlatform`\" - \"`paymentServiceProvider`\" ", alias="linkType")
    linked_account_id: Optional[StrictStr] = Field(default=None, description="The ID of the linked account.", alias="linkedAccountId")
    payment_service_provider_link_info: Optional[PaymentServiceProviderLinkInfo] = Field(default=None, alias="paymentServiceProviderLinkInfo")
    services: Optional[List[StrictStr]] = Field(default=None, description=" Acceptable values are: - \"`shoppingAdsProductManagement`\" - \"`shoppingActionsProductManagement`\" - \"`shoppingActionsOrderManagement`\" - \"`paymentProcessing`\" ")
    __properties: ClassVar[List[str]] = ["action", "eCommercePlatformLinkInfo", "linkType", "linkedAccountId", "paymentServiceProviderLinkInfo", "services"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AccountsLinkRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of e_commerce_platform_link_info
        if self.e_commerce_platform_link_info:
            _dict['eCommercePlatformLinkInfo'] = self.e_commerce_platform_link_info.to_dict()
        # override the default output from pydantic by calling `to_dict()` of payment_service_provider_link_info
        if self.payment_service_provider_link_info:
            _dict['paymentServiceProviderLinkInfo'] = self.payment_service_provider_link_info.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AccountsLinkRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "action": obj.get("action"),
            "eCommercePlatformLinkInfo": ECommercePlatformLinkInfo.from_dict(obj["eCommercePlatformLinkInfo"]) if obj.get("eCommercePlatformLinkInfo") is not None else None,
            "linkType": obj.get("linkType"),
            "linkedAccountId": obj.get("linkedAccountId"),
            "paymentServiceProviderLinkInfo": PaymentServiceProviderLinkInfo.from_dict(obj["paymentServiceProviderLinkInfo"]) if obj.get("paymentServiceProviderLinkInfo") is not None else None,
            "services": obj.get("services")
        })
        return _obj



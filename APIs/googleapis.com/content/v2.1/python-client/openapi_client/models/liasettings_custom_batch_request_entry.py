# coding: utf-8

"""
    Content API for Shopping

    Manage your product listings and accounts for Google Shopping

    The version of the OpenAPI document: v2.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.lia_omnichannel_experience import LiaOmnichannelExperience
from openapi_client.models.lia_settings import LiaSettings
from typing import Optional, Set
from typing_extensions import Self

class LiasettingsCustomBatchRequestEntry(BaseModel):
    """
    LiasettingsCustomBatchRequestEntry
    """ # noqa: E501
    account_id: Optional[StrictStr] = Field(default=None, description="The ID of the account for which to get/update account LIA settings.", alias="accountId")
    batch_id: Optional[StrictInt] = Field(default=None, description="An entry ID, unique within the batch request.", alias="batchId")
    contact_email: Optional[StrictStr] = Field(default=None, description="Inventory validation contact email. Required only for SetInventoryValidationContact.", alias="contactEmail")
    contact_name: Optional[StrictStr] = Field(default=None, description="Inventory validation contact name. Required only for SetInventoryValidationContact.", alias="contactName")
    country: Optional[StrictStr] = Field(default=None, description="The country code. Required only for RequestInventoryVerification.")
    gmb_email: Optional[StrictStr] = Field(default=None, description="The Business Profile. Required only for RequestGmbAccess.", alias="gmbEmail")
    lia_settings: Optional[LiaSettings] = Field(default=None, alias="liaSettings")
    merchant_id: Optional[StrictStr] = Field(default=None, description="The ID of the managing account.", alias="merchantId")
    method: Optional[StrictStr] = Field(default=None, description="The method of the batch entry. Acceptable values are: - \"`get`\" - \"`getAccessibleGmbAccounts`\" - \"`requestGmbAccess`\" - \"`requestInventoryVerification`\" - \"`setInventoryVerificationContact`\" - \"`update`\" ")
    omnichannel_experience: Optional[LiaOmnichannelExperience] = Field(default=None, alias="omnichannelExperience")
    pos_data_provider_id: Optional[StrictStr] = Field(default=None, description="The ID of POS data provider. Required only for SetPosProvider.", alias="posDataProviderId")
    pos_external_account_id: Optional[StrictStr] = Field(default=None, description="The account ID by which this merchant is known to the POS provider.", alias="posExternalAccountId")
    __properties: ClassVar[List[str]] = ["accountId", "batchId", "contactEmail", "contactName", "country", "gmbEmail", "liaSettings", "merchantId", "method", "omnichannelExperience", "posDataProviderId", "posExternalAccountId"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of LiasettingsCustomBatchRequestEntry from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of lia_settings
        if self.lia_settings:
            _dict['liaSettings'] = self.lia_settings.to_dict()
        # override the default output from pydantic by calling `to_dict()` of omnichannel_experience
        if self.omnichannel_experience:
            _dict['omnichannelExperience'] = self.omnichannel_experience.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of LiasettingsCustomBatchRequestEntry from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "accountId": obj.get("accountId"),
            "batchId": obj.get("batchId"),
            "contactEmail": obj.get("contactEmail"),
            "contactName": obj.get("contactName"),
            "country": obj.get("country"),
            "gmbEmail": obj.get("gmbEmail"),
            "liaSettings": LiaSettings.from_dict(obj["liaSettings"]) if obj.get("liaSettings") is not None else None,
            "merchantId": obj.get("merchantId"),
            "method": obj.get("method"),
            "omnichannelExperience": LiaOmnichannelExperience.from_dict(obj["omnichannelExperience"]) if obj.get("omnichannelExperience") is not None else None,
            "posDataProviderId": obj.get("posDataProviderId"),
            "posExternalAccountId": obj.get("posExternalAccountId")
        })
        return _obj



# coding: utf-8

"""
    Content API for Shopping

    Manage your product listings and accounts for Google Shopping

    The version of the OpenAPI document: v2.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.order_promotion import OrderPromotion
from openapi_client.models.price import Price
from openapi_client.models.test_order_delivery_details import TestOrderDeliveryDetails
from openapi_client.models.test_order_line_item import TestOrderLineItem
from openapi_client.models.test_order_pickup_details import TestOrderPickupDetails
from typing import Optional, Set
from typing_extensions import Self

class TestOrder(BaseModel):
    """
    TestOrder
    """ # noqa: E501
    delivery_details: Optional[TestOrderDeliveryDetails] = Field(default=None, alias="deliveryDetails")
    enable_orderinvoices: Optional[StrictBool] = Field(default=None, description="Whether the orderinvoices service should support this order.", alias="enableOrderinvoices")
    kind: Optional[StrictStr] = Field(default=None, description="Identifies what kind of resource this is. Value: the fixed string \"`content#testOrder`\"")
    line_items: Optional[List[TestOrderLineItem]] = Field(default=None, description="Required. Line items that are ordered. At least one line item must be provided.", alias="lineItems")
    notification_mode: Optional[StrictStr] = Field(default=None, description="Restricted. Do not use.", alias="notificationMode")
    pickup_details: Optional[TestOrderPickupDetails] = Field(default=None, alias="pickupDetails")
    predefined_billing_address: Optional[StrictStr] = Field(default=None, description="Required. The billing address. Acceptable values are: - \"`dwight`\" - \"`jim`\" - \"`pam`\" ", alias="predefinedBillingAddress")
    predefined_delivery_address: Optional[StrictStr] = Field(default=None, description="Required. Identifier of one of the predefined delivery addresses for the delivery. Acceptable values are: - \"`dwight`\" - \"`jim`\" - \"`pam`\" ", alias="predefinedDeliveryAddress")
    predefined_email: Optional[StrictStr] = Field(default=None, description="Required. Email address of the customer. Acceptable values are: - \"`pog.dwight.schrute@gmail.com`\" - \"`pog.jim.halpert@gmail.com`\" - \"`penpog.pam.beesly@gmail.comding`\" ", alias="predefinedEmail")
    predefined_pickup_details: Optional[StrictStr] = Field(default=None, description="Identifier of one of the predefined pickup details. Required for orders containing line items with shipping type `pickup`. Acceptable values are: - \"`dwight`\" - \"`jim`\" - \"`pam`\" ", alias="predefinedPickupDetails")
    promotions: Optional[List[OrderPromotion]] = Field(default=None, description="Promotions associated with the order.")
    shipping_cost: Optional[Price] = Field(default=None, alias="shippingCost")
    shipping_option: Optional[StrictStr] = Field(default=None, description="Required. The requested shipping option. Acceptable values are: - \"`economy`\" - \"`expedited`\" - \"`oneDay`\" - \"`sameDay`\" - \"`standard`\" - \"`twoDay`\" ", alias="shippingOption")
    __properties: ClassVar[List[str]] = ["deliveryDetails", "enableOrderinvoices", "kind", "lineItems", "notificationMode", "pickupDetails", "predefinedBillingAddress", "predefinedDeliveryAddress", "predefinedEmail", "predefinedPickupDetails", "promotions", "shippingCost", "shippingOption"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of TestOrder from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of delivery_details
        if self.delivery_details:
            _dict['deliveryDetails'] = self.delivery_details.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in line_items (list)
        _items = []
        if self.line_items:
            for _item_line_items in self.line_items:
                if _item_line_items:
                    _items.append(_item_line_items.to_dict())
            _dict['lineItems'] = _items
        # override the default output from pydantic by calling `to_dict()` of pickup_details
        if self.pickup_details:
            _dict['pickupDetails'] = self.pickup_details.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in promotions (list)
        _items = []
        if self.promotions:
            for _item_promotions in self.promotions:
                if _item_promotions:
                    _items.append(_item_promotions.to_dict())
            _dict['promotions'] = _items
        # override the default output from pydantic by calling `to_dict()` of shipping_cost
        if self.shipping_cost:
            _dict['shippingCost'] = self.shipping_cost.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of TestOrder from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "deliveryDetails": TestOrderDeliveryDetails.from_dict(obj["deliveryDetails"]) if obj.get("deliveryDetails") is not None else None,
            "enableOrderinvoices": obj.get("enableOrderinvoices"),
            "kind": obj.get("kind"),
            "lineItems": [TestOrderLineItem.from_dict(_item) for _item in obj["lineItems"]] if obj.get("lineItems") is not None else None,
            "notificationMode": obj.get("notificationMode"),
            "pickupDetails": TestOrderPickupDetails.from_dict(obj["pickupDetails"]) if obj.get("pickupDetails") is not None else None,
            "predefinedBillingAddress": obj.get("predefinedBillingAddress"),
            "predefinedDeliveryAddress": obj.get("predefinedDeliveryAddress"),
            "predefinedEmail": obj.get("predefinedEmail"),
            "predefinedPickupDetails": obj.get("predefinedPickupDetails"),
            "promotions": [OrderPromotion.from_dict(_item) for _item in obj["promotions"]] if obj.get("promotions") is not None else None,
            "shippingCost": Price.from_dict(obj["shippingCost"]) if obj.get("shippingCost") is not None else None,
            "shippingOption": obj.get("shippingOption")
        })
        return _obj



# coding: utf-8

"""
    Content API for Shopping

    Manage your product listings and accounts for Google Shopping

    The version of the OpenAPI document: v2.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.region_geo_target_area import RegionGeoTargetArea
from openapi_client.models.region_postal_code_area import RegionPostalCodeArea
from typing import Optional, Set
from typing_extensions import Self

class Region(BaseModel):
    """
    Represents a geographic region that you can use as a target with both the `RegionalInventory` and `ShippingSettings` services. You can define regions as collections of either postal codes or, in some countries, using predefined geotargets.
    """ # noqa: E501
    display_name: Optional[StrictStr] = Field(default=None, description="The display name of the region.", alias="displayName")
    geotarget_area: Optional[RegionGeoTargetArea] = Field(default=None, alias="geotargetArea")
    merchant_id: Optional[StrictStr] = Field(default=None, description="Output only. Immutable. Merchant that owns the region.", alias="merchantId")
    postal_code_area: Optional[RegionPostalCodeArea] = Field(default=None, alias="postalCodeArea")
    region_id: Optional[StrictStr] = Field(default=None, description="Output only. Immutable. The ID uniquely identifying each region.", alias="regionId")
    regional_inventory_eligible: Optional[StrictBool] = Field(default=None, description="Output only. Indicates if the region is eligible to use in the Regional Inventory configuration.", alias="regionalInventoryEligible")
    shipping_eligible: Optional[StrictBool] = Field(default=None, description="Output only. Indicates if the region is eligible to use in the Shipping Services configuration.", alias="shippingEligible")
    __properties: ClassVar[List[str]] = ["displayName", "geotargetArea", "merchantId", "postalCodeArea", "regionId", "regionalInventoryEligible", "shippingEligible"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Region from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "merchant_id",
            "region_id",
            "regional_inventory_eligible",
            "shipping_eligible",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of geotarget_area
        if self.geotarget_area:
            _dict['geotargetArea'] = self.geotarget_area.to_dict()
        # override the default output from pydantic by calling `to_dict()` of postal_code_area
        if self.postal_code_area:
            _dict['postalCodeArea'] = self.postal_code_area.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Region from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "displayName": obj.get("displayName"),
            "geotargetArea": RegionGeoTargetArea.from_dict(obj["geotargetArea"]) if obj.get("geotargetArea") is not None else None,
            "merchantId": obj.get("merchantId"),
            "postalCodeArea": RegionPostalCodeArea.from_dict(obj["postalCodeArea"]) if obj.get("postalCodeArea") is not None else None,
            "regionId": obj.get("regionId"),
            "regionalInventoryEligible": obj.get("regionalInventoryEligible"),
            "shippingEligible": obj.get("shippingEligible")
        })
        return _obj



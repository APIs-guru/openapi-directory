# coding: utf-8

"""
    Content API for Shopping

    Manage your product listings and accounts for Google Shopping

    The version of the OpenAPI document: v2.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from openapi_client.models.model_date import ModelDate
from typing import Optional, Set
from typing_extensions import Self

class CompetitiveVisibility(BaseModel):
    """
    Fields related to [competitive visibility reports] (https://support.google.com/merchants/answer/11366442).
    """ # noqa: E501
    ads_organic_ratio: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="[Ads / organic ratio] (https://support.google.com/merchants/answer/11366442#zippy=%2Cadsfree-ratio) shows how often a merchant receives impressions from Shopping ads compared to organic traffic. The number is rounded and bucketed. Available only in `CompetitiveVisibilityTopMerchantView` and `CompetitiveVisibilityCompetitorView`. Cannot be filtered on in the 'WHERE' clause.", alias="adsOrganicRatio")
    category_benchmark_visibility_trend: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Change in visibility based on impressions with respect to the start of the selected time range (or first day with non-zero impressions) for a combined set of merchants with highest visibility approximating the market. Available only in `CompetitiveVisibilityBenchmarkView`. Cannot be filtered on in the 'WHERE' clause.", alias="categoryBenchmarkVisibilityTrend")
    category_id: Optional[StrictStr] = Field(default=None, description="Google product category ID to calculate the report for, represented in [Google's product taxonomy](https://support.google.com/merchants/answer/6324436). Required in the `SELECT` clause. A `WHERE` condition on `competitive_visibility.category_id` is required in the query.", alias="categoryId")
    country_code: Optional[StrictStr] = Field(default=None, description="The country where impression appeared. Required in the `SELECT` clause. A `WHERE` condition on `competitive_visibility.country_code` is required in the query.", alias="countryCode")
    var_date: Optional[ModelDate] = Field(default=None, alias="date")
    domain: Optional[StrictStr] = Field(default=None, description="Domain of your competitor or your domain, if 'is_your_domain' is true. Available only in `CompetitiveVisibilityTopMerchantView` and `CompetitiveVisibilityCompetitorView`. Required in the `SELECT` clause for `CompetitiveVisibilityTopMerchantView` and `CompetitiveVisibilityCompetitorView`. Cannot be filtered on in the 'WHERE' clause.")
    higher_position_rate: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Higher position rate shows how often a competitor’s offer got placed in a higher position on the page than your offer. Available only in `CompetitiveVisibilityTopMerchantView` and `CompetitiveVisibilityCompetitorView`. Cannot be filtered on in the 'WHERE' clause.", alias="higherPositionRate")
    is_your_domain: Optional[StrictBool] = Field(default=None, description="True if this row contains data for your domain. Available only in `CompetitiveVisibilityTopMerchantView` and `CompetitiveVisibilityCompetitorView`. Cannot be filtered on in the 'WHERE' clause.", alias="isYourDomain")
    page_overlap_rate: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Page overlap rate describes how frequently competing retailers’ offers are shown together with your offers on the same page. Available only in `CompetitiveVisibilityTopMerchantView` and `CompetitiveVisibilityCompetitorView`. Cannot be filtered on in the 'WHERE' clause.", alias="pageOverlapRate")
    rank: Optional[StrictStr] = Field(default=None, description="Position of the domain in the top merchants ranking for the selected keys (`date`, `category_id`, `country_code`, `listing_type`) based on impressions. 1 is the highest. Available only in `CompetitiveVisibilityTopMerchantView` and `CompetitiveVisibilityCompetitorView`. Cannot be filtered on in the 'WHERE' clause.")
    relative_visibility: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Relative visibility shows how often your competitors’ offers are shown compared to your offers. In other words, this is the number of displayed impressions of a competitor retailer divided by the number of your displayed impressions during a selected time range for a selected product category and country. Available only in `CompetitiveVisibilityCompetitorView`. Cannot be filtered on in the 'WHERE' clause.", alias="relativeVisibility")
    traffic_source: Optional[StrictStr] = Field(default=None, description="Type of impression listing. Required in the `SELECT` clause. Cannot be filtered on in the 'WHERE' clause.", alias="trafficSource")
    your_domain_visibility_trend: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Change in visibility based on impressions for your domain with respect to the start of the selected time range (or first day with non-zero impressions). Available only in `CompetitiveVisibilityBenchmarkView`. Cannot be filtered on in the 'WHERE' clause.", alias="yourDomainVisibilityTrend")
    __properties: ClassVar[List[str]] = ["adsOrganicRatio", "categoryBenchmarkVisibilityTrend", "categoryId", "countryCode", "date", "domain", "higherPositionRate", "isYourDomain", "pageOverlapRate", "rank", "relativeVisibility", "trafficSource", "yourDomainVisibilityTrend"]

    @field_validator('traffic_source')
    def traffic_source_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['UNKNOWN', 'ORGANIC', 'ADS', 'ALL']):
            raise ValueError("must be one of enum values ('UNKNOWN', 'ORGANIC', 'ADS', 'ALL')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CompetitiveVisibility from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of var_date
        if self.var_date:
            _dict['date'] = self.var_date.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CompetitiveVisibility from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "adsOrganicRatio": obj.get("adsOrganicRatio"),
            "categoryBenchmarkVisibilityTrend": obj.get("categoryBenchmarkVisibilityTrend"),
            "categoryId": obj.get("categoryId"),
            "countryCode": obj.get("countryCode"),
            "date": ModelDate.from_dict(obj["date"]) if obj.get("date") is not None else None,
            "domain": obj.get("domain"),
            "higherPositionRate": obj.get("higherPositionRate"),
            "isYourDomain": obj.get("isYourDomain"),
            "pageOverlapRate": obj.get("pageOverlapRate"),
            "rank": obj.get("rank"),
            "relativeVisibility": obj.get("relativeVisibility"),
            "trafficSource": obj.get("trafficSource"),
            "yourDomainVisibilityTrend": obj.get("yourDomainVisibilityTrend")
        })
        return _obj



# coding: utf-8

"""
    Content API for Shopping

    Manage your product listings and accounts for Google Shopping

    The version of the OpenAPI document: v2.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.recommendation_call_to_action import RecommendationCallToAction
from openapi_client.models.recommendation_creative import RecommendationCreative
from openapi_client.models.recommendation_description import RecommendationDescription
from typing import Optional, Set
from typing_extensions import Self

class Recommendation(BaseModel):
    """
    Recommendations are suggested ways to improve your merchant account's performance. For example, to engage with a feature, or start using a new Google product.
    """ # noqa: E501
    additional_call_to_action: Optional[List[RecommendationCallToAction]] = Field(default=None, description="Output only. CTAs of this recommendation. Repeated.", alias="additionalCallToAction")
    additional_descriptions: Optional[List[RecommendationDescription]] = Field(default=None, description="Output only. List of additional localized descriptions for a recommendation. Localication uses the `languageCode` field in `GenerateRecommendations` requests. Not all description types are guaranteed to be present and we recommend to rely on default description.", alias="additionalDescriptions")
    creative: Optional[List[RecommendationCreative]] = Field(default=None, description="Output only. Any creatives attached to the recommendation. Repeated.")
    default_call_to_action: Optional[RecommendationCallToAction] = Field(default=None, alias="defaultCallToAction")
    default_description: Optional[StrictStr] = Field(default=None, description="Optional. Localized recommendation description. The localization the {@link `GenerateRecommendationsRequest.language_code`} field in {@link `GenerateRecommendationsRequest`} requests.", alias="defaultDescription")
    numerical_impact: Optional[StrictInt] = Field(default=None, description="Optional. A numerical score of the impact from the recommendation's description. For example, a recommendation might suggest an upward trend in sales for a certain product. Higher number means larger impact.", alias="numericalImpact")
    paid: Optional[StrictBool] = Field(default=None, description="Optional. Indicates whether a user needs to pay when they complete the user journey suggested by the recommendation.")
    recommendation_name: Optional[StrictStr] = Field(default=None, description="Optional. Localized recommendation name. The localization uses the {@link `GenerateRecommendationsRequest.language_code`} field in {@link `GenerateRecommendationsRequest`} requests.", alias="recommendationName")
    sub_type: Optional[StrictStr] = Field(default=None, description="Optional. Subtype of the recommendations. Only applicable when multiple recommendations can be generated per type, and is used as an identifier of recommendation under the same recommendation type.", alias="subType")
    title: Optional[StrictStr] = Field(default=None, description="Optional. Localized Recommendation Title. Localization uses the {@link `GenerateRecommendationsRequest.language_code`} field in {@link `GenerateRecommendationsRequest`} requests.")
    type: Optional[StrictStr] = Field(default=None, description="Output only. Type of the recommendation. List of currently available recommendation types: - OPPORTUNITY_CREATE_NEW_COLLECTION - OPPORTUNITY_CREATE_EMAIL_CAMPAIGN")
    __properties: ClassVar[List[str]] = ["additionalCallToAction", "additionalDescriptions", "creative", "defaultCallToAction", "defaultDescription", "numericalImpact", "paid", "recommendationName", "subType", "title", "type"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Recommendation from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "additional_call_to_action",
            "additional_descriptions",
            "creative",
            "type",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in additional_call_to_action (list)
        _items = []
        if self.additional_call_to_action:
            for _item_additional_call_to_action in self.additional_call_to_action:
                if _item_additional_call_to_action:
                    _items.append(_item_additional_call_to_action.to_dict())
            _dict['additionalCallToAction'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in additional_descriptions (list)
        _items = []
        if self.additional_descriptions:
            for _item_additional_descriptions in self.additional_descriptions:
                if _item_additional_descriptions:
                    _items.append(_item_additional_descriptions.to_dict())
            _dict['additionalDescriptions'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in creative (list)
        _items = []
        if self.creative:
            for _item_creative in self.creative:
                if _item_creative:
                    _items.append(_item_creative.to_dict())
            _dict['creative'] = _items
        # override the default output from pydantic by calling `to_dict()` of default_call_to_action
        if self.default_call_to_action:
            _dict['defaultCallToAction'] = self.default_call_to_action.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Recommendation from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "additionalCallToAction": [RecommendationCallToAction.from_dict(_item) for _item in obj["additionalCallToAction"]] if obj.get("additionalCallToAction") is not None else None,
            "additionalDescriptions": [RecommendationDescription.from_dict(_item) for _item in obj["additionalDescriptions"]] if obj.get("additionalDescriptions") is not None else None,
            "creative": [RecommendationCreative.from_dict(_item) for _item in obj["creative"]] if obj.get("creative") is not None else None,
            "defaultCallToAction": RecommendationCallToAction.from_dict(obj["defaultCallToAction"]) if obj.get("defaultCallToAction") is not None else None,
            "defaultDescription": obj.get("defaultDescription"),
            "numericalImpact": obj.get("numericalImpact"),
            "paid": obj.get("paid"),
            "recommendationName": obj.get("recommendationName"),
            "subType": obj.get("subType"),
            "title": obj.get("title"),
            "type": obj.get("type")
        })
        return _obj



# coding: utf-8

"""
    Content API for Shopping

    Manage your product listings and accounts for Google Shopping

    The version of the OpenAPI document: v2.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class OrderAddress(BaseModel):
    """
    OrderAddress
    """ # noqa: E501
    country: Optional[StrictStr] = Field(default=None, description="CLDR country code (for example, \"US\").")
    full_address: Optional[List[StrictStr]] = Field(default=None, description="Strings representing the lines of the printed label for mailing the order, for example: John Smith 1600 Amphitheatre Parkway Mountain View, CA, 94043 United States ", alias="fullAddress")
    is_post_office_box: Optional[StrictBool] = Field(default=None, description="Whether the address is a post office box.", alias="isPostOfficeBox")
    locality: Optional[StrictStr] = Field(default=None, description="City, town or commune. May also include dependent localities or sublocalities (for example, neighborhoods or suburbs).")
    postal_code: Optional[StrictStr] = Field(default=None, description="Postal Code or ZIP (for example, \"94043\").", alias="postalCode")
    recipient_name: Optional[StrictStr] = Field(default=None, description="Name of the recipient.", alias="recipientName")
    region: Optional[StrictStr] = Field(default=None, description="Top-level administrative subdivision of the country. For example, a state like California (\"CA\") or a province like Quebec (\"QC\").")
    street_address: Optional[List[StrictStr]] = Field(default=None, description="Street-level part of the address. Use `\\n` to add a second line.", alias="streetAddress")
    __properties: ClassVar[List[str]] = ["country", "fullAddress", "isPostOfficeBox", "locality", "postalCode", "recipientName", "region", "streetAddress"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of OrderAddress from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of OrderAddress from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "country": obj.get("country"),
            "fullAddress": obj.get("fullAddress"),
            "isPostOfficeBox": obj.get("isPostOfficeBox"),
            "locality": obj.get("locality"),
            "postalCode": obj.get("postalCode"),
            "recipientName": obj.get("recipientName"),
            "region": obj.get("region"),
            "streetAddress": obj.get("streetAddress")
        })
        return _obj



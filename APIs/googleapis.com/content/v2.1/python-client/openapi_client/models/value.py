# coding: utf-8

"""
    Content API for Shopping

    Manage your product listings and accounts for Google Shopping

    The version of the OpenAPI document: v2.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.price import Price
from typing import Optional, Set
from typing_extensions import Self

class Value(BaseModel):
    """
    The single value of a rate group or the value of a rate group table's cell. Exactly one of `noShipping`, `flatRate`, `pricePercentage`, `carrierRateName`, `subtableName` must be set.
    """ # noqa: E501
    carrier_rate_name: Optional[StrictStr] = Field(default=None, description="The name of a carrier rate referring to a carrier rate defined in the same rate group. Can only be set if all other fields are not set.", alias="carrierRateName")
    flat_rate: Optional[Price] = Field(default=None, alias="flatRate")
    no_shipping: Optional[StrictBool] = Field(default=None, description="If true, then the product can't ship. Must be true when set, can only be set if all other fields are not set.", alias="noShipping")
    price_percentage: Optional[StrictStr] = Field(default=None, description="A percentage of the price represented as a number in decimal notation (for example, `\"5.4\"`). Can only be set if all other fields are not set.", alias="pricePercentage")
    subtable_name: Optional[StrictStr] = Field(default=None, description="The name of a subtable. Can only be set in table cells (not for single values), and only if all other fields are not set.", alias="subtableName")
    __properties: ClassVar[List[str]] = ["carrierRateName", "flatRate", "noShipping", "pricePercentage", "subtableName"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Value from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of flat_rate
        if self.flat_rate:
            _dict['flatRate'] = self.flat_rate.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Value from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "carrierRateName": obj.get("carrierRateName"),
            "flatRate": Price.from_dict(obj["flatRate"]) if obj.get("flatRate") is not None else None,
            "noShipping": obj.get("noShipping"),
            "pricePercentage": obj.get("pricePercentage"),
            "subtableName": obj.get("subtableName")
        })
        return _obj



# coding: utf-8

"""
    Cloud Identity API

    API for provisioning and managing identity resources.

    The version of the OpenAPI document: v1beta1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class BrowserInfo(BaseModel):
    """
    Browser-specific fields reported by the Endpoint Verification extension. LINT.IfChange
    """ # noqa: E501
    browser_management_state: Optional[StrictStr] = Field(default=None, description="Output only. Browser's management state.", alias="browserManagementState")
    browser_version: Optional[StrictStr] = Field(default=None, description="Version of the request initiating browser.", alias="browserVersion")
    is_built_in_dns_client_enabled: Optional[StrictBool] = Field(default=None, description="Current state of [built-in DNS client](https://chromeenterprise.google/policies/#BuiltInDnsClientEnabled).", alias="isBuiltInDnsClientEnabled")
    is_bulk_data_entry_analysis_enabled: Optional[StrictBool] = Field(default=None, description="Current state of [bulk data analysis](https://chromeenterprise.google/policies/#OnBulkDataEntryEnterpriseConnector). Set to true if provider list from Chrome is non-empty.", alias="isBulkDataEntryAnalysisEnabled")
    is_chrome_cleanup_enabled: Optional[StrictBool] = Field(default=None, description="Current state of [Chrome Cleanup](https://chromeenterprise.google/policies/#ChromeCleanupEnabled).", alias="isChromeCleanupEnabled")
    is_chrome_remote_desktop_app_blocked: Optional[StrictBool] = Field(default=None, description="Current state of [Chrome Remote Desktop app](https://chromeenterprise.google/policies/#URLBlocklist).", alias="isChromeRemoteDesktopAppBlocked")
    is_file_download_analysis_enabled: Optional[StrictBool] = Field(default=None, description="Current state of [file download analysis](https://chromeenterprise.google/policies/#OnFileDownloadedEnterpriseConnector). Set to true if provider list from Chrome is non-empty.", alias="isFileDownloadAnalysisEnabled")
    is_file_upload_analysis_enabled: Optional[StrictBool] = Field(default=None, description="Current state of [file upload analysis](https://chromeenterprise.google/policies/#OnFileAttachedEnterpriseConnector). Set to true if provider list from Chrome is non-empty.", alias="isFileUploadAnalysisEnabled")
    is_realtime_url_check_enabled: Optional[StrictBool] = Field(default=None, description="Current state of [real-time URL check](https://chromeenterprise.google/policies/#EnterpriseRealTimeUrlCheckMode). Set to true if provider list from Chrome is non-empty.", alias="isRealtimeUrlCheckEnabled")
    is_security_event_analysis_enabled: Optional[StrictBool] = Field(default=None, description="Current state of [security event analysis](https://chromeenterprise.google/policies/#OnSecurityEventEnterpriseConnector). Set to true if provider list from Chrome is non-empty.", alias="isSecurityEventAnalysisEnabled")
    is_site_isolation_enabled: Optional[StrictBool] = Field(default=None, description="Current state of [site isolation](https://chromeenterprise.google/policies/?policy=IsolateOrigins).", alias="isSiteIsolationEnabled")
    is_third_party_blocking_enabled: Optional[StrictBool] = Field(default=None, description="Current state of [third-party blocking](https://chromeenterprise.google/policies/#ThirdPartyBlockingEnabled).", alias="isThirdPartyBlockingEnabled")
    password_protection_warning_trigger: Optional[StrictStr] = Field(default=None, description="Current state of [password protection trigger](https://chromeenterprise.google/policies/#PasswordProtectionWarningTrigger).", alias="passwordProtectionWarningTrigger")
    safe_browsing_protection_level: Optional[StrictStr] = Field(default=None, description="Current state of [Safe Browsing protection level](https://chromeenterprise.google/policies/#SafeBrowsingProtectionLevel).", alias="safeBrowsingProtectionLevel")
    __properties: ClassVar[List[str]] = ["browserManagementState", "browserVersion", "isBuiltInDnsClientEnabled", "isBulkDataEntryAnalysisEnabled", "isChromeCleanupEnabled", "isChromeRemoteDesktopAppBlocked", "isFileDownloadAnalysisEnabled", "isFileUploadAnalysisEnabled", "isRealtimeUrlCheckEnabled", "isSecurityEventAnalysisEnabled", "isSiteIsolationEnabled", "isThirdPartyBlockingEnabled", "passwordProtectionWarningTrigger", "safeBrowsingProtectionLevel"]

    @field_validator('browser_management_state')
    def browser_management_state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['UNSPECIFIED', 'UNMANAGED', 'MANAGED_BY_OTHER_DOMAIN', 'PROFILE_MANAGED', 'BROWSER_MANAGED']):
            raise ValueError("must be one of enum values ('UNSPECIFIED', 'UNMANAGED', 'MANAGED_BY_OTHER_DOMAIN', 'PROFILE_MANAGED', 'BROWSER_MANAGED')")
        return value

    @field_validator('password_protection_warning_trigger')
    def password_protection_warning_trigger_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['PASSWORD_PROTECTION_TRIGGER_UNSPECIFIED', 'PROTECTION_OFF', 'PASSWORD_REUSE', 'PHISHING_REUSE']):
            raise ValueError("must be one of enum values ('PASSWORD_PROTECTION_TRIGGER_UNSPECIFIED', 'PROTECTION_OFF', 'PASSWORD_REUSE', 'PHISHING_REUSE')")
        return value

    @field_validator('safe_browsing_protection_level')
    def safe_browsing_protection_level_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['SAFE_BROWSING_LEVEL_UNSPECIFIED', 'DISABLED', 'STANDARD', 'ENHANCED']):
            raise ValueError("must be one of enum values ('SAFE_BROWSING_LEVEL_UNSPECIFIED', 'DISABLED', 'STANDARD', 'ENHANCED')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of BrowserInfo from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "browser_management_state",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of BrowserInfo from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "browserManagementState": obj.get("browserManagementState"),
            "browserVersion": obj.get("browserVersion"),
            "isBuiltInDnsClientEnabled": obj.get("isBuiltInDnsClientEnabled"),
            "isBulkDataEntryAnalysisEnabled": obj.get("isBulkDataEntryAnalysisEnabled"),
            "isChromeCleanupEnabled": obj.get("isChromeCleanupEnabled"),
            "isChromeRemoteDesktopAppBlocked": obj.get("isChromeRemoteDesktopAppBlocked"),
            "isFileDownloadAnalysisEnabled": obj.get("isFileDownloadAnalysisEnabled"),
            "isFileUploadAnalysisEnabled": obj.get("isFileUploadAnalysisEnabled"),
            "isRealtimeUrlCheckEnabled": obj.get("isRealtimeUrlCheckEnabled"),
            "isSecurityEventAnalysisEnabled": obj.get("isSecurityEventAnalysisEnabled"),
            "isSiteIsolationEnabled": obj.get("isSiteIsolationEnabled"),
            "isThirdPartyBlockingEnabled": obj.get("isThirdPartyBlockingEnabled"),
            "passwordProtectionWarningTrigger": obj.get("passwordProtectionWarningTrigger"),
            "safeBrowsingProtectionLevel": obj.get("safeBrowsingProtectionLevel")
        })
        return _obj



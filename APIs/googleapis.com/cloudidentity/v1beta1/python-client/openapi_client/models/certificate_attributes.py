# coding: utf-8

"""
    Cloud Identity API

    API for provisioning and managing identity resources.

    The version of the OpenAPI document: v1beta1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.certificate_template import CertificateTemplate
from typing import Optional, Set
from typing_extensions import Self

class CertificateAttributes(BaseModel):
    """
    Stores information about a certificate.
    """ # noqa: E501
    certificate_template: Optional[CertificateTemplate] = Field(default=None, alias="certificateTemplate")
    fingerprint: Optional[StrictStr] = Field(default=None, description="The encoded certificate fingerprint.")
    issuer: Optional[StrictStr] = Field(default=None, description="The name of the issuer of this certificate.")
    serial_number: Optional[StrictStr] = Field(default=None, description="Serial number of the certificate, Example: \"123456789\".", alias="serialNumber")
    subject: Optional[StrictStr] = Field(default=None, description="The subject name of this certificate.")
    thumbprint: Optional[StrictStr] = Field(default=None, description="The certificate thumbprint.")
    validation_state: Optional[StrictStr] = Field(default=None, description="Validation state of this certificate.", alias="validationState")
    validity_expiration_time: Optional[StrictStr] = Field(default=None, description="Certificate not valid at or after this timestamp.", alias="validityExpirationTime")
    validity_start_time: Optional[StrictStr] = Field(default=None, description="Certificate not valid before this timestamp.", alias="validityStartTime")
    __properties: ClassVar[List[str]] = ["certificateTemplate", "fingerprint", "issuer", "serialNumber", "subject", "thumbprint", "validationState", "validityExpirationTime", "validityStartTime"]

    @field_validator('validation_state')
    def validation_state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['CERTIFICATE_VALIDATION_STATE_UNSPECIFIED', 'VALIDATION_SUCCESSFUL', 'VALIDATION_FAILED']):
            raise ValueError("must be one of enum values ('CERTIFICATE_VALIDATION_STATE_UNSPECIFIED', 'VALIDATION_SUCCESSFUL', 'VALIDATION_FAILED')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CertificateAttributes from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of certificate_template
        if self.certificate_template:
            _dict['certificateTemplate'] = self.certificate_template.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CertificateAttributes from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "certificateTemplate": CertificateTemplate.from_dict(obj["certificateTemplate"]) if obj.get("certificateTemplate") is not None else None,
            "fingerprint": obj.get("fingerprint"),
            "issuer": obj.get("issuer"),
            "serialNumber": obj.get("serialNumber"),
            "subject": obj.get("subject"),
            "thumbprint": obj.get("thumbprint"),
            "validationState": obj.get("validationState"),
            "validityExpirationTime": obj.get("validityExpirationTime"),
            "validityStartTime": obj.get("validityStartTime")
        })
        return _obj



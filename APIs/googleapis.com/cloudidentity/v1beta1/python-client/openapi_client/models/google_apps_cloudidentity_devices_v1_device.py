# coding: utf-8

"""
    Cloud Identity API

    API for provisioning and managing identity resources.

    The version of the OpenAPI document: v1beta1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_apps_cloudidentity_devices_v1_android_attributes import GoogleAppsCloudidentityDevicesV1AndroidAttributes
from typing import Optional, Set
from typing_extensions import Self

class GoogleAppsCloudidentityDevicesV1Device(BaseModel):
    """
     A Device within the Cloud Identity Devices API. Represents a Device known to Google Cloud, independent of the device ownership, type, and whether it is assigned or in use by a user.
    """ # noqa: E501
    android_specific_attributes: Optional[GoogleAppsCloudidentityDevicesV1AndroidAttributes] = Field(default=None, alias="androidSpecificAttributes")
    asset_tag: Optional[StrictStr] = Field(default=None, description="Asset tag of the device.", alias="assetTag")
    baseband_version: Optional[StrictStr] = Field(default=None, description="Output only. Baseband version of the device.", alias="basebandVersion")
    bootloader_version: Optional[StrictStr] = Field(default=None, description="Output only. Device bootloader version. Example: 0.6.7.", alias="bootloaderVersion")
    brand: Optional[StrictStr] = Field(default=None, description="Output only. Device brand. Example: Samsung.")
    build_number: Optional[StrictStr] = Field(default=None, description="Output only. Build number of the device.", alias="buildNumber")
    compromised_state: Optional[StrictStr] = Field(default=None, description="Output only. Represents whether the Device is compromised.", alias="compromisedState")
    create_time: Optional[StrictStr] = Field(default=None, description="Output only. When the Company-Owned device was imported. This field is empty for BYOD devices.", alias="createTime")
    device_id: Optional[StrictStr] = Field(default=None, description="Unique identifier for the device.", alias="deviceId")
    device_type: Optional[StrictStr] = Field(default=None, description="Output only. Type of device.", alias="deviceType")
    enabled_developer_options: Optional[StrictBool] = Field(default=None, description="Output only. Whether developer options is enabled on device.", alias="enabledDeveloperOptions")
    enabled_usb_debugging: Optional[StrictBool] = Field(default=None, description="Output only. Whether USB debugging is enabled on device.", alias="enabledUsbDebugging")
    encryption_state: Optional[StrictStr] = Field(default=None, description="Output only. Device encryption state.", alias="encryptionState")
    hostname: Optional[StrictStr] = Field(default=None, description="Host name of the device.")
    imei: Optional[StrictStr] = Field(default=None, description="Output only. IMEI number of device if GSM device; empty otherwise.")
    kernel_version: Optional[StrictStr] = Field(default=None, description="Output only. Kernel version of the device.", alias="kernelVersion")
    last_sync_time: Optional[StrictStr] = Field(default=None, description="Most recent time when device synced with this service.", alias="lastSyncTime")
    management_state: Optional[StrictStr] = Field(default=None, description="Output only. Management state of the device", alias="managementState")
    manufacturer: Optional[StrictStr] = Field(default=None, description="Output only. Device manufacturer. Example: Motorola.")
    meid: Optional[StrictStr] = Field(default=None, description="Output only. MEID number of device if CDMA device; empty otherwise.")
    model: Optional[StrictStr] = Field(default=None, description="Output only. Model name of device. Example: Pixel 3.")
    name: Optional[StrictStr] = Field(default=None, description="Output only. [Resource name](https://cloud.google.com/apis/design/resource_names) of the Device in format: `devices/{device}`, where device is the unique id assigned to the Device.")
    network_operator: Optional[StrictStr] = Field(default=None, description="Output only. Mobile or network operator of device, if available.", alias="networkOperator")
    os_version: Optional[StrictStr] = Field(default=None, description="Output only. OS version of the device. Example: Android 8.1.0.", alias="osVersion")
    other_accounts: Optional[List[StrictStr]] = Field(default=None, description="Output only. Domain name for Google accounts on device. Type for other accounts on device. On Android, will only be populated if |ownership_privilege| is |PROFILE_OWNER| or |DEVICE_OWNER|. Does not include the account signed in to the device policy app if that account's domain has only one account. Examples: \"com.example\", \"xyz.com\".", alias="otherAccounts")
    owner_type: Optional[StrictStr] = Field(default=None, description="Output only. Whether the device is owned by the company or an individual", alias="ownerType")
    release_version: Optional[StrictStr] = Field(default=None, description="Output only. OS release version. Example: 6.0.", alias="releaseVersion")
    security_patch_time: Optional[StrictStr] = Field(default=None, description="Output only. OS security patch update time on device.", alias="securityPatchTime")
    serial_number: Optional[StrictStr] = Field(default=None, description="Serial Number of device. Example: HT82V1A01076.", alias="serialNumber")
    wifi_mac_addresses: Optional[List[StrictStr]] = Field(default=None, description="WiFi MAC addresses of device.", alias="wifiMacAddresses")
    __properties: ClassVar[List[str]] = ["androidSpecificAttributes", "assetTag", "basebandVersion", "bootloaderVersion", "brand", "buildNumber", "compromisedState", "createTime", "deviceId", "deviceType", "enabledDeveloperOptions", "enabledUsbDebugging", "encryptionState", "hostname", "imei", "kernelVersion", "lastSyncTime", "managementState", "manufacturer", "meid", "model", "name", "networkOperator", "osVersion", "otherAccounts", "ownerType", "releaseVersion", "securityPatchTime", "serialNumber", "wifiMacAddresses"]

    @field_validator('compromised_state')
    def compromised_state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['COMPROMISED_STATE_UNSPECIFIED', 'COMPROMISED', 'UNCOMPROMISED']):
            raise ValueError("must be one of enum values ('COMPROMISED_STATE_UNSPECIFIED', 'COMPROMISED', 'UNCOMPROMISED')")
        return value

    @field_validator('device_type')
    def device_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['DEVICE_TYPE_UNSPECIFIED', 'ANDROID', 'IOS', 'GOOGLE_SYNC', 'WINDOWS', 'MAC_OS', 'LINUX', 'CHROME_OS']):
            raise ValueError("must be one of enum values ('DEVICE_TYPE_UNSPECIFIED', 'ANDROID', 'IOS', 'GOOGLE_SYNC', 'WINDOWS', 'MAC_OS', 'LINUX', 'CHROME_OS')")
        return value

    @field_validator('encryption_state')
    def encryption_state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['ENCRYPTION_STATE_UNSPECIFIED', 'UNSUPPORTED_BY_DEVICE', 'ENCRYPTED', 'NOT_ENCRYPTED']):
            raise ValueError("must be one of enum values ('ENCRYPTION_STATE_UNSPECIFIED', 'UNSUPPORTED_BY_DEVICE', 'ENCRYPTED', 'NOT_ENCRYPTED')")
        return value

    @field_validator('management_state')
    def management_state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['MANAGEMENT_STATE_UNSPECIFIED', 'APPROVED', 'BLOCKED', 'PENDING', 'UNPROVISIONED', 'WIPING', 'WIPED']):
            raise ValueError("must be one of enum values ('MANAGEMENT_STATE_UNSPECIFIED', 'APPROVED', 'BLOCKED', 'PENDING', 'UNPROVISIONED', 'WIPING', 'WIPED')")
        return value

    @field_validator('owner_type')
    def owner_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['DEVICE_OWNERSHIP_UNSPECIFIED', 'COMPANY', 'BYOD']):
            raise ValueError("must be one of enum values ('DEVICE_OWNERSHIP_UNSPECIFIED', 'COMPANY', 'BYOD')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleAppsCloudidentityDevicesV1Device from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "baseband_version",
            "bootloader_version",
            "brand",
            "build_number",
            "compromised_state",
            "create_time",
            "device_type",
            "enabled_developer_options",
            "enabled_usb_debugging",
            "encryption_state",
            "imei",
            "kernel_version",
            "management_state",
            "manufacturer",
            "meid",
            "model",
            "name",
            "network_operator",
            "os_version",
            "other_accounts",
            "owner_type",
            "release_version",
            "security_patch_time",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of android_specific_attributes
        if self.android_specific_attributes:
            _dict['androidSpecificAttributes'] = self.android_specific_attributes.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleAppsCloudidentityDevicesV1Device from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "androidSpecificAttributes": GoogleAppsCloudidentityDevicesV1AndroidAttributes.from_dict(obj["androidSpecificAttributes"]) if obj.get("androidSpecificAttributes") is not None else None,
            "assetTag": obj.get("assetTag"),
            "basebandVersion": obj.get("basebandVersion"),
            "bootloaderVersion": obj.get("bootloaderVersion"),
            "brand": obj.get("brand"),
            "buildNumber": obj.get("buildNumber"),
            "compromisedState": obj.get("compromisedState"),
            "createTime": obj.get("createTime"),
            "deviceId": obj.get("deviceId"),
            "deviceType": obj.get("deviceType"),
            "enabledDeveloperOptions": obj.get("enabledDeveloperOptions"),
            "enabledUsbDebugging": obj.get("enabledUsbDebugging"),
            "encryptionState": obj.get("encryptionState"),
            "hostname": obj.get("hostname"),
            "imei": obj.get("imei"),
            "kernelVersion": obj.get("kernelVersion"),
            "lastSyncTime": obj.get("lastSyncTime"),
            "managementState": obj.get("managementState"),
            "manufacturer": obj.get("manufacturer"),
            "meid": obj.get("meid"),
            "model": obj.get("model"),
            "name": obj.get("name"),
            "networkOperator": obj.get("networkOperator"),
            "osVersion": obj.get("osVersion"),
            "otherAccounts": obj.get("otherAccounts"),
            "ownerType": obj.get("ownerType"),
            "releaseVersion": obj.get("releaseVersion"),
            "securityPatchTime": obj.get("securityPatchTime"),
            "serialNumber": obj.get("serialNumber"),
            "wifiMacAddresses": obj.get("wifiMacAddresses")
        })
        return _obj



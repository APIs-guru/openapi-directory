# coding: utf-8

"""
    Cloud Identity API

    API for provisioning and managing identity resources.

    The version of the OpenAPI document: v1beta1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class GoogleAppsCloudidentityDevicesV1AndroidAttributes(BaseModel):
    """
    Resource representing the Android specific attributes of a Device.
    """ # noqa: E501
    cts_profile_match: Optional[StrictBool] = Field(default=None, description="Whether the device passes Android CTS compliance.", alias="ctsProfileMatch")
    enabled_unknown_sources: Optional[StrictBool] = Field(default=None, description="Whether applications from unknown sources can be installed on device.", alias="enabledUnknownSources")
    has_potentially_harmful_apps: Optional[StrictBool] = Field(default=None, description="Whether any potentially harmful apps were detected on the device.", alias="hasPotentiallyHarmfulApps")
    owner_profile_account: Optional[StrictBool] = Field(default=None, description="Whether this account is on an owner/primary profile. For phones, only true for owner profiles. Android 4+ devices can have secondary or restricted user profiles.", alias="ownerProfileAccount")
    ownership_privilege: Optional[StrictStr] = Field(default=None, description="Ownership privileges on device.", alias="ownershipPrivilege")
    supports_work_profile: Optional[StrictBool] = Field(default=None, description="Whether device supports Android work profiles. If false, this service will not block access to corp data even if an administrator turns on the \"Enforce Work Profile\" policy.", alias="supportsWorkProfile")
    verified_boot: Optional[StrictBool] = Field(default=None, description="Whether Android verified boot status is GREEN.", alias="verifiedBoot")
    verify_apps_enabled: Optional[StrictBool] = Field(default=None, description="Whether Google Play Protect Verify Apps is enabled.", alias="verifyAppsEnabled")
    __properties: ClassVar[List[str]] = ["ctsProfileMatch", "enabledUnknownSources", "hasPotentiallyHarmfulApps", "ownerProfileAccount", "ownershipPrivilege", "supportsWorkProfile", "verifiedBoot", "verifyAppsEnabled"]

    @field_validator('ownership_privilege')
    def ownership_privilege_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['OWNERSHIP_PRIVILEGE_UNSPECIFIED', 'DEVICE_ADMINISTRATOR', 'PROFILE_OWNER', 'DEVICE_OWNER']):
            raise ValueError("must be one of enum values ('OWNERSHIP_PRIVILEGE_UNSPECIFIED', 'DEVICE_ADMINISTRATOR', 'PROFILE_OWNER', 'DEVICE_OWNER')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleAppsCloudidentityDevicesV1AndroidAttributes from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleAppsCloudidentityDevicesV1AndroidAttributes from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "ctsProfileMatch": obj.get("ctsProfileMatch"),
            "enabledUnknownSources": obj.get("enabledUnknownSources"),
            "hasPotentiallyHarmfulApps": obj.get("hasPotentiallyHarmfulApps"),
            "ownerProfileAccount": obj.get("ownerProfileAccount"),
            "ownershipPrivilege": obj.get("ownershipPrivilege"),
            "supportsWorkProfile": obj.get("supportsWorkProfile"),
            "verifiedBoot": obj.get("verifiedBoot"),
            "verifyAppsEnabled": obj.get("verifyAppsEnabled")
        })
        return _obj



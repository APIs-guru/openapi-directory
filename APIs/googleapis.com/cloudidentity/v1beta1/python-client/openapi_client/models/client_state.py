# coding: utf-8

"""
    Cloud Identity API

    API for provisioning and managing identity resources.

    The version of the OpenAPI document: v1beta1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.custom_attribute_value import CustomAttributeValue
from typing import Optional, Set
from typing_extensions import Self

class ClientState(BaseModel):
    """
    Represents the state associated with an API client calling the Devices API. Resource representing ClientState and supports updates from API users
    """ # noqa: E501
    asset_tags: Optional[List[StrictStr]] = Field(default=None, description="The caller can specify asset tags for this resource", alias="assetTags")
    compliance_state: Optional[StrictStr] = Field(default=None, description="The compliance state of the resource as specified by the API client.", alias="complianceState")
    create_time: Optional[StrictStr] = Field(default=None, description="Output only. The time the client state data was created.", alias="createTime")
    custom_id: Optional[StrictStr] = Field(default=None, description="This field may be used to store a unique identifier for the API resource within which these CustomAttributes are a field.", alias="customId")
    etag: Optional[StrictStr] = Field(default=None, description="The token that needs to be passed back for concurrency control in updates. Token needs to be passed back in UpdateRequest")
    health_score: Optional[StrictStr] = Field(default=None, description="The Health score of the resource", alias="healthScore")
    key_value_pairs: Optional[Dict[str, CustomAttributeValue]] = Field(default=None, description="The map of key-value attributes stored by callers specific to a device. The total serialized length of this map may not exceed 10KB. No limit is placed on the number of attributes in a map.", alias="keyValuePairs")
    last_update_time: Optional[StrictStr] = Field(default=None, description="Output only. The time the client state data was last updated.", alias="lastUpdateTime")
    managed: Optional[StrictStr] = Field(default=None, description="The management state of the resource as specified by the API client.")
    name: Optional[StrictStr] = Field(default=None, description="Output only. [Resource name](https://cloud.google.com/apis/design/resource_names) of the ClientState in format: `devices/{device_id}/deviceUsers/{device_user_id}/clientState/{partner_id}`, where partner_id corresponds to the partner storing the data.")
    owner_type: Optional[StrictStr] = Field(default=None, description="Output only. The owner of the ClientState", alias="ownerType")
    score_reason: Optional[StrictStr] = Field(default=None, description="A descriptive cause of the health score.", alias="scoreReason")
    __properties: ClassVar[List[str]] = ["assetTags", "complianceState", "createTime", "customId", "etag", "healthScore", "keyValuePairs", "lastUpdateTime", "managed", "name", "ownerType", "scoreReason"]

    @field_validator('compliance_state')
    def compliance_state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['COMPLIANCE_STATE_UNSPECIFIED', 'COMPLIANT', 'NON_COMPLIANT']):
            raise ValueError("must be one of enum values ('COMPLIANCE_STATE_UNSPECIFIED', 'COMPLIANT', 'NON_COMPLIANT')")
        return value

    @field_validator('health_score')
    def health_score_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['HEALTH_SCORE_UNSPECIFIED', 'VERY_POOR', 'POOR', 'NEUTRAL', 'GOOD', 'VERY_GOOD']):
            raise ValueError("must be one of enum values ('HEALTH_SCORE_UNSPECIFIED', 'VERY_POOR', 'POOR', 'NEUTRAL', 'GOOD', 'VERY_GOOD')")
        return value

    @field_validator('managed')
    def managed_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['MANAGED_STATE_UNSPECIFIED', 'MANAGED', 'UNMANAGED']):
            raise ValueError("must be one of enum values ('MANAGED_STATE_UNSPECIFIED', 'MANAGED', 'UNMANAGED')")
        return value

    @field_validator('owner_type')
    def owner_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['OWNER_TYPE_UNSPECIFIED', 'OWNER_TYPE_CUSTOMER', 'OWNER_TYPE_PARTNER']):
            raise ValueError("must be one of enum values ('OWNER_TYPE_UNSPECIFIED', 'OWNER_TYPE_CUSTOMER', 'OWNER_TYPE_PARTNER')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ClientState from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "create_time",
            "last_update_time",
            "name",
            "owner_type",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each value in key_value_pairs (dict)
        _field_dict = {}
        if self.key_value_pairs:
            for _key_key_value_pairs in self.key_value_pairs:
                if self.key_value_pairs[_key_key_value_pairs]:
                    _field_dict[_key_key_value_pairs] = self.key_value_pairs[_key_key_value_pairs].to_dict()
            _dict['keyValuePairs'] = _field_dict
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ClientState from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "assetTags": obj.get("assetTags"),
            "complianceState": obj.get("complianceState"),
            "createTime": obj.get("createTime"),
            "customId": obj.get("customId"),
            "etag": obj.get("etag"),
            "healthScore": obj.get("healthScore"),
            "keyValuePairs": dict(
                (_k, CustomAttributeValue.from_dict(_v))
                for _k, _v in obj["keyValuePairs"].items()
            )
            if obj.get("keyValuePairs") is not None
            else None,
            "lastUpdateTime": obj.get("lastUpdateTime"),
            "managed": obj.get("managed"),
            "name": obj.get("name"),
            "ownerType": obj.get("ownerType"),
            "scoreReason": obj.get("scoreReason")
        })
        return _obj



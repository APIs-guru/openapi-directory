# coding: utf-8

"""
    Cloud Identity API

    API for provisioning and managing identity resources.

    The version of the OpenAPI document: v1beta1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class DeviceUser(BaseModel):
    """
    Represents a user's use of a Device in the Cloud Identity Devices API. A DeviceUser is a resource representing a user's use of a Device
    """ # noqa: E501
    compromised_state: Optional[StrictStr] = Field(default=None, description="Compromised State of the DeviceUser object", alias="compromisedState")
    create_time: Optional[StrictStr] = Field(default=None, description="When the user first signed in to the device", alias="createTime")
    first_sync_time: Optional[StrictStr] = Field(default=None, description="Output only. Most recent time when user registered with this service.", alias="firstSyncTime")
    language_code: Optional[StrictStr] = Field(default=None, description="Output only. Default locale used on device, in IETF BCP-47 format.", alias="languageCode")
    last_sync_time: Optional[StrictStr] = Field(default=None, description="Output only. Last time when user synced with policies.", alias="lastSyncTime")
    management_state: Optional[StrictStr] = Field(default=None, description="Output only. Management state of the user on the device.", alias="managementState")
    name: Optional[StrictStr] = Field(default=None, description="Output only. [Resource name](https://cloud.google.com/apis/design/resource_names) of the DeviceUser in format: `devices/{device_id}/deviceUsers/{device_user_id}`, where `device_user_id` uniquely identifies a user's use of a device.")
    password_state: Optional[StrictStr] = Field(default=None, description="Password state of the DeviceUser object", alias="passwordState")
    user_agent: Optional[StrictStr] = Field(default=None, description="Output only. User agent on the device for this specific user", alias="userAgent")
    user_email: Optional[StrictStr] = Field(default=None, description="Email address of the user registered on the device.", alias="userEmail")
    __properties: ClassVar[List[str]] = ["compromisedState", "createTime", "firstSyncTime", "languageCode", "lastSyncTime", "managementState", "name", "passwordState", "userAgent", "userEmail"]

    @field_validator('compromised_state')
    def compromised_state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['COMPROMISED_STATE_UNSPECIFIED', 'COMPROMISED', 'NOT_COMPROMISED']):
            raise ValueError("must be one of enum values ('COMPROMISED_STATE_UNSPECIFIED', 'COMPROMISED', 'NOT_COMPROMISED')")
        return value

    @field_validator('management_state')
    def management_state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['MANAGEMENT_STATE_UNSPECIFIED', 'WIPING', 'WIPED', 'APPROVED', 'BLOCKED', 'PENDING_APPROVAL', 'UNENROLLED']):
            raise ValueError("must be one of enum values ('MANAGEMENT_STATE_UNSPECIFIED', 'WIPING', 'WIPED', 'APPROVED', 'BLOCKED', 'PENDING_APPROVAL', 'UNENROLLED')")
        return value

    @field_validator('password_state')
    def password_state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['PASSWORD_STATE_UNSPECIFIED', 'PASSWORD_SET', 'PASSWORD_NOT_SET']):
            raise ValueError("must be one of enum values ('PASSWORD_STATE_UNSPECIFIED', 'PASSWORD_SET', 'PASSWORD_NOT_SET')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DeviceUser from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "first_sync_time",
            "language_code",
            "last_sync_time",
            "management_state",
            "name",
            "user_agent",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DeviceUser from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "compromisedState": obj.get("compromisedState"),
            "createTime": obj.get("createTime"),
            "firstSyncTime": obj.get("firstSyncTime"),
            "languageCode": obj.get("languageCode"),
            "lastSyncTime": obj.get("lastSyncTime"),
            "managementState": obj.get("managementState"),
            "name": obj.get("name"),
            "passwordState": obj.get("passwordState"),
            "userAgent": obj.get("userAgent"),
            "userEmail": obj.get("userEmail")
        })
        return _obj



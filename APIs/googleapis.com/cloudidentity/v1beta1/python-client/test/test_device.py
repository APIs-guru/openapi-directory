# coding: utf-8

"""
    Cloud Identity API

    API for provisioning and managing identity resources.

    The version of the OpenAPI document: v1beta1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.device import Device

class TestDevice(unittest.TestCase):
    """Device unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> Device:
        """Test Device
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `Device`
        """
        model = Device()
        if include_optional:
            return Device(
                android_specific_attributes = openapi_client.models.android_attributes.AndroidAttributes(
                    cts_profile_match = True, 
                    enabled_unknown_sources = True, 
                    has_potentially_harmful_apps = True, 
                    owner_profile_account = True, 
                    ownership_privilege = 'OWNERSHIP_PRIVILEGE_UNSPECIFIED', 
                    supports_work_profile = True, 
                    verified_boot = True, 
                    verify_apps_enabled = True, ),
                asset_tag = '',
                baseband_version = '',
                bootloader_version = '',
                brand = '',
                build_number = '',
                client_types = [
                    'CLIENT_TYPE_UNSPECIFIED'
                    ],
                compromised_state = 'COMPROMISED_STATE_UNSPECIFIED',
                create_time = '',
                device_id = '',
                device_type = 'DEVICE_TYPE_UNSPECIFIED',
                enabled_developer_options = True,
                enabled_usb_debugging = True,
                encryption_state = 'ENCRYPTION_STATE_UNSPECIFIED',
                endpoint_verification_specific_attributes = openapi_client.models.endpoint_verification_specific_attributes.EndpointVerificationSpecificAttributes(
                    additional_signals = {
                        'key' : null
                        }, 
                    browser_attributes = [
                        openapi_client.models.browser_attributes.BrowserAttributes(
                            chrome_browser_info = openapi_client.models.browser_info.BrowserInfo(
                                browser_management_state = 'UNSPECIFIED', 
                                browser_version = '', 
                                is_built_in_dns_client_enabled = True, 
                                is_bulk_data_entry_analysis_enabled = True, 
                                is_chrome_cleanup_enabled = True, 
                                is_chrome_remote_desktop_app_blocked = True, 
                                is_file_download_analysis_enabled = True, 
                                is_file_upload_analysis_enabled = True, 
                                is_realtime_url_check_enabled = True, 
                                is_security_event_analysis_enabled = True, 
                                is_site_isolation_enabled = True, 
                                is_third_party_blocking_enabled = True, 
                                password_protection_warning_trigger = 'PASSWORD_PROTECTION_TRIGGER_UNSPECIFIED', 
                                safe_browsing_protection_level = 'SAFE_BROWSING_LEVEL_UNSPECIFIED', ), 
                            chrome_profile_id = '', 
                            last_profile_sync_time = '', )
                        ], 
                    certificate_attributes = [
                        openapi_client.models.certificate_attributes.CertificateAttributes(
                            certificate_template = openapi_client.models.certificate_template.CertificateTemplate(
                                id = '', 
                                major_version = 56, 
                                minor_version = 56, ), 
                            fingerprint = '', 
                            issuer = '', 
                            serial_number = '', 
                            subject = '', 
                            thumbprint = '', 
                            validation_state = 'CERTIFICATE_VALIDATION_STATE_UNSPECIFIED', 
                            validity_expiration_time = '', 
                            validity_start_time = '', )
                        ], ),
                hostname = '',
                imei = '',
                kernel_version = '',
                last_sync_time = '',
                management_state = 'MANAGEMENT_STATE_UNSPECIFIED',
                manufacturer = '',
                meid = '',
                model = '',
                name = '',
                network_operator = '',
                os_version = '',
                other_accounts = [
                    ''
                    ],
                owner_type = 'DEVICE_OWNERSHIP_UNSPECIFIED',
                release_version = '',
                security_patch_time = '',
                serial_number = '',
                wifi_mac_addresses = [
                    ''
                    ]
            )
        else:
            return Device(
        )
        """

    def testDevice(self):
        """Test Device"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

# coding: utf-8

"""
    Cloud Identity API

    API for provisioning and managing identity resources.

    The version of the OpenAPI document: v1beta1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.get_membership_graph_response import GetMembershipGraphResponse

class TestGetMembershipGraphResponse(unittest.TestCase):
    """GetMembershipGraphResponse unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> GetMembershipGraphResponse:
        """Test GetMembershipGraphResponse
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `GetMembershipGraphResponse`
        """
        model = GetMembershipGraphResponse()
        if include_optional:
            return GetMembershipGraphResponse(
                adjacency_list = [
                    openapi_client.models.membership_adjacency_list.MembershipAdjacencyList(
                        edges = [
                            openapi_client.models.membership.Membership(
                                create_time = '', 
                                delivery_setting = 'DELIVERY_SETTING_UNSPECIFIED', 
                                member_key = openapi_client.models.entity_key.EntityKey(
                                    id = '', 
                                    namespace = '', ), 
                                name = '', 
                                preferred_member_key = openapi_client.models.entity_key.EntityKey(
                                    id = '', 
                                    namespace = '', ), 
                                roles = [
                                    openapi_client.models.membership_role.MembershipRole(
                                        expiry_detail = openapi_client.models.expiry_detail.ExpiryDetail(
                                            expire_time = '', ), 
                                        name = '', 
                                        restriction_evaluations = openapi_client.models.restriction_evaluations.RestrictionEvaluations(
                                            member_restriction_evaluation = openapi_client.models.membership_role_restriction_evaluation.MembershipRoleRestrictionEvaluation(
                                                state = 'STATE_UNSPECIFIED', ), ), )
                                    ], 
                                type = 'TYPE_UNSPECIFIED', 
                                update_time = '', )
                            ], 
                        group = '', )
                    ],
                groups = [
                    openapi_client.models.group.Group(
                        additional_group_keys = [
                            openapi_client.models.entity_key.EntityKey(
                                id = '', 
                                namespace = '', )
                            ], 
                        create_time = '', 
                        description = '', 
                        display_name = '', 
                        dynamic_group_metadata = openapi_client.models.dynamic_group_metadata.DynamicGroupMetadata(
                            queries = [
                                openapi_client.models.dynamic_group_query.DynamicGroupQuery(
                                    query = '', 
                                    resource_type = 'RESOURCE_TYPE_UNSPECIFIED', )
                                ], 
                            status = openapi_client.models.dynamic_group_status.DynamicGroupStatus(
                                status_time = '', ), ), 
                        group_key = openapi_client.models.entity_key.EntityKey(
                            id = '', 
                            namespace = '', ), 
                        labels = {
                            'key' : ''
                            }, 
                        name = '', 
                        parent = '', 
                        posix_groups = [
                            openapi_client.models.posix_group.PosixGroup(
                                gid = '', 
                                name = '', 
                                system_id = '', )
                            ], 
                        update_time = '', )
                    ]
            )
        else:
            return GetMembershipGraphResponse(
        )
        """

    def testGetMembershipGraphResponse(self):
        """Test GetMembershipGraphResponse"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

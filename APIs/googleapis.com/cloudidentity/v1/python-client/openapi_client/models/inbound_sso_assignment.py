# coding: utf-8

"""
    Cloud Identity API

    API for provisioning and managing identity resources.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.saml_sso_info import SamlSsoInfo
from openapi_client.models.sign_in_behavior import SignInBehavior
from typing import Optional, Set
from typing_extensions import Self

class InboundSsoAssignment(BaseModel):
    """
    Targets with \"set\" SSO assignments and their respective assignments.
    """ # noqa: E501
    customer: Optional[StrictStr] = Field(default=None, description="Immutable. The customer. For example: `customers/C0123abc`.")
    name: Optional[StrictStr] = Field(default=None, description="Output only. [Resource name](https://cloud.google.com/apis/design/resource_names) of the Inbound SSO Assignment.")
    rank: Optional[StrictInt] = Field(default=None, description="Must be zero (which is the default value so it can be omitted) for assignments with `target_org_unit` set and must be greater-than-or-equal-to one for assignments with `target_group` set.")
    saml_sso_info: Optional[SamlSsoInfo] = Field(default=None, alias="samlSsoInfo")
    sign_in_behavior: Optional[SignInBehavior] = Field(default=None, alias="signInBehavior")
    sso_mode: Optional[StrictStr] = Field(default=None, description="Inbound SSO behavior.", alias="ssoMode")
    target_group: Optional[StrictStr] = Field(default=None, description="Immutable. Must be of the form `groups/{group}`.", alias="targetGroup")
    target_org_unit: Optional[StrictStr] = Field(default=None, description="Immutable. Must be of the form `orgUnits/{org_unit}`.", alias="targetOrgUnit")
    __properties: ClassVar[List[str]] = ["customer", "name", "rank", "samlSsoInfo", "signInBehavior", "ssoMode", "targetGroup", "targetOrgUnit"]

    @field_validator('sso_mode')
    def sso_mode_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['SSO_MODE_UNSPECIFIED', 'SSO_OFF', 'SAML_SSO', 'DOMAIN_WIDE_SAML_IF_ENABLED']):
            raise ValueError("must be one of enum values ('SSO_MODE_UNSPECIFIED', 'SSO_OFF', 'SAML_SSO', 'DOMAIN_WIDE_SAML_IF_ENABLED')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of InboundSsoAssignment from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "name",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of saml_sso_info
        if self.saml_sso_info:
            _dict['samlSsoInfo'] = self.saml_sso_info.to_dict()
        # override the default output from pydantic by calling `to_dict()` of sign_in_behavior
        if self.sign_in_behavior:
            _dict['signInBehavior'] = self.sign_in_behavior.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of InboundSsoAssignment from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "customer": obj.get("customer"),
            "name": obj.get("name"),
            "rank": obj.get("rank"),
            "samlSsoInfo": SamlSsoInfo.from_dict(obj["samlSsoInfo"]) if obj.get("samlSsoInfo") is not None else None,
            "signInBehavior": SignInBehavior.from_dict(obj["signInBehavior"]) if obj.get("signInBehavior") is not None else None,
            "ssoMode": obj.get("ssoMode"),
            "targetGroup": obj.get("targetGroup"),
            "targetOrgUnit": obj.get("targetOrgUnit")
        })
        return _obj



# coding: utf-8

"""
    Cloud Identity API

    API for provisioning and managing identity resources.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.entity_key import EntityKey
from openapi_client.models.membership_role import MembershipRole
from typing import Optional, Set
from typing_extensions import Self

class Membership(BaseModel):
    """
    A membership within the Cloud Identity Groups API. A `Membership` defines a relationship between a `Group` and an entity belonging to that `Group`, referred to as a \"member\".
    """ # noqa: E501
    create_time: Optional[StrictStr] = Field(default=None, description="Output only. The time when the `Membership` was created.", alias="createTime")
    delivery_setting: Optional[StrictStr] = Field(default=None, description="Output only. Delivery setting associated with the membership.", alias="deliverySetting")
    name: Optional[StrictStr] = Field(default=None, description="Output only. The [resource name](https://cloud.google.com/apis/design/resource_names) of the `Membership`. Shall be of the form `groups/{group}/memberships/{membership}`.")
    preferred_member_key: Optional[EntityKey] = Field(default=None, alias="preferredMemberKey")
    roles: Optional[List[MembershipRole]] = Field(default=None, description="The `MembershipRole`s that apply to the `Membership`. If unspecified, defaults to a single `MembershipRole` with `name` `MEMBER`. Must not contain duplicate `MembershipRole`s with the same `name`.")
    type: Optional[StrictStr] = Field(default=None, description="Output only. The type of the membership.")
    update_time: Optional[StrictStr] = Field(default=None, description="Output only. The time when the `Membership` was last updated.", alias="updateTime")
    __properties: ClassVar[List[str]] = ["createTime", "deliverySetting", "name", "preferredMemberKey", "roles", "type", "updateTime"]

    @field_validator('delivery_setting')
    def delivery_setting_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['DELIVERY_SETTING_UNSPECIFIED', 'ALL_MAIL', 'DIGEST', 'DAILY', 'NONE', 'DISABLED']):
            raise ValueError("must be one of enum values ('DELIVERY_SETTING_UNSPECIFIED', 'ALL_MAIL', 'DIGEST', 'DAILY', 'NONE', 'DISABLED')")
        return value

    @field_validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['TYPE_UNSPECIFIED', 'USER', 'SERVICE_ACCOUNT', 'GROUP', 'SHARED_DRIVE', 'OTHER']):
            raise ValueError("must be one of enum values ('TYPE_UNSPECIFIED', 'USER', 'SERVICE_ACCOUNT', 'GROUP', 'SHARED_DRIVE', 'OTHER')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Membership from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "create_time",
            "delivery_setting",
            "name",
            "type",
            "update_time",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of preferred_member_key
        if self.preferred_member_key:
            _dict['preferredMemberKey'] = self.preferred_member_key.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in roles (list)
        _items = []
        if self.roles:
            for _item_roles in self.roles:
                if _item_roles:
                    _items.append(_item_roles.to_dict())
            _dict['roles'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Membership from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "createTime": obj.get("createTime"),
            "deliverySetting": obj.get("deliverySetting"),
            "name": obj.get("name"),
            "preferredMemberKey": EntityKey.from_dict(obj["preferredMemberKey"]) if obj.get("preferredMemberKey") is not None else None,
            "roles": [MembershipRole.from_dict(_item) for _item in obj["roles"]] if obj.get("roles") is not None else None,
            "type": obj.get("type"),
            "updateTime": obj.get("updateTime")
        })
        return _obj



# coding: utf-8

"""
    Cloud Identity API

    API for provisioning and managing identity resources.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.dynamic_group_metadata import DynamicGroupMetadata
from openapi_client.models.entity_key import EntityKey
from typing import Optional, Set
from typing_extensions import Self

class Group(BaseModel):
    """
    A group within the Cloud Identity Groups API. A `Group` is a collection of entities, where each entity is either a user, another group, or a service account.
    """ # noqa: E501
    additional_group_keys: Optional[List[EntityKey]] = Field(default=None, description="Output only. Additional group keys associated with the Group.", alias="additionalGroupKeys")
    create_time: Optional[StrictStr] = Field(default=None, description="Output only. The time when the `Group` was created.", alias="createTime")
    description: Optional[StrictStr] = Field(default=None, description="An extended description to help users determine the purpose of a `Group`. Must not be longer than 4,096 characters.")
    display_name: Optional[StrictStr] = Field(default=None, description="The display name of the `Group`.", alias="displayName")
    dynamic_group_metadata: Optional[DynamicGroupMetadata] = Field(default=None, alias="dynamicGroupMetadata")
    group_key: Optional[EntityKey] = Field(default=None, alias="groupKey")
    labels: Optional[Dict[str, StrictStr]] = Field(default=None, description="Required. One or more label entries that apply to the Group. Currently supported labels contain a key with an empty value. Google Groups are the default type of group and have a label with a key of `cloudidentity.googleapis.com/groups.discussion_forum` and an empty value. Existing Google Groups can have an additional label with a key of `cloudidentity.googleapis.com/groups.security` and an empty value added to them. **This is an immutable change and the security label cannot be removed once added.** Dynamic groups have a label with a key of `cloudidentity.googleapis.com/groups.dynamic`. Identity-mapped groups for Cloud Search have a label with a key of `system/groups/external` and an empty value.")
    name: Optional[StrictStr] = Field(default=None, description="Output only. The [resource name](https://cloud.google.com/apis/design/resource_names) of the `Group`. Shall be of the form `groups/{group}`.")
    parent: Optional[StrictStr] = Field(default=None, description="Required. Immutable. The resource name of the entity under which this `Group` resides in the Cloud Identity resource hierarchy. Must be of the form `identitysources/{identity_source}` for external [identity-mapped groups](https://support.google.com/a/answer/9039510) or `customers/{customer_id}` for Google Groups. The `customer_id` must begin with \"C\" (for example, 'C046psxkn'). [Find your customer ID.] (https://support.google.com/cloudidentity/answer/10070793)")
    update_time: Optional[StrictStr] = Field(default=None, description="Output only. The time when the `Group` was last updated.", alias="updateTime")
    __properties: ClassVar[List[str]] = ["additionalGroupKeys", "createTime", "description", "displayName", "dynamicGroupMetadata", "groupKey", "labels", "name", "parent", "updateTime"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Group from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "additional_group_keys",
            "create_time",
            "name",
            "update_time",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in additional_group_keys (list)
        _items = []
        if self.additional_group_keys:
            for _item_additional_group_keys in self.additional_group_keys:
                if _item_additional_group_keys:
                    _items.append(_item_additional_group_keys.to_dict())
            _dict['additionalGroupKeys'] = _items
        # override the default output from pydantic by calling `to_dict()` of dynamic_group_metadata
        if self.dynamic_group_metadata:
            _dict['dynamicGroupMetadata'] = self.dynamic_group_metadata.to_dict()
        # override the default output from pydantic by calling `to_dict()` of group_key
        if self.group_key:
            _dict['groupKey'] = self.group_key.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Group from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "additionalGroupKeys": [EntityKey.from_dict(_item) for _item in obj["additionalGroupKeys"]] if obj.get("additionalGroupKeys") is not None else None,
            "createTime": obj.get("createTime"),
            "description": obj.get("description"),
            "displayName": obj.get("displayName"),
            "dynamicGroupMetadata": DynamicGroupMetadata.from_dict(obj["dynamicGroupMetadata"]) if obj.get("dynamicGroupMetadata") is not None else None,
            "groupKey": EntityKey.from_dict(obj["groupKey"]) if obj.get("groupKey") is not None else None,
            "labels": obj.get("labels"),
            "name": obj.get("name"),
            "parent": obj.get("parent"),
            "updateTime": obj.get("updateTime")
        })
        return _obj



# coding: utf-8

"""
    Cloud Identity API

    API for provisioning and managing identity resources.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.entity_key import EntityKey
from openapi_client.models.membership_role import MembershipRole
from typing import Optional, Set
from typing_extensions import Self

class MembershipRelation(BaseModel):
    """
    Message containing membership relation.
    """ # noqa: E501
    description: Optional[StrictStr] = Field(default=None, description="An extended description to help users determine the purpose of a `Group`.")
    display_name: Optional[StrictStr] = Field(default=None, description="The display name of the `Group`.", alias="displayName")
    group: Optional[StrictStr] = Field(default=None, description="The [resource name](https://cloud.google.com/apis/design/resource_names) of the `Group`. Shall be of the form `groups/{group_id}`.")
    group_key: Optional[EntityKey] = Field(default=None, alias="groupKey")
    labels: Optional[Dict[str, StrictStr]] = Field(default=None, description="One or more label entries that apply to the Group. Currently supported labels contain a key with an empty value.")
    membership: Optional[StrictStr] = Field(default=None, description="The [resource name](https://cloud.google.com/apis/design/resource_names) of the `Membership`. Shall be of the form `groups/{group_id}/memberships/{membership_id}`.")
    roles: Optional[List[MembershipRole]] = Field(default=None, description="The `MembershipRole`s that apply to the `Membership`.")
    __properties: ClassVar[List[str]] = ["description", "displayName", "group", "groupKey", "labels", "membership", "roles"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of MembershipRelation from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of group_key
        if self.group_key:
            _dict['groupKey'] = self.group_key.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in roles (list)
        _items = []
        if self.roles:
            for _item_roles in self.roles:
                if _item_roles:
                    _items.append(_item_roles.to_dict())
            _dict['roles'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of MembershipRelation from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "description": obj.get("description"),
            "displayName": obj.get("displayName"),
            "group": obj.get("group"),
            "groupKey": EntityKey.from_dict(obj["groupKey"]) if obj.get("groupKey") is not None else None,
            "labels": obj.get("labels"),
            "membership": obj.get("membership"),
            "roles": [MembershipRole.from_dict(_item) for _item in obj["roles"]] if obj.get("roles") is not None else None
        })
        return _obj



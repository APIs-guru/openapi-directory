# coding: utf-8

"""
    Cloud Identity API

    API for provisioning and managing identity resources.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class UserInvitation(BaseModel):
    """
    The `UserInvitation` resource represents an email that can be sent to an unmanaged user account inviting them to join the customer's Google Workspace or Cloud Identity account. An unmanaged account shares an email address domain with the Google Workspace or Cloud Identity account but is not managed by it yet. If the user accepts the `UserInvitation`, the user account will become managed.
    """ # noqa: E501
    mails_sent_count: Optional[StrictStr] = Field(default=None, description="Number of invitation emails sent to the user.", alias="mailsSentCount")
    name: Optional[StrictStr] = Field(default=None, description="Shall be of the form `customers/{customer}/userinvitations/{user_email_address}`.")
    state: Optional[StrictStr] = Field(default=None, description="State of the `UserInvitation`.")
    update_time: Optional[StrictStr] = Field(default=None, description="Time when the `UserInvitation` was last updated.", alias="updateTime")
    __properties: ClassVar[List[str]] = ["mailsSentCount", "name", "state", "updateTime"]

    @field_validator('state')
    def state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['STATE_UNSPECIFIED', 'NOT_YET_SENT', 'INVITED', 'ACCEPTED', 'DECLINED']):
            raise ValueError("must be one of enum values ('STATE_UNSPECIFIED', 'NOT_YET_SENT', 'INVITED', 'ACCEPTED', 'DECLINED')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of UserInvitation from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of UserInvitation from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "mailsSentCount": obj.get("mailsSentCount"),
            "name": obj.get("name"),
            "state": obj.get("state"),
            "updateTime": obj.get("updateTime")
        })
        return _obj



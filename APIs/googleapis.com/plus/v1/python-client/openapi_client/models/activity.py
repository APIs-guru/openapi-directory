# coding: utf-8

"""
    Google+ API

    Builds on top of the Google+ platform.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.acl import Acl
from openapi_client.models.activity_actor import ActivityActor
from openapi_client.models.activity_object import ActivityObject
from openapi_client.models.activity_provider import ActivityProvider
from openapi_client.models.place import Place
from typing import Optional, Set
from typing_extensions import Self

class Activity(BaseModel):
    """
    Activity
    """ # noqa: E501
    access: Optional[Acl] = None
    actor: Optional[ActivityActor] = None
    address: Optional[StrictStr] = Field(default=None, description="Street address where this activity occurred.")
    annotation: Optional[StrictStr] = Field(default=None, description="Additional content added by the person who shared this activity, applicable only when resharing an activity.")
    crosspost_source: Optional[StrictStr] = Field(default=None, description="If this activity is a crosspost from another system, this property specifies the ID of the original activity.", alias="crosspostSource")
    etag: Optional[StrictStr] = Field(default=None, description="ETag of this response for caching purposes.")
    geocode: Optional[StrictStr] = Field(default=None, description="Latitude and longitude where this activity occurred. Format is latitude followed by longitude, space separated.")
    id: Optional[StrictStr] = Field(default=None, description="The ID of this activity.")
    kind: Optional[StrictStr] = Field(default='plus#activity', description="Identifies this resource as an activity. Value: \"plus#activity\".")
    location: Optional[Place] = None
    object: Optional[ActivityObject] = None
    place_id: Optional[StrictStr] = Field(default=None, description="ID of the place where this activity occurred.", alias="placeId")
    place_name: Optional[StrictStr] = Field(default=None, description="Name of the place where this activity occurred.", alias="placeName")
    provider: Optional[ActivityProvider] = None
    published: Optional[datetime] = Field(default=None, description="The time at which this activity was initially published. Formatted as an RFC 3339 timestamp.")
    radius: Optional[StrictStr] = Field(default=None, description="Radius, in meters, of the region where this activity occurred, centered at the latitude and longitude identified in geocode.")
    title: Optional[StrictStr] = Field(default=None, description="Title of this activity.")
    updated: Optional[datetime] = Field(default=None, description="The time at which this activity was last updated. Formatted as an RFC 3339 timestamp.")
    url: Optional[StrictStr] = Field(default=None, description="The link to this activity.")
    verb: Optional[StrictStr] = Field(default=None, description="This activity's verb, which indicates the action that was performed. Possible values include, but are not limited to, the following values:   - \"post\" - Publish content to the stream.  - \"share\" - Reshare an activity.")
    __properties: ClassVar[List[str]] = ["access", "actor", "address", "annotation", "crosspostSource", "etag", "geocode", "id", "kind", "location", "object", "placeId", "placeName", "provider", "published", "radius", "title", "updated", "url", "verb"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Activity from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of access
        if self.access:
            _dict['access'] = self.access.to_dict()
        # override the default output from pydantic by calling `to_dict()` of actor
        if self.actor:
            _dict['actor'] = self.actor.to_dict()
        # override the default output from pydantic by calling `to_dict()` of location
        if self.location:
            _dict['location'] = self.location.to_dict()
        # override the default output from pydantic by calling `to_dict()` of object
        if self.object:
            _dict['object'] = self.object.to_dict()
        # override the default output from pydantic by calling `to_dict()` of provider
        if self.provider:
            _dict['provider'] = self.provider.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Activity from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "access": Acl.from_dict(obj["access"]) if obj.get("access") is not None else None,
            "actor": ActivityActor.from_dict(obj["actor"]) if obj.get("actor") is not None else None,
            "address": obj.get("address"),
            "annotation": obj.get("annotation"),
            "crosspostSource": obj.get("crosspostSource"),
            "etag": obj.get("etag"),
            "geocode": obj.get("geocode"),
            "id": obj.get("id"),
            "kind": obj.get("kind") if obj.get("kind") is not None else 'plus#activity',
            "location": Place.from_dict(obj["location"]) if obj.get("location") is not None else None,
            "object": ActivityObject.from_dict(obj["object"]) if obj.get("object") is not None else None,
            "placeId": obj.get("placeId"),
            "placeName": obj.get("placeName"),
            "provider": ActivityProvider.from_dict(obj["provider"]) if obj.get("provider") is not None else None,
            "published": obj.get("published"),
            "radius": obj.get("radius"),
            "title": obj.get("title"),
            "updated": obj.get("updated"),
            "url": obj.get("url"),
            "verb": obj.get("verb")
        })
        return _obj



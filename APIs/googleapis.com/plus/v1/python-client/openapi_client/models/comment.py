# coding: utf-8

"""
    Google+ API

    Builds on top of the Google+ platform.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.comment_actor import CommentActor
from openapi_client.models.comment_in_reply_to_inner import CommentInReplyToInner
from openapi_client.models.comment_object import CommentObject
from openapi_client.models.comment_plusoners import CommentPlusoners
from typing import Optional, Set
from typing_extensions import Self

class Comment(BaseModel):
    """
    Comment
    """ # noqa: E501
    actor: Optional[CommentActor] = None
    etag: Optional[StrictStr] = Field(default=None, description="ETag of this response for caching purposes.")
    id: Optional[StrictStr] = Field(default=None, description="The ID of this comment.")
    in_reply_to: Optional[List[CommentInReplyToInner]] = Field(default=None, description="The activity this comment replied to.", alias="inReplyTo")
    kind: Optional[StrictStr] = Field(default='plus#comment', description="Identifies this resource as a comment. Value: \"plus#comment\".")
    object: Optional[CommentObject] = None
    plusoners: Optional[CommentPlusoners] = None
    published: Optional[datetime] = Field(default=None, description="The time at which this comment was initially published. Formatted as an RFC 3339 timestamp.")
    self_link: Optional[StrictStr] = Field(default=None, description="Link to this comment resource.", alias="selfLink")
    updated: Optional[datetime] = Field(default=None, description="The time at which this comment was last updated. Formatted as an RFC 3339 timestamp.")
    verb: Optional[StrictStr] = Field(default='post', description="This comment's verb, indicating what action was performed. Possible values are:   - \"post\" - Publish content to the stream.")
    __properties: ClassVar[List[str]] = ["actor", "etag", "id", "inReplyTo", "kind", "object", "plusoners", "published", "selfLink", "updated", "verb"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Comment from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of actor
        if self.actor:
            _dict['actor'] = self.actor.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in in_reply_to (list)
        _items = []
        if self.in_reply_to:
            for _item_in_reply_to in self.in_reply_to:
                if _item_in_reply_to:
                    _items.append(_item_in_reply_to.to_dict())
            _dict['inReplyTo'] = _items
        # override the default output from pydantic by calling `to_dict()` of object
        if self.object:
            _dict['object'] = self.object.to_dict()
        # override the default output from pydantic by calling `to_dict()` of plusoners
        if self.plusoners:
            _dict['plusoners'] = self.plusoners.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Comment from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "actor": CommentActor.from_dict(obj["actor"]) if obj.get("actor") is not None else None,
            "etag": obj.get("etag"),
            "id": obj.get("id"),
            "inReplyTo": [CommentInReplyToInner.from_dict(_item) for _item in obj["inReplyTo"]] if obj.get("inReplyTo") is not None else None,
            "kind": obj.get("kind") if obj.get("kind") is not None else 'plus#comment',
            "object": CommentObject.from_dict(obj["object"]) if obj.get("object") is not None else None,
            "plusoners": CommentPlusoners.from_dict(obj["plusoners"]) if obj.get("plusoners") is not None else None,
            "published": obj.get("published"),
            "selfLink": obj.get("selfLink"),
            "updated": obj.get("updated"),
            "verb": obj.get("verb") if obj.get("verb") is not None else 'post'
        })
        return _obj



# coding: utf-8

"""
    Google+ API

    Builds on top of the Google+ platform.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.activity_actor_client_specific_actor_info import ActivityActorClientSpecificActorInfo
from openapi_client.models.activity_actor_verification import ActivityActorVerification
from openapi_client.models.comment_actor_image import CommentActorImage
from typing import Optional, Set
from typing_extensions import Self

class CommentActor(BaseModel):
    """
    The person who posted this comment.
    """ # noqa: E501
    client_specific_actor_info: Optional[ActivityActorClientSpecificActorInfo] = Field(default=None, alias="clientSpecificActorInfo")
    display_name: Optional[StrictStr] = Field(default=None, description="The name of this actor, suitable for display.", alias="displayName")
    id: Optional[StrictStr] = Field(default=None, description="The ID of the actor.")
    image: Optional[CommentActorImage] = None
    url: Optional[StrictStr] = Field(default=None, description="A link to the Person resource for this actor.")
    verification: Optional[ActivityActorVerification] = None
    __properties: ClassVar[List[str]] = ["clientSpecificActorInfo", "displayName", "id", "image", "url", "verification"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CommentActor from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of client_specific_actor_info
        if self.client_specific_actor_info:
            _dict['clientSpecificActorInfo'] = self.client_specific_actor_info.to_dict()
        # override the default output from pydantic by calling `to_dict()` of image
        if self.image:
            _dict['image'] = self.image.to_dict()
        # override the default output from pydantic by calling `to_dict()` of verification
        if self.verification:
            _dict['verification'] = self.verification.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CommentActor from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "clientSpecificActorInfo": ActivityActorClientSpecificActorInfo.from_dict(obj["clientSpecificActorInfo"]) if obj.get("clientSpecificActorInfo") is not None else None,
            "displayName": obj.get("displayName"),
            "id": obj.get("id"),
            "image": CommentActorImage.from_dict(obj["image"]) if obj.get("image") is not None else None,
            "url": obj.get("url"),
            "verification": ActivityActorVerification.from_dict(obj["verification"]) if obj.get("verification") is not None else None
        })
        return _obj



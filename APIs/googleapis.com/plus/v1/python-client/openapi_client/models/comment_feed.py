# coding: utf-8

"""
    Google+ API

    Builds on top of the Google+ platform.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.comment import Comment
from typing import Optional, Set
from typing_extensions import Self

class CommentFeed(BaseModel):
    """
    CommentFeed
    """ # noqa: E501
    etag: Optional[StrictStr] = Field(default=None, description="ETag of this response for caching purposes.")
    id: Optional[StrictStr] = Field(default=None, description="The ID of this collection of comments.")
    items: Optional[List[Comment]] = Field(default=None, description="The comments in this page of results.")
    kind: Optional[StrictStr] = Field(default='plus#commentFeed', description="Identifies this resource as a collection of comments. Value: \"plus#commentFeed\".")
    next_link: Optional[StrictStr] = Field(default=None, description="Link to the next page of activities.", alias="nextLink")
    next_page_token: Optional[StrictStr] = Field(default=None, description="The continuation token, which is used to page through large result sets. Provide this value in a subsequent request to return the next page of results.", alias="nextPageToken")
    title: Optional[StrictStr] = Field(default=None, description="The title of this collection of comments.")
    updated: Optional[datetime] = Field(default=None, description="The time at which this collection of comments was last updated. Formatted as an RFC 3339 timestamp.")
    __properties: ClassVar[List[str]] = ["etag", "id", "items", "kind", "nextLink", "nextPageToken", "title", "updated"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CommentFeed from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in items (list)
        _items = []
        if self.items:
            for _item_items in self.items:
                if _item_items:
                    _items.append(_item_items.to_dict())
            _dict['items'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CommentFeed from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "etag": obj.get("etag"),
            "id": obj.get("id"),
            "items": [Comment.from_dict(_item) for _item in obj["items"]] if obj.get("items") is not None else None,
            "kind": obj.get("kind") if obj.get("kind") is not None else 'plus#commentFeed',
            "nextLink": obj.get("nextLink"),
            "nextPageToken": obj.get("nextPageToken"),
            "title": obj.get("title"),
            "updated": obj.get("updated")
        })
        return _obj



# coding: utf-8

"""
    Google+ API

    Builds on top of the Google+ platform.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class PersonOrganizationsInner(BaseModel):
    """
    PersonOrganizationsInner
    """ # noqa: E501
    department: Optional[StrictStr] = Field(default=None, description="The department within the organization. Deprecated.")
    description: Optional[StrictStr] = Field(default=None, description="A short description of the person's role in this organization. Deprecated.")
    end_date: Optional[StrictStr] = Field(default=None, description="The date that the person left this organization.", alias="endDate")
    location: Optional[StrictStr] = Field(default=None, description="The location of this organization. Deprecated.")
    name: Optional[StrictStr] = Field(default=None, description="The name of the organization.")
    primary: Optional[StrictBool] = Field(default=None, description="If \"true\", indicates this organization is the person's primary one, which is typically interpreted as the current one.")
    start_date: Optional[StrictStr] = Field(default=None, description="The date that the person joined this organization.", alias="startDate")
    title: Optional[StrictStr] = Field(default=None, description="The person's job title or role within the organization.")
    type: Optional[StrictStr] = Field(default=None, description="The type of organization. Possible values include, but are not limited to, the following values:   - \"work\" - Work.  - \"school\" - School.")
    __properties: ClassVar[List[str]] = ["department", "description", "endDate", "location", "name", "primary", "startDate", "title", "type"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PersonOrganizationsInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PersonOrganizationsInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "department": obj.get("department"),
            "description": obj.get("description"),
            "endDate": obj.get("endDate"),
            "location": obj.get("location"),
            "name": obj.get("name"),
            "primary": obj.get("primary"),
            "startDate": obj.get("startDate"),
            "title": obj.get("title"),
            "type": obj.get("type")
        })
        return _obj



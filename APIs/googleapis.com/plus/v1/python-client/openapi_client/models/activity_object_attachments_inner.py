# coding: utf-8

"""
    Google+ API

    Builds on top of the Google+ platform.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.activity_object_attachments_inner_embed import ActivityObjectAttachmentsInnerEmbed
from openapi_client.models.activity_object_attachments_inner_full_image import ActivityObjectAttachmentsInnerFullImage
from openapi_client.models.activity_object_attachments_inner_image import ActivityObjectAttachmentsInnerImage
from openapi_client.models.activity_object_attachments_inner_thumbnails_inner import ActivityObjectAttachmentsInnerThumbnailsInner
from typing import Optional, Set
from typing_extensions import Self

class ActivityObjectAttachmentsInner(BaseModel):
    """
    ActivityObjectAttachmentsInner
    """ # noqa: E501
    content: Optional[StrictStr] = Field(default=None, description="If the attachment is an article, this property contains a snippet of text from the article. It can also include descriptions for other types.")
    display_name: Optional[StrictStr] = Field(default=None, description="The title of the attachment, such as a photo caption or an article title.", alias="displayName")
    embed: Optional[ActivityObjectAttachmentsInnerEmbed] = None
    full_image: Optional[ActivityObjectAttachmentsInnerFullImage] = Field(default=None, alias="fullImage")
    id: Optional[StrictStr] = Field(default=None, description="The ID of the attachment.")
    image: Optional[ActivityObjectAttachmentsInnerImage] = None
    object_type: Optional[StrictStr] = Field(default=None, description="The type of media object. Possible values include, but are not limited to, the following values:   - \"photo\" - A photo.  - \"album\" - A photo album.  - \"video\" - A video.  - \"article\" - An article, specified by a link.", alias="objectType")
    thumbnails: Optional[List[ActivityObjectAttachmentsInnerThumbnailsInner]] = Field(default=None, description="If the attachment is an album, this property is a list of potential additional thumbnails from the album.")
    url: Optional[StrictStr] = Field(default=None, description="The link to the attachment, which should be of type text/html.")
    __properties: ClassVar[List[str]] = ["content", "displayName", "embed", "fullImage", "id", "image", "objectType", "thumbnails", "url"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ActivityObjectAttachmentsInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of embed
        if self.embed:
            _dict['embed'] = self.embed.to_dict()
        # override the default output from pydantic by calling `to_dict()` of full_image
        if self.full_image:
            _dict['fullImage'] = self.full_image.to_dict()
        # override the default output from pydantic by calling `to_dict()` of image
        if self.image:
            _dict['image'] = self.image.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in thumbnails (list)
        _items = []
        if self.thumbnails:
            for _item_thumbnails in self.thumbnails:
                if _item_thumbnails:
                    _items.append(_item_thumbnails.to_dict())
            _dict['thumbnails'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ActivityObjectAttachmentsInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "content": obj.get("content"),
            "displayName": obj.get("displayName"),
            "embed": ActivityObjectAttachmentsInnerEmbed.from_dict(obj["embed"]) if obj.get("embed") is not None else None,
            "fullImage": ActivityObjectAttachmentsInnerFullImage.from_dict(obj["fullImage"]) if obj.get("fullImage") is not None else None,
            "id": obj.get("id"),
            "image": ActivityObjectAttachmentsInnerImage.from_dict(obj["image"]) if obj.get("image") is not None else None,
            "objectType": obj.get("objectType"),
            "thumbnails": [ActivityObjectAttachmentsInnerThumbnailsInner.from_dict(_item) for _item in obj["thumbnails"]] if obj.get("thumbnails") is not None else None,
            "url": obj.get("url")
        })
        return _obj



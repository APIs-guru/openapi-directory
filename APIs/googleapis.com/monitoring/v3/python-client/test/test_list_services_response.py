# coding: utf-8

"""
    Cloud Monitoring API

    Manages your Cloud Monitoring data and configurations.

    The version of the OpenAPI document: v3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.list_services_response import ListServicesResponse

class TestListServicesResponse(unittest.TestCase):
    """ListServicesResponse unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> ListServicesResponse:
        """Test ListServicesResponse
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `ListServicesResponse`
        """
        model = ListServicesResponse()
        if include_optional:
            return ListServicesResponse(
                next_page_token = '',
                services = [
                    openapi_client.models.service.Service(
                        app_engine = openapi_client.models.app_engine.AppEngine(
                            module_id = '', ), 
                        basic_service = openapi_client.models.basic_service.BasicService(
                            service_labels = {
                                'key' : ''
                                }, 
                            service_type = '', ), 
                        cloud_endpoints = openapi_client.models.cloud_endpoints.CloudEndpoints(
                            service = '', ), 
                        cloud_run = openapi_client.models.cloud_run.CloudRun(
                            location = '', 
                            service_name = '', ), 
                        cluster_istio = openapi_client.models.cluster_istio.ClusterIstio(
                            cluster_name = '', 
                            location = '', 
                            service_name = '', 
                            service_namespace = '', ), 
                        custom = openapi_client.models.custom.Custom(), 
                        display_name = '', 
                        gke_namespace = openapi_client.models.gke_namespace.GkeNamespace(
                            cluster_name = '', 
                            location = '', 
                            namespace_name = '', 
                            project_id = '', ), 
                        gke_service = openapi_client.models.gke_service.GkeService(
                            cluster_name = '', 
                            location = '', 
                            namespace_name = '', 
                            project_id = '', 
                            service_name = '', ), 
                        gke_workload = openapi_client.models.gke_workload.GkeWorkload(
                            cluster_name = '', 
                            location = '', 
                            namespace_name = '', 
                            project_id = '', 
                            top_level_controller_name = '', 
                            top_level_controller_type = '', ), 
                        istio_canonical_service = openapi_client.models.istio_canonical_service.IstioCanonicalService(
                            canonical_service = '', 
                            canonical_service_namespace = '', 
                            mesh_uid = '', ), 
                        mesh_istio = openapi_client.models.mesh_istio.MeshIstio(
                            mesh_uid = '', 
                            service_name = '', 
                            service_namespace = '', ), 
                        name = '', 
                        telemetry = openapi_client.models.telemetry.Telemetry(
                            resource_name = '', ), 
                        user_labels = {
                            'key' : ''
                            }, )
                    ]
            )
        else:
            return ListServicesResponse(
        )
        """

    def testListServicesResponse(self):
        """Test ListServicesResponse"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

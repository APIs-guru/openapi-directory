# coding: utf-8

"""
    Cloud Monitoring API

    Manages your Cloud Monitoring data and configurations.

    The version of the OpenAPI document: v3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.create_time_series_request import CreateTimeSeriesRequest

class TestCreateTimeSeriesRequest(unittest.TestCase):
    """CreateTimeSeriesRequest unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> CreateTimeSeriesRequest:
        """Test CreateTimeSeriesRequest
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `CreateTimeSeriesRequest`
        """
        model = CreateTimeSeriesRequest()
        if include_optional:
            return CreateTimeSeriesRequest(
                time_series = [
                    openapi_client.models.time_series.TimeSeries(
                        metadata = openapi_client.models.monitored_resource_metadata.MonitoredResourceMetadata(
                            system_labels = {
                                'key' : null
                                }, 
                            user_labels = {
                                'key' : ''
                                }, ), 
                        metric = openapi_client.models.metric.Metric(
                            labels = {
                                'key' : ''
                                }, 
                            type = '', ), 
                        metric_kind = 'METRIC_KIND_UNSPECIFIED', 
                        points = [
                            openapi_client.models.point.Point(
                                interval = openapi_client.models.time_interval.TimeInterval(
                                    end_time = '', 
                                    start_time = '', ), 
                                value = openapi_client.models.typed_value.TypedValue(
                                    bool_value = True, 
                                    distribution_value = openapi_client.models.distribution.Distribution(
                                        bucket_counts = [
                                            ''
                                            ], 
                                        bucket_options = openapi_client.models.bucket_options.BucketOptions(
                                            explicit_buckets = openapi_client.models.explicit.Explicit(
                                                bounds = [
                                                    1.337
                                                    ], ), 
                                            exponential_buckets = openapi_client.models.exponential.Exponential(
                                                growth_factor = 1.337, 
                                                num_finite_buckets = 56, 
                                                scale = 1.337, ), 
                                            linear_buckets = openapi_client.models.linear.Linear(
                                                num_finite_buckets = 56, 
                                                offset = 1.337, 
                                                width = 1.337, ), ), 
                                        count = '', 
                                        exemplars = [
                                            openapi_client.models.exemplar.Exemplar(
                                                attachments = [
                                                    {
                                                        'key' : null
                                                        }
                                                    ], 
                                                timestamp = '', )
                                            ], 
                                        mean = 1.337, 
                                        range = openapi_client.models.range.Range(
                                            max = 1.337, 
                                            min = 1.337, ), 
                                        sum_of_squared_deviation = 1.337, ), 
                                    double_value = 1.337, 
                                    int64_value = '', 
                                    string_value = '', ), )
                            ], 
                        resource = openapi_client.models.monitored_resource.MonitoredResource(
                            type = '', ), 
                        unit = '', 
                        value_type = 'VALUE_TYPE_UNSPECIFIED', )
                    ]
            )
        else:
            return CreateTimeSeriesRequest(
        )
        """

    def testCreateTimeSeriesRequest(self):
        """Test CreateTimeSeriesRequest"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

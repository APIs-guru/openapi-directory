# coding: utf-8

"""
    Cloud Monitoring API

    Manages your Cloud Monitoring data and configurations.

    The version of the OpenAPI document: v3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.alert_policy import AlertPolicy

class TestAlertPolicy(unittest.TestCase):
    """AlertPolicy unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> AlertPolicy:
        """Test AlertPolicy
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `AlertPolicy`
        """
        model = AlertPolicy()
        if include_optional:
            return AlertPolicy(
                alert_strategy = openapi_client.models.alert_strategy.AlertStrategy(
                    auto_close = '', 
                    notification_channel_strategy = [
                        openapi_client.models.notification_channel_strategy.NotificationChannelStrategy(
                            notification_channel_names = [
                                ''
                                ], 
                            renotify_interval = '', )
                        ], 
                    notification_rate_limit = openapi_client.models.notification_rate_limit.NotificationRateLimit(
                        period = '', ), ),
                combiner = 'COMBINE_UNSPECIFIED',
                conditions = [
                    openapi_client.models.condition.Condition(
                        condition_absent = openapi_client.models.metric_absence.MetricAbsence(
                            aggregations = [
                                openapi_client.models.aggregation.Aggregation(
                                    alignment_period = '', 
                                    cross_series_reducer = 'REDUCE_NONE', 
                                    group_by_fields = [
                                        ''
                                        ], 
                                    per_series_aligner = 'ALIGN_NONE', )
                                ], 
                            duration = '', 
                            filter = '', 
                            trigger = openapi_client.models.trigger.Trigger(
                                count = 56, 
                                percent = 1.337, ), ), 
                        condition_matched_log = openapi_client.models.log_match.LogMatch(
                            filter = '', 
                            label_extractors = {
                                'key' : ''
                                }, ), 
                        condition_monitoring_query_language = openapi_client.models.monitoring_query_language_condition.MonitoringQueryLanguageCondition(
                            duration = '', 
                            evaluation_missing_data = 'EVALUATION_MISSING_DATA_UNSPECIFIED', 
                            query = '', ), 
                        condition_prometheus_query_language = openapi_client.models.prometheus_query_language_condition.PrometheusQueryLanguageCondition(
                            alert_rule = '', 
                            duration = '', 
                            evaluation_interval = '', 
                            labels = {
                                'key' : ''
                                }, 
                            query = '', 
                            rule_group = '', ), 
                        condition_threshold = openapi_client.models.metric_threshold.MetricThreshold(
                            comparison = 'COMPARISON_UNSPECIFIED', 
                            denominator_aggregations = [
                                openapi_client.models.aggregation.Aggregation(
                                    alignment_period = '', 
                                    cross_series_reducer = 'REDUCE_NONE', 
                                    per_series_aligner = 'ALIGN_NONE', )
                                ], 
                            denominator_filter = '', 
                            duration = '', 
                            evaluation_missing_data = 'EVALUATION_MISSING_DATA_UNSPECIFIED', 
                            filter = '', 
                            forecast_options = openapi_client.models.forecast_options.ForecastOptions(
                                forecast_horizon = '', ), 
                            threshold_value = 1.337, ), 
                        display_name = '', 
                        name = '', )
                    ],
                creation_record = openapi_client.models.mutation_record.MutationRecord(
                    mutate_time = '', 
                    mutated_by = '', ),
                display_name = '',
                documentation = openapi_client.models.documentation.Documentation(
                    content = '', 
                    mime_type = '', 
                    subject = '', ),
                enabled = True,
                mutation_record = openapi_client.models.mutation_record.MutationRecord(
                    mutate_time = '', 
                    mutated_by = '', ),
                name = '',
                notification_channels = [
                    ''
                    ],
                severity = 'SEVERITY_UNSPECIFIED',
                user_labels = {
                    'key' : ''
                    },
                validity = openapi_client.models.status.Status(
                    code = 56, 
                    details = [
                        {
                            'key' : null
                            }
                        ], 
                    message = '', )
            )
        else:
            return AlertPolicy(
        )
        """

    def testAlertPolicy(self):
        """Test AlertPolicy"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

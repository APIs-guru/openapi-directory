# coding: utf-8

"""
    Cloud Monitoring API

    Manages your Cloud Monitoring data and configurations.

    The version of the OpenAPI document: v3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.list_service_level_objectives_response import ListServiceLevelObjectivesResponse

class TestListServiceLevelObjectivesResponse(unittest.TestCase):
    """ListServiceLevelObjectivesResponse unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> ListServiceLevelObjectivesResponse:
        """Test ListServiceLevelObjectivesResponse
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `ListServiceLevelObjectivesResponse`
        """
        model = ListServiceLevelObjectivesResponse()
        if include_optional:
            return ListServiceLevelObjectivesResponse(
                next_page_token = '',
                service_level_objectives = [
                    openapi_client.models.service_level_objective.ServiceLevelObjective(
                        calendar_period = 'CALENDAR_PERIOD_UNSPECIFIED', 
                        display_name = '', 
                        goal = 1.337, 
                        name = '', 
                        rolling_period = '', 
                        service_level_indicator = openapi_client.models.service_level_indicator.ServiceLevelIndicator(
                            basic_sli = openapi_client.models.basic_sli.BasicSli(
                                availability = openapi_client.models.availability.availability(), 
                                latency = openapi_client.models.latency_criteria.LatencyCriteria(
                                    threshold = '', ), 
                                location = [
                                    ''
                                    ], 
                                method = [
                                    ''
                                    ], 
                                version = [
                                    ''
                                    ], ), 
                            request_based = openapi_client.models.request_based_sli.RequestBasedSli(
                                distribution_cut = openapi_client.models.distribution_cut.DistributionCut(
                                    distribution_filter = '', 
                                    range = openapi_client.models.google_monitoring_v3_range.GoogleMonitoringV3Range(
                                        max = 1.337, 
                                        min = 1.337, ), ), 
                                good_total_ratio = openapi_client.models.time_series_ratio.TimeSeriesRatio(
                                    bad_service_filter = '', 
                                    good_service_filter = '', 
                                    total_service_filter = '', ), ), 
                            windows_based = openapi_client.models.windows_based_sli.WindowsBasedSli(
                                good_bad_metric_filter = '', 
                                good_total_ratio_threshold = openapi_client.models.performance_threshold.PerformanceThreshold(
                                    basic_sli_performance = openapi_client.models.basic_sli.BasicSli(
                                        availability = openapi_client.models.availability.availability(), ), 
                                    performance = openapi_client.models.request_based_sli.RequestBasedSli(), 
                                    threshold = 1.337, ), 
                                metric_mean_in_range = openapi_client.models.metric_range.MetricRange(
                                    time_series = '', ), 
                                metric_sum_in_range = openapi_client.models.metric_range.MetricRange(
                                    time_series = '', ), 
                                window_period = '', ), ), 
                        user_labels = {
                            'key' : ''
                            }, )
                    ]
            )
        else:
            return ListServiceLevelObjectivesResponse(
        )
        """

    def testListServiceLevelObjectivesResponse(self):
        """Test ListServiceLevelObjectivesResponse"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

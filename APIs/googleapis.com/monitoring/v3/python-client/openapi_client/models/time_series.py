# coding: utf-8

"""
    Cloud Monitoring API

    Manages your Cloud Monitoring data and configurations.

    The version of the OpenAPI document: v3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.metric import Metric
from openapi_client.models.monitored_resource import MonitoredResource
from openapi_client.models.monitored_resource_metadata import MonitoredResourceMetadata
from openapi_client.models.point import Point
from typing import Optional, Set
from typing_extensions import Self

class TimeSeries(BaseModel):
    """
    A collection of data points that describes the time-varying values of a metric. A time series is identified by a combination of a fully-specified monitored resource and a fully-specified metric. This type is used for both listing and creating time series.
    """ # noqa: E501
    metadata: Optional[MonitoredResourceMetadata] = None
    metric: Optional[Metric] = None
    metric_kind: Optional[StrictStr] = Field(default=None, description="The metric kind of the time series. When listing time series, this metric kind might be different from the metric kind of the associated metric if this time series is an alignment or reduction of other time series.When creating a time series, this field is optional. If present, it must be the same as the metric kind of the associated metric. If the associated metric's descriptor must be auto-created, then this field specifies the metric kind of the new descriptor and must be either GAUGE (the default) or CUMULATIVE.", alias="metricKind")
    points: Optional[List[Point]] = Field(default=None, description="The data points of this time series. When listing time series, points are returned in reverse time order.When creating a time series, this field must contain exactly one point and the point's type must be the same as the value type of the associated metric. If the associated metric's descriptor must be auto-created, then the value type of the descriptor is determined by the point's type, which must be BOOL, INT64, DOUBLE, or DISTRIBUTION.")
    resource: Optional[MonitoredResource] = None
    unit: Optional[StrictStr] = Field(default=None, description="The units in which the metric value is reported. It is only applicable if the value_type is INT64, DOUBLE, or DISTRIBUTION. The unit defines the representation of the stored metric values.")
    value_type: Optional[StrictStr] = Field(default=None, description="The value type of the time series. When listing time series, this value type might be different from the value type of the associated metric if this time series is an alignment or reduction of other time series.When creating a time series, this field is optional. If present, it must be the same as the type of the data in the points field.", alias="valueType")
    __properties: ClassVar[List[str]] = ["metadata", "metric", "metricKind", "points", "resource", "unit", "valueType"]

    @field_validator('metric_kind')
    def metric_kind_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['METRIC_KIND_UNSPECIFIED', 'GAUGE', 'DELTA', 'CUMULATIVE']):
            raise ValueError("must be one of enum values ('METRIC_KIND_UNSPECIFIED', 'GAUGE', 'DELTA', 'CUMULATIVE')")
        return value

    @field_validator('value_type')
    def value_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['VALUE_TYPE_UNSPECIFIED', 'BOOL', 'INT64', 'DOUBLE', 'STRING', 'DISTRIBUTION', 'MONEY']):
            raise ValueError("must be one of enum values ('VALUE_TYPE_UNSPECIFIED', 'BOOL', 'INT64', 'DOUBLE', 'STRING', 'DISTRIBUTION', 'MONEY')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of TimeSeries from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of metadata
        if self.metadata:
            _dict['metadata'] = self.metadata.to_dict()
        # override the default output from pydantic by calling `to_dict()` of metric
        if self.metric:
            _dict['metric'] = self.metric.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in points (list)
        _items = []
        if self.points:
            for _item_points in self.points:
                if _item_points:
                    _items.append(_item_points.to_dict())
            _dict['points'] = _items
        # override the default output from pydantic by calling `to_dict()` of resource
        if self.resource:
            _dict['resource'] = self.resource.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of TimeSeries from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "metadata": MonitoredResourceMetadata.from_dict(obj["metadata"]) if obj.get("metadata") is not None else None,
            "metric": Metric.from_dict(obj["metric"]) if obj.get("metric") is not None else None,
            "metricKind": obj.get("metricKind"),
            "points": [Point.from_dict(_item) for _item in obj["points"]] if obj.get("points") is not None else None,
            "resource": MonitoredResource.from_dict(obj["resource"]) if obj.get("resource") is not None else None,
            "unit": obj.get("unit"),
            "valueType": obj.get("valueType")
        })
        return _obj



# coding: utf-8

"""
    Cloud Monitoring API

    Manages your Cloud Monitoring data and configurations.

    The version of the OpenAPI document: v3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.json_path_matcher import JsonPathMatcher
from typing import Optional, Set
from typing_extensions import Self

class ContentMatcher(BaseModel):
    """
    Optional. Used to perform content matching. This allows matching based on substrings and regular expressions, together with their negations. Only the first 4 MB of an HTTP or HTTPS check's response (and the first 1 MB of a TCP check's response) are examined for purposes of content matching.
    """ # noqa: E501
    content: Optional[StrictStr] = Field(default=None, description="String, regex or JSON content to match. Maximum 1024 bytes. An empty content string indicates no content matching is to be performed.")
    json_path_matcher: Optional[JsonPathMatcher] = Field(default=None, alias="jsonPathMatcher")
    matcher: Optional[StrictStr] = Field(default=None, description="The type of content matcher that will be applied to the server output, compared to the content string when the check is run.")
    __properties: ClassVar[List[str]] = ["content", "jsonPathMatcher", "matcher"]

    @field_validator('matcher')
    def matcher_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['CONTENT_MATCHER_OPTION_UNSPECIFIED', 'CONTAINS_STRING', 'NOT_CONTAINS_STRING', 'MATCHES_REGEX', 'NOT_MATCHES_REGEX', 'MATCHES_JSON_PATH', 'NOT_MATCHES_JSON_PATH']):
            raise ValueError("must be one of enum values ('CONTENT_MATCHER_OPTION_UNSPECIFIED', 'CONTAINS_STRING', 'NOT_CONTAINS_STRING', 'MATCHES_REGEX', 'NOT_MATCHES_REGEX', 'MATCHES_JSON_PATH', 'NOT_MATCHES_JSON_PATH')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ContentMatcher from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of json_path_matcher
        if self.json_path_matcher:
            _dict['jsonPathMatcher'] = self.json_path_matcher.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ContentMatcher from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "content": obj.get("content"),
            "jsonPathMatcher": JsonPathMatcher.from_dict(obj["jsonPathMatcher"]) if obj.get("jsonPathMatcher") is not None else None,
            "matcher": obj.get("matcher")
        })
        return _obj



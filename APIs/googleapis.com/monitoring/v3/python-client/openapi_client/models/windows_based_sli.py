# coding: utf-8

"""
    Cloud Monitoring API

    Manages your Cloud Monitoring data and configurations.

    The version of the OpenAPI document: v3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.metric_range import MetricRange
from openapi_client.models.performance_threshold import PerformanceThreshold
from typing import Optional, Set
from typing_extensions import Self

class WindowsBasedSli(BaseModel):
    """
    A WindowsBasedSli defines good_service as the count of time windows for which the provided service was of good quality. Criteria for determining if service was good are embedded in the window_criterion.
    """ # noqa: E501
    good_bad_metric_filter: Optional[StrictStr] = Field(default=None, description="A monitoring filter (https://cloud.google.com/monitoring/api/v3/filters) specifying a TimeSeries with ValueType = BOOL. The window is good if any true values appear in the window.", alias="goodBadMetricFilter")
    good_total_ratio_threshold: Optional[PerformanceThreshold] = Field(default=None, alias="goodTotalRatioThreshold")
    metric_mean_in_range: Optional[MetricRange] = Field(default=None, alias="metricMeanInRange")
    metric_sum_in_range: Optional[MetricRange] = Field(default=None, alias="metricSumInRange")
    window_period: Optional[StrictStr] = Field(default=None, description="Duration over which window quality is evaluated. Must be an integer fraction of a day and at least 60s.", alias="windowPeriod")
    __properties: ClassVar[List[str]] = ["goodBadMetricFilter", "goodTotalRatioThreshold", "metricMeanInRange", "metricSumInRange", "windowPeriod"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of WindowsBasedSli from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of good_total_ratio_threshold
        if self.good_total_ratio_threshold:
            _dict['goodTotalRatioThreshold'] = self.good_total_ratio_threshold.to_dict()
        # override the default output from pydantic by calling `to_dict()` of metric_mean_in_range
        if self.metric_mean_in_range:
            _dict['metricMeanInRange'] = self.metric_mean_in_range.to_dict()
        # override the default output from pydantic by calling `to_dict()` of metric_sum_in_range
        if self.metric_sum_in_range:
            _dict['metricSumInRange'] = self.metric_sum_in_range.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of WindowsBasedSli from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "goodBadMetricFilter": obj.get("goodBadMetricFilter"),
            "goodTotalRatioThreshold": PerformanceThreshold.from_dict(obj["goodTotalRatioThreshold"]) if obj.get("goodTotalRatioThreshold") is not None else None,
            "metricMeanInRange": MetricRange.from_dict(obj["metricMeanInRange"]) if obj.get("metricMeanInRange") is not None else None,
            "metricSumInRange": MetricRange.from_dict(obj["metricSumInRange"]) if obj.get("metricSumInRange") is not None else None,
            "windowPeriod": obj.get("windowPeriod")
        })
        return _obj



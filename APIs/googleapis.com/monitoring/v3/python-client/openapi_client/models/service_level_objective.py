# coding: utf-8

"""
    Cloud Monitoring API

    Manages your Cloud Monitoring data and configurations.

    The version of the OpenAPI document: v3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from openapi_client.models.service_level_indicator import ServiceLevelIndicator
from typing import Optional, Set
from typing_extensions import Self

class ServiceLevelObjective(BaseModel):
    """
    A Service-Level Objective (SLO) describes a level of desired good service. It consists of a service-level indicator (SLI), a performance goal, and a period over which the objective is to be evaluated against that goal. The SLO can use SLIs defined in a number of different manners. Typical SLOs might include \"99% of requests in each rolling week have latency below 200 milliseconds\" or \"99.5% of requests in each calendar month return successfully.\"
    """ # noqa: E501
    calendar_period: Optional[StrictStr] = Field(default=None, description="A calendar period, semantically \"since the start of the current \". At this time, only DAY, WEEK, FORTNIGHT, and MONTH are supported.", alias="calendarPeriod")
    display_name: Optional[StrictStr] = Field(default=None, description="Name used for UI elements listing this SLO.", alias="displayName")
    goal: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The fraction of service that must be good in order for this objective to be met. 0 < goal <= 0.999.")
    name: Optional[StrictStr] = Field(default=None, description="Resource name for this ServiceLevelObjective. The format is: projects/[PROJECT_ID_OR_NUMBER]/services/[SERVICE_ID]/serviceLevelObjectives/[SLO_NAME] ")
    rolling_period: Optional[StrictStr] = Field(default=None, description="A rolling time period, semantically \"in the past \". Must be an integer multiple of 1 day no larger than 30 days.", alias="rollingPeriod")
    service_level_indicator: Optional[ServiceLevelIndicator] = Field(default=None, alias="serviceLevelIndicator")
    user_labels: Optional[Dict[str, StrictStr]] = Field(default=None, description="Labels which have been used to annotate the service-level objective. Label keys must start with a letter. Label keys and values may contain lowercase letters, numbers, underscores, and dashes. Label keys and values have a maximum length of 63 characters, and must be less than 128 bytes in size. Up to 64 label entries may be stored. For labels which do not have a semantic value, the empty string may be supplied for the label value.", alias="userLabels")
    __properties: ClassVar[List[str]] = ["calendarPeriod", "displayName", "goal", "name", "rollingPeriod", "serviceLevelIndicator", "userLabels"]

    @field_validator('calendar_period')
    def calendar_period_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['CALENDAR_PERIOD_UNSPECIFIED', 'DAY', 'WEEK', 'FORTNIGHT', 'MONTH', 'QUARTER', 'HALF', 'YEAR']):
            raise ValueError("must be one of enum values ('CALENDAR_PERIOD_UNSPECIFIED', 'DAY', 'WEEK', 'FORTNIGHT', 'MONTH', 'QUARTER', 'HALF', 'YEAR')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ServiceLevelObjective from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of service_level_indicator
        if self.service_level_indicator:
            _dict['serviceLevelIndicator'] = self.service_level_indicator.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ServiceLevelObjective from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "calendarPeriod": obj.get("calendarPeriod"),
            "displayName": obj.get("displayName"),
            "goal": obj.get("goal"),
            "name": obj.get("name"),
            "rollingPeriod": obj.get("rollingPeriod"),
            "serviceLevelIndicator": ServiceLevelIndicator.from_dict(obj["serviceLevelIndicator"]) if obj.get("serviceLevelIndicator") is not None else None,
            "userLabels": obj.get("userLabels")
        })
        return _obj



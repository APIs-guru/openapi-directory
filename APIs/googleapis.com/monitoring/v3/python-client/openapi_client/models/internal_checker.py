# coding: utf-8

"""
    Cloud Monitoring API

    Manages your Cloud Monitoring data and configurations.

    The version of the OpenAPI document: v3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class InternalChecker(BaseModel):
    """
    An internal checker allows Uptime checks to run on private/internal GCP resources.
    """ # noqa: E501
    display_name: Optional[StrictStr] = Field(default=None, description="The checker's human-readable name. The display name should be unique within a Cloud Monitoring Metrics Scope in order to make it easier to identify; however, uniqueness is not enforced.", alias="displayName")
    gcp_zone: Optional[StrictStr] = Field(default=None, description="The GCP zone the Uptime check should egress from. Only respected for internal Uptime checks, where internal_network is specified.", alias="gcpZone")
    name: Optional[StrictStr] = Field(default=None, description="A unique resource name for this InternalChecker. The format is: projects/[PROJECT_ID_OR_NUMBER]/internalCheckers/[INTERNAL_CHECKER_ID] [PROJECT_ID_OR_NUMBER] is the Cloud Monitoring Metrics Scope project for the Uptime check config associated with the internal checker.")
    network: Optional[StrictStr] = Field(default=None, description="The GCP VPC network (https://cloud.google.com/vpc/docs/vpc) where the internal resource lives (ex: \"default\").")
    peer_project_id: Optional[StrictStr] = Field(default=None, description="The GCP project ID where the internal checker lives. Not necessary the same as the Metrics Scope project.", alias="peerProjectId")
    state: Optional[StrictStr] = Field(default=None, description="The current operational state of the internal checker.")
    __properties: ClassVar[List[str]] = ["displayName", "gcpZone", "name", "network", "peerProjectId", "state"]

    @field_validator('state')
    def state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['UNSPECIFIED', 'CREATING', 'RUNNING']):
            raise ValueError("must be one of enum values ('UNSPECIFIED', 'CREATING', 'RUNNING')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of InternalChecker from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of InternalChecker from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "displayName": obj.get("displayName"),
            "gcpZone": obj.get("gcpZone"),
            "name": obj.get("name"),
            "network": obj.get("network"),
            "peerProjectId": obj.get("peerProjectId"),
            "state": obj.get("state")
        })
        return _obj



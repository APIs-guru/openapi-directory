# coding: utf-8

"""
    Cloud Monitoring API

    Manages your Cloud Monitoring data and configurations.

    The version of the OpenAPI document: v3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.app_engine import AppEngine
from openapi_client.models.basic_service import BasicService
from openapi_client.models.cloud_endpoints import CloudEndpoints
from openapi_client.models.cloud_run import CloudRun
from openapi_client.models.cluster_istio import ClusterIstio
from openapi_client.models.gke_namespace import GkeNamespace
from openapi_client.models.gke_service import GkeService
from openapi_client.models.gke_workload import GkeWorkload
from openapi_client.models.istio_canonical_service import IstioCanonicalService
from openapi_client.models.mesh_istio import MeshIstio
from openapi_client.models.telemetry import Telemetry
from typing import Optional, Set
from typing_extensions import Self

class Service(BaseModel):
    """
    A Service is a discrete, autonomous, and network-accessible unit, designed to solve an individual concern (Wikipedia (https://en.wikipedia.org/wiki/Service-orientation)). In Cloud Monitoring, a Service acts as the root resource under which operational aspects of the service are accessible.
    """ # noqa: E501
    app_engine: Optional[AppEngine] = Field(default=None, alias="appEngine")
    basic_service: Optional[BasicService] = Field(default=None, alias="basicService")
    cloud_endpoints: Optional[CloudEndpoints] = Field(default=None, alias="cloudEndpoints")
    cloud_run: Optional[CloudRun] = Field(default=None, alias="cloudRun")
    cluster_istio: Optional[ClusterIstio] = Field(default=None, alias="clusterIstio")
    custom: Optional[Dict[str, Any]] = Field(default=None, description="Use a custom service to designate a service that you want to monitor when none of the other service types (like App Engine, Cloud Run, or a GKE type) matches your intended service.")
    display_name: Optional[StrictStr] = Field(default=None, description="Name used for UI elements listing this Service.", alias="displayName")
    gke_namespace: Optional[GkeNamespace] = Field(default=None, alias="gkeNamespace")
    gke_service: Optional[GkeService] = Field(default=None, alias="gkeService")
    gke_workload: Optional[GkeWorkload] = Field(default=None, alias="gkeWorkload")
    istio_canonical_service: Optional[IstioCanonicalService] = Field(default=None, alias="istioCanonicalService")
    mesh_istio: Optional[MeshIstio] = Field(default=None, alias="meshIstio")
    name: Optional[StrictStr] = Field(default=None, description="Resource name for this Service. The format is: projects/[PROJECT_ID_OR_NUMBER]/services/[SERVICE_ID] ")
    telemetry: Optional[Telemetry] = None
    user_labels: Optional[Dict[str, StrictStr]] = Field(default=None, description="Labels which have been used to annotate the service. Label keys must start with a letter. Label keys and values may contain lowercase letters, numbers, underscores, and dashes. Label keys and values have a maximum length of 63 characters, and must be less than 128 bytes in size. Up to 64 label entries may be stored. For labels which do not have a semantic value, the empty string may be supplied for the label value.", alias="userLabels")
    __properties: ClassVar[List[str]] = ["appEngine", "basicService", "cloudEndpoints", "cloudRun", "clusterIstio", "custom", "displayName", "gkeNamespace", "gkeService", "gkeWorkload", "istioCanonicalService", "meshIstio", "name", "telemetry", "userLabels"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Service from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of app_engine
        if self.app_engine:
            _dict['appEngine'] = self.app_engine.to_dict()
        # override the default output from pydantic by calling `to_dict()` of basic_service
        if self.basic_service:
            _dict['basicService'] = self.basic_service.to_dict()
        # override the default output from pydantic by calling `to_dict()` of cloud_endpoints
        if self.cloud_endpoints:
            _dict['cloudEndpoints'] = self.cloud_endpoints.to_dict()
        # override the default output from pydantic by calling `to_dict()` of cloud_run
        if self.cloud_run:
            _dict['cloudRun'] = self.cloud_run.to_dict()
        # override the default output from pydantic by calling `to_dict()` of cluster_istio
        if self.cluster_istio:
            _dict['clusterIstio'] = self.cluster_istio.to_dict()
        # override the default output from pydantic by calling `to_dict()` of gke_namespace
        if self.gke_namespace:
            _dict['gkeNamespace'] = self.gke_namespace.to_dict()
        # override the default output from pydantic by calling `to_dict()` of gke_service
        if self.gke_service:
            _dict['gkeService'] = self.gke_service.to_dict()
        # override the default output from pydantic by calling `to_dict()` of gke_workload
        if self.gke_workload:
            _dict['gkeWorkload'] = self.gke_workload.to_dict()
        # override the default output from pydantic by calling `to_dict()` of istio_canonical_service
        if self.istio_canonical_service:
            _dict['istioCanonicalService'] = self.istio_canonical_service.to_dict()
        # override the default output from pydantic by calling `to_dict()` of mesh_istio
        if self.mesh_istio:
            _dict['meshIstio'] = self.mesh_istio.to_dict()
        # override the default output from pydantic by calling `to_dict()` of telemetry
        if self.telemetry:
            _dict['telemetry'] = self.telemetry.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Service from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "appEngine": AppEngine.from_dict(obj["appEngine"]) if obj.get("appEngine") is not None else None,
            "basicService": BasicService.from_dict(obj["basicService"]) if obj.get("basicService") is not None else None,
            "cloudEndpoints": CloudEndpoints.from_dict(obj["cloudEndpoints"]) if obj.get("cloudEndpoints") is not None else None,
            "cloudRun": CloudRun.from_dict(obj["cloudRun"]) if obj.get("cloudRun") is not None else None,
            "clusterIstio": ClusterIstio.from_dict(obj["clusterIstio"]) if obj.get("clusterIstio") is not None else None,
            "custom": obj.get("custom"),
            "displayName": obj.get("displayName"),
            "gkeNamespace": GkeNamespace.from_dict(obj["gkeNamespace"]) if obj.get("gkeNamespace") is not None else None,
            "gkeService": GkeService.from_dict(obj["gkeService"]) if obj.get("gkeService") is not None else None,
            "gkeWorkload": GkeWorkload.from_dict(obj["gkeWorkload"]) if obj.get("gkeWorkload") is not None else None,
            "istioCanonicalService": IstioCanonicalService.from_dict(obj["istioCanonicalService"]) if obj.get("istioCanonicalService") is not None else None,
            "meshIstio": MeshIstio.from_dict(obj["meshIstio"]) if obj.get("meshIstio") is not None else None,
            "name": obj.get("name"),
            "telemetry": Telemetry.from_dict(obj["telemetry"]) if obj.get("telemetry") is not None else None,
            "userLabels": obj.get("userLabels")
        })
        return _obj



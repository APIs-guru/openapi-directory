# coding: utf-8

"""
    Cloud Monitoring API

    Manages your Cloud Monitoring data and configurations.

    The version of the OpenAPI document: v3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.label_descriptor import LabelDescriptor
from typing import Optional, Set
from typing_extensions import Self

class NotificationChannelDescriptor(BaseModel):
    """
    A description of a notification channel. The descriptor includes the properties of the channel and the set of labels or fields that must be specified to configure channels of a given type.
    """ # noqa: E501
    description: Optional[StrictStr] = Field(default=None, description="A human-readable description of the notification channel type. The description may include a description of the properties of the channel and pointers to external documentation.")
    display_name: Optional[StrictStr] = Field(default=None, description="A human-readable name for the notification channel type. This form of the name is suitable for a user interface.", alias="displayName")
    labels: Optional[List[LabelDescriptor]] = Field(default=None, description="The set of labels that must be defined to identify a particular channel of the corresponding type. Each label includes a description for how that field should be populated.")
    launch_stage: Optional[StrictStr] = Field(default=None, description="The product launch stage for channels of this type.", alias="launchStage")
    name: Optional[StrictStr] = Field(default=None, description="The full REST resource name for this descriptor. The format is: projects/[PROJECT_ID_OR_NUMBER]/notificationChannelDescriptors/[TYPE] In the above, [TYPE] is the value of the type field.")
    supported_tiers: Optional[List[StrictStr]] = Field(default=None, description="The tiers that support this notification channel; the project service tier must be one of the supported_tiers.", alias="supportedTiers")
    type: Optional[StrictStr] = Field(default=None, description="The type of notification channel, such as \"email\" and \"sms\". To view the full list of channels, see Channel descriptors (https://cloud.google.com/monitoring/alerts/using-channels-api#ncd). Notification channel types are globally unique.")
    __properties: ClassVar[List[str]] = ["description", "displayName", "labels", "launchStage", "name", "supportedTiers", "type"]

    @field_validator('launch_stage')
    def launch_stage_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['LAUNCH_STAGE_UNSPECIFIED', 'UNIMPLEMENTED', 'PRELAUNCH', 'EARLY_ACCESS', 'ALPHA', 'BETA', 'GA', 'DEPRECATED']):
            raise ValueError("must be one of enum values ('LAUNCH_STAGE_UNSPECIFIED', 'UNIMPLEMENTED', 'PRELAUNCH', 'EARLY_ACCESS', 'ALPHA', 'BETA', 'GA', 'DEPRECATED')")
        return value

    @field_validator('supported_tiers')
    def supported_tiers_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        for i in value:
            if i not in set(['SERVICE_TIER_UNSPECIFIED', 'SERVICE_TIER_BASIC', 'SERVICE_TIER_PREMIUM']):
                raise ValueError("each list item must be one of ('SERVICE_TIER_UNSPECIFIED', 'SERVICE_TIER_BASIC', 'SERVICE_TIER_PREMIUM')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of NotificationChannelDescriptor from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in labels (list)
        _items = []
        if self.labels:
            for _item_labels in self.labels:
                if _item_labels:
                    _items.append(_item_labels.to_dict())
            _dict['labels'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of NotificationChannelDescriptor from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "description": obj.get("description"),
            "displayName": obj.get("displayName"),
            "labels": [LabelDescriptor.from_dict(_item) for _item in obj["labels"]] if obj.get("labels") is not None else None,
            "launchStage": obj.get("launchStage"),
            "name": obj.get("name"),
            "supportedTiers": obj.get("supportedTiers"),
            "type": obj.get("type")
        })
        return _obj



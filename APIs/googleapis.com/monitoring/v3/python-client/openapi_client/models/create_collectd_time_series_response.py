# coding: utf-8

"""
    Cloud Monitoring API

    Manages your Cloud Monitoring data and configurations.

    The version of the OpenAPI document: v3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.collectd_payload_error import CollectdPayloadError
from openapi_client.models.create_time_series_summary import CreateTimeSeriesSummary
from typing import Optional, Set
from typing_extensions import Self

class CreateCollectdTimeSeriesResponse(BaseModel):
    """
    The CreateCollectdTimeSeries response.
    """ # noqa: E501
    payload_errors: Optional[List[CollectdPayloadError]] = Field(default=None, description="Records the error status for points that were not written due to an error in the request.Failed requests for which nothing is written will return an error response instead. Requests where data points were rejected by the backend will set summary instead.", alias="payloadErrors")
    summary: Optional[CreateTimeSeriesSummary] = None
    __properties: ClassVar[List[str]] = ["payloadErrors", "summary"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CreateCollectdTimeSeriesResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in payload_errors (list)
        _items = []
        if self.payload_errors:
            for _item_payload_errors in self.payload_errors:
                if _item_payload_errors:
                    _items.append(_item_payload_errors.to_dict())
            _dict['payloadErrors'] = _items
        # override the default output from pydantic by calling `to_dict()` of summary
        if self.summary:
            _dict['summary'] = self.summary.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CreateCollectdTimeSeriesResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "payloadErrors": [CollectdPayloadError.from_dict(_item) for _item in obj["payloadErrors"]] if obj.get("payloadErrors") is not None else None,
            "summary": CreateTimeSeriesSummary.from_dict(obj["summary"]) if obj.get("summary") is not None else None
        })
        return _obj



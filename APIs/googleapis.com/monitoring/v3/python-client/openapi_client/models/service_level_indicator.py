# coding: utf-8

"""
    Cloud Monitoring API

    Manages your Cloud Monitoring data and configurations.

    The version of the OpenAPI document: v3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.basic_sli import BasicSli
from openapi_client.models.request_based_sli import RequestBasedSli
from openapi_client.models.windows_based_sli import WindowsBasedSli
from typing import Optional, Set
from typing_extensions import Self

class ServiceLevelIndicator(BaseModel):
    """
    A Service-Level Indicator (SLI) describes the \"performance\" of a service. For some services, the SLI is well-defined. In such cases, the SLI can be described easily by referencing the well-known SLI and providing the needed parameters. Alternatively, a \"custom\" SLI can be defined with a query to the underlying metric store. An SLI is defined to be good_service / total_service over any queried time interval. The value of performance always falls into the range 0 <= performance <= 1. A custom SLI describes how to compute this ratio, whether this is by dividing values from a pair of time series, cutting a Distribution into good and bad counts, or counting time windows in which the service complies with a criterion. For separation of concerns, a single Service-Level Indicator measures performance for only one aspect of service quality, such as fraction of successful queries or fast-enough queries.
    """ # noqa: E501
    basic_sli: Optional[BasicSli] = Field(default=None, alias="basicSli")
    request_based: Optional[RequestBasedSli] = Field(default=None, alias="requestBased")
    windows_based: Optional[WindowsBasedSli] = Field(default=None, alias="windowsBased")
    __properties: ClassVar[List[str]] = ["basicSli", "requestBased", "windowsBased"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ServiceLevelIndicator from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of basic_sli
        if self.basic_sli:
            _dict['basicSli'] = self.basic_sli.to_dict()
        # override the default output from pydantic by calling `to_dict()` of request_based
        if self.request_based:
            _dict['requestBased'] = self.request_based.to_dict()
        # override the default output from pydantic by calling `to_dict()` of windows_based
        if self.windows_based:
            _dict['windowsBased'] = self.windows_based.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ServiceLevelIndicator from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "basicSli": BasicSli.from_dict(obj["basicSli"]) if obj.get("basicSli") is not None else None,
            "requestBased": RequestBasedSli.from_dict(obj["requestBased"]) if obj.get("requestBased") is not None else None,
            "windowsBased": WindowsBasedSli.from_dict(obj["windowsBased"]) if obj.get("windowsBased") is not None else None
        })
        return _obj



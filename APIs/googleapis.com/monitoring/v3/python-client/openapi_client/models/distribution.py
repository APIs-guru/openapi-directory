# coding: utf-8

"""
    Cloud Monitoring API

    Manages your Cloud Monitoring data and configurations.

    The version of the OpenAPI document: v3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from openapi_client.models.bucket_options import BucketOptions
from openapi_client.models.exemplar import Exemplar
from openapi_client.models.range import Range
from typing import Optional, Set
from typing_extensions import Self

class Distribution(BaseModel):
    """
    Distribution contains summary statistics for a population of values. It optionally contains a histogram representing the distribution of those values across a set of buckets.The summary statistics are the count, mean, sum of the squared deviation from the mean, the minimum, and the maximum of the set of population of values. The histogram is based on a sequence of buckets and gives a count of values that fall into each bucket. The boundaries of the buckets are given either explicitly or by formulas for buckets of fixed or exponentially increasing widths.Although it is not forbidden, it is generally a bad idea to include non-finite values (infinities or NaNs) in the population of values, as this will render the mean and sum_of_squared_deviation fields meaningless.
    """ # noqa: E501
    bucket_counts: Optional[List[StrictStr]] = Field(default=None, description="Required in the Cloud Monitoring API v3. The values for each bucket specified in bucket_options. The sum of the values in bucketCounts must equal the value in the count field of the Distribution object. The order of the bucket counts follows the numbering schemes described for the three bucket types. The underflow bucket has number 0; the finite buckets, if any, have numbers 1 through N-2; and the overflow bucket has number N-1. The size of bucket_counts must not be greater than N. If the size is less than N, then the remaining buckets are assigned values of zero.", alias="bucketCounts")
    bucket_options: Optional[BucketOptions] = Field(default=None, alias="bucketOptions")
    count: Optional[StrictStr] = Field(default=None, description="The number of values in the population. Must be non-negative. This value must equal the sum of the values in bucket_counts if a histogram is provided.")
    exemplars: Optional[List[Exemplar]] = Field(default=None, description="Must be in increasing order of value field.")
    mean: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The arithmetic mean of the values in the population. If count is zero then this field must be zero.")
    range: Optional[Range] = None
    sum_of_squared_deviation: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The sum of squared deviations from the mean of the values in the population. For values x_i this is: Sum[i=1..n]((x_i - mean)^2) Knuth, \"The Art of Computer Programming\", Vol. 2, page 232, 3rd edition describes Welford's method for accumulating this sum in one pass.If count is zero then this field must be zero.", alias="sumOfSquaredDeviation")
    __properties: ClassVar[List[str]] = ["bucketCounts", "bucketOptions", "count", "exemplars", "mean", "range", "sumOfSquaredDeviation"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Distribution from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of bucket_options
        if self.bucket_options:
            _dict['bucketOptions'] = self.bucket_options.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in exemplars (list)
        _items = []
        if self.exemplars:
            for _item_exemplars in self.exemplars:
                if _item_exemplars:
                    _items.append(_item_exemplars.to_dict())
            _dict['exemplars'] = _items
        # override the default output from pydantic by calling `to_dict()` of range
        if self.range:
            _dict['range'] = self.range.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Distribution from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "bucketCounts": obj.get("bucketCounts"),
            "bucketOptions": BucketOptions.from_dict(obj["bucketOptions"]) if obj.get("bucketOptions") is not None else None,
            "count": obj.get("count"),
            "exemplars": [Exemplar.from_dict(_item) for _item in obj["exemplars"]] if obj.get("exemplars") is not None else None,
            "mean": obj.get("mean"),
            "range": Range.from_dict(obj["range"]) if obj.get("range") is not None else None,
            "sumOfSquaredDeviation": obj.get("sumOfSquaredDeviation")
        })
        return _obj



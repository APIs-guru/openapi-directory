# coding: utf-8

"""
    Cloud Monitoring API

    Manages your Cloud Monitoring data and configurations.

    The version of the OpenAPI document: v3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class GkeWorkload(BaseModel):
    """
    A GKE Workload (Deployment, StatefulSet, etc). The field names correspond to the metadata labels on monitored resources that fall under a workload (for example, k8s_container or k8s_pod).
    """ # noqa: E501
    cluster_name: Optional[StrictStr] = Field(default=None, description="The name of the parent cluster.", alias="clusterName")
    location: Optional[StrictStr] = Field(default=None, description="The location of the parent cluster. This may be a zone or region.")
    namespace_name: Optional[StrictStr] = Field(default=None, description="The name of the parent namespace.", alias="namespaceName")
    project_id: Optional[StrictStr] = Field(default=None, description="Output only. The project this resource lives in. For legacy services migrated from the Custom type, this may be a distinct project from the one parenting the service itself.", alias="projectId")
    top_level_controller_name: Optional[StrictStr] = Field(default=None, description="The name of this workload.", alias="topLevelControllerName")
    top_level_controller_type: Optional[StrictStr] = Field(default=None, description="The type of this workload (for example, \"Deployment\" or \"DaemonSet\")", alias="topLevelControllerType")
    __properties: ClassVar[List[str]] = ["clusterName", "location", "namespaceName", "projectId", "topLevelControllerName", "topLevelControllerType"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GkeWorkload from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "project_id",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GkeWorkload from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "clusterName": obj.get("clusterName"),
            "location": obj.get("location"),
            "namespaceName": obj.get("namespaceName"),
            "projectId": obj.get("projectId"),
            "topLevelControllerName": obj.get("topLevelControllerName"),
            "topLevelControllerType": obj.get("topLevelControllerType")
        })
        return _obj



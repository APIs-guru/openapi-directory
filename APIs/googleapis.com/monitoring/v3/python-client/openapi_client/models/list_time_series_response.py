# coding: utf-8

"""
    Cloud Monitoring API

    Manages your Cloud Monitoring data and configurations.

    The version of the OpenAPI document: v3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.status import Status
from openapi_client.models.time_series import TimeSeries
from typing import Optional, Set
from typing_extensions import Self

class ListTimeSeriesResponse(BaseModel):
    """
    The ListTimeSeries response.
    """ # noqa: E501
    execution_errors: Optional[List[Status]] = Field(default=None, description="Query execution errors that may have caused the time series data returned to be incomplete.", alias="executionErrors")
    next_page_token: Optional[StrictStr] = Field(default=None, description="If there are more results than have been returned, then this field is set to a non-empty value. To see the additional results, use that value as page_token in the next call to this method.", alias="nextPageToken")
    time_series: Optional[List[TimeSeries]] = Field(default=None, description="One or more time series that match the filter included in the request.", alias="timeSeries")
    unit: Optional[StrictStr] = Field(default=None, description="The unit in which all time_series point values are reported. unit follows the UCUM format for units as seen in https://unitsofmeasure.org/ucum.html. If different time_series have different units (for example, because they come from different metric types, or a unit is absent), then unit will be \"{not_a_unit}\".")
    __properties: ClassVar[List[str]] = ["executionErrors", "nextPageToken", "timeSeries", "unit"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ListTimeSeriesResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in execution_errors (list)
        _items = []
        if self.execution_errors:
            for _item_execution_errors in self.execution_errors:
                if _item_execution_errors:
                    _items.append(_item_execution_errors.to_dict())
            _dict['executionErrors'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in time_series (list)
        _items = []
        if self.time_series:
            for _item_time_series in self.time_series:
                if _item_time_series:
                    _items.append(_item_time_series.to_dict())
            _dict['timeSeries'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ListTimeSeriesResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "executionErrors": [Status.from_dict(_item) for _item in obj["executionErrors"]] if obj.get("executionErrors") is not None else None,
            "nextPageToken": obj.get("nextPageToken"),
            "timeSeries": [TimeSeries.from_dict(_item) for _item in obj["timeSeries"]] if obj.get("timeSeries") is not None else None,
            "unit": obj.get("unit")
        })
        return _obj



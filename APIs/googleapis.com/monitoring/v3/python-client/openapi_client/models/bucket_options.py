# coding: utf-8

"""
    Cloud Monitoring API

    Manages your Cloud Monitoring data and configurations.

    The version of the OpenAPI document: v3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.explicit import Explicit
from openapi_client.models.exponential import Exponential
from openapi_client.models.linear import Linear
from typing import Optional, Set
from typing_extensions import Self

class BucketOptions(BaseModel):
    """
    BucketOptions describes the bucket boundaries used to create a histogram for the distribution. The buckets can be in a linear sequence, an exponential sequence, or each bucket can be specified explicitly. BucketOptions does not include the number of values in each bucket.A bucket has an inclusive lower bound and exclusive upper bound for the values that are counted for that bucket. The upper bound of a bucket must be strictly greater than the lower bound. The sequence of N buckets for a distribution consists of an underflow bucket (number 0), zero or more finite buckets (number 1 through N - 2) and an overflow bucket (number N - 1). The buckets are contiguous: the lower bound of bucket i (i > 0) is the same as the upper bound of bucket i - 1. The buckets span the whole range of finite values: lower bound of the underflow bucket is -infinity and the upper bound of the overflow bucket is +infinity. The finite buckets are so-called because both bounds are finite.
    """ # noqa: E501
    explicit_buckets: Optional[Explicit] = Field(default=None, alias="explicitBuckets")
    exponential_buckets: Optional[Exponential] = Field(default=None, alias="exponentialBuckets")
    linear_buckets: Optional[Linear] = Field(default=None, alias="linearBuckets")
    __properties: ClassVar[List[str]] = ["explicitBuckets", "exponentialBuckets", "linearBuckets"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of BucketOptions from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of explicit_buckets
        if self.explicit_buckets:
            _dict['explicitBuckets'] = self.explicit_buckets.to_dict()
        # override the default output from pydantic by calling `to_dict()` of exponential_buckets
        if self.exponential_buckets:
            _dict['exponentialBuckets'] = self.exponential_buckets.to_dict()
        # override the default output from pydantic by calling `to_dict()` of linear_buckets
        if self.linear_buckets:
            _dict['linearBuckets'] = self.linear_buckets.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of BucketOptions from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "explicitBuckets": Explicit.from_dict(obj["explicitBuckets"]) if obj.get("explicitBuckets") is not None else None,
            "exponentialBuckets": Exponential.from_dict(obj["exponentialBuckets"]) if obj.get("exponentialBuckets") is not None else None,
            "linearBuckets": Linear.from_dict(obj["linearBuckets"]) if obj.get("linearBuckets") is not None else None
        })
        return _obj



# coding: utf-8

"""
    Cloud Monitoring API

    Manages your Cloud Monitoring data and configurations.

    The version of the OpenAPI document: v3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.collectd_value import CollectdValue
from openapi_client.models.typed_value import TypedValue
from typing import Optional, Set
from typing_extensions import Self

class CollectdPayload(BaseModel):
    """
    A collection of data points sent from a collectd-based plugin. See the collectd documentation for more information.
    """ # noqa: E501
    end_time: Optional[StrictStr] = Field(default=None, description="The end time of the interval.", alias="endTime")
    metadata: Optional[Dict[str, TypedValue]] = Field(default=None, description="The measurement metadata. Example: \"process_id\" -> 12345")
    plugin: Optional[StrictStr] = Field(default=None, description="The name of the plugin. Example: \"disk\".")
    plugin_instance: Optional[StrictStr] = Field(default=None, description="The instance name of the plugin Example: \"hdcl\".", alias="pluginInstance")
    start_time: Optional[StrictStr] = Field(default=None, description="The start time of the interval.", alias="startTime")
    type: Optional[StrictStr] = Field(default=None, description="The measurement type. Example: \"memory\".")
    type_instance: Optional[StrictStr] = Field(default=None, description="The measurement type instance. Example: \"used\".", alias="typeInstance")
    values: Optional[List[CollectdValue]] = Field(default=None, description="The measured values during this time interval. Each value must have a different data_source_name.")
    __properties: ClassVar[List[str]] = ["endTime", "metadata", "plugin", "pluginInstance", "startTime", "type", "typeInstance", "values"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CollectdPayload from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each value in metadata (dict)
        _field_dict = {}
        if self.metadata:
            for _key_metadata in self.metadata:
                if self.metadata[_key_metadata]:
                    _field_dict[_key_metadata] = self.metadata[_key_metadata].to_dict()
            _dict['metadata'] = _field_dict
        # override the default output from pydantic by calling `to_dict()` of each item in values (list)
        _items = []
        if self.values:
            for _item_values in self.values:
                if _item_values:
                    _items.append(_item_values.to_dict())
            _dict['values'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CollectdPayload from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "endTime": obj.get("endTime"),
            "metadata": dict(
                (_k, TypedValue.from_dict(_v))
                for _k, _v in obj["metadata"].items()
            )
            if obj.get("metadata") is not None
            else None,
            "plugin": obj.get("plugin"),
            "pluginInstance": obj.get("pluginInstance"),
            "startTime": obj.get("startTime"),
            "type": obj.get("type"),
            "typeInstance": obj.get("typeInstance"),
            "values": [CollectdValue.from_dict(_item) for _item in obj["values"]] if obj.get("values") is not None else None
        })
        return _obj



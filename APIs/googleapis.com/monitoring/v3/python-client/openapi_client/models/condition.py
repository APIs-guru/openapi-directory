# coding: utf-8

"""
    Cloud Monitoring API

    Manages your Cloud Monitoring data and configurations.

    The version of the OpenAPI document: v3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.log_match import LogMatch
from openapi_client.models.metric_absence import MetricAbsence
from openapi_client.models.metric_threshold import MetricThreshold
from openapi_client.models.monitoring_query_language_condition import MonitoringQueryLanguageCondition
from openapi_client.models.prometheus_query_language_condition import PrometheusQueryLanguageCondition
from typing import Optional, Set
from typing_extensions import Self

class Condition(BaseModel):
    """
    A condition is a true/false test that determines when an alerting policy should open an incident. If a condition evaluates to true, it signifies that something is wrong.
    """ # noqa: E501
    condition_absent: Optional[MetricAbsence] = Field(default=None, alias="conditionAbsent")
    condition_matched_log: Optional[LogMatch] = Field(default=None, alias="conditionMatchedLog")
    condition_monitoring_query_language: Optional[MonitoringQueryLanguageCondition] = Field(default=None, alias="conditionMonitoringQueryLanguage")
    condition_prometheus_query_language: Optional[PrometheusQueryLanguageCondition] = Field(default=None, alias="conditionPrometheusQueryLanguage")
    condition_threshold: Optional[MetricThreshold] = Field(default=None, alias="conditionThreshold")
    display_name: Optional[StrictStr] = Field(default=None, description="A short name or phrase used to identify the condition in dashboards, notifications, and incidents. To avoid confusion, don't use the same display name for multiple conditions in the same policy.", alias="displayName")
    name: Optional[StrictStr] = Field(default=None, description="Required if the condition exists. The unique resource name for this condition. Its format is: projects/[PROJECT_ID_OR_NUMBER]/alertPolicies/[POLICY_ID]/conditions/[CONDITION_ID] [CONDITION_ID] is assigned by Cloud Monitoring when the condition is created as part of a new or updated alerting policy.When calling the alertPolicies.create method, do not include the name field in the conditions of the requested alerting policy. Cloud Monitoring creates the condition identifiers and includes them in the new policy.When calling the alertPolicies.update method to update a policy, including a condition name causes the existing condition to be updated. Conditions without names are added to the updated policy. Existing conditions are deleted if they are not updated.Best practice is to preserve [CONDITION_ID] if you make only small changes, such as those to condition thresholds, durations, or trigger values. Otherwise, treat the change as a new condition and let the existing condition be deleted.")
    __properties: ClassVar[List[str]] = ["conditionAbsent", "conditionMatchedLog", "conditionMonitoringQueryLanguage", "conditionPrometheusQueryLanguage", "conditionThreshold", "displayName", "name"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Condition from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of condition_absent
        if self.condition_absent:
            _dict['conditionAbsent'] = self.condition_absent.to_dict()
        # override the default output from pydantic by calling `to_dict()` of condition_matched_log
        if self.condition_matched_log:
            _dict['conditionMatchedLog'] = self.condition_matched_log.to_dict()
        # override the default output from pydantic by calling `to_dict()` of condition_monitoring_query_language
        if self.condition_monitoring_query_language:
            _dict['conditionMonitoringQueryLanguage'] = self.condition_monitoring_query_language.to_dict()
        # override the default output from pydantic by calling `to_dict()` of condition_prometheus_query_language
        if self.condition_prometheus_query_language:
            _dict['conditionPrometheusQueryLanguage'] = self.condition_prometheus_query_language.to_dict()
        # override the default output from pydantic by calling `to_dict()` of condition_threshold
        if self.condition_threshold:
            _dict['conditionThreshold'] = self.condition_threshold.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Condition from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "conditionAbsent": MetricAbsence.from_dict(obj["conditionAbsent"]) if obj.get("conditionAbsent") is not None else None,
            "conditionMatchedLog": LogMatch.from_dict(obj["conditionMatchedLog"]) if obj.get("conditionMatchedLog") is not None else None,
            "conditionMonitoringQueryLanguage": MonitoringQueryLanguageCondition.from_dict(obj["conditionMonitoringQueryLanguage"]) if obj.get("conditionMonitoringQueryLanguage") is not None else None,
            "conditionPrometheusQueryLanguage": PrometheusQueryLanguageCondition.from_dict(obj["conditionPrometheusQueryLanguage"]) if obj.get("conditionPrometheusQueryLanguage") is not None else None,
            "conditionThreshold": MetricThreshold.from_dict(obj["conditionThreshold"]) if obj.get("conditionThreshold") is not None else None,
            "displayName": obj.get("displayName"),
            "name": obj.get("name")
        })
        return _obj



# coding: utf-8

"""
    Cloud Monitoring API

    Manages your Cloud Monitoring data and configurations.

    The version of the OpenAPI document: v3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.uptime_check_config import UptimeCheckConfig
from typing import Optional, Set
from typing_extensions import Self

class ListUptimeCheckConfigsResponse(BaseModel):
    """
    The protocol for the ListUptimeCheckConfigs response.
    """ # noqa: E501
    next_page_token: Optional[StrictStr] = Field(default=None, description="This field represents the pagination token to retrieve the next page of results. If the value is empty, it means no further results for the request. To retrieve the next page of results, the value of the next_page_token is passed to the subsequent List method call (in the request message's page_token field).", alias="nextPageToken")
    total_size: Optional[StrictInt] = Field(default=None, description="The total number of Uptime check configurations for the project, irrespective of any pagination.", alias="totalSize")
    uptime_check_configs: Optional[List[UptimeCheckConfig]] = Field(default=None, description="The returned Uptime check configurations.", alias="uptimeCheckConfigs")
    __properties: ClassVar[List[str]] = ["nextPageToken", "totalSize", "uptimeCheckConfigs"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ListUptimeCheckConfigsResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in uptime_check_configs (list)
        _items = []
        if self.uptime_check_configs:
            for _item_uptime_check_configs in self.uptime_check_configs:
                if _item_uptime_check_configs:
                    _items.append(_item_uptime_check_configs.to_dict())
            _dict['uptimeCheckConfigs'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ListUptimeCheckConfigsResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "nextPageToken": obj.get("nextPageToken"),
            "totalSize": obj.get("totalSize"),
            "uptimeCheckConfigs": [UptimeCheckConfig.from_dict(_item) for _item in obj["uptimeCheckConfigs"]] if obj.get("uptimeCheckConfigs") is not None else None
        })
        return _obj



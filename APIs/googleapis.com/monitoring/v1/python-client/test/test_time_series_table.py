# coding: utf-8

"""
    Cloud Monitoring API

    Manages your Cloud Monitoring data and configurations.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.time_series_table import TimeSeriesTable

class TestTimeSeriesTable(unittest.TestCase):
    """TimeSeriesTable unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> TimeSeriesTable:
        """Test TimeSeriesTable
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `TimeSeriesTable`
        """
        model = TimeSeriesTable()
        if include_optional:
            return TimeSeriesTable(
                column_settings = [
                    openapi_client.models.column_settings.ColumnSettings(
                        column = '', 
                        visible = True, )
                    ],
                data_sets = [
                    openapi_client.models.table_data_set.TableDataSet(
                        min_alignment_period = '', 
                        table_display_options = openapi_client.models.table_display_options.TableDisplayOptions(
                            shown_columns = [
                                ''
                                ], ), 
                        table_template = '', 
                        time_series_query = openapi_client.models.time_series_query.TimeSeriesQuery(
                            ops_analytics_query = openapi_client.models.ops_analytics_query.OpsAnalyticsQuery(
                                sql = '', ), 
                            output_full_duration = True, 
                            prometheus_query = '', 
                            time_series_filter = openapi_client.models.time_series_filter.TimeSeriesFilter(
                                aggregation = openapi_client.models.aggregation.Aggregation(
                                    alignment_period = '', 
                                    cross_series_reducer = 'REDUCE_NONE', 
                                    group_by_fields = [
                                        ''
                                        ], 
                                    per_series_aligner = 'ALIGN_NONE', ), 
                                filter = '', 
                                pick_time_series_filter = openapi_client.models.pick_time_series_filter.PickTimeSeriesFilter(
                                    direction = 'DIRECTION_UNSPECIFIED', 
                                    interval = openapi_client.models.interval.Interval(
                                        end_time = '', 
                                        start_time = '', ), 
                                    num_time_series = 56, 
                                    ranking_method = 'METHOD_UNSPECIFIED', ), 
                                secondary_aggregation = openapi_client.models.aggregation.Aggregation(
                                    alignment_period = '', 
                                    cross_series_reducer = 'REDUCE_NONE', 
                                    per_series_aligner = 'ALIGN_NONE', ), 
                                statistical_time_series_filter = openapi_client.models.statistical_time_series_filter.StatisticalTimeSeriesFilter(
                                    num_time_series = 56, 
                                    ranking_method = 'METHOD_UNSPECIFIED', ), ), 
                            time_series_filter_ratio = openapi_client.models.time_series_filter_ratio.TimeSeriesFilterRatio(
                                denominator = openapi_client.models.ratio_part.RatioPart(
                                    filter = '', ), 
                                numerator = openapi_client.models.ratio_part.RatioPart(
                                    filter = '', ), ), 
                            time_series_query_language = '', 
                            unit_override = '', ), )
                    ],
                metric_visualization = 'METRIC_VISUALIZATION_UNSPECIFIED'
            )
        else:
            return TimeSeriesTable(
        )
        """

    def testTimeSeriesTable(self):
        """Test TimeSeriesTable"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

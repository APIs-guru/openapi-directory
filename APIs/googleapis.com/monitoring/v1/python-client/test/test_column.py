# coding: utf-8

"""
    Cloud Monitoring API

    Manages your Cloud Monitoring data and configurations.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.column import Column

class TestColumn(unittest.TestCase):
    """Column unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> Column:
        """Test Column
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `Column`
        """
        model = Column()
        if include_optional:
            return Column(
                weight = '',
                widgets = [
                    openapi_client.models.widget.Widget(
                        alert_chart = openapi_client.models.alert_chart.AlertChart(
                            name = '', ), 
                        blank = openapi_client.models.empty.Empty(), 
                        collapsible_group = openapi_client.models.collapsible_group.CollapsibleGroup(
                            collapsed = True, ), 
                        error_reporting_panel = openapi_client.models.error_reporting_panel.ErrorReportingPanel(
                            project_names = [
                                ''
                                ], 
                            services = [
                                ''
                                ], 
                            versions = [
                                ''
                                ], ), 
                        id = '', 
                        incident_list = openapi_client.models.incident_list.IncidentList(
                            monitored_resources = [
                                openapi_client.models.monitored_resource.MonitoredResource(
                                    labels = {
                                        'key' : ''
                                        }, 
                                    type = '', )
                                ], 
                            policy_names = [
                                ''
                                ], ), 
                        logs_panel = openapi_client.models.logs_panel.LogsPanel(
                            filter = '', 
                            resource_names = [
                                ''
                                ], ), 
                        pie_chart = openapi_client.models.pie_chart.PieChart(
                            chart_type = 'PIE_CHART_TYPE_UNSPECIFIED', 
                            data_sets = [
                                openapi_client.models.pie_chart_data_set.PieChartDataSet(
                                    dimensions = [
                                        openapi_client.models.dimension.Dimension(
                                            column = '', 
                                            column_type = '', 
                                            float_bin_size = 1.337, 
                                            max_bin_count = 56, 
                                            numeric_bin_size = 56, 
                                            sort_column = '', 
                                            sort_order = 'SORT_ORDER_UNSPECIFIED', 
                                            time_bin_size = '', )
                                        ], 
                                    measures = [
                                        openapi_client.models.measure.Measure(
                                            aggregation_function = openapi_client.models.aggregation_function.AggregationFunction(
                                                parameters = [
                                                    openapi_client.models.parameter.Parameter(
                                                        double_value = 1.337, 
                                                        int_value = '', )
                                                    ], 
                                                type = '', ), 
                                            column = '', )
                                        ], 
                                    min_alignment_period = '', 
                                    slice_name_template = '', 
                                    time_series_query = openapi_client.models.time_series_query.TimeSeriesQuery(
                                        ops_analytics_query = openapi_client.models.ops_analytics_query.OpsAnalyticsQuery(
                                            sql = '', ), 
                                        output_full_duration = True, 
                                        prometheus_query = '', 
                                        time_series_filter = openapi_client.models.time_series_filter.TimeSeriesFilter(
                                            aggregation = openapi_client.models.aggregation.Aggregation(
                                                alignment_period = '', 
                                                cross_series_reducer = 'REDUCE_NONE', 
                                                group_by_fields = [
                                                    ''
                                                    ], 
                                                per_series_aligner = 'ALIGN_NONE', ), 
                                            filter = '', 
                                            pick_time_series_filter = openapi_client.models.pick_time_series_filter.PickTimeSeriesFilter(
                                                direction = 'DIRECTION_UNSPECIFIED', 
                                                interval = openapi_client.models.interval.Interval(
                                                    end_time = '', 
                                                    start_time = '', ), 
                                                num_time_series = 56, 
                                                ranking_method = 'METHOD_UNSPECIFIED', ), 
                                            secondary_aggregation = openapi_client.models.aggregation.Aggregation(
                                                alignment_period = '', 
                                                cross_series_reducer = 'REDUCE_NONE', 
                                                per_series_aligner = 'ALIGN_NONE', ), 
                                            statistical_time_series_filter = openapi_client.models.statistical_time_series_filter.StatisticalTimeSeriesFilter(
                                                num_time_series = 56, 
                                                ranking_method = 'METHOD_UNSPECIFIED', ), ), 
                                        time_series_filter_ratio = openapi_client.models.time_series_filter_ratio.TimeSeriesFilterRatio(
                                            denominator = openapi_client.models.ratio_part.RatioPart(
                                                filter = '', ), 
                                            numerator = openapi_client.models.ratio_part.RatioPart(
                                                filter = '', ), ), 
                                        time_series_query_language = '', 
                                        unit_override = '', ), )
                                ], 
                            show_labels = True, ), 
                        scorecard = openapi_client.models.scorecard.Scorecard(
                            blank_view = openapi_client.models.empty.Empty(), 
                            gauge_view = openapi_client.models.gauge_view.GaugeView(
                                lower_bound = 1.337, 
                                upper_bound = 1.337, ), 
                            spark_chart_view = openapi_client.models.spark_chart_view.SparkChartView(
                                min_alignment_period = '', 
                                spark_chart_type = 'SPARK_CHART_TYPE_UNSPECIFIED', ), 
                            thresholds = [
                                openapi_client.models.threshold.Threshold(
                                    color = 'COLOR_UNSPECIFIED', 
                                    direction = 'DIRECTION_UNSPECIFIED', 
                                    label = '', 
                                    target_axis = 'TARGET_AXIS_UNSPECIFIED', 
                                    value = 1.337, )
                                ], ), 
                        section_header = openapi_client.models.section_header.SectionHeader(
                            divider_below = True, 
                            subtitle = '', ), 
                        single_view_group = openapi_client.models.single_view_group.SingleViewGroup(), 
                        text = openapi_client.models.text.Text(
                            content = '', 
                            format = 'FORMAT_UNSPECIFIED', 
                            style = openapi_client.models.text_style.TextStyle(
                                background_color = '', 
                                font_size = 'FONT_SIZE_UNSPECIFIED', 
                                horizontal_alignment = 'HORIZONTAL_ALIGNMENT_UNSPECIFIED', 
                                padding = 'PADDING_SIZE_UNSPECIFIED', 
                                pointer_location = 'POINTER_LOCATION_UNSPECIFIED', 
                                text_color = '', 
                                vertical_alignment = 'VERTICAL_ALIGNMENT_UNSPECIFIED', ), ), 
                        time_series_table = openapi_client.models.time_series_table.TimeSeriesTable(
                            column_settings = [
                                openapi_client.models.column_settings.ColumnSettings(
                                    column = '', 
                                    visible = True, )
                                ], 
                            metric_visualization = 'METRIC_VISUALIZATION_UNSPECIFIED', ), 
                        title = '', 
                        xy_chart = openapi_client.models.xy_chart.XyChart(
                            chart_options = openapi_client.models.chart_options.ChartOptions(
                                display_horizontal = True, 
                                mode = 'MODE_UNSPECIFIED', ), 
                            timeshift_duration = '', 
                            x_axis = openapi_client.models.axis.Axis(
                                label = '', 
                                scale = 'SCALE_UNSPECIFIED', ), 
                            y2_axis = openapi_client.models.axis.Axis(
                                label = '', 
                                scale = 'SCALE_UNSPECIFIED', ), 
                            y_axis = , ), )
                    ]
            )
        else:
            return Column(
        )
        """

    def testColumn(self):
        """Test Column"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

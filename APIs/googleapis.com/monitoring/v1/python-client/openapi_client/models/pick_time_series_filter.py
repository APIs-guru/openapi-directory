# coding: utf-8

"""
    Cloud Monitoring API

    Manages your Cloud Monitoring data and configurations.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.interval import Interval
from typing import Optional, Set
from typing_extensions import Self

class PickTimeSeriesFilter(BaseModel):
    """
    Describes a ranking-based time series filter. Each input time series is ranked with an aligner. The filter will allow up to num_time_series time series to pass through it, selecting them based on the relative ranking.For example, if ranking_method is METHOD_MEAN,direction is BOTTOM, and num_time_series is 3, then the 3 times series with the lowest mean values will pass through the filter.
    """ # noqa: E501
    direction: Optional[StrictStr] = Field(default=None, description="How to use the ranking to select time series that pass through the filter.")
    interval: Optional[Interval] = None
    num_time_series: Optional[StrictInt] = Field(default=None, description="How many time series to allow to pass through the filter.", alias="numTimeSeries")
    ranking_method: Optional[StrictStr] = Field(default=None, description="ranking_method is applied to each time series independently to produce the value which will be used to compare the time series to other time series.", alias="rankingMethod")
    __properties: ClassVar[List[str]] = ["direction", "interval", "numTimeSeries", "rankingMethod"]

    @field_validator('direction')
    def direction_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['DIRECTION_UNSPECIFIED', 'TOP', 'BOTTOM']):
            raise ValueError("must be one of enum values ('DIRECTION_UNSPECIFIED', 'TOP', 'BOTTOM')")
        return value

    @field_validator('ranking_method')
    def ranking_method_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['METHOD_UNSPECIFIED', 'METHOD_MEAN', 'METHOD_MAX', 'METHOD_MIN', 'METHOD_SUM', 'METHOD_LATEST']):
            raise ValueError("must be one of enum values ('METHOD_UNSPECIFIED', 'METHOD_MEAN', 'METHOD_MAX', 'METHOD_MIN', 'METHOD_SUM', 'METHOD_LATEST')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PickTimeSeriesFilter from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of interval
        if self.interval:
            _dict['interval'] = self.interval.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PickTimeSeriesFilter from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "direction": obj.get("direction"),
            "interval": Interval.from_dict(obj["interval"]) if obj.get("interval") is not None else None,
            "numTimeSeries": obj.get("numTimeSeries"),
            "rankingMethod": obj.get("rankingMethod")
        })
        return _obj



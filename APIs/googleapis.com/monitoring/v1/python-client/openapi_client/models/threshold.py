# coding: utf-8

"""
    Cloud Monitoring API

    Manages your Cloud Monitoring data and configurations.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class Threshold(BaseModel):
    """
    Defines a threshold for categorizing time series values.
    """ # noqa: E501
    color: Optional[StrictStr] = Field(default=None, description="The state color for this threshold. Color is not allowed in a XyChart.")
    direction: Optional[StrictStr] = Field(default=None, description="The direction for the current threshold. Direction is not allowed in a XyChart.")
    label: Optional[StrictStr] = Field(default=None, description="A label for the threshold.")
    target_axis: Optional[StrictStr] = Field(default=None, description="The target axis to use for plotting the threshold. Target axis is not allowed in a Scorecard.", alias="targetAxis")
    value: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The value of the threshold. The value should be defined in the native scale of the metric.")
    __properties: ClassVar[List[str]] = ["color", "direction", "label", "targetAxis", "value"]

    @field_validator('color')
    def color_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['COLOR_UNSPECIFIED', 'YELLOW', 'RED']):
            raise ValueError("must be one of enum values ('COLOR_UNSPECIFIED', 'YELLOW', 'RED')")
        return value

    @field_validator('direction')
    def direction_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['DIRECTION_UNSPECIFIED', 'ABOVE', 'BELOW']):
            raise ValueError("must be one of enum values ('DIRECTION_UNSPECIFIED', 'ABOVE', 'BELOW')")
        return value

    @field_validator('target_axis')
    def target_axis_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['TARGET_AXIS_UNSPECIFIED', 'Y1', 'Y2']):
            raise ValueError("must be one of enum values ('TARGET_AXIS_UNSPECIFIED', 'Y1', 'Y2')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Threshold from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Threshold from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "color": obj.get("color"),
            "direction": obj.get("direction"),
            "label": obj.get("label"),
            "targetAxis": obj.get("targetAxis"),
            "value": obj.get("value")
        })
        return _obj



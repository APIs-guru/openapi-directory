# coding: utf-8

"""
    Cloud Monitoring API

    Manages your Cloud Monitoring data and configurations.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.axis import Axis
from openapi_client.models.chart_options import ChartOptions
from openapi_client.models.data_set import DataSet
from openapi_client.models.threshold import Threshold
from typing import Optional, Set
from typing_extensions import Self

class XyChart(BaseModel):
    """
    A chart that displays data on a 2D (X and Y axes) plane.
    """ # noqa: E501
    chart_options: Optional[ChartOptions] = Field(default=None, alias="chartOptions")
    data_sets: Optional[List[DataSet]] = Field(default=None, description="Required. The data displayed in this chart.", alias="dataSets")
    thresholds: Optional[List[Threshold]] = Field(default=None, description="Threshold lines drawn horizontally across the chart.")
    timeshift_duration: Optional[StrictStr] = Field(default=None, description="The duration used to display a comparison chart. A comparison chart simultaneously shows values from two similar-length time periods (e.g., week-over-week metrics). The duration must be positive, and it can only be applied to charts with data sets of LINE plot type.", alias="timeshiftDuration")
    x_axis: Optional[Axis] = Field(default=None, alias="xAxis")
    y2_axis: Optional[Axis] = Field(default=None, alias="y2Axis")
    y_axis: Optional[Axis] = Field(default=None, alias="yAxis")
    __properties: ClassVar[List[str]] = ["chartOptions", "dataSets", "thresholds", "timeshiftDuration", "xAxis", "y2Axis", "yAxis"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of XyChart from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of chart_options
        if self.chart_options:
            _dict['chartOptions'] = self.chart_options.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in data_sets (list)
        _items = []
        if self.data_sets:
            for _item_data_sets in self.data_sets:
                if _item_data_sets:
                    _items.append(_item_data_sets.to_dict())
            _dict['dataSets'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in thresholds (list)
        _items = []
        if self.thresholds:
            for _item_thresholds in self.thresholds:
                if _item_thresholds:
                    _items.append(_item_thresholds.to_dict())
            _dict['thresholds'] = _items
        # override the default output from pydantic by calling `to_dict()` of x_axis
        if self.x_axis:
            _dict['xAxis'] = self.x_axis.to_dict()
        # override the default output from pydantic by calling `to_dict()` of y2_axis
        if self.y2_axis:
            _dict['y2Axis'] = self.y2_axis.to_dict()
        # override the default output from pydantic by calling `to_dict()` of y_axis
        if self.y_axis:
            _dict['yAxis'] = self.y_axis.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of XyChart from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "chartOptions": ChartOptions.from_dict(obj["chartOptions"]) if obj.get("chartOptions") is not None else None,
            "dataSets": [DataSet.from_dict(_item) for _item in obj["dataSets"]] if obj.get("dataSets") is not None else None,
            "thresholds": [Threshold.from_dict(_item) for _item in obj["thresholds"]] if obj.get("thresholds") is not None else None,
            "timeshiftDuration": obj.get("timeshiftDuration"),
            "xAxis": Axis.from_dict(obj["xAxis"]) if obj.get("xAxis") is not None else None,
            "y2Axis": Axis.from_dict(obj["y2Axis"]) if obj.get("y2Axis") is not None else None,
            "yAxis": Axis.from_dict(obj["yAxis"]) if obj.get("yAxis") is not None else None
        })
        return _obj



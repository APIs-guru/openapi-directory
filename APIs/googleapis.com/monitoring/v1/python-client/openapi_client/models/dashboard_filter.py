# coding: utf-8

"""
    Cloud Monitoring API

    Manages your Cloud Monitoring data and configurations.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class DashboardFilter(BaseModel):
    """
    A filter to reduce the amount of data charted in relevant widgets.
    """ # noqa: E501
    filter_type: Optional[StrictStr] = Field(default=None, description="The specified filter type", alias="filterType")
    label_key: Optional[StrictStr] = Field(default=None, description="Required. The key for the label", alias="labelKey")
    string_value: Optional[StrictStr] = Field(default=None, description="A variable-length string value.", alias="stringValue")
    template_variable: Optional[StrictStr] = Field(default=None, description="The placeholder text that can be referenced in a filter string or MQL query. If omitted, the dashboard filter will be applied to all relevant widgets in the dashboard.", alias="templateVariable")
    __properties: ClassVar[List[str]] = ["filterType", "labelKey", "stringValue", "templateVariable"]

    @field_validator('filter_type')
    def filter_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['FILTER_TYPE_UNSPECIFIED', 'RESOURCE_LABEL', 'METRIC_LABEL', 'USER_METADATA_LABEL', 'SYSTEM_METADATA_LABEL', 'GROUP']):
            raise ValueError("must be one of enum values ('FILTER_TYPE_UNSPECIFIED', 'RESOURCE_LABEL', 'METRIC_LABEL', 'USER_METADATA_LABEL', 'SYSTEM_METADATA_LABEL', 'GROUP')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DashboardFilter from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DashboardFilter from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "filterType": obj.get("filterType"),
            "labelKey": obj.get("labelKey"),
            "stringValue": obj.get("stringValue"),
            "templateVariable": obj.get("templateVariable")
        })
        return _obj



# coding: utf-8

"""
    Cloud Monitoring API

    Manages your Cloud Monitoring data and configurations.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.aggregation import Aggregation
from openapi_client.models.pick_time_series_filter import PickTimeSeriesFilter
from openapi_client.models.statistical_time_series_filter import StatisticalTimeSeriesFilter
from typing import Optional, Set
from typing_extensions import Self

class TimeSeriesFilter(BaseModel):
    """
    A filter that defines a subset of time series data that is displayed in a widget. Time series data is fetched using the ListTimeSeries (https://cloud.google.com/monitoring/api/ref_v3/rest/v3/projects.timeSeries/list) method.
    """ # noqa: E501
    aggregation: Optional[Aggregation] = None
    filter: Optional[StrictStr] = Field(default=None, description="Required. The monitoring filter (https://cloud.google.com/monitoring/api/v3/filters) that identifies the metric types, resources, and projects to query.")
    pick_time_series_filter: Optional[PickTimeSeriesFilter] = Field(default=None, alias="pickTimeSeriesFilter")
    secondary_aggregation: Optional[Aggregation] = Field(default=None, alias="secondaryAggregation")
    statistical_time_series_filter: Optional[StatisticalTimeSeriesFilter] = Field(default=None, alias="statisticalTimeSeriesFilter")
    __properties: ClassVar[List[str]] = ["aggregation", "filter", "pickTimeSeriesFilter", "secondaryAggregation", "statisticalTimeSeriesFilter"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of TimeSeriesFilter from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of aggregation
        if self.aggregation:
            _dict['aggregation'] = self.aggregation.to_dict()
        # override the default output from pydantic by calling `to_dict()` of pick_time_series_filter
        if self.pick_time_series_filter:
            _dict['pickTimeSeriesFilter'] = self.pick_time_series_filter.to_dict()
        # override the default output from pydantic by calling `to_dict()` of secondary_aggregation
        if self.secondary_aggregation:
            _dict['secondaryAggregation'] = self.secondary_aggregation.to_dict()
        # override the default output from pydantic by calling `to_dict()` of statistical_time_series_filter
        if self.statistical_time_series_filter:
            _dict['statisticalTimeSeriesFilter'] = self.statistical_time_series_filter.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of TimeSeriesFilter from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "aggregation": Aggregation.from_dict(obj["aggregation"]) if obj.get("aggregation") is not None else None,
            "filter": obj.get("filter"),
            "pickTimeSeriesFilter": PickTimeSeriesFilter.from_dict(obj["pickTimeSeriesFilter"]) if obj.get("pickTimeSeriesFilter") is not None else None,
            "secondaryAggregation": Aggregation.from_dict(obj["secondaryAggregation"]) if obj.get("secondaryAggregation") is not None else None,
            "statisticalTimeSeriesFilter": StatisticalTimeSeriesFilter.from_dict(obj["statisticalTimeSeriesFilter"]) if obj.get("statisticalTimeSeriesFilter") is not None else None
        })
        return _obj



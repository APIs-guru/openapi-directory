# coding: utf-8

"""
    Cloud Monitoring API

    Manages your Cloud Monitoring data and configurations.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class Dimension(BaseModel):
    """
    A chart dimension. Dimensions are a structured label, class, or category for a set of measurements in your data.
    """ # noqa: E501
    column: Optional[StrictStr] = Field(default=None, description="Required. The name of the column in the source SQL query that is used to chart the dimension.")
    column_type: Optional[StrictStr] = Field(default=None, description="Optional. The type of the dimension column. This is relevant only if one of the bin_size fields is set. If it is empty, the type TIMESTAMP or INT64 will be assumed based on which bin_size field is set. If populated, this should be set to one of the following types: DATE, TIME, DATETIME, TIMESTAMP, BIGNUMERIC, INT64, NUMERIC, FLOAT64.", alias="columnType")
    float_bin_size: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Optional. float_bin_size is used when the column type used for a dimension is a floating point numeric column.", alias="floatBinSize")
    max_bin_count: Optional[StrictInt] = Field(default=None, description="A limit to the number of bins generated. When 0 is specified, the maximum count is not enforced.", alias="maxBinCount")
    numeric_bin_size: Optional[StrictInt] = Field(default=None, description="numeric_bin_size is used when the column type used for a dimension is numeric or string.", alias="numericBinSize")
    sort_column: Optional[StrictStr] = Field(default=None, description="The column name to sort on for binning. This column can be the same column as this dimension or any other column used as a measure in the results. If sort_order is set to NONE, then this value is not used.", alias="sortColumn")
    sort_order: Optional[StrictStr] = Field(default=None, description="The sort order applied to the sort column.", alias="sortOrder")
    time_bin_size: Optional[StrictStr] = Field(default=None, description="time_bin_size is used when the data type specified by column is a time type and the bin size is determined by a time duration. If column_type is DATE, this must be a whole value multiple of 1 day. If column_type is TIME, this must be less than or equal to 24 hours.", alias="timeBinSize")
    __properties: ClassVar[List[str]] = ["column", "columnType", "floatBinSize", "maxBinCount", "numericBinSize", "sortColumn", "sortOrder", "timeBinSize"]

    @field_validator('sort_order')
    def sort_order_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['SORT_ORDER_UNSPECIFIED', 'SORT_ORDER_NONE', 'SORT_ORDER_ASCENDING', 'SORT_ORDER_DESCENDING']):
            raise ValueError("must be one of enum values ('SORT_ORDER_UNSPECIFIED', 'SORT_ORDER_NONE', 'SORT_ORDER_ASCENDING', 'SORT_ORDER_DESCENDING')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Dimension from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Dimension from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "column": obj.get("column"),
            "columnType": obj.get("columnType"),
            "floatBinSize": obj.get("floatBinSize"),
            "maxBinCount": obj.get("maxBinCount"),
            "numericBinSize": obj.get("numericBinSize"),
            "sortColumn": obj.get("sortColumn"),
            "sortOrder": obj.get("sortOrder"),
            "timeBinSize": obj.get("timeBinSize")
        })
        return _obj



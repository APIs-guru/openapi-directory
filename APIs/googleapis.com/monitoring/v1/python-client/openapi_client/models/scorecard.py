# coding: utf-8

"""
    Cloud Monitoring API

    Manages your Cloud Monitoring data and configurations.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.gauge_view import GaugeView
from openapi_client.models.spark_chart_view import SparkChartView
from openapi_client.models.threshold import Threshold
from openapi_client.models.time_series_query import TimeSeriesQuery
from typing import Optional, Set
from typing_extensions import Self

class Scorecard(BaseModel):
    """
    A widget showing the latest value of a metric, and how this value relates to one or more thresholds.
    """ # noqa: E501
    blank_view: Optional[Dict[str, Any]] = Field(default=None, description="A generic empty message that you can re-use to avoid defining duplicated empty messages in your APIs. A typical example is to use it as the request or the response type of an API method. For instance: service Foo { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty); } ", alias="blankView")
    gauge_view: Optional[GaugeView] = Field(default=None, alias="gaugeView")
    spark_chart_view: Optional[SparkChartView] = Field(default=None, alias="sparkChartView")
    thresholds: Optional[List[Threshold]] = Field(default=None, description="The thresholds used to determine the state of the scorecard given the time series' current value. For an actual value x, the scorecard is in a danger state if x is less than or equal to a danger threshold that triggers below, or greater than or equal to a danger threshold that triggers above. Similarly, if x is above/below a warning threshold that triggers above/below, then the scorecard is in a warning state - unless x also puts it in a danger state. (Danger trumps warning.)As an example, consider a scorecard with the following four thresholds: { value: 90, category: 'DANGER', trigger: 'ABOVE', }, { value: 70, category: 'WARNING', trigger: 'ABOVE', }, { value: 10, category: 'DANGER', trigger: 'BELOW', }, { value: 20, category: 'WARNING', trigger: 'BELOW', } Then: values less than or equal to 10 would put the scorecard in a DANGER state, values greater than 10 but less than or equal to 20 a WARNING state, values strictly between 20 and 70 an OK state, values greater than or equal to 70 but less than 90 a WARNING state, and values greater than or equal to 90 a DANGER state.")
    time_series_query: Optional[TimeSeriesQuery] = Field(default=None, alias="timeSeriesQuery")
    __properties: ClassVar[List[str]] = ["blankView", "gaugeView", "sparkChartView", "thresholds", "timeSeriesQuery"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Scorecard from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of gauge_view
        if self.gauge_view:
            _dict['gaugeView'] = self.gauge_view.to_dict()
        # override the default output from pydantic by calling `to_dict()` of spark_chart_view
        if self.spark_chart_view:
            _dict['sparkChartView'] = self.spark_chart_view.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in thresholds (list)
        _items = []
        if self.thresholds:
            for _item_thresholds in self.thresholds:
                if _item_thresholds:
                    _items.append(_item_thresholds.to_dict())
            _dict['thresholds'] = _items
        # override the default output from pydantic by calling `to_dict()` of time_series_query
        if self.time_series_query:
            _dict['timeSeriesQuery'] = self.time_series_query.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Scorecard from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "blankView": obj.get("blankView"),
            "gaugeView": GaugeView.from_dict(obj["gaugeView"]) if obj.get("gaugeView") is not None else None,
            "sparkChartView": SparkChartView.from_dict(obj["sparkChartView"]) if obj.get("sparkChartView") is not None else None,
            "thresholds": [Threshold.from_dict(_item) for _item in obj["thresholds"]] if obj.get("thresholds") is not None else None,
            "timeSeriesQuery": TimeSeriesQuery.from_dict(obj["timeSeriesQuery"]) if obj.get("timeSeriesQuery") is not None else None
        })
        return _obj



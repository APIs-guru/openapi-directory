# coding: utf-8

"""
    Cloud Monitoring API

    Manages your Cloud Monitoring data and configurations.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class TextStyle(BaseModel):
    """
    Properties that determine how the title and content are styled
    """ # noqa: E501
    background_color: Optional[StrictStr] = Field(default=None, description="The background color as a hex string. \"#RRGGBB\" or \"#RGB\"", alias="backgroundColor")
    font_size: Optional[StrictStr] = Field(default=None, description="Font sizes for both the title and content. The title will still be larger relative to the content.", alias="fontSize")
    horizontal_alignment: Optional[StrictStr] = Field(default=None, description="The horizontal alignment of both the title and content", alias="horizontalAlignment")
    padding: Optional[StrictStr] = Field(default=None, description="The amount of padding around the widget")
    pointer_location: Optional[StrictStr] = Field(default=None, description="The pointer location for this widget (also sometimes called a \"tail\")", alias="pointerLocation")
    text_color: Optional[StrictStr] = Field(default=None, description="The text color as a hex string. \"#RRGGBB\" or \"#RGB\"", alias="textColor")
    vertical_alignment: Optional[StrictStr] = Field(default=None, description="The vertical alignment of both the title and content", alias="verticalAlignment")
    __properties: ClassVar[List[str]] = ["backgroundColor", "fontSize", "horizontalAlignment", "padding", "pointerLocation", "textColor", "verticalAlignment"]

    @field_validator('font_size')
    def font_size_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['FONT_SIZE_UNSPECIFIED', 'FS_EXTRA_SMALL', 'FS_SMALL', 'FS_MEDIUM', 'FS_LARGE', 'FS_EXTRA_LARGE']):
            raise ValueError("must be one of enum values ('FONT_SIZE_UNSPECIFIED', 'FS_EXTRA_SMALL', 'FS_SMALL', 'FS_MEDIUM', 'FS_LARGE', 'FS_EXTRA_LARGE')")
        return value

    @field_validator('horizontal_alignment')
    def horizontal_alignment_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['HORIZONTAL_ALIGNMENT_UNSPECIFIED', 'H_LEFT', 'H_CENTER', 'H_RIGHT']):
            raise ValueError("must be one of enum values ('HORIZONTAL_ALIGNMENT_UNSPECIFIED', 'H_LEFT', 'H_CENTER', 'H_RIGHT')")
        return value

    @field_validator('padding')
    def padding_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['PADDING_SIZE_UNSPECIFIED', 'P_EXTRA_SMALL', 'P_SMALL', 'P_MEDIUM', 'P_LARGE', 'P_EXTRA_LARGE']):
            raise ValueError("must be one of enum values ('PADDING_SIZE_UNSPECIFIED', 'P_EXTRA_SMALL', 'P_SMALL', 'P_MEDIUM', 'P_LARGE', 'P_EXTRA_LARGE')")
        return value

    @field_validator('pointer_location')
    def pointer_location_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['POINTER_LOCATION_UNSPECIFIED', 'PL_TOP', 'PL_RIGHT', 'PL_BOTTOM', 'PL_LEFT', 'PL_TOP_LEFT', 'PL_TOP_RIGHT', 'PL_RIGHT_TOP', 'PL_RIGHT_BOTTOM', 'PL_BOTTOM_RIGHT', 'PL_BOTTOM_LEFT', 'PL_LEFT_BOTTOM', 'PL_LEFT_TOP']):
            raise ValueError("must be one of enum values ('POINTER_LOCATION_UNSPECIFIED', 'PL_TOP', 'PL_RIGHT', 'PL_BOTTOM', 'PL_LEFT', 'PL_TOP_LEFT', 'PL_TOP_RIGHT', 'PL_RIGHT_TOP', 'PL_RIGHT_BOTTOM', 'PL_BOTTOM_RIGHT', 'PL_BOTTOM_LEFT', 'PL_LEFT_BOTTOM', 'PL_LEFT_TOP')")
        return value

    @field_validator('vertical_alignment')
    def vertical_alignment_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['VERTICAL_ALIGNMENT_UNSPECIFIED', 'V_TOP', 'V_CENTER', 'V_BOTTOM']):
            raise ValueError("must be one of enum values ('VERTICAL_ALIGNMENT_UNSPECIFIED', 'V_TOP', 'V_CENTER', 'V_BOTTOM')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of TextStyle from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of TextStyle from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "backgroundColor": obj.get("backgroundColor"),
            "fontSize": obj.get("fontSize"),
            "horizontalAlignment": obj.get("horizontalAlignment"),
            "padding": obj.get("padding"),
            "pointerLocation": obj.get("pointerLocation"),
            "textColor": obj.get("textColor"),
            "verticalAlignment": obj.get("verticalAlignment")
        })
        return _obj



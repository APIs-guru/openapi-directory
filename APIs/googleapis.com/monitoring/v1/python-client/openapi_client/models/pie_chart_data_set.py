# coding: utf-8

"""
    Cloud Monitoring API

    Manages your Cloud Monitoring data and configurations.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.dimension import Dimension
from openapi_client.models.measure import Measure
from openapi_client.models.time_series_query import TimeSeriesQuery
from typing import Optional, Set
from typing_extensions import Self

class PieChartDataSet(BaseModel):
    """
    Groups a time series query definition.
    """ # noqa: E501
    dimensions: Optional[List[Dimension]] = Field(default=None, description="A dimension is a structured label, class, or category for a set of measurements in your data.")
    measures: Optional[List[Measure]] = Field(default=None, description="A measure is a measured value of a property in your data. For example, rainfall in inches, number of units sold, revenue gained, etc.")
    min_alignment_period: Optional[StrictStr] = Field(default=None, description="Optional. The lower bound on data point frequency for this data set, implemented by specifying the minimum alignment period to use in a time series query. For example, if the data is published once every 10 minutes, the min_alignment_period should be at least 10 minutes. It would not make sense to fetch and align data at one minute intervals.", alias="minAlignmentPeriod")
    slice_name_template: Optional[StrictStr] = Field(default=None, description="Optional. A template for the name of the slice. This name will be displayed in the legend and the tooltip of the pie chart. It replaces the auto-generated names for the slices. For example, if the template is set to ${resource.labels.zone}, the zone's value will be used for the name instead of the default name.", alias="sliceNameTemplate")
    time_series_query: Optional[TimeSeriesQuery] = Field(default=None, alias="timeSeriesQuery")
    __properties: ClassVar[List[str]] = ["dimensions", "measures", "minAlignmentPeriod", "sliceNameTemplate", "timeSeriesQuery"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PieChartDataSet from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in dimensions (list)
        _items = []
        if self.dimensions:
            for _item_dimensions in self.dimensions:
                if _item_dimensions:
                    _items.append(_item_dimensions.to_dict())
            _dict['dimensions'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in measures (list)
        _items = []
        if self.measures:
            for _item_measures in self.measures:
                if _item_measures:
                    _items.append(_item_measures.to_dict())
            _dict['measures'] = _items
        # override the default output from pydantic by calling `to_dict()` of time_series_query
        if self.time_series_query:
            _dict['timeSeriesQuery'] = self.time_series_query.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PieChartDataSet from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "dimensions": [Dimension.from_dict(_item) for _item in obj["dimensions"]] if obj.get("dimensions") is not None else None,
            "measures": [Measure.from_dict(_item) for _item in obj["measures"]] if obj.get("measures") is not None else None,
            "minAlignmentPeriod": obj.get("minAlignmentPeriod"),
            "sliceNameTemplate": obj.get("sliceNameTemplate"),
            "timeSeriesQuery": TimeSeriesQuery.from_dict(obj["timeSeriesQuery"]) if obj.get("timeSeriesQuery") is not None else None
        })
        return _obj



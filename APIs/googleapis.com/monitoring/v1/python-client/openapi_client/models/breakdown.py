# coding: utf-8

"""
    Cloud Monitoring API

    Manages your Cloud Monitoring data and configurations.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.aggregation_function import AggregationFunction
from typing import Optional, Set
from typing_extensions import Self

class Breakdown(BaseModel):
    """
    Preview: A breakdown is an aggregation applied to the measures over a specified column. A breakdown can result in multiple series across a category for the provided measure. This is a preview feature and may be subject to change before final release.
    """ # noqa: E501
    aggregation_function: Optional[AggregationFunction] = Field(default=None, alias="aggregationFunction")
    column: Optional[StrictStr] = Field(default=None, description="Required. The name of the column in the dataset containing the breakdown values.")
    limit: Optional[StrictInt] = Field(default=None, description="Required. A limit to the number of breakdowns. If set to zero then all possible breakdowns are applied. The list of breakdowns is dependent on the value of the sort_order field.")
    sort_order: Optional[StrictStr] = Field(default=None, description="Required. The sort order is applied to the values of the breakdown column.", alias="sortOrder")
    __properties: ClassVar[List[str]] = ["aggregationFunction", "column", "limit", "sortOrder"]

    @field_validator('sort_order')
    def sort_order_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['SORT_ORDER_UNSPECIFIED', 'SORT_ORDER_NONE', 'SORT_ORDER_ASCENDING', 'SORT_ORDER_DESCENDING']):
            raise ValueError("must be one of enum values ('SORT_ORDER_UNSPECIFIED', 'SORT_ORDER_NONE', 'SORT_ORDER_ASCENDING', 'SORT_ORDER_DESCENDING')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Breakdown from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of aggregation_function
        if self.aggregation_function:
            _dict['aggregationFunction'] = self.aggregation_function.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Breakdown from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "aggregationFunction": AggregationFunction.from_dict(obj["aggregationFunction"]) if obj.get("aggregationFunction") is not None else None,
            "column": obj.get("column"),
            "limit": obj.get("limit"),
            "sortOrder": obj.get("sortOrder")
        })
        return _obj



# coding: utf-8

"""
    Cloud Monitoring API

    Manages your Cloud Monitoring data and configurations.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.ops_analytics_query import OpsAnalyticsQuery
from openapi_client.models.time_series_filter import TimeSeriesFilter
from openapi_client.models.time_series_filter_ratio import TimeSeriesFilterRatio
from typing import Optional, Set
from typing_extensions import Self

class TimeSeriesQuery(BaseModel):
    """
    TimeSeriesQuery collects the set of supported methods for querying time series data from the Stackdriver metrics API.
    """ # noqa: E501
    ops_analytics_query: Optional[OpsAnalyticsQuery] = Field(default=None, alias="opsAnalyticsQuery")
    output_full_duration: Optional[StrictBool] = Field(default=None, description="Optional. If set, Cloud Monitoring will treat the full query duration as the alignment period so that there will be only 1 output value.*Note: This could override the configured alignment period except for the cases where a series of data points are expected, like - XyChart - Scorecard's spark chart", alias="outputFullDuration")
    prometheus_query: Optional[StrictStr] = Field(default=None, description="A query used to fetch time series with PromQL.", alias="prometheusQuery")
    time_series_filter: Optional[TimeSeriesFilter] = Field(default=None, alias="timeSeriesFilter")
    time_series_filter_ratio: Optional[TimeSeriesFilterRatio] = Field(default=None, alias="timeSeriesFilterRatio")
    time_series_query_language: Optional[StrictStr] = Field(default=None, description="A query used to fetch time series with MQL.", alias="timeSeriesQueryLanguage")
    unit_override: Optional[StrictStr] = Field(default=None, description="The unit of data contained in fetched time series. If non-empty, this unit will override any unit that accompanies fetched data. The format is the same as the unit (https://cloud.google.com/monitoring/api/ref_v3/rest/v3/projects.metricDescriptors) field in MetricDescriptor.", alias="unitOverride")
    __properties: ClassVar[List[str]] = ["opsAnalyticsQuery", "outputFullDuration", "prometheusQuery", "timeSeriesFilter", "timeSeriesFilterRatio", "timeSeriesQueryLanguage", "unitOverride"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of TimeSeriesQuery from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of ops_analytics_query
        if self.ops_analytics_query:
            _dict['opsAnalyticsQuery'] = self.ops_analytics_query.to_dict()
        # override the default output from pydantic by calling `to_dict()` of time_series_filter
        if self.time_series_filter:
            _dict['timeSeriesFilter'] = self.time_series_filter.to_dict()
        # override the default output from pydantic by calling `to_dict()` of time_series_filter_ratio
        if self.time_series_filter_ratio:
            _dict['timeSeriesFilterRatio'] = self.time_series_filter_ratio.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of TimeSeriesQuery from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "opsAnalyticsQuery": OpsAnalyticsQuery.from_dict(obj["opsAnalyticsQuery"]) if obj.get("opsAnalyticsQuery") is not None else None,
            "outputFullDuration": obj.get("outputFullDuration"),
            "prometheusQuery": obj.get("prometheusQuery"),
            "timeSeriesFilter": TimeSeriesFilter.from_dict(obj["timeSeriesFilter"]) if obj.get("timeSeriesFilter") is not None else None,
            "timeSeriesFilterRatio": TimeSeriesFilterRatio.from_dict(obj["timeSeriesFilterRatio"]) if obj.get("timeSeriesFilterRatio") is not None else None,
            "timeSeriesQueryLanguage": obj.get("timeSeriesQueryLanguage"),
            "unitOverride": obj.get("unitOverride")
        })
        return _obj



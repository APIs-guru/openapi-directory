# coding: utf-8

"""
    Vertex AI API

    Train high-quality custom machine learning models with minimal machine learning expertise and effort.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.learning_genai_root_routing_decision_metadata_token_length_based_model_input_token_metadata import LearningGenaiRootRoutingDecisionMetadataTokenLengthBasedModelInputTokenMetadata

class TestLearningGenaiRootRoutingDecisionMetadataTokenLengthBasedModelInputTokenMetadata(unittest.TestCase):
    """LearningGenaiRootRoutingDecisionMetadataTokenLengthBasedModelInputTokenMetadata unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> LearningGenaiRootRoutingDecisionMetadataTokenLengthBasedModelInputTokenMetadata:
        """Test LearningGenaiRootRoutingDecisionMetadataTokenLengthBasedModelInputTokenMetadata
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `LearningGenaiRootRoutingDecisionMetadataTokenLengthBasedModelInputTokenMetadata`
        """
        model = LearningGenaiRootRoutingDecisionMetadataTokenLengthBasedModelInputTokenMetadata()
        if include_optional:
            return LearningGenaiRootRoutingDecisionMetadataTokenLengthBasedModelInputTokenMetadata(
                computed_input_token_length = 56,
                model_id = ''
            )
        else:
            return LearningGenaiRootRoutingDecisionMetadataTokenLengthBasedModelInputTokenMetadata(
        )
        """

    def testLearningGenaiRootRoutingDecisionMetadataTokenLengthBasedModelInputTokenMetadata(self):
        """Test LearningGenaiRootRoutingDecisionMetadataTokenLengthBasedModelInputTokenMetadata"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

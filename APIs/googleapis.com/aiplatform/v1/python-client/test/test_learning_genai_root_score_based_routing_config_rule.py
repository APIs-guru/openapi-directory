# coding: utf-8

"""
    Vertex AI API

    Train high-quality custom machine learning models with minimal machine learning expertise and effort.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.learning_genai_root_score_based_routing_config_rule import LearningGenaiRootScoreBasedRoutingConfigRule

class TestLearningGenaiRootScoreBasedRoutingConfigRule(unittest.TestCase):
    """LearningGenaiRootScoreBasedRoutingConfigRule unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> LearningGenaiRootScoreBasedRoutingConfigRule:
        """Test LearningGenaiRootScoreBasedRoutingConfigRule
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `LearningGenaiRootScoreBasedRoutingConfigRule`
        """
        model = LearningGenaiRootScoreBasedRoutingConfigRule()
        if include_optional:
            return LearningGenaiRootScoreBasedRoutingConfigRule(
                equal_or_greater_than = openapi_client.models.learning_genai_root_score.LearningGenaiRootScore(
                    calculation_type = openapi_client.models.learning_genai_root_calculation_type.LearningGenaiRootCalculationType(
                        score_type = 'TYPE_UNKNOWN', 
                        weights = 1.337, ), 
                    internal_metadata = openapi_client.models.learning_genai_root_internal_metadata.LearningGenaiRootInternalMetadata(
                        scored_tokens = [
                            openapi_client.models.learning_genai_root_scored_token.LearningGenaiRootScoredToken(
                                end_token_score = 1.337, 
                                score = 1.337, 
                                token = '', )
                            ], ), 
                    threshold_type = openapi_client.models.learning_genai_root_threshold_type.LearningGenaiRootThresholdType(
                        score_type = 'TYPE_UNKNOWN', 
                        threshold = 1.337, ), 
                    tokens_and_logprob_per_decoding_step = openapi_client.models.learning_genai_root_tokens_and_log_prob_per_decoding_step.LearningGenaiRootTokensAndLogProbPerDecodingStep(
                        chosen_candidates = [
                            openapi_client.models.learning_genai_root_tokens_and_log_prob_per_decoding_step_candidate.LearningGenaiRootTokensAndLogProbPerDecodingStepCandidate(
                                log_probability = 1.337, 
                                token = '', )
                            ], 
                        top_candidates = [
                            openapi_client.models.learning_genai_root_tokens_and_log_prob_per_decoding_step_top_candidates.LearningGenaiRootTokensAndLogProbPerDecodingStepTopCandidates(
                                candidates = [
                                    openapi_client.models.learning_genai_root_tokens_and_log_prob_per_decoding_step_candidate.LearningGenaiRootTokensAndLogProbPerDecodingStepCandidate(
                                        log_probability = 1.337, 
                                        token = '', )
                                    ], )
                            ], ), 
                    value = 1.337, ),
                less_than = openapi_client.models.learning_genai_root_score.LearningGenaiRootScore(
                    calculation_type = openapi_client.models.learning_genai_root_calculation_type.LearningGenaiRootCalculationType(
                        score_type = 'TYPE_UNKNOWN', 
                        weights = 1.337, ), 
                    internal_metadata = openapi_client.models.learning_genai_root_internal_metadata.LearningGenaiRootInternalMetadata(
                        scored_tokens = [
                            openapi_client.models.learning_genai_root_scored_token.LearningGenaiRootScoredToken(
                                end_token_score = 1.337, 
                                score = 1.337, 
                                token = '', )
                            ], ), 
                    threshold_type = openapi_client.models.learning_genai_root_threshold_type.LearningGenaiRootThresholdType(
                        score_type = 'TYPE_UNKNOWN', 
                        threshold = 1.337, ), 
                    tokens_and_logprob_per_decoding_step = openapi_client.models.learning_genai_root_tokens_and_log_prob_per_decoding_step.LearningGenaiRootTokensAndLogProbPerDecodingStep(
                        chosen_candidates = [
                            openapi_client.models.learning_genai_root_tokens_and_log_prob_per_decoding_step_candidate.LearningGenaiRootTokensAndLogProbPerDecodingStepCandidate(
                                log_probability = 1.337, 
                                token = '', )
                            ], 
                        top_candidates = [
                            openapi_client.models.learning_genai_root_tokens_and_log_prob_per_decoding_step_top_candidates.LearningGenaiRootTokensAndLogProbPerDecodingStepTopCandidates(
                                candidates = [
                                    openapi_client.models.learning_genai_root_tokens_and_log_prob_per_decoding_step_candidate.LearningGenaiRootTokensAndLogProbPerDecodingStepCandidate(
                                        log_probability = 1.337, 
                                        token = '', )
                                    ], )
                            ], ), 
                    value = 1.337, ),
                model_config_id = ''
            )
        else:
            return LearningGenaiRootScoreBasedRoutingConfigRule(
        )
        """

    def testLearningGenaiRootScoreBasedRoutingConfigRule(self):
        """Test LearningGenaiRootScoreBasedRoutingConfigRule"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

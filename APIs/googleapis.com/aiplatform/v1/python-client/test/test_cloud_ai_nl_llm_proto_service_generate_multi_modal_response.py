# coding: utf-8

"""
    Vertex AI API

    Train high-quality custom machine learning models with minimal machine learning expertise and effort.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.cloud_ai_nl_llm_proto_service_generate_multi_modal_response import CloudAiNlLlmProtoServiceGenerateMultiModalResponse

class TestCloudAiNlLlmProtoServiceGenerateMultiModalResponse(unittest.TestCase):
    """CloudAiNlLlmProtoServiceGenerateMultiModalResponse unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> CloudAiNlLlmProtoServiceGenerateMultiModalResponse:
        """Test CloudAiNlLlmProtoServiceGenerateMultiModalResponse
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `CloudAiNlLlmProtoServiceGenerateMultiModalResponse`
        """
        model = CloudAiNlLlmProtoServiceGenerateMultiModalResponse()
        if include_optional:
            return CloudAiNlLlmProtoServiceGenerateMultiModalResponse(
                candidates = [
                    openapi_client.models.cloud_ai_nl_llm_proto_service_candidate.CloudAiNlLlmProtoServiceCandidate(
                        citation_metadata = openapi_client.models.cloud_ai_nl_llm_proto_service_citation_metadata.CloudAiNlLlmProtoServiceCitationMetadata(
                            citations = [
                                openapi_client.models.cloud_ai_nl_llm_proto_service_citation.CloudAiNlLlmProtoServiceCitation(
                                    end_index = 56, 
                                    license = '', 
                                    publication_date = openapi_client.models.google_type_date.GoogleTypeDate(
                                        day = 56, 
                                        month = 56, 
                                        year = 56, ), 
                                    start_index = 56, 
                                    title = '', 
                                    uri = '', )
                                ], ), 
                        content = openapi_client.models.cloud_ai_nl_llm_proto_service_content.CloudAiNlLlmProtoServiceContent(
                            parts = [
                                openapi_client.models.cloud_ai_nl_llm_proto_service_part.CloudAiNlLlmProtoServicePart(
                                    file_data = openapi_client.models.cloud_ai_nl_llm_proto_service_part_file_data.CloudAiNlLlmProtoServicePartFileData(
                                        file_uri = '', 
                                        mime_type = '', ), 
                                    function_call = openapi_client.models.cloud_ai_nl_llm_proto_service_function_call.CloudAiNlLlmProtoServiceFunctionCall(
                                        args = {
                                            'key' : null
                                            }, 
                                        name = '', ), 
                                    function_response = openapi_client.models.cloud_ai_nl_llm_proto_service_function_response.CloudAiNlLlmProtoServiceFunctionResponse(
                                        name = '', 
                                        response = {
                                            'key' : null
                                            }, ), 
                                    inline_data = openapi_client.models.cloud_ai_nl_llm_proto_service_part_blob.CloudAiNlLlmProtoServicePartBlob(
                                        data = 'YQ==', 
                                        mime_type = '', 
                                        original_file_data = openapi_client.models.cloud_ai_nl_llm_proto_service_part_file_data.CloudAiNlLlmProtoServicePartFileData(
                                            file_uri = '', 
                                            mime_type = '', ), ), 
                                    text = '', 
                                    video_metadata = openapi_client.models.cloud_ai_nl_llm_proto_service_part_video_metadata.CloudAiNlLlmProtoServicePartVideoMetadata(
                                        end_offset = '', 
                                        start_offset = '', ), )
                                ], 
                            role = '', ), 
                        finish_message = '', 
                        finish_reason = 'FINISH_REASON_UNSPECIFIED', 
                        grounding_metadata = openapi_client.models.learning_genai_root_grounding_metadata.LearningGenaiRootGroundingMetadata(
                            grounding_cancelled = True, 
                            search_queries = [
                                ''
                                ], ), 
                        index = 56, 
                        safety_ratings = [
                            openapi_client.models.cloud_ai_nl_llm_proto_service_safety_rating.CloudAiNlLlmProtoServiceSafetyRating(
                                blocked = True, 
                                category = 'HARM_CATEGORY_UNSPECIFIED', 
                                influential_terms = [
                                    openapi_client.models.cloud_ai_nl_llm_proto_service_safety_rating_influential_term.CloudAiNlLlmProtoServiceSafetyRatingInfluentialTerm(
                                        begin_offset = 56, 
                                        confidence = 1.337, 
                                        source = 'SOURCE_UNSPECIFIED', 
                                        term = '', )
                                    ], 
                                probability = 'HARM_PROBABILITY_UNSPECIFIED', 
                                probability_score = 1.337, 
                                severity = 'HARM_SEVERITY_UNSPECIFIED', 
                                severity_score = 1.337, )
                            ], )
                    ],
                debug_metadata = openapi_client.models.cloud_ai_nl_llm_proto_service_message_metadata.CloudAiNlLlmProtoServiceMessageMetadata(
                    input_filter_info = openapi_client.models.learning_serving_llm_message_metadata.LearningServingLlmMessageMetadata(
                        classifier_summary = openapi_client.models.learning_genai_root_classifier_output_summary.LearningGenaiRootClassifierOutputSummary(
                            metrics = [
                                openapi_client.models.learning_genai_root_metric_output.LearningGenaiRootMetricOutput(
                                    debug = '', 
                                    name = '', 
                                    numeric_value = 1.337, 
                                    status = openapi_client.models.util_status_proto.UtilStatusProto(
                                        canonical_code = 56, 
                                        code = 56, 
                                        message = '', 
                                        message_set = openapi_client.models.proto2_bridge_message_set.Proto2BridgeMessageSet(), 
                                        space = '', ), 
                                    string_value = '', )
                                ], 
                            rule_output = openapi_client.models.learning_genai_root_rule_output.LearningGenaiRootRuleOutput(
                                decision = 'NO_MATCH', 
                                name = '', ), 
                            rule_outputs = [
                                openapi_client.models.learning_genai_root_rule_output.LearningGenaiRootRuleOutput(
                                    decision = 'NO_MATCH', 
                                    name = '', )
                                ], ), 
                        codey_output = openapi_client.models.learning_genai_root_codey_output.LearningGenaiRootCodeyOutput(
                            codey_chat_metadata = openapi_client.models.learning_genai_root_codey_chat_metadata.LearningGenaiRootCodeyChatMetadata(
                                code_language = 'UNSPECIFIED', ), 
                            codey_completion_metadata = openapi_client.models.learning_genai_root_codey_completion_metadata.LearningGenaiRootCodeyCompletionMetadata(
                                checkpoints = [
                                    openapi_client.models.learning_genai_root_codey_checkpoint.LearningGenaiRootCodeyCheckpoint(
                                        codey_truncator_metadata = openapi_client.models.learning_genai_root_codey_truncator_metadata.LearningGenaiRootCodeyTruncatorMetadata(
                                            cutoff_index = 56, 
                                            truncated_text = '', ), 
                                        current_sample = '', 
                                        post_inference_step = 'STEP_POST_PROCESSING_STEP_UNSPECIFIED', )
                                    ], ), ), 
                        current_stream_text_length = 56, 
                        deleted = True, 
                        filter_meta = [
                            openapi_client.models.learning_genai_root_filter_metadata.LearningGenaiRootFilterMetadata(
                                confidence = 'FILTER_CONFIDENCE_UNKNOWN', 
                                debug_info = openapi_client.models.learning_genai_root_filter_metadata_filter_debug_info.LearningGenaiRootFilterMetadataFilterDebugInfo(
                                    classifier_output = openapi_client.models.learning_genai_root_classifier_output.LearningGenaiRootClassifierOutput(
                                        state = openapi_client.models.learning_genai_root_classifier_state.LearningGenaiRootClassifierState(
                                            data_provider_output = [
                                                openapi_client.models.learning_genai_root_data_provider_output.LearningGenaiRootDataProviderOutput(
                                                    name = '', )
                                                ], 
                                            metric_output = [
                                                openapi_client.models.learning_genai_root_metric_output.LearningGenaiRootMetricOutput(
                                                    debug = '', 
                                                    name = '', 
                                                    numeric_value = 1.337, 
                                                    string_value = '', )
                                                ], ), ), 
                                    default_metadata = '', 
                                    language_filter_result = openapi_client.models.learning_genai_root_language_filter_result.LearningGenaiRootLanguageFilterResult(
                                        allowed = True, 
                                        detected_language = '', 
                                        detected_language_probability = 1.337, ), 
                                    rai_output = openapi_client.models.learning_genai_root_rai_output.LearningGenaiRootRAIOutput(
                                        allowed = True, 
                                        harm = openapi_client.models.learning_genai_root_harm.LearningGenaiRootHarm(
                                            contextual_dangerous = True, 
                                            csam = True, 
                                            fringe = True, 
                                            grail_image_harm_type = openapi_client.models.learning_genai_root_harm_grail_image_harm_type.LearningGenaiRootHarmGrailImageHarmType(
                                                image_harm_type = [
                                                    'IMAGE_HARM_TYPE_UNSPECIFIED'
                                                    ], ), 
                                            grail_text_harm_type = openapi_client.models.learning_genai_root_harm_grail_text_harm_type.LearningGenaiRootHarmGrailTextHarmType(
                                                harm_type = [
                                                    'HARM_TYPE_UNSPECIFIED'
                                                    ], ), 
                                            image_csam = True, 
                                            image_pedo = True, 
                                            image_porn = True, 
                                            image_violence = True, 
                                            pqc = True, 
                                            safetycat = openapi_client.models.learning_genai_root_harm_safety_cat_categories.LearningGenaiRootHarmSafetyCatCategories(
                                                categories = [
                                                    'SAFETYCAT_CATEGORY_UNSPECIFIED'
                                                    ], ), 
                                            spii = openapi_client.models.learning_genai_root_harm_spii_filter.LearningGenaiRootHarmSpiiFilter(
                                                us_bank_routing_micr = True, 
                                                us_employer_identification_number = True, 
                                                us_social_security_number = True, ), 
                                            threshold = 1.337, 
                                            video_frame_csam = True, 
                                            video_frame_pedo = True, 
                                            video_frame_porn = True, 
                                            video_frame_violence = True, ), 
                                        name = '', 
                                        score = 1.337, ), 
                                    rai_result = openapi_client.models.cloud_ai_nl_llm_proto_service_rai_result.CloudAiNlLlmProtoServiceRaiResult(
                                        aida_recitation_result = openapi_client.models.language_labs_aida_trust_recitation_proto_recitation_result.LanguageLabsAidaTrustRecitationProtoRecitationResult(
                                            dynamic_segment_results = [
                                                openapi_client.models.language_labs_aida_trust_recitation_proto_segment_result.LanguageLabsAidaTrustRecitationProtoSegmentResult(
                                                    attribution_dataset = 'DATASET_UNSPECIFIED', 
                                                    display_attribution_message = '', 
                                                    doc_attribution = openapi_client.models.language_labs_aida_trust_recitation_proto_doc_attribution.LanguageLabsAidaTrustRecitationProtoDocAttribution(
                                                        amarna_id = '', 
                                                        arxiv_id = '', 
                                                        author = '', 
                                                        bibkey = '', 
                                                        biorxiv_id = '', 
                                                        book_title = '', 
                                                        book_volume_id = '', 
                                                        category = 'CATEGORY_UNSPECIFIED', 
                                                        conversation_id = '', 
                                                        dataset = 'DATASET_UNSPECIFIED', 
                                                        filepath = '', 
                                                        gemini_id = '', 
                                                        gnews_article_title = '', 
                                                        goodall_example_id = '', 
                                                        is_opt_out = True, 
                                                        is_prompt = True, 
                                                        lamda_example_id = '', 
                                                        license = '', 
                                                        meena_conversation_id = '', 
                                                        natural_language_code = '', 
                                                        no_attribution = True, 
                                                        podcast_utterance_id = '', 
                                                        publication_date = openapi_client.models.google_type_date.GoogleTypeDate(
                                                            day = 56, 
                                                            month = 56, 
                                                            year = 56, ), 
                                                        quality_score_experiment_only = 1.337, 
                                                        repo = '', 
                                                        url = '', 
                                                        volume_id = '', 
                                                        wikipedia_article_title = '', 
                                                        youtube_video_id = '', ), 
                                                    doc_occurrences = 56, 
                                                    end_index = 56, 
                                                    raw_text = '', 
                                                    segment_recitation_action = 'ACTION_UNSPECIFIED', 
                                                    start_index = 56, )
                                                ], 
                                            recitation_action = 'ACTION_UNSPECIFIED', 
                                            training_segment_results = [
                                                openapi_client.models.language_labs_aida_trust_recitation_proto_segment_result.LanguageLabsAidaTrustRecitationProtoSegmentResult(
                                                    attribution_dataset = 'DATASET_UNSPECIFIED', 
                                                    display_attribution_message = '', 
                                                    doc_occurrences = 56, 
                                                    end_index = 56, 
                                                    raw_text = '', 
                                                    segment_recitation_action = 'ACTION_UNSPECIFIED', 
                                                    start_index = 56, )
                                                ], ), 
                                        blocked = True, 
                                        error_codes = [
                                            56
                                            ], 
                                        filtered = True, 
                                        rai_signals = [
                                            openapi_client.models.cloud_ai_nl_llm_proto_service_rai_signal.CloudAiNlLlmProtoServiceRaiSignal(
                                                confidence = 'CONFIDENCE_UNSPECIFIED', 
                                                flagged = True, 
                                                rai_category = 'RAI_CATEGORY_UNSPECIFIED', 
                                                score = 1.337, )
                                            ], 
                                        triggered_blocklist = True, 
                                        triggered_recitation = True, 
                                        triggered_safety_filter = True, ), 
                                    rai_signal = openapi_client.models.cloud_ai_nl_llm_proto_service_rai_signal.CloudAiNlLlmProtoServiceRaiSignal(
                                        confidence = 'CONFIDENCE_UNSPECIFIED', 
                                        flagged = True, 
                                        rai_category = 'RAI_CATEGORY_UNSPECIFIED', 
                                        score = 1.337, ), 
                                    stream_recitation_result = openapi_client.models.language_labs_aida_trust_recitation_proto_stream_recitation_result.LanguageLabsAidaTrustRecitationProtoStreamRecitationResult(
                                        fully_checked_text_index = 56, 
                                        recitation_action = 'ACTION_UNSPECIFIED', ), 
                                    takedown_result = openapi_client.models.learning_genai_root_takedown_result.LearningGenaiRootTakedownResult(
                                        allowed = True, 
                                        regex_takedown_result = openapi_client.models.learning_genai_root_regex_takedown_result.LearningGenaiRootRegexTakedownResult(
                                            allowed = True, 
                                            takedown_regex = '', ), 
                                        request_response_takedown_result = openapi_client.models.learning_genai_root_request_response_takedown_result.LearningGenaiRootRequestResponseTakedownResult(
                                            allowed = True, 
                                            request_takedown_regex = '', 
                                            response_takedown_regex = '', ), 
                                        similarity_takedown_result = openapi_client.models.learning_genai_root_similarity_takedown_result.LearningGenaiRootSimilarityTakedownResult(
                                            allowed = True, 
                                            scored_phrases = [
                                                openapi_client.models.learning_genai_root_scored_similarity_takedown_phrase.LearningGenaiRootScoredSimilarityTakedownPhrase(
                                                    phrase = openapi_client.models.learning_genai_root_similarity_takedown_phrase.LearningGenaiRootSimilarityTakedownPhrase(
                                                        blocked_phrase = '', ), 
                                                    similarity_score = 1.337, )
                                                ], ), ), 
                                    toxicity_result = openapi_client.models.learning_genai_root_toxicity_result.LearningGenaiRootToxicityResult(
                                        signals = [
                                            openapi_client.models.learning_genai_root_toxicity_signal.LearningGenaiRootToxicitySignal(
                                                allowed = True, 
                                                label = 'LABEL_UNSPECIFIED', 
                                                score = 1.337, )
                                            ], ), ), 
                                fallback = '', 
                                info = '', 
                                name = '', 
                                reason = 'FILTER_REASON_UNKNOWN', 
                                text = '', )
                            ], 
                        final_message_score = openapi_client.models.learning_genai_root_score.LearningGenaiRootScore(
                            calculation_type = openapi_client.models.learning_genai_root_calculation_type.LearningGenaiRootCalculationType(
                                score_type = 'TYPE_UNKNOWN', 
                                weights = 1.337, ), 
                            internal_metadata = openapi_client.models.learning_genai_root_internal_metadata.LearningGenaiRootInternalMetadata(
                                scored_tokens = [
                                    openapi_client.models.learning_genai_root_scored_token.LearningGenaiRootScoredToken(
                                        end_token_score = 1.337, 
                                        score = 1.337, 
                                        token = '', )
                                    ], ), 
                            threshold_type = openapi_client.models.learning_genai_root_threshold_type.LearningGenaiRootThresholdType(
                                score_type = 'TYPE_UNKNOWN', 
                                threshold = 1.337, ), 
                            tokens_and_logprob_per_decoding_step = openapi_client.models.learning_genai_root_tokens_and_log_prob_per_decoding_step.LearningGenaiRootTokensAndLogProbPerDecodingStep(
                                chosen_candidates = [
                                    openapi_client.models.learning_genai_root_tokens_and_log_prob_per_decoding_step_candidate.LearningGenaiRootTokensAndLogProbPerDecodingStepCandidate(
                                        log_probability = 1.337, 
                                        token = '', )
                                    ], 
                                top_candidates = [
                                    openapi_client.models.learning_genai_root_tokens_and_log_prob_per_decoding_step_top_candidates.LearningGenaiRootTokensAndLogProbPerDecodingStepTopCandidates(
                                        candidates = [
                                            openapi_client.models.learning_genai_root_tokens_and_log_prob_per_decoding_step_candidate.LearningGenaiRootTokensAndLogProbPerDecodingStepCandidate(
                                                log_probability = 1.337, 
                                                token = '', )
                                            ], )
                                    ], ), 
                            value = 1.337, ), 
                        finish_reason = 'UNSPECIFIED', 
                        grounding_metadata = openapi_client.models.learning_genai_root_grounding_metadata.LearningGenaiRootGroundingMetadata(
                            citations = [
                                openapi_client.models.learning_genai_root_grounding_metadata_citation.LearningGenaiRootGroundingMetadataCitation(
                                    end_index = 56, 
                                    fact_index = 56, 
                                    score = 1.337, 
                                    start_index = 56, )
                                ], 
                            grounding_cancelled = True, 
                            search_queries = [
                                ''
                                ], ), 
                        is_code = True, 
                        is_fallback = True, 
                        langid_result = openapi_client.models.nlp_saft_lang_id_result.NlpSaftLangIdResult(
                            model_version = 'VERSION_UNSPECIFIED', 
                            predictions = [
                                openapi_client.models.nlp_saft_language_span.NlpSaftLanguageSpan(
                                    end = 56, 
                                    language_code = '', 
                                    locales = openapi_client.models.nlp_saft_lang_id_locales_result.NlpSaftLangIdLocalesResult(), 
                                    probability = 1.337, 
                                    start = 56, )
                                ], 
                            span_predictions = [
                                openapi_client.models.nlp_saft_language_span_sequence.NlpSaftLanguageSpanSequence(
                                    language_spans = [
                                        openapi_client.models.nlp_saft_language_span.NlpSaftLanguageSpan(
                                            end = 56, 
                                            language_code = '', 
                                            probability = 1.337, 
                                            start = 56, )
                                        ], 
                                    probability = 1.337, )
                                ], ), 
                        language = '', 
                        lm_prefix = '', 
                        original_text = '', 
                        per_stream_decoded_token_count = 56, 
                        rai_outputs = [
                            openapi_client.models.learning_genai_root_rai_output.LearningGenaiRootRAIOutput(
                                allowed = True, 
                                name = '', 
                                score = 1.337, )
                            ], 
                        recitation_result = openapi_client.models.learning_genai_recitation_recitation_result.LearningGenaiRecitationRecitationResult(
                            recitation_action = 'ACTION_UNSPECIFIED', ), 
                        return_token_count = 56, 
                        scores = [
                            openapi_client.models.learning_genai_root_score.LearningGenaiRootScore(
                                value = 1.337, )
                            ], 
                        stream_terminated = True, 
                        total_decoded_token_count = 56, 
                        translated_user_prompts = [
                            ''
                            ], 
                        vertex_rai_result = openapi_client.models.cloud_ai_nl_llm_proto_service_rai_result.CloudAiNlLlmProtoServiceRaiResult(
                            blocked = True, 
                            filtered = True, 
                            triggered_blocklist = True, 
                            triggered_recitation = True, 
                            triggered_safety_filter = True, ), ), 
                    model_routing_decision = openapi_client.models.learning_genai_root_routing_decision.LearningGenaiRootRoutingDecision(
                        metadata = openapi_client.models.learning_genai_root_routing_decision_metadata.LearningGenaiRootRoutingDecisionMetadata(
                            score_based_routing_metadata = openapi_client.models.learning_genai_root_routing_decision_metadata_score_based.LearningGenaiRootRoutingDecisionMetadataScoreBased(
                                matched_rule = openapi_client.models.learning_genai_root_score_based_routing_config_rule.LearningGenaiRootScoreBasedRoutingConfigRule(
                                    equal_or_greater_than = , 
                                    less_than = , 
                                    model_config_id = '', ), 
                                score = , 
                                used_default_fallback = True, ), 
                            token_length_based_routing_metadata = openapi_client.models.learning_genai_root_routing_decision_metadata_token_length_based.LearningGenaiRootRoutingDecisionMetadataTokenLengthBased(
                                model_input_token_metadata = [
                                    openapi_client.models.learning_genai_root_routing_decision_metadata_token_length_based_model_input_token_metadata.LearningGenaiRootRoutingDecisionMetadataTokenLengthBasedModelInputTokenMetadata(
                                        computed_input_token_length = 56, 
                                        model_id = '', )
                                    ], 
                                model_max_token_metadata = [
                                    openapi_client.models.learning_genai_root_routing_decision_metadata_token_length_based_model_max_token_metadata.LearningGenaiRootRoutingDecisionMetadataTokenLengthBasedModelMaxTokenMetadata(
                                        max_num_input_tokens = 56, 
                                        max_num_output_tokens = 56, 
                                        model_id = '', )
                                    ], ), ), 
                        model_config_id = '', ), 
                    output_filter_info = [
                        openapi_client.models.learning_serving_llm_message_metadata.LearningServingLlmMessageMetadata(
                            current_stream_text_length = 56, 
                            deleted = True, 
                            finish_reason = 'UNSPECIFIED', 
                            is_code = True, 
                            is_fallback = True, 
                            language = '', 
                            lm_prefix = '', 
                            original_text = '', 
                            per_stream_decoded_token_count = 56, 
                            return_token_count = 56, 
                            stream_terminated = True, 
                            total_decoded_token_count = 56, )
                        ], ),
                facts = [
                    openapi_client.models.cloud_ai_nl_llm_proto_service_fact.CloudAiNlLlmProtoServiceFact(
                        query = '', 
                        summary = '', 
                        title = '', 
                        url = '', )
                    ],
                prompt_feedback = openapi_client.models.cloud_ai_nl_llm_proto_service_prompt_feedback.CloudAiNlLlmProtoServicePromptFeedback(
                    block_reason = 'BLOCKED_REASON_UNSPECIFIED', 
                    block_reason_message = '', 
                    safety_ratings = [
                        openapi_client.models.cloud_ai_nl_llm_proto_service_safety_rating.CloudAiNlLlmProtoServiceSafetyRating(
                            blocked = True, 
                            category = 'HARM_CATEGORY_UNSPECIFIED', 
                            influential_terms = [
                                openapi_client.models.cloud_ai_nl_llm_proto_service_safety_rating_influential_term.CloudAiNlLlmProtoServiceSafetyRatingInfluentialTerm(
                                    begin_offset = 56, 
                                    confidence = 1.337, 
                                    source = 'SOURCE_UNSPECIFIED', 
                                    term = '', )
                                ], 
                            probability = 'HARM_PROBABILITY_UNSPECIFIED', 
                            probability_score = 1.337, 
                            severity = 'HARM_SEVERITY_UNSPECIFIED', 
                            severity_score = 1.337, )
                        ], ),
                reporting_metrics = openapi_client.models.intelligence_cloud_automl_xps_reporting_metrics.IntelligenceCloudAutomlXpsReportingMetrics(
                    effective_training_duration = '', 
                    metric_entries = [
                        openapi_client.models.intelligence_cloud_automl_xps_metric_entry.IntelligenceCloudAutomlXpsMetricEntry(
                            argentum_metric_id = '', 
                            double_value = 1.337, 
                            int64_value = '', 
                            metric_name = '', 
                            system_labels = [
                                openapi_client.models.intelligence_cloud_automl_xps_metric_entry_label.IntelligenceCloudAutomlXpsMetricEntryLabel(
                                    label_name = '', 
                                    label_value = '', )
                                ], )
                        ], ),
                usage_metadata = openapi_client.models.cloud_ai_nl_llm_proto_service_usage_metadata.CloudAiNlLlmProtoServiceUsageMetadata(
                    candidates_token_count = 56, 
                    prompt_token_count = 56, 
                    total_token_count = 56, )
            )
        else:
            return CloudAiNlLlmProtoServiceGenerateMultiModalResponse(
        )
        """

    def testCloudAiNlLlmProtoServiceGenerateMultiModalResponse(self):
        """Test CloudAiNlLlmProtoServiceGenerateMultiModalResponse"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

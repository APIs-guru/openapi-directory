# coding: utf-8

"""
    Vertex AI API

    Train high-quality custom machine learning models with minimal machine learning expertise and effort.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.learning_genai_root_filter_metadata import LearningGenaiRootFilterMetadata

class TestLearningGenaiRootFilterMetadata(unittest.TestCase):
    """LearningGenaiRootFilterMetadata unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> LearningGenaiRootFilterMetadata:
        """Test LearningGenaiRootFilterMetadata
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `LearningGenaiRootFilterMetadata`
        """
        model = LearningGenaiRootFilterMetadata()
        if include_optional:
            return LearningGenaiRootFilterMetadata(
                confidence = 'FILTER_CONFIDENCE_UNKNOWN',
                debug_info = openapi_client.models.learning_genai_root_filter_metadata_filter_debug_info.LearningGenaiRootFilterMetadataFilterDebugInfo(
                    classifier_output = openapi_client.models.learning_genai_root_classifier_output.LearningGenaiRootClassifierOutput(
                        rule_output = openapi_client.models.learning_genai_root_rule_output.LearningGenaiRootRuleOutput(
                            decision = 'NO_MATCH', 
                            name = '', ), 
                        rule_outputs = [
                            openapi_client.models.learning_genai_root_rule_output.LearningGenaiRootRuleOutput(
                                decision = 'NO_MATCH', 
                                name = '', )
                            ], 
                        state = openapi_client.models.learning_genai_root_classifier_state.LearningGenaiRootClassifierState(
                            data_provider_output = [
                                openapi_client.models.learning_genai_root_data_provider_output.LearningGenaiRootDataProviderOutput(
                                    name = '', 
                                    status = openapi_client.models.util_status_proto.UtilStatusProto(
                                        canonical_code = 56, 
                                        code = 56, 
                                        message = '', 
                                        message_set = openapi_client.models.proto2_bridge_message_set.Proto2BridgeMessageSet(), 
                                        space = '', ), )
                                ], 
                            metric_output = [
                                openapi_client.models.learning_genai_root_metric_output.LearningGenaiRootMetricOutput(
                                    debug = '', 
                                    name = '', 
                                    numeric_value = 1.337, 
                                    string_value = '', )
                                ], ), ), 
                    default_metadata = '', 
                    language_filter_result = openapi_client.models.learning_genai_root_language_filter_result.LearningGenaiRootLanguageFilterResult(
                        allowed = True, 
                        detected_language = '', 
                        detected_language_probability = 1.337, ), 
                    rai_output = openapi_client.models.learning_genai_root_rai_output.LearningGenaiRootRAIOutput(
                        allowed = True, 
                        harm = openapi_client.models.learning_genai_root_harm.LearningGenaiRootHarm(
                            contextual_dangerous = True, 
                            csam = True, 
                            fringe = True, 
                            grail_image_harm_type = openapi_client.models.learning_genai_root_harm_grail_image_harm_type.LearningGenaiRootHarmGrailImageHarmType(
                                image_harm_type = [
                                    'IMAGE_HARM_TYPE_UNSPECIFIED'
                                    ], ), 
                            grail_text_harm_type = openapi_client.models.learning_genai_root_harm_grail_text_harm_type.LearningGenaiRootHarmGrailTextHarmType(
                                harm_type = [
                                    'HARM_TYPE_UNSPECIFIED'
                                    ], ), 
                            image_csam = True, 
                            image_pedo = True, 
                            image_porn = True, 
                            image_violence = True, 
                            pqc = True, 
                            safetycat = openapi_client.models.learning_genai_root_harm_safety_cat_categories.LearningGenaiRootHarmSafetyCatCategories(
                                categories = [
                                    'SAFETYCAT_CATEGORY_UNSPECIFIED'
                                    ], ), 
                            spii = openapi_client.models.learning_genai_root_harm_spii_filter.LearningGenaiRootHarmSpiiFilter(
                                us_bank_routing_micr = True, 
                                us_employer_identification_number = True, 
                                us_social_security_number = True, ), 
                            threshold = 1.337, 
                            video_frame_csam = True, 
                            video_frame_pedo = True, 
                            video_frame_porn = True, 
                            video_frame_violence = True, ), 
                        name = '', 
                        score = 1.337, ), 
                    rai_result = openapi_client.models.cloud_ai_nl_llm_proto_service_rai_result.CloudAiNlLlmProtoServiceRaiResult(
                        aida_recitation_result = openapi_client.models.language_labs_aida_trust_recitation_proto_recitation_result.LanguageLabsAidaTrustRecitationProtoRecitationResult(
                            dynamic_segment_results = [
                                openapi_client.models.language_labs_aida_trust_recitation_proto_segment_result.LanguageLabsAidaTrustRecitationProtoSegmentResult(
                                    attribution_dataset = 'DATASET_UNSPECIFIED', 
                                    display_attribution_message = '', 
                                    doc_attribution = openapi_client.models.language_labs_aida_trust_recitation_proto_doc_attribution.LanguageLabsAidaTrustRecitationProtoDocAttribution(
                                        amarna_id = '', 
                                        arxiv_id = '', 
                                        author = '', 
                                        bibkey = '', 
                                        biorxiv_id = '', 
                                        book_title = '', 
                                        book_volume_id = '', 
                                        category = 'CATEGORY_UNSPECIFIED', 
                                        conversation_id = '', 
                                        dataset = 'DATASET_UNSPECIFIED', 
                                        filepath = '', 
                                        gemini_id = '', 
                                        gnews_article_title = '', 
                                        goodall_example_id = '', 
                                        is_opt_out = True, 
                                        is_prompt = True, 
                                        lamda_example_id = '', 
                                        license = '', 
                                        meena_conversation_id = '', 
                                        natural_language_code = '', 
                                        no_attribution = True, 
                                        podcast_utterance_id = '', 
                                        publication_date = openapi_client.models.google_type_date.GoogleTypeDate(
                                            day = 56, 
                                            month = 56, 
                                            year = 56, ), 
                                        quality_score_experiment_only = 1.337, 
                                        repo = '', 
                                        url = '', 
                                        volume_id = '', 
                                        wikipedia_article_title = '', 
                                        youtube_video_id = '', ), 
                                    doc_occurrences = 56, 
                                    end_index = 56, 
                                    raw_text = '', 
                                    segment_recitation_action = 'ACTION_UNSPECIFIED', 
                                    start_index = 56, )
                                ], 
                            recitation_action = 'ACTION_UNSPECIFIED', 
                            training_segment_results = [
                                openapi_client.models.language_labs_aida_trust_recitation_proto_segment_result.LanguageLabsAidaTrustRecitationProtoSegmentResult(
                                    attribution_dataset = 'DATASET_UNSPECIFIED', 
                                    display_attribution_message = '', 
                                    doc_occurrences = 56, 
                                    end_index = 56, 
                                    raw_text = '', 
                                    segment_recitation_action = 'ACTION_UNSPECIFIED', 
                                    start_index = 56, )
                                ], ), 
                        blocked = True, 
                        error_codes = [
                            56
                            ], 
                        filtered = True, 
                        rai_signals = [
                            openapi_client.models.cloud_ai_nl_llm_proto_service_rai_signal.CloudAiNlLlmProtoServiceRaiSignal(
                                confidence = 'CONFIDENCE_UNSPECIFIED', 
                                flagged = True, 
                                rai_category = 'RAI_CATEGORY_UNSPECIFIED', 
                                score = 1.337, )
                            ], 
                        triggered_blocklist = True, 
                        triggered_recitation = True, 
                        triggered_safety_filter = True, ), 
                    rai_signal = openapi_client.models.cloud_ai_nl_llm_proto_service_rai_signal.CloudAiNlLlmProtoServiceRaiSignal(
                        confidence = 'CONFIDENCE_UNSPECIFIED', 
                        flagged = True, 
                        rai_category = 'RAI_CATEGORY_UNSPECIFIED', 
                        score = 1.337, ), 
                    stream_recitation_result = openapi_client.models.language_labs_aida_trust_recitation_proto_stream_recitation_result.LanguageLabsAidaTrustRecitationProtoStreamRecitationResult(
                        fully_checked_text_index = 56, 
                        recitation_action = 'ACTION_UNSPECIFIED', ), 
                    takedown_result = openapi_client.models.learning_genai_root_takedown_result.LearningGenaiRootTakedownResult(
                        allowed = True, 
                        regex_takedown_result = openapi_client.models.learning_genai_root_regex_takedown_result.LearningGenaiRootRegexTakedownResult(
                            allowed = True, 
                            takedown_regex = '', ), 
                        request_response_takedown_result = openapi_client.models.learning_genai_root_request_response_takedown_result.LearningGenaiRootRequestResponseTakedownResult(
                            allowed = True, 
                            request_takedown_regex = '', 
                            response_takedown_regex = '', ), 
                        similarity_takedown_result = openapi_client.models.learning_genai_root_similarity_takedown_result.LearningGenaiRootSimilarityTakedownResult(
                            allowed = True, 
                            scored_phrases = [
                                openapi_client.models.learning_genai_root_scored_similarity_takedown_phrase.LearningGenaiRootScoredSimilarityTakedownPhrase(
                                    phrase = openapi_client.models.learning_genai_root_similarity_takedown_phrase.LearningGenaiRootSimilarityTakedownPhrase(
                                        blocked_phrase = '', ), 
                                    similarity_score = 1.337, )
                                ], ), ), 
                    toxicity_result = openapi_client.models.learning_genai_root_toxicity_result.LearningGenaiRootToxicityResult(
                        signals = [
                            openapi_client.models.learning_genai_root_toxicity_signal.LearningGenaiRootToxicitySignal(
                                allowed = True, 
                                label = 'LABEL_UNSPECIFIED', 
                                score = 1.337, )
                            ], ), ),
                fallback = '',
                info = '',
                name = '',
                reason = 'FILTER_REASON_UNKNOWN',
                text = ''
            )
        else:
            return LearningGenaiRootFilterMetadata(
        )
        """

    def testLearningGenaiRootFilterMetadata(self):
        """Test LearningGenaiRootFilterMetadata"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

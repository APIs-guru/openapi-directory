# coding: utf-8

"""
    Vertex AI API

    Train high-quality custom machine learning models with minimal machine learning expertise and effort.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.cloud_ai_nl_llm_proto_service_candidate import CloudAiNlLlmProtoServiceCandidate

class TestCloudAiNlLlmProtoServiceCandidate(unittest.TestCase):
    """CloudAiNlLlmProtoServiceCandidate unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> CloudAiNlLlmProtoServiceCandidate:
        """Test CloudAiNlLlmProtoServiceCandidate
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `CloudAiNlLlmProtoServiceCandidate`
        """
        model = CloudAiNlLlmProtoServiceCandidate()
        if include_optional:
            return CloudAiNlLlmProtoServiceCandidate(
                citation_metadata = openapi_client.models.cloud_ai_nl_llm_proto_service_citation_metadata.CloudAiNlLlmProtoServiceCitationMetadata(
                    citations = [
                        openapi_client.models.cloud_ai_nl_llm_proto_service_citation.CloudAiNlLlmProtoServiceCitation(
                            end_index = 56, 
                            license = '', 
                            publication_date = openapi_client.models.google_type_date.GoogleTypeDate(
                                day = 56, 
                                month = 56, 
                                year = 56, ), 
                            start_index = 56, 
                            title = '', 
                            uri = '', )
                        ], ),
                content = openapi_client.models.cloud_ai_nl_llm_proto_service_content.CloudAiNlLlmProtoServiceContent(
                    parts = [
                        openapi_client.models.cloud_ai_nl_llm_proto_service_part.CloudAiNlLlmProtoServicePart(
                            file_data = openapi_client.models.cloud_ai_nl_llm_proto_service_part_file_data.CloudAiNlLlmProtoServicePartFileData(
                                file_uri = '', 
                                mime_type = '', ), 
                            function_call = openapi_client.models.cloud_ai_nl_llm_proto_service_function_call.CloudAiNlLlmProtoServiceFunctionCall(
                                args = {
                                    'key' : null
                                    }, 
                                name = '', ), 
                            function_response = openapi_client.models.cloud_ai_nl_llm_proto_service_function_response.CloudAiNlLlmProtoServiceFunctionResponse(
                                name = '', 
                                response = {
                                    'key' : null
                                    }, ), 
                            inline_data = openapi_client.models.cloud_ai_nl_llm_proto_service_part_blob.CloudAiNlLlmProtoServicePartBlob(
                                data = 'YQ==', 
                                mime_type = '', 
                                original_file_data = openapi_client.models.cloud_ai_nl_llm_proto_service_part_file_data.CloudAiNlLlmProtoServicePartFileData(
                                    file_uri = '', 
                                    mime_type = '', ), ), 
                            text = '', 
                            video_metadata = openapi_client.models.cloud_ai_nl_llm_proto_service_part_video_metadata.CloudAiNlLlmProtoServicePartVideoMetadata(
                                end_offset = '', 
                                start_offset = '', ), )
                        ], 
                    role = '', ),
                finish_message = '',
                finish_reason = 'FINISH_REASON_UNSPECIFIED',
                grounding_metadata = openapi_client.models.learning_genai_root_grounding_metadata.LearningGenaiRootGroundingMetadata(
                    citations = [
                        openapi_client.models.learning_genai_root_grounding_metadata_citation.LearningGenaiRootGroundingMetadataCitation(
                            end_index = 56, 
                            fact_index = 56, 
                            score = 1.337, 
                            start_index = 56, )
                        ], 
                    grounding_cancelled = True, 
                    search_queries = [
                        ''
                        ], ),
                index = 56,
                safety_ratings = [
                    openapi_client.models.cloud_ai_nl_llm_proto_service_safety_rating.CloudAiNlLlmProtoServiceSafetyRating(
                        blocked = True, 
                        category = 'HARM_CATEGORY_UNSPECIFIED', 
                        influential_terms = [
                            openapi_client.models.cloud_ai_nl_llm_proto_service_safety_rating_influential_term.CloudAiNlLlmProtoServiceSafetyRatingInfluentialTerm(
                                begin_offset = 56, 
                                confidence = 1.337, 
                                source = 'SOURCE_UNSPECIFIED', 
                                term = '', )
                            ], 
                        probability = 'HARM_PROBABILITY_UNSPECIFIED', 
                        probability_score = 1.337, 
                        severity = 'HARM_SEVERITY_UNSPECIFIED', 
                        severity_score = 1.337, )
                    ]
            )
        else:
            return CloudAiNlLlmProtoServiceCandidate(
        )
        """

    def testCloudAiNlLlmProtoServiceCandidate(self):
        """Test CloudAiNlLlmProtoServiceCandidate"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

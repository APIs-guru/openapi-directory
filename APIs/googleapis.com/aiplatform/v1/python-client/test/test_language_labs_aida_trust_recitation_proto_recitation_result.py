# coding: utf-8

"""
    Vertex AI API

    Train high-quality custom machine learning models with minimal machine learning expertise and effort.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.language_labs_aida_trust_recitation_proto_recitation_result import LanguageLabsAidaTrustRecitationProtoRecitationResult

class TestLanguageLabsAidaTrustRecitationProtoRecitationResult(unittest.TestCase):
    """LanguageLabsAidaTrustRecitationProtoRecitationResult unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> LanguageLabsAidaTrustRecitationProtoRecitationResult:
        """Test LanguageLabsAidaTrustRecitationProtoRecitationResult
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `LanguageLabsAidaTrustRecitationProtoRecitationResult`
        """
        model = LanguageLabsAidaTrustRecitationProtoRecitationResult()
        if include_optional:
            return LanguageLabsAidaTrustRecitationProtoRecitationResult(
                dynamic_segment_results = [
                    openapi_client.models.language_labs_aida_trust_recitation_proto_segment_result.LanguageLabsAidaTrustRecitationProtoSegmentResult(
                        attribution_dataset = 'DATASET_UNSPECIFIED', 
                        display_attribution_message = '', 
                        doc_attribution = openapi_client.models.language_labs_aida_trust_recitation_proto_doc_attribution.LanguageLabsAidaTrustRecitationProtoDocAttribution(
                            amarna_id = '', 
                            arxiv_id = '', 
                            author = '', 
                            bibkey = '', 
                            biorxiv_id = '', 
                            book_title = '', 
                            book_volume_id = '', 
                            category = 'CATEGORY_UNSPECIFIED', 
                            conversation_id = '', 
                            dataset = 'DATASET_UNSPECIFIED', 
                            filepath = '', 
                            gemini_id = '', 
                            gnews_article_title = '', 
                            goodall_example_id = '', 
                            is_opt_out = True, 
                            is_prompt = True, 
                            lamda_example_id = '', 
                            license = '', 
                            meena_conversation_id = '', 
                            natural_language_code = '', 
                            no_attribution = True, 
                            podcast_utterance_id = '', 
                            publication_date = openapi_client.models.google_type_date.GoogleTypeDate(
                                day = 56, 
                                month = 56, 
                                year = 56, ), 
                            quality_score_experiment_only = 1.337, 
                            repo = '', 
                            url = '', 
                            volume_id = '', 
                            wikipedia_article_title = '', 
                            youtube_video_id = '', ), 
                        doc_occurrences = 56, 
                        end_index = 56, 
                        raw_text = '', 
                        segment_recitation_action = 'ACTION_UNSPECIFIED', 
                        start_index = 56, )
                    ],
                recitation_action = 'ACTION_UNSPECIFIED',
                training_segment_results = [
                    openapi_client.models.language_labs_aida_trust_recitation_proto_segment_result.LanguageLabsAidaTrustRecitationProtoSegmentResult(
                        attribution_dataset = 'DATASET_UNSPECIFIED', 
                        display_attribution_message = '', 
                        doc_attribution = openapi_client.models.language_labs_aida_trust_recitation_proto_doc_attribution.LanguageLabsAidaTrustRecitationProtoDocAttribution(
                            amarna_id = '', 
                            arxiv_id = '', 
                            author = '', 
                            bibkey = '', 
                            biorxiv_id = '', 
                            book_title = '', 
                            book_volume_id = '', 
                            category = 'CATEGORY_UNSPECIFIED', 
                            conversation_id = '', 
                            dataset = 'DATASET_UNSPECIFIED', 
                            filepath = '', 
                            gemini_id = '', 
                            gnews_article_title = '', 
                            goodall_example_id = '', 
                            is_opt_out = True, 
                            is_prompt = True, 
                            lamda_example_id = '', 
                            license = '', 
                            meena_conversation_id = '', 
                            natural_language_code = '', 
                            no_attribution = True, 
                            podcast_utterance_id = '', 
                            publication_date = openapi_client.models.google_type_date.GoogleTypeDate(
                                day = 56, 
                                month = 56, 
                                year = 56, ), 
                            quality_score_experiment_only = 1.337, 
                            repo = '', 
                            url = '', 
                            volume_id = '', 
                            wikipedia_article_title = '', 
                            youtube_video_id = '', ), 
                        doc_occurrences = 56, 
                        end_index = 56, 
                        raw_text = '', 
                        segment_recitation_action = 'ACTION_UNSPECIFIED', 
                        start_index = 56, )
                    ]
            )
        else:
            return LanguageLabsAidaTrustRecitationProtoRecitationResult(
        )
        """

    def testLanguageLabsAidaTrustRecitationProtoRecitationResult(self):
        """Test LanguageLabsAidaTrustRecitationProtoRecitationResult"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

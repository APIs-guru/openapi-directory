# coding: utf-8

"""
    Vertex AI API

    Train high-quality custom machine learning models with minimal machine learning expertise and effort.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.google_cloud_aiplatform_v1_model_deployment_monitoring_job import GoogleCloudAiplatformV1ModelDeploymentMonitoringJob

class TestGoogleCloudAiplatformV1ModelDeploymentMonitoringJob(unittest.TestCase):
    """GoogleCloudAiplatformV1ModelDeploymentMonitoringJob unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> GoogleCloudAiplatformV1ModelDeploymentMonitoringJob:
        """Test GoogleCloudAiplatformV1ModelDeploymentMonitoringJob
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `GoogleCloudAiplatformV1ModelDeploymentMonitoringJob`
        """
        model = GoogleCloudAiplatformV1ModelDeploymentMonitoringJob()
        if include_optional:
            return GoogleCloudAiplatformV1ModelDeploymentMonitoringJob(
                analysis_instance_schema_uri = '',
                bigquery_tables = [
                    openapi_client.models.google_cloud_aiplatform_v1_model_deployment_monitoring_big_query_table.GoogleCloudAiplatformV1ModelDeploymentMonitoringBigQueryTable(
                        bigquery_table_path = '', 
                        log_source = 'LOG_SOURCE_UNSPECIFIED', 
                        log_type = 'LOG_TYPE_UNSPECIFIED', 
                        request_response_logging_schema_version = '', )
                    ],
                create_time = '',
                display_name = '',
                enable_monitoring_pipeline_logs = True,
                encryption_spec = openapi_client.models.google_cloud_aiplatform_v1_encryption_spec.GoogleCloudAiplatformV1EncryptionSpec(
                    kms_key_name = '', ),
                endpoint = '',
                error = openapi_client.models.google_rpc_status.GoogleRpcStatus(
                    code = 56, 
                    details = [
                        {
                            'key' : null
                            }
                        ], 
                    message = '', ),
                labels = {
                    'key' : ''
                    },
                latest_monitoring_pipeline_metadata = openapi_client.models.google_cloud_aiplatform_v1_model_deployment_monitoring_job_latest_monitoring_pipeline_metadata.GoogleCloudAiplatformV1ModelDeploymentMonitoringJobLatestMonitoringPipelineMetadata(
                    run_time = '', 
                    status = openapi_client.models.google_rpc_status.GoogleRpcStatus(
                        code = 56, 
                        details = [
                            {
                                'key' : null
                                }
                            ], 
                        message = '', ), ),
                log_ttl = '',
                logging_sampling_strategy = openapi_client.models.google_cloud_aiplatform_v1_sampling_strategy.GoogleCloudAiplatformV1SamplingStrategy(
                    random_sample_config = openapi_client.models.google_cloud_aiplatform_v1_sampling_strategy_random_sample_config.GoogleCloudAiplatformV1SamplingStrategyRandomSampleConfig(
                        sample_rate = 1.337, ), ),
                model_deployment_monitoring_objective_configs = [
                    openapi_client.models.google_cloud_aiplatform_v1_model_deployment_monitoring_objective_config.GoogleCloudAiplatformV1ModelDeploymentMonitoringObjectiveConfig(
                        deployed_model_id = '', 
                        objective_config = openapi_client.models.google_cloud_aiplatform_v1_model_monitoring_objective_config.GoogleCloudAiplatformV1ModelMonitoringObjectiveConfig(
                            explanation_config = openapi_client.models.google_cloud_aiplatform_v1_model_monitoring_objective_config_explanation_config.GoogleCloudAiplatformV1ModelMonitoringObjectiveConfigExplanationConfig(
                                enable_feature_attributes = True, 
                                explanation_baseline = openapi_client.models.google_cloud_aiplatform_v1_model_monitoring_objective_config_explanation_config_explanation_baseline.GoogleCloudAiplatformV1ModelMonitoringObjectiveConfigExplanationConfigExplanationBaseline(
                                    bigquery = openapi_client.models.google_cloud_aiplatform_v1_big_query_destination.GoogleCloudAiplatformV1BigQueryDestination(
                                        output_uri = '', ), 
                                    gcs = openapi_client.models.google_cloud_aiplatform_v1_gcs_destination.GoogleCloudAiplatformV1GcsDestination(
                                        output_uri_prefix = '', ), 
                                    prediction_format = 'PREDICTION_FORMAT_UNSPECIFIED', ), ), 
                            prediction_drift_detection_config = openapi_client.models.google_cloud_aiplatform_v1_model_monitoring_objective_config_prediction_drift_detection_config.GoogleCloudAiplatformV1ModelMonitoringObjectiveConfigPredictionDriftDetectionConfig(
                                attribution_score_drift_thresholds = {
                                    'key' : openapi_client.models.google_cloud_aiplatform_v1_threshold_config.GoogleCloudAiplatformV1ThresholdConfig(
                                        value = 1.337, )
                                    }, 
                                default_drift_threshold = openapi_client.models.google_cloud_aiplatform_v1_threshold_config.GoogleCloudAiplatformV1ThresholdConfig(
                                    value = 1.337, ), 
                                drift_thresholds = {
                                    'key' : 
                                    }, ), 
                            training_dataset = openapi_client.models.google_cloud_aiplatform_v1_model_monitoring_objective_config_training_dataset.GoogleCloudAiplatformV1ModelMonitoringObjectiveConfigTrainingDataset(
                                bigquery_source = openapi_client.models.google_cloud_aiplatform_v1_big_query_source.GoogleCloudAiplatformV1BigQuerySource(
                                    input_uri = '', ), 
                                data_format = '', 
                                dataset = '', 
                                gcs_source = openapi_client.models.google_cloud_aiplatform_v1_gcs_source.GoogleCloudAiplatformV1GcsSource(
                                    uris = [
                                        ''
                                        ], ), 
                                logging_sampling_strategy = openapi_client.models.google_cloud_aiplatform_v1_sampling_strategy.GoogleCloudAiplatformV1SamplingStrategy(
                                    random_sample_config = openapi_client.models.google_cloud_aiplatform_v1_sampling_strategy_random_sample_config.GoogleCloudAiplatformV1SamplingStrategyRandomSampleConfig(
                                        sample_rate = 1.337, ), ), 
                                target_field = '', ), 
                            training_prediction_skew_detection_config = openapi_client.models.google_cloud_aiplatform_v1_model_monitoring_objective_config_training_prediction_skew_detection_config.GoogleCloudAiplatformV1ModelMonitoringObjectiveConfigTrainingPredictionSkewDetectionConfig(
                                attribution_score_skew_thresholds = {
                                    'key' : 
                                    }, 
                                default_skew_threshold = , 
                                skew_thresholds = {
                                    'key' : 
                                    }, ), ), )
                    ],
                model_deployment_monitoring_schedule_config = openapi_client.models.google_cloud_aiplatform_v1_model_deployment_monitoring_schedule_config.GoogleCloudAiplatformV1ModelDeploymentMonitoringScheduleConfig(
                    monitor_interval = '', 
                    monitor_window = '', ),
                model_monitoring_alert_config = openapi_client.models.google_cloud_aiplatform_v1_model_monitoring_alert_config.GoogleCloudAiplatformV1ModelMonitoringAlertConfig(
                    email_alert_config = openapi_client.models.google_cloud_aiplatform_v1_model_monitoring_alert_config_email_alert_config.GoogleCloudAiplatformV1ModelMonitoringAlertConfigEmailAlertConfig(
                        user_emails = [
                            ''
                            ], ), 
                    enable_logging = True, 
                    notification_channels = [
                        ''
                        ], ),
                name = '',
                next_schedule_time = '',
                predict_instance_schema_uri = '',
                sample_predict_instance = None,
                schedule_state = 'MONITORING_SCHEDULE_STATE_UNSPECIFIED',
                state = 'JOB_STATE_UNSPECIFIED',
                stats_anomalies_base_directory = openapi_client.models.google_cloud_aiplatform_v1_gcs_destination.GoogleCloudAiplatformV1GcsDestination(
                    output_uri_prefix = '', ),
                update_time = ''
            )
        else:
            return GoogleCloudAiplatformV1ModelDeploymentMonitoringJob(
        )
        """

    def testGoogleCloudAiplatformV1ModelDeploymentMonitoringJob(self):
        """Test GoogleCloudAiplatformV1ModelDeploymentMonitoringJob"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

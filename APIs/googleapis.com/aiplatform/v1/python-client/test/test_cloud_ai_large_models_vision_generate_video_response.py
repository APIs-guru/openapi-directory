# coding: utf-8

"""
    Vertex AI API

    Train high-quality custom machine learning models with minimal machine learning expertise and effort.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.cloud_ai_large_models_vision_generate_video_response import CloudAiLargeModelsVisionGenerateVideoResponse

class TestCloudAiLargeModelsVisionGenerateVideoResponse(unittest.TestCase):
    """CloudAiLargeModelsVisionGenerateVideoResponse unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> CloudAiLargeModelsVisionGenerateVideoResponse:
        """Test CloudAiLargeModelsVisionGenerateVideoResponse
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `CloudAiLargeModelsVisionGenerateVideoResponse`
        """
        model = CloudAiLargeModelsVisionGenerateVideoResponse()
        if include_optional:
            return CloudAiLargeModelsVisionGenerateVideoResponse(
                generated_samples = [
                    openapi_client.models.cloud_ai_large_models_vision_media.CloudAiLargeModelsVisionMedia(
                        image = openapi_client.models.cloud_ai_large_models_vision_image.CloudAiLargeModelsVisionImage(
                            encoding = '', 
                            image_rai_scores = openapi_client.models.cloud_ai_large_models_vision_image_rai_scores.CloudAiLargeModelsVisionImageRAIScores(
                                agile_watermark_detection_score = 1.337, ), 
                            rai_info = openapi_client.models.cloud_ai_large_models_vision_rai_info.CloudAiLargeModelsVisionRaiInfo(
                                rai_categories = [
                                    ''
                                    ], 
                                scores = [
                                    1.337
                                    ], ), 
                            semantic_filter_response = openapi_client.models.cloud_ai_large_models_vision_semantic_filter_response.CloudAiLargeModelsVisionSemanticFilterResponse(
                                named_bounding_boxes = [
                                    openapi_client.models.cloud_ai_large_models_vision_named_bounding_box.CloudAiLargeModelsVisionNamedBoundingBox(
                                        classes = [
                                            ''
                                            ], 
                                        entities = [
                                            ''
                                            ], 
                                        x1 = 1.337, 
                                        x2 = 1.337, 
                                        y1 = 1.337, 
                                        y2 = 1.337, )
                                    ], 
                                passed_semantic_filter = True, ), 
                            text = '', 
                            uri = '', ), 
                        video = openapi_client.models.cloud_ai_large_models_vision_video.CloudAiLargeModelsVisionVideo(
                            uri = '', ), )
                    ],
                rai_media_filtered_count = 56,
                rai_media_filtered_reasons = [
                    ''
                    ],
                rai_text_filtered_reason = openapi_client.models.cloud_ai_large_models_vision_filtered_text.CloudAiLargeModelsVisionFilteredText(
                    category = 'RAI_CATEGORY_UNSPECIFIED', 
                    confidence = 'CONFIDENCE_UNSPECIFIED', 
                    prompt = '', 
                    score = 1.337, )
            )
        else:
            return CloudAiLargeModelsVisionGenerateVideoResponse(
        )
        """

    def testCloudAiLargeModelsVisionGenerateVideoResponse(self):
        """Test CloudAiLargeModelsVisionGenerateVideoResponse"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

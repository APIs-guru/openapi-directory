# coding: utf-8

"""
    Vertex AI API

    Train high-quality custom machine learning models with minimal machine learning expertise and effort.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.google_cloud_aiplatform_v1_generate_content_response import GoogleCloudAiplatformV1GenerateContentResponse

class TestGoogleCloudAiplatformV1GenerateContentResponse(unittest.TestCase):
    """GoogleCloudAiplatformV1GenerateContentResponse unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> GoogleCloudAiplatformV1GenerateContentResponse:
        """Test GoogleCloudAiplatformV1GenerateContentResponse
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `GoogleCloudAiplatformV1GenerateContentResponse`
        """
        model = GoogleCloudAiplatformV1GenerateContentResponse()
        if include_optional:
            return GoogleCloudAiplatformV1GenerateContentResponse(
                candidates = [
                    openapi_client.models.google_cloud_aiplatform_v1_candidate.GoogleCloudAiplatformV1Candidate(
                        citation_metadata = openapi_client.models.google_cloud_aiplatform_v1_citation_metadata.GoogleCloudAiplatformV1CitationMetadata(
                            citations = [
                                openapi_client.models.google_cloud_aiplatform_v1_citation.GoogleCloudAiplatformV1Citation(
                                    end_index = 56, 
                                    license = '', 
                                    publication_date = openapi_client.models.google_type_date.GoogleTypeDate(
                                        day = 56, 
                                        month = 56, 
                                        year = 56, ), 
                                    start_index = 56, 
                                    title = '', 
                                    uri = '', )
                                ], ), 
                        content = openapi_client.models.google_cloud_aiplatform_v1_content.GoogleCloudAiplatformV1Content(
                            parts = [
                                openapi_client.models.google_cloud_aiplatform_v1_part.GoogleCloudAiplatformV1Part(
                                    file_data = openapi_client.models.google_cloud_aiplatform_v1_file_data.GoogleCloudAiplatformV1FileData(
                                        file_uri = '', 
                                        mime_type = '', ), 
                                    function_call = openapi_client.models.google_cloud_aiplatform_v1_function_call.GoogleCloudAiplatformV1FunctionCall(
                                        args = {
                                            'key' : null
                                            }, 
                                        name = '', ), 
                                    function_response = openapi_client.models.google_cloud_aiplatform_v1_function_response.GoogleCloudAiplatformV1FunctionResponse(
                                        name = '', 
                                        response = {
                                            'key' : null
                                            }, ), 
                                    inline_data = openapi_client.models.google_cloud_aiplatform_v1_blob.GoogleCloudAiplatformV1Blob(
                                        data = 'YQ==', 
                                        mime_type = '', ), 
                                    text = '', 
                                    video_metadata = openapi_client.models.google_cloud_aiplatform_v1_video_metadata.GoogleCloudAiplatformV1VideoMetadata(
                                        end_offset = '', 
                                        start_offset = '', ), )
                                ], 
                            role = '', ), 
                        finish_message = '', 
                        finish_reason = 'FINISH_REASON_UNSPECIFIED', 
                        grounding_metadata = openapi_client.models.google_cloud_aiplatform_v1_grounding_metadata.GoogleCloudAiplatformV1GroundingMetadata(
                            grounding_attributions = [
                                openapi_client.models.google_cloud_aiplatform_v1_grounding_attribution.GoogleCloudAiplatformV1GroundingAttribution(
                                    confidence_score = 1.337, 
                                    segment = openapi_client.models.google_cloud_aiplatform_v1_segment.GoogleCloudAiplatformV1Segment(
                                        end_index = 56, 
                                        part_index = 56, 
                                        start_index = 56, ), 
                                    web = openapi_client.models.google_cloud_aiplatform_v1_grounding_attribution_web.GoogleCloudAiplatformV1GroundingAttributionWeb(
                                        title = '', 
                                        uri = '', ), )
                                ], 
                            web_search_queries = [
                                ''
                                ], ), 
                        index = 56, 
                        safety_ratings = [
                            openapi_client.models.google_cloud_aiplatform_v1_safety_rating.GoogleCloudAiplatformV1SafetyRating(
                                blocked = True, 
                                category = 'HARM_CATEGORY_UNSPECIFIED', 
                                probability = 'HARM_PROBABILITY_UNSPECIFIED', 
                                probability_score = 1.337, 
                                severity = 'HARM_SEVERITY_UNSPECIFIED', 
                                severity_score = 1.337, )
                            ], )
                    ],
                prompt_feedback = openapi_client.models.google_cloud_aiplatform_v1_generate_content_response_prompt_feedback.GoogleCloudAiplatformV1GenerateContentResponsePromptFeedback(
                    block_reason = 'BLOCKED_REASON_UNSPECIFIED', 
                    block_reason_message = '', 
                    safety_ratings = [
                        openapi_client.models.google_cloud_aiplatform_v1_safety_rating.GoogleCloudAiplatformV1SafetyRating(
                            blocked = True, 
                            category = 'HARM_CATEGORY_UNSPECIFIED', 
                            probability = 'HARM_PROBABILITY_UNSPECIFIED', 
                            probability_score = 1.337, 
                            severity = 'HARM_SEVERITY_UNSPECIFIED', 
                            severity_score = 1.337, )
                        ], ),
                usage_metadata = openapi_client.models.google_cloud_aiplatform_v1_generate_content_response_usage_metadata.GoogleCloudAiplatformV1GenerateContentResponseUsageMetadata(
                    candidates_token_count = 56, 
                    prompt_token_count = 56, 
                    total_token_count = 56, )
            )
        else:
            return GoogleCloudAiplatformV1GenerateContentResponse(
        )
        """

    def testGoogleCloudAiplatformV1GenerateContentResponse(self):
        """Test GoogleCloudAiplatformV1GenerateContentResponse"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

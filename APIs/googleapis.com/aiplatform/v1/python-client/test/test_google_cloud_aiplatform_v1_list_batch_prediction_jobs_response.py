# coding: utf-8

"""
    Vertex AI API

    Train high-quality custom machine learning models with minimal machine learning expertise and effort.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.google_cloud_aiplatform_v1_list_batch_prediction_jobs_response import GoogleCloudAiplatformV1ListBatchPredictionJobsResponse

class TestGoogleCloudAiplatformV1ListBatchPredictionJobsResponse(unittest.TestCase):
    """GoogleCloudAiplatformV1ListBatchPredictionJobsResponse unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> GoogleCloudAiplatformV1ListBatchPredictionJobsResponse:
        """Test GoogleCloudAiplatformV1ListBatchPredictionJobsResponse
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `GoogleCloudAiplatformV1ListBatchPredictionJobsResponse`
        """
        model = GoogleCloudAiplatformV1ListBatchPredictionJobsResponse()
        if include_optional:
            return GoogleCloudAiplatformV1ListBatchPredictionJobsResponse(
                batch_prediction_jobs = [
                    openapi_client.models.google_cloud_aiplatform_v1_batch_prediction_job.GoogleCloudAiplatformV1BatchPredictionJob(
                        completion_stats = openapi_client.models.google_cloud_aiplatform_v1_completion_stats.GoogleCloudAiplatformV1CompletionStats(
                            failed_count = '', 
                            incomplete_count = '', 
                            successful_count = '', 
                            successful_forecast_point_count = '', ), 
                        create_time = '', 
                        dedicated_resources = openapi_client.models.google_cloud_aiplatform_v1_batch_dedicated_resources.GoogleCloudAiplatformV1BatchDedicatedResources(
                            machine_spec = openapi_client.models.google_cloud_aiplatform_v1_machine_spec.GoogleCloudAiplatformV1MachineSpec(
                                accelerator_count = 56, 
                                accelerator_type = 'ACCELERATOR_TYPE_UNSPECIFIED', 
                                machine_type = '', 
                                tpu_topology = '', ), 
                            max_replica_count = 56, 
                            starting_replica_count = 56, ), 
                        disable_container_logging = True, 
                        display_name = '', 
                        encryption_spec = openapi_client.models.google_cloud_aiplatform_v1_encryption_spec.GoogleCloudAiplatformV1EncryptionSpec(
                            kms_key_name = '', ), 
                        end_time = '', 
                        error = openapi_client.models.google_rpc_status.GoogleRpcStatus(
                            code = 56, 
                            details = [
                                {
                                    'key' : null
                                    }
                                ], 
                            message = '', ), 
                        explanation_spec = openapi_client.models.google_cloud_aiplatform_v1_explanation_spec.GoogleCloudAiplatformV1ExplanationSpec(
                            metadata = openapi_client.models.google_cloud_aiplatform_v1_explanation_metadata.GoogleCloudAiplatformV1ExplanationMetadata(
                                feature_attributions_schema_uri = '', 
                                inputs = {
                                    'key' : openapi_client.models.google_cloud_aiplatform_v1_explanation_metadata_input_metadata.GoogleCloudAiplatformV1ExplanationMetadataInputMetadata(
                                        dense_shape_tensor_name = '', 
                                        encoded_baselines = [
                                            null
                                            ], 
                                        encoded_tensor_name = '', 
                                        encoding = 'ENCODING_UNSPECIFIED', 
                                        feature_value_domain = openapi_client.models.google_cloud_aiplatform_v1_explanation_metadata_input_metadata_feature_value_domain.GoogleCloudAiplatformV1ExplanationMetadataInputMetadataFeatureValueDomain(
                                            max_value = 1.337, 
                                            min_value = 1.337, 
                                            original_mean = 1.337, 
                                            original_stddev = 1.337, ), 
                                        group_name = '', 
                                        index_feature_mapping = [
                                            ''
                                            ], 
                                        indices_tensor_name = '', 
                                        input_baselines = [
                                            null
                                            ], 
                                        input_tensor_name = '', 
                                        modality = '', 
                                        visualization = openapi_client.models.google_cloud_aiplatform_v1_explanation_metadata_input_metadata_visualization.GoogleCloudAiplatformV1ExplanationMetadataInputMetadataVisualization(
                                            clip_percent_lowerbound = 1.337, 
                                            clip_percent_upperbound = 1.337, 
                                            color_map = 'COLOR_MAP_UNSPECIFIED', 
                                            overlay_type = 'OVERLAY_TYPE_UNSPECIFIED', 
                                            polarity = 'POLARITY_UNSPECIFIED', 
                                            type = 'TYPE_UNSPECIFIED', ), )
                                    }, 
                                latent_space_source = '', 
                                outputs = {
                                    'key' : openapi_client.models.google_cloud_aiplatform_v1_explanation_metadata_output_metadata.GoogleCloudAiplatformV1ExplanationMetadataOutputMetadata(
                                        display_name_mapping_key = '', 
                                        index_display_name_mapping = null, 
                                        output_tensor_name = '', )
                                    }, ), 
                            parameters = openapi_client.models.google_cloud_aiplatform_v1_explanation_parameters.GoogleCloudAiplatformV1ExplanationParameters(
                                examples = openapi_client.models.google_cloud_aiplatform_v1_examples.GoogleCloudAiplatformV1Examples(
                                    example_gcs_source = openapi_client.models.google_cloud_aiplatform_v1_examples_example_gcs_source.GoogleCloudAiplatformV1ExamplesExampleGcsSource(
                                        data_format = 'DATA_FORMAT_UNSPECIFIED', 
                                        gcs_source = openapi_client.models.google_cloud_aiplatform_v1_gcs_source.GoogleCloudAiplatformV1GcsSource(
                                            uris = [
                                                ''
                                                ], ), ), 
                                    nearest_neighbor_search_config = null, 
                                    neighbor_count = 56, 
                                    presets = openapi_client.models.google_cloud_aiplatform_v1_presets.GoogleCloudAiplatformV1Presets(
                                        modality = 'MODALITY_UNSPECIFIED', 
                                        query = 'PRECISE', ), ), 
                                integrated_gradients_attribution = openapi_client.models.google_cloud_aiplatform_v1_integrated_gradients_attribution.GoogleCloudAiplatformV1IntegratedGradientsAttribution(
                                    blur_baseline_config = openapi_client.models.google_cloud_aiplatform_v1_blur_baseline_config.GoogleCloudAiplatformV1BlurBaselineConfig(
                                        max_blur_sigma = 1.337, ), 
                                    smooth_grad_config = openapi_client.models.google_cloud_aiplatform_v1_smooth_grad_config.GoogleCloudAiplatformV1SmoothGradConfig(
                                        feature_noise_sigma = openapi_client.models.google_cloud_aiplatform_v1_feature_noise_sigma.GoogleCloudAiplatformV1FeatureNoiseSigma(
                                            noise_sigma = [
                                                openapi_client.models.google_cloud_aiplatform_v1_feature_noise_sigma_noise_sigma_for_feature.GoogleCloudAiplatformV1FeatureNoiseSigmaNoiseSigmaForFeature(
                                                    name = '', 
                                                    sigma = 1.337, )
                                                ], ), 
                                        noise_sigma = 1.337, 
                                        noisy_sample_count = 56, ), 
                                    step_count = 56, ), 
                                output_indices = [
                                    null
                                    ], 
                                sampled_shapley_attribution = openapi_client.models.google_cloud_aiplatform_v1_sampled_shapley_attribution.GoogleCloudAiplatformV1SampledShapleyAttribution(
                                    path_count = 56, ), 
                                top_k = 56, 
                                xrai_attribution = openapi_client.models.google_cloud_aiplatform_v1_xrai_attribution.GoogleCloudAiplatformV1XraiAttribution(
                                    step_count = 56, ), ), ), 
                        generate_explanation = True, 
                        input_config = openapi_client.models.google_cloud_aiplatform_v1_batch_prediction_job_input_config.GoogleCloudAiplatformV1BatchPredictionJobInputConfig(
                            bigquery_source = openapi_client.models.google_cloud_aiplatform_v1_big_query_source.GoogleCloudAiplatformV1BigQuerySource(
                                input_uri = '', ), 
                            instances_format = '', ), 
                        instance_config = openapi_client.models.google_cloud_aiplatform_v1_batch_prediction_job_instance_config.GoogleCloudAiplatformV1BatchPredictionJobInstanceConfig(
                            excluded_fields = [
                                ''
                                ], 
                            included_fields = [
                                ''
                                ], 
                            instance_type = '', 
                            key_field = '', ), 
                        labels = {
                            'key' : ''
                            }, 
                        manual_batch_tuning_parameters = openapi_client.models.google_cloud_aiplatform_v1_manual_batch_tuning_parameters.GoogleCloudAiplatformV1ManualBatchTuningParameters(
                            batch_size = 56, ), 
                        model = '', 
                        model_parameters = null, 
                        model_version_id = '', 
                        name = '', 
                        output_config = openapi_client.models.google_cloud_aiplatform_v1_batch_prediction_job_output_config.GoogleCloudAiplatformV1BatchPredictionJobOutputConfig(
                            bigquery_destination = openapi_client.models.google_cloud_aiplatform_v1_big_query_destination.GoogleCloudAiplatformV1BigQueryDestination(
                                output_uri = '', ), 
                            gcs_destination = openapi_client.models.google_cloud_aiplatform_v1_gcs_destination.GoogleCloudAiplatformV1GcsDestination(
                                output_uri_prefix = '', ), 
                            predictions_format = '', ), 
                        output_info = openapi_client.models.google_cloud_aiplatform_v1_batch_prediction_job_output_info.GoogleCloudAiplatformV1BatchPredictionJobOutputInfo(
                            bigquery_output_dataset = '', 
                            bigquery_output_table = '', 
                            gcs_output_directory = '', ), 
                        partial_failures = [
                            openapi_client.models.google_rpc_status.GoogleRpcStatus(
                                code = 56, 
                                message = '', )
                            ], 
                        resources_consumed = openapi_client.models.google_cloud_aiplatform_v1_resources_consumed.GoogleCloudAiplatformV1ResourcesConsumed(
                            replica_hours = 1.337, ), 
                        service_account = '', 
                        start_time = '', 
                        state = 'JOB_STATE_UNSPECIFIED', 
                        unmanaged_container_model = openapi_client.models.google_cloud_aiplatform_v1_unmanaged_container_model.GoogleCloudAiplatformV1UnmanagedContainerModel(
                            artifact_uri = '', 
                            container_spec = openapi_client.models.google_cloud_aiplatform_v1_model_container_spec.GoogleCloudAiplatformV1ModelContainerSpec(
                                args = [
                                    ''
                                    ], 
                                command = [
                                    ''
                                    ], 
                                deployment_timeout = '', 
                                env = [
                                    openapi_client.models.google_cloud_aiplatform_v1_env_var.GoogleCloudAiplatformV1EnvVar(
                                        name = '', 
                                        value = '', )
                                    ], 
                                grpc_ports = [
                                    openapi_client.models.google_cloud_aiplatform_v1_port.GoogleCloudAiplatformV1Port(
                                        container_port = 56, )
                                    ], 
                                health_probe = openapi_client.models.google_cloud_aiplatform_v1_probe.GoogleCloudAiplatformV1Probe(
                                    exec = openapi_client.models.google_cloud_aiplatform_v1_probe_exec_action.GoogleCloudAiplatformV1ProbeExecAction(), 
                                    period_seconds = 56, 
                                    timeout_seconds = 56, ), 
                                health_route = '', 
                                image_uri = '', 
                                ports = [
                                    openapi_client.models.google_cloud_aiplatform_v1_port.GoogleCloudAiplatformV1Port(
                                        container_port = 56, )
                                    ], 
                                predict_route = '', 
                                shared_memory_size_mb = '', 
                                startup_probe = openapi_client.models.google_cloud_aiplatform_v1_probe.GoogleCloudAiplatformV1Probe(
                                    period_seconds = 56, 
                                    timeout_seconds = 56, ), ), 
                            predict_schemata = openapi_client.models.google_cloud_aiplatform_v1_predict_schemata.GoogleCloudAiplatformV1PredictSchemata(
                                instance_schema_uri = '', 
                                parameters_schema_uri = '', 
                                prediction_schema_uri = '', ), ), 
                        update_time = '', )
                    ],
                next_page_token = ''
            )
        else:
            return GoogleCloudAiplatformV1ListBatchPredictionJobsResponse(
        )
        """

    def testGoogleCloudAiplatformV1ListBatchPredictionJobsResponse(self):
        """Test GoogleCloudAiplatformV1ListBatchPredictionJobsResponse"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

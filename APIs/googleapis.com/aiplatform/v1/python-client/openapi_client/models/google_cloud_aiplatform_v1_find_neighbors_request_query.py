# coding: utf-8

"""
    Vertex AI API

    Train high-quality custom machine learning models with minimal machine learning expertise and effort.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt
from typing import Any, ClassVar, Dict, List, Optional, Union
from openapi_client.models.google_cloud_aiplatform_v1_index_datapoint import GoogleCloudAiplatformV1IndexDatapoint
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudAiplatformV1FindNeighborsRequestQuery(BaseModel):
    """
    A query to find a number of the nearest neighbors (most similar vectors) of a vector.
    """ # noqa: E501
    approximate_neighbor_count: Optional[StrictInt] = Field(default=None, description="The number of neighbors to find via approximate search before exact reordering is performed. If not set, the default value from scam config is used; if set, this value must be > 0.", alias="approximateNeighborCount")
    datapoint: Optional[GoogleCloudAiplatformV1IndexDatapoint] = None
    fraction_leaf_nodes_to_search_override: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The fraction of the number of leaves to search, set at query time allows user to tune search performance. This value increase result in both search accuracy and latency increase. The value should be between 0.0 and 1.0. If not set or set to 0.0, query uses the default value specified in NearestNeighborSearchConfig.TreeAHConfig.fraction_leaf_nodes_to_search.", alias="fractionLeafNodesToSearchOverride")
    neighbor_count: Optional[StrictInt] = Field(default=None, description="The number of nearest neighbors to be retrieved from database for each query. If not set, will use the default from the service configuration (https://cloud.google.com/vertex-ai/docs/matching-engine/configuring-indexes#nearest-neighbor-search-config).", alias="neighborCount")
    per_crowding_attribute_neighbor_count: Optional[StrictInt] = Field(default=None, description="Crowding is a constraint on a neighbor list produced by nearest neighbor search requiring that no more than some value k' of the k neighbors returned have the same value of crowding_attribute. It's used for improving result diversity. This field is the maximum number of matches with the same crowding tag.", alias="perCrowdingAttributeNeighborCount")
    __properties: ClassVar[List[str]] = ["approximateNeighborCount", "datapoint", "fractionLeafNodesToSearchOverride", "neighborCount", "perCrowdingAttributeNeighborCount"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudAiplatformV1FindNeighborsRequestQuery from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of datapoint
        if self.datapoint:
            _dict['datapoint'] = self.datapoint.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudAiplatformV1FindNeighborsRequestQuery from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "approximateNeighborCount": obj.get("approximateNeighborCount"),
            "datapoint": GoogleCloudAiplatformV1IndexDatapoint.from_dict(obj["datapoint"]) if obj.get("datapoint") is not None else None,
            "fractionLeafNodesToSearchOverride": obj.get("fractionLeafNodesToSearchOverride"),
            "neighborCount": obj.get("neighborCount"),
            "perCrowdingAttributeNeighborCount": obj.get("perCrowdingAttributeNeighborCount")
        })
        return _obj



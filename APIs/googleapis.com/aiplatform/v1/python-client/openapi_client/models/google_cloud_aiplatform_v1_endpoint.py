# coding: utf-8

"""
    Vertex AI API

    Train high-quality custom machine learning models with minimal machine learning expertise and effort.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_cloud_aiplatform_v1_deployed_model import GoogleCloudAiplatformV1DeployedModel
from openapi_client.models.google_cloud_aiplatform_v1_encryption_spec import GoogleCloudAiplatformV1EncryptionSpec
from openapi_client.models.google_cloud_aiplatform_v1_predict_request_response_logging_config import GoogleCloudAiplatformV1PredictRequestResponseLoggingConfig
from openapi_client.models.google_cloud_aiplatform_v1_private_service_connect_config import GoogleCloudAiplatformV1PrivateServiceConnectConfig
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudAiplatformV1Endpoint(BaseModel):
    """
    Models are deployed into it, and afterwards Endpoint is called to obtain predictions and explanations.
    """ # noqa: E501
    create_time: Optional[StrictStr] = Field(default=None, description="Output only. Timestamp when this Endpoint was created.", alias="createTime")
    deployed_models: Optional[List[GoogleCloudAiplatformV1DeployedModel]] = Field(default=None, description="Output only. The models deployed in this Endpoint. To add or remove DeployedModels use EndpointService.DeployModel and EndpointService.UndeployModel respectively.", alias="deployedModels")
    description: Optional[StrictStr] = Field(default=None, description="The description of the Endpoint.")
    display_name: Optional[StrictStr] = Field(default=None, description="Required. The display name of the Endpoint. The name can be up to 128 characters long and can consist of any UTF-8 characters.", alias="displayName")
    enable_private_service_connect: Optional[StrictBool] = Field(default=None, description="Deprecated: If true, expose the Endpoint via private service connect. Only one of the fields, network or enable_private_service_connect, can be set.", alias="enablePrivateServiceConnect")
    encryption_spec: Optional[GoogleCloudAiplatformV1EncryptionSpec] = Field(default=None, alias="encryptionSpec")
    etag: Optional[StrictStr] = Field(default=None, description="Used to perform consistent read-modify-write updates. If not set, a blind \"overwrite\" update happens.")
    labels: Optional[Dict[str, StrictStr]] = Field(default=None, description="The labels with user-defined metadata to organize your Endpoints. Label keys and values can be no longer than 64 characters (Unicode codepoints), can only contain lowercase letters, numeric characters, underscores and dashes. International characters are allowed. See https://goo.gl/xmQnxf for more information and examples of labels.")
    model_deployment_monitoring_job: Optional[StrictStr] = Field(default=None, description="Output only. Resource name of the Model Monitoring job associated with this Endpoint if monitoring is enabled by JobService.CreateModelDeploymentMonitoringJob. Format: `projects/{project}/locations/{location}/modelDeploymentMonitoringJobs/{model_deployment_monitoring_job}`", alias="modelDeploymentMonitoringJob")
    name: Optional[StrictStr] = Field(default=None, description="Output only. The resource name of the Endpoint.")
    network: Optional[StrictStr] = Field(default=None, description="Optional. The full name of the Google Compute Engine [network](https://cloud.google.com//compute/docs/networks-and-firewalls#networks) to which the Endpoint should be peered. Private services access must already be configured for the network. If left unspecified, the Endpoint is not peered with any network. Only one of the fields, network or enable_private_service_connect, can be set. [Format](https://cloud.google.com/compute/docs/reference/rest/v1/networks/insert): `projects/{project}/global/networks/{network}`. Where `{project}` is a project number, as in `12345`, and `{network}` is network name.")
    predict_request_response_logging_config: Optional[GoogleCloudAiplatformV1PredictRequestResponseLoggingConfig] = Field(default=None, alias="predictRequestResponseLoggingConfig")
    private_service_connect_config: Optional[GoogleCloudAiplatformV1PrivateServiceConnectConfig] = Field(default=None, alias="privateServiceConnectConfig")
    traffic_split: Optional[Dict[str, StrictInt]] = Field(default=None, description="A map from a DeployedModel's ID to the percentage of this Endpoint's traffic that should be forwarded to that DeployedModel. If a DeployedModel's ID is not listed in this map, then it receives no traffic. The traffic percentage values must add up to 100, or map must be empty if the Endpoint is to not accept any traffic at a moment.", alias="trafficSplit")
    update_time: Optional[StrictStr] = Field(default=None, description="Output only. Timestamp when this Endpoint was last updated.", alias="updateTime")
    __properties: ClassVar[List[str]] = ["createTime", "deployedModels", "description", "displayName", "enablePrivateServiceConnect", "encryptionSpec", "etag", "labels", "modelDeploymentMonitoringJob", "name", "network", "predictRequestResponseLoggingConfig", "privateServiceConnectConfig", "trafficSplit", "updateTime"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudAiplatformV1Endpoint from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "create_time",
            "deployed_models",
            "model_deployment_monitoring_job",
            "name",
            "update_time",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in deployed_models (list)
        _items = []
        if self.deployed_models:
            for _item_deployed_models in self.deployed_models:
                if _item_deployed_models:
                    _items.append(_item_deployed_models.to_dict())
            _dict['deployedModels'] = _items
        # override the default output from pydantic by calling `to_dict()` of encryption_spec
        if self.encryption_spec:
            _dict['encryptionSpec'] = self.encryption_spec.to_dict()
        # override the default output from pydantic by calling `to_dict()` of predict_request_response_logging_config
        if self.predict_request_response_logging_config:
            _dict['predictRequestResponseLoggingConfig'] = self.predict_request_response_logging_config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of private_service_connect_config
        if self.private_service_connect_config:
            _dict['privateServiceConnectConfig'] = self.private_service_connect_config.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudAiplatformV1Endpoint from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "createTime": obj.get("createTime"),
            "deployedModels": [GoogleCloudAiplatformV1DeployedModel.from_dict(_item) for _item in obj["deployedModels"]] if obj.get("deployedModels") is not None else None,
            "description": obj.get("description"),
            "displayName": obj.get("displayName"),
            "enablePrivateServiceConnect": obj.get("enablePrivateServiceConnect"),
            "encryptionSpec": GoogleCloudAiplatformV1EncryptionSpec.from_dict(obj["encryptionSpec"]) if obj.get("encryptionSpec") is not None else None,
            "etag": obj.get("etag"),
            "labels": obj.get("labels"),
            "modelDeploymentMonitoringJob": obj.get("modelDeploymentMonitoringJob"),
            "name": obj.get("name"),
            "network": obj.get("network"),
            "predictRequestResponseLoggingConfig": GoogleCloudAiplatformV1PredictRequestResponseLoggingConfig.from_dict(obj["predictRequestResponseLoggingConfig"]) if obj.get("predictRequestResponseLoggingConfig") is not None else None,
            "privateServiceConnectConfig": GoogleCloudAiplatformV1PrivateServiceConnectConfig.from_dict(obj["privateServiceConnectConfig"]) if obj.get("privateServiceConnectConfig") is not None else None,
            "trafficSplit": obj.get("trafficSplit"),
            "updateTime": obj.get("updateTime")
        })
        return _obj



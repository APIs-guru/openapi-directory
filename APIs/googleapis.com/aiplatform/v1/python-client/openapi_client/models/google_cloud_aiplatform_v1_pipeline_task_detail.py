# coding: utf-8

"""
    Vertex AI API

    Train high-quality custom machine learning models with minimal machine learning expertise and effort.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_cloud_aiplatform_v1_execution import GoogleCloudAiplatformV1Execution
from openapi_client.models.google_cloud_aiplatform_v1_pipeline_task_detail_artifact_list import GoogleCloudAiplatformV1PipelineTaskDetailArtifactList
from openapi_client.models.google_cloud_aiplatform_v1_pipeline_task_detail_pipeline_task_status import GoogleCloudAiplatformV1PipelineTaskDetailPipelineTaskStatus
from openapi_client.models.google_cloud_aiplatform_v1_pipeline_task_executor_detail import GoogleCloudAiplatformV1PipelineTaskExecutorDetail
from openapi_client.models.google_rpc_status import GoogleRpcStatus
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudAiplatformV1PipelineTaskDetail(BaseModel):
    """
    The runtime detail of a task execution.
    """ # noqa: E501
    create_time: Optional[StrictStr] = Field(default=None, description="Output only. Task create time.", alias="createTime")
    end_time: Optional[StrictStr] = Field(default=None, description="Output only. Task end time.", alias="endTime")
    error: Optional[GoogleRpcStatus] = None
    execution: Optional[GoogleCloudAiplatformV1Execution] = None
    executor_detail: Optional[GoogleCloudAiplatformV1PipelineTaskExecutorDetail] = Field(default=None, alias="executorDetail")
    inputs: Optional[Dict[str, GoogleCloudAiplatformV1PipelineTaskDetailArtifactList]] = Field(default=None, description="Output only. The runtime input artifacts of the task.")
    outputs: Optional[Dict[str, GoogleCloudAiplatformV1PipelineTaskDetailArtifactList]] = Field(default=None, description="Output only. The runtime output artifacts of the task.")
    parent_task_id: Optional[StrictStr] = Field(default=None, description="Output only. The id of the parent task if the task is within a component scope. Empty if the task is at the root level.", alias="parentTaskId")
    pipeline_task_status: Optional[List[GoogleCloudAiplatformV1PipelineTaskDetailPipelineTaskStatus]] = Field(default=None, description="Output only. A list of task status. This field keeps a record of task status evolving over time.", alias="pipelineTaskStatus")
    start_time: Optional[StrictStr] = Field(default=None, description="Output only. Task start time.", alias="startTime")
    state: Optional[StrictStr] = Field(default=None, description="Output only. State of the task.")
    task_id: Optional[StrictStr] = Field(default=None, description="Output only. The system generated ID of the task.", alias="taskId")
    task_name: Optional[StrictStr] = Field(default=None, description="Output only. The user specified name of the task that is defined in pipeline_spec.", alias="taskName")
    __properties: ClassVar[List[str]] = ["createTime", "endTime", "error", "execution", "executorDetail", "inputs", "outputs", "parentTaskId", "pipelineTaskStatus", "startTime", "state", "taskId", "taskName"]

    @field_validator('state')
    def state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['STATE_UNSPECIFIED', 'PENDING', 'RUNNING', 'SUCCEEDED', 'CANCEL_PENDING', 'CANCELLING', 'CANCELLED', 'FAILED', 'SKIPPED', 'NOT_TRIGGERED']):
            raise ValueError("must be one of enum values ('STATE_UNSPECIFIED', 'PENDING', 'RUNNING', 'SUCCEEDED', 'CANCEL_PENDING', 'CANCELLING', 'CANCELLED', 'FAILED', 'SKIPPED', 'NOT_TRIGGERED')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudAiplatformV1PipelineTaskDetail from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "create_time",
            "end_time",
            "inputs",
            "outputs",
            "parent_task_id",
            "pipeline_task_status",
            "start_time",
            "state",
            "task_id",
            "task_name",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of error
        if self.error:
            _dict['error'] = self.error.to_dict()
        # override the default output from pydantic by calling `to_dict()` of execution
        if self.execution:
            _dict['execution'] = self.execution.to_dict()
        # override the default output from pydantic by calling `to_dict()` of executor_detail
        if self.executor_detail:
            _dict['executorDetail'] = self.executor_detail.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each value in inputs (dict)
        _field_dict = {}
        if self.inputs:
            for _key_inputs in self.inputs:
                if self.inputs[_key_inputs]:
                    _field_dict[_key_inputs] = self.inputs[_key_inputs].to_dict()
            _dict['inputs'] = _field_dict
        # override the default output from pydantic by calling `to_dict()` of each value in outputs (dict)
        _field_dict = {}
        if self.outputs:
            for _key_outputs in self.outputs:
                if self.outputs[_key_outputs]:
                    _field_dict[_key_outputs] = self.outputs[_key_outputs].to_dict()
            _dict['outputs'] = _field_dict
        # override the default output from pydantic by calling `to_dict()` of each item in pipeline_task_status (list)
        _items = []
        if self.pipeline_task_status:
            for _item_pipeline_task_status in self.pipeline_task_status:
                if _item_pipeline_task_status:
                    _items.append(_item_pipeline_task_status.to_dict())
            _dict['pipelineTaskStatus'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudAiplatformV1PipelineTaskDetail from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "createTime": obj.get("createTime"),
            "endTime": obj.get("endTime"),
            "error": GoogleRpcStatus.from_dict(obj["error"]) if obj.get("error") is not None else None,
            "execution": GoogleCloudAiplatformV1Execution.from_dict(obj["execution"]) if obj.get("execution") is not None else None,
            "executorDetail": GoogleCloudAiplatformV1PipelineTaskExecutorDetail.from_dict(obj["executorDetail"]) if obj.get("executorDetail") is not None else None,
            "inputs": dict(
                (_k, GoogleCloudAiplatformV1PipelineTaskDetailArtifactList.from_dict(_v))
                for _k, _v in obj["inputs"].items()
            )
            if obj.get("inputs") is not None
            else None,
            "outputs": dict(
                (_k, GoogleCloudAiplatformV1PipelineTaskDetailArtifactList.from_dict(_v))
                for _k, _v in obj["outputs"].items()
            )
            if obj.get("outputs") is not None
            else None,
            "parentTaskId": obj.get("parentTaskId"),
            "pipelineTaskStatus": [GoogleCloudAiplatformV1PipelineTaskDetailPipelineTaskStatus.from_dict(_item) for _item in obj["pipelineTaskStatus"]] if obj.get("pipelineTaskStatus") is not None else None,
            "startTime": obj.get("startTime"),
            "state": obj.get("state"),
            "taskId": obj.get("taskId"),
            "taskName": obj.get("taskName")
        })
        return _obj



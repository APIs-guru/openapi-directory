# coding: utf-8

"""
    Vertex AI API

    Train high-quality custom machine learning models with minimal machine learning expertise and effort.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudAiplatformV1ModelDeploymentMonitoringBigQueryTable(BaseModel):
    """
    ModelDeploymentMonitoringBigQueryTable specifies the BigQuery table name as well as some information of the logs stored in this table.
    """ # noqa: E501
    bigquery_table_path: Optional[StrictStr] = Field(default=None, description="The created BigQuery table to store logs. Customer could do their own query & analysis. Format: `bq://.model_deployment_monitoring_._`", alias="bigqueryTablePath")
    log_source: Optional[StrictStr] = Field(default=None, description="The source of log.", alias="logSource")
    log_type: Optional[StrictStr] = Field(default=None, description="The type of log.", alias="logType")
    request_response_logging_schema_version: Optional[StrictStr] = Field(default=None, description="Output only. The schema version of the request/response logging BigQuery table. Default to v1 if unset.", alias="requestResponseLoggingSchemaVersion")
    __properties: ClassVar[List[str]] = ["bigqueryTablePath", "logSource", "logType", "requestResponseLoggingSchemaVersion"]

    @field_validator('log_source')
    def log_source_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['LOG_SOURCE_UNSPECIFIED', 'TRAINING', 'SERVING']):
            raise ValueError("must be one of enum values ('LOG_SOURCE_UNSPECIFIED', 'TRAINING', 'SERVING')")
        return value

    @field_validator('log_type')
    def log_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['LOG_TYPE_UNSPECIFIED', 'PREDICT', 'EXPLAIN']):
            raise ValueError("must be one of enum values ('LOG_TYPE_UNSPECIFIED', 'PREDICT', 'EXPLAIN')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudAiplatformV1ModelDeploymentMonitoringBigQueryTable from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "request_response_logging_schema_version",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudAiplatformV1ModelDeploymentMonitoringBigQueryTable from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "bigqueryTablePath": obj.get("bigqueryTablePath"),
            "logSource": obj.get("logSource"),
            "logType": obj.get("logType"),
            "requestResponseLoggingSchemaVersion": obj.get("requestResponseLoggingSchemaVersion")
        })
        return _obj



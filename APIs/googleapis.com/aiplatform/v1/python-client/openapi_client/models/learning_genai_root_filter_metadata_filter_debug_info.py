# coding: utf-8

"""
    Vertex AI API

    Train high-quality custom machine learning models with minimal machine learning expertise and effort.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.cloud_ai_nl_llm_proto_service_rai_result import CloudAiNlLlmProtoServiceRaiResult
from openapi_client.models.cloud_ai_nl_llm_proto_service_rai_signal import CloudAiNlLlmProtoServiceRaiSignal
from openapi_client.models.language_labs_aida_trust_recitation_proto_stream_recitation_result import LanguageLabsAidaTrustRecitationProtoStreamRecitationResult
from openapi_client.models.learning_genai_root_classifier_output import LearningGenaiRootClassifierOutput
from openapi_client.models.learning_genai_root_language_filter_result import LearningGenaiRootLanguageFilterResult
from openapi_client.models.learning_genai_root_rai_output import LearningGenaiRootRAIOutput
from openapi_client.models.learning_genai_root_takedown_result import LearningGenaiRootTakedownResult
from openapi_client.models.learning_genai_root_toxicity_result import LearningGenaiRootToxicityResult
from typing import Optional, Set
from typing_extensions import Self

class LearningGenaiRootFilterMetadataFilterDebugInfo(BaseModel):
    """
    LearningGenaiRootFilterMetadataFilterDebugInfo
    """ # noqa: E501
    classifier_output: Optional[LearningGenaiRootClassifierOutput] = Field(default=None, alias="classifierOutput")
    default_metadata: Optional[StrictStr] = Field(default=None, alias="defaultMetadata")
    language_filter_result: Optional[LearningGenaiRootLanguageFilterResult] = Field(default=None, alias="languageFilterResult")
    rai_output: Optional[LearningGenaiRootRAIOutput] = Field(default=None, alias="raiOutput")
    rai_result: Optional[CloudAiNlLlmProtoServiceRaiResult] = Field(default=None, alias="raiResult")
    rai_signal: Optional[CloudAiNlLlmProtoServiceRaiSignal] = Field(default=None, alias="raiSignal")
    stream_recitation_result: Optional[LanguageLabsAidaTrustRecitationProtoStreamRecitationResult] = Field(default=None, alias="streamRecitationResult")
    takedown_result: Optional[LearningGenaiRootTakedownResult] = Field(default=None, alias="takedownResult")
    toxicity_result: Optional[LearningGenaiRootToxicityResult] = Field(default=None, alias="toxicityResult")
    __properties: ClassVar[List[str]] = ["classifierOutput", "defaultMetadata", "languageFilterResult", "raiOutput", "raiResult", "raiSignal", "streamRecitationResult", "takedownResult", "toxicityResult"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of LearningGenaiRootFilterMetadataFilterDebugInfo from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of classifier_output
        if self.classifier_output:
            _dict['classifierOutput'] = self.classifier_output.to_dict()
        # override the default output from pydantic by calling `to_dict()` of language_filter_result
        if self.language_filter_result:
            _dict['languageFilterResult'] = self.language_filter_result.to_dict()
        # override the default output from pydantic by calling `to_dict()` of rai_output
        if self.rai_output:
            _dict['raiOutput'] = self.rai_output.to_dict()
        # override the default output from pydantic by calling `to_dict()` of rai_result
        if self.rai_result:
            _dict['raiResult'] = self.rai_result.to_dict()
        # override the default output from pydantic by calling `to_dict()` of rai_signal
        if self.rai_signal:
            _dict['raiSignal'] = self.rai_signal.to_dict()
        # override the default output from pydantic by calling `to_dict()` of stream_recitation_result
        if self.stream_recitation_result:
            _dict['streamRecitationResult'] = self.stream_recitation_result.to_dict()
        # override the default output from pydantic by calling `to_dict()` of takedown_result
        if self.takedown_result:
            _dict['takedownResult'] = self.takedown_result.to_dict()
        # override the default output from pydantic by calling `to_dict()` of toxicity_result
        if self.toxicity_result:
            _dict['toxicityResult'] = self.toxicity_result.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of LearningGenaiRootFilterMetadataFilterDebugInfo from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "classifierOutput": LearningGenaiRootClassifierOutput.from_dict(obj["classifierOutput"]) if obj.get("classifierOutput") is not None else None,
            "defaultMetadata": obj.get("defaultMetadata"),
            "languageFilterResult": LearningGenaiRootLanguageFilterResult.from_dict(obj["languageFilterResult"]) if obj.get("languageFilterResult") is not None else None,
            "raiOutput": LearningGenaiRootRAIOutput.from_dict(obj["raiOutput"]) if obj.get("raiOutput") is not None else None,
            "raiResult": CloudAiNlLlmProtoServiceRaiResult.from_dict(obj["raiResult"]) if obj.get("raiResult") is not None else None,
            "raiSignal": CloudAiNlLlmProtoServiceRaiSignal.from_dict(obj["raiSignal"]) if obj.get("raiSignal") is not None else None,
            "streamRecitationResult": LanguageLabsAidaTrustRecitationProtoStreamRecitationResult.from_dict(obj["streamRecitationResult"]) if obj.get("streamRecitationResult") is not None else None,
            "takedownResult": LearningGenaiRootTakedownResult.from_dict(obj["takedownResult"]) if obj.get("takedownResult") is not None else None,
            "toxicityResult": LearningGenaiRootToxicityResult.from_dict(obj["toxicityResult"]) if obj.get("toxicityResult") is not None else None
        })
        return _obj



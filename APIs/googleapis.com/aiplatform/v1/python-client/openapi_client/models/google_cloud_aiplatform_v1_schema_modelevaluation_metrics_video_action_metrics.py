# coding: utf-8

"""
    Vertex AI API

    Train high-quality custom machine learning models with minimal machine learning expertise and effort.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from openapi_client.models.google_cloud_aiplatform_v1_schema_modelevaluation_metrics_video_action_metrics_confidence_metrics import GoogleCloudAiplatformV1SchemaModelevaluationMetricsVideoActionMetricsConfidenceMetrics
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudAiplatformV1SchemaModelevaluationMetricsVideoActionMetrics(BaseModel):
    """
    The Evaluation metrics given a specific precision_window_length.
    """ # noqa: E501
    confidence_metrics: Optional[List[GoogleCloudAiplatformV1SchemaModelevaluationMetricsVideoActionMetricsConfidenceMetrics]] = Field(default=None, description="Metrics for each label-match confidence_threshold from 0.05,0.10,...,0.95,0.96,0.97,0.98,0.99.", alias="confidenceMetrics")
    mean_average_precision: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The mean average precision.", alias="meanAveragePrecision")
    precision_window_length: Optional[StrictStr] = Field(default=None, description="This VideoActionMetrics is calculated based on this prediction window length. If the predicted action's timestamp is inside the time window whose center is the ground truth action's timestamp with this specific length, the prediction result is treated as a true positive.", alias="precisionWindowLength")
    __properties: ClassVar[List[str]] = ["confidenceMetrics", "meanAveragePrecision", "precisionWindowLength"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudAiplatformV1SchemaModelevaluationMetricsVideoActionMetrics from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in confidence_metrics (list)
        _items = []
        if self.confidence_metrics:
            for _item_confidence_metrics in self.confidence_metrics:
                if _item_confidence_metrics:
                    _items.append(_item_confidence_metrics.to_dict())
            _dict['confidenceMetrics'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudAiplatformV1SchemaModelevaluationMetricsVideoActionMetrics from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "confidenceMetrics": [GoogleCloudAiplatformV1SchemaModelevaluationMetricsVideoActionMetricsConfidenceMetrics.from_dict(_item) for _item in obj["confidenceMetrics"]] if obj.get("confidenceMetrics") is not None else None,
            "meanAveragePrecision": obj.get("meanAveragePrecision"),
            "precisionWindowLength": obj.get("precisionWindowLength")
        })
        return _obj



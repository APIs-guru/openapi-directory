# coding: utf-8

"""
    Vertex AI API

    Train high-quality custom machine learning models with minimal machine learning expertise and effort.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudAiplatformV1SpecialistPool(BaseModel):
    """
    SpecialistPool represents customers' own workforce to work on their data labeling jobs. It includes a group of specialist managers and workers. Managers are responsible for managing the workers in this pool as well as customers' data labeling jobs associated with this pool. Customers create specialist pool as well as start data labeling jobs on Cloud, managers and workers handle the jobs using CrowdCompute console.
    """ # noqa: E501
    display_name: Optional[StrictStr] = Field(default=None, description="Required. The user-defined name of the SpecialistPool. The name can be up to 128 characters long and can consist of any UTF-8 characters. This field should be unique on project-level.", alias="displayName")
    name: Optional[StrictStr] = Field(default=None, description="Required. The resource name of the SpecialistPool.")
    pending_data_labeling_jobs: Optional[List[StrictStr]] = Field(default=None, description="Output only. The resource name of the pending data labeling jobs.", alias="pendingDataLabelingJobs")
    specialist_manager_emails: Optional[List[StrictStr]] = Field(default=None, description="The email addresses of the managers in the SpecialistPool.", alias="specialistManagerEmails")
    specialist_managers_count: Optional[StrictInt] = Field(default=None, description="Output only. The number of managers in this SpecialistPool.", alias="specialistManagersCount")
    specialist_worker_emails: Optional[List[StrictStr]] = Field(default=None, description="The email addresses of workers in the SpecialistPool.", alias="specialistWorkerEmails")
    __properties: ClassVar[List[str]] = ["displayName", "name", "pendingDataLabelingJobs", "specialistManagerEmails", "specialistManagersCount", "specialistWorkerEmails"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudAiplatformV1SpecialistPool from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "pending_data_labeling_jobs",
            "specialist_managers_count",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudAiplatformV1SpecialistPool from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "displayName": obj.get("displayName"),
            "name": obj.get("name"),
            "pendingDataLabelingJobs": obj.get("pendingDataLabelingJobs"),
            "specialistManagerEmails": obj.get("specialistManagerEmails"),
            "specialistManagersCount": obj.get("specialistManagersCount"),
            "specialistWorkerEmails": obj.get("specialistWorkerEmails")
        })
        return _obj



# coding: utf-8

"""
    Vertex AI API

    Train high-quality custom machine learning models with minimal machine learning expertise and effort.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_cloud_aiplatform_v1_feature_selector import GoogleCloudAiplatformV1FeatureSelector
from openapi_client.models.google_type_interval import GoogleTypeInterval
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudAiplatformV1DeleteFeatureValuesRequestSelectTimeRangeAndFeature(BaseModel):
    """
    Message to select time range and feature. Values of the selected feature generated within an inclusive time range will be deleted. Using this option permanently deletes the feature values from the specified feature IDs within the specified time range. This might include data from the online storage. If you want to retain any deleted historical data in the online storage, you must re-ingest it.
    """ # noqa: E501
    feature_selector: Optional[GoogleCloudAiplatformV1FeatureSelector] = Field(default=None, alias="featureSelector")
    skip_online_storage_delete: Optional[StrictBool] = Field(default=None, description="If set, data will not be deleted from online storage. When time range is older than the data in online storage, setting this to be true will make the deletion have no impact on online serving.", alias="skipOnlineStorageDelete")
    time_range: Optional[GoogleTypeInterval] = Field(default=None, alias="timeRange")
    __properties: ClassVar[List[str]] = ["featureSelector", "skipOnlineStorageDelete", "timeRange"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudAiplatformV1DeleteFeatureValuesRequestSelectTimeRangeAndFeature from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of feature_selector
        if self.feature_selector:
            _dict['featureSelector'] = self.feature_selector.to_dict()
        # override the default output from pydantic by calling `to_dict()` of time_range
        if self.time_range:
            _dict['timeRange'] = self.time_range.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudAiplatformV1DeleteFeatureValuesRequestSelectTimeRangeAndFeature from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "featureSelector": GoogleCloudAiplatformV1FeatureSelector.from_dict(obj["featureSelector"]) if obj.get("featureSelector") is not None else None,
            "skipOnlineStorageDelete": obj.get("skipOnlineStorageDelete"),
            "timeRange": GoogleTypeInterval.from_dict(obj["timeRange"]) if obj.get("timeRange") is not None else None
        })
        return _obj



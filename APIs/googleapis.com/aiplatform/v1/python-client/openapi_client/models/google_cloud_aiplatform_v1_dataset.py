# coding: utf-8

"""
    Vertex AI API

    Train high-quality custom machine learning models with minimal machine learning expertise and effort.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_cloud_aiplatform_v1_encryption_spec import GoogleCloudAiplatformV1EncryptionSpec
from openapi_client.models.google_cloud_aiplatform_v1_saved_query import GoogleCloudAiplatformV1SavedQuery
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudAiplatformV1Dataset(BaseModel):
    """
    A collection of DataItems and Annotations on them.
    """ # noqa: E501
    create_time: Optional[StrictStr] = Field(default=None, description="Output only. Timestamp when this Dataset was created.", alias="createTime")
    data_item_count: Optional[StrictStr] = Field(default=None, description="Output only. The number of DataItems in this Dataset. Only apply for non-structured Dataset.", alias="dataItemCount")
    description: Optional[StrictStr] = Field(default=None, description="The description of the Dataset.")
    display_name: Optional[StrictStr] = Field(default=None, description="Required. The user-defined name of the Dataset. The name can be up to 128 characters long and can consist of any UTF-8 characters.", alias="displayName")
    encryption_spec: Optional[GoogleCloudAiplatformV1EncryptionSpec] = Field(default=None, alias="encryptionSpec")
    etag: Optional[StrictStr] = Field(default=None, description="Used to perform consistent read-modify-write updates. If not set, a blind \"overwrite\" update happens.")
    labels: Optional[Dict[str, StrictStr]] = Field(default=None, description="The labels with user-defined metadata to organize your Datasets. Label keys and values can be no longer than 64 characters (Unicode codepoints), can only contain lowercase letters, numeric characters, underscores and dashes. International characters are allowed. No more than 64 user labels can be associated with one Dataset (System labels are excluded). See https://goo.gl/xmQnxf for more information and examples of labels. System reserved label keys are prefixed with \"aiplatform.googleapis.com/\" and are immutable. Following system labels exist for each Dataset: * \"aiplatform.googleapis.com/dataset_metadata_schema\": output only, its value is the metadata_schema's title.")
    metadata: Optional[Any] = Field(default=None, description="Required. Additional information about the Dataset.")
    metadata_artifact: Optional[StrictStr] = Field(default=None, description="Output only. The resource name of the Artifact that was created in MetadataStore when creating the Dataset. The Artifact resource name pattern is `projects/{project}/locations/{location}/metadataStores/{metadata_store}/artifacts/{artifact}`.", alias="metadataArtifact")
    metadata_schema_uri: Optional[StrictStr] = Field(default=None, description="Required. Points to a YAML file stored on Google Cloud Storage describing additional information about the Dataset. The schema is defined as an OpenAPI 3.0.2 Schema Object. The schema files that can be used here are found in gs://google-cloud-aiplatform/schema/dataset/metadata/.", alias="metadataSchemaUri")
    name: Optional[StrictStr] = Field(default=None, description="Output only. The resource name of the Dataset.")
    saved_queries: Optional[List[GoogleCloudAiplatformV1SavedQuery]] = Field(default=None, description="All SavedQueries belong to the Dataset will be returned in List/Get Dataset response. The annotation_specs field will not be populated except for UI cases which will only use annotation_spec_count. In CreateDataset request, a SavedQuery is created together if this field is set, up to one SavedQuery can be set in CreateDatasetRequest. The SavedQuery should not contain any AnnotationSpec.", alias="savedQueries")
    update_time: Optional[StrictStr] = Field(default=None, description="Output only. Timestamp when this Dataset was last updated.", alias="updateTime")
    __properties: ClassVar[List[str]] = ["createTime", "dataItemCount", "description", "displayName", "encryptionSpec", "etag", "labels", "metadata", "metadataArtifact", "metadataSchemaUri", "name", "savedQueries", "updateTime"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudAiplatformV1Dataset from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "create_time",
            "data_item_count",
            "metadata_artifact",
            "name",
            "update_time",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of encryption_spec
        if self.encryption_spec:
            _dict['encryptionSpec'] = self.encryption_spec.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in saved_queries (list)
        _items = []
        if self.saved_queries:
            for _item_saved_queries in self.saved_queries:
                if _item_saved_queries:
                    _items.append(_item_saved_queries.to_dict())
            _dict['savedQueries'] = _items
        # set to None if metadata (nullable) is None
        # and model_fields_set contains the field
        if self.metadata is None and "metadata" in self.model_fields_set:
            _dict['metadata'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudAiplatformV1Dataset from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "createTime": obj.get("createTime"),
            "dataItemCount": obj.get("dataItemCount"),
            "description": obj.get("description"),
            "displayName": obj.get("displayName"),
            "encryptionSpec": GoogleCloudAiplatformV1EncryptionSpec.from_dict(obj["encryptionSpec"]) if obj.get("encryptionSpec") is not None else None,
            "etag": obj.get("etag"),
            "labels": obj.get("labels"),
            "metadata": obj.get("metadata"),
            "metadataArtifact": obj.get("metadataArtifact"),
            "metadataSchemaUri": obj.get("metadataSchemaUri"),
            "name": obj.get("name"),
            "savedQueries": [GoogleCloudAiplatformV1SavedQuery.from_dict(_item) for _item in obj["savedQueries"]] if obj.get("savedQueries") is not None else None,
            "updateTime": obj.get("updateTime")
        })
        return _obj



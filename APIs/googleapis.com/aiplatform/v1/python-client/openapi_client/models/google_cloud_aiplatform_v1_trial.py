# coding: utf-8

"""
    Vertex AI API

    Train high-quality custom machine learning models with minimal machine learning expertise and effort.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_cloud_aiplatform_v1_measurement import GoogleCloudAiplatformV1Measurement
from openapi_client.models.google_cloud_aiplatform_v1_trial_parameter import GoogleCloudAiplatformV1TrialParameter
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudAiplatformV1Trial(BaseModel):
    """
    A message representing a Trial. A Trial contains a unique set of Parameters that has been or will be evaluated, along with the objective metrics got by running the Trial.
    """ # noqa: E501
    client_id: Optional[StrictStr] = Field(default=None, description="Output only. The identifier of the client that originally requested this Trial. Each client is identified by a unique client_id. When a client asks for a suggestion, Vertex AI Vizier will assign it a Trial. The client should evaluate the Trial, complete it, and report back to Vertex AI Vizier. If suggestion is asked again by same client_id before the Trial is completed, the same Trial will be returned. Multiple clients with different client_ids can ask for suggestions simultaneously, each of them will get their own Trial.", alias="clientId")
    custom_job: Optional[StrictStr] = Field(default=None, description="Output only. The CustomJob name linked to the Trial. It's set for a HyperparameterTuningJob's Trial.", alias="customJob")
    end_time: Optional[StrictStr] = Field(default=None, description="Output only. Time when the Trial's status changed to `SUCCEEDED` or `INFEASIBLE`.", alias="endTime")
    final_measurement: Optional[GoogleCloudAiplatformV1Measurement] = Field(default=None, alias="finalMeasurement")
    id: Optional[StrictStr] = Field(default=None, description="Output only. The identifier of the Trial assigned by the service.")
    infeasible_reason: Optional[StrictStr] = Field(default=None, description="Output only. A human readable string describing why the Trial is infeasible. This is set only if Trial state is `INFEASIBLE`.", alias="infeasibleReason")
    measurements: Optional[List[GoogleCloudAiplatformV1Measurement]] = Field(default=None, description="Output only. A list of measurements that are strictly lexicographically ordered by their induced tuples (steps, elapsed_duration). These are used for early stopping computations.")
    name: Optional[StrictStr] = Field(default=None, description="Output only. Resource name of the Trial assigned by the service.")
    parameters: Optional[List[GoogleCloudAiplatformV1TrialParameter]] = Field(default=None, description="Output only. The parameters of the Trial.")
    start_time: Optional[StrictStr] = Field(default=None, description="Output only. Time when the Trial was started.", alias="startTime")
    state: Optional[StrictStr] = Field(default=None, description="Output only. The detailed state of the Trial.")
    web_access_uris: Optional[Dict[str, StrictStr]] = Field(default=None, description="Output only. URIs for accessing [interactive shells](https://cloud.google.com/vertex-ai/docs/training/monitor-debug-interactive-shell) (one URI for each training node). Only available if this trial is part of a HyperparameterTuningJob and the job's trial_job_spec.enable_web_access field is `true`. The keys are names of each node used for the trial; for example, `workerpool0-0` for the primary node, `workerpool1-0` for the first node in the second worker pool, and `workerpool1-1` for the second node in the second worker pool. The values are the URIs for each node's interactive shell.", alias="webAccessUris")
    __properties: ClassVar[List[str]] = ["clientId", "customJob", "endTime", "finalMeasurement", "id", "infeasibleReason", "measurements", "name", "parameters", "startTime", "state", "webAccessUris"]

    @field_validator('state')
    def state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['STATE_UNSPECIFIED', 'REQUESTED', 'ACTIVE', 'STOPPING', 'SUCCEEDED', 'INFEASIBLE']):
            raise ValueError("must be one of enum values ('STATE_UNSPECIFIED', 'REQUESTED', 'ACTIVE', 'STOPPING', 'SUCCEEDED', 'INFEASIBLE')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudAiplatformV1Trial from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "client_id",
            "custom_job",
            "end_time",
            "id",
            "infeasible_reason",
            "measurements",
            "name",
            "parameters",
            "start_time",
            "state",
            "web_access_uris",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of final_measurement
        if self.final_measurement:
            _dict['finalMeasurement'] = self.final_measurement.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in measurements (list)
        _items = []
        if self.measurements:
            for _item_measurements in self.measurements:
                if _item_measurements:
                    _items.append(_item_measurements.to_dict())
            _dict['measurements'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in parameters (list)
        _items = []
        if self.parameters:
            for _item_parameters in self.parameters:
                if _item_parameters:
                    _items.append(_item_parameters.to_dict())
            _dict['parameters'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudAiplatformV1Trial from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "clientId": obj.get("clientId"),
            "customJob": obj.get("customJob"),
            "endTime": obj.get("endTime"),
            "finalMeasurement": GoogleCloudAiplatformV1Measurement.from_dict(obj["finalMeasurement"]) if obj.get("finalMeasurement") is not None else None,
            "id": obj.get("id"),
            "infeasibleReason": obj.get("infeasibleReason"),
            "measurements": [GoogleCloudAiplatformV1Measurement.from_dict(_item) for _item in obj["measurements"]] if obj.get("measurements") is not None else None,
            "name": obj.get("name"),
            "parameters": [GoogleCloudAiplatformV1TrialParameter.from_dict(_item) for _item in obj["parameters"]] if obj.get("parameters") is not None else None,
            "startTime": obj.get("startTime"),
            "state": obj.get("state"),
            "webAccessUris": obj.get("webAccessUris")
        })
        return _obj



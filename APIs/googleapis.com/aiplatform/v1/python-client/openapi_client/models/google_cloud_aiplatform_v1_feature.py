# coding: utf-8

"""
    Vertex AI API

    Train high-quality custom machine learning models with minimal machine learning expertise and effort.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_cloud_aiplatform_v1_feature_monitoring_stats_anomaly import GoogleCloudAiplatformV1FeatureMonitoringStatsAnomaly
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudAiplatformV1Feature(BaseModel):
    """
    Feature Metadata information. For example, color is a feature that describes an apple.
    """ # noqa: E501
    create_time: Optional[StrictStr] = Field(default=None, description="Output only. Only applicable for Vertex AI Feature Store (Legacy). Timestamp when this EntityType was created.", alias="createTime")
    description: Optional[StrictStr] = Field(default=None, description="Description of the Feature.")
    disable_monitoring: Optional[StrictBool] = Field(default=None, description="Optional. Only applicable for Vertex AI Feature Store (Legacy). If not set, use the monitoring_config defined for the EntityType this Feature belongs to. Only Features with type (Feature.ValueType) BOOL, STRING, DOUBLE or INT64 can enable monitoring. If set to true, all types of data monitoring are disabled despite the config on EntityType.", alias="disableMonitoring")
    etag: Optional[StrictStr] = Field(default=None, description="Used to perform a consistent read-modify-write updates. If not set, a blind \"overwrite\" update happens.")
    labels: Optional[Dict[str, StrictStr]] = Field(default=None, description="Optional. The labels with user-defined metadata to organize your Features. Label keys and values can be no longer than 64 characters (Unicode codepoints), can only contain lowercase letters, numeric characters, underscores and dashes. International characters are allowed. See https://goo.gl/xmQnxf for more information on and examples of labels. No more than 64 user labels can be associated with one Feature (System labels are excluded).\" System reserved label keys are prefixed with \"aiplatform.googleapis.com/\" and are immutable.")
    monitoring_stats_anomalies: Optional[List[GoogleCloudAiplatformV1FeatureMonitoringStatsAnomaly]] = Field(default=None, description="Output only. Only applicable for Vertex AI Feature Store (Legacy). The list of historical stats and anomalies with specified objectives.", alias="monitoringStatsAnomalies")
    name: Optional[StrictStr] = Field(default=None, description="Immutable. Name of the Feature. Format: `projects/{project}/locations/{location}/featurestores/{featurestore}/entityTypes/{entity_type}/features/{feature}` `projects/{project}/locations/{location}/featureGroups/{feature_group}/features/{feature}` The last part feature is assigned by the client. The feature can be up to 64 characters long and can consist only of ASCII Latin letters A-Z and a-z, underscore(_), and ASCII digits 0-9 starting with a letter. The value will be unique given an entity type.")
    point_of_contact: Optional[StrictStr] = Field(default=None, description="Entity responsible for maintaining this feature. Can be comma separated list of email addresses or URIs.", alias="pointOfContact")
    update_time: Optional[StrictStr] = Field(default=None, description="Output only. Only applicable for Vertex AI Feature Store (Legacy). Timestamp when this EntityType was most recently updated.", alias="updateTime")
    value_type: Optional[StrictStr] = Field(default=None, description="Immutable. Only applicable for Vertex AI Feature Store (Legacy). Type of Feature value.", alias="valueType")
    version_column_name: Optional[StrictStr] = Field(default=None, description="Only applicable for Vertex AI Feature Store. The name of the BigQuery Table/View column hosting data for this version. If no value is provided, will use feature_id.", alias="versionColumnName")
    __properties: ClassVar[List[str]] = ["createTime", "description", "disableMonitoring", "etag", "labels", "monitoringStatsAnomalies", "name", "pointOfContact", "updateTime", "valueType", "versionColumnName"]

    @field_validator('value_type')
    def value_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['VALUE_TYPE_UNSPECIFIED', 'BOOL', 'BOOL_ARRAY', 'DOUBLE', 'DOUBLE_ARRAY', 'INT64', 'INT64_ARRAY', 'STRING', 'STRING_ARRAY', 'BYTES']):
            raise ValueError("must be one of enum values ('VALUE_TYPE_UNSPECIFIED', 'BOOL', 'BOOL_ARRAY', 'DOUBLE', 'DOUBLE_ARRAY', 'INT64', 'INT64_ARRAY', 'STRING', 'STRING_ARRAY', 'BYTES')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudAiplatformV1Feature from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "create_time",
            "monitoring_stats_anomalies",
            "update_time",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in monitoring_stats_anomalies (list)
        _items = []
        if self.monitoring_stats_anomalies:
            for _item_monitoring_stats_anomalies in self.monitoring_stats_anomalies:
                if _item_monitoring_stats_anomalies:
                    _items.append(_item_monitoring_stats_anomalies.to_dict())
            _dict['monitoringStatsAnomalies'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudAiplatformV1Feature from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "createTime": obj.get("createTime"),
            "description": obj.get("description"),
            "disableMonitoring": obj.get("disableMonitoring"),
            "etag": obj.get("etag"),
            "labels": obj.get("labels"),
            "monitoringStatsAnomalies": [GoogleCloudAiplatformV1FeatureMonitoringStatsAnomaly.from_dict(_item) for _item in obj["monitoringStatsAnomalies"]] if obj.get("monitoringStatsAnomalies") is not None else None,
            "name": obj.get("name"),
            "pointOfContact": obj.get("pointOfContact"),
            "updateTime": obj.get("updateTime"),
            "valueType": obj.get("valueType"),
            "versionColumnName": obj.get("versionColumnName")
        })
        return _obj



# coding: utf-8

"""
    Vertex AI API

    Train high-quality custom machine learning models with minimal machine learning expertise and effort.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_cloud_aiplatform_v1_automatic_resources import GoogleCloudAiplatformV1AutomaticResources
from openapi_client.models.google_cloud_aiplatform_v1_dedicated_resources import GoogleCloudAiplatformV1DedicatedResources
from openapi_client.models.google_cloud_aiplatform_v1_large_model_reference import GoogleCloudAiplatformV1LargeModelReference
from openapi_client.models.google_cloud_aiplatform_v1_model_container_spec import GoogleCloudAiplatformV1ModelContainerSpec
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudAiplatformV1PublisherModelCallToActionDeploy(BaseModel):
    """
    Model metadata that is needed for UploadModel or DeployModel/CreateEndpoint requests.
    """ # noqa: E501
    artifact_uri: Optional[StrictStr] = Field(default=None, description="Optional. The path to the directory containing the Model artifact and any of its supporting files.", alias="artifactUri")
    automatic_resources: Optional[GoogleCloudAiplatformV1AutomaticResources] = Field(default=None, alias="automaticResources")
    container_spec: Optional[GoogleCloudAiplatformV1ModelContainerSpec] = Field(default=None, alias="containerSpec")
    dedicated_resources: Optional[GoogleCloudAiplatformV1DedicatedResources] = Field(default=None, alias="dedicatedResources")
    large_model_reference: Optional[GoogleCloudAiplatformV1LargeModelReference] = Field(default=None, alias="largeModelReference")
    model_display_name: Optional[StrictStr] = Field(default=None, description="Optional. Default model display name.", alias="modelDisplayName")
    public_artifact_uri: Optional[StrictStr] = Field(default=None, description="Optional. The signed URI for ephemeral Cloud Storage access to model artifact.", alias="publicArtifactUri")
    shared_resources: Optional[StrictStr] = Field(default=None, description="The resource name of the shared DeploymentResourcePool to deploy on. Format: `projects/{project}/locations/{location}/deploymentResourcePools/{deployment_resource_pool}`", alias="sharedResources")
    title: Optional[StrictStr] = Field(default=None, description="Required. The title of the regional resource reference.")
    __properties: ClassVar[List[str]] = ["artifactUri", "automaticResources", "containerSpec", "dedicatedResources", "largeModelReference", "modelDisplayName", "publicArtifactUri", "sharedResources", "title"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudAiplatformV1PublisherModelCallToActionDeploy from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of automatic_resources
        if self.automatic_resources:
            _dict['automaticResources'] = self.automatic_resources.to_dict()
        # override the default output from pydantic by calling `to_dict()` of container_spec
        if self.container_spec:
            _dict['containerSpec'] = self.container_spec.to_dict()
        # override the default output from pydantic by calling `to_dict()` of dedicated_resources
        if self.dedicated_resources:
            _dict['dedicatedResources'] = self.dedicated_resources.to_dict()
        # override the default output from pydantic by calling `to_dict()` of large_model_reference
        if self.large_model_reference:
            _dict['largeModelReference'] = self.large_model_reference.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudAiplatformV1PublisherModelCallToActionDeploy from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "artifactUri": obj.get("artifactUri"),
            "automaticResources": GoogleCloudAiplatformV1AutomaticResources.from_dict(obj["automaticResources"]) if obj.get("automaticResources") is not None else None,
            "containerSpec": GoogleCloudAiplatformV1ModelContainerSpec.from_dict(obj["containerSpec"]) if obj.get("containerSpec") is not None else None,
            "dedicatedResources": GoogleCloudAiplatformV1DedicatedResources.from_dict(obj["dedicatedResources"]) if obj.get("dedicatedResources") is not None else None,
            "largeModelReference": GoogleCloudAiplatformV1LargeModelReference.from_dict(obj["largeModelReference"]) if obj.get("largeModelReference") is not None else None,
            "modelDisplayName": obj.get("modelDisplayName"),
            "publicArtifactUri": obj.get("publicArtifactUri"),
            "sharedResources": obj.get("sharedResources"),
            "title": obj.get("title")
        })
        return _obj



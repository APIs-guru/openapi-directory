# coding: utf-8

"""
    Vertex AI API

    Train high-quality custom machine learning models with minimal machine learning expertise and effort.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_cloud_aiplatform_v1_sample_config import GoogleCloudAiplatformV1SampleConfig
from openapi_client.models.google_cloud_aiplatform_v1_training_config import GoogleCloudAiplatformV1TrainingConfig
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudAiplatformV1ActiveLearningConfig(BaseModel):
    """
    Parameters that configure the active learning pipeline. Active learning will label the data incrementally by several iterations. For every iteration, it will select a batch of data based on the sampling strategy.
    """ # noqa: E501
    max_data_item_count: Optional[StrictStr] = Field(default=None, description="Max number of human labeled DataItems.", alias="maxDataItemCount")
    max_data_item_percentage: Optional[StrictInt] = Field(default=None, description="Max percent of total DataItems for human labeling.", alias="maxDataItemPercentage")
    sample_config: Optional[GoogleCloudAiplatformV1SampleConfig] = Field(default=None, alias="sampleConfig")
    training_config: Optional[GoogleCloudAiplatformV1TrainingConfig] = Field(default=None, alias="trainingConfig")
    __properties: ClassVar[List[str]] = ["maxDataItemCount", "maxDataItemPercentage", "sampleConfig", "trainingConfig"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudAiplatformV1ActiveLearningConfig from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of sample_config
        if self.sample_config:
            _dict['sampleConfig'] = self.sample_config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of training_config
        if self.training_config:
            _dict['trainingConfig'] = self.training_config.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudAiplatformV1ActiveLearningConfig from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "maxDataItemCount": obj.get("maxDataItemCount"),
            "maxDataItemPercentage": obj.get("maxDataItemPercentage"),
            "sampleConfig": GoogleCloudAiplatformV1SampleConfig.from_dict(obj["sampleConfig"]) if obj.get("sampleConfig") is not None else None,
            "trainingConfig": GoogleCloudAiplatformV1TrainingConfig.from_dict(obj["trainingConfig"]) if obj.get("trainingConfig") is not None else None
        })
        return _obj



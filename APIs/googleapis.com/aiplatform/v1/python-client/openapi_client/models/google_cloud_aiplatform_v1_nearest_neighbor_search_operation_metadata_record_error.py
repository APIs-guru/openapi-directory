# coding: utf-8

"""
    Vertex AI API

    Train high-quality custom machine learning models with minimal machine learning expertise and effort.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudAiplatformV1NearestNeighborSearchOperationMetadataRecordError(BaseModel):
    """
    GoogleCloudAiplatformV1NearestNeighborSearchOperationMetadataRecordError
    """ # noqa: E501
    embedding_id: Optional[StrictStr] = Field(default=None, description="Empty if the embedding id is failed to parse.", alias="embeddingId")
    error_message: Optional[StrictStr] = Field(default=None, description="A human-readable message that is shown to the user to help them fix the error. Note that this message may change from time to time, your code should check against error_type as the source of truth.", alias="errorMessage")
    error_type: Optional[StrictStr] = Field(default=None, description="The error type of this record.", alias="errorType")
    raw_record: Optional[StrictStr] = Field(default=None, description="The original content of this record.", alias="rawRecord")
    source_gcs_uri: Optional[StrictStr] = Field(default=None, description="Cloud Storage URI pointing to the original file in user's bucket.", alias="sourceGcsUri")
    __properties: ClassVar[List[str]] = ["embeddingId", "errorMessage", "errorType", "rawRecord", "sourceGcsUri"]

    @field_validator('error_type')
    def error_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['ERROR_TYPE_UNSPECIFIED', 'EMPTY_LINE', 'INVALID_JSON_SYNTAX', 'INVALID_CSV_SYNTAX', 'INVALID_AVRO_SYNTAX', 'INVALID_EMBEDDING_ID', 'EMBEDDING_SIZE_MISMATCH', 'NAMESPACE_MISSING', 'PARSING_ERROR', 'DUPLICATE_NAMESPACE', 'OP_IN_DATAPOINT', 'MULTIPLE_VALUES', 'INVALID_NUMERIC_VALUE', 'INVALID_ENCODING']):
            raise ValueError("must be one of enum values ('ERROR_TYPE_UNSPECIFIED', 'EMPTY_LINE', 'INVALID_JSON_SYNTAX', 'INVALID_CSV_SYNTAX', 'INVALID_AVRO_SYNTAX', 'INVALID_EMBEDDING_ID', 'EMBEDDING_SIZE_MISMATCH', 'NAMESPACE_MISSING', 'PARSING_ERROR', 'DUPLICATE_NAMESPACE', 'OP_IN_DATAPOINT', 'MULTIPLE_VALUES', 'INVALID_NUMERIC_VALUE', 'INVALID_ENCODING')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudAiplatformV1NearestNeighborSearchOperationMetadataRecordError from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudAiplatformV1NearestNeighborSearchOperationMetadataRecordError from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "embeddingId": obj.get("embeddingId"),
            "errorMessage": obj.get("errorMessage"),
            "errorType": obj.get("errorType"),
            "rawRecord": obj.get("rawRecord"),
            "sourceGcsUri": obj.get("sourceGcsUri")
        })
        return _obj



# coding: utf-8

"""
    Vertex AI API

    Train high-quality custom machine learning models with minimal machine learning expertise and effort.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_cloud_aiplatform_v1_model_monitoring_stats_anomalies_feature_historic_stats_anomalies import GoogleCloudAiplatformV1ModelMonitoringStatsAnomaliesFeatureHistoricStatsAnomalies
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudAiplatformV1ModelMonitoringStatsAnomalies(BaseModel):
    """
    Statistics and anomalies generated by Model Monitoring.
    """ # noqa: E501
    anomaly_count: Optional[StrictInt] = Field(default=None, description="Number of anomalies within all stats.", alias="anomalyCount")
    deployed_model_id: Optional[StrictStr] = Field(default=None, description="Deployed Model ID.", alias="deployedModelId")
    feature_stats: Optional[List[GoogleCloudAiplatformV1ModelMonitoringStatsAnomaliesFeatureHistoricStatsAnomalies]] = Field(default=None, description="A list of historical Stats and Anomalies generated for all Features.", alias="featureStats")
    objective: Optional[StrictStr] = Field(default=None, description="Model Monitoring Objective those stats and anomalies belonging to.")
    __properties: ClassVar[List[str]] = ["anomalyCount", "deployedModelId", "featureStats", "objective"]

    @field_validator('objective')
    def objective_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['MODEL_DEPLOYMENT_MONITORING_OBJECTIVE_TYPE_UNSPECIFIED', 'RAW_FEATURE_SKEW', 'RAW_FEATURE_DRIFT', 'FEATURE_ATTRIBUTION_SKEW', 'FEATURE_ATTRIBUTION_DRIFT']):
            raise ValueError("must be one of enum values ('MODEL_DEPLOYMENT_MONITORING_OBJECTIVE_TYPE_UNSPECIFIED', 'RAW_FEATURE_SKEW', 'RAW_FEATURE_DRIFT', 'FEATURE_ATTRIBUTION_SKEW', 'FEATURE_ATTRIBUTION_DRIFT')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudAiplatformV1ModelMonitoringStatsAnomalies from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in feature_stats (list)
        _items = []
        if self.feature_stats:
            for _item_feature_stats in self.feature_stats:
                if _item_feature_stats:
                    _items.append(_item_feature_stats.to_dict())
            _dict['featureStats'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudAiplatformV1ModelMonitoringStatsAnomalies from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "anomalyCount": obj.get("anomalyCount"),
            "deployedModelId": obj.get("deployedModelId"),
            "featureStats": [GoogleCloudAiplatformV1ModelMonitoringStatsAnomaliesFeatureHistoricStatsAnomalies.from_dict(_item) for _item in obj["featureStats"]] if obj.get("featureStats") is not None else None,
            "objective": obj.get("objective")
        })
        return _obj



# coding: utf-8

"""
    Vertex AI API

    Train high-quality custom machine learning models with minimal machine learning expertise and effort.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_cloud_aiplatform_v1_pipeline_job import GoogleCloudAiplatformV1PipelineJob
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudAiplatformV1CreatePipelineJobRequest(BaseModel):
    """
    Request message for PipelineService.CreatePipelineJob.
    """ # noqa: E501
    parent: Optional[StrictStr] = Field(default=None, description="Required. The resource name of the Location to create the PipelineJob in. Format: `projects/{project}/locations/{location}`")
    pipeline_job: Optional[GoogleCloudAiplatformV1PipelineJob] = Field(default=None, alias="pipelineJob")
    pipeline_job_id: Optional[StrictStr] = Field(default=None, description="The ID to use for the PipelineJob, which will become the final component of the PipelineJob name. If not provided, an ID will be automatically generated. This value should be less than 128 characters, and valid characters are `/a-z-/`.", alias="pipelineJobId")
    __properties: ClassVar[List[str]] = ["parent", "pipelineJob", "pipelineJobId"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudAiplatformV1CreatePipelineJobRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of pipeline_job
        if self.pipeline_job:
            _dict['pipelineJob'] = self.pipeline_job.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudAiplatformV1CreatePipelineJobRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "parent": obj.get("parent"),
            "pipelineJob": GoogleCloudAiplatformV1PipelineJob.from_dict(obj["pipelineJob"]) if obj.get("pipelineJob") is not None else None,
            "pipelineJobId": obj.get("pipelineJobId")
        })
        return _obj



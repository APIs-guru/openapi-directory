# coding: utf-8

"""
    Vertex AI API

    Train high-quality custom machine learning models with minimal machine learning expertise and effort.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudAiplatformV1Context(BaseModel):
    """
    Instance of a general context.
    """ # noqa: E501
    create_time: Optional[StrictStr] = Field(default=None, description="Output only. Timestamp when this Context was created.", alias="createTime")
    description: Optional[StrictStr] = Field(default=None, description="Description of the Context")
    display_name: Optional[StrictStr] = Field(default=None, description="User provided display name of the Context. May be up to 128 Unicode characters.", alias="displayName")
    etag: Optional[StrictStr] = Field(default=None, description="An eTag used to perform consistent read-modify-write updates. If not set, a blind \"overwrite\" update happens.")
    labels: Optional[Dict[str, StrictStr]] = Field(default=None, description="The labels with user-defined metadata to organize your Contexts. Label keys and values can be no longer than 64 characters (Unicode codepoints), can only contain lowercase letters, numeric characters, underscores and dashes. International characters are allowed. No more than 64 user labels can be associated with one Context (System labels are excluded).")
    metadata: Optional[Dict[str, Any]] = Field(default=None, description="Properties of the Context. Top level metadata keys' heading and trailing spaces will be trimmed. The size of this field should not exceed 200KB.")
    name: Optional[StrictStr] = Field(default=None, description="Immutable. The resource name of the Context.")
    parent_contexts: Optional[List[StrictStr]] = Field(default=None, description="Output only. A list of resource names of Contexts that are parents of this Context. A Context may have at most 10 parent_contexts.", alias="parentContexts")
    schema_title: Optional[StrictStr] = Field(default=None, description="The title of the schema describing the metadata. Schema title and version is expected to be registered in earlier Create Schema calls. And both are used together as unique identifiers to identify schemas within the local metadata store.", alias="schemaTitle")
    schema_version: Optional[StrictStr] = Field(default=None, description="The version of the schema in schema_name to use. Schema title and version is expected to be registered in earlier Create Schema calls. And both are used together as unique identifiers to identify schemas within the local metadata store.", alias="schemaVersion")
    update_time: Optional[StrictStr] = Field(default=None, description="Output only. Timestamp when this Context was last updated.", alias="updateTime")
    __properties: ClassVar[List[str]] = ["createTime", "description", "displayName", "etag", "labels", "metadata", "name", "parentContexts", "schemaTitle", "schemaVersion", "updateTime"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudAiplatformV1Context from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "create_time",
            "parent_contexts",
            "update_time",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudAiplatformV1Context from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "createTime": obj.get("createTime"),
            "description": obj.get("description"),
            "displayName": obj.get("displayName"),
            "etag": obj.get("etag"),
            "labels": obj.get("labels"),
            "metadata": obj.get("metadata"),
            "name": obj.get("name"),
            "parentContexts": obj.get("parentContexts"),
            "schemaTitle": obj.get("schemaTitle"),
            "schemaVersion": obj.get("schemaVersion"),
            "updateTime": obj.get("updateTime")
        })
        return _obj



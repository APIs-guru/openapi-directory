# coding: utf-8

"""
    Vertex AI API

    Train high-quality custom machine learning models with minimal machine learning expertise and effort.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_cloud_aiplatform_v1_encryption_spec import GoogleCloudAiplatformV1EncryptionSpec
from openapi_client.models.google_cloud_aiplatform_v1_nas_job_output import GoogleCloudAiplatformV1NasJobOutput
from openapi_client.models.google_cloud_aiplatform_v1_nas_job_spec import GoogleCloudAiplatformV1NasJobSpec
from openapi_client.models.google_rpc_status import GoogleRpcStatus
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudAiplatformV1NasJob(BaseModel):
    """
    Represents a Neural Architecture Search (NAS) job.
    """ # noqa: E501
    create_time: Optional[StrictStr] = Field(default=None, description="Output only. Time when the NasJob was created.", alias="createTime")
    display_name: Optional[StrictStr] = Field(default=None, description="Required. The display name of the NasJob. The name can be up to 128 characters long and can consist of any UTF-8 characters.", alias="displayName")
    enable_restricted_image_training: Optional[StrictBool] = Field(default=None, description="Optional. Enable a separation of Custom model training and restricted image training for tenant project.", alias="enableRestrictedImageTraining")
    encryption_spec: Optional[GoogleCloudAiplatformV1EncryptionSpec] = Field(default=None, alias="encryptionSpec")
    end_time: Optional[StrictStr] = Field(default=None, description="Output only. Time when the NasJob entered any of the following states: `JOB_STATE_SUCCEEDED`, `JOB_STATE_FAILED`, `JOB_STATE_CANCELLED`.", alias="endTime")
    error: Optional[GoogleRpcStatus] = None
    labels: Optional[Dict[str, StrictStr]] = Field(default=None, description="The labels with user-defined metadata to organize NasJobs. Label keys and values can be no longer than 64 characters (Unicode codepoints), can only contain lowercase letters, numeric characters, underscores and dashes. International characters are allowed. See https://goo.gl/xmQnxf for more information and examples of labels.")
    name: Optional[StrictStr] = Field(default=None, description="Output only. Resource name of the NasJob.")
    nas_job_output: Optional[GoogleCloudAiplatformV1NasJobOutput] = Field(default=None, alias="nasJobOutput")
    nas_job_spec: Optional[GoogleCloudAiplatformV1NasJobSpec] = Field(default=None, alias="nasJobSpec")
    start_time: Optional[StrictStr] = Field(default=None, description="Output only. Time when the NasJob for the first time entered the `JOB_STATE_RUNNING` state.", alias="startTime")
    state: Optional[StrictStr] = Field(default=None, description="Output only. The detailed state of the job.")
    update_time: Optional[StrictStr] = Field(default=None, description="Output only. Time when the NasJob was most recently updated.", alias="updateTime")
    __properties: ClassVar[List[str]] = ["createTime", "displayName", "enableRestrictedImageTraining", "encryptionSpec", "endTime", "error", "labels", "name", "nasJobOutput", "nasJobSpec", "startTime", "state", "updateTime"]

    @field_validator('state')
    def state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['JOB_STATE_UNSPECIFIED', 'JOB_STATE_QUEUED', 'JOB_STATE_PENDING', 'JOB_STATE_RUNNING', 'JOB_STATE_SUCCEEDED', 'JOB_STATE_FAILED', 'JOB_STATE_CANCELLING', 'JOB_STATE_CANCELLED', 'JOB_STATE_PAUSED', 'JOB_STATE_EXPIRED', 'JOB_STATE_UPDATING', 'JOB_STATE_PARTIALLY_SUCCEEDED']):
            raise ValueError("must be one of enum values ('JOB_STATE_UNSPECIFIED', 'JOB_STATE_QUEUED', 'JOB_STATE_PENDING', 'JOB_STATE_RUNNING', 'JOB_STATE_SUCCEEDED', 'JOB_STATE_FAILED', 'JOB_STATE_CANCELLING', 'JOB_STATE_CANCELLED', 'JOB_STATE_PAUSED', 'JOB_STATE_EXPIRED', 'JOB_STATE_UPDATING', 'JOB_STATE_PARTIALLY_SUCCEEDED')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudAiplatformV1NasJob from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "create_time",
            "end_time",
            "name",
            "start_time",
            "state",
            "update_time",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of encryption_spec
        if self.encryption_spec:
            _dict['encryptionSpec'] = self.encryption_spec.to_dict()
        # override the default output from pydantic by calling `to_dict()` of error
        if self.error:
            _dict['error'] = self.error.to_dict()
        # override the default output from pydantic by calling `to_dict()` of nas_job_output
        if self.nas_job_output:
            _dict['nasJobOutput'] = self.nas_job_output.to_dict()
        # override the default output from pydantic by calling `to_dict()` of nas_job_spec
        if self.nas_job_spec:
            _dict['nasJobSpec'] = self.nas_job_spec.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudAiplatformV1NasJob from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "createTime": obj.get("createTime"),
            "displayName": obj.get("displayName"),
            "enableRestrictedImageTraining": obj.get("enableRestrictedImageTraining"),
            "encryptionSpec": GoogleCloudAiplatformV1EncryptionSpec.from_dict(obj["encryptionSpec"]) if obj.get("encryptionSpec") is not None else None,
            "endTime": obj.get("endTime"),
            "error": GoogleRpcStatus.from_dict(obj["error"]) if obj.get("error") is not None else None,
            "labels": obj.get("labels"),
            "name": obj.get("name"),
            "nasJobOutput": GoogleCloudAiplatformV1NasJobOutput.from_dict(obj["nasJobOutput"]) if obj.get("nasJobOutput") is not None else None,
            "nasJobSpec": GoogleCloudAiplatformV1NasJobSpec.from_dict(obj["nasJobSpec"]) if obj.get("nasJobSpec") is not None else None,
            "startTime": obj.get("startTime"),
            "state": obj.get("state"),
            "updateTime": obj.get("updateTime")
        })
        return _obj



# coding: utf-8

"""
    Vertex AI API

    Train high-quality custom machine learning models with minimal machine learning expertise and effort.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_cloud_aiplatform_v1_time_series_data import GoogleCloudAiplatformV1TimeSeriesData
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudAiplatformV1WriteTensorboardRunDataRequest(BaseModel):
    """
    Request message for TensorboardService.WriteTensorboardRunData.
    """ # noqa: E501
    tensorboard_run: Optional[StrictStr] = Field(default=None, description="Required. The resource name of the TensorboardRun to write data to. Format: `projects/{project}/locations/{location}/tensorboards/{tensorboard}/experiments/{experiment}/runs/{run}`", alias="tensorboardRun")
    time_series_data: Optional[List[GoogleCloudAiplatformV1TimeSeriesData]] = Field(default=None, description="Required. The TensorboardTimeSeries data to write. Values with in a time series are indexed by their step value. Repeated writes to the same step will overwrite the existing value for that step. The upper limit of data points per write request is 5000.", alias="timeSeriesData")
    __properties: ClassVar[List[str]] = ["tensorboardRun", "timeSeriesData"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudAiplatformV1WriteTensorboardRunDataRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in time_series_data (list)
        _items = []
        if self.time_series_data:
            for _item_time_series_data in self.time_series_data:
                if _item_time_series_data:
                    _items.append(_item_time_series_data.to_dict())
            _dict['timeSeriesData'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudAiplatformV1WriteTensorboardRunDataRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "tensorboardRun": obj.get("tensorboardRun"),
            "timeSeriesData": [GoogleCloudAiplatformV1TimeSeriesData.from_dict(_item) for _item in obj["timeSeriesData"]] if obj.get("timeSeriesData") is not None else None
        })
        return _obj



# coding: utf-8

"""
    Vertex AI API

    Train high-quality custom machine learning models with minimal machine learning expertise and effort.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt
from typing import Any, ClassVar, Dict, List, Optional, Union
from openapi_client.models.learning_genai_root_calculation_type import LearningGenaiRootCalculationType
from openapi_client.models.learning_genai_root_internal_metadata import LearningGenaiRootInternalMetadata
from openapi_client.models.learning_genai_root_threshold_type import LearningGenaiRootThresholdType
from openapi_client.models.learning_genai_root_tokens_and_log_prob_per_decoding_step import LearningGenaiRootTokensAndLogProbPerDecodingStep
from typing import Optional, Set
from typing_extensions import Self

class LearningGenaiRootScore(BaseModel):
    """
    LearningGenaiRootScore
    """ # noqa: E501
    calculation_type: Optional[LearningGenaiRootCalculationType] = Field(default=None, alias="calculationType")
    internal_metadata: Optional[LearningGenaiRootInternalMetadata] = Field(default=None, alias="internalMetadata")
    threshold_type: Optional[LearningGenaiRootThresholdType] = Field(default=None, alias="thresholdType")
    tokens_and_logprob_per_decoding_step: Optional[LearningGenaiRootTokensAndLogProbPerDecodingStep] = Field(default=None, alias="tokensAndLogprobPerDecodingStep")
    value: Optional[Union[StrictFloat, StrictInt]] = None
    __properties: ClassVar[List[str]] = ["calculationType", "internalMetadata", "thresholdType", "tokensAndLogprobPerDecodingStep", "value"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of LearningGenaiRootScore from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of calculation_type
        if self.calculation_type:
            _dict['calculationType'] = self.calculation_type.to_dict()
        # override the default output from pydantic by calling `to_dict()` of internal_metadata
        if self.internal_metadata:
            _dict['internalMetadata'] = self.internal_metadata.to_dict()
        # override the default output from pydantic by calling `to_dict()` of threshold_type
        if self.threshold_type:
            _dict['thresholdType'] = self.threshold_type.to_dict()
        # override the default output from pydantic by calling `to_dict()` of tokens_and_logprob_per_decoding_step
        if self.tokens_and_logprob_per_decoding_step:
            _dict['tokensAndLogprobPerDecodingStep'] = self.tokens_and_logprob_per_decoding_step.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of LearningGenaiRootScore from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "calculationType": LearningGenaiRootCalculationType.from_dict(obj["calculationType"]) if obj.get("calculationType") is not None else None,
            "internalMetadata": LearningGenaiRootInternalMetadata.from_dict(obj["internalMetadata"]) if obj.get("internalMetadata") is not None else None,
            "thresholdType": LearningGenaiRootThresholdType.from_dict(obj["thresholdType"]) if obj.get("thresholdType") is not None else None,
            "tokensAndLogprobPerDecodingStep": LearningGenaiRootTokensAndLogProbPerDecodingStep.from_dict(obj["tokensAndLogprobPerDecodingStep"]) if obj.get("tokensAndLogprobPerDecodingStep") is not None else None,
            "value": obj.get("value")
        })
        return _obj



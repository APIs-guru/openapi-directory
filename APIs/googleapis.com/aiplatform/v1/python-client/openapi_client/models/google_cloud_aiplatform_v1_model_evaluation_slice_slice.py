# coding: utf-8

"""
    Vertex AI API

    Train high-quality custom machine learning models with minimal machine learning expertise and effort.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_cloud_aiplatform_v1_model_evaluation_slice_slice_slice_spec import GoogleCloudAiplatformV1ModelEvaluationSliceSliceSliceSpec
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudAiplatformV1ModelEvaluationSliceSlice(BaseModel):
    """
    Definition of a slice.
    """ # noqa: E501
    dimension: Optional[StrictStr] = Field(default=None, description="Output only. The dimension of the slice. Well-known dimensions are: * `annotationSpec`: This slice is on the test data that has either ground truth or prediction with AnnotationSpec.display_name equals to value. * `slice`: This slice is a user customized slice defined by its SliceSpec.")
    slice_spec: Optional[GoogleCloudAiplatformV1ModelEvaluationSliceSliceSliceSpec] = Field(default=None, alias="sliceSpec")
    value: Optional[StrictStr] = Field(default=None, description="Output only. The value of the dimension in this slice.")
    __properties: ClassVar[List[str]] = ["dimension", "sliceSpec", "value"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudAiplatformV1ModelEvaluationSliceSlice from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "dimension",
            "value",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of slice_spec
        if self.slice_spec:
            _dict['sliceSpec'] = self.slice_spec.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudAiplatformV1ModelEvaluationSliceSlice from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "dimension": obj.get("dimension"),
            "sliceSpec": GoogleCloudAiplatformV1ModelEvaluationSliceSliceSliceSpec.from_dict(obj["sliceSpec"]) if obj.get("sliceSpec") is not None else None,
            "value": obj.get("value")
        })
        return _obj



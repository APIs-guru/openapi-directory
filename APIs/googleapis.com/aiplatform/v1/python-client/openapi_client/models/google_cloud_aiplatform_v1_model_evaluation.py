# coding: utf-8

"""
    Vertex AI API

    Train high-quality custom machine learning models with minimal machine learning expertise and effort.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_cloud_aiplatform_v1_model_evaluation_model_evaluation_explanation_spec import GoogleCloudAiplatformV1ModelEvaluationModelEvaluationExplanationSpec
from openapi_client.models.google_cloud_aiplatform_v1_model_explanation import GoogleCloudAiplatformV1ModelExplanation
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudAiplatformV1ModelEvaluation(BaseModel):
    """
    A collection of metrics calculated by comparing Model's predictions on all of the test data against annotations from the test data.
    """ # noqa: E501
    annotation_schema_uri: Optional[StrictStr] = Field(default=None, description="Points to a YAML file stored on Google Cloud Storage describing EvaluatedDataItemView.predictions, EvaluatedDataItemView.ground_truths, EvaluatedAnnotation.predictions, and EvaluatedAnnotation.ground_truths. The schema is defined as an OpenAPI 3.0.2 [Schema Object](https://github.com/OAI/OpenAPI-Specification/blob/main/versions/3.0.2.md#schemaObject). This field is not populated if there are neither EvaluatedDataItemViews nor EvaluatedAnnotations under this ModelEvaluation.", alias="annotationSchemaUri")
    create_time: Optional[StrictStr] = Field(default=None, description="Output only. Timestamp when this ModelEvaluation was created.", alias="createTime")
    data_item_schema_uri: Optional[StrictStr] = Field(default=None, description="Points to a YAML file stored on Google Cloud Storage describing EvaluatedDataItemView.data_item_payload and EvaluatedAnnotation.data_item_payload. The schema is defined as an OpenAPI 3.0.2 [Schema Object](https://github.com/OAI/OpenAPI-Specification/blob/main/versions/3.0.2.md#schemaObject). This field is not populated if there are neither EvaluatedDataItemViews nor EvaluatedAnnotations under this ModelEvaluation.", alias="dataItemSchemaUri")
    display_name: Optional[StrictStr] = Field(default=None, description="The display name of the ModelEvaluation.", alias="displayName")
    explanation_specs: Optional[List[GoogleCloudAiplatformV1ModelEvaluationModelEvaluationExplanationSpec]] = Field(default=None, description="Describes the values of ExplanationSpec that are used for explaining the predicted values on the evaluated data.", alias="explanationSpecs")
    metadata: Optional[Any] = Field(default=None, description="The metadata of the ModelEvaluation. For the ModelEvaluation uploaded from Managed Pipeline, metadata contains a structured value with keys of \"pipeline_job_id\", \"evaluation_dataset_type\", \"evaluation_dataset_path\", \"row_based_metrics_path\".")
    metrics: Optional[Any] = Field(default=None, description="Evaluation metrics of the Model. The schema of the metrics is stored in metrics_schema_uri")
    metrics_schema_uri: Optional[StrictStr] = Field(default=None, description="Points to a YAML file stored on Google Cloud Storage describing the metrics of this ModelEvaluation. The schema is defined as an OpenAPI 3.0.2 [Schema Object](https://github.com/OAI/OpenAPI-Specification/blob/main/versions/3.0.2.md#schemaObject).", alias="metricsSchemaUri")
    model_explanation: Optional[GoogleCloudAiplatformV1ModelExplanation] = Field(default=None, alias="modelExplanation")
    name: Optional[StrictStr] = Field(default=None, description="Output only. The resource name of the ModelEvaluation.")
    slice_dimensions: Optional[List[StrictStr]] = Field(default=None, description="All possible dimensions of ModelEvaluationSlices. The dimensions can be used as the filter of the ModelService.ListModelEvaluationSlices request, in the form of `slice.dimension = `.", alias="sliceDimensions")
    __properties: ClassVar[List[str]] = ["annotationSchemaUri", "createTime", "dataItemSchemaUri", "displayName", "explanationSpecs", "metadata", "metrics", "metricsSchemaUri", "modelExplanation", "name", "sliceDimensions"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudAiplatformV1ModelEvaluation from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "create_time",
            "name",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in explanation_specs (list)
        _items = []
        if self.explanation_specs:
            for _item_explanation_specs in self.explanation_specs:
                if _item_explanation_specs:
                    _items.append(_item_explanation_specs.to_dict())
            _dict['explanationSpecs'] = _items
        # override the default output from pydantic by calling `to_dict()` of model_explanation
        if self.model_explanation:
            _dict['modelExplanation'] = self.model_explanation.to_dict()
        # set to None if metadata (nullable) is None
        # and model_fields_set contains the field
        if self.metadata is None and "metadata" in self.model_fields_set:
            _dict['metadata'] = None

        # set to None if metrics (nullable) is None
        # and model_fields_set contains the field
        if self.metrics is None and "metrics" in self.model_fields_set:
            _dict['metrics'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudAiplatformV1ModelEvaluation from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "annotationSchemaUri": obj.get("annotationSchemaUri"),
            "createTime": obj.get("createTime"),
            "dataItemSchemaUri": obj.get("dataItemSchemaUri"),
            "displayName": obj.get("displayName"),
            "explanationSpecs": [GoogleCloudAiplatformV1ModelEvaluationModelEvaluationExplanationSpec.from_dict(_item) for _item in obj["explanationSpecs"]] if obj.get("explanationSpecs") is not None else None,
            "metadata": obj.get("metadata"),
            "metrics": obj.get("metrics"),
            "metricsSchemaUri": obj.get("metricsSchemaUri"),
            "modelExplanation": GoogleCloudAiplatformV1ModelExplanation.from_dict(obj["modelExplanation"]) if obj.get("modelExplanation") is not None else None,
            "name": obj.get("name"),
            "sliceDimensions": obj.get("sliceDimensions")
        })
        return _obj



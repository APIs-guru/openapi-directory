# coding: utf-8

"""
    Vertex AI API

    Train high-quality custom machine learning models with minimal machine learning expertise and effort.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_cloud_aiplatform_v1_publisher_model_call_to_action_deploy import GoogleCloudAiplatformV1PublisherModelCallToActionDeploy
from openapi_client.models.google_cloud_aiplatform_v1_publisher_model_call_to_action_deploy_gke import GoogleCloudAiplatformV1PublisherModelCallToActionDeployGke
from openapi_client.models.google_cloud_aiplatform_v1_publisher_model_call_to_action_open_fine_tuning_pipelines import GoogleCloudAiplatformV1PublisherModelCallToActionOpenFineTuningPipelines
from openapi_client.models.google_cloud_aiplatform_v1_publisher_model_call_to_action_open_notebooks import GoogleCloudAiplatformV1PublisherModelCallToActionOpenNotebooks
from openapi_client.models.google_cloud_aiplatform_v1_publisher_model_call_to_action_regional_resource_references import GoogleCloudAiplatformV1PublisherModelCallToActionRegionalResourceReferences
from openapi_client.models.google_cloud_aiplatform_v1_publisher_model_call_to_action_view_rest_api import GoogleCloudAiplatformV1PublisherModelCallToActionViewRestApi
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudAiplatformV1PublisherModelCallToAction(BaseModel):
    """
    Actions could take on this Publisher Model.
    """ # noqa: E501
    create_application: Optional[GoogleCloudAiplatformV1PublisherModelCallToActionRegionalResourceReferences] = Field(default=None, alias="createApplication")
    deploy: Optional[GoogleCloudAiplatformV1PublisherModelCallToActionDeploy] = None
    deploy_gke: Optional[GoogleCloudAiplatformV1PublisherModelCallToActionDeployGke] = Field(default=None, alias="deployGke")
    open_evaluation_pipeline: Optional[GoogleCloudAiplatformV1PublisherModelCallToActionRegionalResourceReferences] = Field(default=None, alias="openEvaluationPipeline")
    open_fine_tuning_pipeline: Optional[GoogleCloudAiplatformV1PublisherModelCallToActionRegionalResourceReferences] = Field(default=None, alias="openFineTuningPipeline")
    open_fine_tuning_pipelines: Optional[GoogleCloudAiplatformV1PublisherModelCallToActionOpenFineTuningPipelines] = Field(default=None, alias="openFineTuningPipelines")
    open_generation_ai_studio: Optional[GoogleCloudAiplatformV1PublisherModelCallToActionRegionalResourceReferences] = Field(default=None, alias="openGenerationAiStudio")
    open_genie: Optional[GoogleCloudAiplatformV1PublisherModelCallToActionRegionalResourceReferences] = Field(default=None, alias="openGenie")
    open_notebook: Optional[GoogleCloudAiplatformV1PublisherModelCallToActionRegionalResourceReferences] = Field(default=None, alias="openNotebook")
    open_notebooks: Optional[GoogleCloudAiplatformV1PublisherModelCallToActionOpenNotebooks] = Field(default=None, alias="openNotebooks")
    open_prompt_tuning_pipeline: Optional[GoogleCloudAiplatformV1PublisherModelCallToActionRegionalResourceReferences] = Field(default=None, alias="openPromptTuningPipeline")
    request_access: Optional[GoogleCloudAiplatformV1PublisherModelCallToActionRegionalResourceReferences] = Field(default=None, alias="requestAccess")
    view_rest_api: Optional[GoogleCloudAiplatformV1PublisherModelCallToActionViewRestApi] = Field(default=None, alias="viewRestApi")
    __properties: ClassVar[List[str]] = ["createApplication", "deploy", "deployGke", "openEvaluationPipeline", "openFineTuningPipeline", "openFineTuningPipelines", "openGenerationAiStudio", "openGenie", "openNotebook", "openNotebooks", "openPromptTuningPipeline", "requestAccess", "viewRestApi"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudAiplatformV1PublisherModelCallToAction from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of create_application
        if self.create_application:
            _dict['createApplication'] = self.create_application.to_dict()
        # override the default output from pydantic by calling `to_dict()` of deploy
        if self.deploy:
            _dict['deploy'] = self.deploy.to_dict()
        # override the default output from pydantic by calling `to_dict()` of deploy_gke
        if self.deploy_gke:
            _dict['deployGke'] = self.deploy_gke.to_dict()
        # override the default output from pydantic by calling `to_dict()` of open_evaluation_pipeline
        if self.open_evaluation_pipeline:
            _dict['openEvaluationPipeline'] = self.open_evaluation_pipeline.to_dict()
        # override the default output from pydantic by calling `to_dict()` of open_fine_tuning_pipeline
        if self.open_fine_tuning_pipeline:
            _dict['openFineTuningPipeline'] = self.open_fine_tuning_pipeline.to_dict()
        # override the default output from pydantic by calling `to_dict()` of open_fine_tuning_pipelines
        if self.open_fine_tuning_pipelines:
            _dict['openFineTuningPipelines'] = self.open_fine_tuning_pipelines.to_dict()
        # override the default output from pydantic by calling `to_dict()` of open_generation_ai_studio
        if self.open_generation_ai_studio:
            _dict['openGenerationAiStudio'] = self.open_generation_ai_studio.to_dict()
        # override the default output from pydantic by calling `to_dict()` of open_genie
        if self.open_genie:
            _dict['openGenie'] = self.open_genie.to_dict()
        # override the default output from pydantic by calling `to_dict()` of open_notebook
        if self.open_notebook:
            _dict['openNotebook'] = self.open_notebook.to_dict()
        # override the default output from pydantic by calling `to_dict()` of open_notebooks
        if self.open_notebooks:
            _dict['openNotebooks'] = self.open_notebooks.to_dict()
        # override the default output from pydantic by calling `to_dict()` of open_prompt_tuning_pipeline
        if self.open_prompt_tuning_pipeline:
            _dict['openPromptTuningPipeline'] = self.open_prompt_tuning_pipeline.to_dict()
        # override the default output from pydantic by calling `to_dict()` of request_access
        if self.request_access:
            _dict['requestAccess'] = self.request_access.to_dict()
        # override the default output from pydantic by calling `to_dict()` of view_rest_api
        if self.view_rest_api:
            _dict['viewRestApi'] = self.view_rest_api.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudAiplatformV1PublisherModelCallToAction from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "createApplication": GoogleCloudAiplatformV1PublisherModelCallToActionRegionalResourceReferences.from_dict(obj["createApplication"]) if obj.get("createApplication") is not None else None,
            "deploy": GoogleCloudAiplatformV1PublisherModelCallToActionDeploy.from_dict(obj["deploy"]) if obj.get("deploy") is not None else None,
            "deployGke": GoogleCloudAiplatformV1PublisherModelCallToActionDeployGke.from_dict(obj["deployGke"]) if obj.get("deployGke") is not None else None,
            "openEvaluationPipeline": GoogleCloudAiplatformV1PublisherModelCallToActionRegionalResourceReferences.from_dict(obj["openEvaluationPipeline"]) if obj.get("openEvaluationPipeline") is not None else None,
            "openFineTuningPipeline": GoogleCloudAiplatformV1PublisherModelCallToActionRegionalResourceReferences.from_dict(obj["openFineTuningPipeline"]) if obj.get("openFineTuningPipeline") is not None else None,
            "openFineTuningPipelines": GoogleCloudAiplatformV1PublisherModelCallToActionOpenFineTuningPipelines.from_dict(obj["openFineTuningPipelines"]) if obj.get("openFineTuningPipelines") is not None else None,
            "openGenerationAiStudio": GoogleCloudAiplatformV1PublisherModelCallToActionRegionalResourceReferences.from_dict(obj["openGenerationAiStudio"]) if obj.get("openGenerationAiStudio") is not None else None,
            "openGenie": GoogleCloudAiplatformV1PublisherModelCallToActionRegionalResourceReferences.from_dict(obj["openGenie"]) if obj.get("openGenie") is not None else None,
            "openNotebook": GoogleCloudAiplatformV1PublisherModelCallToActionRegionalResourceReferences.from_dict(obj["openNotebook"]) if obj.get("openNotebook") is not None else None,
            "openNotebooks": GoogleCloudAiplatformV1PublisherModelCallToActionOpenNotebooks.from_dict(obj["openNotebooks"]) if obj.get("openNotebooks") is not None else None,
            "openPromptTuningPipeline": GoogleCloudAiplatformV1PublisherModelCallToActionRegionalResourceReferences.from_dict(obj["openPromptTuningPipeline"]) if obj.get("openPromptTuningPipeline") is not None else None,
            "requestAccess": GoogleCloudAiplatformV1PublisherModelCallToActionRegionalResourceReferences.from_dict(obj["requestAccess"]) if obj.get("requestAccess") is not None else None,
            "viewRestApi": GoogleCloudAiplatformV1PublisherModelCallToActionViewRestApi.from_dict(obj["viewRestApi"]) if obj.get("viewRestApi") is not None else None
        })
        return _obj



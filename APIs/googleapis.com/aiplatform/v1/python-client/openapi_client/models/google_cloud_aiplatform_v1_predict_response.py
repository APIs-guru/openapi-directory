# coding: utf-8

"""
    Vertex AI API

    Train high-quality custom machine learning models with minimal machine learning expertise and effort.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudAiplatformV1PredictResponse(BaseModel):
    """
    Response message for PredictionService.Predict.
    """ # noqa: E501
    deployed_model_id: Optional[StrictStr] = Field(default=None, description="ID of the Endpoint's DeployedModel that served this prediction.", alias="deployedModelId")
    metadata: Optional[Any] = Field(default=None, description="Output only. Request-level metadata returned by the model. The metadata type will be dependent upon the model implementation.")
    model: Optional[StrictStr] = Field(default=None, description="Output only. The resource name of the Model which is deployed as the DeployedModel that this prediction hits.")
    model_display_name: Optional[StrictStr] = Field(default=None, description="Output only. The display name of the Model which is deployed as the DeployedModel that this prediction hits.", alias="modelDisplayName")
    model_version_id: Optional[StrictStr] = Field(default=None, description="Output only. The version ID of the Model which is deployed as the DeployedModel that this prediction hits.", alias="modelVersionId")
    predictions: Optional[List[Any]] = Field(default=None, description="The predictions that are the output of the predictions call. The schema of any single prediction may be specified via Endpoint's DeployedModels' Model's PredictSchemata's prediction_schema_uri.")
    __properties: ClassVar[List[str]] = ["deployedModelId", "metadata", "model", "modelDisplayName", "modelVersionId", "predictions"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudAiplatformV1PredictResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "metadata",
            "model",
            "model_display_name",
            "model_version_id",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if metadata (nullable) is None
        # and model_fields_set contains the field
        if self.metadata is None and "metadata" in self.model_fields_set:
            _dict['metadata'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudAiplatformV1PredictResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "deployedModelId": obj.get("deployedModelId"),
            "metadata": obj.get("metadata"),
            "model": obj.get("model"),
            "modelDisplayName": obj.get("modelDisplayName"),
            "modelVersionId": obj.get("modelVersionId"),
            "predictions": obj.get("predictions")
        })
        return _obj



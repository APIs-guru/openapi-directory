# coding: utf-8

"""
    Vertex AI API

    Train high-quality custom machine learning models with minimal machine learning expertise and effort.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_cloud_aiplatform_v1_publisher_model_resource_reference import GoogleCloudAiplatformV1PublisherModelResourceReference
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudAiplatformV1PublisherModelCallToActionRegionalResourceReferences(BaseModel):
    """
    The regional resource name or the URI. Key is region, e.g., us-central1, europe-west2, global, etc..
    """ # noqa: E501
    references: Optional[Dict[str, GoogleCloudAiplatformV1PublisherModelResourceReference]] = Field(default=None, description="Required.")
    resource_description: Optional[StrictStr] = Field(default=None, description="Optional. Description of the resource.", alias="resourceDescription")
    resource_title: Optional[StrictStr] = Field(default=None, description="Optional. Title of the resource.", alias="resourceTitle")
    resource_use_case: Optional[StrictStr] = Field(default=None, description="Optional. Use case (CUJ) of the resource.", alias="resourceUseCase")
    title: Optional[StrictStr] = Field(default=None, description="Required. ")
    __properties: ClassVar[List[str]] = ["references", "resourceDescription", "resourceTitle", "resourceUseCase", "title"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudAiplatformV1PublisherModelCallToActionRegionalResourceReferences from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each value in references (dict)
        _field_dict = {}
        if self.references:
            for _key_references in self.references:
                if self.references[_key_references]:
                    _field_dict[_key_references] = self.references[_key_references].to_dict()
            _dict['references'] = _field_dict
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudAiplatformV1PublisherModelCallToActionRegionalResourceReferences from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "references": dict(
                (_k, GoogleCloudAiplatformV1PublisherModelResourceReference.from_dict(_v))
                for _k, _v in obj["references"].items()
            )
            if obj.get("references") is not None
            else None,
            "resourceDescription": obj.get("resourceDescription"),
            "resourceTitle": obj.get("resourceTitle"),
            "resourceUseCase": obj.get("resourceUseCase"),
            "title": obj.get("title")
        })
        return _obj



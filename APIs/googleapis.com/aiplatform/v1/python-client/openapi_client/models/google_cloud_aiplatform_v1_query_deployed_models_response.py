# coding: utf-8

"""
    Vertex AI API

    Train high-quality custom machine learning models with minimal machine learning expertise and effort.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_cloud_aiplatform_v1_deployed_model import GoogleCloudAiplatformV1DeployedModel
from openapi_client.models.google_cloud_aiplatform_v1_deployed_model_ref import GoogleCloudAiplatformV1DeployedModelRef
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudAiplatformV1QueryDeployedModelsResponse(BaseModel):
    """
    Response message for QueryDeployedModels method.
    """ # noqa: E501
    deployed_model_refs: Optional[List[GoogleCloudAiplatformV1DeployedModelRef]] = Field(default=None, description="References to the DeployedModels that share the specified deploymentResourcePool.", alias="deployedModelRefs")
    deployed_models: Optional[List[GoogleCloudAiplatformV1DeployedModel]] = Field(default=None, description="DEPRECATED Use deployed_model_refs instead.", alias="deployedModels")
    next_page_token: Optional[StrictStr] = Field(default=None, description="A token, which can be sent as `page_token` to retrieve the next page. If this field is omitted, there are no subsequent pages.", alias="nextPageToken")
    total_deployed_model_count: Optional[StrictInt] = Field(default=None, description="The total number of DeployedModels on this DeploymentResourcePool.", alias="totalDeployedModelCount")
    total_endpoint_count: Optional[StrictInt] = Field(default=None, description="The total number of Endpoints that have DeployedModels on this DeploymentResourcePool.", alias="totalEndpointCount")
    __properties: ClassVar[List[str]] = ["deployedModelRefs", "deployedModels", "nextPageToken", "totalDeployedModelCount", "totalEndpointCount"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudAiplatformV1QueryDeployedModelsResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in deployed_model_refs (list)
        _items = []
        if self.deployed_model_refs:
            for _item_deployed_model_refs in self.deployed_model_refs:
                if _item_deployed_model_refs:
                    _items.append(_item_deployed_model_refs.to_dict())
            _dict['deployedModelRefs'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in deployed_models (list)
        _items = []
        if self.deployed_models:
            for _item_deployed_models in self.deployed_models:
                if _item_deployed_models:
                    _items.append(_item_deployed_models.to_dict())
            _dict['deployedModels'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudAiplatformV1QueryDeployedModelsResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "deployedModelRefs": [GoogleCloudAiplatformV1DeployedModelRef.from_dict(_item) for _item in obj["deployedModelRefs"]] if obj.get("deployedModelRefs") is not None else None,
            "deployedModels": [GoogleCloudAiplatformV1DeployedModel.from_dict(_item) for _item in obj["deployedModels"]] if obj.get("deployedModels") is not None else None,
            "nextPageToken": obj.get("nextPageToken"),
            "totalDeployedModelCount": obj.get("totalDeployedModelCount"),
            "totalEndpointCount": obj.get("totalEndpointCount")
        })
        return _obj



# coding: utf-8

"""
    Vertex AI API

    Train high-quality custom machine learning models with minimal machine learning expertise and effort.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_cloud_aiplatform_v1_big_query_destination import GoogleCloudAiplatformV1BigQueryDestination
from openapi_client.models.google_cloud_aiplatform_v1_gcs_destination import GoogleCloudAiplatformV1GcsDestination
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudAiplatformV1ModelMonitoringObjectiveConfigExplanationConfigExplanationBaseline(BaseModel):
    """
    Output from BatchPredictionJob for Model Monitoring baseline dataset, which can be used to generate baseline attribution scores.
    """ # noqa: E501
    bigquery: Optional[GoogleCloudAiplatformV1BigQueryDestination] = None
    gcs: Optional[GoogleCloudAiplatformV1GcsDestination] = None
    prediction_format: Optional[StrictStr] = Field(default=None, description="The storage format of the predictions generated BatchPrediction job.", alias="predictionFormat")
    __properties: ClassVar[List[str]] = ["bigquery", "gcs", "predictionFormat"]

    @field_validator('prediction_format')
    def prediction_format_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['PREDICTION_FORMAT_UNSPECIFIED', 'JSONL', 'BIGQUERY']):
            raise ValueError("must be one of enum values ('PREDICTION_FORMAT_UNSPECIFIED', 'JSONL', 'BIGQUERY')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudAiplatformV1ModelMonitoringObjectiveConfigExplanationConfigExplanationBaseline from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of bigquery
        if self.bigquery:
            _dict['bigquery'] = self.bigquery.to_dict()
        # override the default output from pydantic by calling `to_dict()` of gcs
        if self.gcs:
            _dict['gcs'] = self.gcs.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudAiplatformV1ModelMonitoringObjectiveConfigExplanationConfigExplanationBaseline from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "bigquery": GoogleCloudAiplatformV1BigQueryDestination.from_dict(obj["bigquery"]) if obj.get("bigquery") is not None else None,
            "gcs": GoogleCloudAiplatformV1GcsDestination.from_dict(obj["gcs"]) if obj.get("gcs") is not None else None,
            "predictionFormat": obj.get("predictionFormat")
        })
        return _obj



# coding: utf-8

"""
    Vertex AI API

    Train high-quality custom machine learning models with minimal machine learning expertise and effort.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_cloud_aiplatform_v1_notebook_reservation_affinity import GoogleCloudAiplatformV1NotebookReservationAffinity
from openapi_client.models.google_cloud_aiplatform_v1_notebook_runtime_template_ref import GoogleCloudAiplatformV1NotebookRuntimeTemplateRef
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudAiplatformV1NotebookRuntime(BaseModel):
    """
    A runtime is a virtual machine allocated to a particular user for a particular Notebook file on temporary basis with lifetime limited to 24 hours.
    """ # noqa: E501
    create_time: Optional[StrictStr] = Field(default=None, description="Output only. Timestamp when this NotebookRuntime was created.", alias="createTime")
    description: Optional[StrictStr] = Field(default=None, description="The description of the NotebookRuntime.")
    display_name: Optional[StrictStr] = Field(default=None, description="Required. The display name of the NotebookRuntime. The name can be up to 128 characters long and can consist of any UTF-8 characters.", alias="displayName")
    expiration_time: Optional[StrictStr] = Field(default=None, description="Output only. Timestamp when this NotebookRuntime will be expired: 1. System Predefined NotebookRuntime: 24 hours after creation. After expiration, system predifined runtime will be deleted. 2. User created NotebookRuntime: 6 months after last upgrade. After expiration, user created runtime will be stopped and allowed for upgrade.", alias="expirationTime")
    health_state: Optional[StrictStr] = Field(default=None, description="Output only. The health state of the NotebookRuntime.", alias="healthState")
    is_upgradable: Optional[StrictBool] = Field(default=None, description="Output only. Whether NotebookRuntime is upgradable.", alias="isUpgradable")
    labels: Optional[Dict[str, StrictStr]] = Field(default=None, description="The labels with user-defined metadata to organize your NotebookRuntime. Label keys and values can be no longer than 64 characters (Unicode codepoints), can only contain lowercase letters, numeric characters, underscores and dashes. International characters are allowed. No more than 64 user labels can be associated with one NotebookRuntime (System labels are excluded). See https://goo.gl/xmQnxf for more information and examples of labels. System reserved label keys are prefixed with \"aiplatform.googleapis.com/\" and are immutable. Following system labels exist for NotebookRuntime: * \"aiplatform.googleapis.com/notebook_runtime_gce_instance_id\": output only, its value is the Compute Engine instance id. * \"aiplatform.googleapis.com/colab_enterprise_entry_service\": its value is either \"bigquery\" or \"vertex\"; if absent, it should be \"vertex\". This is to describe the entry service, either BigQuery or Vertex.")
    name: Optional[StrictStr] = Field(default=None, description="Output only. The resource name of the NotebookRuntime.")
    network_tags: Optional[List[StrictStr]] = Field(default=None, description="Optional. The Compute Engine tags to add to runtime (see [Tagging instances](https://cloud.google.com/vpc/docs/add-remove-network-tags)).", alias="networkTags")
    notebook_runtime_template_ref: Optional[GoogleCloudAiplatformV1NotebookRuntimeTemplateRef] = Field(default=None, alias="notebookRuntimeTemplateRef")
    notebook_runtime_type: Optional[StrictStr] = Field(default=None, description="Output only. The type of the notebook runtime.", alias="notebookRuntimeType")
    proxy_uri: Optional[StrictStr] = Field(default=None, description="Output only. The proxy endpoint used to access the NotebookRuntime.", alias="proxyUri")
    reservation_affinity: Optional[GoogleCloudAiplatformV1NotebookReservationAffinity] = Field(default=None, alias="reservationAffinity")
    runtime_state: Optional[StrictStr] = Field(default=None, description="Output only. The runtime (instance) state of the NotebookRuntime.", alias="runtimeState")
    runtime_user: Optional[StrictStr] = Field(default=None, description="Required. The user email of the NotebookRuntime.", alias="runtimeUser")
    service_account: Optional[StrictStr] = Field(default=None, description="Output only. The service account that the NotebookRuntime workload runs as.", alias="serviceAccount")
    update_time: Optional[StrictStr] = Field(default=None, description="Output only. Timestamp when this NotebookRuntime was most recently updated.", alias="updateTime")
    version: Optional[StrictStr] = Field(default=None, description="Output only. The VM os image version of NotebookRuntime.")
    __properties: ClassVar[List[str]] = ["createTime", "description", "displayName", "expirationTime", "healthState", "isUpgradable", "labels", "name", "networkTags", "notebookRuntimeTemplateRef", "notebookRuntimeType", "proxyUri", "reservationAffinity", "runtimeState", "runtimeUser", "serviceAccount", "updateTime", "version"]

    @field_validator('health_state')
    def health_state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['HEALTH_STATE_UNSPECIFIED', 'HEALTHY', 'UNHEALTHY']):
            raise ValueError("must be one of enum values ('HEALTH_STATE_UNSPECIFIED', 'HEALTHY', 'UNHEALTHY')")
        return value

    @field_validator('notebook_runtime_type')
    def notebook_runtime_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['NOTEBOOK_RUNTIME_TYPE_UNSPECIFIED', 'USER_DEFINED', 'ONE_CLICK']):
            raise ValueError("must be one of enum values ('NOTEBOOK_RUNTIME_TYPE_UNSPECIFIED', 'USER_DEFINED', 'ONE_CLICK')")
        return value

    @field_validator('runtime_state')
    def runtime_state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['RUNTIME_STATE_UNSPECIFIED', 'RUNNING', 'BEING_STARTED', 'BEING_STOPPED', 'STOPPED', 'BEING_UPGRADED']):
            raise ValueError("must be one of enum values ('RUNTIME_STATE_UNSPECIFIED', 'RUNNING', 'BEING_STARTED', 'BEING_STOPPED', 'STOPPED', 'BEING_UPGRADED')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudAiplatformV1NotebookRuntime from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "create_time",
            "expiration_time",
            "health_state",
            "is_upgradable",
            "name",
            "notebook_runtime_type",
            "proxy_uri",
            "runtime_state",
            "service_account",
            "update_time",
            "version",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of notebook_runtime_template_ref
        if self.notebook_runtime_template_ref:
            _dict['notebookRuntimeTemplateRef'] = self.notebook_runtime_template_ref.to_dict()
        # override the default output from pydantic by calling `to_dict()` of reservation_affinity
        if self.reservation_affinity:
            _dict['reservationAffinity'] = self.reservation_affinity.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudAiplatformV1NotebookRuntime from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "createTime": obj.get("createTime"),
            "description": obj.get("description"),
            "displayName": obj.get("displayName"),
            "expirationTime": obj.get("expirationTime"),
            "healthState": obj.get("healthState"),
            "isUpgradable": obj.get("isUpgradable"),
            "labels": obj.get("labels"),
            "name": obj.get("name"),
            "networkTags": obj.get("networkTags"),
            "notebookRuntimeTemplateRef": GoogleCloudAiplatformV1NotebookRuntimeTemplateRef.from_dict(obj["notebookRuntimeTemplateRef"]) if obj.get("notebookRuntimeTemplateRef") is not None else None,
            "notebookRuntimeType": obj.get("notebookRuntimeType"),
            "proxyUri": obj.get("proxyUri"),
            "reservationAffinity": GoogleCloudAiplatformV1NotebookReservationAffinity.from_dict(obj["reservationAffinity"]) if obj.get("reservationAffinity") is not None else None,
            "runtimeState": obj.get("runtimeState"),
            "runtimeUser": obj.get("runtimeUser"),
            "serviceAccount": obj.get("serviceAccount"),
            "updateTime": obj.get("updateTime"),
            "version": obj.get("version")
        })
        return _obj



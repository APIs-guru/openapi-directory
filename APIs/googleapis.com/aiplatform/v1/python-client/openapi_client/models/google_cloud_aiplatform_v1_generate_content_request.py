# coding: utf-8

"""
    Vertex AI API

    Train high-quality custom machine learning models with minimal machine learning expertise and effort.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_cloud_aiplatform_v1_content import GoogleCloudAiplatformV1Content
from openapi_client.models.google_cloud_aiplatform_v1_generation_config import GoogleCloudAiplatformV1GenerationConfig
from openapi_client.models.google_cloud_aiplatform_v1_safety_setting import GoogleCloudAiplatformV1SafetySetting
from openapi_client.models.google_cloud_aiplatform_v1_tool import GoogleCloudAiplatformV1Tool
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudAiplatformV1GenerateContentRequest(BaseModel):
    """
    Request message for [PredictionService.GenerateContent].
    """ # noqa: E501
    contents: Optional[List[GoogleCloudAiplatformV1Content]] = Field(default=None, description="Required. The content of the current conversation with the model. For single-turn queries, this is a single instance. For multi-turn queries, this is a repeated field that contains conversation history + latest request.")
    generation_config: Optional[GoogleCloudAiplatformV1GenerationConfig] = Field(default=None, alias="generationConfig")
    safety_settings: Optional[List[GoogleCloudAiplatformV1SafetySetting]] = Field(default=None, description="Optional. Per request settings for blocking unsafe content. Enforced on GenerateContentResponse.candidates.", alias="safetySettings")
    tools: Optional[List[GoogleCloudAiplatformV1Tool]] = Field(default=None, description="Optional. A list of `Tools` the model may use to generate the next response. A `Tool` is a piece of code that enables the system to interact with external systems to perform an action, or set of actions, outside of knowledge and scope of the model.")
    __properties: ClassVar[List[str]] = ["contents", "generationConfig", "safetySettings", "tools"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudAiplatformV1GenerateContentRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in contents (list)
        _items = []
        if self.contents:
            for _item_contents in self.contents:
                if _item_contents:
                    _items.append(_item_contents.to_dict())
            _dict['contents'] = _items
        # override the default output from pydantic by calling `to_dict()` of generation_config
        if self.generation_config:
            _dict['generationConfig'] = self.generation_config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in safety_settings (list)
        _items = []
        if self.safety_settings:
            for _item_safety_settings in self.safety_settings:
                if _item_safety_settings:
                    _items.append(_item_safety_settings.to_dict())
            _dict['safetySettings'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in tools (list)
        _items = []
        if self.tools:
            for _item_tools in self.tools:
                if _item_tools:
                    _items.append(_item_tools.to_dict())
            _dict['tools'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudAiplatformV1GenerateContentRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "contents": [GoogleCloudAiplatformV1Content.from_dict(_item) for _item in obj["contents"]] if obj.get("contents") is not None else None,
            "generationConfig": GoogleCloudAiplatformV1GenerationConfig.from_dict(obj["generationConfig"]) if obj.get("generationConfig") is not None else None,
            "safetySettings": [GoogleCloudAiplatformV1SafetySetting.from_dict(_item) for _item in obj["safetySettings"]] if obj.get("safetySettings") is not None else None,
            "tools": [GoogleCloudAiplatformV1Tool.from_dict(_item) for _item in obj["tools"]] if obj.get("tools") is not None else None
        })
        return _obj



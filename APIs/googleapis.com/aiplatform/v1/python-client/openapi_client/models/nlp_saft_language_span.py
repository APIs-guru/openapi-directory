# coding: utf-8

"""
    Vertex AI API

    Train high-quality custom machine learning models with minimal machine learning expertise and effort.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from openapi_client.models.nlp_saft_lang_id_locales_result import NlpSaftLangIdLocalesResult
from typing import Optional, Set
from typing_extensions import Self

class NlpSaftLanguageSpan(BaseModel):
    """
    NlpSaftLanguageSpan
    """ # noqa: E501
    end: Optional[StrictInt] = None
    language_code: Optional[StrictStr] = Field(default=None, description="A BCP 47 language code for this span.", alias="languageCode")
    locales: Optional[NlpSaftLangIdLocalesResult] = None
    probability: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="A probability associated with this prediction.")
    start: Optional[StrictInt] = Field(default=None, description="Start and end byte offsets, inclusive, within the given input string. A value of -1 implies that this field is not set. Both fields must either be set with a nonnegative value or both are unset. If both are unset then this LanguageSpan applies to the entire input.")
    __properties: ClassVar[List[str]] = ["end", "languageCode", "locales", "probability", "start"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of NlpSaftLanguageSpan from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of locales
        if self.locales:
            _dict['locales'] = self.locales.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of NlpSaftLanguageSpan from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "end": obj.get("end"),
            "languageCode": obj.get("languageCode"),
            "locales": NlpSaftLangIdLocalesResult.from_dict(obj["locales"]) if obj.get("locales") is not None else None,
            "probability": obj.get("probability"),
            "start": obj.get("start")
        })
        return _obj



# coding: utf-8

"""
    Vertex AI API

    Train high-quality custom machine learning models with minimal machine learning expertise and effort.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_cloud_aiplatform_v1_nearest_neighbor_search_operation_metadata_content_validation_stats import GoogleCloudAiplatformV1NearestNeighborSearchOperationMetadataContentValidationStats
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudAiplatformV1NearestNeighborSearchOperationMetadata(BaseModel):
    """
    Runtime operation metadata with regard to Matching Engine Index.
    """ # noqa: E501
    content_validation_stats: Optional[List[GoogleCloudAiplatformV1NearestNeighborSearchOperationMetadataContentValidationStats]] = Field(default=None, description="The validation stats of the content (per file) to be inserted or updated on the Matching Engine Index resource. Populated if contentsDeltaUri is provided as part of Index.metadata. Please note that, currently for those files that are broken or has unsupported file format, we will not have the stats for those files.", alias="contentValidationStats")
    data_bytes_count: Optional[StrictStr] = Field(default=None, description="The ingested data size in bytes.", alias="dataBytesCount")
    __properties: ClassVar[List[str]] = ["contentValidationStats", "dataBytesCount"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudAiplatformV1NearestNeighborSearchOperationMetadata from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in content_validation_stats (list)
        _items = []
        if self.content_validation_stats:
            for _item_content_validation_stats in self.content_validation_stats:
                if _item_content_validation_stats:
                    _items.append(_item_content_validation_stats.to_dict())
            _dict['contentValidationStats'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudAiplatformV1NearestNeighborSearchOperationMetadata from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "contentValidationStats": [GoogleCloudAiplatformV1NearestNeighborSearchOperationMetadataContentValidationStats.from_dict(_item) for _item in obj["contentValidationStats"]] if obj.get("contentValidationStats") is not None else None,
            "dataBytesCount": obj.get("dataBytesCount")
        })
        return _obj



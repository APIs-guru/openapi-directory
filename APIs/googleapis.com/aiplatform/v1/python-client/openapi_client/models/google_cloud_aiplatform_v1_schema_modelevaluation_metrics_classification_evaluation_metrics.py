# coding: utf-8

"""
    Vertex AI API

    Train high-quality custom machine learning models with minimal machine learning expertise and effort.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt
from typing import Any, ClassVar, Dict, List, Optional, Union
from openapi_client.models.google_cloud_aiplatform_v1_schema_modelevaluation_metrics_classification_evaluation_metrics_confidence_metrics import GoogleCloudAiplatformV1SchemaModelevaluationMetricsClassificationEvaluationMetricsConfidenceMetrics
from openapi_client.models.google_cloud_aiplatform_v1_schema_modelevaluation_metrics_confusion_matrix import GoogleCloudAiplatformV1SchemaModelevaluationMetricsConfusionMatrix
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudAiplatformV1SchemaModelevaluationMetricsClassificationEvaluationMetrics(BaseModel):
    """
    Metrics for classification evaluation results.
    """ # noqa: E501
    au_prc: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The Area Under Precision-Recall Curve metric. Micro-averaged for the overall evaluation.", alias="auPrc")
    au_roc: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The Area Under Receiver Operating Characteristic curve metric. Micro-averaged for the overall evaluation.", alias="auRoc")
    confidence_metrics: Optional[List[GoogleCloudAiplatformV1SchemaModelevaluationMetricsClassificationEvaluationMetricsConfidenceMetrics]] = Field(default=None, description="Metrics for each `confidenceThreshold` in 0.00,0.05,0.10,...,0.95,0.96,0.97,0.98,0.99 and `positionThreshold` = INT32_MAX_VALUE. ROC and precision-recall curves, and other aggregated metrics are derived from them. The confidence metrics entries may also be supplied for additional values of `positionThreshold`, but from these no aggregated metrics are computed.", alias="confidenceMetrics")
    confusion_matrix: Optional[GoogleCloudAiplatformV1SchemaModelevaluationMetricsConfusionMatrix] = Field(default=None, alias="confusionMatrix")
    log_loss: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The Log Loss metric.", alias="logLoss")
    __properties: ClassVar[List[str]] = ["auPrc", "auRoc", "confidenceMetrics", "confusionMatrix", "logLoss"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudAiplatformV1SchemaModelevaluationMetricsClassificationEvaluationMetrics from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in confidence_metrics (list)
        _items = []
        if self.confidence_metrics:
            for _item_confidence_metrics in self.confidence_metrics:
                if _item_confidence_metrics:
                    _items.append(_item_confidence_metrics.to_dict())
            _dict['confidenceMetrics'] = _items
        # override the default output from pydantic by calling `to_dict()` of confusion_matrix
        if self.confusion_matrix:
            _dict['confusionMatrix'] = self.confusion_matrix.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudAiplatformV1SchemaModelevaluationMetricsClassificationEvaluationMetrics from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "auPrc": obj.get("auPrc"),
            "auRoc": obj.get("auRoc"),
            "confidenceMetrics": [GoogleCloudAiplatformV1SchemaModelevaluationMetricsClassificationEvaluationMetricsConfidenceMetrics.from_dict(_item) for _item in obj["confidenceMetrics"]] if obj.get("confidenceMetrics") is not None else None,
            "confusionMatrix": GoogleCloudAiplatformV1SchemaModelevaluationMetricsConfusionMatrix.from_dict(obj["confusionMatrix"]) if obj.get("confusionMatrix") is not None else None,
            "logLoss": obj.get("logLoss")
        })
        return _obj



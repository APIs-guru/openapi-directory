# coding: utf-8

"""
    Vertex AI API

    Train high-quality custom machine learning models with minimal machine learning expertise and effort.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_cloud_aiplatform_v1_error_analysis_annotation import GoogleCloudAiplatformV1ErrorAnalysisAnnotation
from openapi_client.models.google_cloud_aiplatform_v1_evaluated_annotation_explanation import GoogleCloudAiplatformV1EvaluatedAnnotationExplanation
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudAiplatformV1EvaluatedAnnotation(BaseModel):
    """
    True positive, false positive, or false negative. EvaluatedAnnotation is only available under ModelEvaluationSlice with slice of `annotationSpec` dimension.
    """ # noqa: E501
    data_item_payload: Optional[Any] = Field(default=None, description="Output only. The data item payload that the Model predicted this EvaluatedAnnotation on.", alias="dataItemPayload")
    error_analysis_annotations: Optional[List[GoogleCloudAiplatformV1ErrorAnalysisAnnotation]] = Field(default=None, description="Annotations of model error analysis results.", alias="errorAnalysisAnnotations")
    evaluated_data_item_view_id: Optional[StrictStr] = Field(default=None, description="Output only. ID of the EvaluatedDataItemView under the same ancestor ModelEvaluation. The EvaluatedDataItemView consists of all ground truths and predictions on data_item_payload.", alias="evaluatedDataItemViewId")
    explanations: Optional[List[GoogleCloudAiplatformV1EvaluatedAnnotationExplanation]] = Field(default=None, description="Explanations of predictions. Each element of the explanations indicates the explanation for one explanation Method. The attributions list in the EvaluatedAnnotationExplanation.explanation object corresponds to the predictions list. For example, the second element in the attributions list explains the second element in the predictions list.")
    ground_truths: Optional[List[Any]] = Field(default=None, description="Output only. The ground truth Annotations, i.e. the Annotations that exist in the test data the Model is evaluated on. For true positive, there is one and only one ground truth annotation, which matches the only prediction in predictions. For false positive, there are zero or more ground truth annotations that are similar to the only prediction in predictions, but not enough for a match. For false negative, there is one and only one ground truth annotation, which doesn't match any predictions created by the model. The schema of the ground truth is stored in ModelEvaluation.annotation_schema_uri", alias="groundTruths")
    predictions: Optional[List[Any]] = Field(default=None, description="Output only. The model predicted annotations. For true positive, there is one and only one prediction, which matches the only one ground truth annotation in ground_truths. For false positive, there is one and only one prediction, which doesn't match any ground truth annotation of the corresponding data_item_view_id. For false negative, there are zero or more predictions which are similar to the only ground truth annotation in ground_truths but not enough for a match. The schema of the prediction is stored in ModelEvaluation.annotation_schema_uri")
    type: Optional[StrictStr] = Field(default=None, description="Output only. Type of the EvaluatedAnnotation.")
    __properties: ClassVar[List[str]] = ["dataItemPayload", "errorAnalysisAnnotations", "evaluatedDataItemViewId", "explanations", "groundTruths", "predictions", "type"]

    @field_validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['EVALUATED_ANNOTATION_TYPE_UNSPECIFIED', 'TRUE_POSITIVE', 'FALSE_POSITIVE', 'FALSE_NEGATIVE']):
            raise ValueError("must be one of enum values ('EVALUATED_ANNOTATION_TYPE_UNSPECIFIED', 'TRUE_POSITIVE', 'FALSE_POSITIVE', 'FALSE_NEGATIVE')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudAiplatformV1EvaluatedAnnotation from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "data_item_payload",
            "evaluated_data_item_view_id",
            "ground_truths",
            "predictions",
            "type",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in error_analysis_annotations (list)
        _items = []
        if self.error_analysis_annotations:
            for _item_error_analysis_annotations in self.error_analysis_annotations:
                if _item_error_analysis_annotations:
                    _items.append(_item_error_analysis_annotations.to_dict())
            _dict['errorAnalysisAnnotations'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in explanations (list)
        _items = []
        if self.explanations:
            for _item_explanations in self.explanations:
                if _item_explanations:
                    _items.append(_item_explanations.to_dict())
            _dict['explanations'] = _items
        # set to None if data_item_payload (nullable) is None
        # and model_fields_set contains the field
        if self.data_item_payload is None and "data_item_payload" in self.model_fields_set:
            _dict['dataItemPayload'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudAiplatformV1EvaluatedAnnotation from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "dataItemPayload": obj.get("dataItemPayload"),
            "errorAnalysisAnnotations": [GoogleCloudAiplatformV1ErrorAnalysisAnnotation.from_dict(_item) for _item in obj["errorAnalysisAnnotations"]] if obj.get("errorAnalysisAnnotations") is not None else None,
            "evaluatedDataItemViewId": obj.get("evaluatedDataItemViewId"),
            "explanations": [GoogleCloudAiplatformV1EvaluatedAnnotationExplanation.from_dict(_item) for _item in obj["explanations"]] if obj.get("explanations") is not None else None,
            "groundTruths": obj.get("groundTruths"),
            "predictions": obj.get("predictions"),
            "type": obj.get("type")
        })
        return _obj



# coding: utf-8

"""
    Vertex AI API

    Train high-quality custom machine learning models with minimal machine learning expertise and effort.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudAiplatformV1Schema(BaseModel):
    """
    Schema is used to define the format of input/output data. Represents a select subset of an [OpenAPI 3.0 schema object](https://spec.openapis.org/oas/v3.0.3#schema). More fields may be added in the future as needed.
    """ # noqa: E501
    description: Optional[StrictStr] = Field(default=None, description="Optional. The description of the data.")
    enum: Optional[List[StrictStr]] = Field(default=None, description="Optional. Possible values of the element of Type.STRING with enum format. For example we can define an Enum Direction as : {type:STRING, format:enum, enum:[\"EAST\", NORTH\", \"SOUTH\", \"WEST\"]}")
    example: Optional[Any] = Field(default=None, description="Optional. Example of the object. Will only populated when the object is the root.")
    format: Optional[StrictStr] = Field(default=None, description="Optional. The format of the data. Supported formats: for NUMBER type: float, double for INTEGER type: int32, int64")
    items: Optional[GoogleCloudAiplatformV1Schema] = None
    nullable: Optional[StrictBool] = Field(default=None, description="Optional. Indicates if the value may be null.")
    properties: Optional[Dict[str, GoogleCloudAiplatformV1Schema]] = Field(default=None, description="Optional. Properties of Type.OBJECT.")
    required: Optional[List[StrictStr]] = Field(default=None, description="Optional. Required properties of Type.OBJECT.")
    type: Optional[StrictStr] = Field(default=None, description="Optional. The type of the data.")
    __properties: ClassVar[List[str]] = ["description", "enum", "example", "format", "items", "nullable", "properties", "required", "type"]

    @field_validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['TYPE_UNSPECIFIED', 'STRING', 'NUMBER', 'INTEGER', 'BOOLEAN', 'ARRAY', 'OBJECT']):
            raise ValueError("must be one of enum values ('TYPE_UNSPECIFIED', 'STRING', 'NUMBER', 'INTEGER', 'BOOLEAN', 'ARRAY', 'OBJECT')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudAiplatformV1Schema from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of items
        if self.items:
            _dict['items'] = self.items.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each value in properties (dict)
        _field_dict = {}
        if self.properties:
            for _key_properties in self.properties:
                if self.properties[_key_properties]:
                    _field_dict[_key_properties] = self.properties[_key_properties].to_dict()
            _dict['properties'] = _field_dict
        # set to None if example (nullable) is None
        # and model_fields_set contains the field
        if self.example is None and "example" in self.model_fields_set:
            _dict['example'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudAiplatformV1Schema from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "description": obj.get("description"),
            "enum": obj.get("enum"),
            "example": obj.get("example"),
            "format": obj.get("format"),
            "items": GoogleCloudAiplatformV1Schema.from_dict(obj["items"]) if obj.get("items") is not None else None,
            "nullable": obj.get("nullable"),
            "properties": dict(
                (_k, GoogleCloudAiplatformV1Schema.from_dict(_v))
                for _k, _v in obj["properties"].items()
            )
            if obj.get("properties") is not None
            else None,
            "required": obj.get("required"),
            "type": obj.get("type")
        })
        return _obj

# TODO: Rewrite to not use raise_errors
GoogleCloudAiplatformV1Schema.model_rebuild(raise_errors=False)


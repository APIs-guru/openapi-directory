# coding: utf-8

"""
    Vertex AI API

    Train high-quality custom machine learning models with minimal machine learning expertise and effort.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudAiplatformV1SchemaPredictPredictionTabularRegressionPredictionResult(BaseModel):
    """
    Prediction output format for Tabular Regression.
    """ # noqa: E501
    lower_bound: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The lower bound of the prediction interval.", alias="lowerBound")
    quantile_predictions: Optional[List[Union[StrictFloat, StrictInt]]] = Field(default=None, description="Quantile predictions, in 1-1 correspondence with quantile_values.", alias="quantilePredictions")
    quantile_values: Optional[List[Union[StrictFloat, StrictInt]]] = Field(default=None, description="Quantile values.", alias="quantileValues")
    upper_bound: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The upper bound of the prediction interval.", alias="upperBound")
    value: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The regression value.")
    __properties: ClassVar[List[str]] = ["lowerBound", "quantilePredictions", "quantileValues", "upperBound", "value"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudAiplatformV1SchemaPredictPredictionTabularRegressionPredictionResult from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudAiplatformV1SchemaPredictPredictionTabularRegressionPredictionResult from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "lowerBound": obj.get("lowerBound"),
            "quantilePredictions": obj.get("quantilePredictions"),
            "quantileValues": obj.get("quantileValues"),
            "upperBound": obj.get("upperBound"),
            "value": obj.get("value")
        })
        return _obj



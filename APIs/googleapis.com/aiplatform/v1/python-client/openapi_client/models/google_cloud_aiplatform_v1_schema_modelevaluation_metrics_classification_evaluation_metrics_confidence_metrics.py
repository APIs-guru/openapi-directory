# coding: utf-8

"""
    Vertex AI API

    Train high-quality custom machine learning models with minimal machine learning expertise and effort.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from openapi_client.models.google_cloud_aiplatform_v1_schema_modelevaluation_metrics_confusion_matrix import GoogleCloudAiplatformV1SchemaModelevaluationMetricsConfusionMatrix
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudAiplatformV1SchemaModelevaluationMetricsClassificationEvaluationMetricsConfidenceMetrics(BaseModel):
    """
    GoogleCloudAiplatformV1SchemaModelevaluationMetricsClassificationEvaluationMetricsConfidenceMetrics
    """ # noqa: E501
    confidence_threshold: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Metrics are computed with an assumption that the Model never returns predictions with score lower than this value.", alias="confidenceThreshold")
    confusion_matrix: Optional[GoogleCloudAiplatformV1SchemaModelevaluationMetricsConfusionMatrix] = Field(default=None, alias="confusionMatrix")
    f1_score: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The harmonic mean of recall and precision. For summary metrics, it computes the micro-averaged F1 score.", alias="f1Score")
    f1_score_at1: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The harmonic mean of recallAt1 and precisionAt1.", alias="f1ScoreAt1")
    f1_score_macro: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Macro-averaged F1 Score.", alias="f1ScoreMacro")
    f1_score_micro: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Micro-averaged F1 Score.", alias="f1ScoreMicro")
    false_negative_count: Optional[StrictStr] = Field(default=None, description="The number of ground truth labels that are not matched by a Model created label.", alias="falseNegativeCount")
    false_positive_count: Optional[StrictStr] = Field(default=None, description="The number of Model created labels that do not match a ground truth label.", alias="falsePositiveCount")
    false_positive_rate: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="False Positive Rate for the given confidence threshold.", alias="falsePositiveRate")
    false_positive_rate_at1: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The False Positive Rate when only considering the label that has the highest prediction score and not below the confidence threshold for each DataItem.", alias="falsePositiveRateAt1")
    max_predictions: Optional[StrictInt] = Field(default=None, description="Metrics are computed with an assumption that the Model always returns at most this many predictions (ordered by their score, descendingly), but they all still need to meet the `confidenceThreshold`.", alias="maxPredictions")
    precision: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Precision for the given confidence threshold.")
    precision_at1: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The precision when only considering the label that has the highest prediction score and not below the confidence threshold for each DataItem.", alias="precisionAt1")
    recall: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Recall (True Positive Rate) for the given confidence threshold.")
    recall_at1: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The Recall (True Positive Rate) when only considering the label that has the highest prediction score and not below the confidence threshold for each DataItem.", alias="recallAt1")
    true_negative_count: Optional[StrictStr] = Field(default=None, description="The number of labels that were not created by the Model, but if they would, they would not match a ground truth label.", alias="trueNegativeCount")
    true_positive_count: Optional[StrictStr] = Field(default=None, description="The number of Model created labels that match a ground truth label.", alias="truePositiveCount")
    __properties: ClassVar[List[str]] = ["confidenceThreshold", "confusionMatrix", "f1Score", "f1ScoreAt1", "f1ScoreMacro", "f1ScoreMicro", "falseNegativeCount", "falsePositiveCount", "falsePositiveRate", "falsePositiveRateAt1", "maxPredictions", "precision", "precisionAt1", "recall", "recallAt1", "trueNegativeCount", "truePositiveCount"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudAiplatformV1SchemaModelevaluationMetricsClassificationEvaluationMetricsConfidenceMetrics from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of confusion_matrix
        if self.confusion_matrix:
            _dict['confusionMatrix'] = self.confusion_matrix.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudAiplatformV1SchemaModelevaluationMetricsClassificationEvaluationMetricsConfidenceMetrics from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "confidenceThreshold": obj.get("confidenceThreshold"),
            "confusionMatrix": GoogleCloudAiplatformV1SchemaModelevaluationMetricsConfusionMatrix.from_dict(obj["confusionMatrix"]) if obj.get("confusionMatrix") is not None else None,
            "f1Score": obj.get("f1Score"),
            "f1ScoreAt1": obj.get("f1ScoreAt1"),
            "f1ScoreMacro": obj.get("f1ScoreMacro"),
            "f1ScoreMicro": obj.get("f1ScoreMicro"),
            "falseNegativeCount": obj.get("falseNegativeCount"),
            "falsePositiveCount": obj.get("falsePositiveCount"),
            "falsePositiveRate": obj.get("falsePositiveRate"),
            "falsePositiveRateAt1": obj.get("falsePositiveRateAt1"),
            "maxPredictions": obj.get("maxPredictions"),
            "precision": obj.get("precision"),
            "precisionAt1": obj.get("precisionAt1"),
            "recall": obj.get("recall"),
            "recallAt1": obj.get("recallAt1"),
            "trueNegativeCount": obj.get("trueNegativeCount"),
            "truePositiveCount": obj.get("truePositiveCount")
        })
        return _obj



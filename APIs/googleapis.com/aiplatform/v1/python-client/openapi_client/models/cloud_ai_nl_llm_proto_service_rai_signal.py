# coding: utf-8

"""
    Vertex AI API

    Train high-quality custom machine learning models with minimal machine learning expertise and effort.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class CloudAiNlLlmProtoServiceRaiSignal(BaseModel):
    """
    An RAI signal for a single category.
    """ # noqa: E501
    confidence: Optional[StrictStr] = Field(default=None, description="The confidence level for the RAI category.")
    flagged: Optional[StrictBool] = Field(default=None, description="Whether the category is flagged as being present. Currently, this is set to true if score >= 0.5.")
    rai_category: Optional[StrictStr] = Field(default=None, description="The RAI category.", alias="raiCategory")
    score: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The score for the category, in the range [0.0, 1.0].")
    __properties: ClassVar[List[str]] = ["confidence", "flagged", "raiCategory", "score"]

    @field_validator('confidence')
    def confidence_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['CONFIDENCE_UNSPECIFIED', 'CONFIDENCE_NONE', 'CONFIDENCE_LOW', 'CONFIDENCE_MEDIUM', 'CONFIDENCE_HIGH']):
            raise ValueError("must be one of enum values ('CONFIDENCE_UNSPECIFIED', 'CONFIDENCE_NONE', 'CONFIDENCE_LOW', 'CONFIDENCE_MEDIUM', 'CONFIDENCE_HIGH')")
        return value

    @field_validator('rai_category')
    def rai_category_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['RAI_CATEGORY_UNSPECIFIED', 'TOXIC', 'SEXUALLY_EXPLICIT', 'HATE_SPEECH', 'VIOLENT', 'PROFANITY', 'HARASSMENT', 'DEATH_HARM_TRAGEDY', 'FIREARMS_WEAPONS', 'PUBLIC_SAFETY', 'HEALTH', 'RELIGIOUS_BELIEF', 'ILLICIT_DRUGS', 'WAR_CONFLICT', 'POLITICS', 'FINANCE', 'LEGAL', 'CSAI', 'FRINGE', 'THREAT', 'SEVERE_TOXICITY', 'TOXICITY', 'SEXUAL', 'INSULT', 'DEROGATORY', 'IDENTITY_ATTACK', 'VIOLENCE_ABUSE', 'OBSCENE', 'DRUGS', 'CSAM', 'SPII', 'DANGEROUS_CONTENT', 'DANGEROUS_CONTENT_SEVERITY', 'INSULT_SEVERITY', 'DEROGATORY_SEVERITY', 'SEXUAL_SEVERITY']):
            raise ValueError("must be one of enum values ('RAI_CATEGORY_UNSPECIFIED', 'TOXIC', 'SEXUALLY_EXPLICIT', 'HATE_SPEECH', 'VIOLENT', 'PROFANITY', 'HARASSMENT', 'DEATH_HARM_TRAGEDY', 'FIREARMS_WEAPONS', 'PUBLIC_SAFETY', 'HEALTH', 'RELIGIOUS_BELIEF', 'ILLICIT_DRUGS', 'WAR_CONFLICT', 'POLITICS', 'FINANCE', 'LEGAL', 'CSAI', 'FRINGE', 'THREAT', 'SEVERE_TOXICITY', 'TOXICITY', 'SEXUAL', 'INSULT', 'DEROGATORY', 'IDENTITY_ATTACK', 'VIOLENCE_ABUSE', 'OBSCENE', 'DRUGS', 'CSAM', 'SPII', 'DANGEROUS_CONTENT', 'DANGEROUS_CONTENT_SEVERITY', 'INSULT_SEVERITY', 'DEROGATORY_SEVERITY', 'SEXUAL_SEVERITY')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CloudAiNlLlmProtoServiceRaiSignal from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CloudAiNlLlmProtoServiceRaiSignal from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "confidence": obj.get("confidence"),
            "flagged": obj.get("flagged"),
            "raiCategory": obj.get("raiCategory"),
            "score": obj.get("score")
        })
        return _obj



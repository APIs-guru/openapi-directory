# coding: utf-8

"""
    Vertex AI API

    Train high-quality custom machine learning models with minimal machine learning expertise and effort.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudAiplatformV1PipelineTaskExecutorDetailContainerDetail(BaseModel):
    """
    The detail of a container execution. It contains the job names of the lifecycle of a container execution.
    """ # noqa: E501
    failed_main_jobs: Optional[List[StrictStr]] = Field(default=None, description="Output only. The names of the previously failed CustomJob for the main container executions. The list includes the all attempts in chronological order.", alias="failedMainJobs")
    failed_pre_caching_check_jobs: Optional[List[StrictStr]] = Field(default=None, description="Output only. The names of the previously failed CustomJob for the pre-caching-check container executions. This job will be available if the PipelineJob.pipeline_spec specifies the `pre_caching_check` hook in the lifecycle events. The list includes the all attempts in chronological order.", alias="failedPreCachingCheckJobs")
    main_job: Optional[StrictStr] = Field(default=None, description="Output only. The name of the CustomJob for the main container execution.", alias="mainJob")
    pre_caching_check_job: Optional[StrictStr] = Field(default=None, description="Output only. The name of the CustomJob for the pre-caching-check container execution. This job will be available if the PipelineJob.pipeline_spec specifies the `pre_caching_check` hook in the lifecycle events.", alias="preCachingCheckJob")
    __properties: ClassVar[List[str]] = ["failedMainJobs", "failedPreCachingCheckJobs", "mainJob", "preCachingCheckJob"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudAiplatformV1PipelineTaskExecutorDetailContainerDetail from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "failed_main_jobs",
            "failed_pre_caching_check_jobs",
            "main_job",
            "pre_caching_check_job",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudAiplatformV1PipelineTaskExecutorDetailContainerDetail from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "failedMainJobs": obj.get("failedMainJobs"),
            "failedPreCachingCheckJobs": obj.get("failedPreCachingCheckJobs"),
            "mainJob": obj.get("mainJob"),
            "preCachingCheckJob": obj.get("preCachingCheckJob")
        })
        return _obj



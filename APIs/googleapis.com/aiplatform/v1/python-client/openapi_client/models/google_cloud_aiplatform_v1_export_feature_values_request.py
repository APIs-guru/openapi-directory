# coding: utf-8

"""
    Vertex AI API

    Train high-quality custom machine learning models with minimal machine learning expertise and effort.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_cloud_aiplatform_v1_destination_feature_setting import GoogleCloudAiplatformV1DestinationFeatureSetting
from openapi_client.models.google_cloud_aiplatform_v1_export_feature_values_request_full_export import GoogleCloudAiplatformV1ExportFeatureValuesRequestFullExport
from openapi_client.models.google_cloud_aiplatform_v1_export_feature_values_request_snapshot_export import GoogleCloudAiplatformV1ExportFeatureValuesRequestSnapshotExport
from openapi_client.models.google_cloud_aiplatform_v1_feature_selector import GoogleCloudAiplatformV1FeatureSelector
from openapi_client.models.google_cloud_aiplatform_v1_feature_value_destination import GoogleCloudAiplatformV1FeatureValueDestination
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudAiplatformV1ExportFeatureValuesRequest(BaseModel):
    """
    Request message for FeaturestoreService.ExportFeatureValues.
    """ # noqa: E501
    destination: Optional[GoogleCloudAiplatformV1FeatureValueDestination] = None
    feature_selector: Optional[GoogleCloudAiplatformV1FeatureSelector] = Field(default=None, alias="featureSelector")
    full_export: Optional[GoogleCloudAiplatformV1ExportFeatureValuesRequestFullExport] = Field(default=None, alias="fullExport")
    settings: Optional[List[GoogleCloudAiplatformV1DestinationFeatureSetting]] = Field(default=None, description="Per-Feature export settings.")
    snapshot_export: Optional[GoogleCloudAiplatformV1ExportFeatureValuesRequestSnapshotExport] = Field(default=None, alias="snapshotExport")
    __properties: ClassVar[List[str]] = ["destination", "featureSelector", "fullExport", "settings", "snapshotExport"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudAiplatformV1ExportFeatureValuesRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of destination
        if self.destination:
            _dict['destination'] = self.destination.to_dict()
        # override the default output from pydantic by calling `to_dict()` of feature_selector
        if self.feature_selector:
            _dict['featureSelector'] = self.feature_selector.to_dict()
        # override the default output from pydantic by calling `to_dict()` of full_export
        if self.full_export:
            _dict['fullExport'] = self.full_export.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in settings (list)
        _items = []
        if self.settings:
            for _item_settings in self.settings:
                if _item_settings:
                    _items.append(_item_settings.to_dict())
            _dict['settings'] = _items
        # override the default output from pydantic by calling `to_dict()` of snapshot_export
        if self.snapshot_export:
            _dict['snapshotExport'] = self.snapshot_export.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudAiplatformV1ExportFeatureValuesRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "destination": GoogleCloudAiplatformV1FeatureValueDestination.from_dict(obj["destination"]) if obj.get("destination") is not None else None,
            "featureSelector": GoogleCloudAiplatformV1FeatureSelector.from_dict(obj["featureSelector"]) if obj.get("featureSelector") is not None else None,
            "fullExport": GoogleCloudAiplatformV1ExportFeatureValuesRequestFullExport.from_dict(obj["fullExport"]) if obj.get("fullExport") is not None else None,
            "settings": [GoogleCloudAiplatformV1DestinationFeatureSetting.from_dict(_item) for _item in obj["settings"]] if obj.get("settings") is not None else None,
            "snapshotExport": GoogleCloudAiplatformV1ExportFeatureValuesRequestSnapshotExport.from_dict(obj["snapshotExport"]) if obj.get("snapshotExport") is not None else None
        })
        return _obj



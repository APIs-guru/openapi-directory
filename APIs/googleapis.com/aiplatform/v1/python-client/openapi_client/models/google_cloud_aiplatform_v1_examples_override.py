# coding: utf-8

"""
    Vertex AI API

    Train high-quality custom machine learning models with minimal machine learning expertise and effort.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_cloud_aiplatform_v1_examples_restrictions_namespace import GoogleCloudAiplatformV1ExamplesRestrictionsNamespace
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudAiplatformV1ExamplesOverride(BaseModel):
    """
    Overrides for example-based explanations.
    """ # noqa: E501
    crowding_count: Optional[StrictInt] = Field(default=None, description="The number of neighbors to return that have the same crowding tag.", alias="crowdingCount")
    data_format: Optional[StrictStr] = Field(default=None, description="The format of the data being provided with each call.", alias="dataFormat")
    neighbor_count: Optional[StrictInt] = Field(default=None, description="The number of neighbors to return.", alias="neighborCount")
    restrictions: Optional[List[GoogleCloudAiplatformV1ExamplesRestrictionsNamespace]] = Field(default=None, description="Restrict the resulting nearest neighbors to respect these constraints.")
    return_embeddings: Optional[StrictBool] = Field(default=None, description="If true, return the embeddings instead of neighbors.", alias="returnEmbeddings")
    __properties: ClassVar[List[str]] = ["crowdingCount", "dataFormat", "neighborCount", "restrictions", "returnEmbeddings"]

    @field_validator('data_format')
    def data_format_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['DATA_FORMAT_UNSPECIFIED', 'INSTANCES', 'EMBEDDINGS']):
            raise ValueError("must be one of enum values ('DATA_FORMAT_UNSPECIFIED', 'INSTANCES', 'EMBEDDINGS')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudAiplatformV1ExamplesOverride from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in restrictions (list)
        _items = []
        if self.restrictions:
            for _item_restrictions in self.restrictions:
                if _item_restrictions:
                    _items.append(_item_restrictions.to_dict())
            _dict['restrictions'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudAiplatformV1ExamplesOverride from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "crowdingCount": obj.get("crowdingCount"),
            "dataFormat": obj.get("dataFormat"),
            "neighborCount": obj.get("neighborCount"),
            "restrictions": [GoogleCloudAiplatformV1ExamplesRestrictionsNamespace.from_dict(_item) for _item in obj["restrictions"]] if obj.get("restrictions") is not None else None,
            "returnEmbeddings": obj.get("returnEmbeddings")
        })
        return _obj



# coding: utf-8

"""
    Vertex AI API

    Train high-quality custom machine learning models with minimal machine learning expertise and effort.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from openapi_client.models.google_cloud_aiplatform_v1_schema_predict_params_grounding_config import GoogleCloudAiplatformV1SchemaPredictParamsGroundingConfig
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudAiplatformV1SchemaTextPromptDatasetMetadata(BaseModel):
    """
    The metadata of Datasets that contain Text Prompt data.
    """ # noqa: E501
    candidate_count: Optional[StrictStr] = Field(default=None, description="Number of candidates.", alias="candidateCount")
    gcs_uri: Optional[StrictStr] = Field(default=None, description="The Google Cloud Storage URI that stores the prompt data.", alias="gcsUri")
    grounding_config: Optional[GoogleCloudAiplatformV1SchemaPredictParamsGroundingConfig] = Field(default=None, alias="groundingConfig")
    max_output_tokens: Optional[StrictStr] = Field(default=None, description="Value of the maximum number of tokens generated set when the dataset was saved.", alias="maxOutputTokens")
    note: Optional[StrictStr] = Field(default=None, description="User-created prompt note. Note size limit is 2KB.")
    prompt_type: Optional[StrictStr] = Field(default=None, description="Type of the prompt dataset.", alias="promptType")
    stop_sequences: Optional[List[StrictStr]] = Field(default=None, description="Customized stop sequences.", alias="stopSequences")
    temperature: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Temperature value used for sampling set when the dataset was saved. This value is used to tune the degree of randomness.")
    text: Optional[StrictStr] = Field(default=None, description="The content of the prompt dataset.")
    top_k: Optional[StrictStr] = Field(default=None, description="Top K value set when the dataset was saved. This value determines how many candidates with highest probability from the vocab would be selected for each decoding step.", alias="topK")
    top_p: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Top P value set when the dataset was saved. Given topK tokens for decoding, top candidates will be selected until the sum of their probabilities is topP.", alias="topP")
    __properties: ClassVar[List[str]] = ["candidateCount", "gcsUri", "groundingConfig", "maxOutputTokens", "note", "promptType", "stopSequences", "temperature", "text", "topK", "topP"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudAiplatformV1SchemaTextPromptDatasetMetadata from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of grounding_config
        if self.grounding_config:
            _dict['groundingConfig'] = self.grounding_config.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudAiplatformV1SchemaTextPromptDatasetMetadata from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "candidateCount": obj.get("candidateCount"),
            "gcsUri": obj.get("gcsUri"),
            "groundingConfig": GoogleCloudAiplatformV1SchemaPredictParamsGroundingConfig.from_dict(obj["groundingConfig"]) if obj.get("groundingConfig") is not None else None,
            "maxOutputTokens": obj.get("maxOutputTokens"),
            "note": obj.get("note"),
            "promptType": obj.get("promptType"),
            "stopSequences": obj.get("stopSequences"),
            "temperature": obj.get("temperature"),
            "text": obj.get("text"),
            "topK": obj.get("topK"),
            "topP": obj.get("topP")
        })
        return _obj



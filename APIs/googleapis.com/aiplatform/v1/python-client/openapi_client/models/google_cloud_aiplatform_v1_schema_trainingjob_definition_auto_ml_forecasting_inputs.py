# coding: utf-8

"""
    Vertex AI API

    Train high-quality custom machine learning models with minimal machine learning expertise and effort.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from openapi_client.models.google_cloud_aiplatform_v1_schema_trainingjob_definition_auto_ml_forecasting_inputs_granularity import GoogleCloudAiplatformV1SchemaTrainingjobDefinitionAutoMlForecastingInputsGranularity
from openapi_client.models.google_cloud_aiplatform_v1_schema_trainingjob_definition_auto_ml_forecasting_inputs_transformation import GoogleCloudAiplatformV1SchemaTrainingjobDefinitionAutoMlForecastingInputsTransformation
from openapi_client.models.google_cloud_aiplatform_v1_schema_trainingjob_definition_export_evaluated_data_items_config import GoogleCloudAiplatformV1SchemaTrainingjobDefinitionExportEvaluatedDataItemsConfig
from openapi_client.models.google_cloud_aiplatform_v1_schema_trainingjob_definition_hierarchy_config import GoogleCloudAiplatformV1SchemaTrainingjobDefinitionHierarchyConfig
from openapi_client.models.google_cloud_aiplatform_v1_schema_trainingjob_definition_window_config import GoogleCloudAiplatformV1SchemaTrainingjobDefinitionWindowConfig
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudAiplatformV1SchemaTrainingjobDefinitionAutoMlForecastingInputs(BaseModel):
    """
    GoogleCloudAiplatformV1SchemaTrainingjobDefinitionAutoMlForecastingInputs
    """ # noqa: E501
    additional_experiments: Optional[List[StrictStr]] = Field(default=None, description="Additional experiment flags for the time series forcasting training.", alias="additionalExperiments")
    available_at_forecast_columns: Optional[List[StrictStr]] = Field(default=None, description="Names of columns that are available and provided when a forecast is requested. These columns contain information for the given entity (identified by the time_series_identifier_column column) that is known at forecast. For example, predicted weather for a specific day.", alias="availableAtForecastColumns")
    context_window: Optional[StrictStr] = Field(default=None, description="The amount of time into the past training and prediction data is used for model training and prediction respectively. Expressed in number of units defined by the `data_granularity` field.", alias="contextWindow")
    data_granularity: Optional[GoogleCloudAiplatformV1SchemaTrainingjobDefinitionAutoMlForecastingInputsGranularity] = Field(default=None, alias="dataGranularity")
    enable_probabilistic_inference: Optional[StrictBool] = Field(default=None, description="If probabilistic inference is enabled, the model will fit a distribution that captures the uncertainty of a prediction. At inference time, the predictive distribution is used to make a point prediction that minimizes the optimization objective. For example, the mean of a predictive distribution is the point prediction that minimizes RMSE loss. If quantiles are specified, then the quantiles of the distribution are also returned. The optimization objective cannot be minimize-quantile-loss.", alias="enableProbabilisticInference")
    export_evaluated_data_items_config: Optional[GoogleCloudAiplatformV1SchemaTrainingjobDefinitionExportEvaluatedDataItemsConfig] = Field(default=None, alias="exportEvaluatedDataItemsConfig")
    forecast_horizon: Optional[StrictStr] = Field(default=None, description="The amount of time into the future for which forecasted values for the target are returned. Expressed in number of units defined by the `data_granularity` field.", alias="forecastHorizon")
    hierarchy_config: Optional[GoogleCloudAiplatformV1SchemaTrainingjobDefinitionHierarchyConfig] = Field(default=None, alias="hierarchyConfig")
    holiday_regions: Optional[List[StrictStr]] = Field(default=None, description="The geographical region based on which the holiday effect is applied in modeling by adding holiday categorical array feature that include all holidays matching the date. This option only allowed when data_granularity is day. By default, holiday effect modeling is disabled. To turn it on, specify the holiday region using this option.", alias="holidayRegions")
    optimization_objective: Optional[StrictStr] = Field(default=None, description="Objective function the model is optimizing towards. The training process creates a model that optimizes the value of the objective function over the validation set. The supported optimization objectives: * \"minimize-rmse\" (default) - Minimize root-mean-squared error (RMSE). * \"minimize-mae\" - Minimize mean-absolute error (MAE). * \"minimize-rmsle\" - Minimize root-mean-squared log error (RMSLE). * \"minimize-rmspe\" - Minimize root-mean-squared percentage error (RMSPE). * \"minimize-wape-mae\" - Minimize the combination of weighted absolute percentage error (WAPE) and mean-absolute-error (MAE). * \"minimize-quantile-loss\" - Minimize the quantile loss at the quantiles defined in `quantiles`. * \"minimize-mape\" - Minimize the mean absolute percentage error.", alias="optimizationObjective")
    quantiles: Optional[List[Union[StrictFloat, StrictInt]]] = Field(default=None, description="Quantiles to use for minimize-quantile-loss `optimization_objective`, or for probabilistic inference. Up to 5 quantiles are allowed of values between 0 and 1, exclusive. Required if the value of optimization_objective is minimize-quantile-loss. Represents the percent quantiles to use for that objective. Quantiles must be unique.")
    target_column: Optional[StrictStr] = Field(default=None, description="The name of the column that the Model is to predict values for. This column must be unavailable at forecast.", alias="targetColumn")
    time_column: Optional[StrictStr] = Field(default=None, description="The name of the column that identifies time order in the time series. This column must be available at forecast.", alias="timeColumn")
    time_series_attribute_columns: Optional[List[StrictStr]] = Field(default=None, description="Column names that should be used as attribute columns. The value of these columns does not vary as a function of time. For example, store ID or item color.", alias="timeSeriesAttributeColumns")
    time_series_identifier_column: Optional[StrictStr] = Field(default=None, description="The name of the column that identifies the time series.", alias="timeSeriesIdentifierColumn")
    train_budget_milli_node_hours: Optional[StrictStr] = Field(default=None, description="Required. The train budget of creating this model, expressed in milli node hours i.e. 1,000 value in this field means 1 node hour. The training cost of the model will not exceed this budget. The final cost will be attempted to be close to the budget, though may end up being (even) noticeably smaller - at the backend's discretion. This especially may happen when further model training ceases to provide any improvements. If the budget is set to a value known to be insufficient to train a model for the given dataset, the training won't be attempted and will error. The train budget must be between 1,000 and 72,000 milli node hours, inclusive.", alias="trainBudgetMilliNodeHours")
    transformations: Optional[List[GoogleCloudAiplatformV1SchemaTrainingjobDefinitionAutoMlForecastingInputsTransformation]] = Field(default=None, description="Each transformation will apply transform function to given input column. And the result will be used for training. When creating transformation for BigQuery Struct column, the column should be flattened using \".\" as the delimiter.")
    unavailable_at_forecast_columns: Optional[List[StrictStr]] = Field(default=None, description="Names of columns that are unavailable when a forecast is requested. This column contains information for the given entity (identified by the time_series_identifier_column) that is unknown before the forecast For example, actual weather on a given day.", alias="unavailableAtForecastColumns")
    validation_options: Optional[StrictStr] = Field(default=None, description="Validation options for the data validation component. The available options are: * \"fail-pipeline\" - default, will validate against the validation and fail the pipeline if it fails. * \"ignore-validation\" - ignore the results of the validation and continue", alias="validationOptions")
    weight_column: Optional[StrictStr] = Field(default=None, description="Column name that should be used as the weight column. Higher values in this column give more importance to the row during model training. The column must have numeric values between 0 and 10000 inclusively; 0 means the row is ignored for training. If weight column field is not set, then all rows are assumed to have equal weight of 1.", alias="weightColumn")
    window_config: Optional[GoogleCloudAiplatformV1SchemaTrainingjobDefinitionWindowConfig] = Field(default=None, alias="windowConfig")
    __properties: ClassVar[List[str]] = ["additionalExperiments", "availableAtForecastColumns", "contextWindow", "dataGranularity", "enableProbabilisticInference", "exportEvaluatedDataItemsConfig", "forecastHorizon", "hierarchyConfig", "holidayRegions", "optimizationObjective", "quantiles", "targetColumn", "timeColumn", "timeSeriesAttributeColumns", "timeSeriesIdentifierColumn", "trainBudgetMilliNodeHours", "transformations", "unavailableAtForecastColumns", "validationOptions", "weightColumn", "windowConfig"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudAiplatformV1SchemaTrainingjobDefinitionAutoMlForecastingInputs from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of data_granularity
        if self.data_granularity:
            _dict['dataGranularity'] = self.data_granularity.to_dict()
        # override the default output from pydantic by calling `to_dict()` of export_evaluated_data_items_config
        if self.export_evaluated_data_items_config:
            _dict['exportEvaluatedDataItemsConfig'] = self.export_evaluated_data_items_config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of hierarchy_config
        if self.hierarchy_config:
            _dict['hierarchyConfig'] = self.hierarchy_config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in transformations (list)
        _items = []
        if self.transformations:
            for _item_transformations in self.transformations:
                if _item_transformations:
                    _items.append(_item_transformations.to_dict())
            _dict['transformations'] = _items
        # override the default output from pydantic by calling `to_dict()` of window_config
        if self.window_config:
            _dict['windowConfig'] = self.window_config.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudAiplatformV1SchemaTrainingjobDefinitionAutoMlForecastingInputs from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "additionalExperiments": obj.get("additionalExperiments"),
            "availableAtForecastColumns": obj.get("availableAtForecastColumns"),
            "contextWindow": obj.get("contextWindow"),
            "dataGranularity": GoogleCloudAiplatformV1SchemaTrainingjobDefinitionAutoMlForecastingInputsGranularity.from_dict(obj["dataGranularity"]) if obj.get("dataGranularity") is not None else None,
            "enableProbabilisticInference": obj.get("enableProbabilisticInference"),
            "exportEvaluatedDataItemsConfig": GoogleCloudAiplatformV1SchemaTrainingjobDefinitionExportEvaluatedDataItemsConfig.from_dict(obj["exportEvaluatedDataItemsConfig"]) if obj.get("exportEvaluatedDataItemsConfig") is not None else None,
            "forecastHorizon": obj.get("forecastHorizon"),
            "hierarchyConfig": GoogleCloudAiplatformV1SchemaTrainingjobDefinitionHierarchyConfig.from_dict(obj["hierarchyConfig"]) if obj.get("hierarchyConfig") is not None else None,
            "holidayRegions": obj.get("holidayRegions"),
            "optimizationObjective": obj.get("optimizationObjective"),
            "quantiles": obj.get("quantiles"),
            "targetColumn": obj.get("targetColumn"),
            "timeColumn": obj.get("timeColumn"),
            "timeSeriesAttributeColumns": obj.get("timeSeriesAttributeColumns"),
            "timeSeriesIdentifierColumn": obj.get("timeSeriesIdentifierColumn"),
            "trainBudgetMilliNodeHours": obj.get("trainBudgetMilliNodeHours"),
            "transformations": [GoogleCloudAiplatformV1SchemaTrainingjobDefinitionAutoMlForecastingInputsTransformation.from_dict(_item) for _item in obj["transformations"]] if obj.get("transformations") is not None else None,
            "unavailableAtForecastColumns": obj.get("unavailableAtForecastColumns"),
            "validationOptions": obj.get("validationOptions"),
            "weightColumn": obj.get("weightColumn"),
            "windowConfig": GoogleCloudAiplatformV1SchemaTrainingjobDefinitionWindowConfig.from_dict(obj["windowConfig"]) if obj.get("windowConfig") is not None else None
        })
        return _obj



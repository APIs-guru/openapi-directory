# coding: utf-8

"""
    Vertex AI API

    Train high-quality custom machine learning models with minimal machine learning expertise and effort.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_cloud_aiplatform_v1_autoscaling_metric_spec import GoogleCloudAiplatformV1AutoscalingMetricSpec
from openapi_client.models.google_cloud_aiplatform_v1_machine_spec import GoogleCloudAiplatformV1MachineSpec
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudAiplatformV1DedicatedResources(BaseModel):
    """
    A description of resources that are dedicated to a DeployedModel, and that need a higher degree of manual configuration.
    """ # noqa: E501
    autoscaling_metric_specs: Optional[List[GoogleCloudAiplatformV1AutoscalingMetricSpec]] = Field(default=None, description="Immutable. The metric specifications that overrides a resource utilization metric (CPU utilization, accelerator's duty cycle, and so on) target value (default to 60 if not set). At most one entry is allowed per metric. If machine_spec.accelerator_count is above 0, the autoscaling will be based on both CPU utilization and accelerator's duty cycle metrics and scale up when either metrics exceeds its target value while scale down if both metrics are under their target value. The default target value is 60 for both metrics. If machine_spec.accelerator_count is 0, the autoscaling will be based on CPU utilization metric only with default target value 60 if not explicitly set. For example, in the case of Online Prediction, if you want to override target CPU utilization to 80, you should set autoscaling_metric_specs.metric_name to `aiplatform.googleapis.com/prediction/online/cpu/utilization` and autoscaling_metric_specs.target to `80`.", alias="autoscalingMetricSpecs")
    machine_spec: Optional[GoogleCloudAiplatformV1MachineSpec] = Field(default=None, alias="machineSpec")
    max_replica_count: Optional[StrictInt] = Field(default=None, description="Immutable. The maximum number of replicas this DeployedModel may be deployed on when the traffic against it increases. If the requested value is too large, the deployment will error, but if deployment succeeds then the ability to scale the model to that many replicas is guaranteed (barring service outages). If traffic against the DeployedModel increases beyond what its replicas at maximum may handle, a portion of the traffic will be dropped. If this value is not provided, will use min_replica_count as the default value. The value of this field impacts the charge against Vertex CPU and GPU quotas. Specifically, you will be charged for (max_replica_count * number of cores in the selected machine type) and (max_replica_count * number of GPUs per replica in the selected machine type).", alias="maxReplicaCount")
    min_replica_count: Optional[StrictInt] = Field(default=None, description="Required. Immutable. The minimum number of machine replicas this DeployedModel will be always deployed on. This value must be greater than or equal to 1. If traffic against the DeployedModel increases, it may dynamically be deployed onto more replicas, and as traffic decreases, some of these extra replicas may be freed.", alias="minReplicaCount")
    __properties: ClassVar[List[str]] = ["autoscalingMetricSpecs", "machineSpec", "maxReplicaCount", "minReplicaCount"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudAiplatformV1DedicatedResources from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in autoscaling_metric_specs (list)
        _items = []
        if self.autoscaling_metric_specs:
            for _item_autoscaling_metric_specs in self.autoscaling_metric_specs:
                if _item_autoscaling_metric_specs:
                    _items.append(_item_autoscaling_metric_specs.to_dict())
            _dict['autoscalingMetricSpecs'] = _items
        # override the default output from pydantic by calling `to_dict()` of machine_spec
        if self.machine_spec:
            _dict['machineSpec'] = self.machine_spec.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudAiplatformV1DedicatedResources from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "autoscalingMetricSpecs": [GoogleCloudAiplatformV1AutoscalingMetricSpec.from_dict(_item) for _item in obj["autoscalingMetricSpecs"]] if obj.get("autoscalingMetricSpecs") is not None else None,
            "machineSpec": GoogleCloudAiplatformV1MachineSpec.from_dict(obj["machineSpec"]) if obj.get("machineSpec") is not None else None,
            "maxReplicaCount": obj.get("maxReplicaCount"),
            "minReplicaCount": obj.get("minReplicaCount")
        })
        return _obj



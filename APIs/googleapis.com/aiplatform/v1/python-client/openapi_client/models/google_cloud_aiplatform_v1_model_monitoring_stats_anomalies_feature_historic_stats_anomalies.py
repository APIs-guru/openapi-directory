# coding: utf-8

"""
    Vertex AI API

    Train high-quality custom machine learning models with minimal machine learning expertise and effort.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_cloud_aiplatform_v1_feature_stats_anomaly import GoogleCloudAiplatformV1FeatureStatsAnomaly
from openapi_client.models.google_cloud_aiplatform_v1_threshold_config import GoogleCloudAiplatformV1ThresholdConfig
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudAiplatformV1ModelMonitoringStatsAnomaliesFeatureHistoricStatsAnomalies(BaseModel):
    """
    Historical Stats (and Anomalies) for a specific Feature.
    """ # noqa: E501
    feature_display_name: Optional[StrictStr] = Field(default=None, description="Display Name of the Feature.", alias="featureDisplayName")
    prediction_stats: Optional[List[GoogleCloudAiplatformV1FeatureStatsAnomaly]] = Field(default=None, description="A list of historical stats generated by different time window's Prediction Dataset.", alias="predictionStats")
    threshold: Optional[GoogleCloudAiplatformV1ThresholdConfig] = None
    training_stats: Optional[GoogleCloudAiplatformV1FeatureStatsAnomaly] = Field(default=None, alias="trainingStats")
    __properties: ClassVar[List[str]] = ["featureDisplayName", "predictionStats", "threshold", "trainingStats"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudAiplatformV1ModelMonitoringStatsAnomaliesFeatureHistoricStatsAnomalies from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in prediction_stats (list)
        _items = []
        if self.prediction_stats:
            for _item_prediction_stats in self.prediction_stats:
                if _item_prediction_stats:
                    _items.append(_item_prediction_stats.to_dict())
            _dict['predictionStats'] = _items
        # override the default output from pydantic by calling `to_dict()` of threshold
        if self.threshold:
            _dict['threshold'] = self.threshold.to_dict()
        # override the default output from pydantic by calling `to_dict()` of training_stats
        if self.training_stats:
            _dict['trainingStats'] = self.training_stats.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudAiplatformV1ModelMonitoringStatsAnomaliesFeatureHistoricStatsAnomalies from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "featureDisplayName": obj.get("featureDisplayName"),
            "predictionStats": [GoogleCloudAiplatformV1FeatureStatsAnomaly.from_dict(_item) for _item in obj["predictionStats"]] if obj.get("predictionStats") is not None else None,
            "threshold": GoogleCloudAiplatformV1ThresholdConfig.from_dict(obj["threshold"]) if obj.get("threshold") is not None else None,
            "trainingStats": GoogleCloudAiplatformV1FeatureStatsAnomaly.from_dict(obj["trainingStats"]) if obj.get("trainingStats") is not None else None
        })
        return _obj



# coding: utf-8

"""
    Vertex AI API

    Train high-quality custom machine learning models with minimal machine learning expertise and effort.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudAiplatformV1SchemaPredictPredictionVideoObjectTrackingPredictionResultFrame(BaseModel):
    """
    The fields `xMin`, `xMax`, `yMin`, and `yMax` refer to a bounding box, i.e. the rectangle over the video frame pinpointing the found AnnotationSpec. The coordinates are relative to the frame size, and the point 0,0 is in the top left of the frame.
    """ # noqa: E501
    time_offset: Optional[StrictStr] = Field(default=None, description="A time (frame) of a video in which the object has been detected. Expressed as a number of seconds as measured from the start of the video, with fractions up to a microsecond precision, and with \"s\" appended at the end.", alias="timeOffset")
    x_max: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The rightmost coordinate of the bounding box.", alias="xMax")
    x_min: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The leftmost coordinate of the bounding box.", alias="xMin")
    y_max: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The bottommost coordinate of the bounding box.", alias="yMax")
    y_min: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The topmost coordinate of the bounding box.", alias="yMin")
    __properties: ClassVar[List[str]] = ["timeOffset", "xMax", "xMin", "yMax", "yMin"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudAiplatformV1SchemaPredictPredictionVideoObjectTrackingPredictionResultFrame from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudAiplatformV1SchemaPredictPredictionVideoObjectTrackingPredictionResultFrame from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "timeOffset": obj.get("timeOffset"),
            "xMax": obj.get("xMax"),
            "xMin": obj.get("xMin"),
            "yMax": obj.get("yMax"),
            "yMin": obj.get("yMin")
        })
        return _obj



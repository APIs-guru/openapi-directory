# coding: utf-8

"""
    Vertex AI API

    Train high-quality custom machine learning models with minimal machine learning expertise and effort.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from openapi_client.models.google_cloud_aiplatform_v1_schema_trainingjob_definition_auto_ml_tables_inputs_transformation import GoogleCloudAiplatformV1SchemaTrainingjobDefinitionAutoMlTablesInputsTransformation
from openapi_client.models.google_cloud_aiplatform_v1_schema_trainingjob_definition_export_evaluated_data_items_config import GoogleCloudAiplatformV1SchemaTrainingjobDefinitionExportEvaluatedDataItemsConfig
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudAiplatformV1SchemaTrainingjobDefinitionAutoMlTablesInputs(BaseModel):
    """
    GoogleCloudAiplatformV1SchemaTrainingjobDefinitionAutoMlTablesInputs
    """ # noqa: E501
    additional_experiments: Optional[List[StrictStr]] = Field(default=None, description="Additional experiment flags for the Tables training pipeline.", alias="additionalExperiments")
    disable_early_stopping: Optional[StrictBool] = Field(default=None, description="Use the entire training budget. This disables the early stopping feature. By default, the early stopping feature is enabled, which means that AutoML Tables might stop training before the entire training budget has been used.", alias="disableEarlyStopping")
    export_evaluated_data_items_config: Optional[GoogleCloudAiplatformV1SchemaTrainingjobDefinitionExportEvaluatedDataItemsConfig] = Field(default=None, alias="exportEvaluatedDataItemsConfig")
    optimization_objective: Optional[StrictStr] = Field(default=None, description="Objective function the model is optimizing towards. The training process creates a model that maximizes/minimizes the value of the objective function over the validation set. The supported optimization objectives depend on the prediction type. If the field is not set, a default objective function is used. classification (binary): \"maximize-au-roc\" (default) - Maximize the area under the receiver operating characteristic (ROC) curve. \"minimize-log-loss\" - Minimize log loss. \"maximize-au-prc\" - Maximize the area under the precision-recall curve. \"maximize-precision-at-recall\" - Maximize precision for a specified recall value. \"maximize-recall-at-precision\" - Maximize recall for a specified precision value. classification (multi-class): \"minimize-log-loss\" (default) - Minimize log loss. regression: \"minimize-rmse\" (default) - Minimize root-mean-squared error (RMSE). \"minimize-mae\" - Minimize mean-absolute error (MAE). \"minimize-rmsle\" - Minimize root-mean-squared log error (RMSLE).", alias="optimizationObjective")
    optimization_objective_precision_value: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Required when optimization_objective is \"maximize-recall-at-precision\". Must be between 0 and 1, inclusive.", alias="optimizationObjectivePrecisionValue")
    optimization_objective_recall_value: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Required when optimization_objective is \"maximize-precision-at-recall\". Must be between 0 and 1, inclusive.", alias="optimizationObjectiveRecallValue")
    prediction_type: Optional[StrictStr] = Field(default=None, description="The type of prediction the Model is to produce. \"classification\" - Predict one out of multiple target values is picked for each row. \"regression\" - Predict a value based on its relation to other values. This type is available only to columns that contain semantically numeric values, i.e. integers or floating point number, even if stored as e.g. strings.", alias="predictionType")
    target_column: Optional[StrictStr] = Field(default=None, description="The column name of the target column that the model is to predict.", alias="targetColumn")
    train_budget_milli_node_hours: Optional[StrictStr] = Field(default=None, description="Required. The train budget of creating this model, expressed in milli node hours i.e. 1,000 value in this field means 1 node hour. The training cost of the model will not exceed this budget. The final cost will be attempted to be close to the budget, though may end up being (even) noticeably smaller - at the backend's discretion. This especially may happen when further model training ceases to provide any improvements. If the budget is set to a value known to be insufficient to train a model for the given dataset, the training won't be attempted and will error. The train budget must be between 1,000 and 72,000 milli node hours, inclusive.", alias="trainBudgetMilliNodeHours")
    transformations: Optional[List[GoogleCloudAiplatformV1SchemaTrainingjobDefinitionAutoMlTablesInputsTransformation]] = Field(default=None, description="Each transformation will apply transform function to given input column. And the result will be used for training. When creating transformation for BigQuery Struct column, the column should be flattened using \".\" as the delimiter.")
    weight_column_name: Optional[StrictStr] = Field(default=None, description="Column name that should be used as the weight column. Higher values in this column give more importance to the row during model training. The column must have numeric values between 0 and 10000 inclusively; 0 means the row is ignored for training. If weight column field is not set, then all rows are assumed to have equal weight of 1.", alias="weightColumnName")
    __properties: ClassVar[List[str]] = ["additionalExperiments", "disableEarlyStopping", "exportEvaluatedDataItemsConfig", "optimizationObjective", "optimizationObjectivePrecisionValue", "optimizationObjectiveRecallValue", "predictionType", "targetColumn", "trainBudgetMilliNodeHours", "transformations", "weightColumnName"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudAiplatformV1SchemaTrainingjobDefinitionAutoMlTablesInputs from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of export_evaluated_data_items_config
        if self.export_evaluated_data_items_config:
            _dict['exportEvaluatedDataItemsConfig'] = self.export_evaluated_data_items_config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in transformations (list)
        _items = []
        if self.transformations:
            for _item_transformations in self.transformations:
                if _item_transformations:
                    _items.append(_item_transformations.to_dict())
            _dict['transformations'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudAiplatformV1SchemaTrainingjobDefinitionAutoMlTablesInputs from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "additionalExperiments": obj.get("additionalExperiments"),
            "disableEarlyStopping": obj.get("disableEarlyStopping"),
            "exportEvaluatedDataItemsConfig": GoogleCloudAiplatformV1SchemaTrainingjobDefinitionExportEvaluatedDataItemsConfig.from_dict(obj["exportEvaluatedDataItemsConfig"]) if obj.get("exportEvaluatedDataItemsConfig") is not None else None,
            "optimizationObjective": obj.get("optimizationObjective"),
            "optimizationObjectivePrecisionValue": obj.get("optimizationObjectivePrecisionValue"),
            "optimizationObjectiveRecallValue": obj.get("optimizationObjectiveRecallValue"),
            "predictionType": obj.get("predictionType"),
            "targetColumn": obj.get("targetColumn"),
            "trainBudgetMilliNodeHours": obj.get("trainBudgetMilliNodeHours"),
            "transformations": [GoogleCloudAiplatformV1SchemaTrainingjobDefinitionAutoMlTablesInputsTransformation.from_dict(_item) for _item in obj["transformations"]] if obj.get("transformations") is not None else None,
            "weightColumnName": obj.get("weightColumnName")
        })
        return _obj



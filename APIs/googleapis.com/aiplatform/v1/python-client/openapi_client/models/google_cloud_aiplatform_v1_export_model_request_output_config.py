# coding: utf-8

"""
    Vertex AI API

    Train high-quality custom machine learning models with minimal machine learning expertise and effort.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_cloud_aiplatform_v1_container_registry_destination import GoogleCloudAiplatformV1ContainerRegistryDestination
from openapi_client.models.google_cloud_aiplatform_v1_gcs_destination import GoogleCloudAiplatformV1GcsDestination
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudAiplatformV1ExportModelRequestOutputConfig(BaseModel):
    """
    Output configuration for the Model export.
    """ # noqa: E501
    artifact_destination: Optional[GoogleCloudAiplatformV1GcsDestination] = Field(default=None, alias="artifactDestination")
    export_format_id: Optional[StrictStr] = Field(default=None, description="The ID of the format in which the Model must be exported. Each Model lists the export formats it supports. If no value is provided here, then the first from the list of the Model's supported formats is used by default.", alias="exportFormatId")
    image_destination: Optional[GoogleCloudAiplatformV1ContainerRegistryDestination] = Field(default=None, alias="imageDestination")
    __properties: ClassVar[List[str]] = ["artifactDestination", "exportFormatId", "imageDestination"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudAiplatformV1ExportModelRequestOutputConfig from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of artifact_destination
        if self.artifact_destination:
            _dict['artifactDestination'] = self.artifact_destination.to_dict()
        # override the default output from pydantic by calling `to_dict()` of image_destination
        if self.image_destination:
            _dict['imageDestination'] = self.image_destination.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudAiplatformV1ExportModelRequestOutputConfig from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "artifactDestination": GoogleCloudAiplatformV1GcsDestination.from_dict(obj["artifactDestination"]) if obj.get("artifactDestination") is not None else None,
            "exportFormatId": obj.get("exportFormatId"),
            "imageDestination": GoogleCloudAiplatformV1ContainerRegistryDestination.from_dict(obj["imageDestination"]) if obj.get("imageDestination") is not None else None
        })
        return _obj



# coding: utf-8

"""
    Vertex AI API

    Train high-quality custom machine learning models with minimal machine learning expertise and effort.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_cloud_aiplatform_v1_psc_automated_endpoints import GoogleCloudAiplatformV1PscAutomatedEndpoints
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudAiplatformV1IndexPrivateEndpoints(BaseModel):
    """
    IndexPrivateEndpoints proto is used to provide paths for users to send requests via private endpoints (e.g. private service access, private service connect). To send request via private service access, use match_grpc_address. To send request via private service connect, use service_attachment.
    """ # noqa: E501
    match_grpc_address: Optional[StrictStr] = Field(default=None, description="Output only. The ip address used to send match gRPC requests.", alias="matchGrpcAddress")
    psc_automated_endpoints: Optional[List[GoogleCloudAiplatformV1PscAutomatedEndpoints]] = Field(default=None, description="Output only. PscAutomatedEndpoints is populated if private service connect is enabled if PscAutomatedConfig is set.", alias="pscAutomatedEndpoints")
    service_attachment: Optional[StrictStr] = Field(default=None, description="Output only. The name of the service attachment resource. Populated if private service connect is enabled.", alias="serviceAttachment")
    __properties: ClassVar[List[str]] = ["matchGrpcAddress", "pscAutomatedEndpoints", "serviceAttachment"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudAiplatformV1IndexPrivateEndpoints from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "match_grpc_address",
            "psc_automated_endpoints",
            "service_attachment",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in psc_automated_endpoints (list)
        _items = []
        if self.psc_automated_endpoints:
            for _item_psc_automated_endpoints in self.psc_automated_endpoints:
                if _item_psc_automated_endpoints:
                    _items.append(_item_psc_automated_endpoints.to_dict())
            _dict['pscAutomatedEndpoints'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudAiplatformV1IndexPrivateEndpoints from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "matchGrpcAddress": obj.get("matchGrpcAddress"),
            "pscAutomatedEndpoints": [GoogleCloudAiplatformV1PscAutomatedEndpoints.from_dict(_item) for _item in obj["pscAutomatedEndpoints"]] if obj.get("pscAutomatedEndpoints") is not None else None,
            "serviceAttachment": obj.get("serviceAttachment")
        })
        return _obj



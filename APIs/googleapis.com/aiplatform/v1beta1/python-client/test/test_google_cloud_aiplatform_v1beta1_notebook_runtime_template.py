# coding: utf-8

"""
    Vertex AI API

    Train high-quality custom machine learning models with minimal machine learning expertise and effort.

    The version of the OpenAPI document: v1beta1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.google_cloud_aiplatform_v1beta1_notebook_runtime_template import GoogleCloudAiplatformV1beta1NotebookRuntimeTemplate

class TestGoogleCloudAiplatformV1beta1NotebookRuntimeTemplate(unittest.TestCase):
    """GoogleCloudAiplatformV1beta1NotebookRuntimeTemplate unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> GoogleCloudAiplatformV1beta1NotebookRuntimeTemplate:
        """Test GoogleCloudAiplatformV1beta1NotebookRuntimeTemplate
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `GoogleCloudAiplatformV1beta1NotebookRuntimeTemplate`
        """
        model = GoogleCloudAiplatformV1beta1NotebookRuntimeTemplate()
        if include_optional:
            return GoogleCloudAiplatformV1beta1NotebookRuntimeTemplate(
                create_time = '',
                data_persistent_disk_spec = openapi_client.models.google_cloud_aiplatform_v1beta1_persistent_disk_spec.GoogleCloudAiplatformV1beta1PersistentDiskSpec(
                    disk_size_gb = '', 
                    disk_type = '', ),
                description = '',
                display_name = '',
                etag = '',
                euc_config = openapi_client.models.google_cloud_aiplatform_v1beta1_notebook_euc_config.GoogleCloudAiplatformV1beta1NotebookEucConfig(
                    bypass_actas_check = True, 
                    euc_disabled = True, ),
                idle_shutdown_config = openapi_client.models.google_cloud_aiplatform_v1beta1_notebook_idle_shutdown_config.GoogleCloudAiplatformV1beta1NotebookIdleShutdownConfig(
                    idle_shutdown_disabled = True, 
                    idle_timeout = '', ),
                is_default = True,
                labels = {
                    'key' : ''
                    },
                machine_spec = openapi_client.models.google_cloud_aiplatform_v1beta1_machine_spec.GoogleCloudAiplatformV1beta1MachineSpec(
                    accelerator_count = 56, 
                    accelerator_type = 'ACCELERATOR_TYPE_UNSPECIFIED', 
                    machine_type = '', 
                    tpu_topology = '', ),
                name = '',
                network_spec = openapi_client.models.google_cloud_aiplatform_v1beta1_network_spec.GoogleCloudAiplatformV1beta1NetworkSpec(
                    enable_internet_access = True, 
                    network = '', 
                    subnetwork = '', ),
                network_tags = [
                    ''
                    ],
                notebook_runtime_type = 'NOTEBOOK_RUNTIME_TYPE_UNSPECIFIED',
                reservation_affinity = openapi_client.models.google_cloud_aiplatform_v1beta1_notebook_reservation_affinity.GoogleCloudAiplatformV1beta1NotebookReservationAffinity(
                    consume_reservation_type = 'RESERVATION_AFFINITY_TYPE_UNSPECIFIED', 
                    key = '', 
                    values = [
                        ''
                        ], ),
                service_account = '',
                shielded_vm_config = openapi_client.models.google_cloud_aiplatform_v1beta1_shielded_vm_config.GoogleCloudAiplatformV1beta1ShieldedVmConfig(
                    enable_secure_boot = True, ),
                update_time = ''
            )
        else:
            return GoogleCloudAiplatformV1beta1NotebookRuntimeTemplate(
        )
        """

    def testGoogleCloudAiplatformV1beta1NotebookRuntimeTemplate(self):
        """Test GoogleCloudAiplatformV1beta1NotebookRuntimeTemplate"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

# coding: utf-8

"""
    Vertex AI API

    Train high-quality custom machine learning models with minimal machine learning expertise and effort.

    The version of the OpenAPI document: v1beta1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.cloud_ai_large_models_vision_image import CloudAiLargeModelsVisionImage

class TestCloudAiLargeModelsVisionImage(unittest.TestCase):
    """CloudAiLargeModelsVisionImage unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> CloudAiLargeModelsVisionImage:
        """Test CloudAiLargeModelsVisionImage
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `CloudAiLargeModelsVisionImage`
        """
        model = CloudAiLargeModelsVisionImage()
        if include_optional:
            return CloudAiLargeModelsVisionImage(
                encoding = '',
                image = 'YQ==',
                image_rai_scores = openapi_client.models.cloud_ai_large_models_vision_image_rai_scores.CloudAiLargeModelsVisionImageRAIScores(
                    agile_watermark_detection_score = 1.337, ),
                rai_info = openapi_client.models.cloud_ai_large_models_vision_rai_info.CloudAiLargeModelsVisionRaiInfo(
                    rai_categories = [
                        ''
                        ], 
                    scores = [
                        1.337
                        ], ),
                semantic_filter_response = openapi_client.models.cloud_ai_large_models_vision_semantic_filter_response.CloudAiLargeModelsVisionSemanticFilterResponse(
                    named_bounding_boxes = [
                        openapi_client.models.cloud_ai_large_models_vision_named_bounding_box.CloudAiLargeModelsVisionNamedBoundingBox(
                            classes = [
                                ''
                                ], 
                            entities = [
                                ''
                                ], 
                            scores = [
                                1.337
                                ], 
                            x1 = 1.337, 
                            x2 = 1.337, 
                            y1 = 1.337, 
                            y2 = 1.337, )
                        ], 
                    passed_semantic_filter = True, ),
                text = '',
                uri = ''
            )
        else:
            return CloudAiLargeModelsVisionImage(
        )
        """

    def testCloudAiLargeModelsVisionImage(self):
        """Test CloudAiLargeModelsVisionImage"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

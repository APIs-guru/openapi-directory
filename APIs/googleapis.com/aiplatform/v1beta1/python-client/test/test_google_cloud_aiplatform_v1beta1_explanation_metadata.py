# coding: utf-8

"""
    Vertex AI API

    Train high-quality custom machine learning models with minimal machine learning expertise and effort.

    The version of the OpenAPI document: v1beta1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.google_cloud_aiplatform_v1beta1_explanation_metadata import GoogleCloudAiplatformV1beta1ExplanationMetadata

class TestGoogleCloudAiplatformV1beta1ExplanationMetadata(unittest.TestCase):
    """GoogleCloudAiplatformV1beta1ExplanationMetadata unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> GoogleCloudAiplatformV1beta1ExplanationMetadata:
        """Test GoogleCloudAiplatformV1beta1ExplanationMetadata
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `GoogleCloudAiplatformV1beta1ExplanationMetadata`
        """
        model = GoogleCloudAiplatformV1beta1ExplanationMetadata()
        if include_optional:
            return GoogleCloudAiplatformV1beta1ExplanationMetadata(
                feature_attributions_schema_uri = '',
                inputs = {
                    'key' : openapi_client.models.google_cloud_aiplatform_v1beta1_explanation_metadata_input_metadata.GoogleCloudAiplatformV1beta1ExplanationMetadataInputMetadata(
                        dense_shape_tensor_name = '', 
                        encoded_baselines = [
                            null
                            ], 
                        encoded_tensor_name = '', 
                        encoding = 'ENCODING_UNSPECIFIED', 
                        feature_value_domain = openapi_client.models.google_cloud_aiplatform_v1beta1_explanation_metadata_input_metadata_feature_value_domain.GoogleCloudAiplatformV1beta1ExplanationMetadataInputMetadataFeatureValueDomain(
                            max_value = 1.337, 
                            min_value = 1.337, 
                            original_mean = 1.337, 
                            original_stddev = 1.337, ), 
                        group_name = '', 
                        index_feature_mapping = [
                            ''
                            ], 
                        indices_tensor_name = '', 
                        input_baselines = [
                            null
                            ], 
                        input_tensor_name = '', 
                        modality = '', 
                        visualization = openapi_client.models.google_cloud_aiplatform_v1beta1_explanation_metadata_input_metadata_visualization.GoogleCloudAiplatformV1beta1ExplanationMetadataInputMetadataVisualization(
                            clip_percent_lowerbound = 1.337, 
                            clip_percent_upperbound = 1.337, 
                            color_map = 'COLOR_MAP_UNSPECIFIED', 
                            overlay_type = 'OVERLAY_TYPE_UNSPECIFIED', 
                            polarity = 'POLARITY_UNSPECIFIED', 
                            type = 'TYPE_UNSPECIFIED', ), )
                    },
                latent_space_source = '',
                outputs = {
                    'key' : openapi_client.models.google_cloud_aiplatform_v1beta1_explanation_metadata_output_metadata.GoogleCloudAiplatformV1beta1ExplanationMetadataOutputMetadata(
                        display_name_mapping_key = '', 
                        index_display_name_mapping = null, 
                        output_tensor_name = '', )
                    }
            )
        else:
            return GoogleCloudAiplatformV1beta1ExplanationMetadata(
        )
        """

    def testGoogleCloudAiplatformV1beta1ExplanationMetadata(self):
        """Test GoogleCloudAiplatformV1beta1ExplanationMetadata"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

# coding: utf-8

"""
    Vertex AI API

    Train high-quality custom machine learning models with minimal machine learning expertise and effort.

    The version of the OpenAPI document: v1beta1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.learning_genai_root_routing_decision_metadata import LearningGenaiRootRoutingDecisionMetadata

class TestLearningGenaiRootRoutingDecisionMetadata(unittest.TestCase):
    """LearningGenaiRootRoutingDecisionMetadata unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> LearningGenaiRootRoutingDecisionMetadata:
        """Test LearningGenaiRootRoutingDecisionMetadata
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `LearningGenaiRootRoutingDecisionMetadata`
        """
        model = LearningGenaiRootRoutingDecisionMetadata()
        if include_optional:
            return LearningGenaiRootRoutingDecisionMetadata(
                score_based_routing_metadata = openapi_client.models.learning_genai_root_routing_decision_metadata_score_based.LearningGenaiRootRoutingDecisionMetadataScoreBased(
                    matched_rule = openapi_client.models.learning_genai_root_score_based_routing_config_rule.LearningGenaiRootScoreBasedRoutingConfigRule(
                        equal_or_greater_than = openapi_client.models.learning_genai_root_score.LearningGenaiRootScore(
                            calculation_type = openapi_client.models.learning_genai_root_calculation_type.LearningGenaiRootCalculationType(
                                score_type = 'TYPE_UNKNOWN', 
                                weights = 1.337, ), 
                            internal_metadata = openapi_client.models.learning_genai_root_internal_metadata.LearningGenaiRootInternalMetadata(
                                scored_tokens = [
                                    openapi_client.models.learning_genai_root_scored_token.LearningGenaiRootScoredToken(
                                        end_token_score = 1.337, 
                                        score = 1.337, 
                                        token = '', )
                                    ], ), 
                            threshold_type = openapi_client.models.learning_genai_root_threshold_type.LearningGenaiRootThresholdType(
                                score_type = 'TYPE_UNKNOWN', 
                                threshold = 1.337, ), 
                            tokens_and_logprob_per_decoding_step = openapi_client.models.learning_genai_root_tokens_and_log_prob_per_decoding_step.LearningGenaiRootTokensAndLogProbPerDecodingStep(
                                chosen_candidates = [
                                    openapi_client.models.learning_genai_root_tokens_and_log_prob_per_decoding_step_candidate.LearningGenaiRootTokensAndLogProbPerDecodingStepCandidate(
                                        log_probability = 1.337, 
                                        token = '', )
                                    ], 
                                top_candidates = [
                                    openapi_client.models.learning_genai_root_tokens_and_log_prob_per_decoding_step_top_candidates.LearningGenaiRootTokensAndLogProbPerDecodingStepTopCandidates(
                                        candidates = [
                                            openapi_client.models.learning_genai_root_tokens_and_log_prob_per_decoding_step_candidate.LearningGenaiRootTokensAndLogProbPerDecodingStepCandidate(
                                                log_probability = 1.337, 
                                                token = '', )
                                            ], )
                                    ], ), 
                            value = 1.337, ), 
                        less_than = openapi_client.models.learning_genai_root_score.LearningGenaiRootScore(
                            value = 1.337, ), 
                        model_config_id = '', ), 
                    score = , 
                    used_default_fallback = True, ),
                token_length_based_routing_metadata = openapi_client.models.learning_genai_root_routing_decision_metadata_token_length_based.LearningGenaiRootRoutingDecisionMetadataTokenLengthBased(
                    model_input_token_metadata = [
                        openapi_client.models.learning_genai_root_routing_decision_metadata_token_length_based_model_input_token_metadata.LearningGenaiRootRoutingDecisionMetadataTokenLengthBasedModelInputTokenMetadata(
                            computed_input_token_length = 56, 
                            model_id = '', )
                        ], 
                    model_max_token_metadata = [
                        openapi_client.models.learning_genai_root_routing_decision_metadata_token_length_based_model_max_token_metadata.LearningGenaiRootRoutingDecisionMetadataTokenLengthBasedModelMaxTokenMetadata(
                            max_num_input_tokens = 56, 
                            max_num_output_tokens = 56, 
                            model_id = '', )
                        ], )
            )
        else:
            return LearningGenaiRootRoutingDecisionMetadata(
        )
        """

    def testLearningGenaiRootRoutingDecisionMetadata(self):
        """Test LearningGenaiRootRoutingDecisionMetadata"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

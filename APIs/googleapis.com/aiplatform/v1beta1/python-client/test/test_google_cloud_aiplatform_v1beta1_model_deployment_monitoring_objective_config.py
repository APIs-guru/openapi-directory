# coding: utf-8

"""
    Vertex AI API

    Train high-quality custom machine learning models with minimal machine learning expertise and effort.

    The version of the OpenAPI document: v1beta1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.google_cloud_aiplatform_v1beta1_model_deployment_monitoring_objective_config import GoogleCloudAiplatformV1beta1ModelDeploymentMonitoringObjectiveConfig

class TestGoogleCloudAiplatformV1beta1ModelDeploymentMonitoringObjectiveConfig(unittest.TestCase):
    """GoogleCloudAiplatformV1beta1ModelDeploymentMonitoringObjectiveConfig unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> GoogleCloudAiplatformV1beta1ModelDeploymentMonitoringObjectiveConfig:
        """Test GoogleCloudAiplatformV1beta1ModelDeploymentMonitoringObjectiveConfig
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `GoogleCloudAiplatformV1beta1ModelDeploymentMonitoringObjectiveConfig`
        """
        model = GoogleCloudAiplatformV1beta1ModelDeploymentMonitoringObjectiveConfig()
        if include_optional:
            return GoogleCloudAiplatformV1beta1ModelDeploymentMonitoringObjectiveConfig(
                deployed_model_id = '',
                objective_config = openapi_client.models.google_cloud_aiplatform_v1beta1_model_monitoring_objective_config.GoogleCloudAiplatformV1beta1ModelMonitoringObjectiveConfig(
                    explanation_config = openapi_client.models.google_cloud_aiplatform_v1beta1_model_monitoring_objective_config_explanation_config.GoogleCloudAiplatformV1beta1ModelMonitoringObjectiveConfigExplanationConfig(
                        enable_feature_attributes = True, 
                        explanation_baseline = openapi_client.models.google_cloud_aiplatform_v1beta1_model_monitoring_objective_config_explanation_config_explanation_baseline.GoogleCloudAiplatformV1beta1ModelMonitoringObjectiveConfigExplanationConfigExplanationBaseline(
                            bigquery = openapi_client.models.google_cloud_aiplatform_v1beta1_big_query_destination.GoogleCloudAiplatformV1beta1BigQueryDestination(
                                output_uri = '', ), 
                            gcs = openapi_client.models.google_cloud_aiplatform_v1beta1_gcs_destination.GoogleCloudAiplatformV1beta1GcsDestination(
                                output_uri_prefix = '', ), 
                            prediction_format = 'PREDICTION_FORMAT_UNSPECIFIED', ), ), 
                    prediction_drift_detection_config = openapi_client.models.google_cloud_aiplatform_v1beta1_model_monitoring_objective_config_prediction_drift_detection_config.GoogleCloudAiplatformV1beta1ModelMonitoringObjectiveConfigPredictionDriftDetectionConfig(
                        attribution_score_drift_thresholds = {
                            'key' : openapi_client.models.google_cloud_aiplatform_v1beta1_threshold_config.GoogleCloudAiplatformV1beta1ThresholdConfig(
                                value = 1.337, )
                            }, 
                        default_drift_threshold = openapi_client.models.google_cloud_aiplatform_v1beta1_threshold_config.GoogleCloudAiplatformV1beta1ThresholdConfig(
                            value = 1.337, ), 
                        drift_thresholds = {
                            'key' : 
                            }, ), 
                    training_dataset = openapi_client.models.google_cloud_aiplatform_v1beta1_model_monitoring_objective_config_training_dataset.GoogleCloudAiplatformV1beta1ModelMonitoringObjectiveConfigTrainingDataset(
                        bigquery_source = openapi_client.models.google_cloud_aiplatform_v1beta1_big_query_source.GoogleCloudAiplatformV1beta1BigQuerySource(
                            input_uri = '', ), 
                        data_format = '', 
                        dataset = '', 
                        gcs_source = openapi_client.models.google_cloud_aiplatform_v1beta1_gcs_source.GoogleCloudAiplatformV1beta1GcsSource(
                            uris = [
                                ''
                                ], ), 
                        logging_sampling_strategy = openapi_client.models.google_cloud_aiplatform_v1beta1_sampling_strategy.GoogleCloudAiplatformV1beta1SamplingStrategy(
                            random_sample_config = openapi_client.models.google_cloud_aiplatform_v1beta1_sampling_strategy_random_sample_config.GoogleCloudAiplatformV1beta1SamplingStrategyRandomSampleConfig(
                                sample_rate = 1.337, ), ), 
                        target_field = '', ), 
                    training_prediction_skew_detection_config = openapi_client.models.google_cloud_aiplatform_v1beta1_model_monitoring_objective_config_training_prediction_skew_detection_config.GoogleCloudAiplatformV1beta1ModelMonitoringObjectiveConfigTrainingPredictionSkewDetectionConfig(
                        attribution_score_skew_thresholds = {
                            'key' : 
                            }, 
                        default_skew_threshold = , 
                        skew_thresholds = {
                            'key' : 
                            }, ), )
            )
        else:
            return GoogleCloudAiplatformV1beta1ModelDeploymentMonitoringObjectiveConfig(
        )
        """

    def testGoogleCloudAiplatformV1beta1ModelDeploymentMonitoringObjectiveConfig(self):
        """Test GoogleCloudAiplatformV1beta1ModelDeploymentMonitoringObjectiveConfig"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

# coding: utf-8

"""
    Vertex AI API

    Train high-quality custom machine learning models with minimal machine learning expertise and effort.

    The version of the OpenAPI document: v1beta1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.google_cloud_aiplatform_v1beta1_resource_pool import GoogleCloudAiplatformV1beta1ResourcePool

class TestGoogleCloudAiplatformV1beta1ResourcePool(unittest.TestCase):
    """GoogleCloudAiplatformV1beta1ResourcePool unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> GoogleCloudAiplatformV1beta1ResourcePool:
        """Test GoogleCloudAiplatformV1beta1ResourcePool
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `GoogleCloudAiplatformV1beta1ResourcePool`
        """
        model = GoogleCloudAiplatformV1beta1ResourcePool()
        if include_optional:
            return GoogleCloudAiplatformV1beta1ResourcePool(
                autoscaling_spec = openapi_client.models.google_cloud_aiplatform_v1beta1_resource_pool_autoscaling_spec.GoogleCloudAiplatformV1beta1ResourcePoolAutoscalingSpec(
                    max_replica_count = '', 
                    min_replica_count = '', ),
                disk_spec = openapi_client.models.google_cloud_aiplatform_v1beta1_disk_spec.GoogleCloudAiplatformV1beta1DiskSpec(
                    boot_disk_size_gb = 56, 
                    boot_disk_type = '', ),
                id = '',
                machine_spec = openapi_client.models.google_cloud_aiplatform_v1beta1_machine_spec.GoogleCloudAiplatformV1beta1MachineSpec(
                    accelerator_count = 56, 
                    accelerator_type = 'ACCELERATOR_TYPE_UNSPECIFIED', 
                    machine_type = '', 
                    tpu_topology = '', ),
                replica_count = '',
                used_replica_count = ''
            )
        else:
            return GoogleCloudAiplatformV1beta1ResourcePool(
        )
        """

    def testGoogleCloudAiplatformV1beta1ResourcePool(self):
        """Test GoogleCloudAiplatformV1beta1ResourcePool"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

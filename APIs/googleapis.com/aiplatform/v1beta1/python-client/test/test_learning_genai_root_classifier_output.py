# coding: utf-8

"""
    Vertex AI API

    Train high-quality custom machine learning models with minimal machine learning expertise and effort.

    The version of the OpenAPI document: v1beta1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.learning_genai_root_classifier_output import LearningGenaiRootClassifierOutput

class TestLearningGenaiRootClassifierOutput(unittest.TestCase):
    """LearningGenaiRootClassifierOutput unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> LearningGenaiRootClassifierOutput:
        """Test LearningGenaiRootClassifierOutput
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `LearningGenaiRootClassifierOutput`
        """
        model = LearningGenaiRootClassifierOutput()
        if include_optional:
            return LearningGenaiRootClassifierOutput(
                rule_output = openapi_client.models.learning_genai_root_rule_output.LearningGenaiRootRuleOutput(
                    decision = 'NO_MATCH', 
                    name = '', ),
                rule_outputs = [
                    openapi_client.models.learning_genai_root_rule_output.LearningGenaiRootRuleOutput(
                        decision = 'NO_MATCH', 
                        name = '', )
                    ],
                state = openapi_client.models.learning_genai_root_classifier_state.LearningGenaiRootClassifierState(
                    data_provider_output = [
                        openapi_client.models.learning_genai_root_data_provider_output.LearningGenaiRootDataProviderOutput(
                            name = '', 
                            status = openapi_client.models.util_status_proto.UtilStatusProto(
                                canonical_code = 56, 
                                code = 56, 
                                message = '', 
                                message_set = openapi_client.models.proto2_bridge_message_set.Proto2BridgeMessageSet(), 
                                space = '', ), )
                        ], 
                    metric_output = [
                        openapi_client.models.learning_genai_root_metric_output.LearningGenaiRootMetricOutput(
                            debug = '', 
                            name = '', 
                            numeric_value = 1.337, 
                            string_value = '', )
                        ], )
            )
        else:
            return LearningGenaiRootClassifierOutput(
        )
        """

    def testLearningGenaiRootClassifierOutput(self):
        """Test LearningGenaiRootClassifierOutput"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

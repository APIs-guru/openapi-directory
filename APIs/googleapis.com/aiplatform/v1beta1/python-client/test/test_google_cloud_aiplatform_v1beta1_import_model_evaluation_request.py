# coding: utf-8

"""
    Vertex AI API

    Train high-quality custom machine learning models with minimal machine learning expertise and effort.

    The version of the OpenAPI document: v1beta1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.google_cloud_aiplatform_v1beta1_import_model_evaluation_request import GoogleCloudAiplatformV1beta1ImportModelEvaluationRequest

class TestGoogleCloudAiplatformV1beta1ImportModelEvaluationRequest(unittest.TestCase):
    """GoogleCloudAiplatformV1beta1ImportModelEvaluationRequest unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> GoogleCloudAiplatformV1beta1ImportModelEvaluationRequest:
        """Test GoogleCloudAiplatformV1beta1ImportModelEvaluationRequest
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `GoogleCloudAiplatformV1beta1ImportModelEvaluationRequest`
        """
        model = GoogleCloudAiplatformV1beta1ImportModelEvaluationRequest()
        if include_optional:
            return GoogleCloudAiplatformV1beta1ImportModelEvaluationRequest(
                model_evaluation = openapi_client.models.google_cloud_aiplatform_v1beta1_model_evaluation.GoogleCloudAiplatformV1beta1ModelEvaluation(
                    bias_configs = openapi_client.models.google_cloud_aiplatform_v1beta1_model_evaluation_bias_config.GoogleCloudAiplatformV1beta1ModelEvaluationBiasConfig(
                        bias_slices = openapi_client.models.google_cloud_aiplatform_v1beta1_model_evaluation_slice_slice_slice_spec.GoogleCloudAiplatformV1beta1ModelEvaluationSliceSliceSliceSpec(
                            configs = {
                                'key' : openapi_client.models.google_cloud_aiplatform_v1beta1_model_evaluation_slice_slice_slice_spec_slice_config.GoogleCloudAiplatformV1beta1ModelEvaluationSliceSliceSliceSpecSliceConfig(
                                    all_values = True, 
                                    range = openapi_client.models.google_cloud_aiplatform_v1beta1_model_evaluation_slice_slice_slice_spec_range.GoogleCloudAiplatformV1beta1ModelEvaluationSliceSliceSliceSpecRange(
                                        high = 1.337, 
                                        low = 1.337, ), 
                                    value = openapi_client.models.google_cloud_aiplatform_v1beta1_model_evaluation_slice_slice_slice_spec_value.GoogleCloudAiplatformV1beta1ModelEvaluationSliceSliceSliceSpecValue(
                                        float_value = 1.337, 
                                        string_value = '', ), )
                                }, ), 
                        labels = [
                            ''
                            ], ), 
                    create_time = '', 
                    display_name = '', 
                    explanation_specs = [
                        openapi_client.models.google_cloud_aiplatform_v1beta1_model_evaluation_model_evaluation_explanation_spec.GoogleCloudAiplatformV1beta1ModelEvaluationModelEvaluationExplanationSpec(
                            explanation_spec = openapi_client.models.google_cloud_aiplatform_v1beta1_explanation_spec.GoogleCloudAiplatformV1beta1ExplanationSpec(
                                metadata = openapi_client.models.google_cloud_aiplatform_v1beta1_explanation_metadata.GoogleCloudAiplatformV1beta1ExplanationMetadata(
                                    feature_attributions_schema_uri = '', 
                                    inputs = {
                                        'key' : openapi_client.models.google_cloud_aiplatform_v1beta1_explanation_metadata_input_metadata.GoogleCloudAiplatformV1beta1ExplanationMetadataInputMetadata(
                                            dense_shape_tensor_name = '', 
                                            encoded_baselines = [
                                                null
                                                ], 
                                            encoded_tensor_name = '', 
                                            encoding = 'ENCODING_UNSPECIFIED', 
                                            feature_value_domain = openapi_client.models.google_cloud_aiplatform_v1beta1_explanation_metadata_input_metadata_feature_value_domain.GoogleCloudAiplatformV1beta1ExplanationMetadataInputMetadataFeatureValueDomain(
                                                max_value = 1.337, 
                                                min_value = 1.337, 
                                                original_mean = 1.337, 
                                                original_stddev = 1.337, ), 
                                            group_name = '', 
                                            index_feature_mapping = [
                                                ''
                                                ], 
                                            indices_tensor_name = '', 
                                            input_baselines = [
                                                null
                                                ], 
                                            input_tensor_name = '', 
                                            modality = '', 
                                            visualization = openapi_client.models.google_cloud_aiplatform_v1beta1_explanation_metadata_input_metadata_visualization.GoogleCloudAiplatformV1beta1ExplanationMetadataInputMetadataVisualization(
                                                clip_percent_lowerbound = 1.337, 
                                                clip_percent_upperbound = 1.337, 
                                                color_map = 'COLOR_MAP_UNSPECIFIED', 
                                                overlay_type = 'OVERLAY_TYPE_UNSPECIFIED', 
                                                polarity = 'POLARITY_UNSPECIFIED', 
                                                type = 'TYPE_UNSPECIFIED', ), )
                                        }, 
                                    latent_space_source = '', 
                                    outputs = {
                                        'key' : openapi_client.models.google_cloud_aiplatform_v1beta1_explanation_metadata_output_metadata.GoogleCloudAiplatformV1beta1ExplanationMetadataOutputMetadata(
                                            display_name_mapping_key = '', 
                                            index_display_name_mapping = null, 
                                            output_tensor_name = '', )
                                        }, ), 
                                parameters = openapi_client.models.google_cloud_aiplatform_v1beta1_explanation_parameters.GoogleCloudAiplatformV1beta1ExplanationParameters(
                                    examples = openapi_client.models.google_cloud_aiplatform_v1beta1_examples.GoogleCloudAiplatformV1beta1Examples(
                                        example_gcs_source = openapi_client.models.google_cloud_aiplatform_v1beta1_examples_example_gcs_source.GoogleCloudAiplatformV1beta1ExamplesExampleGcsSource(
                                            data_format = 'DATA_FORMAT_UNSPECIFIED', 
                                            gcs_source = openapi_client.models.google_cloud_aiplatform_v1beta1_gcs_source.GoogleCloudAiplatformV1beta1GcsSource(
                                                uris = [
                                                    ''
                                                    ], ), ), 
                                        gcs_source = openapi_client.models.google_cloud_aiplatform_v1beta1_gcs_source.GoogleCloudAiplatformV1beta1GcsSource(), 
                                        nearest_neighbor_search_config = null, 
                                        neighbor_count = 56, 
                                        presets = openapi_client.models.google_cloud_aiplatform_v1beta1_presets.GoogleCloudAiplatformV1beta1Presets(
                                            modality = 'MODALITY_UNSPECIFIED', 
                                            query = 'PRECISE', ), ), 
                                    integrated_gradients_attribution = openapi_client.models.google_cloud_aiplatform_v1beta1_integrated_gradients_attribution.GoogleCloudAiplatformV1beta1IntegratedGradientsAttribution(
                                        blur_baseline_config = openapi_client.models.google_cloud_aiplatform_v1beta1_blur_baseline_config.GoogleCloudAiplatformV1beta1BlurBaselineConfig(
                                            max_blur_sigma = 1.337, ), 
                                        smooth_grad_config = openapi_client.models.google_cloud_aiplatform_v1beta1_smooth_grad_config.GoogleCloudAiplatformV1beta1SmoothGradConfig(
                                            feature_noise_sigma = openapi_client.models.google_cloud_aiplatform_v1beta1_feature_noise_sigma.GoogleCloudAiplatformV1beta1FeatureNoiseSigma(
                                                noise_sigma = [
                                                    openapi_client.models.google_cloud_aiplatform_v1beta1_feature_noise_sigma_noise_sigma_for_feature.GoogleCloudAiplatformV1beta1FeatureNoiseSigmaNoiseSigmaForFeature(
                                                        name = '', 
                                                        sigma = 1.337, )
                                                    ], ), 
                                            noise_sigma = 1.337, 
                                            noisy_sample_count = 56, ), 
                                        step_count = 56, ), 
                                    output_indices = [
                                        null
                                        ], 
                                    sampled_shapley_attribution = openapi_client.models.google_cloud_aiplatform_v1beta1_sampled_shapley_attribution.GoogleCloudAiplatformV1beta1SampledShapleyAttribution(
                                        path_count = 56, ), 
                                    top_k = 56, 
                                    xrai_attribution = openapi_client.models.google_cloud_aiplatform_v1beta1_xrai_attribution.GoogleCloudAiplatformV1beta1XraiAttribution(
                                        step_count = 56, ), ), ), 
                            explanation_type = '', )
                        ], 
                    metadata = null, 
                    metrics = null, 
                    metrics_schema_uri = '', 
                    model_explanation = openapi_client.models.google_cloud_aiplatform_v1beta1_model_explanation.GoogleCloudAiplatformV1beta1ModelExplanation(
                        mean_attributions = [
                            openapi_client.models.google_cloud_aiplatform_v1beta1_attribution.GoogleCloudAiplatformV1beta1Attribution(
                                approximation_error = 1.337, 
                                baseline_output_value = 1.337, 
                                feature_attributions = null, 
                                instance_output_value = 1.337, 
                                output_display_name = '', 
                                output_index = [
                                    56
                                    ], 
                                output_name = '', )
                            ], ), 
                    name = '', 
                    slice_dimensions = [
                        ''
                        ], )
            )
        else:
            return GoogleCloudAiplatformV1beta1ImportModelEvaluationRequest(
        )
        """

    def testGoogleCloudAiplatformV1beta1ImportModelEvaluationRequest(self):
        """Test GoogleCloudAiplatformV1beta1ImportModelEvaluationRequest"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

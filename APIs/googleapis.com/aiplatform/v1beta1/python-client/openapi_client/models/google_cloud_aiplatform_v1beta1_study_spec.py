# coding: utf-8

"""
    Vertex AI API

    Train high-quality custom machine learning models with minimal machine learning expertise and effort.

    The version of the OpenAPI document: v1beta1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_cloud_aiplatform_v1beta1_study_spec_convex_automated_stopping_spec import GoogleCloudAiplatformV1beta1StudySpecConvexAutomatedStoppingSpec
from openapi_client.models.google_cloud_aiplatform_v1beta1_study_spec_convex_stop_config import GoogleCloudAiplatformV1beta1StudySpecConvexStopConfig
from openapi_client.models.google_cloud_aiplatform_v1beta1_study_spec_decay_curve_automated_stopping_spec import GoogleCloudAiplatformV1beta1StudySpecDecayCurveAutomatedStoppingSpec
from openapi_client.models.google_cloud_aiplatform_v1beta1_study_spec_median_automated_stopping_spec import GoogleCloudAiplatformV1beta1StudySpecMedianAutomatedStoppingSpec
from openapi_client.models.google_cloud_aiplatform_v1beta1_study_spec_metric_spec import GoogleCloudAiplatformV1beta1StudySpecMetricSpec
from openapi_client.models.google_cloud_aiplatform_v1beta1_study_spec_parameter_spec import GoogleCloudAiplatformV1beta1StudySpecParameterSpec
from openapi_client.models.google_cloud_aiplatform_v1beta1_study_spec_study_stopping_config import GoogleCloudAiplatformV1beta1StudySpecStudyStoppingConfig
from openapi_client.models.google_cloud_aiplatform_v1beta1_study_spec_transfer_learning_config import GoogleCloudAiplatformV1beta1StudySpecTransferLearningConfig
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudAiplatformV1beta1StudySpec(BaseModel):
    """
    Represents specification of a Study.
    """ # noqa: E501
    algorithm: Optional[StrictStr] = Field(default=None, description="The search algorithm specified for the Study.")
    convex_automated_stopping_spec: Optional[GoogleCloudAiplatformV1beta1StudySpecConvexAutomatedStoppingSpec] = Field(default=None, alias="convexAutomatedStoppingSpec")
    convex_stop_config: Optional[GoogleCloudAiplatformV1beta1StudySpecConvexStopConfig] = Field(default=None, alias="convexStopConfig")
    decay_curve_stopping_spec: Optional[GoogleCloudAiplatformV1beta1StudySpecDecayCurveAutomatedStoppingSpec] = Field(default=None, alias="decayCurveStoppingSpec")
    measurement_selection_type: Optional[StrictStr] = Field(default=None, description="Describe which measurement selection type will be used", alias="measurementSelectionType")
    median_automated_stopping_spec: Optional[GoogleCloudAiplatformV1beta1StudySpecMedianAutomatedStoppingSpec] = Field(default=None, alias="medianAutomatedStoppingSpec")
    metrics: Optional[List[GoogleCloudAiplatformV1beta1StudySpecMetricSpec]] = Field(default=None, description="Required. Metric specs for the Study.")
    observation_noise: Optional[StrictStr] = Field(default=None, description="The observation noise level of the study. Currently only supported by the Vertex AI Vizier service. Not supported by HyperparameterTuningJob or TrainingPipeline.", alias="observationNoise")
    parameters: Optional[List[GoogleCloudAiplatformV1beta1StudySpecParameterSpec]] = Field(default=None, description="Required. The set of parameters to tune.")
    study_stopping_config: Optional[GoogleCloudAiplatformV1beta1StudySpecStudyStoppingConfig] = Field(default=None, alias="studyStoppingConfig")
    transfer_learning_config: Optional[GoogleCloudAiplatformV1beta1StudySpecTransferLearningConfig] = Field(default=None, alias="transferLearningConfig")
    __properties: ClassVar[List[str]] = ["algorithm", "convexAutomatedStoppingSpec", "convexStopConfig", "decayCurveStoppingSpec", "measurementSelectionType", "medianAutomatedStoppingSpec", "metrics", "observationNoise", "parameters", "studyStoppingConfig", "transferLearningConfig"]

    @field_validator('algorithm')
    def algorithm_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['ALGORITHM_UNSPECIFIED', 'GRID_SEARCH', 'RANDOM_SEARCH']):
            raise ValueError("must be one of enum values ('ALGORITHM_UNSPECIFIED', 'GRID_SEARCH', 'RANDOM_SEARCH')")
        return value

    @field_validator('measurement_selection_type')
    def measurement_selection_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['MEASUREMENT_SELECTION_TYPE_UNSPECIFIED', 'LAST_MEASUREMENT', 'BEST_MEASUREMENT']):
            raise ValueError("must be one of enum values ('MEASUREMENT_SELECTION_TYPE_UNSPECIFIED', 'LAST_MEASUREMENT', 'BEST_MEASUREMENT')")
        return value

    @field_validator('observation_noise')
    def observation_noise_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['OBSERVATION_NOISE_UNSPECIFIED', 'LOW', 'HIGH']):
            raise ValueError("must be one of enum values ('OBSERVATION_NOISE_UNSPECIFIED', 'LOW', 'HIGH')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudAiplatformV1beta1StudySpec from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of convex_automated_stopping_spec
        if self.convex_automated_stopping_spec:
            _dict['convexAutomatedStoppingSpec'] = self.convex_automated_stopping_spec.to_dict()
        # override the default output from pydantic by calling `to_dict()` of convex_stop_config
        if self.convex_stop_config:
            _dict['convexStopConfig'] = self.convex_stop_config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of decay_curve_stopping_spec
        if self.decay_curve_stopping_spec:
            _dict['decayCurveStoppingSpec'] = self.decay_curve_stopping_spec.to_dict()
        # override the default output from pydantic by calling `to_dict()` of median_automated_stopping_spec
        if self.median_automated_stopping_spec:
            _dict['medianAutomatedStoppingSpec'] = self.median_automated_stopping_spec.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in metrics (list)
        _items = []
        if self.metrics:
            for _item_metrics in self.metrics:
                if _item_metrics:
                    _items.append(_item_metrics.to_dict())
            _dict['metrics'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in parameters (list)
        _items = []
        if self.parameters:
            for _item_parameters in self.parameters:
                if _item_parameters:
                    _items.append(_item_parameters.to_dict())
            _dict['parameters'] = _items
        # override the default output from pydantic by calling `to_dict()` of study_stopping_config
        if self.study_stopping_config:
            _dict['studyStoppingConfig'] = self.study_stopping_config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of transfer_learning_config
        if self.transfer_learning_config:
            _dict['transferLearningConfig'] = self.transfer_learning_config.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudAiplatformV1beta1StudySpec from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "algorithm": obj.get("algorithm"),
            "convexAutomatedStoppingSpec": GoogleCloudAiplatformV1beta1StudySpecConvexAutomatedStoppingSpec.from_dict(obj["convexAutomatedStoppingSpec"]) if obj.get("convexAutomatedStoppingSpec") is not None else None,
            "convexStopConfig": GoogleCloudAiplatformV1beta1StudySpecConvexStopConfig.from_dict(obj["convexStopConfig"]) if obj.get("convexStopConfig") is not None else None,
            "decayCurveStoppingSpec": GoogleCloudAiplatformV1beta1StudySpecDecayCurveAutomatedStoppingSpec.from_dict(obj["decayCurveStoppingSpec"]) if obj.get("decayCurveStoppingSpec") is not None else None,
            "measurementSelectionType": obj.get("measurementSelectionType"),
            "medianAutomatedStoppingSpec": GoogleCloudAiplatformV1beta1StudySpecMedianAutomatedStoppingSpec.from_dict(obj["medianAutomatedStoppingSpec"]) if obj.get("medianAutomatedStoppingSpec") is not None else None,
            "metrics": [GoogleCloudAiplatformV1beta1StudySpecMetricSpec.from_dict(_item) for _item in obj["metrics"]] if obj.get("metrics") is not None else None,
            "observationNoise": obj.get("observationNoise"),
            "parameters": [GoogleCloudAiplatformV1beta1StudySpecParameterSpec.from_dict(_item) for _item in obj["parameters"]] if obj.get("parameters") is not None else None,
            "studyStoppingConfig": GoogleCloudAiplatformV1beta1StudySpecStudyStoppingConfig.from_dict(obj["studyStoppingConfig"]) if obj.get("studyStoppingConfig") is not None else None,
            "transferLearningConfig": GoogleCloudAiplatformV1beta1StudySpecTransferLearningConfig.from_dict(obj["transferLearningConfig"]) if obj.get("transferLearningConfig") is not None else None
        })
        return _obj



# coding: utf-8

"""
    Vertex AI API

    Train high-quality custom machine learning models with minimal machine learning expertise and effort.

    The version of the OpenAPI document: v1beta1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.learning_genai_root_codey_truncator_metadata import LearningGenaiRootCodeyTruncatorMetadata
from typing import Optional, Set
from typing_extensions import Self

class LearningGenaiRootCodeyCheckpoint(BaseModel):
    """
    Describes a sample at a checkpoint for post-processing.
    """ # noqa: E501
    codey_truncator_metadata: Optional[LearningGenaiRootCodeyTruncatorMetadata] = Field(default=None, alias="codeyTruncatorMetadata")
    current_sample: Optional[StrictStr] = Field(default=None, description="Current state of the sample after truncator.", alias="currentSample")
    post_inference_step: Optional[StrictStr] = Field(default=None, description="Postprocessor run that yielded this checkpoint.", alias="postInferenceStep")
    __properties: ClassVar[List[str]] = ["codeyTruncatorMetadata", "currentSample", "postInferenceStep"]

    @field_validator('post_inference_step')
    def post_inference_step_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['STEP_POST_PROCESSING_STEP_UNSPECIFIED', 'STEP_ORIGINAL_MODEL_OUTPUT', 'STEP_MODEL_OUTPUT_DEDUPLICATION', 'STEP_STOP_SEQUENCE_TRUNCATION', 'STEP_HEURISTIC_TRUNCATION', 'STEP_WALD_TRUNCATION', 'STEP_WHITESPACE_TRUNCATION', 'STEP_FINAL_DEDUPLICATION', 'STEP_TOXICITY_CHECK', 'STEP_RECITATION_CHECK', 'STEP_RETURNED', 'STEP_WALKBACK_CORRECTION', 'STEP_SCORE_THRESHOLDING', 'STEP_MODEL_CONFIG_STOP_SEQUENCE_TRUNCATION', 'STEP_CUSTOM_STOP_SEQUENCE_TRUNCATION', 'STEP_EXPECTED_SAMPLE_SIZE']):
            raise ValueError("must be one of enum values ('STEP_POST_PROCESSING_STEP_UNSPECIFIED', 'STEP_ORIGINAL_MODEL_OUTPUT', 'STEP_MODEL_OUTPUT_DEDUPLICATION', 'STEP_STOP_SEQUENCE_TRUNCATION', 'STEP_HEURISTIC_TRUNCATION', 'STEP_WALD_TRUNCATION', 'STEP_WHITESPACE_TRUNCATION', 'STEP_FINAL_DEDUPLICATION', 'STEP_TOXICITY_CHECK', 'STEP_RECITATION_CHECK', 'STEP_RETURNED', 'STEP_WALKBACK_CORRECTION', 'STEP_SCORE_THRESHOLDING', 'STEP_MODEL_CONFIG_STOP_SEQUENCE_TRUNCATION', 'STEP_CUSTOM_STOP_SEQUENCE_TRUNCATION', 'STEP_EXPECTED_SAMPLE_SIZE')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of LearningGenaiRootCodeyCheckpoint from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of codey_truncator_metadata
        if self.codey_truncator_metadata:
            _dict['codeyTruncatorMetadata'] = self.codey_truncator_metadata.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of LearningGenaiRootCodeyCheckpoint from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "codeyTruncatorMetadata": LearningGenaiRootCodeyTruncatorMetadata.from_dict(obj["codeyTruncatorMetadata"]) if obj.get("codeyTruncatorMetadata") is not None else None,
            "currentSample": obj.get("currentSample"),
            "postInferenceStep": obj.get("postInferenceStep")
        })
        return _obj



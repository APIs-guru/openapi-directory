# coding: utf-8

"""
    Vertex AI API

    Train high-quality custom machine learning models with minimal machine learning expertise and effort.

    The version of the OpenAPI document: v1beta1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictBytes, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from openapi_client.models.google_cloud_aiplatform_v1beta1_bool_array import GoogleCloudAiplatformV1beta1BoolArray
from openapi_client.models.google_cloud_aiplatform_v1beta1_double_array import GoogleCloudAiplatformV1beta1DoubleArray
from openapi_client.models.google_cloud_aiplatform_v1beta1_feature_value_metadata import GoogleCloudAiplatformV1beta1FeatureValueMetadata
from openapi_client.models.google_cloud_aiplatform_v1beta1_int64_array import GoogleCloudAiplatformV1beta1Int64Array
from openapi_client.models.google_cloud_aiplatform_v1beta1_string_array import GoogleCloudAiplatformV1beta1StringArray
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudAiplatformV1beta1FeatureValue(BaseModel):
    """
    Value for a feature.
    """ # noqa: E501
    bool_array_value: Optional[GoogleCloudAiplatformV1beta1BoolArray] = Field(default=None, alias="boolArrayValue")
    bool_value: Optional[StrictBool] = Field(default=None, description="Bool type feature value.", alias="boolValue")
    bytes_value: Optional[Union[StrictBytes, StrictStr]] = Field(default=None, description="Bytes feature value.", alias="bytesValue")
    double_array_value: Optional[GoogleCloudAiplatformV1beta1DoubleArray] = Field(default=None, alias="doubleArrayValue")
    double_value: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Double type feature value.", alias="doubleValue")
    int64_array_value: Optional[GoogleCloudAiplatformV1beta1Int64Array] = Field(default=None, alias="int64ArrayValue")
    int64_value: Optional[StrictStr] = Field(default=None, description="Int64 feature value.", alias="int64Value")
    metadata: Optional[GoogleCloudAiplatformV1beta1FeatureValueMetadata] = None
    string_array_value: Optional[GoogleCloudAiplatformV1beta1StringArray] = Field(default=None, alias="stringArrayValue")
    string_value: Optional[StrictStr] = Field(default=None, description="String feature value.", alias="stringValue")
    __properties: ClassVar[List[str]] = ["boolArrayValue", "boolValue", "bytesValue", "doubleArrayValue", "doubleValue", "int64ArrayValue", "int64Value", "metadata", "stringArrayValue", "stringValue"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudAiplatformV1beta1FeatureValue from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of bool_array_value
        if self.bool_array_value:
            _dict['boolArrayValue'] = self.bool_array_value.to_dict()
        # override the default output from pydantic by calling `to_dict()` of double_array_value
        if self.double_array_value:
            _dict['doubleArrayValue'] = self.double_array_value.to_dict()
        # override the default output from pydantic by calling `to_dict()` of int64_array_value
        if self.int64_array_value:
            _dict['int64ArrayValue'] = self.int64_array_value.to_dict()
        # override the default output from pydantic by calling `to_dict()` of metadata
        if self.metadata:
            _dict['metadata'] = self.metadata.to_dict()
        # override the default output from pydantic by calling `to_dict()` of string_array_value
        if self.string_array_value:
            _dict['stringArrayValue'] = self.string_array_value.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudAiplatformV1beta1FeatureValue from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "boolArrayValue": GoogleCloudAiplatformV1beta1BoolArray.from_dict(obj["boolArrayValue"]) if obj.get("boolArrayValue") is not None else None,
            "boolValue": obj.get("boolValue"),
            "bytesValue": obj.get("bytesValue"),
            "doubleArrayValue": GoogleCloudAiplatformV1beta1DoubleArray.from_dict(obj["doubleArrayValue"]) if obj.get("doubleArrayValue") is not None else None,
            "doubleValue": obj.get("doubleValue"),
            "int64ArrayValue": GoogleCloudAiplatformV1beta1Int64Array.from_dict(obj["int64ArrayValue"]) if obj.get("int64ArrayValue") is not None else None,
            "int64Value": obj.get("int64Value"),
            "metadata": GoogleCloudAiplatformV1beta1FeatureValueMetadata.from_dict(obj["metadata"]) if obj.get("metadata") is not None else None,
            "stringArrayValue": GoogleCloudAiplatformV1beta1StringArray.from_dict(obj["stringArrayValue"]) if obj.get("stringArrayValue") is not None else None,
            "stringValue": obj.get("stringValue")
        })
        return _obj



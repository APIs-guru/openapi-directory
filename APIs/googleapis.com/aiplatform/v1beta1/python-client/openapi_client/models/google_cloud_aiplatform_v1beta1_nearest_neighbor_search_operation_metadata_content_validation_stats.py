# coding: utf-8

"""
    Vertex AI API

    Train high-quality custom machine learning models with minimal machine learning expertise and effort.

    The version of the OpenAPI document: v1beta1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_cloud_aiplatform_v1beta1_nearest_neighbor_search_operation_metadata_record_error import GoogleCloudAiplatformV1beta1NearestNeighborSearchOperationMetadataRecordError
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudAiplatformV1beta1NearestNeighborSearchOperationMetadataContentValidationStats(BaseModel):
    """
    GoogleCloudAiplatformV1beta1NearestNeighborSearchOperationMetadataContentValidationStats
    """ # noqa: E501
    invalid_record_count: Optional[StrictStr] = Field(default=None, description="Number of records in this file we skipped due to validate errors.", alias="invalidRecordCount")
    partial_errors: Optional[List[GoogleCloudAiplatformV1beta1NearestNeighborSearchOperationMetadataRecordError]] = Field(default=None, description="The detail information of the partial failures encountered for those invalid records that couldn't be parsed. Up to 50 partial errors will be reported.", alias="partialErrors")
    source_gcs_uri: Optional[StrictStr] = Field(default=None, description="Cloud Storage URI pointing to the original file in user's bucket.", alias="sourceGcsUri")
    valid_record_count: Optional[StrictStr] = Field(default=None, description="Number of records in this file that were successfully processed.", alias="validRecordCount")
    __properties: ClassVar[List[str]] = ["invalidRecordCount", "partialErrors", "sourceGcsUri", "validRecordCount"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudAiplatformV1beta1NearestNeighborSearchOperationMetadataContentValidationStats from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in partial_errors (list)
        _items = []
        if self.partial_errors:
            for _item_partial_errors in self.partial_errors:
                if _item_partial_errors:
                    _items.append(_item_partial_errors.to_dict())
            _dict['partialErrors'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudAiplatformV1beta1NearestNeighborSearchOperationMetadataContentValidationStats from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "invalidRecordCount": obj.get("invalidRecordCount"),
            "partialErrors": [GoogleCloudAiplatformV1beta1NearestNeighborSearchOperationMetadataRecordError.from_dict(_item) for _item in obj["partialErrors"]] if obj.get("partialErrors") is not None else None,
            "sourceGcsUri": obj.get("sourceGcsUri"),
            "validRecordCount": obj.get("validRecordCount")
        })
        return _obj



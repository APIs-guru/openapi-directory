# coding: utf-8

"""
    Vertex AI API

    Train high-quality custom machine learning models with minimal machine learning expertise and effort.

    The version of the OpenAPI document: v1beta1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_cloud_aiplatform_v1beta1_custom_job_spec import GoogleCloudAiplatformV1beta1CustomJobSpec
from openapi_client.models.google_cloud_aiplatform_v1beta1_study_spec import GoogleCloudAiplatformV1beta1StudySpec
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudAiplatformV1beta1SchemaTrainingjobDefinitionHyperparameterTuningJobSpec(BaseModel):
    """
    GoogleCloudAiplatformV1beta1SchemaTrainingjobDefinitionHyperparameterTuningJobSpec
    """ # noqa: E501
    max_failed_trial_count: Optional[StrictInt] = Field(default=None, description="The number of failed Trials that need to be seen before failing the HyperparameterTuningJob. If set to 0, Vertex AI decides how many Trials must fail before the whole job fails.", alias="maxFailedTrialCount")
    max_trial_count: Optional[StrictInt] = Field(default=None, description="The desired total number of Trials.", alias="maxTrialCount")
    parallel_trial_count: Optional[StrictInt] = Field(default=None, description="The desired number of Trials to run in parallel.", alias="parallelTrialCount")
    study_spec: Optional[GoogleCloudAiplatformV1beta1StudySpec] = Field(default=None, alias="studySpec")
    trial_job_spec: Optional[GoogleCloudAiplatformV1beta1CustomJobSpec] = Field(default=None, alias="trialJobSpec")
    __properties: ClassVar[List[str]] = ["maxFailedTrialCount", "maxTrialCount", "parallelTrialCount", "studySpec", "trialJobSpec"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudAiplatformV1beta1SchemaTrainingjobDefinitionHyperparameterTuningJobSpec from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of study_spec
        if self.study_spec:
            _dict['studySpec'] = self.study_spec.to_dict()
        # override the default output from pydantic by calling `to_dict()` of trial_job_spec
        if self.trial_job_spec:
            _dict['trialJobSpec'] = self.trial_job_spec.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudAiplatformV1beta1SchemaTrainingjobDefinitionHyperparameterTuningJobSpec from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "maxFailedTrialCount": obj.get("maxFailedTrialCount"),
            "maxTrialCount": obj.get("maxTrialCount"),
            "parallelTrialCount": obj.get("parallelTrialCount"),
            "studySpec": GoogleCloudAiplatformV1beta1StudySpec.from_dict(obj["studySpec"]) if obj.get("studySpec") is not None else None,
            "trialJobSpec": GoogleCloudAiplatformV1beta1CustomJobSpec.from_dict(obj["trialJobSpec"]) if obj.get("trialJobSpec") is not None else None
        })
        return _obj



# coding: utf-8

"""
    Vertex AI API

    Train high-quality custom machine learning models with minimal machine learning expertise and effort.

    The version of the OpenAPI document: v1beta1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.cloud_ai_nl_llm_proto_service_candidate import CloudAiNlLlmProtoServiceCandidate
from openapi_client.models.cloud_ai_nl_llm_proto_service_fact import CloudAiNlLlmProtoServiceFact
from openapi_client.models.cloud_ai_nl_llm_proto_service_message_metadata import CloudAiNlLlmProtoServiceMessageMetadata
from openapi_client.models.cloud_ai_nl_llm_proto_service_prompt_feedback import CloudAiNlLlmProtoServicePromptFeedback
from openapi_client.models.cloud_ai_nl_llm_proto_service_usage_metadata import CloudAiNlLlmProtoServiceUsageMetadata
from openapi_client.models.intelligence_cloud_automl_xps_reporting_metrics import IntelligenceCloudAutomlXpsReportingMetrics
from typing import Optional, Set
from typing_extensions import Self

class CloudAiNlLlmProtoServiceGenerateMultiModalResponse(BaseModel):
    """
    CloudAiNlLlmProtoServiceGenerateMultiModalResponse
    """ # noqa: E501
    candidates: Optional[List[CloudAiNlLlmProtoServiceCandidate]] = Field(default=None, description="Possible candidate responses to the conversation up until this point.")
    debug_metadata: Optional[CloudAiNlLlmProtoServiceMessageMetadata] = Field(default=None, alias="debugMetadata")
    facts: Optional[List[CloudAiNlLlmProtoServiceFact]] = Field(default=None, description="External facts retrieved for factuality/grounding.")
    prompt_feedback: Optional[CloudAiNlLlmProtoServicePromptFeedback] = Field(default=None, alias="promptFeedback")
    reporting_metrics: Optional[IntelligenceCloudAutomlXpsReportingMetrics] = Field(default=None, alias="reportingMetrics")
    usage_metadata: Optional[CloudAiNlLlmProtoServiceUsageMetadata] = Field(default=None, alias="usageMetadata")
    __properties: ClassVar[List[str]] = ["candidates", "debugMetadata", "facts", "promptFeedback", "reportingMetrics", "usageMetadata"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CloudAiNlLlmProtoServiceGenerateMultiModalResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in candidates (list)
        _items = []
        if self.candidates:
            for _item_candidates in self.candidates:
                if _item_candidates:
                    _items.append(_item_candidates.to_dict())
            _dict['candidates'] = _items
        # override the default output from pydantic by calling `to_dict()` of debug_metadata
        if self.debug_metadata:
            _dict['debugMetadata'] = self.debug_metadata.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in facts (list)
        _items = []
        if self.facts:
            for _item_facts in self.facts:
                if _item_facts:
                    _items.append(_item_facts.to_dict())
            _dict['facts'] = _items
        # override the default output from pydantic by calling `to_dict()` of prompt_feedback
        if self.prompt_feedback:
            _dict['promptFeedback'] = self.prompt_feedback.to_dict()
        # override the default output from pydantic by calling `to_dict()` of reporting_metrics
        if self.reporting_metrics:
            _dict['reportingMetrics'] = self.reporting_metrics.to_dict()
        # override the default output from pydantic by calling `to_dict()` of usage_metadata
        if self.usage_metadata:
            _dict['usageMetadata'] = self.usage_metadata.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CloudAiNlLlmProtoServiceGenerateMultiModalResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "candidates": [CloudAiNlLlmProtoServiceCandidate.from_dict(_item) for _item in obj["candidates"]] if obj.get("candidates") is not None else None,
            "debugMetadata": CloudAiNlLlmProtoServiceMessageMetadata.from_dict(obj["debugMetadata"]) if obj.get("debugMetadata") is not None else None,
            "facts": [CloudAiNlLlmProtoServiceFact.from_dict(_item) for _item in obj["facts"]] if obj.get("facts") is not None else None,
            "promptFeedback": CloudAiNlLlmProtoServicePromptFeedback.from_dict(obj["promptFeedback"]) if obj.get("promptFeedback") is not None else None,
            "reportingMetrics": IntelligenceCloudAutomlXpsReportingMetrics.from_dict(obj["reportingMetrics"]) if obj.get("reportingMetrics") is not None else None,
            "usageMetadata": CloudAiNlLlmProtoServiceUsageMetadata.from_dict(obj["usageMetadata"]) if obj.get("usageMetadata") is not None else None
        })
        return _obj



# coding: utf-8

"""
    Vertex AI API

    Train high-quality custom machine learning models with minimal machine learning expertise and effort.

    The version of the OpenAPI document: v1beta1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBytes, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from openapi_client.models.google_cloud_aiplatform_v1beta1_tensorboard_time_series_metadata import GoogleCloudAiplatformV1beta1TensorboardTimeSeriesMetadata
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudAiplatformV1beta1TensorboardTimeSeries(BaseModel):
    """
    TensorboardTimeSeries maps to times series produced in training runs
    """ # noqa: E501
    create_time: Optional[StrictStr] = Field(default=None, description="Output only. Timestamp when this TensorboardTimeSeries was created.", alias="createTime")
    description: Optional[StrictStr] = Field(default=None, description="Description of this TensorboardTimeSeries.")
    display_name: Optional[StrictStr] = Field(default=None, description="Required. User provided name of this TensorboardTimeSeries. This value should be unique among all TensorboardTimeSeries resources belonging to the same TensorboardRun resource (parent resource).", alias="displayName")
    etag: Optional[StrictStr] = Field(default=None, description="Used to perform a consistent read-modify-write updates. If not set, a blind \"overwrite\" update happens.")
    metadata: Optional[GoogleCloudAiplatformV1beta1TensorboardTimeSeriesMetadata] = None
    name: Optional[StrictStr] = Field(default=None, description="Output only. Name of the TensorboardTimeSeries.")
    plugin_data: Optional[Union[StrictBytes, StrictStr]] = Field(default=None, description="Data of the current plugin, with the size limited to 65KB.", alias="pluginData")
    plugin_name: Optional[StrictStr] = Field(default=None, description="Immutable. Name of the plugin this time series pertain to. Such as Scalar, Tensor, Blob", alias="pluginName")
    update_time: Optional[StrictStr] = Field(default=None, description="Output only. Timestamp when this TensorboardTimeSeries was last updated.", alias="updateTime")
    value_type: Optional[StrictStr] = Field(default=None, description="Required. Immutable. Type of TensorboardTimeSeries value.", alias="valueType")
    __properties: ClassVar[List[str]] = ["createTime", "description", "displayName", "etag", "metadata", "name", "pluginData", "pluginName", "updateTime", "valueType"]

    @field_validator('value_type')
    def value_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['VALUE_TYPE_UNSPECIFIED', 'SCALAR', 'TENSOR', 'BLOB_SEQUENCE']):
            raise ValueError("must be one of enum values ('VALUE_TYPE_UNSPECIFIED', 'SCALAR', 'TENSOR', 'BLOB_SEQUENCE')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudAiplatformV1beta1TensorboardTimeSeries from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "create_time",
            "name",
            "update_time",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of metadata
        if self.metadata:
            _dict['metadata'] = self.metadata.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudAiplatformV1beta1TensorboardTimeSeries from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "createTime": obj.get("createTime"),
            "description": obj.get("description"),
            "displayName": obj.get("displayName"),
            "etag": obj.get("etag"),
            "metadata": GoogleCloudAiplatformV1beta1TensorboardTimeSeriesMetadata.from_dict(obj["metadata"]) if obj.get("metadata") is not None else None,
            "name": obj.get("name"),
            "pluginData": obj.get("pluginData"),
            "pluginName": obj.get("pluginName"),
            "updateTime": obj.get("updateTime"),
            "valueType": obj.get("valueType")
        })
        return _obj



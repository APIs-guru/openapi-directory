# coding: utf-8

"""
    Vertex AI API

    Train high-quality custom machine learning models with minimal machine learning expertise and effort.

    The version of the OpenAPI document: v1beta1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_cloud_aiplatform_v1beta1_machine_spec import GoogleCloudAiplatformV1beta1MachineSpec
from openapi_client.models.google_cloud_aiplatform_v1beta1_network_spec import GoogleCloudAiplatformV1beta1NetworkSpec
from openapi_client.models.google_cloud_aiplatform_v1beta1_notebook_euc_config import GoogleCloudAiplatformV1beta1NotebookEucConfig
from openapi_client.models.google_cloud_aiplatform_v1beta1_notebook_idle_shutdown_config import GoogleCloudAiplatformV1beta1NotebookIdleShutdownConfig
from openapi_client.models.google_cloud_aiplatform_v1beta1_notebook_reservation_affinity import GoogleCloudAiplatformV1beta1NotebookReservationAffinity
from openapi_client.models.google_cloud_aiplatform_v1beta1_persistent_disk_spec import GoogleCloudAiplatformV1beta1PersistentDiskSpec
from openapi_client.models.google_cloud_aiplatform_v1beta1_shielded_vm_config import GoogleCloudAiplatformV1beta1ShieldedVmConfig
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudAiplatformV1beta1NotebookRuntimeTemplate(BaseModel):
    """
    A template that specifies runtime configurations such as machine type, runtime version, network configurations, etc. Multiple runtimes can be created from a runtime template.
    """ # noqa: E501
    create_time: Optional[StrictStr] = Field(default=None, description="Output only. Timestamp when this NotebookRuntimeTemplate was created.", alias="createTime")
    data_persistent_disk_spec: Optional[GoogleCloudAiplatformV1beta1PersistentDiskSpec] = Field(default=None, alias="dataPersistentDiskSpec")
    description: Optional[StrictStr] = Field(default=None, description="The description of the NotebookRuntimeTemplate.")
    display_name: Optional[StrictStr] = Field(default=None, description="Required. The display name of the NotebookRuntimeTemplate. The name can be up to 128 characters long and can consist of any UTF-8 characters.", alias="displayName")
    etag: Optional[StrictStr] = Field(default=None, description="Used to perform consistent read-modify-write updates. If not set, a blind \"overwrite\" update happens.")
    euc_config: Optional[GoogleCloudAiplatformV1beta1NotebookEucConfig] = Field(default=None, alias="eucConfig")
    idle_shutdown_config: Optional[GoogleCloudAiplatformV1beta1NotebookIdleShutdownConfig] = Field(default=None, alias="idleShutdownConfig")
    is_default: Optional[StrictBool] = Field(default=None, description="Output only. The default template to use if not specified.", alias="isDefault")
    labels: Optional[Dict[str, StrictStr]] = Field(default=None, description="The labels with user-defined metadata to organize the NotebookRuntimeTemplates. Label keys and values can be no longer than 64 characters (Unicode codepoints), can only contain lowercase letters, numeric characters, underscores and dashes. International characters are allowed. See https://goo.gl/xmQnxf for more information and examples of labels.")
    machine_spec: Optional[GoogleCloudAiplatformV1beta1MachineSpec] = Field(default=None, alias="machineSpec")
    name: Optional[StrictStr] = Field(default=None, description="Output only. The resource name of the NotebookRuntimeTemplate.")
    network_spec: Optional[GoogleCloudAiplatformV1beta1NetworkSpec] = Field(default=None, alias="networkSpec")
    network_tags: Optional[List[StrictStr]] = Field(default=None, description="Optional. The Compute Engine tags to add to runtime (see [Tagging instances](https://cloud.google.com/vpc/docs/add-remove-network-tags)).", alias="networkTags")
    notebook_runtime_type: Optional[StrictStr] = Field(default=None, description="Optional. Immutable. The type of the notebook runtime template.", alias="notebookRuntimeType")
    reservation_affinity: Optional[GoogleCloudAiplatformV1beta1NotebookReservationAffinity] = Field(default=None, alias="reservationAffinity")
    service_account: Optional[StrictStr] = Field(default=None, description="The service account that the runtime workload runs as. You can use any service account within the same project, but you must have the service account user permission to use the instance. If not specified, the [Compute Engine default service account](https://cloud.google.com/compute/docs/access/service-accounts#default_service_account) is used.", alias="serviceAccount")
    shielded_vm_config: Optional[GoogleCloudAiplatformV1beta1ShieldedVmConfig] = Field(default=None, alias="shieldedVmConfig")
    update_time: Optional[StrictStr] = Field(default=None, description="Output only. Timestamp when this NotebookRuntimeTemplate was most recently updated.", alias="updateTime")
    __properties: ClassVar[List[str]] = ["createTime", "dataPersistentDiskSpec", "description", "displayName", "etag", "eucConfig", "idleShutdownConfig", "isDefault", "labels", "machineSpec", "name", "networkSpec", "networkTags", "notebookRuntimeType", "reservationAffinity", "serviceAccount", "shieldedVmConfig", "updateTime"]

    @field_validator('notebook_runtime_type')
    def notebook_runtime_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['NOTEBOOK_RUNTIME_TYPE_UNSPECIFIED', 'USER_DEFINED', 'ONE_CLICK']):
            raise ValueError("must be one of enum values ('NOTEBOOK_RUNTIME_TYPE_UNSPECIFIED', 'USER_DEFINED', 'ONE_CLICK')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudAiplatformV1beta1NotebookRuntimeTemplate from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "create_time",
            "is_default",
            "name",
            "update_time",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of data_persistent_disk_spec
        if self.data_persistent_disk_spec:
            _dict['dataPersistentDiskSpec'] = self.data_persistent_disk_spec.to_dict()
        # override the default output from pydantic by calling `to_dict()` of euc_config
        if self.euc_config:
            _dict['eucConfig'] = self.euc_config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of idle_shutdown_config
        if self.idle_shutdown_config:
            _dict['idleShutdownConfig'] = self.idle_shutdown_config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of machine_spec
        if self.machine_spec:
            _dict['machineSpec'] = self.machine_spec.to_dict()
        # override the default output from pydantic by calling `to_dict()` of network_spec
        if self.network_spec:
            _dict['networkSpec'] = self.network_spec.to_dict()
        # override the default output from pydantic by calling `to_dict()` of reservation_affinity
        if self.reservation_affinity:
            _dict['reservationAffinity'] = self.reservation_affinity.to_dict()
        # override the default output from pydantic by calling `to_dict()` of shielded_vm_config
        if self.shielded_vm_config:
            _dict['shieldedVmConfig'] = self.shielded_vm_config.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudAiplatformV1beta1NotebookRuntimeTemplate from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "createTime": obj.get("createTime"),
            "dataPersistentDiskSpec": GoogleCloudAiplatformV1beta1PersistentDiskSpec.from_dict(obj["dataPersistentDiskSpec"]) if obj.get("dataPersistentDiskSpec") is not None else None,
            "description": obj.get("description"),
            "displayName": obj.get("displayName"),
            "etag": obj.get("etag"),
            "eucConfig": GoogleCloudAiplatformV1beta1NotebookEucConfig.from_dict(obj["eucConfig"]) if obj.get("eucConfig") is not None else None,
            "idleShutdownConfig": GoogleCloudAiplatformV1beta1NotebookIdleShutdownConfig.from_dict(obj["idleShutdownConfig"]) if obj.get("idleShutdownConfig") is not None else None,
            "isDefault": obj.get("isDefault"),
            "labels": obj.get("labels"),
            "machineSpec": GoogleCloudAiplatformV1beta1MachineSpec.from_dict(obj["machineSpec"]) if obj.get("machineSpec") is not None else None,
            "name": obj.get("name"),
            "networkSpec": GoogleCloudAiplatformV1beta1NetworkSpec.from_dict(obj["networkSpec"]) if obj.get("networkSpec") is not None else None,
            "networkTags": obj.get("networkTags"),
            "notebookRuntimeType": obj.get("notebookRuntimeType"),
            "reservationAffinity": GoogleCloudAiplatformV1beta1NotebookReservationAffinity.from_dict(obj["reservationAffinity"]) if obj.get("reservationAffinity") is not None else None,
            "serviceAccount": obj.get("serviceAccount"),
            "shieldedVmConfig": GoogleCloudAiplatformV1beta1ShieldedVmConfig.from_dict(obj["shieldedVmConfig"]) if obj.get("shieldedVmConfig") is not None else None,
            "updateTime": obj.get("updateTime")
        })
        return _obj



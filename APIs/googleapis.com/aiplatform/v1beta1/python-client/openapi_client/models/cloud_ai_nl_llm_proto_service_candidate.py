# coding: utf-8

"""
    Vertex AI API

    Train high-quality custom machine learning models with minimal machine learning expertise and effort.

    The version of the OpenAPI document: v1beta1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.cloud_ai_nl_llm_proto_service_citation_metadata import CloudAiNlLlmProtoServiceCitationMetadata
from openapi_client.models.cloud_ai_nl_llm_proto_service_content import CloudAiNlLlmProtoServiceContent
from openapi_client.models.cloud_ai_nl_llm_proto_service_safety_rating import CloudAiNlLlmProtoServiceSafetyRating
from openapi_client.models.learning_genai_root_grounding_metadata import LearningGenaiRootGroundingMetadata
from typing import Optional, Set
from typing_extensions import Self

class CloudAiNlLlmProtoServiceCandidate(BaseModel):
    """
    CloudAiNlLlmProtoServiceCandidate
    """ # noqa: E501
    citation_metadata: Optional[CloudAiNlLlmProtoServiceCitationMetadata] = Field(default=None, alias="citationMetadata")
    content: Optional[CloudAiNlLlmProtoServiceContent] = None
    finish_message: Optional[StrictStr] = Field(default=None, description="A string that describes the filtering behavior in more detail. Only filled when reason is set.", alias="finishMessage")
    finish_reason: Optional[StrictStr] = Field(default=None, description="The reason why the model stopped generating tokens.", alias="finishReason")
    grounding_metadata: Optional[LearningGenaiRootGroundingMetadata] = Field(default=None, alias="groundingMetadata")
    index: Optional[StrictInt] = Field(default=None, description="Index of the candidate.")
    safety_ratings: Optional[List[CloudAiNlLlmProtoServiceSafetyRating]] = Field(default=None, description="Safety ratings of the generated content.", alias="safetyRatings")
    __properties: ClassVar[List[str]] = ["citationMetadata", "content", "finishMessage", "finishReason", "groundingMetadata", "index", "safetyRatings"]

    @field_validator('finish_reason')
    def finish_reason_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['FINISH_REASON_UNSPECIFIED', 'FINISH_REASON_STOP', 'FINISH_REASON_MAX_TOKENS', 'FINISH_REASON_SAFETY', 'FINISH_REASON_RECITATION', 'FINISH_REASON_OTHER']):
            raise ValueError("must be one of enum values ('FINISH_REASON_UNSPECIFIED', 'FINISH_REASON_STOP', 'FINISH_REASON_MAX_TOKENS', 'FINISH_REASON_SAFETY', 'FINISH_REASON_RECITATION', 'FINISH_REASON_OTHER')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CloudAiNlLlmProtoServiceCandidate from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of citation_metadata
        if self.citation_metadata:
            _dict['citationMetadata'] = self.citation_metadata.to_dict()
        # override the default output from pydantic by calling `to_dict()` of content
        if self.content:
            _dict['content'] = self.content.to_dict()
        # override the default output from pydantic by calling `to_dict()` of grounding_metadata
        if self.grounding_metadata:
            _dict['groundingMetadata'] = self.grounding_metadata.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in safety_ratings (list)
        _items = []
        if self.safety_ratings:
            for _item_safety_ratings in self.safety_ratings:
                if _item_safety_ratings:
                    _items.append(_item_safety_ratings.to_dict())
            _dict['safetyRatings'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CloudAiNlLlmProtoServiceCandidate from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "citationMetadata": CloudAiNlLlmProtoServiceCitationMetadata.from_dict(obj["citationMetadata"]) if obj.get("citationMetadata") is not None else None,
            "content": CloudAiNlLlmProtoServiceContent.from_dict(obj["content"]) if obj.get("content") is not None else None,
            "finishMessage": obj.get("finishMessage"),
            "finishReason": obj.get("finishReason"),
            "groundingMetadata": LearningGenaiRootGroundingMetadata.from_dict(obj["groundingMetadata"]) if obj.get("groundingMetadata") is not None else None,
            "index": obj.get("index"),
            "safetyRatings": [CloudAiNlLlmProtoServiceSafetyRating.from_dict(_item) for _item in obj["safetyRatings"]] if obj.get("safetyRatings") is not None else None
        })
        return _obj



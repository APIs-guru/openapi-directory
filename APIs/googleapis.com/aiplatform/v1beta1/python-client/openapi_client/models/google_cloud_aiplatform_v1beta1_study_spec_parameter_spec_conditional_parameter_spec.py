# coding: utf-8

"""
    Vertex AI API

    Train high-quality custom machine learning models with minimal machine learning expertise and effort.

    The version of the OpenAPI document: v1beta1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_cloud_aiplatform_v1beta1_study_spec_parameter_spec_conditional_parameter_spec_categorical_value_condition import GoogleCloudAiplatformV1beta1StudySpecParameterSpecConditionalParameterSpecCategoricalValueCondition
from openapi_client.models.google_cloud_aiplatform_v1beta1_study_spec_parameter_spec_conditional_parameter_spec_discrete_value_condition import GoogleCloudAiplatformV1beta1StudySpecParameterSpecConditionalParameterSpecDiscreteValueCondition
from openapi_client.models.google_cloud_aiplatform_v1beta1_study_spec_parameter_spec_conditional_parameter_spec_int_value_condition import GoogleCloudAiplatformV1beta1StudySpecParameterSpecConditionalParameterSpecIntValueCondition
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudAiplatformV1beta1StudySpecParameterSpecConditionalParameterSpec(BaseModel):
    """
    Represents a parameter spec with condition from its parent parameter.
    """ # noqa: E501
    parameter_spec: Optional[GoogleCloudAiplatformV1beta1StudySpecParameterSpec] = Field(default=None, alias="parameterSpec")
    parent_categorical_values: Optional[GoogleCloudAiplatformV1beta1StudySpecParameterSpecConditionalParameterSpecCategoricalValueCondition] = Field(default=None, alias="parentCategoricalValues")
    parent_discrete_values: Optional[GoogleCloudAiplatformV1beta1StudySpecParameterSpecConditionalParameterSpecDiscreteValueCondition] = Field(default=None, alias="parentDiscreteValues")
    parent_int_values: Optional[GoogleCloudAiplatformV1beta1StudySpecParameterSpecConditionalParameterSpecIntValueCondition] = Field(default=None, alias="parentIntValues")
    __properties: ClassVar[List[str]] = ["parameterSpec", "parentCategoricalValues", "parentDiscreteValues", "parentIntValues"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudAiplatformV1beta1StudySpecParameterSpecConditionalParameterSpec from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of parameter_spec
        if self.parameter_spec:
            _dict['parameterSpec'] = self.parameter_spec.to_dict()
        # override the default output from pydantic by calling `to_dict()` of parent_categorical_values
        if self.parent_categorical_values:
            _dict['parentCategoricalValues'] = self.parent_categorical_values.to_dict()
        # override the default output from pydantic by calling `to_dict()` of parent_discrete_values
        if self.parent_discrete_values:
            _dict['parentDiscreteValues'] = self.parent_discrete_values.to_dict()
        # override the default output from pydantic by calling `to_dict()` of parent_int_values
        if self.parent_int_values:
            _dict['parentIntValues'] = self.parent_int_values.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudAiplatformV1beta1StudySpecParameterSpecConditionalParameterSpec from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "parameterSpec": GoogleCloudAiplatformV1beta1StudySpecParameterSpec.from_dict(obj["parameterSpec"]) if obj.get("parameterSpec") is not None else None,
            "parentCategoricalValues": GoogleCloudAiplatformV1beta1StudySpecParameterSpecConditionalParameterSpecCategoricalValueCondition.from_dict(obj["parentCategoricalValues"]) if obj.get("parentCategoricalValues") is not None else None,
            "parentDiscreteValues": GoogleCloudAiplatformV1beta1StudySpecParameterSpecConditionalParameterSpecDiscreteValueCondition.from_dict(obj["parentDiscreteValues"]) if obj.get("parentDiscreteValues") is not None else None,
            "parentIntValues": GoogleCloudAiplatformV1beta1StudySpecParameterSpecConditionalParameterSpecIntValueCondition.from_dict(obj["parentIntValues"]) if obj.get("parentIntValues") is not None else None
        })
        return _obj

from openapi_client.models.google_cloud_aiplatform_v1beta1_study_spec_parameter_spec import GoogleCloudAiplatformV1beta1StudySpecParameterSpec
# TODO: Rewrite to not use raise_errors
GoogleCloudAiplatformV1beta1StudySpecParameterSpecConditionalParameterSpec.model_rebuild(raise_errors=False)


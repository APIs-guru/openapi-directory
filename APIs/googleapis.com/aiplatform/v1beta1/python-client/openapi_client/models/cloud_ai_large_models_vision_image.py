# coding: utf-8

"""
    Vertex AI API

    Train high-quality custom machine learning models with minimal machine learning expertise and effort.

    The version of the OpenAPI document: v1beta1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBytes, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from openapi_client.models.cloud_ai_large_models_vision_image_rai_scores import CloudAiLargeModelsVisionImageRAIScores
from openapi_client.models.cloud_ai_large_models_vision_rai_info import CloudAiLargeModelsVisionRaiInfo
from openapi_client.models.cloud_ai_large_models_vision_semantic_filter_response import CloudAiLargeModelsVisionSemanticFilterResponse
from typing import Optional, Set
from typing_extensions import Self

class CloudAiLargeModelsVisionImage(BaseModel):
    """
    Image.
    """ # noqa: E501
    encoding: Optional[StrictStr] = Field(default=None, description="Image encoding, encoded as \"image/png\" or \"image/jpg\".")
    image: Optional[Union[StrictBytes, StrictStr]] = Field(default=None, description="Raw bytes.")
    image_rai_scores: Optional[CloudAiLargeModelsVisionImageRAIScores] = Field(default=None, alias="imageRaiScores")
    rai_info: Optional[CloudAiLargeModelsVisionRaiInfo] = Field(default=None, alias="raiInfo")
    semantic_filter_response: Optional[CloudAiLargeModelsVisionSemanticFilterResponse] = Field(default=None, alias="semanticFilterResponse")
    text: Optional[StrictStr] = Field(default=None, description="Text/Expanded text input for imagen.")
    uri: Optional[StrictStr] = Field(default=None, description="Path to another storage (typically Google Cloud Storage).")
    __properties: ClassVar[List[str]] = ["encoding", "image", "imageRaiScores", "raiInfo", "semanticFilterResponse", "text", "uri"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CloudAiLargeModelsVisionImage from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of image_rai_scores
        if self.image_rai_scores:
            _dict['imageRaiScores'] = self.image_rai_scores.to_dict()
        # override the default output from pydantic by calling `to_dict()` of rai_info
        if self.rai_info:
            _dict['raiInfo'] = self.rai_info.to_dict()
        # override the default output from pydantic by calling `to_dict()` of semantic_filter_response
        if self.semantic_filter_response:
            _dict['semanticFilterResponse'] = self.semantic_filter_response.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CloudAiLargeModelsVisionImage from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "encoding": obj.get("encoding"),
            "image": obj.get("image"),
            "imageRaiScores": CloudAiLargeModelsVisionImageRAIScores.from_dict(obj["imageRaiScores"]) if obj.get("imageRaiScores") is not None else None,
            "raiInfo": CloudAiLargeModelsVisionRaiInfo.from_dict(obj["raiInfo"]) if obj.get("raiInfo") is not None else None,
            "semanticFilterResponse": CloudAiLargeModelsVisionSemanticFilterResponse.from_dict(obj["semanticFilterResponse"]) if obj.get("semanticFilterResponse") is not None else None,
            "text": obj.get("text"),
            "uri": obj.get("uri")
        })
        return _obj



# coding: utf-8

"""
    Vertex AI API

    Train high-quality custom machine learning models with minimal machine learning expertise and effort.

    The version of the OpenAPI document: v1beta1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.language_labs_aida_trust_recitation_proto_segment_result import LanguageLabsAidaTrustRecitationProtoSegmentResult
from typing import Optional, Set
from typing_extensions import Self

class LanguageLabsAidaTrustRecitationProtoStreamRecitationResult(BaseModel):
    """
    The recitation result for one stream input
    """ # noqa: E501
    dynamic_segment_results: Optional[List[LanguageLabsAidaTrustRecitationProtoSegmentResult]] = Field(default=None, description="The recitation result against the given dynamic data source.", alias="dynamicSegmentResults")
    fully_checked_text_index: Optional[StrictInt] = Field(default=None, description="Last index of input text fully checked for recitation in the entire streaming context. Would return `-1` if no Input was checked for recitation.", alias="fullyCheckedTextIndex")
    recitation_action: Optional[StrictStr] = Field(default=None, description="The recitation action for one given input. When its segments contain different actions, the overall action will be returned in the precedence of BLOCK > CITE > NO_ACTION.", alias="recitationAction")
    training_segment_results: Optional[List[LanguageLabsAidaTrustRecitationProtoSegmentResult]] = Field(default=None, description="The recitation result against model training data.", alias="trainingSegmentResults")
    __properties: ClassVar[List[str]] = ["dynamicSegmentResults", "fullyCheckedTextIndex", "recitationAction", "trainingSegmentResults"]

    @field_validator('recitation_action')
    def recitation_action_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['ACTION_UNSPECIFIED', 'CITE', 'BLOCK', 'NO_ACTION', 'EXEMPT_FOUND_IN_PROMPT']):
            raise ValueError("must be one of enum values ('ACTION_UNSPECIFIED', 'CITE', 'BLOCK', 'NO_ACTION', 'EXEMPT_FOUND_IN_PROMPT')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of LanguageLabsAidaTrustRecitationProtoStreamRecitationResult from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in dynamic_segment_results (list)
        _items = []
        if self.dynamic_segment_results:
            for _item_dynamic_segment_results in self.dynamic_segment_results:
                if _item_dynamic_segment_results:
                    _items.append(_item_dynamic_segment_results.to_dict())
            _dict['dynamicSegmentResults'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in training_segment_results (list)
        _items = []
        if self.training_segment_results:
            for _item_training_segment_results in self.training_segment_results:
                if _item_training_segment_results:
                    _items.append(_item_training_segment_results.to_dict())
            _dict['trainingSegmentResults'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of LanguageLabsAidaTrustRecitationProtoStreamRecitationResult from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "dynamicSegmentResults": [LanguageLabsAidaTrustRecitationProtoSegmentResult.from_dict(_item) for _item in obj["dynamicSegmentResults"]] if obj.get("dynamicSegmentResults") is not None else None,
            "fullyCheckedTextIndex": obj.get("fullyCheckedTextIndex"),
            "recitationAction": obj.get("recitationAction"),
            "trainingSegmentResults": [LanguageLabsAidaTrustRecitationProtoSegmentResult.from_dict(_item) for _item in obj["trainingSegmentResults"]] if obj.get("trainingSegmentResults") is not None else None
        })
        return _obj



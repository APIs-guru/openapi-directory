# coding: utf-8

"""
    Vertex AI API

    Train high-quality custom machine learning models with minimal machine learning expertise and effort.

    The version of the OpenAPI document: v1beta1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_cloud_aiplatform_v1beta1_internal_os_service_state_instance import GoogleCloudAiplatformV1beta1InternalOsServiceStateInstance
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudAiplatformV1beta1ReportRuntimeEventRequest(BaseModel):
    """
    Request message for NotebookInternalService.ReportRuntimeEvent.
    """ # noqa: E501
    event_details: Optional[Dict[str, StrictStr]] = Field(default=None, description="Optional. The details of the request for debug.", alias="eventDetails")
    event_type: Optional[StrictStr] = Field(default=None, description="Required. The type of the event.", alias="eventType")
    internal_os_service_state_instance: Optional[List[GoogleCloudAiplatformV1beta1InternalOsServiceStateInstance]] = Field(default=None, description="The details of the internal os service states.", alias="internalOsServiceStateInstance")
    internal_os_service_state_instances: Optional[List[GoogleCloudAiplatformV1beta1InternalOsServiceStateInstance]] = Field(default=None, description="Optional. The details of the internal os service states.", alias="internalOsServiceStateInstances")
    vm_token: Optional[StrictStr] = Field(default=None, description="Required. The VM identity token (a JWT) for authenticating the VM. https://cloud.google.com/compute/docs/instances/verifying-instance-identity", alias="vmToken")
    __properties: ClassVar[List[str]] = ["eventDetails", "eventType", "internalOsServiceStateInstance", "internalOsServiceStateInstances", "vmToken"]

    @field_validator('event_type')
    def event_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['EVENT_TYPE_UNSPECIFIED', 'HEARTBEAT', 'IDLE']):
            raise ValueError("must be one of enum values ('EVENT_TYPE_UNSPECIFIED', 'HEARTBEAT', 'IDLE')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudAiplatformV1beta1ReportRuntimeEventRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in internal_os_service_state_instance (list)
        _items = []
        if self.internal_os_service_state_instance:
            for _item_internal_os_service_state_instance in self.internal_os_service_state_instance:
                if _item_internal_os_service_state_instance:
                    _items.append(_item_internal_os_service_state_instance.to_dict())
            _dict['internalOsServiceStateInstance'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in internal_os_service_state_instances (list)
        _items = []
        if self.internal_os_service_state_instances:
            for _item_internal_os_service_state_instances in self.internal_os_service_state_instances:
                if _item_internal_os_service_state_instances:
                    _items.append(_item_internal_os_service_state_instances.to_dict())
            _dict['internalOsServiceStateInstances'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudAiplatformV1beta1ReportRuntimeEventRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "eventDetails": obj.get("eventDetails"),
            "eventType": obj.get("eventType"),
            "internalOsServiceStateInstance": [GoogleCloudAiplatformV1beta1InternalOsServiceStateInstance.from_dict(_item) for _item in obj["internalOsServiceStateInstance"]] if obj.get("internalOsServiceStateInstance") is not None else None,
            "internalOsServiceStateInstances": [GoogleCloudAiplatformV1beta1InternalOsServiceStateInstance.from_dict(_item) for _item in obj["internalOsServiceStateInstances"]] if obj.get("internalOsServiceStateInstances") is not None else None,
            "vmToken": obj.get("vmToken")
        })
        return _obj



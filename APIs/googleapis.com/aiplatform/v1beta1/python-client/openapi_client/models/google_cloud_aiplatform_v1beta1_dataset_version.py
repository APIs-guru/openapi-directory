# coding: utf-8

"""
    Vertex AI API

    Train high-quality custom machine learning models with minimal machine learning expertise and effort.

    The version of the OpenAPI document: v1beta1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudAiplatformV1beta1DatasetVersion(BaseModel):
    """
    Describes the dataset version.
    """ # noqa: E501
    big_query_dataset_name: Optional[StrictStr] = Field(default=None, description="Output only. Name of the associated BigQuery dataset.", alias="bigQueryDatasetName")
    create_time: Optional[StrictStr] = Field(default=None, description="Output only. Timestamp when this DatasetVersion was created.", alias="createTime")
    display_name: Optional[StrictStr] = Field(default=None, description="The user-defined name of the DatasetVersion. The name can be up to 128 characters long and can consist of any UTF-8 characters.", alias="displayName")
    etag: Optional[StrictStr] = Field(default=None, description="Used to perform consistent read-modify-write updates. If not set, a blind \"overwrite\" update happens.")
    metadata: Optional[Any] = Field(default=None, description="Required. Additional information about the DatasetVersion.")
    name: Optional[StrictStr] = Field(default=None, description="Output only. The resource name of the DatasetVersion.")
    update_time: Optional[StrictStr] = Field(default=None, description="Output only. Timestamp when this DatasetVersion was last updated.", alias="updateTime")
    __properties: ClassVar[List[str]] = ["bigQueryDatasetName", "createTime", "displayName", "etag", "metadata", "name", "updateTime"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudAiplatformV1beta1DatasetVersion from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "big_query_dataset_name",
            "create_time",
            "name",
            "update_time",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if metadata (nullable) is None
        # and model_fields_set contains the field
        if self.metadata is None and "metadata" in self.model_fields_set:
            _dict['metadata'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudAiplatformV1beta1DatasetVersion from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "bigQueryDatasetName": obj.get("bigQueryDatasetName"),
            "createTime": obj.get("createTime"),
            "displayName": obj.get("displayName"),
            "etag": obj.get("etag"),
            "metadata": obj.get("metadata"),
            "name": obj.get("name"),
            "updateTime": obj.get("updateTime")
        })
        return _obj



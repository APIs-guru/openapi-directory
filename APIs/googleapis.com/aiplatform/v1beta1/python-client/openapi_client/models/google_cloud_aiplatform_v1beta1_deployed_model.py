# coding: utf-8

"""
    Vertex AI API

    Train high-quality custom machine learning models with minimal machine learning expertise and effort.

    The version of the OpenAPI document: v1beta1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_cloud_aiplatform_v1beta1_automatic_resources import GoogleCloudAiplatformV1beta1AutomaticResources
from openapi_client.models.google_cloud_aiplatform_v1beta1_dedicated_resources import GoogleCloudAiplatformV1beta1DedicatedResources
from openapi_client.models.google_cloud_aiplatform_v1beta1_explanation_spec import GoogleCloudAiplatformV1beta1ExplanationSpec
from openapi_client.models.google_cloud_aiplatform_v1beta1_private_endpoints import GoogleCloudAiplatformV1beta1PrivateEndpoints
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudAiplatformV1beta1DeployedModel(BaseModel):
    """
    A deployment of a Model. Endpoints contain one or more DeployedModels.
    """ # noqa: E501
    automatic_resources: Optional[GoogleCloudAiplatformV1beta1AutomaticResources] = Field(default=None, alias="automaticResources")
    create_time: Optional[StrictStr] = Field(default=None, description="Output only. Timestamp when the DeployedModel was created.", alias="createTime")
    dedicated_resources: Optional[GoogleCloudAiplatformV1beta1DedicatedResources] = Field(default=None, alias="dedicatedResources")
    disable_explanations: Optional[StrictBool] = Field(default=None, description="If true, deploy the model without explainable feature, regardless the existence of Model.explanation_spec or explanation_spec.", alias="disableExplanations")
    display_name: Optional[StrictStr] = Field(default=None, description="The display name of the DeployedModel. If not provided upon creation, the Model's display_name is used.", alias="displayName")
    enable_access_logging: Optional[StrictBool] = Field(default=None, description="If true, online prediction access logs are sent to Cloud Logging. These logs are like standard server access logs, containing information like timestamp and latency for each prediction request. Note that logs may incur a cost, especially if your project receives prediction requests at a high queries per second rate (QPS). Estimate your costs before enabling this option.", alias="enableAccessLogging")
    enable_container_logging: Optional[StrictBool] = Field(default=None, description="If true, the container of the DeployedModel instances will send `stderr` and `stdout` streams to Cloud Logging. Only supported for custom-trained Models and AutoML Tabular Models.", alias="enableContainerLogging")
    explanation_spec: Optional[GoogleCloudAiplatformV1beta1ExplanationSpec] = Field(default=None, alias="explanationSpec")
    id: Optional[StrictStr] = Field(default=None, description="Immutable. The ID of the DeployedModel. If not provided upon deployment, Vertex AI will generate a value for this ID. This value should be 1-10 characters, and valid characters are `/[0-9]/`.")
    model: Optional[StrictStr] = Field(default=None, description="Required. The resource name of the Model that this is the deployment of. Note that the Model may be in a different location than the DeployedModel's Endpoint. The resource name may contain version id or version alias to specify the version. Example: `projects/{project}/locations/{location}/models/{model}@2` or `projects/{project}/locations/{location}/models/{model}@golden` if no version is specified, the default version will be deployed.")
    model_version_id: Optional[StrictStr] = Field(default=None, description="Output only. The version ID of the model that is deployed.", alias="modelVersionId")
    private_endpoints: Optional[GoogleCloudAiplatformV1beta1PrivateEndpoints] = Field(default=None, alias="privateEndpoints")
    service_account: Optional[StrictStr] = Field(default=None, description="The service account that the DeployedModel's container runs as. Specify the email address of the service account. If this service account is not specified, the container runs as a service account that doesn't have access to the resource project. Users deploying the Model must have the `iam.serviceAccounts.actAs` permission on this service account.", alias="serviceAccount")
    shared_resources: Optional[StrictStr] = Field(default=None, description="The resource name of the shared DeploymentResourcePool to deploy on. Format: `projects/{project}/locations/{location}/deploymentResourcePools/{deployment_resource_pool}`", alias="sharedResources")
    __properties: ClassVar[List[str]] = ["automaticResources", "createTime", "dedicatedResources", "disableExplanations", "displayName", "enableAccessLogging", "enableContainerLogging", "explanationSpec", "id", "model", "modelVersionId", "privateEndpoints", "serviceAccount", "sharedResources"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudAiplatformV1beta1DeployedModel from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "create_time",
            "model_version_id",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of automatic_resources
        if self.automatic_resources:
            _dict['automaticResources'] = self.automatic_resources.to_dict()
        # override the default output from pydantic by calling `to_dict()` of dedicated_resources
        if self.dedicated_resources:
            _dict['dedicatedResources'] = self.dedicated_resources.to_dict()
        # override the default output from pydantic by calling `to_dict()` of explanation_spec
        if self.explanation_spec:
            _dict['explanationSpec'] = self.explanation_spec.to_dict()
        # override the default output from pydantic by calling `to_dict()` of private_endpoints
        if self.private_endpoints:
            _dict['privateEndpoints'] = self.private_endpoints.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudAiplatformV1beta1DeployedModel from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "automaticResources": GoogleCloudAiplatformV1beta1AutomaticResources.from_dict(obj["automaticResources"]) if obj.get("automaticResources") is not None else None,
            "createTime": obj.get("createTime"),
            "dedicatedResources": GoogleCloudAiplatformV1beta1DedicatedResources.from_dict(obj["dedicatedResources"]) if obj.get("dedicatedResources") is not None else None,
            "disableExplanations": obj.get("disableExplanations"),
            "displayName": obj.get("displayName"),
            "enableAccessLogging": obj.get("enableAccessLogging"),
            "enableContainerLogging": obj.get("enableContainerLogging"),
            "explanationSpec": GoogleCloudAiplatformV1beta1ExplanationSpec.from_dict(obj["explanationSpec"]) if obj.get("explanationSpec") is not None else None,
            "id": obj.get("id"),
            "model": obj.get("model"),
            "modelVersionId": obj.get("modelVersionId"),
            "privateEndpoints": GoogleCloudAiplatformV1beta1PrivateEndpoints.from_dict(obj["privateEndpoints"]) if obj.get("privateEndpoints") is not None else None,
            "serviceAccount": obj.get("serviceAccount"),
            "sharedResources": obj.get("sharedResources")
        })
        return _obj



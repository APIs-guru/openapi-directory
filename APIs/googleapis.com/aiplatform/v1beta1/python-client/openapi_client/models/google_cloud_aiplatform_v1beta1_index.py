# coding: utf-8

"""
    Vertex AI API

    Train high-quality custom machine learning models with minimal machine learning expertise and effort.

    The version of the OpenAPI document: v1beta1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_cloud_aiplatform_v1beta1_deployed_index_ref import GoogleCloudAiplatformV1beta1DeployedIndexRef
from openapi_client.models.google_cloud_aiplatform_v1beta1_encryption_spec import GoogleCloudAiplatformV1beta1EncryptionSpec
from openapi_client.models.google_cloud_aiplatform_v1beta1_index_stats import GoogleCloudAiplatformV1beta1IndexStats
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudAiplatformV1beta1Index(BaseModel):
    """
    A representation of a collection of database items organized in a way that allows for approximate nearest neighbor (a.k.a ANN) algorithms search.
    """ # noqa: E501
    create_time: Optional[StrictStr] = Field(default=None, description="Output only. Timestamp when this Index was created.", alias="createTime")
    deployed_indexes: Optional[List[GoogleCloudAiplatformV1beta1DeployedIndexRef]] = Field(default=None, description="Output only. The pointers to DeployedIndexes created from this Index. An Index can be only deleted if all its DeployedIndexes had been undeployed first.", alias="deployedIndexes")
    description: Optional[StrictStr] = Field(default=None, description="The description of the Index.")
    display_name: Optional[StrictStr] = Field(default=None, description="Required. The display name of the Index. The name can be up to 128 characters long and can consist of any UTF-8 characters.", alias="displayName")
    encryption_spec: Optional[GoogleCloudAiplatformV1beta1EncryptionSpec] = Field(default=None, alias="encryptionSpec")
    etag: Optional[StrictStr] = Field(default=None, description="Used to perform consistent read-modify-write updates. If not set, a blind \"overwrite\" update happens.")
    index_stats: Optional[GoogleCloudAiplatformV1beta1IndexStats] = Field(default=None, alias="indexStats")
    index_update_method: Optional[StrictStr] = Field(default=None, description="Immutable. The update method to use with this Index. If not set, BATCH_UPDATE will be used by default.", alias="indexUpdateMethod")
    labels: Optional[Dict[str, StrictStr]] = Field(default=None, description="The labels with user-defined metadata to organize your Indexes. Label keys and values can be no longer than 64 characters (Unicode codepoints), can only contain lowercase letters, numeric characters, underscores and dashes. International characters are allowed. See https://goo.gl/xmQnxf for more information and examples of labels.")
    metadata: Optional[Any] = Field(default=None, description="An additional information about the Index; the schema of the metadata can be found in metadata_schema.")
    metadata_schema_uri: Optional[StrictStr] = Field(default=None, description="Immutable. Points to a YAML file stored on Google Cloud Storage describing additional information about the Index, that is specific to it. Unset if the Index does not have any additional information. The schema is defined as an OpenAPI 3.0.2 [Schema Object](https://github.com/OAI/OpenAPI-Specification/blob/main/versions/3.0.2.md#schemaObject). Note: The URI given on output will be immutable and probably different, including the URI scheme, than the one given on input. The output URI will point to a location where the user only has a read access.", alias="metadataSchemaUri")
    name: Optional[StrictStr] = Field(default=None, description="Output only. The resource name of the Index.")
    update_time: Optional[StrictStr] = Field(default=None, description="Output only. Timestamp when this Index was most recently updated. This also includes any update to the contents of the Index. Note that Operations working on this Index may have their Operations.metadata.generic_metadata.update_time a little after the value of this timestamp, yet that does not mean their results are not already reflected in the Index. Result of any successfully completed Operation on the Index is reflected in it.", alias="updateTime")
    __properties: ClassVar[List[str]] = ["createTime", "deployedIndexes", "description", "displayName", "encryptionSpec", "etag", "indexStats", "indexUpdateMethod", "labels", "metadata", "metadataSchemaUri", "name", "updateTime"]

    @field_validator('index_update_method')
    def index_update_method_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['INDEX_UPDATE_METHOD_UNSPECIFIED', 'BATCH_UPDATE', 'STREAM_UPDATE']):
            raise ValueError("must be one of enum values ('INDEX_UPDATE_METHOD_UNSPECIFIED', 'BATCH_UPDATE', 'STREAM_UPDATE')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudAiplatformV1beta1Index from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "create_time",
            "deployed_indexes",
            "name",
            "update_time",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in deployed_indexes (list)
        _items = []
        if self.deployed_indexes:
            for _item_deployed_indexes in self.deployed_indexes:
                if _item_deployed_indexes:
                    _items.append(_item_deployed_indexes.to_dict())
            _dict['deployedIndexes'] = _items
        # override the default output from pydantic by calling `to_dict()` of encryption_spec
        if self.encryption_spec:
            _dict['encryptionSpec'] = self.encryption_spec.to_dict()
        # override the default output from pydantic by calling `to_dict()` of index_stats
        if self.index_stats:
            _dict['indexStats'] = self.index_stats.to_dict()
        # set to None if metadata (nullable) is None
        # and model_fields_set contains the field
        if self.metadata is None and "metadata" in self.model_fields_set:
            _dict['metadata'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudAiplatformV1beta1Index from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "createTime": obj.get("createTime"),
            "deployedIndexes": [GoogleCloudAiplatformV1beta1DeployedIndexRef.from_dict(_item) for _item in obj["deployedIndexes"]] if obj.get("deployedIndexes") is not None else None,
            "description": obj.get("description"),
            "displayName": obj.get("displayName"),
            "encryptionSpec": GoogleCloudAiplatformV1beta1EncryptionSpec.from_dict(obj["encryptionSpec"]) if obj.get("encryptionSpec") is not None else None,
            "etag": obj.get("etag"),
            "indexStats": GoogleCloudAiplatformV1beta1IndexStats.from_dict(obj["indexStats"]) if obj.get("indexStats") is not None else None,
            "indexUpdateMethod": obj.get("indexUpdateMethod"),
            "labels": obj.get("labels"),
            "metadata": obj.get("metadata"),
            "metadataSchemaUri": obj.get("metadataSchemaUri"),
            "name": obj.get("name"),
            "updateTime": obj.get("updateTime")
        })
        return _obj



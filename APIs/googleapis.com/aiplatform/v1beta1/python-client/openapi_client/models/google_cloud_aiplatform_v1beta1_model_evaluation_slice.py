# coding: utf-8

"""
    Vertex AI API

    Train high-quality custom machine learning models with minimal machine learning expertise and effort.

    The version of the OpenAPI document: v1beta1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_cloud_aiplatform_v1beta1_model_evaluation_slice_slice import GoogleCloudAiplatformV1beta1ModelEvaluationSliceSlice
from openapi_client.models.google_cloud_aiplatform_v1beta1_model_explanation import GoogleCloudAiplatformV1beta1ModelExplanation
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudAiplatformV1beta1ModelEvaluationSlice(BaseModel):
    """
    A collection of metrics calculated by comparing Model's predictions on a slice of the test data against ground truth annotations.
    """ # noqa: E501
    create_time: Optional[StrictStr] = Field(default=None, description="Output only. Timestamp when this ModelEvaluationSlice was created.", alias="createTime")
    metrics: Optional[Any] = Field(default=None, description="Output only. Sliced evaluation metrics of the Model. The schema of the metrics is stored in metrics_schema_uri")
    metrics_schema_uri: Optional[StrictStr] = Field(default=None, description="Output only. Points to a YAML file stored on Google Cloud Storage describing the metrics of this ModelEvaluationSlice. The schema is defined as an OpenAPI 3.0.2 [Schema Object](https://github.com/OAI/OpenAPI-Specification/blob/main/versions/3.0.2.md#schemaObject).", alias="metricsSchemaUri")
    model_explanation: Optional[GoogleCloudAiplatformV1beta1ModelExplanation] = Field(default=None, alias="modelExplanation")
    name: Optional[StrictStr] = Field(default=None, description="Output only. The resource name of the ModelEvaluationSlice.")
    slice: Optional[GoogleCloudAiplatformV1beta1ModelEvaluationSliceSlice] = None
    __properties: ClassVar[List[str]] = ["createTime", "metrics", "metricsSchemaUri", "modelExplanation", "name", "slice"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudAiplatformV1beta1ModelEvaluationSlice from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "create_time",
            "metrics",
            "metrics_schema_uri",
            "name",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of model_explanation
        if self.model_explanation:
            _dict['modelExplanation'] = self.model_explanation.to_dict()
        # override the default output from pydantic by calling `to_dict()` of slice
        if self.slice:
            _dict['slice'] = self.slice.to_dict()
        # set to None if metrics (nullable) is None
        # and model_fields_set contains the field
        if self.metrics is None and "metrics" in self.model_fields_set:
            _dict['metrics'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudAiplatformV1beta1ModelEvaluationSlice from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "createTime": obj.get("createTime"),
            "metrics": obj.get("metrics"),
            "metricsSchemaUri": obj.get("metricsSchemaUri"),
            "modelExplanation": GoogleCloudAiplatformV1beta1ModelExplanation.from_dict(obj["modelExplanation"]) if obj.get("modelExplanation") is not None else None,
            "name": obj.get("name"),
            "slice": GoogleCloudAiplatformV1beta1ModelEvaluationSliceSlice.from_dict(obj["slice"]) if obj.get("slice") is not None else None
        })
        return _obj



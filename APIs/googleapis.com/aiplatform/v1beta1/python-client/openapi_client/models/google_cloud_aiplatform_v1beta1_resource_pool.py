# coding: utf-8

"""
    Vertex AI API

    Train high-quality custom machine learning models with minimal machine learning expertise and effort.

    The version of the OpenAPI document: v1beta1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_cloud_aiplatform_v1beta1_disk_spec import GoogleCloudAiplatformV1beta1DiskSpec
from openapi_client.models.google_cloud_aiplatform_v1beta1_machine_spec import GoogleCloudAiplatformV1beta1MachineSpec
from openapi_client.models.google_cloud_aiplatform_v1beta1_resource_pool_autoscaling_spec import GoogleCloudAiplatformV1beta1ResourcePoolAutoscalingSpec
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudAiplatformV1beta1ResourcePool(BaseModel):
    """
    Represents the spec of a group of resources of the same type, for example machine type, disk, and accelerators, in a PersistentResource.
    """ # noqa: E501
    autoscaling_spec: Optional[GoogleCloudAiplatformV1beta1ResourcePoolAutoscalingSpec] = Field(default=None, alias="autoscalingSpec")
    disk_spec: Optional[GoogleCloudAiplatformV1beta1DiskSpec] = Field(default=None, alias="diskSpec")
    id: Optional[StrictStr] = Field(default=None, description="Immutable. The unique ID in a PersistentResource for referring to this resource pool. User can specify it if necessary. Otherwise, it's generated automatically.")
    machine_spec: Optional[GoogleCloudAiplatformV1beta1MachineSpec] = Field(default=None, alias="machineSpec")
    replica_count: Optional[StrictStr] = Field(default=None, description="Optional. The total number of machines to use for this resource pool.", alias="replicaCount")
    used_replica_count: Optional[StrictStr] = Field(default=None, description="Output only. The number of machines currently in use by training jobs for this resource pool. Will replace idle_replica_count.", alias="usedReplicaCount")
    __properties: ClassVar[List[str]] = ["autoscalingSpec", "diskSpec", "id", "machineSpec", "replicaCount", "usedReplicaCount"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudAiplatformV1beta1ResourcePool from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "used_replica_count",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of autoscaling_spec
        if self.autoscaling_spec:
            _dict['autoscalingSpec'] = self.autoscaling_spec.to_dict()
        # override the default output from pydantic by calling `to_dict()` of disk_spec
        if self.disk_spec:
            _dict['diskSpec'] = self.disk_spec.to_dict()
        # override the default output from pydantic by calling `to_dict()` of machine_spec
        if self.machine_spec:
            _dict['machineSpec'] = self.machine_spec.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudAiplatformV1beta1ResourcePool from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "autoscalingSpec": GoogleCloudAiplatformV1beta1ResourcePoolAutoscalingSpec.from_dict(obj["autoscalingSpec"]) if obj.get("autoscalingSpec") is not None else None,
            "diskSpec": GoogleCloudAiplatformV1beta1DiskSpec.from_dict(obj["diskSpec"]) if obj.get("diskSpec") is not None else None,
            "id": obj.get("id"),
            "machineSpec": GoogleCloudAiplatformV1beta1MachineSpec.from_dict(obj["machineSpec"]) if obj.get("machineSpec") is not None else None,
            "replicaCount": obj.get("replicaCount"),
            "usedReplicaCount": obj.get("usedReplicaCount")
        })
        return _obj



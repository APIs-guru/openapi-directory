# coding: utf-8

"""
    Vertex AI API

    Train high-quality custom machine learning models with minimal machine learning expertise and effort.

    The version of the OpenAPI document: v1beta1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_cloud_aiplatform_v1beta1_ray_metric_spec import GoogleCloudAiplatformV1beta1RayMetricSpec
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudAiplatformV1beta1RaySpec(BaseModel):
    """
    Configuration information for the Ray cluster. For experimental launch, Ray cluster creation and Persistent cluster creation are 1:1 mapping: We will provision all the nodes within the Persistent cluster as Ray nodes.
    """ # noqa: E501
    head_node_resource_pool_id: Optional[StrictStr] = Field(default=None, description="Optional. This will be used to indicate which resource pool will serve as the Ray head node(the first node within that pool). Will use the machine from the first workerpool as the head node by default if this field isn't set.", alias="headNodeResourcePoolId")
    image_uri: Optional[StrictStr] = Field(default=None, description="Optional. Default image for user to choose a preferred ML framework (for example, TensorFlow or Pytorch) by choosing from [Vertex prebuilt images](https://cloud.google.com/vertex-ai/docs/training/pre-built-containers). Either this or the resource_pool_images is required. Use this field if you need all the resource pools to have the same Ray image. Otherwise, use the {@code resource_pool_images} field.", alias="imageUri")
    ray_metric_spec: Optional[GoogleCloudAiplatformV1beta1RayMetricSpec] = Field(default=None, alias="rayMetricSpec")
    resource_pool_images: Optional[Dict[str, StrictStr]] = Field(default=None, description="Optional. Required if image_uri isn't set. A map of resource_pool_id to prebuild Ray image if user need to use different images for different head/worker pools. This map needs to cover all the resource pool ids. Example: { \"ray_head_node_pool\": \"head image\" \"ray_worker_node_pool1\": \"worker image\" \"ray_worker_node_pool2\": \"another worker image\" }", alias="resourcePoolImages")
    __properties: ClassVar[List[str]] = ["headNodeResourcePoolId", "imageUri", "rayMetricSpec", "resourcePoolImages"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudAiplatformV1beta1RaySpec from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of ray_metric_spec
        if self.ray_metric_spec:
            _dict['rayMetricSpec'] = self.ray_metric_spec.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudAiplatformV1beta1RaySpec from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "headNodeResourcePoolId": obj.get("headNodeResourcePoolId"),
            "imageUri": obj.get("imageUri"),
            "rayMetricSpec": GoogleCloudAiplatformV1beta1RayMetricSpec.from_dict(obj["rayMetricSpec"]) if obj.get("rayMetricSpec") is not None else None,
            "resourcePoolImages": obj.get("resourcePoolImages")
        })
        return _obj



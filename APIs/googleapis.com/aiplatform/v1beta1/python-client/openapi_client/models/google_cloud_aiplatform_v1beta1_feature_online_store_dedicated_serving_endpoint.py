# coding: utf-8

"""
    Vertex AI API

    Train high-quality custom machine learning models with minimal machine learning expertise and effort.

    The version of the OpenAPI document: v1beta1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_cloud_aiplatform_v1beta1_private_service_connect_config import GoogleCloudAiplatformV1beta1PrivateServiceConnectConfig
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudAiplatformV1beta1FeatureOnlineStoreDedicatedServingEndpoint(BaseModel):
    """
    The dedicated serving endpoint for this FeatureOnlineStore. Only need to set when you choose Optimized storage type or enable EmbeddingManagement. Will use public endpoint by default. Note, for EmbeddingManagement use case, only [DedicatedServingEndpoint.public_endpoint_domain_name] is available now.
    """ # noqa: E501
    private_service_connect_config: Optional[GoogleCloudAiplatformV1beta1PrivateServiceConnectConfig] = Field(default=None, alias="privateServiceConnectConfig")
    public_endpoint_domain_name: Optional[StrictStr] = Field(default=None, description="Output only. This field will be populated with the domain name to use for this FeatureOnlineStore", alias="publicEndpointDomainName")
    service_attachment: Optional[StrictStr] = Field(default=None, description="Output only. The name of the service attachment resource. Populated if private service connect is enabled and after FeatureViewSync is created.", alias="serviceAttachment")
    __properties: ClassVar[List[str]] = ["privateServiceConnectConfig", "publicEndpointDomainName", "serviceAttachment"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudAiplatformV1beta1FeatureOnlineStoreDedicatedServingEndpoint from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "public_endpoint_domain_name",
            "service_attachment",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of private_service_connect_config
        if self.private_service_connect_config:
            _dict['privateServiceConnectConfig'] = self.private_service_connect_config.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudAiplatformV1beta1FeatureOnlineStoreDedicatedServingEndpoint from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "privateServiceConnectConfig": GoogleCloudAiplatformV1beta1PrivateServiceConnectConfig.from_dict(obj["privateServiceConnectConfig"]) if obj.get("privateServiceConnectConfig") is not None else None,
            "publicEndpointDomainName": obj.get("publicEndpointDomainName"),
            "serviceAttachment": obj.get("serviceAttachment")
        })
        return _obj



# coding: utf-8

"""
    Vertex AI API

    Train high-quality custom machine learning models with minimal machine learning expertise and effort.

    The version of the OpenAPI document: v1beta1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_cloud_aiplatform_v1beta1_migratable_resource_automl_dataset import GoogleCloudAiplatformV1beta1MigratableResourceAutomlDataset
from openapi_client.models.google_cloud_aiplatform_v1beta1_migratable_resource_automl_model import GoogleCloudAiplatformV1beta1MigratableResourceAutomlModel
from openapi_client.models.google_cloud_aiplatform_v1beta1_migratable_resource_data_labeling_dataset import GoogleCloudAiplatformV1beta1MigratableResourceDataLabelingDataset
from openapi_client.models.google_cloud_aiplatform_v1beta1_migratable_resource_ml_engine_model_version import GoogleCloudAiplatformV1beta1MigratableResourceMlEngineModelVersion
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudAiplatformV1beta1MigratableResource(BaseModel):
    """
    Represents one resource that exists in automl.googleapis.com, datalabeling.googleapis.com or ml.googleapis.com.
    """ # noqa: E501
    automl_dataset: Optional[GoogleCloudAiplatformV1beta1MigratableResourceAutomlDataset] = Field(default=None, alias="automlDataset")
    automl_model: Optional[GoogleCloudAiplatformV1beta1MigratableResourceAutomlModel] = Field(default=None, alias="automlModel")
    data_labeling_dataset: Optional[GoogleCloudAiplatformV1beta1MigratableResourceDataLabelingDataset] = Field(default=None, alias="dataLabelingDataset")
    last_migrate_time: Optional[StrictStr] = Field(default=None, description="Output only. Timestamp when the last migration attempt on this MigratableResource started. Will not be set if there's no migration attempt on this MigratableResource.", alias="lastMigrateTime")
    last_update_time: Optional[StrictStr] = Field(default=None, description="Output only. Timestamp when this MigratableResource was last updated.", alias="lastUpdateTime")
    ml_engine_model_version: Optional[GoogleCloudAiplatformV1beta1MigratableResourceMlEngineModelVersion] = Field(default=None, alias="mlEngineModelVersion")
    __properties: ClassVar[List[str]] = ["automlDataset", "automlModel", "dataLabelingDataset", "lastMigrateTime", "lastUpdateTime", "mlEngineModelVersion"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudAiplatformV1beta1MigratableResource from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "last_migrate_time",
            "last_update_time",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of automl_dataset
        if self.automl_dataset:
            _dict['automlDataset'] = self.automl_dataset.to_dict()
        # override the default output from pydantic by calling `to_dict()` of automl_model
        if self.automl_model:
            _dict['automlModel'] = self.automl_model.to_dict()
        # override the default output from pydantic by calling `to_dict()` of data_labeling_dataset
        if self.data_labeling_dataset:
            _dict['dataLabelingDataset'] = self.data_labeling_dataset.to_dict()
        # override the default output from pydantic by calling `to_dict()` of ml_engine_model_version
        if self.ml_engine_model_version:
            _dict['mlEngineModelVersion'] = self.ml_engine_model_version.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudAiplatformV1beta1MigratableResource from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "automlDataset": GoogleCloudAiplatformV1beta1MigratableResourceAutomlDataset.from_dict(obj["automlDataset"]) if obj.get("automlDataset") is not None else None,
            "automlModel": GoogleCloudAiplatformV1beta1MigratableResourceAutomlModel.from_dict(obj["automlModel"]) if obj.get("automlModel") is not None else None,
            "dataLabelingDataset": GoogleCloudAiplatformV1beta1MigratableResourceDataLabelingDataset.from_dict(obj["dataLabelingDataset"]) if obj.get("dataLabelingDataset") is not None else None,
            "lastMigrateTime": obj.get("lastMigrateTime"),
            "lastUpdateTime": obj.get("lastUpdateTime"),
            "mlEngineModelVersion": GoogleCloudAiplatformV1beta1MigratableResourceMlEngineModelVersion.from_dict(obj["mlEngineModelVersion"]) if obj.get("mlEngineModelVersion") is not None else None
        })
        return _obj



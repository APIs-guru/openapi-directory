# coding: utf-8

"""
    Vertex AI API

    Train high-quality custom machine learning models with minimal machine learning expertise and effort.

    The version of the OpenAPI document: v1beta1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_cloud_aiplatform_v1beta1_feature_view_vector_search_config_tree_ah_config import GoogleCloudAiplatformV1beta1FeatureViewVectorSearchConfigTreeAHConfig
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudAiplatformV1beta1FeatureViewVectorSearchConfig(BaseModel):
    """
    Deprecated. Use IndexConfig instead.
    """ # noqa: E501
    brute_force_config: Optional[Dict[str, Any]] = Field(default=None, alias="bruteForceConfig")
    crowding_column: Optional[StrictStr] = Field(default=None, description="Optional. Column of crowding. This column contains crowding attribute which is a constraint on a neighbor list produced by nearest neighbor search requiring that no more than some value k' of the k neighbors returned have the same value of crowding_attribute.", alias="crowdingColumn")
    distance_measure_type: Optional[StrictStr] = Field(default=None, description="Optional. The distance measure used in nearest neighbor search.", alias="distanceMeasureType")
    embedding_column: Optional[StrictStr] = Field(default=None, description="Optional. Column of embedding. This column contains the source data to create index for vector search. embedding_column must be set when using vector search.", alias="embeddingColumn")
    embedding_dimension: Optional[StrictInt] = Field(default=None, description="Optional. The number of dimensions of the input embedding.", alias="embeddingDimension")
    filter_columns: Optional[List[StrictStr]] = Field(default=None, description="Optional. Columns of features that're used to filter vector search results.", alias="filterColumns")
    tree_ah_config: Optional[GoogleCloudAiplatformV1beta1FeatureViewVectorSearchConfigTreeAHConfig] = Field(default=None, alias="treeAhConfig")
    __properties: ClassVar[List[str]] = ["bruteForceConfig", "crowdingColumn", "distanceMeasureType", "embeddingColumn", "embeddingDimension", "filterColumns", "treeAhConfig"]

    @field_validator('distance_measure_type')
    def distance_measure_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['DISTANCE_MEASURE_TYPE_UNSPECIFIED', 'SQUARED_L2_DISTANCE', 'COSINE_DISTANCE', 'DOT_PRODUCT_DISTANCE']):
            raise ValueError("must be one of enum values ('DISTANCE_MEASURE_TYPE_UNSPECIFIED', 'SQUARED_L2_DISTANCE', 'COSINE_DISTANCE', 'DOT_PRODUCT_DISTANCE')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudAiplatformV1beta1FeatureViewVectorSearchConfig from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of tree_ah_config
        if self.tree_ah_config:
            _dict['treeAhConfig'] = self.tree_ah_config.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudAiplatformV1beta1FeatureViewVectorSearchConfig from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "bruteForceConfig": obj.get("bruteForceConfig"),
            "crowdingColumn": obj.get("crowdingColumn"),
            "distanceMeasureType": obj.get("distanceMeasureType"),
            "embeddingColumn": obj.get("embeddingColumn"),
            "embeddingDimension": obj.get("embeddingDimension"),
            "filterColumns": obj.get("filterColumns"),
            "treeAhConfig": GoogleCloudAiplatformV1beta1FeatureViewVectorSearchConfigTreeAHConfig.from_dict(obj["treeAhConfig"]) if obj.get("treeAhConfig") is not None else None
        })
        return _obj



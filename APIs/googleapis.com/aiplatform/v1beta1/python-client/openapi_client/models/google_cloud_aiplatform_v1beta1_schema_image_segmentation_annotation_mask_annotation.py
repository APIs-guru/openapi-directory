# coding: utf-8

"""
    Vertex AI API

    Train high-quality custom machine learning models with minimal machine learning expertise and effort.

    The version of the OpenAPI document: v1beta1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_cloud_aiplatform_v1beta1_schema_annotation_spec_color import GoogleCloudAiplatformV1beta1SchemaAnnotationSpecColor
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudAiplatformV1beta1SchemaImageSegmentationAnnotationMaskAnnotation(BaseModel):
    """
    The mask based segmentation annotation.
    """ # noqa: E501
    annotation_spec_colors: Optional[List[GoogleCloudAiplatformV1beta1SchemaAnnotationSpecColor]] = Field(default=None, description="The mapping between color and AnnotationSpec for this Annotation.", alias="annotationSpecColors")
    mask_gcs_uri: Optional[StrictStr] = Field(default=None, description="Google Cloud Storage URI that points to the mask image. The image must be in PNG format. It must have the same size as the DataItem's image. Each pixel in the image mask represents the AnnotationSpec which the pixel in the image DataItem belong to. Each color is mapped to one AnnotationSpec based on annotation_spec_colors.", alias="maskGcsUri")
    __properties: ClassVar[List[str]] = ["annotationSpecColors", "maskGcsUri"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudAiplatformV1beta1SchemaImageSegmentationAnnotationMaskAnnotation from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in annotation_spec_colors (list)
        _items = []
        if self.annotation_spec_colors:
            for _item_annotation_spec_colors in self.annotation_spec_colors:
                if _item_annotation_spec_colors:
                    _items.append(_item_annotation_spec_colors.to_dict())
            _dict['annotationSpecColors'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudAiplatformV1beta1SchemaImageSegmentationAnnotationMaskAnnotation from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "annotationSpecColors": [GoogleCloudAiplatformV1beta1SchemaAnnotationSpecColor.from_dict(_item) for _item in obj["annotationSpecColors"]] if obj.get("annotationSpecColors") is not None else None,
            "maskGcsUri": obj.get("maskGcsUri")
        })
        return _obj



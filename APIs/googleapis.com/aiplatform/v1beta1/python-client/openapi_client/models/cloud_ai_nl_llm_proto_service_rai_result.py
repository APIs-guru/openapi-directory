# coding: utf-8

"""
    Vertex AI API

    Train high-quality custom machine learning models with minimal machine learning expertise and effort.

    The version of the OpenAPI document: v1beta1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.cloud_ai_nl_llm_proto_service_rai_signal import CloudAiNlLlmProtoServiceRaiSignal
from openapi_client.models.language_labs_aida_trust_recitation_proto_recitation_result import LanguageLabsAidaTrustRecitationProtoRecitationResult
from openapi_client.models.learning_genai_root_language_filter_result import LearningGenaiRootLanguageFilterResult
from typing import Optional, Set
from typing_extensions import Self

class CloudAiNlLlmProtoServiceRaiResult(BaseModel):
    """
    The RAI results for a given text.
    """ # noqa: E501
    aida_recitation_result: Optional[LanguageLabsAidaTrustRecitationProtoRecitationResult] = Field(default=None, alias="aidaRecitationResult")
    blocked: Optional[StrictBool] = Field(default=None, description="Use `triggered_blocklist`.")
    error_codes: Optional[List[StrictInt]] = Field(default=None, description="The error codes indicate which RAI filters block the response.", alias="errorCodes")
    filtered: Optional[StrictBool] = Field(default=None, description="Whether the text should be filtered and not shown to the end user. This is determined based on a combination of `triggered_recitation`, `triggered_blocklist`, `language_filter_result`, and `triggered_safety_filter`.")
    language_filter_result: Optional[LearningGenaiRootLanguageFilterResult] = Field(default=None, alias="languageFilterResult")
    rai_signals: Optional[List[CloudAiNlLlmProtoServiceRaiSignal]] = Field(default=None, description="The RAI signals for the text.", alias="raiSignals")
    triggered_blocklist: Optional[StrictBool] = Field(default=None, description="Whether the text triggered the blocklist.", alias="triggeredBlocklist")
    triggered_recitation: Optional[StrictBool] = Field(default=None, description="Whether the text should be blocked by the recitation result from Aida recitation checker. It is determined from aida_recitation_result.", alias="triggeredRecitation")
    triggered_safety_filter: Optional[StrictBool] = Field(default=None, description="Whether the text triggered the safety filter. Currently, this is due to CSAI triggering or one of four categories (derogatory, sexual, toxic, violent) having a score over the filter threshold.", alias="triggeredSafetyFilter")
    __properties: ClassVar[List[str]] = ["aidaRecitationResult", "blocked", "errorCodes", "filtered", "languageFilterResult", "raiSignals", "triggeredBlocklist", "triggeredRecitation", "triggeredSafetyFilter"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CloudAiNlLlmProtoServiceRaiResult from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of aida_recitation_result
        if self.aida_recitation_result:
            _dict['aidaRecitationResult'] = self.aida_recitation_result.to_dict()
        # override the default output from pydantic by calling `to_dict()` of language_filter_result
        if self.language_filter_result:
            _dict['languageFilterResult'] = self.language_filter_result.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in rai_signals (list)
        _items = []
        if self.rai_signals:
            for _item_rai_signals in self.rai_signals:
                if _item_rai_signals:
                    _items.append(_item_rai_signals.to_dict())
            _dict['raiSignals'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CloudAiNlLlmProtoServiceRaiResult from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "aidaRecitationResult": LanguageLabsAidaTrustRecitationProtoRecitationResult.from_dict(obj["aidaRecitationResult"]) if obj.get("aidaRecitationResult") is not None else None,
            "blocked": obj.get("blocked"),
            "errorCodes": obj.get("errorCodes"),
            "filtered": obj.get("filtered"),
            "languageFilterResult": LearningGenaiRootLanguageFilterResult.from_dict(obj["languageFilterResult"]) if obj.get("languageFilterResult") is not None else None,
            "raiSignals": [CloudAiNlLlmProtoServiceRaiSignal.from_dict(_item) for _item in obj["raiSignals"]] if obj.get("raiSignals") is not None else None,
            "triggeredBlocklist": obj.get("triggeredBlocklist"),
            "triggeredRecitation": obj.get("triggeredRecitation"),
            "triggeredSafetyFilter": obj.get("triggeredSafetyFilter")
        })
        return _obj



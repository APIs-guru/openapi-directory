# coding: utf-8

"""
    Vertex AI API

    Train high-quality custom machine learning models with minimal machine learning expertise and effort.

    The version of the OpenAPI document: v1beta1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.learning_genai_root_regex_takedown_result import LearningGenaiRootRegexTakedownResult
from openapi_client.models.learning_genai_root_request_response_takedown_result import LearningGenaiRootRequestResponseTakedownResult
from openapi_client.models.learning_genai_root_similarity_takedown_result import LearningGenaiRootSimilarityTakedownResult
from typing import Optional, Set
from typing_extensions import Self

class LearningGenaiRootTakedownResult(BaseModel):
    """
    LearningGenaiRootTakedownResult
    """ # noqa: E501
    allowed: Optional[StrictBool] = Field(default=None, description="False when query or response should be taken down by any of the takedown rules, true otherwise.")
    regex_takedown_result: Optional[LearningGenaiRootRegexTakedownResult] = Field(default=None, alias="regexTakedownResult")
    request_response_takedown_result: Optional[LearningGenaiRootRequestResponseTakedownResult] = Field(default=None, alias="requestResponseTakedownResult")
    similarity_takedown_result: Optional[LearningGenaiRootSimilarityTakedownResult] = Field(default=None, alias="similarityTakedownResult")
    __properties: ClassVar[List[str]] = ["allowed", "regexTakedownResult", "requestResponseTakedownResult", "similarityTakedownResult"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of LearningGenaiRootTakedownResult from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of regex_takedown_result
        if self.regex_takedown_result:
            _dict['regexTakedownResult'] = self.regex_takedown_result.to_dict()
        # override the default output from pydantic by calling `to_dict()` of request_response_takedown_result
        if self.request_response_takedown_result:
            _dict['requestResponseTakedownResult'] = self.request_response_takedown_result.to_dict()
        # override the default output from pydantic by calling `to_dict()` of similarity_takedown_result
        if self.similarity_takedown_result:
            _dict['similarityTakedownResult'] = self.similarity_takedown_result.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of LearningGenaiRootTakedownResult from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "allowed": obj.get("allowed"),
            "regexTakedownResult": LearningGenaiRootRegexTakedownResult.from_dict(obj["regexTakedownResult"]) if obj.get("regexTakedownResult") is not None else None,
            "requestResponseTakedownResult": LearningGenaiRootRequestResponseTakedownResult.from_dict(obj["requestResponseTakedownResult"]) if obj.get("requestResponseTakedownResult") is not None else None,
            "similarityTakedownResult": LearningGenaiRootSimilarityTakedownResult.from_dict(obj["similarityTakedownResult"]) if obj.get("similarityTakedownResult") is not None else None
        })
        return _obj



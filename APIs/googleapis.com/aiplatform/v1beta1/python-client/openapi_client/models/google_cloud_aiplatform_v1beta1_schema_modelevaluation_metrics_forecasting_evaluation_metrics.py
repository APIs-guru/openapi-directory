# coding: utf-8

"""
    Vertex AI API

    Train high-quality custom machine learning models with minimal machine learning expertise and effort.

    The version of the OpenAPI document: v1beta1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt
from typing import Any, ClassVar, Dict, List, Optional, Union
from openapi_client.models.google_cloud_aiplatform_v1beta1_schema_modelevaluation_metrics_forecasting_evaluation_metrics_quantile_metrics_entry import GoogleCloudAiplatformV1beta1SchemaModelevaluationMetricsForecastingEvaluationMetricsQuantileMetricsEntry
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudAiplatformV1beta1SchemaModelevaluationMetricsForecastingEvaluationMetrics(BaseModel):
    """
    Metrics for forecasting evaluation results.
    """ # noqa: E501
    mean_absolute_error: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Mean Absolute Error (MAE).", alias="meanAbsoluteError")
    mean_absolute_percentage_error: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Mean absolute percentage error. Infinity when there are zeros in the ground truth.", alias="meanAbsolutePercentageError")
    quantile_metrics: Optional[List[GoogleCloudAiplatformV1beta1SchemaModelevaluationMetricsForecastingEvaluationMetricsQuantileMetricsEntry]] = Field(default=None, description="The quantile metrics entries for each quantile.", alias="quantileMetrics")
    r_squared: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Coefficient of determination as Pearson correlation coefficient. Undefined when ground truth or predictions are constant or near constant.", alias="rSquared")
    root_mean_squared_error: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Root Mean Squared Error (RMSE).", alias="rootMeanSquaredError")
    root_mean_squared_log_error: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Root mean squared log error. Undefined when there are negative ground truth values or predictions.", alias="rootMeanSquaredLogError")
    root_mean_squared_percentage_error: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Root Mean Square Percentage Error. Square root of MSPE. Undefined/imaginary when MSPE is negative.", alias="rootMeanSquaredPercentageError")
    weighted_absolute_percentage_error: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Weighted Absolute Percentage Error. Does not use weights, this is just what the metric is called. Undefined if actual values sum to zero. Will be very large if actual values sum to a very small number.", alias="weightedAbsolutePercentageError")
    __properties: ClassVar[List[str]] = ["meanAbsoluteError", "meanAbsolutePercentageError", "quantileMetrics", "rSquared", "rootMeanSquaredError", "rootMeanSquaredLogError", "rootMeanSquaredPercentageError", "weightedAbsolutePercentageError"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudAiplatformV1beta1SchemaModelevaluationMetricsForecastingEvaluationMetrics from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in quantile_metrics (list)
        _items = []
        if self.quantile_metrics:
            for _item_quantile_metrics in self.quantile_metrics:
                if _item_quantile_metrics:
                    _items.append(_item_quantile_metrics.to_dict())
            _dict['quantileMetrics'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudAiplatformV1beta1SchemaModelevaluationMetricsForecastingEvaluationMetrics from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "meanAbsoluteError": obj.get("meanAbsoluteError"),
            "meanAbsolutePercentageError": obj.get("meanAbsolutePercentageError"),
            "quantileMetrics": [GoogleCloudAiplatformV1beta1SchemaModelevaluationMetricsForecastingEvaluationMetricsQuantileMetricsEntry.from_dict(_item) for _item in obj["quantileMetrics"]] if obj.get("quantileMetrics") is not None else None,
            "rSquared": obj.get("rSquared"),
            "rootMeanSquaredError": obj.get("rootMeanSquaredError"),
            "rootMeanSquaredLogError": obj.get("rootMeanSquaredLogError"),
            "rootMeanSquaredPercentageError": obj.get("rootMeanSquaredPercentageError"),
            "weightedAbsolutePercentageError": obj.get("weightedAbsolutePercentageError")
        })
        return _obj



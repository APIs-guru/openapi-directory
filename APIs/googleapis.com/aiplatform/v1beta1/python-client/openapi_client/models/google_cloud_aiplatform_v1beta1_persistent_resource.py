# coding: utf-8

"""
    Vertex AI API

    Train high-quality custom machine learning models with minimal machine learning expertise and effort.

    The version of the OpenAPI document: v1beta1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_cloud_aiplatform_v1beta1_encryption_spec import GoogleCloudAiplatformV1beta1EncryptionSpec
from openapi_client.models.google_cloud_aiplatform_v1beta1_resource_pool import GoogleCloudAiplatformV1beta1ResourcePool
from openapi_client.models.google_cloud_aiplatform_v1beta1_resource_runtime import GoogleCloudAiplatformV1beta1ResourceRuntime
from openapi_client.models.google_cloud_aiplatform_v1beta1_resource_runtime_spec import GoogleCloudAiplatformV1beta1ResourceRuntimeSpec
from openapi_client.models.google_rpc_status import GoogleRpcStatus
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudAiplatformV1beta1PersistentResource(BaseModel):
    """
    Represents long-lasting resources that are dedicated to users to runs custom workloads. A PersistentResource can have multiple node pools and each node pool can have its own machine spec.
    """ # noqa: E501
    create_time: Optional[StrictStr] = Field(default=None, description="Output only. Time when the PersistentResource was created.", alias="createTime")
    display_name: Optional[StrictStr] = Field(default=None, description="Optional. The display name of the PersistentResource. The name can be up to 128 characters long and can consist of any UTF-8 characters.", alias="displayName")
    encryption_spec: Optional[GoogleCloudAiplatformV1beta1EncryptionSpec] = Field(default=None, alias="encryptionSpec")
    error: Optional[GoogleRpcStatus] = None
    labels: Optional[Dict[str, StrictStr]] = Field(default=None, description="Optional. The labels with user-defined metadata to organize PersistentResource. Label keys and values can be no longer than 64 characters (Unicode codepoints), can only contain lowercase letters, numeric characters, underscores and dashes. International characters are allowed. See https://goo.gl/xmQnxf for more information and examples of labels.")
    name: Optional[StrictStr] = Field(default=None, description="Immutable. Resource name of a PersistentResource.")
    network: Optional[StrictStr] = Field(default=None, description="Optional. The full name of the Compute Engine [network](/compute/docs/networks-and-firewalls#networks) to peered with Vertex AI to host the persistent resources. For example, `projects/12345/global/networks/myVPC`. [Format](/compute/docs/reference/rest/v1/networks/insert) is of the form `projects/{project}/global/networks/{network}`. Where {project} is a project number, as in `12345`, and {network} is a network name. To specify this field, you must have already [configured VPC Network Peering for Vertex AI](https://cloud.google.com/vertex-ai/docs/general/vpc-peering). If this field is left unspecified, the resources aren't peered with any network.")
    reserved_ip_ranges: Optional[List[StrictStr]] = Field(default=None, description="Optional. A list of names for the reserved IP ranges under the VPC network that can be used for this persistent resource. If set, we will deploy the persistent resource within the provided IP ranges. Otherwise, the persistent resource is deployed to any IP ranges under the provided VPC network. Example: ['vertex-ai-ip-range'].", alias="reservedIpRanges")
    resource_pools: Optional[List[GoogleCloudAiplatformV1beta1ResourcePool]] = Field(default=None, description="Required. The spec of the pools of different resources.", alias="resourcePools")
    resource_runtime: Optional[GoogleCloudAiplatformV1beta1ResourceRuntime] = Field(default=None, alias="resourceRuntime")
    resource_runtime_spec: Optional[GoogleCloudAiplatformV1beta1ResourceRuntimeSpec] = Field(default=None, alias="resourceRuntimeSpec")
    start_time: Optional[StrictStr] = Field(default=None, description="Output only. Time when the PersistentResource for the first time entered the `RUNNING` state.", alias="startTime")
    state: Optional[StrictStr] = Field(default=None, description="Output only. The detailed state of a Study.")
    update_time: Optional[StrictStr] = Field(default=None, description="Output only. Time when the PersistentResource was most recently updated.", alias="updateTime")
    __properties: ClassVar[List[str]] = ["createTime", "displayName", "encryptionSpec", "error", "labels", "name", "network", "reservedIpRanges", "resourcePools", "resourceRuntime", "resourceRuntimeSpec", "startTime", "state", "updateTime"]

    @field_validator('state')
    def state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['STATE_UNSPECIFIED', 'PROVISIONING', 'RUNNING', 'STOPPING', 'ERROR']):
            raise ValueError("must be one of enum values ('STATE_UNSPECIFIED', 'PROVISIONING', 'RUNNING', 'STOPPING', 'ERROR')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudAiplatformV1beta1PersistentResource from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "create_time",
            "start_time",
            "state",
            "update_time",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of encryption_spec
        if self.encryption_spec:
            _dict['encryptionSpec'] = self.encryption_spec.to_dict()
        # override the default output from pydantic by calling `to_dict()` of error
        if self.error:
            _dict['error'] = self.error.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in resource_pools (list)
        _items = []
        if self.resource_pools:
            for _item_resource_pools in self.resource_pools:
                if _item_resource_pools:
                    _items.append(_item_resource_pools.to_dict())
            _dict['resourcePools'] = _items
        # override the default output from pydantic by calling `to_dict()` of resource_runtime
        if self.resource_runtime:
            _dict['resourceRuntime'] = self.resource_runtime.to_dict()
        # override the default output from pydantic by calling `to_dict()` of resource_runtime_spec
        if self.resource_runtime_spec:
            _dict['resourceRuntimeSpec'] = self.resource_runtime_spec.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudAiplatformV1beta1PersistentResource from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "createTime": obj.get("createTime"),
            "displayName": obj.get("displayName"),
            "encryptionSpec": GoogleCloudAiplatformV1beta1EncryptionSpec.from_dict(obj["encryptionSpec"]) if obj.get("encryptionSpec") is not None else None,
            "error": GoogleRpcStatus.from_dict(obj["error"]) if obj.get("error") is not None else None,
            "labels": obj.get("labels"),
            "name": obj.get("name"),
            "network": obj.get("network"),
            "reservedIpRanges": obj.get("reservedIpRanges"),
            "resourcePools": [GoogleCloudAiplatformV1beta1ResourcePool.from_dict(_item) for _item in obj["resourcePools"]] if obj.get("resourcePools") is not None else None,
            "resourceRuntime": GoogleCloudAiplatformV1beta1ResourceRuntime.from_dict(obj["resourceRuntime"]) if obj.get("resourceRuntime") is not None else None,
            "resourceRuntimeSpec": GoogleCloudAiplatformV1beta1ResourceRuntimeSpec.from_dict(obj["resourceRuntimeSpec"]) if obj.get("resourceRuntimeSpec") is not None else None,
            "startTime": obj.get("startTime"),
            "state": obj.get("state"),
            "updateTime": obj.get("updateTime")
        })
        return _obj



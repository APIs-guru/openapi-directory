# coding: utf-8

"""
    Vertex AI API

    Train high-quality custom machine learning models with minimal machine learning expertise and effort.

    The version of the OpenAPI document: v1beta1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_cloud_aiplatform_v1beta1_search_model_deployment_monitoring_stats_anomalies_request_stats_anomalies_objective import GoogleCloudAiplatformV1beta1SearchModelDeploymentMonitoringStatsAnomaliesRequestStatsAnomaliesObjective
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudAiplatformV1beta1SearchModelDeploymentMonitoringStatsAnomaliesRequest(BaseModel):
    """
    Request message for JobService.SearchModelDeploymentMonitoringStatsAnomalies.
    """ # noqa: E501
    deployed_model_id: Optional[StrictStr] = Field(default=None, description="Required. The DeployedModel ID of the [ModelDeploymentMonitoringObjectiveConfig.deployed_model_id].", alias="deployedModelId")
    end_time: Optional[StrictStr] = Field(default=None, description="The latest timestamp of stats being generated. If not set, indicates feching stats till the latest possible one.", alias="endTime")
    feature_display_name: Optional[StrictStr] = Field(default=None, description="The feature display name. If specified, only return the stats belonging to this feature. Format: ModelMonitoringStatsAnomalies.FeatureHistoricStatsAnomalies.feature_display_name, example: \"user_destination\".", alias="featureDisplayName")
    objectives: Optional[List[GoogleCloudAiplatformV1beta1SearchModelDeploymentMonitoringStatsAnomaliesRequestStatsAnomaliesObjective]] = Field(default=None, description="Required. Objectives of the stats to retrieve.")
    page_size: Optional[StrictInt] = Field(default=None, description="The standard list page size.", alias="pageSize")
    page_token: Optional[StrictStr] = Field(default=None, description="A page token received from a previous JobService.SearchModelDeploymentMonitoringStatsAnomalies call.", alias="pageToken")
    start_time: Optional[StrictStr] = Field(default=None, description="The earliest timestamp of stats being generated. If not set, indicates fetching stats till the earliest possible one.", alias="startTime")
    __properties: ClassVar[List[str]] = ["deployedModelId", "endTime", "featureDisplayName", "objectives", "pageSize", "pageToken", "startTime"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudAiplatformV1beta1SearchModelDeploymentMonitoringStatsAnomaliesRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in objectives (list)
        _items = []
        if self.objectives:
            for _item_objectives in self.objectives:
                if _item_objectives:
                    _items.append(_item_objectives.to_dict())
            _dict['objectives'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudAiplatformV1beta1SearchModelDeploymentMonitoringStatsAnomaliesRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "deployedModelId": obj.get("deployedModelId"),
            "endTime": obj.get("endTime"),
            "featureDisplayName": obj.get("featureDisplayName"),
            "objectives": [GoogleCloudAiplatformV1beta1SearchModelDeploymentMonitoringStatsAnomaliesRequestStatsAnomaliesObjective.from_dict(_item) for _item in obj["objectives"]] if obj.get("objectives") is not None else None,
            "pageSize": obj.get("pageSize"),
            "pageToken": obj.get("pageToken"),
            "startTime": obj.get("startTime")
        })
        return _obj



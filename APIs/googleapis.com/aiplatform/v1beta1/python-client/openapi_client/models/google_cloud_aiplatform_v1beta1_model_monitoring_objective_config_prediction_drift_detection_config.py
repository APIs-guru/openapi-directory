# coding: utf-8

"""
    Vertex AI API

    Train high-quality custom machine learning models with minimal machine learning expertise and effort.

    The version of the OpenAPI document: v1beta1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_cloud_aiplatform_v1beta1_threshold_config import GoogleCloudAiplatformV1beta1ThresholdConfig
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudAiplatformV1beta1ModelMonitoringObjectiveConfigPredictionDriftDetectionConfig(BaseModel):
    """
    The config for Prediction data drift detection.
    """ # noqa: E501
    attribution_score_drift_thresholds: Optional[Dict[str, GoogleCloudAiplatformV1beta1ThresholdConfig]] = Field(default=None, description="Key is the feature name and value is the threshold. The threshold here is against attribution score distance between different time windows.", alias="attributionScoreDriftThresholds")
    default_drift_threshold: Optional[GoogleCloudAiplatformV1beta1ThresholdConfig] = Field(default=None, alias="defaultDriftThreshold")
    drift_thresholds: Optional[Dict[str, GoogleCloudAiplatformV1beta1ThresholdConfig]] = Field(default=None, description="Key is the feature name and value is the threshold. If a feature needs to be monitored for drift, a value threshold must be configured for that feature. The threshold here is against feature distribution distance between different time windws.", alias="driftThresholds")
    __properties: ClassVar[List[str]] = ["attributionScoreDriftThresholds", "defaultDriftThreshold", "driftThresholds"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudAiplatformV1beta1ModelMonitoringObjectiveConfigPredictionDriftDetectionConfig from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each value in attribution_score_drift_thresholds (dict)
        _field_dict = {}
        if self.attribution_score_drift_thresholds:
            for _key_attribution_score_drift_thresholds in self.attribution_score_drift_thresholds:
                if self.attribution_score_drift_thresholds[_key_attribution_score_drift_thresholds]:
                    _field_dict[_key_attribution_score_drift_thresholds] = self.attribution_score_drift_thresholds[_key_attribution_score_drift_thresholds].to_dict()
            _dict['attributionScoreDriftThresholds'] = _field_dict
        # override the default output from pydantic by calling `to_dict()` of default_drift_threshold
        if self.default_drift_threshold:
            _dict['defaultDriftThreshold'] = self.default_drift_threshold.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each value in drift_thresholds (dict)
        _field_dict = {}
        if self.drift_thresholds:
            for _key_drift_thresholds in self.drift_thresholds:
                if self.drift_thresholds[_key_drift_thresholds]:
                    _field_dict[_key_drift_thresholds] = self.drift_thresholds[_key_drift_thresholds].to_dict()
            _dict['driftThresholds'] = _field_dict
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudAiplatformV1beta1ModelMonitoringObjectiveConfigPredictionDriftDetectionConfig from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "attributionScoreDriftThresholds": dict(
                (_k, GoogleCloudAiplatformV1beta1ThresholdConfig.from_dict(_v))
                for _k, _v in obj["attributionScoreDriftThresholds"].items()
            )
            if obj.get("attributionScoreDriftThresholds") is not None
            else None,
            "defaultDriftThreshold": GoogleCloudAiplatformV1beta1ThresholdConfig.from_dict(obj["defaultDriftThreshold"]) if obj.get("defaultDriftThreshold") is not None else None,
            "driftThresholds": dict(
                (_k, GoogleCloudAiplatformV1beta1ThresholdConfig.from_dict(_v))
                for _k, _v in obj["driftThresholds"].items()
            )
            if obj.get("driftThresholds") is not None
            else None
        })
        return _obj



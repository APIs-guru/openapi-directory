# coding: utf-8

"""
    Vertex AI API

    Train high-quality custom machine learning models with minimal machine learning expertise and effort.

    The version of the OpenAPI document: v1beta1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_cloud_aiplatform_v1beta1_model_monitoring_objective_config_explanation_config import GoogleCloudAiplatformV1beta1ModelMonitoringObjectiveConfigExplanationConfig
from openapi_client.models.google_cloud_aiplatform_v1beta1_model_monitoring_objective_config_prediction_drift_detection_config import GoogleCloudAiplatformV1beta1ModelMonitoringObjectiveConfigPredictionDriftDetectionConfig
from openapi_client.models.google_cloud_aiplatform_v1beta1_model_monitoring_objective_config_training_dataset import GoogleCloudAiplatformV1beta1ModelMonitoringObjectiveConfigTrainingDataset
from openapi_client.models.google_cloud_aiplatform_v1beta1_model_monitoring_objective_config_training_prediction_skew_detection_config import GoogleCloudAiplatformV1beta1ModelMonitoringObjectiveConfigTrainingPredictionSkewDetectionConfig
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudAiplatformV1beta1ModelMonitoringObjectiveConfig(BaseModel):
    """
    The objective configuration for model monitoring, including the information needed to detect anomalies for one particular model.
    """ # noqa: E501
    explanation_config: Optional[GoogleCloudAiplatformV1beta1ModelMonitoringObjectiveConfigExplanationConfig] = Field(default=None, alias="explanationConfig")
    prediction_drift_detection_config: Optional[GoogleCloudAiplatformV1beta1ModelMonitoringObjectiveConfigPredictionDriftDetectionConfig] = Field(default=None, alias="predictionDriftDetectionConfig")
    training_dataset: Optional[GoogleCloudAiplatformV1beta1ModelMonitoringObjectiveConfigTrainingDataset] = Field(default=None, alias="trainingDataset")
    training_prediction_skew_detection_config: Optional[GoogleCloudAiplatformV1beta1ModelMonitoringObjectiveConfigTrainingPredictionSkewDetectionConfig] = Field(default=None, alias="trainingPredictionSkewDetectionConfig")
    __properties: ClassVar[List[str]] = ["explanationConfig", "predictionDriftDetectionConfig", "trainingDataset", "trainingPredictionSkewDetectionConfig"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudAiplatformV1beta1ModelMonitoringObjectiveConfig from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of explanation_config
        if self.explanation_config:
            _dict['explanationConfig'] = self.explanation_config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of prediction_drift_detection_config
        if self.prediction_drift_detection_config:
            _dict['predictionDriftDetectionConfig'] = self.prediction_drift_detection_config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of training_dataset
        if self.training_dataset:
            _dict['trainingDataset'] = self.training_dataset.to_dict()
        # override the default output from pydantic by calling `to_dict()` of training_prediction_skew_detection_config
        if self.training_prediction_skew_detection_config:
            _dict['trainingPredictionSkewDetectionConfig'] = self.training_prediction_skew_detection_config.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudAiplatformV1beta1ModelMonitoringObjectiveConfig from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "explanationConfig": GoogleCloudAiplatformV1beta1ModelMonitoringObjectiveConfigExplanationConfig.from_dict(obj["explanationConfig"]) if obj.get("explanationConfig") is not None else None,
            "predictionDriftDetectionConfig": GoogleCloudAiplatformV1beta1ModelMonitoringObjectiveConfigPredictionDriftDetectionConfig.from_dict(obj["predictionDriftDetectionConfig"]) if obj.get("predictionDriftDetectionConfig") is not None else None,
            "trainingDataset": GoogleCloudAiplatformV1beta1ModelMonitoringObjectiveConfigTrainingDataset.from_dict(obj["trainingDataset"]) if obj.get("trainingDataset") is not None else None,
            "trainingPredictionSkewDetectionConfig": GoogleCloudAiplatformV1beta1ModelMonitoringObjectiveConfigTrainingPredictionSkewDetectionConfig.from_dict(obj["trainingPredictionSkewDetectionConfig"]) if obj.get("trainingPredictionSkewDetectionConfig") is not None else None
        })
        return _obj



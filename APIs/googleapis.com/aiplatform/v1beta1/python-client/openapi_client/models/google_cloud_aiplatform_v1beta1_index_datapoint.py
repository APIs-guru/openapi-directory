# coding: utf-8

"""
    Vertex AI API

    Train high-quality custom machine learning models with minimal machine learning expertise and effort.

    The version of the OpenAPI document: v1beta1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from openapi_client.models.google_cloud_aiplatform_v1beta1_index_datapoint_crowding_tag import GoogleCloudAiplatformV1beta1IndexDatapointCrowdingTag
from openapi_client.models.google_cloud_aiplatform_v1beta1_index_datapoint_numeric_restriction import GoogleCloudAiplatformV1beta1IndexDatapointNumericRestriction
from openapi_client.models.google_cloud_aiplatform_v1beta1_index_datapoint_restriction import GoogleCloudAiplatformV1beta1IndexDatapointRestriction
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudAiplatformV1beta1IndexDatapoint(BaseModel):
    """
    A datapoint of Index.
    """ # noqa: E501
    crowding_tag: Optional[GoogleCloudAiplatformV1beta1IndexDatapointCrowdingTag] = Field(default=None, alias="crowdingTag")
    datapoint_id: Optional[StrictStr] = Field(default=None, description="Required. Unique identifier of the datapoint.", alias="datapointId")
    feature_vector: Optional[List[Union[StrictFloat, StrictInt]]] = Field(default=None, description="Required. Feature embedding vector. An array of numbers with the length of [NearestNeighborSearchConfig.dimensions].", alias="featureVector")
    numeric_restricts: Optional[List[GoogleCloudAiplatformV1beta1IndexDatapointNumericRestriction]] = Field(default=None, description="Optional. List of Restrict of the datapoint, used to perform \"restricted searches\" where boolean rule are used to filter the subset of the database eligible for matching. This uses numeric comparisons.", alias="numericRestricts")
    restricts: Optional[List[GoogleCloudAiplatformV1beta1IndexDatapointRestriction]] = Field(default=None, description="Optional. List of Restrict of the datapoint, used to perform \"restricted searches\" where boolean rule are used to filter the subset of the database eligible for matching. This uses categorical tokens. See: https://cloud.google.com/vertex-ai/docs/matching-engine/filtering")
    __properties: ClassVar[List[str]] = ["crowdingTag", "datapointId", "featureVector", "numericRestricts", "restricts"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudAiplatformV1beta1IndexDatapoint from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of crowding_tag
        if self.crowding_tag:
            _dict['crowdingTag'] = self.crowding_tag.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in numeric_restricts (list)
        _items = []
        if self.numeric_restricts:
            for _item_numeric_restricts in self.numeric_restricts:
                if _item_numeric_restricts:
                    _items.append(_item_numeric_restricts.to_dict())
            _dict['numericRestricts'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in restricts (list)
        _items = []
        if self.restricts:
            for _item_restricts in self.restricts:
                if _item_restricts:
                    _items.append(_item_restricts.to_dict())
            _dict['restricts'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudAiplatformV1beta1IndexDatapoint from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "crowdingTag": GoogleCloudAiplatformV1beta1IndexDatapointCrowdingTag.from_dict(obj["crowdingTag"]) if obj.get("crowdingTag") is not None else None,
            "datapointId": obj.get("datapointId"),
            "featureVector": obj.get("featureVector"),
            "numericRestricts": [GoogleCloudAiplatformV1beta1IndexDatapointNumericRestriction.from_dict(_item) for _item in obj["numericRestricts"]] if obj.get("numericRestricts") is not None else None,
            "restricts": [GoogleCloudAiplatformV1beta1IndexDatapointRestriction.from_dict(_item) for _item in obj["restricts"]] if obj.get("restricts") is not None else None
        })
        return _obj



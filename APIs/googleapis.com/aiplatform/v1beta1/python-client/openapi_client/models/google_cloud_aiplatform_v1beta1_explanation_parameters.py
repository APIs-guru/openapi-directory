# coding: utf-8

"""
    Vertex AI API

    Train high-quality custom machine learning models with minimal machine learning expertise and effort.

    The version of the OpenAPI document: v1beta1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_cloud_aiplatform_v1beta1_examples import GoogleCloudAiplatformV1beta1Examples
from openapi_client.models.google_cloud_aiplatform_v1beta1_integrated_gradients_attribution import GoogleCloudAiplatformV1beta1IntegratedGradientsAttribution
from openapi_client.models.google_cloud_aiplatform_v1beta1_sampled_shapley_attribution import GoogleCloudAiplatformV1beta1SampledShapleyAttribution
from openapi_client.models.google_cloud_aiplatform_v1beta1_xrai_attribution import GoogleCloudAiplatformV1beta1XraiAttribution
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudAiplatformV1beta1ExplanationParameters(BaseModel):
    """
    Parameters to configure explaining for Model's predictions.
    """ # noqa: E501
    examples: Optional[GoogleCloudAiplatformV1beta1Examples] = None
    integrated_gradients_attribution: Optional[GoogleCloudAiplatformV1beta1IntegratedGradientsAttribution] = Field(default=None, alias="integratedGradientsAttribution")
    output_indices: Optional[List[Any]] = Field(default=None, description="If populated, only returns attributions that have output_index contained in output_indices. It must be an ndarray of integers, with the same shape of the output it's explaining. If not populated, returns attributions for top_k indices of outputs. If neither top_k nor output_indices is populated, returns the argmax index of the outputs. Only applicable to Models that predict multiple outputs (e,g, multi-class Models that predict multiple classes).", alias="outputIndices")
    sampled_shapley_attribution: Optional[GoogleCloudAiplatformV1beta1SampledShapleyAttribution] = Field(default=None, alias="sampledShapleyAttribution")
    top_k: Optional[StrictInt] = Field(default=None, description="If populated, returns attributions for top K indices of outputs (defaults to 1). Only applies to Models that predicts more than one outputs (e,g, multi-class Models). When set to -1, returns explanations for all outputs.", alias="topK")
    xrai_attribution: Optional[GoogleCloudAiplatformV1beta1XraiAttribution] = Field(default=None, alias="xraiAttribution")
    __properties: ClassVar[List[str]] = ["examples", "integratedGradientsAttribution", "outputIndices", "sampledShapleyAttribution", "topK", "xraiAttribution"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudAiplatformV1beta1ExplanationParameters from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of examples
        if self.examples:
            _dict['examples'] = self.examples.to_dict()
        # override the default output from pydantic by calling `to_dict()` of integrated_gradients_attribution
        if self.integrated_gradients_attribution:
            _dict['integratedGradientsAttribution'] = self.integrated_gradients_attribution.to_dict()
        # override the default output from pydantic by calling `to_dict()` of sampled_shapley_attribution
        if self.sampled_shapley_attribution:
            _dict['sampledShapleyAttribution'] = self.sampled_shapley_attribution.to_dict()
        # override the default output from pydantic by calling `to_dict()` of xrai_attribution
        if self.xrai_attribution:
            _dict['xraiAttribution'] = self.xrai_attribution.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudAiplatformV1beta1ExplanationParameters from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "examples": GoogleCloudAiplatformV1beta1Examples.from_dict(obj["examples"]) if obj.get("examples") is not None else None,
            "integratedGradientsAttribution": GoogleCloudAiplatformV1beta1IntegratedGradientsAttribution.from_dict(obj["integratedGradientsAttribution"]) if obj.get("integratedGradientsAttribution") is not None else None,
            "outputIndices": obj.get("outputIndices"),
            "sampledShapleyAttribution": GoogleCloudAiplatformV1beta1SampledShapleyAttribution.from_dict(obj["sampledShapleyAttribution"]) if obj.get("sampledShapleyAttribution") is not None else None,
            "topK": obj.get("topK"),
            "xraiAttribution": GoogleCloudAiplatformV1beta1XraiAttribution.from_dict(obj["xraiAttribution"]) if obj.get("xraiAttribution") is not None else None
        })
        return _obj



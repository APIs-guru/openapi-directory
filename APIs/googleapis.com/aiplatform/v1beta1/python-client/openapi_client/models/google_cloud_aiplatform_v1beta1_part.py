# coding: utf-8

"""
    Vertex AI API

    Train high-quality custom machine learning models with minimal machine learning expertise and effort.

    The version of the OpenAPI document: v1beta1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_cloud_aiplatform_v1beta1_blob import GoogleCloudAiplatformV1beta1Blob
from openapi_client.models.google_cloud_aiplatform_v1beta1_file_data import GoogleCloudAiplatformV1beta1FileData
from openapi_client.models.google_cloud_aiplatform_v1beta1_function_call import GoogleCloudAiplatformV1beta1FunctionCall
from openapi_client.models.google_cloud_aiplatform_v1beta1_function_response import GoogleCloudAiplatformV1beta1FunctionResponse
from openapi_client.models.google_cloud_aiplatform_v1beta1_video_metadata import GoogleCloudAiplatformV1beta1VideoMetadata
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudAiplatformV1beta1Part(BaseModel):
    """
    A datatype containing media that is part of a multi-part `Content` message. A `Part` consists of data which has an associated datatype. A `Part` can only contain one of the accepted types in `Part.data`. A `Part` must have a fixed IANA MIME type identifying the type and subtype of the media if `inline_data` or `file_data` field is filled with raw bytes.
    """ # noqa: E501
    file_data: Optional[GoogleCloudAiplatformV1beta1FileData] = Field(default=None, alias="fileData")
    function_call: Optional[GoogleCloudAiplatformV1beta1FunctionCall] = Field(default=None, alias="functionCall")
    function_response: Optional[GoogleCloudAiplatformV1beta1FunctionResponse] = Field(default=None, alias="functionResponse")
    inline_data: Optional[GoogleCloudAiplatformV1beta1Blob] = Field(default=None, alias="inlineData")
    text: Optional[StrictStr] = Field(default=None, description="Optional. Text part (can be code).")
    video_metadata: Optional[GoogleCloudAiplatformV1beta1VideoMetadata] = Field(default=None, alias="videoMetadata")
    __properties: ClassVar[List[str]] = ["fileData", "functionCall", "functionResponse", "inlineData", "text", "videoMetadata"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudAiplatformV1beta1Part from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of file_data
        if self.file_data:
            _dict['fileData'] = self.file_data.to_dict()
        # override the default output from pydantic by calling `to_dict()` of function_call
        if self.function_call:
            _dict['functionCall'] = self.function_call.to_dict()
        # override the default output from pydantic by calling `to_dict()` of function_response
        if self.function_response:
            _dict['functionResponse'] = self.function_response.to_dict()
        # override the default output from pydantic by calling `to_dict()` of inline_data
        if self.inline_data:
            _dict['inlineData'] = self.inline_data.to_dict()
        # override the default output from pydantic by calling `to_dict()` of video_metadata
        if self.video_metadata:
            _dict['videoMetadata'] = self.video_metadata.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudAiplatformV1beta1Part from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "fileData": GoogleCloudAiplatformV1beta1FileData.from_dict(obj["fileData"]) if obj.get("fileData") is not None else None,
            "functionCall": GoogleCloudAiplatformV1beta1FunctionCall.from_dict(obj["functionCall"]) if obj.get("functionCall") is not None else None,
            "functionResponse": GoogleCloudAiplatformV1beta1FunctionResponse.from_dict(obj["functionResponse"]) if obj.get("functionResponse") is not None else None,
            "inlineData": GoogleCloudAiplatformV1beta1Blob.from_dict(obj["inlineData"]) if obj.get("inlineData") is not None else None,
            "text": obj.get("text"),
            "videoMetadata": GoogleCloudAiplatformV1beta1VideoMetadata.from_dict(obj["videoMetadata"]) if obj.get("videoMetadata") is not None else None
        })
        return _obj



# coding: utf-8

"""
    Vertex AI API

    Train high-quality custom machine learning models with minimal machine learning expertise and effort.

    The version of the OpenAPI document: v1beta1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_cloud_aiplatform_v1beta1_machine_spec import GoogleCloudAiplatformV1beta1MachineSpec
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudAiplatformV1beta1BatchDedicatedResources(BaseModel):
    """
    A description of resources that are used for performing batch operations, are dedicated to a Model, and need manual configuration.
    """ # noqa: E501
    machine_spec: Optional[GoogleCloudAiplatformV1beta1MachineSpec] = Field(default=None, alias="machineSpec")
    max_replica_count: Optional[StrictInt] = Field(default=None, description="Immutable. The maximum number of machine replicas the batch operation may be scaled to. The default value is 10.", alias="maxReplicaCount")
    starting_replica_count: Optional[StrictInt] = Field(default=None, description="Immutable. The number of machine replicas used at the start of the batch operation. If not set, Vertex AI decides starting number, not greater than max_replica_count", alias="startingReplicaCount")
    __properties: ClassVar[List[str]] = ["machineSpec", "maxReplicaCount", "startingReplicaCount"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudAiplatformV1beta1BatchDedicatedResources from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of machine_spec
        if self.machine_spec:
            _dict['machineSpec'] = self.machine_spec.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudAiplatformV1beta1BatchDedicatedResources from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "machineSpec": GoogleCloudAiplatformV1beta1MachineSpec.from_dict(obj["machineSpec"]) if obj.get("machineSpec") is not None else None,
            "maxReplicaCount": obj.get("maxReplicaCount"),
            "startingReplicaCount": obj.get("startingReplicaCount")
        })
        return _obj



# coding: utf-8

"""
    Vertex AI API

    Train high-quality custom machine learning models with minimal machine learning expertise and effort.

    The version of the OpenAPI document: v1beta1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_cloud_aiplatform_v1beta1_feature_online_store_bigtable import GoogleCloudAiplatformV1beta1FeatureOnlineStoreBigtable
from openapi_client.models.google_cloud_aiplatform_v1beta1_feature_online_store_dedicated_serving_endpoint import GoogleCloudAiplatformV1beta1FeatureOnlineStoreDedicatedServingEndpoint
from openapi_client.models.google_cloud_aiplatform_v1beta1_feature_online_store_embedding_management import GoogleCloudAiplatformV1beta1FeatureOnlineStoreEmbeddingManagement
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudAiplatformV1beta1FeatureOnlineStore(BaseModel):
    """
    Vertex AI Feature Online Store provides a centralized repository for serving ML features and embedding indexes at low latency. The Feature Online Store is a top-level container.
    """ # noqa: E501
    bigtable: Optional[GoogleCloudAiplatformV1beta1FeatureOnlineStoreBigtable] = None
    create_time: Optional[StrictStr] = Field(default=None, description="Output only. Timestamp when this FeatureOnlineStore was created.", alias="createTime")
    dedicated_serving_endpoint: Optional[GoogleCloudAiplatformV1beta1FeatureOnlineStoreDedicatedServingEndpoint] = Field(default=None, alias="dedicatedServingEndpoint")
    embedding_management: Optional[GoogleCloudAiplatformV1beta1FeatureOnlineStoreEmbeddingManagement] = Field(default=None, alias="embeddingManagement")
    etag: Optional[StrictStr] = Field(default=None, description="Optional. Used to perform consistent read-modify-write updates. If not set, a blind \"overwrite\" update happens.")
    labels: Optional[Dict[str, StrictStr]] = Field(default=None, description="Optional. The labels with user-defined metadata to organize your FeatureOnlineStore. Label keys and values can be no longer than 64 characters (Unicode codepoints), can only contain lowercase letters, numeric characters, underscores and dashes. International characters are allowed. See https://goo.gl/xmQnxf for more information on and examples of labels. No more than 64 user labels can be associated with one FeatureOnlineStore(System labels are excluded).\" System reserved label keys are prefixed with \"aiplatform.googleapis.com/\" and are immutable.")
    name: Optional[StrictStr] = Field(default=None, description="Identifier. Name of the FeatureOnlineStore. Format: `projects/{project}/locations/{location}/featureOnlineStores/{featureOnlineStore}`")
    optimized: Optional[Dict[str, Any]] = Field(default=None, description="Optimized storage type")
    state: Optional[StrictStr] = Field(default=None, description="Output only. State of the featureOnlineStore.")
    update_time: Optional[StrictStr] = Field(default=None, description="Output only. Timestamp when this FeatureOnlineStore was last updated.", alias="updateTime")
    __properties: ClassVar[List[str]] = ["bigtable", "createTime", "dedicatedServingEndpoint", "embeddingManagement", "etag", "labels", "name", "optimized", "state", "updateTime"]

    @field_validator('state')
    def state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['STATE_UNSPECIFIED', 'STABLE', 'UPDATING']):
            raise ValueError("must be one of enum values ('STATE_UNSPECIFIED', 'STABLE', 'UPDATING')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudAiplatformV1beta1FeatureOnlineStore from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "create_time",
            "state",
            "update_time",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of bigtable
        if self.bigtable:
            _dict['bigtable'] = self.bigtable.to_dict()
        # override the default output from pydantic by calling `to_dict()` of dedicated_serving_endpoint
        if self.dedicated_serving_endpoint:
            _dict['dedicatedServingEndpoint'] = self.dedicated_serving_endpoint.to_dict()
        # override the default output from pydantic by calling `to_dict()` of embedding_management
        if self.embedding_management:
            _dict['embeddingManagement'] = self.embedding_management.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudAiplatformV1beta1FeatureOnlineStore from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "bigtable": GoogleCloudAiplatformV1beta1FeatureOnlineStoreBigtable.from_dict(obj["bigtable"]) if obj.get("bigtable") is not None else None,
            "createTime": obj.get("createTime"),
            "dedicatedServingEndpoint": GoogleCloudAiplatformV1beta1FeatureOnlineStoreDedicatedServingEndpoint.from_dict(obj["dedicatedServingEndpoint"]) if obj.get("dedicatedServingEndpoint") is not None else None,
            "embeddingManagement": GoogleCloudAiplatformV1beta1FeatureOnlineStoreEmbeddingManagement.from_dict(obj["embeddingManagement"]) if obj.get("embeddingManagement") is not None else None,
            "etag": obj.get("etag"),
            "labels": obj.get("labels"),
            "name": obj.get("name"),
            "optimized": obj.get("optimized"),
            "state": obj.get("state"),
            "updateTime": obj.get("updateTime")
        })
        return _obj



# coding: utf-8

"""
    Vertex AI API

    Train high-quality custom machine learning models with minimal machine learning expertise and effort.

    The version of the OpenAPI document: v1beta1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_cloud_aiplatform_v1beta1_active_learning_config import GoogleCloudAiplatformV1beta1ActiveLearningConfig
from openapi_client.models.google_cloud_aiplatform_v1beta1_encryption_spec import GoogleCloudAiplatformV1beta1EncryptionSpec
from openapi_client.models.google_rpc_status import GoogleRpcStatus
from openapi_client.models.google_type_money import GoogleTypeMoney
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudAiplatformV1beta1DataLabelingJob(BaseModel):
    """
    DataLabelingJob is used to trigger a human labeling job on unlabeled data from the following Dataset:
    """ # noqa: E501
    active_learning_config: Optional[GoogleCloudAiplatformV1beta1ActiveLearningConfig] = Field(default=None, alias="activeLearningConfig")
    annotation_labels: Optional[Dict[str, StrictStr]] = Field(default=None, description="Labels to assign to annotations generated by this DataLabelingJob. Label keys and values can be no longer than 64 characters (Unicode codepoints), can only contain lowercase letters, numeric characters, underscores and dashes. International characters are allowed. See https://goo.gl/xmQnxf for more information and examples of labels. System reserved label keys are prefixed with \"aiplatform.googleapis.com/\" and are immutable.", alias="annotationLabels")
    create_time: Optional[StrictStr] = Field(default=None, description="Output only. Timestamp when this DataLabelingJob was created.", alias="createTime")
    current_spend: Optional[GoogleTypeMoney] = Field(default=None, alias="currentSpend")
    datasets: Optional[List[StrictStr]] = Field(default=None, description="Required. Dataset resource names. Right now we only support labeling from a single Dataset. Format: `projects/{project}/locations/{location}/datasets/{dataset}`")
    display_name: Optional[StrictStr] = Field(default=None, description="Required. The user-defined name of the DataLabelingJob. The name can be up to 128 characters long and can consist of any UTF-8 characters. Display name of a DataLabelingJob.", alias="displayName")
    encryption_spec: Optional[GoogleCloudAiplatformV1beta1EncryptionSpec] = Field(default=None, alias="encryptionSpec")
    error: Optional[GoogleRpcStatus] = None
    inputs: Optional[Any] = Field(default=None, description="Required. Input config parameters for the DataLabelingJob.")
    inputs_schema_uri: Optional[StrictStr] = Field(default=None, description="Required. Points to a YAML file stored on Google Cloud Storage describing the config for a specific type of DataLabelingJob. The schema files that can be used here are found in the https://storage.googleapis.com/google-cloud-aiplatform bucket in the /schema/datalabelingjob/inputs/ folder.", alias="inputsSchemaUri")
    instruction_uri: Optional[StrictStr] = Field(default=None, description="Required. The Google Cloud Storage location of the instruction pdf. This pdf is shared with labelers, and provides detailed description on how to label DataItems in Datasets.", alias="instructionUri")
    labeler_count: Optional[StrictInt] = Field(default=None, description="Required. Number of labelers to work on each DataItem.", alias="labelerCount")
    labeling_progress: Optional[StrictInt] = Field(default=None, description="Output only. Current labeling job progress percentage scaled in interval [0, 100], indicating the percentage of DataItems that has been finished.", alias="labelingProgress")
    labels: Optional[Dict[str, StrictStr]] = Field(default=None, description="The labels with user-defined metadata to organize your DataLabelingJobs. Label keys and values can be no longer than 64 characters (Unicode codepoints), can only contain lowercase letters, numeric characters, underscores and dashes. International characters are allowed. See https://goo.gl/xmQnxf for more information and examples of labels. System reserved label keys are prefixed with \"aiplatform.googleapis.com/\" and are immutable. Following system labels exist for each DataLabelingJob: * \"aiplatform.googleapis.com/schema\": output only, its value is the inputs_schema's title.")
    name: Optional[StrictStr] = Field(default=None, description="Output only. Resource name of the DataLabelingJob.")
    specialist_pools: Optional[List[StrictStr]] = Field(default=None, description="The SpecialistPools' resource names associated with this job.", alias="specialistPools")
    state: Optional[StrictStr] = Field(default=None, description="Output only. The detailed state of the job.")
    update_time: Optional[StrictStr] = Field(default=None, description="Output only. Timestamp when this DataLabelingJob was updated most recently.", alias="updateTime")
    __properties: ClassVar[List[str]] = ["activeLearningConfig", "annotationLabels", "createTime", "currentSpend", "datasets", "displayName", "encryptionSpec", "error", "inputs", "inputsSchemaUri", "instructionUri", "labelerCount", "labelingProgress", "labels", "name", "specialistPools", "state", "updateTime"]

    @field_validator('state')
    def state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['JOB_STATE_UNSPECIFIED', 'JOB_STATE_QUEUED', 'JOB_STATE_PENDING', 'JOB_STATE_RUNNING', 'JOB_STATE_SUCCEEDED', 'JOB_STATE_FAILED', 'JOB_STATE_CANCELLING', 'JOB_STATE_CANCELLED', 'JOB_STATE_PAUSED', 'JOB_STATE_EXPIRED', 'JOB_STATE_UPDATING', 'JOB_STATE_PARTIALLY_SUCCEEDED']):
            raise ValueError("must be one of enum values ('JOB_STATE_UNSPECIFIED', 'JOB_STATE_QUEUED', 'JOB_STATE_PENDING', 'JOB_STATE_RUNNING', 'JOB_STATE_SUCCEEDED', 'JOB_STATE_FAILED', 'JOB_STATE_CANCELLING', 'JOB_STATE_CANCELLED', 'JOB_STATE_PAUSED', 'JOB_STATE_EXPIRED', 'JOB_STATE_UPDATING', 'JOB_STATE_PARTIALLY_SUCCEEDED')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudAiplatformV1beta1DataLabelingJob from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "create_time",
            "labeling_progress",
            "name",
            "state",
            "update_time",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of active_learning_config
        if self.active_learning_config:
            _dict['activeLearningConfig'] = self.active_learning_config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of current_spend
        if self.current_spend:
            _dict['currentSpend'] = self.current_spend.to_dict()
        # override the default output from pydantic by calling `to_dict()` of encryption_spec
        if self.encryption_spec:
            _dict['encryptionSpec'] = self.encryption_spec.to_dict()
        # override the default output from pydantic by calling `to_dict()` of error
        if self.error:
            _dict['error'] = self.error.to_dict()
        # set to None if inputs (nullable) is None
        # and model_fields_set contains the field
        if self.inputs is None and "inputs" in self.model_fields_set:
            _dict['inputs'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudAiplatformV1beta1DataLabelingJob from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "activeLearningConfig": GoogleCloudAiplatformV1beta1ActiveLearningConfig.from_dict(obj["activeLearningConfig"]) if obj.get("activeLearningConfig") is not None else None,
            "annotationLabels": obj.get("annotationLabels"),
            "createTime": obj.get("createTime"),
            "currentSpend": GoogleTypeMoney.from_dict(obj["currentSpend"]) if obj.get("currentSpend") is not None else None,
            "datasets": obj.get("datasets"),
            "displayName": obj.get("displayName"),
            "encryptionSpec": GoogleCloudAiplatformV1beta1EncryptionSpec.from_dict(obj["encryptionSpec"]) if obj.get("encryptionSpec") is not None else None,
            "error": GoogleRpcStatus.from_dict(obj["error"]) if obj.get("error") is not None else None,
            "inputs": obj.get("inputs"),
            "inputsSchemaUri": obj.get("inputsSchemaUri"),
            "instructionUri": obj.get("instructionUri"),
            "labelerCount": obj.get("labelerCount"),
            "labelingProgress": obj.get("labelingProgress"),
            "labels": obj.get("labels"),
            "name": obj.get("name"),
            "specialistPools": obj.get("specialistPools"),
            "state": obj.get("state"),
            "updateTime": obj.get("updateTime")
        })
        return _obj



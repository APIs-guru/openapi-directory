# coding: utf-8

"""
    Vertex AI API

    Train high-quality custom machine learning models with minimal machine learning expertise and effort.

    The version of the OpenAPI document: v1beta1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_cloud_aiplatform_v1beta1_automatic_resources import GoogleCloudAiplatformV1beta1AutomaticResources
from openapi_client.models.google_cloud_aiplatform_v1beta1_dedicated_resources import GoogleCloudAiplatformV1beta1DedicatedResources
from openapi_client.models.google_cloud_aiplatform_v1beta1_deployed_index_auth_config import GoogleCloudAiplatformV1beta1DeployedIndexAuthConfig
from openapi_client.models.google_cloud_aiplatform_v1beta1_index_private_endpoints import GoogleCloudAiplatformV1beta1IndexPrivateEndpoints
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudAiplatformV1beta1DeployedIndex(BaseModel):
    """
    A deployment of an Index. IndexEndpoints contain one or more DeployedIndexes.
    """ # noqa: E501
    automatic_resources: Optional[GoogleCloudAiplatformV1beta1AutomaticResources] = Field(default=None, alias="automaticResources")
    create_time: Optional[StrictStr] = Field(default=None, description="Output only. Timestamp when the DeployedIndex was created.", alias="createTime")
    dedicated_resources: Optional[GoogleCloudAiplatformV1beta1DedicatedResources] = Field(default=None, alias="dedicatedResources")
    deployed_index_auth_config: Optional[GoogleCloudAiplatformV1beta1DeployedIndexAuthConfig] = Field(default=None, alias="deployedIndexAuthConfig")
    deployment_group: Optional[StrictStr] = Field(default=None, description="Optional. The deployment group can be no longer than 64 characters (eg: 'test', 'prod'). If not set, we will use the 'default' deployment group. Creating `deployment_groups` with `reserved_ip_ranges` is a recommended practice when the peered network has multiple peering ranges. This creates your deployments from predictable IP spaces for easier traffic administration. Also, one deployment_group (except 'default') can only be used with the same reserved_ip_ranges which means if the deployment_group has been used with reserved_ip_ranges: [a, b, c], using it with [a, b] or [d, e] is disallowed. Note: we only support up to 5 deployment groups(not including 'default').", alias="deploymentGroup")
    display_name: Optional[StrictStr] = Field(default=None, description="The display name of the DeployedIndex. If not provided upon creation, the Index's display_name is used.", alias="displayName")
    enable_access_logging: Optional[StrictBool] = Field(default=None, description="Optional. If true, private endpoint's access logs are sent to Cloud Logging. These logs are like standard server access logs, containing information like timestamp and latency for each MatchRequest. Note that logs may incur a cost, especially if the deployed index receives a high queries per second rate (QPS). Estimate your costs before enabling this option.", alias="enableAccessLogging")
    id: Optional[StrictStr] = Field(default=None, description="Required. The user specified ID of the DeployedIndex. The ID can be up to 128 characters long and must start with a letter and only contain letters, numbers, and underscores. The ID must be unique within the project it is created in.")
    index: Optional[StrictStr] = Field(default=None, description="Required. The name of the Index this is the deployment of. We may refer to this Index as the DeployedIndex's \"original\" Index.")
    index_sync_time: Optional[StrictStr] = Field(default=None, description="Output only. The DeployedIndex may depend on various data on its original Index. Additionally when certain changes to the original Index are being done (e.g. when what the Index contains is being changed) the DeployedIndex may be asynchronously updated in the background to reflect these changes. If this timestamp's value is at least the Index.update_time of the original Index, it means that this DeployedIndex and the original Index are in sync. If this timestamp is older, then to see which updates this DeployedIndex already contains (and which it does not), one must list the operations that are running on the original Index. Only the successfully completed Operations with update_time equal or before this sync time are contained in this DeployedIndex.", alias="indexSyncTime")
    private_endpoints: Optional[GoogleCloudAiplatformV1beta1IndexPrivateEndpoints] = Field(default=None, alias="privateEndpoints")
    reserved_ip_ranges: Optional[List[StrictStr]] = Field(default=None, description="Optional. A list of reserved ip ranges under the VPC network that can be used for this DeployedIndex. If set, we will deploy the index within the provided ip ranges. Otherwise, the index might be deployed to any ip ranges under the provided VPC network. The value should be the name of the address (https://cloud.google.com/compute/docs/reference/rest/v1/addresses) Example: ['vertex-ai-ip-range']. For more information about subnets and network IP ranges, please see https://cloud.google.com/vpc/docs/subnets#manually_created_subnet_ip_ranges.", alias="reservedIpRanges")
    __properties: ClassVar[List[str]] = ["automaticResources", "createTime", "dedicatedResources", "deployedIndexAuthConfig", "deploymentGroup", "displayName", "enableAccessLogging", "id", "index", "indexSyncTime", "privateEndpoints", "reservedIpRanges"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudAiplatformV1beta1DeployedIndex from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "create_time",
            "index_sync_time",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of automatic_resources
        if self.automatic_resources:
            _dict['automaticResources'] = self.automatic_resources.to_dict()
        # override the default output from pydantic by calling `to_dict()` of dedicated_resources
        if self.dedicated_resources:
            _dict['dedicatedResources'] = self.dedicated_resources.to_dict()
        # override the default output from pydantic by calling `to_dict()` of deployed_index_auth_config
        if self.deployed_index_auth_config:
            _dict['deployedIndexAuthConfig'] = self.deployed_index_auth_config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of private_endpoints
        if self.private_endpoints:
            _dict['privateEndpoints'] = self.private_endpoints.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudAiplatformV1beta1DeployedIndex from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "automaticResources": GoogleCloudAiplatformV1beta1AutomaticResources.from_dict(obj["automaticResources"]) if obj.get("automaticResources") is not None else None,
            "createTime": obj.get("createTime"),
            "dedicatedResources": GoogleCloudAiplatformV1beta1DedicatedResources.from_dict(obj["dedicatedResources"]) if obj.get("dedicatedResources") is not None else None,
            "deployedIndexAuthConfig": GoogleCloudAiplatformV1beta1DeployedIndexAuthConfig.from_dict(obj["deployedIndexAuthConfig"]) if obj.get("deployedIndexAuthConfig") is not None else None,
            "deploymentGroup": obj.get("deploymentGroup"),
            "displayName": obj.get("displayName"),
            "enableAccessLogging": obj.get("enableAccessLogging"),
            "id": obj.get("id"),
            "index": obj.get("index"),
            "indexSyncTime": obj.get("indexSyncTime"),
            "privateEndpoints": GoogleCloudAiplatformV1beta1IndexPrivateEndpoints.from_dict(obj["privateEndpoints"]) if obj.get("privateEndpoints") is not None else None,
            "reservedIpRanges": obj.get("reservedIpRanges")
        })
        return _obj



# coding: utf-8

"""
    Vertex AI API

    Train high-quality custom machine learning models with minimal machine learning expertise and effort.

    The version of the OpenAPI document: v1beta1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_cloud_aiplatform_v1beta1_env_var import GoogleCloudAiplatformV1beta1EnvVar
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudAiplatformV1beta1PythonPackageSpec(BaseModel):
    """
    The spec of a Python packaged code.
    """ # noqa: E501
    args: Optional[List[StrictStr]] = Field(default=None, description="Command line arguments to be passed to the Python task.")
    env: Optional[List[GoogleCloudAiplatformV1beta1EnvVar]] = Field(default=None, description="Environment variables to be passed to the python module. Maximum limit is 100.")
    executor_image_uri: Optional[StrictStr] = Field(default=None, description="Required. The URI of a container image in Artifact Registry that will run the provided Python package. Vertex AI provides a wide range of executor images with pre-installed packages to meet users' various use cases. See the list of [pre-built containers for training](https://cloud.google.com/vertex-ai/docs/training/pre-built-containers). You must use an image from this list.", alias="executorImageUri")
    package_uris: Optional[List[StrictStr]] = Field(default=None, description="Required. The Google Cloud Storage location of the Python package files which are the training program and its dependent packages. The maximum number of package URIs is 100.", alias="packageUris")
    python_module: Optional[StrictStr] = Field(default=None, description="Required. The Python module name to run after installing the packages.", alias="pythonModule")
    __properties: ClassVar[List[str]] = ["args", "env", "executorImageUri", "packageUris", "pythonModule"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudAiplatformV1beta1PythonPackageSpec from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in env (list)
        _items = []
        if self.env:
            for _item_env in self.env:
                if _item_env:
                    _items.append(_item_env.to_dict())
            _dict['env'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudAiplatformV1beta1PythonPackageSpec from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "args": obj.get("args"),
            "env": [GoogleCloudAiplatformV1beta1EnvVar.from_dict(_item) for _item in obj["env"]] if obj.get("env") is not None else None,
            "executorImageUri": obj.get("executorImageUri"),
            "packageUris": obj.get("packageUris"),
            "pythonModule": obj.get("pythonModule")
        })
        return _obj



# coding: utf-8

"""
    Vertex AI API

    Train high-quality custom machine learning models with minimal machine learning expertise and effort.

    The version of the OpenAPI document: v1beta1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_cloud_aiplatform_v1beta1_predict_schemata import GoogleCloudAiplatformV1beta1PredictSchemata
from openapi_client.models.google_cloud_aiplatform_v1beta1_publisher_model_call_to_action import GoogleCloudAiplatformV1beta1PublisherModelCallToAction
from openapi_client.models.google_cloud_aiplatform_v1beta1_publisher_model_parent import GoogleCloudAiplatformV1beta1PublisherModelParent
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudAiplatformV1beta1PublisherModel(BaseModel):
    """
    A Model Garden Publisher Model.
    """ # noqa: E501
    frameworks: Optional[List[StrictStr]] = Field(default=None, description="Optional. Additional information about the model's Frameworks.")
    launch_stage: Optional[StrictStr] = Field(default=None, description="Optional. Indicates the launch stage of the model.", alias="launchStage")
    name: Optional[StrictStr] = Field(default=None, description="Output only. The resource name of the PublisherModel.")
    open_source_category: Optional[StrictStr] = Field(default=None, description="Required. Indicates the open source category of the publisher model.", alias="openSourceCategory")
    parent: Optional[GoogleCloudAiplatformV1beta1PublisherModelParent] = None
    predict_schemata: Optional[GoogleCloudAiplatformV1beta1PredictSchemata] = Field(default=None, alias="predictSchemata")
    publisher_model_template: Optional[StrictStr] = Field(default=None, description="Optional. Output only. Immutable. Used to indicate this model has a publisher model and provide the template of the publisher model resource name.", alias="publisherModelTemplate")
    supported_actions: Optional[GoogleCloudAiplatformV1beta1PublisherModelCallToAction] = Field(default=None, alias="supportedActions")
    version_id: Optional[StrictStr] = Field(default=None, description="Output only. Immutable. The version ID of the PublisherModel. A new version is committed when a new model version is uploaded under an existing model id. It is an auto-incrementing decimal number in string representation.", alias="versionId")
    version_state: Optional[StrictStr] = Field(default=None, description="Optional. Indicates the state of the model version.", alias="versionState")
    __properties: ClassVar[List[str]] = ["frameworks", "launchStage", "name", "openSourceCategory", "parent", "predictSchemata", "publisherModelTemplate", "supportedActions", "versionId", "versionState"]

    @field_validator('launch_stage')
    def launch_stage_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['LAUNCH_STAGE_UNSPECIFIED', 'DOGFOOD', 'EXPERIMENTAL', 'PRIVATE_PREVIEW', 'PUBLIC_PREVIEW', 'GA']):
            raise ValueError("must be one of enum values ('LAUNCH_STAGE_UNSPECIFIED', 'DOGFOOD', 'EXPERIMENTAL', 'PRIVATE_PREVIEW', 'PUBLIC_PREVIEW', 'GA')")
        return value

    @field_validator('open_source_category')
    def open_source_category_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['OPEN_SOURCE_CATEGORY_UNSPECIFIED', 'PROPRIETARY', 'GOOGLE_OWNED_OSS_WITH_GOOGLE_CHECKPOINT', 'THIRD_PARTY_OWNED_OSS_WITH_GOOGLE_CHECKPOINT', 'GOOGLE_OWNED_OSS', 'THIRD_PARTY_OWNED_OSS']):
            raise ValueError("must be one of enum values ('OPEN_SOURCE_CATEGORY_UNSPECIFIED', 'PROPRIETARY', 'GOOGLE_OWNED_OSS_WITH_GOOGLE_CHECKPOINT', 'THIRD_PARTY_OWNED_OSS_WITH_GOOGLE_CHECKPOINT', 'GOOGLE_OWNED_OSS', 'THIRD_PARTY_OWNED_OSS')")
        return value

    @field_validator('version_state')
    def version_state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['VERSION_STATE_UNSPECIFIED', 'VERSION_STATE_STABLE', 'VERSION_STATE_UNSTABLE']):
            raise ValueError("must be one of enum values ('VERSION_STATE_UNSPECIFIED', 'VERSION_STATE_STABLE', 'VERSION_STATE_UNSTABLE')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudAiplatformV1beta1PublisherModel from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "name",
            "publisher_model_template",
            "version_id",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of parent
        if self.parent:
            _dict['parent'] = self.parent.to_dict()
        # override the default output from pydantic by calling `to_dict()` of predict_schemata
        if self.predict_schemata:
            _dict['predictSchemata'] = self.predict_schemata.to_dict()
        # override the default output from pydantic by calling `to_dict()` of supported_actions
        if self.supported_actions:
            _dict['supportedActions'] = self.supported_actions.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudAiplatformV1beta1PublisherModel from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "frameworks": obj.get("frameworks"),
            "launchStage": obj.get("launchStage"),
            "name": obj.get("name"),
            "openSourceCategory": obj.get("openSourceCategory"),
            "parent": GoogleCloudAiplatformV1beta1PublisherModelParent.from_dict(obj["parent"]) if obj.get("parent") is not None else None,
            "predictSchemata": GoogleCloudAiplatformV1beta1PredictSchemata.from_dict(obj["predictSchemata"]) if obj.get("predictSchemata") is not None else None,
            "publisherModelTemplate": obj.get("publisherModelTemplate"),
            "supportedActions": GoogleCloudAiplatformV1beta1PublisherModelCallToAction.from_dict(obj["supportedActions"]) if obj.get("supportedActions") is not None else None,
            "versionId": obj.get("versionId"),
            "versionState": obj.get("versionState")
        })
        return _obj



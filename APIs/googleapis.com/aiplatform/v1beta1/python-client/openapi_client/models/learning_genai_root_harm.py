# coding: utf-8

"""
    Vertex AI API

    Train high-quality custom machine learning models with minimal machine learning expertise and effort.

    The version of the OpenAPI document: v1beta1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt
from typing import Any, ClassVar, Dict, List, Optional, Union
from openapi_client.models.learning_genai_root_harm_grail_image_harm_type import LearningGenaiRootHarmGrailImageHarmType
from openapi_client.models.learning_genai_root_harm_grail_text_harm_type import LearningGenaiRootHarmGrailTextHarmType
from openapi_client.models.learning_genai_root_harm_safety_cat_categories import LearningGenaiRootHarmSafetyCatCategories
from openapi_client.models.learning_genai_root_harm_spii_filter import LearningGenaiRootHarmSpiiFilter
from typing import Optional, Set
from typing_extensions import Self

class LearningGenaiRootHarm(BaseModel):
    """
    LearningGenaiRootHarm
    """ # noqa: E501
    contextual_dangerous: Optional[StrictBool] = Field(default=None, description="Please do not use, this is still under development.", alias="contextualDangerous")
    csam: Optional[StrictBool] = None
    fringe: Optional[StrictBool] = None
    grail_image_harm_type: Optional[LearningGenaiRootHarmGrailImageHarmType] = Field(default=None, alias="grailImageHarmType")
    grail_text_harm_type: Optional[LearningGenaiRootHarmGrailTextHarmType] = Field(default=None, alias="grailTextHarmType")
    image_csam: Optional[StrictBool] = Field(default=None, alias="imageCsam")
    image_pedo: Optional[StrictBool] = Field(default=None, alias="imagePedo")
    image_porn: Optional[StrictBool] = Field(default=None, description="Image signals", alias="imagePorn")
    image_violence: Optional[StrictBool] = Field(default=None, alias="imageViolence")
    pqc: Optional[StrictBool] = None
    safetycat: Optional[LearningGenaiRootHarmSafetyCatCategories] = None
    spii: Optional[LearningGenaiRootHarmSpiiFilter] = None
    threshold: Optional[Union[StrictFloat, StrictInt]] = None
    video_frame_csam: Optional[StrictBool] = Field(default=None, alias="videoFrameCsam")
    video_frame_pedo: Optional[StrictBool] = Field(default=None, alias="videoFramePedo")
    video_frame_porn: Optional[StrictBool] = Field(default=None, description="Video frame signals", alias="videoFramePorn")
    video_frame_violence: Optional[StrictBool] = Field(default=None, alias="videoFrameViolence")
    __properties: ClassVar[List[str]] = ["contextualDangerous", "csam", "fringe", "grailImageHarmType", "grailTextHarmType", "imageCsam", "imagePedo", "imagePorn", "imageViolence", "pqc", "safetycat", "spii", "threshold", "videoFrameCsam", "videoFramePedo", "videoFramePorn", "videoFrameViolence"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of LearningGenaiRootHarm from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of grail_image_harm_type
        if self.grail_image_harm_type:
            _dict['grailImageHarmType'] = self.grail_image_harm_type.to_dict()
        # override the default output from pydantic by calling `to_dict()` of grail_text_harm_type
        if self.grail_text_harm_type:
            _dict['grailTextHarmType'] = self.grail_text_harm_type.to_dict()
        # override the default output from pydantic by calling `to_dict()` of safetycat
        if self.safetycat:
            _dict['safetycat'] = self.safetycat.to_dict()
        # override the default output from pydantic by calling `to_dict()` of spii
        if self.spii:
            _dict['spii'] = self.spii.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of LearningGenaiRootHarm from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "contextualDangerous": obj.get("contextualDangerous"),
            "csam": obj.get("csam"),
            "fringe": obj.get("fringe"),
            "grailImageHarmType": LearningGenaiRootHarmGrailImageHarmType.from_dict(obj["grailImageHarmType"]) if obj.get("grailImageHarmType") is not None else None,
            "grailTextHarmType": LearningGenaiRootHarmGrailTextHarmType.from_dict(obj["grailTextHarmType"]) if obj.get("grailTextHarmType") is not None else None,
            "imageCsam": obj.get("imageCsam"),
            "imagePedo": obj.get("imagePedo"),
            "imagePorn": obj.get("imagePorn"),
            "imageViolence": obj.get("imageViolence"),
            "pqc": obj.get("pqc"),
            "safetycat": LearningGenaiRootHarmSafetyCatCategories.from_dict(obj["safetycat"]) if obj.get("safetycat") is not None else None,
            "spii": LearningGenaiRootHarmSpiiFilter.from_dict(obj["spii"]) if obj.get("spii") is not None else None,
            "threshold": obj.get("threshold"),
            "videoFrameCsam": obj.get("videoFrameCsam"),
            "videoFramePedo": obj.get("videoFramePedo"),
            "videoFramePorn": obj.get("videoFramePorn"),
            "videoFrameViolence": obj.get("videoFrameViolence")
        })
        return _obj



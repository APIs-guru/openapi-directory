# coding: utf-8

"""
    Vertex AI API

    Train high-quality custom machine learning models with minimal machine learning expertise and effort.

    The version of the OpenAPI document: v1beta1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_cloud_aiplatform_v1beta1_function_declaration import GoogleCloudAiplatformV1beta1FunctionDeclaration
from openapi_client.models.google_cloud_aiplatform_v1beta1_google_search_retrieval import GoogleCloudAiplatformV1beta1GoogleSearchRetrieval
from openapi_client.models.google_cloud_aiplatform_v1beta1_retrieval import GoogleCloudAiplatformV1beta1Retrieval
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudAiplatformV1beta1Tool(BaseModel):
    """
    Tool details that the model may use to generate response. A `Tool` is a piece of code that enables the system to interact with external systems to perform an action, or set of actions, outside of knowledge and scope of the model. A Tool object should contain exactly one type of Tool (e.g FunctionDeclaration, Retrieval or GoogleSearchRetrieval).
    """ # noqa: E501
    function_declarations: Optional[List[GoogleCloudAiplatformV1beta1FunctionDeclaration]] = Field(default=None, description="Optional. Function tool type. One or more function declarations to be passed to the model along with the current user query. Model may decide to call a subset of these functions by populating FunctionCall in the response. User should provide a FunctionResponse for each function call in the next turn. Based on the function responses, Model will generate the final response back to the user. Maximum 64 function declarations can be provided.", alias="functionDeclarations")
    google_search_retrieval: Optional[GoogleCloudAiplatformV1beta1GoogleSearchRetrieval] = Field(default=None, alias="googleSearchRetrieval")
    retrieval: Optional[GoogleCloudAiplatformV1beta1Retrieval] = None
    __properties: ClassVar[List[str]] = ["functionDeclarations", "googleSearchRetrieval", "retrieval"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudAiplatformV1beta1Tool from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in function_declarations (list)
        _items = []
        if self.function_declarations:
            for _item_function_declarations in self.function_declarations:
                if _item_function_declarations:
                    _items.append(_item_function_declarations.to_dict())
            _dict['functionDeclarations'] = _items
        # override the default output from pydantic by calling `to_dict()` of google_search_retrieval
        if self.google_search_retrieval:
            _dict['googleSearchRetrieval'] = self.google_search_retrieval.to_dict()
        # override the default output from pydantic by calling `to_dict()` of retrieval
        if self.retrieval:
            _dict['retrieval'] = self.retrieval.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudAiplatformV1beta1Tool from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "functionDeclarations": [GoogleCloudAiplatformV1beta1FunctionDeclaration.from_dict(_item) for _item in obj["functionDeclarations"]] if obj.get("functionDeclarations") is not None else None,
            "googleSearchRetrieval": GoogleCloudAiplatformV1beta1GoogleSearchRetrieval.from_dict(obj["googleSearchRetrieval"]) if obj.get("googleSearchRetrieval") is not None else None,
            "retrieval": GoogleCloudAiplatformV1beta1Retrieval.from_dict(obj["retrieval"]) if obj.get("retrieval") is not None else None
        })
        return _obj



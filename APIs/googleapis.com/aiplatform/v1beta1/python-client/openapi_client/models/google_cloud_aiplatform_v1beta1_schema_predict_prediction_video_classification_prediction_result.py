# coding: utf-8

"""
    Vertex AI API

    Train high-quality custom machine learning models with minimal machine learning expertise and effort.

    The version of the OpenAPI document: v1beta1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudAiplatformV1beta1SchemaPredictPredictionVideoClassificationPredictionResult(BaseModel):
    """
    Prediction output format for Video Classification.
    """ # noqa: E501
    confidence: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The Model's confidence in correction of this prediction, higher value means higher confidence.")
    display_name: Optional[StrictStr] = Field(default=None, description="The display name of the AnnotationSpec that had been identified.", alias="displayName")
    id: Optional[StrictStr] = Field(default=None, description="The resource ID of the AnnotationSpec that had been identified.")
    time_segment_end: Optional[StrictStr] = Field(default=None, description="The end, exclusive, of the video's time segment in which the AnnotationSpec has been identified. Expressed as a number of seconds as measured from the start of the video, with fractions up to a microsecond precision, and with \"s\" appended at the end. Note that for 'segment-classification' prediction type, this equals the original 'timeSegmentEnd' from the input instance, for other types it is the end of a shot or a 1 second interval respectively.", alias="timeSegmentEnd")
    time_segment_start: Optional[StrictStr] = Field(default=None, description="The beginning, inclusive, of the video's time segment in which the AnnotationSpec has been identified. Expressed as a number of seconds as measured from the start of the video, with fractions up to a microsecond precision, and with \"s\" appended at the end. Note that for 'segment-classification' prediction type, this equals the original 'timeSegmentStart' from the input instance, for other types it is the start of a shot or a 1 second interval respectively.", alias="timeSegmentStart")
    type: Optional[StrictStr] = Field(default=None, description="The type of the prediction. The requested types can be configured via parameters. This will be one of - segment-classification - shot-classification - one-sec-interval-classification")
    __properties: ClassVar[List[str]] = ["confidence", "displayName", "id", "timeSegmentEnd", "timeSegmentStart", "type"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudAiplatformV1beta1SchemaPredictPredictionVideoClassificationPredictionResult from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudAiplatformV1beta1SchemaPredictPredictionVideoClassificationPredictionResult from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "confidence": obj.get("confidence"),
            "displayName": obj.get("displayName"),
            "id": obj.get("id"),
            "timeSegmentEnd": obj.get("timeSegmentEnd"),
            "timeSegmentStart": obj.get("timeSegmentStart"),
            "type": obj.get("type")
        })
        return _obj



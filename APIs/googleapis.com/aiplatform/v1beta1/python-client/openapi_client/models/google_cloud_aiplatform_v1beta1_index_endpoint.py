# coding: utf-8

"""
    Vertex AI API

    Train high-quality custom machine learning models with minimal machine learning expertise and effort.

    The version of the OpenAPI document: v1beta1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_cloud_aiplatform_v1beta1_deployed_index import GoogleCloudAiplatformV1beta1DeployedIndex
from openapi_client.models.google_cloud_aiplatform_v1beta1_encryption_spec import GoogleCloudAiplatformV1beta1EncryptionSpec
from openapi_client.models.google_cloud_aiplatform_v1beta1_private_service_connect_config import GoogleCloudAiplatformV1beta1PrivateServiceConnectConfig
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudAiplatformV1beta1IndexEndpoint(BaseModel):
    """
    Indexes are deployed into it. An IndexEndpoint can have multiple DeployedIndexes.
    """ # noqa: E501
    create_time: Optional[StrictStr] = Field(default=None, description="Output only. Timestamp when this IndexEndpoint was created.", alias="createTime")
    deployed_indexes: Optional[List[GoogleCloudAiplatformV1beta1DeployedIndex]] = Field(default=None, description="Output only. The indexes deployed in this endpoint.", alias="deployedIndexes")
    description: Optional[StrictStr] = Field(default=None, description="The description of the IndexEndpoint.")
    display_name: Optional[StrictStr] = Field(default=None, description="Required. The display name of the IndexEndpoint. The name can be up to 128 characters long and can consist of any UTF-8 characters.", alias="displayName")
    enable_private_service_connect: Optional[StrictBool] = Field(default=None, description="Optional. Deprecated: If true, expose the IndexEndpoint via private service connect. Only one of the fields, network or enable_private_service_connect, can be set.", alias="enablePrivateServiceConnect")
    encryption_spec: Optional[GoogleCloudAiplatformV1beta1EncryptionSpec] = Field(default=None, alias="encryptionSpec")
    etag: Optional[StrictStr] = Field(default=None, description="Used to perform consistent read-modify-write updates. If not set, a blind \"overwrite\" update happens.")
    labels: Optional[Dict[str, StrictStr]] = Field(default=None, description="The labels with user-defined metadata to organize your IndexEndpoints. Label keys and values can be no longer than 64 characters (Unicode codepoints), can only contain lowercase letters, numeric characters, underscores and dashes. International characters are allowed. See https://goo.gl/xmQnxf for more information and examples of labels.")
    name: Optional[StrictStr] = Field(default=None, description="Output only. The resource name of the IndexEndpoint.")
    network: Optional[StrictStr] = Field(default=None, description="Optional. The full name of the Google Compute Engine [network](https://cloud.google.com/compute/docs/networks-and-firewalls#networks) to which the IndexEndpoint should be peered. Private services access must already be configured for the network. If left unspecified, the Endpoint is not peered with any network. network and private_service_connect_config are mutually exclusive. [Format](https://cloud.google.com/compute/docs/reference/rest/v1/networks/insert): `projects/{project}/global/networks/{network}`. Where {project} is a project number, as in '12345', and {network} is network name.")
    private_service_connect_config: Optional[GoogleCloudAiplatformV1beta1PrivateServiceConnectConfig] = Field(default=None, alias="privateServiceConnectConfig")
    public_endpoint_domain_name: Optional[StrictStr] = Field(default=None, description="Output only. If public_endpoint_enabled is true, this field will be populated with the domain name to use for this index endpoint.", alias="publicEndpointDomainName")
    public_endpoint_enabled: Optional[StrictBool] = Field(default=None, description="Optional. If true, the deployed index will be accessible through public endpoint.", alias="publicEndpointEnabled")
    update_time: Optional[StrictStr] = Field(default=None, description="Output only. Timestamp when this IndexEndpoint was last updated. This timestamp is not updated when the endpoint's DeployedIndexes are updated, e.g. due to updates of the original Indexes they are the deployments of.", alias="updateTime")
    __properties: ClassVar[List[str]] = ["createTime", "deployedIndexes", "description", "displayName", "enablePrivateServiceConnect", "encryptionSpec", "etag", "labels", "name", "network", "privateServiceConnectConfig", "publicEndpointDomainName", "publicEndpointEnabled", "updateTime"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudAiplatformV1beta1IndexEndpoint from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "create_time",
            "deployed_indexes",
            "name",
            "public_endpoint_domain_name",
            "update_time",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in deployed_indexes (list)
        _items = []
        if self.deployed_indexes:
            for _item_deployed_indexes in self.deployed_indexes:
                if _item_deployed_indexes:
                    _items.append(_item_deployed_indexes.to_dict())
            _dict['deployedIndexes'] = _items
        # override the default output from pydantic by calling `to_dict()` of encryption_spec
        if self.encryption_spec:
            _dict['encryptionSpec'] = self.encryption_spec.to_dict()
        # override the default output from pydantic by calling `to_dict()` of private_service_connect_config
        if self.private_service_connect_config:
            _dict['privateServiceConnectConfig'] = self.private_service_connect_config.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudAiplatformV1beta1IndexEndpoint from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "createTime": obj.get("createTime"),
            "deployedIndexes": [GoogleCloudAiplatformV1beta1DeployedIndex.from_dict(_item) for _item in obj["deployedIndexes"]] if obj.get("deployedIndexes") is not None else None,
            "description": obj.get("description"),
            "displayName": obj.get("displayName"),
            "enablePrivateServiceConnect": obj.get("enablePrivateServiceConnect"),
            "encryptionSpec": GoogleCloudAiplatformV1beta1EncryptionSpec.from_dict(obj["encryptionSpec"]) if obj.get("encryptionSpec") is not None else None,
            "etag": obj.get("etag"),
            "labels": obj.get("labels"),
            "name": obj.get("name"),
            "network": obj.get("network"),
            "privateServiceConnectConfig": GoogleCloudAiplatformV1beta1PrivateServiceConnectConfig.from_dict(obj["privateServiceConnectConfig"]) if obj.get("privateServiceConnectConfig") is not None else None,
            "publicEndpointDomainName": obj.get("publicEndpointDomainName"),
            "publicEndpointEnabled": obj.get("publicEndpointEnabled"),
            "updateTime": obj.get("updateTime")
        })
        return _obj



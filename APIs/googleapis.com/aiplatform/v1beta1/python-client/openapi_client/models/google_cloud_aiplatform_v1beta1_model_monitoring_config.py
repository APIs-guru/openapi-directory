# coding: utf-8

"""
    Vertex AI API

    Train high-quality custom machine learning models with minimal machine learning expertise and effort.

    The version of the OpenAPI document: v1beta1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_cloud_aiplatform_v1beta1_gcs_destination import GoogleCloudAiplatformV1beta1GcsDestination
from openapi_client.models.google_cloud_aiplatform_v1beta1_model_monitoring_alert_config import GoogleCloudAiplatformV1beta1ModelMonitoringAlertConfig
from openapi_client.models.google_cloud_aiplatform_v1beta1_model_monitoring_objective_config import GoogleCloudAiplatformV1beta1ModelMonitoringObjectiveConfig
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudAiplatformV1beta1ModelMonitoringConfig(BaseModel):
    """
    The model monitoring configuration used for Batch Prediction Job.
    """ # noqa: E501
    alert_config: Optional[GoogleCloudAiplatformV1beta1ModelMonitoringAlertConfig] = Field(default=None, alias="alertConfig")
    analysis_instance_schema_uri: Optional[StrictStr] = Field(default=None, description="YAML schema file uri in Cloud Storage describing the format of a single instance that you want Tensorflow Data Validation (TFDV) to analyze. If there are any data type differences between predict instance and TFDV instance, this field can be used to override the schema. For models trained with Vertex AI, this field must be set as all the fields in predict instance formatted as string.", alias="analysisInstanceSchemaUri")
    objective_configs: Optional[List[GoogleCloudAiplatformV1beta1ModelMonitoringObjectiveConfig]] = Field(default=None, description="Model monitoring objective config.", alias="objectiveConfigs")
    stats_anomalies_base_directory: Optional[GoogleCloudAiplatformV1beta1GcsDestination] = Field(default=None, alias="statsAnomaliesBaseDirectory")
    __properties: ClassVar[List[str]] = ["alertConfig", "analysisInstanceSchemaUri", "objectiveConfigs", "statsAnomaliesBaseDirectory"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudAiplatformV1beta1ModelMonitoringConfig from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of alert_config
        if self.alert_config:
            _dict['alertConfig'] = self.alert_config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in objective_configs (list)
        _items = []
        if self.objective_configs:
            for _item_objective_configs in self.objective_configs:
                if _item_objective_configs:
                    _items.append(_item_objective_configs.to_dict())
            _dict['objectiveConfigs'] = _items
        # override the default output from pydantic by calling `to_dict()` of stats_anomalies_base_directory
        if self.stats_anomalies_base_directory:
            _dict['statsAnomaliesBaseDirectory'] = self.stats_anomalies_base_directory.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudAiplatformV1beta1ModelMonitoringConfig from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "alertConfig": GoogleCloudAiplatformV1beta1ModelMonitoringAlertConfig.from_dict(obj["alertConfig"]) if obj.get("alertConfig") is not None else None,
            "analysisInstanceSchemaUri": obj.get("analysisInstanceSchemaUri"),
            "objectiveConfigs": [GoogleCloudAiplatformV1beta1ModelMonitoringObjectiveConfig.from_dict(_item) for _item in obj["objectiveConfigs"]] if obj.get("objectiveConfigs") is not None else None,
            "statsAnomaliesBaseDirectory": GoogleCloudAiplatformV1beta1GcsDestination.from_dict(obj["statsAnomaliesBaseDirectory"]) if obj.get("statsAnomaliesBaseDirectory") is not None else None
        })
        return _obj



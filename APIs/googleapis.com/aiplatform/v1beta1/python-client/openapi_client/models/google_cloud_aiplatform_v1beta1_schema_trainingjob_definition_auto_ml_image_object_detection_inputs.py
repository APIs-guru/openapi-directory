# coding: utf-8

"""
    Vertex AI API

    Train high-quality custom machine learning models with minimal machine learning expertise and effort.

    The version of the OpenAPI document: v1beta1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_cloud_aiplatform_v1beta1_schema_trainingjob_definition_automl_image_training_tunable_parameter import GoogleCloudAiplatformV1beta1SchemaTrainingjobDefinitionAutomlImageTrainingTunableParameter
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudAiplatformV1beta1SchemaTrainingjobDefinitionAutoMlImageObjectDetectionInputs(BaseModel):
    """
    GoogleCloudAiplatformV1beta1SchemaTrainingjobDefinitionAutoMlImageObjectDetectionInputs
    """ # noqa: E501
    budget_milli_node_hours: Optional[StrictStr] = Field(default=None, description="The training budget of creating this model, expressed in milli node hours i.e. 1,000 value in this field means 1 node hour. The actual metadata.costMilliNodeHours will be equal or less than this value. If further model training ceases to provide any improvements, it will stop without using the full budget and the metadata.successfulStopReason will be `model-converged`. Note, node_hour = actual_hour * number_of_nodes_involved. For modelType `cloud`(default), the budget must be between 20,000 and 900,000 milli node hours, inclusive. The default value is 216,000 which represents one day in wall time, considering 9 nodes are used. For model types `mobile-tf-low-latency-1`, `mobile-tf-versatile-1`, `mobile-tf-high-accuracy-1` the training budget must be between 1,000 and 100,000 milli node hours, inclusive. The default value is 24,000 which represents one day in wall time on a single node that is used.", alias="budgetMilliNodeHours")
    disable_early_stopping: Optional[StrictBool] = Field(default=None, description="Use the entire training budget. This disables the early stopping feature. When false the early stopping feature is enabled, which means that AutoML Image Object Detection might stop training before the entire training budget has been used.", alias="disableEarlyStopping")
    model_type: Optional[StrictStr] = Field(default=None, alias="modelType")
    tunable_parameter: Optional[GoogleCloudAiplatformV1beta1SchemaTrainingjobDefinitionAutomlImageTrainingTunableParameter] = Field(default=None, alias="tunableParameter")
    uptrain_base_model_id: Optional[StrictStr] = Field(default=None, description="The ID of `base` model for upTraining. If it is specified, the new model will be upTrained based on the `base` model for upTraining. Otherwise, the new model will be trained from scratch. The `base` model for upTraining must be in the same Project and Location as the new Model to train, and have the same modelType.", alias="uptrainBaseModelId")
    __properties: ClassVar[List[str]] = ["budgetMilliNodeHours", "disableEarlyStopping", "modelType", "tunableParameter", "uptrainBaseModelId"]

    @field_validator('model_type')
    def model_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['MODEL_TYPE_UNSPECIFIED', 'CLOUD_HIGH_ACCURACY_1', 'CLOUD_LOW_LATENCY_1', 'CLOUD_1', 'MOBILE_TF_LOW_LATENCY_1', 'MOBILE_TF_VERSATILE_1', 'MOBILE_TF_HIGH_ACCURACY_1', 'CLOUD_STREAMING_1', 'SPINENET', 'YOLO']):
            raise ValueError("must be one of enum values ('MODEL_TYPE_UNSPECIFIED', 'CLOUD_HIGH_ACCURACY_1', 'CLOUD_LOW_LATENCY_1', 'CLOUD_1', 'MOBILE_TF_LOW_LATENCY_1', 'MOBILE_TF_VERSATILE_1', 'MOBILE_TF_HIGH_ACCURACY_1', 'CLOUD_STREAMING_1', 'SPINENET', 'YOLO')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudAiplatformV1beta1SchemaTrainingjobDefinitionAutoMlImageObjectDetectionInputs from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of tunable_parameter
        if self.tunable_parameter:
            _dict['tunableParameter'] = self.tunable_parameter.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudAiplatformV1beta1SchemaTrainingjobDefinitionAutoMlImageObjectDetectionInputs from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "budgetMilliNodeHours": obj.get("budgetMilliNodeHours"),
            "disableEarlyStopping": obj.get("disableEarlyStopping"),
            "modelType": obj.get("modelType"),
            "tunableParameter": GoogleCloudAiplatformV1beta1SchemaTrainingjobDefinitionAutomlImageTrainingTunableParameter.from_dict(obj["tunableParameter"]) if obj.get("tunableParameter") is not None else None,
            "uptrainBaseModelId": obj.get("uptrainBaseModelId")
        })
        return _obj



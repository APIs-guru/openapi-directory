# coding: utf-8

"""
    Vertex AI API

    Train high-quality custom machine learning models with minimal machine learning expertise and effort.

    The version of the OpenAPI document: v1beta1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_cloud_aiplatform_v1beta1_feature_view_big_query_source import GoogleCloudAiplatformV1beta1FeatureViewBigQuerySource
from openapi_client.models.google_cloud_aiplatform_v1beta1_feature_view_feature_registry_source import GoogleCloudAiplatformV1beta1FeatureViewFeatureRegistrySource
from openapi_client.models.google_cloud_aiplatform_v1beta1_feature_view_sync_config import GoogleCloudAiplatformV1beta1FeatureViewSyncConfig
from openapi_client.models.google_cloud_aiplatform_v1beta1_feature_view_vector_search_config import GoogleCloudAiplatformV1beta1FeatureViewVectorSearchConfig
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudAiplatformV1beta1FeatureView(BaseModel):
    """
    FeatureView is representation of values that the FeatureOnlineStore will serve based on its syncConfig.
    """ # noqa: E501
    big_query_source: Optional[GoogleCloudAiplatformV1beta1FeatureViewBigQuerySource] = Field(default=None, alias="bigQuerySource")
    create_time: Optional[StrictStr] = Field(default=None, description="Output only. Timestamp when this FeatureView was created.", alias="createTime")
    etag: Optional[StrictStr] = Field(default=None, description="Optional. Used to perform consistent read-modify-write updates. If not set, a blind \"overwrite\" update happens.")
    feature_registry_source: Optional[GoogleCloudAiplatformV1beta1FeatureViewFeatureRegistrySource] = Field(default=None, alias="featureRegistrySource")
    labels: Optional[Dict[str, StrictStr]] = Field(default=None, description="Optional. The labels with user-defined metadata to organize your FeatureViews. Label keys and values can be no longer than 64 characters (Unicode codepoints), can only contain lowercase letters, numeric characters, underscores and dashes. International characters are allowed. See https://goo.gl/xmQnxf for more information on and examples of labels. No more than 64 user labels can be associated with one FeatureOnlineStore(System labels are excluded).\" System reserved label keys are prefixed with \"aiplatform.googleapis.com/\" and are immutable.")
    name: Optional[StrictStr] = Field(default=None, description="Identifier. Name of the FeatureView. Format: `projects/{project}/locations/{location}/featureOnlineStores/{feature_online_store}/featureViews/{feature_view}`")
    service_account_email: Optional[StrictStr] = Field(default=None, description="Output only. A Service Account unique to this FeatureView. The role bigquery.dataViewer should be granted to this service account to allow Vertex AI Feature Store to sync data to the online store.", alias="serviceAccountEmail")
    service_agent_type: Optional[StrictStr] = Field(default=None, description="Optional. Service agent type used during data sync. By default, the Vertex AI Service Agent is used. When using an IAM Policy to isolate this FeatureView within a project (https://cloud.google.com/vertex-ai/docs/featurestore/latest/resource-policy) a separate service account should be provisioned by setting this field to `SERVICE_AGENT_TYPE_FEATURE_VIEW`. This will generate a separate service account to access the BigQuery source table.", alias="serviceAgentType")
    sync_config: Optional[GoogleCloudAiplatformV1beta1FeatureViewSyncConfig] = Field(default=None, alias="syncConfig")
    update_time: Optional[StrictStr] = Field(default=None, description="Output only. Timestamp when this FeatureView was last updated.", alias="updateTime")
    vector_search_config: Optional[GoogleCloudAiplatformV1beta1FeatureViewVectorSearchConfig] = Field(default=None, alias="vectorSearchConfig")
    __properties: ClassVar[List[str]] = ["bigQuerySource", "createTime", "etag", "featureRegistrySource", "labels", "name", "serviceAccountEmail", "serviceAgentType", "syncConfig", "updateTime", "vectorSearchConfig"]

    @field_validator('service_agent_type')
    def service_agent_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['SERVICE_AGENT_TYPE_UNSPECIFIED', 'SERVICE_AGENT_TYPE_PROJECT', 'SERVICE_AGENT_TYPE_FEATURE_VIEW']):
            raise ValueError("must be one of enum values ('SERVICE_AGENT_TYPE_UNSPECIFIED', 'SERVICE_AGENT_TYPE_PROJECT', 'SERVICE_AGENT_TYPE_FEATURE_VIEW')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudAiplatformV1beta1FeatureView from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "create_time",
            "service_account_email",
            "update_time",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of big_query_source
        if self.big_query_source:
            _dict['bigQuerySource'] = self.big_query_source.to_dict()
        # override the default output from pydantic by calling `to_dict()` of feature_registry_source
        if self.feature_registry_source:
            _dict['featureRegistrySource'] = self.feature_registry_source.to_dict()
        # override the default output from pydantic by calling `to_dict()` of sync_config
        if self.sync_config:
            _dict['syncConfig'] = self.sync_config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of vector_search_config
        if self.vector_search_config:
            _dict['vectorSearchConfig'] = self.vector_search_config.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudAiplatformV1beta1FeatureView from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "bigQuerySource": GoogleCloudAiplatformV1beta1FeatureViewBigQuerySource.from_dict(obj["bigQuerySource"]) if obj.get("bigQuerySource") is not None else None,
            "createTime": obj.get("createTime"),
            "etag": obj.get("etag"),
            "featureRegistrySource": GoogleCloudAiplatformV1beta1FeatureViewFeatureRegistrySource.from_dict(obj["featureRegistrySource"]) if obj.get("featureRegistrySource") is not None else None,
            "labels": obj.get("labels"),
            "name": obj.get("name"),
            "serviceAccountEmail": obj.get("serviceAccountEmail"),
            "serviceAgentType": obj.get("serviceAgentType"),
            "syncConfig": GoogleCloudAiplatformV1beta1FeatureViewSyncConfig.from_dict(obj["syncConfig"]) if obj.get("syncConfig") is not None else None,
            "updateTime": obj.get("updateTime"),
            "vectorSearchConfig": GoogleCloudAiplatformV1beta1FeatureViewVectorSearchConfig.from_dict(obj["vectorSearchConfig"]) if obj.get("vectorSearchConfig") is not None else None
        })
        return _obj



# coding: utf-8

"""
    Vertex AI API

    Train high-quality custom machine learning models with minimal machine learning expertise and effort.

    The version of the OpenAPI document: v1beta1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_cloud_aiplatform_v1beta1_export_fraction_split import GoogleCloudAiplatformV1beta1ExportFractionSplit
from openapi_client.models.google_cloud_aiplatform_v1beta1_gcs_destination import GoogleCloudAiplatformV1beta1GcsDestination
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudAiplatformV1beta1ExportDataConfig(BaseModel):
    """
    Describes what part of the Dataset is to be exported, the destination of the export and how to export.
    """ # noqa: E501
    annotations_filter: Optional[StrictStr] = Field(default=None, description="An expression for filtering what part of the Dataset is to be exported. Only Annotations that match this filter will be exported. The filter syntax is the same as in ListAnnotations.", alias="annotationsFilter")
    fraction_split: Optional[GoogleCloudAiplatformV1beta1ExportFractionSplit] = Field(default=None, alias="fractionSplit")
    gcs_destination: Optional[GoogleCloudAiplatformV1beta1GcsDestination] = Field(default=None, alias="gcsDestination")
    __properties: ClassVar[List[str]] = ["annotationsFilter", "fractionSplit", "gcsDestination"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudAiplatformV1beta1ExportDataConfig from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of fraction_split
        if self.fraction_split:
            _dict['fractionSplit'] = self.fraction_split.to_dict()
        # override the default output from pydantic by calling `to_dict()` of gcs_destination
        if self.gcs_destination:
            _dict['gcsDestination'] = self.gcs_destination.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudAiplatformV1beta1ExportDataConfig from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "annotationsFilter": obj.get("annotationsFilter"),
            "fractionSplit": GoogleCloudAiplatformV1beta1ExportFractionSplit.from_dict(obj["fractionSplit"]) if obj.get("fractionSplit") is not None else None,
            "gcsDestination": GoogleCloudAiplatformV1beta1GcsDestination.from_dict(obj["gcsDestination"]) if obj.get("gcsDestination") is not None else None
        })
        return _obj



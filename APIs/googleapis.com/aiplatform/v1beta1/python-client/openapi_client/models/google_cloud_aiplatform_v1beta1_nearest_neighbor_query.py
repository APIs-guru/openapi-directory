# coding: utf-8

"""
    Vertex AI API

    Train high-quality custom machine learning models with minimal machine learning expertise and effort.

    The version of the OpenAPI document: v1beta1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_cloud_aiplatform_v1beta1_nearest_neighbor_query_embedding import GoogleCloudAiplatformV1beta1NearestNeighborQueryEmbedding
from openapi_client.models.google_cloud_aiplatform_v1beta1_nearest_neighbor_query_parameters import GoogleCloudAiplatformV1beta1NearestNeighborQueryParameters
from openapi_client.models.google_cloud_aiplatform_v1beta1_nearest_neighbor_query_string_filter import GoogleCloudAiplatformV1beta1NearestNeighborQueryStringFilter
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudAiplatformV1beta1NearestNeighborQuery(BaseModel):
    """
    A query to find a number of similar entities.
    """ # noqa: E501
    embedding: Optional[GoogleCloudAiplatformV1beta1NearestNeighborQueryEmbedding] = None
    entity_id: Optional[StrictStr] = Field(default=None, description="Optional. The entity id whose similar entities should be searched for. If embedding is set, search will use embedding instead of entity_id.", alias="entityId")
    neighbor_count: Optional[StrictInt] = Field(default=None, description="Optional. The number of similar entities to be retrieved from feature view for each query.", alias="neighborCount")
    parameters: Optional[GoogleCloudAiplatformV1beta1NearestNeighborQueryParameters] = None
    per_crowding_attribute_neighbor_count: Optional[StrictInt] = Field(default=None, description="Optional. Crowding is a constraint on a neighbor list produced by nearest neighbor search requiring that no more than sper_crowding_attribute_neighbor_count of the k neighbors returned have the same value of crowding_attribute. It's used for improving result diversity.", alias="perCrowdingAttributeNeighborCount")
    string_filters: Optional[List[GoogleCloudAiplatformV1beta1NearestNeighborQueryStringFilter]] = Field(default=None, description="Optional. The list of string filters.", alias="stringFilters")
    __properties: ClassVar[List[str]] = ["embedding", "entityId", "neighborCount", "parameters", "perCrowdingAttributeNeighborCount", "stringFilters"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudAiplatformV1beta1NearestNeighborQuery from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of embedding
        if self.embedding:
            _dict['embedding'] = self.embedding.to_dict()
        # override the default output from pydantic by calling `to_dict()` of parameters
        if self.parameters:
            _dict['parameters'] = self.parameters.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in string_filters (list)
        _items = []
        if self.string_filters:
            for _item_string_filters in self.string_filters:
                if _item_string_filters:
                    _items.append(_item_string_filters.to_dict())
            _dict['stringFilters'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudAiplatformV1beta1NearestNeighborQuery from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "embedding": GoogleCloudAiplatformV1beta1NearestNeighborQueryEmbedding.from_dict(obj["embedding"]) if obj.get("embedding") is not None else None,
            "entityId": obj.get("entityId"),
            "neighborCount": obj.get("neighborCount"),
            "parameters": GoogleCloudAiplatformV1beta1NearestNeighborQueryParameters.from_dict(obj["parameters"]) if obj.get("parameters") is not None else None,
            "perCrowdingAttributeNeighborCount": obj.get("perCrowdingAttributeNeighborCount"),
            "stringFilters": [GoogleCloudAiplatformV1beta1NearestNeighborQueryStringFilter.from_dict(_item) for _item in obj["stringFilters"]] if obj.get("stringFilters") is not None else None
        })
        return _obj



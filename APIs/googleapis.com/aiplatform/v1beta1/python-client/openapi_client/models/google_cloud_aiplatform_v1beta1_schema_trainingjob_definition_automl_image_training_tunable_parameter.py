# coding: utf-8

"""
    Vertex AI API

    Train high-quality custom machine learning models with minimal machine learning expertise and effort.

    The version of the OpenAPI document: v1beta1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_cloud_aiplatform_v1beta1_study_spec import GoogleCloudAiplatformV1beta1StudySpec
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudAiplatformV1beta1SchemaTrainingjobDefinitionAutomlImageTrainingTunableParameter(BaseModel):
    """
    A wrapper class which contains the tunable parameters in an AutoML Image training job.
    """ # noqa: E501
    checkpoint_name: Optional[StrictStr] = Field(default=None, description="Optional. An unique name of pretrained model checkpoint provided in model garden, it will be mapped to a GCS location internally.", alias="checkpointName")
    dataset_config: Optional[Dict[str, StrictStr]] = Field(default=None, description="Customizable dataset settings, used in the `model_garden_trainer`.", alias="datasetConfig")
    study_spec: Optional[GoogleCloudAiplatformV1beta1StudySpec] = Field(default=None, alias="studySpec")
    trainer_config: Optional[Dict[str, StrictStr]] = Field(default=None, description="Customizable trainer settings, used in the `model_garden_trainer`.", alias="trainerConfig")
    trainer_type: Optional[StrictStr] = Field(default=None, alias="trainerType")
    __properties: ClassVar[List[str]] = ["checkpointName", "datasetConfig", "studySpec", "trainerConfig", "trainerType"]

    @field_validator('trainer_type')
    def trainer_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['TRAINER_TYPE_UNSPECIFIED', 'AUTOML_TRAINER', 'MODEL_GARDEN_TRAINER']):
            raise ValueError("must be one of enum values ('TRAINER_TYPE_UNSPECIFIED', 'AUTOML_TRAINER', 'MODEL_GARDEN_TRAINER')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudAiplatformV1beta1SchemaTrainingjobDefinitionAutomlImageTrainingTunableParameter from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of study_spec
        if self.study_spec:
            _dict['studySpec'] = self.study_spec.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudAiplatformV1beta1SchemaTrainingjobDefinitionAutomlImageTrainingTunableParameter from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "checkpointName": obj.get("checkpointName"),
            "datasetConfig": obj.get("datasetConfig"),
            "studySpec": GoogleCloudAiplatformV1beta1StudySpec.from_dict(obj["studySpec"]) if obj.get("studySpec") is not None else None,
            "trainerConfig": obj.get("trainerConfig"),
            "trainerType": obj.get("trainerType")
        })
        return _obj



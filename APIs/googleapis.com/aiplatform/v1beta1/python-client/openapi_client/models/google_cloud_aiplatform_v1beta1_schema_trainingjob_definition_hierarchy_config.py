# coding: utf-8

"""
    Vertex AI API

    Train high-quality custom machine learning models with minimal machine learning expertise and effort.

    The version of the OpenAPI document: v1beta1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudAiplatformV1beta1SchemaTrainingjobDefinitionHierarchyConfig(BaseModel):
    """
    Configuration that defines the hierarchical relationship of time series and parameters for hierarchical forecasting strategies.
    """ # noqa: E501
    group_columns: Optional[List[StrictStr]] = Field(default=None, description="A list of time series attribute column names that define the time series hierarchy. Only one level of hierarchy is supported, ex. 'region' for a hierarchy of stores or 'department' for a hierarchy of products. If multiple columns are specified, time series will be grouped by their combined values, ex. ('blue', 'large') for 'color' and 'size', up to 5 columns are accepted. If no group columns are specified, all time series are considered to be part of the same group.", alias="groupColumns")
    group_temporal_total_weight: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The weight of the loss for predictions aggregated over both the horizon and time series in the same hierarchy group.", alias="groupTemporalTotalWeight")
    group_total_weight: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The weight of the loss for predictions aggregated over time series in the same group.", alias="groupTotalWeight")
    temporal_total_weight: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The weight of the loss for predictions aggregated over the horizon for a single time series.", alias="temporalTotalWeight")
    __properties: ClassVar[List[str]] = ["groupColumns", "groupTemporalTotalWeight", "groupTotalWeight", "temporalTotalWeight"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudAiplatformV1beta1SchemaTrainingjobDefinitionHierarchyConfig from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudAiplatformV1beta1SchemaTrainingjobDefinitionHierarchyConfig from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "groupColumns": obj.get("groupColumns"),
            "groupTemporalTotalWeight": obj.get("groupTemporalTotalWeight"),
            "groupTotalWeight": obj.get("groupTotalWeight"),
            "temporalTotalWeight": obj.get("temporalTotalWeight")
        })
        return _obj



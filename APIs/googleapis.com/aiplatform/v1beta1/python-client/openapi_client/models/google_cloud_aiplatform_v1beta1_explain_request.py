# coding: utf-8

"""
    Vertex AI API

    Train high-quality custom machine learning models with minimal machine learning expertise and effort.

    The version of the OpenAPI document: v1beta1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_cloud_aiplatform_v1beta1_explanation_spec_override import GoogleCloudAiplatformV1beta1ExplanationSpecOverride
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudAiplatformV1beta1ExplainRequest(BaseModel):
    """
    Request message for PredictionService.Explain.
    """ # noqa: E501
    concurrent_explanation_spec_override: Optional[Dict[str, GoogleCloudAiplatformV1beta1ExplanationSpecOverride]] = Field(default=None, description="Optional. This field is the same as the one above, but supports multiple explanations to occur in parallel. The key can be any string. Each override will be run against the model, then its explanations will be grouped together. Note - these explanations are run **In Addition** to the default Explanation in the deployed model.", alias="concurrentExplanationSpecOverride")
    deployed_model_id: Optional[StrictStr] = Field(default=None, description="If specified, this ExplainRequest will be served by the chosen DeployedModel, overriding Endpoint.traffic_split.", alias="deployedModelId")
    explanation_spec_override: Optional[GoogleCloudAiplatformV1beta1ExplanationSpecOverride] = Field(default=None, alias="explanationSpecOverride")
    instances: Optional[List[Any]] = Field(default=None, description="Required. The instances that are the input to the explanation call. A DeployedModel may have an upper limit on the number of instances it supports per request, and when it is exceeded the explanation call errors in case of AutoML Models, or, in case of customer created Models, the behaviour is as documented by that Model. The schema of any single instance may be specified via Endpoint's DeployedModels' Model's PredictSchemata's instance_schema_uri.")
    parameters: Optional[Any] = Field(default=None, description="The parameters that govern the prediction. The schema of the parameters may be specified via Endpoint's DeployedModels' Model's PredictSchemata's parameters_schema_uri.")
    __properties: ClassVar[List[str]] = ["concurrentExplanationSpecOverride", "deployedModelId", "explanationSpecOverride", "instances", "parameters"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudAiplatformV1beta1ExplainRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each value in concurrent_explanation_spec_override (dict)
        _field_dict = {}
        if self.concurrent_explanation_spec_override:
            for _key_concurrent_explanation_spec_override in self.concurrent_explanation_spec_override:
                if self.concurrent_explanation_spec_override[_key_concurrent_explanation_spec_override]:
                    _field_dict[_key_concurrent_explanation_spec_override] = self.concurrent_explanation_spec_override[_key_concurrent_explanation_spec_override].to_dict()
            _dict['concurrentExplanationSpecOverride'] = _field_dict
        # override the default output from pydantic by calling `to_dict()` of explanation_spec_override
        if self.explanation_spec_override:
            _dict['explanationSpecOverride'] = self.explanation_spec_override.to_dict()
        # set to None if parameters (nullable) is None
        # and model_fields_set contains the field
        if self.parameters is None and "parameters" in self.model_fields_set:
            _dict['parameters'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudAiplatformV1beta1ExplainRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "concurrentExplanationSpecOverride": dict(
                (_k, GoogleCloudAiplatformV1beta1ExplanationSpecOverride.from_dict(_v))
                for _k, _v in obj["concurrentExplanationSpecOverride"].items()
            )
            if obj.get("concurrentExplanationSpecOverride") is not None
            else None,
            "deployedModelId": obj.get("deployedModelId"),
            "explanationSpecOverride": GoogleCloudAiplatformV1beta1ExplanationSpecOverride.from_dict(obj["explanationSpecOverride"]) if obj.get("explanationSpecOverride") is not None else None,
            "instances": obj.get("instances"),
            "parameters": obj.get("parameters")
        })
        return _obj



# coding: utf-8

"""
    Vertex AI API

    Train high-quality custom machine learning models with minimal machine learning expertise and effort.

    The version of the OpenAPI document: v1beta1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictBytes, StrictFloat, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudAiplatformV1beta1Tensor(BaseModel):
    """
    A tensor value type.
    """ # noqa: E501
    bool_val: Optional[List[StrictBool]] = Field(default=None, description="Type specific representations that make it easy to create tensor protos in all languages. Only the representation corresponding to \"dtype\" can be set. The values hold the flattened representation of the tensor in row major order. BOOL", alias="boolVal")
    bytes_val: Optional[List[Union[StrictBytes, StrictStr]]] = Field(default=None, description="STRING", alias="bytesVal")
    double_val: Optional[List[Union[StrictFloat, StrictInt]]] = Field(default=None, description="DOUBLE", alias="doubleVal")
    dtype: Optional[StrictStr] = Field(default=None, description="The data type of tensor.")
    float_val: Optional[List[Union[StrictFloat, StrictInt]]] = Field(default=None, description="FLOAT", alias="floatVal")
    int64_val: Optional[List[StrictStr]] = Field(default=None, description="INT64", alias="int64Val")
    int_val: Optional[List[StrictInt]] = Field(default=None, description="INT_8 INT_16 INT_32", alias="intVal")
    list_val: Optional[List[GoogleCloudAiplatformV1beta1Tensor]] = Field(default=None, description="A list of tensor values.", alias="listVal")
    shape: Optional[List[StrictStr]] = Field(default=None, description="Shape of the tensor.")
    string_val: Optional[List[StrictStr]] = Field(default=None, description="STRING", alias="stringVal")
    struct_val: Optional[Dict[str, GoogleCloudAiplatformV1beta1Tensor]] = Field(default=None, description="A map of string to tensor.", alias="structVal")
    tensor_val: Optional[Union[StrictBytes, StrictStr]] = Field(default=None, description="Serialized raw tensor content.", alias="tensorVal")
    uint64_val: Optional[List[StrictStr]] = Field(default=None, description="UINT64", alias="uint64Val")
    uint_val: Optional[List[StrictInt]] = Field(default=None, description="UINT8 UINT16 UINT32", alias="uintVal")
    __properties: ClassVar[List[str]] = ["boolVal", "bytesVal", "doubleVal", "dtype", "floatVal", "int64Val", "intVal", "listVal", "shape", "stringVal", "structVal", "tensorVal", "uint64Val", "uintVal"]

    @field_validator('dtype')
    def dtype_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['DATA_TYPE_UNSPECIFIED', 'BOOL', 'STRING', 'FLOAT', 'DOUBLE', 'INT8', 'INT16', 'INT32', 'INT64', 'UINT8', 'UINT16', 'UINT32', 'UINT64']):
            raise ValueError("must be one of enum values ('DATA_TYPE_UNSPECIFIED', 'BOOL', 'STRING', 'FLOAT', 'DOUBLE', 'INT8', 'INT16', 'INT32', 'INT64', 'UINT8', 'UINT16', 'UINT32', 'UINT64')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudAiplatformV1beta1Tensor from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in list_val (list)
        _items = []
        if self.list_val:
            for _item_list_val in self.list_val:
                if _item_list_val:
                    _items.append(_item_list_val.to_dict())
            _dict['listVal'] = _items
        # override the default output from pydantic by calling `to_dict()` of each value in struct_val (dict)
        _field_dict = {}
        if self.struct_val:
            for _key_struct_val in self.struct_val:
                if self.struct_val[_key_struct_val]:
                    _field_dict[_key_struct_val] = self.struct_val[_key_struct_val].to_dict()
            _dict['structVal'] = _field_dict
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudAiplatformV1beta1Tensor from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "boolVal": obj.get("boolVal"),
            "bytesVal": obj.get("bytesVal"),
            "doubleVal": obj.get("doubleVal"),
            "dtype": obj.get("dtype"),
            "floatVal": obj.get("floatVal"),
            "int64Val": obj.get("int64Val"),
            "intVal": obj.get("intVal"),
            "listVal": [GoogleCloudAiplatformV1beta1Tensor.from_dict(_item) for _item in obj["listVal"]] if obj.get("listVal") is not None else None,
            "shape": obj.get("shape"),
            "stringVal": obj.get("stringVal"),
            "structVal": dict(
                (_k, GoogleCloudAiplatformV1beta1Tensor.from_dict(_v))
                for _k, _v in obj["structVal"].items()
            )
            if obj.get("structVal") is not None
            else None,
            "tensorVal": obj.get("tensorVal"),
            "uint64Val": obj.get("uint64Val"),
            "uintVal": obj.get("uintVal")
        })
        return _obj

# TODO: Rewrite to not use raise_errors
GoogleCloudAiplatformV1beta1Tensor.model_rebuild(raise_errors=False)


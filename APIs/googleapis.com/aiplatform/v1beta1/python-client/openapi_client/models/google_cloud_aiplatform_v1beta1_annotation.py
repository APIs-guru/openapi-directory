# coding: utf-8

"""
    Vertex AI API

    Train high-quality custom machine learning models with minimal machine learning expertise and effort.

    The version of the OpenAPI document: v1beta1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_cloud_aiplatform_v1beta1_user_action_reference import GoogleCloudAiplatformV1beta1UserActionReference
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudAiplatformV1beta1Annotation(BaseModel):
    """
    Used to assign specific AnnotationSpec to a particular area of a DataItem or the whole part of the DataItem.
    """ # noqa: E501
    annotation_source: Optional[GoogleCloudAiplatformV1beta1UserActionReference] = Field(default=None, alias="annotationSource")
    create_time: Optional[StrictStr] = Field(default=None, description="Output only. Timestamp when this Annotation was created.", alias="createTime")
    etag: Optional[StrictStr] = Field(default=None, description="Optional. Used to perform consistent read-modify-write updates. If not set, a blind \"overwrite\" update happens.")
    labels: Optional[Dict[str, StrictStr]] = Field(default=None, description="Optional. The labels with user-defined metadata to organize your Annotations. Label keys and values can be no longer than 64 characters (Unicode codepoints), can only contain lowercase letters, numeric characters, underscores and dashes. International characters are allowed. No more than 64 user labels can be associated with one Annotation(System labels are excluded). See https://goo.gl/xmQnxf for more information and examples of labels. System reserved label keys are prefixed with \"aiplatform.googleapis.com/\" and are immutable. Following system labels exist for each Annotation: * \"aiplatform.googleapis.com/annotation_set_name\": optional, name of the UI's annotation set this Annotation belongs to. If not set, the Annotation is not visible in the UI. * \"aiplatform.googleapis.com/payload_schema\": output only, its value is the payload_schema's title.")
    name: Optional[StrictStr] = Field(default=None, description="Output only. Resource name of the Annotation.")
    payload: Optional[Any] = Field(default=None, description="Required. The schema of the payload can be found in payload_schema.")
    payload_schema_uri: Optional[StrictStr] = Field(default=None, description="Required. Google Cloud Storage URI points to a YAML file describing payload. The schema is defined as an [OpenAPI 3.0.2 Schema Object](https://github.com/OAI/OpenAPI-Specification/blob/main/versions/3.0.2.md#schemaObject). The schema files that can be used here are found in gs://google-cloud-aiplatform/schema/dataset/annotation/, note that the chosen schema must be consistent with the parent Dataset's metadata.", alias="payloadSchemaUri")
    update_time: Optional[StrictStr] = Field(default=None, description="Output only. Timestamp when this Annotation was last updated.", alias="updateTime")
    __properties: ClassVar[List[str]] = ["annotationSource", "createTime", "etag", "labels", "name", "payload", "payloadSchemaUri", "updateTime"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudAiplatformV1beta1Annotation from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "create_time",
            "name",
            "update_time",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of annotation_source
        if self.annotation_source:
            _dict['annotationSource'] = self.annotation_source.to_dict()
        # set to None if payload (nullable) is None
        # and model_fields_set contains the field
        if self.payload is None and "payload" in self.model_fields_set:
            _dict['payload'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudAiplatformV1beta1Annotation from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "annotationSource": GoogleCloudAiplatformV1beta1UserActionReference.from_dict(obj["annotationSource"]) if obj.get("annotationSource") is not None else None,
            "createTime": obj.get("createTime"),
            "etag": obj.get("etag"),
            "labels": obj.get("labels"),
            "name": obj.get("name"),
            "payload": obj.get("payload"),
            "payloadSchemaUri": obj.get("payloadSchemaUri"),
            "updateTime": obj.get("updateTime")
        })
        return _obj



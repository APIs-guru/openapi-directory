# coding: utf-8

"""
    Vertex AI API

    Train high-quality custom machine learning models with minimal machine learning expertise and effort.

    The version of the OpenAPI document: v1beta1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.learning_genai_root_filter_metadata_filter_debug_info import LearningGenaiRootFilterMetadataFilterDebugInfo
from typing import Optional, Set
from typing_extensions import Self

class LearningGenaiRootFilterMetadata(BaseModel):
    """
    LearningGenaiRootFilterMetadata
    """ # noqa: E501
    confidence: Optional[StrictStr] = Field(default=None, description="Filter confidence.")
    debug_info: Optional[LearningGenaiRootFilterMetadataFilterDebugInfo] = Field(default=None, alias="debugInfo")
    fallback: Optional[StrictStr] = Field(default=None, description="A fallback message chosen by the applied filter.")
    info: Optional[StrictStr] = Field(default=None, description="Additional info for the filter.")
    name: Optional[StrictStr] = Field(default=None, description="Name of the filter that triggered.")
    reason: Optional[StrictStr] = Field(default=None, description="Filter reason.")
    text: Optional[StrictStr] = Field(default=None, description="The input query or generated response that is getting filtered.")
    __properties: ClassVar[List[str]] = ["confidence", "debugInfo", "fallback", "info", "name", "reason", "text"]

    @field_validator('confidence')
    def confidence_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['FILTER_CONFIDENCE_UNKNOWN', 'FILTER_CONFIDENCE_VERY_LOW', 'FILTER_CONFIDENCE_LOW', 'FILTER_CONFIDENCE_MEDIUM', 'FILTER_CONFIDENCE_HIGH', 'FILTER_CONFIDENCE_VERY_HIGH']):
            raise ValueError("must be one of enum values ('FILTER_CONFIDENCE_UNKNOWN', 'FILTER_CONFIDENCE_VERY_LOW', 'FILTER_CONFIDENCE_LOW', 'FILTER_CONFIDENCE_MEDIUM', 'FILTER_CONFIDENCE_HIGH', 'FILTER_CONFIDENCE_VERY_HIGH')")
        return value

    @field_validator('reason')
    def reason_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['FILTER_REASON_UNKNOWN', 'FILTER_REASON_NOT_FILTERED', 'FILTER_REASON_SENSITIVE', 'FILTER_REASON_RECITATION', 'FILTER_REASON_LANGUAGE', 'FILTER_REASON_TAKEDOWN', 'FILTER_REASON_CLASSIFIER', 'FILTER_REASON_EMPTY_RESPONSE', 'FILTER_REASON_SIMILARITY_TAKEDOWN', 'FILTER_REASON_UNSAFE', 'FILTER_REASON_PAIRWISE_CLASSIFIER', 'FILTER_REASON_CODEY', 'FILTER_REASON_URL', 'FILTER_REASON_EMAIL', 'FILTER_REASON_SAFETY_CAT', 'FILTER_REASON_REQUEST_RESPONSE_TAKEDOWN', 'FILTER_REASON_RAI_PQC', 'FILTER_REASON_ATLAS', 'FILTER_REASON_RAI_CSAM', 'FILTER_REASON_RAI_FRINGE', 'FILTER_REASON_RAI_SPII', 'FILTER_REASON_RAI_IMAGE_VIOLENCE', 'FILTER_REASON_RAI_IMAGE_PORN', 'FILTER_REASON_RAI_IMAGE_CSAM', 'FILTER_REASON_RAI_IMAGE_PEDO', 'FILTER_REASON_RAI_VIDEO_FRAME_VIOLENCE', 'FILTER_REASON_RAI_VIDEO_FRAME_PORN', 'FILTER_REASON_RAI_VIDEO_FRAME_CSAM', 'FILTER_REASON_RAI_VIDEO_FRAME_PEDO', 'FILTER_REASON_RAI_CONTEXTUAL_DANGEROUS', 'FILTER_REASON_RAI_GRAIL_TEXT', 'FILTER_REASON_RAI_GRAIL_IMAGE', 'FILTER_REASON_RAI_SAFETYCAT', 'FILTER_REASON_TOXICITY', 'FILTER_REASON_ATLAS_PRICING', 'FILTER_REASON_ATLAS_BILLING', 'FILTER_REASON_ATLAS_NON_ENGLISH_QUESTION', 'FILTER_REASON_ATLAS_NOT_RELATED_TO_GCP', 'FILTER_REASON_ATLAS_AWS_AZURE_RELATED']):
            raise ValueError("must be one of enum values ('FILTER_REASON_UNKNOWN', 'FILTER_REASON_NOT_FILTERED', 'FILTER_REASON_SENSITIVE', 'FILTER_REASON_RECITATION', 'FILTER_REASON_LANGUAGE', 'FILTER_REASON_TAKEDOWN', 'FILTER_REASON_CLASSIFIER', 'FILTER_REASON_EMPTY_RESPONSE', 'FILTER_REASON_SIMILARITY_TAKEDOWN', 'FILTER_REASON_UNSAFE', 'FILTER_REASON_PAIRWISE_CLASSIFIER', 'FILTER_REASON_CODEY', 'FILTER_REASON_URL', 'FILTER_REASON_EMAIL', 'FILTER_REASON_SAFETY_CAT', 'FILTER_REASON_REQUEST_RESPONSE_TAKEDOWN', 'FILTER_REASON_RAI_PQC', 'FILTER_REASON_ATLAS', 'FILTER_REASON_RAI_CSAM', 'FILTER_REASON_RAI_FRINGE', 'FILTER_REASON_RAI_SPII', 'FILTER_REASON_RAI_IMAGE_VIOLENCE', 'FILTER_REASON_RAI_IMAGE_PORN', 'FILTER_REASON_RAI_IMAGE_CSAM', 'FILTER_REASON_RAI_IMAGE_PEDO', 'FILTER_REASON_RAI_VIDEO_FRAME_VIOLENCE', 'FILTER_REASON_RAI_VIDEO_FRAME_PORN', 'FILTER_REASON_RAI_VIDEO_FRAME_CSAM', 'FILTER_REASON_RAI_VIDEO_FRAME_PEDO', 'FILTER_REASON_RAI_CONTEXTUAL_DANGEROUS', 'FILTER_REASON_RAI_GRAIL_TEXT', 'FILTER_REASON_RAI_GRAIL_IMAGE', 'FILTER_REASON_RAI_SAFETYCAT', 'FILTER_REASON_TOXICITY', 'FILTER_REASON_ATLAS_PRICING', 'FILTER_REASON_ATLAS_BILLING', 'FILTER_REASON_ATLAS_NON_ENGLISH_QUESTION', 'FILTER_REASON_ATLAS_NOT_RELATED_TO_GCP', 'FILTER_REASON_ATLAS_AWS_AZURE_RELATED')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of LearningGenaiRootFilterMetadata from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of debug_info
        if self.debug_info:
            _dict['debugInfo'] = self.debug_info.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of LearningGenaiRootFilterMetadata from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "confidence": obj.get("confidence"),
            "debugInfo": LearningGenaiRootFilterMetadataFilterDebugInfo.from_dict(obj["debugInfo"]) if obj.get("debugInfo") is not None else None,
            "fallback": obj.get("fallback"),
            "info": obj.get("info"),
            "name": obj.get("name"),
            "reason": obj.get("reason"),
            "text": obj.get("text")
        })
        return _obj



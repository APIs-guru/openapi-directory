# coding: utf-8

"""
    Vertex AI API

    Train high-quality custom machine learning models with minimal machine learning expertise and effort.

    The version of the OpenAPI document: v1beta1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from openapi_client.models.cloud_ai_nl_llm_proto_service_safety_rating_influential_term import CloudAiNlLlmProtoServiceSafetyRatingInfluentialTerm
from typing import Optional, Set
from typing_extensions import Self

class CloudAiNlLlmProtoServiceSafetyRating(BaseModel):
    """
    Safety rating corresponding to the generated content.
    """ # noqa: E501
    blocked: Optional[StrictBool] = Field(default=None, description="Indicates whether the content was filtered out because of this rating.")
    category: Optional[StrictStr] = Field(default=None, description="Harm category.")
    influential_terms: Optional[List[CloudAiNlLlmProtoServiceSafetyRatingInfluentialTerm]] = Field(default=None, description="The influential terms that could potentially block the response.", alias="influentialTerms")
    probability: Optional[StrictStr] = Field(default=None, description="Harm probability levels in the content.")
    probability_score: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Harm probability score.", alias="probabilityScore")
    severity: Optional[StrictStr] = Field(default=None, description="Harm severity levels in the content.")
    severity_score: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Harm severity score.", alias="severityScore")
    __properties: ClassVar[List[str]] = ["blocked", "category", "influentialTerms", "probability", "probabilityScore", "severity", "severityScore"]

    @field_validator('category')
    def category_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['HARM_CATEGORY_UNSPECIFIED', 'HARM_CATEGORY_HATE_SPEECH', 'HARM_CATEGORY_DANGEROUS_CONTENT', 'HARM_CATEGORY_HARASSMENT', 'HARM_CATEGORY_SEXUALLY_EXPLICIT']):
            raise ValueError("must be one of enum values ('HARM_CATEGORY_UNSPECIFIED', 'HARM_CATEGORY_HATE_SPEECH', 'HARM_CATEGORY_DANGEROUS_CONTENT', 'HARM_CATEGORY_HARASSMENT', 'HARM_CATEGORY_SEXUALLY_EXPLICIT')")
        return value

    @field_validator('probability')
    def probability_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['HARM_PROBABILITY_UNSPECIFIED', 'NEGLIGIBLE', 'LOW', 'MEDIUM', 'HIGH']):
            raise ValueError("must be one of enum values ('HARM_PROBABILITY_UNSPECIFIED', 'NEGLIGIBLE', 'LOW', 'MEDIUM', 'HIGH')")
        return value

    @field_validator('severity')
    def severity_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['HARM_SEVERITY_UNSPECIFIED', 'HARM_SEVERITY_NEGLIGIBLE', 'HARM_SEVERITY_LOW', 'HARM_SEVERITY_MEDIUM', 'HARM_SEVERITY_HIGH']):
            raise ValueError("must be one of enum values ('HARM_SEVERITY_UNSPECIFIED', 'HARM_SEVERITY_NEGLIGIBLE', 'HARM_SEVERITY_LOW', 'HARM_SEVERITY_MEDIUM', 'HARM_SEVERITY_HIGH')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CloudAiNlLlmProtoServiceSafetyRating from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in influential_terms (list)
        _items = []
        if self.influential_terms:
            for _item_influential_terms in self.influential_terms:
                if _item_influential_terms:
                    _items.append(_item_influential_terms.to_dict())
            _dict['influentialTerms'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CloudAiNlLlmProtoServiceSafetyRating from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "blocked": obj.get("blocked"),
            "category": obj.get("category"),
            "influentialTerms": [CloudAiNlLlmProtoServiceSafetyRatingInfluentialTerm.from_dict(_item) for _item in obj["influentialTerms"]] if obj.get("influentialTerms") is not None else None,
            "probability": obj.get("probability"),
            "probabilityScore": obj.get("probabilityScore"),
            "severity": obj.get("severity"),
            "severityScore": obj.get("severityScore")
        })
        return _obj



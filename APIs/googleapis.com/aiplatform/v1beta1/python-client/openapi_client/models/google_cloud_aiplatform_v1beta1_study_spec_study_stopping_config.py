# coding: utf-8

"""
    Vertex AI API

    Train high-quality custom machine learning models with minimal machine learning expertise and effort.

    The version of the OpenAPI document: v1beta1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_cloud_aiplatform_v1beta1_study_time_constraint import GoogleCloudAiplatformV1beta1StudyTimeConstraint
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudAiplatformV1beta1StudySpecStudyStoppingConfig(BaseModel):
    """
    The configuration (stopping conditions) for automated stopping of a Study. Conditions include trial budgets, time budgets, and convergence detection.
    """ # noqa: E501
    max_duration_no_progress: Optional[StrictStr] = Field(default=None, description="If the objective value has not improved for this much time, stop the study. WARNING: Effective only for single-objective studies.", alias="maxDurationNoProgress")
    max_num_trials: Optional[StrictInt] = Field(default=None, description="If there are more than this many trials, stop the study.", alias="maxNumTrials")
    max_num_trials_no_progress: Optional[StrictInt] = Field(default=None, description="If the objective value has not improved for this many consecutive trials, stop the study. WARNING: Effective only for single-objective studies.", alias="maxNumTrialsNoProgress")
    maximum_runtime_constraint: Optional[GoogleCloudAiplatformV1beta1StudyTimeConstraint] = Field(default=None, alias="maximumRuntimeConstraint")
    min_num_trials: Optional[StrictInt] = Field(default=None, description="If there are fewer than this many COMPLETED trials, do not stop the study.", alias="minNumTrials")
    minimum_runtime_constraint: Optional[GoogleCloudAiplatformV1beta1StudyTimeConstraint] = Field(default=None, alias="minimumRuntimeConstraint")
    should_stop_asap: Optional[StrictBool] = Field(default=None, description="If true, a Study enters STOPPING_ASAP whenever it would normally enters STOPPING state. The bottom line is: set to true if you want to interrupt on-going evaluations of Trials as soon as the study stopping condition is met. (Please see Study.State documentation for the source of truth).", alias="shouldStopAsap")
    __properties: ClassVar[List[str]] = ["maxDurationNoProgress", "maxNumTrials", "maxNumTrialsNoProgress", "maximumRuntimeConstraint", "minNumTrials", "minimumRuntimeConstraint", "shouldStopAsap"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudAiplatformV1beta1StudySpecStudyStoppingConfig from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of maximum_runtime_constraint
        if self.maximum_runtime_constraint:
            _dict['maximumRuntimeConstraint'] = self.maximum_runtime_constraint.to_dict()
        # override the default output from pydantic by calling `to_dict()` of minimum_runtime_constraint
        if self.minimum_runtime_constraint:
            _dict['minimumRuntimeConstraint'] = self.minimum_runtime_constraint.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudAiplatformV1beta1StudySpecStudyStoppingConfig from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "maxDurationNoProgress": obj.get("maxDurationNoProgress"),
            "maxNumTrials": obj.get("maxNumTrials"),
            "maxNumTrialsNoProgress": obj.get("maxNumTrialsNoProgress"),
            "maximumRuntimeConstraint": GoogleCloudAiplatformV1beta1StudyTimeConstraint.from_dict(obj["maximumRuntimeConstraint"]) if obj.get("maximumRuntimeConstraint") is not None else None,
            "minNumTrials": obj.get("minNumTrials"),
            "minimumRuntimeConstraint": GoogleCloudAiplatformV1beta1StudyTimeConstraint.from_dict(obj["minimumRuntimeConstraint"]) if obj.get("minimumRuntimeConstraint") is not None else None,
            "shouldStopAsap": obj.get("shouldStopAsap")
        })
        return _obj



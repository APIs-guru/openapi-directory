# coding: utf-8

"""
    Cloud Translation API

    Integrates text translation into your website or application.

    The version of the OpenAPI document: v3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.glossary_input_config import GlossaryInputConfig
from openapi_client.models.language_code_pair import LanguageCodePair
from openapi_client.models.language_codes_set import LanguageCodesSet
from typing import Optional, Set
from typing_extensions import Self

class Glossary(BaseModel):
    """
    Represents a glossary built from user-provided data.
    """ # noqa: E501
    display_name: Optional[StrictStr] = Field(default=None, description="Optional. The display name of the glossary.", alias="displayName")
    end_time: Optional[StrictStr] = Field(default=None, description="Output only. When the glossary creation was finished.", alias="endTime")
    entry_count: Optional[StrictInt] = Field(default=None, description="Output only. The number of entries defined in the glossary.", alias="entryCount")
    input_config: Optional[GlossaryInputConfig] = Field(default=None, alias="inputConfig")
    language_codes_set: Optional[LanguageCodesSet] = Field(default=None, alias="languageCodesSet")
    language_pair: Optional[LanguageCodePair] = Field(default=None, alias="languagePair")
    name: Optional[StrictStr] = Field(default=None, description="Required. The resource name of the glossary. Glossary names have the form `projects/{project-number-or-id}/locations/{location-id}/glossaries/{glossary-id}`.")
    submit_time: Optional[StrictStr] = Field(default=None, description="Output only. When CreateGlossary was called.", alias="submitTime")
    __properties: ClassVar[List[str]] = ["displayName", "endTime", "entryCount", "inputConfig", "languageCodesSet", "languagePair", "name", "submitTime"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Glossary from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "end_time",
            "entry_count",
            "submit_time",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of input_config
        if self.input_config:
            _dict['inputConfig'] = self.input_config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of language_codes_set
        if self.language_codes_set:
            _dict['languageCodesSet'] = self.language_codes_set.to_dict()
        # override the default output from pydantic by calling `to_dict()` of language_pair
        if self.language_pair:
            _dict['languagePair'] = self.language_pair.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Glossary from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "displayName": obj.get("displayName"),
            "endTime": obj.get("endTime"),
            "entryCount": obj.get("entryCount"),
            "inputConfig": GlossaryInputConfig.from_dict(obj["inputConfig"]) if obj.get("inputConfig") is not None else None,
            "languageCodesSet": LanguageCodesSet.from_dict(obj["languageCodesSet"]) if obj.get("languageCodesSet") is not None else None,
            "languagePair": LanguageCodePair.from_dict(obj["languagePair"]) if obj.get("languagePair") is not None else None,
            "name": obj.get("name"),
            "submitTime": obj.get("submitTime")
        })
        return _obj



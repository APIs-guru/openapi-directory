# coding: utf-8

"""
    Cloud Translation API

    Integrates text translation into your website or application.

    The version of the OpenAPI document: v3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.input_config import InputConfig
from openapi_client.models.output_config import OutputConfig
from openapi_client.models.translate_text_glossary_config import TranslateTextGlossaryConfig
from typing import Optional, Set
from typing_extensions import Self

class BatchTranslateTextRequest(BaseModel):
    """
    The batch translation request.
    """ # noqa: E501
    glossaries: Optional[Dict[str, TranslateTextGlossaryConfig]] = Field(default=None, description="Optional. Glossaries to be applied for translation. It's keyed by target language code.")
    input_configs: Optional[List[InputConfig]] = Field(default=None, description="Required. Input configurations. The total number of files matched should be <= 100. The total content size should be <= 100M Unicode codepoints. The files must use UTF-8 encoding.", alias="inputConfigs")
    labels: Optional[Dict[str, StrictStr]] = Field(default=None, description="Optional. The labels with user-defined metadata for the request. Label keys and values can be no longer than 63 characters (Unicode codepoints), can only contain lowercase letters, numeric characters, underscores and dashes. International characters are allowed. Label values are optional. Label keys must start with a letter. See https://cloud.google.com/translate/docs/advanced/labels for more information.")
    models: Optional[Dict[str, StrictStr]] = Field(default=None, description="Optional. The models to use for translation. Map's key is target language code. Map's value is model name. Value can be a built-in general model, or an AutoML Translation model. The value format depends on model type: - AutoML Translation models: `projects/{project-number-or-id}/locations/{location-id}/models/{model-id}` - General (built-in) models: `projects/{project-number-or-id}/locations/{location-id}/models/general/nmt`, If the map is empty or a specific model is not requested for a language pair, then default google model (nmt) is used.")
    output_config: Optional[OutputConfig] = Field(default=None, alias="outputConfig")
    source_language_code: Optional[StrictStr] = Field(default=None, description="Required. Source language code.", alias="sourceLanguageCode")
    target_language_codes: Optional[List[StrictStr]] = Field(default=None, description="Required. Specify up to 10 language codes here.", alias="targetLanguageCodes")
    __properties: ClassVar[List[str]] = ["glossaries", "inputConfigs", "labels", "models", "outputConfig", "sourceLanguageCode", "targetLanguageCodes"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of BatchTranslateTextRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each value in glossaries (dict)
        _field_dict = {}
        if self.glossaries:
            for _key_glossaries in self.glossaries:
                if self.glossaries[_key_glossaries]:
                    _field_dict[_key_glossaries] = self.glossaries[_key_glossaries].to_dict()
            _dict['glossaries'] = _field_dict
        # override the default output from pydantic by calling `to_dict()` of each item in input_configs (list)
        _items = []
        if self.input_configs:
            for _item_input_configs in self.input_configs:
                if _item_input_configs:
                    _items.append(_item_input_configs.to_dict())
            _dict['inputConfigs'] = _items
        # override the default output from pydantic by calling `to_dict()` of output_config
        if self.output_config:
            _dict['outputConfig'] = self.output_config.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of BatchTranslateTextRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "glossaries": dict(
                (_k, TranslateTextGlossaryConfig.from_dict(_v))
                for _k, _v in obj["glossaries"].items()
            )
            if obj.get("glossaries") is not None
            else None,
            "inputConfigs": [InputConfig.from_dict(_item) for _item in obj["inputConfigs"]] if obj.get("inputConfigs") is not None else None,
            "labels": obj.get("labels"),
            "models": obj.get("models"),
            "outputConfig": OutputConfig.from_dict(obj["outputConfig"]) if obj.get("outputConfig") is not None else None,
            "sourceLanguageCode": obj.get("sourceLanguageCode"),
            "targetLanguageCodes": obj.get("targetLanguageCodes")
        })
        return _obj



# coding: utf-8

"""
    Cloud Translation API

    Integrates text translation into your website or application.

    The version of the OpenAPI document: v3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class Model(BaseModel):
    """
    A trained translation model.
    """ # noqa: E501
    create_time: Optional[StrictStr] = Field(default=None, description="Output only. Timestamp when the model resource was created, which is also when the training started.", alias="createTime")
    dataset: Optional[StrictStr] = Field(default=None, description="The dataset from which the model is trained, in form of `projects/{project-number-or-id}/locations/{location_id}/datasets/{dataset_id}`")
    display_name: Optional[StrictStr] = Field(default=None, description="The name of the model to show in the interface. The name can be up to 32 characters long and can consist only of ASCII Latin letters A-Z and a-z, underscores (_), and ASCII digits 0-9.", alias="displayName")
    name: Optional[StrictStr] = Field(default=None, description="The resource name of the model, in form of `projects/{project-number-or-id}/locations/{location_id}/models/{model_id}`")
    source_language_code: Optional[StrictStr] = Field(default=None, description="Output only. The BCP-47 language code of the source language.", alias="sourceLanguageCode")
    target_language_code: Optional[StrictStr] = Field(default=None, description="Output only. The BCP-47 language code of the target language.", alias="targetLanguageCode")
    test_example_count: Optional[StrictInt] = Field(default=None, description="Output only. Number of examples (sentence pairs) used to test the model.", alias="testExampleCount")
    train_example_count: Optional[StrictInt] = Field(default=None, description="Output only. Number of examples (sentence pairs) used to train the model.", alias="trainExampleCount")
    update_time: Optional[StrictStr] = Field(default=None, description="Output only. Timestamp when this model was last updated.", alias="updateTime")
    validate_example_count: Optional[StrictInt] = Field(default=None, description="Output only. Number of examples (sentence pairs) used to validate the model.", alias="validateExampleCount")
    __properties: ClassVar[List[str]] = ["createTime", "dataset", "displayName", "name", "sourceLanguageCode", "targetLanguageCode", "testExampleCount", "trainExampleCount", "updateTime", "validateExampleCount"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Model from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "create_time",
            "source_language_code",
            "target_language_code",
            "test_example_count",
            "train_example_count",
            "update_time",
            "validate_example_count",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Model from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "createTime": obj.get("createTime"),
            "dataset": obj.get("dataset"),
            "displayName": obj.get("displayName"),
            "name": obj.get("name"),
            "sourceLanguageCode": obj.get("sourceLanguageCode"),
            "targetLanguageCode": obj.get("targetLanguageCode"),
            "testExampleCount": obj.get("testExampleCount"),
            "trainExampleCount": obj.get("trainExampleCount"),
            "updateTime": obj.get("updateTime"),
            "validateExampleCount": obj.get("validateExampleCount")
        })
        return _obj



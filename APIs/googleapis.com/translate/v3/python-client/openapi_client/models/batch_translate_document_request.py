# coding: utf-8

"""
    Cloud Translation API

    Integrates text translation into your website or application.

    The version of the OpenAPI document: v3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.batch_document_input_config import BatchDocumentInputConfig
from openapi_client.models.batch_document_output_config import BatchDocumentOutputConfig
from openapi_client.models.translate_text_glossary_config import TranslateTextGlossaryConfig
from typing import Optional, Set
from typing_extensions import Self

class BatchTranslateDocumentRequest(BaseModel):
    """
    The BatchTranslateDocument request.
    """ # noqa: E501
    customized_attribution: Optional[StrictStr] = Field(default=None, description="Optional. This flag is to support user customized attribution. If not provided, the default is `Machine Translated by Google`. Customized attribution should follow rules in https://cloud.google.com/translate/attribution#attribution_and_logos", alias="customizedAttribution")
    enable_rotation_correction: Optional[StrictBool] = Field(default=None, description="Optional. If true, enable auto rotation correction in DVS.", alias="enableRotationCorrection")
    enable_shadow_removal_native_pdf: Optional[StrictBool] = Field(default=None, description="Optional. If true, use the text removal server to remove the shadow text on background image for native pdf translation. Shadow removal feature can only be enabled when is_translate_native_pdf_only: false && pdf_native_only: false", alias="enableShadowRemovalNativePdf")
    format_conversions: Optional[Dict[str, StrictStr]] = Field(default=None, description="Optional. The file format conversion map that is applied to all input files. The map key is the original mime_type. The map value is the target mime_type of translated documents. Supported file format conversion includes: - `application/pdf` to `application/vnd.openxmlformats-officedocument.wordprocessingml.document` If nothing specified, output files will be in the same format as the original file.", alias="formatConversions")
    glossaries: Optional[Dict[str, TranslateTextGlossaryConfig]] = Field(default=None, description="Optional. Glossaries to be applied. It's keyed by target language code.")
    input_configs: Optional[List[BatchDocumentInputConfig]] = Field(default=None, description="Required. Input configurations. The total number of files matched should be <= 100. The total content size to translate should be <= 100M Unicode codepoints. The files must use UTF-8 encoding.", alias="inputConfigs")
    models: Optional[Dict[str, StrictStr]] = Field(default=None, description="Optional. The models to use for translation. Map's key is target language code. Map's value is the model name. Value can be a built-in general model, or an AutoML Translation model. The value format depends on model type: - AutoML Translation models: `projects/{project-number-or-id}/locations/{location-id}/models/{model-id}` - General (built-in) models: `projects/{project-number-or-id}/locations/{location-id}/models/general/nmt`, If the map is empty or a specific model is not requested for a language pair, then default google model (nmt) is used.")
    output_config: Optional[BatchDocumentOutputConfig] = Field(default=None, alias="outputConfig")
    source_language_code: Optional[StrictStr] = Field(default=None, description="Required. The ISO-639 language code of the input document if known, for example, \"en-US\" or \"sr-Latn\". Supported language codes are listed in [Language Support](https://cloud.google.com/translate/docs/languages).", alias="sourceLanguageCode")
    target_language_codes: Optional[List[StrictStr]] = Field(default=None, description="Required. The ISO-639 language code to use for translation of the input document. Specify up to 10 language codes here.", alias="targetLanguageCodes")
    __properties: ClassVar[List[str]] = ["customizedAttribution", "enableRotationCorrection", "enableShadowRemovalNativePdf", "formatConversions", "glossaries", "inputConfigs", "models", "outputConfig", "sourceLanguageCode", "targetLanguageCodes"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of BatchTranslateDocumentRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each value in glossaries (dict)
        _field_dict = {}
        if self.glossaries:
            for _key_glossaries in self.glossaries:
                if self.glossaries[_key_glossaries]:
                    _field_dict[_key_glossaries] = self.glossaries[_key_glossaries].to_dict()
            _dict['glossaries'] = _field_dict
        # override the default output from pydantic by calling `to_dict()` of each item in input_configs (list)
        _items = []
        if self.input_configs:
            for _item_input_configs in self.input_configs:
                if _item_input_configs:
                    _items.append(_item_input_configs.to_dict())
            _dict['inputConfigs'] = _items
        # override the default output from pydantic by calling `to_dict()` of output_config
        if self.output_config:
            _dict['outputConfig'] = self.output_config.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of BatchTranslateDocumentRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "customizedAttribution": obj.get("customizedAttribution"),
            "enableRotationCorrection": obj.get("enableRotationCorrection"),
            "enableShadowRemovalNativePdf": obj.get("enableShadowRemovalNativePdf"),
            "formatConversions": obj.get("formatConversions"),
            "glossaries": dict(
                (_k, TranslateTextGlossaryConfig.from_dict(_v))
                for _k, _v in obj["glossaries"].items()
            )
            if obj.get("glossaries") is not None
            else None,
            "inputConfigs": [BatchDocumentInputConfig.from_dict(_item) for _item in obj["inputConfigs"]] if obj.get("inputConfigs") is not None else None,
            "models": obj.get("models"),
            "outputConfig": BatchDocumentOutputConfig.from_dict(obj["outputConfig"]) if obj.get("outputConfig") is not None else None,
            "sourceLanguageCode": obj.get("sourceLanguageCode"),
            "targetLanguageCodes": obj.get("targetLanguageCodes")
        })
        return _obj



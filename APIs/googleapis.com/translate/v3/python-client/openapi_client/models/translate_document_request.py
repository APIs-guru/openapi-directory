# coding: utf-8

"""
    Cloud Translation API

    Integrates text translation into your website or application.

    The version of the OpenAPI document: v3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.document_input_config import DocumentInputConfig
from openapi_client.models.document_output_config import DocumentOutputConfig
from openapi_client.models.translate_text_glossary_config import TranslateTextGlossaryConfig
from typing import Optional, Set
from typing_extensions import Self

class TranslateDocumentRequest(BaseModel):
    """
    A document translation request.
    """ # noqa: E501
    customized_attribution: Optional[StrictStr] = Field(default=None, description="Optional. This flag is to support user customized attribution. If not provided, the default is `Machine Translated by Google`. Customized attribution should follow rules in https://cloud.google.com/translate/attribution#attribution_and_logos", alias="customizedAttribution")
    document_input_config: Optional[DocumentInputConfig] = Field(default=None, alias="documentInputConfig")
    document_output_config: Optional[DocumentOutputConfig] = Field(default=None, alias="documentOutputConfig")
    enable_rotation_correction: Optional[StrictBool] = Field(default=None, description="Optional. If true, enable auto rotation correction in DVS.", alias="enableRotationCorrection")
    enable_shadow_removal_native_pdf: Optional[StrictBool] = Field(default=None, description="Optional. If true, use the text removal server to remove the shadow text on background image for native pdf translation. Shadow removal feature can only be enabled when is_translate_native_pdf_only: false && pdf_native_only: false", alias="enableShadowRemovalNativePdf")
    glossary_config: Optional[TranslateTextGlossaryConfig] = Field(default=None, alias="glossaryConfig")
    is_translate_native_pdf_only: Optional[StrictBool] = Field(default=None, description="Optional. is_translate_native_pdf_only field for external customers. If true, the page limit of online native pdf translation is 300 and only native pdf pages will be translated.", alias="isTranslateNativePdfOnly")
    labels: Optional[Dict[str, StrictStr]] = Field(default=None, description="Optional. The labels with user-defined metadata for the request. Label keys and values can be no longer than 63 characters (Unicode codepoints), can only contain lowercase letters, numeric characters, underscores and dashes. International characters are allowed. Label values are optional. Label keys must start with a letter. See https://cloud.google.com/translate/docs/advanced/labels for more information.")
    model: Optional[StrictStr] = Field(default=None, description="Optional. The `model` type requested for this translation. The format depends on model type: - AutoML Translation models: `projects/{project-number-or-id}/locations/{location-id}/models/{model-id}` - General (built-in) models: `projects/{project-number-or-id}/locations/{location-id}/models/general/nmt`, If not provided, the default Google model (NMT) will be used for translation.")
    source_language_code: Optional[StrictStr] = Field(default=None, description="Optional. The ISO-639 language code of the input document if known, for example, \"en-US\" or \"sr-Latn\". Supported language codes are listed in Language Support. If the source language isn't specified, the API attempts to identify the source language automatically and returns the source language within the response. Source language must be specified if the request contains a glossary or a custom model.", alias="sourceLanguageCode")
    target_language_code: Optional[StrictStr] = Field(default=None, description="Required. The ISO-639 language code to use for translation of the input document, set to one of the language codes listed in Language Support.", alias="targetLanguageCode")
    __properties: ClassVar[List[str]] = ["customizedAttribution", "documentInputConfig", "documentOutputConfig", "enableRotationCorrection", "enableShadowRemovalNativePdf", "glossaryConfig", "isTranslateNativePdfOnly", "labels", "model", "sourceLanguageCode", "targetLanguageCode"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of TranslateDocumentRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of document_input_config
        if self.document_input_config:
            _dict['documentInputConfig'] = self.document_input_config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of document_output_config
        if self.document_output_config:
            _dict['documentOutputConfig'] = self.document_output_config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of glossary_config
        if self.glossary_config:
            _dict['glossaryConfig'] = self.glossary_config.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of TranslateDocumentRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "customizedAttribution": obj.get("customizedAttribution"),
            "documentInputConfig": DocumentInputConfig.from_dict(obj["documentInputConfig"]) if obj.get("documentInputConfig") is not None else None,
            "documentOutputConfig": DocumentOutputConfig.from_dict(obj["documentOutputConfig"]) if obj.get("documentOutputConfig") is not None else None,
            "enableRotationCorrection": obj.get("enableRotationCorrection"),
            "enableShadowRemovalNativePdf": obj.get("enableShadowRemovalNativePdf"),
            "glossaryConfig": TranslateTextGlossaryConfig.from_dict(obj["glossaryConfig"]) if obj.get("glossaryConfig") is not None else None,
            "isTranslateNativePdfOnly": obj.get("isTranslateNativePdfOnly"),
            "labels": obj.get("labels"),
            "model": obj.get("model"),
            "sourceLanguageCode": obj.get("sourceLanguageCode"),
            "targetLanguageCode": obj.get("targetLanguageCode")
        })
        return _obj



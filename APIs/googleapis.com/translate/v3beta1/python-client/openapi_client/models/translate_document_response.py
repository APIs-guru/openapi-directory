# coding: utf-8

"""
    Cloud Translation API

    Integrates text translation into your website or application.

    The version of the OpenAPI document: v3beta1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.document_translation import DocumentTranslation
from openapi_client.models.translate_text_glossary_config import TranslateTextGlossaryConfig
from typing import Optional, Set
from typing_extensions import Self

class TranslateDocumentResponse(BaseModel):
    """
    A translated document response message.
    """ # noqa: E501
    document_translation: Optional[DocumentTranslation] = Field(default=None, alias="documentTranslation")
    glossary_config: Optional[TranslateTextGlossaryConfig] = Field(default=None, alias="glossaryConfig")
    glossary_document_translation: Optional[DocumentTranslation] = Field(default=None, alias="glossaryDocumentTranslation")
    model: Optional[StrictStr] = Field(default=None, description="Only present when 'model' is present in the request. 'model' is normalized to have a project number. For example: If the 'model' field in TranslateDocumentRequest is: `projects/{project-id}/locations/{location-id}/models/general/nmt` then `model` here would be normalized to `projects/{project-number}/locations/{location-id}/models/general/nmt`.")
    __properties: ClassVar[List[str]] = ["documentTranslation", "glossaryConfig", "glossaryDocumentTranslation", "model"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of TranslateDocumentResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of document_translation
        if self.document_translation:
            _dict['documentTranslation'] = self.document_translation.to_dict()
        # override the default output from pydantic by calling `to_dict()` of glossary_config
        if self.glossary_config:
            _dict['glossaryConfig'] = self.glossary_config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of glossary_document_translation
        if self.glossary_document_translation:
            _dict['glossaryDocumentTranslation'] = self.glossary_document_translation.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of TranslateDocumentResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "documentTranslation": DocumentTranslation.from_dict(obj["documentTranslation"]) if obj.get("documentTranslation") is not None else None,
            "glossaryConfig": TranslateTextGlossaryConfig.from_dict(obj["glossaryConfig"]) if obj.get("glossaryConfig") is not None else None,
            "glossaryDocumentTranslation": DocumentTranslation.from_dict(obj["glossaryDocumentTranslation"]) if obj.get("glossaryDocumentTranslation") is not None else None,
            "model": obj.get("model")
        })
        return _obj



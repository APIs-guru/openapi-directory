# coding: utf-8

"""
    Cloud Translation API

    Integrates text translation into your website or application.

    The version of the OpenAPI document: v3beta1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.translate_text_glossary_config import TranslateTextGlossaryConfig
from typing import Optional, Set
from typing_extensions import Self

class TranslateTextRequest(BaseModel):
    """
    The request message for synchronous translation.
    """ # noqa: E501
    contents: Optional[List[StrictStr]] = Field(default=None, description="Required. The content of the input in string format. We recommend the total content be less than 30k codepoints. The max length of this field is 1024. Use BatchTranslateText for larger text.")
    glossary_config: Optional[TranslateTextGlossaryConfig] = Field(default=None, alias="glossaryConfig")
    labels: Optional[Dict[str, StrictStr]] = Field(default=None, description="Optional. The labels with user-defined metadata for the request. Label keys and values can be no longer than 63 characters (Unicode codepoints), can only contain lowercase letters, numeric characters, underscores and dashes. International characters are allowed. Label values are optional. Label keys must start with a letter. See https://cloud.google.com/translate/docs/labels for more information.")
    mime_type: Optional[StrictStr] = Field(default=None, description="Optional. The format of the source text, for example, \"text/html\", \"text/plain\". If left blank, the MIME type defaults to \"text/html\".", alias="mimeType")
    model: Optional[StrictStr] = Field(default=None, description="Optional. The `model` type requested for this translation. The format depends on model type: - AutoML Translation models: `projects/{project-number-or-id}/locations/{location-id}/models/{model-id}` - General (built-in) models: `projects/{project-number-or-id}/locations/{location-id}/models/general/nmt`, For global (non-regionalized) requests, use `location-id` `global`. For example, `projects/{project-number-or-id}/locations/global/models/general/nmt`. If not provided, the default Google model (NMT) will be used")
    source_language_code: Optional[StrictStr] = Field(default=None, description="Optional. The BCP-47 language code of the input text if known, for example, \"en-US\" or \"sr-Latn\". Supported language codes are listed in Language Support. If the source language isn't specified, the API attempts to identify the source language automatically and returns the source language within the response.", alias="sourceLanguageCode")
    target_language_code: Optional[StrictStr] = Field(default=None, description="Required. The BCP-47 language code to use for translation of the input text, set to one of the language codes listed in Language Support.", alias="targetLanguageCode")
    __properties: ClassVar[List[str]] = ["contents", "glossaryConfig", "labels", "mimeType", "model", "sourceLanguageCode", "targetLanguageCode"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of TranslateTextRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of glossary_config
        if self.glossary_config:
            _dict['glossaryConfig'] = self.glossary_config.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of TranslateTextRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "contents": obj.get("contents"),
            "glossaryConfig": TranslateTextGlossaryConfig.from_dict(obj["glossaryConfig"]) if obj.get("glossaryConfig") is not None else None,
            "labels": obj.get("labels"),
            "mimeType": obj.get("mimeType"),
            "model": obj.get("model"),
            "sourceLanguageCode": obj.get("sourceLanguageCode"),
            "targetLanguageCode": obj.get("targetLanguageCode")
        })
        return _obj



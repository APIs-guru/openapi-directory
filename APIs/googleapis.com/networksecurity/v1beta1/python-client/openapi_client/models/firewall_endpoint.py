# coding: utf-8

"""
    Network Security API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v1beta1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.firewall_endpoint_association_reference import FirewallEndpointAssociationReference
from typing import Optional, Set
from typing_extensions import Self

class FirewallEndpoint(BaseModel):
    """
    Message describing Endpoint object
    """ # noqa: E501
    associated_networks: Optional[List[StrictStr]] = Field(default=None, description="Output only. List of networks that are associated with this endpoint in the local zone. This is a projection of the FirewallEndpointAssociations pointing at this endpoint. A network will only appear in this list after traffic routing is fully configured. Format: projects/{project}/global/networks/{name}.", alias="associatedNetworks")
    associations: Optional[List[FirewallEndpointAssociationReference]] = Field(default=None, description="Output only. List of FirewallEndpointAssociations that are associated to this endpoint. An association will only appear in this list after traffic routing is fully configured.")
    billing_project_id: Optional[StrictStr] = Field(default=None, description="Required. Project to bill on endpoint uptime usage.", alias="billingProjectId")
    create_time: Optional[StrictStr] = Field(default=None, description="Output only. Create time stamp", alias="createTime")
    description: Optional[StrictStr] = Field(default=None, description="Optional. Description of the firewall endpoint. Max length 2048 characters.")
    labels: Optional[Dict[str, StrictStr]] = Field(default=None, description="Optional. Labels as key value pairs")
    name: Optional[StrictStr] = Field(default=None, description="Immutable. Identifier. name of resource")
    reconciling: Optional[StrictBool] = Field(default=None, description="Output only. Whether reconciling is in progress, recommended per https://google.aip.dev/128.")
    state: Optional[StrictStr] = Field(default=None, description="Output only. Current state of the endpoint.")
    update_time: Optional[StrictStr] = Field(default=None, description="Output only. Update time stamp", alias="updateTime")
    __properties: ClassVar[List[str]] = ["associatedNetworks", "associations", "billingProjectId", "createTime", "description", "labels", "name", "reconciling", "state", "updateTime"]

    @field_validator('state')
    def state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['STATE_UNSPECIFIED', 'CREATING', 'ACTIVE', 'DELETING', 'INACTIVE']):
            raise ValueError("must be one of enum values ('STATE_UNSPECIFIED', 'CREATING', 'ACTIVE', 'DELETING', 'INACTIVE')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of FirewallEndpoint from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "associated_networks",
            "associations",
            "create_time",
            "reconciling",
            "state",
            "update_time",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in associations (list)
        _items = []
        if self.associations:
            for _item_associations in self.associations:
                if _item_associations:
                    _items.append(_item_associations.to_dict())
            _dict['associations'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of FirewallEndpoint from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "associatedNetworks": obj.get("associatedNetworks"),
            "associations": [FirewallEndpointAssociationReference.from_dict(_item) for _item in obj["associations"]] if obj.get("associations") is not None else None,
            "billingProjectId": obj.get("billingProjectId"),
            "createTime": obj.get("createTime"),
            "description": obj.get("description"),
            "labels": obj.get("labels"),
            "name": obj.get("name"),
            "reconciling": obj.get("reconciling"),
            "state": obj.get("state"),
            "updateTime": obj.get("updateTime")
        })
        return _obj



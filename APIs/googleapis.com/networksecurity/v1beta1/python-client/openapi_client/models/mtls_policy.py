# coding: utf-8

"""
    Network Security API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v1beta1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.validation_ca import ValidationCA
from typing import Optional, Set
from typing_extensions import Self

class MTLSPolicy(BaseModel):
    """
    Specification of the MTLSPolicy.
    """ # noqa: E501
    client_validation_ca: Optional[List[ValidationCA]] = Field(default=None, description="Required if the policy is to be used with Traffic Director. For external HTTPS load balancers it must be empty. Defines the mechanism to obtain the Certificate Authority certificate to validate the client certificate.", alias="clientValidationCa")
    client_validation_mode: Optional[StrictStr] = Field(default=None, description="When the client presents an invalid certificate or no certificate to the load balancer, the `client_validation_mode` specifies how the client connection is handled. Required if the policy is to be used with the external HTTPS load balancing. For Traffic Director it must be empty.", alias="clientValidationMode")
    client_validation_trust_config: Optional[StrictStr] = Field(default=None, description="Reference to the TrustConfig from certificatemanager.googleapis.com namespace. If specified, the chain validation will be performed against certificates configured in the given TrustConfig. Allowed only if the policy is to be used with external HTTPS load balancers.", alias="clientValidationTrustConfig")
    __properties: ClassVar[List[str]] = ["clientValidationCa", "clientValidationMode", "clientValidationTrustConfig"]

    @field_validator('client_validation_mode')
    def client_validation_mode_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['CLIENT_VALIDATION_MODE_UNSPECIFIED', 'ALLOW_INVALID_OR_MISSING_CLIENT_CERT', 'REJECT_INVALID']):
            raise ValueError("must be one of enum values ('CLIENT_VALIDATION_MODE_UNSPECIFIED', 'ALLOW_INVALID_OR_MISSING_CLIENT_CERT', 'REJECT_INVALID')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of MTLSPolicy from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in client_validation_ca (list)
        _items = []
        if self.client_validation_ca:
            for _item_client_validation_ca in self.client_validation_ca:
                if _item_client_validation_ca:
                    _items.append(_item_client_validation_ca.to_dict())
            _dict['clientValidationCa'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of MTLSPolicy from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "clientValidationCa": [ValidationCA.from_dict(_item) for _item in obj["clientValidationCa"]] if obj.get("clientValidationCa") is not None else None,
            "clientValidationMode": obj.get("clientValidationMode"),
            "clientValidationTrustConfig": obj.get("clientValidationTrustConfig")
        })
        return _obj



# coding: utf-8

"""
    Network Security API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v1beta1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class SecurityProfileGroup(BaseModel):
    """
    SecurityProfileGroup is a resource that defines the behavior for various ProfileTypes. Next ID: 8
    """ # noqa: E501
    create_time: Optional[StrictStr] = Field(default=None, description="Output only. Resource creation timestamp.", alias="createTime")
    description: Optional[StrictStr] = Field(default=None, description="Optional. An optional description of the profile group. Max length 2048 characters.")
    etag: Optional[StrictStr] = Field(default=None, description="Output only. This checksum is computed by the server based on the value of other fields, and may be sent on update and delete requests to ensure the client has an up-to-date value before proceeding.")
    labels: Optional[Dict[str, StrictStr]] = Field(default=None, description="Optional. Labels as key value pairs.")
    name: Optional[StrictStr] = Field(default=None, description="Immutable. Identifier. Name of the SecurityProfileGroup resource. It matches pattern `projects|organizations/*/locations/{location}/securityProfileGroups/{security_profile_group}`.")
    threat_prevention_profile: Optional[StrictStr] = Field(default=None, description="Optional. Reference to a SecurityProfile with the threat prevention configuration for the SecurityProfileGroup.", alias="threatPreventionProfile")
    update_time: Optional[StrictStr] = Field(default=None, description="Output only. Last resource update timestamp.", alias="updateTime")
    __properties: ClassVar[List[str]] = ["createTime", "description", "etag", "labels", "name", "threatPreventionProfile", "updateTime"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SecurityProfileGroup from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "create_time",
            "etag",
            "update_time",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SecurityProfileGroup from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "createTime": obj.get("createTime"),
            "description": obj.get("description"),
            "etag": obj.get("etag"),
            "labels": obj.get("labels"),
            "name": obj.get("name"),
            "threatPreventionProfile": obj.get("threatPreventionProfile"),
            "updateTime": obj.get("updateTime")
        })
        return _obj



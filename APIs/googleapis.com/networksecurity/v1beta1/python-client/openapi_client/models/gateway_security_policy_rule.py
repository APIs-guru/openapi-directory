# coding: utf-8

"""
    Network Security API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v1beta1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class GatewaySecurityPolicyRule(BaseModel):
    """
    The GatewaySecurityPolicyRule resource is in a nested collection within a GatewaySecurityPolicy and represents a traffic matching condition and associated action to perform.
    """ # noqa: E501
    application_matcher: Optional[StrictStr] = Field(default=None, description="Optional. CEL expression for matching on L7/application level criteria.", alias="applicationMatcher")
    basic_profile: Optional[StrictStr] = Field(default=None, description="Required. Profile which tells what the primitive action should be.", alias="basicProfile")
    create_time: Optional[StrictStr] = Field(default=None, description="Output only. Time when the rule was created.", alias="createTime")
    description: Optional[StrictStr] = Field(default=None, description="Optional. Free-text description of the resource.")
    enabled: Optional[StrictBool] = Field(default=None, description="Required. Whether the rule is enforced.")
    name: Optional[StrictStr] = Field(default=None, description="Required. Immutable. Name of the resource. ame is the full resource name so projects/{project}/locations/{location}/gatewaySecurityPolicies/{gateway_security_policy}/rules/{rule} rule should match the pattern: (^[a-z]([a-z0-9-]{0,61}[a-z0-9])?$).")
    priority: Optional[StrictInt] = Field(default=None, description="Required. Priority of the rule. Lower number corresponds to higher precedence.")
    session_matcher: Optional[StrictStr] = Field(default=None, description="Required. CEL expression for matching on session criteria.", alias="sessionMatcher")
    tls_inspection_enabled: Optional[StrictBool] = Field(default=None, description="Optional. Flag to enable TLS inspection of traffic matching on , can only be true if the parent GatewaySecurityPolicy references a TLSInspectionConfig.", alias="tlsInspectionEnabled")
    update_time: Optional[StrictStr] = Field(default=None, description="Output only. Time when the rule was updated.", alias="updateTime")
    __properties: ClassVar[List[str]] = ["applicationMatcher", "basicProfile", "createTime", "description", "enabled", "name", "priority", "sessionMatcher", "tlsInspectionEnabled", "updateTime"]

    @field_validator('basic_profile')
    def basic_profile_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['BASIC_PROFILE_UNSPECIFIED', 'ALLOW', 'DENY']):
            raise ValueError("must be one of enum values ('BASIC_PROFILE_UNSPECIFIED', 'ALLOW', 'DENY')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GatewaySecurityPolicyRule from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "create_time",
            "update_time",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GatewaySecurityPolicyRule from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "applicationMatcher": obj.get("applicationMatcher"),
            "basicProfile": obj.get("basicProfile"),
            "createTime": obj.get("createTime"),
            "description": obj.get("description"),
            "enabled": obj.get("enabled"),
            "name": obj.get("name"),
            "priority": obj.get("priority"),
            "sessionMatcher": obj.get("sessionMatcher"),
            "tlsInspectionEnabled": obj.get("tlsInspectionEnabled"),
            "updateTime": obj.get("updateTime")
        })
        return _obj



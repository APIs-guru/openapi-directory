# coding: utf-8

"""
    Network Security API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v1beta1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class TlsInspectionPolicy(BaseModel):
    """
    The TlsInspectionPolicy resource contains references to CA pools in Certificate Authority Service and associated metadata.
    """ # noqa: E501
    ca_pool: Optional[StrictStr] = Field(default=None, description="Required. A CA pool resource used to issue interception certificates. The CA pool string has a relative resource path following the form \"projects/{project}/locations/{location}/caPools/{ca_pool}\".", alias="caPool")
    create_time: Optional[StrictStr] = Field(default=None, description="Output only. The timestamp when the resource was created.", alias="createTime")
    custom_tls_features: Optional[List[StrictStr]] = Field(default=None, description="Optional. List of custom TLS cipher suites selected. This field is valid only if the selected tls_feature_profile is CUSTOM. The compute.SslPoliciesService.ListAvailableFeatures method returns the set of features that can be specified in this list. Note that Secure Web Proxy does not yet honor this field.", alias="customTlsFeatures")
    description: Optional[StrictStr] = Field(default=None, description="Optional. Free-text description of the resource.")
    exclude_public_ca_set: Optional[StrictBool] = Field(default=None, description="Optional. If FALSE (the default), use our default set of public CAs in addition to any CAs specified in trust_config. These public CAs are currently based on the Mozilla Root Program and are subject to change over time. If TRUE, do not accept our default set of public CAs. Only CAs specified in trust_config will be accepted. This defaults to FALSE (use public CAs in addition to trust_config) for backwards compatibility, but trusting public root CAs is *not recommended* unless the traffic in question is outbound to public web servers. When possible, prefer setting this to \"false\" and explicitly specifying trusted CAs and certificates in a TrustConfig. Note that Secure Web Proxy does not yet honor this field.", alias="excludePublicCaSet")
    min_tls_version: Optional[StrictStr] = Field(default=None, description="Optional. Minimum TLS version that the firewall should use when negotiating connections with both clients and servers. If this is not set, then the default value is to allow the broadest set of clients and servers (TLS 1.0 or higher). Setting this to more restrictive values may improve security, but may also prevent the firewall from connecting to some clients or servers. Note that Secure Web Proxy does not yet honor this field.", alias="minTlsVersion")
    name: Optional[StrictStr] = Field(default=None, description="Required. Name of the resource. Name is of the form projects/{project}/locations/{location}/tlsInspectionPolicies/{tls_inspection_policy} tls_inspection_policy should match the pattern:(^[a-z]([a-z0-9-]{0,61}[a-z0-9])?$).")
    tls_feature_profile: Optional[StrictStr] = Field(default=None, description="Optional. The selected Profile. If this is not set, then the default value is to allow the broadest set of clients and servers (\"PROFILE_COMPATIBLE\"). Setting this to more restrictive values may improve security, but may also prevent the TLS inspection proxy from connecting to some clients or servers. Note that Secure Web Proxy does not yet honor this field.", alias="tlsFeatureProfile")
    trust_config: Optional[StrictStr] = Field(default=None, description="Optional. A TrustConfig resource used when making a connection to the TLS server. This is a relative resource path following the form \"projects/{project}/locations/{location}/trustConfigs/{trust_config}\". This is necessary to intercept TLS connections to servers with certificates signed by a private CA or self-signed certificates. Note that Secure Web Proxy does not yet honor this field.", alias="trustConfig")
    update_time: Optional[StrictStr] = Field(default=None, description="Output only. The timestamp when the resource was updated.", alias="updateTime")
    __properties: ClassVar[List[str]] = ["caPool", "createTime", "customTlsFeatures", "description", "excludePublicCaSet", "minTlsVersion", "name", "tlsFeatureProfile", "trustConfig", "updateTime"]

    @field_validator('min_tls_version')
    def min_tls_version_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['TLS_VERSION_UNSPECIFIED', 'TLS_1_0', 'TLS_1_1', 'TLS_1_2', 'TLS_1_3']):
            raise ValueError("must be one of enum values ('TLS_VERSION_UNSPECIFIED', 'TLS_1_0', 'TLS_1_1', 'TLS_1_2', 'TLS_1_3')")
        return value

    @field_validator('tls_feature_profile')
    def tls_feature_profile_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['PROFILE_UNSPECIFIED', 'PROFILE_COMPATIBLE', 'PROFILE_MODERN', 'PROFILE_RESTRICTED', 'PROFILE_CUSTOM']):
            raise ValueError("must be one of enum values ('PROFILE_UNSPECIFIED', 'PROFILE_COMPATIBLE', 'PROFILE_MODERN', 'PROFILE_RESTRICTED', 'PROFILE_CUSTOM')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of TlsInspectionPolicy from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "create_time",
            "update_time",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of TlsInspectionPolicy from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "caPool": obj.get("caPool"),
            "createTime": obj.get("createTime"),
            "customTlsFeatures": obj.get("customTlsFeatures"),
            "description": obj.get("description"),
            "excludePublicCaSet": obj.get("excludePublicCaSet"),
            "minTlsVersion": obj.get("minTlsVersion"),
            "name": obj.get("name"),
            "tlsFeatureProfile": obj.get("tlsFeatureProfile"),
            "trustConfig": obj.get("trustConfig"),
            "updateTime": obj.get("updateTime")
        })
        return _obj



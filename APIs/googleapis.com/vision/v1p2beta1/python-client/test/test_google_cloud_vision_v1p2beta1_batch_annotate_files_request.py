# coding: utf-8

"""
    Cloud Vision API

    Integrates Google Vision features, including image labeling, face, logo, and landmark detection, optical character recognition (OCR), and detection of explicit content, into applications.

    The version of the OpenAPI document: v1p2beta1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.google_cloud_vision_v1p2beta1_batch_annotate_files_request import GoogleCloudVisionV1p2beta1BatchAnnotateFilesRequest

class TestGoogleCloudVisionV1p2beta1BatchAnnotateFilesRequest(unittest.TestCase):
    """GoogleCloudVisionV1p2beta1BatchAnnotateFilesRequest unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> GoogleCloudVisionV1p2beta1BatchAnnotateFilesRequest:
        """Test GoogleCloudVisionV1p2beta1BatchAnnotateFilesRequest
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `GoogleCloudVisionV1p2beta1BatchAnnotateFilesRequest`
        """
        model = GoogleCloudVisionV1p2beta1BatchAnnotateFilesRequest()
        if include_optional:
            return GoogleCloudVisionV1p2beta1BatchAnnotateFilesRequest(
                labels = {
                    'key' : ''
                    },
                parent = '',
                requests = [
                    openapi_client.models.google_cloud_vision_v1p2beta1_annotate_file_request.GoogleCloudVisionV1p2beta1AnnotateFileRequest(
                        features = [
                            openapi_client.models.google_cloud_vision_v1p2beta1_feature.GoogleCloudVisionV1p2beta1Feature(
                                max_results = 56, 
                                model = '', 
                                type = 'TYPE_UNSPECIFIED', )
                            ], 
                        image_context = openapi_client.models.google_cloud_vision_v1p2beta1_image_context.GoogleCloudVisionV1p2beta1ImageContext(
                            crop_hints_params = openapi_client.models.google_cloud_vision_v1p2beta1_crop_hints_params.GoogleCloudVisionV1p2beta1CropHintsParams(
                                aspect_ratios = [
                                    1.337
                                    ], ), 
                            language_hints = [
                                ''
                                ], 
                            lat_long_rect = openapi_client.models.google_cloud_vision_v1p2beta1_lat_long_rect.GoogleCloudVisionV1p2beta1LatLongRect(
                                max_lat_lng = openapi_client.models.lat_lng.LatLng(
                                    latitude = 1.337, 
                                    longitude = 1.337, ), 
                                min_lat_lng = openapi_client.models.lat_lng.LatLng(
                                    latitude = 1.337, 
                                    longitude = 1.337, ), ), 
                            product_search_params = openapi_client.models.google_cloud_vision_v1p2beta1_product_search_params.GoogleCloudVisionV1p2beta1ProductSearchParams(
                                bounding_poly = openapi_client.models.google_cloud_vision_v1p2beta1_bounding_poly.GoogleCloudVisionV1p2beta1BoundingPoly(
                                    normalized_vertices = [
                                        openapi_client.models.google_cloud_vision_v1p2beta1_normalized_vertex.GoogleCloudVisionV1p2beta1NormalizedVertex(
                                            x = 1.337, 
                                            y = 1.337, )
                                        ], 
                                    vertices = [
                                        openapi_client.models.google_cloud_vision_v1p2beta1_vertex.GoogleCloudVisionV1p2beta1Vertex(
                                            x = 56, 
                                            y = 56, )
                                        ], ), 
                                filter = '', 
                                product_categories = [
                                    ''
                                    ], 
                                product_set = '', ), 
                            text_detection_params = openapi_client.models.google_cloud_vision_v1p2beta1_text_detection_params.GoogleCloudVisionV1p2beta1TextDetectionParams(
                                advanced_ocr_options = [
                                    ''
                                    ], 
                                enable_text_detection_confidence_score = True, ), 
                            web_detection_params = openapi_client.models.google_cloud_vision_v1p2beta1_web_detection_params.GoogleCloudVisionV1p2beta1WebDetectionParams(
                                include_geo_results = True, ), ), 
                        input_config = openapi_client.models.google_cloud_vision_v1p2beta1_input_config.GoogleCloudVisionV1p2beta1InputConfig(
                            content = 'YQ==', 
                            gcs_source = openapi_client.models.google_cloud_vision_v1p2beta1_gcs_source.GoogleCloudVisionV1p2beta1GcsSource(
                                uri = '', ), 
                            mime_type = '', ), 
                        pages = [
                            56
                            ], )
                    ]
            )
        else:
            return GoogleCloudVisionV1p2beta1BatchAnnotateFilesRequest(
        )
        """

    def testGoogleCloudVisionV1p2beta1BatchAnnotateFilesRequest(self):
        """Test GoogleCloudVisionV1p2beta1BatchAnnotateFilesRequest"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

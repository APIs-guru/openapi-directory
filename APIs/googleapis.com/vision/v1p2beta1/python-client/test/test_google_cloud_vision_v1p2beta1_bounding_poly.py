# coding: utf-8

"""
    Cloud Vision API

    Integrates Google Vision features, including image labeling, face, logo, and landmark detection, optical character recognition (OCR), and detection of explicit content, into applications.

    The version of the OpenAPI document: v1p2beta1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.google_cloud_vision_v1p2beta1_bounding_poly import GoogleCloudVisionV1p2beta1BoundingPoly

class TestGoogleCloudVisionV1p2beta1BoundingPoly(unittest.TestCase):
    """GoogleCloudVisionV1p2beta1BoundingPoly unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> GoogleCloudVisionV1p2beta1BoundingPoly:
        """Test GoogleCloudVisionV1p2beta1BoundingPoly
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `GoogleCloudVisionV1p2beta1BoundingPoly`
        """
        model = GoogleCloudVisionV1p2beta1BoundingPoly()
        if include_optional:
            return GoogleCloudVisionV1p2beta1BoundingPoly(
                normalized_vertices = [
                    openapi_client.models.google_cloud_vision_v1p2beta1_normalized_vertex.GoogleCloudVisionV1p2beta1NormalizedVertex(
                        x = 1.337, 
                        y = 1.337, )
                    ],
                vertices = [
                    openapi_client.models.google_cloud_vision_v1p2beta1_vertex.GoogleCloudVisionV1p2beta1Vertex(
                        x = 56, 
                        y = 56, )
                    ]
            )
        else:
            return GoogleCloudVisionV1p2beta1BoundingPoly(
        )
        """

    def testGoogleCloudVisionV1p2beta1BoundingPoly(self):
        """Test GoogleCloudVisionV1p2beta1BoundingPoly"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

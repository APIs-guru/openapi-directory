# coding: utf-8

"""
    Cloud Vision API

    Integrates Google Vision features, including image labeling, face, logo, and landmark detection, optical character recognition (OCR), and detection of explicit content, into applications.

    The version of the OpenAPI document: v1p2beta1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_cloud_vision_v1p4beta1_annotate_image_response import GoogleCloudVisionV1p4beta1AnnotateImageResponse
from openapi_client.models.google_cloud_vision_v1p4beta1_input_config import GoogleCloudVisionV1p4beta1InputConfig
from openapi_client.models.status import Status
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudVisionV1p4beta1AnnotateFileResponse(BaseModel):
    """
    Response to a single file annotation request. A file may contain one or more images, which individually have their own responses.
    """ # noqa: E501
    error: Optional[Status] = None
    input_config: Optional[GoogleCloudVisionV1p4beta1InputConfig] = Field(default=None, alias="inputConfig")
    responses: Optional[List[GoogleCloudVisionV1p4beta1AnnotateImageResponse]] = Field(default=None, description="Individual responses to images found within the file. This field will be empty if the `error` field is set.")
    total_pages: Optional[StrictInt] = Field(default=None, description="This field gives the total number of pages in the file.", alias="totalPages")
    __properties: ClassVar[List[str]] = ["error", "inputConfig", "responses", "totalPages"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudVisionV1p4beta1AnnotateFileResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of error
        if self.error:
            _dict['error'] = self.error.to_dict()
        # override the default output from pydantic by calling `to_dict()` of input_config
        if self.input_config:
            _dict['inputConfig'] = self.input_config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in responses (list)
        _items = []
        if self.responses:
            for _item_responses in self.responses:
                if _item_responses:
                    _items.append(_item_responses.to_dict())
            _dict['responses'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudVisionV1p4beta1AnnotateFileResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "error": Status.from_dict(obj["error"]) if obj.get("error") is not None else None,
            "inputConfig": GoogleCloudVisionV1p4beta1InputConfig.from_dict(obj["inputConfig"]) if obj.get("inputConfig") is not None else None,
            "responses": [GoogleCloudVisionV1p4beta1AnnotateImageResponse.from_dict(_item) for _item in obj["responses"]] if obj.get("responses") is not None else None,
            "totalPages": obj.get("totalPages")
        })
        return _obj



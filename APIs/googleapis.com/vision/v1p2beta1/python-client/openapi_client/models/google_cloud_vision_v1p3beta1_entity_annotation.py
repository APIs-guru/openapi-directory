# coding: utf-8

"""
    Cloud Vision API

    Integrates Google Vision features, including image labeling, face, logo, and landmark detection, optical character recognition (OCR), and detection of explicit content, into applications.

    The version of the OpenAPI document: v1p2beta1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from openapi_client.models.google_cloud_vision_v1p3beta1_bounding_poly import GoogleCloudVisionV1p3beta1BoundingPoly
from openapi_client.models.google_cloud_vision_v1p3beta1_location_info import GoogleCloudVisionV1p3beta1LocationInfo
from openapi_client.models.google_cloud_vision_v1p3beta1_property import GoogleCloudVisionV1p3beta1Property
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudVisionV1p3beta1EntityAnnotation(BaseModel):
    """
    Set of detected entity features.
    """ # noqa: E501
    bounding_poly: Optional[GoogleCloudVisionV1p3beta1BoundingPoly] = Field(default=None, alias="boundingPoly")
    confidence: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="**Deprecated. Use `score` instead.** The accuracy of the entity detection in an image. For example, for an image in which the \"Eiffel Tower\" entity is detected, this field represents the confidence that there is a tower in the query image. Range [0, 1].")
    description: Optional[StrictStr] = Field(default=None, description="Entity textual description, expressed in its `locale` language.")
    locale: Optional[StrictStr] = Field(default=None, description="The language code for the locale in which the entity textual `description` is expressed.")
    locations: Optional[List[GoogleCloudVisionV1p3beta1LocationInfo]] = Field(default=None, description="The location information for the detected entity. Multiple `LocationInfo` elements can be present because one location may indicate the location of the scene in the image, and another location may indicate the location of the place where the image was taken. Location information is usually present for landmarks.")
    mid: Optional[StrictStr] = Field(default=None, description="Opaque entity ID. Some IDs may be available in [Google Knowledge Graph Search API](https://developers.google.com/knowledge-graph/).")
    properties: Optional[List[GoogleCloudVisionV1p3beta1Property]] = Field(default=None, description="Some entities may have optional user-supplied `Property` (name/value) fields, such a score or string that qualifies the entity.")
    score: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Overall score of the result. Range [0, 1].")
    topicality: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The relevancy of the ICA (Image Content Annotation) label to the image. For example, the relevancy of \"tower\" is likely higher to an image containing the detected \"Eiffel Tower\" than to an image containing a detected distant towering building, even though the confidence that there is a tower in each image may be the same. Range [0, 1].")
    __properties: ClassVar[List[str]] = ["boundingPoly", "confidence", "description", "locale", "locations", "mid", "properties", "score", "topicality"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudVisionV1p3beta1EntityAnnotation from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of bounding_poly
        if self.bounding_poly:
            _dict['boundingPoly'] = self.bounding_poly.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in locations (list)
        _items = []
        if self.locations:
            for _item_locations in self.locations:
                if _item_locations:
                    _items.append(_item_locations.to_dict())
            _dict['locations'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in properties (list)
        _items = []
        if self.properties:
            for _item_properties in self.properties:
                if _item_properties:
                    _items.append(_item_properties.to_dict())
            _dict['properties'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudVisionV1p3beta1EntityAnnotation from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "boundingPoly": GoogleCloudVisionV1p3beta1BoundingPoly.from_dict(obj["boundingPoly"]) if obj.get("boundingPoly") is not None else None,
            "confidence": obj.get("confidence"),
            "description": obj.get("description"),
            "locale": obj.get("locale"),
            "locations": [GoogleCloudVisionV1p3beta1LocationInfo.from_dict(_item) for _item in obj["locations"]] if obj.get("locations") is not None else None,
            "mid": obj.get("mid"),
            "properties": [GoogleCloudVisionV1p3beta1Property.from_dict(_item) for _item in obj["properties"]] if obj.get("properties") is not None else None,
            "score": obj.get("score"),
            "topicality": obj.get("topicality")
        })
        return _obj



# coding: utf-8

"""
    Cloud Vision API

    Integrates Google Vision features, including image labeling, face, logo, and landmark detection, optical character recognition (OCR), and detection of explicit content, into applications.

    The version of the OpenAPI document: v1p2beta1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_cloud_vision_v1p4beta1_web_detection_web_entity import GoogleCloudVisionV1p4beta1WebDetectionWebEntity
from openapi_client.models.google_cloud_vision_v1p4beta1_web_detection_web_image import GoogleCloudVisionV1p4beta1WebDetectionWebImage
from openapi_client.models.google_cloud_vision_v1p4beta1_web_detection_web_label import GoogleCloudVisionV1p4beta1WebDetectionWebLabel
from openapi_client.models.google_cloud_vision_v1p4beta1_web_detection_web_page import GoogleCloudVisionV1p4beta1WebDetectionWebPage
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudVisionV1p4beta1WebDetection(BaseModel):
    """
    Relevant information for the image from the Internet.
    """ # noqa: E501
    best_guess_labels: Optional[List[GoogleCloudVisionV1p4beta1WebDetectionWebLabel]] = Field(default=None, description="The service's best guess as to the topic of the request image. Inferred from similar images on the open web.", alias="bestGuessLabels")
    full_matching_images: Optional[List[GoogleCloudVisionV1p4beta1WebDetectionWebImage]] = Field(default=None, description="Fully matching images from the Internet. Can include resized copies of the query image.", alias="fullMatchingImages")
    pages_with_matching_images: Optional[List[GoogleCloudVisionV1p4beta1WebDetectionWebPage]] = Field(default=None, description="Web pages containing the matching images from the Internet.", alias="pagesWithMatchingImages")
    partial_matching_images: Optional[List[GoogleCloudVisionV1p4beta1WebDetectionWebImage]] = Field(default=None, description="Partial matching images from the Internet. Those images are similar enough to share some key-point features. For example an original image will likely have partial matching for its crops.", alias="partialMatchingImages")
    visually_similar_images: Optional[List[GoogleCloudVisionV1p4beta1WebDetectionWebImage]] = Field(default=None, description="The visually similar image results.", alias="visuallySimilarImages")
    web_entities: Optional[List[GoogleCloudVisionV1p4beta1WebDetectionWebEntity]] = Field(default=None, description="Deduced entities from similar images on the Internet.", alias="webEntities")
    __properties: ClassVar[List[str]] = ["bestGuessLabels", "fullMatchingImages", "pagesWithMatchingImages", "partialMatchingImages", "visuallySimilarImages", "webEntities"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudVisionV1p4beta1WebDetection from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in best_guess_labels (list)
        _items = []
        if self.best_guess_labels:
            for _item_best_guess_labels in self.best_guess_labels:
                if _item_best_guess_labels:
                    _items.append(_item_best_guess_labels.to_dict())
            _dict['bestGuessLabels'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in full_matching_images (list)
        _items = []
        if self.full_matching_images:
            for _item_full_matching_images in self.full_matching_images:
                if _item_full_matching_images:
                    _items.append(_item_full_matching_images.to_dict())
            _dict['fullMatchingImages'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in pages_with_matching_images (list)
        _items = []
        if self.pages_with_matching_images:
            for _item_pages_with_matching_images in self.pages_with_matching_images:
                if _item_pages_with_matching_images:
                    _items.append(_item_pages_with_matching_images.to_dict())
            _dict['pagesWithMatchingImages'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in partial_matching_images (list)
        _items = []
        if self.partial_matching_images:
            for _item_partial_matching_images in self.partial_matching_images:
                if _item_partial_matching_images:
                    _items.append(_item_partial_matching_images.to_dict())
            _dict['partialMatchingImages'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in visually_similar_images (list)
        _items = []
        if self.visually_similar_images:
            for _item_visually_similar_images in self.visually_similar_images:
                if _item_visually_similar_images:
                    _items.append(_item_visually_similar_images.to_dict())
            _dict['visuallySimilarImages'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in web_entities (list)
        _items = []
        if self.web_entities:
            for _item_web_entities in self.web_entities:
                if _item_web_entities:
                    _items.append(_item_web_entities.to_dict())
            _dict['webEntities'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudVisionV1p4beta1WebDetection from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "bestGuessLabels": [GoogleCloudVisionV1p4beta1WebDetectionWebLabel.from_dict(_item) for _item in obj["bestGuessLabels"]] if obj.get("bestGuessLabels") is not None else None,
            "fullMatchingImages": [GoogleCloudVisionV1p4beta1WebDetectionWebImage.from_dict(_item) for _item in obj["fullMatchingImages"]] if obj.get("fullMatchingImages") is not None else None,
            "pagesWithMatchingImages": [GoogleCloudVisionV1p4beta1WebDetectionWebPage.from_dict(_item) for _item in obj["pagesWithMatchingImages"]] if obj.get("pagesWithMatchingImages") is not None else None,
            "partialMatchingImages": [GoogleCloudVisionV1p4beta1WebDetectionWebImage.from_dict(_item) for _item in obj["partialMatchingImages"]] if obj.get("partialMatchingImages") is not None else None,
            "visuallySimilarImages": [GoogleCloudVisionV1p4beta1WebDetectionWebImage.from_dict(_item) for _item in obj["visuallySimilarImages"]] if obj.get("visuallySimilarImages") is not None else None,
            "webEntities": [GoogleCloudVisionV1p4beta1WebDetectionWebEntity.from_dict(_item) for _item in obj["webEntities"]] if obj.get("webEntities") is not None else None
        })
        return _obj



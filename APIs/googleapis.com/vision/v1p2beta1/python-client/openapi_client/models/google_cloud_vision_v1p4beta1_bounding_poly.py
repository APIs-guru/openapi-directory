# coding: utf-8

"""
    Cloud Vision API

    Integrates Google Vision features, including image labeling, face, logo, and landmark detection, optical character recognition (OCR), and detection of explicit content, into applications.

    The version of the OpenAPI document: v1p2beta1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_cloud_vision_v1p4beta1_normalized_vertex import GoogleCloudVisionV1p4beta1NormalizedVertex
from openapi_client.models.google_cloud_vision_v1p4beta1_vertex import GoogleCloudVisionV1p4beta1Vertex
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudVisionV1p4beta1BoundingPoly(BaseModel):
    """
    A bounding polygon for the detected image annotation.
    """ # noqa: E501
    normalized_vertices: Optional[List[GoogleCloudVisionV1p4beta1NormalizedVertex]] = Field(default=None, description="The bounding polygon normalized vertices.", alias="normalizedVertices")
    vertices: Optional[List[GoogleCloudVisionV1p4beta1Vertex]] = Field(default=None, description="The bounding polygon vertices.")
    __properties: ClassVar[List[str]] = ["normalizedVertices", "vertices"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudVisionV1p4beta1BoundingPoly from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in normalized_vertices (list)
        _items = []
        if self.normalized_vertices:
            for _item_normalized_vertices in self.normalized_vertices:
                if _item_normalized_vertices:
                    _items.append(_item_normalized_vertices.to_dict())
            _dict['normalizedVertices'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in vertices (list)
        _items = []
        if self.vertices:
            for _item_vertices in self.vertices:
                if _item_vertices:
                    _items.append(_item_vertices.to_dict())
            _dict['vertices'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudVisionV1p4beta1BoundingPoly from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "normalizedVertices": [GoogleCloudVisionV1p4beta1NormalizedVertex.from_dict(_item) for _item in obj["normalizedVertices"]] if obj.get("normalizedVertices") is not None else None,
            "vertices": [GoogleCloudVisionV1p4beta1Vertex.from_dict(_item) for _item in obj["vertices"]] if obj.get("vertices") is not None else None
        })
        return _obj



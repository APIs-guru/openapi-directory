# coding: utf-8

"""
    Cloud Vision API

    Integrates Google Vision features, including image labeling, face, logo, and landmark detection, optical character recognition (OCR), and detection of explicit content, into applications.

    The version of the OpenAPI document: v1p2beta1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from openapi_client.models.google_cloud_vision_v1p1beta1_web_detection_web_image import GoogleCloudVisionV1p1beta1WebDetectionWebImage
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudVisionV1p1beta1WebDetectionWebPage(BaseModel):
    """
    Metadata for web pages.
    """ # noqa: E501
    full_matching_images: Optional[List[GoogleCloudVisionV1p1beta1WebDetectionWebImage]] = Field(default=None, description="Fully matching images on the page. Can include resized copies of the query image.", alias="fullMatchingImages")
    page_title: Optional[StrictStr] = Field(default=None, description="Title for the web page, may contain HTML markups.", alias="pageTitle")
    partial_matching_images: Optional[List[GoogleCloudVisionV1p1beta1WebDetectionWebImage]] = Field(default=None, description="Partial matching images on the page. Those images are similar enough to share some key-point features. For example an original image will likely have partial matching for its crops.", alias="partialMatchingImages")
    score: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="(Deprecated) Overall relevancy score for the web page.")
    url: Optional[StrictStr] = Field(default=None, description="The result web page URL.")
    __properties: ClassVar[List[str]] = ["fullMatchingImages", "pageTitle", "partialMatchingImages", "score", "url"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudVisionV1p1beta1WebDetectionWebPage from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in full_matching_images (list)
        _items = []
        if self.full_matching_images:
            for _item_full_matching_images in self.full_matching_images:
                if _item_full_matching_images:
                    _items.append(_item_full_matching_images.to_dict())
            _dict['fullMatchingImages'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in partial_matching_images (list)
        _items = []
        if self.partial_matching_images:
            for _item_partial_matching_images in self.partial_matching_images:
                if _item_partial_matching_images:
                    _items.append(_item_partial_matching_images.to_dict())
            _dict['partialMatchingImages'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudVisionV1p1beta1WebDetectionWebPage from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "fullMatchingImages": [GoogleCloudVisionV1p1beta1WebDetectionWebImage.from_dict(_item) for _item in obj["fullMatchingImages"]] if obj.get("fullMatchingImages") is not None else None,
            "pageTitle": obj.get("pageTitle"),
            "partialMatchingImages": [GoogleCloudVisionV1p1beta1WebDetectionWebImage.from_dict(_item) for _item in obj["partialMatchingImages"]] if obj.get("partialMatchingImages") is not None else None,
            "score": obj.get("score"),
            "url": obj.get("url")
        })
        return _obj



# coding: utf-8

"""
    Cloud Vision API

    Integrates Google Vision features, including image labeling, face, logo, and landmark detection, optical character recognition (OCR), and detection of explicit content, into applications.

    The version of the OpenAPI document: v1p2beta1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_cloud_vision_v1p2beta1_crop_hints_params import GoogleCloudVisionV1p2beta1CropHintsParams
from openapi_client.models.google_cloud_vision_v1p2beta1_lat_long_rect import GoogleCloudVisionV1p2beta1LatLongRect
from openapi_client.models.google_cloud_vision_v1p2beta1_product_search_params import GoogleCloudVisionV1p2beta1ProductSearchParams
from openapi_client.models.google_cloud_vision_v1p2beta1_text_detection_params import GoogleCloudVisionV1p2beta1TextDetectionParams
from openapi_client.models.google_cloud_vision_v1p2beta1_web_detection_params import GoogleCloudVisionV1p2beta1WebDetectionParams
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudVisionV1p2beta1ImageContext(BaseModel):
    """
    Image context and/or feature-specific parameters.
    """ # noqa: E501
    crop_hints_params: Optional[GoogleCloudVisionV1p2beta1CropHintsParams] = Field(default=None, alias="cropHintsParams")
    language_hints: Optional[List[StrictStr]] = Field(default=None, description="List of languages to use for TEXT_DETECTION. In most cases, an empty value yields the best results since it enables automatic language detection. For languages based on the Latin alphabet, setting `language_hints` is not needed. In rare cases, when the language of the text in the image is known, setting a hint will help get better results (although it will be a significant hindrance if the hint is wrong). Text detection returns an error if one or more of the specified languages is not one of the [supported languages](https://cloud.google.com/vision/docs/languages).", alias="languageHints")
    lat_long_rect: Optional[GoogleCloudVisionV1p2beta1LatLongRect] = Field(default=None, alias="latLongRect")
    product_search_params: Optional[GoogleCloudVisionV1p2beta1ProductSearchParams] = Field(default=None, alias="productSearchParams")
    text_detection_params: Optional[GoogleCloudVisionV1p2beta1TextDetectionParams] = Field(default=None, alias="textDetectionParams")
    web_detection_params: Optional[GoogleCloudVisionV1p2beta1WebDetectionParams] = Field(default=None, alias="webDetectionParams")
    __properties: ClassVar[List[str]] = ["cropHintsParams", "languageHints", "latLongRect", "productSearchParams", "textDetectionParams", "webDetectionParams"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudVisionV1p2beta1ImageContext from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of crop_hints_params
        if self.crop_hints_params:
            _dict['cropHintsParams'] = self.crop_hints_params.to_dict()
        # override the default output from pydantic by calling `to_dict()` of lat_long_rect
        if self.lat_long_rect:
            _dict['latLongRect'] = self.lat_long_rect.to_dict()
        # override the default output from pydantic by calling `to_dict()` of product_search_params
        if self.product_search_params:
            _dict['productSearchParams'] = self.product_search_params.to_dict()
        # override the default output from pydantic by calling `to_dict()` of text_detection_params
        if self.text_detection_params:
            _dict['textDetectionParams'] = self.text_detection_params.to_dict()
        # override the default output from pydantic by calling `to_dict()` of web_detection_params
        if self.web_detection_params:
            _dict['webDetectionParams'] = self.web_detection_params.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudVisionV1p2beta1ImageContext from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "cropHintsParams": GoogleCloudVisionV1p2beta1CropHintsParams.from_dict(obj["cropHintsParams"]) if obj.get("cropHintsParams") is not None else None,
            "languageHints": obj.get("languageHints"),
            "latLongRect": GoogleCloudVisionV1p2beta1LatLongRect.from_dict(obj["latLongRect"]) if obj.get("latLongRect") is not None else None,
            "productSearchParams": GoogleCloudVisionV1p2beta1ProductSearchParams.from_dict(obj["productSearchParams"]) if obj.get("productSearchParams") is not None else None,
            "textDetectionParams": GoogleCloudVisionV1p2beta1TextDetectionParams.from_dict(obj["textDetectionParams"]) if obj.get("textDetectionParams") is not None else None,
            "webDetectionParams": GoogleCloudVisionV1p2beta1WebDetectionParams.from_dict(obj["webDetectionParams"]) if obj.get("webDetectionParams") is not None else None
        })
        return _obj



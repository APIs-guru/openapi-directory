# coding: utf-8

"""
    Cloud Vision API

    Integrates Google Vision features, including image labeling, face, logo, and landmark detection, optical character recognition (OCR), and detection of explicit content, into applications.

    The version of the OpenAPI document: v1p2beta1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from openapi_client.models.bounding_poly import BoundingPoly
from openapi_client.models.paragraph import Paragraph
from openapi_client.models.text_property import TextProperty
from typing import Optional, Set
from typing_extensions import Self

class Block(BaseModel):
    """
    Logical element on the page.
    """ # noqa: E501
    block_type: Optional[StrictStr] = Field(default=None, description="Detected block type (text, image etc) for this block.", alias="blockType")
    bounding_box: Optional[BoundingPoly] = Field(default=None, alias="boundingBox")
    confidence: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Confidence of the OCR results on the block. Range [0, 1].")
    paragraphs: Optional[List[Paragraph]] = Field(default=None, description="List of paragraphs in this block (if this blocks is of type text).")
    var_property: Optional[TextProperty] = Field(default=None, alias="property")
    __properties: ClassVar[List[str]] = ["blockType", "boundingBox", "confidence", "paragraphs", "property"]

    @field_validator('block_type')
    def block_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['UNKNOWN', 'TEXT', 'TABLE', 'PICTURE', 'RULER', 'BARCODE']):
            raise ValueError("must be one of enum values ('UNKNOWN', 'TEXT', 'TABLE', 'PICTURE', 'RULER', 'BARCODE')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Block from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of bounding_box
        if self.bounding_box:
            _dict['boundingBox'] = self.bounding_box.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in paragraphs (list)
        _items = []
        if self.paragraphs:
            for _item_paragraphs in self.paragraphs:
                if _item_paragraphs:
                    _items.append(_item_paragraphs.to_dict())
            _dict['paragraphs'] = _items
        # override the default output from pydantic by calling `to_dict()` of var_property
        if self.var_property:
            _dict['property'] = self.var_property.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Block from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "blockType": obj.get("blockType"),
            "boundingBox": BoundingPoly.from_dict(obj["boundingBox"]) if obj.get("boundingBox") is not None else None,
            "confidence": obj.get("confidence"),
            "paragraphs": [Paragraph.from_dict(_item) for _item in obj["paragraphs"]] if obj.get("paragraphs") is not None else None,
            "property": TextProperty.from_dict(obj["property"]) if obj.get("property") is not None else None
        })
        return _obj



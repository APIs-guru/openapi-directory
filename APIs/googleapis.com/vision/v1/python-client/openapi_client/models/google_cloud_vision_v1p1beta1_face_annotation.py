# coding: utf-8

"""
    Cloud Vision API

    Integrates Google Vision features, including image labeling, face, logo, and landmark detection, optical character recognition (OCR), and detection of explicit content, into applications.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from openapi_client.models.google_cloud_vision_v1p1beta1_bounding_poly import GoogleCloudVisionV1p1beta1BoundingPoly
from openapi_client.models.google_cloud_vision_v1p1beta1_face_annotation_landmark import GoogleCloudVisionV1p1beta1FaceAnnotationLandmark
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudVisionV1p1beta1FaceAnnotation(BaseModel):
    """
    A face annotation object contains the results of face detection.
    """ # noqa: E501
    anger_likelihood: Optional[StrictStr] = Field(default=None, description="Anger likelihood.", alias="angerLikelihood")
    blurred_likelihood: Optional[StrictStr] = Field(default=None, description="Blurred likelihood.", alias="blurredLikelihood")
    bounding_poly: Optional[GoogleCloudVisionV1p1beta1BoundingPoly] = Field(default=None, alias="boundingPoly")
    detection_confidence: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Detection confidence. Range [0, 1].", alias="detectionConfidence")
    fd_bounding_poly: Optional[GoogleCloudVisionV1p1beta1BoundingPoly] = Field(default=None, alias="fdBoundingPoly")
    headwear_likelihood: Optional[StrictStr] = Field(default=None, description="Headwear likelihood.", alias="headwearLikelihood")
    joy_likelihood: Optional[StrictStr] = Field(default=None, description="Joy likelihood.", alias="joyLikelihood")
    landmarking_confidence: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Face landmarking confidence. Range [0, 1].", alias="landmarkingConfidence")
    landmarks: Optional[List[GoogleCloudVisionV1p1beta1FaceAnnotationLandmark]] = Field(default=None, description="Detected face landmarks.")
    pan_angle: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Yaw angle, which indicates the leftward/rightward angle that the face is pointing relative to the vertical plane perpendicular to the image. Range [-180,180].", alias="panAngle")
    roll_angle: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Roll angle, which indicates the amount of clockwise/anti-clockwise rotation of the face relative to the image vertical about the axis perpendicular to the face. Range [-180,180].", alias="rollAngle")
    sorrow_likelihood: Optional[StrictStr] = Field(default=None, description="Sorrow likelihood.", alias="sorrowLikelihood")
    surprise_likelihood: Optional[StrictStr] = Field(default=None, description="Surprise likelihood.", alias="surpriseLikelihood")
    tilt_angle: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Pitch angle, which indicates the upwards/downwards angle that the face is pointing relative to the image's horizontal plane. Range [-180,180].", alias="tiltAngle")
    under_exposed_likelihood: Optional[StrictStr] = Field(default=None, description="Under-exposed likelihood.", alias="underExposedLikelihood")
    __properties: ClassVar[List[str]] = ["angerLikelihood", "blurredLikelihood", "boundingPoly", "detectionConfidence", "fdBoundingPoly", "headwearLikelihood", "joyLikelihood", "landmarkingConfidence", "landmarks", "panAngle", "rollAngle", "sorrowLikelihood", "surpriseLikelihood", "tiltAngle", "underExposedLikelihood"]

    @field_validator('anger_likelihood')
    def anger_likelihood_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['UNKNOWN', 'VERY_UNLIKELY', 'UNLIKELY', 'POSSIBLE', 'LIKELY', 'VERY_LIKELY']):
            raise ValueError("must be one of enum values ('UNKNOWN', 'VERY_UNLIKELY', 'UNLIKELY', 'POSSIBLE', 'LIKELY', 'VERY_LIKELY')")
        return value

    @field_validator('blurred_likelihood')
    def blurred_likelihood_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['UNKNOWN', 'VERY_UNLIKELY', 'UNLIKELY', 'POSSIBLE', 'LIKELY', 'VERY_LIKELY']):
            raise ValueError("must be one of enum values ('UNKNOWN', 'VERY_UNLIKELY', 'UNLIKELY', 'POSSIBLE', 'LIKELY', 'VERY_LIKELY')")
        return value

    @field_validator('headwear_likelihood')
    def headwear_likelihood_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['UNKNOWN', 'VERY_UNLIKELY', 'UNLIKELY', 'POSSIBLE', 'LIKELY', 'VERY_LIKELY']):
            raise ValueError("must be one of enum values ('UNKNOWN', 'VERY_UNLIKELY', 'UNLIKELY', 'POSSIBLE', 'LIKELY', 'VERY_LIKELY')")
        return value

    @field_validator('joy_likelihood')
    def joy_likelihood_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['UNKNOWN', 'VERY_UNLIKELY', 'UNLIKELY', 'POSSIBLE', 'LIKELY', 'VERY_LIKELY']):
            raise ValueError("must be one of enum values ('UNKNOWN', 'VERY_UNLIKELY', 'UNLIKELY', 'POSSIBLE', 'LIKELY', 'VERY_LIKELY')")
        return value

    @field_validator('sorrow_likelihood')
    def sorrow_likelihood_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['UNKNOWN', 'VERY_UNLIKELY', 'UNLIKELY', 'POSSIBLE', 'LIKELY', 'VERY_LIKELY']):
            raise ValueError("must be one of enum values ('UNKNOWN', 'VERY_UNLIKELY', 'UNLIKELY', 'POSSIBLE', 'LIKELY', 'VERY_LIKELY')")
        return value

    @field_validator('surprise_likelihood')
    def surprise_likelihood_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['UNKNOWN', 'VERY_UNLIKELY', 'UNLIKELY', 'POSSIBLE', 'LIKELY', 'VERY_LIKELY']):
            raise ValueError("must be one of enum values ('UNKNOWN', 'VERY_UNLIKELY', 'UNLIKELY', 'POSSIBLE', 'LIKELY', 'VERY_LIKELY')")
        return value

    @field_validator('under_exposed_likelihood')
    def under_exposed_likelihood_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['UNKNOWN', 'VERY_UNLIKELY', 'UNLIKELY', 'POSSIBLE', 'LIKELY', 'VERY_LIKELY']):
            raise ValueError("must be one of enum values ('UNKNOWN', 'VERY_UNLIKELY', 'UNLIKELY', 'POSSIBLE', 'LIKELY', 'VERY_LIKELY')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudVisionV1p1beta1FaceAnnotation from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of bounding_poly
        if self.bounding_poly:
            _dict['boundingPoly'] = self.bounding_poly.to_dict()
        # override the default output from pydantic by calling `to_dict()` of fd_bounding_poly
        if self.fd_bounding_poly:
            _dict['fdBoundingPoly'] = self.fd_bounding_poly.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in landmarks (list)
        _items = []
        if self.landmarks:
            for _item_landmarks in self.landmarks:
                if _item_landmarks:
                    _items.append(_item_landmarks.to_dict())
            _dict['landmarks'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudVisionV1p1beta1FaceAnnotation from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "angerLikelihood": obj.get("angerLikelihood"),
            "blurredLikelihood": obj.get("blurredLikelihood"),
            "boundingPoly": GoogleCloudVisionV1p1beta1BoundingPoly.from_dict(obj["boundingPoly"]) if obj.get("boundingPoly") is not None else None,
            "detectionConfidence": obj.get("detectionConfidence"),
            "fdBoundingPoly": GoogleCloudVisionV1p1beta1BoundingPoly.from_dict(obj["fdBoundingPoly"]) if obj.get("fdBoundingPoly") is not None else None,
            "headwearLikelihood": obj.get("headwearLikelihood"),
            "joyLikelihood": obj.get("joyLikelihood"),
            "landmarkingConfidence": obj.get("landmarkingConfidence"),
            "landmarks": [GoogleCloudVisionV1p1beta1FaceAnnotationLandmark.from_dict(_item) for _item in obj["landmarks"]] if obj.get("landmarks") is not None else None,
            "panAngle": obj.get("panAngle"),
            "rollAngle": obj.get("rollAngle"),
            "sorrowLikelihood": obj.get("sorrowLikelihood"),
            "surpriseLikelihood": obj.get("surpriseLikelihood"),
            "tiltAngle": obj.get("tiltAngle"),
            "underExposedLikelihood": obj.get("underExposedLikelihood")
        })
        return _obj



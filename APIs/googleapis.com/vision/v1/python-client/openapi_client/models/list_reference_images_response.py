# coding: utf-8

"""
    Cloud Vision API

    Integrates Google Vision features, including image labeling, face, logo, and landmark detection, optical character recognition (OCR), and detection of explicit content, into applications.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.reference_image import ReferenceImage
from typing import Optional, Set
from typing_extensions import Self

class ListReferenceImagesResponse(BaseModel):
    """
    Response message for the `ListReferenceImages` method.
    """ # noqa: E501
    next_page_token: Optional[StrictStr] = Field(default=None, description="The next_page_token returned from a previous List request, if any.", alias="nextPageToken")
    page_size: Optional[StrictInt] = Field(default=None, description="The maximum number of items to return. Default 10, maximum 100.", alias="pageSize")
    reference_images: Optional[List[ReferenceImage]] = Field(default=None, description="The list of reference images.", alias="referenceImages")
    __properties: ClassVar[List[str]] = ["nextPageToken", "pageSize", "referenceImages"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ListReferenceImagesResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in reference_images (list)
        _items = []
        if self.reference_images:
            for _item_reference_images in self.reference_images:
                if _item_reference_images:
                    _items.append(_item_reference_images.to_dict())
            _dict['referenceImages'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ListReferenceImagesResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "nextPageToken": obj.get("nextPageToken"),
            "pageSize": obj.get("pageSize"),
            "referenceImages": [ReferenceImage.from_dict(_item) for _item in obj["referenceImages"]] if obj.get("referenceImages") is not None else None
        })
        return _obj



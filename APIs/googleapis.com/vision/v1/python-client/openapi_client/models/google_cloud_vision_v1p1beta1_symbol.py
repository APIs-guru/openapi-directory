# coding: utf-8

"""
    Cloud Vision API

    Integrates Google Vision features, including image labeling, face, logo, and landmark detection, optical character recognition (OCR), and detection of explicit content, into applications.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from openapi_client.models.google_cloud_vision_v1p1beta1_bounding_poly import GoogleCloudVisionV1p1beta1BoundingPoly
from openapi_client.models.google_cloud_vision_v1p1beta1_text_annotation_text_property import GoogleCloudVisionV1p1beta1TextAnnotationTextProperty
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudVisionV1p1beta1Symbol(BaseModel):
    """
    A single symbol representation.
    """ # noqa: E501
    bounding_box: Optional[GoogleCloudVisionV1p1beta1BoundingPoly] = Field(default=None, alias="boundingBox")
    confidence: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Confidence of the OCR results for the symbol. Range [0, 1].")
    var_property: Optional[GoogleCloudVisionV1p1beta1TextAnnotationTextProperty] = Field(default=None, alias="property")
    text: Optional[StrictStr] = Field(default=None, description="The actual UTF-8 representation of the symbol.")
    __properties: ClassVar[List[str]] = ["boundingBox", "confidence", "property", "text"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudVisionV1p1beta1Symbol from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of bounding_box
        if self.bounding_box:
            _dict['boundingBox'] = self.bounding_box.to_dict()
        # override the default output from pydantic by calling `to_dict()` of var_property
        if self.var_property:
            _dict['property'] = self.var_property.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudVisionV1p1beta1Symbol from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "boundingBox": GoogleCloudVisionV1p1beta1BoundingPoly.from_dict(obj["boundingBox"]) if obj.get("boundingBox") is not None else None,
            "confidence": obj.get("confidence"),
            "property": GoogleCloudVisionV1p1beta1TextAnnotationTextProperty.from_dict(obj["property"]) if obj.get("property") is not None else None,
            "text": obj.get("text")
        })
        return _obj



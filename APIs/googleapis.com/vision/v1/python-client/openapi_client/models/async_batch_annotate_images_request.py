# coding: utf-8

"""
    Cloud Vision API

    Integrates Google Vision features, including image labeling, face, logo, and landmark detection, optical character recognition (OCR), and detection of explicit content, into applications.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.annotate_image_request import AnnotateImageRequest
from openapi_client.models.output_config import OutputConfig
from typing import Optional, Set
from typing_extensions import Self

class AsyncBatchAnnotateImagesRequest(BaseModel):
    """
    Request for async image annotation for a list of images.
    """ # noqa: E501
    labels: Optional[Dict[str, StrictStr]] = Field(default=None, description="Optional. The labels with user-defined metadata for the request. Label keys and values can be no longer than 63 characters (Unicode codepoints), can only contain lowercase letters, numeric characters, underscores and dashes. International characters are allowed. Label values are optional. Label keys must start with a letter.")
    output_config: Optional[OutputConfig] = Field(default=None, alias="outputConfig")
    parent: Optional[StrictStr] = Field(default=None, description="Optional. Target project and location to make a call. Format: `projects/{project-id}/locations/{location-id}`. If no parent is specified, a region will be chosen automatically. Supported location-ids: `us`: USA country only, `asia`: East asia areas, like Japan, Taiwan, `eu`: The European Union. Example: `projects/project-A/locations/eu`.")
    requests: Optional[List[AnnotateImageRequest]] = Field(default=None, description="Required. Individual image annotation requests for this batch.")
    __properties: ClassVar[List[str]] = ["labels", "outputConfig", "parent", "requests"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AsyncBatchAnnotateImagesRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of output_config
        if self.output_config:
            _dict['outputConfig'] = self.output_config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in requests (list)
        _items = []
        if self.requests:
            for _item_requests in self.requests:
                if _item_requests:
                    _items.append(_item_requests.to_dict())
            _dict['requests'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AsyncBatchAnnotateImagesRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "labels": obj.get("labels"),
            "outputConfig": OutputConfig.from_dict(obj["outputConfig"]) if obj.get("outputConfig") is not None else None,
            "parent": obj.get("parent"),
            "requests": [AnnotateImageRequest.from_dict(_item) for _item in obj["requests"]] if obj.get("requests") is not None else None
        })
        return _obj



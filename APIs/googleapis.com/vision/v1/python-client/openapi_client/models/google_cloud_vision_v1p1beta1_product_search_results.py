# coding: utf-8

"""
    Cloud Vision API

    Integrates Google Vision features, including image labeling, face, logo, and landmark detection, optical character recognition (OCR), and detection of explicit content, into applications.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_cloud_vision_v1p1beta1_product_search_results_grouped_result import GoogleCloudVisionV1p1beta1ProductSearchResultsGroupedResult
from openapi_client.models.google_cloud_vision_v1p1beta1_product_search_results_result import GoogleCloudVisionV1p1beta1ProductSearchResultsResult
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudVisionV1p1beta1ProductSearchResults(BaseModel):
    """
    Results for a product search request.
    """ # noqa: E501
    index_time: Optional[StrictStr] = Field(default=None, description="Timestamp of the index which provided these results. Products added to the product set and products removed from the product set after this time are not reflected in the current results.", alias="indexTime")
    product_grouped_results: Optional[List[GoogleCloudVisionV1p1beta1ProductSearchResultsGroupedResult]] = Field(default=None, description="List of results grouped by products detected in the query image. Each entry corresponds to one bounding polygon in the query image, and contains the matching products specific to that region. There may be duplicate product matches in the union of all the per-product results.", alias="productGroupedResults")
    results: Optional[List[GoogleCloudVisionV1p1beta1ProductSearchResultsResult]] = Field(default=None, description="List of results, one for each product match.")
    __properties: ClassVar[List[str]] = ["indexTime", "productGroupedResults", "results"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudVisionV1p1beta1ProductSearchResults from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in product_grouped_results (list)
        _items = []
        if self.product_grouped_results:
            for _item_product_grouped_results in self.product_grouped_results:
                if _item_product_grouped_results:
                    _items.append(_item_product_grouped_results.to_dict())
            _dict['productGroupedResults'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in results (list)
        _items = []
        if self.results:
            for _item_results in self.results:
                if _item_results:
                    _items.append(_item_results.to_dict())
            _dict['results'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudVisionV1p1beta1ProductSearchResults from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "indexTime": obj.get("indexTime"),
            "productGroupedResults": [GoogleCloudVisionV1p1beta1ProductSearchResultsGroupedResult.from_dict(_item) for _item in obj["productGroupedResults"]] if obj.get("productGroupedResults") is not None else None,
            "results": [GoogleCloudVisionV1p1beta1ProductSearchResultsResult.from_dict(_item) for _item in obj["results"]] if obj.get("results") is not None else None
        })
        return _obj



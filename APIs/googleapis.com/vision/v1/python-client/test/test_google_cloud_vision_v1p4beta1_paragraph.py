# coding: utf-8

"""
    Cloud Vision API

    Integrates Google Vision features, including image labeling, face, logo, and landmark detection, optical character recognition (OCR), and detection of explicit content, into applications.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.google_cloud_vision_v1p4beta1_paragraph import GoogleCloudVisionV1p4beta1Paragraph

class TestGoogleCloudVisionV1p4beta1Paragraph(unittest.TestCase):
    """GoogleCloudVisionV1p4beta1Paragraph unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> GoogleCloudVisionV1p4beta1Paragraph:
        """Test GoogleCloudVisionV1p4beta1Paragraph
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `GoogleCloudVisionV1p4beta1Paragraph`
        """
        model = GoogleCloudVisionV1p4beta1Paragraph()
        if include_optional:
            return GoogleCloudVisionV1p4beta1Paragraph(
                bounding_box = openapi_client.models.google_cloud_vision_v1p4beta1_bounding_poly.GoogleCloudVisionV1p4beta1BoundingPoly(
                    normalized_vertices = [
                        openapi_client.models.google_cloud_vision_v1p4beta1_normalized_vertex.GoogleCloudVisionV1p4beta1NormalizedVertex(
                            x = 1.337, 
                            y = 1.337, )
                        ], 
                    vertices = [
                        openapi_client.models.google_cloud_vision_v1p4beta1_vertex.GoogleCloudVisionV1p4beta1Vertex(
                            x = 56, 
                            y = 56, )
                        ], ),
                confidence = 1.337,
                var_property = openapi_client.models.google_cloud_vision_v1p4beta1_text_annotation_text_property.GoogleCloudVisionV1p4beta1TextAnnotationTextProperty(
                    detected_break = openapi_client.models.google_cloud_vision_v1p4beta1_text_annotation_detected_break.GoogleCloudVisionV1p4beta1TextAnnotationDetectedBreak(
                        is_prefix = True, 
                        type = 'UNKNOWN', ), 
                    detected_languages = [
                        openapi_client.models.google_cloud_vision_v1p4beta1_text_annotation_detected_language.GoogleCloudVisionV1p4beta1TextAnnotationDetectedLanguage(
                            confidence = 1.337, 
                            language_code = '', )
                        ], ),
                words = [
                    openapi_client.models.google_cloud_vision_v1p4beta1_word.GoogleCloudVisionV1p4beta1Word(
                        bounding_box = openapi_client.models.google_cloud_vision_v1p4beta1_bounding_poly.GoogleCloudVisionV1p4beta1BoundingPoly(
                            normalized_vertices = [
                                openapi_client.models.google_cloud_vision_v1p4beta1_normalized_vertex.GoogleCloudVisionV1p4beta1NormalizedVertex(
                                    x = 1.337, 
                                    y = 1.337, )
                                ], 
                            vertices = [
                                openapi_client.models.google_cloud_vision_v1p4beta1_vertex.GoogleCloudVisionV1p4beta1Vertex(
                                    x = 56, 
                                    y = 56, )
                                ], ), 
                        confidence = 1.337, 
                        property = openapi_client.models.google_cloud_vision_v1p4beta1_text_annotation_text_property.GoogleCloudVisionV1p4beta1TextAnnotationTextProperty(
                            detected_break = openapi_client.models.google_cloud_vision_v1p4beta1_text_annotation_detected_break.GoogleCloudVisionV1p4beta1TextAnnotationDetectedBreak(
                                is_prefix = True, 
                                type = 'UNKNOWN', ), 
                            detected_languages = [
                                openapi_client.models.google_cloud_vision_v1p4beta1_text_annotation_detected_language.GoogleCloudVisionV1p4beta1TextAnnotationDetectedLanguage(
                                    confidence = 1.337, 
                                    language_code = '', )
                                ], ), 
                        symbols = [
                            openapi_client.models.google_cloud_vision_v1p4beta1_symbol.GoogleCloudVisionV1p4beta1Symbol(
                                confidence = 1.337, 
                                text = '', )
                            ], )
                    ]
            )
        else:
            return GoogleCloudVisionV1p4beta1Paragraph(
        )
        """

    def testGoogleCloudVisionV1p4beta1Paragraph(self):
        """Test GoogleCloudVisionV1p4beta1Paragraph"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

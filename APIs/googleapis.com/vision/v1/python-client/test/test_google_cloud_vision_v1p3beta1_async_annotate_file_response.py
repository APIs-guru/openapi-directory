# coding: utf-8

"""
    Cloud Vision API

    Integrates Google Vision features, including image labeling, face, logo, and landmark detection, optical character recognition (OCR), and detection of explicit content, into applications.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.google_cloud_vision_v1p3beta1_async_annotate_file_response import GoogleCloudVisionV1p3beta1AsyncAnnotateFileResponse

class TestGoogleCloudVisionV1p3beta1AsyncAnnotateFileResponse(unittest.TestCase):
    """GoogleCloudVisionV1p3beta1AsyncAnnotateFileResponse unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> GoogleCloudVisionV1p3beta1AsyncAnnotateFileResponse:
        """Test GoogleCloudVisionV1p3beta1AsyncAnnotateFileResponse
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `GoogleCloudVisionV1p3beta1AsyncAnnotateFileResponse`
        """
        model = GoogleCloudVisionV1p3beta1AsyncAnnotateFileResponse()
        if include_optional:
            return GoogleCloudVisionV1p3beta1AsyncAnnotateFileResponse(
                output_config = openapi_client.models.google_cloud_vision_v1p3beta1_output_config.GoogleCloudVisionV1p3beta1OutputConfig(
                    batch_size = 56, 
                    gcs_destination = openapi_client.models.google_cloud_vision_v1p3beta1_gcs_destination.GoogleCloudVisionV1p3beta1GcsDestination(
                        uri = '', ), )
            )
        else:
            return GoogleCloudVisionV1p3beta1AsyncAnnotateFileResponse(
        )
        """

    def testGoogleCloudVisionV1p3beta1AsyncAnnotateFileResponse(self):
        """Test GoogleCloudVisionV1p3beta1AsyncAnnotateFileResponse"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

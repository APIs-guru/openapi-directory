# coding: utf-8

"""
    Cloud Vision API

    Integrates Google Vision features, including image labeling, face, logo, and landmark detection, optical character recognition (OCR), and detection of explicit content, into applications.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.google_cloud_vision_v1p1beta1_async_batch_annotate_files_response import GoogleCloudVisionV1p1beta1AsyncBatchAnnotateFilesResponse

class TestGoogleCloudVisionV1p1beta1AsyncBatchAnnotateFilesResponse(unittest.TestCase):
    """GoogleCloudVisionV1p1beta1AsyncBatchAnnotateFilesResponse unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> GoogleCloudVisionV1p1beta1AsyncBatchAnnotateFilesResponse:
        """Test GoogleCloudVisionV1p1beta1AsyncBatchAnnotateFilesResponse
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `GoogleCloudVisionV1p1beta1AsyncBatchAnnotateFilesResponse`
        """
        model = GoogleCloudVisionV1p1beta1AsyncBatchAnnotateFilesResponse()
        if include_optional:
            return GoogleCloudVisionV1p1beta1AsyncBatchAnnotateFilesResponse(
                responses = [
                    openapi_client.models.google_cloud_vision_v1p1beta1_async_annotate_file_response.GoogleCloudVisionV1p1beta1AsyncAnnotateFileResponse(
                        output_config = openapi_client.models.google_cloud_vision_v1p1beta1_output_config.GoogleCloudVisionV1p1beta1OutputConfig(
                            batch_size = 56, 
                            gcs_destination = openapi_client.models.google_cloud_vision_v1p1beta1_gcs_destination.GoogleCloudVisionV1p1beta1GcsDestination(
                                uri = '', ), ), )
                    ]
            )
        else:
            return GoogleCloudVisionV1p1beta1AsyncBatchAnnotateFilesResponse(
        )
        """

    def testGoogleCloudVisionV1p1beta1AsyncBatchAnnotateFilesResponse(self):
        """Test GoogleCloudVisionV1p1beta1AsyncBatchAnnotateFilesResponse"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

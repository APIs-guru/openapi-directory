# coding: utf-8

"""
    Cloud Vision API

    Integrates Google Vision features, including image labeling, face, logo, and landmark detection, optical character recognition (OCR), and detection of explicit content, into applications.

    The version of the OpenAPI document: v1p1beta1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt
from typing import Any, ClassVar, Dict, List, Optional, Union
from openapi_client.models.google_cloud_vision_v1p3beta1_block import GoogleCloudVisionV1p3beta1Block
from openapi_client.models.google_cloud_vision_v1p3beta1_text_annotation_text_property import GoogleCloudVisionV1p3beta1TextAnnotationTextProperty
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudVisionV1p3beta1Page(BaseModel):
    """
    Detected page from OCR.
    """ # noqa: E501
    blocks: Optional[List[GoogleCloudVisionV1p3beta1Block]] = Field(default=None, description="List of blocks of text, images etc on this page.")
    confidence: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Confidence of the OCR results on the page. Range [0, 1].")
    height: Optional[StrictInt] = Field(default=None, description="Page height. For PDFs the unit is points. For images (including TIFFs) the unit is pixels.")
    var_property: Optional[GoogleCloudVisionV1p3beta1TextAnnotationTextProperty] = Field(default=None, alias="property")
    width: Optional[StrictInt] = Field(default=None, description="Page width. For PDFs the unit is points. For images (including TIFFs) the unit is pixels.")
    __properties: ClassVar[List[str]] = ["blocks", "confidence", "height", "property", "width"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudVisionV1p3beta1Page from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in blocks (list)
        _items = []
        if self.blocks:
            for _item_blocks in self.blocks:
                if _item_blocks:
                    _items.append(_item_blocks.to_dict())
            _dict['blocks'] = _items
        # override the default output from pydantic by calling `to_dict()` of var_property
        if self.var_property:
            _dict['property'] = self.var_property.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudVisionV1p3beta1Page from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "blocks": [GoogleCloudVisionV1p3beta1Block.from_dict(_item) for _item in obj["blocks"]] if obj.get("blocks") is not None else None,
            "confidence": obj.get("confidence"),
            "height": obj.get("height"),
            "property": GoogleCloudVisionV1p3beta1TextAnnotationTextProperty.from_dict(obj["property"]) if obj.get("property") is not None else None,
            "width": obj.get("width")
        })
        return _obj



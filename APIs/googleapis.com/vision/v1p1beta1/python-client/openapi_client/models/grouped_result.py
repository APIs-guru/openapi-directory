# coding: utf-8

"""
    Cloud Vision API

    Integrates Google Vision features, including image labeling, face, logo, and landmark detection, optical character recognition (OCR), and detection of explicit content, into applications.

    The version of the OpenAPI document: v1p1beta1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.bounding_poly import BoundingPoly
from openapi_client.models.object_annotation import ObjectAnnotation
from openapi_client.models.result import Result
from typing import Optional, Set
from typing_extensions import Self

class GroupedResult(BaseModel):
    """
    Information about the products similar to a single product in a query image.
    """ # noqa: E501
    bounding_poly: Optional[BoundingPoly] = Field(default=None, alias="boundingPoly")
    object_annotations: Optional[List[ObjectAnnotation]] = Field(default=None, description="List of generic predictions for the object in the bounding box.", alias="objectAnnotations")
    results: Optional[List[Result]] = Field(default=None, description="List of results, one for each product match.")
    __properties: ClassVar[List[str]] = ["boundingPoly", "objectAnnotations", "results"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GroupedResult from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of bounding_poly
        if self.bounding_poly:
            _dict['boundingPoly'] = self.bounding_poly.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in object_annotations (list)
        _items = []
        if self.object_annotations:
            for _item_object_annotations in self.object_annotations:
                if _item_object_annotations:
                    _items.append(_item_object_annotations.to_dict())
            _dict['objectAnnotations'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in results (list)
        _items = []
        if self.results:
            for _item_results in self.results:
                if _item_results:
                    _items.append(_item_results.to_dict())
            _dict['results'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GroupedResult from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "boundingPoly": BoundingPoly.from_dict(obj["boundingPoly"]) if obj.get("boundingPoly") is not None else None,
            "objectAnnotations": [ObjectAnnotation.from_dict(_item) for _item in obj["objectAnnotations"]] if obj.get("objectAnnotations") is not None else None,
            "results": [Result.from_dict(_item) for _item in obj["results"]] if obj.get("results") is not None else None
        })
        return _obj



# coding: utf-8

"""
    Cloud Vision API

    Integrates Google Vision features, including image labeling, face, logo, and landmark detection, optical character recognition (OCR), and detection of explicit content, into applications.

    The version of the OpenAPI document: v1p1beta1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_cloud_vision_v1p3beta1_text_annotation_detected_break import GoogleCloudVisionV1p3beta1TextAnnotationDetectedBreak
from openapi_client.models.google_cloud_vision_v1p3beta1_text_annotation_detected_language import GoogleCloudVisionV1p3beta1TextAnnotationDetectedLanguage
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudVisionV1p3beta1TextAnnotationTextProperty(BaseModel):
    """
    Additional information detected on the structural component.
    """ # noqa: E501
    detected_break: Optional[GoogleCloudVisionV1p3beta1TextAnnotationDetectedBreak] = Field(default=None, alias="detectedBreak")
    detected_languages: Optional[List[GoogleCloudVisionV1p3beta1TextAnnotationDetectedLanguage]] = Field(default=None, description="A list of detected languages together with confidence.", alias="detectedLanguages")
    __properties: ClassVar[List[str]] = ["detectedBreak", "detectedLanguages"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudVisionV1p3beta1TextAnnotationTextProperty from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of detected_break
        if self.detected_break:
            _dict['detectedBreak'] = self.detected_break.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in detected_languages (list)
        _items = []
        if self.detected_languages:
            for _item_detected_languages in self.detected_languages:
                if _item_detected_languages:
                    _items.append(_item_detected_languages.to_dict())
            _dict['detectedLanguages'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudVisionV1p3beta1TextAnnotationTextProperty from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "detectedBreak": GoogleCloudVisionV1p3beta1TextAnnotationDetectedBreak.from_dict(obj["detectedBreak"]) if obj.get("detectedBreak") is not None else None,
            "detectedLanguages": [GoogleCloudVisionV1p3beta1TextAnnotationDetectedLanguage.from_dict(_item) for _item in obj["detectedLanguages"]] if obj.get("detectedLanguages") is not None else None
        })
        return _obj



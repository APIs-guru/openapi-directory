# coding: utf-8

"""
    Cloud Vision API

    Integrates Google Vision features, including image labeling, face, logo, and landmark detection, optical character recognition (OCR), and detection of explicit content, into applications.

    The version of the OpenAPI document: v1p1beta1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_cloud_vision_v1p4beta1_bounding_poly import GoogleCloudVisionV1p4beta1BoundingPoly
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudVisionV1p4beta1ReferenceImage(BaseModel):
    """
    A `ReferenceImage` represents a product image and its associated metadata, such as bounding boxes.
    """ # noqa: E501
    bounding_polys: Optional[List[GoogleCloudVisionV1p4beta1BoundingPoly]] = Field(default=None, description="Optional. Bounding polygons around the areas of interest in the reference image. If this field is empty, the system will try to detect regions of interest. At most 10 bounding polygons will be used. The provided shape is converted into a non-rotated rectangle. Once converted, the small edge of the rectangle must be greater than or equal to 300 pixels. The aspect ratio must be 1:4 or less (i.e. 1:3 is ok; 1:5 is not).", alias="boundingPolys")
    name: Optional[StrictStr] = Field(default=None, description="The resource name of the reference image. Format is: `projects/PROJECT_ID/locations/LOC_ID/products/PRODUCT_ID/referenceImages/IMAGE_ID`. This field is ignored when creating a reference image.")
    uri: Optional[StrictStr] = Field(default=None, description="Required. The Google Cloud Storage URI of the reference image. The URI must start with `gs://`.")
    __properties: ClassVar[List[str]] = ["boundingPolys", "name", "uri"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudVisionV1p4beta1ReferenceImage from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in bounding_polys (list)
        _items = []
        if self.bounding_polys:
            for _item_bounding_polys in self.bounding_polys:
                if _item_bounding_polys:
                    _items.append(_item_bounding_polys.to_dict())
            _dict['boundingPolys'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudVisionV1p4beta1ReferenceImage from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "boundingPolys": [GoogleCloudVisionV1p4beta1BoundingPoly.from_dict(_item) for _item in obj["boundingPolys"]] if obj.get("boundingPolys") is not None else None,
            "name": obj.get("name"),
            "uri": obj.get("uri")
        })
        return _obj



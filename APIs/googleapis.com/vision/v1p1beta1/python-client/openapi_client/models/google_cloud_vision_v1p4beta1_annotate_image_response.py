# coding: utf-8

"""
    Cloud Vision API

    Integrates Google Vision features, including image labeling, face, logo, and landmark detection, optical character recognition (OCR), and detection of explicit content, into applications.

    The version of the OpenAPI document: v1p1beta1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_cloud_vision_v1p4beta1_crop_hints_annotation import GoogleCloudVisionV1p4beta1CropHintsAnnotation
from openapi_client.models.google_cloud_vision_v1p4beta1_entity_annotation import GoogleCloudVisionV1p4beta1EntityAnnotation
from openapi_client.models.google_cloud_vision_v1p4beta1_face_annotation import GoogleCloudVisionV1p4beta1FaceAnnotation
from openapi_client.models.google_cloud_vision_v1p4beta1_image_annotation_context import GoogleCloudVisionV1p4beta1ImageAnnotationContext
from openapi_client.models.google_cloud_vision_v1p4beta1_image_properties import GoogleCloudVisionV1p4beta1ImageProperties
from openapi_client.models.google_cloud_vision_v1p4beta1_localized_object_annotation import GoogleCloudVisionV1p4beta1LocalizedObjectAnnotation
from openapi_client.models.google_cloud_vision_v1p4beta1_product_search_results import GoogleCloudVisionV1p4beta1ProductSearchResults
from openapi_client.models.google_cloud_vision_v1p4beta1_safe_search_annotation import GoogleCloudVisionV1p4beta1SafeSearchAnnotation
from openapi_client.models.google_cloud_vision_v1p4beta1_text_annotation import GoogleCloudVisionV1p4beta1TextAnnotation
from openapi_client.models.google_cloud_vision_v1p4beta1_web_detection import GoogleCloudVisionV1p4beta1WebDetection
from openapi_client.models.status import Status
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudVisionV1p4beta1AnnotateImageResponse(BaseModel):
    """
    Response to an image annotation request.
    """ # noqa: E501
    context: Optional[GoogleCloudVisionV1p4beta1ImageAnnotationContext] = None
    crop_hints_annotation: Optional[GoogleCloudVisionV1p4beta1CropHintsAnnotation] = Field(default=None, alias="cropHintsAnnotation")
    error: Optional[Status] = None
    face_annotations: Optional[List[GoogleCloudVisionV1p4beta1FaceAnnotation]] = Field(default=None, description="If present, face detection has completed successfully.", alias="faceAnnotations")
    full_text_annotation: Optional[GoogleCloudVisionV1p4beta1TextAnnotation] = Field(default=None, alias="fullTextAnnotation")
    image_properties_annotation: Optional[GoogleCloudVisionV1p4beta1ImageProperties] = Field(default=None, alias="imagePropertiesAnnotation")
    label_annotations: Optional[List[GoogleCloudVisionV1p4beta1EntityAnnotation]] = Field(default=None, description="If present, label detection has completed successfully.", alias="labelAnnotations")
    landmark_annotations: Optional[List[GoogleCloudVisionV1p4beta1EntityAnnotation]] = Field(default=None, description="If present, landmark detection has completed successfully.", alias="landmarkAnnotations")
    localized_object_annotations: Optional[List[GoogleCloudVisionV1p4beta1LocalizedObjectAnnotation]] = Field(default=None, description="If present, localized object detection has completed successfully. This will be sorted descending by confidence score.", alias="localizedObjectAnnotations")
    logo_annotations: Optional[List[GoogleCloudVisionV1p4beta1EntityAnnotation]] = Field(default=None, description="If present, logo detection has completed successfully.", alias="logoAnnotations")
    product_search_results: Optional[GoogleCloudVisionV1p4beta1ProductSearchResults] = Field(default=None, alias="productSearchResults")
    safe_search_annotation: Optional[GoogleCloudVisionV1p4beta1SafeSearchAnnotation] = Field(default=None, alias="safeSearchAnnotation")
    text_annotations: Optional[List[GoogleCloudVisionV1p4beta1EntityAnnotation]] = Field(default=None, description="If present, text (OCR) detection has completed successfully.", alias="textAnnotations")
    web_detection: Optional[GoogleCloudVisionV1p4beta1WebDetection] = Field(default=None, alias="webDetection")
    __properties: ClassVar[List[str]] = ["context", "cropHintsAnnotation", "error", "faceAnnotations", "fullTextAnnotation", "imagePropertiesAnnotation", "labelAnnotations", "landmarkAnnotations", "localizedObjectAnnotations", "logoAnnotations", "productSearchResults", "safeSearchAnnotation", "textAnnotations", "webDetection"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudVisionV1p4beta1AnnotateImageResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of context
        if self.context:
            _dict['context'] = self.context.to_dict()
        # override the default output from pydantic by calling `to_dict()` of crop_hints_annotation
        if self.crop_hints_annotation:
            _dict['cropHintsAnnotation'] = self.crop_hints_annotation.to_dict()
        # override the default output from pydantic by calling `to_dict()` of error
        if self.error:
            _dict['error'] = self.error.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in face_annotations (list)
        _items = []
        if self.face_annotations:
            for _item_face_annotations in self.face_annotations:
                if _item_face_annotations:
                    _items.append(_item_face_annotations.to_dict())
            _dict['faceAnnotations'] = _items
        # override the default output from pydantic by calling `to_dict()` of full_text_annotation
        if self.full_text_annotation:
            _dict['fullTextAnnotation'] = self.full_text_annotation.to_dict()
        # override the default output from pydantic by calling `to_dict()` of image_properties_annotation
        if self.image_properties_annotation:
            _dict['imagePropertiesAnnotation'] = self.image_properties_annotation.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in label_annotations (list)
        _items = []
        if self.label_annotations:
            for _item_label_annotations in self.label_annotations:
                if _item_label_annotations:
                    _items.append(_item_label_annotations.to_dict())
            _dict['labelAnnotations'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in landmark_annotations (list)
        _items = []
        if self.landmark_annotations:
            for _item_landmark_annotations in self.landmark_annotations:
                if _item_landmark_annotations:
                    _items.append(_item_landmark_annotations.to_dict())
            _dict['landmarkAnnotations'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in localized_object_annotations (list)
        _items = []
        if self.localized_object_annotations:
            for _item_localized_object_annotations in self.localized_object_annotations:
                if _item_localized_object_annotations:
                    _items.append(_item_localized_object_annotations.to_dict())
            _dict['localizedObjectAnnotations'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in logo_annotations (list)
        _items = []
        if self.logo_annotations:
            for _item_logo_annotations in self.logo_annotations:
                if _item_logo_annotations:
                    _items.append(_item_logo_annotations.to_dict())
            _dict['logoAnnotations'] = _items
        # override the default output from pydantic by calling `to_dict()` of product_search_results
        if self.product_search_results:
            _dict['productSearchResults'] = self.product_search_results.to_dict()
        # override the default output from pydantic by calling `to_dict()` of safe_search_annotation
        if self.safe_search_annotation:
            _dict['safeSearchAnnotation'] = self.safe_search_annotation.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in text_annotations (list)
        _items = []
        if self.text_annotations:
            for _item_text_annotations in self.text_annotations:
                if _item_text_annotations:
                    _items.append(_item_text_annotations.to_dict())
            _dict['textAnnotations'] = _items
        # override the default output from pydantic by calling `to_dict()` of web_detection
        if self.web_detection:
            _dict['webDetection'] = self.web_detection.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudVisionV1p4beta1AnnotateImageResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "context": GoogleCloudVisionV1p4beta1ImageAnnotationContext.from_dict(obj["context"]) if obj.get("context") is not None else None,
            "cropHintsAnnotation": GoogleCloudVisionV1p4beta1CropHintsAnnotation.from_dict(obj["cropHintsAnnotation"]) if obj.get("cropHintsAnnotation") is not None else None,
            "error": Status.from_dict(obj["error"]) if obj.get("error") is not None else None,
            "faceAnnotations": [GoogleCloudVisionV1p4beta1FaceAnnotation.from_dict(_item) for _item in obj["faceAnnotations"]] if obj.get("faceAnnotations") is not None else None,
            "fullTextAnnotation": GoogleCloudVisionV1p4beta1TextAnnotation.from_dict(obj["fullTextAnnotation"]) if obj.get("fullTextAnnotation") is not None else None,
            "imagePropertiesAnnotation": GoogleCloudVisionV1p4beta1ImageProperties.from_dict(obj["imagePropertiesAnnotation"]) if obj.get("imagePropertiesAnnotation") is not None else None,
            "labelAnnotations": [GoogleCloudVisionV1p4beta1EntityAnnotation.from_dict(_item) for _item in obj["labelAnnotations"]] if obj.get("labelAnnotations") is not None else None,
            "landmarkAnnotations": [GoogleCloudVisionV1p4beta1EntityAnnotation.from_dict(_item) for _item in obj["landmarkAnnotations"]] if obj.get("landmarkAnnotations") is not None else None,
            "localizedObjectAnnotations": [GoogleCloudVisionV1p4beta1LocalizedObjectAnnotation.from_dict(_item) for _item in obj["localizedObjectAnnotations"]] if obj.get("localizedObjectAnnotations") is not None else None,
            "logoAnnotations": [GoogleCloudVisionV1p4beta1EntityAnnotation.from_dict(_item) for _item in obj["logoAnnotations"]] if obj.get("logoAnnotations") is not None else None,
            "productSearchResults": GoogleCloudVisionV1p4beta1ProductSearchResults.from_dict(obj["productSearchResults"]) if obj.get("productSearchResults") is not None else None,
            "safeSearchAnnotation": GoogleCloudVisionV1p4beta1SafeSearchAnnotation.from_dict(obj["safeSearchAnnotation"]) if obj.get("safeSearchAnnotation") is not None else None,
            "textAnnotations": [GoogleCloudVisionV1p4beta1EntityAnnotation.from_dict(_item) for _item in obj["textAnnotations"]] if obj.get("textAnnotations") is not None else None,
            "webDetection": GoogleCloudVisionV1p4beta1WebDetection.from_dict(obj["webDetection"]) if obj.get("webDetection") is not None else None
        })
        return _obj



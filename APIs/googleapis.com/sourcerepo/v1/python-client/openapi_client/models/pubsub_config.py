# coding: utf-8

"""
    Cloud Source Repositories API

    Accesses source code repositories hosted by Google.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class PubsubConfig(BaseModel):
    """
    Configuration to publish a Cloud Pub/Sub message.
    """ # noqa: E501
    message_format: Optional[StrictStr] = Field(default=None, description="The format of the Cloud Pub/Sub messages.", alias="messageFormat")
    service_account_email: Optional[StrictStr] = Field(default=None, description="Email address of the service account used for publishing Cloud Pub/Sub messages. This service account needs to be in the same project as the PubsubConfig. When added, the caller needs to have iam.serviceAccounts.actAs permission on this service account. If unspecified, it defaults to the compute engine default service account.", alias="serviceAccountEmail")
    topic: Optional[StrictStr] = Field(default=None, description="A topic of Cloud Pub/Sub. Values are of the form `projects//topics/`. The project needs to be the same project as this config is in.")
    __properties: ClassVar[List[str]] = ["messageFormat", "serviceAccountEmail", "topic"]

    @field_validator('message_format')
    def message_format_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['MESSAGE_FORMAT_UNSPECIFIED', 'PROTOBUF', 'JSON']):
            raise ValueError("must be one of enum values ('MESSAGE_FORMAT_UNSPECIFIED', 'PROTOBUF', 'JSON')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PubsubConfig from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PubsubConfig from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "messageFormat": obj.get("messageFormat"),
            "serviceAccountEmail": obj.get("serviceAccountEmail"),
            "topic": obj.get("topic")
        })
        return _obj



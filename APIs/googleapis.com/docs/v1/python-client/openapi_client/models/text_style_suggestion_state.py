# coding: utf-8

"""
    Google Docs API

    Reads and writes Google Docs documents.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class TextStyleSuggestionState(BaseModel):
    """
    A mask that indicates which of the fields on the base TextStyle have been changed in this suggestion. For any field set to true, there's a new suggested value.
    """ # noqa: E501
    background_color_suggested: Optional[StrictBool] = Field(default=None, description="Indicates if there was a suggested change to background_color.", alias="backgroundColorSuggested")
    baseline_offset_suggested: Optional[StrictBool] = Field(default=None, description="Indicates if there was a suggested change to baseline_offset.", alias="baselineOffsetSuggested")
    bold_suggested: Optional[StrictBool] = Field(default=None, description="Indicates if there was a suggested change to bold.", alias="boldSuggested")
    font_size_suggested: Optional[StrictBool] = Field(default=None, description="Indicates if there was a suggested change to font_size.", alias="fontSizeSuggested")
    foreground_color_suggested: Optional[StrictBool] = Field(default=None, description="Indicates if there was a suggested change to foreground_color.", alias="foregroundColorSuggested")
    italic_suggested: Optional[StrictBool] = Field(default=None, description="Indicates if there was a suggested change to italic.", alias="italicSuggested")
    link_suggested: Optional[StrictBool] = Field(default=None, description="Indicates if there was a suggested change to link.", alias="linkSuggested")
    small_caps_suggested: Optional[StrictBool] = Field(default=None, description="Indicates if there was a suggested change to small_caps.", alias="smallCapsSuggested")
    strikethrough_suggested: Optional[StrictBool] = Field(default=None, description="Indicates if there was a suggested change to strikethrough.", alias="strikethroughSuggested")
    underline_suggested: Optional[StrictBool] = Field(default=None, description="Indicates if there was a suggested change to underline.", alias="underlineSuggested")
    weighted_font_family_suggested: Optional[StrictBool] = Field(default=None, description="Indicates if there was a suggested change to weighted_font_family.", alias="weightedFontFamilySuggested")
    __properties: ClassVar[List[str]] = ["backgroundColorSuggested", "baselineOffsetSuggested", "boldSuggested", "fontSizeSuggested", "foregroundColorSuggested", "italicSuggested", "linkSuggested", "smallCapsSuggested", "strikethroughSuggested", "underlineSuggested", "weightedFontFamilySuggested"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of TextStyleSuggestionState from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of TextStyleSuggestionState from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "backgroundColorSuggested": obj.get("backgroundColorSuggested"),
            "baselineOffsetSuggested": obj.get("baselineOffsetSuggested"),
            "boldSuggested": obj.get("boldSuggested"),
            "fontSizeSuggested": obj.get("fontSizeSuggested"),
            "foregroundColorSuggested": obj.get("foregroundColorSuggested"),
            "italicSuggested": obj.get("italicSuggested"),
            "linkSuggested": obj.get("linkSuggested"),
            "smallCapsSuggested": obj.get("smallCapsSuggested"),
            "strikethroughSuggested": obj.get("strikethroughSuggested"),
            "underlineSuggested": obj.get("underlineSuggested"),
            "weightedFontFamilySuggested": obj.get("weightedFontFamilySuggested")
        })
        return _obj



# coding: utf-8

"""
    Google Docs API

    Reads and writes Google Docs documents.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.shading_suggestion_state import ShadingSuggestionState
from typing import Optional, Set
from typing_extensions import Self

class ParagraphStyleSuggestionState(BaseModel):
    """
    A mask that indicates which of the fields on the base ParagraphStyle have been changed in this suggestion. For any field set to true, there's a new suggested value.
    """ # noqa: E501
    alignment_suggested: Optional[StrictBool] = Field(default=None, description="Indicates if there was a suggested change to alignment.", alias="alignmentSuggested")
    avoid_widow_and_orphan_suggested: Optional[StrictBool] = Field(default=None, description="Indicates if there was a suggested change to avoid_widow_and_orphan.", alias="avoidWidowAndOrphanSuggested")
    border_between_suggested: Optional[StrictBool] = Field(default=None, description="Indicates if there was a suggested change to border_between.", alias="borderBetweenSuggested")
    border_bottom_suggested: Optional[StrictBool] = Field(default=None, description="Indicates if there was a suggested change to border_bottom.", alias="borderBottomSuggested")
    border_left_suggested: Optional[StrictBool] = Field(default=None, description="Indicates if there was a suggested change to border_left.", alias="borderLeftSuggested")
    border_right_suggested: Optional[StrictBool] = Field(default=None, description="Indicates if there was a suggested change to border_right.", alias="borderRightSuggested")
    border_top_suggested: Optional[StrictBool] = Field(default=None, description="Indicates if there was a suggested change to border_top.", alias="borderTopSuggested")
    direction_suggested: Optional[StrictBool] = Field(default=None, description="Indicates if there was a suggested change to direction.", alias="directionSuggested")
    heading_id_suggested: Optional[StrictBool] = Field(default=None, description="Indicates if there was a suggested change to heading_id.", alias="headingIdSuggested")
    indent_end_suggested: Optional[StrictBool] = Field(default=None, description="Indicates if there was a suggested change to indent_end.", alias="indentEndSuggested")
    indent_first_line_suggested: Optional[StrictBool] = Field(default=None, description="Indicates if there was a suggested change to indent_first_line.", alias="indentFirstLineSuggested")
    indent_start_suggested: Optional[StrictBool] = Field(default=None, description="Indicates if there was a suggested change to indent_start.", alias="indentStartSuggested")
    keep_lines_together_suggested: Optional[StrictBool] = Field(default=None, description="Indicates if there was a suggested change to keep_lines_together.", alias="keepLinesTogetherSuggested")
    keep_with_next_suggested: Optional[StrictBool] = Field(default=None, description="Indicates if there was a suggested change to keep_with_next.", alias="keepWithNextSuggested")
    line_spacing_suggested: Optional[StrictBool] = Field(default=None, description="Indicates if there was a suggested change to line_spacing.", alias="lineSpacingSuggested")
    named_style_type_suggested: Optional[StrictBool] = Field(default=None, description="Indicates if there was a suggested change to named_style_type.", alias="namedStyleTypeSuggested")
    page_break_before_suggested: Optional[StrictBool] = Field(default=None, description="Indicates if there was a suggested change to page_break_before.", alias="pageBreakBeforeSuggested")
    shading_suggestion_state: Optional[ShadingSuggestionState] = Field(default=None, alias="shadingSuggestionState")
    space_above_suggested: Optional[StrictBool] = Field(default=None, description="Indicates if there was a suggested change to space_above.", alias="spaceAboveSuggested")
    space_below_suggested: Optional[StrictBool] = Field(default=None, description="Indicates if there was a suggested change to space_below.", alias="spaceBelowSuggested")
    spacing_mode_suggested: Optional[StrictBool] = Field(default=None, description="Indicates if there was a suggested change to spacing_mode.", alias="spacingModeSuggested")
    __properties: ClassVar[List[str]] = ["alignmentSuggested", "avoidWidowAndOrphanSuggested", "borderBetweenSuggested", "borderBottomSuggested", "borderLeftSuggested", "borderRightSuggested", "borderTopSuggested", "directionSuggested", "headingIdSuggested", "indentEndSuggested", "indentFirstLineSuggested", "indentStartSuggested", "keepLinesTogetherSuggested", "keepWithNextSuggested", "lineSpacingSuggested", "namedStyleTypeSuggested", "pageBreakBeforeSuggested", "shadingSuggestionState", "spaceAboveSuggested", "spaceBelowSuggested", "spacingModeSuggested"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ParagraphStyleSuggestionState from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of shading_suggestion_state
        if self.shading_suggestion_state:
            _dict['shadingSuggestionState'] = self.shading_suggestion_state.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ParagraphStyleSuggestionState from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "alignmentSuggested": obj.get("alignmentSuggested"),
            "avoidWidowAndOrphanSuggested": obj.get("avoidWidowAndOrphanSuggested"),
            "borderBetweenSuggested": obj.get("borderBetweenSuggested"),
            "borderBottomSuggested": obj.get("borderBottomSuggested"),
            "borderLeftSuggested": obj.get("borderLeftSuggested"),
            "borderRightSuggested": obj.get("borderRightSuggested"),
            "borderTopSuggested": obj.get("borderTopSuggested"),
            "directionSuggested": obj.get("directionSuggested"),
            "headingIdSuggested": obj.get("headingIdSuggested"),
            "indentEndSuggested": obj.get("indentEndSuggested"),
            "indentFirstLineSuggested": obj.get("indentFirstLineSuggested"),
            "indentStartSuggested": obj.get("indentStartSuggested"),
            "keepLinesTogetherSuggested": obj.get("keepLinesTogetherSuggested"),
            "keepWithNextSuggested": obj.get("keepWithNextSuggested"),
            "lineSpacingSuggested": obj.get("lineSpacingSuggested"),
            "namedStyleTypeSuggested": obj.get("namedStyleTypeSuggested"),
            "pageBreakBeforeSuggested": obj.get("pageBreakBeforeSuggested"),
            "shadingSuggestionState": ShadingSuggestionState.from_dict(obj["shadingSuggestionState"]) if obj.get("shadingSuggestionState") is not None else None,
            "spaceAboveSuggested": obj.get("spaceAboveSuggested"),
            "spaceBelowSuggested": obj.get("spaceBelowSuggested"),
            "spacingModeSuggested": obj.get("spacingModeSuggested")
        })
        return _obj



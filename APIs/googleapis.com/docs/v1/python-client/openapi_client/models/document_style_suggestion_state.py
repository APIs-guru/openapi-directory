# coding: utf-8

"""
    Google Docs API

    Reads and writes Google Docs documents.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.background_suggestion_state import BackgroundSuggestionState
from openapi_client.models.size_suggestion_state import SizeSuggestionState
from typing import Optional, Set
from typing_extensions import Self

class DocumentStyleSuggestionState(BaseModel):
    """
    A mask that indicates which of the fields on the base DocumentStyle have been changed in this suggestion. For any field set to true, there's a new suggested value.
    """ # noqa: E501
    background_suggestion_state: Optional[BackgroundSuggestionState] = Field(default=None, alias="backgroundSuggestionState")
    default_footer_id_suggested: Optional[StrictBool] = Field(default=None, description="Indicates if there was a suggested change to default_footer_id.", alias="defaultFooterIdSuggested")
    default_header_id_suggested: Optional[StrictBool] = Field(default=None, description="Indicates if there was a suggested change to default_header_id.", alias="defaultHeaderIdSuggested")
    even_page_footer_id_suggested: Optional[StrictBool] = Field(default=None, description="Indicates if there was a suggested change to even_page_footer_id.", alias="evenPageFooterIdSuggested")
    even_page_header_id_suggested: Optional[StrictBool] = Field(default=None, description="Indicates if there was a suggested change to even_page_header_id.", alias="evenPageHeaderIdSuggested")
    first_page_footer_id_suggested: Optional[StrictBool] = Field(default=None, description="Indicates if there was a suggested change to first_page_footer_id.", alias="firstPageFooterIdSuggested")
    first_page_header_id_suggested: Optional[StrictBool] = Field(default=None, description="Indicates if there was a suggested change to first_page_header_id.", alias="firstPageHeaderIdSuggested")
    flip_page_orientation_suggested: Optional[StrictBool] = Field(default=None, description="Optional. Indicates if there was a suggested change to flip_page_orientation.", alias="flipPageOrientationSuggested")
    margin_bottom_suggested: Optional[StrictBool] = Field(default=None, description="Indicates if there was a suggested change to margin_bottom.", alias="marginBottomSuggested")
    margin_footer_suggested: Optional[StrictBool] = Field(default=None, description="Indicates if there was a suggested change to margin_footer.", alias="marginFooterSuggested")
    margin_header_suggested: Optional[StrictBool] = Field(default=None, description="Indicates if there was a suggested change to margin_header.", alias="marginHeaderSuggested")
    margin_left_suggested: Optional[StrictBool] = Field(default=None, description="Indicates if there was a suggested change to margin_left.", alias="marginLeftSuggested")
    margin_right_suggested: Optional[StrictBool] = Field(default=None, description="Indicates if there was a suggested change to margin_right.", alias="marginRightSuggested")
    margin_top_suggested: Optional[StrictBool] = Field(default=None, description="Indicates if there was a suggested change to margin_top.", alias="marginTopSuggested")
    page_number_start_suggested: Optional[StrictBool] = Field(default=None, description="Indicates if there was a suggested change to page_number_start.", alias="pageNumberStartSuggested")
    page_size_suggestion_state: Optional[SizeSuggestionState] = Field(default=None, alias="pageSizeSuggestionState")
    use_custom_header_footer_margins_suggested: Optional[StrictBool] = Field(default=None, description="Indicates if there was a suggested change to use_custom_header_footer_margins.", alias="useCustomHeaderFooterMarginsSuggested")
    use_even_page_header_footer_suggested: Optional[StrictBool] = Field(default=None, description="Indicates if there was a suggested change to use_even_page_header_footer.", alias="useEvenPageHeaderFooterSuggested")
    use_first_page_header_footer_suggested: Optional[StrictBool] = Field(default=None, description="Indicates if there was a suggested change to use_first_page_header_footer.", alias="useFirstPageHeaderFooterSuggested")
    __properties: ClassVar[List[str]] = ["backgroundSuggestionState", "defaultFooterIdSuggested", "defaultHeaderIdSuggested", "evenPageFooterIdSuggested", "evenPageHeaderIdSuggested", "firstPageFooterIdSuggested", "firstPageHeaderIdSuggested", "flipPageOrientationSuggested", "marginBottomSuggested", "marginFooterSuggested", "marginHeaderSuggested", "marginLeftSuggested", "marginRightSuggested", "marginTopSuggested", "pageNumberStartSuggested", "pageSizeSuggestionState", "useCustomHeaderFooterMarginsSuggested", "useEvenPageHeaderFooterSuggested", "useFirstPageHeaderFooterSuggested"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DocumentStyleSuggestionState from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of background_suggestion_state
        if self.background_suggestion_state:
            _dict['backgroundSuggestionState'] = self.background_suggestion_state.to_dict()
        # override the default output from pydantic by calling `to_dict()` of page_size_suggestion_state
        if self.page_size_suggestion_state:
            _dict['pageSizeSuggestionState'] = self.page_size_suggestion_state.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DocumentStyleSuggestionState from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "backgroundSuggestionState": BackgroundSuggestionState.from_dict(obj["backgroundSuggestionState"]) if obj.get("backgroundSuggestionState") is not None else None,
            "defaultFooterIdSuggested": obj.get("defaultFooterIdSuggested"),
            "defaultHeaderIdSuggested": obj.get("defaultHeaderIdSuggested"),
            "evenPageFooterIdSuggested": obj.get("evenPageFooterIdSuggested"),
            "evenPageHeaderIdSuggested": obj.get("evenPageHeaderIdSuggested"),
            "firstPageFooterIdSuggested": obj.get("firstPageFooterIdSuggested"),
            "firstPageHeaderIdSuggested": obj.get("firstPageHeaderIdSuggested"),
            "flipPageOrientationSuggested": obj.get("flipPageOrientationSuggested"),
            "marginBottomSuggested": obj.get("marginBottomSuggested"),
            "marginFooterSuggested": obj.get("marginFooterSuggested"),
            "marginHeaderSuggested": obj.get("marginHeaderSuggested"),
            "marginLeftSuggested": obj.get("marginLeftSuggested"),
            "marginRightSuggested": obj.get("marginRightSuggested"),
            "marginTopSuggested": obj.get("marginTopSuggested"),
            "pageNumberStartSuggested": obj.get("pageNumberStartSuggested"),
            "pageSizeSuggestionState": SizeSuggestionState.from_dict(obj["pageSizeSuggestionState"]) if obj.get("pageSizeSuggestionState") is not None else None,
            "useCustomHeaderFooterMarginsSuggested": obj.get("useCustomHeaderFooterMarginsSuggested"),
            "useEvenPageHeaderFooterSuggested": obj.get("useEvenPageHeaderFooterSuggested"),
            "useFirstPageHeaderFooterSuggested": obj.get("useFirstPageHeaderFooterSuggested")
        })
        return _obj



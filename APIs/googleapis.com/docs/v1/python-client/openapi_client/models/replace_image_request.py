# coding: utf-8

"""
    Google Docs API

    Reads and writes Google Docs documents.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class ReplaceImageRequest(BaseModel):
    """
    Replaces an existing image with a new image. Replacing an image removes some image effects from the existing image in order to mirror the behavior of the Docs editor.
    """ # noqa: E501
    image_object_id: Optional[StrictStr] = Field(default=None, description="The ID of the existing image that will be replaced. The ID can be retrieved from the response of a get request.", alias="imageObjectId")
    image_replace_method: Optional[StrictStr] = Field(default=None, description="The replacement method.", alias="imageReplaceMethod")
    uri: Optional[StrictStr] = Field(default=None, description="The URI of the new image. The image is fetched once at insertion time and a copy is stored for display inside the document. Images must be less than 50MB, cannot exceed 25 megapixels, and must be in PNG, JPEG, or GIF format. The provided URI can't surpass 2 KB in length. The URI is saved with the image, and exposed through the ImageProperties.source_uri field.")
    __properties: ClassVar[List[str]] = ["imageObjectId", "imageReplaceMethod", "uri"]

    @field_validator('image_replace_method')
    def image_replace_method_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['IMAGE_REPLACE_METHOD_UNSPECIFIED', 'CENTER_CROP']):
            raise ValueError("must be one of enum values ('IMAGE_REPLACE_METHOD_UNSPECIFIED', 'CENTER_CROP')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ReplaceImageRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ReplaceImageRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "imageObjectId": obj.get("imageObjectId"),
            "imageReplaceMethod": obj.get("imageReplaceMethod"),
            "uri": obj.get("uri")
        })
        return _obj



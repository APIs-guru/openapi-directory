# coding: utf-8

"""
    Google Docs API

    Reads and writes Google Docs documents.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.suggested_text_style import SuggestedTextStyle
from openapi_client.models.text_style import TextStyle
from typing import Optional, Set
from typing_extensions import Self

class FootnoteReference(BaseModel):
    """
    A ParagraphElement representing a footnote reference. A footnote reference is the inline content rendered with a number and is used to identify the footnote.
    """ # noqa: E501
    footnote_id: Optional[StrictStr] = Field(default=None, description="The ID of the footnote that contains the content of this footnote reference.", alias="footnoteId")
    footnote_number: Optional[StrictStr] = Field(default=None, description="The rendered number of this footnote.", alias="footnoteNumber")
    suggested_deletion_ids: Optional[List[StrictStr]] = Field(default=None, description="The suggested deletion IDs. If empty, then there are no suggested deletions of this content.", alias="suggestedDeletionIds")
    suggested_insertion_ids: Optional[List[StrictStr]] = Field(default=None, description="The suggested insertion IDs. A FootnoteReference may have multiple insertion IDs if it's a nested suggested change. If empty, then this is not a suggested insertion.", alias="suggestedInsertionIds")
    suggested_text_style_changes: Optional[Dict[str, SuggestedTextStyle]] = Field(default=None, description="The suggested text style changes to this FootnoteReference, keyed by suggestion ID.", alias="suggestedTextStyleChanges")
    text_style: Optional[TextStyle] = Field(default=None, alias="textStyle")
    __properties: ClassVar[List[str]] = ["footnoteId", "footnoteNumber", "suggestedDeletionIds", "suggestedInsertionIds", "suggestedTextStyleChanges", "textStyle"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of FootnoteReference from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each value in suggested_text_style_changes (dict)
        _field_dict = {}
        if self.suggested_text_style_changes:
            for _key_suggested_text_style_changes in self.suggested_text_style_changes:
                if self.suggested_text_style_changes[_key_suggested_text_style_changes]:
                    _field_dict[_key_suggested_text_style_changes] = self.suggested_text_style_changes[_key_suggested_text_style_changes].to_dict()
            _dict['suggestedTextStyleChanges'] = _field_dict
        # override the default output from pydantic by calling `to_dict()` of text_style
        if self.text_style:
            _dict['textStyle'] = self.text_style.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of FootnoteReference from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "footnoteId": obj.get("footnoteId"),
            "footnoteNumber": obj.get("footnoteNumber"),
            "suggestedDeletionIds": obj.get("suggestedDeletionIds"),
            "suggestedInsertionIds": obj.get("suggestedInsertionIds"),
            "suggestedTextStyleChanges": dict(
                (_k, SuggestedTextStyle.from_dict(_v))
                for _k, _v in obj["suggestedTextStyleChanges"].items()
            )
            if obj.get("suggestedTextStyleChanges") is not None
            else None,
            "textStyle": TextStyle.from_dict(obj["textStyle"]) if obj.get("textStyle") is not None else None
        })
        return _obj



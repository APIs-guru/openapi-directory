# coding: utf-8

"""
    Google Docs API

    Reads and writes Google Docs documents.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.embedded_object_border_suggestion_state import EmbeddedObjectBorderSuggestionState
from openapi_client.models.image_properties_suggestion_state import ImagePropertiesSuggestionState
from openapi_client.models.linked_content_reference_suggestion_state import LinkedContentReferenceSuggestionState
from openapi_client.models.size_suggestion_state import SizeSuggestionState
from typing import Optional, Set
from typing_extensions import Self

class EmbeddedObjectSuggestionState(BaseModel):
    """
    A mask that indicates which of the fields on the base EmbeddedObject have been changed in this suggestion. For any field set to true, there's a new suggested value.
    """ # noqa: E501
    description_suggested: Optional[StrictBool] = Field(default=None, description="Indicates if there was a suggested change to description.", alias="descriptionSuggested")
    embedded_drawing_properties_suggestion_state: Optional[Dict[str, Any]] = Field(default=None, description="A mask that indicates which of the fields on the base EmbeddedDrawingProperties have been changed in this suggestion. For any field set to true, there's a new suggested value.", alias="embeddedDrawingPropertiesSuggestionState")
    embedded_object_border_suggestion_state: Optional[EmbeddedObjectBorderSuggestionState] = Field(default=None, alias="embeddedObjectBorderSuggestionState")
    image_properties_suggestion_state: Optional[ImagePropertiesSuggestionState] = Field(default=None, alias="imagePropertiesSuggestionState")
    linked_content_reference_suggestion_state: Optional[LinkedContentReferenceSuggestionState] = Field(default=None, alias="linkedContentReferenceSuggestionState")
    margin_bottom_suggested: Optional[StrictBool] = Field(default=None, description="Indicates if there was a suggested change to margin_bottom.", alias="marginBottomSuggested")
    margin_left_suggested: Optional[StrictBool] = Field(default=None, description="Indicates if there was a suggested change to margin_left.", alias="marginLeftSuggested")
    margin_right_suggested: Optional[StrictBool] = Field(default=None, description="Indicates if there was a suggested change to margin_right.", alias="marginRightSuggested")
    margin_top_suggested: Optional[StrictBool] = Field(default=None, description="Indicates if there was a suggested change to margin_top.", alias="marginTopSuggested")
    size_suggestion_state: Optional[SizeSuggestionState] = Field(default=None, alias="sizeSuggestionState")
    title_suggested: Optional[StrictBool] = Field(default=None, description="Indicates if there was a suggested change to title.", alias="titleSuggested")
    __properties: ClassVar[List[str]] = ["descriptionSuggested", "embeddedDrawingPropertiesSuggestionState", "embeddedObjectBorderSuggestionState", "imagePropertiesSuggestionState", "linkedContentReferenceSuggestionState", "marginBottomSuggested", "marginLeftSuggested", "marginRightSuggested", "marginTopSuggested", "sizeSuggestionState", "titleSuggested"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of EmbeddedObjectSuggestionState from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of embedded_object_border_suggestion_state
        if self.embedded_object_border_suggestion_state:
            _dict['embeddedObjectBorderSuggestionState'] = self.embedded_object_border_suggestion_state.to_dict()
        # override the default output from pydantic by calling `to_dict()` of image_properties_suggestion_state
        if self.image_properties_suggestion_state:
            _dict['imagePropertiesSuggestionState'] = self.image_properties_suggestion_state.to_dict()
        # override the default output from pydantic by calling `to_dict()` of linked_content_reference_suggestion_state
        if self.linked_content_reference_suggestion_state:
            _dict['linkedContentReferenceSuggestionState'] = self.linked_content_reference_suggestion_state.to_dict()
        # override the default output from pydantic by calling `to_dict()` of size_suggestion_state
        if self.size_suggestion_state:
            _dict['sizeSuggestionState'] = self.size_suggestion_state.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of EmbeddedObjectSuggestionState from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "descriptionSuggested": obj.get("descriptionSuggested"),
            "embeddedDrawingPropertiesSuggestionState": obj.get("embeddedDrawingPropertiesSuggestionState"),
            "embeddedObjectBorderSuggestionState": EmbeddedObjectBorderSuggestionState.from_dict(obj["embeddedObjectBorderSuggestionState"]) if obj.get("embeddedObjectBorderSuggestionState") is not None else None,
            "imagePropertiesSuggestionState": ImagePropertiesSuggestionState.from_dict(obj["imagePropertiesSuggestionState"]) if obj.get("imagePropertiesSuggestionState") is not None else None,
            "linkedContentReferenceSuggestionState": LinkedContentReferenceSuggestionState.from_dict(obj["linkedContentReferenceSuggestionState"]) if obj.get("linkedContentReferenceSuggestionState") is not None else None,
            "marginBottomSuggested": obj.get("marginBottomSuggested"),
            "marginLeftSuggested": obj.get("marginLeftSuggested"),
            "marginRightSuggested": obj.get("marginRightSuggested"),
            "marginTopSuggested": obj.get("marginTopSuggested"),
            "sizeSuggestionState": SizeSuggestionState.from_dict(obj["sizeSuggestionState"]) if obj.get("sizeSuggestionState") is not None else None,
            "titleSuggested": obj.get("titleSuggested")
        })
        return _obj



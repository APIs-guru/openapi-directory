# coding: utf-8

"""
    Google Docs API

    Reads and writes Google Docs documents.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.end_of_segment_location import EndOfSegmentLocation
from openapi_client.models.location import Location
from openapi_client.models.size import Size
from typing import Optional, Set
from typing_extensions import Self

class InsertInlineImageRequest(BaseModel):
    """
    Inserts an InlineObject containing an image at the given location.
    """ # noqa: E501
    end_of_segment_location: Optional[EndOfSegmentLocation] = Field(default=None, alias="endOfSegmentLocation")
    location: Optional[Location] = None
    object_size: Optional[Size] = Field(default=None, alias="objectSize")
    uri: Optional[StrictStr] = Field(default=None, description="The image URI. The image is fetched once at insertion time and a copy is stored for display inside the document. Images must be less than 50MB in size, cannot exceed 25 megapixels, and must be in one of PNG, JPEG, or GIF format. The provided URI must be publicly accessible and at most 2 kB in length. The URI itself is saved with the image, and exposed via the ImageProperties.content_uri field.")
    __properties: ClassVar[List[str]] = ["endOfSegmentLocation", "location", "objectSize", "uri"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of InsertInlineImageRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of end_of_segment_location
        if self.end_of_segment_location:
            _dict['endOfSegmentLocation'] = self.end_of_segment_location.to_dict()
        # override the default output from pydantic by calling `to_dict()` of location
        if self.location:
            _dict['location'] = self.location.to_dict()
        # override the default output from pydantic by calling `to_dict()` of object_size
        if self.object_size:
            _dict['objectSize'] = self.object_size.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of InsertInlineImageRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "endOfSegmentLocation": EndOfSegmentLocation.from_dict(obj["endOfSegmentLocation"]) if obj.get("endOfSegmentLocation") is not None else None,
            "location": Location.from_dict(obj["location"]) if obj.get("location") is not None else None,
            "objectSize": Size.from_dict(obj["objectSize"]) if obj.get("objectSize") is not None else None,
            "uri": obj.get("uri")
        })
        return _obj



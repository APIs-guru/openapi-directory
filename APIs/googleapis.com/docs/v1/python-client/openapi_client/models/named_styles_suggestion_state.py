# coding: utf-8

"""
    Google Docs API

    Reads and writes Google Docs documents.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.named_style_suggestion_state import NamedStyleSuggestionState
from typing import Optional, Set
from typing_extensions import Self

class NamedStylesSuggestionState(BaseModel):
    """
    The suggestion state of a NamedStyles message.
    """ # noqa: E501
    styles_suggestion_states: Optional[List[NamedStyleSuggestionState]] = Field(default=None, description="A mask that indicates which of the fields on the corresponding NamedStyle in styles have been changed in this suggestion. The order of these named style suggestion states matches the order of the corresponding named style within the named styles suggestion.", alias="stylesSuggestionStates")
    __properties: ClassVar[List[str]] = ["stylesSuggestionStates"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of NamedStylesSuggestionState from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in styles_suggestion_states (list)
        _items = []
        if self.styles_suggestion_states:
            for _item_styles_suggestion_states in self.styles_suggestion_states:
                if _item_styles_suggestion_states:
                    _items.append(_item_styles_suggestion_states.to_dict())
            _dict['stylesSuggestionStates'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of NamedStylesSuggestionState from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "stylesSuggestionStates": [NamedStyleSuggestionState.from_dict(_item) for _item in obj["stylesSuggestionStates"]] if obj.get("stylesSuggestionStates") is not None else None
        })
        return _obj



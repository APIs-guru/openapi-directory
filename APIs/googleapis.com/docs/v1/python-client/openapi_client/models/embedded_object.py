# coding: utf-8

"""
    Google Docs API

    Reads and writes Google Docs documents.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.dimension import Dimension
from openapi_client.models.embedded_object_border import EmbeddedObjectBorder
from openapi_client.models.image_properties import ImageProperties
from openapi_client.models.linked_content_reference import LinkedContentReference
from openapi_client.models.size import Size
from typing import Optional, Set
from typing_extensions import Self

class EmbeddedObject(BaseModel):
    """
    An embedded object in the document.
    """ # noqa: E501
    description: Optional[StrictStr] = Field(default=None, description="The description of the embedded object. The `title` and `description` are both combined to display alt text.")
    embedded_drawing_properties: Optional[Dict[str, Any]] = Field(default=None, description="The properties of an embedded drawing and used to differentiate the object type. An embedded drawing is one that's created and edited within a document. Note that extensive details are not supported.", alias="embeddedDrawingProperties")
    embedded_object_border: Optional[EmbeddedObjectBorder] = Field(default=None, alias="embeddedObjectBorder")
    image_properties: Optional[ImageProperties] = Field(default=None, alias="imageProperties")
    linked_content_reference: Optional[LinkedContentReference] = Field(default=None, alias="linkedContentReference")
    margin_bottom: Optional[Dimension] = Field(default=None, alias="marginBottom")
    margin_left: Optional[Dimension] = Field(default=None, alias="marginLeft")
    margin_right: Optional[Dimension] = Field(default=None, alias="marginRight")
    margin_top: Optional[Dimension] = Field(default=None, alias="marginTop")
    size: Optional[Size] = None
    title: Optional[StrictStr] = Field(default=None, description="The title of the embedded object. The `title` and `description` are both combined to display alt text.")
    __properties: ClassVar[List[str]] = ["description", "embeddedDrawingProperties", "embeddedObjectBorder", "imageProperties", "linkedContentReference", "marginBottom", "marginLeft", "marginRight", "marginTop", "size", "title"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of EmbeddedObject from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of embedded_object_border
        if self.embedded_object_border:
            _dict['embeddedObjectBorder'] = self.embedded_object_border.to_dict()
        # override the default output from pydantic by calling `to_dict()` of image_properties
        if self.image_properties:
            _dict['imageProperties'] = self.image_properties.to_dict()
        # override the default output from pydantic by calling `to_dict()` of linked_content_reference
        if self.linked_content_reference:
            _dict['linkedContentReference'] = self.linked_content_reference.to_dict()
        # override the default output from pydantic by calling `to_dict()` of margin_bottom
        if self.margin_bottom:
            _dict['marginBottom'] = self.margin_bottom.to_dict()
        # override the default output from pydantic by calling `to_dict()` of margin_left
        if self.margin_left:
            _dict['marginLeft'] = self.margin_left.to_dict()
        # override the default output from pydantic by calling `to_dict()` of margin_right
        if self.margin_right:
            _dict['marginRight'] = self.margin_right.to_dict()
        # override the default output from pydantic by calling `to_dict()` of margin_top
        if self.margin_top:
            _dict['marginTop'] = self.margin_top.to_dict()
        # override the default output from pydantic by calling `to_dict()` of size
        if self.size:
            _dict['size'] = self.size.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of EmbeddedObject from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "description": obj.get("description"),
            "embeddedDrawingProperties": obj.get("embeddedDrawingProperties"),
            "embeddedObjectBorder": EmbeddedObjectBorder.from_dict(obj["embeddedObjectBorder"]) if obj.get("embeddedObjectBorder") is not None else None,
            "imageProperties": ImageProperties.from_dict(obj["imageProperties"]) if obj.get("imageProperties") is not None else None,
            "linkedContentReference": LinkedContentReference.from_dict(obj["linkedContentReference"]) if obj.get("linkedContentReference") is not None else None,
            "marginBottom": Dimension.from_dict(obj["marginBottom"]) if obj.get("marginBottom") is not None else None,
            "marginLeft": Dimension.from_dict(obj["marginLeft"]) if obj.get("marginLeft") is not None else None,
            "marginRight": Dimension.from_dict(obj["marginRight"]) if obj.get("marginRight") is not None else None,
            "marginTop": Dimension.from_dict(obj["marginTop"]) if obj.get("marginTop") is not None else None,
            "size": Size.from_dict(obj["size"]) if obj.get("size") is not None else None,
            "title": obj.get("title")
        })
        return _obj



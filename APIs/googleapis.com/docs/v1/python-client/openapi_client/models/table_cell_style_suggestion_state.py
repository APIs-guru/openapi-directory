# coding: utf-8

"""
    Google Docs API

    Reads and writes Google Docs documents.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class TableCellStyleSuggestionState(BaseModel):
    """
    A mask that indicates which of the fields on the base TableCellStyle have been changed in this suggestion. For any field set to true, there's a new suggested value.
    """ # noqa: E501
    background_color_suggested: Optional[StrictBool] = Field(default=None, description="Indicates if there was a suggested change to background_color.", alias="backgroundColorSuggested")
    border_bottom_suggested: Optional[StrictBool] = Field(default=None, description="Indicates if there was a suggested change to border_bottom.", alias="borderBottomSuggested")
    border_left_suggested: Optional[StrictBool] = Field(default=None, description="Indicates if there was a suggested change to border_left.", alias="borderLeftSuggested")
    border_right_suggested: Optional[StrictBool] = Field(default=None, description="Indicates if there was a suggested change to border_right.", alias="borderRightSuggested")
    border_top_suggested: Optional[StrictBool] = Field(default=None, description="Indicates if there was a suggested change to border_top.", alias="borderTopSuggested")
    column_span_suggested: Optional[StrictBool] = Field(default=None, description="Indicates if there was a suggested change to column_span.", alias="columnSpanSuggested")
    content_alignment_suggested: Optional[StrictBool] = Field(default=None, description="Indicates if there was a suggested change to content_alignment.", alias="contentAlignmentSuggested")
    padding_bottom_suggested: Optional[StrictBool] = Field(default=None, description="Indicates if there was a suggested change to padding_bottom.", alias="paddingBottomSuggested")
    padding_left_suggested: Optional[StrictBool] = Field(default=None, description="Indicates if there was a suggested change to padding_left.", alias="paddingLeftSuggested")
    padding_right_suggested: Optional[StrictBool] = Field(default=None, description="Indicates if there was a suggested change to padding_right.", alias="paddingRightSuggested")
    padding_top_suggested: Optional[StrictBool] = Field(default=None, description="Indicates if there was a suggested change to padding_top.", alias="paddingTopSuggested")
    row_span_suggested: Optional[StrictBool] = Field(default=None, description="Indicates if there was a suggested change to row_span.", alias="rowSpanSuggested")
    __properties: ClassVar[List[str]] = ["backgroundColorSuggested", "borderBottomSuggested", "borderLeftSuggested", "borderRightSuggested", "borderTopSuggested", "columnSpanSuggested", "contentAlignmentSuggested", "paddingBottomSuggested", "paddingLeftSuggested", "paddingRightSuggested", "paddingTopSuggested", "rowSpanSuggested"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of TableCellStyleSuggestionState from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of TableCellStyleSuggestionState from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "backgroundColorSuggested": obj.get("backgroundColorSuggested"),
            "borderBottomSuggested": obj.get("borderBottomSuggested"),
            "borderLeftSuggested": obj.get("borderLeftSuggested"),
            "borderRightSuggested": obj.get("borderRightSuggested"),
            "borderTopSuggested": obj.get("borderTopSuggested"),
            "columnSpanSuggested": obj.get("columnSpanSuggested"),
            "contentAlignmentSuggested": obj.get("contentAlignmentSuggested"),
            "paddingBottomSuggested": obj.get("paddingBottomSuggested"),
            "paddingLeftSuggested": obj.get("paddingLeftSuggested"),
            "paddingRightSuggested": obj.get("paddingRightSuggested"),
            "paddingTopSuggested": obj.get("paddingTopSuggested"),
            "rowSpanSuggested": obj.get("rowSpanSuggested")
        })
        return _obj



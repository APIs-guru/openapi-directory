# coding: utf-8

"""
    Google Docs API

    Reads and writes Google Docs documents.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.create_footer_request import CreateFooterRequest
from openapi_client.models.create_footnote_request import CreateFootnoteRequest
from openapi_client.models.create_header_request import CreateHeaderRequest
from openapi_client.models.create_named_range_request import CreateNamedRangeRequest
from openapi_client.models.create_paragraph_bullets_request import CreateParagraphBulletsRequest
from openapi_client.models.delete_content_range_request import DeleteContentRangeRequest
from openapi_client.models.delete_footer_request import DeleteFooterRequest
from openapi_client.models.delete_header_request import DeleteHeaderRequest
from openapi_client.models.delete_named_range_request import DeleteNamedRangeRequest
from openapi_client.models.delete_paragraph_bullets_request import DeleteParagraphBulletsRequest
from openapi_client.models.delete_positioned_object_request import DeletePositionedObjectRequest
from openapi_client.models.delete_table_column_request import DeleteTableColumnRequest
from openapi_client.models.delete_table_row_request import DeleteTableRowRequest
from openapi_client.models.insert_inline_image_request import InsertInlineImageRequest
from openapi_client.models.insert_page_break_request import InsertPageBreakRequest
from openapi_client.models.insert_section_break_request import InsertSectionBreakRequest
from openapi_client.models.insert_table_column_request import InsertTableColumnRequest
from openapi_client.models.insert_table_request import InsertTableRequest
from openapi_client.models.insert_table_row_request import InsertTableRowRequest
from openapi_client.models.insert_text_request import InsertTextRequest
from openapi_client.models.merge_table_cells_request import MergeTableCellsRequest
from openapi_client.models.pin_table_header_rows_request import PinTableHeaderRowsRequest
from openapi_client.models.replace_all_text_request import ReplaceAllTextRequest
from openapi_client.models.replace_image_request import ReplaceImageRequest
from openapi_client.models.replace_named_range_content_request import ReplaceNamedRangeContentRequest
from openapi_client.models.unmerge_table_cells_request import UnmergeTableCellsRequest
from openapi_client.models.update_document_style_request import UpdateDocumentStyleRequest
from openapi_client.models.update_paragraph_style_request import UpdateParagraphStyleRequest
from openapi_client.models.update_section_style_request import UpdateSectionStyleRequest
from openapi_client.models.update_table_cell_style_request import UpdateTableCellStyleRequest
from openapi_client.models.update_table_column_properties_request import UpdateTableColumnPropertiesRequest
from openapi_client.models.update_table_row_style_request import UpdateTableRowStyleRequest
from openapi_client.models.update_text_style_request import UpdateTextStyleRequest
from typing import Optional, Set
from typing_extensions import Self

class Request(BaseModel):
    """
    A single update to apply to a document.
    """ # noqa: E501
    create_footer: Optional[CreateFooterRequest] = Field(default=None, alias="createFooter")
    create_footnote: Optional[CreateFootnoteRequest] = Field(default=None, alias="createFootnote")
    create_header: Optional[CreateHeaderRequest] = Field(default=None, alias="createHeader")
    create_named_range: Optional[CreateNamedRangeRequest] = Field(default=None, alias="createNamedRange")
    create_paragraph_bullets: Optional[CreateParagraphBulletsRequest] = Field(default=None, alias="createParagraphBullets")
    delete_content_range: Optional[DeleteContentRangeRequest] = Field(default=None, alias="deleteContentRange")
    delete_footer: Optional[DeleteFooterRequest] = Field(default=None, alias="deleteFooter")
    delete_header: Optional[DeleteHeaderRequest] = Field(default=None, alias="deleteHeader")
    delete_named_range: Optional[DeleteNamedRangeRequest] = Field(default=None, alias="deleteNamedRange")
    delete_paragraph_bullets: Optional[DeleteParagraphBulletsRequest] = Field(default=None, alias="deleteParagraphBullets")
    delete_positioned_object: Optional[DeletePositionedObjectRequest] = Field(default=None, alias="deletePositionedObject")
    delete_table_column: Optional[DeleteTableColumnRequest] = Field(default=None, alias="deleteTableColumn")
    delete_table_row: Optional[DeleteTableRowRequest] = Field(default=None, alias="deleteTableRow")
    insert_inline_image: Optional[InsertInlineImageRequest] = Field(default=None, alias="insertInlineImage")
    insert_page_break: Optional[InsertPageBreakRequest] = Field(default=None, alias="insertPageBreak")
    insert_section_break: Optional[InsertSectionBreakRequest] = Field(default=None, alias="insertSectionBreak")
    insert_table: Optional[InsertTableRequest] = Field(default=None, alias="insertTable")
    insert_table_column: Optional[InsertTableColumnRequest] = Field(default=None, alias="insertTableColumn")
    insert_table_row: Optional[InsertTableRowRequest] = Field(default=None, alias="insertTableRow")
    insert_text: Optional[InsertTextRequest] = Field(default=None, alias="insertText")
    merge_table_cells: Optional[MergeTableCellsRequest] = Field(default=None, alias="mergeTableCells")
    pin_table_header_rows: Optional[PinTableHeaderRowsRequest] = Field(default=None, alias="pinTableHeaderRows")
    replace_all_text: Optional[ReplaceAllTextRequest] = Field(default=None, alias="replaceAllText")
    replace_image: Optional[ReplaceImageRequest] = Field(default=None, alias="replaceImage")
    replace_named_range_content: Optional[ReplaceNamedRangeContentRequest] = Field(default=None, alias="replaceNamedRangeContent")
    unmerge_table_cells: Optional[UnmergeTableCellsRequest] = Field(default=None, alias="unmergeTableCells")
    update_document_style: Optional[UpdateDocumentStyleRequest] = Field(default=None, alias="updateDocumentStyle")
    update_paragraph_style: Optional[UpdateParagraphStyleRequest] = Field(default=None, alias="updateParagraphStyle")
    update_section_style: Optional[UpdateSectionStyleRequest] = Field(default=None, alias="updateSectionStyle")
    update_table_cell_style: Optional[UpdateTableCellStyleRequest] = Field(default=None, alias="updateTableCellStyle")
    update_table_column_properties: Optional[UpdateTableColumnPropertiesRequest] = Field(default=None, alias="updateTableColumnProperties")
    update_table_row_style: Optional[UpdateTableRowStyleRequest] = Field(default=None, alias="updateTableRowStyle")
    update_text_style: Optional[UpdateTextStyleRequest] = Field(default=None, alias="updateTextStyle")
    __properties: ClassVar[List[str]] = ["createFooter", "createFootnote", "createHeader", "createNamedRange", "createParagraphBullets", "deleteContentRange", "deleteFooter", "deleteHeader", "deleteNamedRange", "deleteParagraphBullets", "deletePositionedObject", "deleteTableColumn", "deleteTableRow", "insertInlineImage", "insertPageBreak", "insertSectionBreak", "insertTable", "insertTableColumn", "insertTableRow", "insertText", "mergeTableCells", "pinTableHeaderRows", "replaceAllText", "replaceImage", "replaceNamedRangeContent", "unmergeTableCells", "updateDocumentStyle", "updateParagraphStyle", "updateSectionStyle", "updateTableCellStyle", "updateTableColumnProperties", "updateTableRowStyle", "updateTextStyle"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Request from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of create_footer
        if self.create_footer:
            _dict['createFooter'] = self.create_footer.to_dict()
        # override the default output from pydantic by calling `to_dict()` of create_footnote
        if self.create_footnote:
            _dict['createFootnote'] = self.create_footnote.to_dict()
        # override the default output from pydantic by calling `to_dict()` of create_header
        if self.create_header:
            _dict['createHeader'] = self.create_header.to_dict()
        # override the default output from pydantic by calling `to_dict()` of create_named_range
        if self.create_named_range:
            _dict['createNamedRange'] = self.create_named_range.to_dict()
        # override the default output from pydantic by calling `to_dict()` of create_paragraph_bullets
        if self.create_paragraph_bullets:
            _dict['createParagraphBullets'] = self.create_paragraph_bullets.to_dict()
        # override the default output from pydantic by calling `to_dict()` of delete_content_range
        if self.delete_content_range:
            _dict['deleteContentRange'] = self.delete_content_range.to_dict()
        # override the default output from pydantic by calling `to_dict()` of delete_footer
        if self.delete_footer:
            _dict['deleteFooter'] = self.delete_footer.to_dict()
        # override the default output from pydantic by calling `to_dict()` of delete_header
        if self.delete_header:
            _dict['deleteHeader'] = self.delete_header.to_dict()
        # override the default output from pydantic by calling `to_dict()` of delete_named_range
        if self.delete_named_range:
            _dict['deleteNamedRange'] = self.delete_named_range.to_dict()
        # override the default output from pydantic by calling `to_dict()` of delete_paragraph_bullets
        if self.delete_paragraph_bullets:
            _dict['deleteParagraphBullets'] = self.delete_paragraph_bullets.to_dict()
        # override the default output from pydantic by calling `to_dict()` of delete_positioned_object
        if self.delete_positioned_object:
            _dict['deletePositionedObject'] = self.delete_positioned_object.to_dict()
        # override the default output from pydantic by calling `to_dict()` of delete_table_column
        if self.delete_table_column:
            _dict['deleteTableColumn'] = self.delete_table_column.to_dict()
        # override the default output from pydantic by calling `to_dict()` of delete_table_row
        if self.delete_table_row:
            _dict['deleteTableRow'] = self.delete_table_row.to_dict()
        # override the default output from pydantic by calling `to_dict()` of insert_inline_image
        if self.insert_inline_image:
            _dict['insertInlineImage'] = self.insert_inline_image.to_dict()
        # override the default output from pydantic by calling `to_dict()` of insert_page_break
        if self.insert_page_break:
            _dict['insertPageBreak'] = self.insert_page_break.to_dict()
        # override the default output from pydantic by calling `to_dict()` of insert_section_break
        if self.insert_section_break:
            _dict['insertSectionBreak'] = self.insert_section_break.to_dict()
        # override the default output from pydantic by calling `to_dict()` of insert_table
        if self.insert_table:
            _dict['insertTable'] = self.insert_table.to_dict()
        # override the default output from pydantic by calling `to_dict()` of insert_table_column
        if self.insert_table_column:
            _dict['insertTableColumn'] = self.insert_table_column.to_dict()
        # override the default output from pydantic by calling `to_dict()` of insert_table_row
        if self.insert_table_row:
            _dict['insertTableRow'] = self.insert_table_row.to_dict()
        # override the default output from pydantic by calling `to_dict()` of insert_text
        if self.insert_text:
            _dict['insertText'] = self.insert_text.to_dict()
        # override the default output from pydantic by calling `to_dict()` of merge_table_cells
        if self.merge_table_cells:
            _dict['mergeTableCells'] = self.merge_table_cells.to_dict()
        # override the default output from pydantic by calling `to_dict()` of pin_table_header_rows
        if self.pin_table_header_rows:
            _dict['pinTableHeaderRows'] = self.pin_table_header_rows.to_dict()
        # override the default output from pydantic by calling `to_dict()` of replace_all_text
        if self.replace_all_text:
            _dict['replaceAllText'] = self.replace_all_text.to_dict()
        # override the default output from pydantic by calling `to_dict()` of replace_image
        if self.replace_image:
            _dict['replaceImage'] = self.replace_image.to_dict()
        # override the default output from pydantic by calling `to_dict()` of replace_named_range_content
        if self.replace_named_range_content:
            _dict['replaceNamedRangeContent'] = self.replace_named_range_content.to_dict()
        # override the default output from pydantic by calling `to_dict()` of unmerge_table_cells
        if self.unmerge_table_cells:
            _dict['unmergeTableCells'] = self.unmerge_table_cells.to_dict()
        # override the default output from pydantic by calling `to_dict()` of update_document_style
        if self.update_document_style:
            _dict['updateDocumentStyle'] = self.update_document_style.to_dict()
        # override the default output from pydantic by calling `to_dict()` of update_paragraph_style
        if self.update_paragraph_style:
            _dict['updateParagraphStyle'] = self.update_paragraph_style.to_dict()
        # override the default output from pydantic by calling `to_dict()` of update_section_style
        if self.update_section_style:
            _dict['updateSectionStyle'] = self.update_section_style.to_dict()
        # override the default output from pydantic by calling `to_dict()` of update_table_cell_style
        if self.update_table_cell_style:
            _dict['updateTableCellStyle'] = self.update_table_cell_style.to_dict()
        # override the default output from pydantic by calling `to_dict()` of update_table_column_properties
        if self.update_table_column_properties:
            _dict['updateTableColumnProperties'] = self.update_table_column_properties.to_dict()
        # override the default output from pydantic by calling `to_dict()` of update_table_row_style
        if self.update_table_row_style:
            _dict['updateTableRowStyle'] = self.update_table_row_style.to_dict()
        # override the default output from pydantic by calling `to_dict()` of update_text_style
        if self.update_text_style:
            _dict['updateTextStyle'] = self.update_text_style.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Request from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "createFooter": CreateFooterRequest.from_dict(obj["createFooter"]) if obj.get("createFooter") is not None else None,
            "createFootnote": CreateFootnoteRequest.from_dict(obj["createFootnote"]) if obj.get("createFootnote") is not None else None,
            "createHeader": CreateHeaderRequest.from_dict(obj["createHeader"]) if obj.get("createHeader") is not None else None,
            "createNamedRange": CreateNamedRangeRequest.from_dict(obj["createNamedRange"]) if obj.get("createNamedRange") is not None else None,
            "createParagraphBullets": CreateParagraphBulletsRequest.from_dict(obj["createParagraphBullets"]) if obj.get("createParagraphBullets") is not None else None,
            "deleteContentRange": DeleteContentRangeRequest.from_dict(obj["deleteContentRange"]) if obj.get("deleteContentRange") is not None else None,
            "deleteFooter": DeleteFooterRequest.from_dict(obj["deleteFooter"]) if obj.get("deleteFooter") is not None else None,
            "deleteHeader": DeleteHeaderRequest.from_dict(obj["deleteHeader"]) if obj.get("deleteHeader") is not None else None,
            "deleteNamedRange": DeleteNamedRangeRequest.from_dict(obj["deleteNamedRange"]) if obj.get("deleteNamedRange") is not None else None,
            "deleteParagraphBullets": DeleteParagraphBulletsRequest.from_dict(obj["deleteParagraphBullets"]) if obj.get("deleteParagraphBullets") is not None else None,
            "deletePositionedObject": DeletePositionedObjectRequest.from_dict(obj["deletePositionedObject"]) if obj.get("deletePositionedObject") is not None else None,
            "deleteTableColumn": DeleteTableColumnRequest.from_dict(obj["deleteTableColumn"]) if obj.get("deleteTableColumn") is not None else None,
            "deleteTableRow": DeleteTableRowRequest.from_dict(obj["deleteTableRow"]) if obj.get("deleteTableRow") is not None else None,
            "insertInlineImage": InsertInlineImageRequest.from_dict(obj["insertInlineImage"]) if obj.get("insertInlineImage") is not None else None,
            "insertPageBreak": InsertPageBreakRequest.from_dict(obj["insertPageBreak"]) if obj.get("insertPageBreak") is not None else None,
            "insertSectionBreak": InsertSectionBreakRequest.from_dict(obj["insertSectionBreak"]) if obj.get("insertSectionBreak") is not None else None,
            "insertTable": InsertTableRequest.from_dict(obj["insertTable"]) if obj.get("insertTable") is not None else None,
            "insertTableColumn": InsertTableColumnRequest.from_dict(obj["insertTableColumn"]) if obj.get("insertTableColumn") is not None else None,
            "insertTableRow": InsertTableRowRequest.from_dict(obj["insertTableRow"]) if obj.get("insertTableRow") is not None else None,
            "insertText": InsertTextRequest.from_dict(obj["insertText"]) if obj.get("insertText") is not None else None,
            "mergeTableCells": MergeTableCellsRequest.from_dict(obj["mergeTableCells"]) if obj.get("mergeTableCells") is not None else None,
            "pinTableHeaderRows": PinTableHeaderRowsRequest.from_dict(obj["pinTableHeaderRows"]) if obj.get("pinTableHeaderRows") is not None else None,
            "replaceAllText": ReplaceAllTextRequest.from_dict(obj["replaceAllText"]) if obj.get("replaceAllText") is not None else None,
            "replaceImage": ReplaceImageRequest.from_dict(obj["replaceImage"]) if obj.get("replaceImage") is not None else None,
            "replaceNamedRangeContent": ReplaceNamedRangeContentRequest.from_dict(obj["replaceNamedRangeContent"]) if obj.get("replaceNamedRangeContent") is not None else None,
            "unmergeTableCells": UnmergeTableCellsRequest.from_dict(obj["unmergeTableCells"]) if obj.get("unmergeTableCells") is not None else None,
            "updateDocumentStyle": UpdateDocumentStyleRequest.from_dict(obj["updateDocumentStyle"]) if obj.get("updateDocumentStyle") is not None else None,
            "updateParagraphStyle": UpdateParagraphStyleRequest.from_dict(obj["updateParagraphStyle"]) if obj.get("updateParagraphStyle") is not None else None,
            "updateSectionStyle": UpdateSectionStyleRequest.from_dict(obj["updateSectionStyle"]) if obj.get("updateSectionStyle") is not None else None,
            "updateTableCellStyle": UpdateTableCellStyleRequest.from_dict(obj["updateTableCellStyle"]) if obj.get("updateTableCellStyle") is not None else None,
            "updateTableColumnProperties": UpdateTableColumnPropertiesRequest.from_dict(obj["updateTableColumnProperties"]) if obj.get("updateTableColumnProperties") is not None else None,
            "updateTableRowStyle": UpdateTableRowStyleRequest.from_dict(obj["updateTableRowStyle"]) if obj.get("updateTableRowStyle") is not None else None,
            "updateTextStyle": UpdateTextStyleRequest.from_dict(obj["updateTextStyle"]) if obj.get("updateTextStyle") is not None else None
        })
        return _obj



# coding: utf-8

"""
    Google Docs API

    Reads and writes Google Docs documents.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.create_footer_response import CreateFooterResponse
from openapi_client.models.create_footnote_response import CreateFootnoteResponse
from openapi_client.models.create_header_response import CreateHeaderResponse
from openapi_client.models.create_named_range_response import CreateNamedRangeResponse
from openapi_client.models.insert_inline_image_response import InsertInlineImageResponse
from openapi_client.models.insert_inline_sheets_chart_response import InsertInlineSheetsChartResponse
from openapi_client.models.replace_all_text_response import ReplaceAllTextResponse
from typing import Optional, Set
from typing_extensions import Self

class Response(BaseModel):
    """
    A single response from an update.
    """ # noqa: E501
    create_footer: Optional[CreateFooterResponse] = Field(default=None, alias="createFooter")
    create_footnote: Optional[CreateFootnoteResponse] = Field(default=None, alias="createFootnote")
    create_header: Optional[CreateHeaderResponse] = Field(default=None, alias="createHeader")
    create_named_range: Optional[CreateNamedRangeResponse] = Field(default=None, alias="createNamedRange")
    insert_inline_image: Optional[InsertInlineImageResponse] = Field(default=None, alias="insertInlineImage")
    insert_inline_sheets_chart: Optional[InsertInlineSheetsChartResponse] = Field(default=None, alias="insertInlineSheetsChart")
    replace_all_text: Optional[ReplaceAllTextResponse] = Field(default=None, alias="replaceAllText")
    __properties: ClassVar[List[str]] = ["createFooter", "createFootnote", "createHeader", "createNamedRange", "insertInlineImage", "insertInlineSheetsChart", "replaceAllText"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Response from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of create_footer
        if self.create_footer:
            _dict['createFooter'] = self.create_footer.to_dict()
        # override the default output from pydantic by calling `to_dict()` of create_footnote
        if self.create_footnote:
            _dict['createFootnote'] = self.create_footnote.to_dict()
        # override the default output from pydantic by calling `to_dict()` of create_header
        if self.create_header:
            _dict['createHeader'] = self.create_header.to_dict()
        # override the default output from pydantic by calling `to_dict()` of create_named_range
        if self.create_named_range:
            _dict['createNamedRange'] = self.create_named_range.to_dict()
        # override the default output from pydantic by calling `to_dict()` of insert_inline_image
        if self.insert_inline_image:
            _dict['insertInlineImage'] = self.insert_inline_image.to_dict()
        # override the default output from pydantic by calling `to_dict()` of insert_inline_sheets_chart
        if self.insert_inline_sheets_chart:
            _dict['insertInlineSheetsChart'] = self.insert_inline_sheets_chart.to_dict()
        # override the default output from pydantic by calling `to_dict()` of replace_all_text
        if self.replace_all_text:
            _dict['replaceAllText'] = self.replace_all_text.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Response from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "createFooter": CreateFooterResponse.from_dict(obj["createFooter"]) if obj.get("createFooter") is not None else None,
            "createFootnote": CreateFootnoteResponse.from_dict(obj["createFootnote"]) if obj.get("createFootnote") is not None else None,
            "createHeader": CreateHeaderResponse.from_dict(obj["createHeader"]) if obj.get("createHeader") is not None else None,
            "createNamedRange": CreateNamedRangeResponse.from_dict(obj["createNamedRange"]) if obj.get("createNamedRange") is not None else None,
            "insertInlineImage": InsertInlineImageResponse.from_dict(obj["insertInlineImage"]) if obj.get("insertInlineImage") is not None else None,
            "insertInlineSheetsChart": InsertInlineSheetsChartResponse.from_dict(obj["insertInlineSheetsChart"]) if obj.get("insertInlineSheetsChart") is not None else None,
            "replaceAllText": ReplaceAllTextResponse.from_dict(obj["replaceAllText"]) if obj.get("replaceAllText") is not None else None
        })
        return _obj



# coding: utf-8

"""
    Google Docs API

    Reads and writes Google Docs documents.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.dimension import Dimension
from openapi_client.models.optional_color import OptionalColor
from openapi_client.models.table_cell_border import TableCellBorder
from typing import Optional, Set
from typing_extensions import Self

class TableCellStyle(BaseModel):
    """
    The style of a TableCell. Inherited table cell styles are represented as unset fields in this message. A table cell style can inherit from the table's style.
    """ # noqa: E501
    background_color: Optional[OptionalColor] = Field(default=None, alias="backgroundColor")
    border_bottom: Optional[TableCellBorder] = Field(default=None, alias="borderBottom")
    border_left: Optional[TableCellBorder] = Field(default=None, alias="borderLeft")
    border_right: Optional[TableCellBorder] = Field(default=None, alias="borderRight")
    border_top: Optional[TableCellBorder] = Field(default=None, alias="borderTop")
    column_span: Optional[StrictInt] = Field(default=None, description="The column span of the cell. This property is read-only.", alias="columnSpan")
    content_alignment: Optional[StrictStr] = Field(default=None, description="The alignment of the content in the table cell. The default alignment matches the alignment for newly created table cells in the Docs editor.", alias="contentAlignment")
    padding_bottom: Optional[Dimension] = Field(default=None, alias="paddingBottom")
    padding_left: Optional[Dimension] = Field(default=None, alias="paddingLeft")
    padding_right: Optional[Dimension] = Field(default=None, alias="paddingRight")
    padding_top: Optional[Dimension] = Field(default=None, alias="paddingTop")
    row_span: Optional[StrictInt] = Field(default=None, description="The row span of the cell. This property is read-only.", alias="rowSpan")
    __properties: ClassVar[List[str]] = ["backgroundColor", "borderBottom", "borderLeft", "borderRight", "borderTop", "columnSpan", "contentAlignment", "paddingBottom", "paddingLeft", "paddingRight", "paddingTop", "rowSpan"]

    @field_validator('content_alignment')
    def content_alignment_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['CONTENT_ALIGNMENT_UNSPECIFIED', 'CONTENT_ALIGNMENT_UNSUPPORTED', 'TOP', 'MIDDLE', 'BOTTOM']):
            raise ValueError("must be one of enum values ('CONTENT_ALIGNMENT_UNSPECIFIED', 'CONTENT_ALIGNMENT_UNSUPPORTED', 'TOP', 'MIDDLE', 'BOTTOM')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of TableCellStyle from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of background_color
        if self.background_color:
            _dict['backgroundColor'] = self.background_color.to_dict()
        # override the default output from pydantic by calling `to_dict()` of border_bottom
        if self.border_bottom:
            _dict['borderBottom'] = self.border_bottom.to_dict()
        # override the default output from pydantic by calling `to_dict()` of border_left
        if self.border_left:
            _dict['borderLeft'] = self.border_left.to_dict()
        # override the default output from pydantic by calling `to_dict()` of border_right
        if self.border_right:
            _dict['borderRight'] = self.border_right.to_dict()
        # override the default output from pydantic by calling `to_dict()` of border_top
        if self.border_top:
            _dict['borderTop'] = self.border_top.to_dict()
        # override the default output from pydantic by calling `to_dict()` of padding_bottom
        if self.padding_bottom:
            _dict['paddingBottom'] = self.padding_bottom.to_dict()
        # override the default output from pydantic by calling `to_dict()` of padding_left
        if self.padding_left:
            _dict['paddingLeft'] = self.padding_left.to_dict()
        # override the default output from pydantic by calling `to_dict()` of padding_right
        if self.padding_right:
            _dict['paddingRight'] = self.padding_right.to_dict()
        # override the default output from pydantic by calling `to_dict()` of padding_top
        if self.padding_top:
            _dict['paddingTop'] = self.padding_top.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of TableCellStyle from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "backgroundColor": OptionalColor.from_dict(obj["backgroundColor"]) if obj.get("backgroundColor") is not None else None,
            "borderBottom": TableCellBorder.from_dict(obj["borderBottom"]) if obj.get("borderBottom") is not None else None,
            "borderLeft": TableCellBorder.from_dict(obj["borderLeft"]) if obj.get("borderLeft") is not None else None,
            "borderRight": TableCellBorder.from_dict(obj["borderRight"]) if obj.get("borderRight") is not None else None,
            "borderTop": TableCellBorder.from_dict(obj["borderTop"]) if obj.get("borderTop") is not None else None,
            "columnSpan": obj.get("columnSpan"),
            "contentAlignment": obj.get("contentAlignment"),
            "paddingBottom": Dimension.from_dict(obj["paddingBottom"]) if obj.get("paddingBottom") is not None else None,
            "paddingLeft": Dimension.from_dict(obj["paddingLeft"]) if obj.get("paddingLeft") is not None else None,
            "paddingRight": Dimension.from_dict(obj["paddingRight"]) if obj.get("paddingRight") is not None else None,
            "paddingTop": Dimension.from_dict(obj["paddingTop"]) if obj.get("paddingTop") is not None else None,
            "rowSpan": obj.get("rowSpan")
        })
        return _obj



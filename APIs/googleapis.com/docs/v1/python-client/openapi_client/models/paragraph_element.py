# coding: utf-8

"""
    Google Docs API

    Reads and writes Google Docs documents.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.auto_text import AutoText
from openapi_client.models.column_break import ColumnBreak
from openapi_client.models.equation import Equation
from openapi_client.models.footnote_reference import FootnoteReference
from openapi_client.models.horizontal_rule import HorizontalRule
from openapi_client.models.inline_object_element import InlineObjectElement
from openapi_client.models.page_break import PageBreak
from openapi_client.models.person import Person
from openapi_client.models.rich_link import RichLink
from openapi_client.models.text_run import TextRun
from typing import Optional, Set
from typing_extensions import Self

class ParagraphElement(BaseModel):
    """
    A ParagraphElement describes content within a Paragraph.
    """ # noqa: E501
    auto_text: Optional[AutoText] = Field(default=None, alias="autoText")
    column_break: Optional[ColumnBreak] = Field(default=None, alias="columnBreak")
    end_index: Optional[StrictInt] = Field(default=None, description="The zero-base end index of this paragraph element, exclusive, in UTF-16 code units.", alias="endIndex")
    equation: Optional[Equation] = None
    footnote_reference: Optional[FootnoteReference] = Field(default=None, alias="footnoteReference")
    horizontal_rule: Optional[HorizontalRule] = Field(default=None, alias="horizontalRule")
    inline_object_element: Optional[InlineObjectElement] = Field(default=None, alias="inlineObjectElement")
    page_break: Optional[PageBreak] = Field(default=None, alias="pageBreak")
    person: Optional[Person] = None
    rich_link: Optional[RichLink] = Field(default=None, alias="richLink")
    start_index: Optional[StrictInt] = Field(default=None, description="The zero-based start index of this paragraph element, in UTF-16 code units.", alias="startIndex")
    text_run: Optional[TextRun] = Field(default=None, alias="textRun")
    __properties: ClassVar[List[str]] = ["autoText", "columnBreak", "endIndex", "equation", "footnoteReference", "horizontalRule", "inlineObjectElement", "pageBreak", "person", "richLink", "startIndex", "textRun"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ParagraphElement from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of auto_text
        if self.auto_text:
            _dict['autoText'] = self.auto_text.to_dict()
        # override the default output from pydantic by calling `to_dict()` of column_break
        if self.column_break:
            _dict['columnBreak'] = self.column_break.to_dict()
        # override the default output from pydantic by calling `to_dict()` of equation
        if self.equation:
            _dict['equation'] = self.equation.to_dict()
        # override the default output from pydantic by calling `to_dict()` of footnote_reference
        if self.footnote_reference:
            _dict['footnoteReference'] = self.footnote_reference.to_dict()
        # override the default output from pydantic by calling `to_dict()` of horizontal_rule
        if self.horizontal_rule:
            _dict['horizontalRule'] = self.horizontal_rule.to_dict()
        # override the default output from pydantic by calling `to_dict()` of inline_object_element
        if self.inline_object_element:
            _dict['inlineObjectElement'] = self.inline_object_element.to_dict()
        # override the default output from pydantic by calling `to_dict()` of page_break
        if self.page_break:
            _dict['pageBreak'] = self.page_break.to_dict()
        # override the default output from pydantic by calling `to_dict()` of person
        if self.person:
            _dict['person'] = self.person.to_dict()
        # override the default output from pydantic by calling `to_dict()` of rich_link
        if self.rich_link:
            _dict['richLink'] = self.rich_link.to_dict()
        # override the default output from pydantic by calling `to_dict()` of text_run
        if self.text_run:
            _dict['textRun'] = self.text_run.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ParagraphElement from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "autoText": AutoText.from_dict(obj["autoText"]) if obj.get("autoText") is not None else None,
            "columnBreak": ColumnBreak.from_dict(obj["columnBreak"]) if obj.get("columnBreak") is not None else None,
            "endIndex": obj.get("endIndex"),
            "equation": Equation.from_dict(obj["equation"]) if obj.get("equation") is not None else None,
            "footnoteReference": FootnoteReference.from_dict(obj["footnoteReference"]) if obj.get("footnoteReference") is not None else None,
            "horizontalRule": HorizontalRule.from_dict(obj["horizontalRule"]) if obj.get("horizontalRule") is not None else None,
            "inlineObjectElement": InlineObjectElement.from_dict(obj["inlineObjectElement"]) if obj.get("inlineObjectElement") is not None else None,
            "pageBreak": PageBreak.from_dict(obj["pageBreak"]) if obj.get("pageBreak") is not None else None,
            "person": Person.from_dict(obj["person"]) if obj.get("person") is not None else None,
            "richLink": RichLink.from_dict(obj["richLink"]) if obj.get("richLink") is not None else None,
            "startIndex": obj.get("startIndex"),
            "textRun": TextRun.from_dict(obj["textRun"]) if obj.get("textRun") is not None else None
        })
        return _obj



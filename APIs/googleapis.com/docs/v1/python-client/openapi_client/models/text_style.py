# coding: utf-8

"""
    Google Docs API

    Reads and writes Google Docs documents.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.dimension import Dimension
from openapi_client.models.link import Link
from openapi_client.models.optional_color import OptionalColor
from openapi_client.models.weighted_font_family import WeightedFontFamily
from typing import Optional, Set
from typing_extensions import Self

class TextStyle(BaseModel):
    """
    Represents the styling that can be applied to text. Inherited text styles are represented as unset fields in this message. A text style's parent depends on where the text style is defined: * The TextStyle of text in a Paragraph inherits from the paragraph's corresponding named style type. * The TextStyle on a named style inherits from the normal text named style. * The TextStyle of the normal text named style inherits from the default text style in the Docs editor. * The TextStyle on a Paragraph element that's contained in a table may inherit its text style from the table style. If the text style does not inherit from a parent, unsetting fields will revert the style to a value matching the defaults in the Docs editor.
    """ # noqa: E501
    background_color: Optional[OptionalColor] = Field(default=None, alias="backgroundColor")
    baseline_offset: Optional[StrictStr] = Field(default=None, description="The text's vertical offset from its normal position. Text with `SUPERSCRIPT` or `SUBSCRIPT` baseline offsets is automatically rendered in a smaller font size, computed based on the `font_size` field. Changes in this field don't affect the `font_size`.", alias="baselineOffset")
    bold: Optional[StrictBool] = Field(default=None, description="Whether or not the text is rendered as bold.")
    font_size: Optional[Dimension] = Field(default=None, alias="fontSize")
    foreground_color: Optional[OptionalColor] = Field(default=None, alias="foregroundColor")
    italic: Optional[StrictBool] = Field(default=None, description="Whether or not the text is italicized.")
    link: Optional[Link] = None
    small_caps: Optional[StrictBool] = Field(default=None, description="Whether or not the text is in small capital letters.", alias="smallCaps")
    strikethrough: Optional[StrictBool] = Field(default=None, description="Whether or not the text is struck through.")
    underline: Optional[StrictBool] = Field(default=None, description="Whether or not the text is underlined.")
    weighted_font_family: Optional[WeightedFontFamily] = Field(default=None, alias="weightedFontFamily")
    __properties: ClassVar[List[str]] = ["backgroundColor", "baselineOffset", "bold", "fontSize", "foregroundColor", "italic", "link", "smallCaps", "strikethrough", "underline", "weightedFontFamily"]

    @field_validator('baseline_offset')
    def baseline_offset_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['BASELINE_OFFSET_UNSPECIFIED', 'NONE', 'SUPERSCRIPT', 'SUBSCRIPT']):
            raise ValueError("must be one of enum values ('BASELINE_OFFSET_UNSPECIFIED', 'NONE', 'SUPERSCRIPT', 'SUBSCRIPT')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of TextStyle from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of background_color
        if self.background_color:
            _dict['backgroundColor'] = self.background_color.to_dict()
        # override the default output from pydantic by calling `to_dict()` of font_size
        if self.font_size:
            _dict['fontSize'] = self.font_size.to_dict()
        # override the default output from pydantic by calling `to_dict()` of foreground_color
        if self.foreground_color:
            _dict['foregroundColor'] = self.foreground_color.to_dict()
        # override the default output from pydantic by calling `to_dict()` of link
        if self.link:
            _dict['link'] = self.link.to_dict()
        # override the default output from pydantic by calling `to_dict()` of weighted_font_family
        if self.weighted_font_family:
            _dict['weightedFontFamily'] = self.weighted_font_family.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of TextStyle from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "backgroundColor": OptionalColor.from_dict(obj["backgroundColor"]) if obj.get("backgroundColor") is not None else None,
            "baselineOffset": obj.get("baselineOffset"),
            "bold": obj.get("bold"),
            "fontSize": Dimension.from_dict(obj["fontSize"]) if obj.get("fontSize") is not None else None,
            "foregroundColor": OptionalColor.from_dict(obj["foregroundColor"]) if obj.get("foregroundColor") is not None else None,
            "italic": obj.get("italic"),
            "link": Link.from_dict(obj["link"]) if obj.get("link") is not None else None,
            "smallCaps": obj.get("smallCaps"),
            "strikethrough": obj.get("strikethrough"),
            "underline": obj.get("underline"),
            "weightedFontFamily": WeightedFontFamily.from_dict(obj["weightedFontFamily"]) if obj.get("weightedFontFamily") is not None else None
        })
        return _obj



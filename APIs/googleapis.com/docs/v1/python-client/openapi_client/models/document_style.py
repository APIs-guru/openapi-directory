# coding: utf-8

"""
    Google Docs API

    Reads and writes Google Docs documents.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.background import Background
from openapi_client.models.dimension import Dimension
from openapi_client.models.size import Size
from typing import Optional, Set
from typing_extensions import Self

class DocumentStyle(BaseModel):
    """
    The style of the document.
    """ # noqa: E501
    background: Optional[Background] = None
    default_footer_id: Optional[StrictStr] = Field(default=None, description="The ID of the default footer. If not set, there's no default footer. This property is read-only.", alias="defaultFooterId")
    default_header_id: Optional[StrictStr] = Field(default=None, description="The ID of the default header. If not set, there's no default header. This property is read-only.", alias="defaultHeaderId")
    even_page_footer_id: Optional[StrictStr] = Field(default=None, description="The ID of the footer used only for even pages. The value of use_even_page_header_footer determines whether to use the default_footer_id or this value for the footer on even pages. If not set, there's no even page footer. This property is read-only.", alias="evenPageFooterId")
    even_page_header_id: Optional[StrictStr] = Field(default=None, description="The ID of the header used only for even pages. The value of use_even_page_header_footer determines whether to use the default_header_id or this value for the header on even pages. If not set, there's no even page header. This property is read-only.", alias="evenPageHeaderId")
    first_page_footer_id: Optional[StrictStr] = Field(default=None, description="The ID of the footer used only for the first page. If not set then a unique footer for the first page does not exist. The value of use_first_page_header_footer determines whether to use the default_footer_id or this value for the footer on the first page. If not set, there's no first page footer. This property is read-only.", alias="firstPageFooterId")
    first_page_header_id: Optional[StrictStr] = Field(default=None, description="The ID of the header used only for the first page. If not set then a unique header for the first page does not exist. The value of use_first_page_header_footer determines whether to use the default_header_id or this value for the header on the first page. If not set, there's no first page header. This property is read-only.", alias="firstPageHeaderId")
    flip_page_orientation: Optional[StrictBool] = Field(default=None, description="Optional. Indicates whether to flip the dimensions of the page_size, which allows changing the page orientation between portrait and landscape.", alias="flipPageOrientation")
    margin_bottom: Optional[Dimension] = Field(default=None, alias="marginBottom")
    margin_footer: Optional[Dimension] = Field(default=None, alias="marginFooter")
    margin_header: Optional[Dimension] = Field(default=None, alias="marginHeader")
    margin_left: Optional[Dimension] = Field(default=None, alias="marginLeft")
    margin_right: Optional[Dimension] = Field(default=None, alias="marginRight")
    margin_top: Optional[Dimension] = Field(default=None, alias="marginTop")
    page_number_start: Optional[StrictInt] = Field(default=None, description="The page number from which to start counting the number of pages.", alias="pageNumberStart")
    page_size: Optional[Size] = Field(default=None, alias="pageSize")
    use_custom_header_footer_margins: Optional[StrictBool] = Field(default=None, description="Indicates whether DocumentStyle margin_header, SectionStyle margin_header and DocumentStyle margin_footer, SectionStyle margin_footer are respected. When false, the default values in the Docs editor for header and footer margin are used. This property is read-only.", alias="useCustomHeaderFooterMargins")
    use_even_page_header_footer: Optional[StrictBool] = Field(default=None, description="Indicates whether to use the even page header / footer IDs for the even pages.", alias="useEvenPageHeaderFooter")
    use_first_page_header_footer: Optional[StrictBool] = Field(default=None, description="Indicates whether to use the first page header / footer IDs for the first page.", alias="useFirstPageHeaderFooter")
    __properties: ClassVar[List[str]] = ["background", "defaultFooterId", "defaultHeaderId", "evenPageFooterId", "evenPageHeaderId", "firstPageFooterId", "firstPageHeaderId", "flipPageOrientation", "marginBottom", "marginFooter", "marginHeader", "marginLeft", "marginRight", "marginTop", "pageNumberStart", "pageSize", "useCustomHeaderFooterMargins", "useEvenPageHeaderFooter", "useFirstPageHeaderFooter"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DocumentStyle from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of background
        if self.background:
            _dict['background'] = self.background.to_dict()
        # override the default output from pydantic by calling `to_dict()` of margin_bottom
        if self.margin_bottom:
            _dict['marginBottom'] = self.margin_bottom.to_dict()
        # override the default output from pydantic by calling `to_dict()` of margin_footer
        if self.margin_footer:
            _dict['marginFooter'] = self.margin_footer.to_dict()
        # override the default output from pydantic by calling `to_dict()` of margin_header
        if self.margin_header:
            _dict['marginHeader'] = self.margin_header.to_dict()
        # override the default output from pydantic by calling `to_dict()` of margin_left
        if self.margin_left:
            _dict['marginLeft'] = self.margin_left.to_dict()
        # override the default output from pydantic by calling `to_dict()` of margin_right
        if self.margin_right:
            _dict['marginRight'] = self.margin_right.to_dict()
        # override the default output from pydantic by calling `to_dict()` of margin_top
        if self.margin_top:
            _dict['marginTop'] = self.margin_top.to_dict()
        # override the default output from pydantic by calling `to_dict()` of page_size
        if self.page_size:
            _dict['pageSize'] = self.page_size.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DocumentStyle from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "background": Background.from_dict(obj["background"]) if obj.get("background") is not None else None,
            "defaultFooterId": obj.get("defaultFooterId"),
            "defaultHeaderId": obj.get("defaultHeaderId"),
            "evenPageFooterId": obj.get("evenPageFooterId"),
            "evenPageHeaderId": obj.get("evenPageHeaderId"),
            "firstPageFooterId": obj.get("firstPageFooterId"),
            "firstPageHeaderId": obj.get("firstPageHeaderId"),
            "flipPageOrientation": obj.get("flipPageOrientation"),
            "marginBottom": Dimension.from_dict(obj["marginBottom"]) if obj.get("marginBottom") is not None else None,
            "marginFooter": Dimension.from_dict(obj["marginFooter"]) if obj.get("marginFooter") is not None else None,
            "marginHeader": Dimension.from_dict(obj["marginHeader"]) if obj.get("marginHeader") is not None else None,
            "marginLeft": Dimension.from_dict(obj["marginLeft"]) if obj.get("marginLeft") is not None else None,
            "marginRight": Dimension.from_dict(obj["marginRight"]) if obj.get("marginRight") is not None else None,
            "marginTop": Dimension.from_dict(obj["marginTop"]) if obj.get("marginTop") is not None else None,
            "pageNumberStart": obj.get("pageNumberStart"),
            "pageSize": Size.from_dict(obj["pageSize"]) if obj.get("pageSize") is not None else None,
            "useCustomHeaderFooterMargins": obj.get("useCustomHeaderFooterMargins"),
            "useEvenPageHeaderFooter": obj.get("useEvenPageHeaderFooter"),
            "useFirstPageHeaderFooter": obj.get("useFirstPageHeaderFooter")
        })
        return _obj



# coding: utf-8

"""
    Google Docs API

    Reads and writes Google Docs documents.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from openapi_client.models.crop_properties import CropProperties
from typing import Optional, Set
from typing_extensions import Self

class ImageProperties(BaseModel):
    """
    The properties of an image.
    """ # noqa: E501
    angle: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The clockwise rotation angle of the image, in radians.")
    brightness: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The brightness effect of the image. The value should be in the interval [-1.0, 1.0], where 0 means no effect.")
    content_uri: Optional[StrictStr] = Field(default=None, description="A URI to the image with a default lifetime of 30 minutes. This URI is tagged with the account of the requester. Anyone with the URI effectively accesses the image as the original requester. Access to the image may be lost if the document's sharing settings change.", alias="contentUri")
    contrast: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The contrast effect of the image. The value should be in the interval [-1.0, 1.0], where 0 means no effect.")
    crop_properties: Optional[CropProperties] = Field(default=None, alias="cropProperties")
    source_uri: Optional[StrictStr] = Field(default=None, description="The source URI is the URI used to insert the image. The source URI can be empty.", alias="sourceUri")
    transparency: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The transparency effect of the image. The value should be in the interval [0.0, 1.0], where 0 means no effect and 1 means transparent.")
    __properties: ClassVar[List[str]] = ["angle", "brightness", "contentUri", "contrast", "cropProperties", "sourceUri", "transparency"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ImageProperties from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of crop_properties
        if self.crop_properties:
            _dict['cropProperties'] = self.crop_properties.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ImageProperties from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "angle": obj.get("angle"),
            "brightness": obj.get("brightness"),
            "contentUri": obj.get("contentUri"),
            "contrast": obj.get("contrast"),
            "cropProperties": CropProperties.from_dict(obj["cropProperties"]) if obj.get("cropProperties") is not None else None,
            "sourceUri": obj.get("sourceUri"),
            "transparency": obj.get("transparency")
        })
        return _obj



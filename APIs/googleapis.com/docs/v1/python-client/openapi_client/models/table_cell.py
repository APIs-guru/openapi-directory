# coding: utf-8

"""
    Google Docs API

    Reads and writes Google Docs documents.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.suggested_table_cell_style import SuggestedTableCellStyle
from openapi_client.models.table_cell_style import TableCellStyle
from typing import Optional, Set
from typing_extensions import Self

class TableCell(BaseModel):
    """
    The contents and style of a cell in a Table.
    """ # noqa: E501
    content: Optional[List[StructuralElement]] = Field(default=None, description="The content of the cell.")
    end_index: Optional[StrictInt] = Field(default=None, description="The zero-based end index of this cell, exclusive, in UTF-16 code units.", alias="endIndex")
    start_index: Optional[StrictInt] = Field(default=None, description="The zero-based start index of this cell, in UTF-16 code units.", alias="startIndex")
    suggested_deletion_ids: Optional[List[StrictStr]] = Field(default=None, description="The suggested deletion IDs. If empty, then there are no suggested deletions of this content.", alias="suggestedDeletionIds")
    suggested_insertion_ids: Optional[List[StrictStr]] = Field(default=None, description="The suggested insertion IDs. A TableCell may have multiple insertion IDs if it's a nested suggested change. If empty, then this is not a suggested insertion.", alias="suggestedInsertionIds")
    suggested_table_cell_style_changes: Optional[Dict[str, SuggestedTableCellStyle]] = Field(default=None, description="The suggested changes to the table cell style, keyed by suggestion ID.", alias="suggestedTableCellStyleChanges")
    table_cell_style: Optional[TableCellStyle] = Field(default=None, alias="tableCellStyle")
    __properties: ClassVar[List[str]] = ["content", "endIndex", "startIndex", "suggestedDeletionIds", "suggestedInsertionIds", "suggestedTableCellStyleChanges", "tableCellStyle"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of TableCell from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in content (list)
        _items = []
        if self.content:
            for _item_content in self.content:
                if _item_content:
                    _items.append(_item_content.to_dict())
            _dict['content'] = _items
        # override the default output from pydantic by calling `to_dict()` of each value in suggested_table_cell_style_changes (dict)
        _field_dict = {}
        if self.suggested_table_cell_style_changes:
            for _key_suggested_table_cell_style_changes in self.suggested_table_cell_style_changes:
                if self.suggested_table_cell_style_changes[_key_suggested_table_cell_style_changes]:
                    _field_dict[_key_suggested_table_cell_style_changes] = self.suggested_table_cell_style_changes[_key_suggested_table_cell_style_changes].to_dict()
            _dict['suggestedTableCellStyleChanges'] = _field_dict
        # override the default output from pydantic by calling `to_dict()` of table_cell_style
        if self.table_cell_style:
            _dict['tableCellStyle'] = self.table_cell_style.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of TableCell from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "content": [StructuralElement.from_dict(_item) for _item in obj["content"]] if obj.get("content") is not None else None,
            "endIndex": obj.get("endIndex"),
            "startIndex": obj.get("startIndex"),
            "suggestedDeletionIds": obj.get("suggestedDeletionIds"),
            "suggestedInsertionIds": obj.get("suggestedInsertionIds"),
            "suggestedTableCellStyleChanges": dict(
                (_k, SuggestedTableCellStyle.from_dict(_v))
                for _k, _v in obj["suggestedTableCellStyleChanges"].items()
            )
            if obj.get("suggestedTableCellStyleChanges") is not None
            else None,
            "tableCellStyle": TableCellStyle.from_dict(obj["tableCellStyle"]) if obj.get("tableCellStyle") is not None else None
        })
        return _obj

from openapi_client.models.structural_element import StructuralElement
# TODO: Rewrite to not use raise_errors
TableCell.model_rebuild(raise_errors=False)


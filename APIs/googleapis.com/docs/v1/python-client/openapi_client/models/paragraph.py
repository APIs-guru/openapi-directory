# coding: utf-8

"""
    Google Docs API

    Reads and writes Google Docs documents.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.bullet import Bullet
from openapi_client.models.object_references import ObjectReferences
from openapi_client.models.paragraph_element import ParagraphElement
from openapi_client.models.paragraph_style import ParagraphStyle
from openapi_client.models.suggested_bullet import SuggestedBullet
from openapi_client.models.suggested_paragraph_style import SuggestedParagraphStyle
from typing import Optional, Set
from typing_extensions import Self

class Paragraph(BaseModel):
    """
    A StructuralElement representing a paragraph. A paragraph is a range of content that's terminated with a newline character.
    """ # noqa: E501
    bullet: Optional[Bullet] = None
    elements: Optional[List[ParagraphElement]] = Field(default=None, description="The content of the paragraph, broken down into its component parts.")
    paragraph_style: Optional[ParagraphStyle] = Field(default=None, alias="paragraphStyle")
    positioned_object_ids: Optional[List[StrictStr]] = Field(default=None, description="The IDs of the positioned objects tethered to this paragraph.", alias="positionedObjectIds")
    suggested_bullet_changes: Optional[Dict[str, SuggestedBullet]] = Field(default=None, description="The suggested changes to this paragraph's bullet.", alias="suggestedBulletChanges")
    suggested_paragraph_style_changes: Optional[Dict[str, SuggestedParagraphStyle]] = Field(default=None, description="The suggested paragraph style changes to this paragraph, keyed by suggestion ID.", alias="suggestedParagraphStyleChanges")
    suggested_positioned_object_ids: Optional[Dict[str, ObjectReferences]] = Field(default=None, description="The IDs of the positioned objects suggested to be attached to this paragraph, keyed by suggestion ID.", alias="suggestedPositionedObjectIds")
    __properties: ClassVar[List[str]] = ["bullet", "elements", "paragraphStyle", "positionedObjectIds", "suggestedBulletChanges", "suggestedParagraphStyleChanges", "suggestedPositionedObjectIds"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Paragraph from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of bullet
        if self.bullet:
            _dict['bullet'] = self.bullet.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in elements (list)
        _items = []
        if self.elements:
            for _item_elements in self.elements:
                if _item_elements:
                    _items.append(_item_elements.to_dict())
            _dict['elements'] = _items
        # override the default output from pydantic by calling `to_dict()` of paragraph_style
        if self.paragraph_style:
            _dict['paragraphStyle'] = self.paragraph_style.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each value in suggested_bullet_changes (dict)
        _field_dict = {}
        if self.suggested_bullet_changes:
            for _key_suggested_bullet_changes in self.suggested_bullet_changes:
                if self.suggested_bullet_changes[_key_suggested_bullet_changes]:
                    _field_dict[_key_suggested_bullet_changes] = self.suggested_bullet_changes[_key_suggested_bullet_changes].to_dict()
            _dict['suggestedBulletChanges'] = _field_dict
        # override the default output from pydantic by calling `to_dict()` of each value in suggested_paragraph_style_changes (dict)
        _field_dict = {}
        if self.suggested_paragraph_style_changes:
            for _key_suggested_paragraph_style_changes in self.suggested_paragraph_style_changes:
                if self.suggested_paragraph_style_changes[_key_suggested_paragraph_style_changes]:
                    _field_dict[_key_suggested_paragraph_style_changes] = self.suggested_paragraph_style_changes[_key_suggested_paragraph_style_changes].to_dict()
            _dict['suggestedParagraphStyleChanges'] = _field_dict
        # override the default output from pydantic by calling `to_dict()` of each value in suggested_positioned_object_ids (dict)
        _field_dict = {}
        if self.suggested_positioned_object_ids:
            for _key_suggested_positioned_object_ids in self.suggested_positioned_object_ids:
                if self.suggested_positioned_object_ids[_key_suggested_positioned_object_ids]:
                    _field_dict[_key_suggested_positioned_object_ids] = self.suggested_positioned_object_ids[_key_suggested_positioned_object_ids].to_dict()
            _dict['suggestedPositionedObjectIds'] = _field_dict
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Paragraph from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "bullet": Bullet.from_dict(obj["bullet"]) if obj.get("bullet") is not None else None,
            "elements": [ParagraphElement.from_dict(_item) for _item in obj["elements"]] if obj.get("elements") is not None else None,
            "paragraphStyle": ParagraphStyle.from_dict(obj["paragraphStyle"]) if obj.get("paragraphStyle") is not None else None,
            "positionedObjectIds": obj.get("positionedObjectIds"),
            "suggestedBulletChanges": dict(
                (_k, SuggestedBullet.from_dict(_v))
                for _k, _v in obj["suggestedBulletChanges"].items()
            )
            if obj.get("suggestedBulletChanges") is not None
            else None,
            "suggestedParagraphStyleChanges": dict(
                (_k, SuggestedParagraphStyle.from_dict(_v))
                for _k, _v in obj["suggestedParagraphStyleChanges"].items()
            )
            if obj.get("suggestedParagraphStyleChanges") is not None
            else None,
            "suggestedPositionedObjectIds": dict(
                (_k, ObjectReferences.from_dict(_v))
                for _k, _v in obj["suggestedPositionedObjectIds"].items()
            )
            if obj.get("suggestedPositionedObjectIds") is not None
            else None
        })
        return _obj



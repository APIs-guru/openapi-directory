# coding: utf-8

"""
    Google Docs API

    Reads and writes Google Docs documents.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.dimension import Dimension
from openapi_client.models.text_style import TextStyle
from typing import Optional, Set
from typing_extensions import Self

class NestingLevel(BaseModel):
    """
    Contains properties describing the look and feel of a list bullet at a given level of nesting.
    """ # noqa: E501
    bullet_alignment: Optional[StrictStr] = Field(default=None, description="The alignment of the bullet within the space allotted for rendering the bullet.", alias="bulletAlignment")
    glyph_format: Optional[StrictStr] = Field(default=None, description="The format string used by bullets at this level of nesting. The glyph format contains one or more placeholders, and these placeholders are replaced with the appropriate values depending on the glyph_type or glyph_symbol. The placeholders follow the pattern `%[nesting_level]`. Furthermore, placeholders can have prefixes and suffixes. Thus, the glyph format follows the pattern `%[nesting_level]`. Note that the prefix and suffix are optional and can be arbitrary strings. For example, the glyph format `%0.` indicates that the rendered glyph will replace the placeholder with the corresponding glyph for nesting level 0 followed by a period as the suffix. So a list with a glyph type of UPPER_ALPHA and glyph format `%0.` at nesting level 0 will result in a list with rendered glyphs `A.` `B.` `C.` The glyph format can contain placeholders for the current nesting level as well as placeholders for parent nesting levels. For example, a list can have a glyph format of `%0.` at nesting level 0 and a glyph format of `%0.%1.` at nesting level 1. Assuming both nesting levels have DECIMAL glyph types, this would result in a list with rendered glyphs `1.` `2.` ` 2.1.` ` 2.2.` `3.` For nesting levels that are ordered, the string that replaces a placeholder in the glyph format for a particular paragraph depends on the paragraph's order within the list.", alias="glyphFormat")
    glyph_symbol: Optional[StrictStr] = Field(default=None, description="A custom glyph symbol used by bullets when paragraphs at this level of nesting are unordered. The glyph symbol replaces placeholders within the glyph_format. For example, if the glyph_symbol is the solid circle corresponding to Unicode U+25cf code point and the glyph_format is `%0`, the rendered glyph would be the solid circle.", alias="glyphSymbol")
    glyph_type: Optional[StrictStr] = Field(default=None, description="The type of glyph used by bullets when paragraphs at this level of nesting are ordered. The glyph type determines the type of glyph used to replace placeholders within the glyph_format when paragraphs at this level of nesting are ordered. For example, if the nesting level is 0, the glyph_format is `%0.` and the glyph type is DECIMAL, then the rendered glyph would replace the placeholder `%0` in the glyph format with a number corresponding to list item's order within the list.", alias="glyphType")
    indent_first_line: Optional[Dimension] = Field(default=None, alias="indentFirstLine")
    indent_start: Optional[Dimension] = Field(default=None, alias="indentStart")
    start_number: Optional[StrictInt] = Field(default=None, description="The number of the first list item at this nesting level. A value of 0 is treated as a value of 1 for lettered lists and Roman numeral lists. For values of both 0 and 1, lettered and Roman numeral lists will begin at `a` and `i` respectively. This value is ignored for nesting levels with unordered glyphs.", alias="startNumber")
    text_style: Optional[TextStyle] = Field(default=None, alias="textStyle")
    __properties: ClassVar[List[str]] = ["bulletAlignment", "glyphFormat", "glyphSymbol", "glyphType", "indentFirstLine", "indentStart", "startNumber", "textStyle"]

    @field_validator('bullet_alignment')
    def bullet_alignment_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['BULLET_ALIGNMENT_UNSPECIFIED', 'START', 'CENTER', 'END']):
            raise ValueError("must be one of enum values ('BULLET_ALIGNMENT_UNSPECIFIED', 'START', 'CENTER', 'END')")
        return value

    @field_validator('glyph_type')
    def glyph_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['GLYPH_TYPE_UNSPECIFIED', 'NONE', 'DECIMAL', 'ZERO_DECIMAL', 'UPPER_ALPHA', 'ALPHA', 'UPPER_ROMAN', 'ROMAN']):
            raise ValueError("must be one of enum values ('GLYPH_TYPE_UNSPECIFIED', 'NONE', 'DECIMAL', 'ZERO_DECIMAL', 'UPPER_ALPHA', 'ALPHA', 'UPPER_ROMAN', 'ROMAN')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of NestingLevel from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of indent_first_line
        if self.indent_first_line:
            _dict['indentFirstLine'] = self.indent_first_line.to_dict()
        # override the default output from pydantic by calling `to_dict()` of indent_start
        if self.indent_start:
            _dict['indentStart'] = self.indent_start.to_dict()
        # override the default output from pydantic by calling `to_dict()` of text_style
        if self.text_style:
            _dict['textStyle'] = self.text_style.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of NestingLevel from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "bulletAlignment": obj.get("bulletAlignment"),
            "glyphFormat": obj.get("glyphFormat"),
            "glyphSymbol": obj.get("glyphSymbol"),
            "glyphType": obj.get("glyphType"),
            "indentFirstLine": Dimension.from_dict(obj["indentFirstLine"]) if obj.get("indentFirstLine") is not None else None,
            "indentStart": Dimension.from_dict(obj["indentStart"]) if obj.get("indentStart") is not None else None,
            "startNumber": obj.get("startNumber"),
            "textStyle": TextStyle.from_dict(obj["textStyle"]) if obj.get("textStyle") is not None else None
        })
        return _obj



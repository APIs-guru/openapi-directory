# coding: utf-8

"""
    Google Docs API

    Reads and writes Google Docs documents.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.paragraph_style import ParagraphStyle

class TestParagraphStyle(unittest.TestCase):
    """ParagraphStyle unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> ParagraphStyle:
        """Test ParagraphStyle
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `ParagraphStyle`
        """
        model = ParagraphStyle()
        if include_optional:
            return ParagraphStyle(
                alignment = 'ALIGNMENT_UNSPECIFIED',
                avoid_widow_and_orphan = True,
                border_between = openapi_client.models.paragraph_border.ParagraphBorder(
                    color = openapi_client.models.optional_color.OptionalColor(), 
                    dash_style = 'DASH_STYLE_UNSPECIFIED', 
                    padding = openapi_client.models.dimension.Dimension(
                        magnitude = 1.337, 
                        unit = 'UNIT_UNSPECIFIED', ), 
                    width = openapi_client.models.dimension.Dimension(
                        magnitude = 1.337, 
                        unit = 'UNIT_UNSPECIFIED', ), ),
                border_bottom = openapi_client.models.paragraph_border.ParagraphBorder(
                    color = openapi_client.models.optional_color.OptionalColor(), 
                    dash_style = 'DASH_STYLE_UNSPECIFIED', 
                    padding = openapi_client.models.dimension.Dimension(
                        magnitude = 1.337, 
                        unit = 'UNIT_UNSPECIFIED', ), 
                    width = openapi_client.models.dimension.Dimension(
                        magnitude = 1.337, 
                        unit = 'UNIT_UNSPECIFIED', ), ),
                border_left = openapi_client.models.paragraph_border.ParagraphBorder(
                    color = openapi_client.models.optional_color.OptionalColor(), 
                    dash_style = 'DASH_STYLE_UNSPECIFIED', 
                    padding = openapi_client.models.dimension.Dimension(
                        magnitude = 1.337, 
                        unit = 'UNIT_UNSPECIFIED', ), 
                    width = openapi_client.models.dimension.Dimension(
                        magnitude = 1.337, 
                        unit = 'UNIT_UNSPECIFIED', ), ),
                border_right = openapi_client.models.paragraph_border.ParagraphBorder(
                    color = openapi_client.models.optional_color.OptionalColor(), 
                    dash_style = 'DASH_STYLE_UNSPECIFIED', 
                    padding = openapi_client.models.dimension.Dimension(
                        magnitude = 1.337, 
                        unit = 'UNIT_UNSPECIFIED', ), 
                    width = openapi_client.models.dimension.Dimension(
                        magnitude = 1.337, 
                        unit = 'UNIT_UNSPECIFIED', ), ),
                border_top = openapi_client.models.paragraph_border.ParagraphBorder(
                    color = openapi_client.models.optional_color.OptionalColor(), 
                    dash_style = 'DASH_STYLE_UNSPECIFIED', 
                    padding = openapi_client.models.dimension.Dimension(
                        magnitude = 1.337, 
                        unit = 'UNIT_UNSPECIFIED', ), 
                    width = openapi_client.models.dimension.Dimension(
                        magnitude = 1.337, 
                        unit = 'UNIT_UNSPECIFIED', ), ),
                direction = 'CONTENT_DIRECTION_UNSPECIFIED',
                heading_id = '',
                indent_end = openapi_client.models.dimension.Dimension(
                    magnitude = 1.337, 
                    unit = 'UNIT_UNSPECIFIED', ),
                indent_first_line = openapi_client.models.dimension.Dimension(
                    magnitude = 1.337, 
                    unit = 'UNIT_UNSPECIFIED', ),
                indent_start = openapi_client.models.dimension.Dimension(
                    magnitude = 1.337, 
                    unit = 'UNIT_UNSPECIFIED', ),
                keep_lines_together = True,
                keep_with_next = True,
                line_spacing = 1.337,
                named_style_type = 'NAMED_STYLE_TYPE_UNSPECIFIED',
                page_break_before = True,
                shading = openapi_client.models.shading.Shading(
                    background_color = openapi_client.models.optional_color.OptionalColor(
                        color = openapi_client.models.color.Color(
                            rgb_color = openapi_client.models.rgb_color.RgbColor(
                                blue = 1.337, 
                                green = 1.337, 
                                red = 1.337, ), ), ), ),
                space_above = openapi_client.models.dimension.Dimension(
                    magnitude = 1.337, 
                    unit = 'UNIT_UNSPECIFIED', ),
                space_below = openapi_client.models.dimension.Dimension(
                    magnitude = 1.337, 
                    unit = 'UNIT_UNSPECIFIED', ),
                spacing_mode = 'SPACING_MODE_UNSPECIFIED',
                tab_stops = [
                    openapi_client.models.tab_stop.TabStop(
                        alignment = 'TAB_STOP_ALIGNMENT_UNSPECIFIED', 
                        offset = openapi_client.models.dimension.Dimension(
                            magnitude = 1.337, 
                            unit = 'UNIT_UNSPECIFIED', ), )
                    ]
            )
        else:
            return ParagraphStyle(
        )
        """

    def testParagraphStyle(self):
        """Test ParagraphStyle"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

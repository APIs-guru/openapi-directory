# coding: utf-8

"""
    Google Docs API

    Reads and writes Google Docs documents.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.insert_inline_image_request import InsertInlineImageRequest

class TestInsertInlineImageRequest(unittest.TestCase):
    """InsertInlineImageRequest unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> InsertInlineImageRequest:
        """Test InsertInlineImageRequest
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `InsertInlineImageRequest`
        """
        model = InsertInlineImageRequest()
        if include_optional:
            return InsertInlineImageRequest(
                end_of_segment_location = openapi_client.models.end_of_segment_location.EndOfSegmentLocation(
                    segment_id = '', ),
                location = openapi_client.models.location.Location(
                    index = 56, 
                    segment_id = '', ),
                object_size = openapi_client.models.size.Size(
                    height = openapi_client.models.dimension.Dimension(
                        magnitude = 1.337, 
                        unit = 'UNIT_UNSPECIFIED', ), 
                    width = openapi_client.models.dimension.Dimension(
                        magnitude = 1.337, 
                        unit = 'UNIT_UNSPECIFIED', ), ),
                uri = ''
            )
        else:
            return InsertInlineImageRequest(
        )
        """

    def testInsertInlineImageRequest(self):
        """Test InsertInlineImageRequest"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

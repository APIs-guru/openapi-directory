# coding: utf-8

"""
    Google Docs API

    Reads and writes Google Docs documents.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.positioned_object_properties import PositionedObjectProperties

class TestPositionedObjectProperties(unittest.TestCase):
    """PositionedObjectProperties unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> PositionedObjectProperties:
        """Test PositionedObjectProperties
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `PositionedObjectProperties`
        """
        model = PositionedObjectProperties()
        if include_optional:
            return PositionedObjectProperties(
                embedded_object = openapi_client.models.embedded_object.EmbeddedObject(
                    description = '', 
                    embedded_drawing_properties = openapi_client.models.embedded_drawing_properties.EmbeddedDrawingProperties(), 
                    embedded_object_border = openapi_client.models.embedded_object_border.EmbeddedObjectBorder(
                        color = openapi_client.models.optional_color.OptionalColor(), 
                        dash_style = 'DASH_STYLE_UNSPECIFIED', 
                        property_state = 'RENDERED', 
                        width = openapi_client.models.dimension.Dimension(
                            magnitude = 1.337, 
                            unit = 'UNIT_UNSPECIFIED', ), ), 
                    image_properties = openapi_client.models.image_properties.ImageProperties(
                        angle = 1.337, 
                        brightness = 1.337, 
                        content_uri = '', 
                        contrast = 1.337, 
                        crop_properties = openapi_client.models.crop_properties.CropProperties(
                            angle = 1.337, 
                            offset_bottom = 1.337, 
                            offset_left = 1.337, 
                            offset_right = 1.337, 
                            offset_top = 1.337, ), 
                        source_uri = '', 
                        transparency = 1.337, ), 
                    linked_content_reference = openapi_client.models.linked_content_reference.LinkedContentReference(
                        sheets_chart_reference = openapi_client.models.sheets_chart_reference.SheetsChartReference(
                            chart_id = 56, 
                            spreadsheet_id = '', ), ), 
                    margin_bottom = openapi_client.models.dimension.Dimension(
                        magnitude = 1.337, 
                        unit = 'UNIT_UNSPECIFIED', ), 
                    margin_left = , 
                    margin_right = , 
                    margin_top = , 
                    size = openapi_client.models.size.Size(
                        height = , ), 
                    title = '', ),
                positioning = openapi_client.models.positioned_object_positioning.PositionedObjectPositioning(
                    layout = 'POSITIONED_OBJECT_LAYOUT_UNSPECIFIED', 
                    left_offset = openapi_client.models.dimension.Dimension(
                        magnitude = 1.337, 
                        unit = 'UNIT_UNSPECIFIED', ), 
                    top_offset = openapi_client.models.dimension.Dimension(
                        magnitude = 1.337, 
                        unit = 'UNIT_UNSPECIFIED', ), )
            )
        else:
            return PositionedObjectProperties(
        )
        """

    def testPositionedObjectProperties(self):
        """Test PositionedObjectProperties"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

# coding: utf-8

"""
    Fitness API

    The Fitness API for managing users' fitness tracking data.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.value import Value
from typing import Optional, Set
from typing_extensions import Self

class DataPoint(BaseModel):
    """
    Represents a single data point, generated by a particular data source. A data point holds a value for each field, an end timestamp and an optional start time. The exact semantics of each of these attributes are specified in the documentation for the particular data type. A data point can represent an instantaneous measurement, reading or input observation, as well as averages or aggregates over a time interval. Check the data type documentation to determine which is the case for a particular data type. Data points always contain one value for each field of the data type.
    """ # noqa: E501
    computation_time_millis: Optional[StrictStr] = Field(default=None, description="DO NOT USE THIS FIELD. It is ignored, and not stored.", alias="computationTimeMillis")
    data_type_name: Optional[StrictStr] = Field(default=None, description="The data type defining the format of the values in this data point.", alias="dataTypeName")
    end_time_nanos: Optional[StrictStr] = Field(default=None, description="The end time of the interval represented by this data point, in nanoseconds since epoch.", alias="endTimeNanos")
    modified_time_millis: Optional[StrictStr] = Field(default=None, description="Indicates the last time this data point was modified. Useful only in contexts where we are listing the data changes, rather than representing the current state of the data.", alias="modifiedTimeMillis")
    origin_data_source_id: Optional[StrictStr] = Field(default=None, description="If the data point is contained in a dataset for a derived data source, this field will be populated with the data source stream ID that created the data point originally. WARNING: do not rely on this field for anything other than debugging. The value of this field, if it is set at all, is an implementation detail and is not guaranteed to remain consistent.", alias="originDataSourceId")
    raw_timestamp_nanos: Optional[StrictStr] = Field(default=None, description="The raw timestamp from the original SensorEvent.", alias="rawTimestampNanos")
    start_time_nanos: Optional[StrictStr] = Field(default=None, description="The start time of the interval represented by this data point, in nanoseconds since epoch.", alias="startTimeNanos")
    value: Optional[List[Value]] = Field(default=None, description="Values of each data type field for the data point. It is expected that each value corresponding to a data type field will occur in the same order that the field is listed with in the data type specified in a data source. Only one of integer and floating point fields will be populated, depending on the format enum value within data source's type field.")
    __properties: ClassVar[List[str]] = ["computationTimeMillis", "dataTypeName", "endTimeNanos", "modifiedTimeMillis", "originDataSourceId", "rawTimestampNanos", "startTimeNanos", "value"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DataPoint from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in value (list)
        _items = []
        if self.value:
            for _item_value in self.value:
                if _item_value:
                    _items.append(_item_value.to_dict())
            _dict['value'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DataPoint from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "computationTimeMillis": obj.get("computationTimeMillis"),
            "dataTypeName": obj.get("dataTypeName"),
            "endTimeNanos": obj.get("endTimeNanos"),
            "modifiedTimeMillis": obj.get("modifiedTimeMillis"),
            "originDataSourceId": obj.get("originDataSourceId"),
            "rawTimestampNanos": obj.get("rawTimestampNanos"),
            "startTimeNanos": obj.get("startTimeNanos"),
            "value": [Value.from_dict(_item) for _item in obj["value"]] if obj.get("value") is not None else None
        })
        return _obj



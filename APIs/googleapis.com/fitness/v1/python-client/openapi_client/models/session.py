# coding: utf-8

"""
    Fitness API

    The Fitness API for managing users' fitness tracking data.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.application import Application
from typing import Optional, Set
from typing_extensions import Self

class Session(BaseModel):
    """
    Sessions contain metadata, such as a user-friendly name and time interval information.
    """ # noqa: E501
    active_time_millis: Optional[StrictStr] = Field(default=None, description="Session active time. While start_time_millis and end_time_millis define the full session time, the active time can be shorter and specified by active_time_millis. If the inactive time during the session is known, it should also be inserted via a com.google.activity.segment data point with a STILL activity value", alias="activeTimeMillis")
    activity_type: Optional[StrictInt] = Field(default=None, description="The type of activity this session represents.", alias="activityType")
    application: Optional[Application] = None
    description: Optional[StrictStr] = Field(default=None, description="A description for this session.")
    end_time_millis: Optional[StrictStr] = Field(default=None, description="An end time, in milliseconds since epoch, inclusive.", alias="endTimeMillis")
    id: Optional[StrictStr] = Field(default=None, description="A client-generated identifier that is unique across all sessions owned by this particular user.")
    modified_time_millis: Optional[StrictStr] = Field(default=None, description="A timestamp that indicates when the session was last modified.", alias="modifiedTimeMillis")
    name: Optional[StrictStr] = Field(default=None, description="A human readable name of the session.")
    start_time_millis: Optional[StrictStr] = Field(default=None, description="A start time, in milliseconds since epoch, inclusive.", alias="startTimeMillis")
    __properties: ClassVar[List[str]] = ["activeTimeMillis", "activityType", "application", "description", "endTimeMillis", "id", "modifiedTimeMillis", "name", "startTimeMillis"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Session from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of application
        if self.application:
            _dict['application'] = self.application.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Session from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "activeTimeMillis": obj.get("activeTimeMillis"),
            "activityType": obj.get("activityType"),
            "application": Application.from_dict(obj["application"]) if obj.get("application") is not None else None,
            "description": obj.get("description"),
            "endTimeMillis": obj.get("endTimeMillis"),
            "id": obj.get("id"),
            "modifiedTimeMillis": obj.get("modifiedTimeMillis"),
            "name": obj.get("name"),
            "startTimeMillis": obj.get("startTimeMillis")
        })
        return _obj



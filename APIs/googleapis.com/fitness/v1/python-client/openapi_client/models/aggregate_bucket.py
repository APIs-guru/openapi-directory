# coding: utf-8

"""
    Fitness API

    The Fitness API for managing users' fitness tracking data.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.dataset import Dataset
from openapi_client.models.session import Session
from typing import Optional, Set
from typing_extensions import Self

class AggregateBucket(BaseModel):
    """
    AggregateBucket
    """ # noqa: E501
    activity: Optional[StrictInt] = Field(default=None, description="Available for Bucket.Type.ACTIVITY_TYPE, Bucket.Type.ACTIVITY_SEGMENT")
    dataset: Optional[List[Dataset]] = Field(default=None, description="There will be one dataset per AggregateBy in the request.")
    end_time_millis: Optional[StrictStr] = Field(default=None, description="The end time for the aggregated data, in milliseconds since epoch, inclusive.", alias="endTimeMillis")
    session: Optional[Session] = None
    start_time_millis: Optional[StrictStr] = Field(default=None, description="The start time for the aggregated data, in milliseconds since epoch, inclusive.", alias="startTimeMillis")
    type: Optional[StrictStr] = Field(default=None, description="The type of a bucket signifies how the data aggregation is performed in the bucket.")
    __properties: ClassVar[List[str]] = ["activity", "dataset", "endTimeMillis", "session", "startTimeMillis", "type"]

    @field_validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['unknown', 'time', 'session', 'activityType', 'activitySegment']):
            raise ValueError("must be one of enum values ('unknown', 'time', 'session', 'activityType', 'activitySegment')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AggregateBucket from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in dataset (list)
        _items = []
        if self.dataset:
            for _item_dataset in self.dataset:
                if _item_dataset:
                    _items.append(_item_dataset.to_dict())
            _dict['dataset'] = _items
        # override the default output from pydantic by calling `to_dict()` of session
        if self.session:
            _dict['session'] = self.session.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AggregateBucket from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "activity": obj.get("activity"),
            "dataset": [Dataset.from_dict(_item) for _item in obj["dataset"]] if obj.get("dataset") is not None else None,
            "endTimeMillis": obj.get("endTimeMillis"),
            "session": Session.from_dict(obj["session"]) if obj.get("session") is not None else None,
            "startTimeMillis": obj.get("startTimeMillis"),
            "type": obj.get("type")
        })
        return _obj



# coding: utf-8

"""
    Fitness API

    The Fitness API for managing users' fitness tracking data.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.application import Application
from openapi_client.models.data_type import DataType
from openapi_client.models.device import Device
from typing import Optional, Set
from typing_extensions import Self

class DataSource(BaseModel):
    """
    Definition of a unique source of sensor data. Data sources can expose raw data coming from hardware sensors on local or companion devices. They can also expose derived data, created by transforming or merging other data sources. Multiple data sources can exist for the same data type. Every data point inserted into or read from this service has an associated data source. The data source contains enough information to uniquely identify its data, including the hardware device and the application that collected and/or transformed the data. It also holds useful metadata, such as the hardware and application versions, and the device type. Each data source produces a unique stream of data, with a unique identifier. Not all changes to data source affect the stream identifier, so that data collected by updated versions of the same application/device can still be considered to belong to the same data stream.
    """ # noqa: E501
    application: Optional[Application] = None
    data_quality_standard: Optional[List[StrictStr]] = Field(default=None, description="DO NOT POPULATE THIS FIELD. It is never populated in responses from the platform, and is ignored in queries. It will be removed in a future version entirely.", alias="dataQualityStandard")
    data_stream_id: Optional[StrictStr] = Field(default=None, description="A unique identifier for the data stream produced by this data source. The identifier includes: - The physical device's manufacturer, model, and serial number (UID). - The application's package name or name. Package name is used when the data source was created by an Android application. The developer project number is used when the data source was created by a REST client. - The data source's type. - The data source's stream name. Note that not all attributes of the data source are used as part of the stream identifier. In particular, the version of the hardware/the application isn't used. This allows us to preserve the same stream through version updates. This also means that two DataSource objects may represent the same data stream even if they're not equal. The exact format of the data stream ID created by an Android application is: type:dataType.name:application.packageName:device.manufacturer:device.model:device.uid:dataStreamName The exact format of the data stream ID created by a REST client is: type:dataType.name:developer project number:device.manufacturer:device.model:device.uid:dataStreamName When any of the optional fields that make up the data stream ID are absent, they will be omitted from the data stream ID. The minimum viable data stream ID would be: type:dataType.name:developer project number Finally, the developer project number and device UID are obfuscated when read by any REST or Android client that did not create the data source. Only the data source creator will see the developer project number in clear and normal form. This means a client will see a different set of data_stream_ids than another client with different credentials.", alias="dataStreamId")
    data_stream_name: Optional[StrictStr] = Field(default=None, description="The stream name uniquely identifies this particular data source among other data sources of the same type from the same underlying producer. Setting the stream name is optional, but should be done whenever an application exposes two streams for the same data type, or when a device has two equivalent sensors.", alias="dataStreamName")
    data_type: Optional[DataType] = Field(default=None, alias="dataType")
    device: Optional[Device] = None
    name: Optional[StrictStr] = Field(default=None, description="An end-user visible name for this data source.")
    type: Optional[StrictStr] = Field(default=None, description="A constant describing the type of this data source. Indicates whether this data source produces raw or derived data.")
    __properties: ClassVar[List[str]] = ["application", "dataQualityStandard", "dataStreamId", "dataStreamName", "dataType", "device", "name", "type"]

    @field_validator('data_quality_standard')
    def data_quality_standard_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        for i in value:
            if i not in set(['dataQualityUnknown', 'dataQualityBloodPressureEsh2002', 'dataQualityBloodPressureEsh2010', 'dataQualityBloodPressureAami', 'dataQualityBloodPressureBhsAA', 'dataQualityBloodPressureBhsAB', 'dataQualityBloodPressureBhsBA', 'dataQualityBloodPressureBhsBB', 'dataQualityBloodGlucoseIso151972003', 'dataQualityBloodGlucoseIso151972013']):
                raise ValueError("each list item must be one of ('dataQualityUnknown', 'dataQualityBloodPressureEsh2002', 'dataQualityBloodPressureEsh2010', 'dataQualityBloodPressureAami', 'dataQualityBloodPressureBhsAA', 'dataQualityBloodPressureBhsAB', 'dataQualityBloodPressureBhsBA', 'dataQualityBloodPressureBhsBB', 'dataQualityBloodGlucoseIso151972003', 'dataQualityBloodGlucoseIso151972013')")
        return value

    @field_validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['raw', 'derived']):
            raise ValueError("must be one of enum values ('raw', 'derived')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DataSource from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of application
        if self.application:
            _dict['application'] = self.application.to_dict()
        # override the default output from pydantic by calling `to_dict()` of data_type
        if self.data_type:
            _dict['dataType'] = self.data_type.to_dict()
        # override the default output from pydantic by calling `to_dict()` of device
        if self.device:
            _dict['device'] = self.device.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DataSource from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "application": Application.from_dict(obj["application"]) if obj.get("application") is not None else None,
            "dataQualityStandard": obj.get("dataQualityStandard"),
            "dataStreamId": obj.get("dataStreamId"),
            "dataStreamName": obj.get("dataStreamName"),
            "dataType": DataType.from_dict(obj["dataType"]) if obj.get("dataType") is not None else None,
            "device": Device.from_dict(obj["device"]) if obj.get("device") is not None else None,
            "name": obj.get("name"),
            "type": obj.get("type")
        })
        return _obj



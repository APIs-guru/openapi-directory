# coding: utf-8

"""
    Fitness API

    The Fitness API for managing users' fitness tracking data.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.aggregate_request import AggregateRequest

class TestAggregateRequest(unittest.TestCase):
    """AggregateRequest unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> AggregateRequest:
        """Test AggregateRequest
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `AggregateRequest`
        """
        model = AggregateRequest()
        if include_optional:
            return AggregateRequest(
                aggregate_by = [
                    openapi_client.models.aggregate_by.AggregateBy(
                        data_source_id = '', 
                        data_type_name = '', )
                    ],
                bucket_by_activity_segment = openapi_client.models.bucket_by_activity.BucketByActivity(
                    activity_data_source_id = '', 
                    min_duration_millis = '', ),
                bucket_by_activity_type = openapi_client.models.bucket_by_activity.BucketByActivity(
                    activity_data_source_id = '', 
                    min_duration_millis = '', ),
                bucket_by_session = openapi_client.models.bucket_by_session.BucketBySession(
                    min_duration_millis = '', ),
                bucket_by_time = openapi_client.models.bucket_by_time.BucketByTime(
                    duration_millis = '', 
                    period = openapi_client.models.bucket_by_time_period.BucketByTimePeriod(
                        time_zone_id = '', 
                        type = 'day', 
                        value = 56, ), ),
                end_time_millis = '',
                filtered_data_quality_standard = [
                    'dataQualityUnknown'
                    ],
                start_time_millis = ''
            )
        else:
            return AggregateRequest(
        )
        """

    def testAggregateRequest(self):
        """Test AggregateRequest"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

# coding: utf-8

"""
    Campaign Manager 360 API

    Build applications to efficiently manage large or complex trafficking, reporting, and attribution workflows for Campaign Manager 360.

    The version of the OpenAPI document: v3.3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.directory_site import DirectorySite

class TestDirectorySite(unittest.TestCase):
    """DirectorySite unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> DirectorySite:
        """Test DirectorySite
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `DirectorySite`
        """
        model = DirectorySite()
        if include_optional:
            return DirectorySite(
                active = True,
                id = '',
                id_dimension_value = openapi_client.models.dimension_value.DimensionValue(
                    dimension_name = '', 
                    etag = '', 
                    id = '', 
                    kind = '', 
                    match_type = 'EXACT', 
                    value = '', ),
                inpage_tag_formats = [
                    'STANDARD'
                    ],
                interstitial_tag_formats = [
                    'IFRAME_JAVASCRIPT_INTERSTITIAL'
                    ],
                kind = '',
                name = '',
                settings = openapi_client.models.directory_site_settings.DirectorySiteSettings(
                    active_view_opt_out = True, 
                    dfp_settings = openapi_client.models.dfp_settings.DfpSettings(
                        dfp_network_code = '', 
                        dfp_network_name = '', 
                        programmatic_placement_accepted = True, 
                        pub_paid_placement_accepted = True, 
                        publisher_portal_only = True, ), 
                    instream_video_placement_accepted = True, 
                    interstitial_placement_accepted = True, ),
                url = ''
            )
        else:
            return DirectorySite(
        )
        """

    def testDirectorySite(self):
        """Test DirectorySite"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

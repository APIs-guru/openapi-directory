# coding: utf-8

"""
    Campaign Manager 360 API

    Build applications to efficiently manage large or complex trafficking, reporting, and attribution workflows for Campaign Manager 360.

    The version of the OpenAPI document: v3.3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.campaigns_list_response import CampaignsListResponse

class TestCampaignsListResponse(unittest.TestCase):
    """CampaignsListResponse unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> CampaignsListResponse:
        """Test CampaignsListResponse
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `CampaignsListResponse`
        """
        model = CampaignsListResponse()
        if include_optional:
            return CampaignsListResponse(
                campaigns = [
                    openapi_client.models.campaign.Campaign(
                        account_id = '', 
                        ad_blocking_configuration = openapi_client.models.ad_blocking_configuration.AdBlockingConfiguration(
                            click_through_url = '', 
                            creative_bundle_id = '', 
                            enabled = True, 
                            override_click_through_url = True, ), 
                        additional_creative_optimization_configurations = [
                            openapi_client.models.creative_optimization_configuration.CreativeOptimizationConfiguration(
                                id = '', 
                                name = '', 
                                optimization_activitys = [
                                    openapi_client.models.optimization_activity.OptimizationActivity(
                                        floodlight_activity_id = '', 
                                        floodlight_activity_id_dimension_value = openapi_client.models.dimension_value.DimensionValue(
                                            dimension_name = '', 
                                            etag = '', 
                                            id = '', 
                                            kind = '', 
                                            match_type = 'EXACT', 
                                            value = '', ), 
                                        weight = 56, )
                                    ], 
                                optimization_model = 'CLICK', )
                            ], 
                        advertiser_group_id = '', 
                        advertiser_id = '', 
                        advertiser_id_dimension_value = openapi_client.models.dimension_value.DimensionValue(
                            dimension_name = '', 
                            etag = '', 
                            id = '', 
                            kind = '', 
                            match_type = 'EXACT', 
                            value = '', ), 
                        archived = True, 
                        audience_segment_groups = [
                            openapi_client.models.audience_segment_group.AudienceSegmentGroup(
                                audience_segments = [
                                    openapi_client.models.audience_segment.AudienceSegment(
                                        allocation = 56, 
                                        id = '', 
                                        name = '', )
                                    ], 
                                id = '', 
                                name = '', )
                            ], 
                        billing_invoice_code = '', 
                        click_through_url_suffix_properties = openapi_client.models.click_through_url_suffix_properties.ClickThroughUrlSuffixProperties(
                            click_through_url_suffix = '', 
                            override_inherited_suffix = True, ), 
                        comment = '', 
                        create_info = openapi_client.models.last_modified_info.LastModifiedInfo(
                            time = '', ), 
                        creative_group_ids = [
                            ''
                            ], 
                        creative_optimization_configuration = openapi_client.models.creative_optimization_configuration.CreativeOptimizationConfiguration(
                            id = '', 
                            name = '', 
                            optimization_model = 'CLICK', ), 
                        default_click_through_event_tag_properties = openapi_client.models.default_click_through_event_tag_properties.DefaultClickThroughEventTagProperties(
                            default_click_through_event_tag_id = '', 
                            override_inherited_event_tag = True, ), 
                        default_landing_page_id = '', 
                        end_date = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(), 
                        event_tag_overrides = [
                            openapi_client.models.event_tag_override.EventTagOverride(
                                enabled = True, 
                                id = '', )
                            ], 
                        external_id = '', 
                        id = '', 
                        id_dimension_value = , 
                        kind = '', 
                        last_modified_info = openapi_client.models.last_modified_info.LastModifiedInfo(
                            time = '', ), 
                        name = '', 
                        nielsen_ocr_enabled = True, 
                        start_date = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(), 
                        subaccount_id = '', 
                        trafficker_emails = [
                            ''
                            ], )
                    ],
                kind = '',
                next_page_token = ''
            )
        else:
            return CampaignsListResponse(
        )
        """

    def testCampaignsListResponse(self):
        """Test CampaignsListResponse"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

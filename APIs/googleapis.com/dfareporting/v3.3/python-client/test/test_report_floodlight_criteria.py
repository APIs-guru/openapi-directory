# coding: utf-8

"""
    Campaign Manager 360 API

    Build applications to efficiently manage large or complex trafficking, reporting, and attribution workflows for Campaign Manager 360.

    The version of the OpenAPI document: v3.3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.report_floodlight_criteria import ReportFloodlightCriteria

class TestReportFloodlightCriteria(unittest.TestCase):
    """ReportFloodlightCriteria unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> ReportFloodlightCriteria:
        """Test ReportFloodlightCriteria
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `ReportFloodlightCriteria`
        """
        model = ReportFloodlightCriteria()
        if include_optional:
            return ReportFloodlightCriteria(
                custom_rich_media_events = [
                    openapi_client.models.dimension_value.DimensionValue(
                        dimension_name = '', 
                        etag = '', 
                        id = '', 
                        kind = '', 
                        match_type = 'EXACT', 
                        value = '', )
                    ],
                date_range = openapi_client.models.date_range.DateRange(
                    end_date = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(), 
                    kind = '', 
                    relative_date_range = 'TODAY', 
                    start_date = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(), ),
                dimension_filters = [
                    openapi_client.models.dimension_value.DimensionValue(
                        dimension_name = '', 
                        etag = '', 
                        id = '', 
                        kind = '', 
                        match_type = 'EXACT', 
                        value = '', )
                    ],
                dimensions = [
                    openapi_client.models.sorted_dimension.SortedDimension(
                        kind = '', 
                        name = '', 
                        sort_order = 'ASCENDING', )
                    ],
                floodlight_config_id = openapi_client.models.dimension_value.DimensionValue(
                    dimension_name = '', 
                    etag = '', 
                    id = '', 
                    kind = '', 
                    match_type = 'EXACT', 
                    value = '', ),
                metric_names = [
                    ''
                    ],
                report_properties = openapi_client.models.report_floodlight_criteria_report_properties.Report_floodlightCriteria_reportProperties(
                    include_attributed_ip_conversions = True, 
                    include_unattributed_cookie_conversions = True, 
                    include_unattributed_ip_conversions = True, )
            )
        else:
            return ReportFloodlightCriteria(
        )
        """

    def testReportFloodlightCriteria(self):
        """Test ReportFloodlightCriteria"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

# coding: utf-8

"""
    Campaign Manager 360 API

    Build applications to efficiently manage large or complex trafficking, reporting, and attribution workflows for Campaign Manager 360.

    The version of the OpenAPI document: v3.3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.placement_groups_list_response import PlacementGroupsListResponse

class TestPlacementGroupsListResponse(unittest.TestCase):
    """PlacementGroupsListResponse unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> PlacementGroupsListResponse:
        """Test PlacementGroupsListResponse
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `PlacementGroupsListResponse`
        """
        model = PlacementGroupsListResponse()
        if include_optional:
            return PlacementGroupsListResponse(
                kind = '',
                next_page_token = '',
                placement_groups = [
                    openapi_client.models.placement_group.PlacementGroup(
                        account_id = '', 
                        advertiser_id = '', 
                        advertiser_id_dimension_value = openapi_client.models.dimension_value.DimensionValue(
                            dimension_name = '', 
                            etag = '', 
                            id = '', 
                            kind = '', 
                            match_type = 'EXACT', 
                            value = '', ), 
                        archived = True, 
                        campaign_id = '', 
                        campaign_id_dimension_value = openapi_client.models.dimension_value.DimensionValue(
                            dimension_name = '', 
                            etag = '', 
                            id = '', 
                            kind = '', 
                            match_type = 'EXACT', 
                            value = '', ), 
                        child_placement_ids = [
                            ''
                            ], 
                        comment = '', 
                        content_category_id = '', 
                        create_info = openapi_client.models.last_modified_info.LastModifiedInfo(
                            time = '', ), 
                        directory_site_id = '', 
                        directory_site_id_dimension_value = , 
                        external_id = '', 
                        id = '', 
                        id_dimension_value = , 
                        kind = '', 
                        last_modified_info = openapi_client.models.last_modified_info.LastModifiedInfo(
                            time = '', ), 
                        name = '', 
                        placement_group_type = 'PLACEMENT_PACKAGE', 
                        placement_strategy_id = '', 
                        pricing_schedule = openapi_client.models.pricing_schedule.PricingSchedule(
                            cap_cost_option = 'CAP_COST_NONE', 
                            disregard_overdelivery = True, 
                            end_date = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(), 
                            flighted = True, 
                            floodlight_activity_id = '', 
                            pricing_periods = [
                                openapi_client.models.pricing_schedule_pricing_period.PricingSchedulePricingPeriod(
                                    end_date = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(), 
                                    pricing_comment = '', 
                                    rate_or_cost_nanos = '', 
                                    start_date = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(), 
                                    units = '', )
                                ], 
                            pricing_type = 'PRICING_TYPE_CPM', 
                            start_date = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(), 
                            testing_start_date = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(), ), 
                        primary_placement_id = '', 
                        primary_placement_id_dimension_value = , 
                        site_id = '', 
                        site_id_dimension_value = , 
                        subaccount_id = '', )
                    ]
            )
        else:
            return PlacementGroupsListResponse(
        )
        """

    def testPlacementGroupsListResponse(self):
        """Test PlacementGroupsListResponse"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

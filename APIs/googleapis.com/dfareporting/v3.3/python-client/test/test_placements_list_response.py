# coding: utf-8

"""
    Campaign Manager 360 API

    Build applications to efficiently manage large or complex trafficking, reporting, and attribution workflows for Campaign Manager 360.

    The version of the OpenAPI document: v3.3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.placements_list_response import PlacementsListResponse

class TestPlacementsListResponse(unittest.TestCase):
    """PlacementsListResponse unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> PlacementsListResponse:
        """Test PlacementsListResponse
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `PlacementsListResponse`
        """
        model = PlacementsListResponse()
        if include_optional:
            return PlacementsListResponse(
                kind = '',
                next_page_token = '',
                placements = [
                    openapi_client.models.placement.Placement(
                        account_id = '', 
                        ad_blocking_opt_out = True, 
                        additional_sizes = [
                            openapi_client.models.size.Size(
                                height = 56, 
                                iab = True, 
                                id = '', 
                                kind = '', 
                                width = 56, )
                            ], 
                        advertiser_id = '', 
                        advertiser_id_dimension_value = openapi_client.models.dimension_value.DimensionValue(
                            dimension_name = '', 
                            etag = '', 
                            id = '', 
                            kind = '', 
                            match_type = 'EXACT', 
                            value = '', ), 
                        archived = True, 
                        campaign_id = '', 
                        campaign_id_dimension_value = openapi_client.models.dimension_value.DimensionValue(
                            dimension_name = '', 
                            etag = '', 
                            id = '', 
                            kind = '', 
                            match_type = 'EXACT', 
                            value = '', ), 
                        comment = '', 
                        compatibility = 'DISPLAY', 
                        content_category_id = '', 
                        create_info = openapi_client.models.last_modified_info.LastModifiedInfo(
                            time = '', ), 
                        directory_site_id = '', 
                        directory_site_id_dimension_value = , 
                        external_id = '', 
                        id = '', 
                        id_dimension_value = , 
                        key_name = '', 
                        kind = '', 
                        last_modified_info = openapi_client.models.last_modified_info.LastModifiedInfo(
                            time = '', ), 
                        lookback_configuration = openapi_client.models.lookback_configuration.LookbackConfiguration(
                            click_duration = 56, 
                            post_impression_activities_duration = 56, ), 
                        name = '', 
                        payment_approved = True, 
                        payment_source = 'PLACEMENT_AGENCY_PAID', 
                        placement_group_id = '', 
                        placement_group_id_dimension_value = , 
                        placement_strategy_id = '', 
                        pricing_schedule = openapi_client.models.pricing_schedule.PricingSchedule(
                            cap_cost_option = 'CAP_COST_NONE', 
                            disregard_overdelivery = True, 
                            end_date = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(), 
                            flighted = True, 
                            floodlight_activity_id = '', 
                            pricing_periods = [
                                openapi_client.models.pricing_schedule_pricing_period.PricingSchedulePricingPeriod(
                                    end_date = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(), 
                                    pricing_comment = '', 
                                    rate_or_cost_nanos = '', 
                                    start_date = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(), 
                                    units = '', )
                                ], 
                            pricing_type = 'PRICING_TYPE_CPM', 
                            start_date = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(), 
                            testing_start_date = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(), ), 
                        primary = True, 
                        publisher_update_info = , 
                        site_id = '', 
                        site_id_dimension_value = , 
                        size = openapi_client.models.size.Size(
                            height = 56, 
                            iab = True, 
                            id = '', 
                            kind = '', 
                            width = 56, ), 
                        ssl_required = True, 
                        status = 'PENDING_REVIEW', 
                        subaccount_id = '', 
                        tag_formats = [
                            'PLACEMENT_TAG_STANDARD'
                            ], 
                        tag_setting = openapi_client.models.tag_setting.TagSetting(
                            additional_key_values = '', 
                            include_click_through_urls = True, 
                            include_click_tracking = True, 
                            keyword_option = 'PLACEHOLDER_WITH_LIST_OF_KEYWORDS', ), 
                        video_active_view_opt_out = True, 
                        video_settings = openapi_client.models.video_settings.VideoSettings(
                            companion_settings = openapi_client.models.companion_setting.CompanionSetting(
                                companions_disabled = True, 
                                enabled_sizes = [
                                    
                                    ], 
                                image_only = True, 
                                kind = '', ), 
                            kind = '', 
                            orientation = 'ANY', 
                            skippable_settings = openapi_client.models.skippable_setting.SkippableSetting(
                                kind = '', 
                                progress_offset = openapi_client.models.video_offset.VideoOffset(
                                    offset_percentage = 56, 
                                    offset_seconds = 56, ), 
                                skip_offset = openapi_client.models.video_offset.VideoOffset(
                                    offset_percentage = 56, 
                                    offset_seconds = 56, ), 
                                skippable = True, ), 
                            transcode_settings = openapi_client.models.transcode_setting.TranscodeSetting(
                                enabled_video_formats = [
                                    56
                                    ], 
                                kind = '', ), ), 
                        vpaid_adapter_choice = 'DEFAULT', )
                    ]
            )
        else:
            return PlacementsListResponse(
        )
        """

    def testPlacementsListResponse(self):
        """Test PlacementsListResponse"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

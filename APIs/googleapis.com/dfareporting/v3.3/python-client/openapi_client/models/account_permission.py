# coding: utf-8

"""
    Campaign Manager 360 API

    Build applications to efficiently manage large or complex trafficking, reporting, and attribution workflows for Campaign Manager 360.

    The version of the OpenAPI document: v3.3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class AccountPermission(BaseModel):
    """
    AccountPermissions contains information about a particular account permission. Some features of Campaign Manager require an account permission to be present in the account.
    """ # noqa: E501
    account_profiles: Optional[List[StrictStr]] = Field(default=None, description="Account profiles associated with this account permission. Possible values are: - \"ACCOUNT_PROFILE_BASIC\" - \"ACCOUNT_PROFILE_STANDARD\" ", alias="accountProfiles")
    id: Optional[StrictStr] = Field(default=None, description="ID of this account permission.")
    kind: Optional[StrictStr] = Field(default=None, description="Identifies what kind of resource this is. Value: the fixed string \"dfareporting#accountPermission\".")
    level: Optional[StrictStr] = Field(default=None, description="Administrative level required to enable this account permission.")
    name: Optional[StrictStr] = Field(default=None, description="Name of this account permission.")
    permission_group_id: Optional[StrictStr] = Field(default=None, description="Permission group of this account permission.", alias="permissionGroupId")
    __properties: ClassVar[List[str]] = ["accountProfiles", "id", "kind", "level", "name", "permissionGroupId"]

    @field_validator('account_profiles')
    def account_profiles_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        for i in value:
            if i not in set(['ACCOUNT_PROFILE_BASIC', 'ACCOUNT_PROFILE_STANDARD']):
                raise ValueError("each list item must be one of ('ACCOUNT_PROFILE_BASIC', 'ACCOUNT_PROFILE_STANDARD')")
        return value

    @field_validator('level')
    def level_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['USER', 'ADMINISTRATOR']):
            raise ValueError("must be one of enum values ('USER', 'ADMINISTRATOR')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AccountPermission from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AccountPermission from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "accountProfiles": obj.get("accountProfiles"),
            "id": obj.get("id"),
            "kind": obj.get("kind"),
            "level": obj.get("level"),
            "name": obj.get("name"),
            "permissionGroupId": obj.get("permissionGroupId")
        })
        return _obj



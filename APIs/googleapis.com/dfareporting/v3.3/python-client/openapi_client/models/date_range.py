# coding: utf-8

"""
    Campaign Manager 360 API

    Build applications to efficiently manage large or complex trafficking, reporting, and attribution workflows for Campaign Manager 360.

    The version of the OpenAPI document: v3.3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date
from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class DateRange(BaseModel):
    """
    Represents a date range.
    """ # noqa: E501
    end_date: Optional[date] = Field(default=None, alias="endDate")
    kind: Optional[StrictStr] = Field(default=None, description="The kind of resource this is, in this case dfareporting#dateRange.")
    relative_date_range: Optional[StrictStr] = Field(default=None, description="The date range relative to the date of when the report is run.", alias="relativeDateRange")
    start_date: Optional[date] = Field(default=None, alias="startDate")
    __properties: ClassVar[List[str]] = ["endDate", "kind", "relativeDateRange", "startDate"]

    @field_validator('relative_date_range')
    def relative_date_range_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['TODAY', 'YESTERDAY', 'WEEK_TO_DATE', 'MONTH_TO_DATE', 'QUARTER_TO_DATE', 'YEAR_TO_DATE', 'PREVIOUS_WEEK', 'PREVIOUS_MONTH', 'PREVIOUS_QUARTER', 'PREVIOUS_YEAR', 'LAST_7_DAYS', 'LAST_30_DAYS', 'LAST_90_DAYS', 'LAST_365_DAYS', 'LAST_24_MONTHS', 'LAST_14_DAYS', 'LAST_60_DAYS']):
            raise ValueError("must be one of enum values ('TODAY', 'YESTERDAY', 'WEEK_TO_DATE', 'MONTH_TO_DATE', 'QUARTER_TO_DATE', 'YEAR_TO_DATE', 'PREVIOUS_WEEK', 'PREVIOUS_MONTH', 'PREVIOUS_QUARTER', 'PREVIOUS_YEAR', 'LAST_7_DAYS', 'LAST_30_DAYS', 'LAST_90_DAYS', 'LAST_365_DAYS', 'LAST_24_MONTHS', 'LAST_14_DAYS', 'LAST_60_DAYS')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DateRange from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DateRange from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "endDate": obj.get("endDate"),
            "kind": obj.get("kind"),
            "relativeDateRange": obj.get("relativeDateRange"),
            "startDate": obj.get("startDate")
        })
        return _obj



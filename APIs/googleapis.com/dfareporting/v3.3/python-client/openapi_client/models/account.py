# coding: utf-8

"""
    Campaign Manager 360 API

    Build applications to efficiently manage large or complex trafficking, reporting, and attribution workflows for Campaign Manager 360.

    The version of the OpenAPI document: v3.3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.reports_configuration import ReportsConfiguration
from typing import Optional, Set
from typing_extensions import Self

class Account(BaseModel):
    """
    Contains properties of a Campaign Manager account.
    """ # noqa: E501
    account_permission_ids: Optional[List[StrictStr]] = Field(default=None, description="Account permissions assigned to this account.", alias="accountPermissionIds")
    account_profile: Optional[StrictStr] = Field(default=None, description="Profile for this account. This is a read-only field that can be left blank.", alias="accountProfile")
    active: Optional[StrictBool] = Field(default=None, description="Whether this account is active.")
    active_ads_limit_tier: Optional[StrictStr] = Field(default=None, description="Maximum number of active ads allowed for this account.", alias="activeAdsLimitTier")
    active_view_opt_out: Optional[StrictBool] = Field(default=None, description="Whether to serve creatives with Active View tags. If disabled, viewability data will not be available for any impressions.", alias="activeViewOptOut")
    available_permission_ids: Optional[List[StrictStr]] = Field(default=None, description="User role permissions available to the user roles of this account.", alias="availablePermissionIds")
    country_id: Optional[StrictStr] = Field(default=None, description="ID of the country associated with this account.", alias="countryId")
    currency_id: Optional[StrictStr] = Field(default=None, description="ID of currency associated with this account. This is a required field. Acceptable values are: - \"1\" for USD - \"2\" for GBP - \"3\" for ESP - \"4\" for SEK - \"5\" for CAD - \"6\" for JPY - \"7\" for DEM - \"8\" for AUD - \"9\" for FRF - \"10\" for ITL - \"11\" for DKK - \"12\" for NOK - \"13\" for FIM - \"14\" for ZAR - \"15\" for IEP - \"16\" for NLG - \"17\" for EUR - \"18\" for KRW - \"19\" for TWD - \"20\" for SGD - \"21\" for CNY - \"22\" for HKD - \"23\" for NZD - \"24\" for MYR - \"25\" for BRL - \"26\" for PTE - \"28\" for CLP - \"29\" for TRY - \"30\" for ARS - \"31\" for PEN - \"32\" for ILS - \"33\" for CHF - \"34\" for VEF - \"35\" for COP - \"36\" for GTQ - \"37\" for PLN - \"39\" for INR - \"40\" for THB - \"41\" for IDR - \"42\" for CZK - \"43\" for RON - \"44\" for HUF - \"45\" for RUB - \"46\" for AED - \"47\" for BGN - \"48\" for HRK - \"49\" for MXN - \"50\" for NGN - \"51\" for EGP ", alias="currencyId")
    default_creative_size_id: Optional[StrictStr] = Field(default=None, description="Default placement dimensions for this account.", alias="defaultCreativeSizeId")
    description: Optional[StrictStr] = Field(default=None, description="Description of this account.")
    id: Optional[StrictStr] = Field(default=None, description="ID of this account. This is a read-only, auto-generated field.")
    kind: Optional[StrictStr] = Field(default=None, description="Identifies what kind of resource this is. Value: the fixed string \"dfareporting#account\".")
    locale: Optional[StrictStr] = Field(default=None, description="Locale of this account. Acceptable values are: - \"cs\" (Czech) - \"de\" (German) - \"en\" (English) - \"en-GB\" (English United Kingdom) - \"es\" (Spanish) - \"fr\" (French) - \"it\" (Italian) - \"ja\" (Japanese) - \"ko\" (Korean) - \"pl\" (Polish) - \"pt-BR\" (Portuguese Brazil) - \"ru\" (Russian) - \"sv\" (Swedish) - \"tr\" (Turkish) - \"zh-CN\" (Chinese Simplified) - \"zh-TW\" (Chinese Traditional) ")
    maximum_image_size: Optional[StrictStr] = Field(default=None, description="Maximum image size allowed for this account, in kilobytes. Value must be greater than or equal to 1.", alias="maximumImageSize")
    name: Optional[StrictStr] = Field(default=None, description="Name of this account. This is a required field, and must be less than 128 characters long and be globally unique.")
    nielsen_ocr_enabled: Optional[StrictBool] = Field(default=None, description="Whether campaigns created in this account will be enabled for Nielsen OCR reach ratings by default.", alias="nielsenOcrEnabled")
    reports_configuration: Optional[ReportsConfiguration] = Field(default=None, alias="reportsConfiguration")
    share_reports_with_twitter: Optional[StrictBool] = Field(default=None, description="Share Path to Conversion reports with Twitter.", alias="shareReportsWithTwitter")
    teaser_size_limit: Optional[StrictStr] = Field(default=None, description="File size limit in kilobytes of Rich Media teaser creatives. Acceptable values are 1 to 10240, inclusive.", alias="teaserSizeLimit")
    __properties: ClassVar[List[str]] = ["accountPermissionIds", "accountProfile", "active", "activeAdsLimitTier", "activeViewOptOut", "availablePermissionIds", "countryId", "currencyId", "defaultCreativeSizeId", "description", "id", "kind", "locale", "maximumImageSize", "name", "nielsenOcrEnabled", "reportsConfiguration", "shareReportsWithTwitter", "teaserSizeLimit"]

    @field_validator('account_profile')
    def account_profile_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['ACCOUNT_PROFILE_BASIC', 'ACCOUNT_PROFILE_STANDARD']):
            raise ValueError("must be one of enum values ('ACCOUNT_PROFILE_BASIC', 'ACCOUNT_PROFILE_STANDARD')")
        return value

    @field_validator('active_ads_limit_tier')
    def active_ads_limit_tier_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['ACTIVE_ADS_TIER_40K', 'ACTIVE_ADS_TIER_75K', 'ACTIVE_ADS_TIER_100K', 'ACTIVE_ADS_TIER_200K', 'ACTIVE_ADS_TIER_300K', 'ACTIVE_ADS_TIER_500K', 'ACTIVE_ADS_TIER_750K', 'ACTIVE_ADS_TIER_1M']):
            raise ValueError("must be one of enum values ('ACTIVE_ADS_TIER_40K', 'ACTIVE_ADS_TIER_75K', 'ACTIVE_ADS_TIER_100K', 'ACTIVE_ADS_TIER_200K', 'ACTIVE_ADS_TIER_300K', 'ACTIVE_ADS_TIER_500K', 'ACTIVE_ADS_TIER_750K', 'ACTIVE_ADS_TIER_1M')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Account from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of reports_configuration
        if self.reports_configuration:
            _dict['reportsConfiguration'] = self.reports_configuration.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Account from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "accountPermissionIds": obj.get("accountPermissionIds"),
            "accountProfile": obj.get("accountProfile"),
            "active": obj.get("active"),
            "activeAdsLimitTier": obj.get("activeAdsLimitTier"),
            "activeViewOptOut": obj.get("activeViewOptOut"),
            "availablePermissionIds": obj.get("availablePermissionIds"),
            "countryId": obj.get("countryId"),
            "currencyId": obj.get("currencyId"),
            "defaultCreativeSizeId": obj.get("defaultCreativeSizeId"),
            "description": obj.get("description"),
            "id": obj.get("id"),
            "kind": obj.get("kind"),
            "locale": obj.get("locale"),
            "maximumImageSize": obj.get("maximumImageSize"),
            "name": obj.get("name"),
            "nielsenOcrEnabled": obj.get("nielsenOcrEnabled"),
            "reportsConfiguration": ReportsConfiguration.from_dict(obj["reportsConfiguration"]) if obj.get("reportsConfiguration") is not None else None,
            "shareReportsWithTwitter": obj.get("shareReportsWithTwitter"),
            "teaserSizeLimit": obj.get("teaserSizeLimit")
        })
        return _obj



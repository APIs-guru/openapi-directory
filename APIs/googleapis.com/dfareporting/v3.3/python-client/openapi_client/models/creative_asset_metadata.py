# coding: utf-8

"""
    Campaign Manager 360 API

    Build applications to efficiently manage large or complex trafficking, reporting, and attribution workflows for Campaign Manager 360.

    The version of the OpenAPI document: v3.3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.click_tag import ClickTag
from openapi_client.models.creative_asset_id import CreativeAssetId
from openapi_client.models.dimension_value import DimensionValue
from typing import Optional, Set
from typing_extensions import Self

class CreativeAssetMetadata(BaseModel):
    """
    CreativeAssets contains properties of a creative asset file which will be uploaded or has already been uploaded. Refer to the creative sample code for how to upload assets and insert a creative.
    """ # noqa: E501
    asset_identifier: Optional[CreativeAssetId] = Field(default=None, alias="assetIdentifier")
    click_tags: Optional[List[ClickTag]] = Field(default=None, description="List of detected click tags for assets. This is a read-only, auto-generated field. This field is empty for a rich media asset.", alias="clickTags")
    detected_features: Optional[List[StrictStr]] = Field(default=None, description="List of feature dependencies for the creative asset that are detected by Campaign Manager. Feature dependencies are features that a browser must be able to support in order to render your HTML5 creative correctly. This is a read-only, auto-generated field.", alias="detectedFeatures")
    id: Optional[StrictStr] = Field(default=None, description="Numeric ID of the asset. This is a read-only, auto-generated field.")
    id_dimension_value: Optional[DimensionValue] = Field(default=None, alias="idDimensionValue")
    kind: Optional[StrictStr] = Field(default=None, description="Identifies what kind of resource this is. Value: the fixed string \"dfareporting#creativeAssetMetadata\".")
    warned_validation_rules: Optional[List[StrictStr]] = Field(default=None, description="Rules validated during code generation that generated a warning. This is a read-only, auto-generated field. Possible values are: - \"ADMOB_REFERENCED\" - \"ASSET_FORMAT_UNSUPPORTED_DCM\" - \"ASSET_INVALID\" - \"CLICK_TAG_HARD_CODED\" - \"CLICK_TAG_INVALID\" - \"CLICK_TAG_IN_GWD\" - \"CLICK_TAG_MISSING\" - \"CLICK_TAG_MORE_THAN_ONE\" - \"CLICK_TAG_NON_TOP_LEVEL\" - \"COMPONENT_UNSUPPORTED_DCM\" - \"ENABLER_UNSUPPORTED_METHOD_DCM\" - \"EXTERNAL_FILE_REFERENCED\" - \"FILE_DETAIL_EMPTY\" - \"FILE_TYPE_INVALID\" - \"GWD_PROPERTIES_INVALID\" - \"HTML5_FEATURE_UNSUPPORTED\" - \"LINKED_FILE_NOT_FOUND\" - \"MAX_FLASH_VERSION_11\" - \"MRAID_REFERENCED\" - \"NOT_SSL_COMPLIANT\" - \"ORPHANED_ASSET\" - \"PRIMARY_HTML_MISSING\" - \"SVG_INVALID\" - \"ZIP_INVALID\" ", alias="warnedValidationRules")
    __properties: ClassVar[List[str]] = ["assetIdentifier", "clickTags", "detectedFeatures", "id", "idDimensionValue", "kind", "warnedValidationRules"]

    @field_validator('detected_features')
    def detected_features_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        for i in value:
            if i not in set(['CSS_FONT_FACE', 'CSS_BACKGROUND_SIZE', 'CSS_BORDER_IMAGE', 'CSS_BORDER_RADIUS', 'CSS_BOX_SHADOW', 'CSS_FLEX_BOX', 'CSS_HSLA', 'CSS_MULTIPLE_BGS', 'CSS_OPACITY', 'CSS_RGBA', 'CSS_TEXT_SHADOW', 'CSS_ANIMATIONS', 'CSS_COLUMNS', 'CSS_GENERATED_CONTENT', 'CSS_GRADIENTS', 'CSS_REFLECTIONS', 'CSS_TRANSFORMS', 'CSS_TRANSFORMS3D', 'CSS_TRANSITIONS', 'APPLICATION_CACHE', 'CANVAS', 'CANVAS_TEXT', 'DRAG_AND_DROP', 'HASH_CHANGE', 'HISTORY', 'AUDIO', 'VIDEO', 'INDEXED_DB', 'INPUT_ATTR_AUTOCOMPLETE', 'INPUT_ATTR_AUTOFOCUS', 'INPUT_ATTR_LIST', 'INPUT_ATTR_PLACEHOLDER', 'INPUT_ATTR_MAX', 'INPUT_ATTR_MIN', 'INPUT_ATTR_MULTIPLE', 'INPUT_ATTR_PATTERN', 'INPUT_ATTR_REQUIRED', 'INPUT_ATTR_STEP', 'INPUT_TYPE_SEARCH', 'INPUT_TYPE_TEL', 'INPUT_TYPE_URL', 'INPUT_TYPE_EMAIL', 'INPUT_TYPE_DATETIME', 'INPUT_TYPE_DATE', 'INPUT_TYPE_MONTH', 'INPUT_TYPE_WEEK', 'INPUT_TYPE_TIME', 'INPUT_TYPE_DATETIME_LOCAL', 'INPUT_TYPE_NUMBER', 'INPUT_TYPE_RANGE', 'INPUT_TYPE_COLOR', 'LOCAL_STORAGE', 'POST_MESSAGE', 'SESSION_STORAGE', 'WEB_SOCKETS', 'WEB_SQL_DATABASE', 'WEB_WORKERS', 'GEO_LOCATION', 'INLINE_SVG', 'SMIL', 'SVG_HREF', 'SVG_CLIP_PATHS', 'TOUCH', 'WEBGL', 'SVG_FILTERS', 'SVG_FE_IMAGE']):
                raise ValueError("each list item must be one of ('CSS_FONT_FACE', 'CSS_BACKGROUND_SIZE', 'CSS_BORDER_IMAGE', 'CSS_BORDER_RADIUS', 'CSS_BOX_SHADOW', 'CSS_FLEX_BOX', 'CSS_HSLA', 'CSS_MULTIPLE_BGS', 'CSS_OPACITY', 'CSS_RGBA', 'CSS_TEXT_SHADOW', 'CSS_ANIMATIONS', 'CSS_COLUMNS', 'CSS_GENERATED_CONTENT', 'CSS_GRADIENTS', 'CSS_REFLECTIONS', 'CSS_TRANSFORMS', 'CSS_TRANSFORMS3D', 'CSS_TRANSITIONS', 'APPLICATION_CACHE', 'CANVAS', 'CANVAS_TEXT', 'DRAG_AND_DROP', 'HASH_CHANGE', 'HISTORY', 'AUDIO', 'VIDEO', 'INDEXED_DB', 'INPUT_ATTR_AUTOCOMPLETE', 'INPUT_ATTR_AUTOFOCUS', 'INPUT_ATTR_LIST', 'INPUT_ATTR_PLACEHOLDER', 'INPUT_ATTR_MAX', 'INPUT_ATTR_MIN', 'INPUT_ATTR_MULTIPLE', 'INPUT_ATTR_PATTERN', 'INPUT_ATTR_REQUIRED', 'INPUT_ATTR_STEP', 'INPUT_TYPE_SEARCH', 'INPUT_TYPE_TEL', 'INPUT_TYPE_URL', 'INPUT_TYPE_EMAIL', 'INPUT_TYPE_DATETIME', 'INPUT_TYPE_DATE', 'INPUT_TYPE_MONTH', 'INPUT_TYPE_WEEK', 'INPUT_TYPE_TIME', 'INPUT_TYPE_DATETIME_LOCAL', 'INPUT_TYPE_NUMBER', 'INPUT_TYPE_RANGE', 'INPUT_TYPE_COLOR', 'LOCAL_STORAGE', 'POST_MESSAGE', 'SESSION_STORAGE', 'WEB_SOCKETS', 'WEB_SQL_DATABASE', 'WEB_WORKERS', 'GEO_LOCATION', 'INLINE_SVG', 'SMIL', 'SVG_HREF', 'SVG_CLIP_PATHS', 'TOUCH', 'WEBGL', 'SVG_FILTERS', 'SVG_FE_IMAGE')")
        return value

    @field_validator('warned_validation_rules')
    def warned_validation_rules_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        for i in value:
            if i not in set(['CLICK_TAG_NON_TOP_LEVEL', 'CLICK_TAG_MISSING', 'CLICK_TAG_MORE_THAN_ONE', 'CLICK_TAG_INVALID', 'ORPHANED_ASSET', 'PRIMARY_HTML_MISSING', 'EXTERNAL_FILE_REFERENCED', 'MRAID_REFERENCED', 'ADMOB_REFERENCED', 'FILE_TYPE_INVALID', 'ZIP_INVALID', 'LINKED_FILE_NOT_FOUND', 'MAX_FLASH_VERSION_11', 'NOT_SSL_COMPLIANT', 'FILE_DETAIL_EMPTY', 'ASSET_INVALID', 'GWD_PROPERTIES_INVALID', 'ENABLER_UNSUPPORTED_METHOD_DCM', 'ASSET_FORMAT_UNSUPPORTED_DCM', 'COMPONENT_UNSUPPORTED_DCM', 'HTML5_FEATURE_UNSUPPORTED', 'CLICK_TAG_IN_GWD', 'CLICK_TAG_HARD_CODED', 'SVG_INVALID', 'CLICK_TAG_IN_RICH_MEDIA']):
                raise ValueError("each list item must be one of ('CLICK_TAG_NON_TOP_LEVEL', 'CLICK_TAG_MISSING', 'CLICK_TAG_MORE_THAN_ONE', 'CLICK_TAG_INVALID', 'ORPHANED_ASSET', 'PRIMARY_HTML_MISSING', 'EXTERNAL_FILE_REFERENCED', 'MRAID_REFERENCED', 'ADMOB_REFERENCED', 'FILE_TYPE_INVALID', 'ZIP_INVALID', 'LINKED_FILE_NOT_FOUND', 'MAX_FLASH_VERSION_11', 'NOT_SSL_COMPLIANT', 'FILE_DETAIL_EMPTY', 'ASSET_INVALID', 'GWD_PROPERTIES_INVALID', 'ENABLER_UNSUPPORTED_METHOD_DCM', 'ASSET_FORMAT_UNSUPPORTED_DCM', 'COMPONENT_UNSUPPORTED_DCM', 'HTML5_FEATURE_UNSUPPORTED', 'CLICK_TAG_IN_GWD', 'CLICK_TAG_HARD_CODED', 'SVG_INVALID', 'CLICK_TAG_IN_RICH_MEDIA')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CreativeAssetMetadata from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of asset_identifier
        if self.asset_identifier:
            _dict['assetIdentifier'] = self.asset_identifier.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in click_tags (list)
        _items = []
        if self.click_tags:
            for _item_click_tags in self.click_tags:
                if _item_click_tags:
                    _items.append(_item_click_tags.to_dict())
            _dict['clickTags'] = _items
        # override the default output from pydantic by calling `to_dict()` of id_dimension_value
        if self.id_dimension_value:
            _dict['idDimensionValue'] = self.id_dimension_value.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CreativeAssetMetadata from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "assetIdentifier": CreativeAssetId.from_dict(obj["assetIdentifier"]) if obj.get("assetIdentifier") is not None else None,
            "clickTags": [ClickTag.from_dict(_item) for _item in obj["clickTags"]] if obj.get("clickTags") is not None else None,
            "detectedFeatures": obj.get("detectedFeatures"),
            "id": obj.get("id"),
            "idDimensionValue": DimensionValue.from_dict(obj["idDimensionValue"]) if obj.get("idDimensionValue") is not None else None,
            "kind": obj.get("kind"),
            "warnedValidationRules": obj.get("warnedValidationRules")
        })
        return _obj



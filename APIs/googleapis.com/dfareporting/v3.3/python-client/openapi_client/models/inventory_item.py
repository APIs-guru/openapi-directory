# coding: utf-8

"""
    Campaign Manager 360 API

    Build applications to efficiently manage large or complex trafficking, reporting, and attribution workflows for Campaign Manager 360.

    The version of the OpenAPI document: v3.3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.ad_slot import AdSlot
from openapi_client.models.last_modified_info import LastModifiedInfo
from openapi_client.models.pricing import Pricing
from typing import Optional, Set
from typing_extensions import Self

class InventoryItem(BaseModel):
    """
    Represents a buy from the Planning inventory store.
    """ # noqa: E501
    account_id: Optional[StrictStr] = Field(default=None, description="Account ID of this inventory item.", alias="accountId")
    ad_slots: Optional[List[AdSlot]] = Field(default=None, description="Ad slots of this inventory item. If this inventory item represents a standalone placement, there will be exactly one ad slot. If this inventory item represents a placement group, there will be more than one ad slot, each representing one child placement in that placement group.", alias="adSlots")
    advertiser_id: Optional[StrictStr] = Field(default=None, description="Advertiser ID of this inventory item.", alias="advertiserId")
    content_category_id: Optional[StrictStr] = Field(default=None, description="Content category ID of this inventory item.", alias="contentCategoryId")
    estimated_click_through_rate: Optional[StrictStr] = Field(default=None, description="Estimated click-through rate of this inventory item.", alias="estimatedClickThroughRate")
    estimated_conversion_rate: Optional[StrictStr] = Field(default=None, description="Estimated conversion rate of this inventory item.", alias="estimatedConversionRate")
    id: Optional[StrictStr] = Field(default=None, description="ID of this inventory item.")
    in_plan: Optional[StrictBool] = Field(default=None, description="Whether this inventory item is in plan.", alias="inPlan")
    kind: Optional[StrictStr] = Field(default=None, description="Identifies what kind of resource this is. Value: the fixed string \"dfareporting#inventoryItem\".")
    last_modified_info: Optional[LastModifiedInfo] = Field(default=None, alias="lastModifiedInfo")
    name: Optional[StrictStr] = Field(default=None, description="Name of this inventory item. For standalone inventory items, this is the same name as that of its only ad slot. For group inventory items, this can differ from the name of any of its ad slots.")
    negotiation_channel_id: Optional[StrictStr] = Field(default=None, description="Negotiation channel ID of this inventory item.", alias="negotiationChannelId")
    order_id: Optional[StrictStr] = Field(default=None, description="Order ID of this inventory item.", alias="orderId")
    placement_strategy_id: Optional[StrictStr] = Field(default=None, description="Placement strategy ID of this inventory item.", alias="placementStrategyId")
    pricing: Optional[Pricing] = None
    project_id: Optional[StrictStr] = Field(default=None, description="Project ID of this inventory item.", alias="projectId")
    rfp_id: Optional[StrictStr] = Field(default=None, description="RFP ID of this inventory item.", alias="rfpId")
    site_id: Optional[StrictStr] = Field(default=None, description="ID of the site this inventory item is associated with.", alias="siteId")
    subaccount_id: Optional[StrictStr] = Field(default=None, description="Subaccount ID of this inventory item.", alias="subaccountId")
    type: Optional[StrictStr] = Field(default=None, description="Type of inventory item.")
    __properties: ClassVar[List[str]] = ["accountId", "adSlots", "advertiserId", "contentCategoryId", "estimatedClickThroughRate", "estimatedConversionRate", "id", "inPlan", "kind", "lastModifiedInfo", "name", "negotiationChannelId", "orderId", "placementStrategyId", "pricing", "projectId", "rfpId", "siteId", "subaccountId", "type"]

    @field_validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['PLANNING_PLACEMENT_TYPE_REGULAR', 'PLANNING_PLACEMENT_TYPE_CREDIT']):
            raise ValueError("must be one of enum values ('PLANNING_PLACEMENT_TYPE_REGULAR', 'PLANNING_PLACEMENT_TYPE_CREDIT')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of InventoryItem from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in ad_slots (list)
        _items = []
        if self.ad_slots:
            for _item_ad_slots in self.ad_slots:
                if _item_ad_slots:
                    _items.append(_item_ad_slots.to_dict())
            _dict['adSlots'] = _items
        # override the default output from pydantic by calling `to_dict()` of last_modified_info
        if self.last_modified_info:
            _dict['lastModifiedInfo'] = self.last_modified_info.to_dict()
        # override the default output from pydantic by calling `to_dict()` of pricing
        if self.pricing:
            _dict['pricing'] = self.pricing.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of InventoryItem from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "accountId": obj.get("accountId"),
            "adSlots": [AdSlot.from_dict(_item) for _item in obj["adSlots"]] if obj.get("adSlots") is not None else None,
            "advertiserId": obj.get("advertiserId"),
            "contentCategoryId": obj.get("contentCategoryId"),
            "estimatedClickThroughRate": obj.get("estimatedClickThroughRate"),
            "estimatedConversionRate": obj.get("estimatedConversionRate"),
            "id": obj.get("id"),
            "inPlan": obj.get("inPlan"),
            "kind": obj.get("kind"),
            "lastModifiedInfo": LastModifiedInfo.from_dict(obj["lastModifiedInfo"]) if obj.get("lastModifiedInfo") is not None else None,
            "name": obj.get("name"),
            "negotiationChannelId": obj.get("negotiationChannelId"),
            "orderId": obj.get("orderId"),
            "placementStrategyId": obj.get("placementStrategyId"),
            "pricing": Pricing.from_dict(obj["pricing"]) if obj.get("pricing") is not None else None,
            "projectId": obj.get("projectId"),
            "rfpId": obj.get("rfpId"),
            "siteId": obj.get("siteId"),
            "subaccountId": obj.get("subaccountId"),
            "type": obj.get("type")
        })
        return _obj



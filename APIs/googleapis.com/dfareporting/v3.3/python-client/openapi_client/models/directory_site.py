# coding: utf-8

"""
    Campaign Manager 360 API

    Build applications to efficiently manage large or complex trafficking, reporting, and attribution workflows for Campaign Manager 360.

    The version of the OpenAPI document: v3.3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.dimension_value import DimensionValue
from openapi_client.models.directory_site_settings import DirectorySiteSettings
from typing import Optional, Set
from typing_extensions import Self

class DirectorySite(BaseModel):
    """
    DirectorySites contains properties of a website from the Site Directory. Sites need to be added to an account via the Sites resource before they can be assigned to a placement.
    """ # noqa: E501
    active: Optional[StrictBool] = Field(default=None, description="Whether this directory site is active.")
    id: Optional[StrictStr] = Field(default=None, description="ID of this directory site. This is a read-only, auto-generated field.")
    id_dimension_value: Optional[DimensionValue] = Field(default=None, alias="idDimensionValue")
    inpage_tag_formats: Optional[List[StrictStr]] = Field(default=None, description="Tag types for regular placements. Acceptable values are: - \"STANDARD\" - \"IFRAME_JAVASCRIPT_INPAGE\" - \"INTERNAL_REDIRECT_INPAGE\" - \"JAVASCRIPT_INPAGE\" ", alias="inpageTagFormats")
    interstitial_tag_formats: Optional[List[StrictStr]] = Field(default=None, description="Tag types for interstitial placements. Acceptable values are: - \"IFRAME_JAVASCRIPT_INTERSTITIAL\" - \"INTERNAL_REDIRECT_INTERSTITIAL\" - \"JAVASCRIPT_INTERSTITIAL\" ", alias="interstitialTagFormats")
    kind: Optional[StrictStr] = Field(default=None, description="Identifies what kind of resource this is. Value: the fixed string \"dfareporting#directorySite\".")
    name: Optional[StrictStr] = Field(default=None, description="Name of this directory site.")
    settings: Optional[DirectorySiteSettings] = None
    url: Optional[StrictStr] = Field(default=None, description="URL of this directory site.")
    __properties: ClassVar[List[str]] = ["active", "id", "idDimensionValue", "inpageTagFormats", "interstitialTagFormats", "kind", "name", "settings", "url"]

    @field_validator('inpage_tag_formats')
    def inpage_tag_formats_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        for i in value:
            if i not in set(['STANDARD', 'IFRAME_JAVASCRIPT_INPAGE', 'INTERNAL_REDIRECT_INPAGE', 'JAVASCRIPT_INPAGE']):
                raise ValueError("each list item must be one of ('STANDARD', 'IFRAME_JAVASCRIPT_INPAGE', 'INTERNAL_REDIRECT_INPAGE', 'JAVASCRIPT_INPAGE')")
        return value

    @field_validator('interstitial_tag_formats')
    def interstitial_tag_formats_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        for i in value:
            if i not in set(['IFRAME_JAVASCRIPT_INTERSTITIAL', 'INTERNAL_REDIRECT_INTERSTITIAL', 'JAVASCRIPT_INTERSTITIAL']):
                raise ValueError("each list item must be one of ('IFRAME_JAVASCRIPT_INTERSTITIAL', 'INTERNAL_REDIRECT_INTERSTITIAL', 'JAVASCRIPT_INTERSTITIAL')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DirectorySite from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of id_dimension_value
        if self.id_dimension_value:
            _dict['idDimensionValue'] = self.id_dimension_value.to_dict()
        # override the default output from pydantic by calling `to_dict()` of settings
        if self.settings:
            _dict['settings'] = self.settings.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DirectorySite from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "active": obj.get("active"),
            "id": obj.get("id"),
            "idDimensionValue": DimensionValue.from_dict(obj["idDimensionValue"]) if obj.get("idDimensionValue") is not None else None,
            "inpageTagFormats": obj.get("inpageTagFormats"),
            "interstitialTagFormats": obj.get("interstitialTagFormats"),
            "kind": obj.get("kind"),
            "name": obj.get("name"),
            "settings": DirectorySiteSettings.from_dict(obj["settings"]) if obj.get("settings") is not None else None,
            "url": obj.get("url")
        })
        return _obj



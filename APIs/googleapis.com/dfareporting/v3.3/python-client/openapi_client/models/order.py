# coding: utf-8

"""
    Campaign Manager 360 API

    Build applications to efficiently manage large or complex trafficking, reporting, and attribution workflows for Campaign Manager 360.

    The version of the OpenAPI document: v3.3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.last_modified_info import LastModifiedInfo
from openapi_client.models.order_contact import OrderContact
from typing import Optional, Set
from typing_extensions import Self

class Order(BaseModel):
    """
    Describes properties of a Planning order.
    """ # noqa: E501
    account_id: Optional[StrictStr] = Field(default=None, description="Account ID of this order.", alias="accountId")
    advertiser_id: Optional[StrictStr] = Field(default=None, description="Advertiser ID of this order.", alias="advertiserId")
    approver_user_profile_ids: Optional[List[StrictStr]] = Field(default=None, description="IDs for users that have to approve documents created for this order.", alias="approverUserProfileIds")
    buyer_invoice_id: Optional[StrictStr] = Field(default=None, description="Buyer invoice ID associated with this order.", alias="buyerInvoiceId")
    buyer_organization_name: Optional[StrictStr] = Field(default=None, description="Name of the buyer organization.", alias="buyerOrganizationName")
    comments: Optional[StrictStr] = Field(default=None, description="Comments in this order.")
    contacts: Optional[List[OrderContact]] = Field(default=None, description="Contacts for this order.")
    id: Optional[StrictStr] = Field(default=None, description="ID of this order. This is a read-only, auto-generated field.")
    kind: Optional[StrictStr] = Field(default=None, description="Identifies what kind of resource this is. Value: the fixed string \"dfareporting#order\".")
    last_modified_info: Optional[LastModifiedInfo] = Field(default=None, alias="lastModifiedInfo")
    name: Optional[StrictStr] = Field(default=None, description="Name of this order.")
    notes: Optional[StrictStr] = Field(default=None, description="Notes of this order.")
    planning_term_id: Optional[StrictStr] = Field(default=None, description="ID of the terms and conditions template used in this order.", alias="planningTermId")
    project_id: Optional[StrictStr] = Field(default=None, description="Project ID of this order.", alias="projectId")
    seller_order_id: Optional[StrictStr] = Field(default=None, description="Seller order ID associated with this order.", alias="sellerOrderId")
    seller_organization_name: Optional[StrictStr] = Field(default=None, description="Name of the seller organization.", alias="sellerOrganizationName")
    site_id: Optional[List[StrictStr]] = Field(default=None, description="Site IDs this order is associated with.", alias="siteId")
    site_names: Optional[List[StrictStr]] = Field(default=None, description="Free-form site names this order is associated with.", alias="siteNames")
    subaccount_id: Optional[StrictStr] = Field(default=None, description="Subaccount ID of this order.", alias="subaccountId")
    terms_and_conditions: Optional[StrictStr] = Field(default=None, description="Terms and conditions of this order.", alias="termsAndConditions")
    __properties: ClassVar[List[str]] = ["accountId", "advertiserId", "approverUserProfileIds", "buyerInvoiceId", "buyerOrganizationName", "comments", "contacts", "id", "kind", "lastModifiedInfo", "name", "notes", "planningTermId", "projectId", "sellerOrderId", "sellerOrganizationName", "siteId", "siteNames", "subaccountId", "termsAndConditions"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Order from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in contacts (list)
        _items = []
        if self.contacts:
            for _item_contacts in self.contacts:
                if _item_contacts:
                    _items.append(_item_contacts.to_dict())
            _dict['contacts'] = _items
        # override the default output from pydantic by calling `to_dict()` of last_modified_info
        if self.last_modified_info:
            _dict['lastModifiedInfo'] = self.last_modified_info.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Order from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "accountId": obj.get("accountId"),
            "advertiserId": obj.get("advertiserId"),
            "approverUserProfileIds": obj.get("approverUserProfileIds"),
            "buyerInvoiceId": obj.get("buyerInvoiceId"),
            "buyerOrganizationName": obj.get("buyerOrganizationName"),
            "comments": obj.get("comments"),
            "contacts": [OrderContact.from_dict(_item) for _item in obj["contacts"]] if obj.get("contacts") is not None else None,
            "id": obj.get("id"),
            "kind": obj.get("kind"),
            "lastModifiedInfo": LastModifiedInfo.from_dict(obj["lastModifiedInfo"]) if obj.get("lastModifiedInfo") is not None else None,
            "name": obj.get("name"),
            "notes": obj.get("notes"),
            "planningTermId": obj.get("planningTermId"),
            "projectId": obj.get("projectId"),
            "sellerOrderId": obj.get("sellerOrderId"),
            "sellerOrganizationName": obj.get("sellerOrganizationName"),
            "siteId": obj.get("siteId"),
            "siteNames": obj.get("siteNames"),
            "subaccountId": obj.get("subaccountId"),
            "termsAndConditions": obj.get("termsAndConditions")
        })
        return _obj



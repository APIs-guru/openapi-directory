# coding: utf-8

"""
    Campaign Manager 360 API

    Build applications to efficiently manage large or complex trafficking, reporting, and attribution workflows for Campaign Manager 360.

    The version of the OpenAPI document: v3.3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.video_offset import VideoOffset
from typing import Optional, Set
from typing_extensions import Self

class SiteSkippableSetting(BaseModel):
    """
    Skippable Settings
    """ # noqa: E501
    kind: Optional[StrictStr] = Field(default=None, description="Identifies what kind of resource this is. Value: the fixed string \"dfareporting#siteSkippableSetting\".")
    progress_offset: Optional[VideoOffset] = Field(default=None, alias="progressOffset")
    skip_offset: Optional[VideoOffset] = Field(default=None, alias="skipOffset")
    skippable: Optional[StrictBool] = Field(default=None, description="Whether the user can skip creatives served to this site. This will act as default for new placements created under this site.")
    __properties: ClassVar[List[str]] = ["kind", "progressOffset", "skipOffset", "skippable"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SiteSkippableSetting from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of progress_offset
        if self.progress_offset:
            _dict['progressOffset'] = self.progress_offset.to_dict()
        # override the default output from pydantic by calling `to_dict()` of skip_offset
        if self.skip_offset:
            _dict['skipOffset'] = self.skip_offset.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SiteSkippableSetting from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "kind": obj.get("kind"),
            "progressOffset": VideoOffset.from_dict(obj["progressOffset"]) if obj.get("progressOffset") is not None else None,
            "skipOffset": VideoOffset.from_dict(obj["skipOffset"]) if obj.get("skipOffset") is not None else None,
            "skippable": obj.get("skippable")
        })
        return _obj



# coding: utf-8

"""
    Campaign Manager 360 API

    Build applications to efficiently manage large or complex trafficking, reporting, and attribution workflows for Campaign Manager 360.

    The version of the OpenAPI document: v3.3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.dimension_value import DimensionValue
from typing import Optional, Set
from typing_extensions import Self

class FloodlightActivityGroup(BaseModel):
    """
    Contains properties of a Floodlight activity group.
    """ # noqa: E501
    account_id: Optional[StrictStr] = Field(default=None, description="Account ID of this floodlight activity group. This is a read-only field that can be left blank.", alias="accountId")
    advertiser_id: Optional[StrictStr] = Field(default=None, description="Advertiser ID of this floodlight activity group. If this field is left blank, the value will be copied over either from the floodlight configuration's advertiser or from the existing activity group's advertiser.", alias="advertiserId")
    advertiser_id_dimension_value: Optional[DimensionValue] = Field(default=None, alias="advertiserIdDimensionValue")
    floodlight_configuration_id: Optional[StrictStr] = Field(default=None, description="Floodlight configuration ID of this floodlight activity group. This is a required field.", alias="floodlightConfigurationId")
    floodlight_configuration_id_dimension_value: Optional[DimensionValue] = Field(default=None, alias="floodlightConfigurationIdDimensionValue")
    id: Optional[StrictStr] = Field(default=None, description="ID of this floodlight activity group. This is a read-only, auto-generated field.")
    id_dimension_value: Optional[DimensionValue] = Field(default=None, alias="idDimensionValue")
    kind: Optional[StrictStr] = Field(default=None, description="Identifies what kind of resource this is. Value: the fixed string \"dfareporting#floodlightActivityGroup\".")
    name: Optional[StrictStr] = Field(default=None, description="Name of this floodlight activity group. This is a required field. Must be less than 65 characters long and cannot contain quotes.")
    subaccount_id: Optional[StrictStr] = Field(default=None, description="Subaccount ID of this floodlight activity group. This is a read-only field that can be left blank.", alias="subaccountId")
    tag_string: Optional[StrictStr] = Field(default=None, description="Value of the type= parameter in the floodlight tag, which the ad servers use to identify the activity group that the activity belongs to. This is optional: if empty, a new tag string will be generated for you. This string must be 1 to 8 characters long, with valid characters being a-z0-9[ _ ]. This tag string must also be unique among activity groups of the same floodlight configuration. This field is read-only after insertion.", alias="tagString")
    type: Optional[StrictStr] = Field(default=None, description="Type of the floodlight activity group. This is a required field that is read-only after insertion.")
    __properties: ClassVar[List[str]] = ["accountId", "advertiserId", "advertiserIdDimensionValue", "floodlightConfigurationId", "floodlightConfigurationIdDimensionValue", "id", "idDimensionValue", "kind", "name", "subaccountId", "tagString", "type"]

    @field_validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['COUNTER', 'SALE']):
            raise ValueError("must be one of enum values ('COUNTER', 'SALE')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of FloodlightActivityGroup from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of advertiser_id_dimension_value
        if self.advertiser_id_dimension_value:
            _dict['advertiserIdDimensionValue'] = self.advertiser_id_dimension_value.to_dict()
        # override the default output from pydantic by calling `to_dict()` of floodlight_configuration_id_dimension_value
        if self.floodlight_configuration_id_dimension_value:
            _dict['floodlightConfigurationIdDimensionValue'] = self.floodlight_configuration_id_dimension_value.to_dict()
        # override the default output from pydantic by calling `to_dict()` of id_dimension_value
        if self.id_dimension_value:
            _dict['idDimensionValue'] = self.id_dimension_value.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of FloodlightActivityGroup from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "accountId": obj.get("accountId"),
            "advertiserId": obj.get("advertiserId"),
            "advertiserIdDimensionValue": DimensionValue.from_dict(obj["advertiserIdDimensionValue"]) if obj.get("advertiserIdDimensionValue") is not None else None,
            "floodlightConfigurationId": obj.get("floodlightConfigurationId"),
            "floodlightConfigurationIdDimensionValue": DimensionValue.from_dict(obj["floodlightConfigurationIdDimensionValue"]) if obj.get("floodlightConfigurationIdDimensionValue") is not None else None,
            "id": obj.get("id"),
            "idDimensionValue": DimensionValue.from_dict(obj["idDimensionValue"]) if obj.get("idDimensionValue") is not None else None,
            "kind": obj.get("kind"),
            "name": obj.get("name"),
            "subaccountId": obj.get("subaccountId"),
            "tagString": obj.get("tagString"),
            "type": obj.get("type")
        })
        return _obj



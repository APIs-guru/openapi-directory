# coding: utf-8

"""
    Campaign Manager 360 API

    Build applications to efficiently manage large or complex trafficking, reporting, and attribution workflows for Campaign Manager 360.

    The version of the OpenAPI document: v3.3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.dimension_value import DimensionValue
from openapi_client.models.last_modified_info import LastModifiedInfo
from openapi_client.models.pricing_schedule import PricingSchedule
from typing import Optional, Set
from typing_extensions import Self

class PlacementGroup(BaseModel):
    """
    Contains properties of a package or roadblock.
    """ # noqa: E501
    account_id: Optional[StrictStr] = Field(default=None, description="Account ID of this placement group. This is a read-only field that can be left blank.", alias="accountId")
    advertiser_id: Optional[StrictStr] = Field(default=None, description="Advertiser ID of this placement group. This is a required field on insertion.", alias="advertiserId")
    advertiser_id_dimension_value: Optional[DimensionValue] = Field(default=None, alias="advertiserIdDimensionValue")
    archived: Optional[StrictBool] = Field(default=None, description="Whether this placement group is archived.")
    campaign_id: Optional[StrictStr] = Field(default=None, description="Campaign ID of this placement group. This field is required on insertion.", alias="campaignId")
    campaign_id_dimension_value: Optional[DimensionValue] = Field(default=None, alias="campaignIdDimensionValue")
    child_placement_ids: Optional[List[StrictStr]] = Field(default=None, description="IDs of placements which are assigned to this placement group. This is a read-only, auto-generated field.", alias="childPlacementIds")
    comment: Optional[StrictStr] = Field(default=None, description="Comments for this placement group.")
    content_category_id: Optional[StrictStr] = Field(default=None, description="ID of the content category assigned to this placement group.", alias="contentCategoryId")
    create_info: Optional[LastModifiedInfo] = Field(default=None, alias="createInfo")
    directory_site_id: Optional[StrictStr] = Field(default=None, description="Directory site ID associated with this placement group. On insert, you must set either this field or the site_id field to specify the site associated with this placement group. This is a required field that is read-only after insertion.", alias="directorySiteId")
    directory_site_id_dimension_value: Optional[DimensionValue] = Field(default=None, alias="directorySiteIdDimensionValue")
    external_id: Optional[StrictStr] = Field(default=None, description="External ID for this placement.", alias="externalId")
    id: Optional[StrictStr] = Field(default=None, description="ID of this placement group. This is a read-only, auto-generated field.")
    id_dimension_value: Optional[DimensionValue] = Field(default=None, alias="idDimensionValue")
    kind: Optional[StrictStr] = Field(default=None, description="Identifies what kind of resource this is. Value: the fixed string \"dfareporting#placementGroup\".")
    last_modified_info: Optional[LastModifiedInfo] = Field(default=None, alias="lastModifiedInfo")
    name: Optional[StrictStr] = Field(default=None, description="Name of this placement group. This is a required field and must be less than 256 characters long.")
    placement_group_type: Optional[StrictStr] = Field(default=None, description="Type of this placement group. A package is a simple group of placements that acts as a single pricing point for a group of tags. A roadblock is a group of placements that not only acts as a single pricing point, but also assumes that all the tags in it will be served at the same time. A roadblock requires one of its assigned placements to be marked as primary for reporting. This field is required on insertion.", alias="placementGroupType")
    placement_strategy_id: Optional[StrictStr] = Field(default=None, description="ID of the placement strategy assigned to this placement group.", alias="placementStrategyId")
    pricing_schedule: Optional[PricingSchedule] = Field(default=None, alias="pricingSchedule")
    primary_placement_id: Optional[StrictStr] = Field(default=None, description="ID of the primary placement, used to calculate the media cost of a roadblock (placement group). Modifying this field will automatically modify the primary field on all affected roadblock child placements.", alias="primaryPlacementId")
    primary_placement_id_dimension_value: Optional[DimensionValue] = Field(default=None, alias="primaryPlacementIdDimensionValue")
    site_id: Optional[StrictStr] = Field(default=None, description="Site ID associated with this placement group. On insert, you must set either this field or the directorySiteId field to specify the site associated with this placement group. This is a required field that is read-only after insertion.", alias="siteId")
    site_id_dimension_value: Optional[DimensionValue] = Field(default=None, alias="siteIdDimensionValue")
    subaccount_id: Optional[StrictStr] = Field(default=None, description="Subaccount ID of this placement group. This is a read-only field that can be left blank.", alias="subaccountId")
    __properties: ClassVar[List[str]] = ["accountId", "advertiserId", "advertiserIdDimensionValue", "archived", "campaignId", "campaignIdDimensionValue", "childPlacementIds", "comment", "contentCategoryId", "createInfo", "directorySiteId", "directorySiteIdDimensionValue", "externalId", "id", "idDimensionValue", "kind", "lastModifiedInfo", "name", "placementGroupType", "placementStrategyId", "pricingSchedule", "primaryPlacementId", "primaryPlacementIdDimensionValue", "siteId", "siteIdDimensionValue", "subaccountId"]

    @field_validator('placement_group_type')
    def placement_group_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['PLACEMENT_PACKAGE', 'PLACEMENT_ROADBLOCK']):
            raise ValueError("must be one of enum values ('PLACEMENT_PACKAGE', 'PLACEMENT_ROADBLOCK')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PlacementGroup from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of advertiser_id_dimension_value
        if self.advertiser_id_dimension_value:
            _dict['advertiserIdDimensionValue'] = self.advertiser_id_dimension_value.to_dict()
        # override the default output from pydantic by calling `to_dict()` of campaign_id_dimension_value
        if self.campaign_id_dimension_value:
            _dict['campaignIdDimensionValue'] = self.campaign_id_dimension_value.to_dict()
        # override the default output from pydantic by calling `to_dict()` of create_info
        if self.create_info:
            _dict['createInfo'] = self.create_info.to_dict()
        # override the default output from pydantic by calling `to_dict()` of directory_site_id_dimension_value
        if self.directory_site_id_dimension_value:
            _dict['directorySiteIdDimensionValue'] = self.directory_site_id_dimension_value.to_dict()
        # override the default output from pydantic by calling `to_dict()` of id_dimension_value
        if self.id_dimension_value:
            _dict['idDimensionValue'] = self.id_dimension_value.to_dict()
        # override the default output from pydantic by calling `to_dict()` of last_modified_info
        if self.last_modified_info:
            _dict['lastModifiedInfo'] = self.last_modified_info.to_dict()
        # override the default output from pydantic by calling `to_dict()` of pricing_schedule
        if self.pricing_schedule:
            _dict['pricingSchedule'] = self.pricing_schedule.to_dict()
        # override the default output from pydantic by calling `to_dict()` of primary_placement_id_dimension_value
        if self.primary_placement_id_dimension_value:
            _dict['primaryPlacementIdDimensionValue'] = self.primary_placement_id_dimension_value.to_dict()
        # override the default output from pydantic by calling `to_dict()` of site_id_dimension_value
        if self.site_id_dimension_value:
            _dict['siteIdDimensionValue'] = self.site_id_dimension_value.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PlacementGroup from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "accountId": obj.get("accountId"),
            "advertiserId": obj.get("advertiserId"),
            "advertiserIdDimensionValue": DimensionValue.from_dict(obj["advertiserIdDimensionValue"]) if obj.get("advertiserIdDimensionValue") is not None else None,
            "archived": obj.get("archived"),
            "campaignId": obj.get("campaignId"),
            "campaignIdDimensionValue": DimensionValue.from_dict(obj["campaignIdDimensionValue"]) if obj.get("campaignIdDimensionValue") is not None else None,
            "childPlacementIds": obj.get("childPlacementIds"),
            "comment": obj.get("comment"),
            "contentCategoryId": obj.get("contentCategoryId"),
            "createInfo": LastModifiedInfo.from_dict(obj["createInfo"]) if obj.get("createInfo") is not None else None,
            "directorySiteId": obj.get("directorySiteId"),
            "directorySiteIdDimensionValue": DimensionValue.from_dict(obj["directorySiteIdDimensionValue"]) if obj.get("directorySiteIdDimensionValue") is not None else None,
            "externalId": obj.get("externalId"),
            "id": obj.get("id"),
            "idDimensionValue": DimensionValue.from_dict(obj["idDimensionValue"]) if obj.get("idDimensionValue") is not None else None,
            "kind": obj.get("kind"),
            "lastModifiedInfo": LastModifiedInfo.from_dict(obj["lastModifiedInfo"]) if obj.get("lastModifiedInfo") is not None else None,
            "name": obj.get("name"),
            "placementGroupType": obj.get("placementGroupType"),
            "placementStrategyId": obj.get("placementStrategyId"),
            "pricingSchedule": PricingSchedule.from_dict(obj["pricingSchedule"]) if obj.get("pricingSchedule") is not None else None,
            "primaryPlacementId": obj.get("primaryPlacementId"),
            "primaryPlacementIdDimensionValue": DimensionValue.from_dict(obj["primaryPlacementIdDimensionValue"]) if obj.get("primaryPlacementIdDimensionValue") is not None else None,
            "siteId": obj.get("siteId"),
            "siteIdDimensionValue": DimensionValue.from_dict(obj["siteIdDimensionValue"]) if obj.get("siteIdDimensionValue") is not None else None,
            "subaccountId": obj.get("subaccountId")
        })
        return _obj



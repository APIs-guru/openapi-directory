# coding: utf-8

"""
    Campaign Manager 360 API

    Build applications to efficiently manage large or complex trafficking, reporting, and attribution workflows for Campaign Manager 360.

    The version of the OpenAPI document: v3.3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.creative_assignment import CreativeAssignment
from typing import Optional, Set
from typing_extensions import Self

class CreativeRotation(BaseModel):
    """
    Creative Rotation.
    """ # noqa: E501
    creative_assignments: Optional[List[CreativeAssignment]] = Field(default=None, description="Creative assignments in this creative rotation.", alias="creativeAssignments")
    creative_optimization_configuration_id: Optional[StrictStr] = Field(default=None, description="Creative optimization configuration that is used by this ad. It should refer to one of the existing optimization configurations in the ad's campaign. If it is unset or set to 0, then the campaign's default optimization configuration will be used for this ad.", alias="creativeOptimizationConfigurationId")
    type: Optional[StrictStr] = Field(default=None, description="Type of creative rotation. Can be used to specify whether to use sequential or random rotation.")
    weight_calculation_strategy: Optional[StrictStr] = Field(default=None, description="Strategy for calculating weights. Used with CREATIVE_ROTATION_TYPE_RANDOM.", alias="weightCalculationStrategy")
    __properties: ClassVar[List[str]] = ["creativeAssignments", "creativeOptimizationConfigurationId", "type", "weightCalculationStrategy"]

    @field_validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['CREATIVE_ROTATION_TYPE_SEQUENTIAL', 'CREATIVE_ROTATION_TYPE_RANDOM']):
            raise ValueError("must be one of enum values ('CREATIVE_ROTATION_TYPE_SEQUENTIAL', 'CREATIVE_ROTATION_TYPE_RANDOM')")
        return value

    @field_validator('weight_calculation_strategy')
    def weight_calculation_strategy_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['WEIGHT_STRATEGY_EQUAL', 'WEIGHT_STRATEGY_CUSTOM', 'WEIGHT_STRATEGY_HIGHEST_CTR', 'WEIGHT_STRATEGY_OPTIMIZED']):
            raise ValueError("must be one of enum values ('WEIGHT_STRATEGY_EQUAL', 'WEIGHT_STRATEGY_CUSTOM', 'WEIGHT_STRATEGY_HIGHEST_CTR', 'WEIGHT_STRATEGY_OPTIMIZED')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CreativeRotation from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in creative_assignments (list)
        _items = []
        if self.creative_assignments:
            for _item_creative_assignments in self.creative_assignments:
                if _item_creative_assignments:
                    _items.append(_item_creative_assignments.to_dict())
            _dict['creativeAssignments'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CreativeRotation from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "creativeAssignments": [CreativeAssignment.from_dict(_item) for _item in obj["creativeAssignments"]] if obj.get("creativeAssignments") is not None else None,
            "creativeOptimizationConfigurationId": obj.get("creativeOptimizationConfigurationId"),
            "type": obj.get("type"),
            "weightCalculationStrategy": obj.get("weightCalculationStrategy")
        })
        return _obj



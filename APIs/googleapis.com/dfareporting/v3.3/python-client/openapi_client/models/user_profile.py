# coding: utf-8

"""
    Campaign Manager 360 API

    Build applications to efficiently manage large or complex trafficking, reporting, and attribution workflows for Campaign Manager 360.

    The version of the OpenAPI document: v3.3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class UserProfile(BaseModel):
    """
    A UserProfile resource lets you list all DFA user profiles that are associated with a Google user account. The profile_id needs to be specified in other API requests. 
    """ # noqa: E501
    account_id: Optional[StrictStr] = Field(default=None, description="The account ID to which this profile belongs.", alias="accountId")
    account_name: Optional[StrictStr] = Field(default=None, description="The account name this profile belongs to.", alias="accountName")
    etag: Optional[StrictStr] = Field(default=None, description="Etag of this resource.")
    kind: Optional[StrictStr] = Field(default=None, description="Identifies what kind of resource this is. Value: the fixed string \"dfareporting#userProfile\".")
    profile_id: Optional[StrictStr] = Field(default=None, description="The unique ID of the user profile.", alias="profileId")
    sub_account_id: Optional[StrictStr] = Field(default=None, description="The sub account ID this profile belongs to if applicable.", alias="subAccountId")
    sub_account_name: Optional[StrictStr] = Field(default=None, description="The sub account name this profile belongs to if applicable.", alias="subAccountName")
    user_name: Optional[StrictStr] = Field(default=None, description="The user name.", alias="userName")
    __properties: ClassVar[List[str]] = ["accountId", "accountName", "etag", "kind", "profileId", "subAccountId", "subAccountName", "userName"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of UserProfile from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of UserProfile from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "accountId": obj.get("accountId"),
            "accountName": obj.get("accountName"),
            "etag": obj.get("etag"),
            "kind": obj.get("kind"),
            "profileId": obj.get("profileId"),
            "subAccountId": obj.get("subAccountId"),
            "subAccountName": obj.get("subAccountName"),
            "userName": obj.get("userName")
        })
        return _obj



# coding: utf-8

"""
    Campaign Manager 360 API

    Build applications to efficiently manage large or complex trafficking, reporting, and attribution workflows for Campaign Manager 360.

    The version of the OpenAPI document: v3.3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class ReportFloodlightCriteriaReportProperties(BaseModel):
    """
    The properties of the report.
    """ # noqa: E501
    include_attributed_ip_conversions: Optional[StrictBool] = Field(default=None, description="Include conversions that have no cookie, but do have an exposure path.", alias="includeAttributedIPConversions")
    include_unattributed_cookie_conversions: Optional[StrictBool] = Field(default=None, description="Include conversions of users with a DoubleClick cookie but without an exposure. That means the user did not click or see an ad from the advertiser within the Floodlight group, or that the interaction happened outside the lookback window.", alias="includeUnattributedCookieConversions")
    include_unattributed_ip_conversions: Optional[StrictBool] = Field(default=None, description="Include conversions that have no associated cookies and no exposures. Itâ€™s therefore impossible to know how the user was exposed to your ads during the lookback window prior to a conversion.", alias="includeUnattributedIPConversions")
    __properties: ClassVar[List[str]] = ["includeAttributedIPConversions", "includeUnattributedCookieConversions", "includeUnattributedIPConversions"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ReportFloodlightCriteriaReportProperties from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ReportFloodlightCriteriaReportProperties from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "includeAttributedIPConversions": obj.get("includeAttributedIPConversions"),
            "includeUnattributedCookieConversions": obj.get("includeUnattributedCookieConversions"),
            "includeUnattributedIPConversions": obj.get("includeUnattributedIPConversions")
        })
        return _obj



# coding: utf-8

"""
    Campaign Manager 360 API

    Build applications to efficiently manage large or complex trafficking, reporting, and attribution workflows for Campaign Manager 360.

    The version of the OpenAPI document: v3.3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.dimension_value import DimensionValue
from typing import Optional, Set
from typing_extensions import Self

class Advertiser(BaseModel):
    """
    Contains properties of a Campaign Manager advertiser.
    """ # noqa: E501
    account_id: Optional[StrictStr] = Field(default=None, description="Account ID of this advertiser.This is a read-only field that can be left blank.", alias="accountId")
    advertiser_group_id: Optional[StrictStr] = Field(default=None, description="ID of the advertiser group this advertiser belongs to. You can group advertisers for reporting purposes, allowing you to see aggregated information for all advertisers in each group.", alias="advertiserGroupId")
    click_through_url_suffix: Optional[StrictStr] = Field(default=None, description="Suffix added to click-through URL of ad creative associations under this advertiser. Must be less than 129 characters long.", alias="clickThroughUrlSuffix")
    default_click_through_event_tag_id: Optional[StrictStr] = Field(default=None, description="ID of the click-through event tag to apply by default to the landing pages of this advertiser's campaigns.", alias="defaultClickThroughEventTagId")
    default_email: Optional[StrictStr] = Field(default=None, description="Default email address used in sender field for tag emails.", alias="defaultEmail")
    floodlight_configuration_id: Optional[StrictStr] = Field(default=None, description="Floodlight configuration ID of this advertiser. The floodlight configuration ID will be created automatically, so on insert this field should be left blank. This field can be set to another advertiser's floodlight configuration ID in order to share that advertiser's floodlight configuration with this advertiser, so long as: - This advertiser's original floodlight configuration is not already associated with floodlight activities or floodlight activity groups. - This advertiser's original floodlight configuration is not already shared with another advertiser. ", alias="floodlightConfigurationId")
    floodlight_configuration_id_dimension_value: Optional[DimensionValue] = Field(default=None, alias="floodlightConfigurationIdDimensionValue")
    id: Optional[StrictStr] = Field(default=None, description="ID of this advertiser. This is a read-only, auto-generated field.")
    id_dimension_value: Optional[DimensionValue] = Field(default=None, alias="idDimensionValue")
    kind: Optional[StrictStr] = Field(default=None, description="Identifies what kind of resource this is. Value: the fixed string \"dfareporting#advertiser\".")
    name: Optional[StrictStr] = Field(default=None, description="Name of this advertiser. This is a required field and must be less than 256 characters long and unique among advertisers of the same account.")
    original_floodlight_configuration_id: Optional[StrictStr] = Field(default=None, description="Original floodlight configuration before any sharing occurred. Set the floodlightConfigurationId of this advertiser to originalFloodlightConfigurationId to unshare the advertiser's current floodlight configuration. You cannot unshare an advertiser's floodlight configuration if the shared configuration has activities associated with any campaign or placement.", alias="originalFloodlightConfigurationId")
    status: Optional[StrictStr] = Field(default=None, description="Status of this advertiser.")
    subaccount_id: Optional[StrictStr] = Field(default=None, description="Subaccount ID of this advertiser.This is a read-only field that can be left blank.", alias="subaccountId")
    suspended: Optional[StrictBool] = Field(default=None, description="Suspension status of this advertiser.")
    __properties: ClassVar[List[str]] = ["accountId", "advertiserGroupId", "clickThroughUrlSuffix", "defaultClickThroughEventTagId", "defaultEmail", "floodlightConfigurationId", "floodlightConfigurationIdDimensionValue", "id", "idDimensionValue", "kind", "name", "originalFloodlightConfigurationId", "status", "subaccountId", "suspended"]

    @field_validator('status')
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['APPROVED', 'ON_HOLD']):
            raise ValueError("must be one of enum values ('APPROVED', 'ON_HOLD')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Advertiser from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of floodlight_configuration_id_dimension_value
        if self.floodlight_configuration_id_dimension_value:
            _dict['floodlightConfigurationIdDimensionValue'] = self.floodlight_configuration_id_dimension_value.to_dict()
        # override the default output from pydantic by calling `to_dict()` of id_dimension_value
        if self.id_dimension_value:
            _dict['idDimensionValue'] = self.id_dimension_value.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Advertiser from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "accountId": obj.get("accountId"),
            "advertiserGroupId": obj.get("advertiserGroupId"),
            "clickThroughUrlSuffix": obj.get("clickThroughUrlSuffix"),
            "defaultClickThroughEventTagId": obj.get("defaultClickThroughEventTagId"),
            "defaultEmail": obj.get("defaultEmail"),
            "floodlightConfigurationId": obj.get("floodlightConfigurationId"),
            "floodlightConfigurationIdDimensionValue": DimensionValue.from_dict(obj["floodlightConfigurationIdDimensionValue"]) if obj.get("floodlightConfigurationIdDimensionValue") is not None else None,
            "id": obj.get("id"),
            "idDimensionValue": DimensionValue.from_dict(obj["idDimensionValue"]) if obj.get("idDimensionValue") is not None else None,
            "kind": obj.get("kind"),
            "name": obj.get("name"),
            "originalFloodlightConfigurationId": obj.get("originalFloodlightConfigurationId"),
            "status": obj.get("status"),
            "subaccountId": obj.get("subaccountId"),
            "suspended": obj.get("suspended")
        })
        return _obj



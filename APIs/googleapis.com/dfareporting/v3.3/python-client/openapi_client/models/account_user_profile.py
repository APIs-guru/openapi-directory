# coding: utf-8

"""
    Campaign Manager 360 API

    Build applications to efficiently manage large or complex trafficking, reporting, and attribution workflows for Campaign Manager 360.

    The version of the OpenAPI document: v3.3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.object_filter import ObjectFilter
from typing import Optional, Set
from typing_extensions import Self

class AccountUserProfile(BaseModel):
    """
    AccountUserProfiles contains properties of a Campaign Manager user profile. This resource is specifically for managing user profiles, whereas UserProfiles is for accessing the API.
    """ # noqa: E501
    account_id: Optional[StrictStr] = Field(default=None, description="Account ID of the user profile. This is a read-only field that can be left blank.", alias="accountId")
    active: Optional[StrictBool] = Field(default=None, description="Whether this user profile is active. This defaults to false, and must be set true on insert for the user profile to be usable.")
    advertiser_filter: Optional[ObjectFilter] = Field(default=None, alias="advertiserFilter")
    campaign_filter: Optional[ObjectFilter] = Field(default=None, alias="campaignFilter")
    comments: Optional[StrictStr] = Field(default=None, description="Comments for this user profile.")
    email: Optional[StrictStr] = Field(default=None, description="Email of the user profile. The email addresss must be linked to a Google Account. This field is required on insertion and is read-only after insertion.")
    id: Optional[StrictStr] = Field(default=None, description="ID of the user profile. This is a read-only, auto-generated field.")
    kind: Optional[StrictStr] = Field(default=None, description="Identifies what kind of resource this is. Value: the fixed string \"dfareporting#accountUserProfile\".")
    locale: Optional[StrictStr] = Field(default=None, description="Locale of the user profile. This is a required field. Acceptable values are: - \"cs\" (Czech) - \"de\" (German) - \"en\" (English) - \"en-GB\" (English United Kingdom) - \"es\" (Spanish) - \"fr\" (French) - \"it\" (Italian) - \"ja\" (Japanese) - \"ko\" (Korean) - \"pl\" (Polish) - \"pt-BR\" (Portuguese Brazil) - \"ru\" (Russian) - \"sv\" (Swedish) - \"tr\" (Turkish) - \"zh-CN\" (Chinese Simplified) - \"zh-TW\" (Chinese Traditional) ")
    name: Optional[StrictStr] = Field(default=None, description="Name of the user profile. This is a required field. Must be less than 64 characters long, must be globally unique, and cannot contain whitespace or any of the following characters: \"&;<>\"#%,\".")
    site_filter: Optional[ObjectFilter] = Field(default=None, alias="siteFilter")
    subaccount_id: Optional[StrictStr] = Field(default=None, description="Subaccount ID of the user profile. This is a read-only field that can be left blank.", alias="subaccountId")
    trafficker_type: Optional[StrictStr] = Field(default=None, description="Trafficker type of this user profile. This is a read-only field.", alias="traffickerType")
    user_access_type: Optional[StrictStr] = Field(default=None, description="User type of the user profile. This is a read-only field that can be left blank.", alias="userAccessType")
    user_role_filter: Optional[ObjectFilter] = Field(default=None, alias="userRoleFilter")
    user_role_id: Optional[StrictStr] = Field(default=None, description="User role ID of the user profile. This is a required field.", alias="userRoleId")
    __properties: ClassVar[List[str]] = ["accountId", "active", "advertiserFilter", "campaignFilter", "comments", "email", "id", "kind", "locale", "name", "siteFilter", "subaccountId", "traffickerType", "userAccessType", "userRoleFilter", "userRoleId"]

    @field_validator('trafficker_type')
    def trafficker_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['INTERNAL_NON_TRAFFICKER', 'INTERNAL_TRAFFICKER', 'EXTERNAL_TRAFFICKER']):
            raise ValueError("must be one of enum values ('INTERNAL_NON_TRAFFICKER', 'INTERNAL_TRAFFICKER', 'EXTERNAL_TRAFFICKER')")
        return value

    @field_validator('user_access_type')
    def user_access_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['NORMAL_USER', 'SUPER_USER', 'INTERNAL_ADMINISTRATOR', 'READ_ONLY_SUPER_USER']):
            raise ValueError("must be one of enum values ('NORMAL_USER', 'SUPER_USER', 'INTERNAL_ADMINISTRATOR', 'READ_ONLY_SUPER_USER')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AccountUserProfile from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of advertiser_filter
        if self.advertiser_filter:
            _dict['advertiserFilter'] = self.advertiser_filter.to_dict()
        # override the default output from pydantic by calling `to_dict()` of campaign_filter
        if self.campaign_filter:
            _dict['campaignFilter'] = self.campaign_filter.to_dict()
        # override the default output from pydantic by calling `to_dict()` of site_filter
        if self.site_filter:
            _dict['siteFilter'] = self.site_filter.to_dict()
        # override the default output from pydantic by calling `to_dict()` of user_role_filter
        if self.user_role_filter:
            _dict['userRoleFilter'] = self.user_role_filter.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AccountUserProfile from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "accountId": obj.get("accountId"),
            "active": obj.get("active"),
            "advertiserFilter": ObjectFilter.from_dict(obj["advertiserFilter"]) if obj.get("advertiserFilter") is not None else None,
            "campaignFilter": ObjectFilter.from_dict(obj["campaignFilter"]) if obj.get("campaignFilter") is not None else None,
            "comments": obj.get("comments"),
            "email": obj.get("email"),
            "id": obj.get("id"),
            "kind": obj.get("kind"),
            "locale": obj.get("locale"),
            "name": obj.get("name"),
            "siteFilter": ObjectFilter.from_dict(obj["siteFilter"]) if obj.get("siteFilter") is not None else None,
            "subaccountId": obj.get("subaccountId"),
            "traffickerType": obj.get("traffickerType"),
            "userAccessType": obj.get("userAccessType"),
            "userRoleFilter": ObjectFilter.from_dict(obj["userRoleFilter"]) if obj.get("userRoleFilter") is not None else None,
            "userRoleId": obj.get("userRoleId")
        })
        return _obj



# coding: utf-8

"""
    Campaign Manager 360 API

    Build applications to efficiently manage large or complex trafficking, reporting, and attribution workflows for Campaign Manager 360.

    The version of the OpenAPI document: v3.3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date, datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.last_modified_info import LastModifiedInfo
from typing import Optional, Set
from typing_extensions import Self

class OrderDocument(BaseModel):
    """
    Contains properties of a Planning order document.
    """ # noqa: E501
    account_id: Optional[StrictStr] = Field(default=None, description="Account ID of this order document.", alias="accountId")
    advertiser_id: Optional[StrictStr] = Field(default=None, description="Advertiser ID of this order document.", alias="advertiserId")
    amended_order_document_id: Optional[StrictStr] = Field(default=None, description="The amended order document ID of this order document. An order document can be created by optionally amending another order document so that the change history can be preserved.", alias="amendedOrderDocumentId")
    approved_by_user_profile_ids: Optional[List[StrictStr]] = Field(default=None, description="IDs of users who have approved this order document.", alias="approvedByUserProfileIds")
    cancelled: Optional[StrictBool] = Field(default=None, description="Whether this order document is cancelled.")
    created_info: Optional[LastModifiedInfo] = Field(default=None, alias="createdInfo")
    effective_date: Optional[date] = Field(default=None, alias="effectiveDate")
    id: Optional[StrictStr] = Field(default=None, description="ID of this order document.")
    kind: Optional[StrictStr] = Field(default=None, description="Identifies what kind of resource this is. Value: the fixed string \"dfareporting#orderDocument\".")
    last_sent_recipients: Optional[List[StrictStr]] = Field(default=None, description="List of email addresses that received the last sent document.", alias="lastSentRecipients")
    last_sent_time: Optional[datetime] = Field(default=None, alias="lastSentTime")
    order_id: Optional[StrictStr] = Field(default=None, description="ID of the order from which this order document is created.", alias="orderId")
    project_id: Optional[StrictStr] = Field(default=None, description="Project ID of this order document.", alias="projectId")
    signed: Optional[StrictBool] = Field(default=None, description="Whether this order document has been signed.")
    subaccount_id: Optional[StrictStr] = Field(default=None, description="Subaccount ID of this order document.", alias="subaccountId")
    title: Optional[StrictStr] = Field(default=None, description="Title of this order document.")
    type: Optional[StrictStr] = Field(default=None, description="Type of this order document")
    __properties: ClassVar[List[str]] = ["accountId", "advertiserId", "amendedOrderDocumentId", "approvedByUserProfileIds", "cancelled", "createdInfo", "effectiveDate", "id", "kind", "lastSentRecipients", "lastSentTime", "orderId", "projectId", "signed", "subaccountId", "title", "type"]

    @field_validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['PLANNING_ORDER_TYPE_INSERTION_ORDER', 'PLANNING_ORDER_TYPE_CHANGE_ORDER']):
            raise ValueError("must be one of enum values ('PLANNING_ORDER_TYPE_INSERTION_ORDER', 'PLANNING_ORDER_TYPE_CHANGE_ORDER')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of OrderDocument from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of created_info
        if self.created_info:
            _dict['createdInfo'] = self.created_info.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of OrderDocument from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "accountId": obj.get("accountId"),
            "advertiserId": obj.get("advertiserId"),
            "amendedOrderDocumentId": obj.get("amendedOrderDocumentId"),
            "approvedByUserProfileIds": obj.get("approvedByUserProfileIds"),
            "cancelled": obj.get("cancelled"),
            "createdInfo": LastModifiedInfo.from_dict(obj["createdInfo"]) if obj.get("createdInfo") is not None else None,
            "effectiveDate": obj.get("effectiveDate"),
            "id": obj.get("id"),
            "kind": obj.get("kind"),
            "lastSentRecipients": obj.get("lastSentRecipients"),
            "lastSentTime": obj.get("lastSentTime"),
            "orderId": obj.get("orderId"),
            "projectId": obj.get("projectId"),
            "signed": obj.get("signed"),
            "subaccountId": obj.get("subaccountId"),
            "title": obj.get("title"),
            "type": obj.get("type")
        })
        return _obj



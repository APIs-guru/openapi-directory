# coding: utf-8

"""
    Campaign Manager 360 API

    Build applications to efficiently manage large or complex trafficking, reporting, and attribution workflows for Campaign Manager 360.

    The version of the OpenAPI document: v4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.floodlight_configuration import FloodlightConfiguration

class TestFloodlightConfiguration(unittest.TestCase):
    """FloodlightConfiguration unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> FloodlightConfiguration:
        """Test FloodlightConfiguration
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `FloodlightConfiguration`
        """
        model = FloodlightConfiguration()
        if include_optional:
            return FloodlightConfiguration(
                account_id = '',
                advertiser_id = '',
                advertiser_id_dimension_value = openapi_client.models.dimension_value.DimensionValue(
                    dimension_name = '', 
                    etag = '', 
                    id = '', 
                    kind = '', 
                    match_type = 'EXACT', 
                    value = '', ),
                analytics_data_sharing_enabled = True,
                custom_viewability_metric = openapi_client.models.custom_viewability_metric.CustomViewabilityMetric(
                    configuration = openapi_client.models.custom_viewability_metric_configuration.CustomViewabilityMetricConfiguration(
                        audible = True, 
                        time_millis = 56, 
                        time_percent = 56, 
                        viewability_percent = 56, ), 
                    id = '', 
                    name = '', ),
                exposure_to_conversion_enabled = True,
                first_day_of_week = 'SUNDAY',
                id = '',
                id_dimension_value = openapi_client.models.dimension_value.DimensionValue(
                    dimension_name = '', 
                    etag = '', 
                    id = '', 
                    kind = '', 
                    match_type = 'EXACT', 
                    value = '', ),
                in_app_attribution_tracking_enabled = True,
                kind = '',
                lookback_configuration = openapi_client.models.lookback_configuration.LookbackConfiguration(
                    click_duration = 56, 
                    post_impression_activities_duration = 56, ),
                natural_search_conversion_attribution_option = 'EXCLUDE_NATURAL_SEARCH_CONVERSION_ATTRIBUTION',
                omniture_settings = openapi_client.models.omniture_settings.OmnitureSettings(
                    omniture_cost_data_enabled = True, 
                    omniture_integration_enabled = True, ),
                subaccount_id = '',
                tag_settings = openapi_client.models.tag_settings.TagSettings(
                    dynamic_tag_enabled = True, 
                    image_tag_enabled = True, ),
                third_party_authentication_tokens = [
                    openapi_client.models.third_party_authentication_token.ThirdPartyAuthenticationToken(
                        name = '', 
                        value = '', )
                    ],
                user_defined_variable_configurations = [
                    openapi_client.models.user_defined_variable_configuration.UserDefinedVariableConfiguration(
                        data_type = 'STRING', 
                        report_name = '', 
                        variable_type = 'U1', )
                    ]
            )
        else:
            return FloodlightConfiguration(
        )
        """

    def testFloodlightConfiguration(self):
        """Test FloodlightConfiguration"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

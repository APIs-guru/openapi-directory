# coding: utf-8

"""
    Campaign Manager 360 API

    Build applications to efficiently manage large or complex trafficking, reporting, and attribution workflows for Campaign Manager 360.

    The version of the OpenAPI document: v4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.inventory_items_list_response import InventoryItemsListResponse

class TestInventoryItemsListResponse(unittest.TestCase):
    """InventoryItemsListResponse unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> InventoryItemsListResponse:
        """Test InventoryItemsListResponse
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `InventoryItemsListResponse`
        """
        model = InventoryItemsListResponse()
        if include_optional:
            return InventoryItemsListResponse(
                inventory_items = [
                    openapi_client.models.inventory_item.InventoryItem(
                        account_id = '', 
                        ad_slots = [
                            openapi_client.models.ad_slot.AdSlot(
                                comment = '', 
                                compatibility = 'DISPLAY', 
                                height = '', 
                                linked_placement_id = '', 
                                name = '', 
                                payment_source_type = 'PLANNING_PAYMENT_SOURCE_TYPE_AGENCY_PAID', 
                                primary = True, 
                                width = '', )
                            ], 
                        advertiser_id = '', 
                        content_category_id = '', 
                        estimated_click_through_rate = '', 
                        estimated_conversion_rate = '', 
                        id = '', 
                        in_plan = True, 
                        kind = '', 
                        last_modified_info = openapi_client.models.last_modified_info.LastModifiedInfo(
                            time = '', ), 
                        name = '', 
                        negotiation_channel_id = '', 
                        order_id = '', 
                        placement_strategy_id = '', 
                        pricing = openapi_client.models.pricing.Pricing(
                            cap_cost_type = 'PLANNING_PLACEMENT_CAP_COST_TYPE_NONE', 
                            end_date = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(), 
                            flights = [
                                openapi_client.models.flight.Flight(
                                    end_date = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(), 
                                    rate_or_cost = '', 
                                    start_date = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(), 
                                    units = '', )
                                ], 
                            group_type = 'PLANNING_PLACEMENT_GROUP_TYPE_PACKAGE', 
                            pricing_type = 'PLANNING_PLACEMENT_PRICING_TYPE_IMPRESSIONS', 
                            start_date = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(), ), 
                        project_id = '', 
                        rfp_id = '', 
                        site_id = '', 
                        subaccount_id = '', 
                        type = 'PLANNING_PLACEMENT_TYPE_REGULAR', )
                    ],
                kind = '',
                next_page_token = ''
            )
        else:
            return InventoryItemsListResponse(
        )
        """

    def testInventoryItemsListResponse(self):
        """Test InventoryItemsListResponse"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

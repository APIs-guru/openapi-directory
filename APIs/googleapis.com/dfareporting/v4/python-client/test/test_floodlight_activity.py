# coding: utf-8

"""
    Campaign Manager 360 API

    Build applications to efficiently manage large or complex trafficking, reporting, and attribution workflows for Campaign Manager 360.

    The version of the OpenAPI document: v4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.floodlight_activity import FloodlightActivity

class TestFloodlightActivity(unittest.TestCase):
    """FloodlightActivity unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> FloodlightActivity:
        """Test FloodlightActivity
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `FloodlightActivity`
        """
        model = FloodlightActivity()
        if include_optional:
            return FloodlightActivity(
                account_id = '',
                advertiser_id = '',
                advertiser_id_dimension_value = openapi_client.models.dimension_value.DimensionValue(
                    dimension_name = '', 
                    etag = '', 
                    id = '', 
                    kind = '', 
                    match_type = 'EXACT', 
                    value = '', ),
                attribution_enabled = True,
                cache_busting_type = 'JAVASCRIPT',
                counting_method = 'STANDARD_COUNTING',
                default_tags = [
                    openapi_client.models.floodlight_activity_dynamic_tag.FloodlightActivityDynamicTag(
                        id = '', 
                        name = '', 
                        tag = '', )
                    ],
                expected_url = '',
                floodlight_activity_group_id = '',
                floodlight_activity_group_name = '',
                floodlight_activity_group_tag_string = '',
                floodlight_activity_group_type = 'COUNTER',
                floodlight_configuration_id = '',
                floodlight_configuration_id_dimension_value = openapi_client.models.dimension_value.DimensionValue(
                    dimension_name = '', 
                    etag = '', 
                    id = '', 
                    kind = '', 
                    match_type = 'EXACT', 
                    value = '', ),
                floodlight_tag_type = 'IFRAME',
                id = '',
                id_dimension_value = openapi_client.models.dimension_value.DimensionValue(
                    dimension_name = '', 
                    etag = '', 
                    id = '', 
                    kind = '', 
                    match_type = 'EXACT', 
                    value = '', ),
                kind = '',
                name = '',
                notes = '',
                publisher_tags = [
                    openapi_client.models.floodlight_activity_publisher_dynamic_tag.FloodlightActivityPublisherDynamicTag(
                        click_through = True, 
                        directory_site_id = '', 
                        dynamic_tag = openapi_client.models.floodlight_activity_dynamic_tag.FloodlightActivityDynamicTag(
                            id = '', 
                            name = '', 
                            tag = '', ), 
                        site_id = '', 
                        site_id_dimension_value = openapi_client.models.dimension_value.DimensionValue(
                            dimension_name = '', 
                            etag = '', 
                            id = '', 
                            kind = '', 
                            match_type = 'EXACT', 
                            value = '', ), 
                        view_through = True, )
                    ],
                secure = True,
                ssl_compliant = True,
                ssl_required = True,
                status = 'ACTIVE',
                subaccount_id = '',
                tag_format = 'HTML',
                tag_string = '',
                user_defined_variable_types = [
                    'U1'
                    ]
            )
        else:
            return FloodlightActivity(
        )
        """

    def testFloodlightActivity(self):
        """Test FloodlightActivity"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

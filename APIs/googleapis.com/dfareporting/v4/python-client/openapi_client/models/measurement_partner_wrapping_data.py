# coding: utf-8

"""
    Campaign Manager 360 API

    Build applications to efficiently manage large or complex trafficking, reporting, and attribution workflows for Campaign Manager 360.

    The version of the OpenAPI document: v4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class MeasurementPartnerWrappingData(BaseModel):
    """
    Placement tag wrapping
    """ # noqa: E501
    link_status: Optional[StrictStr] = Field(default=None, description="Placement wrapping status.", alias="linkStatus")
    measurement_partner: Optional[StrictStr] = Field(default=None, description="Measurement partner used for wrapping the placement.", alias="measurementPartner")
    tag_wrapping_mode: Optional[StrictStr] = Field(default=None, description="Measurement mode for the wrapped placement.", alias="tagWrappingMode")
    wrapped_tag: Optional[StrictStr] = Field(default=None, description="Tag provided by the measurement partner during wrapping.", alias="wrappedTag")
    __properties: ClassVar[List[str]] = ["linkStatus", "measurementPartner", "tagWrappingMode", "wrappedTag"]

    @field_validator('link_status')
    def link_status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['MEASUREMENT_PARTNER_UNLINKED', 'MEASUREMENT_PARTNER_LINKED', 'MEASUREMENT_PARTNER_LINK_PENDING', 'MEASUREMENT_PARTNER_LINK_FAILURE', 'MEASUREMENT_PARTNER_LINK_OPT_OUT', 'MEASUREMENT_PARTNER_LINK_OPT_OUT_PENDING', 'MEASUREMENT_PARTNER_LINK_WRAPPING_PENDING', 'MEASUREMENT_PARTNER_MODE_CHANGE_PENDING']):
            raise ValueError("must be one of enum values ('MEASUREMENT_PARTNER_UNLINKED', 'MEASUREMENT_PARTNER_LINKED', 'MEASUREMENT_PARTNER_LINK_PENDING', 'MEASUREMENT_PARTNER_LINK_FAILURE', 'MEASUREMENT_PARTNER_LINK_OPT_OUT', 'MEASUREMENT_PARTNER_LINK_OPT_OUT_PENDING', 'MEASUREMENT_PARTNER_LINK_WRAPPING_PENDING', 'MEASUREMENT_PARTNER_MODE_CHANGE_PENDING')")
        return value

    @field_validator('measurement_partner')
    def measurement_partner_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['NONE', 'INTEGRAL_AD_SCIENCE', 'DOUBLE_VERIFY']):
            raise ValueError("must be one of enum values ('NONE', 'INTEGRAL_AD_SCIENCE', 'DOUBLE_VERIFY')")
        return value

    @field_validator('tag_wrapping_mode')
    def tag_wrapping_mode_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['NONE', 'BLOCKING', 'MONITORING', 'MONITORING_READ_ONLY', 'VIDEO_PIXEL_MONITORING', 'TRACKING', 'VPAID_MONITORING', 'VPAID_BLOCKING', 'NON_VPAID_MONITORING', 'VPAID_ONLY_MONITORING', 'VPAID_ONLY_BLOCKING', 'VPAID_ONLY_FILTERING', 'VPAID_FILTERING', 'NON_VPAID_FILTERING']):
            raise ValueError("must be one of enum values ('NONE', 'BLOCKING', 'MONITORING', 'MONITORING_READ_ONLY', 'VIDEO_PIXEL_MONITORING', 'TRACKING', 'VPAID_MONITORING', 'VPAID_BLOCKING', 'NON_VPAID_MONITORING', 'VPAID_ONLY_MONITORING', 'VPAID_ONLY_BLOCKING', 'VPAID_ONLY_FILTERING', 'VPAID_FILTERING', 'NON_VPAID_FILTERING')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of MeasurementPartnerWrappingData from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of MeasurementPartnerWrappingData from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "linkStatus": obj.get("linkStatus"),
            "measurementPartner": obj.get("measurementPartner"),
            "tagWrappingMode": obj.get("tagWrappingMode"),
            "wrappedTag": obj.get("wrappedTag")
        })
        return _obj



# coding: utf-8

"""
    Campaign Manager 360 API

    Build applications to efficiently manage large or complex trafficking, reporting, and attribution workflows for Campaign Manager 360.

    The version of the OpenAPI document: v4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class TagSetting(BaseModel):
    """
    Tag Settings
    """ # noqa: E501
    additional_key_values: Optional[StrictStr] = Field(default=None, description="Additional key-values to be included in tags. Each key-value pair must be of the form key=value, and pairs must be separated by a semicolon (;). Keys and values must not contain commas. For example, id=2;color=red is a valid value for this field.", alias="additionalKeyValues")
    include_click_through_urls: Optional[StrictBool] = Field(default=None, description="Whether static landing page URLs should be included in the tags. New placements will default to the value set on their site.", alias="includeClickThroughUrls")
    include_click_tracking: Optional[StrictBool] = Field(default=None, description="Whether click-tracking string should be included in the tags.", alias="includeClickTracking")
    keyword_option: Optional[StrictStr] = Field(default=None, description="Option specifying how keywords are embedded in ad tags. This setting can be used to specify whether keyword placeholders are inserted in placement tags for this site. Publishers can then add keywords to those placeholders.", alias="keywordOption")
    __properties: ClassVar[List[str]] = ["additionalKeyValues", "includeClickThroughUrls", "includeClickTracking", "keywordOption"]

    @field_validator('keyword_option')
    def keyword_option_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['PLACEHOLDER_WITH_LIST_OF_KEYWORDS', 'IGNORE', 'GENERATE_SEPARATE_TAG_FOR_EACH_KEYWORD']):
            raise ValueError("must be one of enum values ('PLACEHOLDER_WITH_LIST_OF_KEYWORDS', 'IGNORE', 'GENERATE_SEPARATE_TAG_FOR_EACH_KEYWORD')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of TagSetting from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of TagSetting from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "additionalKeyValues": obj.get("additionalKeyValues"),
            "includeClickThroughUrls": obj.get("includeClickThroughUrls"),
            "includeClickTracking": obj.get("includeClickTracking"),
            "keywordOption": obj.get("keywordOption")
        })
        return _obj



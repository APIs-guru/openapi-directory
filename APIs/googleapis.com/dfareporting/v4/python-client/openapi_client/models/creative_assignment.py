# coding: utf-8

"""
    Campaign Manager 360 API

    Build applications to efficiently manage large or complex trafficking, reporting, and attribution workflows for Campaign Manager 360.

    The version of the OpenAPI document: v4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.click_through_url import ClickThroughUrl
from openapi_client.models.companion_click_through_override import CompanionClickThroughOverride
from openapi_client.models.creative_group_assignment import CreativeGroupAssignment
from openapi_client.models.dimension_value import DimensionValue
from openapi_client.models.rich_media_exit_override import RichMediaExitOverride
from typing import Optional, Set
from typing_extensions import Self

class CreativeAssignment(BaseModel):
    """
    Creative Assignment.
    """ # noqa: E501
    active: Optional[StrictBool] = Field(default=None, description="Whether this creative assignment is active. When true, the creative will be included in the ad's rotation.")
    apply_event_tags: Optional[StrictBool] = Field(default=None, description="Whether applicable event tags should fire when this creative assignment is rendered. If this value is unset when the ad is inserted or updated, it will default to true for all creative types EXCEPT for INTERNAL_REDIRECT, INTERSTITIAL_INTERNAL_REDIRECT, and INSTREAM_VIDEO.", alias="applyEventTags")
    click_through_url: Optional[ClickThroughUrl] = Field(default=None, alias="clickThroughUrl")
    companion_creative_overrides: Optional[List[CompanionClickThroughOverride]] = Field(default=None, description="Companion creative overrides for this creative assignment. Applicable to video ads.", alias="companionCreativeOverrides")
    creative_group_assignments: Optional[List[CreativeGroupAssignment]] = Field(default=None, description="Creative group assignments for this creative assignment. Only one assignment per creative group number is allowed for a maximum of two assignments.", alias="creativeGroupAssignments")
    creative_id: Optional[StrictStr] = Field(default=None, description="ID of the creative to be assigned. This is a required field.", alias="creativeId")
    creative_id_dimension_value: Optional[DimensionValue] = Field(default=None, alias="creativeIdDimensionValue")
    end_time: Optional[datetime] = Field(default=None, alias="endTime")
    rich_media_exit_overrides: Optional[List[RichMediaExitOverride]] = Field(default=None, description="Rich media exit overrides for this creative assignment. Applicable when the creative type is any of the following: - DISPLAY - RICH_MEDIA_INPAGE - RICH_MEDIA_INPAGE_FLOATING - RICH_MEDIA_IM_EXPAND - RICH_MEDIA_EXPANDING - RICH_MEDIA_INTERSTITIAL_FLOAT - RICH_MEDIA_MOBILE_IN_APP - RICH_MEDIA_MULTI_FLOATING - RICH_MEDIA_PEEL_DOWN - VPAID_LINEAR - VPAID_NON_LINEAR ", alias="richMediaExitOverrides")
    sequence: Optional[StrictInt] = Field(default=None, description="Sequence number of the creative assignment, applicable when the rotation type is CREATIVE_ROTATION_TYPE_SEQUENTIAL. Acceptable values are 1 to 65535, inclusive.")
    ssl_compliant: Optional[StrictBool] = Field(default=None, description="Whether the creative to be assigned is SSL-compliant. This is a read-only field that is auto-generated when the ad is inserted or updated.", alias="sslCompliant")
    start_time: Optional[datetime] = Field(default=None, alias="startTime")
    weight: Optional[StrictInt] = Field(default=None, description="Weight of the creative assignment, applicable when the rotation type is CREATIVE_ROTATION_TYPE_RANDOM. Value must be greater than or equal to 1.")
    __properties: ClassVar[List[str]] = ["active", "applyEventTags", "clickThroughUrl", "companionCreativeOverrides", "creativeGroupAssignments", "creativeId", "creativeIdDimensionValue", "endTime", "richMediaExitOverrides", "sequence", "sslCompliant", "startTime", "weight"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CreativeAssignment from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of click_through_url
        if self.click_through_url:
            _dict['clickThroughUrl'] = self.click_through_url.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in companion_creative_overrides (list)
        _items = []
        if self.companion_creative_overrides:
            for _item_companion_creative_overrides in self.companion_creative_overrides:
                if _item_companion_creative_overrides:
                    _items.append(_item_companion_creative_overrides.to_dict())
            _dict['companionCreativeOverrides'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in creative_group_assignments (list)
        _items = []
        if self.creative_group_assignments:
            for _item_creative_group_assignments in self.creative_group_assignments:
                if _item_creative_group_assignments:
                    _items.append(_item_creative_group_assignments.to_dict())
            _dict['creativeGroupAssignments'] = _items
        # override the default output from pydantic by calling `to_dict()` of creative_id_dimension_value
        if self.creative_id_dimension_value:
            _dict['creativeIdDimensionValue'] = self.creative_id_dimension_value.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in rich_media_exit_overrides (list)
        _items = []
        if self.rich_media_exit_overrides:
            for _item_rich_media_exit_overrides in self.rich_media_exit_overrides:
                if _item_rich_media_exit_overrides:
                    _items.append(_item_rich_media_exit_overrides.to_dict())
            _dict['richMediaExitOverrides'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CreativeAssignment from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "active": obj.get("active"),
            "applyEventTags": obj.get("applyEventTags"),
            "clickThroughUrl": ClickThroughUrl.from_dict(obj["clickThroughUrl"]) if obj.get("clickThroughUrl") is not None else None,
            "companionCreativeOverrides": [CompanionClickThroughOverride.from_dict(_item) for _item in obj["companionCreativeOverrides"]] if obj.get("companionCreativeOverrides") is not None else None,
            "creativeGroupAssignments": [CreativeGroupAssignment.from_dict(_item) for _item in obj["creativeGroupAssignments"]] if obj.get("creativeGroupAssignments") is not None else None,
            "creativeId": obj.get("creativeId"),
            "creativeIdDimensionValue": DimensionValue.from_dict(obj["creativeIdDimensionValue"]) if obj.get("creativeIdDimensionValue") is not None else None,
            "endTime": obj.get("endTime"),
            "richMediaExitOverrides": [RichMediaExitOverride.from_dict(_item) for _item in obj["richMediaExitOverrides"]] if obj.get("richMediaExitOverrides") is not None else None,
            "sequence": obj.get("sequence"),
            "sslCompliant": obj.get("sslCompliant"),
            "startTime": obj.get("startTime"),
            "weight": obj.get("weight")
        })
        return _obj



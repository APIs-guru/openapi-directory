# coding: utf-8

"""
    Campaign Manager 360 API

    Build applications to efficiently manage large or complex trafficking, reporting, and attribution workflows for Campaign Manager 360.

    The version of the OpenAPI document: v4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.pricing_schedule_pricing_period import PricingSchedulePricingPeriod
from typing import Optional, Set
from typing_extensions import Self

class PricingSchedule(BaseModel):
    """
    Pricing Schedule
    """ # noqa: E501
    cap_cost_option: Optional[StrictStr] = Field(default=None, description="Placement cap cost option.", alias="capCostOption")
    end_date: Optional[date] = Field(default=None, alias="endDate")
    flighted: Optional[StrictBool] = Field(default=None, description="Whether this placement is flighted. If true, pricing periods will be computed automatically.")
    floodlight_activity_id: Optional[StrictStr] = Field(default=None, description="Floodlight activity ID associated with this placement. This field should be set when placement pricing type is set to PRICING_TYPE_CPA.", alias="floodlightActivityId")
    pricing_periods: Optional[List[PricingSchedulePricingPeriod]] = Field(default=None, description="Pricing periods for this placement.", alias="pricingPeriods")
    pricing_type: Optional[StrictStr] = Field(default=None, description="Placement pricing type. This field is required on insertion.", alias="pricingType")
    start_date: Optional[date] = Field(default=None, alias="startDate")
    testing_start_date: Optional[date] = Field(default=None, alias="testingStartDate")
    __properties: ClassVar[List[str]] = ["capCostOption", "endDate", "flighted", "floodlightActivityId", "pricingPeriods", "pricingType", "startDate", "testingStartDate"]

    @field_validator('cap_cost_option')
    def cap_cost_option_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['CAP_COST_NONE', 'CAP_COST_MONTHLY', 'CAP_COST_CUMULATIVE']):
            raise ValueError("must be one of enum values ('CAP_COST_NONE', 'CAP_COST_MONTHLY', 'CAP_COST_CUMULATIVE')")
        return value

    @field_validator('pricing_type')
    def pricing_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['PRICING_TYPE_CPM', 'PRICING_TYPE_CPC', 'PRICING_TYPE_CPA', 'PRICING_TYPE_FLAT_RATE_IMPRESSIONS', 'PRICING_TYPE_FLAT_RATE_CLICKS', 'PRICING_TYPE_CPM_ACTIVEVIEW']):
            raise ValueError("must be one of enum values ('PRICING_TYPE_CPM', 'PRICING_TYPE_CPC', 'PRICING_TYPE_CPA', 'PRICING_TYPE_FLAT_RATE_IMPRESSIONS', 'PRICING_TYPE_FLAT_RATE_CLICKS', 'PRICING_TYPE_CPM_ACTIVEVIEW')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PricingSchedule from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in pricing_periods (list)
        _items = []
        if self.pricing_periods:
            for _item_pricing_periods in self.pricing_periods:
                if _item_pricing_periods:
                    _items.append(_item_pricing_periods.to_dict())
            _dict['pricingPeriods'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PricingSchedule from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "capCostOption": obj.get("capCostOption"),
            "endDate": obj.get("endDate"),
            "flighted": obj.get("flighted"),
            "floodlightActivityId": obj.get("floodlightActivityId"),
            "pricingPeriods": [PricingSchedulePricingPeriod.from_dict(_item) for _item in obj["pricingPeriods"]] if obj.get("pricingPeriods") is not None else None,
            "pricingType": obj.get("pricingType"),
            "startDate": obj.get("startDate"),
            "testingStartDate": obj.get("testingStartDate")
        })
        return _obj



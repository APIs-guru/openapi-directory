# coding: utf-8

"""
    Campaign Manager 360 API

    Build applications to efficiently manage large or complex trafficking, reporting, and attribution workflows for Campaign Manager 360.

    The version of the OpenAPI document: v4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.dimension_value import DimensionValue
from typing import Optional, Set
from typing_extensions import Self

class TargetableRemarketingList(BaseModel):
    """
    Contains properties of a targetable remarketing list. Remarketing enables you to create lists of users who have performed specific actions on a site, then target ads to members of those lists. This resource is a read-only view of a remarketing list to be used to facilitate targeting ads to specific lists. Remarketing lists that are owned by your advertisers and those that are shared to your advertisers or account are accessible via this resource. To manage remarketing lists that are owned by your advertisers, use the RemarketingLists resource.
    """ # noqa: E501
    account_id: Optional[StrictStr] = Field(default=None, description="Account ID of this remarketing list. This is a read-only, auto-generated field that is only returned in GET requests.", alias="accountId")
    active: Optional[StrictBool] = Field(default=None, description="Whether this targetable remarketing list is active.")
    advertiser_id: Optional[StrictStr] = Field(default=None, description="Dimension value for the advertiser ID that owns this targetable remarketing list.", alias="advertiserId")
    advertiser_id_dimension_value: Optional[DimensionValue] = Field(default=None, alias="advertiserIdDimensionValue")
    description: Optional[StrictStr] = Field(default=None, description="Targetable remarketing list description.")
    id: Optional[StrictStr] = Field(default=None, description="Targetable remarketing list ID.")
    kind: Optional[StrictStr] = Field(default=None, description="Identifies what kind of resource this is. Value: the fixed string \"dfareporting#targetableRemarketingList\".")
    life_span: Optional[StrictStr] = Field(default=None, description="Number of days that a user should remain in the targetable remarketing list without an impression.", alias="lifeSpan")
    list_size: Optional[StrictStr] = Field(default=None, description="Number of users currently in the list. This is a read-only field.", alias="listSize")
    list_source: Optional[StrictStr] = Field(default=None, description="Product from which this targetable remarketing list was originated.", alias="listSource")
    name: Optional[StrictStr] = Field(default=None, description="Name of the targetable remarketing list. Is no greater than 128 characters long.")
    subaccount_id: Optional[StrictStr] = Field(default=None, description="Subaccount ID of this remarketing list. This is a read-only, auto-generated field that is only returned in GET requests.", alias="subaccountId")
    __properties: ClassVar[List[str]] = ["accountId", "active", "advertiserId", "advertiserIdDimensionValue", "description", "id", "kind", "lifeSpan", "listSize", "listSource", "name", "subaccountId"]

    @field_validator('list_source')
    def list_source_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['REMARKETING_LIST_SOURCE_OTHER', 'REMARKETING_LIST_SOURCE_ADX', 'REMARKETING_LIST_SOURCE_DFP', 'REMARKETING_LIST_SOURCE_XFP', 'REMARKETING_LIST_SOURCE_DFA', 'REMARKETING_LIST_SOURCE_GA', 'REMARKETING_LIST_SOURCE_YOUTUBE', 'REMARKETING_LIST_SOURCE_DBM', 'REMARKETING_LIST_SOURCE_GPLUS', 'REMARKETING_LIST_SOURCE_DMP', 'REMARKETING_LIST_SOURCE_PLAY_STORE']):
            raise ValueError("must be one of enum values ('REMARKETING_LIST_SOURCE_OTHER', 'REMARKETING_LIST_SOURCE_ADX', 'REMARKETING_LIST_SOURCE_DFP', 'REMARKETING_LIST_SOURCE_XFP', 'REMARKETING_LIST_SOURCE_DFA', 'REMARKETING_LIST_SOURCE_GA', 'REMARKETING_LIST_SOURCE_YOUTUBE', 'REMARKETING_LIST_SOURCE_DBM', 'REMARKETING_LIST_SOURCE_GPLUS', 'REMARKETING_LIST_SOURCE_DMP', 'REMARKETING_LIST_SOURCE_PLAY_STORE')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of TargetableRemarketingList from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of advertiser_id_dimension_value
        if self.advertiser_id_dimension_value:
            _dict['advertiserIdDimensionValue'] = self.advertiser_id_dimension_value.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of TargetableRemarketingList from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "accountId": obj.get("accountId"),
            "active": obj.get("active"),
            "advertiserId": obj.get("advertiserId"),
            "advertiserIdDimensionValue": DimensionValue.from_dict(obj["advertiserIdDimensionValue"]) if obj.get("advertiserIdDimensionValue") is not None else None,
            "description": obj.get("description"),
            "id": obj.get("id"),
            "kind": obj.get("kind"),
            "lifeSpan": obj.get("lifeSpan"),
            "listSize": obj.get("listSize"),
            "listSource": obj.get("listSource"),
            "name": obj.get("name"),
            "subaccountId": obj.get("subaccountId")
        })
        return _obj



# coding: utf-8

"""
    Campaign Manager 360 API

    Build applications to efficiently manage large or complex trafficking, reporting, and attribution workflows for Campaign Manager 360.

    The version of the OpenAPI document: v4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.size import Size
from typing import Optional, Set
from typing_extensions import Self

class ObaIcon(BaseModel):
    """
    Online Behavioral Advertiser icon.
    """ # noqa: E501
    icon_click_through_url: Optional[StrictStr] = Field(default=None, description="URL to redirect to when an OBA icon is clicked.", alias="iconClickThroughUrl")
    icon_click_tracking_url: Optional[StrictStr] = Field(default=None, description="URL to track click when an OBA icon is clicked.", alias="iconClickTrackingUrl")
    icon_view_tracking_url: Optional[StrictStr] = Field(default=None, description="URL to track view when an OBA icon is clicked.", alias="iconViewTrackingUrl")
    program: Optional[StrictStr] = Field(default=None, description="Identifies the industry initiative that the icon supports. For example, AdChoices.")
    resource_url: Optional[StrictStr] = Field(default=None, description="OBA icon resource URL. Campaign Manager only supports image and JavaScript icons. Learn more", alias="resourceUrl")
    size: Optional[Size] = None
    x_position: Optional[StrictStr] = Field(default=None, description="OBA icon x coordinate position. Accepted values are left or right.", alias="xPosition")
    y_position: Optional[StrictStr] = Field(default=None, description="OBA icon y coordinate position. Accepted values are top or bottom.", alias="yPosition")
    __properties: ClassVar[List[str]] = ["iconClickThroughUrl", "iconClickTrackingUrl", "iconViewTrackingUrl", "program", "resourceUrl", "size", "xPosition", "yPosition"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ObaIcon from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of size
        if self.size:
            _dict['size'] = self.size.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ObaIcon from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "iconClickThroughUrl": obj.get("iconClickThroughUrl"),
            "iconClickTrackingUrl": obj.get("iconClickTrackingUrl"),
            "iconViewTrackingUrl": obj.get("iconViewTrackingUrl"),
            "program": obj.get("program"),
            "resourceUrl": obj.get("resourceUrl"),
            "size": Size.from_dict(obj["size"]) if obj.get("size") is not None else None,
            "xPosition": obj.get("xPosition"),
            "yPosition": obj.get("yPosition")
        })
        return _obj



# coding: utf-8

"""
    Campaign Manager 360 API

    Build applications to efficiently manage large or complex trafficking, reporting, and attribution workflows for Campaign Manager 360.

    The version of the OpenAPI document: v4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.billing_rate_tiered_rate import BillingRateTieredRate
from typing import Optional, Set
from typing_extensions import Self

class BillingRate(BaseModel):
    """
    BillingRate
    """ # noqa: E501
    currency_code: Optional[StrictStr] = Field(default=None, description="Billing currency code in ISO 4217 format.", alias="currencyCode")
    end_date: Optional[StrictStr] = Field(default=None, description="End date of this billing rate.", alias="endDate")
    id: Optional[StrictStr] = Field(default=None, description="ID of this billing rate.")
    name: Optional[StrictStr] = Field(default=None, description="Name of this billing rate. This must be less than 256 characters long.")
    rate_in_micros: Optional[StrictStr] = Field(default=None, description="Flat rate in micros of this billing rate. This cannot co-exist with tiered rate.", alias="rateInMicros")
    start_date: Optional[StrictStr] = Field(default=None, description="Start date of this billing rate.", alias="startDate")
    tiered_rates: Optional[List[BillingRateTieredRate]] = Field(default=None, description="Tiered rate of this billing rate. This cannot co-exist with flat rate.", alias="tieredRates")
    type: Optional[StrictStr] = Field(default=None, description="Type of this billing rate.")
    unit_of_measure: Optional[StrictStr] = Field(default=None, description="Unit of measure for this billing rate.", alias="unitOfMeasure")
    __properties: ClassVar[List[str]] = ["currencyCode", "endDate", "id", "name", "rateInMicros", "startDate", "tieredRates", "type", "unitOfMeasure"]

    @field_validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['AD_SERVING', 'CLICKS', 'MINIMUM_SERVICE', 'PATH_TO_CONVERSION', 'RICH_MEDIA_INPAGE', 'RICH_MEDIA_EXPANDING', 'RICH_MEDIA_FLOATING', 'RICH_MEDIA_VIDEO', 'RICH_MEDIA_TEASER', 'RICH_MEDIA_VPAID', 'INSTREAM_VIDEO', 'PIXEL', 'TRACKING', 'TRAFFICKING_FEATURE', 'CUSTOM_REPORTS', 'EXPOSURE_TO_CONVERSION', 'DATA_TRANSFER', 'DATA_TRANSFER_SETUP', 'STARTUP', 'STATEMENT_OF_WORK', 'PROVIDED_LIST', 'PROVIDED_LIST_SETUP', 'ENHANCED_FORMATS', 'TRACKING_AD_IMPRESSIONS', 'TRACKING_AD_CLICKS', 'NIELSEN_DIGITAL_AD_RATINGS_FEE', 'INSTREAM_VIDEO_REDIRECT', 'INSTREAM_VIDEO_VPAID', 'DISPLAY_AD_SERVING', 'VIDEO_AD_SERVING', 'AUDIO_AD_SERVING', 'ADVANCED_DISPLAY_AD_SERVING']):
            raise ValueError("must be one of enum values ('AD_SERVING', 'CLICKS', 'MINIMUM_SERVICE', 'PATH_TO_CONVERSION', 'RICH_MEDIA_INPAGE', 'RICH_MEDIA_EXPANDING', 'RICH_MEDIA_FLOATING', 'RICH_MEDIA_VIDEO', 'RICH_MEDIA_TEASER', 'RICH_MEDIA_VPAID', 'INSTREAM_VIDEO', 'PIXEL', 'TRACKING', 'TRAFFICKING_FEATURE', 'CUSTOM_REPORTS', 'EXPOSURE_TO_CONVERSION', 'DATA_TRANSFER', 'DATA_TRANSFER_SETUP', 'STARTUP', 'STATEMENT_OF_WORK', 'PROVIDED_LIST', 'PROVIDED_LIST_SETUP', 'ENHANCED_FORMATS', 'TRACKING_AD_IMPRESSIONS', 'TRACKING_AD_CLICKS', 'NIELSEN_DIGITAL_AD_RATINGS_FEE', 'INSTREAM_VIDEO_REDIRECT', 'INSTREAM_VIDEO_VPAID', 'DISPLAY_AD_SERVING', 'VIDEO_AD_SERVING', 'AUDIO_AD_SERVING', 'ADVANCED_DISPLAY_AD_SERVING')")
        return value

    @field_validator('unit_of_measure')
    def unit_of_measure_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['CPM', 'CPC', 'EA', 'P2C']):
            raise ValueError("must be one of enum values ('CPM', 'CPC', 'EA', 'P2C')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of BillingRate from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in tiered_rates (list)
        _items = []
        if self.tiered_rates:
            for _item_tiered_rates in self.tiered_rates:
                if _item_tiered_rates:
                    _items.append(_item_tiered_rates.to_dict())
            _dict['tieredRates'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of BillingRate from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "currencyCode": obj.get("currencyCode"),
            "endDate": obj.get("endDate"),
            "id": obj.get("id"),
            "name": obj.get("name"),
            "rateInMicros": obj.get("rateInMicros"),
            "startDate": obj.get("startDate"),
            "tieredRates": [BillingRateTieredRate.from_dict(_item) for _item in obj["tieredRates"]] if obj.get("tieredRates") is not None else None,
            "type": obj.get("type"),
            "unitOfMeasure": obj.get("unitOfMeasure")
        })
        return _obj



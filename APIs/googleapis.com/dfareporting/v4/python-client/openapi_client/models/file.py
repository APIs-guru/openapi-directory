# coding: utf-8

"""
    Campaign Manager 360 API

    Build applications to efficiently manage large or complex trafficking, reporting, and attribution workflows for Campaign Manager 360.

    The version of the OpenAPI document: v4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.date_range import DateRange
from openapi_client.models.file_urls import FileUrls
from typing import Optional, Set
from typing_extensions import Self

class File(BaseModel):
    """
    Represents a File resource. A file contains the metadata for a report run. It shows the status of the run and holds the URLs to the generated report data if the run is finished and the status is \"REPORT_AVAILABLE\".
    """ # noqa: E501
    date_range: Optional[DateRange] = Field(default=None, alias="dateRange")
    etag: Optional[StrictStr] = Field(default=None, description="Etag of this resource.")
    file_name: Optional[StrictStr] = Field(default=None, description="The filename of the file.", alias="fileName")
    format: Optional[StrictStr] = Field(default=None, description="The output format of the report. Only available once the file is available.")
    id: Optional[StrictStr] = Field(default=None, description="The unique ID of this report file.")
    kind: Optional[StrictStr] = Field(default=None, description="Identifies what kind of resource this is. Value: the fixed string \"dfareporting#file\".")
    last_modified_time: Optional[StrictStr] = Field(default=None, description="The timestamp in milliseconds since epoch when this file was last modified.", alias="lastModifiedTime")
    report_id: Optional[StrictStr] = Field(default=None, description="The ID of the report this file was generated from.", alias="reportId")
    status: Optional[StrictStr] = Field(default=None, description="The status of the report file.")
    urls: Optional[FileUrls] = None
    __properties: ClassVar[List[str]] = ["dateRange", "etag", "fileName", "format", "id", "kind", "lastModifiedTime", "reportId", "status", "urls"]

    @field_validator('format')
    def format_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['CSV', 'EXCEL']):
            raise ValueError("must be one of enum values ('CSV', 'EXCEL')")
        return value

    @field_validator('status')
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['PROCESSING', 'REPORT_AVAILABLE', 'FAILED', 'CANCELLED', 'QUEUED']):
            raise ValueError("must be one of enum values ('PROCESSING', 'REPORT_AVAILABLE', 'FAILED', 'CANCELLED', 'QUEUED')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of File from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of date_range
        if self.date_range:
            _dict['dateRange'] = self.date_range.to_dict()
        # override the default output from pydantic by calling `to_dict()` of urls
        if self.urls:
            _dict['urls'] = self.urls.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of File from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "dateRange": DateRange.from_dict(obj["dateRange"]) if obj.get("dateRange") is not None else None,
            "etag": obj.get("etag"),
            "fileName": obj.get("fileName"),
            "format": obj.get("format"),
            "id": obj.get("id"),
            "kind": obj.get("kind"),
            "lastModifiedTime": obj.get("lastModifiedTime"),
            "reportId": obj.get("reportId"),
            "status": obj.get("status"),
            "urls": FileUrls.from_dict(obj["urls"]) if obj.get("urls") is not None else None
        })
        return _obj



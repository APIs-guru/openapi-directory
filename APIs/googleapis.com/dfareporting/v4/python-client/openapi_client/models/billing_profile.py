# coding: utf-8

"""
    Campaign Manager 360 API

    Build applications to efficiently manage large or complex trafficking, reporting, and attribution workflows for Campaign Manager 360.

    The version of the OpenAPI document: v4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class BillingProfile(BaseModel):
    """
    Contains properties of a Campaign Manager Billing Profile.
    """ # noqa: E501
    consolidated_invoice: Optional[StrictBool] = Field(default=None, description="Consolidated invoice option for this billing profile. Used to get a single, consolidated invoice across the chosen invoice level.", alias="consolidatedInvoice")
    country_code: Optional[StrictStr] = Field(default=None, description="Country code of this billing profile.This is a read-only field.", alias="countryCode")
    currency_code: Optional[StrictStr] = Field(default=None, description="Billing currency code in ISO 4217 format.This is a read-only field.", alias="currencyCode")
    id: Optional[StrictStr] = Field(default=None, description="ID of this billing profile. This is a read-only, auto-generated field.")
    invoice_level: Optional[StrictStr] = Field(default=None, description="Invoice level for this billing profile. Used to group fees into separate invoices by account, advertiser, or campaign.", alias="invoiceLevel")
    is_default: Optional[StrictBool] = Field(default=None, description="True if the billing profile is the account default profile. This is a read-only field.", alias="isDefault")
    kind: Optional[StrictStr] = Field(default=None, description="Identifies what kind of resource this is. Value: the fixed string \"dfareporting#billingProfile\".")
    name: Optional[StrictStr] = Field(default=None, description="Name of this billing profile. This is a required field and must be less than 256 characters long and must be unique among billing profile in the same account.")
    payments_account_id: Optional[StrictStr] = Field(default=None, description="The ID of the payment account the billing profile belongs to. This is a read-only field.", alias="paymentsAccountId")
    payments_customer_id: Optional[StrictStr] = Field(default=None, description="The ID of the payment customer the billing profile belongs to. This is a read-only field.", alias="paymentsCustomerId")
    purchase_order: Optional[StrictStr] = Field(default=None, description="Purchase order (PO) for this billing profile. This PO number is used in the invoices for all of the advertisers in this billing profile.", alias="purchaseOrder")
    secondary_payments_customer_id: Optional[StrictStr] = Field(default=None, description="The ID of the secondary payment customer the billing profile belongs to. This is a read-only field.", alias="secondaryPaymentsCustomerId")
    status: Optional[StrictStr] = Field(default=None, description="Status of this billing profile.This is a read-only field.")
    __properties: ClassVar[List[str]] = ["consolidatedInvoice", "countryCode", "currencyCode", "id", "invoiceLevel", "isDefault", "kind", "name", "paymentsAccountId", "paymentsCustomerId", "purchaseOrder", "secondaryPaymentsCustomerId", "status"]

    @field_validator('invoice_level')
    def invoice_level_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['ACCOUNT_LEVEL', 'ADVERTISER_LEVEL', 'CAMPAIGN_LEVEL']):
            raise ValueError("must be one of enum values ('ACCOUNT_LEVEL', 'ADVERTISER_LEVEL', 'CAMPAIGN_LEVEL')")
        return value

    @field_validator('status')
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['UNDER_REVIEW', 'ACTIVE', 'ARCHIVED']):
            raise ValueError("must be one of enum values ('UNDER_REVIEW', 'ACTIVE', 'ARCHIVED')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of BillingProfile from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of BillingProfile from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "consolidatedInvoice": obj.get("consolidatedInvoice"),
            "countryCode": obj.get("countryCode"),
            "currencyCode": obj.get("currencyCode"),
            "id": obj.get("id"),
            "invoiceLevel": obj.get("invoiceLevel"),
            "isDefault": obj.get("isDefault"),
            "kind": obj.get("kind"),
            "name": obj.get("name"),
            "paymentsAccountId": obj.get("paymentsAccountId"),
            "paymentsCustomerId": obj.get("paymentsCustomerId"),
            "purchaseOrder": obj.get("purchaseOrder"),
            "secondaryPaymentsCustomerId": obj.get("secondaryPaymentsCustomerId"),
            "status": obj.get("status")
        })
        return _obj



# coding: utf-8

"""
    Campaign Manager 360 API

    Build applications to efficiently manage large or complex trafficking, reporting, and attribution workflows for Campaign Manager 360.

    The version of the OpenAPI document: v4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class ReportSchedule(BaseModel):
    """
    The report's schedule. Can only be set if the report's 'dateRange' is a relative date range and the relative date range is not \"TODAY\".
    """ # noqa: E501
    active: Optional[StrictBool] = Field(default=None, description="Whether the schedule is active or not. Must be set to either true or false.")
    every: Optional[StrictInt] = Field(default=None, description="Defines every how many days, weeks or months the report should be run. Needs to be set when \"repeats\" is either \"DAILY\", \"WEEKLY\" or \"MONTHLY\".")
    expiration_date: Optional[date] = Field(default=None, alias="expirationDate")
    repeats: Optional[StrictStr] = Field(default=None, description="The interval for which the report is repeated. Note: - \"DAILY\" also requires field \"every\" to be set. - \"WEEKLY\" also requires fields \"every\" and \"repeatsOnWeekDays\" to be set. - \"MONTHLY\" also requires fields \"every\" and \"runsOnDayOfMonth\" to be set. ")
    repeats_on_week_days: Optional[List[StrictStr]] = Field(default=None, description="List of week days \"WEEKLY\" on which scheduled reports should run.", alias="repeatsOnWeekDays")
    runs_on_day_of_month: Optional[StrictStr] = Field(default=None, description="Enum to define for \"MONTHLY\" scheduled reports whether reports should be repeated on the same day of the month as \"startDate\" or the same day of the week of the month. Example: If 'startDate' is Monday, April 2nd 2012 (2012-04-02), \"DAY_OF_MONTH\" would run subsequent reports on the 2nd of every Month, and \"WEEK_OF_MONTH\" would run subsequent reports on the first Monday of the month.", alias="runsOnDayOfMonth")
    start_date: Optional[date] = Field(default=None, alias="startDate")
    timezone: Optional[StrictStr] = Field(default=None, description="The timezone when the report will run.")
    __properties: ClassVar[List[str]] = ["active", "every", "expirationDate", "repeats", "repeatsOnWeekDays", "runsOnDayOfMonth", "startDate", "timezone"]

    @field_validator('repeats_on_week_days')
    def repeats_on_week_days_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        for i in value:
            if i not in set(['SUNDAY', 'MONDAY', 'TUESDAY', 'WEDNESDAY', 'THURSDAY', 'FRIDAY', 'SATURDAY']):
                raise ValueError("each list item must be one of ('SUNDAY', 'MONDAY', 'TUESDAY', 'WEDNESDAY', 'THURSDAY', 'FRIDAY', 'SATURDAY')")
        return value

    @field_validator('runs_on_day_of_month')
    def runs_on_day_of_month_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['DAY_OF_MONTH', 'WEEK_OF_MONTH']):
            raise ValueError("must be one of enum values ('DAY_OF_MONTH', 'WEEK_OF_MONTH')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ReportSchedule from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ReportSchedule from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "active": obj.get("active"),
            "every": obj.get("every"),
            "expirationDate": obj.get("expirationDate"),
            "repeats": obj.get("repeats"),
            "repeatsOnWeekDays": obj.get("repeatsOnWeekDays"),
            "runsOnDayOfMonth": obj.get("runsOnDayOfMonth"),
            "startDate": obj.get("startDate"),
            "timezone": obj.get("timezone")
        })
        return _obj



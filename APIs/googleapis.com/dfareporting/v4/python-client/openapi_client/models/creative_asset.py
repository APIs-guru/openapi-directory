# coding: utf-8

"""
    Campaign Manager 360 API

    Build applications to efficiently manage large or complex trafficking, reporting, and attribution workflows for Campaign Manager 360.

    The version of the OpenAPI document: v4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from openapi_client.models.creative_asset_id import CreativeAssetId
from openapi_client.models.creative_custom_event import CreativeCustomEvent
from openapi_client.models.dimension_value import DimensionValue
from openapi_client.models.offset_position import OffsetPosition
from openapi_client.models.size import Size
from typing import Optional, Set
from typing_extensions import Self

class CreativeAsset(BaseModel):
    """
    Creative Asset.
    """ # noqa: E501
    action_script3: Optional[StrictBool] = Field(default=None, description="Whether ActionScript3 is enabled for the flash asset. This is a read-only field. Applicable to the following creative type: FLASH_INPAGE. Applicable to DISPLAY when the primary asset type is not HTML_IMAGE.", alias="actionScript3")
    active: Optional[StrictBool] = Field(default=None, description="Whether the video or audio asset is active. This is a read-only field for VPAID_NON_LINEAR_VIDEO assets. Applicable to the following creative types: INSTREAM_AUDIO, INSTREAM_VIDEO and all VPAID.")
    additional_sizes: Optional[List[Size]] = Field(default=None, description="Additional sizes associated with this creative asset. HTML5 asset generated by compatible software such as GWD will be able to support more sizes this creative asset can render.", alias="additionalSizes")
    alignment: Optional[StrictStr] = Field(default=None, description="Possible alignments for an asset. This is a read-only field. Applicable to the following creative types: RICH_MEDIA_DISPLAY_MULTI_FLOATING_INTERSTITIAL .")
    artwork_type: Optional[StrictStr] = Field(default=None, description="Artwork type of rich media creative. This is a read-only field. Applicable to the following creative types: all RICH_MEDIA.", alias="artworkType")
    asset_identifier: Optional[CreativeAssetId] = Field(default=None, alias="assetIdentifier")
    audio_bit_rate: Optional[StrictInt] = Field(default=None, description="Audio stream bit rate in kbps. This is a read-only field. Applicable to the following creative types: INSTREAM_AUDIO, INSTREAM_VIDEO and all VPAID.", alias="audioBitRate")
    audio_sample_rate: Optional[StrictInt] = Field(default=None, description="Audio sample bit rate in hertz. This is a read-only field. Applicable to the following creative types: INSTREAM_AUDIO, INSTREAM_VIDEO and all VPAID.", alias="audioSampleRate")
    backup_image_exit: Optional[CreativeCustomEvent] = Field(default=None, alias="backupImageExit")
    bit_rate: Optional[StrictInt] = Field(default=None, description="Detected bit-rate for audio or video asset. This is a read-only field. Applicable to the following creative types: INSTREAM_AUDIO, INSTREAM_VIDEO and all VPAID.", alias="bitRate")
    child_asset_type: Optional[StrictStr] = Field(default=None, description="Rich media child asset type. This is a read-only field. Applicable to the following creative types: all VPAID.", alias="childAssetType")
    collapsed_size: Optional[Size] = Field(default=None, alias="collapsedSize")
    companion_creative_ids: Optional[List[StrictStr]] = Field(default=None, description="List of companion creatives assigned to an in-stream video creative asset. Acceptable values include IDs of existing flash and image creatives. Applicable to INSTREAM_VIDEO creative type with dynamicAssetSelection set to true.", alias="companionCreativeIds")
    custom_start_time_value: Optional[StrictInt] = Field(default=None, description="Custom start time in seconds for making the asset visible. Applicable to the following creative types: all RICH_MEDIA. Value must be greater than or equal to 0.", alias="customStartTimeValue")
    detected_features: Optional[List[StrictStr]] = Field(default=None, description="List of feature dependencies for the creative asset that are detected by Campaign Manager. Feature dependencies are features that a browser must be able to support in order to render your HTML5 creative correctly. This is a read-only, auto-generated field. Applicable to the following creative types: HTML5_BANNER. Applicable to DISPLAY when the primary asset type is not HTML_IMAGE.", alias="detectedFeatures")
    display_type: Optional[StrictStr] = Field(default=None, description="Type of rich media asset. This is a read-only field. Applicable to the following creative types: all RICH_MEDIA.", alias="displayType")
    duration: Optional[StrictInt] = Field(default=None, description="Duration in seconds for which an asset will be displayed. Applicable to the following creative types: INSTREAM_AUDIO, INSTREAM_VIDEO and VPAID_LINEAR_VIDEO. Value must be greater than or equal to 1.")
    duration_type: Optional[StrictStr] = Field(default=None, description="Duration type for which an asset will be displayed. Applicable to the following creative types: all RICH_MEDIA.", alias="durationType")
    expanded_dimension: Optional[Size] = Field(default=None, alias="expandedDimension")
    file_size: Optional[StrictStr] = Field(default=None, description="File size associated with this creative asset. This is a read-only field. Applicable to all but the following creative types: all REDIRECT and TRACKING_TEXT.", alias="fileSize")
    flash_version: Optional[StrictInt] = Field(default=None, description="Flash version of the asset. This is a read-only field. Applicable to the following creative types: FLASH_INPAGE, all RICH_MEDIA, and all VPAID. Applicable to DISPLAY when the primary asset type is not HTML_IMAGE.", alias="flashVersion")
    frame_rate: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Video frame rate for video asset in frames per second. This is a read-only field. Applicable to the following creative types: INSTREAM_VIDEO and all VPAID.", alias="frameRate")
    hide_flash_objects: Optional[StrictBool] = Field(default=None, description="Whether to hide Flash objects flag for an asset. Applicable to the following creative types: all RICH_MEDIA.", alias="hideFlashObjects")
    hide_selection_boxes: Optional[StrictBool] = Field(default=None, description="Whether to hide selection boxes flag for an asset. Applicable to the following creative types: all RICH_MEDIA.", alias="hideSelectionBoxes")
    horizontally_locked: Optional[StrictBool] = Field(default=None, description="Whether the asset is horizontally locked. This is a read-only field. Applicable to the following creative types: all RICH_MEDIA.", alias="horizontallyLocked")
    id: Optional[StrictStr] = Field(default=None, description="Numeric ID of this creative asset. This is a required field and should not be modified. Applicable to all but the following creative types: all REDIRECT and TRACKING_TEXT.")
    id_dimension_value: Optional[DimensionValue] = Field(default=None, alias="idDimensionValue")
    media_duration: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Detected duration for audio or video asset. This is a read-only field. Applicable to the following creative types: INSTREAM_AUDIO, INSTREAM_VIDEO and all VPAID.", alias="mediaDuration")
    mime_type: Optional[StrictStr] = Field(default=None, description="Detected MIME type for audio or video asset. This is a read-only field. Applicable to the following creative types: INSTREAM_AUDIO, INSTREAM_VIDEO and all VPAID.", alias="mimeType")
    offset: Optional[OffsetPosition] = None
    orientation: Optional[StrictStr] = Field(default=None, description="Orientation of video asset. This is a read-only, auto-generated field.")
    original_backup: Optional[StrictBool] = Field(default=None, description="Whether the backup asset is original or changed by the user in Campaign Manager. Applicable to the following creative types: all RICH_MEDIA.", alias="originalBackup")
    polite_load: Optional[StrictBool] = Field(default=None, description="Whether this asset is used as a polite load asset.", alias="politeLoad")
    position: Optional[OffsetPosition] = None
    position_left_unit: Optional[StrictStr] = Field(default=None, description="Offset left unit for an asset. This is a read-only field. Applicable to the following creative types: all RICH_MEDIA.", alias="positionLeftUnit")
    position_top_unit: Optional[StrictStr] = Field(default=None, description="Offset top unit for an asset. This is a read-only field if the asset displayType is ASSET_DISPLAY_TYPE_OVERLAY. Applicable to the following creative types: all RICH_MEDIA.", alias="positionTopUnit")
    progressive_serving_url: Optional[StrictStr] = Field(default=None, description="Progressive URL for video asset. This is a read-only field. Applicable to the following creative types: INSTREAM_VIDEO and all VPAID.", alias="progressiveServingUrl")
    pushdown: Optional[StrictBool] = Field(default=None, description="Whether the asset pushes down other content. Applicable to the following creative types: all RICH_MEDIA. Additionally, only applicable when the asset offsets are 0, the collapsedSize.width matches size.width, and the collapsedSize.height is less than size.height.")
    pushdown_duration: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Pushdown duration in seconds for an asset. Applicable to the following creative types: all RICH_MEDIA.Additionally, only applicable when the asset pushdown field is true, the offsets are 0, the collapsedSize.width matches size.width, and the collapsedSize.height is less than size.height. Acceptable values are 0 to 9.99, inclusive.", alias="pushdownDuration")
    role: Optional[StrictStr] = Field(default=None, description="Role of the asset in relation to creative. Applicable to all but the following creative types: all REDIRECT and TRACKING_TEXT. This is a required field. PRIMARY applies to DISPLAY, FLASH_INPAGE, HTML5_BANNER, IMAGE, DISPLAY_IMAGE_GALLERY, all RICH_MEDIA (which may contain multiple primary assets), and all VPAID creatives. BACKUP_IMAGE applies to FLASH_INPAGE, HTML5_BANNER, all RICH_MEDIA, and all VPAID creatives. Applicable to DISPLAY when the primary asset type is not HTML_IMAGE. ADDITIONAL_IMAGE and ADDITIONAL_FLASH apply to FLASH_INPAGE creatives. OTHER refers to assets from sources other than Campaign Manager, such as Studio uploaded assets, applicable to all RICH_MEDIA and all VPAID creatives. PARENT_VIDEO refers to videos uploaded by the user in Campaign Manager and is applicable to INSTREAM_VIDEO and VPAID_LINEAR_VIDEO creatives. TRANSCODED_VIDEO refers to videos transcoded by Campaign Manager from PARENT_VIDEO assets and is applicable to INSTREAM_VIDEO and VPAID_LINEAR_VIDEO creatives. ALTERNATE_VIDEO refers to the Campaign Manager representation of child asset videos from Studio, and is applicable to VPAID_LINEAR_VIDEO creatives. These cannot be added or removed within Campaign Manager. For VPAID_LINEAR_VIDEO creatives, PARENT_VIDEO, TRANSCODED_VIDEO and ALTERNATE_VIDEO assets that are marked active serve as backup in case the VPAID creative cannot be served. Only PARENT_VIDEO assets can be added or removed for an INSTREAM_VIDEO or VPAID_LINEAR_VIDEO creative. PARENT_AUDIO refers to audios uploaded by the user in Campaign Manager and is applicable to INSTREAM_AUDIO creatives. TRANSCODED_AUDIO refers to audios transcoded by Campaign Manager from PARENT_AUDIO assets and is applicable to INSTREAM_AUDIO creatives. ")
    size: Optional[Size] = None
    ssl_compliant: Optional[StrictBool] = Field(default=None, description="Whether the asset is SSL-compliant. This is a read-only field. Applicable to all but the following creative types: all REDIRECT and TRACKING_TEXT.", alias="sslCompliant")
    start_time_type: Optional[StrictStr] = Field(default=None, description="Initial wait time type before making the asset visible. Applicable to the following creative types: all RICH_MEDIA.", alias="startTimeType")
    streaming_serving_url: Optional[StrictStr] = Field(default=None, description="Streaming URL for video asset. This is a read-only field. Applicable to the following creative types: INSTREAM_VIDEO and all VPAID.", alias="streamingServingUrl")
    transparency: Optional[StrictBool] = Field(default=None, description="Whether the asset is transparent. Applicable to the following creative types: all RICH_MEDIA. Additionally, only applicable to HTML5 assets.")
    vertically_locked: Optional[StrictBool] = Field(default=None, description="Whether the asset is vertically locked. This is a read-only field. Applicable to the following creative types: all RICH_MEDIA.", alias="verticallyLocked")
    window_mode: Optional[StrictStr] = Field(default=None, description="Window mode options for flash assets. Applicable to the following creative types: FLASH_INPAGE, RICH_MEDIA_DISPLAY_EXPANDING, RICH_MEDIA_IM_EXPAND, RICH_MEDIA_DISPLAY_BANNER, and RICH_MEDIA_INPAGE_FLOATING.", alias="windowMode")
    z_index: Optional[StrictInt] = Field(default=None, description="zIndex value of an asset. Applicable to the following creative types: all RICH_MEDIA.Additionally, only applicable to assets whose displayType is NOT one of the following types: ASSET_DISPLAY_TYPE_INPAGE or ASSET_DISPLAY_TYPE_OVERLAY. Acceptable values are -999999999 to 999999999, inclusive.", alias="zIndex")
    zip_filename: Optional[StrictStr] = Field(default=None, description="File name of zip file. This is a read-only field. Applicable to the following creative types: HTML5_BANNER.", alias="zipFilename")
    zip_filesize: Optional[StrictStr] = Field(default=None, description="Size of zip file. This is a read-only field. Applicable to the following creative types: HTML5_BANNER.", alias="zipFilesize")
    __properties: ClassVar[List[str]] = ["actionScript3", "active", "additionalSizes", "alignment", "artworkType", "assetIdentifier", "audioBitRate", "audioSampleRate", "backupImageExit", "bitRate", "childAssetType", "collapsedSize", "companionCreativeIds", "customStartTimeValue", "detectedFeatures", "displayType", "duration", "durationType", "expandedDimension", "fileSize", "flashVersion", "frameRate", "hideFlashObjects", "hideSelectionBoxes", "horizontallyLocked", "id", "idDimensionValue", "mediaDuration", "mimeType", "offset", "orientation", "originalBackup", "politeLoad", "position", "positionLeftUnit", "positionTopUnit", "progressiveServingUrl", "pushdown", "pushdownDuration", "role", "size", "sslCompliant", "startTimeType", "streamingServingUrl", "transparency", "verticallyLocked", "windowMode", "zIndex", "zipFilename", "zipFilesize"]

    @field_validator('alignment')
    def alignment_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['ALIGNMENT_TOP', 'ALIGNMENT_RIGHT', 'ALIGNMENT_BOTTOM', 'ALIGNMENT_LEFT']):
            raise ValueError("must be one of enum values ('ALIGNMENT_TOP', 'ALIGNMENT_RIGHT', 'ALIGNMENT_BOTTOM', 'ALIGNMENT_LEFT')")
        return value

    @field_validator('artwork_type')
    def artwork_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['ARTWORK_TYPE_FLASH', 'ARTWORK_TYPE_HTML5', 'ARTWORK_TYPE_MIXED', 'ARTWORK_TYPE_IMAGE']):
            raise ValueError("must be one of enum values ('ARTWORK_TYPE_FLASH', 'ARTWORK_TYPE_HTML5', 'ARTWORK_TYPE_MIXED', 'ARTWORK_TYPE_IMAGE')")
        return value

    @field_validator('child_asset_type')
    def child_asset_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['CHILD_ASSET_TYPE_FLASH', 'CHILD_ASSET_TYPE_VIDEO', 'CHILD_ASSET_TYPE_IMAGE', 'CHILD_ASSET_TYPE_DATA']):
            raise ValueError("must be one of enum values ('CHILD_ASSET_TYPE_FLASH', 'CHILD_ASSET_TYPE_VIDEO', 'CHILD_ASSET_TYPE_IMAGE', 'CHILD_ASSET_TYPE_DATA')")
        return value

    @field_validator('detected_features')
    def detected_features_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        for i in value:
            if i not in set(['CSS_FONT_FACE', 'CSS_BACKGROUND_SIZE', 'CSS_BORDER_IMAGE', 'CSS_BORDER_RADIUS', 'CSS_BOX_SHADOW', 'CSS_FLEX_BOX', 'CSS_HSLA', 'CSS_MULTIPLE_BGS', 'CSS_OPACITY', 'CSS_RGBA', 'CSS_TEXT_SHADOW', 'CSS_ANIMATIONS', 'CSS_COLUMNS', 'CSS_GENERATED_CONTENT', 'CSS_GRADIENTS', 'CSS_REFLECTIONS', 'CSS_TRANSFORMS', 'CSS_TRANSFORMS3D', 'CSS_TRANSITIONS', 'APPLICATION_CACHE', 'CANVAS', 'CANVAS_TEXT', 'DRAG_AND_DROP', 'HASH_CHANGE', 'HISTORY', 'AUDIO', 'VIDEO', 'INDEXED_DB', 'INPUT_ATTR_AUTOCOMPLETE', 'INPUT_ATTR_AUTOFOCUS', 'INPUT_ATTR_LIST', 'INPUT_ATTR_PLACEHOLDER', 'INPUT_ATTR_MAX', 'INPUT_ATTR_MIN', 'INPUT_ATTR_MULTIPLE', 'INPUT_ATTR_PATTERN', 'INPUT_ATTR_REQUIRED', 'INPUT_ATTR_STEP', 'INPUT_TYPE_SEARCH', 'INPUT_TYPE_TEL', 'INPUT_TYPE_URL', 'INPUT_TYPE_EMAIL', 'INPUT_TYPE_DATETIME', 'INPUT_TYPE_DATE', 'INPUT_TYPE_MONTH', 'INPUT_TYPE_WEEK', 'INPUT_TYPE_TIME', 'INPUT_TYPE_DATETIME_LOCAL', 'INPUT_TYPE_NUMBER', 'INPUT_TYPE_RANGE', 'INPUT_TYPE_COLOR', 'LOCAL_STORAGE', 'POST_MESSAGE', 'SESSION_STORAGE', 'WEB_SOCKETS', 'WEB_SQL_DATABASE', 'WEB_WORKERS', 'GEO_LOCATION', 'INLINE_SVG', 'SMIL', 'SVG_HREF', 'SVG_CLIP_PATHS', 'TOUCH', 'WEBGL', 'SVG_FILTERS', 'SVG_FE_IMAGE']):
                raise ValueError("each list item must be one of ('CSS_FONT_FACE', 'CSS_BACKGROUND_SIZE', 'CSS_BORDER_IMAGE', 'CSS_BORDER_RADIUS', 'CSS_BOX_SHADOW', 'CSS_FLEX_BOX', 'CSS_HSLA', 'CSS_MULTIPLE_BGS', 'CSS_OPACITY', 'CSS_RGBA', 'CSS_TEXT_SHADOW', 'CSS_ANIMATIONS', 'CSS_COLUMNS', 'CSS_GENERATED_CONTENT', 'CSS_GRADIENTS', 'CSS_REFLECTIONS', 'CSS_TRANSFORMS', 'CSS_TRANSFORMS3D', 'CSS_TRANSITIONS', 'APPLICATION_CACHE', 'CANVAS', 'CANVAS_TEXT', 'DRAG_AND_DROP', 'HASH_CHANGE', 'HISTORY', 'AUDIO', 'VIDEO', 'INDEXED_DB', 'INPUT_ATTR_AUTOCOMPLETE', 'INPUT_ATTR_AUTOFOCUS', 'INPUT_ATTR_LIST', 'INPUT_ATTR_PLACEHOLDER', 'INPUT_ATTR_MAX', 'INPUT_ATTR_MIN', 'INPUT_ATTR_MULTIPLE', 'INPUT_ATTR_PATTERN', 'INPUT_ATTR_REQUIRED', 'INPUT_ATTR_STEP', 'INPUT_TYPE_SEARCH', 'INPUT_TYPE_TEL', 'INPUT_TYPE_URL', 'INPUT_TYPE_EMAIL', 'INPUT_TYPE_DATETIME', 'INPUT_TYPE_DATE', 'INPUT_TYPE_MONTH', 'INPUT_TYPE_WEEK', 'INPUT_TYPE_TIME', 'INPUT_TYPE_DATETIME_LOCAL', 'INPUT_TYPE_NUMBER', 'INPUT_TYPE_RANGE', 'INPUT_TYPE_COLOR', 'LOCAL_STORAGE', 'POST_MESSAGE', 'SESSION_STORAGE', 'WEB_SOCKETS', 'WEB_SQL_DATABASE', 'WEB_WORKERS', 'GEO_LOCATION', 'INLINE_SVG', 'SMIL', 'SVG_HREF', 'SVG_CLIP_PATHS', 'TOUCH', 'WEBGL', 'SVG_FILTERS', 'SVG_FE_IMAGE')")
        return value

    @field_validator('display_type')
    def display_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['ASSET_DISPLAY_TYPE_INPAGE', 'ASSET_DISPLAY_TYPE_FLOATING', 'ASSET_DISPLAY_TYPE_OVERLAY', 'ASSET_DISPLAY_TYPE_EXPANDING', 'ASSET_DISPLAY_TYPE_FLASH_IN_FLASH', 'ASSET_DISPLAY_TYPE_FLASH_IN_FLASH_EXPANDING', 'ASSET_DISPLAY_TYPE_PEEL_DOWN', 'ASSET_DISPLAY_TYPE_VPAID_LINEAR', 'ASSET_DISPLAY_TYPE_VPAID_NON_LINEAR', 'ASSET_DISPLAY_TYPE_BACKDROP']):
            raise ValueError("must be one of enum values ('ASSET_DISPLAY_TYPE_INPAGE', 'ASSET_DISPLAY_TYPE_FLOATING', 'ASSET_DISPLAY_TYPE_OVERLAY', 'ASSET_DISPLAY_TYPE_EXPANDING', 'ASSET_DISPLAY_TYPE_FLASH_IN_FLASH', 'ASSET_DISPLAY_TYPE_FLASH_IN_FLASH_EXPANDING', 'ASSET_DISPLAY_TYPE_PEEL_DOWN', 'ASSET_DISPLAY_TYPE_VPAID_LINEAR', 'ASSET_DISPLAY_TYPE_VPAID_NON_LINEAR', 'ASSET_DISPLAY_TYPE_BACKDROP')")
        return value

    @field_validator('duration_type')
    def duration_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['ASSET_DURATION_TYPE_AUTO', 'ASSET_DURATION_TYPE_NONE', 'ASSET_DURATION_TYPE_CUSTOM']):
            raise ValueError("must be one of enum values ('ASSET_DURATION_TYPE_AUTO', 'ASSET_DURATION_TYPE_NONE', 'ASSET_DURATION_TYPE_CUSTOM')")
        return value

    @field_validator('orientation')
    def orientation_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['LANDSCAPE', 'PORTRAIT', 'SQUARE']):
            raise ValueError("must be one of enum values ('LANDSCAPE', 'PORTRAIT', 'SQUARE')")
        return value

    @field_validator('position_left_unit')
    def position_left_unit_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['OFFSET_UNIT_PIXEL', 'OFFSET_UNIT_PERCENT', 'OFFSET_UNIT_PIXEL_FROM_CENTER']):
            raise ValueError("must be one of enum values ('OFFSET_UNIT_PIXEL', 'OFFSET_UNIT_PERCENT', 'OFFSET_UNIT_PIXEL_FROM_CENTER')")
        return value

    @field_validator('position_top_unit')
    def position_top_unit_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['OFFSET_UNIT_PIXEL', 'OFFSET_UNIT_PERCENT', 'OFFSET_UNIT_PIXEL_FROM_CENTER']):
            raise ValueError("must be one of enum values ('OFFSET_UNIT_PIXEL', 'OFFSET_UNIT_PERCENT', 'OFFSET_UNIT_PIXEL_FROM_CENTER')")
        return value

    @field_validator('role')
    def role_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['PRIMARY', 'BACKUP_IMAGE', 'ADDITIONAL_IMAGE', 'ADDITIONAL_FLASH', 'PARENT_VIDEO', 'TRANSCODED_VIDEO', 'OTHER', 'ALTERNATE_VIDEO', 'PARENT_AUDIO', 'TRANSCODED_AUDIO']):
            raise ValueError("must be one of enum values ('PRIMARY', 'BACKUP_IMAGE', 'ADDITIONAL_IMAGE', 'ADDITIONAL_FLASH', 'PARENT_VIDEO', 'TRANSCODED_VIDEO', 'OTHER', 'ALTERNATE_VIDEO', 'PARENT_AUDIO', 'TRANSCODED_AUDIO')")
        return value

    @field_validator('start_time_type')
    def start_time_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['ASSET_START_TIME_TYPE_NONE', 'ASSET_START_TIME_TYPE_CUSTOM']):
            raise ValueError("must be one of enum values ('ASSET_START_TIME_TYPE_NONE', 'ASSET_START_TIME_TYPE_CUSTOM')")
        return value

    @field_validator('window_mode')
    def window_mode_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['OPAQUE', 'WINDOW', 'TRANSPARENT']):
            raise ValueError("must be one of enum values ('OPAQUE', 'WINDOW', 'TRANSPARENT')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CreativeAsset from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in additional_sizes (list)
        _items = []
        if self.additional_sizes:
            for _item_additional_sizes in self.additional_sizes:
                if _item_additional_sizes:
                    _items.append(_item_additional_sizes.to_dict())
            _dict['additionalSizes'] = _items
        # override the default output from pydantic by calling `to_dict()` of asset_identifier
        if self.asset_identifier:
            _dict['assetIdentifier'] = self.asset_identifier.to_dict()
        # override the default output from pydantic by calling `to_dict()` of backup_image_exit
        if self.backup_image_exit:
            _dict['backupImageExit'] = self.backup_image_exit.to_dict()
        # override the default output from pydantic by calling `to_dict()` of collapsed_size
        if self.collapsed_size:
            _dict['collapsedSize'] = self.collapsed_size.to_dict()
        # override the default output from pydantic by calling `to_dict()` of expanded_dimension
        if self.expanded_dimension:
            _dict['expandedDimension'] = self.expanded_dimension.to_dict()
        # override the default output from pydantic by calling `to_dict()` of id_dimension_value
        if self.id_dimension_value:
            _dict['idDimensionValue'] = self.id_dimension_value.to_dict()
        # override the default output from pydantic by calling `to_dict()` of offset
        if self.offset:
            _dict['offset'] = self.offset.to_dict()
        # override the default output from pydantic by calling `to_dict()` of position
        if self.position:
            _dict['position'] = self.position.to_dict()
        # override the default output from pydantic by calling `to_dict()` of size
        if self.size:
            _dict['size'] = self.size.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CreativeAsset from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "actionScript3": obj.get("actionScript3"),
            "active": obj.get("active"),
            "additionalSizes": [Size.from_dict(_item) for _item in obj["additionalSizes"]] if obj.get("additionalSizes") is not None else None,
            "alignment": obj.get("alignment"),
            "artworkType": obj.get("artworkType"),
            "assetIdentifier": CreativeAssetId.from_dict(obj["assetIdentifier"]) if obj.get("assetIdentifier") is not None else None,
            "audioBitRate": obj.get("audioBitRate"),
            "audioSampleRate": obj.get("audioSampleRate"),
            "backupImageExit": CreativeCustomEvent.from_dict(obj["backupImageExit"]) if obj.get("backupImageExit") is not None else None,
            "bitRate": obj.get("bitRate"),
            "childAssetType": obj.get("childAssetType"),
            "collapsedSize": Size.from_dict(obj["collapsedSize"]) if obj.get("collapsedSize") is not None else None,
            "companionCreativeIds": obj.get("companionCreativeIds"),
            "customStartTimeValue": obj.get("customStartTimeValue"),
            "detectedFeatures": obj.get("detectedFeatures"),
            "displayType": obj.get("displayType"),
            "duration": obj.get("duration"),
            "durationType": obj.get("durationType"),
            "expandedDimension": Size.from_dict(obj["expandedDimension"]) if obj.get("expandedDimension") is not None else None,
            "fileSize": obj.get("fileSize"),
            "flashVersion": obj.get("flashVersion"),
            "frameRate": obj.get("frameRate"),
            "hideFlashObjects": obj.get("hideFlashObjects"),
            "hideSelectionBoxes": obj.get("hideSelectionBoxes"),
            "horizontallyLocked": obj.get("horizontallyLocked"),
            "id": obj.get("id"),
            "idDimensionValue": DimensionValue.from_dict(obj["idDimensionValue"]) if obj.get("idDimensionValue") is not None else None,
            "mediaDuration": obj.get("mediaDuration"),
            "mimeType": obj.get("mimeType"),
            "offset": OffsetPosition.from_dict(obj["offset"]) if obj.get("offset") is not None else None,
            "orientation": obj.get("orientation"),
            "originalBackup": obj.get("originalBackup"),
            "politeLoad": obj.get("politeLoad"),
            "position": OffsetPosition.from_dict(obj["position"]) if obj.get("position") is not None else None,
            "positionLeftUnit": obj.get("positionLeftUnit"),
            "positionTopUnit": obj.get("positionTopUnit"),
            "progressiveServingUrl": obj.get("progressiveServingUrl"),
            "pushdown": obj.get("pushdown"),
            "pushdownDuration": obj.get("pushdownDuration"),
            "role": obj.get("role"),
            "size": Size.from_dict(obj["size"]) if obj.get("size") is not None else None,
            "sslCompliant": obj.get("sslCompliant"),
            "startTimeType": obj.get("startTimeType"),
            "streamingServingUrl": obj.get("streamingServingUrl"),
            "transparency": obj.get("transparency"),
            "verticallyLocked": obj.get("verticallyLocked"),
            "windowMode": obj.get("windowMode"),
            "zIndex": obj.get("zIndex"),
            "zipFilename": obj.get("zipFilename"),
            "zipFilesize": obj.get("zipFilesize")
        })
        return _obj



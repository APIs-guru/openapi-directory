# coding: utf-8

"""
    Campaign Manager 360 API

    Build applications to efficiently manage large or complex trafficking, reporting, and attribution workflows for Campaign Manager 360.

    The version of the OpenAPI document: v4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.channel_grouping import ChannelGrouping
from openapi_client.models.date_range import DateRange
from openapi_client.models.dimension_value import DimensionValue
from openapi_client.models.path_filter import PathFilter
from openapi_client.models.sorted_dimension import SortedDimension
from typing import Optional, Set
from typing_extensions import Self

class ReportPathCriteria(BaseModel):
    """
    The report criteria for a report of type \"PATH\".
    """ # noqa: E501
    activity_filters: Optional[List[DimensionValue]] = Field(default=None, description="The list of 'dfa:activity' values to filter on.", alias="activityFilters")
    custom_channel_grouping: Optional[ChannelGrouping] = Field(default=None, alias="customChannelGrouping")
    date_range: Optional[DateRange] = Field(default=None, alias="dateRange")
    dimensions: Optional[List[SortedDimension]] = Field(default=None, description="The list of dimensions the report should include.")
    floodlight_config_id: Optional[DimensionValue] = Field(default=None, alias="floodlightConfigId")
    metric_names: Optional[List[StrictStr]] = Field(default=None, description="The list of names of metrics the report should include.", alias="metricNames")
    path_filters: Optional[List[PathFilter]] = Field(default=None, description="Path Filters.", alias="pathFilters")
    __properties: ClassVar[List[str]] = ["activityFilters", "customChannelGrouping", "dateRange", "dimensions", "floodlightConfigId", "metricNames", "pathFilters"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ReportPathCriteria from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in activity_filters (list)
        _items = []
        if self.activity_filters:
            for _item_activity_filters in self.activity_filters:
                if _item_activity_filters:
                    _items.append(_item_activity_filters.to_dict())
            _dict['activityFilters'] = _items
        # override the default output from pydantic by calling `to_dict()` of custom_channel_grouping
        if self.custom_channel_grouping:
            _dict['customChannelGrouping'] = self.custom_channel_grouping.to_dict()
        # override the default output from pydantic by calling `to_dict()` of date_range
        if self.date_range:
            _dict['dateRange'] = self.date_range.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in dimensions (list)
        _items = []
        if self.dimensions:
            for _item_dimensions in self.dimensions:
                if _item_dimensions:
                    _items.append(_item_dimensions.to_dict())
            _dict['dimensions'] = _items
        # override the default output from pydantic by calling `to_dict()` of floodlight_config_id
        if self.floodlight_config_id:
            _dict['floodlightConfigId'] = self.floodlight_config_id.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in path_filters (list)
        _items = []
        if self.path_filters:
            for _item_path_filters in self.path_filters:
                if _item_path_filters:
                    _items.append(_item_path_filters.to_dict())
            _dict['pathFilters'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ReportPathCriteria from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "activityFilters": [DimensionValue.from_dict(_item) for _item in obj["activityFilters"]] if obj.get("activityFilters") is not None else None,
            "customChannelGrouping": ChannelGrouping.from_dict(obj["customChannelGrouping"]) if obj.get("customChannelGrouping") is not None else None,
            "dateRange": DateRange.from_dict(obj["dateRange"]) if obj.get("dateRange") is not None else None,
            "dimensions": [SortedDimension.from_dict(_item) for _item in obj["dimensions"]] if obj.get("dimensions") is not None else None,
            "floodlightConfigId": DimensionValue.from_dict(obj["floodlightConfigId"]) if obj.get("floodlightConfigId") is not None else None,
            "metricNames": obj.get("metricNames"),
            "pathFilters": [PathFilter.from_dict(_item) for _item in obj["pathFilters"]] if obj.get("pathFilters") is not None else None
        })
        return _obj



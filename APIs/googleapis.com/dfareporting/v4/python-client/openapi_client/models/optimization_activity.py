# coding: utf-8

"""
    Campaign Manager 360 API

    Build applications to efficiently manage large or complex trafficking, reporting, and attribution workflows for Campaign Manager 360.

    The version of the OpenAPI document: v4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.dimension_value import DimensionValue
from typing import Optional, Set
from typing_extensions import Self

class OptimizationActivity(BaseModel):
    """
    Creative optimization activity.
    """ # noqa: E501
    floodlight_activity_id: Optional[StrictStr] = Field(default=None, description="Floodlight activity ID of this optimization activity. This is a required field.", alias="floodlightActivityId")
    floodlight_activity_id_dimension_value: Optional[DimensionValue] = Field(default=None, alias="floodlightActivityIdDimensionValue")
    weight: Optional[StrictInt] = Field(default=None, description="Weight associated with this optimization. The weight assigned will be understood in proportion to the weights assigned to the other optimization activities. Value must be greater than or equal to 1.")
    __properties: ClassVar[List[str]] = ["floodlightActivityId", "floodlightActivityIdDimensionValue", "weight"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of OptimizationActivity from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of floodlight_activity_id_dimension_value
        if self.floodlight_activity_id_dimension_value:
            _dict['floodlightActivityIdDimensionValue'] = self.floodlight_activity_id_dimension_value.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of OptimizationActivity from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "floodlightActivityId": obj.get("floodlightActivityId"),
            "floodlightActivityIdDimensionValue": DimensionValue.from_dict(obj["floodlightActivityIdDimensionValue"]) if obj.get("floodlightActivityIdDimensionValue") is not None else None,
            "weight": obj.get("weight")
        })
        return _obj



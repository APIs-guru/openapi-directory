# coding: utf-8

"""
    Campaign Manager 360 API

    Build applications to efficiently manage large or complex trafficking, reporting, and attribution workflows for Campaign Manager 360.

    The version of the OpenAPI document: v4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.user_role_permission import UserRolePermission
from typing import Optional, Set
from typing_extensions import Self

class UserRole(BaseModel):
    """
    Contains properties of auser role, which is used to manage user access.
    """ # noqa: E501
    account_id: Optional[StrictStr] = Field(default=None, description="Account ID of this user role. This is a read-only field that can be left blank.", alias="accountId")
    default_user_role: Optional[StrictBool] = Field(default=None, description="Whether this is a default user role. Default user roles are created by the system for the account/subaccount and cannot be modified or deleted. Each default user role comes with a basic set of preassigned permissions.", alias="defaultUserRole")
    id: Optional[StrictStr] = Field(default=None, description="ID of this user role. This is a read-only, auto-generated field.")
    kind: Optional[StrictStr] = Field(default=None, description="Identifies what kind of resource this is. Value: the fixed string \"dfareporting#userRole\".")
    name: Optional[StrictStr] = Field(default=None, description="Name of this user role. This is a required field. Must be less than 256 characters long. If this user role is under a subaccount, the name must be unique among sites of the same subaccount. Otherwise, this user role is a top-level user role, and the name must be unique among top-level user roles of the same account.")
    parent_user_role_id: Optional[StrictStr] = Field(default=None, description="ID of the user role that this user role is based on or copied from. This is a required field.", alias="parentUserRoleId")
    permissions: Optional[List[UserRolePermission]] = Field(default=None, description="List of permissions associated with this user role.")
    subaccount_id: Optional[StrictStr] = Field(default=None, description="Subaccount ID of this user role. This is a read-only field that can be left blank.", alias="subaccountId")
    __properties: ClassVar[List[str]] = ["accountId", "defaultUserRole", "id", "kind", "name", "parentUserRoleId", "permissions", "subaccountId"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of UserRole from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in permissions (list)
        _items = []
        if self.permissions:
            for _item_permissions in self.permissions:
                if _item_permissions:
                    _items.append(_item_permissions.to_dict())
            _dict['permissions'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of UserRole from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "accountId": obj.get("accountId"),
            "defaultUserRole": obj.get("defaultUserRole"),
            "id": obj.get("id"),
            "kind": obj.get("kind"),
            "name": obj.get("name"),
            "parentUserRoleId": obj.get("parentUserRoleId"),
            "permissions": [UserRolePermission.from_dict(_item) for _item in obj["permissions"]] if obj.get("permissions") is not None else None,
            "subaccountId": obj.get("subaccountId")
        })
        return _obj



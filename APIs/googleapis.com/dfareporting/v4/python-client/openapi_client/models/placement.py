# coding: utf-8

"""
    Campaign Manager 360 API

    Build applications to efficiently manage large or complex trafficking, reporting, and attribution workflows for Campaign Manager 360.

    The version of the OpenAPI document: v4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.dimension_value import DimensionValue
from openapi_client.models.last_modified_info import LastModifiedInfo
from openapi_client.models.lookback_configuration import LookbackConfiguration
from openapi_client.models.measurement_partner_wrapping_data import MeasurementPartnerWrappingData
from openapi_client.models.placement_conversion_domain_override import PlacementConversionDomainOverride
from openapi_client.models.pricing_schedule import PricingSchedule
from openapi_client.models.size import Size
from openapi_client.models.tag_setting import TagSetting
from openapi_client.models.video_settings import VideoSettings
from typing import Optional, Set
from typing_extensions import Self

class Placement(BaseModel):
    """
    Contains properties of a placement.
    """ # noqa: E501
    account_id: Optional[StrictStr] = Field(default=None, description="Account ID of this placement. This field can be left blank.", alias="accountId")
    active_status: Optional[StrictStr] = Field(default=None, description="Whether this placement is active, inactive, archived or permanently archived.", alias="activeStatus")
    ad_blocking_opt_out: Optional[StrictBool] = Field(default=None, description="Whether this placement opts out of ad blocking. When true, ad blocking is disabled for this placement. When false, the campaign and site settings take effect.", alias="adBlockingOptOut")
    additional_sizes: Optional[List[Size]] = Field(default=None, description="Additional sizes associated with this placement. When inserting or updating a placement, only the size ID field is used.", alias="additionalSizes")
    advertiser_id: Optional[StrictStr] = Field(default=None, description="Advertiser ID of this placement. This field can be left blank.", alias="advertiserId")
    advertiser_id_dimension_value: Optional[DimensionValue] = Field(default=None, alias="advertiserIdDimensionValue")
    campaign_id: Optional[StrictStr] = Field(default=None, description="Campaign ID of this placement. This field is a required field on insertion.", alias="campaignId")
    campaign_id_dimension_value: Optional[DimensionValue] = Field(default=None, alias="campaignIdDimensionValue")
    comment: Optional[StrictStr] = Field(default=None, description="Comments for this placement.")
    compatibility: Optional[StrictStr] = Field(default=None, description="Placement compatibility. DISPLAY and DISPLAY_INTERSTITIAL refer to rendering on desktop, on mobile devices or in mobile apps for regular or interstitial ads respectively. APP and APP_INTERSTITIAL are no longer allowed for new placement insertions. Instead, use DISPLAY or DISPLAY_INTERSTITIAL. IN_STREAM_VIDEO refers to rendering in in-stream video ads developed with the VAST standard. This field is required on insertion.")
    content_category_id: Optional[StrictStr] = Field(default=None, description="ID of the content category assigned to this placement.", alias="contentCategoryId")
    conversion_domain_override: Optional[PlacementConversionDomainOverride] = Field(default=None, alias="conversionDomainOverride")
    create_info: Optional[LastModifiedInfo] = Field(default=None, alias="createInfo")
    directory_site_id: Optional[StrictStr] = Field(default=None, description="Directory site ID of this placement. On insert, you must set either this field or the siteId field to specify the site associated with this placement. This is a required field that is read-only after insertion.", alias="directorySiteId")
    directory_site_id_dimension_value: Optional[DimensionValue] = Field(default=None, alias="directorySiteIdDimensionValue")
    external_id: Optional[StrictStr] = Field(default=None, description="External ID for this placement.", alias="externalId")
    id: Optional[StrictStr] = Field(default=None, description="ID of this placement. This is a read-only, auto-generated field.")
    id_dimension_value: Optional[DimensionValue] = Field(default=None, alias="idDimensionValue")
    key_name: Optional[StrictStr] = Field(default=None, description="Key name of this placement. This is a read-only, auto-generated field.", alias="keyName")
    kind: Optional[StrictStr] = Field(default=None, description="Identifies what kind of resource this is. Value: the fixed string \"dfareporting#placement\".")
    last_modified_info: Optional[LastModifiedInfo] = Field(default=None, alias="lastModifiedInfo")
    lookback_configuration: Optional[LookbackConfiguration] = Field(default=None, alias="lookbackConfiguration")
    name: Optional[StrictStr] = Field(default=None, description="Name of this placement.This is a required field and must be less than or equal to 512 characters long.")
    partner_wrapping_data: Optional[MeasurementPartnerWrappingData] = Field(default=None, alias="partnerWrappingData")
    payment_approved: Optional[StrictBool] = Field(default=None, description="Whether payment was approved for this placement. This is a read-only field relevant only to publisher-paid placements.", alias="paymentApproved")
    payment_source: Optional[StrictStr] = Field(default=None, description="Payment source for this placement. This is a required field that is read-only after insertion.", alias="paymentSource")
    placement_group_id: Optional[StrictStr] = Field(default=None, description="ID of this placement's group, if applicable.", alias="placementGroupId")
    placement_group_id_dimension_value: Optional[DimensionValue] = Field(default=None, alias="placementGroupIdDimensionValue")
    placement_strategy_id: Optional[StrictStr] = Field(default=None, description="ID of the placement strategy assigned to this placement.", alias="placementStrategyId")
    pricing_schedule: Optional[PricingSchedule] = Field(default=None, alias="pricingSchedule")
    primary: Optional[StrictBool] = Field(default=None, description="Whether this placement is the primary placement of a roadblock (placement group). You cannot change this field from true to false. Setting this field to true will automatically set the primary field on the original primary placement of the roadblock to false, and it will automatically set the roadblock's primaryPlacementId field to the ID of this placement.")
    publisher_update_info: Optional[LastModifiedInfo] = Field(default=None, alias="publisherUpdateInfo")
    site_id: Optional[StrictStr] = Field(default=None, description="Site ID associated with this placement. On insert, you must set either this field or the directorySiteId field to specify the site associated with this placement. This is a required field that is read-only after insertion.", alias="siteId")
    site_id_dimension_value: Optional[DimensionValue] = Field(default=None, alias="siteIdDimensionValue")
    size: Optional[Size] = None
    ssl_required: Optional[StrictBool] = Field(default=None, description="Whether creatives assigned to this placement must be SSL-compliant.", alias="sslRequired")
    status: Optional[StrictStr] = Field(default=None, description="Third-party placement status.")
    subaccount_id: Optional[StrictStr] = Field(default=None, description="Subaccount ID of this placement. This field can be left blank.", alias="subaccountId")
    tag_formats: Optional[List[StrictStr]] = Field(default=None, description="Tag formats to generate for this placement. This field is required on insertion. Acceptable values are: - \"PLACEMENT_TAG_STANDARD\" - \"PLACEMENT_TAG_IFRAME_JAVASCRIPT\" - \"PLACEMENT_TAG_IFRAME_ILAYER\" - \"PLACEMENT_TAG_INTERNAL_REDIRECT\" - \"PLACEMENT_TAG_JAVASCRIPT\" - \"PLACEMENT_TAG_INTERSTITIAL_IFRAME_JAVASCRIPT\" - \"PLACEMENT_TAG_INTERSTITIAL_INTERNAL_REDIRECT\" - \"PLACEMENT_TAG_INTERSTITIAL_JAVASCRIPT\" - \"PLACEMENT_TAG_CLICK_COMMANDS\" - \"PLACEMENT_TAG_INSTREAM_VIDEO_PREFETCH\" - \"PLACEMENT_TAG_INSTREAM_VIDEO_PREFETCH_VAST_3\" - \"PLACEMENT_TAG_INSTREAM_VIDEO_PREFETCH_VAST_4\" - \"PLACEMENT_TAG_TRACKING\" - \"PLACEMENT_TAG_TRACKING_IFRAME\" - \"PLACEMENT_TAG_TRACKING_JAVASCRIPT\" ", alias="tagFormats")
    tag_setting: Optional[TagSetting] = Field(default=None, alias="tagSetting")
    video_active_view_opt_out: Optional[StrictBool] = Field(default=None, description="Whether Verification and ActiveView are disabled for in-stream video creatives for this placement. The same setting videoActiveViewOptOut exists on the site level -- the opt out occurs if either of these settings are true. These settings are distinct from DirectorySites.settings.activeViewOptOut or Sites.siteSettings.activeViewOptOut which only apply to display ads. However, Accounts.activeViewOptOut opts out both video traffic, as well as display ads, from Verification and ActiveView.", alias="videoActiveViewOptOut")
    video_settings: Optional[VideoSettings] = Field(default=None, alias="videoSettings")
    vpaid_adapter_choice: Optional[StrictStr] = Field(default=None, description="VPAID adapter setting for this placement. Controls which VPAID format the measurement adapter will use for in-stream video creatives assigned to this placement. *Note:* Flash is no longer supported. This field now defaults to HTML5 when the following values are provided: FLASH, BOTH.", alias="vpaidAdapterChoice")
    wrapping_opt_out: Optional[StrictBool] = Field(default=None, description="Whether this placement opts out of tag wrapping.", alias="wrappingOptOut")
    __properties: ClassVar[List[str]] = ["accountId", "activeStatus", "adBlockingOptOut", "additionalSizes", "advertiserId", "advertiserIdDimensionValue", "campaignId", "campaignIdDimensionValue", "comment", "compatibility", "contentCategoryId", "conversionDomainOverride", "createInfo", "directorySiteId", "directorySiteIdDimensionValue", "externalId", "id", "idDimensionValue", "keyName", "kind", "lastModifiedInfo", "lookbackConfiguration", "name", "partnerWrappingData", "paymentApproved", "paymentSource", "placementGroupId", "placementGroupIdDimensionValue", "placementStrategyId", "pricingSchedule", "primary", "publisherUpdateInfo", "siteId", "siteIdDimensionValue", "size", "sslRequired", "status", "subaccountId", "tagFormats", "tagSetting", "videoActiveViewOptOut", "videoSettings", "vpaidAdapterChoice", "wrappingOptOut"]

    @field_validator('active_status')
    def active_status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['PLACEMENT_STATUS_UNKNOWN', 'PLACEMENT_STATUS_ACTIVE', 'PLACEMENT_STATUS_INACTIVE', 'PLACEMENT_STATUS_ARCHIVED', 'PLACEMENT_STATUS_PERMANENTLY_ARCHIVED']):
            raise ValueError("must be one of enum values ('PLACEMENT_STATUS_UNKNOWN', 'PLACEMENT_STATUS_ACTIVE', 'PLACEMENT_STATUS_INACTIVE', 'PLACEMENT_STATUS_ARCHIVED', 'PLACEMENT_STATUS_PERMANENTLY_ARCHIVED')")
        return value

    @field_validator('compatibility')
    def compatibility_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['DISPLAY', 'DISPLAY_INTERSTITIAL', 'APP', 'APP_INTERSTITIAL', 'IN_STREAM_VIDEO', 'IN_STREAM_AUDIO']):
            raise ValueError("must be one of enum values ('DISPLAY', 'DISPLAY_INTERSTITIAL', 'APP', 'APP_INTERSTITIAL', 'IN_STREAM_VIDEO', 'IN_STREAM_AUDIO')")
        return value

    @field_validator('payment_source')
    def payment_source_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['PLACEMENT_AGENCY_PAID', 'PLACEMENT_PUBLISHER_PAID']):
            raise ValueError("must be one of enum values ('PLACEMENT_AGENCY_PAID', 'PLACEMENT_PUBLISHER_PAID')")
        return value

    @field_validator('status')
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['PENDING_REVIEW', 'PAYMENT_ACCEPTED', 'PAYMENT_REJECTED', 'ACKNOWLEDGE_REJECTION', 'ACKNOWLEDGE_ACCEPTANCE', 'DRAFT']):
            raise ValueError("must be one of enum values ('PENDING_REVIEW', 'PAYMENT_ACCEPTED', 'PAYMENT_REJECTED', 'ACKNOWLEDGE_REJECTION', 'ACKNOWLEDGE_ACCEPTANCE', 'DRAFT')")
        return value

    @field_validator('tag_formats')
    def tag_formats_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        for i in value:
            if i not in set(['PLACEMENT_TAG_STANDARD', 'PLACEMENT_TAG_IFRAME_JAVASCRIPT', 'PLACEMENT_TAG_IFRAME_ILAYER', 'PLACEMENT_TAG_INTERNAL_REDIRECT', 'PLACEMENT_TAG_JAVASCRIPT', 'PLACEMENT_TAG_INTERSTITIAL_IFRAME_JAVASCRIPT', 'PLACEMENT_TAG_INTERSTITIAL_INTERNAL_REDIRECT', 'PLACEMENT_TAG_INTERSTITIAL_JAVASCRIPT', 'PLACEMENT_TAG_CLICK_COMMANDS', 'PLACEMENT_TAG_INSTREAM_VIDEO_PREFETCH', 'PLACEMENT_TAG_TRACKING', 'PLACEMENT_TAG_TRACKING_IFRAME', 'PLACEMENT_TAG_TRACKING_JAVASCRIPT', 'PLACEMENT_TAG_INSTREAM_VIDEO_PREFETCH_VAST_3', 'PLACEMENT_TAG_IFRAME_JAVASCRIPT_LEGACY', 'PLACEMENT_TAG_JAVASCRIPT_LEGACY', 'PLACEMENT_TAG_INTERSTITIAL_IFRAME_JAVASCRIPT_LEGACY', 'PLACEMENT_TAG_INTERSTITIAL_JAVASCRIPT_LEGACY', 'PLACEMENT_TAG_INSTREAM_VIDEO_PREFETCH_VAST_4', 'PLACEMENT_TAG_TRACKING_THIRD_PARTY_MEASUREMENT']):
                raise ValueError("each list item must be one of ('PLACEMENT_TAG_STANDARD', 'PLACEMENT_TAG_IFRAME_JAVASCRIPT', 'PLACEMENT_TAG_IFRAME_ILAYER', 'PLACEMENT_TAG_INTERNAL_REDIRECT', 'PLACEMENT_TAG_JAVASCRIPT', 'PLACEMENT_TAG_INTERSTITIAL_IFRAME_JAVASCRIPT', 'PLACEMENT_TAG_INTERSTITIAL_INTERNAL_REDIRECT', 'PLACEMENT_TAG_INTERSTITIAL_JAVASCRIPT', 'PLACEMENT_TAG_CLICK_COMMANDS', 'PLACEMENT_TAG_INSTREAM_VIDEO_PREFETCH', 'PLACEMENT_TAG_TRACKING', 'PLACEMENT_TAG_TRACKING_IFRAME', 'PLACEMENT_TAG_TRACKING_JAVASCRIPT', 'PLACEMENT_TAG_INSTREAM_VIDEO_PREFETCH_VAST_3', 'PLACEMENT_TAG_IFRAME_JAVASCRIPT_LEGACY', 'PLACEMENT_TAG_JAVASCRIPT_LEGACY', 'PLACEMENT_TAG_INTERSTITIAL_IFRAME_JAVASCRIPT_LEGACY', 'PLACEMENT_TAG_INTERSTITIAL_JAVASCRIPT_LEGACY', 'PLACEMENT_TAG_INSTREAM_VIDEO_PREFETCH_VAST_4', 'PLACEMENT_TAG_TRACKING_THIRD_PARTY_MEASUREMENT')")
        return value

    @field_validator('vpaid_adapter_choice')
    def vpaid_adapter_choice_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['DEFAULT', 'FLASH', 'HTML5', 'BOTH']):
            raise ValueError("must be one of enum values ('DEFAULT', 'FLASH', 'HTML5', 'BOTH')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Placement from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in additional_sizes (list)
        _items = []
        if self.additional_sizes:
            for _item_additional_sizes in self.additional_sizes:
                if _item_additional_sizes:
                    _items.append(_item_additional_sizes.to_dict())
            _dict['additionalSizes'] = _items
        # override the default output from pydantic by calling `to_dict()` of advertiser_id_dimension_value
        if self.advertiser_id_dimension_value:
            _dict['advertiserIdDimensionValue'] = self.advertiser_id_dimension_value.to_dict()
        # override the default output from pydantic by calling `to_dict()` of campaign_id_dimension_value
        if self.campaign_id_dimension_value:
            _dict['campaignIdDimensionValue'] = self.campaign_id_dimension_value.to_dict()
        # override the default output from pydantic by calling `to_dict()` of conversion_domain_override
        if self.conversion_domain_override:
            _dict['conversionDomainOverride'] = self.conversion_domain_override.to_dict()
        # override the default output from pydantic by calling `to_dict()` of create_info
        if self.create_info:
            _dict['createInfo'] = self.create_info.to_dict()
        # override the default output from pydantic by calling `to_dict()` of directory_site_id_dimension_value
        if self.directory_site_id_dimension_value:
            _dict['directorySiteIdDimensionValue'] = self.directory_site_id_dimension_value.to_dict()
        # override the default output from pydantic by calling `to_dict()` of id_dimension_value
        if self.id_dimension_value:
            _dict['idDimensionValue'] = self.id_dimension_value.to_dict()
        # override the default output from pydantic by calling `to_dict()` of last_modified_info
        if self.last_modified_info:
            _dict['lastModifiedInfo'] = self.last_modified_info.to_dict()
        # override the default output from pydantic by calling `to_dict()` of lookback_configuration
        if self.lookback_configuration:
            _dict['lookbackConfiguration'] = self.lookback_configuration.to_dict()
        # override the default output from pydantic by calling `to_dict()` of partner_wrapping_data
        if self.partner_wrapping_data:
            _dict['partnerWrappingData'] = self.partner_wrapping_data.to_dict()
        # override the default output from pydantic by calling `to_dict()` of placement_group_id_dimension_value
        if self.placement_group_id_dimension_value:
            _dict['placementGroupIdDimensionValue'] = self.placement_group_id_dimension_value.to_dict()
        # override the default output from pydantic by calling `to_dict()` of pricing_schedule
        if self.pricing_schedule:
            _dict['pricingSchedule'] = self.pricing_schedule.to_dict()
        # override the default output from pydantic by calling `to_dict()` of publisher_update_info
        if self.publisher_update_info:
            _dict['publisherUpdateInfo'] = self.publisher_update_info.to_dict()
        # override the default output from pydantic by calling `to_dict()` of site_id_dimension_value
        if self.site_id_dimension_value:
            _dict['siteIdDimensionValue'] = self.site_id_dimension_value.to_dict()
        # override the default output from pydantic by calling `to_dict()` of size
        if self.size:
            _dict['size'] = self.size.to_dict()
        # override the default output from pydantic by calling `to_dict()` of tag_setting
        if self.tag_setting:
            _dict['tagSetting'] = self.tag_setting.to_dict()
        # override the default output from pydantic by calling `to_dict()` of video_settings
        if self.video_settings:
            _dict['videoSettings'] = self.video_settings.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Placement from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "accountId": obj.get("accountId"),
            "activeStatus": obj.get("activeStatus"),
            "adBlockingOptOut": obj.get("adBlockingOptOut"),
            "additionalSizes": [Size.from_dict(_item) for _item in obj["additionalSizes"]] if obj.get("additionalSizes") is not None else None,
            "advertiserId": obj.get("advertiserId"),
            "advertiserIdDimensionValue": DimensionValue.from_dict(obj["advertiserIdDimensionValue"]) if obj.get("advertiserIdDimensionValue") is not None else None,
            "campaignId": obj.get("campaignId"),
            "campaignIdDimensionValue": DimensionValue.from_dict(obj["campaignIdDimensionValue"]) if obj.get("campaignIdDimensionValue") is not None else None,
            "comment": obj.get("comment"),
            "compatibility": obj.get("compatibility"),
            "contentCategoryId": obj.get("contentCategoryId"),
            "conversionDomainOverride": PlacementConversionDomainOverride.from_dict(obj["conversionDomainOverride"]) if obj.get("conversionDomainOverride") is not None else None,
            "createInfo": LastModifiedInfo.from_dict(obj["createInfo"]) if obj.get("createInfo") is not None else None,
            "directorySiteId": obj.get("directorySiteId"),
            "directorySiteIdDimensionValue": DimensionValue.from_dict(obj["directorySiteIdDimensionValue"]) if obj.get("directorySiteIdDimensionValue") is not None else None,
            "externalId": obj.get("externalId"),
            "id": obj.get("id"),
            "idDimensionValue": DimensionValue.from_dict(obj["idDimensionValue"]) if obj.get("idDimensionValue") is not None else None,
            "keyName": obj.get("keyName"),
            "kind": obj.get("kind"),
            "lastModifiedInfo": LastModifiedInfo.from_dict(obj["lastModifiedInfo"]) if obj.get("lastModifiedInfo") is not None else None,
            "lookbackConfiguration": LookbackConfiguration.from_dict(obj["lookbackConfiguration"]) if obj.get("lookbackConfiguration") is not None else None,
            "name": obj.get("name"),
            "partnerWrappingData": MeasurementPartnerWrappingData.from_dict(obj["partnerWrappingData"]) if obj.get("partnerWrappingData") is not None else None,
            "paymentApproved": obj.get("paymentApproved"),
            "paymentSource": obj.get("paymentSource"),
            "placementGroupId": obj.get("placementGroupId"),
            "placementGroupIdDimensionValue": DimensionValue.from_dict(obj["placementGroupIdDimensionValue"]) if obj.get("placementGroupIdDimensionValue") is not None else None,
            "placementStrategyId": obj.get("placementStrategyId"),
            "pricingSchedule": PricingSchedule.from_dict(obj["pricingSchedule"]) if obj.get("pricingSchedule") is not None else None,
            "primary": obj.get("primary"),
            "publisherUpdateInfo": LastModifiedInfo.from_dict(obj["publisherUpdateInfo"]) if obj.get("publisherUpdateInfo") is not None else None,
            "siteId": obj.get("siteId"),
            "siteIdDimensionValue": DimensionValue.from_dict(obj["siteIdDimensionValue"]) if obj.get("siteIdDimensionValue") is not None else None,
            "size": Size.from_dict(obj["size"]) if obj.get("size") is not None else None,
            "sslRequired": obj.get("sslRequired"),
            "status": obj.get("status"),
            "subaccountId": obj.get("subaccountId"),
            "tagFormats": obj.get("tagFormats"),
            "tagSetting": TagSetting.from_dict(obj["tagSetting"]) if obj.get("tagSetting") is not None else None,
            "videoActiveViewOptOut": obj.get("videoActiveViewOptOut"),
            "videoSettings": VideoSettings.from_dict(obj["videoSettings"]) if obj.get("videoSettings") is not None else None,
            "vpaidAdapterChoice": obj.get("vpaidAdapterChoice"),
            "wrappingOptOut": obj.get("wrappingOptOut")
        })
        return _obj



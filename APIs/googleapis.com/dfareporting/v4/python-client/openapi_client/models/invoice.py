# coding: utf-8

"""
    Campaign Manager 360 API

    Build applications to efficiently manage large or complex trafficking, reporting, and attribution workflows for Campaign Manager 360.

    The version of the OpenAPI document: v4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.campaign_summary import CampaignSummary
from typing import Optional, Set
from typing_extensions import Self

class Invoice(BaseModel):
    """
    Contains information about a single invoice
    """ # noqa: E501
    campaign_summaries: Optional[List[CampaignSummary]] = Field(default=None, description="The list of summarized campaign information associated with this invoice.")
    corrected_invoice_id: Optional[StrictStr] = Field(default=None, description="The originally issued invoice that is being adjusted by this invoice, if applicable. May appear on invoice PDF as *Reference invoice number*.", alias="correctedInvoiceId")
    currency_code: Optional[StrictStr] = Field(default=None, description="Invoice currency code in ISO 4217 format.", alias="currencyCode")
    due_date: Optional[StrictStr] = Field(default=None, description="The invoice due date.", alias="dueDate")
    id: Optional[StrictStr] = Field(default=None, description="ID of this invoice.")
    invoice_type: Optional[StrictStr] = Field(default=None, description="The type of invoice document.", alias="invoiceType")
    issue_date: Optional[StrictStr] = Field(default=None, description="The date when the invoice was issued.", alias="issueDate")
    kind: Optional[StrictStr] = Field(default=None, description="Identifies what kind of resource this is. Value: the fixed string \"dfareporting#invoice\".")
    payments_account_id: Optional[StrictStr] = Field(default=None, description="The ID of the payments account the invoice belongs to. Appears on the invoice PDF as *Billing Account Number*.", alias="paymentsAccountId")
    payments_profile_id: Optional[StrictStr] = Field(default=None, description="The ID of the payments profile the invoice belongs to. Appears on the invoice PDF as *Billing ID*.", alias="paymentsProfileId")
    pdf_url: Optional[StrictStr] = Field(default=None, description="The URL to download a PDF copy of the invoice. Note that this URL is user specific and requires a valid OAuth 2.0 access token to access. The access token must be provided in an *Authorization: Bearer* HTTP header. The URL will only be usable for 7 days from when the api is called.", alias="pdfUrl")
    purchase_order_number: Optional[StrictStr] = Field(default=None, description="Purchase order number associated with the invoice.", alias="purchaseOrderNumber")
    replaced_invoice_ids: Optional[List[StrictStr]] = Field(default=None, description="The originally issued invoice(s) that is being cancelled by this invoice, if applicable. May appear on invoice PDF as *Replaced invoice numbers*. Note: There may be multiple replaced invoices due to consolidation of multiple invoices into a single invoice.", alias="replacedInvoiceIds")
    service_end_date: Optional[StrictStr] = Field(default=None, description="The invoice service end date.", alias="serviceEndDate")
    service_start_date: Optional[StrictStr] = Field(default=None, description="The invoice service start date.", alias="serviceStartDate")
    subtotal_amount_micros: Optional[StrictStr] = Field(default=None, description="The pre-tax subtotal amount, in micros of the invoice's currency.", alias="subtotalAmountMicros")
    total_amount_micros: Optional[StrictStr] = Field(default=None, description="The invoice total amount, in micros of the invoice's currency.", alias="totalAmountMicros")
    total_tax_amount_micros: Optional[StrictStr] = Field(default=None, description="The sum of all taxes in invoice, in micros of the invoice's currency.", alias="totalTaxAmountMicros")
    __properties: ClassVar[List[str]] = ["campaign_summaries", "correctedInvoiceId", "currencyCode", "dueDate", "id", "invoiceType", "issueDate", "kind", "paymentsAccountId", "paymentsProfileId", "pdfUrl", "purchaseOrderNumber", "replacedInvoiceIds", "serviceEndDate", "serviceStartDate", "subtotalAmountMicros", "totalAmountMicros", "totalTaxAmountMicros"]

    @field_validator('invoice_type')
    def invoice_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['INVOICE_TYPE_UNSPECIFIED', 'INVOICE_TYPE_CREDIT', 'INVOICE_TYPE_INVOICE']):
            raise ValueError("must be one of enum values ('INVOICE_TYPE_UNSPECIFIED', 'INVOICE_TYPE_CREDIT', 'INVOICE_TYPE_INVOICE')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Invoice from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in campaign_summaries (list)
        _items = []
        if self.campaign_summaries:
            for _item_campaign_summaries in self.campaign_summaries:
                if _item_campaign_summaries:
                    _items.append(_item_campaign_summaries.to_dict())
            _dict['campaign_summaries'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Invoice from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "campaign_summaries": [CampaignSummary.from_dict(_item) for _item in obj["campaign_summaries"]] if obj.get("campaign_summaries") is not None else None,
            "correctedInvoiceId": obj.get("correctedInvoiceId"),
            "currencyCode": obj.get("currencyCode"),
            "dueDate": obj.get("dueDate"),
            "id": obj.get("id"),
            "invoiceType": obj.get("invoiceType"),
            "issueDate": obj.get("issueDate"),
            "kind": obj.get("kind"),
            "paymentsAccountId": obj.get("paymentsAccountId"),
            "paymentsProfileId": obj.get("paymentsProfileId"),
            "pdfUrl": obj.get("pdfUrl"),
            "purchaseOrderNumber": obj.get("purchaseOrderNumber"),
            "replacedInvoiceIds": obj.get("replacedInvoiceIds"),
            "serviceEndDate": obj.get("serviceEndDate"),
            "serviceStartDate": obj.get("serviceStartDate"),
            "subtotalAmountMicros": obj.get("subtotalAmountMicros"),
            "totalAmountMicros": obj.get("totalAmountMicros"),
            "totalTaxAmountMicros": obj.get("totalTaxAmountMicros")
        })
        return _obj



# coding: utf-8

"""
    Campaign Manager 360 API

    Build applications to efficiently manage large or complex trafficking, reporting, and attribution workflows for Campaign Manager 360.

    The version of the OpenAPI document: v4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from openapi_client.models.custom_floodlight_variable import CustomFloodlightVariable
from openapi_client.models.user_identifier import UserIdentifier
from typing import Optional, Set
from typing_extensions import Self

class Conversion(BaseModel):
    """
    A Conversion represents when a user successfully performs a desired action after seeing an ad.
    """ # noqa: E501
    ad_user_data_consent: Optional[StrictStr] = Field(default=None, description="This represents consent for ad user data.", alias="adUserDataConsent")
    child_directed_treatment: Optional[StrictBool] = Field(default=None, description="Whether this particular request may come from a user under the age of 13, under COPPA compliance.", alias="childDirectedTreatment")
    custom_variables: Optional[List[CustomFloodlightVariable]] = Field(default=None, description="Custom floodlight variables. This field may only be used when calling batchinsert; it is not supported by batchupdate.", alias="customVariables")
    dclid: Optional[StrictStr] = Field(default=None, description="The display click ID. This field is mutually exclusive with encryptedUserId, encryptedUserIdCandidates[], matchId, mobileDeviceId, gclid, and impressionId. This or encryptedUserId or encryptedUserIdCandidates[] or matchId or mobileDeviceId or gclid or impressionId is a required field.")
    encrypted_user_id: Optional[StrictStr] = Field(default=None, description="The alphanumeric encrypted user ID. When set, encryptionInfo should also be specified. This field is mutually exclusive with encryptedUserIdCandidates[], matchId, mobileDeviceId, gclid, dclid, and impressionId. This or encryptedUserIdCandidates[] or matchId or mobileDeviceId or gclid or dclid or impressionId is a required field.", alias="encryptedUserId")
    encrypted_user_id_candidates: Optional[List[StrictStr]] = Field(default=None, description="A list of the alphanumeric encrypted user IDs. Any user ID with exposure prior to the conversion timestamp will be used in the inserted conversion. If no such user ID is found then the conversion will be rejected with INVALID_ARGUMENT error. When set, encryptionInfo should also be specified. This field may only be used when calling batchinsert; it is not supported by batchupdate. This field is mutually exclusive with encryptedUserId, matchId, mobileDeviceId, gclid dclid, and impressionId. This or encryptedUserId or matchId or mobileDeviceId or gclid or dclid or impressionId is a required field.", alias="encryptedUserIdCandidates")
    floodlight_activity_id: Optional[StrictStr] = Field(default=None, description="Floodlight Activity ID of this conversion. This is a required field.", alias="floodlightActivityId")
    floodlight_configuration_id: Optional[StrictStr] = Field(default=None, description="Floodlight Configuration ID of this conversion. This is a required field.", alias="floodlightConfigurationId")
    gclid: Optional[StrictStr] = Field(default=None, description="The Google click ID. This field is mutually exclusive with encryptedUserId, encryptedUserIdCandidates[], matchId, mobileDeviceId, dclid, and impressionId. This or encryptedUserId or encryptedUserIdCandidates[] or matchId or mobileDeviceId or dclid or impressionId is a required field.")
    impression_id: Optional[StrictStr] = Field(default=None, description="The impression ID. This field is mutually exclusive with encryptedUserId, encryptedUserIdCandidates[], matchId, mobileDeviceId, and gclid. One of these identifiers must be set.", alias="impressionId")
    kind: Optional[StrictStr] = Field(default=None, description="Identifies what kind of resource this is. Value: the fixed string \"dfareporting#conversion\".")
    limit_ad_tracking: Optional[StrictBool] = Field(default=None, description="Whether Limit Ad Tracking is enabled. When set to true, the conversion will be used for reporting but not targeting. This will prevent remarketing.", alias="limitAdTracking")
    match_id: Optional[StrictStr] = Field(default=None, description="The match ID field. A match ID is your own first-party identifier that has been synced with Google using the match ID feature in Floodlight. This field is mutually exclusive with encryptedUserId, encryptedUserIdCandidates[],mobileDeviceId, gclid, dclid, and impressionId. This or encryptedUserId orencryptedUserIdCandidates[] or mobileDeviceId or gclid or dclid or impressionIdis a required field.", alias="matchId")
    mobile_device_id: Optional[StrictStr] = Field(default=None, description="The mobile device ID. This field is mutually exclusive with encryptedUserId, encryptedUserIdCandidates[], matchId, gclid, dclid, and impressionId. This or encryptedUserId or encryptedUserIdCandidates[] or matchId or gclid or dclid or impressionId is a required field.", alias="mobileDeviceId")
    non_personalized_ad: Optional[StrictBool] = Field(default=None, description="Whether the conversion was for a non personalized ad.", alias="nonPersonalizedAd")
    ordinal: Optional[StrictStr] = Field(default=None, description="The ordinal of the conversion. Use this field to control how conversions of the same user and day are de-duplicated. This is a required field.")
    quantity: Optional[StrictStr] = Field(default=None, description="The quantity of the conversion. This is a required field.")
    timestamp_micros: Optional[StrictStr] = Field(default=None, description="The timestamp of conversion, in Unix epoch micros. This is a required field.", alias="timestampMicros")
    treatment_for_underage: Optional[StrictBool] = Field(default=None, description="Whether this particular request may come from a user under the age of 16 (may differ by country), under compliance with the European Union's General Data Protection Regulation (GDPR).", alias="treatmentForUnderage")
    user_identifiers: Optional[List[UserIdentifier]] = Field(default=None, description="The user identifiers to enhance the conversion. The maximum number of user identifiers for each conversion is 5.", alias="userIdentifiers")
    value: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The value of the conversion. This is a required field.")
    __properties: ClassVar[List[str]] = ["adUserDataConsent", "childDirectedTreatment", "customVariables", "dclid", "encryptedUserId", "encryptedUserIdCandidates", "floodlightActivityId", "floodlightConfigurationId", "gclid", "impressionId", "kind", "limitAdTracking", "matchId", "mobileDeviceId", "nonPersonalizedAd", "ordinal", "quantity", "timestampMicros", "treatmentForUnderage", "userIdentifiers", "value"]

    @field_validator('ad_user_data_consent')
    def ad_user_data_consent_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['GRANTED', 'DENIED']):
            raise ValueError("must be one of enum values ('GRANTED', 'DENIED')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Conversion from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in custom_variables (list)
        _items = []
        if self.custom_variables:
            for _item_custom_variables in self.custom_variables:
                if _item_custom_variables:
                    _items.append(_item_custom_variables.to_dict())
            _dict['customVariables'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in user_identifiers (list)
        _items = []
        if self.user_identifiers:
            for _item_user_identifiers in self.user_identifiers:
                if _item_user_identifiers:
                    _items.append(_item_user_identifiers.to_dict())
            _dict['userIdentifiers'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Conversion from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "adUserDataConsent": obj.get("adUserDataConsent"),
            "childDirectedTreatment": obj.get("childDirectedTreatment"),
            "customVariables": [CustomFloodlightVariable.from_dict(_item) for _item in obj["customVariables"]] if obj.get("customVariables") is not None else None,
            "dclid": obj.get("dclid"),
            "encryptedUserId": obj.get("encryptedUserId"),
            "encryptedUserIdCandidates": obj.get("encryptedUserIdCandidates"),
            "floodlightActivityId": obj.get("floodlightActivityId"),
            "floodlightConfigurationId": obj.get("floodlightConfigurationId"),
            "gclid": obj.get("gclid"),
            "impressionId": obj.get("impressionId"),
            "kind": obj.get("kind"),
            "limitAdTracking": obj.get("limitAdTracking"),
            "matchId": obj.get("matchId"),
            "mobileDeviceId": obj.get("mobileDeviceId"),
            "nonPersonalizedAd": obj.get("nonPersonalizedAd"),
            "ordinal": obj.get("ordinal"),
            "quantity": obj.get("quantity"),
            "timestampMicros": obj.get("timestampMicros"),
            "treatmentForUnderage": obj.get("treatmentForUnderage"),
            "userIdentifiers": [UserIdentifier.from_dict(_item) for _item in obj["userIdentifiers"]] if obj.get("userIdentifiers") is not None else None,
            "value": obj.get("value")
        })
        return _obj



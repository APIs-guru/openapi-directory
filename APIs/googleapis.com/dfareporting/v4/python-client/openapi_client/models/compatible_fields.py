# coding: utf-8

"""
    Campaign Manager 360 API

    Build applications to efficiently manage large or complex trafficking, reporting, and attribution workflows for Campaign Manager 360.

    The version of the OpenAPI document: v4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.cross_dimension_reach_report_compatible_fields import CrossDimensionReachReportCompatibleFields
from openapi_client.models.floodlight_report_compatible_fields import FloodlightReportCompatibleFields
from openapi_client.models.path_report_compatible_fields import PathReportCompatibleFields
from openapi_client.models.path_to_conversion_report_compatible_fields import PathToConversionReportCompatibleFields
from openapi_client.models.reach_report_compatible_fields import ReachReportCompatibleFields
from openapi_client.models.report_compatible_fields import ReportCompatibleFields
from typing import Optional, Set
from typing_extensions import Self

class CompatibleFields(BaseModel):
    """
    Represents a response to the queryCompatibleFields method.
    """ # noqa: E501
    cross_dimension_reach_report_compatible_fields: Optional[CrossDimensionReachReportCompatibleFields] = Field(default=None, alias="crossDimensionReachReportCompatibleFields")
    floodlight_report_compatible_fields: Optional[FloodlightReportCompatibleFields] = Field(default=None, alias="floodlightReportCompatibleFields")
    kind: Optional[StrictStr] = Field(default=None, description="The kind of resource this is, in this case dfareporting#compatibleFields.")
    path_attribution_report_compatible_fields: Optional[PathReportCompatibleFields] = Field(default=None, alias="pathAttributionReportCompatibleFields")
    path_report_compatible_fields: Optional[PathReportCompatibleFields] = Field(default=None, alias="pathReportCompatibleFields")
    path_to_conversion_report_compatible_fields: Optional[PathToConversionReportCompatibleFields] = Field(default=None, alias="pathToConversionReportCompatibleFields")
    reach_report_compatible_fields: Optional[ReachReportCompatibleFields] = Field(default=None, alias="reachReportCompatibleFields")
    report_compatible_fields: Optional[ReportCompatibleFields] = Field(default=None, alias="reportCompatibleFields")
    __properties: ClassVar[List[str]] = ["crossDimensionReachReportCompatibleFields", "floodlightReportCompatibleFields", "kind", "pathAttributionReportCompatibleFields", "pathReportCompatibleFields", "pathToConversionReportCompatibleFields", "reachReportCompatibleFields", "reportCompatibleFields"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CompatibleFields from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of cross_dimension_reach_report_compatible_fields
        if self.cross_dimension_reach_report_compatible_fields:
            _dict['crossDimensionReachReportCompatibleFields'] = self.cross_dimension_reach_report_compatible_fields.to_dict()
        # override the default output from pydantic by calling `to_dict()` of floodlight_report_compatible_fields
        if self.floodlight_report_compatible_fields:
            _dict['floodlightReportCompatibleFields'] = self.floodlight_report_compatible_fields.to_dict()
        # override the default output from pydantic by calling `to_dict()` of path_attribution_report_compatible_fields
        if self.path_attribution_report_compatible_fields:
            _dict['pathAttributionReportCompatibleFields'] = self.path_attribution_report_compatible_fields.to_dict()
        # override the default output from pydantic by calling `to_dict()` of path_report_compatible_fields
        if self.path_report_compatible_fields:
            _dict['pathReportCompatibleFields'] = self.path_report_compatible_fields.to_dict()
        # override the default output from pydantic by calling `to_dict()` of path_to_conversion_report_compatible_fields
        if self.path_to_conversion_report_compatible_fields:
            _dict['pathToConversionReportCompatibleFields'] = self.path_to_conversion_report_compatible_fields.to_dict()
        # override the default output from pydantic by calling `to_dict()` of reach_report_compatible_fields
        if self.reach_report_compatible_fields:
            _dict['reachReportCompatibleFields'] = self.reach_report_compatible_fields.to_dict()
        # override the default output from pydantic by calling `to_dict()` of report_compatible_fields
        if self.report_compatible_fields:
            _dict['reportCompatibleFields'] = self.report_compatible_fields.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CompatibleFields from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "crossDimensionReachReportCompatibleFields": CrossDimensionReachReportCompatibleFields.from_dict(obj["crossDimensionReachReportCompatibleFields"]) if obj.get("crossDimensionReachReportCompatibleFields") is not None else None,
            "floodlightReportCompatibleFields": FloodlightReportCompatibleFields.from_dict(obj["floodlightReportCompatibleFields"]) if obj.get("floodlightReportCompatibleFields") is not None else None,
            "kind": obj.get("kind"),
            "pathAttributionReportCompatibleFields": PathReportCompatibleFields.from_dict(obj["pathAttributionReportCompatibleFields"]) if obj.get("pathAttributionReportCompatibleFields") is not None else None,
            "pathReportCompatibleFields": PathReportCompatibleFields.from_dict(obj["pathReportCompatibleFields"]) if obj.get("pathReportCompatibleFields") is not None else None,
            "pathToConversionReportCompatibleFields": PathToConversionReportCompatibleFields.from_dict(obj["pathToConversionReportCompatibleFields"]) if obj.get("pathToConversionReportCompatibleFields") is not None else None,
            "reachReportCompatibleFields": ReachReportCompatibleFields.from_dict(obj["reachReportCompatibleFields"]) if obj.get("reachReportCompatibleFields") is not None else None,
            "reportCompatibleFields": ReportCompatibleFields.from_dict(obj["reportCompatibleFields"]) if obj.get("reportCompatibleFields") is not None else None
        })
        return _obj



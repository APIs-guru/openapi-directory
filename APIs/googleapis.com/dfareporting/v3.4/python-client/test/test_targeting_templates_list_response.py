# coding: utf-8

"""
    Campaign Manager 360 API

    Build applications to efficiently manage large or complex trafficking, reporting, and attribution workflows for Campaign Manager 360.

    The version of the OpenAPI document: v3.4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.targeting_templates_list_response import TargetingTemplatesListResponse

class TestTargetingTemplatesListResponse(unittest.TestCase):
    """TargetingTemplatesListResponse unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> TargetingTemplatesListResponse:
        """Test TargetingTemplatesListResponse
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `TargetingTemplatesListResponse`
        """
        model = TargetingTemplatesListResponse()
        if include_optional:
            return TargetingTemplatesListResponse(
                kind = '',
                next_page_token = '',
                targeting_templates = [
                    openapi_client.models.targeting_template.TargetingTemplate(
                        account_id = '', 
                        advertiser_id = '', 
                        advertiser_id_dimension_value = openapi_client.models.dimension_value.DimensionValue(
                            dimension_name = '', 
                            etag = '', 
                            id = '', 
                            kind = '', 
                            match_type = 'EXACT', 
                            value = '', ), 
                        day_part_targeting = openapi_client.models.day_part_targeting.DayPartTargeting(
                            days_of_week = [
                                'MONDAY'
                                ], 
                            hours_of_day = [
                                56
                                ], 
                            user_local_time = True, ), 
                        geo_targeting = openapi_client.models.geo_targeting.GeoTargeting(
                            cities = [
                                openapi_client.models.city.City(
                                    country_code = '', 
                                    country_dart_id = '', 
                                    dart_id = '', 
                                    kind = '', 
                                    metro_code = '', 
                                    metro_dma_id = '', 
                                    name = '', 
                                    region_code = '', 
                                    region_dart_id = '', )
                                ], 
                            countries = [
                                openapi_client.models.country.Country(
                                    country_code = '', 
                                    dart_id = '', 
                                    kind = '', 
                                    name = '', 
                                    ssl_enabled = True, )
                                ], 
                            exclude_countries = True, 
                            metros = [
                                openapi_client.models.metro.Metro(
                                    country_code = '', 
                                    country_dart_id = '', 
                                    dart_id = '', 
                                    dma_id = '', 
                                    kind = '', 
                                    metro_code = '', 
                                    name = '', )
                                ], 
                            postal_codes = [
                                openapi_client.models.postal_code.PostalCode(
                                    code = '', 
                                    country_code = '', 
                                    country_dart_id = '', 
                                    id = '', 
                                    kind = '', )
                                ], 
                            regions = [
                                openapi_client.models.region.Region(
                                    country_code = '', 
                                    country_dart_id = '', 
                                    dart_id = '', 
                                    kind = '', 
                                    name = '', 
                                    region_code = '', )
                                ], ), 
                        id = '', 
                        key_value_targeting_expression = openapi_client.models.key_value_targeting_expression.KeyValueTargetingExpression(
                            expression = '', ), 
                        kind = '', 
                        language_targeting = openapi_client.models.language_targeting.LanguageTargeting(
                            languages = [
                                openapi_client.models.language.Language(
                                    id = '', 
                                    kind = '', 
                                    language_code = '', 
                                    name = '', )
                                ], ), 
                        list_targeting_expression = openapi_client.models.list_targeting_expression.ListTargetingExpression(
                            expression = '', ), 
                        name = '', 
                        subaccount_id = '', 
                        technology_targeting = openapi_client.models.technology_targeting.TechnologyTargeting(
                            browsers = [
                                openapi_client.models.browser.Browser(
                                    browser_version_id = '', 
                                    dart_id = '', 
                                    kind = '', 
                                    major_version = '', 
                                    minor_version = '', 
                                    name = '', )
                                ], 
                            connection_types = [
                                openapi_client.models.connection_type.ConnectionType(
                                    id = '', 
                                    kind = '', 
                                    name = '', )
                                ], 
                            mobile_carriers = [
                                openapi_client.models.mobile_carrier.MobileCarrier(
                                    country_code = '', 
                                    country_dart_id = '', 
                                    id = '', 
                                    kind = '', 
                                    name = '', )
                                ], 
                            operating_system_versions = [
                                openapi_client.models.operating_system_version.OperatingSystemVersion(
                                    id = '', 
                                    kind = '', 
                                    major_version = '', 
                                    minor_version = '', 
                                    name = '', 
                                    operating_system = openapi_client.models.operating_system.OperatingSystem(
                                        dart_id = '', 
                                        desktop = True, 
                                        kind = '', 
                                        mobile = True, 
                                        name = '', ), )
                                ], 
                            operating_systems = [
                                openapi_client.models.operating_system.OperatingSystem(
                                    dart_id = '', 
                                    desktop = True, 
                                    kind = '', 
                                    mobile = True, 
                                    name = '', )
                                ], 
                            platform_types = [
                                openapi_client.models.platform_type.PlatformType(
                                    id = '', 
                                    kind = '', 
                                    name = '', )
                                ], ), )
                    ]
            )
        else:
            return TargetingTemplatesListResponse(
        )
        """

    def testTargetingTemplatesListResponse(self):
        """Test TargetingTemplatesListResponse"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

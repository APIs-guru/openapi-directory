# coding: utf-8

"""
    Campaign Manager 360 API

    Build applications to efficiently manage large or complex trafficking, reporting, and attribution workflows for Campaign Manager 360.

    The version of the OpenAPI document: v3.4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.custom_event_insert import CustomEventInsert

class TestCustomEventInsert(unittest.TestCase):
    """CustomEventInsert unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> CustomEventInsert:
        """Test CustomEventInsert
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `CustomEventInsert`
        """
        model = CustomEventInsert()
        if include_optional:
            return CustomEventInsert(
                cm_dimensions = openapi_client.models.campaign_manager_ids.CampaignManagerIds(
                    ad_id = '', 
                    campaign_id = '', 
                    creative_id = '', 
                    kind = '', 
                    placement_id = '', 
                    site_id = '', ),
                dv3_dimensions = openapi_client.models.dv3_ids.DV3Ids(
                    dv_campaign_id = '', 
                    dv_creative_id = '', 
                    dv_insertion_order_id = '', 
                    dv_line_item_id = '', 
                    dv_site_id = '', 
                    kind = '', ),
                insert_event_type = 'UNKNOWN',
                kind = '',
                match_id = '',
                mobile_device_id = ''
            )
        else:
            return CustomEventInsert(
        )
        """

    def testCustomEventInsert(self):
        """Test CustomEventInsert"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

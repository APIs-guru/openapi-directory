# coding: utf-8

"""
    Campaign Manager 360 API

    Build applications to efficiently manage large or complex trafficking, reporting, and attribution workflows for Campaign Manager 360.

    The version of the OpenAPI document: v3.4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.pricing_schedule import PricingSchedule

class TestPricingSchedule(unittest.TestCase):
    """PricingSchedule unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> PricingSchedule:
        """Test PricingSchedule
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `PricingSchedule`
        """
        model = PricingSchedule()
        if include_optional:
            return PricingSchedule(
                cap_cost_option = 'CAP_COST_NONE',
                end_date = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(),
                flighted = True,
                floodlight_activity_id = '',
                pricing_periods = [
                    openapi_client.models.pricing_schedule_pricing_period.PricingSchedulePricingPeriod(
                        end_date = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(), 
                        pricing_comment = '', 
                        rate_or_cost_nanos = '', 
                        start_date = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(), 
                        units = '', )
                    ],
                pricing_type = 'PRICING_TYPE_CPM',
                start_date = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(),
                testing_start_date = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date()
            )
        else:
            return PricingSchedule(
        )
        """

    def testPricingSchedule(self):
        """Test PricingSchedule"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

# coding: utf-8

"""
    Campaign Manager 360 API

    Build applications to efficiently manage large or complex trafficking, reporting, and attribution workflows for Campaign Manager 360.

    The version of the OpenAPI document: v3.4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.report_list import ReportList

class TestReportList(unittest.TestCase):
    """ReportList unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> ReportList:
        """Test ReportList
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `ReportList`
        """
        model = ReportList()
        if include_optional:
            return ReportList(
                etag = '',
                items = [
                    openapi_client.models.report.Report(
                        account_id = '', 
                        criteria = openapi_client.models.report_criteria.Report_criteria(
                            activities = openapi_client.models.activities.Activities(
                                filters = [
                                    openapi_client.models.dimension_value.DimensionValue(
                                        dimension_name = '', 
                                        etag = '', 
                                        id = '', 
                                        kind = '', 
                                        match_type = 'EXACT', 
                                        value = '', )
                                    ], 
                                kind = '', 
                                metric_names = [
                                    ''
                                    ], ), 
                            custom_rich_media_events = openapi_client.models.custom_rich_media_events.CustomRichMediaEvents(
                                filtered_event_ids = [
                                    openapi_client.models.dimension_value.DimensionValue(
                                        dimension_name = '', 
                                        etag = '', 
                                        id = '', 
                                        kind = '', 
                                        match_type = 'EXACT', 
                                        value = '', )
                                    ], 
                                kind = '', ), 
                            date_range = openapi_client.models.date_range.DateRange(
                                end_date = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(), 
                                kind = '', 
                                relative_date_range = 'TODAY', 
                                start_date = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(), ), 
                            dimension_filters = [
                                
                                ], 
                            dimensions = [
                                openapi_client.models.sorted_dimension.SortedDimension(
                                    kind = '', 
                                    name = '', 
                                    sort_order = 'ASCENDING', )
                                ], 
                            metric_names = [
                                ''
                                ], ), 
                        cross_dimension_reach_criteria = openapi_client.models.report_cross_dimension_reach_criteria.Report_crossDimensionReachCriteria(
                            breakdown = [
                                openapi_client.models.sorted_dimension.SortedDimension(
                                    kind = '', 
                                    name = '', 
                                    sort_order = 'ASCENDING', )
                                ], 
                            dimension = 'ADVERTISER', 
                            overlap_metric_names = [
                                ''
                                ], 
                            pivoted = True, ), 
                        delivery = openapi_client.models.report_delivery.Report_delivery(
                            email_owner = True, 
                            email_owner_delivery_type = 'LINK', 
                            message = '', 
                            recipients = [
                                openapi_client.models.recipient.Recipient(
                                    delivery_type = 'LINK', 
                                    email = '', 
                                    kind = '', )
                                ], ), 
                        etag = '', 
                        file_name = '', 
                        floodlight_criteria = openapi_client.models.report_floodlight_criteria.Report_floodlightCriteria(
                            floodlight_config_id = , 
                            report_properties = openapi_client.models.report_floodlight_criteria_report_properties.Report_floodlightCriteria_reportProperties(
                                include_attributed_ip_conversions = True, 
                                include_unattributed_cookie_conversions = True, 
                                include_unattributed_ip_conversions = True, ), ), 
                        format = 'CSV', 
                        id = '', 
                        kind = '', 
                        last_modified_time = '', 
                        name = '', 
                        owner_profile_id = '', 
                        path_attribution_criteria = openapi_client.models.report_path_attribution_criteria.Report_pathAttributionCriteria(
                            activity_filters = [
                                
                                ], 
                            custom_channel_grouping = openapi_client.models.channel_grouping.ChannelGrouping(
                                fallback_name = '', 
                                kind = '', 
                                name = '', 
                                rules = [
                                    openapi_client.models.channel_grouping_rule.ChannelGroupingRule(
                                        disjunctive_match_statements = [
                                            openapi_client.models.disjunctive_match_statement.DisjunctiveMatchStatement(
                                                event_filters = [
                                                    openapi_client.models.event_filter.EventFilter(
                                                        dimension_filter = openapi_client.models.path_report_dimension_value.PathReportDimensionValue(
                                                            dimension_name = '', 
                                                            ids = [
                                                                ''
                                                                ], 
                                                            kind = '', 
                                                            match_type = 'EXACT', 
                                                            values = [
                                                                ''
                                                                ], ), 
                                                        kind = '', )
                                                    ], 
                                                kind = '', )
                                            ], 
                                        kind = '', 
                                        name = '', )
                                    ], ), 
                            path_filters = [
                                openapi_client.models.path_filter.PathFilter(
                                    kind = '', 
                                    path_match_position = 'PATH_MATCH_POSITION_UNSPECIFIED', )
                                ], ), 
                        path_criteria = openapi_client.models.report_path_criteria.Report_pathCriteria(), 
                        path_to_conversion_criteria = openapi_client.models.report_path_to_conversion_criteria.Report_pathToConversionCriteria(
                            conversion_dimensions = [
                                
                                ], 
                            custom_floodlight_variables = [
                                
                                ], 
                            per_interaction_dimensions = [
                                
                                ], ), 
                        reach_criteria = openapi_client.models.report_reach_criteria.Report_reachCriteria(
                            enable_all_dimension_combinations = True, 
                            reach_by_frequency_metric_names = [
                                ''
                                ], ), 
                        schedule = openapi_client.models.report_schedule.Report_schedule(
                            active = True, 
                            every = 56, 
                            expiration_date = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(), 
                            repeats = '', 
                            repeats_on_week_days = [
                                'SUNDAY'
                                ], 
                            runs_on_day_of_month = 'DAY_OF_MONTH', 
                            start_date = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(), ), 
                        sub_account_id = '', 
                        type = 'STANDARD', )
                    ],
                kind = '',
                next_page_token = ''
            )
        else:
            return ReportList(
        )
        """

    def testReportList(self):
        """Test ReportList"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

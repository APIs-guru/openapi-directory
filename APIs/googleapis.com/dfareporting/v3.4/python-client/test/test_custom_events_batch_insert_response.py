# coding: utf-8

"""
    Campaign Manager 360 API

    Build applications to efficiently manage large or complex trafficking, reporting, and attribution workflows for Campaign Manager 360.

    The version of the OpenAPI document: v3.4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.custom_events_batch_insert_response import CustomEventsBatchInsertResponse

class TestCustomEventsBatchInsertResponse(unittest.TestCase):
    """CustomEventsBatchInsertResponse unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> CustomEventsBatchInsertResponse:
        """Test CustomEventsBatchInsertResponse
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `CustomEventsBatchInsertResponse`
        """
        model = CustomEventsBatchInsertResponse()
        if include_optional:
            return CustomEventsBatchInsertResponse(
                has_failures = True,
                kind = '',
                status = [
                    openapi_client.models.custom_event_status.CustomEventStatus(
                        custom_event = openapi_client.models.custom_event.CustomEvent(
                            annotate_click_event = openapi_client.models.custom_event_click_annotation.CustomEventClickAnnotation(
                                gclid = '', 
                                kind = '', ), 
                            annotate_impression_event = openapi_client.models.custom_event_impression_annotation.CustomEventImpressionAnnotation(
                                kind = '', 
                                path_impression_id = '', ), 
                            custom_variables = [
                                openapi_client.models.custom_variable.CustomVariable(
                                    index = '', 
                                    kind = '', 
                                    value = '', )
                                ], 
                            event_type = 'UNKNOWN', 
                            floodlight_configuration_id = '', 
                            insert_event = openapi_client.models.custom_event_insert.CustomEventInsert(
                                cm_dimensions = openapi_client.models.campaign_manager_ids.CampaignManagerIds(
                                    ad_id = '', 
                                    campaign_id = '', 
                                    creative_id = '', 
                                    kind = '', 
                                    placement_id = '', 
                                    site_id = '', ), 
                                dv3_dimensions = openapi_client.models.dv3_ids.DV3Ids(
                                    dv_campaign_id = '', 
                                    dv_creative_id = '', 
                                    dv_insertion_order_id = '', 
                                    dv_line_item_id = '', 
                                    dv_site_id = '', 
                                    kind = '', ), 
                                insert_event_type = 'UNKNOWN', 
                                kind = '', 
                                match_id = '', 
                                mobile_device_id = '', ), 
                            kind = '', 
                            ordinal = '', 
                            timestamp_micros = '', ), 
                        errors = [
                            openapi_client.models.custom_event_error.CustomEventError(
                                code = 'UNKNOWN', 
                                kind = '', 
                                message = '', )
                            ], 
                        kind = '', )
                    ]
            )
        else:
            return CustomEventsBatchInsertResponse(
        )
        """

    def testCustomEventsBatchInsertResponse(self):
        """Test CustomEventsBatchInsertResponse"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

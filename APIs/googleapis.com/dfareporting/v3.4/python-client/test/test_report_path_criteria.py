# coding: utf-8

"""
    Campaign Manager 360 API

    Build applications to efficiently manage large or complex trafficking, reporting, and attribution workflows for Campaign Manager 360.

    The version of the OpenAPI document: v3.4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.report_path_criteria import ReportPathCriteria

class TestReportPathCriteria(unittest.TestCase):
    """ReportPathCriteria unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> ReportPathCriteria:
        """Test ReportPathCriteria
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `ReportPathCriteria`
        """
        model = ReportPathCriteria()
        if include_optional:
            return ReportPathCriteria(
                activity_filters = [
                    openapi_client.models.dimension_value.DimensionValue(
                        dimension_name = '', 
                        etag = '', 
                        id = '', 
                        kind = '', 
                        match_type = 'EXACT', 
                        value = '', )
                    ],
                custom_channel_grouping = openapi_client.models.channel_grouping.ChannelGrouping(
                    fallback_name = '', 
                    kind = '', 
                    name = '', 
                    rules = [
                        openapi_client.models.channel_grouping_rule.ChannelGroupingRule(
                            disjunctive_match_statements = [
                                openapi_client.models.disjunctive_match_statement.DisjunctiveMatchStatement(
                                    event_filters = [
                                        openapi_client.models.event_filter.EventFilter(
                                            dimension_filter = openapi_client.models.path_report_dimension_value.PathReportDimensionValue(
                                                dimension_name = '', 
                                                ids = [
                                                    ''
                                                    ], 
                                                kind = '', 
                                                match_type = 'EXACT', 
                                                values = [
                                                    ''
                                                    ], ), 
                                            kind = '', )
                                        ], 
                                    kind = '', )
                                ], 
                            kind = '', 
                            name = '', )
                        ], ),
                date_range = openapi_client.models.date_range.DateRange(
                    end_date = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(), 
                    kind = '', 
                    relative_date_range = 'TODAY', 
                    start_date = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(), ),
                dimensions = [
                    openapi_client.models.sorted_dimension.SortedDimension(
                        kind = '', 
                        name = '', 
                        sort_order = 'ASCENDING', )
                    ],
                floodlight_config_id = openapi_client.models.dimension_value.DimensionValue(
                    dimension_name = '', 
                    etag = '', 
                    id = '', 
                    kind = '', 
                    match_type = 'EXACT', 
                    value = '', ),
                metric_names = [
                    ''
                    ],
                path_filters = [
                    openapi_client.models.path_filter.PathFilter(
                        event_filters = [
                            openapi_client.models.event_filter.EventFilter(
                                dimension_filter = openapi_client.models.path_report_dimension_value.PathReportDimensionValue(
                                    dimension_name = '', 
                                    ids = [
                                        ''
                                        ], 
                                    kind = '', 
                                    match_type = 'EXACT', 
                                    values = [
                                        ''
                                        ], ), 
                                kind = '', )
                            ], 
                        kind = '', 
                        path_match_position = 'PATH_MATCH_POSITION_UNSPECIFIED', )
                    ]
            )
        else:
            return ReportPathCriteria(
        )
        """

    def testReportPathCriteria(self):
        """Test ReportPathCriteria"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

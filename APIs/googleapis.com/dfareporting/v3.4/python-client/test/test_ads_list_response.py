# coding: utf-8

"""
    Campaign Manager 360 API

    Build applications to efficiently manage large or complex trafficking, reporting, and attribution workflows for Campaign Manager 360.

    The version of the OpenAPI document: v3.4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.ads_list_response import AdsListResponse

class TestAdsListResponse(unittest.TestCase):
    """AdsListResponse unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> AdsListResponse:
        """Test AdsListResponse
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `AdsListResponse`
        """
        model = AdsListResponse()
        if include_optional:
            return AdsListResponse(
                ads = [
                    openapi_client.models.ad.Ad(
                        account_id = '', 
                        active = True, 
                        advertiser_id = '', 
                        advertiser_id_dimension_value = openapi_client.models.dimension_value.DimensionValue(
                            dimension_name = '', 
                            etag = '', 
                            id = '', 
                            kind = '', 
                            match_type = 'EXACT', 
                            value = '', ), 
                        archived = True, 
                        audience_segment_id = '', 
                        campaign_id = '', 
                        campaign_id_dimension_value = openapi_client.models.dimension_value.DimensionValue(
                            dimension_name = '', 
                            etag = '', 
                            id = '', 
                            kind = '', 
                            match_type = 'EXACT', 
                            value = '', ), 
                        click_through_url = openapi_client.models.click_through_url.ClickThroughUrl(
                            computed_click_through_url = '', 
                            custom_click_through_url = '', 
                            default_landing_page = True, 
                            landing_page_id = '', ), 
                        click_through_url_suffix_properties = openapi_client.models.click_through_url_suffix_properties.ClickThroughUrlSuffixProperties(
                            click_through_url_suffix = '', 
                            override_inherited_suffix = True, ), 
                        comments = '', 
                        compatibility = 'DISPLAY', 
                        create_info = openapi_client.models.last_modified_info.LastModifiedInfo(
                            time = '', ), 
                        creative_group_assignments = [
                            openapi_client.models.creative_group_assignment.CreativeGroupAssignment(
                                creative_group_id = '', 
                                creative_group_number = 'CREATIVE_GROUP_ONE', )
                            ], 
                        creative_rotation = openapi_client.models.creative_rotation.CreativeRotation(
                            creative_assignments = [
                                openapi_client.models.creative_assignment.CreativeAssignment(
                                    active = True, 
                                    apply_event_tags = True, 
                                    companion_creative_overrides = [
                                        openapi_client.models.companion_click_through_override.CompanionClickThroughOverride(
                                            creative_id = '', )
                                        ], 
                                    creative_id = '', 
                                    creative_id_dimension_value = , 
                                    end_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                    rich_media_exit_overrides = [
                                        openapi_client.models.rich_media_exit_override.RichMediaExitOverride(
                                            enabled = True, 
                                            exit_id = '', )
                                        ], 
                                    sequence = 56, 
                                    ssl_compliant = True, 
                                    start_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                    weight = 56, )
                                ], 
                            creative_optimization_configuration_id = '', 
                            type = 'CREATIVE_ROTATION_TYPE_SEQUENTIAL', 
                            weight_calculation_strategy = 'WEIGHT_STRATEGY_EQUAL', ), 
                        day_part_targeting = openapi_client.models.day_part_targeting.DayPartTargeting(
                            days_of_week = [
                                'MONDAY'
                                ], 
                            hours_of_day = [
                                56
                                ], 
                            user_local_time = True, ), 
                        default_click_through_event_tag_properties = openapi_client.models.default_click_through_event_tag_properties.DefaultClickThroughEventTagProperties(
                            default_click_through_event_tag_id = '', 
                            override_inherited_event_tag = True, ), 
                        delivery_schedule = openapi_client.models.delivery_schedule.DeliverySchedule(
                            frequency_cap = openapi_client.models.frequency_cap.FrequencyCap(
                                duration = '', 
                                impressions = '', ), 
                            hard_cutoff = True, 
                            impression_ratio = '', 
                            priority = 'AD_PRIORITY_01', ), 
                        dynamic_click_tracker = True, 
                        end_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        event_tag_overrides = [
                            openapi_client.models.event_tag_override.EventTagOverride(
                                enabled = True, 
                                id = '', )
                            ], 
                        geo_targeting = openapi_client.models.geo_targeting.GeoTargeting(
                            cities = [
                                openapi_client.models.city.City(
                                    country_code = '', 
                                    country_dart_id = '', 
                                    dart_id = '', 
                                    kind = '', 
                                    metro_code = '', 
                                    metro_dma_id = '', 
                                    name = '', 
                                    region_code = '', 
                                    region_dart_id = '', )
                                ], 
                            countries = [
                                openapi_client.models.country.Country(
                                    country_code = '', 
                                    dart_id = '', 
                                    kind = '', 
                                    name = '', 
                                    ssl_enabled = True, )
                                ], 
                            exclude_countries = True, 
                            metros = [
                                openapi_client.models.metro.Metro(
                                    country_code = '', 
                                    country_dart_id = '', 
                                    dart_id = '', 
                                    dma_id = '', 
                                    kind = '', 
                                    metro_code = '', 
                                    name = '', )
                                ], 
                            postal_codes = [
                                openapi_client.models.postal_code.PostalCode(
                                    code = '', 
                                    country_code = '', 
                                    country_dart_id = '', 
                                    id = '', 
                                    kind = '', )
                                ], 
                            regions = [
                                openapi_client.models.region.Region(
                                    country_code = '', 
                                    country_dart_id = '', 
                                    dart_id = '', 
                                    kind = '', 
                                    name = '', 
                                    region_code = '', )
                                ], ), 
                        id = '', 
                        id_dimension_value = , 
                        key_value_targeting_expression = openapi_client.models.key_value_targeting_expression.KeyValueTargetingExpression(
                            expression = '', ), 
                        kind = '', 
                        language_targeting = openapi_client.models.language_targeting.LanguageTargeting(
                            languages = [
                                openapi_client.models.language.Language(
                                    id = '', 
                                    kind = '', 
                                    language_code = '', 
                                    name = '', )
                                ], ), 
                        last_modified_info = openapi_client.models.last_modified_info.LastModifiedInfo(
                            time = '', ), 
                        name = '', 
                        placement_assignments = [
                            openapi_client.models.placement_assignment.PlacementAssignment(
                                active = True, 
                                placement_id = '', 
                                placement_id_dimension_value = , 
                                ssl_required = True, )
                            ], 
                        remarketing_list_expression = openapi_client.models.list_targeting_expression.ListTargetingExpression(
                            expression = '', ), 
                        size = openapi_client.models.size.Size(
                            height = 56, 
                            iab = True, 
                            id = '', 
                            kind = '', 
                            width = 56, ), 
                        ssl_compliant = True, 
                        ssl_required = True, 
                        start_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        subaccount_id = '', 
                        targeting_template_id = '', 
                        technology_targeting = openapi_client.models.technology_targeting.TechnologyTargeting(
                            browsers = [
                                openapi_client.models.browser.Browser(
                                    browser_version_id = '', 
                                    dart_id = '', 
                                    kind = '', 
                                    major_version = '', 
                                    minor_version = '', 
                                    name = '', )
                                ], 
                            connection_types = [
                                openapi_client.models.connection_type.ConnectionType(
                                    id = '', 
                                    kind = '', 
                                    name = '', )
                                ], 
                            mobile_carriers = [
                                openapi_client.models.mobile_carrier.MobileCarrier(
                                    country_code = '', 
                                    country_dart_id = '', 
                                    id = '', 
                                    kind = '', 
                                    name = '', )
                                ], 
                            operating_system_versions = [
                                openapi_client.models.operating_system_version.OperatingSystemVersion(
                                    id = '', 
                                    kind = '', 
                                    major_version = '', 
                                    minor_version = '', 
                                    name = '', 
                                    operating_system = openapi_client.models.operating_system.OperatingSystem(
                                        dart_id = '', 
                                        desktop = True, 
                                        kind = '', 
                                        mobile = True, 
                                        name = '', ), )
                                ], 
                            operating_systems = [
                                openapi_client.models.operating_system.OperatingSystem(
                                    dart_id = '', 
                                    desktop = True, 
                                    kind = '', 
                                    mobile = True, 
                                    name = '', )
                                ], 
                            platform_types = [
                                openapi_client.models.platform_type.PlatformType(
                                    id = '', 
                                    kind = '', 
                                    name = '', )
                                ], ), 
                        type = 'AD_SERVING_STANDARD_AD', )
                    ],
                kind = '',
                next_page_token = ''
            )
        else:
            return AdsListResponse(
        )
        """

    def testAdsListResponse(self):
        """Test AdsListResponse"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

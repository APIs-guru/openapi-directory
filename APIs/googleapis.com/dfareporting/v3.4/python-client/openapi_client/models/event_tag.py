# coding: utf-8

"""
    Campaign Manager 360 API

    Build applications to efficiently manage large or complex trafficking, reporting, and attribution workflows for Campaign Manager 360.

    The version of the OpenAPI document: v3.4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.dimension_value import DimensionValue
from typing import Optional, Set
from typing_extensions import Self

class EventTag(BaseModel):
    """
    Contains properties of an event tag.
    """ # noqa: E501
    account_id: Optional[StrictStr] = Field(default=None, description="Account ID of this event tag. This is a read-only field that can be left blank.", alias="accountId")
    advertiser_id: Optional[StrictStr] = Field(default=None, description="Advertiser ID of this event tag. This field or the campaignId field is required on insertion.", alias="advertiserId")
    advertiser_id_dimension_value: Optional[DimensionValue] = Field(default=None, alias="advertiserIdDimensionValue")
    campaign_id: Optional[StrictStr] = Field(default=None, description="Campaign ID of this event tag. This field or the advertiserId field is required on insertion.", alias="campaignId")
    campaign_id_dimension_value: Optional[DimensionValue] = Field(default=None, alias="campaignIdDimensionValue")
    enabled_by_default: Optional[StrictBool] = Field(default=None, description="Whether this event tag should be automatically enabled for all of the advertiser's campaigns and ads.", alias="enabledByDefault")
    exclude_from_adx_requests: Optional[StrictBool] = Field(default=None, description="Whether to remove this event tag from ads that are trafficked through Display & Video 360 to Ad Exchange. This may be useful if the event tag uses a pixel that is unapproved for Ad Exchange bids on one or more networks, such as the Google Display Network.", alias="excludeFromAdxRequests")
    id: Optional[StrictStr] = Field(default=None, description="ID of this event tag. This is a read-only, auto-generated field.")
    kind: Optional[StrictStr] = Field(default=None, description="Identifies what kind of resource this is. Value: the fixed string \"dfareporting#eventTag\".")
    name: Optional[StrictStr] = Field(default=None, description="Name of this event tag. This is a required field and must be less than 256 characters long.")
    site_filter_type: Optional[StrictStr] = Field(default=None, description="Site filter type for this event tag. If no type is specified then the event tag will be applied to all sites.", alias="siteFilterType")
    site_ids: Optional[List[StrictStr]] = Field(default=None, description="Filter list of site IDs associated with this event tag. The siteFilterType determines whether this is a allowlist or blocklist filter.", alias="siteIds")
    ssl_compliant: Optional[StrictBool] = Field(default=None, description="Whether this tag is SSL-compliant or not. This is a read-only field.", alias="sslCompliant")
    status: Optional[StrictStr] = Field(default=None, description="Status of this event tag. Must be ENABLED for this event tag to fire. This is a required field.")
    subaccount_id: Optional[StrictStr] = Field(default=None, description="Subaccount ID of this event tag. This is a read-only field that can be left blank.", alias="subaccountId")
    type: Optional[StrictStr] = Field(default=None, description="Event tag type. Can be used to specify whether to use a third-party pixel, a third-party JavaScript URL, or a third-party click-through URL for either impression or click tracking. This is a required field.")
    url: Optional[StrictStr] = Field(default=None, description="Payload URL for this event tag. The URL on a click-through event tag should have a landing page URL appended to the end of it. This field is required on insertion.")
    url_escape_levels: Optional[StrictInt] = Field(default=None, description="Number of times the landing page URL should be URL-escaped before being appended to the click-through event tag URL. Only applies to click-through event tags as specified by the event tag type.", alias="urlEscapeLevels")
    __properties: ClassVar[List[str]] = ["accountId", "advertiserId", "advertiserIdDimensionValue", "campaignId", "campaignIdDimensionValue", "enabledByDefault", "excludeFromAdxRequests", "id", "kind", "name", "siteFilterType", "siteIds", "sslCompliant", "status", "subaccountId", "type", "url", "urlEscapeLevels"]

    @field_validator('site_filter_type')
    def site_filter_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['WHITELIST', 'BLACKLIST']):
            raise ValueError("must be one of enum values ('WHITELIST', 'BLACKLIST')")
        return value

    @field_validator('status')
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['ENABLED', 'DISABLED']):
            raise ValueError("must be one of enum values ('ENABLED', 'DISABLED')")
        return value

    @field_validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['IMPRESSION_IMAGE_EVENT_TAG', 'IMPRESSION_JAVASCRIPT_EVENT_TAG', 'CLICK_THROUGH_EVENT_TAG']):
            raise ValueError("must be one of enum values ('IMPRESSION_IMAGE_EVENT_TAG', 'IMPRESSION_JAVASCRIPT_EVENT_TAG', 'CLICK_THROUGH_EVENT_TAG')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of EventTag from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of advertiser_id_dimension_value
        if self.advertiser_id_dimension_value:
            _dict['advertiserIdDimensionValue'] = self.advertiser_id_dimension_value.to_dict()
        # override the default output from pydantic by calling `to_dict()` of campaign_id_dimension_value
        if self.campaign_id_dimension_value:
            _dict['campaignIdDimensionValue'] = self.campaign_id_dimension_value.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of EventTag from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "accountId": obj.get("accountId"),
            "advertiserId": obj.get("advertiserId"),
            "advertiserIdDimensionValue": DimensionValue.from_dict(obj["advertiserIdDimensionValue"]) if obj.get("advertiserIdDimensionValue") is not None else None,
            "campaignId": obj.get("campaignId"),
            "campaignIdDimensionValue": DimensionValue.from_dict(obj["campaignIdDimensionValue"]) if obj.get("campaignIdDimensionValue") is not None else None,
            "enabledByDefault": obj.get("enabledByDefault"),
            "excludeFromAdxRequests": obj.get("excludeFromAdxRequests"),
            "id": obj.get("id"),
            "kind": obj.get("kind"),
            "name": obj.get("name"),
            "siteFilterType": obj.get("siteFilterType"),
            "siteIds": obj.get("siteIds"),
            "sslCompliant": obj.get("sslCompliant"),
            "status": obj.get("status"),
            "subaccountId": obj.get("subaccountId"),
            "type": obj.get("type"),
            "url": obj.get("url"),
            "urlEscapeLevels": obj.get("urlEscapeLevels")
        })
        return _obj



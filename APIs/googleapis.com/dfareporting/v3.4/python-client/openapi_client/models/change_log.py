# coding: utf-8

"""
    Campaign Manager 360 API

    Build applications to efficiently manage large or complex trafficking, reporting, and attribution workflows for Campaign Manager 360.

    The version of the OpenAPI document: v3.4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class ChangeLog(BaseModel):
    """
    Describes a change that a user has made to a resource.
    """ # noqa: E501
    account_id: Optional[StrictStr] = Field(default=None, description="Account ID of the modified object.", alias="accountId")
    action: Optional[StrictStr] = Field(default=None, description="Action which caused the change.")
    change_time: Optional[datetime] = Field(default=None, alias="changeTime")
    field_name: Optional[StrictStr] = Field(default=None, description="Field name of the object which changed.", alias="fieldName")
    id: Optional[StrictStr] = Field(default=None, description="ID of this change log.")
    kind: Optional[StrictStr] = Field(default=None, description="Identifies what kind of resource this is. Value: the fixed string \"dfareporting#changeLog\".")
    new_value: Optional[StrictStr] = Field(default=None, description="New value of the object field.", alias="newValue")
    object_id: Optional[StrictStr] = Field(default=None, description="ID of the object of this change log. The object could be a campaign, placement, ad, or other type.", alias="objectId")
    object_type: Optional[StrictStr] = Field(default=None, description="Object type of the change log.", alias="objectType")
    old_value: Optional[StrictStr] = Field(default=None, description="Old value of the object field.", alias="oldValue")
    subaccount_id: Optional[StrictStr] = Field(default=None, description="Subaccount ID of the modified object.", alias="subaccountId")
    transaction_id: Optional[StrictStr] = Field(default=None, description="Transaction ID of this change log. When a single API call results in many changes, each change will have a separate ID in the change log but will share the same transactionId.", alias="transactionId")
    user_profile_id: Optional[StrictStr] = Field(default=None, description="ID of the user who modified the object.", alias="userProfileId")
    user_profile_name: Optional[StrictStr] = Field(default=None, description="User profile name of the user who modified the object.", alias="userProfileName")
    __properties: ClassVar[List[str]] = ["accountId", "action", "changeTime", "fieldName", "id", "kind", "newValue", "objectId", "objectType", "oldValue", "subaccountId", "transactionId", "userProfileId", "userProfileName"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ChangeLog from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ChangeLog from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "accountId": obj.get("accountId"),
            "action": obj.get("action"),
            "changeTime": obj.get("changeTime"),
            "fieldName": obj.get("fieldName"),
            "id": obj.get("id"),
            "kind": obj.get("kind"),
            "newValue": obj.get("newValue"),
            "objectId": obj.get("objectId"),
            "objectType": obj.get("objectType"),
            "oldValue": obj.get("oldValue"),
            "subaccountId": obj.get("subaccountId"),
            "transactionId": obj.get("transactionId"),
            "userProfileId": obj.get("userProfileId"),
            "userProfileName": obj.get("userProfileName")
        })
        return _obj



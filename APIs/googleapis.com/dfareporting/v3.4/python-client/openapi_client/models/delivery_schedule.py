# coding: utf-8

"""
    Campaign Manager 360 API

    Build applications to efficiently manage large or complex trafficking, reporting, and attribution workflows for Campaign Manager 360.

    The version of the OpenAPI document: v3.4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.frequency_cap import FrequencyCap
from typing import Optional, Set
from typing_extensions import Self

class DeliverySchedule(BaseModel):
    """
    Delivery Schedule.
    """ # noqa: E501
    frequency_cap: Optional[FrequencyCap] = Field(default=None, alias="frequencyCap")
    hard_cutoff: Optional[StrictBool] = Field(default=None, description="Whether or not hard cutoff is enabled. If true, the ad will not serve after the end date and time. Otherwise the ad will continue to be served until it has reached its delivery goals.", alias="hardCutoff")
    impression_ratio: Optional[StrictStr] = Field(default=None, description="Impression ratio for this ad. This ratio determines how often each ad is served relative to the others. For example, if ad A has an impression ratio of 1 and ad B has an impression ratio of 3, then Campaign Manager will serve ad B three times as often as ad A. Acceptable values are 1 to 10, inclusive.", alias="impressionRatio")
    priority: Optional[StrictStr] = Field(default=None, description="Serving priority of an ad, with respect to other ads. The lower the priority number, the greater the priority with which it is served.")
    __properties: ClassVar[List[str]] = ["frequencyCap", "hardCutoff", "impressionRatio", "priority"]

    @field_validator('priority')
    def priority_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['AD_PRIORITY_01', 'AD_PRIORITY_02', 'AD_PRIORITY_03', 'AD_PRIORITY_04', 'AD_PRIORITY_05', 'AD_PRIORITY_06', 'AD_PRIORITY_07', 'AD_PRIORITY_08', 'AD_PRIORITY_09', 'AD_PRIORITY_10', 'AD_PRIORITY_11', 'AD_PRIORITY_12', 'AD_PRIORITY_13', 'AD_PRIORITY_14', 'AD_PRIORITY_15', 'AD_PRIORITY_16']):
            raise ValueError("must be one of enum values ('AD_PRIORITY_01', 'AD_PRIORITY_02', 'AD_PRIORITY_03', 'AD_PRIORITY_04', 'AD_PRIORITY_05', 'AD_PRIORITY_06', 'AD_PRIORITY_07', 'AD_PRIORITY_08', 'AD_PRIORITY_09', 'AD_PRIORITY_10', 'AD_PRIORITY_11', 'AD_PRIORITY_12', 'AD_PRIORITY_13', 'AD_PRIORITY_14', 'AD_PRIORITY_15', 'AD_PRIORITY_16')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DeliverySchedule from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of frequency_cap
        if self.frequency_cap:
            _dict['frequencyCap'] = self.frequency_cap.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DeliverySchedule from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "frequencyCap": FrequencyCap.from_dict(obj["frequencyCap"]) if obj.get("frequencyCap") is not None else None,
            "hardCutoff": obj.get("hardCutoff"),
            "impressionRatio": obj.get("impressionRatio"),
            "priority": obj.get("priority")
        })
        return _obj



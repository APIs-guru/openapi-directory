# coding: utf-8

"""
    Campaign Manager 360 API

    Build applications to efficiently manage large or complex trafficking, reporting, and attribution workflows for Campaign Manager 360.

    The version of the OpenAPI document: v3.4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class ListPopulationTerm(BaseModel):
    """
    Remarketing List Population Rule Term.
    """ # noqa: E501
    contains: Optional[StrictBool] = Field(default=None, description="Will be true if the term should check if the user is in the list and false if the term should check if the user is not in the list. This field is only relevant when type is set to LIST_MEMBERSHIP_TERM. False by default.")
    negation: Optional[StrictBool] = Field(default=None, description="Whether to negate the comparison result of this term during rule evaluation. This field is only relevant when type is left unset or set to CUSTOM_VARIABLE_TERM or REFERRER_TERM.")
    operator: Optional[StrictStr] = Field(default=None, description="Comparison operator of this term. This field is only relevant when type is left unset or set to CUSTOM_VARIABLE_TERM or REFERRER_TERM.")
    remarketing_list_id: Optional[StrictStr] = Field(default=None, description="ID of the list in question. This field is only relevant when type is set to LIST_MEMBERSHIP_TERM.", alias="remarketingListId")
    type: Optional[StrictStr] = Field(default=None, description="List population term type determines the applicable fields in this object. If left unset or set to CUSTOM_VARIABLE_TERM, then variableName, variableFriendlyName, operator, value, and negation are applicable. If set to LIST_MEMBERSHIP_TERM then remarketingListId and contains are applicable. If set to REFERRER_TERM then operator, value, and negation are applicable.")
    value: Optional[StrictStr] = Field(default=None, description="Literal to compare the variable to. This field is only relevant when type is left unset or set to CUSTOM_VARIABLE_TERM or REFERRER_TERM.")
    variable_friendly_name: Optional[StrictStr] = Field(default=None, description="Friendly name of this term's variable. This is a read-only, auto-generated field. This field is only relevant when type is left unset or set to CUSTOM_VARIABLE_TERM.", alias="variableFriendlyName")
    variable_name: Optional[StrictStr] = Field(default=None, description="Name of the variable (U1, U2, etc.) being compared in this term. This field is only relevant when type is set to null, CUSTOM_VARIABLE_TERM or REFERRER_TERM.", alias="variableName")
    __properties: ClassVar[List[str]] = ["contains", "negation", "operator", "remarketingListId", "type", "value", "variableFriendlyName", "variableName"]

    @field_validator('operator')
    def operator_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['NUM_EQUALS', 'NUM_LESS_THAN', 'NUM_LESS_THAN_EQUAL', 'NUM_GREATER_THAN', 'NUM_GREATER_THAN_EQUAL', 'STRING_EQUALS', 'STRING_CONTAINS']):
            raise ValueError("must be one of enum values ('NUM_EQUALS', 'NUM_LESS_THAN', 'NUM_LESS_THAN_EQUAL', 'NUM_GREATER_THAN', 'NUM_GREATER_THAN_EQUAL', 'STRING_EQUALS', 'STRING_CONTAINS')")
        return value

    @field_validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['CUSTOM_VARIABLE_TERM', 'LIST_MEMBERSHIP_TERM', 'REFERRER_TERM']):
            raise ValueError("must be one of enum values ('CUSTOM_VARIABLE_TERM', 'LIST_MEMBERSHIP_TERM', 'REFERRER_TERM')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ListPopulationTerm from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ListPopulationTerm from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "contains": obj.get("contains"),
            "negation": obj.get("negation"),
            "operator": obj.get("operator"),
            "remarketingListId": obj.get("remarketingListId"),
            "type": obj.get("type"),
            "value": obj.get("value"),
            "variableFriendlyName": obj.get("variableFriendlyName"),
            "variableName": obj.get("variableName")
        })
        return _obj



# coding: utf-8

"""
    Campaign Manager 360 API

    Build applications to efficiently manage large or complex trafficking, reporting, and attribution workflows for Campaign Manager 360.

    The version of the OpenAPI document: v3.4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class TagData(BaseModel):
    """
    Placement Tag Data
    """ # noqa: E501
    ad_id: Optional[StrictStr] = Field(default=None, description="Ad associated with this placement tag. Applicable only when format is PLACEMENT_TAG_TRACKING.", alias="adId")
    click_tag: Optional[StrictStr] = Field(default=None, description="Tag string to record a click.", alias="clickTag")
    creative_id: Optional[StrictStr] = Field(default=None, description="Creative associated with this placement tag. Applicable only when format is PLACEMENT_TAG_TRACKING.", alias="creativeId")
    format: Optional[StrictStr] = Field(default=None, description="TagData tag format of this tag.")
    impression_tag: Optional[StrictStr] = Field(default=None, description="Tag string for serving an ad.", alias="impressionTag")
    __properties: ClassVar[List[str]] = ["adId", "clickTag", "creativeId", "format", "impressionTag"]

    @field_validator('format')
    def format_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['PLACEMENT_TAG_STANDARD', 'PLACEMENT_TAG_IFRAME_JAVASCRIPT', 'PLACEMENT_TAG_IFRAME_ILAYER', 'PLACEMENT_TAG_INTERNAL_REDIRECT', 'PLACEMENT_TAG_JAVASCRIPT', 'PLACEMENT_TAG_INTERSTITIAL_IFRAME_JAVASCRIPT', 'PLACEMENT_TAG_INTERSTITIAL_INTERNAL_REDIRECT', 'PLACEMENT_TAG_INTERSTITIAL_JAVASCRIPT', 'PLACEMENT_TAG_CLICK_COMMANDS', 'PLACEMENT_TAG_INSTREAM_VIDEO_PREFETCH', 'PLACEMENT_TAG_TRACKING', 'PLACEMENT_TAG_TRACKING_IFRAME', 'PLACEMENT_TAG_TRACKING_JAVASCRIPT', 'PLACEMENT_TAG_INSTREAM_VIDEO_PREFETCH_VAST_3', 'PLACEMENT_TAG_IFRAME_JAVASCRIPT_LEGACY', 'PLACEMENT_TAG_JAVASCRIPT_LEGACY', 'PLACEMENT_TAG_INTERSTITIAL_IFRAME_JAVASCRIPT_LEGACY', 'PLACEMENT_TAG_INTERSTITIAL_JAVASCRIPT_LEGACY', 'PLACEMENT_TAG_INSTREAM_VIDEO_PREFETCH_VAST_4', 'PLACEMENT_TAG_TRACKING_THIRD_PARTY_MEASUREMENT']):
            raise ValueError("must be one of enum values ('PLACEMENT_TAG_STANDARD', 'PLACEMENT_TAG_IFRAME_JAVASCRIPT', 'PLACEMENT_TAG_IFRAME_ILAYER', 'PLACEMENT_TAG_INTERNAL_REDIRECT', 'PLACEMENT_TAG_JAVASCRIPT', 'PLACEMENT_TAG_INTERSTITIAL_IFRAME_JAVASCRIPT', 'PLACEMENT_TAG_INTERSTITIAL_INTERNAL_REDIRECT', 'PLACEMENT_TAG_INTERSTITIAL_JAVASCRIPT', 'PLACEMENT_TAG_CLICK_COMMANDS', 'PLACEMENT_TAG_INSTREAM_VIDEO_PREFETCH', 'PLACEMENT_TAG_TRACKING', 'PLACEMENT_TAG_TRACKING_IFRAME', 'PLACEMENT_TAG_TRACKING_JAVASCRIPT', 'PLACEMENT_TAG_INSTREAM_VIDEO_PREFETCH_VAST_3', 'PLACEMENT_TAG_IFRAME_JAVASCRIPT_LEGACY', 'PLACEMENT_TAG_JAVASCRIPT_LEGACY', 'PLACEMENT_TAG_INTERSTITIAL_IFRAME_JAVASCRIPT_LEGACY', 'PLACEMENT_TAG_INTERSTITIAL_JAVASCRIPT_LEGACY', 'PLACEMENT_TAG_INSTREAM_VIDEO_PREFETCH_VAST_4', 'PLACEMENT_TAG_TRACKING_THIRD_PARTY_MEASUREMENT')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of TagData from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of TagData from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "adId": obj.get("adId"),
            "clickTag": obj.get("clickTag"),
            "creativeId": obj.get("creativeId"),
            "format": obj.get("format"),
            "impressionTag": obj.get("impressionTag")
        })
        return _obj



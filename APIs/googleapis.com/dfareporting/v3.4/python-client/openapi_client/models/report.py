# coding: utf-8

"""
    Campaign Manager 360 API

    Build applications to efficiently manage large or complex trafficking, reporting, and attribution workflows for Campaign Manager 360.

    The version of the OpenAPI document: v3.4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.report_criteria import ReportCriteria
from openapi_client.models.report_cross_dimension_reach_criteria import ReportCrossDimensionReachCriteria
from openapi_client.models.report_delivery import ReportDelivery
from openapi_client.models.report_floodlight_criteria import ReportFloodlightCriteria
from openapi_client.models.report_path_attribution_criteria import ReportPathAttributionCriteria
from openapi_client.models.report_path_criteria import ReportPathCriteria
from openapi_client.models.report_path_to_conversion_criteria import ReportPathToConversionCriteria
from openapi_client.models.report_reach_criteria import ReportReachCriteria
from openapi_client.models.report_schedule import ReportSchedule
from typing import Optional, Set
from typing_extensions import Self

class Report(BaseModel):
    """
    Represents a Report resource.
    """ # noqa: E501
    account_id: Optional[StrictStr] = Field(default=None, description="The account ID to which this report belongs.", alias="accountId")
    criteria: Optional[ReportCriteria] = None
    cross_dimension_reach_criteria: Optional[ReportCrossDimensionReachCriteria] = Field(default=None, alias="crossDimensionReachCriteria")
    delivery: Optional[ReportDelivery] = None
    etag: Optional[StrictStr] = Field(default=None, description="The eTag of this response for caching purposes.")
    file_name: Optional[StrictStr] = Field(default=None, description="The filename used when generating report files for this report.", alias="fileName")
    floodlight_criteria: Optional[ReportFloodlightCriteria] = Field(default=None, alias="floodlightCriteria")
    format: Optional[StrictStr] = Field(default=None, description="The output format of the report. If not specified, default format is \"CSV\". Note that the actual format in the completed report file might differ if for instance the report's size exceeds the format's capabilities. \"CSV\" will then be the fallback format.")
    id: Optional[StrictStr] = Field(default=None, description="The unique ID identifying this report resource.")
    kind: Optional[StrictStr] = Field(default=None, description="The kind of resource this is, in this case dfareporting#report.")
    last_modified_time: Optional[StrictStr] = Field(default=None, description="The timestamp (in milliseconds since epoch) of when this report was last modified.", alias="lastModifiedTime")
    name: Optional[StrictStr] = Field(default=None, description="The name of the report.")
    owner_profile_id: Optional[StrictStr] = Field(default=None, description="The user profile id of the owner of this report.", alias="ownerProfileId")
    path_attribution_criteria: Optional[ReportPathAttributionCriteria] = Field(default=None, alias="pathAttributionCriteria")
    path_criteria: Optional[ReportPathCriteria] = Field(default=None, alias="pathCriteria")
    path_to_conversion_criteria: Optional[ReportPathToConversionCriteria] = Field(default=None, alias="pathToConversionCriteria")
    reach_criteria: Optional[ReportReachCriteria] = Field(default=None, alias="reachCriteria")
    schedule: Optional[ReportSchedule] = None
    sub_account_id: Optional[StrictStr] = Field(default=None, description="The subaccount ID to which this report belongs if applicable.", alias="subAccountId")
    type: Optional[StrictStr] = Field(default=None, description="The type of the report.")
    __properties: ClassVar[List[str]] = ["accountId", "criteria", "crossDimensionReachCriteria", "delivery", "etag", "fileName", "floodlightCriteria", "format", "id", "kind", "lastModifiedTime", "name", "ownerProfileId", "pathAttributionCriteria", "pathCriteria", "pathToConversionCriteria", "reachCriteria", "schedule", "subAccountId", "type"]

    @field_validator('format')
    def format_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['CSV', 'EXCEL']):
            raise ValueError("must be one of enum values ('CSV', 'EXCEL')")
        return value

    @field_validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['STANDARD', 'REACH', 'PATH_TO_CONVERSION', 'CROSS_DIMENSION_REACH', 'FLOODLIGHT', 'PATH', 'PATH_ATTRIBUTION']):
            raise ValueError("must be one of enum values ('STANDARD', 'REACH', 'PATH_TO_CONVERSION', 'CROSS_DIMENSION_REACH', 'FLOODLIGHT', 'PATH', 'PATH_ATTRIBUTION')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Report from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of criteria
        if self.criteria:
            _dict['criteria'] = self.criteria.to_dict()
        # override the default output from pydantic by calling `to_dict()` of cross_dimension_reach_criteria
        if self.cross_dimension_reach_criteria:
            _dict['crossDimensionReachCriteria'] = self.cross_dimension_reach_criteria.to_dict()
        # override the default output from pydantic by calling `to_dict()` of delivery
        if self.delivery:
            _dict['delivery'] = self.delivery.to_dict()
        # override the default output from pydantic by calling `to_dict()` of floodlight_criteria
        if self.floodlight_criteria:
            _dict['floodlightCriteria'] = self.floodlight_criteria.to_dict()
        # override the default output from pydantic by calling `to_dict()` of path_attribution_criteria
        if self.path_attribution_criteria:
            _dict['pathAttributionCriteria'] = self.path_attribution_criteria.to_dict()
        # override the default output from pydantic by calling `to_dict()` of path_criteria
        if self.path_criteria:
            _dict['pathCriteria'] = self.path_criteria.to_dict()
        # override the default output from pydantic by calling `to_dict()` of path_to_conversion_criteria
        if self.path_to_conversion_criteria:
            _dict['pathToConversionCriteria'] = self.path_to_conversion_criteria.to_dict()
        # override the default output from pydantic by calling `to_dict()` of reach_criteria
        if self.reach_criteria:
            _dict['reachCriteria'] = self.reach_criteria.to_dict()
        # override the default output from pydantic by calling `to_dict()` of schedule
        if self.schedule:
            _dict['schedule'] = self.schedule.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Report from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "accountId": obj.get("accountId"),
            "criteria": ReportCriteria.from_dict(obj["criteria"]) if obj.get("criteria") is not None else None,
            "crossDimensionReachCriteria": ReportCrossDimensionReachCriteria.from_dict(obj["crossDimensionReachCriteria"]) if obj.get("crossDimensionReachCriteria") is not None else None,
            "delivery": ReportDelivery.from_dict(obj["delivery"]) if obj.get("delivery") is not None else None,
            "etag": obj.get("etag"),
            "fileName": obj.get("fileName"),
            "floodlightCriteria": ReportFloodlightCriteria.from_dict(obj["floodlightCriteria"]) if obj.get("floodlightCriteria") is not None else None,
            "format": obj.get("format"),
            "id": obj.get("id"),
            "kind": obj.get("kind"),
            "lastModifiedTime": obj.get("lastModifiedTime"),
            "name": obj.get("name"),
            "ownerProfileId": obj.get("ownerProfileId"),
            "pathAttributionCriteria": ReportPathAttributionCriteria.from_dict(obj["pathAttributionCriteria"]) if obj.get("pathAttributionCriteria") is not None else None,
            "pathCriteria": ReportPathCriteria.from_dict(obj["pathCriteria"]) if obj.get("pathCriteria") is not None else None,
            "pathToConversionCriteria": ReportPathToConversionCriteria.from_dict(obj["pathToConversionCriteria"]) if obj.get("pathToConversionCriteria") is not None else None,
            "reachCriteria": ReportReachCriteria.from_dict(obj["reachCriteria"]) if obj.get("reachCriteria") is not None else None,
            "schedule": ReportSchedule.from_dict(obj["schedule"]) if obj.get("schedule") is not None else None,
            "subAccountId": obj.get("subAccountId"),
            "type": obj.get("type")
        })
        return _obj



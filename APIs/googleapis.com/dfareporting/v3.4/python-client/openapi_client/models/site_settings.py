# coding: utf-8

"""
    Campaign Manager 360 API

    Build applications to efficiently manage large or complex trafficking, reporting, and attribution workflows for Campaign Manager 360.

    The version of the OpenAPI document: v3.4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.tag_setting import TagSetting
from typing import Optional, Set
from typing_extensions import Self

class SiteSettings(BaseModel):
    """
    Site Settings
    """ # noqa: E501
    active_view_opt_out: Optional[StrictBool] = Field(default=None, description="Whether active view creatives are disabled for this site.", alias="activeViewOptOut")
    ad_blocking_opt_out: Optional[StrictBool] = Field(default=None, description="Whether this site opts out of ad blocking. When true, ad blocking is disabled for all placements under the site, regardless of the individual placement settings. When false, the campaign and placement settings take effect.", alias="adBlockingOptOut")
    disable_new_cookie: Optional[StrictBool] = Field(default=None, description="Whether new cookies are disabled for this site.", alias="disableNewCookie")
    tag_setting: Optional[TagSetting] = Field(default=None, alias="tagSetting")
    video_active_view_opt_out_template: Optional[StrictBool] = Field(default=None, description="Whether Verification and ActiveView for in-stream video creatives are disabled by default for new placements created under this site. This value will be used to populate the placement.videoActiveViewOptOut field, when no value is specified for the new placement.", alias="videoActiveViewOptOutTemplate")
    vpaid_adapter_choice_template: Optional[StrictStr] = Field(default=None, description="Default VPAID adapter setting for new placements created under this site. This value will be used to populate the placements.vpaidAdapterChoice field, when no value is specified for the new placement. Controls which VPAID format the measurement adapter will use for in-stream video creatives assigned to the placement. The publisher's specifications will typically determine this setting. For VPAID creatives, the adapter format will match the VPAID format (HTML5 VPAID creatives use the HTML5 adapter). *Note:* Flash is no longer supported. This field now defaults to HTML5 when the following values are provided: FLASH, BOTH.", alias="vpaidAdapterChoiceTemplate")
    __properties: ClassVar[List[str]] = ["activeViewOptOut", "adBlockingOptOut", "disableNewCookie", "tagSetting", "videoActiveViewOptOutTemplate", "vpaidAdapterChoiceTemplate"]

    @field_validator('vpaid_adapter_choice_template')
    def vpaid_adapter_choice_template_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['DEFAULT', 'FLASH', 'HTML5', 'BOTH']):
            raise ValueError("must be one of enum values ('DEFAULT', 'FLASH', 'HTML5', 'BOTH')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SiteSettings from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of tag_setting
        if self.tag_setting:
            _dict['tagSetting'] = self.tag_setting.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SiteSettings from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "activeViewOptOut": obj.get("activeViewOptOut"),
            "adBlockingOptOut": obj.get("adBlockingOptOut"),
            "disableNewCookie": obj.get("disableNewCookie"),
            "tagSetting": TagSetting.from_dict(obj["tagSetting"]) if obj.get("tagSetting") is not None else None,
            "videoActiveViewOptOutTemplate": obj.get("videoActiveViewOptOutTemplate"),
            "vpaidAdapterChoiceTemplate": obj.get("vpaidAdapterChoiceTemplate")
        })
        return _obj



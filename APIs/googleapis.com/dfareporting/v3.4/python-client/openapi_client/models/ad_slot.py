# coding: utf-8

"""
    Campaign Manager 360 API

    Build applications to efficiently manage large or complex trafficking, reporting, and attribution workflows for Campaign Manager 360.

    The version of the OpenAPI document: v3.4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class AdSlot(BaseModel):
    """
    Ad Slot
    """ # noqa: E501
    comment: Optional[StrictStr] = Field(default=None, description="Comment for this ad slot.")
    compatibility: Optional[StrictStr] = Field(default=None, description="Ad slot compatibility. DISPLAY and DISPLAY_INTERSTITIAL refer to rendering either on desktop, mobile devices or in mobile apps for regular or interstitial ads respectively. APP and APP_INTERSTITIAL are for rendering in mobile apps. IN_STREAM_VIDEO refers to rendering in in-stream video ads developed with the VAST standard.")
    height: Optional[StrictStr] = Field(default=None, description="Height of this ad slot.")
    linked_placement_id: Optional[StrictStr] = Field(default=None, description="ID of the placement from an external platform that is linked to this ad slot.", alias="linkedPlacementId")
    name: Optional[StrictStr] = Field(default=None, description="Name of this ad slot.")
    payment_source_type: Optional[StrictStr] = Field(default=None, description="Payment source type of this ad slot.", alias="paymentSourceType")
    primary: Optional[StrictBool] = Field(default=None, description="Primary ad slot of a roadblock inventory item.")
    width: Optional[StrictStr] = Field(default=None, description="Width of this ad slot.")
    __properties: ClassVar[List[str]] = ["comment", "compatibility", "height", "linkedPlacementId", "name", "paymentSourceType", "primary", "width"]

    @field_validator('compatibility')
    def compatibility_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['DISPLAY', 'DISPLAY_INTERSTITIAL', 'APP', 'APP_INTERSTITIAL', 'IN_STREAM_VIDEO', 'IN_STREAM_AUDIO']):
            raise ValueError("must be one of enum values ('DISPLAY', 'DISPLAY_INTERSTITIAL', 'APP', 'APP_INTERSTITIAL', 'IN_STREAM_VIDEO', 'IN_STREAM_AUDIO')")
        return value

    @field_validator('payment_source_type')
    def payment_source_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['PLANNING_PAYMENT_SOURCE_TYPE_AGENCY_PAID', 'PLANNING_PAYMENT_SOURCE_TYPE_PUBLISHER_PAID']):
            raise ValueError("must be one of enum values ('PLANNING_PAYMENT_SOURCE_TYPE_AGENCY_PAID', 'PLANNING_PAYMENT_SOURCE_TYPE_PUBLISHER_PAID')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AdSlot from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AdSlot from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "comment": obj.get("comment"),
            "compatibility": obj.get("compatibility"),
            "height": obj.get("height"),
            "linkedPlacementId": obj.get("linkedPlacementId"),
            "name": obj.get("name"),
            "paymentSourceType": obj.get("paymentSourceType"),
            "primary": obj.get("primary"),
            "width": obj.get("width")
        })
        return _obj



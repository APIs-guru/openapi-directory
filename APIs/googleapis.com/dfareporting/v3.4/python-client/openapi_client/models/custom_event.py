# coding: utf-8

"""
    Campaign Manager 360 API

    Build applications to efficiently manage large or complex trafficking, reporting, and attribution workflows for Campaign Manager 360.

    The version of the OpenAPI document: v3.4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.custom_event_click_annotation import CustomEventClickAnnotation
from openapi_client.models.custom_event_impression_annotation import CustomEventImpressionAnnotation
from openapi_client.models.custom_event_insert import CustomEventInsert
from openapi_client.models.custom_variable import CustomVariable
from typing import Optional, Set
from typing_extensions import Self

class CustomEvent(BaseModel):
    """
    Experimental feature (no support provided) A custom event represents a third party impression, a third party click, an annotation on a first party impression, or an annotation on a first party click.
    """ # noqa: E501
    annotate_click_event: Optional[CustomEventClickAnnotation] = Field(default=None, alias="annotateClickEvent")
    annotate_impression_event: Optional[CustomEventImpressionAnnotation] = Field(default=None, alias="annotateImpressionEvent")
    custom_variables: Optional[List[CustomVariable]] = Field(default=None, description="Custom variables associated with the event.", alias="customVariables")
    event_type: Optional[StrictStr] = Field(default=None, description="The type of event. If INSERT, the fields in insertEvent need to be populated. If ANNOTATE, the fields in either annotateClickEvent or annotateImpressionEvent need to be populated.", alias="eventType")
    floodlight_configuration_id: Optional[StrictStr] = Field(default=None, description="Floodlight configuration ID of the advertiser the event is linked to. This is a required field.", alias="floodlightConfigurationId")
    insert_event: Optional[CustomEventInsert] = Field(default=None, alias="insertEvent")
    kind: Optional[StrictStr] = Field(default=None, description="Identifies what kind of resource this is. Value: the fixed string \"dfareporting#customEvent\".")
    ordinal: Optional[StrictStr] = Field(default=None, description="The ordinal of this custom event. This is a required field.")
    timestamp_micros: Optional[StrictStr] = Field(default=None, description="The timestamp of this custom event, in Unix epoch micros. This is a required field.", alias="timestampMicros")
    __properties: ClassVar[List[str]] = ["annotateClickEvent", "annotateImpressionEvent", "customVariables", "eventType", "floodlightConfigurationId", "insertEvent", "kind", "ordinal", "timestampMicros"]

    @field_validator('event_type')
    def event_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['UNKNOWN', 'INSERT', 'ANNOTATE']):
            raise ValueError("must be one of enum values ('UNKNOWN', 'INSERT', 'ANNOTATE')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CustomEvent from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of annotate_click_event
        if self.annotate_click_event:
            _dict['annotateClickEvent'] = self.annotate_click_event.to_dict()
        # override the default output from pydantic by calling `to_dict()` of annotate_impression_event
        if self.annotate_impression_event:
            _dict['annotateImpressionEvent'] = self.annotate_impression_event.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in custom_variables (list)
        _items = []
        if self.custom_variables:
            for _item_custom_variables in self.custom_variables:
                if _item_custom_variables:
                    _items.append(_item_custom_variables.to_dict())
            _dict['customVariables'] = _items
        # override the default output from pydantic by calling `to_dict()` of insert_event
        if self.insert_event:
            _dict['insertEvent'] = self.insert_event.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CustomEvent from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "annotateClickEvent": CustomEventClickAnnotation.from_dict(obj["annotateClickEvent"]) if obj.get("annotateClickEvent") is not None else None,
            "annotateImpressionEvent": CustomEventImpressionAnnotation.from_dict(obj["annotateImpressionEvent"]) if obj.get("annotateImpressionEvent") is not None else None,
            "customVariables": [CustomVariable.from_dict(_item) for _item in obj["customVariables"]] if obj.get("customVariables") is not None else None,
            "eventType": obj.get("eventType"),
            "floodlightConfigurationId": obj.get("floodlightConfigurationId"),
            "insertEvent": CustomEventInsert.from_dict(obj["insertEvent"]) if obj.get("insertEvent") is not None else None,
            "kind": obj.get("kind"),
            "ordinal": obj.get("ordinal"),
            "timestampMicros": obj.get("timestampMicros")
        })
        return _obj



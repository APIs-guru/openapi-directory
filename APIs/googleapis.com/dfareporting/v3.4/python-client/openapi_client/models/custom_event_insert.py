# coding: utf-8

"""
    Campaign Manager 360 API

    Build applications to efficiently manage large or complex trafficking, reporting, and attribution workflows for Campaign Manager 360.

    The version of the OpenAPI document: v3.4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.campaign_manager_ids import CampaignManagerIds
from openapi_client.models.dv3_ids import DV3Ids
from typing import Optional, Set
from typing_extensions import Self

class CustomEventInsert(BaseModel):
    """
    Custom event to be inserted.
    """ # noqa: E501
    cm_dimensions: Optional[CampaignManagerIds] = Field(default=None, alias="cmDimensions")
    dv3_dimensions: Optional[DV3Ids] = Field(default=None, alias="dv3Dimensions")
    insert_event_type: Optional[StrictStr] = Field(default=None, description="The type of event to insert.", alias="insertEventType")
    kind: Optional[StrictStr] = Field(default=None, description="Identifies what kind of resource this is. Value: the fixed string \"dfareporting#customEventInsert\".")
    match_id: Optional[StrictStr] = Field(default=None, description="The match ID field. A match ID is your own first-party identifier that has been synced with Google using the match ID feature in Floodlight. This field is mutually exclusive with mobileDeviceId, and at least one of the two fields is required.", alias="matchId")
    mobile_device_id: Optional[StrictStr] = Field(default=None, description="The mobile device ID. This field is mutually exclusive with matchId, and at least one of the two fields is required.", alias="mobileDeviceId")
    __properties: ClassVar[List[str]] = ["cmDimensions", "dv3Dimensions", "insertEventType", "kind", "matchId", "mobileDeviceId"]

    @field_validator('insert_event_type')
    def insert_event_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['UNKNOWN', 'IMPRESSION', 'CLICK']):
            raise ValueError("must be one of enum values ('UNKNOWN', 'IMPRESSION', 'CLICK')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CustomEventInsert from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of cm_dimensions
        if self.cm_dimensions:
            _dict['cmDimensions'] = self.cm_dimensions.to_dict()
        # override the default output from pydantic by calling `to_dict()` of dv3_dimensions
        if self.dv3_dimensions:
            _dict['dv3Dimensions'] = self.dv3_dimensions.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CustomEventInsert from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "cmDimensions": CampaignManagerIds.from_dict(obj["cmDimensions"]) if obj.get("cmDimensions") is not None else None,
            "dv3Dimensions": DV3Ids.from_dict(obj["dv3Dimensions"]) if obj.get("dv3Dimensions") is not None else None,
            "insertEventType": obj.get("insertEventType"),
            "kind": obj.get("kind"),
            "matchId": obj.get("matchId"),
            "mobileDeviceId": obj.get("mobileDeviceId")
        })
        return _obj



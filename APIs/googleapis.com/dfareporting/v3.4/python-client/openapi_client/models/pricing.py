# coding: utf-8

"""
    Campaign Manager 360 API

    Build applications to efficiently manage large or complex trafficking, reporting, and attribution workflows for Campaign Manager 360.

    The version of the OpenAPI document: v3.4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date
from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.flight import Flight
from typing import Optional, Set
from typing_extensions import Self

class Pricing(BaseModel):
    """
    Pricing Information
    """ # noqa: E501
    cap_cost_type: Optional[StrictStr] = Field(default=None, description="Cap cost type of this inventory item.", alias="capCostType")
    end_date: Optional[date] = Field(default=None, alias="endDate")
    flights: Optional[List[Flight]] = Field(default=None, description="Flights of this inventory item. A flight (a.k.a. pricing period) represents the inventory item pricing information for a specific period of time.")
    group_type: Optional[StrictStr] = Field(default=None, description="Group type of this inventory item if it represents a placement group. Is null otherwise. There are two type of placement groups: PLANNING_PLACEMENT_GROUP_TYPE_PACKAGE is a simple group of inventory items that acts as a single pricing point for a group of tags. PLANNING_PLACEMENT_GROUP_TYPE_ROADBLOCK is a group of inventory items that not only acts as a single pricing point, but also assumes that all the tags in it will be served at the same time. A roadblock requires one of its assigned inventory items to be marked as primary.", alias="groupType")
    pricing_type: Optional[StrictStr] = Field(default=None, description="Pricing type of this inventory item.", alias="pricingType")
    start_date: Optional[date] = Field(default=None, alias="startDate")
    __properties: ClassVar[List[str]] = ["capCostType", "endDate", "flights", "groupType", "pricingType", "startDate"]

    @field_validator('cap_cost_type')
    def cap_cost_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['PLANNING_PLACEMENT_CAP_COST_TYPE_NONE', 'PLANNING_PLACEMENT_CAP_COST_TYPE_MONTHLY', 'PLANNING_PLACEMENT_CAP_COST_TYPE_CUMULATIVE']):
            raise ValueError("must be one of enum values ('PLANNING_PLACEMENT_CAP_COST_TYPE_NONE', 'PLANNING_PLACEMENT_CAP_COST_TYPE_MONTHLY', 'PLANNING_PLACEMENT_CAP_COST_TYPE_CUMULATIVE')")
        return value

    @field_validator('group_type')
    def group_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['PLANNING_PLACEMENT_GROUP_TYPE_PACKAGE', 'PLANNING_PLACEMENT_GROUP_TYPE_ROADBLOCK']):
            raise ValueError("must be one of enum values ('PLANNING_PLACEMENT_GROUP_TYPE_PACKAGE', 'PLANNING_PLACEMENT_GROUP_TYPE_ROADBLOCK')")
        return value

    @field_validator('pricing_type')
    def pricing_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['PLANNING_PLACEMENT_PRICING_TYPE_IMPRESSIONS', 'PLANNING_PLACEMENT_PRICING_TYPE_CPM', 'PLANNING_PLACEMENT_PRICING_TYPE_CLICKS', 'PLANNING_PLACEMENT_PRICING_TYPE_CPC', 'PLANNING_PLACEMENT_PRICING_TYPE_CPA', 'PLANNING_PLACEMENT_PRICING_TYPE_FLAT_RATE_IMPRESSIONS', 'PLANNING_PLACEMENT_PRICING_TYPE_FLAT_RATE_CLICKS', 'PLANNING_PLACEMENT_PRICING_TYPE_CPM_ACTIVEVIEW']):
            raise ValueError("must be one of enum values ('PLANNING_PLACEMENT_PRICING_TYPE_IMPRESSIONS', 'PLANNING_PLACEMENT_PRICING_TYPE_CPM', 'PLANNING_PLACEMENT_PRICING_TYPE_CLICKS', 'PLANNING_PLACEMENT_PRICING_TYPE_CPC', 'PLANNING_PLACEMENT_PRICING_TYPE_CPA', 'PLANNING_PLACEMENT_PRICING_TYPE_FLAT_RATE_IMPRESSIONS', 'PLANNING_PLACEMENT_PRICING_TYPE_FLAT_RATE_CLICKS', 'PLANNING_PLACEMENT_PRICING_TYPE_CPM_ACTIVEVIEW')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Pricing from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in flights (list)
        _items = []
        if self.flights:
            for _item_flights in self.flights:
                if _item_flights:
                    _items.append(_item_flights.to_dict())
            _dict['flights'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Pricing from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "capCostType": obj.get("capCostType"),
            "endDate": obj.get("endDate"),
            "flights": [Flight.from_dict(_item) for _item in obj["flights"]] if obj.get("flights") is not None else None,
            "groupType": obj.get("groupType"),
            "pricingType": obj.get("pricingType"),
            "startDate": obj.get("startDate")
        })
        return _obj



# coding: utf-8

"""
    Campaign Manager 360 API

    Build applications to efficiently manage large or complex trafficking, reporting, and attribution workflows for Campaign Manager 360.

    The version of the OpenAPI document: v3.4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.creative_click_through_url import CreativeClickThroughUrl
from openapi_client.models.popup_window_properties import PopupWindowProperties
from typing import Optional, Set
from typing_extensions import Self

class CreativeCustomEvent(BaseModel):
    """
    Creative Custom Event.
    """ # noqa: E501
    advertiser_custom_event_id: Optional[StrictStr] = Field(default=None, description="Unique ID of this event used by Reporting and Data Transfer. This is a read-only field.", alias="advertiserCustomEventId")
    advertiser_custom_event_name: Optional[StrictStr] = Field(default=None, description="User-entered name for the event.", alias="advertiserCustomEventName")
    advertiser_custom_event_type: Optional[StrictStr] = Field(default=None, description="Type of the event. This is a read-only field.", alias="advertiserCustomEventType")
    artwork_label: Optional[StrictStr] = Field(default=None, description="Artwork label column, used to link events in Campaign Manager back to events in Studio. This is a required field and should not be modified after insertion.", alias="artworkLabel")
    artwork_type: Optional[StrictStr] = Field(default=None, description="Artwork type used by the creative.This is a read-only field.", alias="artworkType")
    exit_click_through_url: Optional[CreativeClickThroughUrl] = Field(default=None, alias="exitClickThroughUrl")
    id: Optional[StrictStr] = Field(default=None, description="ID of this event. This is a required field and should not be modified after insertion.")
    popup_window_properties: Optional[PopupWindowProperties] = Field(default=None, alias="popupWindowProperties")
    target_type: Optional[StrictStr] = Field(default=None, description="Target type used by the event.", alias="targetType")
    video_reporting_id: Optional[StrictStr] = Field(default=None, description="Video reporting ID, used to differentiate multiple videos in a single creative. This is a read-only field.", alias="videoReportingId")
    __properties: ClassVar[List[str]] = ["advertiserCustomEventId", "advertiserCustomEventName", "advertiserCustomEventType", "artworkLabel", "artworkType", "exitClickThroughUrl", "id", "popupWindowProperties", "targetType", "videoReportingId"]

    @field_validator('advertiser_custom_event_type')
    def advertiser_custom_event_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['ADVERTISER_EVENT_TIMER', 'ADVERTISER_EVENT_EXIT', 'ADVERTISER_EVENT_COUNTER']):
            raise ValueError("must be one of enum values ('ADVERTISER_EVENT_TIMER', 'ADVERTISER_EVENT_EXIT', 'ADVERTISER_EVENT_COUNTER')")
        return value

    @field_validator('artwork_type')
    def artwork_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['ARTWORK_TYPE_FLASH', 'ARTWORK_TYPE_HTML5', 'ARTWORK_TYPE_MIXED', 'ARTWORK_TYPE_IMAGE']):
            raise ValueError("must be one of enum values ('ARTWORK_TYPE_FLASH', 'ARTWORK_TYPE_HTML5', 'ARTWORK_TYPE_MIXED', 'ARTWORK_TYPE_IMAGE')")
        return value

    @field_validator('target_type')
    def target_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['TARGET_BLANK', 'TARGET_TOP', 'TARGET_SELF', 'TARGET_PARENT', 'TARGET_POPUP']):
            raise ValueError("must be one of enum values ('TARGET_BLANK', 'TARGET_TOP', 'TARGET_SELF', 'TARGET_PARENT', 'TARGET_POPUP')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CreativeCustomEvent from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of exit_click_through_url
        if self.exit_click_through_url:
            _dict['exitClickThroughUrl'] = self.exit_click_through_url.to_dict()
        # override the default output from pydantic by calling `to_dict()` of popup_window_properties
        if self.popup_window_properties:
            _dict['popupWindowProperties'] = self.popup_window_properties.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CreativeCustomEvent from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "advertiserCustomEventId": obj.get("advertiserCustomEventId"),
            "advertiserCustomEventName": obj.get("advertiserCustomEventName"),
            "advertiserCustomEventType": obj.get("advertiserCustomEventType"),
            "artworkLabel": obj.get("artworkLabel"),
            "artworkType": obj.get("artworkType"),
            "exitClickThroughUrl": CreativeClickThroughUrl.from_dict(obj["exitClickThroughUrl"]) if obj.get("exitClickThroughUrl") is not None else None,
            "id": obj.get("id"),
            "popupWindowProperties": PopupWindowProperties.from_dict(obj["popupWindowProperties"]) if obj.get("popupWindowProperties") is not None else None,
            "targetType": obj.get("targetType"),
            "videoReportingId": obj.get("videoReportingId")
        })
        return _obj



# coding: utf-8

"""
    Campaign Manager 360 API

    Build applications to efficiently manage large or complex trafficking, reporting, and attribution workflows for Campaign Manager 360.

    The version of the OpenAPI document: v3.4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.ad_blocking_configuration import AdBlockingConfiguration
from openapi_client.models.audience_segment_group import AudienceSegmentGroup
from openapi_client.models.click_through_url_suffix_properties import ClickThroughUrlSuffixProperties
from openapi_client.models.creative_optimization_configuration import CreativeOptimizationConfiguration
from openapi_client.models.default_click_through_event_tag_properties import DefaultClickThroughEventTagProperties
from openapi_client.models.dimension_value import DimensionValue
from openapi_client.models.event_tag_override import EventTagOverride
from openapi_client.models.last_modified_info import LastModifiedInfo
from typing import Optional, Set
from typing_extensions import Self

class Campaign(BaseModel):
    """
    Contains properties of a Campaign Manager campaign.
    """ # noqa: E501
    account_id: Optional[StrictStr] = Field(default=None, description="Account ID of this campaign. This is a read-only field that can be left blank.", alias="accountId")
    ad_blocking_configuration: Optional[AdBlockingConfiguration] = Field(default=None, alias="adBlockingConfiguration")
    additional_creative_optimization_configurations: Optional[List[CreativeOptimizationConfiguration]] = Field(default=None, description="Additional creative optimization configurations for the campaign.", alias="additionalCreativeOptimizationConfigurations")
    advertiser_group_id: Optional[StrictStr] = Field(default=None, description="Advertiser group ID of the associated advertiser.", alias="advertiserGroupId")
    advertiser_id: Optional[StrictStr] = Field(default=None, description="Advertiser ID of this campaign. This is a required field.", alias="advertiserId")
    advertiser_id_dimension_value: Optional[DimensionValue] = Field(default=None, alias="advertiserIdDimensionValue")
    archived: Optional[StrictBool] = Field(default=None, description="Whether this campaign has been archived.")
    audience_segment_groups: Optional[List[AudienceSegmentGroup]] = Field(default=None, description="Audience segment groups assigned to this campaign. Cannot have more than 300 segment groups.", alias="audienceSegmentGroups")
    billing_invoice_code: Optional[StrictStr] = Field(default=None, description="Billing invoice code included in the Campaign Manager client billing invoices associated with the campaign.", alias="billingInvoiceCode")
    click_through_url_suffix_properties: Optional[ClickThroughUrlSuffixProperties] = Field(default=None, alias="clickThroughUrlSuffixProperties")
    comment: Optional[StrictStr] = Field(default=None, description="Arbitrary comments about this campaign. Must be less than 256 characters long.")
    create_info: Optional[LastModifiedInfo] = Field(default=None, alias="createInfo")
    creative_group_ids: Optional[List[StrictStr]] = Field(default=None, description="List of creative group IDs that are assigned to the campaign.", alias="creativeGroupIds")
    creative_optimization_configuration: Optional[CreativeOptimizationConfiguration] = Field(default=None, alias="creativeOptimizationConfiguration")
    default_click_through_event_tag_properties: Optional[DefaultClickThroughEventTagProperties] = Field(default=None, alias="defaultClickThroughEventTagProperties")
    default_landing_page_id: Optional[StrictStr] = Field(default=None, description="The default landing page ID for this campaign.", alias="defaultLandingPageId")
    end_date: Optional[date] = Field(default=None, alias="endDate")
    event_tag_overrides: Optional[List[EventTagOverride]] = Field(default=None, description="Overrides that can be used to activate or deactivate advertiser event tags.", alias="eventTagOverrides")
    external_id: Optional[StrictStr] = Field(default=None, description="External ID for this campaign.", alias="externalId")
    id: Optional[StrictStr] = Field(default=None, description="ID of this campaign. This is a read-only auto-generated field.")
    id_dimension_value: Optional[DimensionValue] = Field(default=None, alias="idDimensionValue")
    kind: Optional[StrictStr] = Field(default=None, description="Identifies what kind of resource this is. Value: the fixed string \"dfareporting#campaign\".")
    last_modified_info: Optional[LastModifiedInfo] = Field(default=None, alias="lastModifiedInfo")
    name: Optional[StrictStr] = Field(default=None, description="Name of this campaign. This is a required field and must be less than 512 characters long and unique among campaigns of the same advertiser.")
    nielsen_ocr_enabled: Optional[StrictBool] = Field(default=None, description="Whether Nielsen reports are enabled for this campaign.", alias="nielsenOcrEnabled")
    start_date: Optional[date] = Field(default=None, alias="startDate")
    subaccount_id: Optional[StrictStr] = Field(default=None, description="Subaccount ID of this campaign. This is a read-only field that can be left blank.", alias="subaccountId")
    trafficker_emails: Optional[List[StrictStr]] = Field(default=None, description="Campaign trafficker contact emails.", alias="traffickerEmails")
    __properties: ClassVar[List[str]] = ["accountId", "adBlockingConfiguration", "additionalCreativeOptimizationConfigurations", "advertiserGroupId", "advertiserId", "advertiserIdDimensionValue", "archived", "audienceSegmentGroups", "billingInvoiceCode", "clickThroughUrlSuffixProperties", "comment", "createInfo", "creativeGroupIds", "creativeOptimizationConfiguration", "defaultClickThroughEventTagProperties", "defaultLandingPageId", "endDate", "eventTagOverrides", "externalId", "id", "idDimensionValue", "kind", "lastModifiedInfo", "name", "nielsenOcrEnabled", "startDate", "subaccountId", "traffickerEmails"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Campaign from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of ad_blocking_configuration
        if self.ad_blocking_configuration:
            _dict['adBlockingConfiguration'] = self.ad_blocking_configuration.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in additional_creative_optimization_configurations (list)
        _items = []
        if self.additional_creative_optimization_configurations:
            for _item_additional_creative_optimization_configurations in self.additional_creative_optimization_configurations:
                if _item_additional_creative_optimization_configurations:
                    _items.append(_item_additional_creative_optimization_configurations.to_dict())
            _dict['additionalCreativeOptimizationConfigurations'] = _items
        # override the default output from pydantic by calling `to_dict()` of advertiser_id_dimension_value
        if self.advertiser_id_dimension_value:
            _dict['advertiserIdDimensionValue'] = self.advertiser_id_dimension_value.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in audience_segment_groups (list)
        _items = []
        if self.audience_segment_groups:
            for _item_audience_segment_groups in self.audience_segment_groups:
                if _item_audience_segment_groups:
                    _items.append(_item_audience_segment_groups.to_dict())
            _dict['audienceSegmentGroups'] = _items
        # override the default output from pydantic by calling `to_dict()` of click_through_url_suffix_properties
        if self.click_through_url_suffix_properties:
            _dict['clickThroughUrlSuffixProperties'] = self.click_through_url_suffix_properties.to_dict()
        # override the default output from pydantic by calling `to_dict()` of create_info
        if self.create_info:
            _dict['createInfo'] = self.create_info.to_dict()
        # override the default output from pydantic by calling `to_dict()` of creative_optimization_configuration
        if self.creative_optimization_configuration:
            _dict['creativeOptimizationConfiguration'] = self.creative_optimization_configuration.to_dict()
        # override the default output from pydantic by calling `to_dict()` of default_click_through_event_tag_properties
        if self.default_click_through_event_tag_properties:
            _dict['defaultClickThroughEventTagProperties'] = self.default_click_through_event_tag_properties.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in event_tag_overrides (list)
        _items = []
        if self.event_tag_overrides:
            for _item_event_tag_overrides in self.event_tag_overrides:
                if _item_event_tag_overrides:
                    _items.append(_item_event_tag_overrides.to_dict())
            _dict['eventTagOverrides'] = _items
        # override the default output from pydantic by calling `to_dict()` of id_dimension_value
        if self.id_dimension_value:
            _dict['idDimensionValue'] = self.id_dimension_value.to_dict()
        # override the default output from pydantic by calling `to_dict()` of last_modified_info
        if self.last_modified_info:
            _dict['lastModifiedInfo'] = self.last_modified_info.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Campaign from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "accountId": obj.get("accountId"),
            "adBlockingConfiguration": AdBlockingConfiguration.from_dict(obj["adBlockingConfiguration"]) if obj.get("adBlockingConfiguration") is not None else None,
            "additionalCreativeOptimizationConfigurations": [CreativeOptimizationConfiguration.from_dict(_item) for _item in obj["additionalCreativeOptimizationConfigurations"]] if obj.get("additionalCreativeOptimizationConfigurations") is not None else None,
            "advertiserGroupId": obj.get("advertiserGroupId"),
            "advertiserId": obj.get("advertiserId"),
            "advertiserIdDimensionValue": DimensionValue.from_dict(obj["advertiserIdDimensionValue"]) if obj.get("advertiserIdDimensionValue") is not None else None,
            "archived": obj.get("archived"),
            "audienceSegmentGroups": [AudienceSegmentGroup.from_dict(_item) for _item in obj["audienceSegmentGroups"]] if obj.get("audienceSegmentGroups") is not None else None,
            "billingInvoiceCode": obj.get("billingInvoiceCode"),
            "clickThroughUrlSuffixProperties": ClickThroughUrlSuffixProperties.from_dict(obj["clickThroughUrlSuffixProperties"]) if obj.get("clickThroughUrlSuffixProperties") is not None else None,
            "comment": obj.get("comment"),
            "createInfo": LastModifiedInfo.from_dict(obj["createInfo"]) if obj.get("createInfo") is not None else None,
            "creativeGroupIds": obj.get("creativeGroupIds"),
            "creativeOptimizationConfiguration": CreativeOptimizationConfiguration.from_dict(obj["creativeOptimizationConfiguration"]) if obj.get("creativeOptimizationConfiguration") is not None else None,
            "defaultClickThroughEventTagProperties": DefaultClickThroughEventTagProperties.from_dict(obj["defaultClickThroughEventTagProperties"]) if obj.get("defaultClickThroughEventTagProperties") is not None else None,
            "defaultLandingPageId": obj.get("defaultLandingPageId"),
            "endDate": obj.get("endDate"),
            "eventTagOverrides": [EventTagOverride.from_dict(_item) for _item in obj["eventTagOverrides"]] if obj.get("eventTagOverrides") is not None else None,
            "externalId": obj.get("externalId"),
            "id": obj.get("id"),
            "idDimensionValue": DimensionValue.from_dict(obj["idDimensionValue"]) if obj.get("idDimensionValue") is not None else None,
            "kind": obj.get("kind"),
            "lastModifiedInfo": LastModifiedInfo.from_dict(obj["lastModifiedInfo"]) if obj.get("lastModifiedInfo") is not None else None,
            "name": obj.get("name"),
            "nielsenOcrEnabled": obj.get("nielsenOcrEnabled"),
            "startDate": obj.get("startDate"),
            "subaccountId": obj.get("subaccountId"),
            "traffickerEmails": obj.get("traffickerEmails")
        })
        return _obj



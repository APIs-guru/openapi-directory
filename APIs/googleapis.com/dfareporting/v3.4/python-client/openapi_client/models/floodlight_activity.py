# coding: utf-8

"""
    Campaign Manager 360 API

    Build applications to efficiently manage large or complex trafficking, reporting, and attribution workflows for Campaign Manager 360.

    The version of the OpenAPI document: v3.4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.dimension_value import DimensionValue
from openapi_client.models.floodlight_activity_dynamic_tag import FloodlightActivityDynamicTag
from openapi_client.models.floodlight_activity_publisher_dynamic_tag import FloodlightActivityPublisherDynamicTag
from typing import Optional, Set
from typing_extensions import Self

class FloodlightActivity(BaseModel):
    """
    Contains properties of a Floodlight activity.
    """ # noqa: E501
    account_id: Optional[StrictStr] = Field(default=None, description="Account ID of this floodlight activity. This is a read-only field that can be left blank.", alias="accountId")
    advertiser_id: Optional[StrictStr] = Field(default=None, description="Advertiser ID of this floodlight activity. If this field is left blank, the value will be copied over either from the activity group's advertiser or the existing activity's advertiser.", alias="advertiserId")
    advertiser_id_dimension_value: Optional[DimensionValue] = Field(default=None, alias="advertiserIdDimensionValue")
    attribution_enabled: Optional[StrictBool] = Field(default=None, description="Whether the activity is enabled for attribution.", alias="attributionEnabled")
    cache_busting_type: Optional[StrictStr] = Field(default=None, description="Code type used for cache busting in the generated tag. Applicable only when floodlightActivityGroupType is COUNTER and countingMethod is STANDARD_COUNTING or UNIQUE_COUNTING.", alias="cacheBustingType")
    counting_method: Optional[StrictStr] = Field(default=None, description="Counting method for conversions for this floodlight activity. This is a required field.", alias="countingMethod")
    default_tags: Optional[List[FloodlightActivityDynamicTag]] = Field(default=None, description="Dynamic floodlight tags.", alias="defaultTags")
    expected_url: Optional[StrictStr] = Field(default=None, description="URL where this tag will be deployed. If specified, must be less than 256 characters long.", alias="expectedUrl")
    floodlight_activity_group_id: Optional[StrictStr] = Field(default=None, description="Floodlight activity group ID of this floodlight activity. This is a required field.", alias="floodlightActivityGroupId")
    floodlight_activity_group_name: Optional[StrictStr] = Field(default=None, description="Name of the associated floodlight activity group. This is a read-only field.", alias="floodlightActivityGroupName")
    floodlight_activity_group_tag_string: Optional[StrictStr] = Field(default=None, description="Tag string of the associated floodlight activity group. This is a read-only field.", alias="floodlightActivityGroupTagString")
    floodlight_activity_group_type: Optional[StrictStr] = Field(default=None, description="Type of the associated floodlight activity group. This is a read-only field.", alias="floodlightActivityGroupType")
    floodlight_configuration_id: Optional[StrictStr] = Field(default=None, description="Floodlight configuration ID of this floodlight activity. If this field is left blank, the value will be copied over either from the activity group's floodlight configuration or from the existing activity's floodlight configuration.", alias="floodlightConfigurationId")
    floodlight_configuration_id_dimension_value: Optional[DimensionValue] = Field(default=None, alias="floodlightConfigurationIdDimensionValue")
    floodlight_tag_type: Optional[StrictStr] = Field(default=None, description="The type of Floodlight tag this activity will generate. This is a required field.", alias="floodlightTagType")
    id: Optional[StrictStr] = Field(default=None, description="ID of this floodlight activity. This is a read-only, auto-generated field.")
    id_dimension_value: Optional[DimensionValue] = Field(default=None, alias="idDimensionValue")
    kind: Optional[StrictStr] = Field(default=None, description="Identifies what kind of resource this is. Value: the fixed string \"dfareporting#floodlightActivity\".")
    name: Optional[StrictStr] = Field(default=None, description="Name of this floodlight activity. This is a required field. Must be less than 129 characters long and cannot contain quotes.")
    notes: Optional[StrictStr] = Field(default=None, description="General notes or implementation instructions for the tag.")
    publisher_tags: Optional[List[FloodlightActivityPublisherDynamicTag]] = Field(default=None, description="Publisher dynamic floodlight tags.", alias="publisherTags")
    secure: Optional[StrictBool] = Field(default=None, description="Whether this tag should use SSL.")
    ssl_compliant: Optional[StrictBool] = Field(default=None, description="Whether the floodlight activity is SSL-compliant. This is a read-only field, its value detected by the system from the floodlight tags.", alias="sslCompliant")
    ssl_required: Optional[StrictBool] = Field(default=None, description="Whether this floodlight activity must be SSL-compliant.", alias="sslRequired")
    status: Optional[StrictStr] = Field(default=None, description="The status of the activity. This can only be set to ACTIVE or ARCHIVED_AND_DISABLED. The ARCHIVED status is no longer supported and cannot be set for Floodlight activities. The DISABLED_POLICY status indicates that a Floodlight activity is violating Google policy. Contact your account manager for more information.")
    subaccount_id: Optional[StrictStr] = Field(default=None, description="Subaccount ID of this floodlight activity. This is a read-only field that can be left blank.", alias="subaccountId")
    tag_format: Optional[StrictStr] = Field(default=None, description="Tag format type for the floodlight activity. If left blank, the tag format will default to HTML.", alias="tagFormat")
    tag_string: Optional[StrictStr] = Field(default=None, description="Value of the cat= parameter in the floodlight tag, which the ad servers use to identify the activity. This is optional: if empty, a new tag string will be generated for you. This string must be 1 to 8 characters long, with valid characters being a-z0-9[ _ ]. This tag string must also be unique among activities of the same activity group. This field is read-only after insertion.", alias="tagString")
    user_defined_variable_types: Optional[List[StrictStr]] = Field(default=None, description="List of the user-defined variables used by this conversion tag. These map to the \"u[1-100]=\" in the tags. Each of these can have a user defined type. Acceptable values are U1 to U100, inclusive. ", alias="userDefinedVariableTypes")
    __properties: ClassVar[List[str]] = ["accountId", "advertiserId", "advertiserIdDimensionValue", "attributionEnabled", "cacheBustingType", "countingMethod", "defaultTags", "expectedUrl", "floodlightActivityGroupId", "floodlightActivityGroupName", "floodlightActivityGroupTagString", "floodlightActivityGroupType", "floodlightConfigurationId", "floodlightConfigurationIdDimensionValue", "floodlightTagType", "id", "idDimensionValue", "kind", "name", "notes", "publisherTags", "secure", "sslCompliant", "sslRequired", "status", "subaccountId", "tagFormat", "tagString", "userDefinedVariableTypes"]

    @field_validator('cache_busting_type')
    def cache_busting_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['JAVASCRIPT', 'ACTIVE_SERVER_PAGE', 'JSP', 'PHP', 'COLD_FUSION']):
            raise ValueError("must be one of enum values ('JAVASCRIPT', 'ACTIVE_SERVER_PAGE', 'JSP', 'PHP', 'COLD_FUSION')")
        return value

    @field_validator('counting_method')
    def counting_method_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['STANDARD_COUNTING', 'UNIQUE_COUNTING', 'SESSION_COUNTING', 'TRANSACTIONS_COUNTING', 'ITEMS_SOLD_COUNTING']):
            raise ValueError("must be one of enum values ('STANDARD_COUNTING', 'UNIQUE_COUNTING', 'SESSION_COUNTING', 'TRANSACTIONS_COUNTING', 'ITEMS_SOLD_COUNTING')")
        return value

    @field_validator('floodlight_activity_group_type')
    def floodlight_activity_group_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['COUNTER', 'SALE']):
            raise ValueError("must be one of enum values ('COUNTER', 'SALE')")
        return value

    @field_validator('floodlight_tag_type')
    def floodlight_tag_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['IFRAME', 'IMAGE', 'GLOBAL_SITE_TAG']):
            raise ValueError("must be one of enum values ('IFRAME', 'IMAGE', 'GLOBAL_SITE_TAG')")
        return value

    @field_validator('status')
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['ACTIVE', 'ARCHIVED_AND_DISABLED', 'ARCHIVED', 'DISABLED_POLICY']):
            raise ValueError("must be one of enum values ('ACTIVE', 'ARCHIVED_AND_DISABLED', 'ARCHIVED', 'DISABLED_POLICY')")
        return value

    @field_validator('tag_format')
    def tag_format_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['HTML', 'XHTML']):
            raise ValueError("must be one of enum values ('HTML', 'XHTML')")
        return value

    @field_validator('user_defined_variable_types')
    def user_defined_variable_types_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        for i in value:
            if i not in set(['U1', 'U2', 'U3', 'U4', 'U5', 'U6', 'U7', 'U8', 'U9', 'U10', 'U11', 'U12', 'U13', 'U14', 'U15', 'U16', 'U17', 'U18', 'U19', 'U20', 'U21', 'U22', 'U23', 'U24', 'U25', 'U26', 'U27', 'U28', 'U29', 'U30', 'U31', 'U32', 'U33', 'U34', 'U35', 'U36', 'U37', 'U38', 'U39', 'U40', 'U41', 'U42', 'U43', 'U44', 'U45', 'U46', 'U47', 'U48', 'U49', 'U50', 'U51', 'U52', 'U53', 'U54', 'U55', 'U56', 'U57', 'U58', 'U59', 'U60', 'U61', 'U62', 'U63', 'U64', 'U65', 'U66', 'U67', 'U68', 'U69', 'U70', 'U71', 'U72', 'U73', 'U74', 'U75', 'U76', 'U77', 'U78', 'U79', 'U80', 'U81', 'U82', 'U83', 'U84', 'U85', 'U86', 'U87', 'U88', 'U89', 'U90', 'U91', 'U92', 'U93', 'U94', 'U95', 'U96', 'U97', 'U98', 'U99', 'U100']):
                raise ValueError("each list item must be one of ('U1', 'U2', 'U3', 'U4', 'U5', 'U6', 'U7', 'U8', 'U9', 'U10', 'U11', 'U12', 'U13', 'U14', 'U15', 'U16', 'U17', 'U18', 'U19', 'U20', 'U21', 'U22', 'U23', 'U24', 'U25', 'U26', 'U27', 'U28', 'U29', 'U30', 'U31', 'U32', 'U33', 'U34', 'U35', 'U36', 'U37', 'U38', 'U39', 'U40', 'U41', 'U42', 'U43', 'U44', 'U45', 'U46', 'U47', 'U48', 'U49', 'U50', 'U51', 'U52', 'U53', 'U54', 'U55', 'U56', 'U57', 'U58', 'U59', 'U60', 'U61', 'U62', 'U63', 'U64', 'U65', 'U66', 'U67', 'U68', 'U69', 'U70', 'U71', 'U72', 'U73', 'U74', 'U75', 'U76', 'U77', 'U78', 'U79', 'U80', 'U81', 'U82', 'U83', 'U84', 'U85', 'U86', 'U87', 'U88', 'U89', 'U90', 'U91', 'U92', 'U93', 'U94', 'U95', 'U96', 'U97', 'U98', 'U99', 'U100')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of FloodlightActivity from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of advertiser_id_dimension_value
        if self.advertiser_id_dimension_value:
            _dict['advertiserIdDimensionValue'] = self.advertiser_id_dimension_value.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in default_tags (list)
        _items = []
        if self.default_tags:
            for _item_default_tags in self.default_tags:
                if _item_default_tags:
                    _items.append(_item_default_tags.to_dict())
            _dict['defaultTags'] = _items
        # override the default output from pydantic by calling `to_dict()` of floodlight_configuration_id_dimension_value
        if self.floodlight_configuration_id_dimension_value:
            _dict['floodlightConfigurationIdDimensionValue'] = self.floodlight_configuration_id_dimension_value.to_dict()
        # override the default output from pydantic by calling `to_dict()` of id_dimension_value
        if self.id_dimension_value:
            _dict['idDimensionValue'] = self.id_dimension_value.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in publisher_tags (list)
        _items = []
        if self.publisher_tags:
            for _item_publisher_tags in self.publisher_tags:
                if _item_publisher_tags:
                    _items.append(_item_publisher_tags.to_dict())
            _dict['publisherTags'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of FloodlightActivity from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "accountId": obj.get("accountId"),
            "advertiserId": obj.get("advertiserId"),
            "advertiserIdDimensionValue": DimensionValue.from_dict(obj["advertiserIdDimensionValue"]) if obj.get("advertiserIdDimensionValue") is not None else None,
            "attributionEnabled": obj.get("attributionEnabled"),
            "cacheBustingType": obj.get("cacheBustingType"),
            "countingMethod": obj.get("countingMethod"),
            "defaultTags": [FloodlightActivityDynamicTag.from_dict(_item) for _item in obj["defaultTags"]] if obj.get("defaultTags") is not None else None,
            "expectedUrl": obj.get("expectedUrl"),
            "floodlightActivityGroupId": obj.get("floodlightActivityGroupId"),
            "floodlightActivityGroupName": obj.get("floodlightActivityGroupName"),
            "floodlightActivityGroupTagString": obj.get("floodlightActivityGroupTagString"),
            "floodlightActivityGroupType": obj.get("floodlightActivityGroupType"),
            "floodlightConfigurationId": obj.get("floodlightConfigurationId"),
            "floodlightConfigurationIdDimensionValue": DimensionValue.from_dict(obj["floodlightConfigurationIdDimensionValue"]) if obj.get("floodlightConfigurationIdDimensionValue") is not None else None,
            "floodlightTagType": obj.get("floodlightTagType"),
            "id": obj.get("id"),
            "idDimensionValue": DimensionValue.from_dict(obj["idDimensionValue"]) if obj.get("idDimensionValue") is not None else None,
            "kind": obj.get("kind"),
            "name": obj.get("name"),
            "notes": obj.get("notes"),
            "publisherTags": [FloodlightActivityPublisherDynamicTag.from_dict(_item) for _item in obj["publisherTags"]] if obj.get("publisherTags") is not None else None,
            "secure": obj.get("secure"),
            "sslCompliant": obj.get("sslCompliant"),
            "sslRequired": obj.get("sslRequired"),
            "status": obj.get("status"),
            "subaccountId": obj.get("subaccountId"),
            "tagFormat": obj.get("tagFormat"),
            "tagString": obj.get("tagString"),
            "userDefinedVariableTypes": obj.get("userDefinedVariableTypes")
        })
        return _obj



# coding: utf-8

"""
    Campaign Manager 360 API

    Build applications to efficiently manage large or complex trafficking, reporting, and attribution workflows for Campaign Manager 360.

    The version of the OpenAPI document: v3.4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.dimension_value import DimensionValue
from openapi_client.models.site_contact import SiteContact
from openapi_client.models.site_settings import SiteSettings
from openapi_client.models.site_video_settings import SiteVideoSettings
from typing import Optional, Set
from typing_extensions import Self

class Site(BaseModel):
    """
    Contains properties of a site.
    """ # noqa: E501
    account_id: Optional[StrictStr] = Field(default=None, description="Account ID of this site. This is a read-only field that can be left blank.", alias="accountId")
    approved: Optional[StrictBool] = Field(default=None, description="Whether this site is approved.")
    directory_site_id: Optional[StrictStr] = Field(default=None, description="Directory site associated with this site. This is a required field that is read-only after insertion.", alias="directorySiteId")
    directory_site_id_dimension_value: Optional[DimensionValue] = Field(default=None, alias="directorySiteIdDimensionValue")
    id: Optional[StrictStr] = Field(default=None, description="ID of this site. This is a read-only, auto-generated field.")
    id_dimension_value: Optional[DimensionValue] = Field(default=None, alias="idDimensionValue")
    key_name: Optional[StrictStr] = Field(default=None, description="Key name of this site. This is a read-only, auto-generated field.", alias="keyName")
    kind: Optional[StrictStr] = Field(default=None, description="Identifies what kind of resource this is. Value: the fixed string \"dfareporting#site\".")
    name: Optional[StrictStr] = Field(default=None, description="Name of this site.This is a required field. Must be less than 128 characters long. If this site is under a subaccount, the name must be unique among sites of the same subaccount. Otherwise, this site is a top-level site, and the name must be unique among top-level sites of the same account.")
    site_contacts: Optional[List[SiteContact]] = Field(default=None, description="Site contacts.", alias="siteContacts")
    site_settings: Optional[SiteSettings] = Field(default=None, alias="siteSettings")
    subaccount_id: Optional[StrictStr] = Field(default=None, description="Subaccount ID of this site. This is a read-only field that can be left blank.", alias="subaccountId")
    video_settings: Optional[SiteVideoSettings] = Field(default=None, alias="videoSettings")
    __properties: ClassVar[List[str]] = ["accountId", "approved", "directorySiteId", "directorySiteIdDimensionValue", "id", "idDimensionValue", "keyName", "kind", "name", "siteContacts", "siteSettings", "subaccountId", "videoSettings"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Site from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of directory_site_id_dimension_value
        if self.directory_site_id_dimension_value:
            _dict['directorySiteIdDimensionValue'] = self.directory_site_id_dimension_value.to_dict()
        # override the default output from pydantic by calling `to_dict()` of id_dimension_value
        if self.id_dimension_value:
            _dict['idDimensionValue'] = self.id_dimension_value.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in site_contacts (list)
        _items = []
        if self.site_contacts:
            for _item_site_contacts in self.site_contacts:
                if _item_site_contacts:
                    _items.append(_item_site_contacts.to_dict())
            _dict['siteContacts'] = _items
        # override the default output from pydantic by calling `to_dict()` of site_settings
        if self.site_settings:
            _dict['siteSettings'] = self.site_settings.to_dict()
        # override the default output from pydantic by calling `to_dict()` of video_settings
        if self.video_settings:
            _dict['videoSettings'] = self.video_settings.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Site from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "accountId": obj.get("accountId"),
            "approved": obj.get("approved"),
            "directorySiteId": obj.get("directorySiteId"),
            "directorySiteIdDimensionValue": DimensionValue.from_dict(obj["directorySiteIdDimensionValue"]) if obj.get("directorySiteIdDimensionValue") is not None else None,
            "id": obj.get("id"),
            "idDimensionValue": DimensionValue.from_dict(obj["idDimensionValue"]) if obj.get("idDimensionValue") is not None else None,
            "keyName": obj.get("keyName"),
            "kind": obj.get("kind"),
            "name": obj.get("name"),
            "siteContacts": [SiteContact.from_dict(_item) for _item in obj["siteContacts"]] if obj.get("siteContacts") is not None else None,
            "siteSettings": SiteSettings.from_dict(obj["siteSettings"]) if obj.get("siteSettings") is not None else None,
            "subaccountId": obj.get("subaccountId"),
            "videoSettings": SiteVideoSettings.from_dict(obj["videoSettings"]) if obj.get("videoSettings") is not None else None
        })
        return _obj



# coding: utf-8

"""
    Campaign Manager 360 API

    Build applications to efficiently manage large or complex trafficking, reporting, and attribution workflows for Campaign Manager 360.

    The version of the OpenAPI document: v3.4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.city import City
from openapi_client.models.country import Country
from openapi_client.models.metro import Metro
from openapi_client.models.postal_code import PostalCode
from openapi_client.models.region import Region
from typing import Optional, Set
from typing_extensions import Self

class GeoTargeting(BaseModel):
    """
    Geographical Targeting.
    """ # noqa: E501
    cities: Optional[List[City]] = Field(default=None, description="Cities to be targeted. For each city only dartId is required. The other fields are populated automatically when the ad is inserted or updated. If targeting a city, do not target or exclude the country of the city, and do not target the metro or region of the city.")
    countries: Optional[List[Country]] = Field(default=None, description="Countries to be targeted or excluded from targeting, depending on the setting of the excludeCountries field. For each country only dartId is required. The other fields are populated automatically when the ad is inserted or updated. If targeting or excluding a country, do not target regions, cities, metros, or postal codes in the same country.")
    exclude_countries: Optional[StrictBool] = Field(default=None, description="Whether or not to exclude the countries in the countries field from targeting. If false, the countries field refers to countries which will be targeted by the ad.", alias="excludeCountries")
    metros: Optional[List[Metro]] = Field(default=None, description="Metros to be targeted. For each metro only dmaId is required. The other fields are populated automatically when the ad is inserted or updated. If targeting a metro, do not target or exclude the country of the metro.")
    postal_codes: Optional[List[PostalCode]] = Field(default=None, description="Postal codes to be targeted. For each postal code only id is required. The other fields are populated automatically when the ad is inserted or updated. If targeting a postal code, do not target or exclude the country of the postal code.", alias="postalCodes")
    regions: Optional[List[Region]] = Field(default=None, description="Regions to be targeted. For each region only dartId is required. The other fields are populated automatically when the ad is inserted or updated. If targeting a region, do not target or exclude the country of the region.")
    __properties: ClassVar[List[str]] = ["cities", "countries", "excludeCountries", "metros", "postalCodes", "regions"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GeoTargeting from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in cities (list)
        _items = []
        if self.cities:
            for _item_cities in self.cities:
                if _item_cities:
                    _items.append(_item_cities.to_dict())
            _dict['cities'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in countries (list)
        _items = []
        if self.countries:
            for _item_countries in self.countries:
                if _item_countries:
                    _items.append(_item_countries.to_dict())
            _dict['countries'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in metros (list)
        _items = []
        if self.metros:
            for _item_metros in self.metros:
                if _item_metros:
                    _items.append(_item_metros.to_dict())
            _dict['metros'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in postal_codes (list)
        _items = []
        if self.postal_codes:
            for _item_postal_codes in self.postal_codes:
                if _item_postal_codes:
                    _items.append(_item_postal_codes.to_dict())
            _dict['postalCodes'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in regions (list)
        _items = []
        if self.regions:
            for _item_regions in self.regions:
                if _item_regions:
                    _items.append(_item_regions.to_dict())
            _dict['regions'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GeoTargeting from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "cities": [City.from_dict(_item) for _item in obj["cities"]] if obj.get("cities") is not None else None,
            "countries": [Country.from_dict(_item) for _item in obj["countries"]] if obj.get("countries") is not None else None,
            "excludeCountries": obj.get("excludeCountries"),
            "metros": [Metro.from_dict(_item) for _item in obj["metros"]] if obj.get("metros") is not None else None,
            "postalCodes": [PostalCode.from_dict(_item) for _item in obj["postalCodes"]] if obj.get("postalCodes") is not None else None,
            "regions": [Region.from_dict(_item) for _item in obj["regions"]] if obj.get("regions") is not None else None
        })
        return _obj



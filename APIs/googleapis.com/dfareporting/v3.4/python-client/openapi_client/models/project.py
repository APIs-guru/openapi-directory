# coding: utf-8

"""
    Campaign Manager 360 API

    Build applications to efficiently manage large or complex trafficking, reporting, and attribution workflows for Campaign Manager 360.

    The version of the OpenAPI document: v3.4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date
from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.last_modified_info import LastModifiedInfo
from typing import Optional, Set
from typing_extensions import Self

class Project(BaseModel):
    """
    Contains properties of a Planning project.
    """ # noqa: E501
    account_id: Optional[StrictStr] = Field(default=None, description="Account ID of this project.", alias="accountId")
    advertiser_id: Optional[StrictStr] = Field(default=None, description="Advertiser ID of this project.", alias="advertiserId")
    audience_age_group: Optional[StrictStr] = Field(default=None, description="Audience age group of this project.", alias="audienceAgeGroup")
    audience_gender: Optional[StrictStr] = Field(default=None, description="Audience gender of this project.", alias="audienceGender")
    budget: Optional[StrictStr] = Field(default=None, description="Budget of this project in the currency specified by the current account. The value stored in this field represents only the non-fractional amount. For example, for USD, the smallest value that can be represented by this field is 1 US dollar.")
    client_billing_code: Optional[StrictStr] = Field(default=None, description="Client billing code of this project.", alias="clientBillingCode")
    client_name: Optional[StrictStr] = Field(default=None, description="Name of the project client.", alias="clientName")
    end_date: Optional[date] = Field(default=None, alias="endDate")
    id: Optional[StrictStr] = Field(default=None, description="ID of this project. This is a read-only, auto-generated field.")
    kind: Optional[StrictStr] = Field(default=None, description="Identifies what kind of resource this is. Value: the fixed string \"dfareporting#project\".")
    last_modified_info: Optional[LastModifiedInfo] = Field(default=None, alias="lastModifiedInfo")
    name: Optional[StrictStr] = Field(default=None, description="Name of this project.")
    overview: Optional[StrictStr] = Field(default=None, description="Overview of this project.")
    start_date: Optional[date] = Field(default=None, alias="startDate")
    subaccount_id: Optional[StrictStr] = Field(default=None, description="Subaccount ID of this project.", alias="subaccountId")
    target_clicks: Optional[StrictStr] = Field(default=None, description="Number of clicks that the advertiser is targeting.", alias="targetClicks")
    target_conversions: Optional[StrictStr] = Field(default=None, description="Number of conversions that the advertiser is targeting.", alias="targetConversions")
    target_cpa_nanos: Optional[StrictStr] = Field(default=None, description="CPA that the advertiser is targeting.", alias="targetCpaNanos")
    target_cpc_nanos: Optional[StrictStr] = Field(default=None, description="CPC that the advertiser is targeting.", alias="targetCpcNanos")
    target_cpm_active_view_nanos: Optional[StrictStr] = Field(default=None, description="vCPM from Active View that the advertiser is targeting.", alias="targetCpmActiveViewNanos")
    target_cpm_nanos: Optional[StrictStr] = Field(default=None, description="CPM that the advertiser is targeting.", alias="targetCpmNanos")
    target_impressions: Optional[StrictStr] = Field(default=None, description="Number of impressions that the advertiser is targeting.", alias="targetImpressions")
    __properties: ClassVar[List[str]] = ["accountId", "advertiserId", "audienceAgeGroup", "audienceGender", "budget", "clientBillingCode", "clientName", "endDate", "id", "kind", "lastModifiedInfo", "name", "overview", "startDate", "subaccountId", "targetClicks", "targetConversions", "targetCpaNanos", "targetCpcNanos", "targetCpmActiveViewNanos", "targetCpmNanos", "targetImpressions"]

    @field_validator('audience_age_group')
    def audience_age_group_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['PLANNING_AUDIENCE_AGE_18_24', 'PLANNING_AUDIENCE_AGE_25_34', 'PLANNING_AUDIENCE_AGE_35_44', 'PLANNING_AUDIENCE_AGE_45_54', 'PLANNING_AUDIENCE_AGE_55_64', 'PLANNING_AUDIENCE_AGE_65_OR_MORE', 'PLANNING_AUDIENCE_AGE_UNKNOWN']):
            raise ValueError("must be one of enum values ('PLANNING_AUDIENCE_AGE_18_24', 'PLANNING_AUDIENCE_AGE_25_34', 'PLANNING_AUDIENCE_AGE_35_44', 'PLANNING_AUDIENCE_AGE_45_54', 'PLANNING_AUDIENCE_AGE_55_64', 'PLANNING_AUDIENCE_AGE_65_OR_MORE', 'PLANNING_AUDIENCE_AGE_UNKNOWN')")
        return value

    @field_validator('audience_gender')
    def audience_gender_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['PLANNING_AUDIENCE_GENDER_MALE', 'PLANNING_AUDIENCE_GENDER_FEMALE']):
            raise ValueError("must be one of enum values ('PLANNING_AUDIENCE_GENDER_MALE', 'PLANNING_AUDIENCE_GENDER_FEMALE')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Project from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of last_modified_info
        if self.last_modified_info:
            _dict['lastModifiedInfo'] = self.last_modified_info.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Project from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "accountId": obj.get("accountId"),
            "advertiserId": obj.get("advertiserId"),
            "audienceAgeGroup": obj.get("audienceAgeGroup"),
            "audienceGender": obj.get("audienceGender"),
            "budget": obj.get("budget"),
            "clientBillingCode": obj.get("clientBillingCode"),
            "clientName": obj.get("clientName"),
            "endDate": obj.get("endDate"),
            "id": obj.get("id"),
            "kind": obj.get("kind"),
            "lastModifiedInfo": LastModifiedInfo.from_dict(obj["lastModifiedInfo"]) if obj.get("lastModifiedInfo") is not None else None,
            "name": obj.get("name"),
            "overview": obj.get("overview"),
            "startDate": obj.get("startDate"),
            "subaccountId": obj.get("subaccountId"),
            "targetClicks": obj.get("targetClicks"),
            "targetConversions": obj.get("targetConversions"),
            "targetCpaNanos": obj.get("targetCpaNanos"),
            "targetCpcNanos": obj.get("targetCpcNanos"),
            "targetCpmActiveViewNanos": obj.get("targetCpmActiveViewNanos"),
            "targetCpmNanos": obj.get("targetCpmNanos"),
            "targetImpressions": obj.get("targetImpressions")
        })
        return _obj



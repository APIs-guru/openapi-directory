# coding: utf-8

"""
    Campaign Manager 360 API

    Build applications to efficiently manage large or complex trafficking, reporting, and attribution workflows for Campaign Manager 360.

    The version of the OpenAPI document: v3.5
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.offset_position import OffsetPosition
from openapi_client.models.size import Size
from typing import Optional, Set
from typing_extensions import Self

class PopupWindowProperties(BaseModel):
    """
    Popup Window Properties.
    """ # noqa: E501
    dimension: Optional[Size] = None
    offset: Optional[OffsetPosition] = None
    position_type: Optional[StrictStr] = Field(default=None, description="Popup window position either centered or at specific coordinate.", alias="positionType")
    show_address_bar: Optional[StrictBool] = Field(default=None, description="Whether to display the browser address bar.", alias="showAddressBar")
    show_menu_bar: Optional[StrictBool] = Field(default=None, description="Whether to display the browser menu bar.", alias="showMenuBar")
    show_scroll_bar: Optional[StrictBool] = Field(default=None, description="Whether to display the browser scroll bar.", alias="showScrollBar")
    show_status_bar: Optional[StrictBool] = Field(default=None, description="Whether to display the browser status bar.", alias="showStatusBar")
    show_tool_bar: Optional[StrictBool] = Field(default=None, description="Whether to display the browser tool bar.", alias="showToolBar")
    title: Optional[StrictStr] = Field(default=None, description="Title of popup window.")
    __properties: ClassVar[List[str]] = ["dimension", "offset", "positionType", "showAddressBar", "showMenuBar", "showScrollBar", "showStatusBar", "showToolBar", "title"]

    @field_validator('position_type')
    def position_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['CENTER', 'COORDINATES']):
            raise ValueError("must be one of enum values ('CENTER', 'COORDINATES')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PopupWindowProperties from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of dimension
        if self.dimension:
            _dict['dimension'] = self.dimension.to_dict()
        # override the default output from pydantic by calling `to_dict()` of offset
        if self.offset:
            _dict['offset'] = self.offset.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PopupWindowProperties from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "dimension": Size.from_dict(obj["dimension"]) if obj.get("dimension") is not None else None,
            "offset": OffsetPosition.from_dict(obj["offset"]) if obj.get("offset") is not None else None,
            "positionType": obj.get("positionType"),
            "showAddressBar": obj.get("showAddressBar"),
            "showMenuBar": obj.get("showMenuBar"),
            "showScrollBar": obj.get("showScrollBar"),
            "showStatusBar": obj.get("showStatusBar"),
            "showToolBar": obj.get("showToolBar"),
            "title": obj.get("title")
        })
        return _obj



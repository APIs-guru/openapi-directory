# coding: utf-8

"""
    Game Services API

    Deploy and manage infrastructure for global multiplayer gaming experiences.

    The version of the OpenAPI document: v1beta
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.log_config import LogConfig

class TestLogConfig(unittest.TestCase):
    """LogConfig unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> LogConfig:
        """Test LogConfig
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `LogConfig`
        """
        model = LogConfig()
        if include_optional:
            return LogConfig(
                cloud_audit = openapi_client.models.cloud_audit_options.CloudAuditOptions(
                    authorization_logging_options = openapi_client.models.authorization_logging_options.AuthorizationLoggingOptions(
                        permission_type = 'PERMISSION_TYPE_UNSPECIFIED', ), 
                    log_name = 'UNSPECIFIED_LOG_NAME', ),
                counter = openapi_client.models.counter_options.CounterOptions(
                    custom_fields = [
                        openapi_client.models.custom_field.CustomField(
                            name = '', 
                            value = '', )
                        ], 
                    field = '', 
                    metric = '', ),
                data_access = openapi_client.models.data_access_options.DataAccessOptions(
                    log_mode = 'LOG_MODE_UNSPECIFIED', )
            )
        else:
            return LogConfig(
        )
        """

    def testLogConfig(self):
        """Test LogConfig"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

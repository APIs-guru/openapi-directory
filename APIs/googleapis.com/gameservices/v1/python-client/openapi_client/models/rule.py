# coding: utf-8

"""
    Game Services API

    Deploy and manage infrastructure for global multiplayer gaming experiences.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.condition import Condition
from openapi_client.models.log_config import LogConfig
from typing import Optional, Set
from typing_extensions import Self

class Rule(BaseModel):
    """
    A rule to be applied in a Policy.
    """ # noqa: E501
    action: Optional[StrictStr] = Field(default=None, description="Required")
    conditions: Optional[List[Condition]] = Field(default=None, description="Additional restrictions that must be met. All conditions must pass for the rule to match.")
    description: Optional[StrictStr] = Field(default=None, description="Human-readable description of the rule.")
    var_in: Optional[List[StrictStr]] = Field(default=None, description="If one or more 'in' clauses are specified, the rule matches if the PRINCIPAL/AUTHORITY_SELECTOR is in at least one of these entries.", alias="in")
    log_config: Optional[List[LogConfig]] = Field(default=None, description="The config returned to callers of CheckPolicy for any entries that match the LOG action.", alias="logConfig")
    not_in: Optional[List[StrictStr]] = Field(default=None, description="If one or more 'not_in' clauses are specified, the rule matches if the PRINCIPAL/AUTHORITY_SELECTOR is in none of the entries. The format for in and not_in entries can be found at in the Local IAM documentation (see go/local-iam#features).", alias="notIn")
    permissions: Optional[List[StrictStr]] = Field(default=None, description="A permission is a string of form '..' (e.g., 'storage.buckets.list'). A value of '*' matches all permissions, and a verb part of '*' (e.g., 'storage.buckets.*') matches all verbs.")
    __properties: ClassVar[List[str]] = ["action", "conditions", "description", "in", "logConfig", "notIn", "permissions"]

    @field_validator('action')
    def action_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['NO_ACTION', 'ALLOW', 'ALLOW_WITH_LOG', 'DENY', 'DENY_WITH_LOG', 'LOG']):
            raise ValueError("must be one of enum values ('NO_ACTION', 'ALLOW', 'ALLOW_WITH_LOG', 'DENY', 'DENY_WITH_LOG', 'LOG')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Rule from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in conditions (list)
        _items = []
        if self.conditions:
            for _item_conditions in self.conditions:
                if _item_conditions:
                    _items.append(_item_conditions.to_dict())
            _dict['conditions'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in log_config (list)
        _items = []
        if self.log_config:
            for _item_log_config in self.log_config:
                if _item_log_config:
                    _items.append(_item_log_config.to_dict())
            _dict['logConfig'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Rule from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "action": obj.get("action"),
            "conditions": [Condition.from_dict(_item) for _item in obj["conditions"]] if obj.get("conditions") is not None else None,
            "description": obj.get("description"),
            "in": obj.get("in"),
            "logConfig": [LogConfig.from_dict(_item) for _item in obj["logConfig"]] if obj.get("logConfig") is not None else None,
            "notIn": obj.get("notIn"),
            "permissions": obj.get("permissions")
        })
        return _obj



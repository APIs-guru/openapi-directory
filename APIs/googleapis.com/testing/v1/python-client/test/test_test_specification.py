# coding: utf-8

"""
    Cloud Testing API

    Allows developers to run automated tests for their mobile applications on Google infrastructure.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.test_specification import TestSpecification

class TestTestSpecification(unittest.TestCase):
    """TestSpecification unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> TestSpecification:
        """Test TestSpecification
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `TestSpecification`
        """
        model = TestSpecification()
        if include_optional:
            return TestSpecification(
                android_instrumentation_test = openapi_client.models.android_instrumentation_test.AndroidInstrumentationTest(
                    app_apk = openapi_client.models.file_reference.FileReference(
                        gcs_path = '', ), 
                    app_bundle = openapi_client.models.app_bundle.AppBundle(
                        bundle_location = openapi_client.models.file_reference.FileReference(
                            gcs_path = '', ), ), 
                    app_package_id = '', 
                    orchestrator_option = 'ORCHESTRATOR_OPTION_UNSPECIFIED', 
                    sharding_option = openapi_client.models.sharding_option.ShardingOption(
                        manual_sharding = openapi_client.models.manual_sharding.ManualSharding(
                            test_targets_for_shard = [
                                openapi_client.models.test_targets_for_shard.TestTargetsForShard(
                                    test_targets = [
                                        ''
                                        ], )
                                ], ), 
                        smart_sharding = openapi_client.models.smart_sharding.SmartSharding(
                            targeted_shard_duration = '', ), 
                        uniform_sharding = openapi_client.models.uniform_sharding.UniformSharding(
                            num_shards = 56, ), ), 
                    test_apk = , 
                    test_package_id = '', 
                    test_runner_class = '', 
                    test_targets = [
                        ''
                        ], ),
                android_robo_test = openapi_client.models.android_robo_test.AndroidRoboTest(
                    app_apk = openapi_client.models.file_reference.FileReference(
                        gcs_path = '', ), 
                    app_bundle = openapi_client.models.app_bundle.AppBundle(
                        bundle_location = openapi_client.models.file_reference.FileReference(
                            gcs_path = '', ), ), 
                    app_initial_activity = '', 
                    app_package_id = '', 
                    max_depth = 56, 
                    max_steps = 56, 
                    robo_directives = [
                        openapi_client.models.robo_directive.RoboDirective(
                            action_type = 'ACTION_TYPE_UNSPECIFIED', 
                            input_text = '', 
                            resource_name = '', )
                        ], 
                    robo_mode = 'ROBO_MODE_UNSPECIFIED', 
                    robo_script = , 
                    starting_intents = [
                        openapi_client.models.robo_starting_intent.RoboStartingIntent(
                            launcher_activity = openapi_client.models.launcher_activity_intent.LauncherActivityIntent(), 
                            no_activity = openapi_client.models.no_activity_intent.NoActivityIntent(), 
                            start_activity = openapi_client.models.start_activity_intent.StartActivityIntent(
                                action = '', 
                                categories = [
                                    ''
                                    ], 
                                uri = '', ), 
                            timeout = '', )
                        ], ),
                android_test_loop = openapi_client.models.android_test_loop.AndroidTestLoop(
                    app_apk = openapi_client.models.file_reference.FileReference(
                        gcs_path = '', ), 
                    app_bundle = openapi_client.models.app_bundle.AppBundle(
                        bundle_location = openapi_client.models.file_reference.FileReference(
                            gcs_path = '', ), ), 
                    app_package_id = '', 
                    scenario_labels = [
                        ''
                        ], 
                    scenarios = [
                        56
                        ], ),
                disable_performance_metrics = True,
                disable_video_recording = True,
                ios_robo_test = openapi_client.models.ios_robo_test.IosRoboTest(
                    app_bundle_id = '', 
                    app_ipa = openapi_client.models.file_reference.FileReference(
                        gcs_path = '', ), 
                    robo_script = openapi_client.models.file_reference.FileReference(
                        gcs_path = '', ), ),
                ios_test_loop = openapi_client.models.ios_test_loop.IosTestLoop(
                    app_bundle_id = '', 
                    app_ipa = openapi_client.models.file_reference.FileReference(
                        gcs_path = '', ), 
                    scenarios = [
                        56
                        ], ),
                ios_test_setup = openapi_client.models.ios_test_setup.IosTestSetup(
                    additional_ipas = [
                        openapi_client.models.file_reference.FileReference(
                            gcs_path = '', )
                        ], 
                    network_profile = '', 
                    pull_directories = [
                        openapi_client.models.ios_device_file.IosDeviceFile(
                            bundle_id = '', 
                            content = openapi_client.models.file_reference.FileReference(
                                gcs_path = '', ), 
                            device_path = '', )
                        ], 
                    push_files = [
                        openapi_client.models.ios_device_file.IosDeviceFile(
                            bundle_id = '', 
                            device_path = '', )
                        ], ),
                ios_xc_test = openapi_client.models.ios_xc_test.IosXcTest(
                    app_bundle_id = '', 
                    test_special_entitlements = True, 
                    tests_zip = openapi_client.models.file_reference.FileReference(
                        gcs_path = '', ), 
                    xcode_version = '', 
                    xctestrun = openapi_client.models.file_reference.FileReference(
                        gcs_path = '', ), ),
                test_setup = openapi_client.models.test_setup.TestSetup(
                    account = openapi_client.models.account.Account(
                        google_auto = openapi_client.models.google_auto.googleAuto(), ), 
                    additional_apks = [
                        openapi_client.models.apk.Apk(
                            location = openapi_client.models.file_reference.FileReference(
                                gcs_path = '', ), 
                            package_name = '', )
                        ], 
                    directories_to_pull = [
                        ''
                        ], 
                    dont_autogrant_permissions = True, 
                    environment_variables = [
                        openapi_client.models.environment_variable.EnvironmentVariable(
                            key = '', 
                            value = '', )
                        ], 
                    files_to_push = [
                        openapi_client.models.device_file.DeviceFile(
                            obb_file = openapi_client.models.obb_file.ObbFile(
                                obb = openapi_client.models.file_reference.FileReference(
                                    gcs_path = '', ), 
                                obb_file_name = '', ), 
                            regular_file = openapi_client.models.regular_file.RegularFile(
                                content = , 
                                device_path = '', ), )
                        ], 
                    initial_setup_apks = [
                        openapi_client.models.apk.Apk(
                            package_name = '', )
                        ], 
                    network_profile = '', 
                    systrace = openapi_client.models.systrace_setup.SystraceSetup(
                        duration_seconds = 56, ), ),
                test_timeout = ''
            )
        else:
            return TestSpecification(
        )
        """

    def testTestSpecification(self):
        """Test TestSpecification"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

# coding: utf-8

"""
    Cloud Testing API

    Allows developers to run automated tests for their mobile applications on Google infrastructure.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.test_execution import TestExecution

class TestTestExecution(unittest.TestCase):
    """TestExecution unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> TestExecution:
        """Test TestExecution
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `TestExecution`
        """
        model = TestExecution()
        if include_optional:
            return TestExecution(
                environment = openapi_client.models.environment.Environment(
                    android_device = openapi_client.models.android_device.AndroidDevice(
                        android_model_id = '', 
                        android_version_id = '', 
                        locale = '', 
                        orientation = '', ), 
                    ios_device = openapi_client.models.ios_device.IosDevice(
                        ios_model_id = '', 
                        ios_version_id = '', 
                        locale = '', 
                        orientation = '', ), ),
                id = '',
                matrix_id = '',
                project_id = '',
                shard = openapi_client.models.shard.Shard(
                    estimated_shard_duration = '', 
                    num_shards = 56, 
                    shard_index = 56, 
                    test_targets_for_shard = openapi_client.models.test_targets_for_shard.TestTargetsForShard(
                        test_targets = [
                            ''
                            ], ), ),
                state = 'TEST_STATE_UNSPECIFIED',
                test_details = openapi_client.models.test_details.TestDetails(
                    error_message = '', 
                    progress_messages = [
                        ''
                        ], ),
                test_specification = openapi_client.models.test_specification.TestSpecification(
                    android_instrumentation_test = openapi_client.models.android_instrumentation_test.AndroidInstrumentationTest(
                        app_apk = openapi_client.models.file_reference.FileReference(
                            gcs_path = '', ), 
                        app_bundle = openapi_client.models.app_bundle.AppBundle(
                            bundle_location = openapi_client.models.file_reference.FileReference(
                                gcs_path = '', ), ), 
                        app_package_id = '', 
                        orchestrator_option = 'ORCHESTRATOR_OPTION_UNSPECIFIED', 
                        sharding_option = openapi_client.models.sharding_option.ShardingOption(
                            manual_sharding = openapi_client.models.manual_sharding.ManualSharding(
                                test_targets_for_shard = [
                                    openapi_client.models.test_targets_for_shard.TestTargetsForShard(
                                        test_targets = [
                                            ''
                                            ], )
                                    ], ), 
                            smart_sharding = openapi_client.models.smart_sharding.SmartSharding(
                                targeted_shard_duration = '', ), 
                            uniform_sharding = openapi_client.models.uniform_sharding.UniformSharding(
                                num_shards = 56, ), ), 
                        test_apk = , 
                        test_package_id = '', 
                        test_runner_class = '', 
                        test_targets = [
                            ''
                            ], ), 
                    android_robo_test = openapi_client.models.android_robo_test.AndroidRoboTest(
                        app_initial_activity = '', 
                        app_package_id = '', 
                        max_depth = 56, 
                        max_steps = 56, 
                        robo_directives = [
                            openapi_client.models.robo_directive.RoboDirective(
                                action_type = 'ACTION_TYPE_UNSPECIFIED', 
                                input_text = '', 
                                resource_name = '', )
                            ], 
                        robo_mode = 'ROBO_MODE_UNSPECIFIED', 
                        robo_script = , 
                        starting_intents = [
                            openapi_client.models.robo_starting_intent.RoboStartingIntent(
                                launcher_activity = openapi_client.models.launcher_activity_intent.LauncherActivityIntent(), 
                                no_activity = openapi_client.models.no_activity_intent.NoActivityIntent(), 
                                start_activity = openapi_client.models.start_activity_intent.StartActivityIntent(
                                    action = '', 
                                    categories = [
                                        ''
                                        ], 
                                    uri = '', ), 
                                timeout = '', )
                            ], ), 
                    android_test_loop = openapi_client.models.android_test_loop.AndroidTestLoop(
                        app_package_id = '', 
                        scenario_labels = [
                            ''
                            ], 
                        scenarios = [
                            56
                            ], ), 
                    disable_performance_metrics = True, 
                    disable_video_recording = True, 
                    ios_robo_test = openapi_client.models.ios_robo_test.IosRoboTest(
                        app_bundle_id = '', 
                        app_ipa = , ), 
                    ios_test_loop = openapi_client.models.ios_test_loop.IosTestLoop(
                        app_bundle_id = '', ), 
                    ios_test_setup = openapi_client.models.ios_test_setup.IosTestSetup(
                        additional_ipas = [
                            
                            ], 
                        network_profile = '', 
                        pull_directories = [
                            openapi_client.models.ios_device_file.IosDeviceFile(
                                bundle_id = '', 
                                content = , 
                                device_path = '', )
                            ], 
                        push_files = [
                            openapi_client.models.ios_device_file.IosDeviceFile(
                                bundle_id = '', 
                                device_path = '', )
                            ], ), 
                    ios_xc_test = openapi_client.models.ios_xc_test.IosXcTest(
                        app_bundle_id = '', 
                        test_special_entitlements = True, 
                        tests_zip = , 
                        xcode_version = '', 
                        xctestrun = , ), 
                    test_setup = openapi_client.models.test_setup.TestSetup(
                        account = openapi_client.models.account.Account(
                            google_auto = openapi_client.models.google_auto.googleAuto(), ), 
                        additional_apks = [
                            openapi_client.models.apk.Apk(
                                location = , 
                                package_name = '', )
                            ], 
                        directories_to_pull = [
                            ''
                            ], 
                        dont_autogrant_permissions = True, 
                        environment_variables = [
                            openapi_client.models.environment_variable.EnvironmentVariable(
                                key = '', 
                                value = '', )
                            ], 
                        files_to_push = [
                            openapi_client.models.device_file.DeviceFile(
                                obb_file = openapi_client.models.obb_file.ObbFile(
                                    obb = , 
                                    obb_file_name = '', ), 
                                regular_file = openapi_client.models.regular_file.RegularFile(
                                    device_path = '', ), )
                            ], 
                        initial_setup_apks = [
                            openapi_client.models.apk.Apk(
                                package_name = '', )
                            ], 
                        network_profile = '', 
                        systrace = openapi_client.models.systrace_setup.SystraceSetup(
                            duration_seconds = 56, ), ), 
                    test_timeout = '', ),
                timestamp = '',
                tool_results_step = openapi_client.models.tool_results_step.ToolResultsStep(
                    execution_id = '', 
                    history_id = '', 
                    project_id = '', 
                    step_id = '', )
            )
        else:
            return TestExecution(
        )
        """

    def testTestExecution(self):
        """Test TestExecution"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

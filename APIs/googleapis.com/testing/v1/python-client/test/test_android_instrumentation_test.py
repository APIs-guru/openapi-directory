# coding: utf-8

"""
    Cloud Testing API

    Allows developers to run automated tests for their mobile applications on Google infrastructure.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.android_instrumentation_test import AndroidInstrumentationTest

class TestAndroidInstrumentationTest(unittest.TestCase):
    """AndroidInstrumentationTest unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> AndroidInstrumentationTest:
        """Test AndroidInstrumentationTest
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `AndroidInstrumentationTest`
        """
        model = AndroidInstrumentationTest()
        if include_optional:
            return AndroidInstrumentationTest(
                app_apk = openapi_client.models.file_reference.FileReference(
                    gcs_path = '', ),
                app_bundle = openapi_client.models.app_bundle.AppBundle(
                    bundle_location = openapi_client.models.file_reference.FileReference(
                        gcs_path = '', ), ),
                app_package_id = '',
                orchestrator_option = 'ORCHESTRATOR_OPTION_UNSPECIFIED',
                sharding_option = openapi_client.models.sharding_option.ShardingOption(
                    manual_sharding = openapi_client.models.manual_sharding.ManualSharding(
                        test_targets_for_shard = [
                            openapi_client.models.test_targets_for_shard.TestTargetsForShard(
                                test_targets = [
                                    ''
                                    ], )
                            ], ), 
                    smart_sharding = openapi_client.models.smart_sharding.SmartSharding(
                        targeted_shard_duration = '', ), 
                    uniform_sharding = openapi_client.models.uniform_sharding.UniformSharding(
                        num_shards = 56, ), ),
                test_apk = openapi_client.models.file_reference.FileReference(
                    gcs_path = '', ),
                test_package_id = '',
                test_runner_class = '',
                test_targets = [
                    ''
                    ]
            )
        else:
            return AndroidInstrumentationTest(
        )
        """

    def testAndroidInstrumentationTest(self):
        """Test AndroidInstrumentationTest"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

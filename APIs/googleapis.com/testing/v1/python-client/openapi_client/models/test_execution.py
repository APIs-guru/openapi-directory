# coding: utf-8

"""
    Cloud Testing API

    Allows developers to run automated tests for their mobile applications on Google infrastructure.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.environment import Environment
from openapi_client.models.shard import Shard
from openapi_client.models.test_details import TestDetails
from openapi_client.models.test_specification import TestSpecification
from openapi_client.models.tool_results_step import ToolResultsStep
from typing import Optional, Set
from typing_extensions import Self

class TestExecution(BaseModel):
    """
    A single test executed in a single environment.
    """ # noqa: E501
    environment: Optional[Environment] = None
    id: Optional[StrictStr] = Field(default=None, description="Output only. Unique id set by the service.")
    matrix_id: Optional[StrictStr] = Field(default=None, description="Output only. Id of the containing TestMatrix.", alias="matrixId")
    project_id: Optional[StrictStr] = Field(default=None, description="Output only. The cloud project that owns the test execution.", alias="projectId")
    shard: Optional[Shard] = None
    state: Optional[StrictStr] = Field(default=None, description="Output only. Indicates the current progress of the test execution (e.g., FINISHED).")
    test_details: Optional[TestDetails] = Field(default=None, alias="testDetails")
    test_specification: Optional[TestSpecification] = Field(default=None, alias="testSpecification")
    timestamp: Optional[StrictStr] = Field(default=None, description="Output only. The time this test execution was initially created.")
    tool_results_step: Optional[ToolResultsStep] = Field(default=None, alias="toolResultsStep")
    __properties: ClassVar[List[str]] = ["environment", "id", "matrixId", "projectId", "shard", "state", "testDetails", "testSpecification", "timestamp", "toolResultsStep"]

    @field_validator('state')
    def state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['TEST_STATE_UNSPECIFIED', 'VALIDATING', 'PENDING', 'RUNNING', 'FINISHED', 'ERROR', 'UNSUPPORTED_ENVIRONMENT', 'INCOMPATIBLE_ENVIRONMENT', 'INCOMPATIBLE_ARCHITECTURE', 'CANCELLED', 'INVALID']):
            raise ValueError("must be one of enum values ('TEST_STATE_UNSPECIFIED', 'VALIDATING', 'PENDING', 'RUNNING', 'FINISHED', 'ERROR', 'UNSUPPORTED_ENVIRONMENT', 'INCOMPATIBLE_ENVIRONMENT', 'INCOMPATIBLE_ARCHITECTURE', 'CANCELLED', 'INVALID')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of TestExecution from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of environment
        if self.environment:
            _dict['environment'] = self.environment.to_dict()
        # override the default output from pydantic by calling `to_dict()` of shard
        if self.shard:
            _dict['shard'] = self.shard.to_dict()
        # override the default output from pydantic by calling `to_dict()` of test_details
        if self.test_details:
            _dict['testDetails'] = self.test_details.to_dict()
        # override the default output from pydantic by calling `to_dict()` of test_specification
        if self.test_specification:
            _dict['testSpecification'] = self.test_specification.to_dict()
        # override the default output from pydantic by calling `to_dict()` of tool_results_step
        if self.tool_results_step:
            _dict['toolResultsStep'] = self.tool_results_step.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of TestExecution from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "environment": Environment.from_dict(obj["environment"]) if obj.get("environment") is not None else None,
            "id": obj.get("id"),
            "matrixId": obj.get("matrixId"),
            "projectId": obj.get("projectId"),
            "shard": Shard.from_dict(obj["shard"]) if obj.get("shard") is not None else None,
            "state": obj.get("state"),
            "testDetails": TestDetails.from_dict(obj["testDetails"]) if obj.get("testDetails") is not None else None,
            "testSpecification": TestSpecification.from_dict(obj["testSpecification"]) if obj.get("testSpecification") is not None else None,
            "timestamp": obj.get("timestamp"),
            "toolResultsStep": ToolResultsStep.from_dict(obj["toolResultsStep"]) if obj.get("toolResultsStep") is not None else None
        })
        return _obj



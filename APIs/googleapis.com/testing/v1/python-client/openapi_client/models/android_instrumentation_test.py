# coding: utf-8

"""
    Cloud Testing API

    Allows developers to run automated tests for their mobile applications on Google infrastructure.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.app_bundle import AppBundle
from openapi_client.models.file_reference import FileReference
from openapi_client.models.sharding_option import ShardingOption
from typing import Optional, Set
from typing_extensions import Self

class AndroidInstrumentationTest(BaseModel):
    """
    A test of an Android application that can control an Android component independently of its normal lifecycle. Android instrumentation tests run an application APK and test APK inside the same process on a virtual or physical AndroidDevice. They also specify a test runner class, such as com.google.GoogleTestRunner, which can vary on the specific instrumentation framework chosen. See for more information on types of Android tests.
    """ # noqa: E501
    app_apk: Optional[FileReference] = Field(default=None, alias="appApk")
    app_bundle: Optional[AppBundle] = Field(default=None, alias="appBundle")
    app_package_id: Optional[StrictStr] = Field(default=None, description="The java package for the application under test. The default value is determined by examining the application's manifest.", alias="appPackageId")
    orchestrator_option: Optional[StrictStr] = Field(default=None, description="The option of whether running each test within its own invocation of instrumentation with Android Test Orchestrator or not. ** Orchestrator is only compatible with AndroidJUnitRunner version 1.1 or higher! ** Orchestrator offers the following benefits: - No shared state - Crashes are isolated - Logs are scoped per test See for more information about Android Test Orchestrator. If not set, the test will be run without the orchestrator.", alias="orchestratorOption")
    sharding_option: Optional[ShardingOption] = Field(default=None, alias="shardingOption")
    test_apk: Optional[FileReference] = Field(default=None, alias="testApk")
    test_package_id: Optional[StrictStr] = Field(default=None, description="The java package for the test to be executed. The default value is determined by examining the application's manifest.", alias="testPackageId")
    test_runner_class: Optional[StrictStr] = Field(default=None, description="The InstrumentationTestRunner class. The default value is determined by examining the application's manifest.", alias="testRunnerClass")
    test_targets: Optional[List[StrictStr]] = Field(default=None, description="Each target must be fully qualified with the package name or class name, in one of these formats: - \"package package_name\" - \"class package_name.class_name\" - \"class package_name.class_name#method_name\" If empty, all targets in the module will be run.", alias="testTargets")
    __properties: ClassVar[List[str]] = ["appApk", "appBundle", "appPackageId", "orchestratorOption", "shardingOption", "testApk", "testPackageId", "testRunnerClass", "testTargets"]

    @field_validator('orchestrator_option')
    def orchestrator_option_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['ORCHESTRATOR_OPTION_UNSPECIFIED', 'USE_ORCHESTRATOR', 'DO_NOT_USE_ORCHESTRATOR']):
            raise ValueError("must be one of enum values ('ORCHESTRATOR_OPTION_UNSPECIFIED', 'USE_ORCHESTRATOR', 'DO_NOT_USE_ORCHESTRATOR')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AndroidInstrumentationTest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of app_apk
        if self.app_apk:
            _dict['appApk'] = self.app_apk.to_dict()
        # override the default output from pydantic by calling `to_dict()` of app_bundle
        if self.app_bundle:
            _dict['appBundle'] = self.app_bundle.to_dict()
        # override the default output from pydantic by calling `to_dict()` of sharding_option
        if self.sharding_option:
            _dict['shardingOption'] = self.sharding_option.to_dict()
        # override the default output from pydantic by calling `to_dict()` of test_apk
        if self.test_apk:
            _dict['testApk'] = self.test_apk.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AndroidInstrumentationTest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "appApk": FileReference.from_dict(obj["appApk"]) if obj.get("appApk") is not None else None,
            "appBundle": AppBundle.from_dict(obj["appBundle"]) if obj.get("appBundle") is not None else None,
            "appPackageId": obj.get("appPackageId"),
            "orchestratorOption": obj.get("orchestratorOption"),
            "shardingOption": ShardingOption.from_dict(obj["shardingOption"]) if obj.get("shardingOption") is not None else None,
            "testApk": FileReference.from_dict(obj["testApk"]) if obj.get("testApk") is not None else None,
            "testPackageId": obj.get("testPackageId"),
            "testRunnerClass": obj.get("testRunnerClass"),
            "testTargets": obj.get("testTargets")
        })
        return _obj



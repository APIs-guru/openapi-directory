# coding: utf-8

"""
    Cloud Testing API

    Allows developers to run automated tests for their mobile applications on Google infrastructure.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.test_targets_for_shard import TestTargetsForShard
from typing import Optional, Set
from typing_extensions import Self

class Shard(BaseModel):
    """
    Output only. Details about the shard.
    """ # noqa: E501
    estimated_shard_duration: Optional[StrictStr] = Field(default=None, description="Output only. The estimated shard duration based on previous test case timing records, if available.", alias="estimatedShardDuration")
    num_shards: Optional[StrictInt] = Field(default=None, description="Output only. The total number of shards.", alias="numShards")
    shard_index: Optional[StrictInt] = Field(default=None, description="Output only. The index of the shard among all the shards.", alias="shardIndex")
    test_targets_for_shard: Optional[TestTargetsForShard] = Field(default=None, alias="testTargetsForShard")
    __properties: ClassVar[List[str]] = ["estimatedShardDuration", "numShards", "shardIndex", "testTargetsForShard"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Shard from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "estimated_shard_duration",
            "num_shards",
            "shard_index",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of test_targets_for_shard
        if self.test_targets_for_shard:
            _dict['testTargetsForShard'] = self.test_targets_for_shard.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Shard from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "estimatedShardDuration": obj.get("estimatedShardDuration"),
            "numShards": obj.get("numShards"),
            "shardIndex": obj.get("shardIndex"),
            "testTargetsForShard": TestTargetsForShard.from_dict(obj["testTargetsForShard"]) if obj.get("testTargetsForShard") is not None else None
        })
        return _obj



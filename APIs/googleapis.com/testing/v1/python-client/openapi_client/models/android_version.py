# coding: utf-8

"""
    Cloud Testing API

    Allows developers to run automated tests for their mobile applications on Google infrastructure.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.distribution import Distribution
from openapi_client.models.model_date import ModelDate
from typing import Optional, Set
from typing_extensions import Self

class AndroidVersion(BaseModel):
    """
    A version of the Android OS.
    """ # noqa: E501
    api_level: Optional[StrictInt] = Field(default=None, description="The API level for this Android version. Examples: 18, 19.", alias="apiLevel")
    code_name: Optional[StrictStr] = Field(default=None, description="The code name for this Android version. Examples: \"JellyBean\", \"KitKat\".", alias="codeName")
    distribution: Optional[Distribution] = None
    id: Optional[StrictStr] = Field(default=None, description="An opaque id for this Android version. Use this id to invoke the TestExecutionService.")
    release_date: Optional[ModelDate] = Field(default=None, alias="releaseDate")
    tags: Optional[List[StrictStr]] = Field(default=None, description="Tags for this dimension. Examples: \"default\", \"preview\", \"deprecated\".")
    version_string: Optional[StrictStr] = Field(default=None, description="A string representing this version of the Android OS. Examples: \"4.3\", \"4.4\".", alias="versionString")
    __properties: ClassVar[List[str]] = ["apiLevel", "codeName", "distribution", "id", "releaseDate", "tags", "versionString"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AndroidVersion from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of distribution
        if self.distribution:
            _dict['distribution'] = self.distribution.to_dict()
        # override the default output from pydantic by calling `to_dict()` of release_date
        if self.release_date:
            _dict['releaseDate'] = self.release_date.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AndroidVersion from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "apiLevel": obj.get("apiLevel"),
            "codeName": obj.get("codeName"),
            "distribution": Distribution.from_dict(obj["distribution"]) if obj.get("distribution") is not None else None,
            "id": obj.get("id"),
            "releaseDate": ModelDate.from_dict(obj["releaseDate"]) if obj.get("releaseDate") is not None else None,
            "tags": obj.get("tags"),
            "versionString": obj.get("versionString")
        })
        return _obj



# coding: utf-8

"""
    Cloud Testing API

    Allows developers to run automated tests for their mobile applications on Google infrastructure.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.app_bundle import AppBundle
from openapi_client.models.file_reference import FileReference
from typing import Optional, Set
from typing_extensions import Self

class AndroidTestLoop(BaseModel):
    """
    A test of an Android Application with a Test Loop. The intent \\ will be implicitly added, since Games is the only user of this api, for the time being.
    """ # noqa: E501
    app_apk: Optional[FileReference] = Field(default=None, alias="appApk")
    app_bundle: Optional[AppBundle] = Field(default=None, alias="appBundle")
    app_package_id: Optional[StrictStr] = Field(default=None, description="The java package for the application under test. The default is determined by examining the application's manifest.", alias="appPackageId")
    scenario_labels: Optional[List[StrictStr]] = Field(default=None, description="The list of scenario labels that should be run during the test. The scenario labels should map to labels defined in the application's manifest. For example, player_experience and com.google.test.loops.player_experience add all of the loops labeled in the manifest with the com.google.test.loops.player_experience name to the execution. Scenarios can also be specified in the scenarios field.", alias="scenarioLabels")
    scenarios: Optional[List[StrictInt]] = Field(default=None, description="The list of scenarios that should be run during the test. The default is all test loops, derived from the application's manifest.")
    __properties: ClassVar[List[str]] = ["appApk", "appBundle", "appPackageId", "scenarioLabels", "scenarios"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AndroidTestLoop from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of app_apk
        if self.app_apk:
            _dict['appApk'] = self.app_apk.to_dict()
        # override the default output from pydantic by calling `to_dict()` of app_bundle
        if self.app_bundle:
            _dict['appBundle'] = self.app_bundle.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AndroidTestLoop from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "appApk": FileReference.from_dict(obj["appApk"]) if obj.get("appApk") is not None else None,
            "appBundle": AppBundle.from_dict(obj["appBundle"]) if obj.get("appBundle") is not None else None,
            "appPackageId": obj.get("appPackageId"),
            "scenarioLabels": obj.get("scenarioLabels"),
            "scenarios": obj.get("scenarios")
        })
        return _obj



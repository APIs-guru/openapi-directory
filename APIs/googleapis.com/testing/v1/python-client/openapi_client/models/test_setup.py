# coding: utf-8

"""
    Cloud Testing API

    Allows developers to run automated tests for their mobile applications on Google infrastructure.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.account import Account
from openapi_client.models.apk import Apk
from openapi_client.models.device_file import DeviceFile
from openapi_client.models.environment_variable import EnvironmentVariable
from openapi_client.models.systrace_setup import SystraceSetup
from typing import Optional, Set
from typing_extensions import Self

class TestSetup(BaseModel):
    """
    A description of how to set up the Android device prior to running the test.
    """ # noqa: E501
    account: Optional[Account] = None
    additional_apks: Optional[List[Apk]] = Field(default=None, description="APKs to install in addition to those being directly tested. These will be installed after the app under test. Currently capped at 100.", alias="additionalApks")
    directories_to_pull: Optional[List[StrictStr]] = Field(default=None, description="List of directories on the device to upload to GCS at the end of the test; they must be absolute paths under /sdcard, /storage or /data/local/tmp. Path names are restricted to characters a-z A-Z 0-9 _ - . + and / Note: The paths /sdcard and /data will be made available and treated as implicit path substitutions. E.g. if /sdcard on a particular device does not map to external storage, the system will replace it with the external storage path prefix for that device.", alias="directoriesToPull")
    dont_autogrant_permissions: Optional[StrictBool] = Field(default=None, description="Whether to prevent all runtime permissions to be granted at app install", alias="dontAutograntPermissions")
    environment_variables: Optional[List[EnvironmentVariable]] = Field(default=None, description="Environment variables to set for the test (only applicable for instrumentation tests).", alias="environmentVariables")
    files_to_push: Optional[List[DeviceFile]] = Field(default=None, description="List of files to push to the device before starting the test.", alias="filesToPush")
    initial_setup_apks: Optional[List[Apk]] = Field(default=None, description="Optional. Initial setup APKs to install before the app under test is installed. Currently capped at 100.", alias="initialSetupApks")
    network_profile: Optional[StrictStr] = Field(default=None, description="The network traffic profile used for running the test. Available network profiles can be queried by using the NETWORK_CONFIGURATION environment type when calling TestEnvironmentDiscoveryService.GetTestEnvironmentCatalog.", alias="networkProfile")
    systrace: Optional[SystraceSetup] = None
    __properties: ClassVar[List[str]] = ["account", "additionalApks", "directoriesToPull", "dontAutograntPermissions", "environmentVariables", "filesToPush", "initialSetupApks", "networkProfile", "systrace"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of TestSetup from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of account
        if self.account:
            _dict['account'] = self.account.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in additional_apks (list)
        _items = []
        if self.additional_apks:
            for _item_additional_apks in self.additional_apks:
                if _item_additional_apks:
                    _items.append(_item_additional_apks.to_dict())
            _dict['additionalApks'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in environment_variables (list)
        _items = []
        if self.environment_variables:
            for _item_environment_variables in self.environment_variables:
                if _item_environment_variables:
                    _items.append(_item_environment_variables.to_dict())
            _dict['environmentVariables'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in files_to_push (list)
        _items = []
        if self.files_to_push:
            for _item_files_to_push in self.files_to_push:
                if _item_files_to_push:
                    _items.append(_item_files_to_push.to_dict())
            _dict['filesToPush'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in initial_setup_apks (list)
        _items = []
        if self.initial_setup_apks:
            for _item_initial_setup_apks in self.initial_setup_apks:
                if _item_initial_setup_apks:
                    _items.append(_item_initial_setup_apks.to_dict())
            _dict['initialSetupApks'] = _items
        # override the default output from pydantic by calling `to_dict()` of systrace
        if self.systrace:
            _dict['systrace'] = self.systrace.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of TestSetup from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "account": Account.from_dict(obj["account"]) if obj.get("account") is not None else None,
            "additionalApks": [Apk.from_dict(_item) for _item in obj["additionalApks"]] if obj.get("additionalApks") is not None else None,
            "directoriesToPull": obj.get("directoriesToPull"),
            "dontAutograntPermissions": obj.get("dontAutograntPermissions"),
            "environmentVariables": [EnvironmentVariable.from_dict(_item) for _item in obj["environmentVariables"]] if obj.get("environmentVariables") is not None else None,
            "filesToPush": [DeviceFile.from_dict(_item) for _item in obj["filesToPush"]] if obj.get("filesToPush") is not None else None,
            "initialSetupApks": [Apk.from_dict(_item) for _item in obj["initialSetupApks"]] if obj.get("initialSetupApks") is not None else None,
            "networkProfile": obj.get("networkProfile"),
            "systrace": SystraceSetup.from_dict(obj["systrace"]) if obj.get("systrace") is not None else None
        })
        return _obj



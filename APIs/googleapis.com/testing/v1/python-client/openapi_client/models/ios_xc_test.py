# coding: utf-8

"""
    Cloud Testing API

    Allows developers to run automated tests for their mobile applications on Google infrastructure.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.file_reference import FileReference
from typing import Optional, Set
from typing_extensions import Self

class IosXcTest(BaseModel):
    """
    A test of an iOS application that uses the XCTest framework. Xcode supports the option to \"build for testing\", which generates an .xctestrun file that contains a test specification (arguments, test methods, etc). This test type accepts a zip file containing the .xctestrun file and the corresponding contents of the Build/Products directory that contains all the binaries needed to run the tests.
    """ # noqa: E501
    app_bundle_id: Optional[StrictStr] = Field(default=None, description="Output only. The bundle id for the application under test.", alias="appBundleId")
    test_special_entitlements: Optional[StrictBool] = Field(default=None, description="The option to test special app entitlements. Setting this would re-sign the app having special entitlements with an explicit application-identifier. Currently supports testing aps-environment entitlement.", alias="testSpecialEntitlements")
    tests_zip: Optional[FileReference] = Field(default=None, alias="testsZip")
    xcode_version: Optional[StrictStr] = Field(default=None, description="The Xcode version that should be used for the test. Use the TestEnvironmentDiscoveryService to get supported options. Defaults to the latest Xcode version Firebase Test Lab supports.", alias="xcodeVersion")
    xctestrun: Optional[FileReference] = None
    __properties: ClassVar[List[str]] = ["appBundleId", "testSpecialEntitlements", "testsZip", "xcodeVersion", "xctestrun"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of IosXcTest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of tests_zip
        if self.tests_zip:
            _dict['testsZip'] = self.tests_zip.to_dict()
        # override the default output from pydantic by calling `to_dict()` of xctestrun
        if self.xctestrun:
            _dict['xctestrun'] = self.xctestrun.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of IosXcTest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "appBundleId": obj.get("appBundleId"),
            "testSpecialEntitlements": obj.get("testSpecialEntitlements"),
            "testsZip": FileReference.from_dict(obj["testsZip"]) if obj.get("testsZip") is not None else None,
            "xcodeVersion": obj.get("xcodeVersion"),
            "xctestrun": FileReference.from_dict(obj["xctestrun"]) if obj.get("xctestrun") is not None else None
        })
        return _obj



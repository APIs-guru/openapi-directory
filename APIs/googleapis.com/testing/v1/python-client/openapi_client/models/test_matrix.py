# coding: utf-8

"""
    Cloud Testing API

    Allows developers to run automated tests for their mobile applications on Google infrastructure.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.client_info import ClientInfo
from openapi_client.models.environment_matrix import EnvironmentMatrix
from openapi_client.models.matrix_error_detail import MatrixErrorDetail
from openapi_client.models.result_storage import ResultStorage
from openapi_client.models.test_execution import TestExecution
from openapi_client.models.test_specification import TestSpecification
from typing import Optional, Set
from typing_extensions import Self

class TestMatrix(BaseModel):
    """
    TestMatrix captures all details about a test. It contains the environment configuration, test specification, test executions and overall state and outcome.
    """ # noqa: E501
    client_info: Optional[ClientInfo] = Field(default=None, alias="clientInfo")
    environment_matrix: Optional[EnvironmentMatrix] = Field(default=None, alias="environmentMatrix")
    extended_invalid_matrix_details: Optional[List[MatrixErrorDetail]] = Field(default=None, description="Output only. Details about why a matrix was deemed invalid. If multiple checks can be safely performed, they will be reported but no assumptions should be made about the length of this list.", alias="extendedInvalidMatrixDetails")
    fail_fast: Optional[StrictBool] = Field(default=None, description="If true, only a single attempt at most will be made to run each execution/shard in the matrix. Flaky test attempts are not affected. Normally, 2 or more attempts are made if a potential infrastructure issue is detected. This feature is for latency sensitive workloads. The incidence of execution failures may be significantly greater for fail-fast matrices and support is more limited because of that expectation.", alias="failFast")
    flaky_test_attempts: Optional[StrictInt] = Field(default=None, description="The number of times a TestExecution should be re-attempted if one or more of its test cases fail for any reason. The maximum number of reruns allowed is 10. Default is 0, which implies no reruns.", alias="flakyTestAttempts")
    invalid_matrix_details: Optional[StrictStr] = Field(default=None, description="Output only. Describes why the matrix is considered invalid. Only useful for matrices in the INVALID state.", alias="invalidMatrixDetails")
    outcome_summary: Optional[StrictStr] = Field(default=None, description="Output Only. The overall outcome of the test. Only set when the test matrix state is FINISHED.", alias="outcomeSummary")
    project_id: Optional[StrictStr] = Field(default=None, description="The cloud project that owns the test matrix.", alias="projectId")
    result_storage: Optional[ResultStorage] = Field(default=None, alias="resultStorage")
    state: Optional[StrictStr] = Field(default=None, description="Output only. Indicates the current progress of the test matrix.")
    test_executions: Optional[List[TestExecution]] = Field(default=None, description="Output only. The list of test executions that the service creates for this matrix.", alias="testExecutions")
    test_matrix_id: Optional[StrictStr] = Field(default=None, description="Output only. Unique id set by the service.", alias="testMatrixId")
    test_specification: Optional[TestSpecification] = Field(default=None, alias="testSpecification")
    timestamp: Optional[StrictStr] = Field(default=None, description="Output only. The time this test matrix was initially created.")
    __properties: ClassVar[List[str]] = ["clientInfo", "environmentMatrix", "extendedInvalidMatrixDetails", "failFast", "flakyTestAttempts", "invalidMatrixDetails", "outcomeSummary", "projectId", "resultStorage", "state", "testExecutions", "testMatrixId", "testSpecification", "timestamp"]

    @field_validator('invalid_matrix_details')
    def invalid_matrix_details_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['INVALID_MATRIX_DETAILS_UNSPECIFIED', 'DETAILS_UNAVAILABLE', 'MALFORMED_APK', 'MALFORMED_TEST_APK', 'NO_MANIFEST', 'NO_PACKAGE_NAME', 'INVALID_PACKAGE_NAME', 'TEST_SAME_AS_APP', 'NO_INSTRUMENTATION', 'NO_SIGNATURE', 'INSTRUMENTATION_ORCHESTRATOR_INCOMPATIBLE', 'NO_TEST_RUNNER_CLASS', 'NO_LAUNCHER_ACTIVITY', 'FORBIDDEN_PERMISSIONS', 'INVALID_ROBO_DIRECTIVES', 'INVALID_RESOURCE_NAME', 'INVALID_DIRECTIVE_ACTION', 'TEST_LOOP_INTENT_FILTER_NOT_FOUND', 'SCENARIO_LABEL_NOT_DECLARED', 'SCENARIO_LABEL_MALFORMED', 'SCENARIO_NOT_DECLARED', 'DEVICE_ADMIN_RECEIVER', 'MALFORMED_XC_TEST_ZIP', 'BUILT_FOR_IOS_SIMULATOR', 'NO_TESTS_IN_XC_TEST_ZIP', 'USE_DESTINATION_ARTIFACTS', 'TEST_NOT_APP_HOSTED', 'PLIST_CANNOT_BE_PARSED', 'TEST_ONLY_APK', 'MALFORMED_IPA', 'MISSING_URL_SCHEME', 'MALFORMED_APP_BUNDLE', 'NO_CODE_APK', 'INVALID_INPUT_APK', 'INVALID_APK_PREVIEW_SDK', 'MATRIX_TOO_LARGE', 'TEST_QUOTA_EXCEEDED', 'SERVICE_NOT_ACTIVATED', 'UNKNOWN_PERMISSION_ERROR']):
            raise ValueError("must be one of enum values ('INVALID_MATRIX_DETAILS_UNSPECIFIED', 'DETAILS_UNAVAILABLE', 'MALFORMED_APK', 'MALFORMED_TEST_APK', 'NO_MANIFEST', 'NO_PACKAGE_NAME', 'INVALID_PACKAGE_NAME', 'TEST_SAME_AS_APP', 'NO_INSTRUMENTATION', 'NO_SIGNATURE', 'INSTRUMENTATION_ORCHESTRATOR_INCOMPATIBLE', 'NO_TEST_RUNNER_CLASS', 'NO_LAUNCHER_ACTIVITY', 'FORBIDDEN_PERMISSIONS', 'INVALID_ROBO_DIRECTIVES', 'INVALID_RESOURCE_NAME', 'INVALID_DIRECTIVE_ACTION', 'TEST_LOOP_INTENT_FILTER_NOT_FOUND', 'SCENARIO_LABEL_NOT_DECLARED', 'SCENARIO_LABEL_MALFORMED', 'SCENARIO_NOT_DECLARED', 'DEVICE_ADMIN_RECEIVER', 'MALFORMED_XC_TEST_ZIP', 'BUILT_FOR_IOS_SIMULATOR', 'NO_TESTS_IN_XC_TEST_ZIP', 'USE_DESTINATION_ARTIFACTS', 'TEST_NOT_APP_HOSTED', 'PLIST_CANNOT_BE_PARSED', 'TEST_ONLY_APK', 'MALFORMED_IPA', 'MISSING_URL_SCHEME', 'MALFORMED_APP_BUNDLE', 'NO_CODE_APK', 'INVALID_INPUT_APK', 'INVALID_APK_PREVIEW_SDK', 'MATRIX_TOO_LARGE', 'TEST_QUOTA_EXCEEDED', 'SERVICE_NOT_ACTIVATED', 'UNKNOWN_PERMISSION_ERROR')")
        return value

    @field_validator('outcome_summary')
    def outcome_summary_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['OUTCOME_SUMMARY_UNSPECIFIED', 'SUCCESS', 'FAILURE', 'INCONCLUSIVE', 'SKIPPED']):
            raise ValueError("must be one of enum values ('OUTCOME_SUMMARY_UNSPECIFIED', 'SUCCESS', 'FAILURE', 'INCONCLUSIVE', 'SKIPPED')")
        return value

    @field_validator('state')
    def state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['TEST_STATE_UNSPECIFIED', 'VALIDATING', 'PENDING', 'RUNNING', 'FINISHED', 'ERROR', 'UNSUPPORTED_ENVIRONMENT', 'INCOMPATIBLE_ENVIRONMENT', 'INCOMPATIBLE_ARCHITECTURE', 'CANCELLED', 'INVALID']):
            raise ValueError("must be one of enum values ('TEST_STATE_UNSPECIFIED', 'VALIDATING', 'PENDING', 'RUNNING', 'FINISHED', 'ERROR', 'UNSUPPORTED_ENVIRONMENT', 'INCOMPATIBLE_ENVIRONMENT', 'INCOMPATIBLE_ARCHITECTURE', 'CANCELLED', 'INVALID')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of TestMatrix from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "extended_invalid_matrix_details",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of client_info
        if self.client_info:
            _dict['clientInfo'] = self.client_info.to_dict()
        # override the default output from pydantic by calling `to_dict()` of environment_matrix
        if self.environment_matrix:
            _dict['environmentMatrix'] = self.environment_matrix.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in extended_invalid_matrix_details (list)
        _items = []
        if self.extended_invalid_matrix_details:
            for _item_extended_invalid_matrix_details in self.extended_invalid_matrix_details:
                if _item_extended_invalid_matrix_details:
                    _items.append(_item_extended_invalid_matrix_details.to_dict())
            _dict['extendedInvalidMatrixDetails'] = _items
        # override the default output from pydantic by calling `to_dict()` of result_storage
        if self.result_storage:
            _dict['resultStorage'] = self.result_storage.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in test_executions (list)
        _items = []
        if self.test_executions:
            for _item_test_executions in self.test_executions:
                if _item_test_executions:
                    _items.append(_item_test_executions.to_dict())
            _dict['testExecutions'] = _items
        # override the default output from pydantic by calling `to_dict()` of test_specification
        if self.test_specification:
            _dict['testSpecification'] = self.test_specification.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of TestMatrix from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "clientInfo": ClientInfo.from_dict(obj["clientInfo"]) if obj.get("clientInfo") is not None else None,
            "environmentMatrix": EnvironmentMatrix.from_dict(obj["environmentMatrix"]) if obj.get("environmentMatrix") is not None else None,
            "extendedInvalidMatrixDetails": [MatrixErrorDetail.from_dict(_item) for _item in obj["extendedInvalidMatrixDetails"]] if obj.get("extendedInvalidMatrixDetails") is not None else None,
            "failFast": obj.get("failFast"),
            "flakyTestAttempts": obj.get("flakyTestAttempts"),
            "invalidMatrixDetails": obj.get("invalidMatrixDetails"),
            "outcomeSummary": obj.get("outcomeSummary"),
            "projectId": obj.get("projectId"),
            "resultStorage": ResultStorage.from_dict(obj["resultStorage"]) if obj.get("resultStorage") is not None else None,
            "state": obj.get("state"),
            "testExecutions": [TestExecution.from_dict(_item) for _item in obj["testExecutions"]] if obj.get("testExecutions") is not None else None,
            "testMatrixId": obj.get("testMatrixId"),
            "testSpecification": TestSpecification.from_dict(obj["testSpecification"]) if obj.get("testSpecification") is not None else None,
            "timestamp": obj.get("timestamp")
        })
        return _obj



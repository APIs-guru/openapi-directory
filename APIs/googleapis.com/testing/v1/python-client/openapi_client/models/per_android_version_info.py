# coding: utf-8

"""
    Cloud Testing API

    Allows developers to run automated tests for their mobile applications on Google infrastructure.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.direct_access_version_info import DirectAccessVersionInfo
from typing import Optional, Set
from typing_extensions import Self

class PerAndroidVersionInfo(BaseModel):
    """
    A version-specific information of an Android model.
    """ # noqa: E501
    device_capacity: Optional[StrictStr] = Field(default=None, description="The number of online devices for an Android version.", alias="deviceCapacity")
    direct_access_version_info: Optional[DirectAccessVersionInfo] = Field(default=None, alias="directAccessVersionInfo")
    interactive_device_availability_estimate: Optional[StrictStr] = Field(default=None, description="Output only. The estimated wait time for a single interactive device session using Direct Access.", alias="interactiveDeviceAvailabilityEstimate")
    version_id: Optional[StrictStr] = Field(default=None, description="An Android version.", alias="versionId")
    __properties: ClassVar[List[str]] = ["deviceCapacity", "directAccessVersionInfo", "interactiveDeviceAvailabilityEstimate", "versionId"]

    @field_validator('device_capacity')
    def device_capacity_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['DEVICE_CAPACITY_UNSPECIFIED', 'DEVICE_CAPACITY_HIGH', 'DEVICE_CAPACITY_MEDIUM', 'DEVICE_CAPACITY_LOW', 'DEVICE_CAPACITY_NONE']):
            raise ValueError("must be one of enum values ('DEVICE_CAPACITY_UNSPECIFIED', 'DEVICE_CAPACITY_HIGH', 'DEVICE_CAPACITY_MEDIUM', 'DEVICE_CAPACITY_LOW', 'DEVICE_CAPACITY_NONE')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PerAndroidVersionInfo from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "interactive_device_availability_estimate",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of direct_access_version_info
        if self.direct_access_version_info:
            _dict['directAccessVersionInfo'] = self.direct_access_version_info.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PerAndroidVersionInfo from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "deviceCapacity": obj.get("deviceCapacity"),
            "directAccessVersionInfo": DirectAccessVersionInfo.from_dict(obj["directAccessVersionInfo"]) if obj.get("directAccessVersionInfo") is not None else None,
            "interactiveDeviceAvailabilityEstimate": obj.get("interactiveDeviceAvailabilityEstimate"),
            "versionId": obj.get("versionId")
        })
        return _obj



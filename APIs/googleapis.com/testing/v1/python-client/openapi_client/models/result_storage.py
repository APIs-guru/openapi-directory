# coding: utf-8

"""
    Cloud Testing API

    Allows developers to run automated tests for their mobile applications on Google infrastructure.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_cloud_storage import GoogleCloudStorage
from openapi_client.models.tool_results_execution import ToolResultsExecution
from openapi_client.models.tool_results_history import ToolResultsHistory
from typing import Optional, Set
from typing_extensions import Self

class ResultStorage(BaseModel):
    """
    Locations where the results of running the test are stored.
    """ # noqa: E501
    google_cloud_storage: Optional[GoogleCloudStorage] = Field(default=None, alias="googleCloudStorage")
    results_url: Optional[StrictStr] = Field(default=None, description="Output only. URL to the results in the Firebase Web Console.", alias="resultsUrl")
    tool_results_execution: Optional[ToolResultsExecution] = Field(default=None, alias="toolResultsExecution")
    tool_results_history: Optional[ToolResultsHistory] = Field(default=None, alias="toolResultsHistory")
    __properties: ClassVar[List[str]] = ["googleCloudStorage", "resultsUrl", "toolResultsExecution", "toolResultsHistory"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ResultStorage from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of google_cloud_storage
        if self.google_cloud_storage:
            _dict['googleCloudStorage'] = self.google_cloud_storage.to_dict()
        # override the default output from pydantic by calling `to_dict()` of tool_results_execution
        if self.tool_results_execution:
            _dict['toolResultsExecution'] = self.tool_results_execution.to_dict()
        # override the default output from pydantic by calling `to_dict()` of tool_results_history
        if self.tool_results_history:
            _dict['toolResultsHistory'] = self.tool_results_history.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ResultStorage from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "googleCloudStorage": GoogleCloudStorage.from_dict(obj["googleCloudStorage"]) if obj.get("googleCloudStorage") is not None else None,
            "resultsUrl": obj.get("resultsUrl"),
            "toolResultsExecution": ToolResultsExecution.from_dict(obj["toolResultsExecution"]) if obj.get("toolResultsExecution") is not None else None,
            "toolResultsHistory": ToolResultsHistory.from_dict(obj["toolResultsHistory"]) if obj.get("toolResultsHistory") is not None else None
        })
        return _obj



# coding: utf-8

"""
    Cloud Testing API

    Allows developers to run automated tests for their mobile applications on Google infrastructure.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.intent_filter import IntentFilter
from openapi_client.models.metadata import Metadata
from openapi_client.models.service import Service
from openapi_client.models.uses_feature import UsesFeature
from typing import Optional, Set
from typing_extensions import Self

class ApkManifest(BaseModel):
    """
    An Android app manifest. See http://developer.android.com/guide/topics/manifest/manifest-intro.html
    """ # noqa: E501
    application_label: Optional[StrictStr] = Field(default=None, description="User-readable name for the application.", alias="applicationLabel")
    intent_filters: Optional[List[IntentFilter]] = Field(default=None, alias="intentFilters")
    max_sdk_version: Optional[StrictInt] = Field(default=None, description="Maximum API level on which the application is designed to run.", alias="maxSdkVersion")
    metadata: Optional[List[Metadata]] = Field(default=None, description="Meta-data tags defined in the manifest.")
    min_sdk_version: Optional[StrictInt] = Field(default=None, description="Minimum API level required for the application to run.", alias="minSdkVersion")
    package_name: Optional[StrictStr] = Field(default=None, description="Full Java-style package name for this application, e.g. \"com.example.foo\".", alias="packageName")
    services: Optional[List[Service]] = Field(default=None, description="Services contained in the tag.")
    target_sdk_version: Optional[StrictInt] = Field(default=None, description="Specifies the API Level on which the application is designed to run.", alias="targetSdkVersion")
    uses_feature: Optional[List[UsesFeature]] = Field(default=None, description="Feature usage tags defined in the manifest.", alias="usesFeature")
    uses_permission: Optional[List[StrictStr]] = Field(default=None, description="Permissions declared to be used by the application", alias="usesPermission")
    version_code: Optional[StrictStr] = Field(default=None, description="Version number used internally by the app.", alias="versionCode")
    version_name: Optional[StrictStr] = Field(default=None, description="Version number shown to users.", alias="versionName")
    __properties: ClassVar[List[str]] = ["applicationLabel", "intentFilters", "maxSdkVersion", "metadata", "minSdkVersion", "packageName", "services", "targetSdkVersion", "usesFeature", "usesPermission", "versionCode", "versionName"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ApkManifest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in intent_filters (list)
        _items = []
        if self.intent_filters:
            for _item_intent_filters in self.intent_filters:
                if _item_intent_filters:
                    _items.append(_item_intent_filters.to_dict())
            _dict['intentFilters'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in metadata (list)
        _items = []
        if self.metadata:
            for _item_metadata in self.metadata:
                if _item_metadata:
                    _items.append(_item_metadata.to_dict())
            _dict['metadata'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in services (list)
        _items = []
        if self.services:
            for _item_services in self.services:
                if _item_services:
                    _items.append(_item_services.to_dict())
            _dict['services'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in uses_feature (list)
        _items = []
        if self.uses_feature:
            for _item_uses_feature in self.uses_feature:
                if _item_uses_feature:
                    _items.append(_item_uses_feature.to_dict())
            _dict['usesFeature'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ApkManifest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "applicationLabel": obj.get("applicationLabel"),
            "intentFilters": [IntentFilter.from_dict(_item) for _item in obj["intentFilters"]] if obj.get("intentFilters") is not None else None,
            "maxSdkVersion": obj.get("maxSdkVersion"),
            "metadata": [Metadata.from_dict(_item) for _item in obj["metadata"]] if obj.get("metadata") is not None else None,
            "minSdkVersion": obj.get("minSdkVersion"),
            "packageName": obj.get("packageName"),
            "services": [Service.from_dict(_item) for _item in obj["services"]] if obj.get("services") is not None else None,
            "targetSdkVersion": obj.get("targetSdkVersion"),
            "usesFeature": [UsesFeature.from_dict(_item) for _item in obj["usesFeature"]] if obj.get("usesFeature") is not None else None,
            "usesPermission": obj.get("usesPermission"),
            "versionCode": obj.get("versionCode"),
            "versionName": obj.get("versionName")
        })
        return _obj



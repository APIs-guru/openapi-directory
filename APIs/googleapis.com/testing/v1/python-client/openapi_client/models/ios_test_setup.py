# coding: utf-8

"""
    Cloud Testing API

    Allows developers to run automated tests for their mobile applications on Google infrastructure.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.file_reference import FileReference
from openapi_client.models.ios_device_file import IosDeviceFile
from typing import Optional, Set
from typing_extensions import Self

class IosTestSetup(BaseModel):
    """
    A description of how to set up an iOS device prior to running the test.
    """ # noqa: E501
    additional_ipas: Optional[List[FileReference]] = Field(default=None, description="iOS apps to install in addition to those being directly tested.", alias="additionalIpas")
    network_profile: Optional[StrictStr] = Field(default=None, description="The network traffic profile used for running the test. Available network profiles can be queried by using the NETWORK_CONFIGURATION environment type when calling TestEnvironmentDiscoveryService.GetTestEnvironmentCatalog.", alias="networkProfile")
    pull_directories: Optional[List[IosDeviceFile]] = Field(default=None, description="List of directories on the device to upload to Cloud Storage at the end of the test. Directories should either be in a shared directory (such as /private/var/mobile/Media) or within an accessible directory inside the app's filesystem (such as /Documents) by specifying the bundle ID.", alias="pullDirectories")
    push_files: Optional[List[IosDeviceFile]] = Field(default=None, description="List of files to push to the device before starting the test.", alias="pushFiles")
    __properties: ClassVar[List[str]] = ["additionalIpas", "networkProfile", "pullDirectories", "pushFiles"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of IosTestSetup from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in additional_ipas (list)
        _items = []
        if self.additional_ipas:
            for _item_additional_ipas in self.additional_ipas:
                if _item_additional_ipas:
                    _items.append(_item_additional_ipas.to_dict())
            _dict['additionalIpas'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in pull_directories (list)
        _items = []
        if self.pull_directories:
            for _item_pull_directories in self.pull_directories:
                if _item_pull_directories:
                    _items.append(_item_pull_directories.to_dict())
            _dict['pullDirectories'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in push_files (list)
        _items = []
        if self.push_files:
            for _item_push_files in self.push_files:
                if _item_push_files:
                    _items.append(_item_push_files.to_dict())
            _dict['pushFiles'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of IosTestSetup from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "additionalIpas": [FileReference.from_dict(_item) for _item in obj["additionalIpas"]] if obj.get("additionalIpas") is not None else None,
            "networkProfile": obj.get("networkProfile"),
            "pullDirectories": [IosDeviceFile.from_dict(_item) for _item in obj["pullDirectories"]] if obj.get("pullDirectories") is not None else None,
            "pushFiles": [IosDeviceFile.from_dict(_item) for _item in obj["pushFiles"]] if obj.get("pushFiles") is not None else None
        })
        return _obj



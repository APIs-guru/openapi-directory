# coding: utf-8

"""
    Cloud Testing API

    Allows developers to run automated tests for their mobile applications on Google infrastructure.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.app_bundle import AppBundle
from openapi_client.models.file_reference import FileReference
from openapi_client.models.robo_directive import RoboDirective
from openapi_client.models.robo_starting_intent import RoboStartingIntent
from typing import Optional, Set
from typing_extensions import Self

class AndroidRoboTest(BaseModel):
    """
    A test of an android application that explores the application on a virtual or physical Android Device, finding culprits and crashes as it goes.
    """ # noqa: E501
    app_apk: Optional[FileReference] = Field(default=None, alias="appApk")
    app_bundle: Optional[AppBundle] = Field(default=None, alias="appBundle")
    app_initial_activity: Optional[StrictStr] = Field(default=None, description="The initial activity that should be used to start the app.", alias="appInitialActivity")
    app_package_id: Optional[StrictStr] = Field(default=None, description="The java package for the application under test. The default value is determined by examining the application's manifest.", alias="appPackageId")
    max_depth: Optional[StrictInt] = Field(default=None, description="The max depth of the traversal stack Robo can explore. Needs to be at least 2 to make Robo explore the app beyond the first activity. Default is 50.", alias="maxDepth")
    max_steps: Optional[StrictInt] = Field(default=None, description="The max number of steps Robo can execute. Default is no limit.", alias="maxSteps")
    robo_directives: Optional[List[RoboDirective]] = Field(default=None, description="A set of directives Robo should apply during the crawl. This allows users to customize the crawl. For example, the username and password for a test account can be provided.", alias="roboDirectives")
    robo_mode: Optional[StrictStr] = Field(default=None, description="The mode in which Robo should run. Most clients should allow the server to populate this field automatically.", alias="roboMode")
    robo_script: Optional[FileReference] = Field(default=None, alias="roboScript")
    starting_intents: Optional[List[RoboStartingIntent]] = Field(default=None, description="The intents used to launch the app for the crawl. If none are provided, then the main launcher activity is launched. If some are provided, then only those provided are launched (the main launcher activity must be provided explicitly).", alias="startingIntents")
    __properties: ClassVar[List[str]] = ["appApk", "appBundle", "appInitialActivity", "appPackageId", "maxDepth", "maxSteps", "roboDirectives", "roboMode", "roboScript", "startingIntents"]

    @field_validator('robo_mode')
    def robo_mode_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['ROBO_MODE_UNSPECIFIED', 'ROBO_VERSION_1', 'ROBO_VERSION_2']):
            raise ValueError("must be one of enum values ('ROBO_MODE_UNSPECIFIED', 'ROBO_VERSION_1', 'ROBO_VERSION_2')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AndroidRoboTest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of app_apk
        if self.app_apk:
            _dict['appApk'] = self.app_apk.to_dict()
        # override the default output from pydantic by calling `to_dict()` of app_bundle
        if self.app_bundle:
            _dict['appBundle'] = self.app_bundle.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in robo_directives (list)
        _items = []
        if self.robo_directives:
            for _item_robo_directives in self.robo_directives:
                if _item_robo_directives:
                    _items.append(_item_robo_directives.to_dict())
            _dict['roboDirectives'] = _items
        # override the default output from pydantic by calling `to_dict()` of robo_script
        if self.robo_script:
            _dict['roboScript'] = self.robo_script.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in starting_intents (list)
        _items = []
        if self.starting_intents:
            for _item_starting_intents in self.starting_intents:
                if _item_starting_intents:
                    _items.append(_item_starting_intents.to_dict())
            _dict['startingIntents'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AndroidRoboTest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "appApk": FileReference.from_dict(obj["appApk"]) if obj.get("appApk") is not None else None,
            "appBundle": AppBundle.from_dict(obj["appBundle"]) if obj.get("appBundle") is not None else None,
            "appInitialActivity": obj.get("appInitialActivity"),
            "appPackageId": obj.get("appPackageId"),
            "maxDepth": obj.get("maxDepth"),
            "maxSteps": obj.get("maxSteps"),
            "roboDirectives": [RoboDirective.from_dict(_item) for _item in obj["roboDirectives"]] if obj.get("roboDirectives") is not None else None,
            "roboMode": obj.get("roboMode"),
            "roboScript": FileReference.from_dict(obj["roboScript"]) if obj.get("roboScript") is not None else None,
            "startingIntents": [RoboStartingIntent.from_dict(_item) for _item in obj["startingIntents"]] if obj.get("startingIntents") is not None else None
        })
        return _obj



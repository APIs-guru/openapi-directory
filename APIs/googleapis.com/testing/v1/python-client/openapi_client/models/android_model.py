# coding: utf-8

"""
    Cloud Testing API

    Allows developers to run automated tests for their mobile applications on Google infrastructure.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.per_android_version_info import PerAndroidVersionInfo
from typing import Optional, Set
from typing_extensions import Self

class AndroidModel(BaseModel):
    """
    A description of an Android device tests may be run on.
    """ # noqa: E501
    brand: Optional[StrictStr] = Field(default=None, description="The company that this device is branded with. Example: \"Google\", \"Samsung\".")
    codename: Optional[StrictStr] = Field(default=None, description="The name of the industrial design. This corresponds to android.os.Build.DEVICE.")
    form: Optional[StrictStr] = Field(default=None, description="Whether this device is virtual or physical.")
    form_factor: Optional[StrictStr] = Field(default=None, description="Whether this device is a phone, tablet, wearable, etc.", alias="formFactor")
    id: Optional[StrictStr] = Field(default=None, description="The unique opaque id for this model. Use this for invoking the TestExecutionService.")
    low_fps_video_recording: Optional[StrictBool] = Field(default=None, description="True if and only if tests with this model are recorded by stitching together screenshots. See use_low_spec_video_recording in device config.", alias="lowFpsVideoRecording")
    manufacturer: Optional[StrictStr] = Field(default=None, description="The manufacturer of this device.")
    name: Optional[StrictStr] = Field(default=None, description="The human-readable marketing name for this device model. Examples: \"Nexus 5\", \"Galaxy S5\".")
    per_version_info: Optional[List[PerAndroidVersionInfo]] = Field(default=None, description="Version-specific information of an Android model.", alias="perVersionInfo")
    screen_density: Optional[StrictInt] = Field(default=None, description="Screen density in DPI. This corresponds to ro.sf.lcd_density", alias="screenDensity")
    screen_x: Optional[StrictInt] = Field(default=None, description="Screen size in the horizontal (X) dimension measured in pixels.", alias="screenX")
    screen_y: Optional[StrictInt] = Field(default=None, description="Screen size in the vertical (Y) dimension measured in pixels.", alias="screenY")
    supported_abis: Optional[List[StrictStr]] = Field(default=None, description="The list of supported ABIs for this device. This corresponds to either android.os.Build.SUPPORTED_ABIS (for API level 21 and above) or android.os.Build.CPU_ABI/CPU_ABI2. The most preferred ABI is the first element in the list. Elements are optionally prefixed by \"version_id:\" (where version_id is the id of an AndroidVersion), denoting an ABI that is supported only on a particular version.", alias="supportedAbis")
    supported_version_ids: Optional[List[StrictStr]] = Field(default=None, description="The set of Android versions this device supports.", alias="supportedVersionIds")
    tags: Optional[List[StrictStr]] = Field(default=None, description="Tags for this dimension. Examples: \"default\", \"preview\", \"deprecated\".")
    thumbnail_url: Optional[StrictStr] = Field(default=None, description="URL of a thumbnail image (photo) of the device.", alias="thumbnailUrl")
    __properties: ClassVar[List[str]] = ["brand", "codename", "form", "formFactor", "id", "lowFpsVideoRecording", "manufacturer", "name", "perVersionInfo", "screenDensity", "screenX", "screenY", "supportedAbis", "supportedVersionIds", "tags", "thumbnailUrl"]

    @field_validator('form')
    def form_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['DEVICE_FORM_UNSPECIFIED', 'VIRTUAL', 'PHYSICAL', 'EMULATOR']):
            raise ValueError("must be one of enum values ('DEVICE_FORM_UNSPECIFIED', 'VIRTUAL', 'PHYSICAL', 'EMULATOR')")
        return value

    @field_validator('form_factor')
    def form_factor_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['DEVICE_FORM_FACTOR_UNSPECIFIED', 'PHONE', 'TABLET', 'WEARABLE']):
            raise ValueError("must be one of enum values ('DEVICE_FORM_FACTOR_UNSPECIFIED', 'PHONE', 'TABLET', 'WEARABLE')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AndroidModel from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in per_version_info (list)
        _items = []
        if self.per_version_info:
            for _item_per_version_info in self.per_version_info:
                if _item_per_version_info:
                    _items.append(_item_per_version_info.to_dict())
            _dict['perVersionInfo'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AndroidModel from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "brand": obj.get("brand"),
            "codename": obj.get("codename"),
            "form": obj.get("form"),
            "formFactor": obj.get("formFactor"),
            "id": obj.get("id"),
            "lowFpsVideoRecording": obj.get("lowFpsVideoRecording"),
            "manufacturer": obj.get("manufacturer"),
            "name": obj.get("name"),
            "perVersionInfo": [PerAndroidVersionInfo.from_dict(_item) for _item in obj["perVersionInfo"]] if obj.get("perVersionInfo") is not None else None,
            "screenDensity": obj.get("screenDensity"),
            "screenX": obj.get("screenX"),
            "screenY": obj.get("screenY"),
            "supportedAbis": obj.get("supportedAbis"),
            "supportedVersionIds": obj.get("supportedVersionIds"),
            "tags": obj.get("tags"),
            "thumbnailUrl": obj.get("thumbnailUrl")
        })
        return _obj



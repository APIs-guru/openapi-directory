# coding: utf-8

"""
    Cloud Testing API

    Allows developers to run automated tests for their mobile applications on Google infrastructure.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.android_device import AndroidDevice
from openapi_client.models.session_state_event import SessionStateEvent
from typing import Optional, Set
from typing_extensions import Self

class DeviceSession(BaseModel):
    """
    Protobuf message describing the device message, used from several RPCs.
    """ # noqa: E501
    active_start_time: Optional[StrictStr] = Field(default=None, description="Output only. The timestamp that the session first became ACTIVE.", alias="activeStartTime")
    android_device: Optional[AndroidDevice] = Field(default=None, alias="androidDevice")
    create_time: Optional[StrictStr] = Field(default=None, description="Output only. The time that the Session was created.", alias="createTime")
    display_name: Optional[StrictStr] = Field(default=None, description="Output only. The title of the DeviceSession to be presented in the UI.", alias="displayName")
    expire_time: Optional[StrictStr] = Field(default=None, description="Optional. If the device is still in use at this time, any connections will be ended and the SessionState will transition from ACTIVE to FINISHED.", alias="expireTime")
    inactivity_timeout: Optional[StrictStr] = Field(default=None, description="Output only. The interval of time that this device must be interacted with before it transitions from ACTIVE to TIMEOUT_INACTIVITY.", alias="inactivityTimeout")
    name: Optional[StrictStr] = Field(default=None, description="Optional. Name of the DeviceSession, e.g. \"projects/{project_id}/deviceSessions/{session_id}\"")
    state: Optional[StrictStr] = Field(default=None, description="Output only. Current state of the DeviceSession.")
    state_histories: Optional[List[SessionStateEvent]] = Field(default=None, description="Output only. The historical state transitions of the session_state message including the current session state.", alias="stateHistories")
    ttl: Optional[StrictStr] = Field(default=None, description="Optional. The amount of time that a device will be initially allocated for. This can eventually be extended with the UpdateDeviceSession RPC. Default: 30 minutes.")
    __properties: ClassVar[List[str]] = ["activeStartTime", "androidDevice", "createTime", "displayName", "expireTime", "inactivityTimeout", "name", "state", "stateHistories", "ttl"]

    @field_validator('state')
    def state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['SESSION_STATE_UNSPECIFIED', 'REQUESTED', 'PENDING', 'ACTIVE', 'EXPIRED', 'FINISHED', 'UNAVAILABLE', 'ERROR']):
            raise ValueError("must be one of enum values ('SESSION_STATE_UNSPECIFIED', 'REQUESTED', 'PENDING', 'ACTIVE', 'EXPIRED', 'FINISHED', 'UNAVAILABLE', 'ERROR')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DeviceSession from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "active_start_time",
            "create_time",
            "display_name",
            "inactivity_timeout",
            "state",
            "state_histories",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of android_device
        if self.android_device:
            _dict['androidDevice'] = self.android_device.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in state_histories (list)
        _items = []
        if self.state_histories:
            for _item_state_histories in self.state_histories:
                if _item_state_histories:
                    _items.append(_item_state_histories.to_dict())
            _dict['stateHistories'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DeviceSession from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "activeStartTime": obj.get("activeStartTime"),
            "androidDevice": AndroidDevice.from_dict(obj["androidDevice"]) if obj.get("androidDevice") is not None else None,
            "createTime": obj.get("createTime"),
            "displayName": obj.get("displayName"),
            "expireTime": obj.get("expireTime"),
            "inactivityTimeout": obj.get("inactivityTimeout"),
            "name": obj.get("name"),
            "state": obj.get("state"),
            "stateHistories": [SessionStateEvent.from_dict(_item) for _item in obj["stateHistories"]] if obj.get("stateHistories") is not None else None,
            "ttl": obj.get("ttl")
        })
        return _obj



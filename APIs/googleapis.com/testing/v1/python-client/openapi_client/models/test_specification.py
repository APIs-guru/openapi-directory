# coding: utf-8

"""
    Cloud Testing API

    Allows developers to run automated tests for their mobile applications on Google infrastructure.

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.android_instrumentation_test import AndroidInstrumentationTest
from openapi_client.models.android_robo_test import AndroidRoboTest
from openapi_client.models.android_test_loop import AndroidTestLoop
from openapi_client.models.ios_robo_test import IosRoboTest
from openapi_client.models.ios_test_loop import IosTestLoop
from openapi_client.models.ios_test_setup import IosTestSetup
from openapi_client.models.ios_xc_test import IosXcTest
from openapi_client.models.test_setup import TestSetup
from typing import Optional, Set
from typing_extensions import Self

class TestSpecification(BaseModel):
    """
    A description of how to run the test.
    """ # noqa: E501
    android_instrumentation_test: Optional[AndroidInstrumentationTest] = Field(default=None, alias="androidInstrumentationTest")
    android_robo_test: Optional[AndroidRoboTest] = Field(default=None, alias="androidRoboTest")
    android_test_loop: Optional[AndroidTestLoop] = Field(default=None, alias="androidTestLoop")
    disable_performance_metrics: Optional[StrictBool] = Field(default=None, description="Disables performance metrics recording. May reduce test latency.", alias="disablePerformanceMetrics")
    disable_video_recording: Optional[StrictBool] = Field(default=None, description="Disables video recording. May reduce test latency.", alias="disableVideoRecording")
    ios_robo_test: Optional[IosRoboTest] = Field(default=None, alias="iosRoboTest")
    ios_test_loop: Optional[IosTestLoop] = Field(default=None, alias="iosTestLoop")
    ios_test_setup: Optional[IosTestSetup] = Field(default=None, alias="iosTestSetup")
    ios_xc_test: Optional[IosXcTest] = Field(default=None, alias="iosXcTest")
    test_setup: Optional[TestSetup] = Field(default=None, alias="testSetup")
    test_timeout: Optional[StrictStr] = Field(default=None, description="Max time a test execution is allowed to run before it is automatically cancelled. The default value is 5 min.", alias="testTimeout")
    __properties: ClassVar[List[str]] = ["androidInstrumentationTest", "androidRoboTest", "androidTestLoop", "disablePerformanceMetrics", "disableVideoRecording", "iosRoboTest", "iosTestLoop", "iosTestSetup", "iosXcTest", "testSetup", "testTimeout"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of TestSpecification from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of android_instrumentation_test
        if self.android_instrumentation_test:
            _dict['androidInstrumentationTest'] = self.android_instrumentation_test.to_dict()
        # override the default output from pydantic by calling `to_dict()` of android_robo_test
        if self.android_robo_test:
            _dict['androidRoboTest'] = self.android_robo_test.to_dict()
        # override the default output from pydantic by calling `to_dict()` of android_test_loop
        if self.android_test_loop:
            _dict['androidTestLoop'] = self.android_test_loop.to_dict()
        # override the default output from pydantic by calling `to_dict()` of ios_robo_test
        if self.ios_robo_test:
            _dict['iosRoboTest'] = self.ios_robo_test.to_dict()
        # override the default output from pydantic by calling `to_dict()` of ios_test_loop
        if self.ios_test_loop:
            _dict['iosTestLoop'] = self.ios_test_loop.to_dict()
        # override the default output from pydantic by calling `to_dict()` of ios_test_setup
        if self.ios_test_setup:
            _dict['iosTestSetup'] = self.ios_test_setup.to_dict()
        # override the default output from pydantic by calling `to_dict()` of ios_xc_test
        if self.ios_xc_test:
            _dict['iosXcTest'] = self.ios_xc_test.to_dict()
        # override the default output from pydantic by calling `to_dict()` of test_setup
        if self.test_setup:
            _dict['testSetup'] = self.test_setup.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of TestSpecification from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "androidInstrumentationTest": AndroidInstrumentationTest.from_dict(obj["androidInstrumentationTest"]) if obj.get("androidInstrumentationTest") is not None else None,
            "androidRoboTest": AndroidRoboTest.from_dict(obj["androidRoboTest"]) if obj.get("androidRoboTest") is not None else None,
            "androidTestLoop": AndroidTestLoop.from_dict(obj["androidTestLoop"]) if obj.get("androidTestLoop") is not None else None,
            "disablePerformanceMetrics": obj.get("disablePerformanceMetrics"),
            "disableVideoRecording": obj.get("disableVideoRecording"),
            "iosRoboTest": IosRoboTest.from_dict(obj["iosRoboTest"]) if obj.get("iosRoboTest") is not None else None,
            "iosTestLoop": IosTestLoop.from_dict(obj["iosTestLoop"]) if obj.get("iosTestLoop") is not None else None,
            "iosTestSetup": IosTestSetup.from_dict(obj["iosTestSetup"]) if obj.get("iosTestSetup") is not None else None,
            "iosXcTest": IosXcTest.from_dict(obj["iosXcTest"]) if obj.get("iosXcTest") is not None else None,
            "testSetup": TestSetup.from_dict(obj["testSetup"]) if obj.get("testSetup") is not None else None,
            "testTimeout": obj.get("testTimeout")
        })
        return _obj



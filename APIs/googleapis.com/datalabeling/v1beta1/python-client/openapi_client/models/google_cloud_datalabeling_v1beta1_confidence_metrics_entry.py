# coding: utf-8

"""
    Data Labeling API

    Public API for Google Cloud AI Data Labeling Service.

    The version of the OpenAPI document: v1beta1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudDatalabelingV1beta1ConfidenceMetricsEntry(BaseModel):
    """
    GoogleCloudDatalabelingV1beta1ConfidenceMetricsEntry
    """ # noqa: E501
    confidence_threshold: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Threshold used for this entry. For classification tasks, this is a classification threshold: a predicted label is categorized as positive or negative (in the context of this point on the PR curve) based on whether the label's score meets this threshold. For image object detection (bounding box) tasks, this is the [intersection-over-union (IOU)](/vision/automl/object-detection/docs/evaluate#intersection-over-union) threshold for the context of this point on the PR curve.", alias="confidenceThreshold")
    f1_score: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Harmonic mean of recall and precision.", alias="f1Score")
    f1_score_at1: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The harmonic mean of recall_at1 and precision_at1.", alias="f1ScoreAt1")
    f1_score_at5: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The harmonic mean of recall_at5 and precision_at5.", alias="f1ScoreAt5")
    precision: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Precision value.")
    precision_at1: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Precision value for entries with label that has highest score.", alias="precisionAt1")
    precision_at5: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Precision value for entries with label that has highest 5 scores.", alias="precisionAt5")
    recall: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Recall value.")
    recall_at1: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Recall value for entries with label that has highest score.", alias="recallAt1")
    recall_at5: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Recall value for entries with label that has highest 5 scores.", alias="recallAt5")
    __properties: ClassVar[List[str]] = ["confidenceThreshold", "f1Score", "f1ScoreAt1", "f1ScoreAt5", "precision", "precisionAt1", "precisionAt5", "recall", "recallAt1", "recallAt5"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudDatalabelingV1beta1ConfidenceMetricsEntry from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudDatalabelingV1beta1ConfidenceMetricsEntry from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "confidenceThreshold": obj.get("confidenceThreshold"),
            "f1Score": obj.get("f1Score"),
            "f1ScoreAt1": obj.get("f1ScoreAt1"),
            "f1ScoreAt5": obj.get("f1ScoreAt5"),
            "precision": obj.get("precision"),
            "precisionAt1": obj.get("precisionAt1"),
            "precisionAt5": obj.get("precisionAt5"),
            "recall": obj.get("recall"),
            "recallAt1": obj.get("recallAt1"),
            "recallAt5": obj.get("recallAt5")
        })
        return _obj



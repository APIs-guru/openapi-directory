# coding: utf-8

"""
    Data Labeling API

    Public API for Google Cloud AI Data Labeling Service.

    The version of the OpenAPI document: v1beta1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_cloud_datalabeling_v1p1alpha1_label_stats import GoogleCloudDatalabelingV1p1alpha1LabelStats
from openapi_client.models.google_cloud_datalabeling_v1p1alpha1_output_config import GoogleCloudDatalabelingV1p1alpha1OutputConfig
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudDatalabelingV1p1alpha1ExportDataOperationResponse(BaseModel):
    """
    Response used for ExportDataset longrunning operation.
    """ # noqa: E501
    annotated_dataset: Optional[StrictStr] = Field(default=None, description="Output only. The name of annotated dataset in format \"projects/*/datasets/*/annotatedDatasets/*\".", alias="annotatedDataset")
    dataset: Optional[StrictStr] = Field(default=None, description="Ouptut only. The name of dataset. \"projects/*/datasets/*\"")
    export_count: Optional[StrictInt] = Field(default=None, description="Output only. Number of examples exported successfully.", alias="exportCount")
    label_stats: Optional[GoogleCloudDatalabelingV1p1alpha1LabelStats] = Field(default=None, alias="labelStats")
    output_config: Optional[GoogleCloudDatalabelingV1p1alpha1OutputConfig] = Field(default=None, alias="outputConfig")
    total_count: Optional[StrictInt] = Field(default=None, description="Output only. Total number of examples requested to export", alias="totalCount")
    __properties: ClassVar[List[str]] = ["annotatedDataset", "dataset", "exportCount", "labelStats", "outputConfig", "totalCount"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudDatalabelingV1p1alpha1ExportDataOperationResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of label_stats
        if self.label_stats:
            _dict['labelStats'] = self.label_stats.to_dict()
        # override the default output from pydantic by calling `to_dict()` of output_config
        if self.output_config:
            _dict['outputConfig'] = self.output_config.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudDatalabelingV1p1alpha1ExportDataOperationResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "annotatedDataset": obj.get("annotatedDataset"),
            "dataset": obj.get("dataset"),
            "exportCount": obj.get("exportCount"),
            "labelStats": GoogleCloudDatalabelingV1p1alpha1LabelStats.from_dict(obj["labelStats"]) if obj.get("labelStats") is not None else None,
            "outputConfig": GoogleCloudDatalabelingV1p1alpha1OutputConfig.from_dict(obj["outputConfig"]) if obj.get("outputConfig") is not None else None,
            "totalCount": obj.get("totalCount")
        })
        return _obj



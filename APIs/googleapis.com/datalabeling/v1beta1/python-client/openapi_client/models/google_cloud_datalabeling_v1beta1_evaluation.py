# coding: utf-8

"""
    Data Labeling API

    Public API for Google Cloud AI Data Labeling Service.

    The version of the OpenAPI document: v1beta1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_cloud_datalabeling_v1beta1_evaluation_config import GoogleCloudDatalabelingV1beta1EvaluationConfig
from openapi_client.models.google_cloud_datalabeling_v1beta1_evaluation_metrics import GoogleCloudDatalabelingV1beta1EvaluationMetrics
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudDatalabelingV1beta1Evaluation(BaseModel):
    """
    Describes an evaluation between a machine learning model's predictions and ground truth labels. Created when an EvaluationJob runs successfully.
    """ # noqa: E501
    annotation_type: Optional[StrictStr] = Field(default=None, description="Output only. Type of task that the model version being evaluated performs, as defined in the evaluationJobConfig.inputConfig.annotationType field of the evaluation job that created this evaluation.", alias="annotationType")
    config: Optional[GoogleCloudDatalabelingV1beta1EvaluationConfig] = None
    create_time: Optional[StrictStr] = Field(default=None, description="Output only. Timestamp for when this evaluation was created.", alias="createTime")
    evaluated_item_count: Optional[StrictStr] = Field(default=None, description="Output only. The number of items in the ground truth dataset that were used for this evaluation. Only populated when the evaulation is for certain AnnotationTypes.", alias="evaluatedItemCount")
    evaluation_job_run_time: Optional[StrictStr] = Field(default=None, description="Output only. Timestamp for when the evaluation job that created this evaluation ran.", alias="evaluationJobRunTime")
    evaluation_metrics: Optional[GoogleCloudDatalabelingV1beta1EvaluationMetrics] = Field(default=None, alias="evaluationMetrics")
    name: Optional[StrictStr] = Field(default=None, description="Output only. Resource name of an evaluation. The name has the following format: \"projects/{project_id}/datasets/{dataset_id}/evaluations/ {evaluation_id}'")
    __properties: ClassVar[List[str]] = ["annotationType", "config", "createTime", "evaluatedItemCount", "evaluationJobRunTime", "evaluationMetrics", "name"]

    @field_validator('annotation_type')
    def annotation_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['ANNOTATION_TYPE_UNSPECIFIED', 'IMAGE_CLASSIFICATION_ANNOTATION', 'IMAGE_BOUNDING_BOX_ANNOTATION', 'IMAGE_ORIENTED_BOUNDING_BOX_ANNOTATION', 'IMAGE_BOUNDING_POLY_ANNOTATION', 'IMAGE_POLYLINE_ANNOTATION', 'IMAGE_SEGMENTATION_ANNOTATION', 'VIDEO_SHOTS_CLASSIFICATION_ANNOTATION', 'VIDEO_OBJECT_TRACKING_ANNOTATION', 'VIDEO_OBJECT_DETECTION_ANNOTATION', 'VIDEO_EVENT_ANNOTATION', 'TEXT_CLASSIFICATION_ANNOTATION', 'TEXT_ENTITY_EXTRACTION_ANNOTATION', 'GENERAL_CLASSIFICATION_ANNOTATION']):
            raise ValueError("must be one of enum values ('ANNOTATION_TYPE_UNSPECIFIED', 'IMAGE_CLASSIFICATION_ANNOTATION', 'IMAGE_BOUNDING_BOX_ANNOTATION', 'IMAGE_ORIENTED_BOUNDING_BOX_ANNOTATION', 'IMAGE_BOUNDING_POLY_ANNOTATION', 'IMAGE_POLYLINE_ANNOTATION', 'IMAGE_SEGMENTATION_ANNOTATION', 'VIDEO_SHOTS_CLASSIFICATION_ANNOTATION', 'VIDEO_OBJECT_TRACKING_ANNOTATION', 'VIDEO_OBJECT_DETECTION_ANNOTATION', 'VIDEO_EVENT_ANNOTATION', 'TEXT_CLASSIFICATION_ANNOTATION', 'TEXT_ENTITY_EXTRACTION_ANNOTATION', 'GENERAL_CLASSIFICATION_ANNOTATION')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudDatalabelingV1beta1Evaluation from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of config
        if self.config:
            _dict['config'] = self.config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of evaluation_metrics
        if self.evaluation_metrics:
            _dict['evaluationMetrics'] = self.evaluation_metrics.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudDatalabelingV1beta1Evaluation from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "annotationType": obj.get("annotationType"),
            "config": GoogleCloudDatalabelingV1beta1EvaluationConfig.from_dict(obj["config"]) if obj.get("config") is not None else None,
            "createTime": obj.get("createTime"),
            "evaluatedItemCount": obj.get("evaluatedItemCount"),
            "evaluationJobRunTime": obj.get("evaluationJobRunTime"),
            "evaluationMetrics": GoogleCloudDatalabelingV1beta1EvaluationMetrics.from_dict(obj["evaluationMetrics"]) if obj.get("evaluationMetrics") is not None else None,
            "name": obj.get("name")
        })
        return _obj



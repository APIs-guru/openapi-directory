# coding: utf-8

"""
    Data Labeling API

    Public API for Google Cloud AI Data Labeling Service.

    The version of the OpenAPI document: v1beta1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudDatalabelingV1beta1HumanAnnotationConfig(BaseModel):
    """
    Configuration for how human labeling task should be done.
    """ # noqa: E501
    annotated_dataset_description: Optional[StrictStr] = Field(default=None, description="Optional. A human-readable description for AnnotatedDataset. The description can be up to 10000 characters long.", alias="annotatedDatasetDescription")
    annotated_dataset_display_name: Optional[StrictStr] = Field(default=None, description="Required. A human-readable name for AnnotatedDataset defined by users. Maximum of 64 characters .", alias="annotatedDatasetDisplayName")
    contributor_emails: Optional[List[StrictStr]] = Field(default=None, description="Optional. If you want your own labeling contributors to manage and work on this labeling request, you can set these contributors here. We will give them access to the question types in crowdcompute. Note that these emails must be registered in crowdcompute worker UI: https://crowd-compute.appspot.com/", alias="contributorEmails")
    instruction: Optional[StrictStr] = Field(default=None, description="Required. Instruction resource name.")
    label_group: Optional[StrictStr] = Field(default=None, description="Optional. A human-readable label used to logically group labeling tasks. This string must match the regular expression `[a-zA-Z\\\\d_-]{0,128}`.", alias="labelGroup")
    language_code: Optional[StrictStr] = Field(default=None, description="Optional. The Language of this question, as a [BCP-47](https://www.rfc-editor.org/rfc/bcp/bcp47.txt). Default value is en-US. Only need to set this when task is language related. For example, French text classification.", alias="languageCode")
    question_duration: Optional[StrictStr] = Field(default=None, description="Optional. Maximum duration for contributors to answer a question. Maximum is 3600 seconds. Default is 3600 seconds.", alias="questionDuration")
    replica_count: Optional[StrictInt] = Field(default=None, description="Optional. Replication of questions. Each question will be sent to up to this number of contributors to label. Aggregated answers will be returned. Default is set to 1. For image related labeling, valid values are 1, 3, 5.", alias="replicaCount")
    user_email_address: Optional[StrictStr] = Field(default=None, description="Email of the user who started the labeling task and should be notified by email. If empty no notification will be sent.", alias="userEmailAddress")
    __properties: ClassVar[List[str]] = ["annotatedDatasetDescription", "annotatedDatasetDisplayName", "contributorEmails", "instruction", "labelGroup", "languageCode", "questionDuration", "replicaCount", "userEmailAddress"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudDatalabelingV1beta1HumanAnnotationConfig from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudDatalabelingV1beta1HumanAnnotationConfig from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "annotatedDatasetDescription": obj.get("annotatedDatasetDescription"),
            "annotatedDatasetDisplayName": obj.get("annotatedDatasetDisplayName"),
            "contributorEmails": obj.get("contributorEmails"),
            "instruction": obj.get("instruction"),
            "labelGroup": obj.get("labelGroup"),
            "languageCode": obj.get("languageCode"),
            "questionDuration": obj.get("questionDuration"),
            "replicaCount": obj.get("replicaCount"),
            "userEmailAddress": obj.get("userEmailAddress")
        })
        return _obj



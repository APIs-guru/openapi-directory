# coding: utf-8

"""
    Data Labeling API

    Public API for Google Cloud AI Data Labeling Service.

    The version of the OpenAPI document: v1beta1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_cloud_datalabeling_v1beta1_big_query_source import GoogleCloudDatalabelingV1beta1BigQuerySource
from openapi_client.models.google_cloud_datalabeling_v1beta1_classification_metadata import GoogleCloudDatalabelingV1beta1ClassificationMetadata
from openapi_client.models.google_cloud_datalabeling_v1beta1_gcs_source import GoogleCloudDatalabelingV1beta1GcsSource
from openapi_client.models.google_cloud_datalabeling_v1beta1_text_metadata import GoogleCloudDatalabelingV1beta1TextMetadata
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudDatalabelingV1beta1InputConfig(BaseModel):
    """
    The configuration of input data, including data type, location, etc.
    """ # noqa: E501
    annotation_type: Optional[StrictStr] = Field(default=None, description="Optional. The type of annotation to be performed on this data. You must specify this field if you are using this InputConfig in an EvaluationJob.", alias="annotationType")
    bigquery_source: Optional[GoogleCloudDatalabelingV1beta1BigQuerySource] = Field(default=None, alias="bigquerySource")
    classification_metadata: Optional[GoogleCloudDatalabelingV1beta1ClassificationMetadata] = Field(default=None, alias="classificationMetadata")
    data_type: Optional[StrictStr] = Field(default=None, description="Required. Data type must be specifed when user tries to import data.", alias="dataType")
    gcs_source: Optional[GoogleCloudDatalabelingV1beta1GcsSource] = Field(default=None, alias="gcsSource")
    text_metadata: Optional[GoogleCloudDatalabelingV1beta1TextMetadata] = Field(default=None, alias="textMetadata")
    __properties: ClassVar[List[str]] = ["annotationType", "bigquerySource", "classificationMetadata", "dataType", "gcsSource", "textMetadata"]

    @field_validator('annotation_type')
    def annotation_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['ANNOTATION_TYPE_UNSPECIFIED', 'IMAGE_CLASSIFICATION_ANNOTATION', 'IMAGE_BOUNDING_BOX_ANNOTATION', 'IMAGE_ORIENTED_BOUNDING_BOX_ANNOTATION', 'IMAGE_BOUNDING_POLY_ANNOTATION', 'IMAGE_POLYLINE_ANNOTATION', 'IMAGE_SEGMENTATION_ANNOTATION', 'VIDEO_SHOTS_CLASSIFICATION_ANNOTATION', 'VIDEO_OBJECT_TRACKING_ANNOTATION', 'VIDEO_OBJECT_DETECTION_ANNOTATION', 'VIDEO_EVENT_ANNOTATION', 'TEXT_CLASSIFICATION_ANNOTATION', 'TEXT_ENTITY_EXTRACTION_ANNOTATION', 'GENERAL_CLASSIFICATION_ANNOTATION']):
            raise ValueError("must be one of enum values ('ANNOTATION_TYPE_UNSPECIFIED', 'IMAGE_CLASSIFICATION_ANNOTATION', 'IMAGE_BOUNDING_BOX_ANNOTATION', 'IMAGE_ORIENTED_BOUNDING_BOX_ANNOTATION', 'IMAGE_BOUNDING_POLY_ANNOTATION', 'IMAGE_POLYLINE_ANNOTATION', 'IMAGE_SEGMENTATION_ANNOTATION', 'VIDEO_SHOTS_CLASSIFICATION_ANNOTATION', 'VIDEO_OBJECT_TRACKING_ANNOTATION', 'VIDEO_OBJECT_DETECTION_ANNOTATION', 'VIDEO_EVENT_ANNOTATION', 'TEXT_CLASSIFICATION_ANNOTATION', 'TEXT_ENTITY_EXTRACTION_ANNOTATION', 'GENERAL_CLASSIFICATION_ANNOTATION')")
        return value

    @field_validator('data_type')
    def data_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['DATA_TYPE_UNSPECIFIED', 'IMAGE', 'VIDEO', 'TEXT', 'GENERAL_DATA']):
            raise ValueError("must be one of enum values ('DATA_TYPE_UNSPECIFIED', 'IMAGE', 'VIDEO', 'TEXT', 'GENERAL_DATA')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudDatalabelingV1beta1InputConfig from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of bigquery_source
        if self.bigquery_source:
            _dict['bigquerySource'] = self.bigquery_source.to_dict()
        # override the default output from pydantic by calling `to_dict()` of classification_metadata
        if self.classification_metadata:
            _dict['classificationMetadata'] = self.classification_metadata.to_dict()
        # override the default output from pydantic by calling `to_dict()` of gcs_source
        if self.gcs_source:
            _dict['gcsSource'] = self.gcs_source.to_dict()
        # override the default output from pydantic by calling `to_dict()` of text_metadata
        if self.text_metadata:
            _dict['textMetadata'] = self.text_metadata.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudDatalabelingV1beta1InputConfig from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "annotationType": obj.get("annotationType"),
            "bigquerySource": GoogleCloudDatalabelingV1beta1BigQuerySource.from_dict(obj["bigquerySource"]) if obj.get("bigquerySource") is not None else None,
            "classificationMetadata": GoogleCloudDatalabelingV1beta1ClassificationMetadata.from_dict(obj["classificationMetadata"]) if obj.get("classificationMetadata") is not None else None,
            "dataType": obj.get("dataType"),
            "gcsSource": GoogleCloudDatalabelingV1beta1GcsSource.from_dict(obj["gcsSource"]) if obj.get("gcsSource") is not None else None,
            "textMetadata": GoogleCloudDatalabelingV1beta1TextMetadata.from_dict(obj["textMetadata"]) if obj.get("textMetadata") is not None else None
        })
        return _obj



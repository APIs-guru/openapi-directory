# coding: utf-8

"""
    Data Labeling API

    Public API for Google Cloud AI Data Labeling Service.

    The version of the OpenAPI document: v1beta1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_cloud_datalabeling_v1beta1_csv_instruction import GoogleCloudDatalabelingV1beta1CsvInstruction
from openapi_client.models.google_cloud_datalabeling_v1beta1_pdf_instruction import GoogleCloudDatalabelingV1beta1PdfInstruction
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudDatalabelingV1beta1Instruction(BaseModel):
    """
    Instruction of how to perform the labeling task for human operators. Currently only PDF instruction is supported.
    """ # noqa: E501
    blocking_resources: Optional[List[StrictStr]] = Field(default=None, description="Output only. The names of any related resources that are blocking changes to the instruction.", alias="blockingResources")
    create_time: Optional[StrictStr] = Field(default=None, description="Output only. Creation time of instruction.", alias="createTime")
    csv_instruction: Optional[GoogleCloudDatalabelingV1beta1CsvInstruction] = Field(default=None, alias="csvInstruction")
    data_type: Optional[StrictStr] = Field(default=None, description="Required. The data type of this instruction.", alias="dataType")
    description: Optional[StrictStr] = Field(default=None, description="Optional. User-provided description of the instruction. The description can be up to 10000 characters long.")
    display_name: Optional[StrictStr] = Field(default=None, description="Required. The display name of the instruction. Maximum of 64 characters.", alias="displayName")
    name: Optional[StrictStr] = Field(default=None, description="Output only. Instruction resource name, format: projects/{project_id}/instructions/{instruction_id}")
    pdf_instruction: Optional[GoogleCloudDatalabelingV1beta1PdfInstruction] = Field(default=None, alias="pdfInstruction")
    update_time: Optional[StrictStr] = Field(default=None, description="Output only. Last update time of instruction.", alias="updateTime")
    __properties: ClassVar[List[str]] = ["blockingResources", "createTime", "csvInstruction", "dataType", "description", "displayName", "name", "pdfInstruction", "updateTime"]

    @field_validator('data_type')
    def data_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['DATA_TYPE_UNSPECIFIED', 'IMAGE', 'VIDEO', 'TEXT', 'GENERAL_DATA']):
            raise ValueError("must be one of enum values ('DATA_TYPE_UNSPECIFIED', 'IMAGE', 'VIDEO', 'TEXT', 'GENERAL_DATA')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudDatalabelingV1beta1Instruction from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of csv_instruction
        if self.csv_instruction:
            _dict['csvInstruction'] = self.csv_instruction.to_dict()
        # override the default output from pydantic by calling `to_dict()` of pdf_instruction
        if self.pdf_instruction:
            _dict['pdfInstruction'] = self.pdf_instruction.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudDatalabelingV1beta1Instruction from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "blockingResources": obj.get("blockingResources"),
            "createTime": obj.get("createTime"),
            "csvInstruction": GoogleCloudDatalabelingV1beta1CsvInstruction.from_dict(obj["csvInstruction"]) if obj.get("csvInstruction") is not None else None,
            "dataType": obj.get("dataType"),
            "description": obj.get("description"),
            "displayName": obj.get("displayName"),
            "name": obj.get("name"),
            "pdfInstruction": GoogleCloudDatalabelingV1beta1PdfInstruction.from_dict(obj["pdfInstruction"]) if obj.get("pdfInstruction") is not None else None,
            "updateTime": obj.get("updateTime")
        })
        return _obj



# coding: utf-8

"""
    Data Labeling API

    Public API for Google Cloud AI Data Labeling Service.

    The version of the OpenAPI document: v1beta1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_cloud_datalabeling_v1beta1_annotation_metadata import GoogleCloudDatalabelingV1beta1AnnotationMetadata
from openapi_client.models.google_cloud_datalabeling_v1beta1_annotation_value import GoogleCloudDatalabelingV1beta1AnnotationValue
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudDatalabelingV1beta1Annotation(BaseModel):
    """
    Annotation for Example. Each example may have one or more annotations. For example in image classification problem, each image might have one or more labels. We call labels binded with this image an Annotation.
    """ # noqa: E501
    annotation_metadata: Optional[GoogleCloudDatalabelingV1beta1AnnotationMetadata] = Field(default=None, alias="annotationMetadata")
    annotation_sentiment: Optional[StrictStr] = Field(default=None, description="Output only. Sentiment for this annotation.", alias="annotationSentiment")
    annotation_source: Optional[StrictStr] = Field(default=None, description="Output only. The source of the annotation.", alias="annotationSource")
    annotation_value: Optional[GoogleCloudDatalabelingV1beta1AnnotationValue] = Field(default=None, alias="annotationValue")
    name: Optional[StrictStr] = Field(default=None, description="Output only. Unique name of this annotation, format is: projects/{project_id}/datasets/{dataset_id}/annotatedDatasets/{annotated_dataset}/examples/{example_id}/annotations/{annotation_id}")
    __properties: ClassVar[List[str]] = ["annotationMetadata", "annotationSentiment", "annotationSource", "annotationValue", "name"]

    @field_validator('annotation_sentiment')
    def annotation_sentiment_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['ANNOTATION_SENTIMENT_UNSPECIFIED', 'NEGATIVE', 'POSITIVE']):
            raise ValueError("must be one of enum values ('ANNOTATION_SENTIMENT_UNSPECIFIED', 'NEGATIVE', 'POSITIVE')")
        return value

    @field_validator('annotation_source')
    def annotation_source_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['ANNOTATION_SOURCE_UNSPECIFIED', 'OPERATOR']):
            raise ValueError("must be one of enum values ('ANNOTATION_SOURCE_UNSPECIFIED', 'OPERATOR')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudDatalabelingV1beta1Annotation from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of annotation_metadata
        if self.annotation_metadata:
            _dict['annotationMetadata'] = self.annotation_metadata.to_dict()
        # override the default output from pydantic by calling `to_dict()` of annotation_value
        if self.annotation_value:
            _dict['annotationValue'] = self.annotation_value.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudDatalabelingV1beta1Annotation from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "annotationMetadata": GoogleCloudDatalabelingV1beta1AnnotationMetadata.from_dict(obj["annotationMetadata"]) if obj.get("annotationMetadata") is not None else None,
            "annotationSentiment": obj.get("annotationSentiment"),
            "annotationSource": obj.get("annotationSource"),
            "annotationValue": GoogleCloudDatalabelingV1beta1AnnotationValue.from_dict(obj["annotationValue"]) if obj.get("annotationValue") is not None else None,
            "name": obj.get("name")
        })
        return _obj



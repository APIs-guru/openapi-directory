# coding: utf-8

"""
    Data Labeling API

    Public API for Google Cloud AI Data Labeling Service.

    The version of the OpenAPI document: v1beta1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_cloud_datalabeling_v1alpha1_label_image_bounding_box_operation_metadata import GoogleCloudDatalabelingV1alpha1LabelImageBoundingBoxOperationMetadata
from openapi_client.models.google_cloud_datalabeling_v1alpha1_label_image_bounding_poly_operation_metadata import GoogleCloudDatalabelingV1alpha1LabelImageBoundingPolyOperationMetadata
from openapi_client.models.google_cloud_datalabeling_v1alpha1_label_image_classification_operation_metadata import GoogleCloudDatalabelingV1alpha1LabelImageClassificationOperationMetadata
from openapi_client.models.google_cloud_datalabeling_v1alpha1_label_image_oriented_bounding_box_operation_metadata import GoogleCloudDatalabelingV1alpha1LabelImageOrientedBoundingBoxOperationMetadata
from openapi_client.models.google_cloud_datalabeling_v1alpha1_label_image_polyline_operation_metadata import GoogleCloudDatalabelingV1alpha1LabelImagePolylineOperationMetadata
from openapi_client.models.google_cloud_datalabeling_v1alpha1_label_image_segmentation_operation_metadata import GoogleCloudDatalabelingV1alpha1LabelImageSegmentationOperationMetadata
from openapi_client.models.google_cloud_datalabeling_v1alpha1_label_text_classification_operation_metadata import GoogleCloudDatalabelingV1alpha1LabelTextClassificationOperationMetadata
from openapi_client.models.google_cloud_datalabeling_v1alpha1_label_text_entity_extraction_operation_metadata import GoogleCloudDatalabelingV1alpha1LabelTextEntityExtractionOperationMetadata
from openapi_client.models.google_cloud_datalabeling_v1alpha1_label_video_classification_operation_metadata import GoogleCloudDatalabelingV1alpha1LabelVideoClassificationOperationMetadata
from openapi_client.models.google_cloud_datalabeling_v1alpha1_label_video_event_operation_metadata import GoogleCloudDatalabelingV1alpha1LabelVideoEventOperationMetadata
from openapi_client.models.google_cloud_datalabeling_v1alpha1_label_video_object_detection_operation_metadata import GoogleCloudDatalabelingV1alpha1LabelVideoObjectDetectionOperationMetadata
from openapi_client.models.google_cloud_datalabeling_v1alpha1_label_video_object_tracking_operation_metadata import GoogleCloudDatalabelingV1alpha1LabelVideoObjectTrackingOperationMetadata
from openapi_client.models.google_rpc_status import GoogleRpcStatus
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudDatalabelingV1alpha1LabelOperationMetadata(BaseModel):
    """
    Metadata of a labeling operation, such as LabelImage or LabelVideo. Next tag: 23
    """ # noqa: E501
    annotated_dataset: Optional[StrictStr] = Field(default=None, description="Output only. The name of annotated dataset in format \"projects/*/datasets/*/annotatedDatasets/*\".", alias="annotatedDataset")
    create_time: Optional[StrictStr] = Field(default=None, description="Output only. Timestamp when labeling request was created.", alias="createTime")
    dataset: Optional[StrictStr] = Field(default=None, description="Output only. The name of dataset to be labeled. \"projects/*/datasets/*\"")
    image_bounding_box_details: Optional[GoogleCloudDatalabelingV1alpha1LabelImageBoundingBoxOperationMetadata] = Field(default=None, alias="imageBoundingBoxDetails")
    image_bounding_poly_details: Optional[GoogleCloudDatalabelingV1alpha1LabelImageBoundingPolyOperationMetadata] = Field(default=None, alias="imageBoundingPolyDetails")
    image_classification_details: Optional[GoogleCloudDatalabelingV1alpha1LabelImageClassificationOperationMetadata] = Field(default=None, alias="imageClassificationDetails")
    image_oriented_bounding_box_details: Optional[GoogleCloudDatalabelingV1alpha1LabelImageOrientedBoundingBoxOperationMetadata] = Field(default=None, alias="imageOrientedBoundingBoxDetails")
    image_polyline_details: Optional[GoogleCloudDatalabelingV1alpha1LabelImagePolylineOperationMetadata] = Field(default=None, alias="imagePolylineDetails")
    image_segmentation_details: Optional[GoogleCloudDatalabelingV1alpha1LabelImageSegmentationOperationMetadata] = Field(default=None, alias="imageSegmentationDetails")
    partial_failures: Optional[List[GoogleRpcStatus]] = Field(default=None, description="Output only. Partial failures encountered. E.g. single files that couldn't be read. Status details field will contain standard GCP error details.", alias="partialFailures")
    progress_percent: Optional[StrictInt] = Field(default=None, description="Output only. Progress of label operation. Range: [0, 100].", alias="progressPercent")
    text_classification_details: Optional[GoogleCloudDatalabelingV1alpha1LabelTextClassificationOperationMetadata] = Field(default=None, alias="textClassificationDetails")
    text_entity_extraction_details: Optional[GoogleCloudDatalabelingV1alpha1LabelTextEntityExtractionOperationMetadata] = Field(default=None, alias="textEntityExtractionDetails")
    video_classification_details: Optional[GoogleCloudDatalabelingV1alpha1LabelVideoClassificationOperationMetadata] = Field(default=None, alias="videoClassificationDetails")
    video_event_details: Optional[GoogleCloudDatalabelingV1alpha1LabelVideoEventOperationMetadata] = Field(default=None, alias="videoEventDetails")
    video_object_detection_details: Optional[GoogleCloudDatalabelingV1alpha1LabelVideoObjectDetectionOperationMetadata] = Field(default=None, alias="videoObjectDetectionDetails")
    video_object_tracking_details: Optional[GoogleCloudDatalabelingV1alpha1LabelVideoObjectTrackingOperationMetadata] = Field(default=None, alias="videoObjectTrackingDetails")
    __properties: ClassVar[List[str]] = ["annotatedDataset", "createTime", "dataset", "imageBoundingBoxDetails", "imageBoundingPolyDetails", "imageClassificationDetails", "imageOrientedBoundingBoxDetails", "imagePolylineDetails", "imageSegmentationDetails", "partialFailures", "progressPercent", "textClassificationDetails", "textEntityExtractionDetails", "videoClassificationDetails", "videoEventDetails", "videoObjectDetectionDetails", "videoObjectTrackingDetails"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudDatalabelingV1alpha1LabelOperationMetadata from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of image_bounding_box_details
        if self.image_bounding_box_details:
            _dict['imageBoundingBoxDetails'] = self.image_bounding_box_details.to_dict()
        # override the default output from pydantic by calling `to_dict()` of image_bounding_poly_details
        if self.image_bounding_poly_details:
            _dict['imageBoundingPolyDetails'] = self.image_bounding_poly_details.to_dict()
        # override the default output from pydantic by calling `to_dict()` of image_classification_details
        if self.image_classification_details:
            _dict['imageClassificationDetails'] = self.image_classification_details.to_dict()
        # override the default output from pydantic by calling `to_dict()` of image_oriented_bounding_box_details
        if self.image_oriented_bounding_box_details:
            _dict['imageOrientedBoundingBoxDetails'] = self.image_oriented_bounding_box_details.to_dict()
        # override the default output from pydantic by calling `to_dict()` of image_polyline_details
        if self.image_polyline_details:
            _dict['imagePolylineDetails'] = self.image_polyline_details.to_dict()
        # override the default output from pydantic by calling `to_dict()` of image_segmentation_details
        if self.image_segmentation_details:
            _dict['imageSegmentationDetails'] = self.image_segmentation_details.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in partial_failures (list)
        _items = []
        if self.partial_failures:
            for _item_partial_failures in self.partial_failures:
                if _item_partial_failures:
                    _items.append(_item_partial_failures.to_dict())
            _dict['partialFailures'] = _items
        # override the default output from pydantic by calling `to_dict()` of text_classification_details
        if self.text_classification_details:
            _dict['textClassificationDetails'] = self.text_classification_details.to_dict()
        # override the default output from pydantic by calling `to_dict()` of text_entity_extraction_details
        if self.text_entity_extraction_details:
            _dict['textEntityExtractionDetails'] = self.text_entity_extraction_details.to_dict()
        # override the default output from pydantic by calling `to_dict()` of video_classification_details
        if self.video_classification_details:
            _dict['videoClassificationDetails'] = self.video_classification_details.to_dict()
        # override the default output from pydantic by calling `to_dict()` of video_event_details
        if self.video_event_details:
            _dict['videoEventDetails'] = self.video_event_details.to_dict()
        # override the default output from pydantic by calling `to_dict()` of video_object_detection_details
        if self.video_object_detection_details:
            _dict['videoObjectDetectionDetails'] = self.video_object_detection_details.to_dict()
        # override the default output from pydantic by calling `to_dict()` of video_object_tracking_details
        if self.video_object_tracking_details:
            _dict['videoObjectTrackingDetails'] = self.video_object_tracking_details.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudDatalabelingV1alpha1LabelOperationMetadata from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "annotatedDataset": obj.get("annotatedDataset"),
            "createTime": obj.get("createTime"),
            "dataset": obj.get("dataset"),
            "imageBoundingBoxDetails": GoogleCloudDatalabelingV1alpha1LabelImageBoundingBoxOperationMetadata.from_dict(obj["imageBoundingBoxDetails"]) if obj.get("imageBoundingBoxDetails") is not None else None,
            "imageBoundingPolyDetails": GoogleCloudDatalabelingV1alpha1LabelImageBoundingPolyOperationMetadata.from_dict(obj["imageBoundingPolyDetails"]) if obj.get("imageBoundingPolyDetails") is not None else None,
            "imageClassificationDetails": GoogleCloudDatalabelingV1alpha1LabelImageClassificationOperationMetadata.from_dict(obj["imageClassificationDetails"]) if obj.get("imageClassificationDetails") is not None else None,
            "imageOrientedBoundingBoxDetails": GoogleCloudDatalabelingV1alpha1LabelImageOrientedBoundingBoxOperationMetadata.from_dict(obj["imageOrientedBoundingBoxDetails"]) if obj.get("imageOrientedBoundingBoxDetails") is not None else None,
            "imagePolylineDetails": GoogleCloudDatalabelingV1alpha1LabelImagePolylineOperationMetadata.from_dict(obj["imagePolylineDetails"]) if obj.get("imagePolylineDetails") is not None else None,
            "imageSegmentationDetails": GoogleCloudDatalabelingV1alpha1LabelImageSegmentationOperationMetadata.from_dict(obj["imageSegmentationDetails"]) if obj.get("imageSegmentationDetails") is not None else None,
            "partialFailures": [GoogleRpcStatus.from_dict(_item) for _item in obj["partialFailures"]] if obj.get("partialFailures") is not None else None,
            "progressPercent": obj.get("progressPercent"),
            "textClassificationDetails": GoogleCloudDatalabelingV1alpha1LabelTextClassificationOperationMetadata.from_dict(obj["textClassificationDetails"]) if obj.get("textClassificationDetails") is not None else None,
            "textEntityExtractionDetails": GoogleCloudDatalabelingV1alpha1LabelTextEntityExtractionOperationMetadata.from_dict(obj["textEntityExtractionDetails"]) if obj.get("textEntityExtractionDetails") is not None else None,
            "videoClassificationDetails": GoogleCloudDatalabelingV1alpha1LabelVideoClassificationOperationMetadata.from_dict(obj["videoClassificationDetails"]) if obj.get("videoClassificationDetails") is not None else None,
            "videoEventDetails": GoogleCloudDatalabelingV1alpha1LabelVideoEventOperationMetadata.from_dict(obj["videoEventDetails"]) if obj.get("videoEventDetails") is not None else None,
            "videoObjectDetectionDetails": GoogleCloudDatalabelingV1alpha1LabelVideoObjectDetectionOperationMetadata.from_dict(obj["videoObjectDetectionDetails"]) if obj.get("videoObjectDetectionDetails") is not None else None,
            "videoObjectTrackingDetails": GoogleCloudDatalabelingV1alpha1LabelVideoObjectTrackingOperationMetadata.from_dict(obj["videoObjectTrackingDetails"]) if obj.get("videoObjectTrackingDetails") is not None else None
        })
        return _obj



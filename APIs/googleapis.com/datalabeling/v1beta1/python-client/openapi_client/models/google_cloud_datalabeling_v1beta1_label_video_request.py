# coding: utf-8

"""
    Data Labeling API

    Public API for Google Cloud AI Data Labeling Service.

    The version of the OpenAPI document: v1beta1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_cloud_datalabeling_v1beta1_event_config import GoogleCloudDatalabelingV1beta1EventConfig
from openapi_client.models.google_cloud_datalabeling_v1beta1_human_annotation_config import GoogleCloudDatalabelingV1beta1HumanAnnotationConfig
from openapi_client.models.google_cloud_datalabeling_v1beta1_object_detection_config import GoogleCloudDatalabelingV1beta1ObjectDetectionConfig
from openapi_client.models.google_cloud_datalabeling_v1beta1_object_tracking_config import GoogleCloudDatalabelingV1beta1ObjectTrackingConfig
from openapi_client.models.google_cloud_datalabeling_v1beta1_video_classification_config import GoogleCloudDatalabelingV1beta1VideoClassificationConfig
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudDatalabelingV1beta1LabelVideoRequest(BaseModel):
    """
    Request message for LabelVideo.
    """ # noqa: E501
    basic_config: Optional[GoogleCloudDatalabelingV1beta1HumanAnnotationConfig] = Field(default=None, alias="basicConfig")
    event_config: Optional[GoogleCloudDatalabelingV1beta1EventConfig] = Field(default=None, alias="eventConfig")
    feature: Optional[StrictStr] = Field(default=None, description="Required. The type of video labeling task.")
    object_detection_config: Optional[GoogleCloudDatalabelingV1beta1ObjectDetectionConfig] = Field(default=None, alias="objectDetectionConfig")
    object_tracking_config: Optional[GoogleCloudDatalabelingV1beta1ObjectTrackingConfig] = Field(default=None, alias="objectTrackingConfig")
    video_classification_config: Optional[GoogleCloudDatalabelingV1beta1VideoClassificationConfig] = Field(default=None, alias="videoClassificationConfig")
    __properties: ClassVar[List[str]] = ["basicConfig", "eventConfig", "feature", "objectDetectionConfig", "objectTrackingConfig", "videoClassificationConfig"]

    @field_validator('feature')
    def feature_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['FEATURE_UNSPECIFIED', 'CLASSIFICATION', 'OBJECT_DETECTION', 'OBJECT_TRACKING', 'EVENT']):
            raise ValueError("must be one of enum values ('FEATURE_UNSPECIFIED', 'CLASSIFICATION', 'OBJECT_DETECTION', 'OBJECT_TRACKING', 'EVENT')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudDatalabelingV1beta1LabelVideoRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of basic_config
        if self.basic_config:
            _dict['basicConfig'] = self.basic_config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of event_config
        if self.event_config:
            _dict['eventConfig'] = self.event_config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of object_detection_config
        if self.object_detection_config:
            _dict['objectDetectionConfig'] = self.object_detection_config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of object_tracking_config
        if self.object_tracking_config:
            _dict['objectTrackingConfig'] = self.object_tracking_config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of video_classification_config
        if self.video_classification_config:
            _dict['videoClassificationConfig'] = self.video_classification_config.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudDatalabelingV1beta1LabelVideoRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "basicConfig": GoogleCloudDatalabelingV1beta1HumanAnnotationConfig.from_dict(obj["basicConfig"]) if obj.get("basicConfig") is not None else None,
            "eventConfig": GoogleCloudDatalabelingV1beta1EventConfig.from_dict(obj["eventConfig"]) if obj.get("eventConfig") is not None else None,
            "feature": obj.get("feature"),
            "objectDetectionConfig": GoogleCloudDatalabelingV1beta1ObjectDetectionConfig.from_dict(obj["objectDetectionConfig"]) if obj.get("objectDetectionConfig") is not None else None,
            "objectTrackingConfig": GoogleCloudDatalabelingV1beta1ObjectTrackingConfig.from_dict(obj["objectTrackingConfig"]) if obj.get("objectTrackingConfig") is not None else None,
            "videoClassificationConfig": GoogleCloudDatalabelingV1beta1VideoClassificationConfig.from_dict(obj["videoClassificationConfig"]) if obj.get("videoClassificationConfig") is not None else None
        })
        return _obj



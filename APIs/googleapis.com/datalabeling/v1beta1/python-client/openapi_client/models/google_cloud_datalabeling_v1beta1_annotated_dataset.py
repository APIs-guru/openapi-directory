# coding: utf-8

"""
    Data Labeling API

    Public API for Google Cloud AI Data Labeling Service.

    The version of the OpenAPI document: v1beta1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_cloud_datalabeling_v1beta1_annotated_dataset_metadata import GoogleCloudDatalabelingV1beta1AnnotatedDatasetMetadata
from openapi_client.models.google_cloud_datalabeling_v1beta1_label_stats import GoogleCloudDatalabelingV1beta1LabelStats
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudDatalabelingV1beta1AnnotatedDataset(BaseModel):
    """
    AnnotatedDataset is a set holding annotations for data in a Dataset. Each labeling task will generate an AnnotatedDataset under the Dataset that the task is requested for.
    """ # noqa: E501
    annotation_source: Optional[StrictStr] = Field(default=None, description="Output only. Source of the annotation.", alias="annotationSource")
    annotation_type: Optional[StrictStr] = Field(default=None, description="Output only. Type of the annotation. It is specified when starting labeling task.", alias="annotationType")
    blocking_resources: Optional[List[StrictStr]] = Field(default=None, description="Output only. The names of any related resources that are blocking changes to the annotated dataset.", alias="blockingResources")
    completed_example_count: Optional[StrictStr] = Field(default=None, description="Output only. Number of examples that have annotation in the annotated dataset.", alias="completedExampleCount")
    create_time: Optional[StrictStr] = Field(default=None, description="Output only. Time the AnnotatedDataset was created.", alias="createTime")
    description: Optional[StrictStr] = Field(default=None, description="Output only. The description of the AnnotatedDataset. It is specified in HumanAnnotationConfig when user starts a labeling task. Maximum of 10000 characters.")
    display_name: Optional[StrictStr] = Field(default=None, description="Output only. The display name of the AnnotatedDataset. It is specified in HumanAnnotationConfig when user starts a labeling task. Maximum of 64 characters.", alias="displayName")
    example_count: Optional[StrictStr] = Field(default=None, description="Output only. Number of examples in the annotated dataset.", alias="exampleCount")
    label_stats: Optional[GoogleCloudDatalabelingV1beta1LabelStats] = Field(default=None, alias="labelStats")
    metadata: Optional[GoogleCloudDatalabelingV1beta1AnnotatedDatasetMetadata] = None
    name: Optional[StrictStr] = Field(default=None, description="Output only. AnnotatedDataset resource name in format of: projects/{project_id}/datasets/{dataset_id}/annotatedDatasets/ {annotated_dataset_id}")
    __properties: ClassVar[List[str]] = ["annotationSource", "annotationType", "blockingResources", "completedExampleCount", "createTime", "description", "displayName", "exampleCount", "labelStats", "metadata", "name"]

    @field_validator('annotation_source')
    def annotation_source_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['ANNOTATION_SOURCE_UNSPECIFIED', 'OPERATOR']):
            raise ValueError("must be one of enum values ('ANNOTATION_SOURCE_UNSPECIFIED', 'OPERATOR')")
        return value

    @field_validator('annotation_type')
    def annotation_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['ANNOTATION_TYPE_UNSPECIFIED', 'IMAGE_CLASSIFICATION_ANNOTATION', 'IMAGE_BOUNDING_BOX_ANNOTATION', 'IMAGE_ORIENTED_BOUNDING_BOX_ANNOTATION', 'IMAGE_BOUNDING_POLY_ANNOTATION', 'IMAGE_POLYLINE_ANNOTATION', 'IMAGE_SEGMENTATION_ANNOTATION', 'VIDEO_SHOTS_CLASSIFICATION_ANNOTATION', 'VIDEO_OBJECT_TRACKING_ANNOTATION', 'VIDEO_OBJECT_DETECTION_ANNOTATION', 'VIDEO_EVENT_ANNOTATION', 'TEXT_CLASSIFICATION_ANNOTATION', 'TEXT_ENTITY_EXTRACTION_ANNOTATION', 'GENERAL_CLASSIFICATION_ANNOTATION']):
            raise ValueError("must be one of enum values ('ANNOTATION_TYPE_UNSPECIFIED', 'IMAGE_CLASSIFICATION_ANNOTATION', 'IMAGE_BOUNDING_BOX_ANNOTATION', 'IMAGE_ORIENTED_BOUNDING_BOX_ANNOTATION', 'IMAGE_BOUNDING_POLY_ANNOTATION', 'IMAGE_POLYLINE_ANNOTATION', 'IMAGE_SEGMENTATION_ANNOTATION', 'VIDEO_SHOTS_CLASSIFICATION_ANNOTATION', 'VIDEO_OBJECT_TRACKING_ANNOTATION', 'VIDEO_OBJECT_DETECTION_ANNOTATION', 'VIDEO_EVENT_ANNOTATION', 'TEXT_CLASSIFICATION_ANNOTATION', 'TEXT_ENTITY_EXTRACTION_ANNOTATION', 'GENERAL_CLASSIFICATION_ANNOTATION')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudDatalabelingV1beta1AnnotatedDataset from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of label_stats
        if self.label_stats:
            _dict['labelStats'] = self.label_stats.to_dict()
        # override the default output from pydantic by calling `to_dict()` of metadata
        if self.metadata:
            _dict['metadata'] = self.metadata.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudDatalabelingV1beta1AnnotatedDataset from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "annotationSource": obj.get("annotationSource"),
            "annotationType": obj.get("annotationType"),
            "blockingResources": obj.get("blockingResources"),
            "completedExampleCount": obj.get("completedExampleCount"),
            "createTime": obj.get("createTime"),
            "description": obj.get("description"),
            "displayName": obj.get("displayName"),
            "exampleCount": obj.get("exampleCount"),
            "labelStats": GoogleCloudDatalabelingV1beta1LabelStats.from_dict(obj["labelStats"]) if obj.get("labelStats") is not None else None,
            "metadata": GoogleCloudDatalabelingV1beta1AnnotatedDatasetMetadata.from_dict(obj["metadata"]) if obj.get("metadata") is not None else None,
            "name": obj.get("name")
        })
        return _obj



# coding: utf-8

"""
    Data Labeling API

    Public API for Google Cloud AI Data Labeling Service.

    The version of the OpenAPI document: v1beta1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_cloud_datalabeling_v1beta1_output_config import GoogleCloudDatalabelingV1beta1OutputConfig
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudDatalabelingV1beta1ExportDataRequest(BaseModel):
    """
    Request message for ExportData API.
    """ # noqa: E501
    annotated_dataset: Optional[StrictStr] = Field(default=None, description="Required. Annotated dataset resource name. DataItem in Dataset and their annotations in specified annotated dataset will be exported. It's in format of projects/{project_id}/datasets/{dataset_id}/annotatedDatasets/ {annotated_dataset_id}", alias="annotatedDataset")
    filter: Optional[StrictStr] = Field(default=None, description="Optional. Filter is not supported at this moment.")
    output_config: Optional[GoogleCloudDatalabelingV1beta1OutputConfig] = Field(default=None, alias="outputConfig")
    user_email_address: Optional[StrictStr] = Field(default=None, description="Email of the user who started the export task and should be notified by email. If empty no notification will be sent.", alias="userEmailAddress")
    __properties: ClassVar[List[str]] = ["annotatedDataset", "filter", "outputConfig", "userEmailAddress"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudDatalabelingV1beta1ExportDataRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of output_config
        if self.output_config:
            _dict['outputConfig'] = self.output_config.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudDatalabelingV1beta1ExportDataRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "annotatedDataset": obj.get("annotatedDataset"),
            "filter": obj.get("filter"),
            "outputConfig": GoogleCloudDatalabelingV1beta1OutputConfig.from_dict(obj["outputConfig"]) if obj.get("outputConfig") is not None else None,
            "userEmailAddress": obj.get("userEmailAddress")
        })
        return _obj



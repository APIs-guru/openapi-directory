# coding: utf-8

"""
    Data Labeling API

    Public API for Google Cloud AI Data Labeling Service.

    The version of the OpenAPI document: v1beta1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_cloud_datalabeling_v1beta1_image_bounding_poly_annotation import GoogleCloudDatalabelingV1beta1ImageBoundingPolyAnnotation
from openapi_client.models.google_cloud_datalabeling_v1beta1_image_classification_annotation import GoogleCloudDatalabelingV1beta1ImageClassificationAnnotation
from openapi_client.models.google_cloud_datalabeling_v1beta1_image_polyline_annotation import GoogleCloudDatalabelingV1beta1ImagePolylineAnnotation
from openapi_client.models.google_cloud_datalabeling_v1beta1_image_segmentation_annotation import GoogleCloudDatalabelingV1beta1ImageSegmentationAnnotation
from openapi_client.models.google_cloud_datalabeling_v1beta1_text_classification_annotation import GoogleCloudDatalabelingV1beta1TextClassificationAnnotation
from openapi_client.models.google_cloud_datalabeling_v1beta1_text_entity_extraction_annotation import GoogleCloudDatalabelingV1beta1TextEntityExtractionAnnotation
from openapi_client.models.google_cloud_datalabeling_v1beta1_video_classification_annotation import GoogleCloudDatalabelingV1beta1VideoClassificationAnnotation
from openapi_client.models.google_cloud_datalabeling_v1beta1_video_event_annotation import GoogleCloudDatalabelingV1beta1VideoEventAnnotation
from openapi_client.models.google_cloud_datalabeling_v1beta1_video_object_tracking_annotation import GoogleCloudDatalabelingV1beta1VideoObjectTrackingAnnotation
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudDatalabelingV1beta1AnnotationValue(BaseModel):
    """
    Annotation value for an example.
    """ # noqa: E501
    image_bounding_poly_annotation: Optional[GoogleCloudDatalabelingV1beta1ImageBoundingPolyAnnotation] = Field(default=None, alias="imageBoundingPolyAnnotation")
    image_classification_annotation: Optional[GoogleCloudDatalabelingV1beta1ImageClassificationAnnotation] = Field(default=None, alias="imageClassificationAnnotation")
    image_polyline_annotation: Optional[GoogleCloudDatalabelingV1beta1ImagePolylineAnnotation] = Field(default=None, alias="imagePolylineAnnotation")
    image_segmentation_annotation: Optional[GoogleCloudDatalabelingV1beta1ImageSegmentationAnnotation] = Field(default=None, alias="imageSegmentationAnnotation")
    text_classification_annotation: Optional[GoogleCloudDatalabelingV1beta1TextClassificationAnnotation] = Field(default=None, alias="textClassificationAnnotation")
    text_entity_extraction_annotation: Optional[GoogleCloudDatalabelingV1beta1TextEntityExtractionAnnotation] = Field(default=None, alias="textEntityExtractionAnnotation")
    video_classification_annotation: Optional[GoogleCloudDatalabelingV1beta1VideoClassificationAnnotation] = Field(default=None, alias="videoClassificationAnnotation")
    video_event_annotation: Optional[GoogleCloudDatalabelingV1beta1VideoEventAnnotation] = Field(default=None, alias="videoEventAnnotation")
    video_object_tracking_annotation: Optional[GoogleCloudDatalabelingV1beta1VideoObjectTrackingAnnotation] = Field(default=None, alias="videoObjectTrackingAnnotation")
    __properties: ClassVar[List[str]] = ["imageBoundingPolyAnnotation", "imageClassificationAnnotation", "imagePolylineAnnotation", "imageSegmentationAnnotation", "textClassificationAnnotation", "textEntityExtractionAnnotation", "videoClassificationAnnotation", "videoEventAnnotation", "videoObjectTrackingAnnotation"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudDatalabelingV1beta1AnnotationValue from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of image_bounding_poly_annotation
        if self.image_bounding_poly_annotation:
            _dict['imageBoundingPolyAnnotation'] = self.image_bounding_poly_annotation.to_dict()
        # override the default output from pydantic by calling `to_dict()` of image_classification_annotation
        if self.image_classification_annotation:
            _dict['imageClassificationAnnotation'] = self.image_classification_annotation.to_dict()
        # override the default output from pydantic by calling `to_dict()` of image_polyline_annotation
        if self.image_polyline_annotation:
            _dict['imagePolylineAnnotation'] = self.image_polyline_annotation.to_dict()
        # override the default output from pydantic by calling `to_dict()` of image_segmentation_annotation
        if self.image_segmentation_annotation:
            _dict['imageSegmentationAnnotation'] = self.image_segmentation_annotation.to_dict()
        # override the default output from pydantic by calling `to_dict()` of text_classification_annotation
        if self.text_classification_annotation:
            _dict['textClassificationAnnotation'] = self.text_classification_annotation.to_dict()
        # override the default output from pydantic by calling `to_dict()` of text_entity_extraction_annotation
        if self.text_entity_extraction_annotation:
            _dict['textEntityExtractionAnnotation'] = self.text_entity_extraction_annotation.to_dict()
        # override the default output from pydantic by calling `to_dict()` of video_classification_annotation
        if self.video_classification_annotation:
            _dict['videoClassificationAnnotation'] = self.video_classification_annotation.to_dict()
        # override the default output from pydantic by calling `to_dict()` of video_event_annotation
        if self.video_event_annotation:
            _dict['videoEventAnnotation'] = self.video_event_annotation.to_dict()
        # override the default output from pydantic by calling `to_dict()` of video_object_tracking_annotation
        if self.video_object_tracking_annotation:
            _dict['videoObjectTrackingAnnotation'] = self.video_object_tracking_annotation.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudDatalabelingV1beta1AnnotationValue from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "imageBoundingPolyAnnotation": GoogleCloudDatalabelingV1beta1ImageBoundingPolyAnnotation.from_dict(obj["imageBoundingPolyAnnotation"]) if obj.get("imageBoundingPolyAnnotation") is not None else None,
            "imageClassificationAnnotation": GoogleCloudDatalabelingV1beta1ImageClassificationAnnotation.from_dict(obj["imageClassificationAnnotation"]) if obj.get("imageClassificationAnnotation") is not None else None,
            "imagePolylineAnnotation": GoogleCloudDatalabelingV1beta1ImagePolylineAnnotation.from_dict(obj["imagePolylineAnnotation"]) if obj.get("imagePolylineAnnotation") is not None else None,
            "imageSegmentationAnnotation": GoogleCloudDatalabelingV1beta1ImageSegmentationAnnotation.from_dict(obj["imageSegmentationAnnotation"]) if obj.get("imageSegmentationAnnotation") is not None else None,
            "textClassificationAnnotation": GoogleCloudDatalabelingV1beta1TextClassificationAnnotation.from_dict(obj["textClassificationAnnotation"]) if obj.get("textClassificationAnnotation") is not None else None,
            "textEntityExtractionAnnotation": GoogleCloudDatalabelingV1beta1TextEntityExtractionAnnotation.from_dict(obj["textEntityExtractionAnnotation"]) if obj.get("textEntityExtractionAnnotation") is not None else None,
            "videoClassificationAnnotation": GoogleCloudDatalabelingV1beta1VideoClassificationAnnotation.from_dict(obj["videoClassificationAnnotation"]) if obj.get("videoClassificationAnnotation") is not None else None,
            "videoEventAnnotation": GoogleCloudDatalabelingV1beta1VideoEventAnnotation.from_dict(obj["videoEventAnnotation"]) if obj.get("videoEventAnnotation") is not None else None,
            "videoObjectTrackingAnnotation": GoogleCloudDatalabelingV1beta1VideoObjectTrackingAnnotation.from_dict(obj["videoObjectTrackingAnnotation"]) if obj.get("videoObjectTrackingAnnotation") is not None else None
        })
        return _obj



# coding: utf-8

"""
    Data Labeling API

    Public API for Google Cloud AI Data Labeling Service.

    The version of the OpenAPI document: v1beta1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_cloud_datalabeling_v1beta1_annotation import GoogleCloudDatalabelingV1beta1Annotation
from openapi_client.models.google_cloud_datalabeling_v1beta1_image_payload import GoogleCloudDatalabelingV1beta1ImagePayload
from openapi_client.models.google_cloud_datalabeling_v1beta1_text_payload import GoogleCloudDatalabelingV1beta1TextPayload
from openapi_client.models.google_cloud_datalabeling_v1beta1_video_payload import GoogleCloudDatalabelingV1beta1VideoPayload
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudDatalabelingV1beta1Example(BaseModel):
    """
    An Example is a piece of data and its annotation. For example, an image with label \"house\".
    """ # noqa: E501
    annotations: Optional[List[GoogleCloudDatalabelingV1beta1Annotation]] = Field(default=None, description="Output only. Annotations for the piece of data in Example. One piece of data can have multiple annotations.")
    image_payload: Optional[GoogleCloudDatalabelingV1beta1ImagePayload] = Field(default=None, alias="imagePayload")
    name: Optional[StrictStr] = Field(default=None, description="Output only. Name of the example, in format of: projects/{project_id}/datasets/{dataset_id}/annotatedDatasets/ {annotated_dataset_id}/examples/{example_id}")
    text_payload: Optional[GoogleCloudDatalabelingV1beta1TextPayload] = Field(default=None, alias="textPayload")
    video_payload: Optional[GoogleCloudDatalabelingV1beta1VideoPayload] = Field(default=None, alias="videoPayload")
    __properties: ClassVar[List[str]] = ["annotations", "imagePayload", "name", "textPayload", "videoPayload"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudDatalabelingV1beta1Example from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in annotations (list)
        _items = []
        if self.annotations:
            for _item_annotations in self.annotations:
                if _item_annotations:
                    _items.append(_item_annotations.to_dict())
            _dict['annotations'] = _items
        # override the default output from pydantic by calling `to_dict()` of image_payload
        if self.image_payload:
            _dict['imagePayload'] = self.image_payload.to_dict()
        # override the default output from pydantic by calling `to_dict()` of text_payload
        if self.text_payload:
            _dict['textPayload'] = self.text_payload.to_dict()
        # override the default output from pydantic by calling `to_dict()` of video_payload
        if self.video_payload:
            _dict['videoPayload'] = self.video_payload.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudDatalabelingV1beta1Example from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "annotations": [GoogleCloudDatalabelingV1beta1Annotation.from_dict(_item) for _item in obj["annotations"]] if obj.get("annotations") is not None else None,
            "imagePayload": GoogleCloudDatalabelingV1beta1ImagePayload.from_dict(obj["imagePayload"]) if obj.get("imagePayload") is not None else None,
            "name": obj.get("name"),
            "textPayload": GoogleCloudDatalabelingV1beta1TextPayload.from_dict(obj["textPayload"]) if obj.get("textPayload") is not None else None,
            "videoPayload": GoogleCloudDatalabelingV1beta1VideoPayload.from_dict(obj["videoPayload"]) if obj.get("videoPayload") is not None else None
        })
        return _obj



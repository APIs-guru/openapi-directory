# coding: utf-8

"""
    Data Labeling API

    Public API for Google Cloud AI Data Labeling Service.

    The version of the OpenAPI document: v1beta1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.google_cloud_datalabeling_v1beta1_input_config import GoogleCloudDatalabelingV1beta1InputConfig
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudDatalabelingV1beta1Dataset(BaseModel):
    """
    Dataset is the resource to hold your data. You can request multiple labeling tasks for a dataset while each one will generate an AnnotatedDataset.
    """ # noqa: E501
    blocking_resources: Optional[List[StrictStr]] = Field(default=None, description="Output only. The names of any related resources that are blocking changes to the dataset.", alias="blockingResources")
    create_time: Optional[StrictStr] = Field(default=None, description="Output only. Time the dataset is created.", alias="createTime")
    data_item_count: Optional[StrictStr] = Field(default=None, description="Output only. The number of data items in the dataset.", alias="dataItemCount")
    description: Optional[StrictStr] = Field(default=None, description="Optional. User-provided description of the annotation specification set. The description can be up to 10000 characters long.")
    display_name: Optional[StrictStr] = Field(default=None, description="Required. The display name of the dataset. Maximum of 64 characters.", alias="displayName")
    input_configs: Optional[List[GoogleCloudDatalabelingV1beta1InputConfig]] = Field(default=None, description="Output only. This is populated with the original input configs where ImportData is called. It is available only after the clients import data to this dataset.", alias="inputConfigs")
    last_migrate_time: Optional[StrictStr] = Field(default=None, description="Last time that the Dataset is migrated to AI Platform V2. If any of the AnnotatedDataset is migrated, the last_migration_time in Dataset is also updated.", alias="lastMigrateTime")
    name: Optional[StrictStr] = Field(default=None, description="Output only. Dataset resource name, format is: projects/{project_id}/datasets/{dataset_id}")
    __properties: ClassVar[List[str]] = ["blockingResources", "createTime", "dataItemCount", "description", "displayName", "inputConfigs", "lastMigrateTime", "name"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudDatalabelingV1beta1Dataset from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in input_configs (list)
        _items = []
        if self.input_configs:
            for _item_input_configs in self.input_configs:
                if _item_input_configs:
                    _items.append(_item_input_configs.to_dict())
            _dict['inputConfigs'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudDatalabelingV1beta1Dataset from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "blockingResources": obj.get("blockingResources"),
            "createTime": obj.get("createTime"),
            "dataItemCount": obj.get("dataItemCount"),
            "description": obj.get("description"),
            "displayName": obj.get("displayName"),
            "inputConfigs": [GoogleCloudDatalabelingV1beta1InputConfig.from_dict(_item) for _item in obj["inputConfigs"]] if obj.get("inputConfigs") is not None else None,
            "lastMigrateTime": obj.get("lastMigrateTime"),
            "name": obj.get("name")
        })
        return _obj



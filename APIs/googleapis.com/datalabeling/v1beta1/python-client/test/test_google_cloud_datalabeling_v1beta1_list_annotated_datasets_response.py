# coding: utf-8

"""
    Data Labeling API

    Public API for Google Cloud AI Data Labeling Service.

    The version of the OpenAPI document: v1beta1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.google_cloud_datalabeling_v1beta1_list_annotated_datasets_response import GoogleCloudDatalabelingV1beta1ListAnnotatedDatasetsResponse

class TestGoogleCloudDatalabelingV1beta1ListAnnotatedDatasetsResponse(unittest.TestCase):
    """GoogleCloudDatalabelingV1beta1ListAnnotatedDatasetsResponse unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> GoogleCloudDatalabelingV1beta1ListAnnotatedDatasetsResponse:
        """Test GoogleCloudDatalabelingV1beta1ListAnnotatedDatasetsResponse
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `GoogleCloudDatalabelingV1beta1ListAnnotatedDatasetsResponse`
        """
        model = GoogleCloudDatalabelingV1beta1ListAnnotatedDatasetsResponse()
        if include_optional:
            return GoogleCloudDatalabelingV1beta1ListAnnotatedDatasetsResponse(
                annotated_datasets = [
                    openapi_client.models.google_cloud_datalabeling_v1beta1_annotated_dataset.GoogleCloudDatalabelingV1beta1AnnotatedDataset(
                        annotation_source = 'ANNOTATION_SOURCE_UNSPECIFIED', 
                        annotation_type = 'ANNOTATION_TYPE_UNSPECIFIED', 
                        blocking_resources = [
                            ''
                            ], 
                        completed_example_count = '', 
                        create_time = '', 
                        description = '', 
                        display_name = '', 
                        example_count = '', 
                        label_stats = openapi_client.models.google_cloud_datalabeling_v1beta1_label_stats.GoogleCloudDatalabelingV1beta1LabelStats(
                            example_count = {
                                'key' : ''
                                }, ), 
                        metadata = openapi_client.models.google_cloud_datalabeling_v1beta1_annotated_dataset_metadata.GoogleCloudDatalabelingV1beta1AnnotatedDatasetMetadata(
                            bounding_poly_config = openapi_client.models.google_cloud_datalabeling_v1beta1_bounding_poly_config.GoogleCloudDatalabelingV1beta1BoundingPolyConfig(
                                annotation_spec_set = '', 
                                instruction_message = '', ), 
                            event_config = openapi_client.models.google_cloud_datalabeling_v1beta1_event_config.GoogleCloudDatalabelingV1beta1EventConfig(
                                annotation_spec_sets = [
                                    ''
                                    ], 
                                clip_length = 56, 
                                overlap_length = 56, ), 
                            human_annotation_config = openapi_client.models.google_cloud_datalabeling_v1beta1_human_annotation_config.GoogleCloudDatalabelingV1beta1HumanAnnotationConfig(
                                annotated_dataset_description = '', 
                                annotated_dataset_display_name = '', 
                                contributor_emails = [
                                    ''
                                    ], 
                                instruction = '', 
                                label_group = '', 
                                language_code = '', 
                                question_duration = '', 
                                replica_count = 56, 
                                user_email_address = '', ), 
                            image_classification_config = openapi_client.models.google_cloud_datalabeling_v1beta1_image_classification_config.GoogleCloudDatalabelingV1beta1ImageClassificationConfig(
                                allow_multi_label = True, 
                                annotation_spec_set = '', 
                                answer_aggregation_type = 'STRING_AGGREGATION_TYPE_UNSPECIFIED', ), 
                            object_detection_config = openapi_client.models.google_cloud_datalabeling_v1beta1_object_detection_config.GoogleCloudDatalabelingV1beta1ObjectDetectionConfig(
                                annotation_spec_set = '', 
                                extraction_frame_rate = 1.337, ), 
                            object_tracking_config = openapi_client.models.google_cloud_datalabeling_v1beta1_object_tracking_config.GoogleCloudDatalabelingV1beta1ObjectTrackingConfig(
                                annotation_spec_set = '', 
                                clip_length = 56, 
                                overlap_length = 56, ), 
                            polyline_config = openapi_client.models.google_cloud_datalabeling_v1beta1_polyline_config.GoogleCloudDatalabelingV1beta1PolylineConfig(
                                annotation_spec_set = '', 
                                instruction_message = '', ), 
                            segmentation_config = openapi_client.models.google_cloud_datalabeling_v1beta1_segmentation_config.GoogleCloudDatalabelingV1beta1SegmentationConfig(
                                annotation_spec_set = '', 
                                instruction_message = '', ), 
                            text_classification_config = openapi_client.models.google_cloud_datalabeling_v1beta1_text_classification_config.GoogleCloudDatalabelingV1beta1TextClassificationConfig(
                                allow_multi_label = True, 
                                annotation_spec_set = '', 
                                sentiment_config = openapi_client.models.google_cloud_datalabeling_v1beta1_sentiment_config.GoogleCloudDatalabelingV1beta1SentimentConfig(
                                    enable_label_sentiment_selection = True, ), ), 
                            text_entity_extraction_config = openapi_client.models.google_cloud_datalabeling_v1beta1_text_entity_extraction_config.GoogleCloudDatalabelingV1beta1TextEntityExtractionConfig(
                                annotation_spec_set = '', ), 
                            video_classification_config = openapi_client.models.google_cloud_datalabeling_v1beta1_video_classification_config.GoogleCloudDatalabelingV1beta1VideoClassificationConfig(
                                annotation_spec_set_configs = [
                                    openapi_client.models.google_cloud_datalabeling_v1beta1_annotation_spec_set_config.GoogleCloudDatalabelingV1beta1AnnotationSpecSetConfig(
                                        allow_multi_label = True, 
                                        annotation_spec_set = '', )
                                    ], 
                                apply_shot_detection = True, ), ), 
                        name = '', )
                    ],
                next_page_token = ''
            )
        else:
            return GoogleCloudDatalabelingV1beta1ListAnnotatedDatasetsResponse(
        )
        """

    def testGoogleCloudDatalabelingV1beta1ListAnnotatedDatasetsResponse(self):
        """Test GoogleCloudDatalabelingV1beta1ListAnnotatedDatasetsResponse"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

# coding: utf-8

"""
    Data Labeling API

    Public API for Google Cloud AI Data Labeling Service.

    The version of the OpenAPI document: v1beta1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.google_cloud_datalabeling_v1beta1_evaluation_job_config import GoogleCloudDatalabelingV1beta1EvaluationJobConfig

class TestGoogleCloudDatalabelingV1beta1EvaluationJobConfig(unittest.TestCase):
    """GoogleCloudDatalabelingV1beta1EvaluationJobConfig unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> GoogleCloudDatalabelingV1beta1EvaluationJobConfig:
        """Test GoogleCloudDatalabelingV1beta1EvaluationJobConfig
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `GoogleCloudDatalabelingV1beta1EvaluationJobConfig`
        """
        model = GoogleCloudDatalabelingV1beta1EvaluationJobConfig()
        if include_optional:
            return GoogleCloudDatalabelingV1beta1EvaluationJobConfig(
                bigquery_import_keys = {
                    'key' : ''
                    },
                bounding_poly_config = openapi_client.models.google_cloud_datalabeling_v1beta1_bounding_poly_config.GoogleCloudDatalabelingV1beta1BoundingPolyConfig(
                    annotation_spec_set = '', 
                    instruction_message = '', ),
                evaluation_config = openapi_client.models.google_cloud_datalabeling_v1beta1_evaluation_config.GoogleCloudDatalabelingV1beta1EvaluationConfig(
                    bounding_box_evaluation_options = openapi_client.models.google_cloud_datalabeling_v1beta1_bounding_box_evaluation_options.GoogleCloudDatalabelingV1beta1BoundingBoxEvaluationOptions(
                        iou_threshold = 1.337, ), ),
                evaluation_job_alert_config = openapi_client.models.google_cloud_datalabeling_v1beta1_evaluation_job_alert_config.GoogleCloudDatalabelingV1beta1EvaluationJobAlertConfig(
                    email = '', 
                    min_acceptable_mean_average_precision = 1.337, ),
                example_count = 56,
                example_sample_percentage = 1.337,
                human_annotation_config = openapi_client.models.google_cloud_datalabeling_v1beta1_human_annotation_config.GoogleCloudDatalabelingV1beta1HumanAnnotationConfig(
                    annotated_dataset_description = '', 
                    annotated_dataset_display_name = '', 
                    contributor_emails = [
                        ''
                        ], 
                    instruction = '', 
                    label_group = '', 
                    language_code = '', 
                    question_duration = '', 
                    replica_count = 56, 
                    user_email_address = '', ),
                image_classification_config = openapi_client.models.google_cloud_datalabeling_v1beta1_image_classification_config.GoogleCloudDatalabelingV1beta1ImageClassificationConfig(
                    allow_multi_label = True, 
                    annotation_spec_set = '', 
                    answer_aggregation_type = 'STRING_AGGREGATION_TYPE_UNSPECIFIED', ),
                input_config = openapi_client.models.google_cloud_datalabeling_v1beta1_input_config.GoogleCloudDatalabelingV1beta1InputConfig(
                    annotation_type = 'ANNOTATION_TYPE_UNSPECIFIED', 
                    bigquery_source = openapi_client.models.google_cloud_datalabeling_v1beta1_big_query_source.GoogleCloudDatalabelingV1beta1BigQuerySource(
                        input_uri = '', ), 
                    classification_metadata = openapi_client.models.google_cloud_datalabeling_v1beta1_classification_metadata.GoogleCloudDatalabelingV1beta1ClassificationMetadata(
                        is_multi_label = True, ), 
                    data_type = 'DATA_TYPE_UNSPECIFIED', 
                    gcs_source = openapi_client.models.google_cloud_datalabeling_v1beta1_gcs_source.GoogleCloudDatalabelingV1beta1GcsSource(
                        input_uri = '', 
                        mime_type = '', ), 
                    text_metadata = openapi_client.models.google_cloud_datalabeling_v1beta1_text_metadata.GoogleCloudDatalabelingV1beta1TextMetadata(
                        language_code = '', ), ),
                text_classification_config = openapi_client.models.google_cloud_datalabeling_v1beta1_text_classification_config.GoogleCloudDatalabelingV1beta1TextClassificationConfig(
                    allow_multi_label = True, 
                    annotation_spec_set = '', 
                    sentiment_config = openapi_client.models.google_cloud_datalabeling_v1beta1_sentiment_config.GoogleCloudDatalabelingV1beta1SentimentConfig(
                        enable_label_sentiment_selection = True, ), )
            )
        else:
            return GoogleCloudDatalabelingV1beta1EvaluationJobConfig(
        )
        """

    def testGoogleCloudDatalabelingV1beta1EvaluationJobConfig(self):
        """Test GoogleCloudDatalabelingV1beta1EvaluationJobConfig"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

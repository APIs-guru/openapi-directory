# coding: utf-8

"""
    Analytics Reporting API

    Accesses Analytics report data.

    The version of the OpenAPI document: v4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.date_range import DateRange
from openapi_client.models.user import User
from typing import Optional, Set
from typing_extensions import Self

class SearchUserActivityRequest(BaseModel):
    """
    The request to fetch User Report from Reporting API `userActivity:get` call.
    """ # noqa: E501
    activity_types: Optional[List[StrictStr]] = Field(default=None, description="Set of all activity types being requested. Only acvities matching these types will be returned in the response. If empty, all activies will be returned.", alias="activityTypes")
    date_range: Optional[DateRange] = Field(default=None, alias="dateRange")
    page_size: Optional[StrictInt] = Field(default=None, description="Page size is for paging and specifies the maximum number of returned rows. Page size should be > 0. If the value is 0 or if the field isn't specified, the request returns the default of 1000 rows per page.", alias="pageSize")
    page_token: Optional[StrictStr] = Field(default=None, description="A continuation token to get the next page of the results. Adding this to the request will return the rows after the pageToken. The pageToken should be the value returned in the nextPageToken parameter in the response to the [SearchUserActivityRequest](#SearchUserActivityRequest) request.", alias="pageToken")
    user: Optional[User] = None
    view_id: Optional[StrictStr] = Field(default=None, description="Required. The Analytics [view ID](https://support.google.com/analytics/answer/1009618) from which to retrieve data. Every [SearchUserActivityRequest](#SearchUserActivityRequest) must contain the `viewId`.", alias="viewId")
    __properties: ClassVar[List[str]] = ["activityTypes", "dateRange", "pageSize", "pageToken", "user", "viewId"]

    @field_validator('activity_types')
    def activity_types_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        for i in value:
            if i not in set(['ACTIVITY_TYPE_UNSPECIFIED', 'PAGEVIEW', 'SCREENVIEW', 'GOAL', 'ECOMMERCE', 'EVENT']):
                raise ValueError("each list item must be one of ('ACTIVITY_TYPE_UNSPECIFIED', 'PAGEVIEW', 'SCREENVIEW', 'GOAL', 'ECOMMERCE', 'EVENT')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SearchUserActivityRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of date_range
        if self.date_range:
            _dict['dateRange'] = self.date_range.to_dict()
        # override the default output from pydantic by calling `to_dict()` of user
        if self.user:
            _dict['user'] = self.user.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SearchUserActivityRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "activityTypes": obj.get("activityTypes"),
            "dateRange": DateRange.from_dict(obj["dateRange"]) if obj.get("dateRange") is not None else None,
            "pageSize": obj.get("pageSize"),
            "pageToken": obj.get("pageToken"),
            "user": User.from_dict(obj["user"]) if obj.get("user") is not None else None,
            "viewId": obj.get("viewId")
        })
        return _obj



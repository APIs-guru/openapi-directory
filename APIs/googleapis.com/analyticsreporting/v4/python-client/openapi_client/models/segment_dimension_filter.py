# coding: utf-8

"""
    Analytics Reporting API

    Accesses Analytics report data.

    The version of the OpenAPI document: v4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class SegmentDimensionFilter(BaseModel):
    """
    Dimension filter specifies the filtering options on a dimension.
    """ # noqa: E501
    case_sensitive: Optional[StrictBool] = Field(default=None, description="Should the match be case sensitive, ignored for `IN_LIST` operator.", alias="caseSensitive")
    dimension_name: Optional[StrictStr] = Field(default=None, description="Name of the dimension for which the filter is being applied.", alias="dimensionName")
    expressions: Optional[List[StrictStr]] = Field(default=None, description="The list of expressions, only the first element is used for all operators")
    max_comparison_value: Optional[StrictStr] = Field(default=None, description="Maximum comparison values for `BETWEEN` match type.", alias="maxComparisonValue")
    min_comparison_value: Optional[StrictStr] = Field(default=None, description="Minimum comparison values for `BETWEEN` match type.", alias="minComparisonValue")
    operator: Optional[StrictStr] = Field(default=None, description="The operator to use to match the dimension with the expressions.")
    __properties: ClassVar[List[str]] = ["caseSensitive", "dimensionName", "expressions", "maxComparisonValue", "minComparisonValue", "operator"]

    @field_validator('operator')
    def operator_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['OPERATOR_UNSPECIFIED', 'REGEXP', 'BEGINS_WITH', 'ENDS_WITH', 'PARTIAL', 'EXACT', 'IN_LIST', 'NUMERIC_LESS_THAN', 'NUMERIC_GREATER_THAN', 'NUMERIC_BETWEEN']):
            raise ValueError("must be one of enum values ('OPERATOR_UNSPECIFIED', 'REGEXP', 'BEGINS_WITH', 'ENDS_WITH', 'PARTIAL', 'EXACT', 'IN_LIST', 'NUMERIC_LESS_THAN', 'NUMERIC_GREATER_THAN', 'NUMERIC_BETWEEN')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SegmentDimensionFilter from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SegmentDimensionFilter from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "caseSensitive": obj.get("caseSensitive"),
            "dimensionName": obj.get("dimensionName"),
            "expressions": obj.get("expressions"),
            "maxComparisonValue": obj.get("maxComparisonValue"),
            "minComparisonValue": obj.get("minComparisonValue"),
            "operator": obj.get("operator")
        })
        return _obj



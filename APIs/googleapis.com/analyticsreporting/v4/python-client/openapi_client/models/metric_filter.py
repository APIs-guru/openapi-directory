# coding: utf-8

"""
    Analytics Reporting API

    Accesses Analytics report data.

    The version of the OpenAPI document: v4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class MetricFilter(BaseModel):
    """
    MetricFilter specifies the filter on a metric.
    """ # noqa: E501
    comparison_value: Optional[StrictStr] = Field(default=None, description="The value to compare against.", alias="comparisonValue")
    metric_name: Optional[StrictStr] = Field(default=None, description="The metric that will be filtered on. A metricFilter must contain a metric name. A metric name can be an alias earlier defined as a metric or it can also be a metric expression.", alias="metricName")
    var_not: Optional[StrictBool] = Field(default=None, description="Logical `NOT` operator. If this boolean is set to true, then the matching metric values will be excluded in the report. The default is false.", alias="not")
    operator: Optional[StrictStr] = Field(default=None, description="Is the metric `EQUAL`, `LESS_THAN` or `GREATER_THAN` the comparisonValue, the default is `EQUAL`. If the operator is `IS_MISSING`, checks if the metric is missing and would ignore the comparisonValue.")
    __properties: ClassVar[List[str]] = ["comparisonValue", "metricName", "not", "operator"]

    @field_validator('operator')
    def operator_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['OPERATOR_UNSPECIFIED', 'EQUAL', 'LESS_THAN', 'GREATER_THAN', 'IS_MISSING']):
            raise ValueError("must be one of enum values ('OPERATOR_UNSPECIFIED', 'EQUAL', 'LESS_THAN', 'GREATER_THAN', 'IS_MISSING')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of MetricFilter from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of MetricFilter from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "comparisonValue": obj.get("comparisonValue"),
            "metricName": obj.get("metricName"),
            "not": obj.get("not"),
            "operator": obj.get("operator")
        })
        return _obj



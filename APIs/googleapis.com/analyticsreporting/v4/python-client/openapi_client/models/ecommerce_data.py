# coding: utf-8

"""
    Analytics Reporting API

    Accesses Analytics report data.

    The version of the OpenAPI document: v4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.product_data import ProductData
from openapi_client.models.transaction_data import TransactionData
from typing import Optional, Set
from typing_extensions import Self

class EcommerceData(BaseModel):
    """
    E-commerce details associated with the user activity.
    """ # noqa: E501
    action_type: Optional[StrictStr] = Field(default=None, description="Action associated with this e-commerce action.", alias="actionType")
    ecommerce_type: Optional[StrictStr] = Field(default=None, description="The type of this e-commerce activity.", alias="ecommerceType")
    products: Optional[List[ProductData]] = Field(default=None, description="Details of the products in this transaction.")
    transaction: Optional[TransactionData] = None
    __properties: ClassVar[List[str]] = ["actionType", "ecommerceType", "products", "transaction"]

    @field_validator('action_type')
    def action_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['UNKNOWN', 'CLICK', 'DETAILS_VIEW', 'ADD_TO_CART', 'REMOVE_FROM_CART', 'CHECKOUT', 'PAYMENT', 'REFUND', 'CHECKOUT_OPTION']):
            raise ValueError("must be one of enum values ('UNKNOWN', 'CLICK', 'DETAILS_VIEW', 'ADD_TO_CART', 'REMOVE_FROM_CART', 'CHECKOUT', 'PAYMENT', 'REFUND', 'CHECKOUT_OPTION')")
        return value

    @field_validator('ecommerce_type')
    def ecommerce_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['ECOMMERCE_TYPE_UNSPECIFIED', 'CLASSIC', 'ENHANCED']):
            raise ValueError("must be one of enum values ('ECOMMERCE_TYPE_UNSPECIFIED', 'CLASSIC', 'ENHANCED')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of EcommerceData from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in products (list)
        _items = []
        if self.products:
            for _item_products in self.products:
                if _item_products:
                    _items.append(_item_products.to_dict())
            _dict['products'] = _items
        # override the default output from pydantic by calling `to_dict()` of transaction
        if self.transaction:
            _dict['transaction'] = self.transaction.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of EcommerceData from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "actionType": obj.get("actionType"),
            "ecommerceType": obj.get("ecommerceType"),
            "products": [ProductData.from_dict(_item) for _item in obj["products"]] if obj.get("products") is not None else None,
            "transaction": TransactionData.from_dict(obj["transaction"]) if obj.get("transaction") is not None else None
        })
        return _obj



# coding: utf-8

"""
    Analytics Reporting API

    Accesses Analytics report data.

    The version of the OpenAPI document: v4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class GoalData(BaseModel):
    """
    Represents all the details pertaining to a goal.
    """ # noqa: E501
    goal_completion_location: Optional[StrictStr] = Field(default=None, description="URL of the page where this goal was completed.", alias="goalCompletionLocation")
    goal_completions: Optional[StrictStr] = Field(default=None, description="Total number of goal completions in this activity.", alias="goalCompletions")
    goal_index: Optional[StrictInt] = Field(default=None, description="This identifies the goal as configured for the profile.", alias="goalIndex")
    goal_name: Optional[StrictStr] = Field(default=None, description="Name of the goal.", alias="goalName")
    goal_previous_step1: Optional[StrictStr] = Field(default=None, description="URL of the page one step prior to the goal completion.", alias="goalPreviousStep1")
    goal_previous_step2: Optional[StrictStr] = Field(default=None, description="URL of the page two steps prior to the goal completion.", alias="goalPreviousStep2")
    goal_previous_step3: Optional[StrictStr] = Field(default=None, description="URL of the page three steps prior to the goal completion.", alias="goalPreviousStep3")
    goal_value: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Value in this goal.", alias="goalValue")
    __properties: ClassVar[List[str]] = ["goalCompletionLocation", "goalCompletions", "goalIndex", "goalName", "goalPreviousStep1", "goalPreviousStep2", "goalPreviousStep3", "goalValue"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoalData from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoalData from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "goalCompletionLocation": obj.get("goalCompletionLocation"),
            "goalCompletions": obj.get("goalCompletions"),
            "goalIndex": obj.get("goalIndex"),
            "goalName": obj.get("goalName"),
            "goalPreviousStep1": obj.get("goalPreviousStep1"),
            "goalPreviousStep2": obj.get("goalPreviousStep2"),
            "goalPreviousStep3": obj.get("goalPreviousStep3"),
            "goalValue": obj.get("goalValue")
        })
        return _obj



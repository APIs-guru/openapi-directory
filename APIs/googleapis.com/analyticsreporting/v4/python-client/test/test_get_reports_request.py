# coding: utf-8

"""
    Analytics Reporting API

    Accesses Analytics report data.

    The version of the OpenAPI document: v4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.get_reports_request import GetReportsRequest

class TestGetReportsRequest(unittest.TestCase):
    """GetReportsRequest unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> GetReportsRequest:
        """Test GetReportsRequest
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `GetReportsRequest`
        """
        model = GetReportsRequest()
        if include_optional:
            return GetReportsRequest(
                report_requests = [
                    openapi_client.models.report_request.ReportRequest(
                        cohort_group = openapi_client.models.cohort_group.CohortGroup(
                            cohorts = [
                                openapi_client.models.cohort.Cohort(
                                    date_range = openapi_client.models.date_range.DateRange(
                                        end_date = '', 
                                        start_date = '', ), 
                                    name = '', 
                                    type = 'UNSPECIFIED_COHORT_TYPE', )
                                ], 
                            lifetime_value = True, ), 
                        date_ranges = [
                            openapi_client.models.date_range.DateRange(
                                end_date = '', 
                                start_date = '', )
                            ], 
                        dimension_filter_clauses = [
                            openapi_client.models.dimension_filter_clause.DimensionFilterClause(
                                filters = [
                                    openapi_client.models.dimension_filter.DimensionFilter(
                                        case_sensitive = True, 
                                        dimension_name = '', 
                                        expressions = [
                                            ''
                                            ], 
                                        not = True, 
                                        operator = 'OPERATOR_UNSPECIFIED', )
                                    ], 
                                operator = 'OPERATOR_UNSPECIFIED', )
                            ], 
                        dimensions = [
                            openapi_client.models.dimension.Dimension(
                                histogram_buckets = [
                                    ''
                                    ], 
                                name = '', )
                            ], 
                        filters_expression = '', 
                        hide_totals = True, 
                        hide_value_ranges = True, 
                        include_empty_rows = True, 
                        metric_filter_clauses = [
                            openapi_client.models.metric_filter_clause.MetricFilterClause(
                                operator = 'OPERATOR_UNSPECIFIED', )
                            ], 
                        metrics = [
                            openapi_client.models.metric.Metric(
                                alias = '', 
                                expression = '', 
                                formatting_type = 'METRIC_TYPE_UNSPECIFIED', )
                            ], 
                        order_bys = [
                            openapi_client.models.order_by.OrderBy(
                                field_name = '', 
                                order_type = 'ORDER_TYPE_UNSPECIFIED', 
                                sort_order = 'SORT_ORDER_UNSPECIFIED', )
                            ], 
                        page_size = 56, 
                        page_token = '', 
                        pivots = [
                            openapi_client.models.pivot.Pivot(
                                max_group_count = 56, 
                                start_group = 56, )
                            ], 
                        sampling_level = 'SAMPLING_UNSPECIFIED', 
                        segments = [
                            openapi_client.models.segment.Segment(
                                dynamic_segment = openapi_client.models.dynamic_segment.DynamicSegment(
                                    name = '', 
                                    session_segment = openapi_client.models.segment_definition.SegmentDefinition(
                                        segment_filters = [
                                            openapi_client.models.segment_filter.SegmentFilter(
                                                not = True, 
                                                sequence_segment = openapi_client.models.sequence_segment.SequenceSegment(
                                                    first_step_should_match_first_hit = True, 
                                                    segment_sequence_steps = [
                                                        openapi_client.models.segment_sequence_step.SegmentSequenceStep(
                                                            match_type = 'UNSPECIFIED_MATCH_TYPE', 
                                                            or_filters_for_segment = [
                                                                openapi_client.models.or_filters_for_segment.OrFiltersForSegment(
                                                                    segment_filter_clauses = [
                                                                        openapi_client.models.segment_filter_clause.SegmentFilterClause(
                                                                            dimension_filter = openapi_client.models.segment_dimension_filter.SegmentDimensionFilter(
                                                                                case_sensitive = True, 
                                                                                dimension_name = '', 
                                                                                max_comparison_value = '', 
                                                                                min_comparison_value = '', 
                                                                                operator = 'OPERATOR_UNSPECIFIED', ), 
                                                                            metric_filter = openapi_client.models.segment_metric_filter.SegmentMetricFilter(
                                                                                comparison_value = '', 
                                                                                max_comparison_value = '', 
                                                                                metric_name = '', 
                                                                                operator = 'UNSPECIFIED_OPERATOR', 
                                                                                scope = 'UNSPECIFIED_SCOPE', ), 
                                                                            not = True, )
                                                                        ], )
                                                                ], )
                                                        ], ), 
                                                simple_segment = openapi_client.models.simple_segment.SimpleSegment(), )
                                            ], ), 
                                    user_segment = openapi_client.models.segment_definition.SegmentDefinition(), ), 
                                segment_id = '', )
                            ], 
                        view_id = '', )
                    ],
                use_resource_quotas = True
            )
        else:
            return GetReportsRequest(
        )
        """

    def testGetReportsRequest(self):
        """Test GetReportsRequest"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

# coding: utf-8

"""
    Analytics Reporting API

    Accesses Analytics report data.

    The version of the OpenAPI document: v4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.segment_filter_clause import SegmentFilterClause

class TestSegmentFilterClause(unittest.TestCase):
    """SegmentFilterClause unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> SegmentFilterClause:
        """Test SegmentFilterClause
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `SegmentFilterClause`
        """
        model = SegmentFilterClause()
        if include_optional:
            return SegmentFilterClause(
                dimension_filter = openapi_client.models.segment_dimension_filter.SegmentDimensionFilter(
                    case_sensitive = True, 
                    dimension_name = '', 
                    expressions = [
                        ''
                        ], 
                    max_comparison_value = '', 
                    min_comparison_value = '', 
                    operator = 'OPERATOR_UNSPECIFIED', ),
                metric_filter = openapi_client.models.segment_metric_filter.SegmentMetricFilter(
                    comparison_value = '', 
                    max_comparison_value = '', 
                    metric_name = '', 
                    operator = 'UNSPECIFIED_OPERATOR', 
                    scope = 'UNSPECIFIED_SCOPE', ),
                var_not = True
            )
        else:
            return SegmentFilterClause(
        )
        """

    def testSegmentFilterClause(self):
        """Test SegmentFilterClause"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

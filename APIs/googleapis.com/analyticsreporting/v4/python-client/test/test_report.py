# coding: utf-8

"""
    Analytics Reporting API

    Accesses Analytics report data.

    The version of the OpenAPI document: v4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.report import Report

class TestReport(unittest.TestCase):
    """Report unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> Report:
        """Test Report
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `Report`
        """
        model = Report()
        if include_optional:
            return Report(
                column_header = openapi_client.models.column_header.ColumnHeader(
                    dimensions = [
                        ''
                        ], 
                    metric_header = openapi_client.models.metric_header.MetricHeader(
                        metric_header_entries = [
                            openapi_client.models.metric_header_entry.MetricHeaderEntry(
                                name = '', 
                                type = 'METRIC_TYPE_UNSPECIFIED', )
                            ], 
                        pivot_headers = [
                            openapi_client.models.pivot_header.PivotHeader(
                                pivot_header_entries = [
                                    openapi_client.models.pivot_header_entry.PivotHeaderEntry(
                                        dimension_names = [
                                            ''
                                            ], 
                                        dimension_values = [
                                            ''
                                            ], 
                                        metric = openapi_client.models.metric_header_entry.MetricHeaderEntry(
                                            name = '', 
                                            type = 'METRIC_TYPE_UNSPECIFIED', ), )
                                    ], 
                                total_pivot_groups_count = 56, )
                            ], ), ),
                data = openapi_client.models.report_data.ReportData(
                    data_last_refreshed = '', 
                    empty_reason = '', 
                    is_data_golden = True, 
                    maximums = [
                        openapi_client.models.date_range_values.DateRangeValues(
                            pivot_value_regions = [
                                openapi_client.models.pivot_value_region.PivotValueRegion(
                                    values = [
                                        ''
                                        ], )
                                ], 
                            values = [
                                ''
                                ], )
                        ], 
                    minimums = [
                        openapi_client.models.date_range_values.DateRangeValues()
                        ], 
                    row_count = 56, 
                    rows = [
                        openapi_client.models.report_row.ReportRow(
                            dimensions = [
                                ''
                                ], 
                            metrics = [
                                
                                ], )
                        ], 
                    samples_read_counts = [
                        ''
                        ], 
                    sampling_space_sizes = [
                        ''
                        ], 
                    totals = [
                        
                        ], ),
                next_page_token = ''
            )
        else:
            return Report(
        )
        """

    def testReport(self):
        """Test Report"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
